import{_ as o,a as d,b as E}from"./chunks/wasm-1-9-0-size-improvements.B8FiXYUf.js";import{_ as c,C as n,c as g,o as y,ag as t,G as l,j as i,w as e,a}from"./chunks/framework.Bksy39di.js";const K=JSON.parse('{"title":"Kotlin 1.9.0 的新功能","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/whatsnew19.md","filePath":"zh-Hant/kotlin/whatsnew19.md","lastUpdated":1754307826000}'),u={name:"zh-Hant/kotlin/whatsnew19.md"};function F(m,s,b,C,v,f){const p=n("YouTubeVideo"),k=n("anchor"),h=n("tab"),r=n("tabs");return y(),g("div",null,[s[2]||(s[2]=t('<h1 id="kotlin-1-9-0-的新功能" tabindex="-1">Kotlin 1.9.0 的新功能 <a class="header-anchor" href="#kotlin-1-9-0-的新功能" aria-label="Permalink to &quot;Kotlin 1.9.0 的新功能&quot;">​</a></h1><p><a href="/zh-Hant/kotlin/releases#release-details">發佈日期：2023 年 7 月 6 日</a></p><p>Kotlin 1.9.0 版本已推出，且 JVM 的 K2 編譯器現已進入 <strong>Beta</strong> 階段。此外，以下是一些主要的亮點：</p><ul><li><a href="#new-kotlin-k2-compiler-updates">新的 Kotlin K2 編譯器更新</a></li><li><a href="#stable-replacement-of-the-enum-class-values-function">列舉類別 <code>values</code> 函式的穩定替代方案</a></li><li><a href="#stable-operator-for-open-ended-ranges">用於開放範圍的穩定 <code>..&lt;</code> 運算子</a></li><li><a href="#new-common-function-to-get-regex-capture-group-by-name">根據名稱取得正規表達式捕獲群組的新共同函式</a></li><li><a href="#new-path-utility-to-create-parent-directories">建立父目錄的新路徑工具程式</a></li><li><a href="#preview-of-the-gradle-configuration-cache">Kotlin Multiplatform 中 Gradle 配置快取的預覽</a></li><li><a href="#changes-to-android-target-support">Kotlin Multiplatform 中 Android 目標支援的變更</a></li><li><a href="#preview-of-custom-memory-allocator">Kotlin/Native 中自訂記憶體分配器的預覽</a></li><li><a href="#library-linkage-in-kotlin-native">Kotlin/Native 中的函式庫連結</a></li><li><a href="#size-related-optimizations">Kotlin/Wasm 中與大小相關的優化</a></li></ul><p>您也可以在這段影片中找到更新的簡要概述：</p>',5)),l(p,{src:"https://www.youtube.com/v/fvwTZc-dxsM",title:"What's new in Kotlin 1.9.0"}),s[3]||(s[3]=t(`<h2 id="ide-支援" tabindex="-1">IDE 支援 <a class="header-anchor" href="#ide-支援" aria-label="Permalink to &quot;IDE 支援&quot;">​</a></h2><p>支援 1.9.0 的 Kotlin 外掛程式適用於：</p><table tabindex="0"><thead><tr><th style="text-align:left;">IDE</th><th style="text-align:left;">支援的版本</th></tr></thead><tbody><tr><td style="text-align:left;">IntelliJ IDEA</td><td style="text-align:left;">2022.3.x, 2023.1.x</td></tr><tr><td style="text-align:left;">Android Studio</td><td style="text-align:left;">Giraffe (223), Hedgehog (231)*</td></tr></tbody></table><p>*Kotlin 1.9.0 外掛程式將包含在 Android Studio Giraffe (223) 和 Hedgehog (231) 的即將發佈版本中。</p><p>Kotlin 1.9.0 外掛程式將包含在 IntelliJ IDEA 2023.2 的即將發佈版本中。</p><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>若要下載 Kotlin 成品與依賴項，請<a href="#configure-gradle-settings">配置您的 Gradle 設定</a>以使用 Maven Central Repository。</p></div><h2 id="新的-kotlin-k2-編譯器更新" tabindex="-1">新的 Kotlin K2 編譯器更新 <a class="header-anchor" href="#新的-kotlin-k2-編譯器更新" aria-label="Permalink to &quot;新的 Kotlin K2 編譯器更新&quot;">​</a></h2><p>JetBrains 的 Kotlin 團隊持續穩定 K2 編譯器，而 1.9.0 版本引入了進一步的改進。 JVM 的 K2 編譯器現已進入 <strong>Beta</strong> 階段。</p><p>現在也對 Kotlin/Native 和多平台專案提供了基本支援。</p><h3 id="kapt-編譯器外掛程式與-k2-編譯器的相容性" tabindex="-1">kapt 編譯器外掛程式與 K2 編譯器的相容性 <a class="header-anchor" href="#kapt-編譯器外掛程式與-k2-編譯器的相容性" aria-label="Permalink to &quot;kapt 編譯器外掛程式與 K2 編譯器的相容性&quot;">​</a></h3><p>您可以在專案中將 <a href="/zh-Hant/kotlin/kapt">kapt 外掛程式</a>與 K2 編譯器一起使用，但有一些限制。 儘管將 <code>languageVersion</code> 設定為 <code>2.0</code>，kapt 編譯器外掛程式仍然使用舊的編譯器。</p><p>如果您在 <code>languageVersion</code> 設定為 <code>2.0</code> 的專案中執行 kapt 編譯器外掛程式，kapt 將自動 切換到 <code>1.9</code> 並停用特定版本相容性檢查。此行為等同於包含以下命令引數：</p><ul><li><code>-Xskip-metadata-version-check</code></li><li><code>-Xskip-prerelease-check</code></li><li><code>-Xallow-unstable-dependencies</code></li></ul><p>這些檢查僅對 kapt 任務停用。所有其他編譯任務將繼續使用新的 K2 編譯器。</p><p>如果您在使用 kapt 與 K2 編譯器時遇到任何問題，請向我們的<a href="http://kotl.in/issue" target="_blank" rel="noreferrer">問題追蹤器</a>報告。</p><h3 id="在您的專案中試用-k2-編譯器" tabindex="-1">在您的專案中試用 K2 編譯器 <a class="header-anchor" href="#在您的專案中試用-k2-編譯器" aria-label="Permalink to &quot;在您的專案中試用 K2 編譯器&quot;">​</a></h3><p>從 1.9.0 開始，直到 Kotlin 2.0 發佈之前，您可以透過將 <code>kotlin.experimental.tryK2=true</code> Gradle 屬性新增至您的 <code>gradle.properties</code> 檔案，輕鬆測試 K2 編譯器。您也可以執行以下命令：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> assemble</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Pkotlin.experimental.tryK2=true</span></span></code></pre></div><p>此 Gradle 屬性會自動將語言版本設定為 2.0，並更新建置報告，其中包含使用 K2 編譯器編譯的 Kotlin 任務數量與當前編譯器的比較：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>##### &#39;kotlin.experimental.tryK2&#39; results (Kotlin/Native not checked) #####</span></span>
<span class="line"><span>:lib:compileKotlin: 2.0 language version</span></span>
<span class="line"><span>:app:compileKotlin: 2.0 language version</span></span>
<span class="line"><span>##### 100% (2/2) tasks have been compiled with Kotlin 2.0 #####</span></span></code></pre></div><h3 id="gradle-建置報告" tabindex="-1">Gradle 建置報告 <a class="header-anchor" href="#gradle-建置報告" aria-label="Permalink to &quot;Gradle 建置報告&quot;">​</a></h3><p><a href="/zh-Hant/kotlin/gradle-compilation-and-caches#build-reports">Gradle 建置報告</a>現在會顯示是使用了當前編譯器還是 K2 編譯器 來編譯程式碼。在 Kotlin 1.9.0 中，您可以在 <a href="https://scans.gradle.com/" target="_blank" rel="noreferrer">Gradle 建置掃描</a>中看到此資訊：</p><p><img src="`+o+'" alt="Gradle build scan - K1" width="700"></p><p><img src="'+d+`" alt="Gradle build scan - K2" width="700"></p><p>您也可以直接在建置報告中找到專案中使用的 Kotlin 版本：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Task info:</span></span>
<span class="line"><span>  Kotlin language version: 1.9</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>如果您使用 Gradle 8.0，您可能會遇到一些建置報告問題，尤其是在啟用 Gradle 配置快取時。這是已知問題，已在 Gradle 8.1 及更高版本中修復。</p></div><h3 id="當前-k2-編譯器限制" tabindex="-1">當前 K2 編譯器限制 <a class="header-anchor" href="#當前-k2-編譯器限制" aria-label="Permalink to &quot;當前 K2 編譯器限制&quot;">​</a></h3><p>在您的 Gradle 專案中啟用 K2 會帶來某些限制，這些限制可能會影響在以下情況下使用 Gradle 8.3 以下版本的專案：</p><ul><li><code>buildSrc</code> 中的原始碼編譯。</li><li>包含建置中 Gradle 外掛程式的編譯。</li><li>其他 Gradle 外掛程式的編譯，如果它們在 Gradle 8.3 以下版本的專案中使用。</li><li>建置 Gradle 外掛程式依賴項。</li></ul><p>如果您遇到上述任何問題，可以採取以下步驟來解決：</p><ul><li>為 <code>buildSrc</code>、任何 Gradle 外掛程式及其依賴項設定語言版本：</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        languageVersion.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_1_9)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        apiVersion.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_1_9)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>將您的專案中的 Gradle 版本更新到 8.3（當其可用時）。</li></ul><h3 id="對新的-k2-編譯器留下您的回饋" tabindex="-1">對新的 K2 編譯器留下您的回饋 <a class="header-anchor" href="#對新的-k2-編譯器留下您的回饋" aria-label="Permalink to &quot;對新的 K2 編譯器留下您的回饋&quot;">​</a></h3><p>我們將感謝您提出的任何回饋！</p><ul><li>直接向 K2 開發者在 Kotlin 的 Slack 上提供回饋 – <a href="https://surveys.jetbrains.com/s3/kotlin-slack-sign-up" target="_blank" rel="noreferrer">取得邀請</a> 並加入 <a href="https://kotlinlang.slack.com/archives/C03PK0PE257" target="_blank" rel="noreferrer">#k2-early-adopters</a> 頻道。</li><li>將您使用新的 K2 編譯器遇到的任何問題報告到<a href="https://kotl.in/issue" target="_blank" rel="noreferrer">我們的問題追蹤器</a>。</li><li><a href="https://www.jetbrains.com/help/idea/settings-usage-statistics.html" target="_blank" rel="noreferrer">啟用 <strong>Send usage statistics</strong> 選項</a>以允許 JetBrains 收集有關 K2 使用情況的匿名數據。</li></ul><h2 id="語言" tabindex="-1">語言 <a class="header-anchor" href="#語言" aria-label="Permalink to &quot;語言&quot;">​</a></h2><p>在 Kotlin 1.9.0 中，我們正在穩定一些先前引入的新語言功能：</p><ul><li><a href="#stable-replacement-of-the-enum-class-values-function">列舉類別 <code>values</code> 函式的替代方案</a></li><li><a href="#stable-data-objects-for-symmetry-with-data-classes">資料物件與資料類別的對稱性</a></li><li><a href="#support-for-secondary-constructors-with-bodies-in-inline-value-classes">支援帶有主體的次級建構函式的行內值類別</a></li></ul><h3 id="列舉類別-values-函式的穩定替代方案" tabindex="-1">列舉類別 <code>values</code> 函式的穩定替代方案 <a class="header-anchor" href="#列舉類別-values-函式的穩定替代方案" aria-label="Permalink to &quot;列舉類別 \`values\` 函式的穩定替代方案&quot;">​</a></h3><p>在 1.8.20 中，列舉類別的 <code>entries</code> 屬性作為實驗性功能引入。<code>entries</code> 屬性是 <code>synthetic values()</code> 函式的現代化高效能替代方案。在 1.9.0 中，<code>entries</code> 屬性已穩定。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>values()</code> 函式仍然支援，但我們建議您改用 <code>entries</code> 屬性。</p></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">enum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> colorName: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rgb: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    RED</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Red&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#FF0000&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ORANGE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Orange&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#FF7F00&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    YELLOW</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Yellow&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#FFFF00&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> findByRgb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rgb: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Color.entries.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">find</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.rgb </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rgb }</span></span></code></pre></div><p>有關列舉類別 <code>entries</code> 屬性的更多資訊，請參閱 <a href="/zh-Hant/kotlin/whatsnew1820#a-modern-and-performant-replacement-of-the-enum-class-values-function">Kotlin 1.8.20 的新功能</a>。</p><h3 id="資料物件與資料類別的穩定對稱性" tabindex="-1">資料物件與資料類別的穩定對稱性 <a class="header-anchor" href="#資料物件與資料類別的穩定對稱性" aria-label="Permalink to &quot;資料物件與資料類別的穩定對稱性&quot;">​</a></h3><p>資料物件宣告，它在 <a href="/zh-Hant/kotlin/whatsnew1820#preview-of-data-objects-for-symmetry-with-data-classes">Kotlin 1.8.20</a> 中引入， 現已穩定。這包括為與資料類別對稱而添加的函式：<code>toString()</code>、<code>equals()</code> 和 <code>hashCode()</code>。</p><p>此功能在 <code>sealed</code> 層級結構（例如 <code>sealed class</code> 或 <code>sealed interface</code> 層級結構）中特別有用， 因為 <code>data object</code> 宣告可以方便地與 <code>data class</code> 宣告一起使用。在此範例中，將 <code>EndOfFile</code> 宣告為 <code>data object</code> 而不是普通的 <code>object</code> 意味著它自動擁有 <code>toString()</code> 函式，而 無需手動覆寫。這保持了與附帶的資料類別定義的對稱性。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">sealed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ReadResult</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> number: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ReadResult</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> text: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ReadResult</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EndOfFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ReadResult</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Number(number=7)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(EndOfFile) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// EndOfFile</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>有關更多資訊，請參閱 <a href="/zh-Hant/kotlin/whatsnew1820#preview-of-data-objects-for-symmetry-with-data-classes">Kotlin 1.8.20 的新功能</a>。</p><h3 id="支援帶有主體的次級建構函式的行內值類別" tabindex="-1">支援帶有主體的次級建構函式的行內值類別 <a class="header-anchor" href="#支援帶有主體的次級建構函式的行內值類別" aria-label="Permalink to &quot;支援帶有主體的次級建構函式的行內值類別&quot;">​</a></h3><p>從 Kotlin 1.9.0 開始，在<a href="/zh-Hant/kotlin/inline-classes">行內值類別</a>中使用帶有主體的次級建構函式 預設可用：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JvmInline</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fullName: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 允許自 Kotlin 1.4.30 起：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        check</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fullName.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isNotBlank</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;Full name shouldn&#39;t be empty&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 預設允許自 Kotlin 1.9.0 起：</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, lastName: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$name</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> $lastName</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        check</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lastName.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isNotBlank</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;Last name shouldn&#39;t be empty&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>以前，Kotlin 只允許行內類別中使用公開主建構函式。因此，無法 封裝底層值或建立表示某些受約束值的行內類別。</p><p>隨著 Kotlin 的發展，這些問題得到了修復。Kotlin 1.4.30 解除了對 <code>init</code> 區塊的限制，然後 Kotlin 1.8.20 預覽了帶有主體的次級建構函式。它們現在預設可用。在 <a href="https://github.com/Kotlin/KEEP/blob/master/proposals/inline-classes.md" target="_blank" rel="noreferrer">KEEP</a> 中了解更多關於 Kotlin 行內類別的開發。</p><h2 id="kotlin-jvm" tabindex="-1">Kotlin/JVM <a class="header-anchor" href="#kotlin-jvm" aria-label="Permalink to &quot;Kotlin/JVM&quot;">​</a></h2><p>從版本 1.9.0 開始，編譯器可以產生位元組碼版本對應於 JVM 20 的類別。此外， <code>JvmDefault</code> 註解和傳統 <code>-Xjvm-default</code> 模式的棄用仍在繼續。</p><h3 id="jvmdefault-註解和傳統-xjvm-default-模式的棄用" tabindex="-1">JvmDefault 註解和傳統 <code>-Xjvm-default</code> 模式的棄用 <a class="header-anchor" href="#jvmdefault-註解和傳統-xjvm-default-模式的棄用" aria-label="Permalink to &quot;JvmDefault 註解和傳統 \`-Xjvm-default\` 模式的棄用&quot;">​</a></h3><p>從 Kotlin 1.5 開始，<code>JvmDefault</code> 註解的使用已棄用，轉而使用較新的 <code>-Xjvm-default</code> 模式：<code>all</code> 和 <code>all-compatibility</code>。隨著 Kotlin 1.4 中 <code>JvmDefaultWithoutCompatibility</code> 的引入和 Kotlin 1.6 中 <code>JvmDefaultWithCompatibility</code> 的引入，這些模式提供了對 <code>DefaultImpls</code> 類別生成的全面控制， 確保與舊的 Kotlin 程式碼無縫相容。</p><p>因此，在 Kotlin 1.9.0 中，<code>JvmDefault</code> 註解不再具有任何意義，並已被標記為 已棄用，導致錯誤。它最終將從 Kotlin 中移除。</p><h2 id="kotlin-native" tabindex="-1">Kotlin/Native <a class="header-anchor" href="#kotlin-native" aria-label="Permalink to &quot;Kotlin/Native&quot;">​</a></h2><p>除其他改進外，此版本還為 <a href="/zh-Hant/kotlin/native-memory-manager">Kotlin/Native 記憶體管理器</a>帶來了進一步的改進， 這應該能增強其強韌性和效能：</p><ul><li><a href="#preview-of-custom-memory-allocator">自訂記憶體分配器預覽</a></li><li><a href="#objective-c-or-swift-object-deallocation-hook-on-the-main-thread">Objective-C 或 Swift 物件在主執行緒上的解除分配掛鉤</a></li><li><a href="#no-object-initialization-when-accessing-constant-values-in-kotlin-native">在 Kotlin/Native 中存取常數值時不進行物件初始化</a></li><li><a href="#ability-to-configure-standalone-mode-for-ios-simulator-tests-in-kotlin-native">在 Kotlin/Native 中為 iOS 模擬器測試配置獨立模式的能力</a></li><li><a href="#library-linkage-in-kotlin-native">Kotlin/Native 中的函式庫連結</a></li></ul><h3 id="自訂記憶體分配器預覽" tabindex="-1">自訂記憶體分配器預覽 <a class="header-anchor" href="#自訂記憶體分配器預覽" aria-label="Permalink to &quot;自訂記憶體分配器預覽&quot;">​</a></h3><p>Kotlin 1.9.0 引入了自訂記憶體分配器的預覽。其分配系統改進了 <a href="/zh-Hant/kotlin/native-memory-manager">Kotlin/Native 記憶體管理器</a>的執行時效能。</p><p>Kotlin/Native 中當前的物件分配系統使用通用分配器，該分配器不具有高效垃圾回收的功能。 為了補償，它在垃圾收集器 (GC) 將所有已分配物件合併到單一列表之前維護執行緒局部鏈結串列， 該列表可以在掃描期間迭代。這種方法帶來了幾個效能缺點：</p><ul><li>掃描順序缺乏記憶體局部性，通常導致分散的記憶體存取模式，從而導致潛在的效能問題。</li><li>鏈結串列每個物件都需要額外記憶體，增加了記憶體使用量，特別是在處理許多小型物件時。</li><li>已分配物件的單一列表使得平行化掃描變得困難，當變異執行緒分配物件速度比 GC 執行緒收集速度快時，這可能會導致記憶體使用問題。</li></ul><p>為了解決這些問題，Kotlin 1.9.0 引入了自訂分配器的預覽。它將系統記憶體分為頁面， 允許依序獨立掃描。每次分配都成為頁面內的一個記憶體區塊，頁面會追蹤區塊大小。 不同的頁面型別針對各種分配大小進行了優化。記憶體區塊的連續排列確保了對所有已分配區塊的高效率迭代。</p><p>當執行緒分配記憶體時，它會根據分配大小搜尋合適的頁面。執行緒會維護一組用於不同大小類別的頁面。 通常，給定大小的當前頁面可以容納該分配。如果不能，執行緒會從共享分配空間請求不同的頁面。 此頁面可能已經可用，需要掃描，或者應首先建立。</p><p>新的分配器允許同時擁有多個獨立的分配空間，這將使 Kotlin 團隊能夠 實驗不同的頁面佈局，以進一步提高效能。</p><p>有關新分配器設計的更多資訊，請參閱此 <a href="https://github.com/JetBrains/kotlin/blob/master/kotlin-native/runtime/src/alloc/custom/README.md" target="_blank" rel="noreferrer">README</a>。</p><h4 id="如何啟用" tabindex="-1">如何啟用 <a class="header-anchor" href="#如何啟用" aria-label="Permalink to &quot;如何啟用&quot;">​</a></h4><p>新增 <code>-Xallocator=custom</code> 編譯器選項：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    macosX64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;native&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        binaries.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        compilations.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configureEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            compilerOptions.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                freeCompilerArgs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xallocator=custom&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="留下回饋" tabindex="-1">留下回饋 <a class="header-anchor" href="#留下回饋" aria-label="Permalink to &quot;留下回饋&quot;">​</a></h4><p>我們將感謝您在 <a href="https://youtrack.jetbrains.com/issue/KT-55364/Implement-custom-allocator-for-Kotlin-Native" target="_blank" rel="noreferrer">YouTrack</a> 中提供回饋， 以改進自訂分配器。</p><h3 id="objective-c-或-swift-物件在主執行緒上的解除分配掛鉤" tabindex="-1">Objective-C 或 Swift 物件在主執行緒上的解除分配掛鉤 <a class="header-anchor" href="#objective-c-或-swift-物件在主執行緒上的解除分配掛鉤" aria-label="Permalink to &quot;Objective-C 或 Swift 物件在主執行緒上的解除分配掛鉤&quot;">​</a></h3><p>從 Kotlin 1.9.0 開始，如果 Objective-C 或 Swift 物件在主執行緒上傳遞給 Kotlin，則其解除分配掛鉤將在主執行緒上呼叫。 <a href="/zh-Hant/kotlin/native-memory-manager">Kotlin/Native 記憶體管理器</a>以前處理 Objective-C 物件參照的方式可能導致記憶體洩漏。 我們相信新行為應該能提高記憶體管理器的強韌性。</p><p>考慮一個在 Kotlin 程式碼中被參照的 Objective-C 物件，例如，當它作為引數傳遞、由函式返回或從集合中檢索時。 在這種情況下，Kotlin 會建立自己的物件，該物件持有對 Objective-C 物件的參照。當 Kotlin 物件被解除分配時， Kotlin/Native 執行時會呼叫 <code>objc_release</code> 函式，該函式會釋放該 Objective-C 參照。</p><p>以前，Kotlin/Native 記憶體管理器在特殊的 GC 執行緒上執行 <code>objc_release</code>。如果它是最後一個物件參照， 物件就會被解除分配。當 Objective-C 物件具有自訂解除分配掛鉤（例如 Objective-C 中的 <code>dealloc</code> 方法或 Swift 中的 <code>deinit</code> 區塊）， 並且這些掛鉤期望在特定執行緒上呼叫時，可能會出現問題。</p><p>由於主執行緒上物件的掛鉤通常期望在那裡呼叫，因此 Kotlin/Native 執行時現在也 在主執行緒上呼叫 <code>objc_release</code>。這應該涵蓋了 Objective-C 物件在主執行緒上傳遞給 Kotlin， 並在那裡建立 Kotlin 對等物件的情況。這僅在處理主調度佇列時有效，對於常規 UI 應用程式來說是這種情況。 如果不是主佇列，或者物件在非主執行緒上傳遞給 Kotlin，則 <code>objc_release</code> 像以前一樣在特殊的 GC 執行緒上呼叫。</p><h4 id="如何選擇退出" tabindex="-1">如何選擇退出 <a class="header-anchor" href="#如何選擇退出" aria-label="Permalink to &quot;如何選擇退出&quot;">​</a></h4><p>如果您遇到問題，可以在 <code>gradle.properties</code> 檔案中使用以下選項停用此行為：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.native.binary.objcDisposeOnMain=false</span></span></code></pre></div><p>請務必向<a href="https://kotl.in/issue" target="_blank" rel="noreferrer">我們的問題追蹤器</a>報告此類情況。</p><h3 id="在-kotlin-native-中存取常數值時不進行物件初始化" tabindex="-1">在 Kotlin/Native 中存取常數值時不進行物件初始化 <a class="header-anchor" href="#在-kotlin-native-中存取常數值時不進行物件初始化" aria-label="Permalink to &quot;在 Kotlin/Native 中存取常數值時不進行物件初始化&quot;">​</a></h3><p>從 Kotlin 1.9.0 開始，Kotlin/Native 後端在存取 <code>const val</code> 欄位時不初始化物件：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;side effect!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MyObject.y) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 第一次不初始化</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MyObject    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 發生初始化</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x.y)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>此行為現在與 Kotlin/JVM 統一，其中實作與 Java 一致，在這種情況下物件從不初始化。 由於此變更，您也可以預期您的 Kotlin/Native 專案中會有某些效能改進。</p><h3 id="在-kotlin-native-中為-ios-模擬器測試配置獨立模式的能力" tabindex="-1">在 Kotlin/Native 中為 iOS 模擬器測試配置獨立模式的能力 <a class="header-anchor" href="#在-kotlin-native-中為-ios-模擬器測試配置獨立模式的能力" aria-label="Permalink to &quot;在 Kotlin/Native 中為 iOS 模擬器測試配置獨立模式的能力&quot;">​</a></h3><p>依預設，當為 Kotlin/Native 執行 iOS 模擬器測試時，會使用 <code>--standalone</code> 旗標以避免手動模擬器 啟動與關閉。在 1.9.0 中，您現在可以透過 <code>standalone</code> 屬性配置此旗標是否在 Gradle 任務中使用。 依預設，會使用 <code>--standalone</code> 旗標，因此獨立模式已啟用。</p><p>以下是如何在您的 <code>build.gradle.kts</code> 檔案中停用獨立模式的範例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tasks.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">org</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jetbrains</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gradle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">targets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">native</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tasks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KotlinNativeSimulatorTest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configureEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    standalone.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>如果您停用獨立模式，您必須手動啟動模擬器。要從 CLI 啟動您的模擬器， 您可以使用以下命令： <code>shell /usr/bin/xcrun simctl boot &lt;DeviceId&gt; </code></p></div><h3 id="kotlin-native-中的函式庫連結" tabindex="-1">Kotlin/Native 中的函式庫連結 <a class="header-anchor" href="#kotlin-native-中的函式庫連結" aria-label="Permalink to &quot;Kotlin/Native 中的函式庫連結&quot;">​</a></h3><p>從 Kotlin 1.9.0 開始，Kotlin/Native 編譯器處理 Kotlin 函式庫中的連結問題的方式與 Kotlin/JVM 相同。 如果某個第三方 Kotlin 函式庫的作者在另一個第三方 Kotlin 函式庫使用的實驗性 API 中進行了不相容的變更，您可能會面臨此類問題。</p><p>現在，如果第三方 Kotlin 函式庫之間存在連結問題，建置不會在編譯期間失敗。相反，您只會在執行時遇到這些錯誤， 就像在 JVM 上完全一樣。</p><p>Kotlin/Native 編譯器每次偵測到函式庫連結問題時都會報告警告。您可以在編譯日誌中找到此類警告，例如：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>No function found for symbol &#39;org.samples/MyRemovedClass.doSomething|3657632771909858561[0]&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Can not get instance of singleton &#39;MyEnumClass.REMOVED_ENTRY&#39;: No enum entry found for symbol &#39;org.samples/MyEnumClass.REMOVED_ENTRY|null[0]&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Function &#39;getMyRemovedClass&#39; can not be called: Function uses unlinked class symbol &#39;org.samples/MyRemovedClass|null[0]&#39;</span></span></code></pre></div><p>您可以進一步配置甚至停用專案中的此行為：</p><ul><li>如果您不想在編譯日誌中看到這些警告，請使用 <code>-Xpartial-linkage-loglevel=INFO</code> 編譯器選項抑制它們。</li><li>也可以使用 <code>-Xpartial-linkage-loglevel=ERROR</code> 將報告警告的嚴重性提高到編譯錯誤。在這種情況下，編譯會失敗，您將在編譯日誌中看到所有錯誤。使用此選項可以更仔細地檢查連結問題。</li><li>如果您在使用此功能時遇到意外問題，您可以隨時使用 <code>-Xpartial-linkage=disable</code> 編譯器選項選擇退出。請務必向<a href="https://kotl.in/issue" target="_blank" rel="noreferrer">我們的問題追蹤器</a>報告此類情況。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 透過 Gradle 建置檔案傳遞編譯器選項的範例。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    macosX64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;native&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        binaries.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        compilations.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configureEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            compilerOptions.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // 抑制連結警告：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                freeCompilerArgs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xpartial-linkage-loglevel=INFO&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // 將連結警告提升為錯誤：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                freeCompilerArgs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xpartial-linkage-loglevel=ERROR&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // 完全停用該功能：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                freeCompilerArgs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xpartial-linkage=disable&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="c-互通隱式整數轉換的編譯器選項" tabindex="-1">C 互通隱式整數轉換的編譯器選項 <a class="header-anchor" href="#c-互通隱式整數轉換的編譯器選項" aria-label="Permalink to &quot;C 互通隱式整數轉換的編譯器選項&quot;">​</a></h3><p>我們為 C 互通引入了一個編譯器選項，允許您使用隱式整數轉換。經過仔細考量，我們引入此編譯器選項是為了防止意外使用，因為此功能仍有改進空間，我們的目標是提供最高品質的 API。</p><p>在此程式碼範例中，隱式整數轉換允許 <code>options = 0</code>，即使 <a href="https://developer.apple.com/documentation/foundation/nscalendar/options" target="_blank" rel="noreferrer"><code>options</code></a> 具有無符號型別 <code>UInt</code> 且 <code>0</code> 是有符號。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> today </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NSDate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tomorrow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NSCalendar.currentCalendar.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dateByAddingUnit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    unit </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NSCalendarUnitDay,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    toDate </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> today,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    options </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>若要搭配原生互通函式庫使用隱式轉換，請使用 <code>-XXLanguage:+ImplicitSignedToUnsignedIntegerConversion</code> 編譯器選項。</p><p>您可以在您的 Gradle <code>build.gradle.kts</code> 檔案中進行配置：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tasks.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">org</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jetbrains</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gradle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tasks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KotlinNativeCompile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configureEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    compilerOptions.freeCompilerArgs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;-XXLanguage:+ImplicitSignedToUnsignedIntegerConversion&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="kotlin-多平台" tabindex="-1">Kotlin 多平台 <a class="header-anchor" href="#kotlin-多平台" aria-label="Permalink to &quot;Kotlin 多平台&quot;">​</a></h2><p>Kotlin 多平台在 1.9.0 中收到了一些顯著更新，旨在改善您的開發者體驗：</p><ul><li><a href="#changes-to-android-target-support">Android 目標支援的變更</a></li><li><a href="#new-android-source-set-layout-enabled-by-default">新的 Android 來源集佈局預設啟用</a></li><li><a href="#preview-of-the-gradle-configuration-cache">多平台專案中 Gradle 配置快取的預覽</a></li></ul><h3 id="android-目標支援的變更" tabindex="-1">Android 目標支援的變更 <a class="header-anchor" href="#android-目標支援的變更" aria-label="Permalink to &quot;Android 目標支援的變更&quot;">​</a></h3><p>我們持續努力穩定 Kotlin 多平台。一個重要的步驟是為 Android 目標提供一流的 支援。我們很高興地宣布，未來，Google 的 Android 團隊將提供其自己的 Gradle 外掛程式來支援 Kotlin 多平台中的 Android。</p><p>為了為 Google 的這個新解決方案開闢道路，我們在 1.9.0 中重新命名了當前 Kotlin DSL 中的 <code>android</code> 區塊。 請將您的建置腳本中所有 <code>android</code> 區塊的出現處更改為 <code>androidTarget</code>。這是為了為 Google 即將推出的 DSL 釋放 <code>android</code> 名稱而進行的臨時變更。</p><p>Google 外掛程式將是處理多平台專案中 Android 的首選方式。當它準備好時，我們將提供必要的遷移說明，以便您可以像以前一樣使用簡短的 <code>android</code> 名稱。</p><h3 id="新的-android-來源集佈局預設啟用" tabindex="-1">新的 Android 來源集佈局預設啟用 <a class="header-anchor" href="#新的-android-來源集佈局預設啟用" aria-label="Permalink to &quot;新的 Android 來源集佈局預設啟用&quot;">​</a></h3><p>從 Kotlin 1.9.0 開始，新的 Android 來源集佈局是預設值。它取代了以前的目錄命名方案，該方案在多方面令人困惑。新佈局有許多優點：</p><ul><li>簡化型別語義 – 新的 Android 來源佈局提供了清晰且一致的命名約定，有助於區分不同型別的來源集。</li><li>改進的來源目錄佈局 – 透過新佈局，<code>SourceDirectories</code> 佈局變得更連貫，使組織程式碼和定位來源檔案變得更容易。</li><li>清晰的 Gradle 配置命名方案 – 該方案現在在 <code>KotlinSourceSets</code> 和 <code>AndroidSourceSets</code> 中都更加一致且可預測。</li></ul><p>新的佈局需要 Android Gradle 外掛程式 7.0 或更高版本，並支援 Android Studio 2022.3 及更高版本。請參閱我們的 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-android-layout.html" target="_blank" rel="noreferrer">遷移指南</a>以在您的 <code>build.gradle(.kts)</code> 檔案中進行必要的變更。</p><h3 id="gradle-配置快取的預覽" tabindex="-1">Gradle 配置快取的預覽 <a class="header-anchor" href="#gradle-配置快取的預覽" aria-label="Permalink to &quot;Gradle 配置快取的預覽&quot;">​</a></h3>`,121)),l(k,{name:"preview-of-gradle-configuration-cache"}),s[4]||(s[4]=t('<p>Kotlin 1.9.0 支援多平台函式庫中的 <a href="https://docs.gradle.org/current/userguide/configuration_cache.html" target="_blank" rel="noreferrer">Gradle 配置快取</a>。 如果您是函式庫作者，您已經可以受益於改進的建置效能。</p><p>Gradle 配置快取透過重複使用配置階段的結果來加速建置過程，以用於後續 建置。此功能自 Gradle 8.1 起已穩定。若要啟用它，請遵循 <a href="https://docs.gradle.org/current/userguide/configuration_cache.html#config_cache:usage" target="_blank" rel="noreferrer">Gradle 文件</a>中的說明。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Kotlin 多平台外掛程式仍不支援帶有 Xcode 整合任務或 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-cocoapods-dsl-reference.html" target="_blank" rel="noreferrer">Kotlin CocoaPods Gradle 外掛程式</a>的 Gradle 配置快取。我們預計在未來的 Kotlin 版本中添加此功能。</p></div><h2 id="kotlin-wasm" tabindex="-1">Kotlin/Wasm <a class="header-anchor" href="#kotlin-wasm" aria-label="Permalink to &quot;Kotlin/Wasm&quot;">​</a></h2><p>Kotlin 團隊持續實驗新的 Kotlin/Wasm 目標。此版本引入了多項效能和 <a href="#size-related-optim化">大小相關的優化</a>，以及 <a href="#updates-in-javascript-interop">JavaScript 互通的更新</a>。</p><h3 id="大小相關的優化" tabindex="-1">大小相關的優化 <a class="header-anchor" href="#大小相關的優化" aria-label="Permalink to &quot;大小相關的優化&quot;">​</a></h3><p>Kotlin 1.9.0 為 WebAssembly (Wasm) 專案引入了顯著的大小改進。比較兩個「Hello World」專案， Kotlin 1.9.0 中 Wasm 的程式碼佔用空間現在比 Kotlin 1.8.20 小 10 倍以上。</p><p><img src="'+E+`" alt="Kotlin/Wasm size-related optimizations" width="700"></p><p>這些大小優化可提高資源利用率，並在以 Kotlin 程式碼為目標 Wasm 平台時改善效能。</p><h3 id="javascript-互通更新" tabindex="-1">JavaScript 互通更新 <a class="header-anchor" href="#javascript-互通更新" aria-label="Permalink to &quot;JavaScript 互通更新&quot;">​</a></h3><p>此 Kotlin 更新引入了 Kotlin 和 JavaScript 之間在 Kotlin/Wasm 中的互通性變更。由於 Kotlin/Wasm 是一個<a href="/zh-Hant/kotlin/components-stability#stability-levels-explained">實驗性</a>功能，因此其互通性存在某些限制。</p><h4 id="dynamic-型別的限制" tabindex="-1">Dynamic 型別的限制 <a class="header-anchor" href="#dynamic-型別的限制" aria-label="Permalink to &quot;Dynamic 型別的限制&quot;">​</a></h4><p>從版本 1.9.0 開始，Kotlin 不再支援在 Kotlin/Wasm 中使用 <code>Dynamic</code> 型別。這現在已棄用， 轉而使用新的通用 <code>JsAny</code> 型別，該型別有助於 JavaScript 互通性。</p><p>有關更多詳細資訊，請參閱 <a href="/zh-Hant/kotlin/wasm-js-interop">Kotlin/Wasm 與 JavaScript 的互通性</a>文件。</p><h4 id="非外部型別的限制" tabindex="-1">非外部型別的限制 <a class="header-anchor" href="#非外部型別的限制" aria-label="Permalink to &quot;非外部型別的限制&quot;">​</a></h4><p>Kotlin/Wasm 支援在將值傳遞給 JavaScript 或從 JavaScript 傳遞值時，針對特定 Kotlin 靜態型別進行轉換。這些支援的 型別包括：</p><ul><li>基本型別，例如有符號數、<code>Boolean</code> 和 <code>Char</code>。</li><li><code>String</code>。</li><li>函式型別。</li></ul><p>其他型別在沒有轉換的情況下作為不透明參照傳遞，導致 JavaScript 和 Kotlin 子型別之間不一致。</p><p>為了解決這個問題，Kotlin 將 JavaScript 互通性限制在一個支援良好的型別集合中。從 Kotlin 1.9.0 開始，只有外部、 基本、字串和函式型別支援在 Kotlin/Wasm JavaScript 互通性中。此外，還引入了一個單獨的顯式型別 <code>JsReference</code>， 用於表示可以在 JavaScript 互通性中使用的 Kotlin/Wasm 物件的句柄。</p><p>有關更多詳細資訊，請參閱 <a href="/zh-Hant/kotlin/wasm-js-interop">Kotlin/Wasm 與 JavaScript 的互通性</a>文件。</p><h3 id="kotlin-wasm-在-kotlin-playground-中" tabindex="-1">Kotlin/Wasm 在 Kotlin Playground 中 <a class="header-anchor" href="#kotlin-wasm-在-kotlin-playground-中" aria-label="Permalink to &quot;Kotlin/Wasm 在 Kotlin Playground 中&quot;">​</a></h3><p>Kotlin Playground 支援 Kotlin/Wasm 目標。 您可以編寫、執行和分享以 Kotlin/Wasm 為目標的 Kotlin 程式碼。<a href="https://pl.kotl.in/HDFAvimga" target="_blank" rel="noreferrer">來看看吧！</a></p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>使用 Kotlin/Wasm 需要在您的瀏覽器中啟用實驗性功能。 <a href="/zh-Hant/kotlin/wasm-troubleshooting">了解如何啟用這些功能</a>。</p></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.time.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.time.measureTime</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello from Kotlin/Wasm!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    computeAck</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">tailrec</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(m: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, n: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> when</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(m, n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> computeAck</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(m: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, n: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> res </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> t </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> measureTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        res </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(m, n)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ack(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">) = \${res}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;duration: \${t.inWholeNanoseconds </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1e6</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">} ms&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="kotlin-js" tabindex="-1">Kotlin/JS <a class="header-anchor" href="#kotlin-js" aria-label="Permalink to &quot;Kotlin/JS&quot;">​</a></h2><p>此版本引入了 Kotlin/JS 的更新，包括移除了舊的 Kotlin/JS 編譯器、Kotlin/JS Gradle 外掛程式的棄用以及 ES2015 的實驗性支援：</p><ul><li><a href="#removal-of-the-old-kotlin-js-compiler">移除舊的 Kotlin/JS 編譯器</a></li><li><a href="#deprecation-of-the-kotlin-js-gradle-plugin">Kotlin/JS Gradle 外掛程式的棄用</a></li><li><a href="#deprecation-of-external-enum">外部列舉的棄用</a></li><li><a href="#experimental-support-for-es2015-classes-and-modules">ES2015 類別和模組的實驗性支援</a></li><li><a href="#changed-default-destination-of-js-production-distribution">JS 生產分發的預設目的地變更</a></li><li><a href="#extract-org-w3c-declarations-from-stdlib-js">從 stdlib-js 中提取 org.w3c 宣告</a></li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>從版本 1.9.0 開始，<a href="#library-linkage-in-kotlin-native">部分函式庫連結</a>也針對 Kotlin/JS 啟用。</p></div><h3 id="移除舊的-kotlin-js-編譯器" tabindex="-1">移除舊的 Kotlin/JS 編譯器 <a class="header-anchor" href="#移除舊的-kotlin-js-編譯器" aria-label="Permalink to &quot;移除舊的 Kotlin/JS 編譯器&quot;">​</a></h3><p>在 Kotlin 1.8.0 中，我們<a href="/zh-Hant/kotlin/whatsnew18#stable-js-ir-compiler-backend">宣布</a>基於 IR 的後端已成為<a href="/zh-Hant/kotlin/components-stability">穩定版本</a>。 從那時起，未指定編譯器已成為錯誤，而使用舊編譯器則會導致警告。</p><p>在 Kotlin 1.9.0 中，使用舊後端會導致錯誤。請遵循我們的<a href="/zh-Hant/kotlin/js-ir-migration">遷移指南</a>遷移到 IR 編譯器。</p><h3 id="kotlin-js-gradle-外掛程式的棄用" tabindex="-1">Kotlin/JS Gradle 外掛程式的棄用 <a class="header-anchor" href="#kotlin-js-gradle-外掛程式的棄用" aria-label="Permalink to &quot;Kotlin/JS Gradle 外掛程式的棄用&quot;">​</a></h3><p>從 Kotlin 1.9.0 開始，<code>kotlin-js</code> Gradle 外掛程式已 棄用。我們鼓勵您改用帶有 <code>js()</code> 目標的 <code>kotlin-multiplatform</code> Gradle 外掛程式。</p><p>Kotlin/JS Gradle 外掛程式的功能實質上複製了 <code>kotlin-multiplatform</code> 外掛程式，並且底層共用 相同的實作。這種重疊造成了混淆，並增加了 Kotlin 團隊的維護負擔。</p><p>有關遷移說明，請參閱我們的 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-compatibility-guide.html#migration-from-kotlin-js-gradle-plugin-to-kotlin-multiplatform-gradle-plugin" target="_blank" rel="noreferrer">Kotlin 多平台相容性指南</a>。如果您發現指南中未涵蓋的任何問題，請向我們的<a href="http://kotl.in/issue" target="_blank" rel="noreferrer">問題追蹤器</a>報告。</p><h3 id="外部列舉的棄用" tabindex="-1">外部列舉的棄用 <a class="header-anchor" href="#外部列舉的棄用" aria-label="Permalink to &quot;外部列舉的棄用&quot;">​</a></h3><p>在 Kotlin 1.9.0 中，外部列舉的使用將被棄用，因為與靜態列舉成員（如 <code>entries</code>）存在問題，這些成員 無法存在於 Kotlin 之外。我們建議改用帶有物件子類別的外部密封類別：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 之前</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">external</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> enum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ExternalEnum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { A, B }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 之後</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">external</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> sealed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ExternalEnum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ExternalEnum</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> B</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ExternalEnum</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>透過切換到帶有物件子類別的外部密封類別，您可以實現與外部列舉類似的功能，同時避免與預設方法相關的問題。</p><p>從 Kotlin 1.9.0 開始，外部列舉的使用將被標記為已棄用。我們鼓勵您更新程式碼， 利用建議的外部密封類別實作，以確保相容性和未來維護。</p><h3 id="es2015-類別和模組的實驗性支援" tabindex="-1">ES2015 類別和模組的實驗性支援 <a class="header-anchor" href="#es2015-類別和模組的實驗性支援" aria-label="Permalink to &quot;ES2015 類別和模組的實驗性支援&quot;">​</a></h3><p>此版本引入了 ES2015 模組和 ES2015 類別生成的<a href="/zh-Hant/kotlin/components-stability#stability-levels-explained">實驗性</a>支援：</p><ul><li>模組提供了一種簡化程式碼庫並提高可維護性的方法。</li><li>類別允許您整合物件導向程式設計 (OOP) 原則，從而產生更簡潔、更直觀的程式碼。</li></ul><p>若要啟用這些功能，請相應地更新您的 <code>build.gradle.kts</code> 檔案：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(IR) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        useEsModules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 啟用 ES2015 模組</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        browser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 啟用 ES2015 類別生成</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tasks.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KotlinJsCompile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configureEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    kotlinOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        useEsClasses </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://262.ecma-international.org/6.0/" target="_blank" rel="noreferrer">在官方文件中了解更多關於 ES2015 (ECMAScript 2015, ES6) 的資訊</a>。</p><h3 id="js-生產分發的預設目的地變更" tabindex="-1">JS 生產分發的預設目的地變更 <a class="header-anchor" href="#js-生產分發的預設目的地變更" aria-label="Permalink to &quot;JS 生產分發的預設目的地變更&quot;">​</a></h3><p>在 Kotlin 1.9.0 之前，分發目標目錄是 <code>build/distributions</code>。然而，這是 Gradle 歸檔的常用目錄。 為了解決此問題，我們已將 Kotlin 1.9.0 中的預設分發目標目錄更改為： <code>build/dist/&lt;targetName&gt;/&lt;binaryName&gt;</code>。</p><p>例如，<code>productionExecutable</code> 以前在 <code>build/distributions</code> 中。在 Kotlin 1.9.0 中，它位於 <code>build/dist/js/productionExecutable</code> 中。</p><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>如果您已有使用這些建置結果的管線，請務必更新目錄。</p></div><h3 id="從-stdlib-js-中提取-org-w3c-宣告" tabindex="-1">從 stdlib-js 中提取 org.w3c 宣告 <a class="header-anchor" href="#從-stdlib-js-中提取-org-w3c-宣告" aria-label="Permalink to &quot;從 stdlib-js 中提取 org.w3c 宣告&quot;">​</a></h3><p>自 Kotlin 1.9.0 起，<code>stdlib-js</code> 不再包含 <code>org.w3c</code> 宣告。相反，這些宣告已 移至單獨的 Gradle 依賴項。當您將 Kotlin 多平台 Gradle 外掛程式新增至您的 <code>build.gradle.kts</code> 檔案時， 這些宣告將自動包含在您的專案中，類似於標準函式庫。</p><p>無需任何手動操作或遷移。必要的調整將自動處理。</p><h2 id="gradle" tabindex="-1">Gradle <a class="header-anchor" href="#gradle" aria-label="Permalink to &quot;Gradle&quot;">​</a></h2><p>Kotlin 1.9.0 帶來了新的 Gradle 編譯器選項以及更多功能：</p><ul><li><a href="#removed-classpath-property">移除 classpath 屬性</a></li><li><a href="#new-compiler-options">新的編譯器選項</a></li><li><a href="#project-level-compiler-options-for-kotlin-jvm">Kotlin/JVM 的專案層級編譯器選項</a></li><li><a href="#compiler-option-for-kotlin-native-module-name">Kotlin/Native 模組名稱的編譯器選項</a></li><li><a href="#separate-compiler-plugins-for-official-kotlin-libraries">官方 Kotlin 函式庫的獨立編譯器外掛程式</a></li><li><a href="#incremented-minimum-supported-version">增加最低支援版本</a></li><li><a href="#kapt-doesn-t-cause-eager-task-creation-in-gradle">kapt 不會導致 Gradle 中急切的任務建立</a></li><li><a href="#programmatic-configuration-of-the-jvm-target-validation-mode">JVM 目標驗證模式的程式化配置</a></li></ul><h3 id="移除-classpath-屬性" tabindex="-1">移除 classpath 屬性 <a class="header-anchor" href="#移除-classpath-屬性" aria-label="Permalink to &quot;移除 classpath 屬性&quot;">​</a></h3><p>在 Kotlin 1.7.0 中，我們宣布了 <code>KotlinCompile</code> 任務屬性 <code>classpath</code> 的棄用週期開始。 在 Kotlin 1.8.0 中，棄用級別提高到 <code>ERROR</code>。在此版本中，我們最終移除了 <code>classpath</code> 屬性。 所有編譯任務現在都應使用 <code>libraries</code> 輸入來獲取編譯所需的函式庫列表。</p><h3 id="新的編譯器選項" tabindex="-1">新的編譯器選項 <a class="header-anchor" href="#新的編譯器選項" aria-label="Permalink to &quot;新的編譯器選項&quot;">​</a></h3><p>Kotlin Gradle 外掛程式現在為選擇加入和編譯器的漸進模式提供了新屬性。</p><ul><li>要選擇加入新的 API，您現在可以使用 <code>optIn</code> 屬性並傳遞字串列表，例如：<code>optIn.set(listOf(a, b, c))</code>。</li><li>要啟用漸進模式，請使用 <code>progressiveMode.set(true)</code>。</li></ul><h3 id="kotlin-jvm-的專案層級編譯器選項" tabindex="-1">Kotlin/JVM 的專案層級編譯器選項 <a class="header-anchor" href="#kotlin-jvm-的專案層級編譯器選項" aria-label="Permalink to &quot;Kotlin/JVM 的專案層級編譯器選項&quot;">​</a></h3><p>從 Kotlin 1.9.0 開始，新的 <code>compilerOptions</code> 區塊在 <code>kotlin</code> 配置區塊內部可用：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        jvmTarget.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(JVM.Target_11)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>這使得配置編譯器選項更容易。然而，務必注意一些重要細節：</p><ul><li>此配置僅在專案層級有效。</li><li>對於 Android 外掛程式，此區塊配置與以下相同的物件：</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">android</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    kotlinOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><code>android.kotlinOptions</code> 和 <code>kotlin.compilerOptions</code> 配置區塊互相覆寫。建置檔案中最後（最低）的區塊總是生效。</li><li>如果在專案層級配置 <code>moduleName</code>，其值在傳遞給編譯器時可能會更改。這對於 <code>main</code> 編譯不是這種情況，但對於其他型別，例如測試來源，Kotlin Gradle 外掛程式將添加 <code>_test</code> 後綴。</li><li><code>tasks.withType&lt;KotlinJvmCompile&gt;().configureEach {}</code>（或 <code>tasks.named&lt;KotlinJvmCompile&gt;(&quot;compileKotlin&quot;) { }</code>）中的配置會覆寫 <code>kotlin.compilerOptions</code> 和 <code>android.kotlinOptions</code>。</li></ul><h3 id="kotlin-native-模組名稱的編譯器選項" tabindex="-1">Kotlin/Native 模組名稱的編譯器選項 <a class="header-anchor" href="#kotlin-native-模組名稱的編譯器選項" aria-label="Permalink to &quot;Kotlin/Native 模組名稱的編譯器選項&quot;">​</a></h3><p>Kotlin/Native 的 <a href="/zh-Hant/kotlin/compiler-reference#module-name-name-native"><code>module-name</code></a> 編譯器選項現在在 Kotlin Gradle 外掛程式中很容易取得。</p><p>此選項指定編譯模組的名稱，也可用於為導出到 Objective-C 的宣告添加名稱前綴。</p><p>您現在可以直接在 Gradle 建置檔案的 <code>compilerOptions</code> 區塊中設定模組名稱：</p>`,72)),l(r,{group:"build-script"},{default:e(()=>[l(h,{title:"Kotlin","group-key":"kotlin"},{default:e(()=>s[0]||(s[0]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"named"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"org"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"jetbrains"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"gradle"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"tasks"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"KotlinNativeCompile"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},">("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"compileKotlinLinuxX64"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    compilerOptions"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        moduleName."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"set"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"my-module-name"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),l(h,{title:"Groovy","group-key":"groovy"},{default:e(()=>s[1]||(s[1]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"named("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"compileKotlinLinuxX64"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"org.jetbrains.kotlin.gradle.tasks.KotlinNativeCompile."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"class) {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    compilerOptions {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        moduleName "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "my-module-name"')]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),s[5]||(s[5]=t('<h3 id="官方-kotlin-函式庫的獨立編譯器外掛程式" tabindex="-1">官方 Kotlin 函式庫的獨立編譯器外掛程式 <a class="header-anchor" href="#官方-kotlin-函式庫的獨立編譯器外掛程式" aria-label="Permalink to &quot;官方 Kotlin 函式庫的獨立編譯器外掛程式&quot;">​</a></h3><p>Kotlin 1.9.0 為其官方函式庫引入了獨立的編譯器外掛程式。以前，編譯器外掛程式嵌入在 其相應的 Gradle 外掛程式中。這可能會在編譯器外掛程式與 Gradle 建置的 Kotlin 執行時版本相比， 編譯器外掛程式是針對更高 Kotlin 版本編譯的情況下導致相容性問題。</p><p>現在編譯器外掛程式作為獨立的依賴項添加，因此您將不再面臨與舊版 Gradle 的相容性問題。新方法的另一個主要優點是新的編譯器外掛程式可以與其他建置系統一起使用， 例如 <a href="https://bazel.build/" target="_blank" rel="noreferrer">Bazel</a>。</p><p>以下是我們現在發佈到 Maven Central 的新編譯器外掛程式列表：</p><ul><li>kotlin-atomicfu-compiler-plugin</li><li>kotlin-allopen-compiler-plugin</li><li>kotlin-lombok-compiler-plugin</li><li>kotlin-noarg-compiler-plugin</li><li>kotlin-sam-with-receiver-compiler-plugin</li><li>kotlinx-serialization-compiler-plugin</li></ul><p>每個外掛程式都有其 <code>-embeddable</code> 對應項，例如，<code>kotlin-allopen-compiler-plugin-embeddable</code> 旨在 與 <code>kotlin-compiler-embeddable</code> 成品一起使用，這是腳本化成品的預設選項。</p><p>Gradle 將這些外掛程式添加為編譯器引數。您無需對現有專案進行任何更改。</p><h3 id="增加最低支援版本" tabindex="-1">增加最低支援版本 <a class="header-anchor" href="#增加最低支援版本" aria-label="Permalink to &quot;增加最低支援版本&quot;">​</a></h3><p>從 Kotlin 1.9.0 開始，最低支援的 Android Gradle 外掛程式版本為 4.2.2。</p><p>請參閱我們文件中的 <a href="/zh-Hant/kotlin/gradle-configure-project#apply-the-plugin">Kotlin Gradle 外掛程式與可用 Gradle 版本的相容性</a>。</p><h3 id="kapt-不會導致-gradle-中急切的任務建立" tabindex="-1">kapt 不會導致 Gradle 中急切的任務建立 <a class="header-anchor" href="#kapt-不會導致-gradle-中急切的任務建立" aria-label="Permalink to &quot;kapt 不會導致 Gradle 中急切的任務建立&quot;">​</a></h3><p>在 1.9.0 之前，<a href="/zh-Hant/kotlin/kapt">kapt 編譯器外掛程式</a>會透過請求 Kotlin 編譯任務的已配置實例來導致急切的任務建立。 此行為已在 Kotlin 1.9.0 中修復。如果您為 <code>build.gradle.kts</code> 檔案使用預設配置，則您的設定不受此變更影響。</p>',12)),s[6]||(s[6]=i("div",{class:"danger custom-block"},[i("p",{class:"custom-block-title"},"WARNING"),i("p",{validate:"false"},[a("如果您使用自訂配置，您的設定將受到不利影響。 例如，如果您使用 Gradle 的任務 API 修改了 "),i("code",null,"KotlinJvmCompile"),a(" 任務，您必須以同樣的方式修改 "),i("code",null,"KaptGenerateStubs"),a(" 任務在您的建置腳本中。 例如，如果您的腳本包含 "),i("code",null,"KotlinJvmCompile"),a(" 任務的以下配置： "),i("code",null,'kotlin tasks.named<KotlinJvmCompile>("compileKotlin") { // 您的自訂配置 } '),a(' {validate="false"} 在這種情況下，您需要確保相同的修改包含在 '),i("code",null,"KaptGenerateStubs"),a(" 任務中： "),i("code",null,'kotlin tasks.named<KaptGenerateStubs>("kaptGenerateStubs") { // 您的自訂配置 } ')])],-1)),s[7]||(s[7]=t(`<p>有關更多資訊，請參閱我們的 <a href="https://youtrack.jetbrains.com/issue/KT-54468/KAPT-Gradle-plugin-causes-eager-task-creation" target="_blank" rel="noreferrer">YouTrack 工單</a>。</p><h3 id="jvm-目標驗證模式的程式化配置" tabindex="-1">JVM 目標驗證模式的程式化配置 <a class="header-anchor" href="#jvm-目標驗證模式的程式化配置" aria-label="Permalink to &quot;JVM 目標驗證模式的程式化配置&quot;">​</a></h3><p>在 Kotlin 1.9.0 之前，只有一種方法可以調整 Kotlin 和 Java 之間 JVM 目標不相容性的偵測。 您必須在 <code>gradle.properties</code> 中為整個專案設定 <code>kotlin.jvm.target.validation.mode=ERROR</code>。</p><p>您現在也可以在任務層級在您的 <code>build.gradle.kts</code> 檔案中進行配置：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tasks.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">named</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">org</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jetbrains</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gradle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tasks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KotlinJvmCompile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;compileKotlin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    jvmTargetValidationMode.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(org.jetbrains.kotlin.gradle.dsl.jvm.JvmTargetValidationMode.WARNING)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="標準函式庫" tabindex="-1">標準函式庫 <a class="header-anchor" href="#標準函式庫" aria-label="Permalink to &quot;標準函式庫&quot;">​</a></h2><p>Kotlin 1.9.0 對標準函式庫有一些重大改進：</p><ul><li><a href="#stable-operator-for-open-ended-ranges"><code>..&lt;</code> 運算子</a> 和 <a href="#stable-time-api">時間 API</a> 已穩定。</li><li><a href="#the-kotlin-native-standard-library-s-journey-towards-stabilization">Kotlin/Native 標準函式庫已徹底審查和更新</a></li><li><a href="#stable-volatile-annotation"><code>@Volatile</code> 註解可在更多平台上使用</a></li><li><a href="#new-common-function-to-get-regex-capture-group-by-name">有一個<strong>共同</strong>函式可以根據名稱取得正規表達式捕獲群組</a></li><li><a href="#new-hexformat-class-to-format-and-parse-hexadecimals">引入了 <code>HexFormat</code> 類別來格式化和解析十六進位值</a></li></ul><h3 id="用於開放範圍的穩定-運算子" tabindex="-1">用於開放範圍的穩定 <code>..&lt;</code> 運算子 <a class="header-anchor" href="#用於開放範圍的穩定-運算子" aria-label="Permalink to &quot;用於開放範圍的穩定 \`..&lt;\` 運算子&quot;">​</a></h3><p>用於開放範圍的新 <code>..&lt;</code> 運算子在 <a href="/zh-Hant/kotlin/whatsnew1720#preview-of-the-operator-for-creating-open-ended-ranges">Kotlin 1.7.20</a> 中引入， 並在 1.8.0 中穩定。在 1.9.0 中，用於處理開放範圍的標準函式庫 API 也已穩定。</p><p>我們的研究表明，新的 <code>..&lt;</code> 運算子使得理解何時宣告開放範圍更容易。如果您 使用 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.ranges/until.html" target="_blank" rel="noreferrer"><code>until</code></a> 中綴函式，很容易 犯下假設包含上限的錯誤。</p><p>以下是使用 <code>until</code> 函式的範例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (number </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> until </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (number </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$number</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 2 4 6 8</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>以下是使用新 <code>..&lt;</code> 運算子的範例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (number </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (number </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$number</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 2 4 6 8</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>從 IntelliJ IDEA 2023.1.1 版本開始，新的程式碼檢查功能可用，它會突出顯示何時可以 使用 <code>..&lt;</code> 運算子。</p></div><p>有關此運算子功能的更多資訊，請參閱 <a href="/zh-Hant/kotlin/whatsnew1720#preview-of-the-operator-for-creating-open-ended-ranges">Kotlin 1.7.20 的新功能</a>。</p><h3 id="穩定時間-api" tabindex="-1">穩定時間 API <a class="header-anchor" href="#穩定時間-api" aria-label="Permalink to &quot;穩定時間 API&quot;">​</a></h3><p>自 1.3.50 起，我們已預覽新的時間測量 API。API 的持續時間部分在 1.6.0 中穩定。在 1.9.0 中， 其餘的時間測量 API 已穩定。</p><p>舊的時間 API 提供了 <code>measureTimeMillis</code> 和 <code>measureNanoTime</code> 函式，它們不易於使用。雖然清楚它們都以不同單位測量時間， 但並不清楚 <code>measureTimeMillis</code> 使用<a href="https://en.wikipedia.org/wiki/Elapsed_real_time" target="_blank" rel="noreferrer">掛鐘</a>測量時間， 而 <code>measureNanoTime</code> 使用單調時間源。新的時間 API 解決了這個問題和其他問題，使 API 更方便使用者。</p><p>使用新的時間 API，您可以輕鬆地：</p><ul><li>使用單調時間源和您想要的時間單位來測量執行某些程式碼所需的時間。</li><li>標記時間點。</li><li>比較並找到兩個時間點之間的差異。</li><li>檢查自特定時間點以來過了多少時間。</li><li>檢查當前時間是否已過特定時間點。</li></ul><h4 id="測量程式碼執行時間" tabindex="-1">測量程式碼執行時間 <a class="header-anchor" href="#測量程式碼執行時間" aria-label="Permalink to &quot;測量程式碼執行時間&quot;">​</a></h4><p>若要測量執行程式碼區塊所需的時間，請使用 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.time/measure-time.html" target="_blank" rel="noreferrer"><code>measureTime</code></a> 行內函式。</p><p>若要測量執行程式碼區塊所需的時間<strong>並</strong>返回程式碼區塊的結果，請使用 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.time/measure-timed-value.html" target="_blank" rel="noreferrer"><code>measureTimedValue</code></a> 行內函式。</p><p>依預設，這兩個函式都使用單調時間源。但是，如果您想使用經過的即時時間源，您也可以。 例如，在 Android 上，預設時間源 <code>System.nanoTime()</code> 僅在裝置啟用時計算時間。當裝置進入深度睡眠時，它會失去時間追蹤。若要追蹤裝置深度睡眠時的時間， 您可以建立一個使用 <a href="https://developer.android.com/reference/android/os/SystemClock#elapsedRealtimeNanos()" target="_blank" rel="noreferrer"><code>SystemClock.elapsedRealtimeNanos()</code></a> 的時間源：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RealtimeMonotonicTimeSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AbstractLongTimeSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DurationUnit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NANOSECONDS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Long</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SystemClock.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">elapsedRealtimeNanos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="標記並測量時間差異" tabindex="-1">標記並測量時間差異 <a class="header-anchor" href="#標記並測量時間差異" aria-label="Permalink to &quot;標記並測量時間差異&quot;">​</a></h4><p>若要標記特定的時間點，請使用 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.time/-time-source/" target="_blank" rel="noreferrer"><code>TimeSource</code></a> 介面和 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.time/-time-source/mark-now.html" target="_blank" rel="noreferrer"><code>markNow()</code></a> 函式 來建立 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.time/-time-mark/" target="_blank" rel="noreferrer"><code>TimeMark</code></a>。若要測量來自同一時間源的 <code>TimeMark</code> 之間的差異，請使用減法運算子 (<code>-</code>)：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.time.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> timeSource </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TimeSource.Monotonic</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mark1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> timeSource.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">markNow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 暫停 0.5 秒。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mark2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> timeSource.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">markNow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    repeat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mark3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> timeSource.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">markNow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> elapsed1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mark3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mark1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> elapsed2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mark3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mark2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Measurement 1.\${n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}: elapsed1=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$elapsed1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">, elapsed2=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$elapsed2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">, diff=\${elapsed1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> elapsed2}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 也可以比較時間標記。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mark2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mark1) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 這是真的，因為 mark2 比 mark1 晚捕獲。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>若要檢查截止日期是否已過或超時是否已達到，請使用 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.time/-time-mark/has-passed-now.html" target="_blank" rel="noreferrer"><code>hasPassedNow()</code></a> 和 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.time/-time-mark/has-not-passed-now.html" target="_blank" rel="noreferrer"><code>hasNotPassedNow()</code></a> 擴展函式：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.time.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.time.Duration.Companion.seconds</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> timeSource </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TimeSource.Monotonic</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mark1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> timeSource.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">markNow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fiveSeconds: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Duration</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.seconds</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mark2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mark1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fiveSeconds</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 還沒有到 5 秒</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mark2.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hasPassedNow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // false</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 等待六秒</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mark2.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hasPassedNow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="kotlin-native-標準函式庫邁向穩定的歷程" tabindex="-1">Kotlin/Native 標準函式庫邁向穩定的歷程 <a class="header-anchor" href="#kotlin-native-標準函式庫邁向穩定的歷程" aria-label="Permalink to &quot;Kotlin/Native 標準函式庫邁向穩定的歷程&quot;">​</a></h3><p>隨著我們的 Kotlin/Native 標準函式庫持續成長，我們決定是時候進行全面審查，以確保 它符合我們的高標準。作為其中的一部分，我們仔細審查了<strong>每個</strong>現有的公開簽章。對於每個 簽章，我們都考慮了它是否：</p><ul><li>具有獨特目的。</li><li>與其他 Kotlin API 一致。</li><li>與其對應的 JVM 行為相似。</li><li>未來可擴展。</li></ul><p>基於這些考量，我們做出了以下決定之一：</p><ul><li>使其穩定。</li><li>使其實驗性。</li><li>標記為 <code>private</code>。</li><li>修改其行為。</li><li>移至不同位置。</li><li>棄用它。</li><li>標記為已過時。</li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>如果現有簽章已： * 移至另一個套件，則簽章仍然存在於原始套件中，但現在已棄用，棄用級別為：<code>WARNING</code>。IntelliJ IDEA 將在程式碼檢查時自動建議替代方案。 * 棄用，則它已棄用，棄用級別為：<code>WARNING</code>。 * 標記為已過時，則您可以繼續使用它，但它將來會被取代。</p></div><p>我們不會在此列出審查的所有結果，但以下是一些亮點：</p><ul><li>我們穩定化了 Atomics API。</li><li>我們將 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlinx.cinterop/" target="_blank" rel="noreferrer"><code>kotlinx.cinterop</code></a> 設為實驗性，現在需要不同的選擇加入才能使用該套件。有關更多資訊，請參閱<a href="#explicit-c-interoperability-stability-guarantees">顯式 C 互通穩定性保證</a>。</li><li>我們將 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.native.concurrent/-worker/" target="_blank" rel="noreferrer"><code>Worker</code></a> 類別及其相關 API 標記為已過時。</li><li>我們將 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.native/-bit-set/" target="_blank" rel="noreferrer"><code>BitSet</code></a> 類別標記為已過時。</li><li>我們將 <code>kotlin.native.internal</code> 套件中的所有 <code>public</code> API 標記為 <code>private</code> 或將它們移至其他套件。</li></ul><h4 id="顯式-c-互通穩定性保證" tabindex="-1">顯式 C 互通穩定性保證 <a class="header-anchor" href="#顯式-c-互通穩定性保證" aria-label="Permalink to &quot;顯式 C 互通穩定性保證&quot;">​</a></h4><p>為保持我們的 API 高品質，我們決定將 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlinx.cinterop/" target="_blank" rel="noreferrer"><code>kotlinx.cinterop</code></a> 設定為實驗性。儘管 <code>kotlinx.cinterop</code> 已經過徹底的嘗試與測試，但在我們足夠滿意使其穩定之前，仍有改進空間。我們建議您使用此 API 進行互通，但盡量將其使用限制在專案的特定區域。一旦我們開始發展此 API 以使其穩定，這將使您的遷移更容易。</p><p>如果您想使用類 C 外部 API（例如指標），您必須選擇加入 <code>@OptIn(ExperimentalForeignApi)</code>，否則您的程式碼將無法編譯。</p><p>若要使用 <code>kotlinx.cinterop</code> 的其餘部分（涵蓋 Objective-C/Swift 互通性），您必須選擇加入 <code>@OptIn(BetaInteropApi)</code>。如果您嘗試在沒有選擇加入的情況下使用此 API，您的程式碼將編譯，但編譯器會 發出警告，提供您可預期行為的清晰解釋。</p><p>有關這些註解的更多資訊，請參閱我們 <a href="https://github.com/JetBrains/kotlin/blob/master/kotlin-native/Interop/Runtime/src/main/kotlin/kotlinx/cinterop/Annotations.kt" target="_blank" rel="noreferrer"><code>Annotations.kt</code></a> 的原始碼。</p><p>有關作為本次審查一部分的<strong>所有</strong>變更的更多資訊，請參閱我們的 <a href="https://youtrack.jetbrains.com/issue/KT-55765" target="_blank" rel="noreferrer">YouTrack 工單</a>。</p><p>我們將感謝您提出的任何回饋！您可以透過在<a href="https://youtrack.jetbrains.com/issue/KT-57728" target="_blank" rel="noreferrer">工單</a>上留言直接提供您的回饋。</p><h3 id="穩定-volatile-註解" tabindex="-1">穩定 @Volatile 註解 <a class="header-anchor" href="#穩定-volatile-註解" aria-label="Permalink to &quot;穩定 @Volatile 註解&quot;">​</a></h3><p>如果您用 <code>@Volatile</code> 註解 <code>var</code> 屬性，則後備欄位會被標記，以便對此欄位的任何讀取或寫入都是原子性的，並且寫入總是對其他執行緒可見。</p><p>在 1.8.20 之前，<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.jvm/-volatile/" target="_blank" rel="noreferrer"><code>kotlin.jvm.Volatile</code> 註解</a> 在共同標準函式庫中可用。然而，此註解僅在 JVM 上有效。如果您在其他平台上使用它，它會被忽略，這導致錯誤。</p><p>在 1.8.20 中，我們引入了一個實驗性的共同註解 <code>kotlin.concurrent.Volatile</code>，您可以在 JVM 和 Kotlin/Native 中預覽。</p><p>在 1.9.0 中，<code>kotlin.concurrent.Volatile</code> 已穩定。如果您在多平台專案中使用 <code>kotlin.jvm.Volatile</code>，我們 建議您遷移到 <code>kotlin.concurrent.Volatile</code>。</p><h3 id="根據名稱取得正規表達式捕獲群組的新共同函式" tabindex="-1">根據名稱取得正規表達式捕獲群組的新共同函式 <a class="header-anchor" href="#根據名稱取得正規表達式捕獲群組的新共同函式" aria-label="Permalink to &quot;根據名稱取得正規表達式捕獲群組的新共同函式&quot;">​</a></h3><p>在 1.9.0 之前，每個平台都有自己的擴展來根據其名稱從正規表達式匹配中取得正規表達式捕獲群組。 然而，沒有共同函式。在 Kotlin 1.8.0 之前，不可能有共同函式， 因為標準函式庫仍然支援 JVM 目標 1.6 和 1.7。</p><p>從 Kotlin 1.8.0 開始，標準函式庫使用 JVM 目標 1.8 編譯。因此在 1.9.0 中，現在有一個<strong>共同</strong>的 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/-match-result/groups.html" target="_blank" rel="noreferrer"><code>groups</code></a> 函式，您可以使用它來 檢索正規表達式匹配中屬於特定捕獲群組的群組內容。當您想要存取屬於特定捕獲群組的正規表達式匹配結果時，這很有用。</p><p>以下是一個包含三個捕獲群組（<code>city</code>、<code>state</code> 和 <code>areaCode</code>）的正規表達式範例。您 可以使用這些群組名稱來存取匹配的值：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> regex </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(?&lt;city&gt;[A-Za-z</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">]+),</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(?&lt;state&gt;[A-Z]{2}):</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(?&lt;areaCode&gt;[0-9]{3})</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toRegex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> input </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Coordinates: Austin, TX: 123&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> match </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> regex.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">find</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(input)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!!</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(match.groups[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;city&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]?.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Austin</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(match.groups[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;state&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]?.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // TX</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(match.groups[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;areaCode&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]?.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 123</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="建立父目錄的新路徑工具程式" tabindex="-1">建立父目錄的新路徑工具程式 <a class="header-anchor" href="#建立父目錄的新路徑工具程式" aria-label="Permalink to &quot;建立父目錄的新路徑工具程式&quot;">​</a></h3><p>在 1.9.0 中，有一個新的 <code>createParentDirectories()</code> 擴展函式，您可以使用它來建立一個新檔案以及所有 必要的父目錄。當您向 <code>createParentDirectories()</code> 提供檔案路徑時，它會檢查父目錄是否已存在。 如果存在，它不做任何事。然而，如果不存在，它會為您建立它們。</p><p><code>createParentDirectories()</code> 在您複製檔案時特別有用。例如，您可以將其與 <code>copyToRecursively()</code> 函式結合使用：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sourcePath.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">copyToRecursively</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   destinationPath.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createParentDirectories</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   followLinks </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="新的-hexformat-類別來格式化和解析十六進位值" tabindex="-1">新的 HexFormat 類別來格式化和解析十六進位值 <a class="header-anchor" href="#新的-hexformat-類別來格式化和解析十六進位值" aria-label="Permalink to &quot;新的 HexFormat 類別來格式化和解析十六進位值&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>新的 <code>HexFormat</code> 類別及其相關的擴展函式是<a href="/zh-Hant/kotlin/components-stability#stability-levels-explained">實驗性</a>功能， 若要使用它們，您可以選擇加入 <code>@OptIn(ExperimentalStdlibApi::class)</code> 或編譯器引數 <code>-opt-in=kotlin.ExperimentalStdlibApi</code>。</p></div><p>在 1.9.0 中，<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/-hex-format/" target="_blank" rel="noreferrer"><code>HexFormat</code></a> 類別及其相關的 擴展函式作為實驗性功能提供，允許您在數值和十六進位字串之間進行轉換。 具體來說，您可以使用擴展函式在十六進位字串與 <code>ByteArrays</code> 或其他數值型別（<code>Int</code>、<code>Short</code>、<code>Long</code>）之間進行轉換。</p><p>例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">93</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toHexString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;0000005d&quot;</span></span></code></pre></div><p><code>HexFormat</code> 類別包含可以使用 <code>HexFormat{}</code> 建構器配置的格式化選項。</p><p>如果您正在使用 <code>ByteArrays</code>，您有以下選項，這些選項可透過屬性配置：</p><table tabindex="0"><thead><tr><th style="text-align:left;">選項</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>upperCase</code></td><td style="text-align:left;">十六進位數字是大寫還是小寫。依預設，假定為小寫。<code>upperCase = false</code>。</td></tr><tr><td style="text-align:left;"><code>bytes.bytesPerLine</code></td><td style="text-align:left;">每行最大位元組數。</td></tr><tr><td style="text-align:left;"><code>bytes.bytesPerGroup</code></td><td style="text-align:left;">每組最大位元組數。</td></tr><tr><td style="text-align:left;"><code>bytes.bytesSeparator</code></td><td style="text-align:left;">位元組間的分隔符。依預設無。</td></tr><tr><td style="text-align:left;"><code>bytes.bytesPrefix</code></td><td style="text-align:left;">緊接在每個位元組的兩位數十六進位表示之前字串，依預設無。</td></tr><tr><td style="text-align:left;"><code>bytes.bytesSuffix</code></td><td style="text-align:left;">緊接在每個位元組的兩位數十六進位表示之後字串，依預設無。</td></tr></tbody></table><p>例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> macAddress </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;001b638445e6&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hexToByteArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用 HexFormat{} 建構器用冒號分隔十六進位字串</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(macAddress.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toHexString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HexFormat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { bytes.byteSeparator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;00:1b:63:84:45:e6&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用 HexFormat{} 建構器來：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// * 將十六進位字串大寫</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// * 將位元組成對分組</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// * 用句號分隔</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> threeGroupFormat </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HexFormat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { upperCase </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; bytes.bytesPerGroup </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; bytes.groupSeparator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(macAddress.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toHexString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(threeGroupFormat))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;001B.6384.45E6&quot;</span></span></code></pre></div><p>如果您正在使用數值型別，您有以下選項，這些選項可透過屬性配置：</p><table tabindex="0"><thead><tr><th style="text-align:left;">選項</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>number.prefix</code></td><td style="text-align:left;">十六進位字串的前綴，依預設無。</td></tr><tr><td style="text-align:left;"><code>number.suffix</code></td><td style="text-align:left;">十六進位字串的後綴，依預設無。</td></tr><tr><td style="text-align:left;"><code>number.removeLeadingZeros</code></td><td style="text-align:left;">是否移除十六進位字串中的前導零。依預設，不移除任何前導零。<code>number.removeLeadingZeros = false</code></td></tr></tbody></table><p>例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用 HexFormat{} 建構器解析具有前綴 &quot;0x&quot; 的十六進位值。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0x3a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hexToInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HexFormat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { number.prefix </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;0x&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;58&quot;</span></span></code></pre></div><h2 id="文件更新" tabindex="-1">文件更新 <a class="header-anchor" href="#文件更新" aria-label="Permalink to &quot;文件更新&quot;">​</a></h2><p>Kotlin 文件收到了一些顯著變更：</p><ul><li><a href="/zh-Hant/kotlin/kotlin-tour-welcome">Kotlin 之旅</a> – 學習 Kotlin 程式語言的基礎知識，章節包含理論與實踐。</li><li><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-android-layout.html" target="_blank" rel="noreferrer">Android 來源集佈局</a> – 了解新的 Android 來源集佈局。</li><li><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-compatibility-guide.html" target="_blank" rel="noreferrer">Kotlin 多平台相容性指南</a> – 了解您在使用 Kotlin 多平台開發專案時可能遇到的不相容變更。</li><li><a href="/zh-Hant/kotlin/wasm-overview">Kotlin Wasm</a> – 了解 Kotlin/Wasm 以及如何在您的 Kotlin 多平台專案中使用它。</li></ul><h2 id="安裝-kotlin-1-9-0" tabindex="-1">安裝 Kotlin 1.9.0 <a class="header-anchor" href="#安裝-kotlin-1-9-0" aria-label="Permalink to &quot;安裝 Kotlin 1.9.0&quot;">​</a></h2><h3 id="檢查-ide-版本" tabindex="-1">檢查 IDE 版本 <a class="header-anchor" href="#檢查-ide-版本" aria-label="Permalink to &quot;檢查 IDE 版本&quot;">​</a></h3><p><a href="https://www.jetbrains.com/idea/download/" target="_blank" rel="noreferrer">IntelliJ IDEA</a> 2022.3.3 和 2023.1.1 會自動建議將 Kotlin 外掛程式更新到 1.9.0 版本。IntelliJ IDEA 2023.2 將包含 Kotlin 1.9.0 外掛程式。</p><p>Android Studio Giraffe (223) 和 Hedgehog (231) 將在其即將發佈的版本中支援 Kotlin 1.9.0。</p><p>新的命令列編譯器可在 <a href="https://github.com/JetBrains/kotlin/releases/tag/v1.9.0" target="_blank" rel="noreferrer">GitHub 發佈頁面</a>上下載。</p><h3 id="配置-gradle-設定" tabindex="-1">配置 Gradle 設定 <a class="header-anchor" href="#配置-gradle-設定" aria-label="Permalink to &quot;配置 Gradle 設定&quot;">​</a></h3><p>若要下載 Kotlin 成品與依賴項，請更新您的 <code>settings.gradle(.kts)</code> 檔案以使用 Maven Central Repository：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pluginManagement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    repositories</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        mavenCentral</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        gradlePluginPortal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>如果未指定儲存庫，Gradle 將使用已停用的 JCenter 儲存庫，這可能導致 Kotlin 成品問題。</p><h2 id="kotlin-1-9-0-相容性指南" tabindex="-1">Kotlin 1.9.0 相容性指南 <a class="header-anchor" href="#kotlin-1-9-0-相容性指南" aria-label="Permalink to &quot;Kotlin 1.9.0 相容性指南&quot;">​</a></h2><p>Kotlin 1.9.0 是一個<a href="/zh-Hant/kotlin/kotlin-evolution-principles#language-and-tooling-releases">功能發佈</a>，因此可能 帶來與您為早期語言版本編寫的程式碼不相容的變更。在 <a href="/zh-Hant/kotlin/compatibility-guide-19">Kotlin 1.9.0 相容性指南</a>中找到這些變更的詳細列表。</p>`,89))])}const D=c(u,[["render",F]]);export{K as __pageData,D as default};
