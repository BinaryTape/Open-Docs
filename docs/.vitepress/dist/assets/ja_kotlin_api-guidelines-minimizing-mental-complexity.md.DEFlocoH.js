import{_ as t,c as e,o as a,ag as n}from"./chunks/framework.Bksy39di.js";const g=JSON.parse('{"title":"メンタル複雑性の最小化の概要","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/api-guidelines-minimizing-mental-complexity.md","filePath":"ja/kotlin/api-guidelines-minimizing-mental-complexity.md","lastUpdated":1754307826000}'),l={name:"ja/kotlin/api-guidelines-minimizing-mental-complexity.md"};function o(r,i,s,p,m,d){return a(),e("div",null,i[0]||(i[0]=[n('<h1 id="メンタル複雑性の最小化の概要" tabindex="-1">メンタル複雑性の最小化の概要 <a class="header-anchor" href="#メンタル複雑性の最小化の概要" aria-label="Permalink to &quot;メンタル複雑性の最小化の概要&quot;">​</a></h1><p>ユーザーは、ライブラリの関数や抽象化を使用する前に、それらのメンタルモデルを迅速かつ正確に構築する必要があります。これを達成する最良の方法は、ユーザーが遭遇する複雑さを最小限に抑えることです。</p><p>メンタル複雑性を最小限に抑えるための戦略には、以下が含まれます。</p><ul><li><strong>シンプルさ</strong>: 最少のコンポーネントで最大の機能を提供し、既存のKotlinタイプと構造を再利用して冗長性を回避するAPIを目指します。可能な場合は、少数のコアとなる抽象化を作成し、その上に機能を追加構築します。</li><li><strong>可読性</strong>: コードの意図を明確にするために、APIを宣言的なスタイルで記述します。新しい抽象化を考案することが絶対に必要でない限り、問題ドメインから直接抽象化の名前を選択します。基本的なデータ型をその意図された目的に使用します。コア機能とオプション機能を明確に区別します。</li><li><strong>一貫性</strong>: APIのすべての設計側面において、単一の明確なアプローチを維持します。オブジェクト指向であろうと関数型であろうと、統一された命名規則、エラー処理戦略、パターンを使用します。</li><li><strong>予測可能性</strong>: ライブラリを<a href="https://en.wikipedia.org/wiki/Principle_of_least_astonishment" target="_blank" rel="noreferrer">「最小驚きの原則」</a>に準拠するように設計します。デフォルト設定が最も一般的な使用例と一致するようにし、ユーザーが最もシンプルで短いコードでタスクを達成できるようにします。一貫性と予測可能性を維持するために、ライブラリへの拡張は明確に指定された方法でのみ許可します。</li><li><strong>デバッグ可能性</strong>: ライブラリが、情報の抽出やネストされた関数呼び出しのナビゲーションを容易にすることで、ユーザーのトラブルシューティングを支援するようにします。例外がスローされる際、例外の型と内容は基となる問題と一致し、問題を効果的に診断および解決するために必要なすべての詳細を提供する必要があります。ドメインオブジェクトの状態をキャプチャして出力し、中間表現を表示できる必要があります。</li><li><strong>テスト可能性</strong>: ライブラリだけでなく、それを使用するコードも簡単にテストできるようにします。</li></ul><p>以下のセクションでは、Kotlinでこれらの戦略を実装するためのより詳細な情報を提供します。</p><h2 id="次のステップ" tabindex="-1">次のステップ <a class="header-anchor" href="#次のステップ" aria-label="Permalink to &quot;次のステップ&quot;">​</a></h2><p>これらの戦略を深く探求するために、次のセクションでシンプルさについて学ぶことから始めることができます。</p><p><a href="/ja/kotlin/api-guidelines-simplicity">次のパートに進む</a></p>',8)]))}const c=t(l,[["render",o]]);export{g as __pageData,c as default};
