import{_ as t,c as e,o as a,ag as o}from"./chunks/framework.Bksy39di.js";const m=JSON.parse('{"title":"主要な概念","description":"","frontmatter":{},"headers":[],"relativePath":"ja/koog/key-concepts.md","filePath":"ja/koog/key-concepts.md","lastUpdated":1754431054000}'),n={name:"ja/koog/key-concepts.md"};function l(i,r,s,g,p,h){return a(),e("div",null,r[0]||(r[0]=[o('<h1 id="主要な概念" tabindex="-1">主要な概念 <a class="header-anchor" href="#主要な概念" aria-label="Permalink to &quot;主要な概念&quot;">​</a></h1><h2 id="エージェント" tabindex="-1">エージェント <a class="header-anchor" href="#エージェント" aria-label="Permalink to &quot;エージェント&quot;">​</a></h2><ul><li><p><strong>エージェント</strong>: ツールと連携し、複雑なワークフローを処理し、ユーザーと対話できるAIエンティティです。</p></li><li><p><strong>LLM（大規模言語モデル）</strong>: エージェントの機能を支える基盤となるAIモデルです。</p></li><li><p><strong>メッセージ</strong>: エージェントシステムにおけるコミュニケーションの単位であり、ユーザー、アシスタント、またはシステムから渡されるデータを表します。</p></li><li><p><strong>プロンプト</strong>: ユーザー、アシスタント、システムからのメッセージで構成され、LLMに提供される会話履歴です。</p></li><li><p><strong>システムプロンプト</strong>: エージェントの振る舞いを導き、その役割を定義し、タスクに必要な主要な情報を提供する、エージェントに提供される指示です。</p></li><li><p><strong>コンテキスト</strong>: 会話履歴とツールにアクセスできる、LLMの対話が行われる環境です。</p></li><li><p><strong>LLMセッション</strong>: 会話履歴、利用可能なツール、およびリクエストを行うためのメソッドを含む、LLMと対話するための構造化された方法です。</p></li></ul><h2 id="エージェントのワークフロー" tabindex="-1">エージェントのワークフロー <a class="header-anchor" href="#エージェントのワークフロー" aria-label="Permalink to &quot;エージェントのワークフロー&quot;">​</a></h2><ul><li><strong>ストラテジー</strong>: 連続するサブグラフで構成される、エージェントのために定義されたワークフローです。ストラテジーは、エージェントがどのように入力を処理し、ツールと連携し、出力を生成するかを定義します。戦略グラフは、ノード間の遷移を表すエッジで接続されたノードで構成されます。</li></ul><h3 id="ストラテジーグラフ" tabindex="-1">ストラテジーグラフ <a class="header-anchor" href="#ストラテジーグラフ" aria-label="Permalink to &quot;ストラテジーグラフ&quot;">​</a></h3><ul><li><p><strong>グラフ</strong>: エージェントのストラテジーワークフローを定義する、エッジで接続されたノードの構造です。</p></li><li><p><strong>ノード</strong>: 特定の操作または変換を表す、エージェントのストラテジーワークフローの基本的な構成要素です。</p></li><li><p><strong>エッジ</strong>: エージェントグラフ内のノード間の接続であり、操作の流れを定義し、多くの場合、各エッジをたどるタイミングを指定する条件を伴います。</p></li><li><p><strong>条件</strong>: 特定のエッジをたどるタイミングを決定するルールです。</p></li><li><p><strong>サブグラフ</strong>: エージェントのストラテジー内における自己完結型の処理単位であり、独自のツールセット、コンテキスト、および責務を持ちます。サブグラフの操作に関する情報は、サブグラフ内にカプセル化することも、AgentMemory機能を使用してサブグラフ間で転送することもできます。</p></li></ul><h2 id="ツール" tabindex="-1">ツール <a class="header-anchor" href="#ツール" aria-label="Permalink to &quot;ツール&quot;">​</a></h2><ul><li><p><strong>ツール</strong>: エージェントが特定のタスクを実行したり、外部システムにアクセスしたりするために使用できる関数です。エージェントは利用可能なツールとその引数を認識していますが、その実装の詳細については知識がありません。</p></li><li><p><strong>ツール呼び出し</strong>: LLMからのリクエストであり、提供された引数を使用して特定のツールを実行します。関数呼び出しと同様に機能します。</p></li><li><p><strong>ツール記述子</strong>: ツールのメタデータであり、その名前、説明、およびパラメーターを含みます。</p></li><li><p><strong>ツールレジストリ</strong>: エージェントが利用できるツールのリストです。このレジストリは、利用可能なツールについてエージェントに通知します。</p></li><li><p><strong>ツール結果</strong>: ツールを実行することによって生成される出力です。たとえば、ツールがメソッドである場合、その結果は戻り値となります。</p></li></ul><h2 id="履歴の圧縮" tabindex="-1">履歴の圧縮 <a class="header-anchor" href="#履歴の圧縮" aria-label="Permalink to &quot;履歴の圧縮&quot;">​</a></h2><ul><li><strong>履歴の圧縮</strong>: さまざまな圧縮ストラテジーを適用することによって、トークン使用量を管理するために会話履歴のサイズを削減するプロセスです。詳細については、<a href="./history-compression">履歴の圧縮</a>を参照してください。</li></ul><h2 id="機能" tabindex="-1">機能 <a class="header-anchor" href="#機能" aria-label="Permalink to &quot;機能&quot;">​</a></h2><ul><li><strong>機能</strong>: AIエージェントの機能を拡張および強化するコンポーネントです。</li></ul><h3 id="eventhandler機能" tabindex="-1">EventHandler機能 <a class="header-anchor" href="#eventhandler機能" aria-label="Permalink to &quot;EventHandler機能&quot;">​</a></h3><ul><li><strong>EventHandler</strong>: さまざまなエージェントイベントの監視と応答を可能にする機能であり、ワークフロー全体でエージェントのライフサイクルを追跡し、エラーを処理し、ツールの呼び出しを処理するためのフックを提供します。</li></ul><h3 id="agentmemory機能" tabindex="-1">AgentMemory機能 <a class="header-anchor" href="#agentmemory機能" aria-label="Permalink to &quot;AgentMemory機能&quot;">​</a></h3><ul><li><p><strong>AgentMemory</strong>: AIエージェントが会話を越えて情報を保存、取得、使用できるようにする機能です。詳細については、<a href="./agent-memory">AgentMemory</a>を参照してください。</p></li><li><p><strong>コンセプト</strong>: AgentMemory機能において、キーワード、説明、ファクトタイプを含む関連するメタデータを持つ情報のカテゴリです。コンセプトは、エージェントが記憶し、呼び出すことができるAgentMemoryシステムの基本的な構成要素です。詳細については、<a href="./agent-memory">AgentMemory</a>を参照してください。</p></li><li><p><strong>ファクト</strong>: AgentMemoryシステムに保存される個々の情報です。ファクトはコンセプトと関連付けられており、単一の値を持つことも、複数の値を持つこともできます。詳細については、<a href="./agent-memory">AgentMemory</a>を参照してください。</p></li><li><p><strong>メモリスコープ</strong>: ファクトが関連性を持つコンテキストです。詳細については、<a href="./agent-memory">AgentMemory</a>を参照してください。</p></li></ul>',17)]))}const c=t(n,[["render",l]]);export{m as __pageData,c as default};
