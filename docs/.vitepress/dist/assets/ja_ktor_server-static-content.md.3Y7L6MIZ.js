import{_ as k,C as t,c as o,o as r,j as i,G as e,ag as d,a,w as n}from"./chunks/framework.Bksy39di.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ja/ktor/server-static-content.md","filePath":"ja/ktor/server-static-content.md","lastUpdated":1755457140000}'),E={name:"ja/ktor/server-static-content.md"};function c(g,s,u,y,F,C){const l=t("show-structure"),h=t("tldr"),p=t("link-summary");return r(),o("div",null,[s[2]||(s[2]=i("h1",{id:"静的コンテンツの提供",tabindex:"-1"},[a("静的コンテンツの提供 "),i("a",{class:"header-anchor",href:"#静的コンテンツの提供","aria-label":'Permalink to "静的コンテンツの提供"'},"​")],-1)),e(l,{for:"chapter",depth:"2"}),e(h,null,{default:n(()=>s[0]||(s[0]=[i("p",null,[i("b",null,"コード例"),a(": "),i("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/static-files"},"static-files"),a(", "),i("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/static-resources"},"static-resources"),a(", "),i("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/static-zip"},"static-zip")],-1)])),_:1}),e(p,null,{default:n(()=>s[1]||(s[1]=[a(" スタイルシート、スクリプト、画像などの静的コンテンツを提供する方法を学びます。 ")])),_:1}),s[3]||(s[3]=d(`<p>ウェブサイトを構築している場合でも、HTTPエンドポイントを作成している場合でも、アプリケーションはスタイルシート、スクリプト、画像などのファイルを提供する必要があるでしょう。 Ktorでファイルのコンテンツをロードし、クライアントに<a href="./server-responses">応答として送信</a>することは確かに可能ですが、Ktorは静的コンテンツを提供するための追加機能を提供することで、このプロセスを簡素化します。</p><p>Ktorを使用すると、<a href="#folders">フォルダ</a>、<a href="#zipped">ZIPファイル</a>、<a href="#resources">埋め込みアプリケーションリソース</a>からコンテンツを提供できます。</p><h2 id="folders" tabindex="-1">フォルダ <a class="header-anchor" href="#folders" aria-label="Permalink to &quot;フォルダ {id=&quot;folders&quot;}&quot;">​</a></h2><p>ローカルファイルシステムから静的ファイルを提供するには、<a href="https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.http.content/static-files.html" target="_blank" rel="noreferrer"><code>staticFiles()</code></a>関数を使用します。この場合、相対パスは現在の作業ディレクトリを使用して解決されます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    staticFiles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/resources&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">File</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;files&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>上記の例では、<code>/resources</code> からのすべてのリクエストは、現在の作業ディレクトリ内の物理フォルダ <code>files</code> にマッピングされます。 Ktorは、URLパスと物理ファイル名が一致する限り、<code>files</code> から任意のファイルを再帰的に提供します。</p><p>完全な例については、<a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/static-files" target="_blank" rel="noreferrer">static-files</a>を参照してください。</p><h2 id="zipped" tabindex="-1">ZIPファイル <a class="header-anchor" href="#zipped" aria-label="Permalink to &quot;ZIPファイル {id=&quot;zipped&quot;}&quot;">​</a></h2><p>ZIPファイルから静的コンテンツを提供するために、Ktorは<a href="https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.http.content/static-zip.html" target="_blank" rel="noreferrer"><code>staticZip()</code></a>関数を提供します。これにより、以下の例に示すように、リクエストをZIPアーカイブのコンテンツに直接マッピングできます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    staticZip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Paths.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;files/text-files.zip&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>この例では、ルートURL <code>/</code> からのすべてのリクエストは、ZIPファイル <code>text-files.zip</code> のコンテンツに直接マッピングされます。</p><h3 id="zip-auto-reload" tabindex="-1">自動リロードのサポート <a class="header-anchor" href="#zip-auto-reload" aria-label="Permalink to &quot;自動リロードのサポート {id=&quot;zip-auto-reload&quot;}&quot;">​</a></h3><p><code>staticZip()</code> 関数は自動リロードもサポートしています。ZIPファイルの親ディレクトリで変更が検出された場合、次のリクエストでZIPファイルシステムがリロードされます。これにより、サーバーの再起動を必要とせずに、提供されるコンテンツが最新の状態に保たれます。</p><p>完全な例については、<a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/static-zip" target="_blank" rel="noreferrer">static-zip</a>を参照してください。</p><h2 id="resources" tabindex="-1">リソース <a class="header-anchor" href="#resources" aria-label="Permalink to &quot;リソース {id=&quot;resources&quot;}&quot;">​</a></h2><p>クラスパスからコンテンツを提供するには、<a href="https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.http.content/static-resources.html" target="_blank" rel="noreferrer"><code>staticResources()</code></a>関数を使用します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    staticResources</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/resources&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;static&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>これは、<code>/resources</code> からのすべてのリクエストを、アプリケーションリソース内の <code>static</code> パッケージにマッピングします。 この場合、Ktorは、URLパスとリソースへのパスが一致する限り、<code>static</code> パッケージから任意のファイルを再帰的に提供します。</p><p>完全な例については、<a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/static-resources" target="_blank" rel="noreferrer">static-resources</a>を参照してください。</p><h2 id="configuration" tabindex="-1">追加設定 <a class="header-anchor" href="#configuration" aria-label="Permalink to &quot;追加設定 {id=&quot;configuration&quot;}&quot;">​</a></h2><p>Ktorは、静的ファイルとリソースに対してより多くの設定を提供します。</p><h3 id="index" tabindex="-1">インデックスファイル <a class="header-anchor" href="#index" aria-label="Permalink to &quot;インデックスファイル {id=&quot;index&quot;}&quot;">​</a></h3><p><code>index.html</code> という名前のファイルが存在する場合、Ktorはディレクトリがリクエストされたときにデフォルトでそれをサービス提供します。<code>index</code> パラメータを使用してカスタムインデックスファイルを指定できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">staticResources</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/custom&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;static&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;custom_index.html&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>この場合、<code>/custom</code> がリクエストされると、Ktorは <code>/custom_index.html</code> を提供します。</p><h3 id="precompressed" tabindex="-1">事前圧縮ファイル <a class="header-anchor" href="#precompressed" aria-label="Permalink to &quot;事前圧縮ファイル {id=&quot;precompressed&quot;}&quot;">​</a></h3><p>Ktorは、事前圧縮ファイルを提供し、<a href="./server-compression">動的圧縮</a>の使用を避ける機能を提供します。この機能を使用するには、<code>preCompressed()</code> 関数をブロックステートメント内に定義します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">staticFiles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">File</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;files&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    preCompressed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CompressedFileType.BROTLI, CompressedFileType.GZIP)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>この例では、<code>/js/script.js</code> へのリクエストに対して、Ktorは <code>/js/script.js.br</code> または <code>/js/script.js.gz</code> を提供できます。</p><h3 id="autohead" tabindex="-1">HEADリクエスト <a class="header-anchor" href="#autohead" aria-label="Permalink to &quot;HEADリクエスト {id=&quot;autohead&quot;}&quot;">​</a></h3><p><code>enableAutoHeadResponse()</code> 関数を使用すると、<code>GET</code> が定義されている静的ルート内のすべてのパスに対する <code>HEAD</code> リクエストに自動的に応答できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">staticResources</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;static&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    enableAutoHeadResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="default-file" tabindex="-1">デフォルトファイル応答 <a class="header-anchor" href="#default-file" aria-label="Permalink to &quot;デフォルトファイル応答 {id=&quot;default-file&quot;}&quot;">​</a></h3><p><code>default()</code> 関数は、対応するファイルがない静的ルート内の任意のリクエストに対してファイルで応答する機能を提供します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">staticFiles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">File</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;files&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;index.html&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>この例では、クライアントが存在しないリソースをリクエストした場合、<code>index.html</code> ファイルが応答として提供されます。</p><h3 id="content-type" tabindex="-1">コンテンツタイプ <a class="header-anchor" href="#content-type" aria-label="Permalink to &quot;コンテンツタイプ {id=&quot;content-type&quot;}&quot;">​</a></h3><p>デフォルトでは、Ktorはファイル拡張子から <code>Content-Type</code> ヘッダーの値を推測しようとします。<code>contentType()</code> 関数を使用して、<code>Content-Type</code> ヘッダーを明示的に設定できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">staticFiles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/files&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">File</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;textFiles&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    contentType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { file </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        when</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (file.name) {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;html-file.txt&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ContentType.Text.Html</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>この例では、<code>html-file.txt</code> ファイルへの応答には <code>Content-Type: text/html</code> ヘッダーが含まれ、他のすべてのファイルにはデフォルトの動作が適用されます。</p><h3 id="caching" tabindex="-1">キャッシング <a class="header-anchor" href="#caching" aria-label="Permalink to &quot;キャッシング {id=&quot;caching&quot;}&quot;">​</a></h3><p><code>cacheControl()</code> 関数を使用すると、HTTPキャッシングのための <code>Cache-Control</code> ヘッダーを設定できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        staticFiles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/files&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">File</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;textFiles&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            cacheControl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { file </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                when</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (file.name) {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                    &quot;file.txt&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Immutable, CacheControl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MaxAge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                    else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> emptyList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Immutable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CacheControl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;immutable&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Ktorでのキャッシングに関する詳細については、<a href="./server-caching-headers">キャッシングヘッダー</a>を参照してください。</p></div><h3 id="exclude" tabindex="-1">除外ファイル <a class="header-anchor" href="#exclude" aria-label="Permalink to &quot;除外ファイル {id=&quot;exclude&quot;}&quot;">​</a></h3><p><code>exclude()</code> 関数を使用すると、提供されるファイルから特定のファイルを除外できます。除外されたファイルがクライアントによってリクエストされた場合、サーバーは <code>403 Forbidden</code> ステータスコードで応答します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">staticFiles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/files&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">File</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;textFiles&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    exclude</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { file </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> file.path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">contains</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;excluded&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="extensions" tabindex="-1">ファイル拡張子のフォールバック <a class="header-anchor" href="#extensions" aria-label="Permalink to &quot;ファイル拡張子のフォールバック {id=&quot;extensions&quot;}&quot;">​</a></h3><p>リクエストされたファイルが見つからない場合、Ktorはファイル名に指定された拡張子を追加して検索できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">staticResources</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;static&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    extensions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;html&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;htm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>この例では、<code>/index</code> がリクエストされると、Ktorは <code>/index.html</code> を検索し、見つかったコンテンツを提供します。</p><h3 id="modify" tabindex="-1">カスタム変更 <a class="header-anchor" href="#modify" aria-label="Permalink to &quot;カスタム変更 {id=&quot;modify&quot;}&quot;">​</a></h3><p><code>modify()</code> 関数を使用すると、結果の応答にカスタム変更を適用できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">staticFiles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">File</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;files&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    modify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { file, call </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        call.response.headers.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpHeaders.ETag, file.name.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="errors" tabindex="-1">エラー処理 <a class="header-anchor" href="#errors" aria-label="Permalink to &quot;エラー処理 {id=&quot;errors&quot;}&quot;">​</a></h2><p>リクエストされたコンテンツが見つからない場合、Ktorは自動的に <code>404 Not Found</code> HTTPステータスコードで応答します。</p><p>エラー処理の設定方法については、<a href="./server-status-pages">ステータスページ</a>を参照してください。</p>`,57))])}const m=k(E,[["render",c]]);export{b as __pageData,m as default};
