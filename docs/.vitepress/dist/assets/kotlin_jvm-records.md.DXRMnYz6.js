import{_ as e,C as t,c as l,o as n,ag as i,G as o}from"./chunks/framework.Bksy39di.js";const v=JSON.parse('{"title":"在 Kotlin 中使用 Java 记录","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/jvm-records.md","filePath":"kotlin/jvm-records.md","lastUpdated":1754307826000}'),p={name:"kotlin/jvm-records.md"};function h(r,a,d,k,c,g){const s=t("TopicTitle");return n(),l("div",null,[a[0]||(a[0]=i(`<h1 id="在-kotlin-中使用-java-记录" tabindex="-1">在 Kotlin 中使用 Java 记录 <a class="header-anchor" href="#在-kotlin-中使用-java-记录" aria-label="Permalink to &quot;在 Kotlin 中使用 Java 记录&quot;">​</a></h1><p>记录是 Java 中用于存储不可变数据的<a href="https://openjdk.java.net/jeps/395" target="_blank" rel="noreferrer">类</a>。记录带有一组固定的值——即记录组件。它们在 Java 中拥有简洁的语法，并能帮你省去编写样板代码的麻烦：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Java</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> record Person (String name, int age) {}</span></span></code></pre></div><p>编译器会自动生成一个继承自 <a href="https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Record.html" target="_blank" rel="noreferrer"><code>java.lang.Record</code></a> 的 final 类，包含以下成员：</p><ul><li>为每个记录组件生成一个私有 final 字段</li><li>一个带有所有字段形参的公共构造函数</li><li>一组用于实现结构相等性的方法：<code>equals()</code>、<code>hashCode()</code>、<code>toString()</code></li><li>一个用于读取每个记录组件的公共方法</li></ul><p>记录与 Kotlin <a href="/kotlin/data-classes">数据类</a> 非常相似。</p><h2 id="在-kotlin-代码中使用-java-记录" tabindex="-1">在 Kotlin 代码中使用 Java 记录 <a class="header-anchor" href="#在-kotlin-代码中使用-java-记录" aria-label="Permalink to &quot;在 Kotlin 代码中使用 Java 记录&quot;">​</a></h2><p>你可以像在 Kotlin 中使用带属性的类一样，使用在 Java 中声明的记录类及其组件。要访问记录组件，只需像访问 <a href="/kotlin/properties">Kotlin 属性</a> 那样使用其名称即可：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newPerson </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Kotlin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> firstName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newPerson.name</span></span></code></pre></div><h2 id="在-kotlin-中声明记录" tabindex="-1">在 Kotlin 中声明记录 <a class="header-anchor" href="#在-kotlin-中声明记录" aria-label="Permalink to &quot;在 Kotlin 中声明记录&quot;">​</a></h2><p>Kotlin 仅支持针对数据类的记录声明，并且该数据类必须满足 <a href="#requirements">要求</a>。</p><p>要在 Kotlin 中声明记录类，请使用 <code>@JvmRecord</code> 注解：</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>将 <code>@JvmRecord</code> 应用于现有类不是一个二进制兼容的变更。它会改变类属性访问器的命名约定。</p></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JvmRecord</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>这个 JVM 特有的注解能够生成：</p><ul><li>类文件中与类属性对应的记录组件</li><li>按照 Java 记录命名约定命名的属性访问器方法</li></ul><p>该数据类提供 <code>equals()</code>、<code>hashCode()</code> 和 <code>toString()</code> 方法的实现。</p><h3 id="要求" tabindex="-1">要求 <a class="header-anchor" href="#要求" aria-label="Permalink to &quot;要求&quot;">​</a></h3><p>要使用 <code>@JvmRecord</code> 注解声明数据类，它必须满足以下要求：</p><ul><li>该类必须位于面向 JVM 16 字节码的模块中（如果启用了 <code>-Xjvm-enable-preview</code> 编译器选项，也可以是 15）。</li><li>该类不能显式继承任何其他类（包括 <code>Any</code>），因为所有 JVM 记录都会隐式继承 <code>java.lang.Record</code>。但是，该类可以实现接口。</li><li>该类不能声明任何带有幕后字段的属性——但从相应主构造函数形参初始化的除外。</li><li>该类不能声明任何带有幕后字段的可变属性。</li><li>该类不能是局部类。</li><li>类的主构造函数必须与类本身具有相同的可见性。</li></ul><h3 id="启用-jvm-记录" tabindex="-1">启用 JVM 记录 <a class="header-anchor" href="#启用-jvm-记录" aria-label="Permalink to &quot;启用 JVM 记录&quot;">​</a></h3><p>JVM 记录要求生成的 JVM 字节码的目标版本为 <code>16</code> 或更高。</p><p>要显式指定它，请在 <a href="/kotlin/gradle-compiler-options#attributes-specific-to-jvm">Gradle</a> 或 <a href="/kotlin/maven#attributes-specific-to-jvm">Maven</a> 中使用 <code>jvmTarget</code> 编译器选项。</p>`,23)),o(s,{id:"在-kotlin-中为记录组件添加注解",level:"2",title:"在 Kotlin 中为记录组件添加注解",labelRef:"experimental-general"}),a[1]||(a[1]=i(`<p>在 Java 中，记录组件上的 <a href="/kotlin/annotations">注解</a> 会自动传播到幕后字段、getter、setter 和构造函数形参。你可以通过使用 <a href="/kotlin/annotations#all-meta-target"><code>all</code></a> 使用点目标在 Kotlin 中复现此行为。</p><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>要使用 <code>all</code> 使用点目标，你必须选择启用。可以利用 <code>-Xannotation-target-all</code> 编译器选项，或者将以下内容添加到你的 <code>build.gradle.kts</code> 文件中： <code>kotlin kotlin { compilerOptions { freeCompilerArgs.add(&quot;-Xannotation-target-all&quot;) } } </code></p></div><p>例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JvmRecord</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Positive</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> val</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> age</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>当你将 <code>@JvmRecord</code> 与 <code>@all:</code> 一起使用时，Kotlin 会：</p><ul><li>将注解传播到属性、幕后字段、构造函数形参、getter 和 setter。</li><li>如果注解支持 Java 的 <code>RECORD_COMPONENT</code>，则也会将注解应用于记录组件。</li></ul><h2 id="使注解适用于记录组件" tabindex="-1">使注解适用于记录组件 <a class="header-anchor" href="#使注解适用于记录组件" aria-label="Permalink to &quot;使注解适用于记录组件&quot;">​</a></h2><p>要使 <a href="/kotlin/annotations">注解</a> 同时适用于 Kotlin 属性<strong>和</strong> Java 记录组件，请将以下元注解添加到你的注解声明中：</p><ul><li>对于 Kotlin：<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.annotation/-target/index.html" target="_blank" rel="noreferrer"><code>@Target</code></a></li><li>对于 Java 记录组件：<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/annotation/Target.html" target="_blank" rel="noreferrer"><code>@java.lang.annotation.Target</code></a></li></ul><p>例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(AnnotationTarget.CLASS, AnnotationTarget.PROPERTY)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@java.lang.annotation.Target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ElementType.CLASS, ElementType.RECORD_COMPONENT)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">annotation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> exampleClass</span></span></code></pre></div><p>现在你可以将 <code>@ExampleClass</code> 应用于 Kotlin 类和属性，以及 Java 类和记录组件。</p><h2 id="进一步讨论" tabindex="-1">进一步讨论 <a class="header-anchor" href="#进一步讨论" aria-label="Permalink to &quot;进一步讨论&quot;">​</a></h2><p>关于更多技术细节和讨论，请参见此 <a href="https://github.com/Kotlin/KEEP/blob/master/proposals/jvm-records.md" target="_blank" rel="noreferrer">JVM 记录语言提案</a>。</p>`,14))])}const m=e(p,[["render",h]]);export{v as __pageData,m as default};
