import{_ as e}from"./chunks/default-hierarchy-example.DgJqkpuk.js";import{_ as t,a as p}from"./chunks/full-template-hierarchy.DK23XVrY.js";import{_ as o,a as r}from"./chunks/multiplatform-create-project-button.ihqOV7P4.js";import{_ as h,C as k,c as d,o as c,ag as s,G as g,j as i,a as n}from"./chunks/framework.Bksy39di.js";const w=JSON.parse('{"title":"Kotlin 1.9.20の新機能","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/whatsnew1920.md","filePath":"ja/kotlin/whatsnew1920.md","lastUpdated":1754307826000}'),E={name:"ja/kotlin/whatsnew1920.md"};function m(u,a,y,b,f,v){const l=k("YouTubeVideo");return c(),d("div",null,[a[0]||(a[0]=s('<h1 id="kotlin-1-9-20の新機能" tabindex="-1">Kotlin 1.9.20の新機能 <a class="header-anchor" href="#kotlin-1-9-20の新機能" aria-label="Permalink to &quot;Kotlin 1.9.20の新機能&quot;">​</a></h1><p><em><a href="/ja/kotlin/releases#release-details">公開日: 2023年11月1日</a></em></p><p>Kotlin 1.9.20がリリースされました。全てのターゲットに対応した<a href="#new-kotlin-k2-k2-compiler-updates">K2コンパイラがベータ版になりました</a>、 そして<a href="#kotlin-multiplatform-is-stable">Kotlin Multiplatformが安定版になりました</a>。さらに、主なハイライトは以下の通りです。</p><ul><li><a href="#template-for-configuring-multiplatform-projects">マルチプラットフォームプロジェクトの設定における新しいデフォルト階層テンプレート</a></li><li><a href="#full-support-for-the-gradle-configuration-cache-in-kotlin-multiplatform">Kotlin MultiplatformにおけるGradle Configuration Cacheの完全サポート</a></li><li><a href="#custom-memory-allocator-enabled-by-default">Kotlin/Nativeでカスタムメモリ割り当て機能がデフォルトで有効に</a></li><li><a href="#performance-improvements-for-the-garbage-collector">Kotlin/Nativeにおけるガベージコレクタのパフォーマンス改善</a></li><li><a href="#new-wasm-wasi-target-and-the-renaming-of-the-wasm-target-to-wasm-js">Kotlin/Wasmにおける新しいターゲットと名称変更されたターゲット</a></li><li><a href="#support-for-the-wasi-api-in-the-standard-library">Kotlin/Wasmの標準ライブラリにおけるWASI APIのサポート</a></li></ul><p>これらのアップデートの簡単な概要は、こちらのビデオでもご覧いただけます。</p>',5)),g(l,{src:"https://www.youtube.com/v/Ol_96CHKqg8",title:"Kotlin 1.9.20の新機能"}),a[1]||(a[1]=s(`<h2 id="ideサポート" tabindex="-1">IDEサポート <a class="header-anchor" href="#ideサポート" aria-label="Permalink to &quot;IDEサポート&quot;">​</a></h2><p>1.9.20をサポートするKotlinプラグインは以下で利用可能です。</p><table tabindex="0"><thead><tr><th>IDE</th><th>サポートされているバージョン</th></tr></thead><tbody><tr><td>IntelliJ IDEA</td><td>2023.1.x, 2023.2.x, 2023.x</td></tr><tr><td>Android Studio</td><td>Hedgehog (2023.1.1), Iguana (2023.2.1)</td></tr></tbody></table><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>IntelliJ IDEA 2023.3.x および Android Studio Iguana (2023.2.1) Canary 15 以降、Kotlinプラグインは自動的に 含まれ、更新されます。必要なのは、プロジェクトのKotlinバージョンを更新することだけです。</p></div><h2 id="kotlin-k2コンパイラの新しいアップデート" tabindex="-1">Kotlin K2コンパイラの新しいアップデート <a class="header-anchor" href="#kotlin-k2コンパイラの新しいアップデート" aria-label="Permalink to &quot;Kotlin K2コンパイラの新しいアップデート&quot;">​</a></h2><p>JetBrainsのKotlinチームは、新しいK2コンパイラの安定化を続けています。これにより、大幅なパフォーマンス向上、 新しい言語機能開発の加速、Kotlinがサポートする全てのプラットフォームの統合、マルチプラットフォームプロジェクトのためのより良いアーキテクチャがもたらされます。</p><p>K2は現在、全てのターゲットで<strong>ベータ版</strong>です。<a href="https://blog.jetbrains.com/kotlin/2023/11/kotlin-1-9-20-released/" target="_blank" rel="noreferrer">リリースブログ投稿で詳細を読む</a></p><h3 id="kotlin-wasmのサポート" tabindex="-1">Kotlin/Wasmのサポート <a class="header-anchor" href="#kotlin-wasmのサポート" aria-label="Permalink to &quot;Kotlin/Wasmのサポート&quot;">​</a></h3><p>このリリース以降、Kotlin/Wasmは新しいK2コンパイラをサポートします。 <a href="#how-to-enable-the-kotlin-k2-compiler">プロジェクトで有効にする方法を学ぶ</a>。</p><h3 id="k2対応kaptコンパイラプラグインのプレビュー" tabindex="-1">K2対応kaptコンパイラプラグインのプレビュー <a class="header-anchor" href="#k2対応kaptコンパイラプラグインのプレビュー" aria-label="Permalink to &quot;K2対応kaptコンパイラプラグインのプレビュー&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>kaptコンパイラプラグインにおけるK2のサポートは<a href="/ja/kotlin/components-stability">Experimental (実験的)</a>です。 オプトインが必要です（詳細は下記参照）。評価目的のみで使用してください。</p></div><p>1.9.20では、K2コンパイラで<a href="/ja/kotlin/kapt">kaptコンパイラプラグイン</a>を試用できます。 プロジェクトでK2コンパイラを使用するには、<code>gradle.properties</code>ファイルに以下のオプションを追加します。</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.experimental.tryK2=true</span></span>
<span class="line"><span>kapt.use.k2=true</span></span></code></pre></div><p>あるいは、以下の手順でkaptにK2を有効にできます。</p><ol><li><code>build.gradle.kts</code>ファイルで、<a href="/ja/kotlin/gradle-compiler-options#example-of-setting-languageversion">言語バージョン</a>を<code>2.0</code>に設定します。</li><li><code>gradle.properties</code>ファイルに<code>kapt.use.k2=true</code>を追加します。</li></ol><p>K2コンパイラでkaptを使用する際に問題が発生した場合は、<a href="http://kotl.in/issue" target="_blank" rel="noreferrer">課題トラッカー</a>に報告してください。</p><h3 id="kotlin-k2コンパイラの有効化方法" tabindex="-1">Kotlin K2コンパイラの有効化方法 <a class="header-anchor" href="#kotlin-k2コンパイラの有効化方法" aria-label="Permalink to &quot;Kotlin K2コンパイラの有効化方法&quot;">​</a></h3><h4 id="gradleでk2を有効にする" tabindex="-1">GradleでK2を有効にする <a class="header-anchor" href="#gradleでk2を有効にする" aria-label="Permalink to &quot;GradleでK2を有効にする&quot;">​</a></h4><p>Kotlin K2コンパイラを有効にしてテストするには、以下のコンパイラオプションで新しい言語バージョンを使用します。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-language-version</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2.0</span></span></code></pre></div><p><code>build.gradle.kts</code>ファイルで以下のように指定できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sourceSets.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        languageSettings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            languageVersion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;2.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="mavenでk2を有効にする" tabindex="-1">MavenでK2を有効にする <a class="header-anchor" href="#mavenでk2を有効にする" aria-label="Permalink to &quot;MavenでK2を有効にする&quot;">​</a></h4><p>Kotlin K2コンパイラを有効にしてテストするには、<code>pom.xml</code>ファイルの<code>&lt;project/&gt;</code>セクションを更新します。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">properties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">kotlin.compiler.languageVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;2.0&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">kotlin.compiler.languageVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">properties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h4 id="intellij-ideaでk2を有効にする" tabindex="-1">IntelliJ IDEAでK2を有効にする <a class="header-anchor" href="#intellij-ideaでk2を有効にする" aria-label="Permalink to &quot;IntelliJ IDEAでK2を有効にする&quot;">​</a></h4><p>IntelliJ IDEAでKotlin K2コンパイラを有効にしてテストするには、<strong>Settings</strong> | <strong>Build, Execution, Deployment</strong> | <strong>Compiler</strong> | <strong>Kotlin Compiler</strong> に移動し、<strong>Language Version</strong>フィールドを<code>2.0 (experimental)</code>に更新します。</p><h3 id="新しいk2コンパイラに関するフィードバックのお願い" tabindex="-1">新しいK2コンパイラに関するフィードバックのお願い <a class="header-anchor" href="#新しいk2コンパイラに関するフィードバックのお願い" aria-label="Permalink to &quot;新しいK2コンパイラに関するフィードバックのお願い&quot;">​</a></h3><p>皆様からのフィードバックをお待ちしております！</p><ul><li>Kotlin SlackのK2開発者に直接フィードバックを送る – <a href="https://surveys.jetbrains.com/s3/kotlin-slack-sign-up?_gl=1*ju6cbn*_ga*MTA3MTk5NDkzMC4xNjQ2MDY3MDU4*_ga_9J976DJZ68*MTY1ODMzNzA3OS4xMDAuMS4xNjU4MzQwODEwLjYw" target="_blank" rel="noreferrer">招待状を取得</a>し、<a href="https://kotlinlang.slack.com/archives/C03PK0PE257" target="_blank" rel="noreferrer">#k2-early-adopters</a>チャンネルに参加してください。</li><li>新しいK2コンパイラで直面した問題は、<a href="https://kotl.in/issue" target="_blank" rel="noreferrer">課題トラッカー</a>に報告してください。</li><li>K2の使用に関する匿名データをJetBrainsが収集できるように、<a href="https://www.jetbrains.com/help/idea/settings-usage-statistics.html" target="_blank" rel="noreferrer">使用統計の送信オプションを有効にする</a>。</li></ul><h2 id="kotlin-jvm" tabindex="-1">Kotlin/JVM <a class="header-anchor" href="#kotlin-jvm" aria-label="Permalink to &quot;Kotlin/JVM&quot;">​</a></h2><p>バージョン1.9.20以降、コンパイラはJava 21のバイトコードを含むクラスを生成できます。</p><h2 id="kotlin-native" tabindex="-1">Kotlin/Native <a class="header-anchor" href="#kotlin-native" aria-label="Permalink to &quot;Kotlin/Native&quot;">​</a></h2><p>Kotlin 1.9.20には、新しいメモリ割り当て機能がデフォルトで有効になった安定版メモリマネージャ、ガベージコレクタのパフォーマンス改善、その他のアップデートが含まれます。</p><ul><li><a href="#custom-memory-allocator-enabled-by-default">カスタムメモリ割り当て機能がデフォルトで有効に</a></li><li><a href="#performance-improvements-for-the-garbage-collector">ガベージコレクタのパフォーマンス改善</a></li><li><a href="#incremental-compilation-of-klib-artifacts"><code>klib</code>成果物のインクリメンタルコンパイル</a></li><li><a href="#managing-library-linkage-issues">ライブラリリンクの問題の管理</a></li><li><a href="#companion-object-initialization-on-class-constructor-calls">クラスコンストラクタ呼び出し時のコンパニオンオブジェクト初期化</a></li><li><a href="#opt-in-requirement-for-all-cinterop-declarations">全てのcinterop宣言に対するオプトイン要件</a></li><li><a href="#custom-message-for-linker-errors">リンカエラーのカスタムメッセージ</a></li><li><a href="#removal-of-the-legacy-memory-manager">レガシーメモリマネージャの削除</a></li><li><a href="#change-to-our-target-tiers-policy">ターゲットティアポリシーの変更</a></li></ul><h3 id="カスタムメモリ割り当て機能がデフォルトで有効に" tabindex="-1">カスタムメモリ割り当て機能がデフォルトで有効に <a class="header-anchor" href="#カスタムメモリ割り当て機能がデフォルトで有効に" aria-label="Permalink to &quot;カスタムメモリ割り当て機能がデフォルトで有効に&quot;">​</a></h3><p>Kotlin 1.9.20では、新しいメモリ割り当て機能がデフォルトで有効になっています。これは、以前のデフォルトのアロケータである、 <code>mimalloc</code>を置き換えるように設計されており、ガベージコレクションをより効率的にし、<a href="/ja/kotlin/native-memory-manager">Kotlin/Nativeメモリマネージャ</a>のランタイムパフォーマンスを向上させます。</p><p>新しいカスタムアロケータは、システムメモリをページに分割し、連続した順序での独立したスイープを可能にします。 各割り当てはページ内のメモリブロックとなり、ページはブロックサイズを追跡します。 異なるページタイプは、様々な割り当てサイズに合わせて最適化されています。 メモリブロックの連続した配置は、全ての割り当て済みブロックの効率的なイテレーションを保証します。</p><p>スレッドがメモリを割り当てる際、割り当てサイズに基づいて適切なページを検索します。 スレッドは、異なるサイズカテゴリのために一連のページを保持します。 通常、与えられたサイズに対する現在のページは割り当てを収容できます。 そうでない場合、スレッドは共有割り当てスペースから別のページを要求します。 このページは既に利用可能であるか、スイープが必要であるか、または最初に作成する必要がある場合があります。</p><p>新しいアロケータは、複数の独立した割り当てスペースを同時に可能にし、 Kotlinチームが異なるページレイアウトを試してパフォーマンスをさらに向上させることができます。</p><h4 id="カスタムメモリ割り当て機能を有効にする方法" tabindex="-1">カスタムメモリ割り当て機能を有効にする方法 <a class="header-anchor" href="#カスタムメモリ割り当て機能を有効にする方法" aria-label="Permalink to &quot;カスタムメモリ割り当て機能を有効にする方法&quot;">​</a></h4><p>Kotlin 1.9.20以降、新しいメモリ割り当て機能がデフォルトです。追加のセットアップは不要です。</p><p>高いメモリ消費を経験した場合、Gradleビルドスクリプトで<code>-Xallocator=mimalloc</code> または<code>-Xallocator=std</code>を使用して<code>mimalloc</code>またはシステムアロケータに戻すことができます。新しいメモリ割り当て機能を改善するために、<a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a>でそのような問題を報告してください。</p><p>新しいアロケータの設計に関する技術的な詳細については、この<a href="https://github.com/JetBrains/kotlin/blob/master/kotlin-native/runtime/src/alloc/custom/README.md" target="_blank" rel="noreferrer">README</a>を参照してください。</p><h3 id="ガベージコレクタのパフォーマンス改善" tabindex="-1">ガベージコレクタのパフォーマンス改善 <a class="header-anchor" href="#ガベージコレクタのパフォーマンス改善" aria-label="Permalink to &quot;ガベージコレクタのパフォーマンス改善&quot;">​</a></h3><p>Kotlinチームは、新しいKotlin/Nativeメモリマネージャのパフォーマンスと安定性の改善を続けています。 このリリースでは、ガベージコレクタ（GC）にいくつかの重要な変更が加えられ、1.9.20のハイライトは以下の通りです。</p><ul><li><a href="#full-parallel-mark-to-reduce-the-pause-time-for-the-gc"></a></li><li><a href="#tracking-memory-in-big-chunks-to-improve-the-allocation-performance"></a></li></ul><h4 id="gcのポーズ時間を短縮するための完全並行マーク" tabindex="-1">GCのポーズ時間を短縮するための完全並行マーク <a class="header-anchor" href="#gcのポーズ時間を短縮するための完全並行マーク" aria-label="Permalink to &quot;GCのポーズ時間を短縮するための完全並行マーク&quot;">​</a></h4><p>以前は、デフォルトのガベージコレクタは部分的な並行マークしか実行しませんでした。ミューテータスレッドが一時停止している間、 スレッドローカル変数やコールスタックなど、自身のルートからGCの開始をマークしていました。 一方、別のGCスレッドは、グローバルルートからのマーク開始、およびネイティブコードを積極的に実行しており一時停止していない全てのミューテータのルートを担当していました。</p><p>このアプローチは、グローバルオブジェクトの数が限られており、ミューテータスレッドがKotlinコードの実行にかなりの時間を費やしている場合にうまく機能しました。しかし、一般的なiOSアプリケーションではそうではありません。</p><p>現在、GCは一時停止中のミューテータ、GCスレッド、およびオプションのマーカースレッドを組み合わせてマークキューを処理する完全並行マークを使用しています。デフォルトでは、マーク処理は以下によって実行されます。</p><ul><li>一時停止中のミューテータ。自身のルートを処理し、コードをアクティブに実行していない間アイドル状態になるのではなく、マークプロセス全体に貢献します。</li><li>GCスレッド。これにより、少なくとも1つのスレッドがマーキングを実行します。</li></ul><p>この新しいアプローチにより、マーキングプロセスがより効率的になり、GCのポーズ時間が短縮されます。</p><h4 id="割り当てパフォーマンスを向上させるための大きなチャンクでのメモリ追跡" tabindex="-1">割り当てパフォーマンスを向上させるための大きなチャンクでのメモリ追跡 <a class="header-anchor" href="#割り当てパフォーマンスを向上させるための大きなチャンクでのメモリ追跡" aria-label="Permalink to &quot;割り当てパフォーマンスを向上させるための大きなチャンクでのメモリ追跡&quot;">​</a></h4><p>以前は、GCスケジューラは各オブジェクトの割り当てを個別に追跡していました。しかし、新しいデフォルトのカスタム アロケータも<code>mimalloc</code>メモリ割り当て機能も、各オブジェクトに個別のストレージを割り当てるのではなく、複数のオブジェクトのために一度に大きな領域を割り当てます。</p><p>Kotlin 1.9.20では、GCは個々のオブジェクトではなく領域を追跡します。これにより、各割り当てで実行されるタスクの数を減らすことで、小さなオブジェクトの割り当てが高速化され、したがってガベージコレクタのメモリ使用量を最小限に抑えるのに役立ちます。</p><h3 id="klib成果物のインクリメンタルコンパイル" tabindex="-1"><code>klib</code>成果物のインクリメンタルコンパイル <a class="header-anchor" href="#klib成果物のインクリメンタルコンパイル" aria-label="Permalink to &quot;\`klib\`成果物のインクリメンタルコンパイル&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>この機能は<a href="/ja/kotlin/components-stability#stability-levels-explained">Experimental (実験的)</a>です。 いつでも削除または変更される可能性があります。オプトインが必要です（詳細は下記参照）。 評価目的のみで使用してください。<a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a>でのフィードバックをお待ちしております。</p></div><p>Kotlin 1.9.20では、Kotlin/Nativeの新しいコンパイル時間最適化が導入されました。 <code>klib</code>成果物のネイティブコードへのコンパイルが部分的にインクリメンタルになりました。</p><p>デバッグモードでKotlinソースコードをネイティブバイナリにコンパイルする場合、コンパイルは2つのステージを経て行われます。</p><ol><li>ソースコードが<code>klib</code>成果物にコンパイルされます。</li><li><code>klib</code>成果物が、依存関係と共にバイナリにコンパイルされます。</li></ol><p>第2ステージでのコンパイル時間を最適化するために、チームは既に依存関係のコンパイラキャッシュを実装しています。 これらは一度だけネイティブコードにコンパイルされ、その結果はバイナリがコンパイルされるたびに再利用されます。 しかし、プロジェクトソースからビルドされた<code>klib</code>成果物は、プロジェクトが変更されるたびに常にネイティブコードに完全に再コンパイルされていました。</p><p>新しいインクリメンタルコンパイルでは、プロジェクトモジュールの変更がソースコードの<code>klib</code>成果物への部分的な再コンパイルのみを引き起こす場合、<code>klib</code>の一部だけがさらにバイナリに再コンパイルされます。</p><p>インクリメンタルコンパイルを有効にするには、<code>gradle.properties</code>ファイルに以下のオプションを追加します。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.incremental.native=true</span></span></code></pre></div><p>何か問題に直面した場合は、<a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a>に報告してください。</p><h3 id="ライブラリリンクの問題の管理" tabindex="-1">ライブラリリンクの問題の管理 <a class="header-anchor" href="#ライブラリリンクの問題の管理" aria-label="Permalink to &quot;ライブラリリンクの問題の管理&quot;">​</a></h3><p>このリリースでは、Kotlin/NativeコンパイラがKotlinライブラリのリンクの問題を処理する方法が改善されました。エラーメッセージはハッシュの代わりにシグネチャ名を使用するため、より読みやすい宣言が含まれるようになり、問題をより簡単に見つけて修正できるようになりました。以下に例を示します。</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>No function found for symbol &#39;org.samples/MyClass.removedFunction|removedFunction(kotlin.Int;kotlin.String){}[0]&#39;</span></span></code></pre></div><p>Kotlin/Nativeコンパイラは、サードパーティのKotlinライブラリ間のリンクの問題を検出し、ランタイム時にエラーを報告します。 あるサードパーティのKotlinライブラリの作成者が、別のサードパーティのKotlinライブラリが利用する実験的なAPIに互換性のない変更を加えた場合、そのような問題に直面する可能性があります。</p><p>Kotlin 1.9.20以降、コンパイラはデフォルトでサイレントモードでリンクの問題を検出します。プロジェクトでこの設定を調整できます。</p><ul><li>これらの問題をコンパイルログに記録したい場合は、<code>-Xpartial-linkage-loglevel=WARNING</code>コンパイラオプションで警告を有効にします。</li><li>報告された警告の重大度を<code>-Xpartial-linkage-loglevel=ERROR</code>でコンパイルエラーに上げることも可能です。 この場合、コンパイルは失敗し、コンパイルログに全てのエラーが表示されます。このオプションを使用して、リンクの問題をより詳細に調べることができます。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// An example of passing compiler options in a Gradle build file:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    macosX64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;native&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        binaries.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        compilations.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configureEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            compilerOptions.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // To report linkage issues as warnings:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                freeCompilerArgs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xpartial-linkage-loglevel=WARNING&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // To raise linkage warnings to errors:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                freeCompilerArgs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xpartial-linkage-loglevel=ERROR&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>この機能で予期せぬ問題に直面した場合は、<code>-Xpartial-linkage=disable</code>コンパイラオプションでいつでもオプトアウトできます。<a href="https://kotl.in/issue" target="_blank" rel="noreferrer">課題トラッカー</a>にそのようなケースを報告することを躊躇しないでください。</p><h3 id="クラスコンストラクタ呼び出し時のコンパニオンオブジェクト初期化" tabindex="-1">クラスコンストラクタ呼び出し時のコンパニオンオブジェクト初期化 <a class="header-anchor" href="#クラスコンストラクタ呼び出し時のコンパニオンオブジェクト初期化" aria-label="Permalink to &quot;クラスコンストラクタ呼び出し時のコンパニオンオブジェクト初期化&quot;">​</a></h3><p>Kotlin 1.9.20以降、Kotlin/Nativeバックエンドはクラスコンストラクタでコンパニオンオブジェクトの静的イニシャライザを呼び出します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Greeting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    companion</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, Kotlin!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> start </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Greeting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Prints &quot;Hello, Kotlin!&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>この動作は、Kotlin/JVMと統一されました。Kotlin/JVMでは、Javaの静的イニシャライザのセマンティクスに合致する対応するクラスがロード（解決）されたときに、コンパニオンオブジェクトが初期化されます。</p><p>この機能の実装がプラットフォーム間でより一貫するようになったため、Kotlin Multiplatformプロジェクトでコードを共有することが容易になりました。</p><h3 id="全てのcinterop宣言に対するオプトイン要件" tabindex="-1">全てのcinterop宣言に対するオプトイン要件 <a class="header-anchor" href="#全てのcinterop宣言に対するオプトイン要件" aria-label="Permalink to &quot;全てのcinterop宣言に対するオプトイン要件&quot;">​</a></h3><p>Kotlin 1.9.20以降、<code>cinterop</code>ツールによってCおよびObjective-Cライブラリ（libcurlやlibxmlなど）から生成される全てのKotlin宣言は、<code>@ExperimentalForeignApi</code>でマークされます。オプトインアノテーションが欠落している場合、コードはコンパイルされません。</p><p>この要件は、CおよびObjective-Cライブラリのインポートの<a href="/ja/kotlin/components-stability#stability-levels-explained">Experimental (実験的)</a>ステータスを反映しています。プロジェクト内の特定の領域にその使用を限定することをお勧めします。これにより、インポートの安定化が開始された際の移行が容易になります。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Kotlin/Nativeに同梱されているネイティブプラットフォームライブラリ（Foundation、UIKit、POSIXなど）に関しては、一部のAPIのみ<code>@ExperimentalForeignApi</code>によるオプトインが必要です。そのような場合、オプトイン要件に関する警告が表示されます。</p></div><h3 id="リンカエラーのカスタムメッセージ" tabindex="-1">リンカエラーのカスタムメッセージ <a class="header-anchor" href="#リンカエラーのカスタムメッセージ" aria-label="Permalink to &quot;リンカエラーのカスタムメッセージ&quot;">​</a></h3><p>ライブラリの作成者は、カスタムメッセージでユーザーがリンカエラーを解決するのを支援できるようになりました。</p><p>KotlinライブラリがCまたはObjective-Cライブラリに依存している場合（例えば、<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-cocoapods-overview.html" target="_blank" rel="noreferrer">CocoaPods連携</a>を使用している場合）、そのユーザーはこれらの依存ライブラリをマシン上にローカルに持っているか、プロジェクトのビルドスクリプトで明示的に設定する必要があります。そうでない場合、ユーザーは以前は紛らわしい「Framework not found」メッセージを受け取っていました。</p><p>コンパイル失敗メッセージに特定の指示やリンクを提供できるようになりました。これを行うには、<code>-Xuser-setup-hint</code>コンパイラオプションを<code>cinterop</code>に渡すか、<code>.def</code>ファイルに<code>userSetupHint=message</code>プロパティを追加します。</p><h3 id="レガシーメモリマネージャの削除" tabindex="-1">レガシーメモリマネージャの削除 <a class="header-anchor" href="#レガシーメモリマネージャの削除" aria-label="Permalink to &quot;レガシーメモリマネージャの削除&quot;">​</a></h3><p><a href="/ja/kotlin/native-memory-manager">新しいメモリマネージャ</a>はKotlin 1.6.20で導入され、1.7.20でデフォルトになりました。 それ以来、さらなるアップデートとパフォーマンス改善を受け、安定版となりました。</p><p>非推奨サイクルを完了し、レガシーメモリマネージャを削除する時が来ました。まだ使用している場合は、 <code>gradle.properties</code>から<code>kotlin.native.binary.memoryModel=strict</code>オプションを削除し、必要な変更を行うために<a href="/ja/kotlin/native-migration-guide">移行ガイド</a>に従ってください。</p><h3 id="ターゲットティアポリシーの変更" tabindex="-1">ターゲットティアポリシーの変更 <a class="header-anchor" href="#ターゲットティアポリシーの変更" aria-label="Permalink to &quot;ターゲットティアポリシーの変更&quot;">​</a></h3><p><a href="/ja/kotlin/native-target-support#tier-1">Tier 1サポート</a>の要件をアップグレードすることにしました。Kotlinチームは現在、 Tier 1に該当するターゲットについて、コンパイラリリース間でソースおよびバイナリ互換性を提供することにコミットしています。また、コンパイルと実行ができるようにCIツールで定期的にテストされる必要があります。現在、Tier 1にはmacOSホスト向けの以下のターゲットが含まれます。</p><ul><li><code>macosX64</code></li><li><code>macosArm64</code></li><li><code>iosSimulatorArm64</code></li><li><code>iosX64</code></li></ul><p>Kotlin 1.9.20では、以前非推奨となっていたいくつかのターゲットも削除しました。具体的には以下の通りです。</p><ul><li><code>iosArm32</code></li><li><code>watchosX86</code></li><li><code>wasm32</code></li><li><code>mingwX86</code></li><li><code>linuxMips32</code></li><li><code>linuxMipsel32</code></li></ul><p>現在<a href="/ja/kotlin/native-target-support">サポートされているターゲット</a>の全リストを参照してください。</p><h2 id="kotlin-multiplatform" tabindex="-1">Kotlin Multiplatform <a class="header-anchor" href="#kotlin-multiplatform" aria-label="Permalink to &quot;Kotlin Multiplatform&quot;">​</a></h2><p>Kotlin 1.9.20は、Kotlin Multiplatformの安定化に重点を置き、新しいプロジェクトウィザードやその他の注目すべき機能により開発者エクスペリエンスを向上させるための新たな一歩を踏み出します。</p><ul><li><a href="#kotlin-multiplatform-is-stable">Kotlin Multiplatformが安定版になりました</a></li><li><a href="#template-for-configuring-multiplatform-projects">マルチプラットフォームプロジェクト構成用テンプレート</a></li><li><a href="#new-project-wizard">新しいプロジェクトウィザード</a></li><li><a href="#full-support-for-the-gradle-configuration-cache-in-kotlin-multiplatform">Gradle Configuration Cacheの完全サポート</a></li><li><a href="#easier-configuration-of-new-standard-library-versions-in-gradle">Gradleにおける新しい標準ライブラリバージョンの設定をより簡単に</a></li><li><a href="#default-support-for-third-party-cinterop-libraries">サードパーティcinteropライブラリのデフォルトサポート</a></li><li><a href="#support-for-kotlin-native-compilation-caches-in-compose-multiplatform-projects">Compose MultiplatformプロジェクトにおけるKotlin/Nativeコンパイルキャッシュのサポート</a></li><li><a href="#compatibility-guidelines">互換性ガイドライン</a></li></ul><h3 id="kotlin-multiplatformが安定版になりました" tabindex="-1">Kotlin Multiplatformが安定版になりました <a class="header-anchor" href="#kotlin-multiplatformが安定版になりました" aria-label="Permalink to &quot;Kotlin Multiplatformが安定版になりました&quot;">​</a></h3><p>1.9.20リリースは、Kotlinの進化における重要な節目となります。<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/get-started.html" target="_blank" rel="noreferrer">Kotlin Multiplatform</a>がついに 安定版となりました。これは、このテクノロジーがプロジェクトでの使用に安全であり、本番環境で100%利用可能であることを意味します。また、Kotlin Multiplatformのさらなる開発は、当社の厳格な<a href="https://kotlinfoundation.org/language-committee-guidelines/" target="_blank" rel="noreferrer">後方互換性ルール</a>に従って継続されることも意味します。</p><p>Kotlin Multiplatformの一部の高度な機能はまだ進化中であることに注意してください。それらを使用する際には、使用している機能の現在の安定性ステータスを説明する警告が表示されます。IntelliJ IDEAで実験的な機能を使用する前に、<strong>Settings</strong> | <strong>Advanced Settings</strong> | <strong>Kotlin</strong> | <strong>Experimental Multiplatform</strong> で明示的に有効にする必要があります。</p><ul><li>Kotlin Multiplatformの安定化と今後の計画について詳しくは、<a href="https://blog.jetbrains.com/kotlin/2023/11/kotlin-multiplatform-stable/" target="_blank" rel="noreferrer">Kotlinブログ</a>をご覧ください。</li><li>安定化に向けてどのような重要な変更が行われたかについては、<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-compatibility-guide.html" target="_blank" rel="noreferrer">Multiplatform互換性ガイド</a>をご確認ください。</li><li>このリリースで部分的に安定化されたKotlin Multiplatformの重要な要素である、<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-expect-actual.html" target="_blank" rel="noreferrer">expectedおよびactual宣言のメカニズム</a>についてお読みください。</li></ul><h3 id="マルチプラットフォームプロジェクト構成用テンプレート" tabindex="-1">マルチプラットフォームプロジェクト構成用テンプレート <a class="header-anchor" href="#マルチプラットフォームプロジェクト構成用テンプレート" aria-label="Permalink to &quot;マルチプラットフォームプロジェクト構成用テンプレート&quot;">​</a></h3><p>Kotlin 1.9.20以降、Kotlin Gradleプラグインは、一般的なマルチプラットフォームシナリオのために共有ソースセットを自動的に作成します。 もしあなたのプロジェクト設定がそれらのいずれかであれば、ソースセット階層を手動で設定する必要はありません。 プロジェクトに必要なターゲットを明示的に指定するだけです。</p><p>Kotlin Gradleプラグインの新機能であるデフォルト階層テンプレートのおかげで、セットアップが簡単になりました。 これはプラグインに組み込まれたソースセット階層の事前定義されたテンプレートです。 宣言したターゲットに対してKotlinが自動的に作成する中間ソースセットが含まれています。<a href="#see-the-full-hierarchy-template">完全なテンプレートを見る</a>。</p><h4 id="プロジェクトをより簡単に作成" tabindex="-1">プロジェクトをより簡単に作成 <a class="header-anchor" href="#プロジェクトをより簡単に作成" aria-label="Permalink to &quot;プロジェクトをより簡単に作成&quot;">​</a></h4><p>AndroidおよびiPhoneデバイスの両方をターゲットとし、AppleシリコンMacBookで開発されるマルチプラットフォームプロジェクトを考えてみましょう。 Kotlinの異なるバージョン間でこのプロジェクトがどのように設定されているかを比較します。</p><table><tr><td>Kotlin 1.9.0以前 (標準的なセットアップ)</td><td>Kotlin 1.9.20</td></tr><tr><td><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    androidTarget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosSimulatorArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> commonMain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> getting</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> iosMain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> creating</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependsOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(commonMain)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> iosArm64Main </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependsOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(iosMain)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> iosSimulatorArm64Main </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependsOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(iosMain)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></td><td><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    androidTarget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosSimulatorArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // The iosMain source set is created automatically</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></td></tr></table><p>デフォルト階層テンプレートの使用により、プロジェクトのセットアップに必要なボイラープレートコードの量が大幅に削減される点に注目してください。</p><p>コード内で<code>androidTarget</code>、<code>iosArm64</code>、および<code>iosSimulatorArm64</code>ターゲットを宣言すると、Kotlin Gradleプラグインは テンプレートから適切な共有ソースセットを見つけて作成します。結果として得られる階層は次のようになります。</p>`,111)),a[2]||(a[2]=i("p",null,[i("img",{src:e,alt:"デフォルトターゲット階層の使用例",thumbnail:"true",width:"350","thumbnail-same-file":"true"})],-1)),a[3]||(a[3]=i("p",null,"緑色のソースセットは実際に作成されてプロジェクトに含まれ、灰色のデフォルトテンプレートからのソースセットは無視されます。",-1)),a[4]||(a[4]=i("h4",{id:"ソースセットの補完を使用",tabindex:"-1"},[n("ソースセットの補完を使用 "),i("a",{class:"header-anchor",href:"#ソースセットの補完を使用","aria-label":'Permalink to "ソースセットの補完を使用"'},"​")],-1)),a[5]||(a[5]=i("p",null,"作成されたプロジェクト構造を操作しやすくするため、IntelliJ IDEAはデフォルト階層テンプレートで作成されたソースセットの補完を提供するようになりました。",-1)),a[6]||(a[6]=i("img",{src:t,alt:"ソースセット名のIDE補完",width:"350","preview-src":"multiplatform-hierarchy-completion.png"},null,-1)),a[7]||(a[7]=s(`<p>Kotlinはまた、対応するターゲットを宣言していないために存在しないソースセットにアクセスしようとすると警告します。 以下の例では、JVMターゲットがありません（<code>androidTarget</code>のみで、同じではありません）。しかし、<code>jvmMain</code>ソースセットを使用してみましょう。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    androidTarget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosSimulatorArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        jvmMain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>この場合、Kotlinはビルドログに警告を報告します。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>w: Accessed &#39;source set jvmMain&#39; without registering the jvm target:</span></span>
<span class="line"><span>  kotlin {</span></span>
<span class="line"><span>      jvm() /* &lt;- register the &#39;jvm&#39; target */</span></span>
<span class="line"><span></span></span>
<span class="line"><span>      sourceSets.jvmMain.dependencies {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>      }</span></span>
<span class="line"><span>  }</span></span></code></pre></div><h4 id="ターゲット階層を設定する" tabindex="-1">ターゲット階層を設定する <a class="header-anchor" href="#ターゲット階層を設定する" aria-label="Permalink to &quot;ターゲット階層を設定する&quot;">​</a></h4><p>Kotlin 1.9.20以降、デフォルト階層テンプレートは自動的に有効になります。ほとんどの場合、追加のセットアップは不要です。</p><p>しかし、1.9.20より前に作成された既存のプロジェクトを移行している場合、以前に <code>dependsOn()</code>呼び出しで手動で中間ソースを導入していた場合に警告に遭遇する可能性があります。この問題を解決するには、以下の手順を実行してください。</p><ul><li><p>中間ソースセットが現在デフォルト階層テンプレートでカバーされている場合、全ての手動<code>dependsOn()</code> 呼び出しと<code>by creating</code>構成で作成されたソースセットを削除します。</p><p>全てのデフォルトソースセットのリストを確認するには、<a href="#see-the-full-hierarchy-template">完全な階層テンプレート</a>を参照してください。</p></li><li><p>デフォルト階層テンプレートが提供しない追加のソースセット（例えば、macOSとJVMターゲット間でコードを共有するソースセット）を持ちたい場合は、<code>applyDefaultHierarchyTemplate()</code>でテンプレートを明示的に再適用し、通常通り<code>dependsOn()</code>で追加ソースセットを手動で設定して階層を調整します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    macosArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosSimulatorArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Apply the default hierarchy explicitly. It&#39;ll create, for example, the iosMain source set:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    applyDefaultHierarchyTemplate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Create an additional jvmAndMacos source set</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jvmAndMacos </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> creating</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependsOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(commonMain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        macosArm64Main.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependsOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(jvmAndMacos)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        jvmMain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependsOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(jvmAndMacos)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>プロジェクトに、テンプレートによって生成されるものと全く同じ名前だが、異なるターゲットセット間で共有されているソースセットが既に存在する場合、テンプレートのソースセット間のデフォルトの<code>dependsOn</code>関係を現在変更する方法はありません。</p><p>ここで可能な選択肢は、デフォルト階層テンプレート内または手動で作成されたソースセットの中から、目的に合った異なるソースセットを見つけることです。もう1つの選択肢は、テンプレートから完全にオプトアウトすることです。</p><p>オプトアウトするには、<code>kotlin.mpp.applyDefaultHierarchyTemplate=false</code>を<code>gradle.properties</code>に追加し、他の全てのソースセットを手動で設定します。</p><p>現在、そのような場合のセットアッププロセスを簡素化するために、独自の階層テンプレートを作成するためのAPIに取り組んでいます。</p></li></ul>`,8)),a[8]||(a[8]=i("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"完全な階層テンプレートを見る",tabindex:"-1"},[n("完全な階層テンプレートを見る "),i("a",{class:"header-anchor",href:"#完全な階層テンプレートを見る","aria-label":'Permalink to "完全な階層テンプレートを見る {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),a[9]||(a[9]=s('<p>プロジェクトがコンパイルするターゲットを宣言すると、 プラグインはそれに応じてテンプレートから共有ソースセットを選択し、プロジェクト内に作成します。</p><p><img src="'+p+'" alt="デフォルト階層テンプレート"></p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>この例はプロジェクトのプロダクション部分のみを示しており、<code>Main</code>サフィックスは省略されています （例えば、<code>commonMain</code>の代わりに<code>common</code>を使用しています）。しかし、<code>*Test</code>ソースについても同様です。</p></div><h3 id="新しいプロジェクトウィザード" tabindex="-1">新しいプロジェクトウィザード <a class="header-anchor" href="#新しいプロジェクトウィザード" aria-label="Permalink to &quot;新しいプロジェクトウィザード&quot;">​</a></h3><p>JetBrainsチームは、クロスプラットフォームプロジェクトを作成する新しい方法である<a href="https://kmp.jetbrains.com" target="_blank" rel="noreferrer">Kotlin Multiplatformウェブウィザード</a>を導入しています。</p><p>この新しいKotlin Multiplatformウィザードの最初の実装は、最も一般的なKotlin Multiplatform のユースケースをカバーしています。以前のプロジェクトテンプレートに関する全てのフィードバックを組み込み、アーキテクチャを可能な限り堅牢で信頼性の高いものにしています。</p><p>新しいウィザードは分散アーキテクチャを採用しており、統一されたバックエンドと 異なるフロントエンドを持つことができ、ウェブバージョンがその第一歩です。将来的にはIDEバージョンと コマンドラインツールの両方の実装を検討しています。ウェブでは常に最新版のウィザードを利用できますが、 IDEでは次期リリースを待つ必要があります。</p><p>新しいウィザードを使えば、プロジェクトのセットアップがこれまで以上に簡単になります。 モバイル、サーバー、デスクトップ開発のターゲットプラットフォームを選択することで、プロジェクトをニーズに合わせて調整できます。将来のリリースでは、Web開発も追加する予定です。</p><img src="'+o+'" alt="マルチプラットフォームウェブウィザード" width="400"><p>新しいプロジェクトウィザードは、Kotlinでクロスプラットフォームプロジェクトを作成するための推奨される方法となりました。1.9.20以降、Kotlin プラグインはIntelliJ IDEAで<strong>Kotlin Multiplatform</strong>プロジェクトウィザードを提供しなくなりました。</p><p>新しいウィザードは初期設定を容易にガイドし、オンボーディングプロセスをはるかにスムーズにします。 問題が発生した場合は、ウィザードの使用体験を改善するために<a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a>に報告してください。</p><a href="https://kmp.jetbrains.com"><img src="'+r+`" alt="プロジェクトを作成" style=""></a><h3 id="kotlin-multiplatformにおけるgradle-configuration-cacheの完全サポート" tabindex="-1">Kotlin MultiplatformにおけるGradle Configuration Cacheの完全サポート <a class="header-anchor" href="#kotlin-multiplatformにおけるgradle-configuration-cacheの完全サポート" aria-label="Permalink to &quot;Kotlin MultiplatformにおけるGradle Configuration Cacheの完全サポート&quot;">​</a></h3><p>以前、Kotlinマルチプラットフォームライブラリで利用可能だったGradleコンフィギュレーションキャッシュの<a href="/ja/kotlin/whatsnew19#preview-of-the-gradle-configuration-cache">プレビュー</a>を導入しました。1.9.20では、Kotlin Multiplatformプラグインがさらに一歩進みました。</p><p>現在、<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-cocoapods-dsl-reference.html" target="_blank" rel="noreferrer">Kotlin CocoaPods Gradleプラグイン</a>だけでなく、 <code>embedAndSignAppleFrameworkForXcode</code>のようなXcodeビルドに必要な統合タスクでもGradleコンフィギュレーションキャッシュをサポートしています。</p><p>全てのマルチプラットフォームプロジェクトは、ビルド時間の改善の恩恵を受けることができます。 Gradleコンフィギュレーションキャッシュは、設定フェーズの結果を後続のビルドで再利用することで、ビルドプロセスを高速化します。 詳細およびセットアップ手順については、<a href="https://docs.gradle.org/current/userguide/configuration_cache.html#config_cache:usage" target="_blank" rel="noreferrer">Gradleドキュメント</a>を参照してください。</p><h3 id="gradleにおける新しい標準ライブラリバージョンの設定をより簡単に" tabindex="-1">Gradleにおける新しい標準ライブラリバージョンの設定をより簡単に <a class="header-anchor" href="#gradleにおける新しい標準ライブラリバージョンの設定をより簡単に" aria-label="Permalink to &quot;Gradleにおける新しい標準ライブラリバージョンの設定をより簡単に&quot;">​</a></h3><p>マルチプラットフォームプロジェクトを作成すると、標準ライブラリ（<code>stdlib</code>）の依存関係が各ソースセットに自動的に追加されます。 これは、マルチプラットフォームプロジェクトを開始する最も簡単な方法です。</p><p>以前は、標準ライブラリへの依存関係を手動で設定したい場合、各ソースセットに個別に設定する必要がありました。 <code>kotlin-stdlib:1.9.20</code>以降は、<code>commonMain</code>ルートソースセットで<strong>一度だけ</strong>依存関係を設定すればよくなりました。</p><table><tr><td>標準ライブラリバージョン1.9.10以前</td><td>標準ライブラリバージョン1.9.20</td></tr><tr><td><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // For the common source set</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> commonMain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.kotlin:kotlin-stdlib-common:1.9.10&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // For the JVM source set</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jvmMain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.kotlin:kotlin-stdlib:1.9.10&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // For the JS source set</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jsMain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.kotlin:kotlin-stdlib-js:1.9.10&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></td><td><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        commonMain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.kotlin:kotlin-stdlib:1.9.20&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></td></tr></table><p>この変更は、標準ライブラリのGradleメタデータに新しい情報を含めることで可能になりました。これにより、 Gradleは他のソースセットに対して正しい標準ライブラリ成果物を自動的に解決できます。</p><h3 id="サードパーティcinteropライブラリのデフォルトサポート" tabindex="-1">サードパーティcinteropライブラリのデフォルトサポート <a class="header-anchor" href="#サードパーティcinteropライブラリのデフォルトサポート" aria-label="Permalink to &quot;サードパーティcinteropライブラリのデフォルトサポート&quot;">​</a></h3><p>Kotlin 1.9.20では、<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-cocoapods-overview.html" target="_blank" rel="noreferrer">Kotlin CocoaPods Gradle</a>プラグインが適用されているプロジェクトの全てのcinterop依存関係に対して、デフォルトのサポート（オプトインによるサポートではなく）が追加されました。</p><p>これにより、プラットフォーム固有の依存関係に制限されることなく、より多くのネイティブコードを共有できるようになります。例えば、 <code>iosMain</code>共有ソースセットに<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-cocoapods-libraries.html" target="_blank" rel="noreferrer">Podライブラリへの依存関係</a>を追加できます。</p><p>以前は、これはKotlin/Nativeディストリビューションに同梱されている<a href="/ja/kotlin/native-platform-libs">プラットフォーム固有のライブラリ</a>（Foundation、UIKit、POSIXなど）でのみ機能しました。全てのサードパーティPodライブラリがデフォルトで共有ソースセットで利用できるようになりました。それらをサポートするために個別のGradleプロパティを指定する必要はありません。</p><h3 id="compose-multiplatformプロジェクトにおけるkotlin-nativeコンパイルキャッシュのサポート" tabindex="-1">Compose MultiplatformプロジェクトにおけるKotlin/Nativeコンパイルキャッシュのサポート <a class="header-anchor" href="#compose-multiplatformプロジェクトにおけるkotlin-nativeコンパイルキャッシュのサポート" aria-label="Permalink to &quot;Compose MultiplatformプロジェクトにおけるKotlin/Nativeコンパイルキャッシュのサポート&quot;">​</a></h3><p>このリリースでは、主にiOS向けのCompose Multiplatformプロジェクトに影響を与えていたCompose Multiplatformコンパイラプラグインとの互換性問題が解決されます。</p><p>この問題を回避するには、<code>kotlin.native.cacheKind=none</code>というGradleプロパティを使用してキャッシュを無効にする必要がありました。しかし、この回避策はパフォーマンスコストを伴い、Kotlin/Nativeコンパイラでキャッシュが機能しないため、コンパイル時間が遅くなりました。</p><p>問題が修正されたため、<code>gradle.properties</code>ファイルから<code>kotlin.native.cacheKind=none</code>を削除し、Compose Multiplatformプロジェクトで改善されたコンパイル時間を享受できます。</p><p>コンパイル時間を改善するための詳細なヒントについては、<a href="/ja/kotlin/native-improving-compilation-time">Kotlin/Nativeドキュメント</a>を参照してください。</p><h3 id="互換性ガイドライン" tabindex="-1">互換性ガイドライン <a class="header-anchor" href="#互換性ガイドライン" aria-label="Permalink to &quot;互換性ガイドライン&quot;">​</a></h3><p>プロジェクトを設定する際には、Kotlin Multiplatform Gradleプラグインと、利用可能なGradle、Xcode、 Android Gradleプラグイン（AGP）のバージョンとの互換性を確認してください。</p><table tabindex="0"><thead><tr><th>Kotlin Multiplatform Gradleプラグイン</th><th>Gradle</th><th>Android Gradleプラグイン</th><th>Xcode</th></tr></thead><tbody><tr><td>1.9.20</td><td>7.5 以降</td><td>7.4.2–8.2</td><td>15.0。詳細は下記参照</td></tr></tbody></table><p>このリリース時点でのXcodeの推奨バージョンは15.0です。Xcode 15.0に同梱されているライブラリは完全にサポートされており、 Kotlinコード内のどこからでもアクセスできます。</p><p>ただし、Xcode 14.3はほとんどの場合で引き続き動作するはずです。ローカルマシンでバージョン14.3を使用している場合、 Xcode 15に同梱されているライブラリは表示されますが、アクセスできないことに注意してください。</p><h2 id="kotlin-wasm" tabindex="-1">Kotlin/Wasm <a class="header-anchor" href="#kotlin-wasm" aria-label="Permalink to &quot;Kotlin/Wasm&quot;">​</a></h2><p>1.9.20で、Kotlin Wasmは安定性の<a href="/ja/kotlin/components-stability">アルファレベル</a>に達しました。</p><ul><li><a href="#compatibility-with-wasm-gc-phase-4-and-final-opcodes">Wasm GCフェーズ4および最終オペコードとの互換性</a></li><li><a href="#new-wasm-wasi-target-and-the-renaming-of-the-wasm-target-to-wasm-js">新しい<code>wasm-wasi</code>ターゲット、および<code>wasm</code>ターゲットの<code>wasm-js</code>への名称変更</a></li><li><a href="#support-for-the-wasi-api-in-the-standard-library">標準ライブラリにおけるWASI APIのサポート</a></li><li><a href="#kotlin-wasm-api-improvements">Kotlin/Wasm APIの改善</a></li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Kotlin Wasmは<a href="/ja/kotlin/components-stability">Alpha (アルファ版)</a>です。 いつでも変更される可能性があります。評価目的のみで使用してください。 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a>でのフィードバックをお待ちしております。</p></div><h3 id="wasm-gcフェーズ4および最終オペコードとの互換性" tabindex="-1">Wasm GCフェーズ4および最終オペコードとの互換性 <a class="header-anchor" href="#wasm-gcフェーズ4および最終オペコードとの互換性" aria-label="Permalink to &quot;Wasm GCフェーズ4および最終オペコードとの互換性&quot;">​</a></h3><p>Wasm GCは最終フェーズに移行し、バイナリ表現で使用される定数であるオペコードの更新が必要です。 Kotlin 1.9.20は最新のオペコードをサポートしているため、Wasmプロジェクトを最新バージョンのKotlinに更新することを強くお勧めします。 また、Wasm環境で最新バージョンのブラウザを使用することもお勧めします。</p><ul><li>ChromeおよびChromiumベースのブラウザではバージョン119以降。</li><li>Firefoxではバージョン119以降。Firefox 119では、Wasm GCを<a href="/ja/kotlin/wasm-troubleshooting">手動で有効にする</a>必要があることに注意してください。</li></ul><h3 id="新しいwasm-wasiターゲット、およびwasmターゲットのwasm-jsへの名称変更" tabindex="-1">新しい<code>wasm-wasi</code>ターゲット、および<code>wasm</code>ターゲットの<code>wasm-js</code>への名称変更 <a class="header-anchor" href="#新しいwasm-wasiターゲット、およびwasmターゲットのwasm-jsへの名称変更" aria-label="Permalink to &quot;新しい\`wasm-wasi\`ターゲット、および\`wasm\`ターゲットの\`wasm-js\`への名称変更&quot;">​</a></h3><p>このリリースでは、Kotlin/Wasmの新しいターゲットである<code>wasm-wasi</code>を導入します。また、<code>wasm</code>ターゲットを<code>wasm-js</code>に名称変更します。 Gradle DSLでは、これらのターゲットはそれぞれ<code>wasmWasi {}</code>および<code>wasmJs {}</code>として利用可能です。</p><p>プロジェクトでこれらのターゲットを使用するには、<code>build.gradle.kts</code>ファイルを更新します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    wasmWasi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    wasmJs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>以前に導入された<code>wasm {}</code>ブロックは、<code>wasmJs {}</code>を優先して非推奨になりました。</p><p>既存のKotlin/Wasmプロジェクトを移行するには、以下の手順を実行してください。</p><ul><li><code>build.gradle.kts</code>ファイルで、<code>wasm {}</code>ブロックを<code>wasmJs {}</code>に名称変更します。</li><li>プロジェクト構造で、<code>wasmMain</code>ディレクトリを<code>wasmJsMain</code>に名称変更します。</li></ul><h3 id="標準ライブラリにおけるwasi-apiのサポート" tabindex="-1">標準ライブラリにおけるWASI APIのサポート <a class="header-anchor" href="#標準ライブラリにおけるwasi-apiのサポート" aria-label="Permalink to &quot;標準ライブラリにおけるWASI APIのサポート&quot;">​</a></h3><p>このリリースでは、Wasmプラットフォーム用のシステムインターフェースである<a href="https://github.com/WebAssembly/WASI" target="_blank" rel="noreferrer">WASI</a>のサポートが含まれました。 WASIのサポートにより、標準化されたAPIセットを提供することで、ブラウザ外（例えばサーバーサイドアプリケーションなど）でKotlin/Wasmをより簡単に使用できるようになります。さらに、WASIは能力ベースのセキュリティを提供し、外部リソースへのアクセス時にもう1つのセキュリティレイヤーを追加します。</p><p>Kotlin/Wasmアプリケーションを実行するには、Wasm Garbage Collection (GC)をサポートするVM（例: Node.jsまたはDeno）が必要です。 Wasmtime、WasmEdgeなどは、完全なWasm GCサポートに向けてまだ取り組んでいます。</p><p>WASI関数をインポートするには、<code>@WasmImport</code>アノテーションを使用します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.wasm.WasmImport</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@WasmImport</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;wasi_snapshot_preview1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;clock_time_get&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> external</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> wasiRawClockTimeGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(clockId: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, precision: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, resultPtr: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span></span></code></pre></div><p><a href="https://github.com/Kotlin/kotlin-wasm-examples/tree/main/wasi-example" target="_blank" rel="noreferrer">GitHubリポジトリで完全な例</a>を見つけることができます。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p><code>wasmWasi</code>をターゲットとしている間は、<a href="/ja/kotlin/wasm-js-interop">JavaScriptとの相互運用性</a>を使用することはできません。</p></div><h3 id="kotlin-wasm-apiの改善" tabindex="-1">Kotlin/Wasm APIの改善 <a class="header-anchor" href="#kotlin-wasm-apiの改善" aria-label="Permalink to &quot;Kotlin/Wasm APIの改善&quot;">​</a></h3><p>このリリースでは、Kotlin/Wasm APIにいくつかの利便性（Quality-of-life）改善がもたらされます。 例えば、DOMイベントリスナーで値を返す必要がなくなりました。</p><table><tr><td>1.9.20以前</td><td>1.9.20以降</td></tr><tr><td><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    window.onload </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        document.body?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sayHello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></td><td><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    window.onload </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { document.body?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sayHello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></td></tr></table><h2 id="gradle" tabindex="-1">Gradle <a class="header-anchor" href="#gradle" aria-label="Permalink to &quot;Gradle&quot;">​</a></h2><p>Kotlin 1.9.20はGradle 6.8.3から8.1まで完全に互換性があります。最新のGradle リリースまでのバージョンも使用できますが、その場合、非推奨警告に遭遇したり、一部の新しいGradle機能が動作しない可能性があることに留意してください。</p><p>このバージョンには以下の変更が含まれています。</p><ul><li><a href="#support-for-test-fixtures-to-access-internal-declarations">内部宣言にアクセスするためのテストフィクスチャのサポート</a></li><li><a href="#new-property-to-configure-paths-to-konan-directories">Konanディレクトリへのパスを設定する新しいプロパティ</a></li><li><a href="#new-build-report-metrics-for-kotlin-native-tasks">Kotlin/Nativeタスクの新しいビルドレポートメトリクス</a></li></ul><h3 id="内部宣言にアクセスするためのテストフィクスチャのサポート" tabindex="-1">内部宣言にアクセスするためのテストフィクスチャのサポート <a class="header-anchor" href="#内部宣言にアクセスするためのテストフィクスチャのサポート" aria-label="Permalink to &quot;内部宣言にアクセスするためのテストフィクスチャのサポート&quot;">​</a></h3><p>Kotlin 1.9.20では、Gradleの<code>java-test-fixtures</code>プラグインを使用している場合、<a href="https://docs.gradle.org/current/userguide/java_testing.html#sec:java_test_fixtures" target="_blank" rel="noreferrer">テストフィクスチャ</a>が メインソースセットクラス内の<code>internal</code>宣言にアクセスできるようになりました。さらに、任意のテストソースも、テストフィクスチャクラス内の<code>internal</code>宣言を見ることができます。</p><h3 id="konanディレクトリへのパスを設定する新しいプロパティ" tabindex="-1">Konanディレクトリへのパスを設定する新しいプロパティ <a class="header-anchor" href="#konanディレクトリへのパスを設定する新しいプロパティ" aria-label="Permalink to &quot;Konanディレクトリへのパスを設定する新しいプロパティ&quot;">​</a></h3><p>Kotlin 1.9.20では、<code>kotlin.data.dir</code> Gradleプロパティが利用可能になり、<code>~/.konan</code>ディレクトリへのパスをカスタマイズできるため、環境変数<code>KONAN_DATA_DIR</code>を介して設定する必要がありません。</p><p>あるいは、<code>-Xkonan-data-dir</code>コンパイラオプションを使用して、<code>cinterop</code>および<code>konanc</code>ツールを介して<code>~/.konan</code>ディレクトリへのカスタムパスを設定することもできます。</p><h3 id="kotlin-nativeタスクの新しいビルドレポートメトリクス" tabindex="-1">Kotlin/Nativeタスクの新しいビルドレポートメトリクス <a class="header-anchor" href="#kotlin-nativeタスクの新しいビルドレポートメトリクス" aria-label="Permalink to &quot;Kotlin/Nativeタスクの新しいビルドレポートメトリクス&quot;">​</a></h3><p>Kotlin 1.9.20では、GradleビルドレポートにKotlin/Nativeタスクのメトリクスが含まれるようになりました。これらのメトリクスを含むビルドレポートの例を以下に示します。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Total time for Kotlin tasks: 20.81 s (93.1 % of all tasks time)</span></span>
<span class="line"><span>Time   |% of Kotlin time|Task                            </span></span>
<span class="line"><span>15.24 s|73.2 %          |:compileCommonMainKotlinMetadata</span></span>
<span class="line"><span>5.57 s |26.8 %          |:compileNativeMainKotlinMetadata</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Task &#39;:compileCommonMainKotlinMetadata&#39; finished in 15.24 s</span></span>
<span class="line"><span>Task info:</span></span>
<span class="line"><span>  Kotlin language version: 2.0</span></span>
<span class="line"><span>Time metrics:</span></span>
<span class="line"><span>  Total Gradle task time: 15.24 s</span></span>
<span class="line"><span>  Spent time before task action: 0.16 s</span></span>
<span class="line"><span>  Task action before worker execution: 0.21 s</span></span>
<span class="line"><span>  Run native in process: 2.70 s</span></span>
<span class="line"><span>    Run entry point: 2.64 s</span></span>
<span class="line"><span>Size metrics:</span></span>
<span class="line"><span>  Start time of task action: 2023-07-27T11:04:17</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Task &#39;:compileNativeMainKotlinMetadata&#39; finished in 5.57 s</span></span>
<span class="line"><span>Task info:</span></span>
<span class="line"><span>  Kotlin language version: 2.0</span></span>
<span class="line"><span>Time metrics:</span></span>
<span class="line"><span>  Total Gradle task time: 5.57 s</span></span>
<span class="line"><span>  Spent time before task action: 0.04 s</span></span>
<span class="line"><span>  Task action before worker execution: 0.02 s</span></span>
<span class="line"><span>  Run native in process: 1.48 s</span></span>
<span class="line"><span>    Run entry point: 1.47 s</span></span>
<span class="line"><span>Size metrics:</span></span>
<span class="line"><span>  Start time of task action: 2023-07-27T11:04:32</span></span></code></pre></div><p>さらに、<code>kotlin.experimental.tryK2</code>ビルドレポートには、コンパイルされたKotlin/Nativeタスクが含まれ、使用された言語バージョンがリストされるようになりました。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>##### &#39;kotlin.experimental.tryK2&#39; results #####</span></span>
<span class="line"><span>:lib:compileCommonMainKotlinMetadata: 2.0 language version</span></span>
<span class="line"><span>:lib:compileKotlinJvm: 2.0 language version</span></span>
<span class="line"><span>:lib:compileKotlinIosArm64: 2.0 language version</span></span>
<span class="line"><span>:lib:compileKotlinIosSimulatorArm64: 2.0 language version</span></span>
<span class="line"><span>:lib:compileKotlinLinuxX64: 2.0 language version</span></span>
<span class="line"><span>:lib:compileTestKotlinJvm: 2.0 language version</span></span>
<span class="line"><span>:lib:compileTestKotlinIosSimulatorArm64: 2.0 language version</span></span>
<span class="line"><span>:lib:compileTestKotlinLinuxX64: 2.0 language version</span></span>
<span class="line"><span>##### 100% (8/8) tasks have been compiled with Kotlin 2.0 #####</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Gradle 8.0を使用している場合、特にGradle設定キャッシュが有効になっていると、ビルドレポートに問題が発生する可能性があります。これは既知の問題であり、Gradle 8.1以降で修正されています。</p></div><h2 id="標準ライブラリ" tabindex="-1">標準ライブラリ <a class="header-anchor" href="#標準ライブラリ" aria-label="Permalink to &quot;標準ライブラリ&quot;">​</a></h2><p>Kotlin 1.9.20では、<a href="#the-kotlin-native-standard-library-becomes-stable">Kotlin/Native標準ライブラリが安定版</a>になり、いくつかの新機能が追加されました。</p><ul><li><a href="#replacement-of-the-enum-class-values-generic-function">Enumクラスの<code>values</code>汎用関数の置き換え</a></li><li><a href="#improved-performance-of-hashmap-operations-in-kotlin-js">Kotlin/JSにおけるHashMap操作のパフォーマンス改善</a></li></ul><h3 id="enumクラスのvalues汎用関数の置き換え" tabindex="-1">Enumクラスの<code>values</code>汎用関数の置き換え <a class="header-anchor" href="#enumクラスのvalues汎用関数の置き換え" aria-label="Permalink to &quot;Enumクラスの\`values\`汎用関数の置き換え&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>この機能は<a href="/ja/kotlin/components-stability#stability-levels-explained">Experimental (実験的)</a>です。いつでも削除または変更される可能性があります。 オプトインが必要です（詳細は下記参照）。評価目的のみで使用してください。<a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a>でのフィードバックをお待ちしております。</p></div><p>Kotlin 1.9.0で、enumクラスの<code>entries</code>プロパティが安定版になりました。<code>entries</code>プロパティは、合成関数 <code>values()</code>に代わるモダンでパフォーマンスの高い機能です。Kotlin 1.9.20の一部として、汎用関数 <code>enumValues&lt;T&gt;()</code>の代替として<code>enumEntries&lt;T&gt;()</code>が追加されました。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>enumValues&lt;T&gt;()</code>関数は引き続きサポートされていますが、パフォーマンスへの影響が少ないため、代わりに<code>enumEntries&lt;T&gt;()</code>関数を使用することをお勧めします。<code>enumValues&lt;T&gt;()</code>を呼び出すたびに新しい配列が作成されますが、<code>enumEntries&lt;T&gt;()</code>を呼び出すたびに同じリストが返されるため、はるかに効率的です。</p></div><p>例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">enum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RGB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { RED, GREEN, BLUE }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalStdlibApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">inline</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reified</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Enum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printAllValues</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">enumEntries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">joinToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.name })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printAllValues</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RGB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// RED, GREEN, BLUE</span></span></code></pre></div><h4 id="enumentries関数の有効化方法" tabindex="-1"><code>enumEntries</code>関数の有効化方法 <a class="header-anchor" href="#enumentries関数の有効化方法" aria-label="Permalink to &quot;\`enumEntries\`関数の有効化方法&quot;">​</a></h4><p>この機能を試すには、<code>@OptIn(ExperimentalStdlibApi)</code>でオプトインし、言語バージョン1.9以降を使用します。最新バージョンのKotlin Gradleプラグインを使用している場合、この機能をテストするために言語バージョンを指定する必要はありません。</p><h3 id="kotlin-native標準ライブラリが安定版に" tabindex="-1">Kotlin/Native標準ライブラリが安定版に <a class="header-anchor" href="#kotlin-native標準ライブラリが安定版に" aria-label="Permalink to &quot;Kotlin/Native標準ライブラリが安定版に&quot;">​</a></h3><p>Kotlin 1.9.0で、Kotlin/Native標準ライブラリの安定化目標に近づけるために取った行動を<a href="/ja/kotlin/whatsnew19#the-kotlin-native-standard-library-s-journey-towards-stabilization">説明しました</a>。Kotlin 1.9.20では、 この作業を最終的に完了し、Kotlin/Native標準ライブラリを安定版にしました。このリリースの主なハイライトは以下の通りです。</p><ul><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlinx.cinterop/-vector128/" target="_blank" rel="noreferrer"><code>Vector128</code></a>クラスは<code>kotlin.native</code>パッケージから<code>kotlinx.cinterop</code>パッケージに移動されました。</li><li>Kotlin 1.9.0の一部として導入された<code>ExperimentalNativeApi</code>および<code>NativeRuntimeApi</code>アノテーションのオプトイン要件レベルが、<code>WARNING</code>から<code>ERROR</code>に引き上げられました。</li><li>Kotlin/Nativeコレクションは、例えば<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-array-list/" target="_blank" rel="noreferrer"><code>ArrayList</code></a>や<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-hash-map/" target="_blank" rel="noreferrer"><code>HashMap</code></a>コレクションでの同時変更を検出するようになりました。</li><li><code>Throwable</code>クラスの<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-throwable/print-stack-trace.html" target="_blank" rel="noreferrer"><code>printStackTrace()</code></a>関数は、<code>STDOUT</code>ではなく<code>STDERR</code>に出力されるようになりました。<div class="danger custom-block"><p class="custom-block-title">WARNING</p><p><code>printStackTrace()</code>の出力形式は安定版ではなく、変更される可能性があります。</p></div></li></ul><h4 id="atomics-apiの改善" tabindex="-1">Atomics APIの改善 <a class="header-anchor" href="#atomics-apiの改善" aria-label="Permalink to &quot;Atomics APIの改善&quot;">​</a></h4><p>Kotlin 1.9.0で、Kotlin/Native標準ライブラリが安定版になる際にAtomics APIも安定版になる準備が整うとお伝えしました。Kotlin 1.9.20には、以下の追加の変更が含まれます。</p><ul><li>実験的な<code>AtomicIntArray</code>、<code>AtomicLongArray</code>、<code>AtomicArray&lt;T&gt;</code>クラスが導入されました。これらの新しいクラスは、 Javaのatomic配列と一貫性を持つように特別に設計されており、将来的に共通標準ライブラリに含めることができます。<div class="danger custom-block"><p class="custom-block-title">WARNING</p><p><code>AtomicIntArray</code>、<code>AtomicLongArray</code>、<code>AtomicArray&lt;T&gt;</code>クラスは <a href="/ja/kotlin/components-stability#stability-levels-explained">Experimental (実験的)</a>です。これらはいつでも削除または変更される可能性があります。 試すには、<code>@OptIn(ExperimentalStdlibApi)</code>でオプトインしてください。評価目的のみで使用してください。 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a>でのフィードバックをお待ちしております。</p></div></li><li><code>kotlin.native.concurrent</code>パッケージにおいて、Kotlin 1.9.0で非推奨レベル<code>WARNING</code>で非推奨化されたAtomics APIの非推奨レベルが<code>ERROR</code>に引き上げられました。</li><li><code>kotlin.concurrent</code>パッケージにおいて、非推奨レベル<code>ERROR</code>であった<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.concurrent/-atomic-int/index.html" target="_blank" rel="noreferrer"><code>AtomicInt</code></a>および<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.concurrent/-atomic-long/index.html" target="_blank" rel="noreferrer"><code>AtomicLong</code></a>クラスの<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.concurrent/-atomic-reference/#functions" target="_blank" rel="noreferrer">メンバ関数</a>が削除されました。</li><li><code>AtomicReference</code>クラスの全ての<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.concurrent/-atomic-reference/#functions" target="_blank" rel="noreferrer">メンバ関数</a>がatomic intrinsic関数を使用するようになりました。</li></ul><p>Kotlin 1.9.20の全ての変更に関する詳細については、<a href="https://youtrack.jetbrains.com/issue/KT-61028/Behavioural-changes-to-the-Native-stdlib-API" target="_blank" rel="noreferrer">YouTrackチケット</a>を参照してください。</p><h3 id="kotlin-jsにおけるhashmap操作のパフォーマンス改善" tabindex="-1">Kotlin/JSにおけるHashMap操作のパフォーマンス改善 <a class="header-anchor" href="#kotlin-jsにおけるhashmap操作のパフォーマンス改善" aria-label="Permalink to &quot;Kotlin/JSにおけるHashMap操作のパフォーマンス改善&quot;">​</a></h3><p>Kotlin 1.9.20では、Kotlin/JSにおける<code>HashMap</code>操作のパフォーマンスが向上し、メモリフットプリントが削減されました。内部的には、 Kotlin/JSはその内部実装をオープンアドレス方式に変更しました。これにより、以下の状況でパフォーマンスの改善が見られるはずです。</p><ul><li><code>HashMap</code>に新しい要素を挿入する。</li><li><code>HashMap</code>内の既存要素を検索する。</li><li><code>HashMap</code>内のキーまたは値をイテレートする。</li></ul><h2 id="ドキュメントの更新" tabindex="-1">ドキュメントの更新 <a class="header-anchor" href="#ドキュメントの更新" aria-label="Permalink to &quot;ドキュメントの更新&quot;">​</a></h2><p>Kotlinドキュメントにいくつかの注目すべき変更がありました。</p><ul><li><a href="https://kotlinlang.org/api/kotlinx-metadata-jvm/" target="_blank" rel="noreferrer">JVM Metadata</a> APIリファレンス – Kotlin/JVMでメタデータを解析する方法を探る。</li><li><a href="/ja/kotlin/time-measurement">時間計測ガイド</a> – Kotlinで時間を計算および測定する方法を学ぶ。</li><li><a href="/ja/kotlin/kotlin-tour-welcome">Kotlinツアー</a>のCollections章が改善されました – 理論と実践の両方を含む章で、Kotlinプログラミング言語の基本を学ぶ。</li><li><a href="/ja/kotlin/generics#definitely-non-nullable-types">明確な非NULL許容型</a> – 明確な非NULL許容ジェネリック型について学ぶ。</li><li>改善された<a href="/ja/kotlin/arrays">配列ページ</a> – 配列とその使用時期について学ぶ。</li><li><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-expect-actual.html" target="_blank" rel="noreferrer">Kotlin Multiplatformにおけるexpectedおよびactual宣言</a> – Kotlin Multiplatformにおけるexpectedおよびactual宣言のKotlinメカニズムについて学ぶ。</li></ul><h2 id="kotlin-1-9-20のインストール" tabindex="-1">Kotlin 1.9.20のインストール <a class="header-anchor" href="#kotlin-1-9-20のインストール" aria-label="Permalink to &quot;Kotlin 1.9.20のインストール&quot;">​</a></h2><h3 id="ideバージョンを確認する" tabindex="-1">IDEバージョンを確認する <a class="header-anchor" href="#ideバージョンを確認する" aria-label="Permalink to &quot;IDEバージョンを確認する&quot;">​</a></h3><p><a href="https://www.jetbrains.com/idea/download/" target="_blank" rel="noreferrer">IntelliJ IDEA</a> 2023.1.xおよび2023.2.xは、Kotlin プラグインをバージョン1.9.20に自動的に更新することを提案します。IntelliJ IDEA 2023.3にはKotlin 1.9.20プラグインが含まれる予定です。</p><p>Android Studio Hedgehog (231) および Iguana (232) は、今後のリリースでKotlin 1.9.20をサポートする予定です。</p><p>新しいコマンドラインコンパイラは、<a href="https://github.com/JetBrains/kotlin/releases/tag/v1.9.20" target="_blank" rel="noreferrer">GitHubリリースページ</a>からダウンロードできます。</p><h3 id="gradle設定を構成する" tabindex="-1">Gradle設定を構成する <a class="header-anchor" href="#gradle設定を構成する" aria-label="Permalink to &quot;Gradle設定を構成する&quot;">​</a></h3><p>Kotlinの成果物と依存関係をダウンロードするには、<code>settings.gradle(.kts)</code>ファイルを更新してMaven Centralリポジトリを使用するようにします。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pluginManagement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    repositories</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        mavenCentral</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        gradlePluginPortal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>リポジトリが指定されていない場合、Gradleは廃止されたJCenterリポジトリを使用するため、Kotlin成果物で問題が発生する可能性があります。</p>`,107))])}const x=h(E,[["render",m]]);export{w as __pageData,x as default};
