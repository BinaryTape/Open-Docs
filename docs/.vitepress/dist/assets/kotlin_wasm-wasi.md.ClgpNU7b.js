import{_ as s,a as e,b as t,c as i}from"./chunks/wasm-wasi-tests-results.B152b-mz.js";import{_ as l}from"./chunks/join-slack-channel.C908i2w7.js";import{_ as o,c as n,o as r,ag as p}from"./chunks/framework.Bksy39di.js";const v=JSON.parse('{"title":"Kotlin/Wasm 和 WASI 入门","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/wasm-wasi.md","filePath":"kotlin/wasm-wasi.md","lastUpdated":1754307826000}'),h={name:"kotlin/wasm-wasi.md"};function d(c,a,m,g,k,b){return r(),n("div",null,a[0]||(a[0]=[p('<h1 id="kotlin-wasm-和-wasi-入门" tabindex="-1">Kotlin/Wasm 和 WASI 入门 <a class="header-anchor" href="#kotlin-wasm-和-wasi-入门" aria-label="Permalink to &quot;Kotlin/Wasm 和 WASI 入门&quot;">​</a></h1><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Kotlin/Wasm 处于 <a href="/kotlin/components-stability">Alpha</a> 阶段。它可能随时发生变化。 <a href="https://slack-chats.kotlinlang.org/c/webassembly" target="_blank" rel="noreferrer">加入 Kotlin/Wasm 社区。</a></p></div><p>本教程演示了如何在各种 WebAssembly 虚拟机中使用 <a href="https://wasi.dev/" target="_blank" rel="noreferrer">WebAssembly System Interface (WASI)</a> 运行一个简单的 <a href="/kotlin/wasm-overview">Kotlin/Wasm</a> 应用程序。</p><p>你可以找到在 <a href="https://nodejs.org/en" target="_blank" rel="noreferrer">Node.js</a>、<a href="https://deno.com/" target="_blank" rel="noreferrer">Deno</a> 和 <a href="https://wasmedge.org/" target="_blank" rel="noreferrer">WasmEdge</a> 虚拟机上运行的应用程序示例。输出是一个使用标准 WASI API 的简单应用程序。</p><p>目前，Kotlin/Wasm 支持 WASI 0.1，也称为 Preview 1。 <a href="https://youtrack.jetbrains.com/issue/KT-64568" target="_blank" rel="noreferrer">WASI 0.2 的支持计划在未来版本中提供</a>。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Kotlin/Wasm 工具链开箱即用地提供了 Node.js 任务 (<code>wasmWasiNode*</code>)。 项目中的其他任务变体，例如利用 Deno 或 WasmEdge 的任务，则作为自定义任务包含在内。</p></div><h2 id="开始之前" tabindex="-1">开始之前 <a class="header-anchor" href="#开始之前" aria-label="Permalink to &quot;开始之前&quot;">​</a></h2><ol><li><p>下载并安装最新版本的 <a href="https://www.jetbrains.com/idea/" target="_blank" rel="noreferrer">IntelliJ IDEA</a>。</p></li><li><p>通过在 IntelliJ IDEA 中选择 <strong>File | New | Project from Version Control</strong>，克隆 <a href="https://github.com/Kotlin/kotlin-wasm-wasi-template" target="_blank" rel="noreferrer">Kotlin/Wasm WASI 模板版本库</a>。</p><p>你也可以从命令行克隆它：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clone</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git@github.com:Kotlin/kotlin-wasm-wasi-template.git</span></span></code></pre></div></li></ol><h2 id="运行应用程序" tabindex="-1">运行应用程序 <a class="header-anchor" href="#运行应用程序" aria-label="Permalink to &quot;运行应用程序&quot;">​</a></h2><ol><li><p>通过选择 <strong>View</strong> | <strong>Tool Windows</strong> | <strong>Gradle</strong> 打开 <strong>Gradle</strong> 工具窗口。</p><p>项目加载后，你可以在 <strong>Gradle</strong> 工具窗口的 <strong>kotlin-wasm-wasi-example</strong> 下找到 Gradle 任务。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>你需要至少 Java 11 作为 Gradle JVM，任务才能成功加载。</p></div></li><li><p>在 <strong>kotlin-wasm-wasi-example</strong> | <strong>Tasks</strong> | <strong>kotlin node</strong> 下，选择并运行以下 Gradle 任务之一：</p><ul><li><p><strong>wasmWasiNodeRun</strong>：在 Node.js 中运行应用程序。</p></li><li><p><strong>wasmWasiDenoRun</strong>：在 Deno 中运行应用程序。</p></li><li><p><strong>wasmWasiWasmEdgeRun</strong>：在 WasmEdge 中运行应用程序。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>在 Windows 平台使用 Deno 时，请确保已安装 <code>deno.exe</code>。关于更多信息， 请参见 <a href="https://docs.deno.com/runtime/manual/getting_started/installation" target="_blank" rel="noreferrer">Deno 的安装文档</a>。</p></div></li></ul><p><img src="'+s+'" alt="Kotlin/Wasm 和 WASI 任务" width="600"></p></li></ol><p>或者，从 <code> kotlin-wasm-wasi-template</code> 根目录的终端中运行以下命令之一：</p><ul><li><p>在 Node.js 中运行应用程序：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wasmWasiNodeRun</span></span></code></pre></div></li><li><p>在 Deno 中运行应用程序：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wasmWasiDenoRun</span></span></code></pre></div></li><li><p>在 WasmEdge 中运行应用程序：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wasmWasiWasmEdgeRun</span></span></code></pre></div></li></ul><p>当你的应用程序成功构建时，终端会显示一条消息：</p><p><img src="'+e+'" alt="Kotlin/Wasm 和 WASI 应用程序" width="600"></p><h2 id="测试应用程序" tabindex="-1">测试应用程序 <a class="header-anchor" href="#测试应用程序" aria-label="Permalink to &quot;测试应用程序&quot;">​</a></h2><p>你也可以测试 Kotlin/Wasm 应用程序是否在各种虚拟机上正常工作。</p><p>在 Gradle 工具窗口中，从 <strong>kotlin-wasm-wasi-example</strong> | <strong>Tasks</strong> | <strong>verification</strong> 下运行以下 Gradle 任务之一：</p><ul><li><strong>wasmWasiNodeTest</strong>：在 Node.js 中测试应用程序。</li><li><strong>wasmWasiDenoTest</strong>：在 Deno 中测试应用程序。</li><li><strong>wasmWasiWasmEdgeTest</strong>：在 WasmEdge 中测试应用程序。</li></ul><p><img src="'+t+'" alt="Kotlin/Wasm 和 WASI 测试任务" width="600"></p><p>或者，从 <code> kotlin-wasm-wasi-template</code> 根目录的终端中运行以下命令之一：</p><ul><li><p>在 Node.js 中测试应用程序：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wasmWasiNodeTest</span></span></code></pre></div></li><li><p>在 Deno 中测试应用程序：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wasmWasiDenoTest</span></span></code></pre></div></li><li><p>在 WasmEdge 中测试应用程序：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wasmWasiWasmEdgeTest</span></span></code></pre></div></li></ul><p>终端会显示测试结果：</p><p><img src="'+i+'" alt="Kotlin/Wasm 和 WASI 测试" width="600"></p><h2 id="接下来做什么" tabindex="-1">接下来做什么？ <a class="header-anchor" href="#接下来做什么" aria-label="Permalink to &quot;接下来做什么？&quot;">​</a></h2><p>加入 Kotlin Slack 上的 Kotlin/Wasm 社区：</p><p><a href="https://slack-chats.kotlinlang.org/c/webassembly"><img src="'+l+'" width="500" alt="加入 Kotlin/Wasm 社区" style=""></a></p><p>尝试更多 Kotlin/Wasm 示例：</p><ul><li><a href="https://github.com/JetBrains/compose-multiplatform/tree/master/examples/imageviewer" target="_blank" rel="noreferrer">Compose image viewer</a></li><li><a href="https://github.com/JetBrains/compose-multiplatform/tree/master/examples/jetsnack" target="_blank" rel="noreferrer">Jetsnack application</a></li><li><a href="https://github.com/Kotlin/kotlin-wasm-nodejs-template" target="_blank" rel="noreferrer">Node.js example</a></li><li><a href="https://github.com/Kotlin/kotlin-wasm-compose-template" target="_blank" rel="noreferrer">Compose example</a></li></ul>',28)]))}const f=o(h,[["render",d]]);export{v as __pageData,f as default};
