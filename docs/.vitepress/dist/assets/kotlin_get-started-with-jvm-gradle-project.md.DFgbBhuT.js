import{_ as l,a as t,b as e,c as n,d as r}from"./chunks/jvm-output-gradle.DaNbfMb_.js";import{_ as o,c as p,o as h,ag as i,j as a,a as d}from"./chunks/framework.Bksy39di.js";const b=JSON.parse('{"title":"Gradle 与 Kotlin/JVM 入门","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/get-started-with-jvm-gradle-project.md","filePath":"kotlin/get-started-with-jvm-gradle-project.md","lastUpdated":1754307826000}'),k={name:"kotlin/get-started-with-jvm-gradle-project.md"};function g(c,s,E,u,m,y){return h(),p("div",null,s[0]||(s[0]=[i('<h1 id="gradle-与-kotlin-jvm-入门" tabindex="-1">Gradle 与 Kotlin/JVM 入门 <a class="header-anchor" href="#gradle-与-kotlin-jvm-入门" aria-label="Permalink to &quot;Gradle 与 Kotlin/JVM 入门&quot;">​</a></h1><p>本教程演示了如何使用 IntelliJ IDEA 和 Gradle 创建一个 JVM 控制台应用程序。</p><p>要开始使用，请首先下载并安装最新版本的 <a href="https://www.jetbrains.com/idea/download/index.html" target="_blank" rel="noreferrer">IntelliJ IDEA</a>。</p><h2 id="创建一个项目" tabindex="-1">创建一个项目 <a class="header-anchor" href="#创建一个项目" aria-label="Permalink to &quot;创建一个项目&quot;">​</a></h2><ol><li><p>在 IntelliJ IDEA 中，选择 <strong>文件</strong> | <strong>新建</strong> | <strong>项目</strong>。</p></li><li><p>在左侧面板中，选择 <strong>Kotlin</strong>。</p></li><li><p>为新项目命名并更改其位置（如有必要）。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>选择 <strong>创建 Git 版本库</strong> 复选框可将新项目置于版本控制之下。你可以在 任何时候执行此操作。</p></div><p><img src="'+l+'" alt="Create a console application" width="700"></p></li><li><p>选择 <strong>Gradle</strong> 构建系统。</p></li><li><p>从 <strong>JDK</strong> 列表，选择你希望在项目 中使用的 <a href="https://www.oracle.com/java/technologies/downloads/" target="_blank" rel="noreferrer">JDK</a>。</p><ul><li>如果 JDK 已安装在你的计算机上，但未在 IDE 中定义，请选择 <strong>添加 JDK</strong> 并指定 JDK 主目录的路径。</li><li>如果你的计算机上没有必要的 JDK，请选择 <strong>下载 JDK</strong>。</li></ul></li><li><p>为 Gradle 选择 <strong>Kotlin</strong> DSL。</p></li><li><p>选择 <strong>添加示例代码</strong> 复选框以创建包含示例 “Hello World!” 应用程序的文件。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>你还可以启用 <strong>生成带入门提示的代码</strong> 选项，为你的 示例代码添加一些额外的有用注释。</p></div></li><li><p>点击 <strong>创建</strong>。</p></li></ol><p>你已成功使用 Gradle 创建了一个项目！</p>',6),a("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"为你的项目指定-gradle-版本",tabindex:"-1"},[d("为你的项目指定 Gradle 版本 "),a("a",{class:"header-anchor",href:"#为你的项目指定-gradle-版本","aria-label":'Permalink to "为你的项目指定 Gradle 版本 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1),i('<p>你可以在<strong>高级设置</strong>部分显式指定项目的 Gradle 版本， 无论是通过 Gradle Wrapper 还是本地安装的 Gradle：</p><ul><li><p><strong>Gradle Wrapper:</strong></p><ol><li>从 <strong>Gradle 发行版</strong> 列表，选择 <strong>Wrapper</strong>。</li><li>禁用 <strong>自动选择</strong> 复选框。</li><li>从 <strong>Gradle 版本</strong> 列表，选择你的 Gradle 版本。</li></ol></li><li><p><strong>本地安装:</strong></p><ol><li>从 <strong>Gradle 发行版</strong> 列表，选择 <strong>本地安装</strong>。</li><li>对于 <strong>Gradle 位置</strong>，指定你的本地 Gradle 版本的路径。</li></ol><p><img src="'+t+`" alt="Advanced settings" width="700"></p></li></ul><h2 id="探索构建脚本" tabindex="-1">探索构建脚本 <a class="header-anchor" href="#探索构建脚本" aria-label="Permalink to &quot;探索构建脚本&quot;">​</a></h2><p>打开 <code>build.gradle.kts</code> 文件。这是 Gradle Kotlin 构建脚本，其中包含 Kotlin 相关的构件和应用程序所需的其他部分：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jvm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) version </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2.2.10&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Kotlin version to use</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">group </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;org.example&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // A company name, for example, \`org.jetbrains\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">version </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1.0-SNAPSHOT&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Version to assign to the built artifact</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">repositories</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Sources of dependencies. See 1️⃣</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    mavenCentral</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Maven Central Repository. See 2️⃣</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// All the libraries you want to use. See 3️⃣</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Copy dependencies&#39; names after you find them in a repository</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    testImplementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// The Kotlin test library</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tasks.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// See 4️⃣</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    useJUnitPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// JUnitPlatform for tests. See 5️⃣</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>1️⃣ 关于 [依赖项来源]，请参阅更多信息。</li><li>2️⃣ <a href="https://central.sonatype.com/" target="_blank" rel="noreferrer">Maven Central 版本库</a>。它也可以是 <a href="https://maven.google.com/" target="_blank" rel="noreferrer">Google 的 Maven 版本库</a> 或你公司的私有版本库。</li><li>3️⃣ 关于 [声明依赖项]，请参阅更多信息。</li><li>4️⃣ 关于 [任务]，请参阅更多信息。</li><li>5️⃣ <a href="https://docs.gradle.org/current/javadoc/org/gradle/api/tasks/testing/Test.html#useJUnitPlatform" target="_blank" rel="noreferrer">用于测试的 JUnitPlatform</a>。</li></ul><p>如你所见，Gradle 构建文件中添加了一些 Kotlin 特有的构件：</p><ol><li><p>在 <code>plugins {}</code> 代码块中，有 <code>kotlin(&quot;jvm&quot;)</code> 构件。此插件定义了项目中要使用的 Kotlin 版本。</p></li><li><p>在 <code>dependencies {}</code> 代码块中，有 <code>testImplementation(kotlin(&quot;test&quot;))</code>。 关于 [设置测试库依赖项]，请参阅更多信息。</p></li></ol><h2 id="运行应用程序" tabindex="-1">运行应用程序 <a class="header-anchor" href="#运行应用程序" aria-label="Permalink to &quot;运行应用程序&quot;">​</a></h2><ol><li><p>通过选择 <strong>视图 | 工具窗口 | Gradle</strong> 打开 Gradle 窗口：</p><p><img src="`+e+'" alt="Main.kt with main fun" width="700"></p></li><li><p>在 <code>Tasks\\build\\</code> 中执行 <strong>build</strong> Gradle 任务。在<strong>构建</strong>窗口中，会显示 <code>BUILD SUCCESSFUL</code>。 这表示 Gradle 成功构建了应用程序。</p></li><li><p>在 <code>src/main/kotlin</code> 中，打开 <code>Main.kt</code> 文件：</p><ul><li><code>src</code> 目录包含 Kotlin 源代码文件和资源。</li><li><code>Main.kt</code> 文件包含将打印 <code>Hello World!</code> 的示例代码。</li></ul></li><li><p>通过点击侧边栏中的绿色<strong>运行</strong>图标并选择<strong>运行 &#39;MainKt&#39;</strong> 来运行应用程序。</p><p><img src="'+n+'" alt="Running a console app" width="350"></p></li></ol><p>你可以在<strong>运行</strong>工具窗口中看到结果：</p><p><img src="'+r+'" alt="Kotlin run output" width="600"></p><p>恭喜！你刚刚运行了你的第一个 Kotlin 应用程序。</p><h2 id="接下来" tabindex="-1">接下来？ <a class="header-anchor" href="#接下来" aria-label="Permalink to &quot;接下来？&quot;">​</a></h2><p>关于以下内容，请参阅更多信息：</p><ul><li><a href="https://docs.gradle.org/current/dsl/org.gradle.api.Project.html#N14E9A" target="_blank" rel="noreferrer">Gradle 构建文件属性</a>。</li><li><a href="/kotlin/gradle-configure-project">面向不同平台和设置库依赖项</a>。</li><li><a href="/kotlin/gradle-compiler-options">编译器选项及如何传递它们</a>。</li><li><a href="/kotlin/gradle-compilation-and-caches">增量编译、缓存支持、构建报告和 Kotlin 守护进程</a>。</li></ul>',16)]))}const D=o(k,[["render",g]]);export{b as __pageData,D as default};
