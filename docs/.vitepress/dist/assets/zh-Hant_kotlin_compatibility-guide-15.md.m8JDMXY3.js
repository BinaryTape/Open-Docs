import{_ as l,C as r,c as p,o as h,ag as a,j as t,G as n,w as o,a as i}from"./chunks/framework.Bksy39di.js";const m=JSON.parse('{"title":"Kotlin 1.5 相容性指南","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/compatibility-guide-15.md","filePath":"zh-Hant/kotlin/compatibility-guide-15.md","lastUpdated":1754307826000}'),g={name:"zh-Hant/kotlin/compatibility-guide-15.md"};function k(c,s,d,u,E,b){const e=r("tabs");return h(),p("div",null,[s[6]||(s[6]=a('<h1 id="kotlin-1-5-相容性指南" tabindex="-1">Kotlin 1.5 相容性指南 <a class="header-anchor" href="#kotlin-1-5-相容性指南" aria-label="Permalink to &quot;Kotlin 1.5 相容性指南&quot;">​</a></h1><p><em><a href="/zh-Hant/kotlin/kotlin-evolution-principles">保持語言現代化</a></em> 和 <em><a href="/zh-Hant/kotlin/kotlin-evolution-principles">舒適的更新</a></em> 是 Kotlin 語言設計中的基本原則。前者指出，阻礙語言演進的建構應該被移除；後者則表示，此類移除應事先充分溝通，以確保程式碼遷移盡可能順暢。</p><p>儘管大多數語言變更已透過其他管道（例如更新日誌或編譯器警告）進行發佈，本文件仍將其全部總結，為從 Kotlin 1.4 遷移到 Kotlin 1.5 提供完整的參考資料。</p><h2 id="基本術語" tabindex="-1">基本術語 <a class="header-anchor" href="#基本術語" aria-label="Permalink to &quot;基本術語&quot;">​</a></h2><p>本文件介紹了幾種相容性：</p><ul><li><em>原始碼 (source)</em>：原始碼不相容變更會導致原本能正常編譯（無錯誤或警告）的程式碼不再能編譯。</li><li><em>二進位碼 (binary)</em>：如果兩個二進位碼構件（artifacts）在相互替換後不會導致載入或連結錯誤，則稱它們為二進位碼相容。</li><li><em>行為 (behavioral)</em>：如果同一程式在應用變更前後展現不同行為，則稱該變更為行為不相容。</li></ul><p>請注意，這些定義僅適用於純 Kotlin。Kotlin 程式碼與其他語言（例如 Java）的相容性不在本文件討論範圍之內。</p><h2 id="語言與標準函式庫-stdlib" tabindex="-1">語言與標準函式庫 (stdlib) <a class="header-anchor" href="#語言與標準函式庫-stdlib" aria-label="Permalink to &quot;語言與標準函式庫 (stdlib)&quot;">​</a></h2><h3 id="禁止在簽章多型呼叫中使用展開運算子" tabindex="-1">禁止在簽章多型呼叫中使用展開運算子 <a class="header-anchor" href="#禁止在簽章多型呼叫中使用展開運算子" aria-label="Permalink to &quot;禁止在簽章多型呼叫中使用展開運算子&quot;">​</a></h3><blockquote><p><strong>問題 (Issue)</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-35226" target="_blank" rel="noreferrer">KT-35226</a></p><p><strong>元件 (Component)</strong>: Core language</p><p><strong>不相容變更類型 (Incompatible change type)</strong>: source</p><p><strong>簡要摘要 (Short summary)</strong>: Kotlin 1.5 將禁止在簽章多型呼叫中使用展開運算子 (<code>*</code>)</p><p><strong>棄用週期 (Deprecation cycle)</strong>:</p><ul><li>&lt; 1.5: 在呼叫點為有問題的運算子引入警告</li><li>&gt;= 1.5: 將此警告提升為錯誤， 可使用 <code>-XXLanguage:-ProhibitSpreadOnSignaturePolymorphicCall</code> 暫時恢復到 1.5 之前的行為</li></ul></blockquote><h3 id="禁止包含從該類別不可見-internal-package-private-的抽象成員之非抽象類別" tabindex="-1">禁止包含從該類別不可見（internal/package-private）的抽象成員之非抽象類別 <a class="header-anchor" href="#禁止包含從該類別不可見-internal-package-private-的抽象成員之非抽象類別" aria-label="Permalink to &quot;禁止包含從該類別不可見（internal/package-private）的抽象成員之非抽象類別&quot;">​</a></h3><blockquote><p><strong>問題 (Issue)</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-27825" target="_blank" rel="noreferrer">KT-27825</a></p><p><strong>元件 (Component)</strong>: Core language</p><p><strong>不相容變更類型 (Incompatible change type)</strong>: source</p><p><strong>簡要摘要 (Short summary)</strong>: Kotlin 1.5 將禁止包含從該類別不可見（internal/package-private）的抽象成員之非抽象類別</p><p><strong>棄用週期 (Deprecation cycle)</strong>:</p><ul><li>&lt; 1.5: 為有問題的類別引入警告</li><li>&gt;= 1.5: 將此警告提升為錯誤， 可使用 <code>-XXLanguage:-ProhibitInvisibleAbstractMethodsInSuperclasses</code> 暫時恢復到 1.5 之前的行為</li></ul></blockquote><h3 id="禁止在-jvm-上使用基於非實化型別參數的陣列作為實化型別引數" tabindex="-1">禁止在 JVM 上使用基於非實化型別參數的陣列作為實化型別引數 <a class="header-anchor" href="#禁止在-jvm-上使用基於非實化型別參數的陣列作為實化型別引數" aria-label="Permalink to &quot;禁止在 JVM 上使用基於非實化型別參數的陣列作為實化型別引數&quot;">​</a></h3><blockquote><p><strong>問題 (Issue)</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-31227" target="_blank" rel="noreferrer">KT-31227</a></p><p><strong>元件 (Component)</strong>: Core language</p><p><strong>不相容變更類型 (Incompatible change type)</strong>: source</p><p><strong>簡要摘要 (Short summary)</strong>: Kotlin 1.5 將禁止在 JVM 上使用基於非實化型別參數的陣列作為實化型別引數</p><p><strong>棄用週期 (Deprecation cycle)</strong>:</p><ul><li>&lt; 1.5: 為有問題的呼叫引入警告</li><li>&gt;= 1.5: 將此警告提升為錯誤， 可使用 <code>-XXLanguage:-ProhibitNonReifiedArraysAsReifiedTypeArguments</code> 暫時恢復到 1.5 之前的行為</li></ul></blockquote><h3 id="禁止不委託給主要建構子的次級列舉類別建構子" tabindex="-1">禁止不委託給主要建構子的次級列舉類別建構子 <a class="header-anchor" href="#禁止不委託給主要建構子的次級列舉類別建構子" aria-label="Permalink to &quot;禁止不委託給主要建構子的次級列舉類別建構子&quot;">​</a></h3><blockquote><p><strong>問題 (Issue)</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-35870" target="_blank" rel="noreferrer">KT-35870</a></p><p><strong>元件 (Component)</strong>: Core language</p><p><strong>不相容變更類型 (Incompatible change type)</strong>: source</p><p><strong>簡要摘要 (Short summary)</strong>: Kotlin 1.5 將禁止不委託給主要建構子的次級列舉類別建構子</p><p><strong>棄用週期 (Deprecation cycle)</strong>:</p><ul><li>&lt; 1.5: 為有問題的建構子引入警告</li><li>&gt;= 1.5: 將此警告提升為錯誤， 可使用 <code>-XXLanguage:-RequiredPrimaryConstructorDelegationCallInEnums</code> 暫時恢復到 1.5 之前的行為</li></ul></blockquote><h3 id="禁止從私有內聯函式暴露匿名型別" tabindex="-1">禁止從私有內聯函式暴露匿名型別 <a class="header-anchor" href="#禁止從私有內聯函式暴露匿名型別" aria-label="Permalink to &quot;禁止從私有內聯函式暴露匿名型別&quot;">​</a></h3><blockquote><p><strong>問題 (Issue)</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-33917" target="_blank" rel="noreferrer">KT-33917</a></p><p><strong>元件 (Component)</strong>: Core language</p><p><strong>不相容變更類型 (Incompatible change type)</strong>: source</p><p><strong>簡要摘要 (Short summary)</strong>: Kotlin 1.5 將禁止從私有內聯函式暴露匿名型別</p><p><strong>棄用週期 (Deprecation cycle)</strong>:</p><ul><li>&lt; 1.5: 為有問題的建構子引入警告</li><li>&gt;= 1.5: 將此警告提升為錯誤， 可使用 <code>-XXLanguage:-ApproximateAnonymousReturnTypesInPrivateInlineFunctions</code> 暫時恢復到 1.5 之前的行為</li></ul></blockquote><h3 id="禁止在帶有-sam-轉換的引數後傳遞非展開陣列" tabindex="-1">禁止在帶有 SAM 轉換的引數後傳遞非展開陣列 <a class="header-anchor" href="#禁止在帶有-sam-轉換的引數後傳遞非展開陣列" aria-label="Permalink to &quot;禁止在帶有 SAM 轉換的引數後傳遞非展開陣列&quot;">​</a></h3><blockquote><p><strong>問題 (Issue)</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-35224" target="_blank" rel="noreferrer">KT-35224</a></p><p><strong>元件 (Component)</strong>: Core language</p><p><strong>不相容變更類型 (Incompatible change type)</strong>: source</p><p><strong>簡要摘要 (Short summary)</strong>: Kotlin 1.5 將禁止在帶有 SAM 轉換的引數後傳遞非展開陣列</p><p><strong>棄用週期 (Deprecation cycle)</strong>:</p><ul><li>1.3.70: 為有問題的呼叫引入警告</li><li>&gt;= 1.5: 將此警告提升為錯誤， 可使用 <code>-XXLanguage:-ProhibitVarargAsArrayAfterSamArgument</code> 暫時恢復到 1.5 之前的行為</li></ul></blockquote><h3 id="支援下劃線命名的-catch-區塊參數的特殊語義" tabindex="-1">支援下劃線命名的 catch 區塊參數的特殊語義 <a class="header-anchor" href="#支援下劃線命名的-catch-區塊參數的特殊語義" aria-label="Permalink to &quot;支援下劃線命名的 catch 區塊參數的特殊語義&quot;">​</a></h3><blockquote><p><strong>問題 (Issue)</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-31567" target="_blank" rel="noreferrer">KT-31567</a></p><p><strong>元件 (Component)</strong>: Core language</p><p><strong>不相容變更類型 (Incompatible change type)</strong>: source</p><p><strong>簡要摘要 (Short summary)</strong>: Kotlin 1.5 將禁止引用用於在 catch 區塊中省略例外參數名稱的下劃線符號 (<code>_</code>)</p><p><strong>棄用週期 (Deprecation cycle)</strong>:</p><ul><li>1.4.20: 為有問題的引用引入警告</li><li>&gt;= 1.5: 將此警告提升為錯誤， 可使用 <code>-XXLanguage:-ForbidReferencingToUnderscoreNamedParameterOfCatchBlock</code> 暫時恢復到 1.5 之前的行為</li></ul></blockquote><h3 id="將-sam-轉換的實作策略從基於匿名類別變更為-invokedynamic" tabindex="-1">將 SAM 轉換的實作策略從基於匿名類別變更為 invokedynamic <a class="header-anchor" href="#將-sam-轉換的實作策略從基於匿名類別變更為-invokedynamic" aria-label="Permalink to &quot;將 SAM 轉換的實作策略從基於匿名類別變更為 invokedynamic&quot;">​</a></h3><blockquote><p><strong>問題 (Issue)</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-44912" target="_blank" rel="noreferrer">KT-44912</a></p><p><strong>元件 (Component)</strong>: Kotlin/JVM</p><p><strong>不相容變更類型 (Incompatible change type)</strong>: behavioral</p><p><strong>簡要摘要 (Short summary)</strong>: 自 Kotlin 1.5 起，SAM (Single Abstract Method) 轉換的實作策略將從生成匿名類別變更為使用 <code>invokedynamic</code> JVM 指令</p><p><strong>棄用週期 (Deprecation cycle)</strong>:</p><ul><li>1.5: 變更 SAM 轉換的實作策略， 可使用 <code>-Xsam-conversions=class</code> 將實作方案恢復到以前使用的方案</li></ul></blockquote><h3 id="jvm-ir-based-後端的效能問題" tabindex="-1">JVM IR-based 後端的效能問題 <a class="header-anchor" href="#jvm-ir-based-後端的效能問題" aria-label="Permalink to &quot;JVM IR-based 後端的效能問題&quot;">​</a></h3>',25)),t("blockquote",null,[s[1]||(s[1]=a('<p><strong>問題 (Issue)</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-48233" target="_blank" rel="noreferrer">KT-48233</a></p><p><strong>元件 (Component)</strong>: Kotlin/JVM</p><p><strong>不相容變更類型 (Incompatible change type)</strong>: behavioral</p><p><strong>簡要摘要 (Short summary)</strong>: Kotlin 1.5 預設使用 <a href="https://blog.jetbrains.com/kotlin/2021/02/the-jvm-backend-is-in-beta-let-s-make-it-stable-together/" target="_blank" rel="noreferrer">基於 IR 的後端</a> 作為 Kotlin/JVM 編譯器。舊後端仍預設用於較早的語言版本。</p><p>在 Kotlin 1.5 中使用新編譯器時，您可能會遇到一些效能下降問題。我們正在努力修復這些情況。</p><p><strong>棄用週期 (Deprecation cycle)</strong>:</p><ul><li>&lt; 1.5: 預設使用舊的 JVM 後端</li><li>&gt;= 1.5: 預設使用基於 IR 的後端。如果需要在 Kotlin 1.5 中使用舊後端， 請在專案的設定檔中新增以下行，以暫時恢復到 1.5 之前的行為：</li></ul><p>在 Gradle 中：</p>',8)),n(e,null,{default:o(()=>s[0]||(s[0]=[t("div",{class:"language-kotlin vp-adaptive-theme"},[t("button",{title:"Copy Code",class:"copy"}),t("span",{class:"lang"},"kotlin"),t("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[t("code",null,[t("span",{class:"line"},[t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks."),t("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withType"),t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),t("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"org"),t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),t("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"jetbrains"),t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),t("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),t("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"gradle"),t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),t("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"dsl"),t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),t("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"KotlinJvmCompile"),t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"> {")]),i(`
`),t("span",{class:"line"},[t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  kotlinOptions.useOldBackend "),t("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),t("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," true")]),i(`
`),t("span",{class:"line"},[t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1),t("div",{class:"language-groovy vp-adaptive-theme"},[t("button",{title:"Copy Code",class:"copy"}),t("span",{class:"lang"},"groovy"),t("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[t("code",null,[t("span",{class:"line"},[t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks"),t("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"withType("),t("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"org.jetbrains.kotlin.gradle.dsl.KotlinJvmCompile"),t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {")]),i(`
`),t("span",{class:"line"},[t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  kotlinOptions"),t("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"useOldBackend "),t("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),t("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," true")]),i(`
`),t("span",{class:"line"},[t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),s[2]||(s[2]=a(`<p>在 Maven 中：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">configuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">arg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;-Xuse-old-backend&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">arg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">configuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>對此旗標的支援將在未來版本中移除。</p>`,3))]),s[7]||(s[7]=t("h3",{id:"jvm-ir-based-後端中新的欄位排序",tabindex:"-1"},[i("JVM IR-based 後端中新的欄位排序 "),t("a",{class:"header-anchor",href:"#jvm-ir-based-後端中新的欄位排序","aria-label":'Permalink to "JVM IR-based 後端中新的欄位排序"'},"​")],-1)),t("blockquote",null,[s[4]||(s[4]=a('<p><strong>問題 (Issue)</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-46378" target="_blank" rel="noreferrer">KT-46378</a></p><p><strong>元件 (Component)</strong>: Kotlin/JVM</p><p><strong>不相容變更類型 (Incompatible change type)</strong>: behavioral</p><p><strong>簡要摘要 (Short summary)</strong>: 自 1.5 版起，Kotlin 使用 <a href="https://blog.jetbrains.com/kotlin/2021/02/the-jvm-backend-is-in-beta-let-s-make-it-stable-together/" target="_blank" rel="noreferrer">基於 IR 的後端</a>，其對 JVM 位元組碼的排序方式不同：它會先生成在建構子中宣告的欄位，然後再生成在主體中宣告的欄位，而舊後端則是反之。新的排序可能會改變依賴於欄位順序的序列化框架（例如 Java 序列化）的程式行為。</p><p><strong>棄用週期 (Deprecation cycle)</strong>:</p><ul><li>&lt; 1.5: 預設使用舊的 JVM 後端。它會先生成在主體中宣告的欄位，然後再生成在建構子中宣告的欄位。</li><li>&gt;= 1.5: 預設使用新的基於 IR 的後端。在建構子中宣告的欄位會在在主體中宣告的欄位之前生成。作為解決方法，您可以暫時切換回 Kotlin 1.5 中的舊後端。為此，請在專案的設定檔中新增以下行：</li></ul><p>在 Gradle 中：</p>',7)),n(e,null,{default:o(()=>s[3]||(s[3]=[t("div",{class:"language-kotlin vp-adaptive-theme"},[t("button",{title:"Copy Code",class:"copy"}),t("span",{class:"lang"},"kotlin"),t("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[t("code",null,[t("span",{class:"line"},[t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks."),t("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withType"),t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),t("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"org"),t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),t("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"jetbrains"),t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),t("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),t("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"gradle"),t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),t("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"dsl"),t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),t("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"KotlinJvmCompile"),t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"> {")]),i(`
`),t("span",{class:"line"},[t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  kotlinOptions.useOldBackend "),t("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),t("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," true")]),i(`
`),t("span",{class:"line"},[t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1),t("div",{class:"language-groovy vp-adaptive-theme"},[t("button",{title:"Copy Code",class:"copy"}),t("span",{class:"lang"},"groovy"),t("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[t("code",null,[t("span",{class:"line"},[t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks"),t("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"withType("),t("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"org.jetbrains.kotlin.gradle.dsl.KotlinJvmCompile"),t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {")]),i(`
`),t("span",{class:"line"},[t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  kotlinOptions"),t("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"useOldBackend "),t("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),t("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," true")]),i(`
`),t("span",{class:"line"},[t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),s[5]||(s[5]=a(`<p>在 Maven 中：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">configuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">arg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;-Xuse-old-backend&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">arg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">configuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>對此旗標的支援將在未來版本中移除。</p>`,3))]),s[8]||(s[8]=a(`<h3 id="為委託屬性在委託表達式中生成泛型呼叫的可空性斷言" tabindex="-1">為委託屬性在委託表達式中生成泛型呼叫的可空性斷言 <a class="header-anchor" href="#為委託屬性在委託表達式中生成泛型呼叫的可空性斷言" aria-label="Permalink to &quot;為委託屬性在委託表達式中生成泛型呼叫的可空性斷言&quot;">​</a></h3><blockquote><p><strong>問題 (Issue)</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-44304" target="_blank" rel="noreferrer">KT-44304</a></p><p><strong>元件 (Component)</strong>: Kotlin/JVM</p><p><strong>不相容變更類型 (Incompatible change type)</strong>: behavioral</p><p><strong>簡要摘要 (Short summary)</strong>: 自 Kotlin 1.5 起，Kotlin 編譯器將為在委託表達式中包含泛型呼叫的委託屬性發出可空性斷言</p><p><strong>棄用週期 (Deprecation cycle)</strong>:</p><ul><li>1.5: 為委託屬性發出可空性斷言（詳情見問題）， 可使用 <code>-Xuse-old-backend</code> 或 <code>-language-version 1.4</code> 暫時恢復到 1.5 之前的行為</li></ul></blockquote><h3 id="將帶有-onlyinputtypes-註解的型別參數之呼叫警告轉為錯誤" tabindex="-1">將帶有 @OnlyInputTypes 註解的型別參數之呼叫警告轉為錯誤 <a class="header-anchor" href="#將帶有-onlyinputtypes-註解的型別參數之呼叫警告轉為錯誤" aria-label="Permalink to &quot;將帶有 @OnlyInputTypes 註解的型別參數之呼叫警告轉為錯誤&quot;">​</a></h3><blockquote><p><strong>問題 (Issue)</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-45861" target="_blank" rel="noreferrer">KT-45861</a></p><p><strong>元件 (Component)</strong>: Core language</p><p><strong>不相容變更類型 (Incompatible change type)</strong>: source</p><p><strong>簡要摘要 (Short summary)</strong>: Kotlin 1.5 將禁止帶有無意義引數的 <code>contains</code>、<code>indexOf</code> 和 <code>assertEquals</code> 等呼叫，以改善型別安全</p><p><strong>棄用週期 (Deprecation cycle)</strong>:</p><ul><li>1.4.0: 為有問題的建構子引入警告</li><li>&gt;= 1.5: 將此警告提升為錯誤， 可使用 <code>-XXLanguage:-StrictOnlyInputTypesChecks</code> 暫時恢復到 1.5 之前的行為</li></ul></blockquote><h3 id="在具名變長引數的呼叫中-使用正確的引數執行順序" tabindex="-1">在具名變長引數的呼叫中，使用正確的引數執行順序 <a class="header-anchor" href="#在具名變長引數的呼叫中-使用正確的引數執行順序" aria-label="Permalink to &quot;在具名變長引數的呼叫中，使用正確的引數執行順序&quot;">​</a></h3><blockquote><p><strong>問題 (Issue)</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-17691" target="_blank" rel="noreferrer">KT-17691</a></p><p><strong>元件 (Component)</strong>: Kotlin/JVM</p><p><strong>不相容變更類型 (Incompatible change type)</strong>: behavioral</p><p><strong>簡要摘要 (Short summary)</strong>: Kotlin 1.5 將改變具名變長引數呼叫中的引數執行順序</p><p><strong>棄用週期 (Deprecation cycle)</strong>:</p><ul><li>&lt; 1.5: 為有問題的建構子引入警告</li><li>&gt;= 1.5: 將此警告提升為錯誤， 可使用 <code>-XXLanguage:-UseCorrectExecutionOrderForVarargArguments</code> 暫時恢復到 1.5 之前的行為</li></ul></blockquote><h3 id="在運算子函數呼叫中使用參數的預設值" tabindex="-1">在運算子函數呼叫中使用參數的預設值 <a class="header-anchor" href="#在運算子函數呼叫中使用參數的預設值" aria-label="Permalink to &quot;在運算子函數呼叫中使用參數的預設值&quot;">​</a></h3><blockquote><p><strong>問題 (Issue)</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-42064" target="_blank" rel="noreferrer">KT-42064</a></p><p><strong>元件 (Component)</strong>: Kotlin/JVM</p><p><strong>不相容變更類型 (Incompatible change type)</strong>: behavioral</p><p><strong>簡要摘要 (Short summary)</strong>: Kotlin 1.5 將在運算子呼叫中使用參數的預設值</p><p><strong>棄用週期 (Deprecation cycle)</strong>:</p><ul><li>&lt; 1.5: 舊行為（詳情見問題）</li><li>&gt;= 1.5: 行為已變更， 可使用 <code>-XXLanguage:-JvmIrEnabledByDefault</code> 暫時恢復到 1.5 之前的行為</li></ul></blockquote><h3 id="如果常規進程為空-則在-for-迴圈中產生空的逆向進程" tabindex="-1">如果常規進程為空，則在 for 迴圈中產生空的逆向進程 <a class="header-anchor" href="#如果常規進程為空-則在-for-迴圈中產生空的逆向進程" aria-label="Permalink to &quot;如果常規進程為空，則在 for 迴圈中產生空的逆向進程&quot;">​</a></h3><blockquote><p><strong>問題 (Issue)</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-42533" target="_blank" rel="noreferrer">KT-42533</a></p><p><strong>元件 (Component)</strong>: Kotlin/JVM</p><p><strong>不相容變更類型 (Incompatible change type)</strong>: behavioral</p><p><strong>簡要摘要 (Short summary)</strong>: 如果常規進程為空，Kotlin 1.5 將在 for 迴圈中產生空的逆向進程</p><p><strong>棄用週期 (Deprecation cycle)</strong>:</p><ul><li>&lt; 1.5: 舊行為（詳情見問題）</li><li>&gt;= 1.5: 行為已變更， 可使用 <code>-XXLanguage:-JvmIrEnabledByDefault</code> 暫時恢復到 1.5 之前的行為</li></ul></blockquote><h3 id="釐清-char-到程式碼和-char-到數字的轉換" tabindex="-1">釐清 Char 到程式碼和 Char 到數字的轉換 <a class="header-anchor" href="#釐清-char-到程式碼和-char-到數字的轉換" aria-label="Permalink to &quot;釐清 Char 到程式碼和 Char 到數字的轉換&quot;">​</a></h3><blockquote><p><strong>問題 (Issue)</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-23451" target="_blank" rel="noreferrer">KT-23451</a></p><p><strong>元件 (Component)</strong>: kotlin-stdlib</p><p><strong>不相容變更類型 (Incompatible change type)</strong>: source</p><p><strong>簡要摘要 (Short summary)</strong>: 自 Kotlin 1.5 起，Char 到數字型別的轉換將被棄用</p><p><strong>棄用週期 (Deprecation cycle)</strong>:</p><ul><li>1.5: 棄用 <code>Char.toInt()/toShort()/toLong()/toByte()/toDouble()/toFloat()</code> 以及 <code>Long.toChar()</code> 等反向函數，並建議替代方案</li></ul></blockquote><h3 id="kotlin-text-函數中字元大小寫不敏感比較的不一致性" tabindex="-1">kotlin.text 函數中字元大小寫不敏感比較的不一致性 <a class="header-anchor" href="#kotlin-text-函數中字元大小寫不敏感比較的不一致性" aria-label="Permalink to &quot;kotlin.text 函數中字元大小寫不敏感比較的不一致性&quot;">​</a></h3><blockquote><p><strong>問題 (Issue)</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-45496" target="_blank" rel="noreferrer">KT-45496</a></p><p><strong>元件 (Component)</strong>: kotlin-stdlib</p><p><strong>不相容變更類型 (Incompatible change type)</strong>: behavioral</p><p><strong>簡要摘要 (Short summary)</strong>: 自 Kotlin 1.5 起，<code>Char.equals</code> 在大小寫不敏感的情況下將得到改進，方法是首先比較字元的大寫變體是否相等，然後比較這些大寫變體的小寫變體（而不是字元本身）是否相等</p><p><strong>棄用週期 (Deprecation cycle)</strong>:</p><ul><li>&lt; 1.5: 舊行為（詳情見問題）</li><li>1.5: 變更 <code>Char.equals</code> 函數的行為</li></ul></blockquote><h3 id="移除預設區域設定敏感的大小寫轉換-api" tabindex="-1">移除預設區域設定敏感的大小寫轉換 API <a class="header-anchor" href="#移除預設區域設定敏感的大小寫轉換-api" aria-label="Permalink to &quot;移除預設區域設定敏感的大小寫轉換 API&quot;">​</a></h3><blockquote><p><strong>問題 (Issue)</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-43023" target="_blank" rel="noreferrer">KT-43023</a></p><p><strong>元件 (Component)</strong>: kotlin-stdlib</p><p><strong>不相容變更類型 (Incompatible change type)</strong>: source</p><p><strong>簡要摘要 (Short summary)</strong>: 自 Kotlin 1.5 起，<code>String.toUpperCase()</code> 等預設區域設定敏感的大小寫轉換函數將被棄用</p><p><strong>棄用週期 (Deprecation cycle)</strong>:</p><ul><li>1.5: 棄用帶有預設區域設定的大小寫轉換函數（詳情見問題），並建議替代方案</li></ul></blockquote><h3 id="逐步將集合-min-和-max-函數的回傳型別變更為非可空" tabindex="-1">逐步將集合 min 和 max 函數的回傳型別變更為非可空 <a class="header-anchor" href="#逐步將集合-min-和-max-函數的回傳型別變更為非可空" aria-label="Permalink to &quot;逐步將集合 min 和 max 函數的回傳型別變更為非可空&quot;">​</a></h3><blockquote><p><strong>問題 (Issue)</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-38854" target="_blank" rel="noreferrer">KT-38854</a></p><p><strong>元件 (Component)</strong>: kotlin-stdlib (JVM)</p><p><strong>不相容變更類型 (Incompatible change type)</strong>: source</p><p><strong>簡要摘要 (Short summary)</strong>: 集合 <code>min</code> 和 <code>max</code> 函數的回傳型別將在 1.6 中變更為非可空</p><p><strong>棄用週期 (Deprecation cycle)</strong>:</p><ul><li>1.4: 引入 <code>...OrNull</code> 函數作為同義詞並棄用受影響的 API（詳情見問題）</li><li>1.5.0: 將受影響 API 的棄用級別提升為錯誤</li><li>&gt;=1.6: 重新引入受影響的 API 但回傳型別為非可空</li></ul></blockquote><h3 id="提升浮點型別轉換為-short-和-byte-的棄用級別" tabindex="-1">提升浮點型別轉換為 Short 和 Byte 的棄用級別 <a class="header-anchor" href="#提升浮點型別轉換為-short-和-byte-的棄用級別" aria-label="Permalink to &quot;提升浮點型別轉換為 Short 和 Byte 的棄用級別&quot;">​</a></h3><blockquote><p><strong>問題 (Issue)</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-30360" target="_blank" rel="noreferrer">KT-30360</a></p><p><strong>元件 (Component)</strong>: kotlin-stdlib (JVM)</p><p><strong>不相容變更類型 (Incompatible change type)</strong>: source</p><p><strong>簡要摘要 (Short summary)</strong>: Kotlin 1.4 中以 <code>WARNING</code> 級別棄用的浮點型別轉換為 <code>Short</code> 和 <code>Byte</code>，自 Kotlin 1.5.0 起將導致錯誤。</p><p><strong>棄用週期 (Deprecation cycle)</strong>:</p><ul><li>1.4: 棄用 <code>Double.toShort()/toByte()</code> 和 <code>Float.toShort()/toByte()</code> 並建議替代方案</li><li>1.5.0: 將棄用級別提升為錯誤</li></ul></blockquote><h2 id="工具-tools" tabindex="-1">工具 (Tools) <a class="header-anchor" href="#工具-tools" aria-label="Permalink to &quot;工具 (Tools)&quot;">​</a></h2><h3 id="不要在單一專案中混用多個-kotlin-test-的-jvm-變體" tabindex="-1">不要在單一專案中混用多個 kotlin-test 的 JVM 變體 <a class="header-anchor" href="#不要在單一專案中混用多個-kotlin-test-的-jvm-變體" aria-label="Permalink to &quot;不要在單一專案中混用多個 kotlin-test 的 JVM 變體&quot;">​</a></h3><blockquote><p><strong>問題 (Issue)</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-40225" target="_blank" rel="noreferrer">KT-40225</a></p><p><strong>元件 (Component)</strong>: Gradle</p><p><strong>不相容變更類型 (Incompatible change type)</strong>: behavioral</p><p><strong>簡要摘要 (Short summary)</strong>: 如果其中一個 <code>kotlin-test</code> 變體是由傳遞性依賴引入，則專案中可能會存在針對不同測試框架的多個互斥 <code>kotlin-test</code> 變體。從 1.5.0 起，Gradle 將不允許存在針對不同測試框架的互斥 <code>kotlin-test</code> 變體。</p><p><strong>棄用週期 (Deprecation cycle)</strong>:</p><ul><li>&lt; 1.5: 允許存在針對不同測試框架的多個互斥 <code>kotlin-test</code> 變體</li><li>&gt;= 1.5: 行為已變更， Gradle 會拋出類似「無法選取與功能衝突的模組...」的例外。可能的解決方案： <ul><li>使用與傳遞性依賴所引入的相同的 <code>kotlin-test</code> 變體和對應的測試框架。</li><li>尋找不傳遞性引入 <code>kotlin-test</code> 變體的依賴項的另一個變體，這樣您就可以使用您想使用的測試框架。</li><li>尋找傳遞性引入另一個 <code>kotlin-test</code> 變體（該變體使用您想使用的相同測試框架）的依賴項的另一個變體。</li><li>排除傳遞性引入的測試框架。以下是排除 JUnit 4 的範例：<div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">configurations {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    testImplementation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">get()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">exclude(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.kotlin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;kotlin-test-junit&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>排除測試框架後，測試您的應用程式。如果它停止運作，請回溯排除的變更， 使用庫所使用的相同測試框架，並排除您自己的測試框架。</li></ul></li></ul></blockquote>`,23))])}const f=l(g,[["render",k]]);export{m as __pageData,f as default};
