import{_ as d}from"./chunks/icon-1.K8qzZaho.js";import{_ as o}from"./chunks/icon-2-todo.CF_tKCD9.js";import{_ as E}from"./chunks/icon-3-todo.Gx4op1du.js";import{_ as g}from"./chunks/icon-4-todo.GaeEmerm.js";import{_ as y}from"./chunks/icon-5-todo.CqROQ9Y8.js";import{_ as c}from"./chunks/icon-6-todo.Bq5TIrqo.js";import{_ as F}from"./chunks/icon-7-todo.D-C90RBD.js";import{_ as u}from"./chunks/icon-8-todo.DbcfdMFM.js";import{_ as m}from"./chunks/icon-9-todo.C0yAxetM.js";import{_ as C}from"./chunks/receiver-highlight.BNGaEts0.js";import{_ as B,C as t,c as b,o as f,j as s,G as n,ag as h,a,w as l}from"./chunks/framework.Bksy39di.js";const W=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/kotlin-tour-intermediate-extension-functions.md","filePath":"ja/kotlin/kotlin-tour-intermediate-extension-functions.md","lastUpdated":1754307826000}'),_={name:"ja/kotlin/kotlin-tour-intermediate-extension-functions.md"},A={class:"details custom-block"};function D(v,i,q,S,x,T){const e=t("no-index"),p=t("tldr"),k=t("def"),r=t("deflist");return f(),b("div",null,[i[5]||(i[5]=s("h1",{id:"intermediate-拡張関数",tabindex:"-1"},[a("Intermediate: 拡張関数 "),s("a",{class:"header-anchor",href:"#intermediate-拡張関数","aria-label":'Permalink to "Intermediate: 拡張関数"'},"​")],-1)),n(e),n(p,null,{default:l(()=>i[0]||(i[0]=[s("p",null,[s("img",{src:d,width:"20",alt:"First step"}),a(),s("strong",null,"拡張関数"),s("br"),s("img",{src:o,width:"20",alt:"Second step"}),a(),s("a",{href:"/ja/kotlin/kotlin-tour-intermediate-scope-functions"},"スコープ関数"),s("br"),s("img",{src:E,width:"20",alt:"Third step"}),a(),s("a",{href:"/ja/kotlin/kotlin-tour-intermediate-lambdas-receiver"},"レシーバー付きラムダ式"),s("br"),s("img",{src:g,width:"20",alt:"Fourth step"}),a(),s("a",{href:"/ja/kotlin/kotlin-tour-intermediate-classes-interfaces"},"クラスとインターフェース"),s("br"),s("img",{src:y,width:"20",alt:"Fifth step"}),a(),s("a",{href:"/ja/kotlin/kotlin-tour-intermediate-objects"},"オブジェクト"),s("br"),s("img",{src:c,width:"20",alt:"Sixth step"}),a(),s("a",{href:"/ja/kotlin/kotlin-tour-intermediate-open-special-classes"},"openクラスと特殊クラス"),s("br"),s("img",{src:F,width:"20",alt:"Seventh step"}),a(),s("a",{href:"/ja/kotlin/kotlin-tour-intermediate-properties"},"プロパティ"),s("br"),s("img",{src:u,width:"20",alt:"Eighth step"}),a(),s("a",{href:"/ja/kotlin/kotlin-tour-intermediate-null-safety"},"Null安全性"),s("br"),s("img",{src:m,width:"20",alt:"Ninth step"}),a(),s("a",{href:"/ja/kotlin/kotlin-tour-intermediate-libraries-and-apis"},"ライブラリとAPI")],-1)])),_:1}),i[6]||(i[6]=h('<p>この章では、コードをより簡潔で読みやすくするKotlinの特殊な関数について説明します。これらの関数が、効率的な設計パターンを使用してプロジェクトを次のレベルに引き上げるのにどのように役立つかを学びます。</p><h2 id="拡張関数" tabindex="-1">拡張関数 <a class="header-anchor" href="#拡張関数" aria-label="Permalink to &quot;拡張関数&quot;">​</a></h2><p>ソフトウェア開発では、元のソースコードを変更せずにプログラムの動作を変更する必要があることがよくあります。たとえば、プロジェクトでサードパーティライブラリのクラスに機能を追加したい場合があります。</p><p>拡張関数を使用すると、クラスに追加の機能を持たせることができます。拡張関数は、クラスのメンバー関数と同じ方法で呼び出します。</p><p>拡張関数の構文を導入する前に、<strong>レシーバー型</strong>と<strong>レシーバーオブジェクト</strong>という用語を理解する必要があります。</p><p>レシーバーオブジェクトとは、関数が呼び出される対象のことです。言い換えれば、レシーバーは情報が共有される場所、または共有される相手です。</p><p><img src="'+C+`" alt="送信者と受信者の例" width="500"></p><p>この例では、<code>main()</code>関数が<a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin.collections/first.html" target="_blank" rel="noreferrer"><code>.first()</code></a>関数を呼び出しています。 <code>.first()</code>関数は<code>readOnlyShapes</code>変数<strong>に対して</strong>呼び出されるため、<code>readOnlyShapes</code>変数がレシーバーです。</p><p>レシーバーオブジェクトには<strong>型</strong>があり、コンパイラが関数をいつ使用できるかを理解できるようになっています。</p><p>この例では、標準ライブラリの<code>.first()</code>関数を使用して、リストの最初の要素を返します。独自の拡張関数を作成するには、拡張したいクラス名の後に<code>.</code>を記述し、その後に自分の関数名を記述します。その後に、引数や戻り値の型を含む残りの関数宣言を続けます。</p><p>例:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bold</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&lt;b&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$this</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;/b&gt;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // &quot;hello&quot; is the receiver object</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bold</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // &lt;b&gt;hello&lt;/b&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>この例では:</p><ul><li><code>String</code>は拡張されたクラスであり、レシーバー型としても知られています。</li><li><code>bold</code>は拡張関数の名前です。</li><li><code>.bold()</code>拡張関数の戻り値の型は<code>String</code>です。</li><li><code>&quot;hello&quot;</code> (<code>String</code>のインスタンス) はレシーバーオブジェクトです。</li><li>レシーバーオブジェクトは、本体内で<a href="/ja/kotlin/keyword-reference">キーワード</a> <code>this</code>によってアクセスされます。</li><li>文字列テンプレート (<code></code> <code>) を使用して、</code>this\`の値にアクセスします。</li><li><code>.bold()</code>拡張関数は、文字列を受け取り、太字テキスト用の<code>&lt;b&gt;</code> HTML要素でそれを返します。</li></ul><h2 id="拡張指向設計" tabindex="-1">拡張指向設計 <a class="header-anchor" href="#拡張指向設計" aria-label="Permalink to &quot;拡張指向設計&quot;">​</a></h2><p>拡張関数はどこでも定義できるため、拡張指向設計を作成できます。これらの設計は、コア機能を有用だが不可欠ではない機能から分離し、コードの読みやすさとメンテナンス性を向上させます。</p><p>良い例は、Ktorライブラリの<a href="https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client/-http-client/index.html" target="_blank" rel="noreferrer"><code>HttpClient</code></a>クラスです。これは、ネットワークリクエストの実行に役立ちます。その機能のコアは、HTTPリクエストに必要なすべての情報を受け取る単一の関数<code>request()</code>です。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(method: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, url: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, headers: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HttpResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Network code</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>実際には、最も一般的なHTTPリクエストはGETまたはPOSTリクエストです。ライブラリがこれらの一般的なユースケースに対して短い名前を提供することは理にかなっています。ただし、これらは新しいネットワークコードを記述する必要はなく、特定の<code>request</code>呼び出しのみが必要です。言い換えれば、これらは個別の<code>.get()</code>および<code>.post()</code>拡張関数として定義するのに最適な候補です。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(url: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HttpResponse</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;GET&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, url, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">emptyMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(url: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HttpResponse</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;POST&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, url, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">emptyMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><p>これらの<code>.get()</code>および<code>.post()</code>関数は、正しいHTTPメソッドで<code>request()</code>関数を呼び出すため、自分で呼び出す必要はありません。これらはコードを簡素化し、理解しやすくします。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(method: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, url: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, headers: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HttpResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Requesting </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$method</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$url</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> with headers: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$headers</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Response from </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$url</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(url: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HttpResponse</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;GET&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, url, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">emptyMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Making a GET request using request() directly</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> getResponseWithMember </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;GET&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://example.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">emptyMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Making a GET request using the get() extension function</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> getResponseWithExtension </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://example.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>この拡張指向アプローチは、Kotlinの<a href="https://kotlinlang.org/api/latest/jvm/stdlib/" target="_blank" rel="noreferrer">標準ライブラリ</a>やその他のライブラリで広く使用されています。たとえば、<code>String</code>クラスには、文字列を操作するのに役立つ多くの<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/#extension-functions" target="_blank" rel="noreferrer">拡張関数</a>があります。</p><p>拡張関数の詳細については、<a href="/ja/kotlin/extensions">拡張</a>を参照してください。</p><h2 id="練習" tabindex="-1">練習 <a class="header-anchor" href="#練習" aria-label="Permalink to &quot;練習&quot;">​</a></h2><details class="details custom-block"><summary>演習1</summary><p>整数を受け取り、それが正であるかをチェックする<code>isPositive</code>という拡張関数を記述してください。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Write your code here</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isPositive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><details class="details custom-block"><summary>Example solution</summary><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isPositive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Boolean</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isPositive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></details></details>`,26)),s("details",A,[i[2]||(i[2]=s("summary",null,"演習2",-1)),i[3]||(i[3]=s("p",null,[a("文字列を受け取り、それを小文字バージョンで返す"),s("code",null,"toLowercaseString"),a("という拡張関数を記述してください。")],-1)),n(r,{collapsible:"true"},{default:l(()=>[n(k,{title:"ヒント"},{default:l(()=>i[1]||(i[1]=[s("code",null,"String",-1),a("型の"),s("a",{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/lowercase.html"},[s("code",null,".lowercase()")],-1),a("関数を使用してください。 ")])),_:1})]),_:1}),i[4]||(i[4]=h(`<div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Write your code here</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello World!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toLowercaseString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // hello world!</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><details class="details custom-block"><summary>Example solution</summary><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toLowercaseString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lowercase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello World!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toLowercaseString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // hello world!</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></details>`,2))])])}const L=B(_,[["render",D]]);export{W as __pageData,L as default};
