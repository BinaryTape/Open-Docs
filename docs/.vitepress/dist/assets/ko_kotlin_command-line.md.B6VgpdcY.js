import{_ as i,c as a,o as t,ag as l}from"./chunks/framework.Bksy39di.js";const c=JSON.parse('{"title":"Kotlin 명령줄 컴파일러","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kotlin/command-line.md","filePath":"ko/kotlin/command-line.md","lastUpdated":1754307826000}'),e={name:"ko/kotlin/command-line.md"};function n(h,s,p,k,o,r){return t(),a("div",null,s[0]||(s[0]=[l(`<h1 id="kotlin-명령줄-컴파일러" tabindex="-1">Kotlin 명령줄 컴파일러 <a class="header-anchor" href="#kotlin-명령줄-컴파일러" aria-label="Permalink to &quot;Kotlin 명령줄 컴파일러&quot;">​</a></h1><p>모든 Kotlin 릴리스에는 독립 실행형 컴파일러 버전이 포함되어 있습니다. 최신 버전은 수동으로 또는 패키지 관리자를 통해 다운로드할 수 있습니다.</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>명령줄 컴파일러를 설치하는 것은 Kotlin을 사용하는 데 필수적인 단계가 아닙니다. 일반적인 접근 방식은 <a href="https://www.jetbrains.com/idea/" target="_blank" rel="noreferrer">IntelliJ IDEA</a> 또는 <a href="https://developer.android.com/studio" target="_blank" rel="noreferrer">Android Studio</a>와 같이 공식 Kotlin을 지원하는 IDE나 코드 편집기를 사용하여 Kotlin 애플리케이션을 작성하는 것입니다. 이들은 기본적으로 모든 Kotlin 지원을 제공합니다. <a href="/ko/kotlin/getting-started">IDE에서 Kotlin 시작하기</a>를 알아보세요.</p></div><h2 id="컴파일러-설치" tabindex="-1">컴파일러 설치 <a class="header-anchor" href="#컴파일러-설치" aria-label="Permalink to &quot;컴파일러 설치&quot;">​</a></h2><h3 id="수동-설치" tabindex="-1">수동 설치 <a class="header-anchor" href="#수동-설치" aria-label="Permalink to &quot;수동 설치&quot;">​</a></h3><p>Kotlin 컴파일러를 수동으로 설치하려면 다음을 수행하세요.</p><ol><li><a href="https://github.com/JetBrains/kotlin/releases/tag/v2.2.10" target="_blank" rel="noreferrer">GitHub Releases</a>에서 최신 버전(<code>kotlin-compiler-2.2.10.zip</code>)을 다운로드합니다.</li><li>독립 실행형 컴파일러를 디렉터리에 압축 해제하고 선택적으로 <code>bin</code> 디렉터리를 시스템 경로에 추가합니다. <code>bin</code> 디렉터리에는 Windows, macOS, Linux에서 Kotlin을 컴파일하고 실행하는 데 필요한 스크립트가 포함되어 있습니다.</li></ol><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Windows에서 Kotlin 명령줄 컴파일러를 사용하려면 수동 설치를 권장합니다.</p></div><h3 id="sdkman" tabindex="-1">SDKMAN! <a class="header-anchor" href="#sdkman" aria-label="Permalink to &quot;SDKMAN!&quot;">​</a></h3><p>macOS, Linux, Cygwin, FreeBSD, Solaris와 같은 UNIX 기반 시스템에 Kotlin을 설치하는 더 쉬운 방법은 <a href="https://sdkman.io" target="_blank" rel="noreferrer">SDKMAN!</a>입니다. 이는 Bash 및 ZSH 셸에서도 작동합니다. <a href="https://sdkman.io/install" target="_blank" rel="noreferrer">SDKMAN! 설치 방법</a>을 알아보세요.</p><p>SDKMAN!을 통해 Kotlin 컴파일러를 설치하려면 터미널에서 다음 명령을 실행합니다.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sdk</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kotlin</span></span></code></pre></div><h3 id="homebrew" tabindex="-1">Homebrew <a class="header-anchor" href="#homebrew" aria-label="Permalink to &quot;Homebrew&quot;">​</a></h3><p>또는 macOS에서는 <a href="https://brew.sh/" target="_blank" rel="noreferrer">Homebrew</a>를 통해 컴파일러를 설치할 수 있습니다.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">brew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">brew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kotlin</span></span></code></pre></div><h3 id="snap" tabindex="-1">Snap <a class="header-anchor" href="#snap" aria-label="Permalink to &quot;Snap&quot;">​</a></h3><p>Ubuntu 16.04 이상에서 <a href="https://snapcraft.io/" target="_blank" rel="noreferrer">Snap</a>을 사용하는 경우 명령줄에서 컴파일러를 설치할 수 있습니다.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> snap</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --classic</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kotlin</span></span></code></pre></div><h2 id="애플리케이션-생성-및-실행" tabindex="-1">애플리케이션 생성 및 실행 <a class="header-anchor" href="#애플리케이션-생성-및-실행" aria-label="Permalink to &quot;애플리케이션 생성 및 실행&quot;">​</a></h2><ol><li><p><code>&quot;Hello, World!&quot;</code>를 표시하는 간단한 콘솔 JVM 애플리케이션을 Kotlin으로 만듭니다. 코드 편집기에서 다음 코드를 사용하여 <code>hello.kt</code>라는 새 파일을 만듭니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, World!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>Kotlin 컴파일러를 사용하여 애플리케이션을 컴파일합니다.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlinc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.kt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -include-runtime</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.jar</span></span></code></pre></div><ul><li><code>-d</code> 옵션은 생성된 클래스 파일의 출력 경로를 나타내며, 이 경로는 디렉터리 또는 <strong>.jar</strong> 파일일 수 있습니다.</li><li><code>-include-runtime</code> 옵션은 Kotlin 런타임 라이브러리를 포함하여 결과 <strong>.jar</strong> 파일을 독립 실행형으로 만들고 실행 가능하게 합니다.</li></ul><p>사용 가능한 모든 옵션을 보려면 다음을 실행합니다.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlinc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -help</span></span></code></pre></div></li><li><p>애플리케이션을 실행합니다.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">java</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -jar</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.jar</span></span></code></pre></div></li></ol><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Kotlin/Native 애플리케이션을 컴파일하려면 <a href="/ko/kotlin/native-get-started#using-the-command-line-compiler">Kotlin/Native 컴파일러</a>를 사용합니다.</p></div><h2 id="라이브러리-컴파일" tabindex="-1">라이브러리 컴파일 <a class="header-anchor" href="#라이브러리-컴파일" aria-label="Permalink to &quot;라이브러리 컴파일&quot;">​</a></h2><p>다른 Kotlin 애플리케이션에서 사용할 라이브러리를 개발하는 경우 Kotlin 런타임을 포함하지 않고 <strong>.jar</strong> 파일을 빌드할 수 있습니다.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlinc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.kt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.jar</span></span></code></pre></div><p>이 방식으로 컴파일된 바이너리는 Kotlin 런타임에 의존하므로, 컴파일된 라이브러리가 사용될 때마다 런타임이 클래스패스에 있는지 확인해야 합니다.</p><p><code>kotlin</code> 스크립트를 사용하여 Kotlin 컴파일러가 생성한 바이너리를 실행할 수도 있습니다.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -classpath</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.jar</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> HelloKt</span></span></code></pre></div><p><code>HelloKt</code>는 Kotlin 컴파일러가 <code>hello.kt</code>라는 파일에 대해 생성하는 메인 클래스 이름입니다.</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Kotlin/Native 라이브러리를 컴파일하려면 <a href="/ko/kotlin/native-libraries#kotlin-compiler-specifics">Kotlin/Native 컴파일러</a>를 사용합니다.</p></div><h2 id="repl-실행" tabindex="-1">REPL 실행 <a class="header-anchor" href="#repl-실행" aria-label="Permalink to &quot;REPL 실행&quot;">​</a></h2><p><a href="/ko/kotlin/compiler-reference#xrepl"><code>-Xrepl</code> 컴파일러 옵션</a>과 함께 컴파일러를 실행하여 대화형 셸을 사용할 수 있습니다. 이 셸에서는 유효한 Kotlin 코드를 입력하고 결과를 확인할 수 있습니다.</p><h2 id="스크립트-실행" tabindex="-1">스크립트 실행 <a class="header-anchor" href="#스크립트-실행" aria-label="Permalink to &quot;스크립트 실행&quot;">​</a></h2><p>Kotlin을 스크립팅 언어로 사용할 수 있습니다. Kotlin 스크립트는 최상위 실행 코드가 포함된 Kotlin 소스 파일(<code>.kts</code>)입니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> java.io.File</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Get the passed in path, i.e. &quot;-d some/path&quot; or use the current path.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (args.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">contains</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-d&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) args[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> args.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">indexOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-d&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">           else</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;.&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> folders </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> File</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(path).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listFiles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { file </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> file.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isDirectory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">folders?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { folder </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(folder) }</span></span></code></pre></div><p>스크립트를 실행하려면 <code>-script</code> 옵션과 해당 스크립트 파일을 컴파일러에 전달합니다.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlinc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -script</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> list_folders.kts</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">path_to_folder_to_inspec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>Kotlin은 외부 속성 추가, 정적 또는 동적 종속성 제공 등 스크립트 사용자 지정을 위한 실험적 지원을 제공합니다. 사용자 지정은 적절한 지원 코드가 있는 어노테이션된 Kotlin 클래스인 _스크립트 정의_로 정의됩니다. 스크립트 파일 이름 확장자는 적절한 정의를 선택하는 데 사용됩니다. <a href="/ko/kotlin/custom-script-deps-tutorial">Kotlin 사용자 지정 스크립팅</a>에 대해 자세히 알아보세요.</p><p>적절하게 준비된 스크립트 정의는 적절한 jar 파일이 컴파일 클래스패스에 포함될 때 자동으로 감지되고 적용됩니다. 또는 <code>-script-templates</code> 옵션을 컴파일러에 전달하여 정의를 수동으로 지정할 수 있습니다.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlinc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -script-templates</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> org.example.CustomScriptDefinition</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -script</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> custom.script1.kts</span></span></code></pre></div><p>자세한 내용은 <a href="https://github.com/Kotlin/KEEP/blob/master/proposals/scripting-support.md" target="_blank" rel="noreferrer">KEEP-75</a>를 참조하세요.</p>`,40)]))}const g=i(e,[["render",n]]);export{c as __pageData,g as default};
