import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.Bksy39di.js";const r=JSON.parse('{"title":"在 Compose 应用中使用隔离上下文","description":"","frontmatter":{"title":"在 Compose 应用中使用隔离上下文"},"headers":[],"relativePath":"koin/reference/koin-compose/isolated-context.md","filePath":"koin/reference/koin-compose/isolated-context.md","lastUpdated":1748365453000}'),t={name:"koin/reference/koin-compose/isolated-context.md"};function o(p,s,l,h,k,d){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="在-compose-应用中使用隔离上下文" tabindex="-1">在 Compose 应用中使用隔离上下文 <a class="header-anchor" href="#在-compose-应用中使用隔离上下文" aria-label="Permalink to &quot;在 Compose 应用中使用隔离上下文&quot;">​</a></h1><p>对于 Compose 应用，你可以使用<a href="/koin/reference/koin-core/context-isolation">隔离上下文</a>以相同的方式处理 SDK 或白标应用，从而避免将你的 Koin 定义与终端用户的定义混淆。</p><h2 id="定义隔离上下文" tabindex="-1">定义隔离上下文 <a class="header-anchor" href="#定义隔离上下文" aria-label="Permalink to &quot;定义隔离上下文&quot;">​</a></h2><p>首先，让我们声明我们的隔离上下文持有者，以便在内存中存储隔离的 Koin 实例。这可以通过一个简单的对象类来完成，如下所示。<code>MyIsolatedKoinContext</code> 类持有我们的 Koin 实例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyIsolatedKoinContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> koinApp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> koinApplication</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // declare used modules</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        modules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sdkAppModule)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>请根据你的初始化需求调整 <code>MyIsolatedKoinContext</code> 类</p></div><h2 id="在-compose-中设置隔离上下文" tabindex="-1">在 Compose 中设置隔离上下文 <a class="header-anchor" href="#在-compose-中设置隔离上下文" aria-label="Permalink to &quot;在 Compose 中设置隔离上下文&quot;">​</a></h2><p>现在你已经定义了隔离的 Koin 上下文，我们可以将其设置到 Compose 中，以便使用并覆盖所有 API。只需在根 Compose 函数中使用 <code>KoinIsolatedContext</code>。这将把你的 Koin 上下文传播到所有子 Composable 中。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Composable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Set current Koin instance to Compose context</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    KoinIsolatedContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MyIsolatedKoinContext.koinApp) {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        MyScreen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>在使用 <code>KoinIsolatedContext</code> 之后，所有 Koin Compose API 都将使用你的 Koin 隔离上下文</p></div>`,10)]))}const E=i(t,[["render",o]]);export{r as __pageData,E as default};
