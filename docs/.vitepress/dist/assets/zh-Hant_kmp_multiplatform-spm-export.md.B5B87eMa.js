import{_ as d,a as E,b as o}from"./chunks/multiplatform-spm-url._IA5Tg3X.js";import{_ as g,C as n,c,o as y,j as s,G as l,ag as t,a,w as p}from"./chunks/framework.Bksy39di.js";const S=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kmp/multiplatform-spm-export.md","filePath":"zh-Hant/kmp/multiplatform-spm-export.md","lastUpdated":1755516278000}'),F={name:"zh-Hant/kmp/multiplatform-spm-export.md"};function m(u,i,C,f,b,w){const e=n("tldr"),h=n("list"),k=n("def"),r=n("deflist");return y(),c("div",null,[i[5]||(i[5]=s("h1",{id:"swift-套件匯出設定",tabindex:"-1"},[a("Swift 套件匯出設定 "),s("a",{class:"header-anchor",href:"#swift-套件匯出設定","aria-label":'Permalink to "Swift 套件匯出設定"'},"​")],-1)),l(e,null,{default:p(()=>i[0]||(i[0]=[a(" 這是一種遠端整合方法。在以下情況下，它可能適合您："),s("br",null,null,-1),s("ul",null,[s("li",null,"您想將最終應用程式的程式碼庫與通用程式碼庫分開。"),s("li",null,"您已經在本地機器上設定了一個針對 iOS 的 Kotlin Multiplatform 專案。"),s("li",null,[a("您在 iOS 專案中使用 Swift 套件管理器來處理相依性。"),s("br")])],-1),s("p",null,[s("a",{href:"./multiplatform-ios-integration-overview"},"選擇最適合您的整合方法")],-1)])),_:1}),i[6]||(i[6]=t('<p>您可以將 Apple 目標的 Kotlin/Native 輸出設定為 Swift 套件管理器 (SPM) 的相依性來使用。</p><p>考慮一個具有 iOS 目標的 Kotlin Multiplatform 專案。您可能希望將此 iOS 二進位檔作為相依性提供給開發原生 Swift 專案的 iOS 開發者。使用 Kotlin Multiplatform 工具，您可以提供一個能與他們的 Xcode 專案無縫整合的構件。</p><p>本教學將展示如何使用 Kotlin Gradle 外掛程式來建構 <a href="./multiplatform-build-native-binaries#build-xcframeworks">XCFrameworks</a>。</p><h2 id="設定遠端整合" tabindex="-1">設定遠端整合 <a class="header-anchor" href="#設定遠端整合" aria-label="Permalink to &quot;設定遠端整合&quot;">​</a></h2><p>為了使您的框架可被使用，您需要上傳兩個檔案：</p><ul><li>一個包含 XCFramework 的 ZIP 壓縮檔。您需要將其上傳到一個方便且可直接存取的文件儲存空間（例如，在 GitHub 發布中附加此壓縮檔、使用 Amazon S3 或 Maven）。 選擇最容易整合到您工作流程中的選項。</li><li>描述套件的 <code>Package.swift</code> 檔案。您需要將其推送到一個單獨的 Git 儲存庫。</li></ul>',6)),i[7]||(i[7]=s("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"專案設定選項",tabindex:"-1"},[a("專案設定選項 "),s("a",{class:"header-anchor",href:"#專案設定選項","aria-label":'Permalink to "專案設定選項 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),i[8]||(i[8]=t(`<p>在本教學中，您將把 XCFramework 作為二進位檔儲存在您偏好的檔案儲存空間中，並將 <code>Package.swift</code> 檔案儲存在一個單獨的 Git 儲存庫中。</p><p>不過，您可以以不同的方式配置您的專案。考慮以下組織 Git 儲存庫的選項：</p><ul><li><p>將 <code>Package.swift</code> 檔案和應封裝到 XCFramework 中的程式碼儲存在不同的 Git 儲存庫中。這允許 Swift 描述檔與其描述的專案分開版本控制。這是推薦的方法：它允許擴展，並且通常更容易維護。</p></li><li><p>將 <code>Package.swift</code> 檔案放在您的 Kotlin Multiplatform 程式碼旁邊。這是一種更直接的方法，但請記住，在這種情況下，Swift 套件和程式碼將使用相同的版本控制。SPM 使用 Git 標籤來對套件進行版本控制，這可能會與您專案中使用的標籤產生衝突。</p></li><li><p>將 <code>Package.swift</code> 檔案儲存在消費者專案的儲存庫中。這有助於避免版本控制和維護問題。然而，這種方法可能會導致消費者專案的多儲存庫 SPM 設定和進一步自動化方面產生問題：</p><ul><li>在一個多套件專案中，只有一個消費者套件可以依賴外部模組（以避免專案內部產生相依性衝突）。因此，所有依賴您的 Kotlin Multiplatform 模組的邏輯都應該封裝在一個特定的消費者套件中。</li><li>如果您使用自動化的 CI 流程發布 Kotlin Multiplatform 專案，則此流程需要包含將更新的 <code>Package.swift</code> 檔案發布到消費者儲存庫。這可能會導致消費者儲存庫的更新產生衝突，因此 CI 中的此階段可能難以維護。</li></ul></li></ul><h3 id="配置您的-multiplatform-專案" tabindex="-1">配置您的 Multiplatform 專案 <a class="header-anchor" href="#配置您的-multiplatform-專案" aria-label="Permalink to &quot;配置您的 Multiplatform 專案&quot;">​</a></h3><p>在以下範例中，Kotlin Multiplatform 專案的共享程式碼本地儲存在 <code>shared</code> 模組中。 如果您的專案結構不同，請在程式碼和路徑範例中將「shared」替換為您的模組名稱。</p><p>要設定 XCFramework 的發布：</p><ol><li><p>使用 iOS 目標列表中的 <code>XCFramework</code> 呼叫更新您的 <code>shared/build.gradle.kts</code> 設定檔：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.kotlin.gradle.plugin.mpp.apple.XCFramework</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Other Kotlin Multiplatform targets</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Name of the module to be imported in the consumer project</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> xcframeworkName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Shared&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> xcf </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> XCFramework</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(xcframeworkName)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        iosX64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        iosArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        iosSimulatorArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        it.binaries.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">framework</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            baseName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> xcframeworkName</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // Specify CFBundleIdentifier to uniquely identify the framework</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            binaryOption</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;bundleId&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.example.\${xcframeworkName}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            xcf.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            isStatic </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>執行 Gradle 任務以建立框架：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> :shared:assembleSharedXCFramework</span></span></code></pre></div><p>生成的框架將在您的專案目錄中建立為 <code>shared/build/XCFrameworks/release/Shared.xcframework</code> 資料夾。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>如果您使用 Compose Multiplatform 專案，請使用以下 Gradle 任務： <code>shell ./gradlew :composeApp:assembleSharedXCFramework </code> 然後您可以在 <code>composeApp/build/XCFrameworks/release/Shared.xcframework</code> 資料夾中找到生成的框架。</p></div></li></ol><h3 id="準備-xcframework-和-swift-套件描述檔" tabindex="-1">準備 XCFramework 和 Swift 套件描述檔 <a class="header-anchor" href="#準備-xcframework-和-swift-套件描述檔" aria-label="Permalink to &quot;準備 XCFramework 和 Swift 套件描述檔&quot;">​</a></h3>`,8)),s("ol",null,[i[3]||(i[3]=s("li",null,[s("p",null,[a("將 "),s("code",null,"Shared.xcframework"),a(" 資料夾壓縮成一個 ZIP 檔案，並計算生成的壓縮檔的校驗和，例如：")]),s("p",null,[s("code",null,"swift package compute-checksum Shared.xcframework.zip")])],-1)),s("li",null,[i[2]||(i[2]=s("p",null,"將 ZIP 檔案上傳到您選擇的文件儲存空間。該檔案應該可以透過直接連結存取。例如，以下是您如何使用 GitHub 中的發布來執行此操作：",-1)),l(r,{collapsible:"true"},{default:p(()=>[l(k,{title:"上傳至 GitHub 發布"},{default:p(()=>[l(h,{type:"decimal"},{default:p(()=>i[1]||(i[1]=[s("li",null,[a("前往 "),s("a",{href:"https://github.com"},"GitHub"),a(" 並登入您的帳戶。")],-1),s("li",null,"導航至您要建立發布的儲存庫。",-1),s("li",null,[a("在右側的"),s("b",null,"發布 (Releases)"),a(" 部分中，點擊"),s("b",null,"建立新發布 (Create a new release)"),a(" 連結。")],-1),s("li",null,"填寫發布資訊、新增或建立新標籤、指定發布標題並編寫描述。",-1),s("li",null,[s("p",null,[a("透過底部的"),s("b",null,"透過拖放或選擇二進位檔來附加 (Attach binaries by dropping them here or selecting them)"),a(" 欄位上傳包含 XCFramework 的 ZIP 檔案：")]),s("img",{src:d,alt:"填寫發布資訊",width:"700"})],-1),s("li",null,[a("點擊"),s("b",null,"發布發行版 (Publish release)"),a("。")],-1),s("li",null,[s("p",null,[a("在發布的"),s("b",null,"資產 (Assets)"),a(" 部分下，右鍵點擊 ZIP 檔案並選擇"),s("b",null,"複製連結地址 (Copy link address)"),a(" 或瀏覽器中的類似選項：")]),s("img",{src:E,alt:"複製已上傳檔案的連結",width:"500"})],-1)])),_:1})]),_:1})]),_:1})]),i[4]||(i[4]=t(`<li><p>[推薦] 檢查連結是否有效以及檔案是否可下載。在終端機中，執行以下命令：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>curl &lt;downloadable link to the uploaded XCFramework ZIP file&gt;</span></span></code></pre></div></li><li><p>選擇任何目錄並在本地建立一個包含以下程式碼的 <code>Package.swift</code> 檔案：</p><div class="language-Swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// swift-tools-version:5.3</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PackageDescription</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> package</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Package</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Shared&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   platforms</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">iOS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.v14),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   products</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">library</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Shared&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">targets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Shared&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   targets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">binaryTarget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">         name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Shared&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">         url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&lt;link to the uploaded XCFramework ZIP file&gt;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">         checksum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&lt;checksum calculated for the ZIP file&gt;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></li><li><p>在 <code>url</code> 欄位中，指定您的 ZIP 壓縮檔（包含 XCFramework）的連結。</p></li><li><p>[推薦] 要驗證生成的描述檔，您可以在包含 <code>Package.swift</code> 檔案的目錄中執行以下 Shell 命令：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">swift</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> package</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">swift</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> package</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> show-dependencies</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --format</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> json</span></span></code></pre></div><p>如果描述檔正確，輸出將描述找到的任何錯誤或顯示成功的下載和解析結果。</p></li><li><p>將 <code>Package.swift</code> 檔案推送到您的遠端儲存庫。請務必建立並推送帶有套件語義化版本的 Git 標籤。</p></li>`,5))]),i[9]||(i[9]=t('<h3 id="新增套件相依性" tabindex="-1">新增套件相依性 <a class="header-anchor" href="#新增套件相依性" aria-label="Permalink to &quot;新增套件相依性&quot;">​</a></h3><p>現在兩個檔案都可存取了，您可以將建立的套件的相依性新增到現有的客戶端 iOS 專案中，或建立一個新專案。要新增套件相依性：</p><ol><li><p>在 Xcode 中，選擇 <strong>檔案 (File) | 新增套件相依性 (Add Package Dependencies)</strong>。</p></li><li><p>在搜尋欄位中，輸入包含 <code>Package.swift</code> 檔案的 Git 儲存庫 URL：</p><p><img src="'+o+`" alt="指定含有套件檔案的儲存庫"></p></li><li><p>點擊<strong>新增套件 (Add package)</strong> 按鈕，然後為套件選擇產品和對應的目標。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>如果您正在建立一個 Swift 套件，對話框會有所不同。在這種情況下，點擊<strong>複製套件 (Copy package)</strong> 按鈕。 這會將一行 <code>.package</code> 放入您的剪貼簿。將此行貼到您自己的 <code>Package.swift</code> 檔案的 <a href="https://developer.apple.com/documentation/packagedescription/package/dependency" target="_blank" rel="noreferrer">Package.Dependency</a> 區塊中，並將必要的產品新增到適當的 <code>Target.Dependency</code> 區塊中。</p></div></li></ol><h3 id="檢查您的設定" tabindex="-1">檢查您的設定 <a class="header-anchor" href="#檢查您的設定" aria-label="Permalink to &quot;檢查您的設定&quot;">​</a></h3><p>為了檢查所有設定是否正確，請在 Xcode 中測試導入：</p><ol><li><p>在您的專案中，導航到您的 UI 檢視檔案，例如 <code>ContentView.swift</code>。</p></li><li><p>將程式碼替換為以下程式碼片段：</p><div class="language-Swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SwiftUI</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Shared</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ContentView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        VStack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            Image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">systemName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;globe&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">imageScale</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.large)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">foregroundStyle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.tint)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, world! </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(Shared.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Platform_iosKt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getPlatform</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">().</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">padding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#Preview</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    ContentView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在這裡，您導入 <code>Shared</code> XCFramework，然後使用它在 <code>Text</code> 欄位中獲取平台名稱。</p></li><li><p>確保預覽已更新為新文字。</p></li></ol><h2 id="將多個模組匯出為-xcframework" tabindex="-1">將多個模組匯出為 XCFramework <a class="header-anchor" href="#將多個模組匯出為-xcframework" aria-label="Permalink to &quot;將多個模組匯出為 XCFramework&quot;">​</a></h2><p>為了將來自多個 Kotlin Multiplatform 模組的程式碼作為 iOS 二進位檔提供，請將這些模組組合成一個單一的傘狀模組。然後，建構並匯出此傘狀模組的 XCFramework。</p><p>例如，您有一個 <code>network</code> 和一個 <code>database</code> 模組，您將它們組合成一個 <code>together</code> 模組：</p><ol><li><p>在 <code>together/build.gradle.kts</code> 檔案中，指定相依性和框架配置：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> frameworkName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;together&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> xcf </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> XCFramework</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(frameworkName)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        iosX64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        iosArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        iosSimulatorArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { iosTarget </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 與上述範例相同，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 增加了相依性的匯出呼叫</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        iosTarget.binaries.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">framework</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(projects.network)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(projects.database)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            baseName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> frameworkName</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            xcf.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 將相依性設定為 &quot;api&quot;（而非 &quot;implementation&quot;）以匯出底層模組</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        commonMain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            api</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(projects.network)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            api</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(projects.database)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>每個包含的模組都應配置其 iOS 目標，例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    androidTarget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosX64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosSimulatorArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>在 <code>together</code> 資料夾中建立一個空的 Kotlin 檔案，例如 <code>together/src/commonMain/kotlin/Together.kt</code>。 這是一個權宜之計，因為如果匯出的模組不包含任何原始碼，Gradle 腳本目前無法組裝框架。</p></li><li><p>執行組裝框架的 Gradle 任務：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> :together:assembleTogetherReleaseXCFramework</span></span></code></pre></div></li><li><p>依照 <a href="#prepare-the-xcframework-and-the-swift-package-manifest">上一節</a> 的步驟準備 <code>together.xcframework</code>：將其壓縮、計算校驗和、將壓縮的 XCFramework 上傳到文件儲存空間、建立並推送 <code>Package.swift</code> 檔案。</p></li></ol><p>現在，您可以將相依性導入 Xcode 專案。新增 <code>import together</code> 指令後，您應該可以從 <code>network</code> 和 <code>database</code> 模組中匯入類別到 Swift 程式碼。</p>`,11))])}const v=g(F,[["render",m]]);export{S as __pageData,v as default};
