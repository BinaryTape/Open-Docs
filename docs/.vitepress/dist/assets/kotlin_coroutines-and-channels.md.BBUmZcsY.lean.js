import{_ as k,a as r,b as d,c as E,d as o,e as g,f as c,g as y,h as F,i as u,j as C,k as b,l as B,m as D,n as A,o as v,p as m,q as f,r as _,s as q}from"./chunks/time-comparison.B6DZdO43.js";import{_ as T,C as e,c as R,o as x,ag as n,j as i,G as l,a,w as t}from"./chunks/framework.Bksy39di.js";const V=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/coroutines-and-channels.md","filePath":"kotlin/coroutines-and-channels.md","lastUpdated":1754307826000}'),S={name:"kotlin/coroutines-and-channels.md"};function I(P,s,U,w,L,N){const p=e("def"),h=e("deflist");return x(),R("div",null,[s[4]||(s[4]=n("",29)),s[5]||(s[5]=i("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"任务-1-解决方案",tabindex:"-1"},[a("任务 1 解决方案 "),i("a",{class:"header-anchor",href:"#任务-1-解决方案","aria-label":'Permalink to "任务 1 解决方案 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),s[6]||(s[6]=n("",11)),s[7]||(s[7]=i("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"任务-2-解决方案",tabindex:"-1"},[a("任务 2 解决方案 "),i("a",{class:"header-anchor",href:"#任务-2-解决方案","aria-label":'Permalink to "任务 2 解决方案 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),s[8]||(s[8]=n("",16)),s[9]||(s[9]=i("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"任务-3-的第一次尝试解决方案",tabindex:"-1"},[a("任务 3 的第一次尝试解决方案 "),i("a",{class:"header-anchor",href:"#任务-3-的第一次尝试解决方案","aria-label":'Permalink to "任务 3 的第一次尝试解决方案 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),s[10]||(s[10]=n("",5)),s[11]||(s[11]=i("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"任务-3-的第二次尝试解决方案",tabindex:"-1"},[a("任务 3 的第二次尝试解决方案 "),i("a",{class:"header-anchor",href:"#任务-3-的第二次尝试解决方案","aria-label":'Permalink to "任务 3 的第二次尝试解决方案 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),s[12]||(s[12]=n("",6)),s[13]||(s[13]=i("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"_3-的第三次尝试解决方案",tabindex:"-1"},[a("3 的第三次尝试解决方案 "),i("a",{class:"header-anchor",href:"#_3-的第三次尝试解决方案","aria-label":'Permalink to "3 的第三次尝试解决方案 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),s[14]||(s[14]=n("",16)),s[15]||(s[15]=i("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"任务-4-解决方案",tabindex:"-1"},[a("任务 4 解决方案 "),i("a",{class:"header-anchor",href:"#任务-4-解决方案","aria-label":'Permalink to "任务 4 解决方案 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),s[16]||(s[16]=n("",39)),s[17]||(s[17]=i("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"任务-5-提示",tabindex:"-1"},[a("任务 5 提示 "),i("a",{class:"header-anchor",href:"#任务-5-提示","aria-label":'Permalink to "任务 5 提示 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),s[18]||(s[18]=n("",4)),s[19]||(s[19]=i("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"任务-5-解决方案",tabindex:"-1"},[a("任务 5 解决方案 "),i("a",{class:"header-anchor",href:"#任务-5-解决方案","aria-label":'Permalink to "任务 5 解决方案 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),s[20]||(s[20]=n("",46)),s[21]||(s[21]=i("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"任务-6-解决方案",tabindex:"-1"},[a("任务 6 解决方案 "),i("a",{class:"header-anchor",href:"#任务-6-解决方案","aria-label":'Permalink to "任务 6 解决方案 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),s[22]||(s[22]=n("",21)),l(h,{collapsible:"true"},{default:t(()=>[l(p,{title:"无限通道"},{default:t(()=>s[0]||(s[0]=[i("p",null,[a("无限通道与队列最接近：生产者可以将元素发送到此通道，它将无限期地增长。"),i("code",null,"send()"),a(" 调用永远不会挂起。如果程序内存不足，你将收到 "),i("code",null,"OutOfMemoryException"),a("。无限通道和队列之间的区别在于，当消费者尝试从空通道接收时，它会挂起，直到发送一些新元素。")],-1),i("img",{src:k,alt:"无限通道",width:"500"},null,-1)])),_:1}),l(p,{title:"缓冲通道"},{default:t(()=>s[1]||(s[1]=[i("p",null,[a("缓冲通道的大小受指定数字的限制。生产者可以将元素发送到此通道，直到达到大小限制。所有元素都内部存储。当通道已满时，其上的下一个 "),i("code",null,"send"),a(" 调用将挂起，直到有更多可用空间。")],-1),i("img",{src:r,alt:"缓冲通道",width:"500"},null,-1)])),_:1}),l(p,{title:"Rendezvous 通道"},{default:t(()=>s[2]||(s[2]=[i("p",null,[a('"Rendezvous" 通道是一个没有缓冲区的通道，与大小为零的缓冲通道相同。其中一个函数（'),i("code",null,"send()"),a(" 或 "),i("code",null,"receive()"),a("）总是挂起，直到另一个被调用。")],-1),i("p",null,[a("如果调用了 "),i("code",null,"send()"),a(" 函数并且没有挂起的 "),i("code",null,"receive()"),a(" 调用准备好处理元素，那么 "),i("code",null,"send()"),a(" 将挂起。同样，如果调用了 "),i("code",null,"receive()"),a(" 函数并且通道为空，或者换句话说，没有挂起的 "),i("code",null,"send()"),a(" 调用准备好发送元素，那么 "),i("code",null,"receive()"),a(" 调用将挂起。")],-1),i("p",null,[a('"rendezvous" 名称（“在约定时间和地点会面”）指的是 '),i("code",null,"send()"),a(" 和 "),i("code",null,"receive()"),a(" 应该“准时会面”这一事实。")],-1),i("img",{src:d,alt:"Rendezvous 通道",width:"500"},null,-1)])),_:1}),l(p,{title:"Conflated 通道"},{default:t(()=>s[3]||(s[3]=[i("p",null,[a("发送到 Conflated 通道的新元素将覆盖先前发送的元素，因此接收者将始终只获得最新元素。"),i("code",null,"send()"),a(" 调用永远不会挂起。")],-1),i("img",{src:E,alt:"Conflated 通道",width:"500"},null,-1)])),_:1})]),_:1}),s[23]||(s[23]=n("",9)),s[24]||(s[24]=i("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"任务-7-提示",tabindex:"-1"},[a("任务 7 提示 "),i("a",{class:"header-anchor",href:"#任务-7-提示","aria-label":'Permalink to "任务 7 提示 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),s[25]||(s[25]=n("",5)),s[26]||(s[26]=i("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"任务-7-解决方案",tabindex:"-1"},[a("任务 7 解决方案 "),i("a",{class:"header-anchor",href:"#任务-7-解决方案","aria-label":'Permalink to "任务 7 解决方案 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),s[27]||(s[27]=n("",35)),s[28]||(s[28]=i("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"任务-8-提示",tabindex:"-1"},[a("任务 8 提示 "),i("a",{class:"header-anchor",href:"#任务-8-提示","aria-label":'Permalink to "任务 8 提示 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),s[29]||(s[29]=n("",1)),s[30]||(s[30]=i("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"任务-8-解决方案",tabindex:"-1"},[a("任务 8 解决方案 "),i("a",{class:"header-anchor",href:"#任务-8-解决方案","aria-label":'Permalink to "任务 8 解决方案 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),s[31]||(s[31]=n("",8))])}const H=T(S,[["render",I]]);export{V as __pageData,H as default};
