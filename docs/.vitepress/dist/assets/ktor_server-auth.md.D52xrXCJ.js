import{_ as y,C as n,c as v,o as F,G as i,ag as p,j as a,w as e,a as t}from"./chunks/framework.Bksy39di.js";const _=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ktor/server-auth.md","filePath":"ktor/server-auth.md","lastUpdated":1755457140000}'),b={name:"ktor/server-auth.md"};function m(f,s,q,A,C,B){const o=n("TopicTitle"),k=n("show-structure"),d=n("primary-label"),c=n("tldr"),E=n("link-summary"),l=n("code-block"),r=n("TabItem"),h=n("Tabs"),u=n("Links"),g=n("list");return F(),v("div",null,[i(o,{labelRef:"server-plugin",title:"Ktor 服务器中的认证与授权"}),i(k,{for:"chapter",depth:"2"}),i(d,{ref:"server-plugin"},null,512),i(c,null,{default:e(()=>s[0]||(s[0]=[a("p",null,[a("b",null,"必需的依赖项"),t(": "),a("code",null,"io.ktor:ktor-server-auth")],-1)])),_:1}),i(E,null,{default:e(()=>s[1]||(s[1]=[t(" Ktor 中的 Authentication 插件负责处理认证和授权。 ")])),_:1}),s[14]||(s[14]=p('<p>Ktor 提供了 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-authentication/index.html" target="_blank" rel="noreferrer">Authentication</a> 插件来处理认证和授权。典型使用场景包括用户登录、授予对特定资源的访问权限以及在各方之间安全地传输信息。您还可以将 <code>Authentication</code> 与 <a href="./server-sessions">Sessions</a> 结合使用，以在请求之间保留用户的会话信息。</p><blockquote><p>在客户端，Ktor 提供了 <a href="./client-auth">Authentication</a> 插件用于处理认证和授权。</p></blockquote><h2 id="supported" tabindex="-1">支持的认证类型 <a class="header-anchor" href="#supported" aria-label="Permalink to &quot;支持的认证类型 {id=&quot;supported&quot;}&quot;">​</a></h2><p>Ktor 支持以下认证和授权方案：</p><h3 id="http-auth" tabindex="-1">HTTP 认证 <a class="header-anchor" href="#http-auth" aria-label="Permalink to &quot;HTTP 认证 {id=&quot;http-auth&quot;}&quot;">​</a></h3><p>HTTP 提供了 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication" target="_blank" rel="noreferrer">通用框架</a> 用于访问控制和认证。在 Ktor 中，您可以使用以下 HTTP 认证方案：</p><ul><li><a href="./server-basic-auth">Basic</a> - 使用 <code>Base64</code> 编码提供用户名和密码。通常不建议单独使用，除非与 HTTPS 结合使用。</li><li><a href="./server-digest-auth">Digest</a> - 一种认证方法，通过对用户名和密码应用哈希函数，以加密形式通信用户凭据。</li><li><a href="./server-bearer-auth">Bearer</a> - 一种涉及称为 bearer 令牌的安全令牌的认证方案。 Bearer 认证方案作为 <a href="./server-oauth">OAuth</a> 或 <a href="./server-jwt">JWT</a> 的一部分使用，但您也可以为授权 bearer 令牌提供自定义逻辑。</li></ul><h3 id="form-auth" tabindex="-1">基于表单的认证 <a class="header-anchor" href="#form-auth" aria-label="Permalink to &quot;基于表单的认证 {id=&quot;form-auth&quot;}&quot;">​</a></h3><p><a href="./server-form-based-auth">基于表单的</a>认证使用 <a href="https://developer.mozilla.org/en-US/docs/Learn/Forms" target="_blank" rel="noreferrer">Web 表单</a> 收集凭据信息并认证用户。</p><h3 id="jwt" tabindex="-1">JSON Web Token (JWT) <a class="header-anchor" href="#jwt" aria-label="Permalink to &quot;JSON Web Token (JWT) {id=&quot;jwt&quot;}&quot;">​</a></h3><p><a href="./server-jwt">JSON Web Token</a> 是一种开放标准，用于将信息作为 JSON 对象在各方之间安全传输。您可以将 JSON Web Token 用于授权：当用户登录后，每个请求都将包含一个 token，允许用户访问该 token 允许的资源。在 Ktor 中，您可以使用 <code>jwt</code> 认证来验证 token 并校验其中包含的声明。</p><h3 id="ldap" tabindex="-1">LDAP <a class="header-anchor" href="#ldap" aria-label="Permalink to &quot;LDAP {id=&quot;ldap&quot;}&quot;">​</a></h3><p><a href="./server-ldap">LDAP</a> 是一种开放且跨平台的协议，用于目录服务认证。Ktor 提供了 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth-ldap/io.ktor.server.auth.ldap/ldap-authenticate.html" target="_blank" rel="noreferrer">ldapAuthenticate</a> 函数，用于根据指定的 LDAP 服务器认证用户凭据。</p><h3 id="oauth" tabindex="-1">OAuth <a class="header-anchor" href="#oauth" aria-label="Permalink to &quot;OAuth {id=&quot;oauth&quot;}&quot;">​</a></h3><p><a href="./server-oauth">OAuth</a> 是一种用于保护 API 访问安全的开放标准。Ktor 中的 <code>oauth</code> 提供者允许您使用 Google、Facebook、Twitter 等外部提供者实现认证。</p><h3 id="sessions" tabindex="-1">Session <a class="header-anchor" href="#sessions" aria-label="Permalink to &quot;Session {id=&quot;sessions&quot;}&quot;">​</a></h3><p><a href="./server-sessions">Sessions</a> 提供了一种在不同 HTTP 请求之间持久化数据的机制。典型用例包括存储登录用户的 ID、购物车内容或在客户端保存用户偏好。在 Ktor 中，已有关联 session 的用户可以使用 <code>session</code> 提供者进行认证。关于如何实现，请参阅 <a href="./server-session-auth">Ktor 服务器中的 Session 认证</a>。</p><h3 id="custom" tabindex="-1">自定义 <a class="header-anchor" href="#custom" aria-label="Permalink to &quot;自定义 {id=&quot;custom&quot;}&quot;">​</a></h3><p>Ktor 还提供了用于创建 <a href="./server-custom-plugins">自定义插件</a> 的 API，可用于实现您自己的插件来处理认证和授权。 例如，<code>AuthenticationChecked</code> <a href="./server-custom-plugins#call-handling">钩子</a> 在认证凭据检测后执行，它允许您实现授权：<a href="https://github.com/ktorio/ktor-documentation/blob/3.2.3/codeSnippets/snippets/custom-plugin-authorization" target="_blank" rel="noreferrer">custom-plugin-authorization</a>。</p><h2 id="add_dependencies" tabindex="-1">添加依赖项 <a class="header-anchor" href="#add_dependencies" aria-label="Permalink to &quot;添加依赖项 {id=&quot;add_dependencies&quot;}&quot;">​</a></h2><p> 要使用 <code>Authentication</code>，您需要在构建脚本中包含 <code>ktor-server-auth</code> artifact： </p>',21)),i(h,{group:"languages"},{default:e(()=>[i(r,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:e(()=>[i(l,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-server-auth:$ktor_version")'})]),_:1}),i(r,{title:"Gradle (Groovy)","group-key":"groovy"},{default:e(()=>[i(l,{lang:"Groovy",code:'            implementation "io.ktor:ktor-server-auth:$ktor_version"'})]),_:1}),i(r,{title:"Maven","group-key":"maven"},{default:e(()=>[i(l,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-server-auth-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),s[15]||(s[15]=a("p",null,[t("请注意，一些认证提供者，例如 "),a("a",{href:"./server-jwt"},"JWT"),t(" 和 "),a("a",{href:"./server-ldap"},"LDAP"),t("，需要额外的 artifacts。")],-1)),s[16]||(s[16]=a("h2",{id:"install",tabindex:"-1"},[t("安装 Authentication "),a("a",{class:"header-anchor",href:"#install","aria-label":'Permalink to "安装 Authentication {id="install"}"'},"​")],-1)),a("p",null,[s[3]||(s[3]=t(" 要 ")),s[4]||(s[4]=a("a",{href:"#install"},"安装",-1)),s[5]||(s[5]=t()),s[6]||(s[6]=a("code",null,"Authentication",-1)),s[7]||(s[7]=t(" 插件到应用程序中， 请将其传递给指定 ")),i(u,{href:"/ktor/server-modules",summary:"模块允许您通过分组路由来组织应用程序。"},{default:e(()=>s[2]||(s[2]=[t("模块")])),_:1}),s[8]||(s[8]=t(" 中的 ")),s[9]||(s[9]=a("code",null,"install",-1)),s[10]||(s[10]=t(" 函数。 下面的代码片段展示了如何安装 ")),s[11]||(s[11]=a("code",null,"Authentication",-1)),s[12]||(s[12]=t(" ... "))]),i(g,null,{default:e(()=>s[13]||(s[13]=[a("li",null,[t(" ... 在 "),a("code",null,"embeddedServer"),t(" 函数调用内部。 ")],-1),a("li",null,[t(" ... 在显式定义的 "),a("code",null,"module"),t(" 内部，它是 "),a("code",null,"Application"),t(" 类的一个扩展函数。 ")],-1)])),_:1}),i(h,null,{default:e(()=>[i(r,{title:"embeddedServer"},{default:e(()=>[i(l,{lang:"kotlin",code:`            import io.ktor.server.engine.*
            import io.ktor.server.netty.*
            import io.ktor.server.application.*
            import io.ktor.server.auth.*

            fun main() {
                embeddedServer(Netty, port = 8080) {
                    install(Authentication)
                    // ...
                }.start(wait = true)
            }`})]),_:1}),i(r,{title:"module"},{default:e(()=>[i(l,{lang:"kotlin",code:`            import io.ktor.server.application.*
            import io.ktor.server.auth.*
            // ...
            fun Application.module() {
                install(Authentication)
                // ...
            }`})]),_:1})]),_:1}),s[17]||(s[17]=p(`<h2 id="configure" tabindex="-1">配置 Authentication <a class="header-anchor" href="#configure" aria-label="Permalink to &quot;配置 Authentication {id=&quot;configure&quot;}&quot;">​</a></h2><p>安装 Authentication 后，您可以按如下方式配置和使用 <code>Authentication</code>：</p><h3 id="choose-provider" tabindex="-1">步骤 1：选择认证提供者 <a class="header-anchor" href="#choose-provider" aria-label="Permalink to &quot;步骤 1：选择认证提供者 {id=&quot;choose-provider&quot;}&quot;">​</a></h3><p>要使用特定的认证提供者，例如 <a href="./server-basic-auth">basic</a>、<a href="./server-digest-auth">digest</a> 或 <a href="./server-form-based-auth">form</a>， 您需要在 <code>install</code> 代码块中调用相应的函数。例如，要使用 basic 认证， 请调用 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/basic.html" target="_blank" rel="noreferrer"><code>.basic()</code></a> 函数：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.application.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.auth.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Authentication) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    basic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Configure basic authentication</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在此函数中，您可以 <a href="#configure-provider">配置</a> 此提供者特有的设置。</p><h3 id="provider-name" tabindex="-1">步骤 2：指定提供者名称 <a class="header-anchor" href="#provider-name" aria-label="Permalink to &quot;步骤 2：指定提供者名称 {id=&quot;provider-name&quot;}&quot;">​</a></h3><p>用于 <a href="#choose-provider">使用特定提供者</a> 的函数可选地允许您指定提供者名称。下面的代码 示例安装了 basic 和 form 提供者，分别命名为 <code>&quot;auth-basic&quot;</code> 和 <code>&quot;auth-form&quot;</code>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Authentication) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    basic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-basic&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Configure basic authentication</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    form</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-form&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Configure form authentication</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这些名称稍后可以使用来 <a href="#authenticate-route">认证不同的路由</a>，使用不同的提供者。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>请注意，提供者名称应该是唯一的，并且您只能定义一个没有名称的提供者。</p></div><h3 id="configure-provider" tabindex="-1">步骤 3：配置提供者 <a class="header-anchor" href="#configure-provider" aria-label="Permalink to &quot;步骤 3：配置提供者 {id=&quot;configure-provider&quot;}&quot;">​</a></h3><p>每种 <a href="#choose-provider">提供者类型</a> 都有自己的配置。例如， <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-basic-authentication-provider/-config/index.html" target="_blank" rel="noreferrer"><code>BasicAuthenticationProvider.Config</code></a> 类为 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/basic.html" target="_blank" rel="noreferrer"><code>.basic()</code></a> 函数提供选项。此类中的关键函数是 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-basic-authentication-provider/-config/validate.html" target="_blank" rel="noreferrer"><code>validate()</code></a>， 它负责校验用户名和密码。以下代码示例演示了其用法：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Authentication) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    basic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-basic&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        realm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Access to the &#39;/&#39; path&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        validate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { credentials </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (credentials.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;jetbrains&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> credentials.password </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;foobar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                UserIdPrincipal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(credentials.name)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>要理解 <code>validate()</code> 函数的工作原理，我们需要介绍两个术语：</p><ul><li>principal 是一种可以被认证的实体：用户、计算机、服务等。在 Ktor 中，各种认证提供者可能会使用不同的 principal。例如，<code>basic</code>、<code>digest</code> 和 <code>form</code> 提供者认证 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-user-id-principal/index.html" target="_blank" rel="noreferrer"><code>UserIdPrincipal</code></a>， 而 <code>jwt</code> 提供者验证 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth-jwt/io.ktor.server.auth.jwt/-j-w-t-principal/index.html" target="_blank" rel="noreferrer"><code>JWTPrincipal</code></a>。 <blockquote><p>您也可以创建自定义 principal。这在以下情况下可能很有用：</p><ul><li>将凭据映射到自定义 principal 允许您在 <a href="#get-principal">路由处理器</a> 内部获取已认证 principal 的额外信息。</li><li>如果您使用 <a href="./server-session-auth">session 认证</a>，principal 可能是一个存储 session 数据的数据类。</li></ul></blockquote></li><li>credential 是一组服务器用于认证 principal 的属性：用户名/密码对、API 密钥等。例如，<code>basic</code> 和 <code>form</code> 提供者使用 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-user-password-credential/index.html" target="_blank" rel="noreferrer"><code>UserPasswordCredential</code></a> 校验用户名和密码，而 <code>jwt</code> 校验 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth-jwt/io.ktor.server.auth.jwt/-j-w-t-credential/index.html" target="_blank" rel="noreferrer"><code>JWTCredential</code></a>。</li></ul><p>因此，<code>validate()</code> 函数会检测指定的凭据并在认证成功的情况下返回一个 <code>Any</code> 类型的 principal，或在认证失败时返回 <code>null</code>。</p><blockquote><p>要根据特定条件跳过认证， 请使用 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-authentication-provider/-config/skip-when.html" target="_blank" rel="noreferrer"><code>skipWhen()</code></a>。 例如，如果 <a href="./server-sessions">session</a> 已存在，您可以跳过 <code>basic</code> 认证：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">basic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    skipWhen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { call </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> call.sessions.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></blockquote><h3 id="authenticate-route" tabindex="-1">步骤 4：保护特定资源 <a class="header-anchor" href="#authenticate-route" aria-label="Permalink to &quot;步骤 4：保护特定资源 {id=&quot;authenticate-route&quot;}&quot;">​</a></h3><p>最后一步是保护应用程序中的特定资源。您可以使用 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/authenticate.html" target="_blank" rel="noreferrer"><code>authenticate()</code></a> 函数来实现。此函数接受两个可选形参：</p><ul><li><p>用于认证嵌套路由的 <a href="#provider-name">提供者名称</a>。 下面的代码片段使用名为 <em>auth-basic</em> 的提供者来保护 <code>/login</code> 和 <code>/orders</code> 路由：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    authenticate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-basic&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/login&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/orders&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>用于解析嵌套认证提供者的策略。 此策略由 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-authentication-strategy/index.html" target="_blank" rel="noreferrer"><code>AuthenticationStrategy</code></a> 枚举值表示。</p><p>例如，客户端应为所有使用 <code>AuthenticationStrategy.Required</code> 策略注册的提供者提供认证数据。 在下面的代码片段中，只有通过 <a href="./server-session-auth">session 认证</a> 的用户才能尝试使用 basic 认证访问 <code>/admin</code> 路由：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    authenticate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-session&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, strategy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AuthenticationStrategy.Required) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }    </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        authenticate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-basic&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, strategy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AuthenticationStrategy.Required) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/admin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><blockquote><p>完整示例请参阅 <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/auth-form-session-nested" target="_blank" rel="noreferrer">auth-form-session-nested</a>。</p></blockquote><h3 id="get-principal" tabindex="-1">步骤 5：在路由处理器内部获取 principal <a class="header-anchor" href="#get-principal" aria-label="Permalink to &quot;步骤 5：在路由处理器内部获取 principal {id=&quot;get-principal&quot;}&quot;">​</a></h3><p>认证成功后，您可以使用 <code>call.principal()</code> 函数在路由处理器内部检索已认证的 principal。此函数接受由 <a href="#configure-provider">配置的认证提供者</a> 返回的特定 principal 类型。在以下示例中，<code>call.principal()</code> 用于获取 <code>UserIdPrincipal</code> 并获取已认证用户的名称。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    authenticate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-basic&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, \${call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">principal</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserIdPrincipal</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&gt;()?.name}!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>如果您使用 <a href="./server-session-auth">session 认证</a>，principal 可能是一个存储 session 数据的数据类。 因此，您需要将此数据类传递给 <code>call.principal()</code>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">authenticate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-session&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userSession </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">principal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在 <a href="#authenticate-route">嵌套认证提供者</a> 的情况下，您可以将 <a href="#provider-name">提供者名称</a> 传递给 <code>call.principal()</code> 以获取所需提供者的 principal。</p><p>在下面的示例中，传递了 <code>&quot;auth-session&quot;</code> 值以获取顶层 session 提供者的 principal：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">authenticate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-session&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, strategy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AuthenticationStrategy.Required) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    authenticate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-basic&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, strategy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AuthenticationStrategy.Required) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/admin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userSession </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">principal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-session&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,30))])}const T=y(b,[["render",m]]);export{_ as __pageData,T as default};
