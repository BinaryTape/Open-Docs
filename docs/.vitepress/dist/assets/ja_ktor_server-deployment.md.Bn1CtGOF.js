import{_ as n,C as t,c as s,o as p,j as a,G as r,ag as c,a as o,w as d}from"./chunks/framework.Bksy39di.js";const v=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ja/ktor/server-deployment.md","filePath":"ja/ktor/server-deployment.md","lastUpdated":1755457140000}'),h={name:"ja/ktor/server-deployment.md"};function u(f,e,g,k,m,b){const i=t("show-structure"),l=t("tldr");return p(),s("div",null,[e[1]||(e[1]=a("h1",{id:"デプロイメント",tabindex:"-1"},[o("デプロイメント "),a("a",{class:"header-anchor",href:"#デプロイメント","aria-label":'Permalink to "デプロイメント"'},"​")],-1)),r(i,{for:"chapter",depth:"2"}),r(l,null,{default:d(()=>e[0]||(e[0]=[a("p",null,[a("b",null,"コード例"),o(": "),a("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/deployment-ktor-plugin"}," deployment-ktor-plugin ")],-1)])),_:1}),e[2]||(e[2]=c('<p>このトピックでは、Ktorアプリケーションをデプロイする方法の概要を説明します。</p><blockquote><p>サーバーKtorアプリケーションのデプロイプロセスを簡素化するために、Gradle向けの<a href="https://github.com/ktorio/ktor-build-plugins" target="_blank" rel="noreferrer">Ktor</a>プラグインを使用できます。このプラグインは以下の機能を提供します。</p><ul><li>Fat JARのビルド。</li><li>アプリケーションのDocker化。</li></ul></blockquote><h2 id="ktor-specifics" tabindex="-1">Ktorデプロイの特性 <a class="header-anchor" href="#ktor-specifics" aria-label="Permalink to &quot;Ktorデプロイの特性 {id=&quot;ktor-specifics&quot;}&quot;">​</a></h2><p>サーバーKtorアプリケーションのデプロイプロセスは、以下の特性に依存します。</p><ul><li>アプリケーションを自己完結型パッケージとしてデプロイするか、サーブレットコンテナ内でデプロイするか。</li><li>サーバーを作成および構成するために使用する方法。</li></ul><h3 id="self-contained-vs-servlet" tabindex="-1">自己完結型アプリとサーブレットコンテナ <a class="header-anchor" href="#self-contained-vs-servlet" aria-label="Permalink to &quot;自己完結型アプリとサーブレットコンテナ {id=&quot;self-contained-vs-servlet&quot;}&quot;">​</a></h3><p>Ktorでは、アプリケーション内で直接、目的のネットワーク<a href="./server-engines">エンジン</a>（Netty、Jetty、Tomcatなど）を使用してサーバーを作成および起動できます。この場合、エンジンはアプリケーションの一部です。アプリケーションは、エンジン設定、接続、およびSSLオプションを制御できます。アプリケーションをデプロイするには、Fat JARまたは実行可能JVMアプリケーションとして<a href="#packaging">パッケージング</a>できます。</p><p>上記のアプローチとは対照的に、サーブレットコンテナはアプリケーションのライフサイクルと接続設定を制御する必要があります。Ktorは、アプリケーションの制御をサーブレットコンテナに委譲する特別な<code>ServletApplicationEngine</code>エンジンを提供します。サーブレットコンテナ内にデプロイするには、<a href="./server-war">WARアーカイブ</a>を生成する必要があります。</p><h3 id="code-vs-config" tabindex="-1">設定：コードと設定ファイル <a class="header-anchor" href="#code-vs-config" aria-label="Permalink to &quot;設定：コードと設定ファイル {id=&quot;code-vs-config&quot;}&quot;">​</a></h3><p>自己完結型Ktorアプリケーションのデプロイ設定は、<a href="./server-create-and-configure">サーバーの作成と構成</a>に使用されるアプローチ（コード内での設定、または<a href="./server-configuration-file">設定ファイル</a>の使用）に依存する場合があります。例として、<a href="#publishing">ホスティングプロバイダー</a>は、受信リクエストをリッスンするためのポートの指定を要求する場合があります。この場合、コード内または<code>application.conf</code>/<code>application.yaml</code>でポートを<a href="./server-configuration-file">設定</a>する必要があります。</p><h2 id="packaging" tabindex="-1">パッケージング <a class="header-anchor" href="#packaging" aria-label="Permalink to &quot;パッケージング {id=&quot;packaging&quot;}&quot;">​</a></h2><p>アプリケーションをデプロイする前に、以下のいずれかの方法でパッケージングする必要があります。</p><ul><li><p><strong>Fat JAR</strong></p><p>Fat JARは、すべてのコード依存関係を含む実行可能なJARです。Fat JARをサポートする任意の<a href="#publishing">クラウドサービス</a>にデプロイできます。GraalVM用のネイティブバイナリを生成する場合にもFat JARが必要です。Fat JARを作成するには、Gradle用の<a href="./server-fatjar">Ktor</a>プラグイン、またはMaven用の<a href="./maven-assembly-plugin">Assembly</a>プラグインを使用できます。</p></li><li><p><strong>実行可能JVMアプリケーション</strong></p><p>実行可能JVMアプリケーションは、コード依存関係と生成された起動スクリプトを含むパッケージ化されたアプリケーションです。Gradleの場合、<a href="./server-packaging">Application</a>プラグインを使用してアプリケーションを生成できます。</p></li><li><p><strong>WAR</strong></p><p><a href="./server-war">WARアーカイブ</a>を使用すると、TomcatやJettyなどのサーブレットコンテナ内にアプリケーションをデプロイできます。</p></li><li><p><strong>GraalVM</strong></p><p>Ktorサーバーアプリケーションは、異なるプラットフォーム用のネイティブイメージを持つために<a href="./graalvm">GraalVM</a>を利用できます。</p></li></ul><h2 id="containerizing" tabindex="-1">コンテナ化 <a class="header-anchor" href="#containerizing" aria-label="Permalink to &quot;コンテナ化 {id=&quot;containerizing&quot;}&quot;">​</a></h2><p>アプリケーションをパッケージングした後（例: 実行可能JVMアプリケーションまたはFat JARとして）、このアプリケーションを含む<a href="./docker">Dockerイメージ</a>を準備できます。このイメージは、Kubernetes、Swarm、または必要なクラウドサービスのコンテナインスタンス上でアプリケーションを実行するために使用できます。</p><h2 id="publishing" tabindex="-1">公開 <a class="header-anchor" href="#publishing" aria-label="Permalink to &quot;公開 {id=&quot;publishing&quot;}&quot;">​</a></h2><p>以下のチュートリアルでは、特定のクラウドプロバイダーにKtorアプリケーションをデプロイする方法を示します。</p><ul><li><a href="./google-app-engine">Google App Engine</a></li><li><a href="./heroku">Heroku</a></li><li><a href="./elastic-beanstalk">AWS Elastic Beanstalk</a></li></ul><h2 id="ssl" tabindex="-1">SSL <a class="header-anchor" href="#ssl" aria-label="Permalink to &quot;SSL {id=&quot;ssl&quot;}&quot;">​</a></h2><p>Ktorサーバーがリバースプロキシ（NginxやApacheなど）の背後に配置されている場合、またはサーブレットコンテナ（TomcatやJetty）内で実行されている場合、SSL設定はリバースプロキシまたはサーブレットコンテナによって管理されます。必要に応じて、Java KeyStoreを使用してKtorが<a href="./server-ssl">SSLを直接提供</a>するように設定できます。</p><blockquote><p>Ktorアプリケーションがサーブレットコンテナ内にデプロイされている場合、SSL設定は有効にならないことに注意してください。</p></blockquote>',21))])}const _=n(h,[["render",u]]);export{v as __pageData,_ as default};
