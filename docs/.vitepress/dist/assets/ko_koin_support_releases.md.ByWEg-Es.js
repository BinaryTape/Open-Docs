import{_ as e,c as s,o as a,ag as o}from"./chunks/framework.Bksy39di.js";const r=JSON.parse('{"title":"릴리스 및 API 업그레이드 가이드","description":"","frontmatter":{"title":"릴리스 및 API 업그레이드 가이드","custom_edit_url":null},"headers":[],"relativePath":"ko/koin/support/releases.md","filePath":"ko/koin/support/releases.md","lastUpdated":1750001831000}'),l={name:"ko/koin/support/releases.md"};function n(d,i,t,p,c,k){return a(),s("div",null,i[0]||(i[0]=[o(`<h1 id="릴리스-및-api-업그레이드-가이드" tabindex="-1">릴리스 및 API 업그레이드 가이드 <a class="header-anchor" href="#릴리스-및-api-업그레이드-가이드" aria-label="Permalink to &quot;릴리스 및 API 업그레이드 가이드&quot;">​</a></h1><div class="info custom-block"><p class="custom-block-title">INFO</p><p>이 페이지는 Koin의 모든 주요 릴리스에 대한 포괄적인 개요를 제공하며, 프레임워크의 진화를 자세히 설명하여 업그레이드를 계획하고 호환성을 유지하는 데 도움을 줍니다.</p></div><p>각 버전에 대해 문서는 다음 섹션으로 구성됩니다.</p><ul><li><code>Kotlin</code>: 릴리스에 사용된 Kotlin 버전을 명시하여 언어 호환성을 명확히 하고 최신 Kotlin 기능을 활용할 수 있도록 합니다.</li><li><code>New</code>: 기능성과 개발자 경험을 향상시키는 새롭게 도입된 기능과 개선 사항을 강조합니다.</li><li><code>Experimental</code>: 실험적(experimental)으로 표시된 API 및 기능을 나열합니다. 이들은 활발히 개발 중이며 커뮤니티 피드백에 따라 변경될 수 있습니다.</li><li><code>Deprecated</code>: 더 이상 사용되지 않음(deprecated)으로 표시된 API 및 기능을 식별하며, 권장 대안에 대한 지침을 제공하여 향후 제거에 대비할 수 있도록 돕습니다.</li><li><code>Breaking</code>: 하위 호환성(backward compatibility)을 깨뜨릴 수 있는 변경 사항을 상세히 설명하여 마이그레이션 중 필요한 조정 사항을 인지하도록 합니다.</li></ul><p>이러한 구조화된 접근 방식은 각 릴리스의 점진적인 변경 사항을 명확히 할 뿐만 아니라 Koin 프로젝트의 투명성, 안정성, 지속적인 개선에 대한 우리의 약속을 강화합니다.</p><p>자세한 내용은 <a href="/ko/koinapi-stability">API 안정성 계약</a>을 참조하세요.</p><h2 id="_4-1-1" tabindex="-1">4.1.1 <a class="header-anchor" href="#_4-1-1" aria-label="Permalink to &quot;4.1.1&quot;">​</a></h2><h3 id="new-🎉" tabindex="-1">New 🎉 <a class="header-anchor" href="#new-🎉" aria-label="Permalink to &quot;New 🎉&quot;">​</a></h3><p><code>koin-ktor</code></p><ul><li>통합 - Ktor 3.2 기본 DI 엔진과 통합하기 위한 <code>KtorDIExtension</code>을 제공합니다.</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setupDatabase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(config: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DbConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        provide</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Database</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; { database }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CustomerRepositoryImpl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> database: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Database</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CustomerRepository</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">customerDataModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    koinModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        singleOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CustomerRepositoryImpl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) bind CustomerRepository::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="_4-1-0" tabindex="-1">4.1.0 <a class="header-anchor" href="#_4-1-0" aria-label="Permalink to &quot;4.1.0&quot;">​</a></h2><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Kotlin <code>2.1.20</code> 버전을 사용합니다.</p></div><h3 id="new-🎉-1" tabindex="-1">New 🎉 <a class="header-anchor" href="#new-🎉-1" aria-label="Permalink to &quot;New 🎉&quot;">​</a></h3><p><code>koin-core</code></p><ul><li>설정 - 설정을 래핑하는 데 도움이 되는 <code>KoinConfiguration</code> API</li><li>스코프 - 스코프 범주를 위한 전용 스코프 타입 한정자(<em>Scope Archetype</em>)의 새로운 <em>스코프 아키타입</em>을 도입합니다. 이제 스코프 범주(일명 아키타입)에 대해 인스턴스 확인(resolution)을 수행할 수 있습니다.</li><li>기능 옵션 - Koin 내에서 새로운 기능 동작을 기능 플래그(feature flag)하는 데 도움이 되는 &quot;기능 옵션&quot;입니다. Koin 설정에서 <code>options</code> 블록을 사용하여 옵션을 활성화할 수 있습니다:</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startKoin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // activate a new feature</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        viewModelScopeFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>코어 - <code>ResolutionExtension</code>을 통해 Koin이 외부 시스템이나 리소스에서 확인(resolve)하도록 돕는 새로운 <code>CoreResolver</code>를 도입합니다 (Ktor DI를 연결하는 데 사용됩니다).</li></ul><p><code>koin-android</code></p><ul><li>업그레이드된 라이브러리(<code>androidx.appcompat:appcompat:1.7.0</code>, <code>androidx.activity:activity-ktx:1.10.1</code>)는 최소 SDK 레벨을 14에서 21로 높여야 합니다.</li><li>DSL - Activity/Fragment 내에 스코프를 선언하기 위한 새로운 Koin 모듈 DSL 확장 <code>activityScope</code>, <code>activityRetainedScope</code>, <code>fragmentScope</code>가 추가되었습니다.</li><li>스코프 함수 - 또한 <code>activityScope()</code>, <code>activityRetainedScope()</code> 및 <code>fragmentScope()</code> API 함수는 이제 스코프 아키타입을 트리거합니다.</li></ul><p><code>koin-androidx-compose</code></p><ul><li>Koin Compose Multiplatform 및 모든 Compose 1.8 &amp; Lifecycle 2.9에 맞춰 조정되었습니다.</li></ul><p><code>koin-compose</code></p><ul><li>Compose 1.8 &amp; Lifecycle 2.9에 맞춰 조정되었습니다.</li><li>새로운 함수 - Android Studio 및 IntelliJ에서 병렬 미리보기를 렌더링하는 데 도움이 되는 <code>KoinApplicationPreview</code></li></ul><p><code>koin-compose-viewmodel</code></p><ul><li>상위 Activity를 호스트로 설정할 수 있도록 <code>koinActivityViewModel</code>이 추가되었습니다.</li></ul><p><code>koin-ktor</code></p><ul><li>멀티플랫폼 - 이제 이 모듈은 Kotlin KMP 형식으로 컴파일됩니다. 멀티플랫폼 프로젝트에서 <code>koin-ktor</code>을 타겟팅할 수 있습니다.</li><li>병합 - 이전 koin-ktor3 모듈이 koin-ktor로 병합되었습니다.</li><li>확장 - Ktor 모듈에 직접 결합된 Koin 모듈을 선언할 수 있도록 <code>Application.koinModule { }</code> 및 <code>Application.koinModules()</code>를 도입합니다.</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">customerDataModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    koinModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        singleOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CustomerRepositoryImpl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) bind CustomerRepository::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>스코프 - <code>Module.requestScope</code> - Ktor 요청 스코프 내에서 정의를 선언할 수 있도록 합니다 (<code>scope&lt;RequestScope&gt;</code>를 수동으로 선언하는 것을 피합니다). 주입된 스코프는 또한 생성자에서 <code>ApplicationCall</code>을 주입할 수 있도록 합니다.</li></ul><p><code>koin-core-coroutines</code></p><ul><li>모듈 DSL - 모듈 설정을 하나의 구조로 모으는 데 도움이 되는 새로운 <code>ModuleConfiguration</code>을 도입하여 나중에 더 잘 확인할 수 있도록 합니다.</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    single</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Simple.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ComponentA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lm1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lazyModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    single</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Simple.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ComponentB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> conf </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> moduleConfiguration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    modules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(m1)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    lazyModules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lm1)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>설정 DSL - Koin 설정은 이제 <code>ModuleConfiguration</code>을 사용하여 모듈을 로드할 수 있습니다:</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startKoin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    moduleConfiguration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        modules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(m1)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        lazyModules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lm1)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// or even</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> conf </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> moduleConfiguration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    modules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(m1)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    lazyModules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lm1)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startKoin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    moduleConfiguration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(conf)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>koin-test-coroutines</code></p><ul><li>새로운 코루틴 관련 테스트 API를 도입하기 위해 새로운 <code>koin-test-coroutines</code> Koin 모듈이 추가되었습니다.</li><li>확장 - <code>Verify</code> API를 확장하여 <code>moduleConfiguration</code>으로 Koin 설정을 확인하고, Modules/Lazy Modules 혼합 구성을 확인할 수 있도록 합니다:</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> conf </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> moduleConfiguration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    modules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(m1)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    lazyModules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lm1)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">conf.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">verify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// if you want Android types (koin-android-test)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">conf.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">verify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(extraTypes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> androidTypes)</span></span></code></pre></div><p><code>koin-core-annotations</code></p><ul><li>어노테이션 - <code>@InjectedParam</code> 또는 <code>@Provided</code>는 속성을 주입된 매개변수 또는 동적으로 제공되는 것으로 간주하도록 태그(tag)합니다. 현재는 <code>Verify</code> API에서 사용되지만, 나중에 더 가벼운 DSL 선언에 도움이 될 수 있습니다.</li></ul><h3 id="experimental-🚧" tabindex="-1">Experimental 🚧 <a class="header-anchor" href="#experimental-🚧" aria-label="Permalink to &quot;Experimental 🚧&quot;">​</a></h3><p><code>koin-core</code></p><ul><li>Wasm - Kotlin 2.1.20 UUID 생성 사용</li></ul><p><code>koin-core-viewmodel</code></p><ul><li>DSL - ViewModel 스코프 아키타입에 스코프가 지정된 컴포넌트를 선언하기 위한 모듈 DSL 확장 <code>viewModelScope</code>가 추가되었습니다.</li><li>스코프 함수 - ViewModel을 위한 스코프를 생성하는 함수 <code>viewModelScope()</code>가 추가되었습니다 (ViewModel 클래스에 연결됨). 이 API는 이제 <code>ViewModelScopeAutoCloseable</code>을 사용하여 <code>AutoCloseable</code> API를 활용하여 스코프를 선언하고 닫는 데 도움이 됩니다. 더 이상 수동으로 ViewModel 스코프를 닫을 필요가 없습니다.</li><li>클래스 - 즉시 사용 가능한 ViewModel 스코프 클래스(스코프 생성 및 닫기 처리)를 지원하기 위해 <code>ScopeViewModel</code> 클래스가 업데이트되었습니다.</li><li>기능 옵션 - ViewModel 스코프를 사용한 생성자 ViewModel 주입은 Koin 옵션 <code>viewModelScopeFactory</code> 활성화를 필요로 합니다:</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startKoin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // activate a new ViewModel scope creation</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        viewModelScopeFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// will inject Session from MyScopeViewModel&#39;s scope</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyScopeViewModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> session: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Session</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ViewModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    viewModelOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyScopeViewModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    viewModelScope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        scopedOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Session</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>koin-compose</code></p><ul><li>Compose 함수 - 멀티플랫폼 Compose 진입점을 제안하기 위해 새로운 <code>KoinMultiplatformApplication</code> 함수가 추가되었습니다.</li></ul><p><code>koin-core-viewmodel-navigation</code></p><ul><li>내비게이션 확장 - 내비게이션의 <code>NavbackEntry</code>에서 ViewModel 인스턴스를 재사용하기 위해 <code>sharedViewModel</code>이 추가되었습니다.</li></ul><p><code>koin-test</code></p><ul><li>어노테이션 - Koin 설정 검증 API <code>Verify</code>는 이제 널러블(nullable), 지연(lazy), 리스트 매개변수를 확인하는 데 도움이 됩니다. <code>@InjectedParam</code> 또는 <code>@Provided</code>를 사용하여 속성을 주입된 매개변수 또는 동적으로 제공되는 것으로 간주하도록 태그(tag)하기만 하면 됩니다. 이렇게 하면 <code>Verify</code> API에서 복잡한 선언을 피할 수 있습니다.</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// now detected in Verify</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ComponentB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ComponentA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ComponentBParam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@InjectedParam</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ComponentA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ComponentBProvided</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Provided</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ComponentA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="deprecation-⚠️" tabindex="-1">Deprecation ⚠️ <a class="header-anchor" href="#deprecation-⚠️" aria-label="Permalink to &quot;Deprecation ⚠️&quot;">​</a></h3><p><code>koin-android</code></p><ul><li><code>ScopeViewModel</code>은 이제 <code>koin-core-viewmodel</code>의 <code>ScopeViewModel</code> 클래스 대신 사용되도록 더 이상 사용되지 않습니다.</li></ul><p><code>koin-compose</code></p><ul><li>Koin 컨텍스트가 현재 기본 컨텍스트에서 적절히 준비되므로 Compose 컨텍스트 API는 더 이상 필요하지 않습니다. 다음은 더 이상 사용되지 않으며 제거될 수 있습니다: <code>KoinContext</code></li></ul><p><code>koin-androidx-compose</code></p><ul><li>Koin 컨텍스트가 현재 기본 컨텍스트에서 적절히 준비되므로 Jetpack Compose 컨텍스트 API는 더 이상 필요하지 않습니다. 다음은 더 이상 사용되지 않으며 제거될 수 있습니다: <code>KoinAndroidContext</code></li></ul><p><code>koin-androidx-compose-navigation</code></p><ul><li>라이프사이클 라이브러리 업데이트로 인해 <code>koinNavViewModel</code> 함수는 더 이상 필요하지 않으며, <code>koinViewModel</code>로 대체될 수 있습니다.</li></ul><p><code>koin-core-viewmodel-navigation</code></p><ul><li>라이프사이클 라이브러리 업데이트로 인해 <code>koinNavViewModel</code> 함수는 더 이상 필요하지 않으며, <code>koinViewModel</code>로 대체될 수 있습니다.</li></ul><p><code>koin-ktor</code></p><ul><li>확장 - <code>Application.koin</code>은 이제 <code>Application.koinModules</code> 및 <code>Application.koinModule</code>를 선호하여 더 이상 사용되지 않습니다.</li></ul><h3 id="breaking-💥" tabindex="-1">Breaking 💥 <a class="header-anchor" href="#breaking-💥" aria-label="Permalink to &quot;Breaking 💥&quot;">​</a></h3><p><code>koin-android</code></p><ul><li>모든 이전 상태 ViewModel API는 이제 제거되었습니다: <ul><li><code>stateViewModel()</code>,<code>getStateViewModel()</code>, 대신 <code>viewModel()</code>을 사용하세요.</li><li><code>getSharedStateViewModel()</code>, <code>sharedStateViewModel()</code>, 공유 인스턴스를 위해 대신 <code>viewModel()</code> 또는 <code>activityViewModel()</code>을 사용하세요.</li></ul></li></ul><p><code>koin-compose</code></p><ul><li>이전 Compose API 함수가 제거되었습니다: <ul><li>함수 <code>inject()</code>는 <code>koinInject()</code>를 선호하여 제거되었습니다.</li><li>함수 <code>getViewModel()</code>은 <code>koinViewModel()</code>을 선호하여 제거되었습니다.</li><li>함수 <code>rememberKoinInject()</code>는 <code>koinInject()</code>로 이동되었습니다.</li></ul></li><li>함수 <code>rememberKoinApplication</code>은 <code>@KoinInternalAPI</code>로 표시됩니다.</li></ul><h2 id="_4-0-4" tabindex="-1">4.0.4 <a class="header-anchor" href="#_4-0-4" aria-label="Permalink to &quot;4.0.4&quot;">​</a></h2><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Kotlin <code>2.0.21</code> 버전을 사용합니다.</p></div><p>사용된 모든 라이브러리 버전은 <a href="https://github.com/InsertKoinIO/koin/blob/main/projects/gradle/libs.versions.toml" target="_blank" rel="noreferrer">libs.versions.toml</a>에서 확인할 수 있습니다.</p><h3 id="new-🎉-2" tabindex="-1">New 🎉 <a class="header-anchor" href="#new-🎉-2" aria-label="Permalink to &quot;New 🎉&quot;">​</a></h3><p><code>koin-core</code></p><ul><li><code>KoinPlatformTools.generateId()</code> - 이 새로운 Kotlin 버전과 함께, 새로운 <code>kotlin.uuid.uuid</code> API의 이점을 얻게 됩니다. <code>KoinPlatformTools.generateId()</code> Koin 함수는 이제 이 새로운 API를 사용하여 모든 플랫폼에서 실제 UUID를 생성합니다.</li></ul><p><code>koin-viewmodel</code></p><ul><li>Koin 4.0은 Google/Jetbrains KMP API를 통합하는 새로운 ViewModel DSL 및 API를 도입합니다. 코드베이스 전반의 중복을 피하기 위해, ViewModel API는 이제 <code>koin-core-viewmodel</code> 및 <code>koin-core-viewmodel-navigation</code> 프로젝트에 위치합니다.</li><li>ViewModel DSL을 위한 임포트(import)는 <code>org.koin.core.module.dsl.*</code>입니다.</li></ul><p>주어진 프로젝트의 다음 API들은 이제 안정화되었습니다.</p><p><code>koin-core-coroutines</code> - 모든 API는 이제 안정화되었습니다.</p><ul><li>모든 <code>lazyModules</code></li><li><code>awaitAllStartJobs</code>, <code>onKoinStarted</code>, <code>isAllStartedJobsDone</code></li><li><code>waitAllStartJobs</code>, <code>runOnKoinStarted</code></li><li><code>KoinApplication.coroutinesEngine</code></li><li><code>Module.includes(lazy)</code></li><li><code>lazyModule()</code></li><li><code>KoinPlatformCoroutinesTools</code></li></ul><h3 id="experimental-🚧-1" tabindex="-1">Experimental 🚧 <a class="header-anchor" href="#experimental-🚧-1" aria-label="Permalink to &quot;Experimental 🚧&quot;">​</a></h3><p><code>koin-test</code></p><ul><li><code>ParameterTypeInjection</code> - <code>Verify</code> API를 위한 동적 매개변수 주입 설계를 돕는 새로운 API</li></ul><p><code>koin-androidx-startup</code></p><ul><li><code>koin-androidx-startup</code> - <code>androidx.startup.Initializer</code> API를 사용하여 <code>AndroidX Startup</code>으로 Koin을 시작하는 새로운 기능. <code>koin-androidx-startup</code> 내의 모든 API는 실험적(Experimental)입니다.</li></ul><p><code>koin-compose</code></p><ul><li><code>rememberKoinModules</code> - @Composable 컴포넌트에 따라 Koin 모듈 로드/언로드</li><li><code>rememberKoinScope</code> - @Composable 컴포넌트에 따라 Koin 스코프 로드/언로드</li><li><code>KoinScope</code> - 모든 하위 Composable 자식들을 위해 Koin 스코프 로드</li></ul><h3 id="deprecation-⚠️-1" tabindex="-1">Deprecation ⚠️ <a class="header-anchor" href="#deprecation-⚠️-1" aria-label="Permalink to &quot;Deprecation ⚠️&quot;">​</a></h3><p>다음 API는 더 이상 사용되지 않음(deprecated)으로 지정되었으며, 더 이상 사용해서는 안 됩니다.</p><ul><li><p><code>koin-test</code></p><ul><li><code>checkModules</code>의 모든 API. <code>Verify</code> API로 마이그레이션하세요.</li></ul></li><li><p><code>koin-android</code></p><ul><li><code>koin-core</code>의 새로운 중앙 집중식 DSL을 선호하여 ViewModel DSL</li><li>모든 상태 ViewModel API는 오류 수준에서 더 이상 사용되지 않습니다: <ul><li><code>stateViewModel()</code>, <code>getStateViewModel()</code> 대신 <code>viewModel()</code>을 사용하세요.</li><li><code>getSharedStateViewModel()</code>, <code>sharedStateViewModel()</code> 대신 공유 인스턴스를 위해 <code>viewModel()</code> 또는 <code>activityViewModel()</code>을 사용하세요.</li></ul></li></ul></li></ul><p><code>koin-compose</code></p><ul><li><p>오래된 Compose API 함수는 오류 수준에서 더 이상 사용되지 않습니다:</p><ul><li>함수 <code>inject()</code>는 <code>koinInject()</code>를 선호하여 더 이상 사용되지 않습니다(오류 수준).</li><li>함수 <code>getViewModel()</code>은 <code>koinViewModel()</code>을 선호하여 더 이상 사용되지 않습니다(오류 수준).</li><li>함수 <code>rememberKoinInject()</code>는 <code>koinInject()</code>를 선호하여 더 이상 사용되지 않습니다(오류 수준).</li></ul></li><li><p><code>koin-compose-viewmodel</code></p><ul><li><code>koin-core</code>의 새로운 중앙 집중식 DSL을 선호하여 ViewModel DSL</li><li>함수 <code>koinNavViewModel</code>은 이제 <code>koinViewModel</code>을 선호하여 더 이상 사용되지 않습니다.</li></ul></li></ul><h3 id="breaking-💥-1" tabindex="-1">Breaking 💥 <a class="header-anchor" href="#breaking-💥-1" aria-label="Permalink to &quot;Breaking 💥&quot;">​</a></h3><p>다음 API는 지난 마일스톤에서의 더 이상 사용되지 않음(deprecation)으로 인해 제거되었습니다.</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p><code>@KoinReflectAPI</code>로 주석 처리된 모든 API가 제거되었습니다.</p></div><p><code>koin-core</code></p><ul><li><code>ApplicationAlreadyStartedException</code>이 <code>KoinApplicationAlreadyStartedException</code>으로 이름이 변경되었습니다.</li><li><code>KoinScopeComponent.closeScope()</code>가 제거되었습니다. 내부적으로 더 이상 사용되지 않으므로</li><li>내부 <code>ResolutionContext</code>를 <code>InstanceContext</code>를 대체하도록 이동했습니다.</li><li><code>KoinPlatformTimeTools</code>, <code>Timer</code>, <code>measureDuration</code>이 제거되었으며, 대신 Kotlin Time API를 사용합니다.</li><li><code>KoinContextHandler</code>가 <code>GlobalContext</code>를 선호하여 제거되었습니다.</li></ul><p><code>koin-android</code></p><ul><li>함수 <code>fun Fragment.createScope()</code>가 제거되었습니다.</li><li>ViewModel 팩토리(주로 내부)와 관련된 모든 API가 새로운 내부 구조를 위해 재작업되었습니다.</li></ul><p><code>koin-compose</code></p><ul><li>내부에서 더 이상 사용되지 않으므로 <code>StableParametersDefinition</code>이 제거되었습니다.</li><li>모든 Lazy ViewModel API(오래된 <code>viewModel()</code>)가 제거되었습니다.</li><li>내부적으로 더 이상 사용되지 않으므로 <code>rememberStableParametersDefinition()</code>이 제거되었습니다.</li></ul><h2 id="_3-5-6" tabindex="-1">3.5.6 <a class="header-anchor" href="#_3-5-6" aria-label="Permalink to &quot;3.5.6&quot;">​</a></h2><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Kotlin <code>1.9.22</code> 버전을 사용합니다.</p></div><p>사용된 모든 라이브러리 버전은 <a href="https://github.com/InsertKoinIO/koin/blob/3.5.6/projects/gradle/libs.versions.toml" target="_blank" rel="noreferrer">libs.versions.toml</a>에서 확인할 수 있습니다.</p><h3 id="new-🎉-3" tabindex="-1">New 🎉 <a class="header-anchor" href="#new-🎉-3" aria-label="Permalink to &quot;New 🎉&quot;">​</a></h3><p><code>koin-core</code></p><ul><li><code>KoinContext</code>는 이제 다음을 포함합니다: <ul><li><code>fun loadKoinModules(module: Module, createEagerInstances: Boolean = false)</code></li><li><code>fun loadKoinModules(modules: List&lt;Module&gt;, createEagerInstances: Boolean = false)</code></li></ul></li><li><code>koinApplication()</code> 함수는 이제 여러 형식을 사용합니다: <ul><li><code>koinApplication(createEagerInstances: Boolean = true, appDeclaration: KoinAppDeclaration? = null)</code></li><li><code>koinApplication(appDeclaration: KoinAppDeclaration?)</code></li><li><code>koinApplication(createEagerInstances: Boolean)</code></li></ul></li><li><code>KoinAppDeclaration</code> - 선언 스타일을 여는 데 도움이 됩니다.</li><li><code>KoinPlatformTimeTools</code> - JS를 위해 API Time을 사용합니다.</li><li>iOS - <code>synchronized</code> API - Touchlab Lockable API를 사용합니다.</li></ul><p><code>koin-androidx-compose</code></p><ul><li>새로운 <code>KoinAndroidContext</code> - Android 환경에서 현재 Koin 컨텍스트에 바인딩합니다.</li></ul><p><code>koin-compose</code></p><ul><li>새로운 <code>KoinContext</code> - 현재 기본 컨텍스트로 컨텍스트를 시작합니다.</li></ul><p><code>koin-ktor</code></p><ul><li>이제 Ktor 인스턴스를 위해 격리된 컨텍스트를 사용합니다 (기본 컨텍스트 대신 <code>Application.getKoin()</code> 사용).</li><li>Koin 플러그인은 새로운 모니터링 기능을 도입합니다.</li><li><code>RequestScope</code> - Ktor 요청에 스코프 인스턴스를 허용합니다.</li></ul><h3 id="experimental-🚧-2" tabindex="-1">Experimental 🚧 <a class="header-anchor" href="#experimental-🚧-2" aria-label="Permalink to &quot;Experimental 🚧&quot;">​</a></h3><p><code>koin-android</code></p><ul><li><code>ViewModelScope</code> - ViewModel 스코프를 위한 실험적 API를 도입합니다.</li></ul><p><code>koin-core-coroutines</code> - 백그라운드에서 모듈을 로드하는 새로운 API 도입</p><h3 id="deprecation-⚠️-2" tabindex="-1">Deprecation ⚠️ <a class="header-anchor" href="#deprecation-⚠️-2" aria-label="Permalink to &quot;Deprecation ⚠️&quot;">​</a></h3><p><code>koin-android</code></p><ul><li><code>getLazyViewModelForClass()</code> API는 매우 복잡하며, 기본 전역 컨텍스트를 호출합니다. Android/Fragment API를 고수하는 것을 선호합니다.</li><li><code>resolveViewModelCompat()</code>은 <code>resolveViewModel()</code>을 선호하여 더 이상 사용되지 않습니다.</li></ul><p><code>koin-compose</code></p><ul><li>함수 <code>get()</code>과 <code>inject()</code>는 <code>koinInject()</code>를 선호하여 더 이상 사용되지 않습니다.</li><li>함수 <code>getViewModel()</code>은 <code>koinViewModel()</code>을 선호하여 더 이상 사용되지 않습니다.</li><li>함수 <code>rememberKoinInject()</code>는 <code>koinInject()</code>를 선호하여 더 이상 사용되지 않습니다.</li></ul><h3 id="breaking-💥-2" tabindex="-1">Breaking 💥 <a class="header-anchor" href="#breaking-💥-2" aria-label="Permalink to &quot;Breaking 💥&quot;">​</a></h3><p><code>koin-core</code></p><ul><li><code>Koin.loadModules(modules: List&lt;Module&gt;, allowOverride: Boolean = true, createEagerInstances : Boolean = false)</code>가 <code>Koin.loadModules(modules: List&lt;Module&gt;, allowOverride: Boolean = true)</code>를 대체합니다.</li><li>속성 <code>KoinExtension.koin</code>이 함수 <code>KoinExtension.onRegister()</code>로 이동되었습니다.</li><li>iOS - <code>MutableGlobalContext</code>를 사용하기 위한 <code>internal fun globalContextByMemoryModel(): KoinContext</code></li></ul><p><code>koin-compose</code></p><ul><li>함수 <code>KoinApplication(moduleList: () -&gt; List&lt;Module&gt;, content: @Composable () -&gt; Unit)</code>는 <code>KoinContext</code> 및 <code>KoinAndroidContext</code>를 선호하여 제거되었습니다.</li></ul><h2 id="_3-4-3" tabindex="-1">3.4.3 <a class="header-anchor" href="#_3-4-3" aria-label="Permalink to &quot;3.4.3&quot;">​</a></h2><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Kotlin <code>1.8.21</code> 버전을 사용합니다.</p></div><h3 id="new-🎉-4" tabindex="-1">New 🎉 <a class="header-anchor" href="#new-🎉-4" aria-label="Permalink to &quot;New 🎉&quot;">​</a></h3><p><code>koin-core</code></p><ul><li>Koin을 위한 확장 엔진 작성을 돕는 새로운 ExtensionManager API - <code>ExtensionManager</code> + <code>KoinExtension</code></li><li><code>parameterArrayOf</code> 및 <code>parameterSetOf</code>로 매개변수 API 업데이트</li></ul><p><code>koin-test</code></p><ul><li><code>Verification</code> API - 모듈에서 <code>verify</code>를 실행하는 데 도움이 됩니다.</li></ul><p><code>koin-android</code></p><ul><li>ViewModel 주입을 위한 내부 요소</li><li><code>AndroidScopeComponent.onCloseScope()</code> 함수 콜백 추가</li></ul><p><code>koin-android-test</code></p><ul><li><code>Verification</code> API - 모듈에서 <code>androidVerify()</code>를 실행하는 데 도움이 됩니다.</li></ul><p><code>koin-androidx-compose</code></p><ul><li>새로운 <code>get()</code></li><li>새로운 <code>getViewModel()</code></li><li>새로운 스코프 <code>KoinActivityScope</code>, <code>KoinFragmentScope</code></li></ul><p><code>koin-androidx-compose-navigation</code> - 내비게이션을 위한 새로운 모듈</p><ul><li>새로운 <code>koinNavViewModel()</code></li></ul><p><code>koin-compose</code> - Compose를 위한 새로운 멀티플랫폼 API</p><ul><li><code>koinInject</code>, <code>rememberKoinInject</code></li><li><code>KoinApplication</code></li></ul><h3 id="experimental-🚧-3" tabindex="-1">Experimental 🚧 <a class="header-anchor" href="#experimental-🚧-3" aria-label="Permalink to &quot;Experimental 🚧&quot;">​</a></h3><p><code>koin-compose</code> - Compose를 위한 새로운 실험적 멀티플랫폼 API</p><ul><li><code>rememberKoinModules</code></li><li><code>KoinScope</code>, <code>rememberKoinScope</code></li></ul><h3 id="deprecation-⚠️-3" tabindex="-1">Deprecation ⚠️ <a class="header-anchor" href="#deprecation-⚠️-3" aria-label="Permalink to &quot;Deprecation ⚠️&quot;">​</a></h3><p><code>koin-compose</code></p><ul><li>지연(Lazy) 함수 사용을 피하면서 <code>inject()</code> 사용을 대체하는 함수 <code>get()</code></li><li>지연(Lazy) 함수 사용을 피하면서 <code>viewModel()</code> 함수를 대체하는 함수 <code>getViewModel()</code></li></ul><h3 id="breaking-💥-3" tabindex="-1">Breaking 💥 <a class="header-anchor" href="#breaking-💥-3" aria-label="Permalink to &quot;Breaking 💥&quot;">​</a></h3><p><code>koin-android</code></p><ul><li><code>LifecycleScopeDelegate</code>는 이제 제거되었습니다.</li></ul><p><code>koin-androidx-compose</code></p><ul><li><code>koinViewModel</code>을 선호하여 <code>getStateViewModel</code> 제거</li></ul>`,157)]))}const E=e(l,[["render",n]]);export{r as __pageData,E as default};
