import{_ as o,a,b as i}from"./chunks/publish-your-application-on-web.Dq0Z4N4Z.js";import{_ as t,c as r,o as l,ag as s}from"./chunks/framework.Bksy39di.js";const f=JSON.parse('{"title":"アプリケーションを公開する","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kmp/multiplatform-publish-apps.md","filePath":"ja/kmp/multiplatform-publish-apps.md","lastUpdated":1755516278000}'),n={name:"ja/kmp/multiplatform-publish-apps.md"};function p(d,e,c,u,h,g){return l(),r("div",null,e[0]||(e[0]=[s('<h1 id="アプリケーションを公開する" tabindex="-1">アプリケーションを公開する <a class="header-anchor" href="#アプリケーションを公開する" aria-label="Permalink to &quot;アプリケーションを公開する&quot;">​</a></h1><p>アプリのリリース準備が整ったら、公開してユーザーに届けましょう。</p><p>モバイルアプリの場合、各プラットフォームで複数のストアが利用可能ですが、この記事では公式ストアに焦点を当てます。<a href="https://play.google.com/store" target="_blank" rel="noreferrer">Google Play ストア</a>と<a href="https://www.apple.com/ios/app-store/" target="_blank" rel="noreferrer">Apple App Store</a>です。Webアプリの場合、<a href="https://pages.github.com/" target="_blank" rel="noreferrer">GitHub Pages</a>を使用します。</p><p>Kotlin Multiplatformアプリケーションを公開するための準備方法について学び、このプロセスで特に注意すべき点を強調します。</p><h2 id="androidアプリ" tabindex="-1">Androidアプリ <a class="header-anchor" href="#androidアプリ" aria-label="Permalink to &quot;Androidアプリ&quot;">​</a></h2><p><a href="https://developer.android.com/kotlin" target="_blank" rel="noreferrer">KotlinはAndroid開発の主要言語</a>であるため、Kotlin MultiplatformがプロジェクトのコンパイルやAndroidアプリのビルドに明確な影響を与えることはありません。共有モジュールから生成されるAndroidライブラリとAndroidアプリ自体は、いずれも一般的なAndroid Gradleモジュールであり、他のAndroidライブラリやアプリと何ら変わりありません。したがって、Kotlin MultiplatformプロジェクトからAndroidアプリを公開するプロセスは、<a href="https://developer.google.com/studio/publish" target="_blank" rel="noreferrer">Android開発者ドキュメント</a>に記載されている通常のプロセスと変わりません。</p><h2 id="iosアプリ" tabindex="-1">iOSアプリ <a class="header-anchor" href="#iosアプリ" aria-label="Permalink to &quot;iOSアプリ&quot;">​</a></h2><p>Kotlin MultiplatformプロジェクトのiOSアプリは一般的なXcodeプロジェクトからビルドされるため、公開に関わる主要な段階は、<a href="https://developer.apple.com/ios/submit/" target="_blank" rel="noreferrer">iOS開発者ドキュメント</a>に記載されているものと同じです。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>App StoreポリシーのSpring&#39;24での変更により、プライバシーマニフェストの不足または不完全な場合、アプリに警告が表示されたり、拒否されたりする可能性があります。 詳細および回避策、特にKotlin Multiplatformアプリについては、<a href="https://kotlinlang.org/docs/apple-privacy-manifest.html" target="_blank" rel="noreferrer">iOSアプリのプライバシーマニフェスト</a>を参照してください。</p></div><p>Kotlin Multiplatformプロジェクトに特有なのは、共有Kotlinモジュールをフレームワークにコンパイルし、それをXcodeプロジェクトにリンクすることです。 一般的に、共有モジュールとXcodeプロジェクト間の統合は、<a href="https://plugins.jetbrains.com/plugin/14936-kotlin-multiplatform-mobile" target="_blank" rel="noreferrer">Android Studio用Kotlin Multiplatformプラグイン</a>によって自動的に行われます。 ただし、プラグインを使用しない場合は、XcodeでiOSプロジェクトをビルドおよびバンドルする際に以下の点に留意してください。</p><ul><li>共有Kotlinライブラリはネイティブフレームワークにコンパイルされます。</li><li>特定のプラットフォーム用にコンパイルされたフレームワークをiOSアプリプロジェクトに接続する必要があります。</li><li>Xcodeプロジェクト設定で、ビルドシステムが検索するフレームワークへのパスを指定します。</li><li>プロジェクトをビルドした後、アプリを起動してテストし、ランタイムでフレームワークを使用する際に問題がないことを確認する必要があります。</li></ul><p>共有KotlinモジュールをiOSプロジェクトに接続するには、2つの方法があります。</p><ul><li><a href="./multiplatform-cocoapods-overview">Kotlin CocoaPods Gradleプラグイン</a>を使用します。これにより、ネイティブターゲットを持つマルチプラットフォームプロジェクトをiOSプロジェクト内でCocoaPodsの依存関係として使用できます。</li><li>マルチプラットフォームプロジェクトを手動で設定してiOSフレームワークを作成し、Xcodeプロジェクトでその最新バージョンを取得するようにします。この設定は、通常、Kotlin MultiplatformウィザードまたはAndroid Studio用Kotlin Multiplatformプラグインが行います。<a href="./multiplatform-integrate-in-existing-app#configure-the-ios-project-to-use-a-kmp-framework">フレームワークをiOSプロジェクトに接続する</a>を参照して、Xcodeでフレームワークを直接追加する方法を学んでください。</li></ul><h3 id="iosアプリケーションの構成" tabindex="-1">iOSアプリケーションの構成 <a class="header-anchor" href="#iosアプリケーションの構成" aria-label="Permalink to &quot;iOSアプリケーションの構成&quot;">​</a></h3><p>Xcodeを使用せずに、結果として生成されるアプリに影響を与える基本的なプロパティを構成できます。</p><h4 id="バンドルid" tabindex="-1">バンドルID <a class="header-anchor" href="#バンドルid" aria-label="Permalink to &quot;バンドルID&quot;">​</a></h4><p><a href="https://developer.apple.com/documentation/bundleresources/information_property_list/cfbundleidentifier#discussion" target="_blank" rel="noreferrer">バンドルID</a>は、オペレーティングシステムでアプリを一意に識別します。これを変更するには、Android Studioで<code>iosApp/Configuration/Config.xcconfig</code>ファイルを開き、<code>BUNDLE_ID</code>を更新します。</p><h4 id="アプリ名" tabindex="-1">アプリ名 <a class="header-anchor" href="#アプリ名" aria-label="Permalink to &quot;アプリ名&quot;">​</a></h4><p>アプリ名は、ターゲットの実行可能ファイルおよびアプリケーションバンドル名を設定します。アプリ名を変更するには、次の手順を実行します。</p><ul><li>Android Studioでプロジェクトをまだ開いていない場合は、<code>iosApp/Configuration/Config.xcconfig</code>ファイル内の<code>APP_NAME</code>オプションを任意のテキストエディタで直接変更できます。</li><li>Android Studioでプロジェクトをすでに開いている場合は、次の手順を実行します。</li></ul><ol><li>プロジェクトを閉じます。</li><li>任意のテキストエディタで、<code>iosApp/Configuration/Config.xcconfig</code>ファイル内の<code>APP_NAME</code>オプションを変更します。</li><li>Android Studioでプロジェクトを再度開きます。</li></ol><p>他の設定を構成する必要がある場合は、Xcodeを使用します。Android Studioでプロジェクトを開いた後、Xcodeで<code>iosApp/iosApp.xcworkspace</code>ファイルを開き、そこで変更を行います。</p><h3 id="クラッシュレポートのシンボリケーション" tabindex="-1">クラッシュレポートのシンボリケーション <a class="header-anchor" href="#クラッシュレポートのシンボリケーション" aria-label="Permalink to &quot;クラッシュレポートのシンボリケーション&quot;">​</a></h3><p>開発者がアプリを改善できるように、iOSはアプリのクラッシュを分析する手段を提供しています。詳細なクラッシュ分析のために、クラッシュレポート内のメモリアドレスと、関数や行番号などのソースコード内の場所を照合する特殊なデバッグシンボル（<code>.dSYM</code>）ファイルを使用します。</p><p>デフォルトでは、共有Kotlinモジュールから生成されるiOSフレームワークのリリースバージョンには、付随する<code>.dSYM</code>ファイルがあります。これは、共有モジュールのコードで発生するクラッシュを分析するのに役立ちます。</p><p>クラッシュレポートのシンボリケーションに関する詳細については、<a href="https://kotlinlang.org/docs/native-debugging.html#debug-ios-applications" target="_blank" rel="noreferrer">Kotlin/Nativeドキュメント</a>を参照してください。</p><h2 id="webアプリ" tabindex="-1">Webアプリ <a class="header-anchor" href="#webアプリ" aria-label="Permalink to &quot;Webアプリ&quot;">​</a></h2><p>Webアプリケーションを公開するには、コンパイルされたファイルとアプリケーションを構成するリソースを含む成果物を作成します。これらの成果物は、GitHub PagesのようなWebホスティングプラットフォームにアプリケーションをデプロイするために必要です。</p><h3 id="成果物の生成" tabindex="-1">成果物の生成 <a class="header-anchor" href="#成果物の生成" aria-label="Permalink to &quot;成果物の生成&quot;">​</a></h3><p><strong>wasmJsBrowserDistribution</strong>タスクを実行するための実行構成を作成します。</p><ol><li><strong>Run | Edit Configurations</strong>メニュー項目を選択します。</li><li>プラスボタンをクリックし、ドロップダウンリストから<strong>Gradle</strong>を選択します。</li><li><strong>Tasks and arguments</strong>フィールドに、次のコマンドを貼り付けます。</li></ol><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wasmJsBrowserDistribution</span></span></code></pre></div><ol start="4"><li><strong>OK</strong>をクリックします。</li></ol><p>これで、この構成を使用してタスクを実行できます。</p><p><img src="'+o+'" alt="Run the Wasm distribution task" width="350"></p><p>タスクが完了すると、生成された成果物は<code>composeApp/build/dist/wasmJs/productionExecutable</code>ディレクトリにあります。</p><p><img src="'+a+'" alt="Artifacts directory" width="400"></p><h3 id="github-pagesでアプリケーションを公開する" tabindex="-1">GitHub Pagesでアプリケーションを公開する <a class="header-anchor" href="#github-pagesでアプリケーションを公開する" aria-label="Permalink to &quot;GitHub Pagesでアプリケーションを公開する&quot;">​</a></h3><p>成果物が準備できたら、Webホスティングプラットフォームにアプリケーションをデプロイできます。</p><ol><li><code>productionExecutable</code>ディレクトリの内容を、サイトを作成したいリポジトリにコピーします。</li><li><a href="https://docs.github.com/en/pages/getting-started-with-github-pages/creating-a-github-pages-site#creating-your-site" target="_blank" rel="noreferrer">サイトの作成</a>に関するGitHubの手順に従います。</li></ol><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>GitHubに変更をプッシュした後、サイトの変更が公開されるまでに最大10分かかる場合があります。</p></div><ol start="3"><li>ブラウザで、GitHub Pagesドメインに移動します。</li></ol><p><img src="'+i+'" alt="Navigate to GitHub pages" width="650"></p><p>おめでとうございます！GitHub Pagesに成果物を公開しました。</p><h3 id="webアプリケーションのデバッグ" tabindex="-1">Webアプリケーションのデバッグ <a class="header-anchor" href="#webアプリケーションのデバッグ" aria-label="Permalink to &quot;Webアプリケーションのデバッグ&quot;">​</a></h3><p>Webアプリケーションは、追加の設定なしでブラウザでそのままデバッグできます。ブラウザでのデバッグ方法については、Kotlinドキュメントの<a href="https://kotlinlang.org/docs/wasm-debugging.html#debug-in-your-browser" target="_blank" rel="noreferrer">ブラウザでのデバッグ</a>ガイドを参照してください。</p>',46)]))}const k=t(n,[["render",p]]);export{f as __pageData,k as default};
