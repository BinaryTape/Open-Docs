import{_ as e,c as t,o as r,ag as l}from"./chunks/framework.Bksy39di.js";const u=JSON.parse('{"title":"Kotlin 1.6 互換性ガイド","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/compatibility-guide-16.md","filePath":"ja/kotlin/compatibility-guide-16.md","lastUpdated":1754307826000}'),n={name:"ja/kotlin/compatibility-guide-16.md"};function a(i,o,s,c,p,d){return r(),t("div",null,o[0]||(o[0]=[l('<h1 id="kotlin-1-6-互換性ガイド" tabindex="-1">Kotlin 1.6 互換性ガイド <a class="header-anchor" href="#kotlin-1-6-互換性ガイド" aria-label="Permalink to &quot;Kotlin 1.6 互換性ガイド&quot;">​</a></h1><p>_<a href="/ja/kotlin/kotlin-evolution-principles">言語の現代性を保つ</a><em>ことと、</em><a href="/ja/kotlin/kotlin-evolution-principles">快適なアップデート</a>_は、Kotlinの言語設計における基本的な原則です。前者は、言語の進化を妨げる構造は削除されるべきであると述べており、後者は、コードの移行が可能な限りスムーズになるように、この削除が事前に適切に伝えられるべきであると述べています。</p><p>ほとんどの言語の変更は、アップデートの変更履歴やコンパイラの警告など、他のチャネルですでに発表されていますが、このドキュメントはそれらすべてをまとめ、Kotlin 1.5からKotlin 1.6への移行のための完全なリファレンスを提供します。</p><h2 id="基本的な用語" tabindex="-1">基本的な用語 <a class="header-anchor" href="#基本的な用語" aria-label="Permalink to &quot;基本的な用語&quot;">​</a></h2><p>このドキュメントでは、いくつかの種類の互換性について説明します。</p><ul><li><em>ソース</em>: ソース非互換の変更とは、以前は（エラーや警告なしで）正常にコンパイルされていたコードが、コンパイルされなくなる変更のことです。</li><li><em>バイナリ</em>: 2つのバイナリ成果物がバイナリ互換であるとは、それらを交換してもロードまたはリンクのエラーが発生しない場合のことです。</li><li><em>振る舞い</em>: 同じプログラムが変更適用前後で異なる振る舞いを示す場合、その変更は振る舞い非互換であると言われます。</li></ul><p>これらの定義は、純粋なKotlinに対してのみ与えられていることに注意してください。他の言語の視点からのKotlinコードの互換性（例えばJavaから見た場合）は、このドキュメントの範囲外です。</p><h2 id="言語" tabindex="-1">言語 <a class="header-anchor" href="#言語" aria-label="Permalink to &quot;言語&quot;">​</a></h2><h3 id="when文がenum、sealed、およびbooleanをsubjectとする場合に、デフォルトで網羅的になるようにする" tabindex="-1">when文がenum、sealed、およびBooleanをsubjectとする場合に、デフォルトで網羅的になるようにする <a class="header-anchor" href="#when文がenum、sealed、およびbooleanをsubjectとする場合に、デフォルトで網羅的になるようにする" aria-label="Permalink to &quot;when文がenum、sealed、およびBooleanをsubjectとする場合に、デフォルトで網羅的になるようにする&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-47709" target="_blank" rel="noreferrer">KT-47709</a></p><p><strong>コンポーネント</strong>: コア言語</p><p><strong>非互換な変更の種類</strong>: ソース</p><p><strong>概要</strong>: Kotlin 1.6では、enum、sealed、またはBooleanをsubjectとする<code>when</code>文が非網羅的である場合に警告が表示されます。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.6.0: enum、sealed、またはBooleanをsubjectとする<code>when</code>文が非網羅的である場合に警告を導入（プログレッシブモードではエラー）</li><li>1.7.0: この警告をエラーに引き上げる</li></ul></blockquote><h3 id="subjectを持つwhenにおける紛らわしい文法を非推奨にする" tabindex="-1">subjectを持つwhenにおける紛らわしい文法を非推奨にする <a class="header-anchor" href="#subjectを持つwhenにおける紛らわしい文法を非推奨にする" aria-label="Permalink to &quot;subjectを持つwhenにおける紛らわしい文法を非推奨にする&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-48385" target="_blank" rel="noreferrer">KT-48385</a></p><p><strong>コンポーネント</strong>: コア言語</p><p><strong>非互換な変更の種類</strong>: ソース</p><p><strong>概要</strong>: Kotlin 1.6では、<code>when</code>条件式におけるいくつかの紛らわしい文法構造が非推奨になります。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.6.20: 影響を受ける式に対して非推奨の警告を導入</li><li>1.8.0: この警告をエラーに引き上げる</li><li><blockquote><p>= 1.8: 非推奨になった構造の一部を新しい言語機能のために再利用する</p></blockquote></li></ul></blockquote><h3 id="コンパニオンオブジェクトとネストされたオブジェクトのスーパーコンストラクタ呼び出しにおけるクラスメンバーへのアクセスを禁止する" tabindex="-1">コンパニオンオブジェクトとネストされたオブジェクトのスーパーコンストラクタ呼び出しにおけるクラスメンバーへのアクセスを禁止する <a class="header-anchor" href="#コンパニオンオブジェクトとネストされたオブジェクトのスーパーコンストラクタ呼び出しにおけるクラスメンバーへのアクセスを禁止する" aria-label="Permalink to &quot;コンパニオンオブジェクトとネストされたオブジェクトのスーパーコンストラクタ呼び出しにおけるクラスメンバーへのアクセスを禁止する&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-25289" target="_blank" rel="noreferrer">KT-25289</a></p><p><strong>コンポーネント</strong>: コア言語</p><p><strong>非互換な変更の種類</strong>: ソース</p><p><strong>概要</strong>: Kotlin 1.6では、コンパニオンオブジェクトおよび通常のオブジェクトのスーパーコンストラクタ呼び出しの引数において、それらの引数のレシーバが包含する宣言を参照している場合にエラーが報告されます。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.5.20: 問題のある引数に対して警告を導入</li><li>1.6.0: この警告をエラーに引き上げる。 <code>-XXLanguage:-ProhibitSelfCallsInNestedObjects</code> を使用して一時的に1.6より前の振る舞いに戻すことができます。</li></ul></blockquote><h3 id="型のnull許容性強化の改善" tabindex="-1">型のnull許容性強化の改善 <a class="header-anchor" href="#型のnull許容性強化の改善" aria-label="Permalink to &quot;型のnull許容性強化の改善&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-48623" target="_blank" rel="noreferrer">KT-48623</a></p><p><strong>コンポーネント</strong>: Kotlin/JVM</p><p><strong>非互換な変更の種類</strong>: ソース</p><p><strong>概要</strong>: Kotlin 1.7では、Javaコードにおける型のnull許容性アノテーションの読み込みと解釈方法が変更されます。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.4.30: より厳密な型のnull許容性がエラーにつながる可能性があるケースで警告を導入</li><li>1.7.0: Java型のより厳密なnull許容性を推論する。 <code>-XXLanguage:-TypeEnhancementImprovementsInStrictMode</code> を使用して一時的に1.7より前の振る舞いに戻すことができます。</li></ul></blockquote><h3 id="異なる数値型間の暗黙的な型変換を禁止する" tabindex="-1">異なる数値型間の暗黙的な型変換を禁止する <a class="header-anchor" href="#異なる数値型間の暗黙的な型変換を禁止する" aria-label="Permalink to &quot;異なる数値型間の暗黙的な型変換を禁止する&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-48645" target="_blank" rel="noreferrer">KT-48645</a></p><p><strong>コンポーネント</strong>: Kotlin/JVM</p><p><strong>非互換な変更の種類</strong>: 振る舞い</p><p><strong>概要</strong>: Kotlinでは、数値がセマンティックにその型へのダウンキャストのみが必要な場合に、プリミティブ数値型への自動変換を避けるようになります。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>&lt; 1.5.30: 影響を受けるすべてのケースでの以前の振る舞い</li><li>1.5.30: 生成されたプロパティデリゲートアクセサにおけるダウンキャストの振る舞いを修正。 <code>-Xuse-old-backend</code> を使用して一時的に1.5.30修正以前の振る舞いに戻すことができます。</li><li><blockquote><p>= 1.6.20: その他の影響を受けるケースにおけるダウンキャストの振る舞いを修正</p></blockquote></li></ul></blockquote><h3 id="コンテナアノテーションがjlsに違反する繰り返し可能なアノテーションクラスの宣言を禁止する" tabindex="-1">コンテナアノテーションがJLSに違反する繰り返し可能なアノテーションクラスの宣言を禁止する <a class="header-anchor" href="#コンテナアノテーションがjlsに違反する繰り返し可能なアノテーションクラスの宣言を禁止する" aria-label="Permalink to &quot;コンテナアノテーションがJLSに違反する繰り返し可能なアノテーションクラスの宣言を禁止する&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-47928" target="_blank" rel="noreferrer">KT-47928</a></p><p><strong>コンポーネント</strong>: Kotlin/JVM</p><p><strong>非互換な変更の種類</strong>: ソース</p><p><strong>概要</strong>: Kotlin 1.6では、繰り返し可能なアノテーションのコンテナアノテーションが<a href="https://docs.oracle.com/javase/specs/jls/se16/html/jls-9.html#jls-9.6.3" target="_blank" rel="noreferrer">JLS 9.6.3</a>と同じ要件（配列型の値メソッド、保持ポリシー、およびターゲット）を満たしているかどうかがチェックされます。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.5.30: JLS要件に違反する繰り返し可能なコンテナアノテーションの宣言に対して警告を導入（プログレッシブモードではエラー）</li><li>1.6.0: この警告をエラーに引き上げる。 <code>-XXLanguage:-RepeatableAnnotationContainerConstraints</code> を使用して一時的にエラー報告を無効にすることができます。</li></ul></blockquote><h3 id="繰り返し可能なアノテーションクラス内でのcontainerという名前のネストされたクラスの宣言を禁止する" tabindex="-1">繰り返し可能なアノテーションクラス内での<code>Container</code>という名前のネストされたクラスの宣言を禁止する <a class="header-anchor" href="#繰り返し可能なアノテーションクラス内でのcontainerという名前のネストされたクラスの宣言を禁止する" aria-label="Permalink to &quot;繰り返し可能なアノテーションクラス内での`Container`という名前のネストされたクラスの宣言を禁止する&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-47971" target="_blank" rel="noreferrer">KT-47971</a></p><p><strong>コンポーネント</strong>: Kotlin/JVM</p><p><strong>非互換な変更の種類</strong>: ソース</p><p><strong>概要</strong>: Kotlin 1.6では、Kotlinで宣言された繰り返し可能なアノテーションが、事前定義された<code>Container</code>という名前のネストされたクラスを持たないことがチェックされます。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.5.30: Kotlinの繰り返し可能なアノテーションクラス内の<code>Container</code>という名前のネストされたクラスに対して警告を導入（プログレッシブモードではエラー）</li><li>1.6.0: この警告をエラーに引き上げる。 <code>-XXLanguage:-RepeatableAnnotationContainerConstraints</code> を使用して一時的にエラー報告を無効にすることができます。</li></ul></blockquote><h3 id="プライマリコンストラクタ内のインターフェースプロパティをオーバーライドするプロパティに対する-jvmfieldの使用を禁止する" tabindex="-1">プライマリコンストラクタ内のインターフェースプロパティをオーバーライドするプロパティに対する<code>@JvmField</code>の使用を禁止する <a class="header-anchor" href="#プライマリコンストラクタ内のインターフェースプロパティをオーバーライドするプロパティに対する-jvmfieldの使用を禁止する" aria-label="Permalink to &quot;プライマリコンストラクタ内のインターフェースプロパティをオーバーライドするプロパティに対する`@JvmField`の使用を禁止する&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-32753" target="_blank" rel="noreferrer">KT-32753</a></p><p><strong>コンポーネント</strong>: Kotlin/JVM</p><p><strong>非互換な変更の種類</strong>: ソース</p><p><strong>概要</strong>: Kotlin 1.6では、プライマリコンストラクタで宣言され、インターフェースプロパティをオーバーライドするプロパティに<code>@JvmField</code>アノテーションを付けることが禁止されます。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.5.20: プライマリコンストラクタ内のそのようなプロパティに対する<code>@JvmField</code>アノテーションに警告を導入</li><li>1.6.0: この警告をエラーに引き上げる。 <code>-XXLanguage:-ProhibitJvmFieldOnOverrideFromInterfaceInPrimaryConstructor</code> を使用して一時的にエラー報告を無効にすることができます。</li></ul></blockquote><h3 id="コンパイラオプション-xjvm-defaultのenableモードとcompatibilityモードを非推奨にする" tabindex="-1">コンパイラオプション<code>-Xjvm-default</code>の<code>enable</code>モードと<code>compatibility</code>モードを非推奨にする <a class="header-anchor" href="#コンパイラオプション-xjvm-defaultのenableモードとcompatibilityモードを非推奨にする" aria-label="Permalink to &quot;コンパイラオプション`-Xjvm-default`の`enable`モードと`compatibility`モードを非推奨にする&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-46329" target="_blank" rel="noreferrer">KT-46329</a></p><p><strong>コンポーネント</strong>: Kotlin/JVM</p><p><strong>非互換な変更の種類</strong>: ソース</p><p><strong>概要</strong>: Kotlin 1.6.20では、<code>-Xjvm-default</code>コンパイラオプションの<code>enable</code>モードと<code>compatibility</code>モードの使用について警告が表示されます。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.6.20: <code>-Xjvm-default</code>コンパイラオプションの<code>enable</code>モードと<code>compatibility</code>モードに警告を導入</li><li><blockquote><p>= 1.8.0: この警告をエラーに引き上げる</p></blockquote></li></ul></blockquote><h3 id="public-abiインライン関数からのスーパー呼び出しを禁止する" tabindex="-1">public-abiインライン関数からのスーパー呼び出しを禁止する <a class="header-anchor" href="#public-abiインライン関数からのスーパー呼び出しを禁止する" aria-label="Permalink to &quot;public-abiインライン関数からのスーパー呼び出しを禁止する&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-45379" target="_blank" rel="noreferrer">KT-45379</a></p><p><strong>コンポーネント</strong>: コア言語</p><p><strong>非互換な変更の種類</strong>: ソース</p><p><strong>概要</strong>: Kotlin 1.6では、publicまたはprotectedなインライン関数およびプロパティから<code>super</code>修飾子を持つ関数を呼び出すことが禁止されます。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.5.0: publicまたはprotectedなインライン関数またはプロパティアクセサからのスーパー呼び出しに警告を導入</li><li>1.6.0: この警告をエラーに引き上げる。 <code>-XXLanguage:-ProhibitSuperCallsFromPublicInline</code> を使用して一時的にエラー報告を無効にすることができます。</li></ul></blockquote><h3 id="publicインライン関数からのprotectedコンストラクタ呼び出しを禁止する" tabindex="-1">publicインライン関数からのprotectedコンストラクタ呼び出しを禁止する <a class="header-anchor" href="#publicインライン関数からのprotectedコンストラクタ呼び出しを禁止する" aria-label="Permalink to &quot;publicインライン関数からのprotectedコンストラクタ呼び出しを禁止する&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-48860" target="_blank" rel="noreferrer">KT-48860</a></p><p><strong>コンポーネント</strong>: コア言語</p><p><strong>非互換な変更の種類</strong>: ソース</p><p><strong>概要</strong>: Kotlin 1.6では、publicまたはprotectedなインライン関数およびプロパティからprotectedコンストラクタを呼び出すことが禁止されます。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.4.30: publicまたはprotectedなインライン関数またはプロパティアクセサからのprotectedコンストラクタ呼び出しに警告を導入</li><li>1.6.0: この警告をエラーに引き上げる。 <code>-XXLanguage:-ProhibitProtectedConstructorCallFromPublicInline</code> を使用して一時的にエラー報告を無効にすることができます。</li></ul></blockquote><h3 id="ファイル内プライベート型からのプライベートネスト型のエクスポートを禁止する" tabindex="-1">ファイル内プライベート型からのプライベートネスト型のエクスポートを禁止する <a class="header-anchor" href="#ファイル内プライベート型からのプライベートネスト型のエクスポートを禁止する" aria-label="Permalink to &quot;ファイル内プライベート型からのプライベートネスト型のエクスポートを禁止する&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-20094" target="_blank" rel="noreferrer">KT-20094</a></p><p><strong>コンポーネント</strong>: コア言語</p><p><strong>非互換な変更の種類</strong>: ソース</p><p><strong>概要</strong>: Kotlin 1.6では、ファイル内プライベート型からのプライベートネスト型および内部クラスのエクスポートが禁止されます。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.5.0: ファイル内プライベート型からエクスポートされるプライベート型に警告を導入</li><li>1.6.0: この警告をエラーに引き上げる。 <code>-XXLanguage:-PrivateInFileEffectiveVisibility</code> を使用して一時的にエラー報告を無効にすることができます。</li></ul></blockquote><h3 id="型に対するアノテーションの場合、いくつかのケースでアノテーションのターゲットが分析されない" tabindex="-1">型に対するアノテーションの場合、いくつかのケースでアノテーションのターゲットが分析されない <a class="header-anchor" href="#型に対するアノテーションの場合、いくつかのケースでアノテーションのターゲットが分析されない" aria-label="Permalink to &quot;型に対するアノテーションの場合、いくつかのケースでアノテーションのターゲットが分析されない&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-28449" target="_blank" rel="noreferrer">KT-28449</a></p><p><strong>コンポーネント</strong>: コア言語</p><p><strong>非互換な変更の種類</strong>: ソース</p><p><strong>概要</strong>: Kotlin 1.6では、型に適用すべきではない型に対するアノテーションを許可しなくなります。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.5.20: プログレッシブモードでエラーを導入</li><li>1.6.0: エラーを導入。 <code>-XXLanguage:-ProperCheckAnnotationsTargetInTypeUsePositions</code> を使用して一時的にエラー報告を無効にすることができます。</li></ul></blockquote><h3 id="末尾ラムダを持つsuspendという名前の関数呼び出しを禁止する" tabindex="-1">末尾ラムダを持つ<code>suspend</code>という名前の関数呼び出しを禁止する <a class="header-anchor" href="#末尾ラムダを持つsuspendという名前の関数呼び出しを禁止する" aria-label="Permalink to &quot;末尾ラムダを持つ`suspend`という名前の関数呼び出しを禁止する&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-22562" target="_blank" rel="noreferrer">KT-22562</a></p><p><strong>コンポーネント</strong>: コア言語</p><p><strong>非互換な変更の種類</strong>: ソース</p><p><strong>概要</strong>: Kotlin 1.6では、末尾ラムダとして渡される関数型の単一引数を持つ<code>suspend</code>という名前の関数を呼び出すことを許可しなくなります。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.3.0: そのような関数呼び出しに警告を導入</li><li>1.6.0: この警告をエラーに引き上げる</li><li><blockquote><p>= 1.7.0: 言語の文法に変更を加え、<code>{</code>の前の<code>suspend</code>がキーワードとしてパースされるようにする</p></blockquote></li></ul></blockquote><h2 id="標準ライブラリ" tabindex="-1">標準ライブラリ <a class="header-anchor" href="#標準ライブラリ" aria-label="Permalink to &quot;標準ライブラリ&quot;">​</a></h2><h3 id="minus-removeall-retainallにおける壊れやすいcontains最適化の削除" tabindex="-1"><code>minus</code>/<code>removeAll</code>/<code>retainAll</code>における壊れやすいcontains最適化の削除 <a class="header-anchor" href="#minus-removeall-retainallにおける壊れやすいcontains最適化の削除" aria-label="Permalink to &quot;`minus`/`removeAll`/`retainAll`における壊れやすいcontains最適化の削除&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.com/issue/KT-45438" target="_blank" rel="noreferrer">KT-45438</a></p><p><strong>コンポーネント</strong>: <code>kotlin-stdlib</code></p><p><strong>非互換な変更の種類</strong>: 振る舞い</p><p><strong>概要</strong>: Kotlin 1.6では、コレクション/イテラブル/配列/シーケンスから複数の要素を削除する関数および演算子の引数に対して、セットへの変換を行わなくなります。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>&lt; 1.6: 以前の振る舞い: 引数は一部のケースでセットに変換される</li><li>1.6.0: 関数の引数がコレクションの場合、<code>Set</code>に変換されなくなります。コレクションではない場合、代わりに<code>List</code>に変換されることがあります。 JVMでは、システムプロパティ <code>kotlin.collections.convert_arg_to_set_in_removeAll=true</code> を設定することで、一時的に以前の振る舞いに戻すことができます。</li><li><blockquote><p>= 1.7: 上記のシステムプロパティは効果がなくなります</p></blockquote></li></ul></blockquote><h3 id="random-nextlongにおける値生成アルゴリズムの変更" tabindex="-1"><code>Random.nextLong</code>における値生成アルゴリズムの変更 <a class="header-anchor" href="#random-nextlongにおける値生成アルゴリズムの変更" aria-label="Permalink to &quot;`Random.nextLong`における値生成アルゴリズムの変更&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.com/issue/KT-47304" target="_blank" rel="noreferrer">KT-47304</a></p><p><strong>コンポーネント</strong>: <code>kotlin-stdlib</code></p><p><strong>非互換な変更の種類</strong>: 振る舞い</p><p><strong>概要</strong>: Kotlin 1.6では、<code>Random.nextLong</code>関数の値生成アルゴリズムが変更され、指定された範囲外の値を生成するのを避けるようになります。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.6.0: 振る舞いは直ちに修正されます</li></ul></blockquote><h3 id="コレクションのminおよびmax関数の戻り値の型を徐々に非null許容型に変更する" tabindex="-1">コレクションの<code>min</code>および<code>max</code>関数の戻り値の型を徐々に非null許容型に変更する <a class="header-anchor" href="#コレクションのminおよびmax関数の戻り値の型を徐々に非null許容型に変更する" aria-label="Permalink to &quot;コレクションの`min`および`max`関数の戻り値の型を徐々に非null許容型に変更する&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.com/issue/KT-38854" target="_blank" rel="noreferrer">KT-38854</a></p><p><strong>コンポーネント</strong>: <code>kotlin-stdlib</code></p><p><strong>非互換な変更の種類</strong>: ソース</p><p><strong>概要</strong>: コレクションの<code>min</code>および<code>max</code>関数の戻り値の型は、Kotlin 1.7で非null許容型に変更されます。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.4.0: <code>...OrNull</code>関数を同義語として導入し、影響を受けるAPIを非推奨にする（詳細は課題を参照）</li><li>1.5.0: 影響を受けるAPIの非推奨レベルをエラーに引き上げる</li><li>1.6.0: 非推奨の関数をパブリックAPIから隠す</li><li><blockquote><p>= 1.7: 影響を受けるAPIを非null許容の戻り値の型で再導入する</p></blockquote></li></ul></blockquote><h3 id="浮動小数点配列関数-contains、indexof、lastindexofを非推奨にする" tabindex="-1">浮動小数点配列関数：<code>contains</code>、<code>indexOf</code>、<code>lastIndexOf</code>を非推奨にする <a class="header-anchor" href="#浮動小数点配列関数-contains、indexof、lastindexofを非推奨にする" aria-label="Permalink to &quot;浮動小数点配列関数：`contains`、`indexOf`、`lastIndexOf`を非推奨にする&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.com/issue/KT-28753" target="_blank" rel="noreferrer">KT-28753</a></p><p><strong>コンポーネント</strong>: <code>kotlin-stdlib</code></p><p><strong>非互換な変更の種類</strong>: ソース</p><p><strong>概要</strong>: Kotlinでは、全順序ではなくIEEE-754順序を使用して値を比較する浮動小数点配列関数<code>contains</code>、<code>indexOf</code>、<code>lastIndexOf</code>を非推奨にします。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.4.0: 影響を受ける関数を警告付きで非推奨にする</li><li>1.6.0: 非推奨レベルをエラーに引き上げる</li><li><blockquote><p>= 1.7: 非推奨の関数をパブリックAPIから隠す</p></blockquote></li></ul></blockquote><h3 id="kotlin-domおよびkotlin-browserパッケージからの宣言をkotlinx-に移行する" tabindex="-1"><code>kotlin.dom</code>および<code>kotlin.browser</code>パッケージからの宣言を<code>kotlinx.*</code>に移行する <a class="header-anchor" href="#kotlin-domおよびkotlin-browserパッケージからの宣言をkotlinx-に移行する" aria-label="Permalink to &quot;`kotlin.dom`および`kotlin.browser`パッケージからの宣言を`kotlinx.*`に移行する&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.com/issue/KT-39330" target="_blank" rel="noreferrer">KT-39330</a></p><p><strong>コンポーネント</strong>: <code>kotlin-stdlib</code> (JS)</p><p><strong>非互換な変更の種類</strong>: ソース</p><p><strong>概要</strong>: <code>kotlin.dom</code>および<code>kotlin.browser</code>パッケージからの宣言は、stdlibからの抽出に備えるため、対応する<code>kotlinx.*</code>パッケージに移動されます。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.4.0: <code>kotlinx.dom</code>および<code>kotlinx.browser</code>パッケージで代替APIを導入</li><li>1.4.0: <code>kotlin.dom</code>および<code>kotlin.browser</code>パッケージのAPIを非推奨にし、上記の新しいAPIを代替として提案</li><li>1.6.0: 非推奨レベルをエラーに引き上げる</li><li><blockquote><p>= 1.7: 非推奨の関数をstdlibから削除する</p></blockquote></li><li><blockquote><p>= 1.7: <code>kotlinx.*</code>パッケージのAPIを別のライブラリに移動する</p></blockquote></li></ul></blockquote><h3 id="kotlin-jsにおけるregex-replace関数をインラインにしない" tabindex="-1">Kotlin/JSにおける<code>Regex.replace</code>関数をインラインにしない <a class="header-anchor" href="#kotlin-jsにおけるregex-replace関数をインラインにしない" aria-label="Permalink to &quot;Kotlin/JSにおける`Regex.replace`関数をインラインにしない&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.com/issue/KT-27738" target="_blank" rel="noreferrer">KT-27738</a></p><p><strong>コンポーネント</strong>: <code>kotlin-stdlib</code> (JS)</p><p><strong>非互換な変更の種類</strong>: ソース</p><p><strong>概要</strong>: 関数型の<code>transform</code>パラメータを持つ<code>Regex.replace</code>関数は、Kotlin/JSではインラインではなくなります。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.6.0: 影響を受ける関数から<code>inline</code>修飾子を削除</li></ul></blockquote><h3 id="置換文字列がグループ参照を含む場合のjvmとjsにおけるregex-replace関数の異なる振る舞い" tabindex="-1">置換文字列がグループ参照を含む場合のJVMとJSにおける<code>Regex.replace</code>関数の異なる振る舞い <a class="header-anchor" href="#置換文字列がグループ参照を含む場合のjvmとjsにおけるregex-replace関数の異なる振る舞い" aria-label="Permalink to &quot;置換文字列がグループ参照を含む場合のJVMとJSにおける`Regex.replace`関数の異なる振る舞い&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.com/issue/KT-28378" target="_blank" rel="noreferrer">KT-28378</a></p><p><strong>コンポーネント</strong>: <code>kotlin-stdlib</code> (JS)</p><p><strong>非互換な変更の種類</strong>: 振る舞い</p><p><strong>概要</strong>: Kotlin/JSの<code>Regex.replace</code>関数は、置換パターン文字列にKotlin/JVMと同じ構文に従うようになります。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.6.0: Kotlin/JSのstdlibにおける<code>Regex.replace</code>の置換パターン処理を変更</li></ul></blockquote><h3 id="js-regexでのunicodeケースフォールディングの使用" tabindex="-1">JS RegexでのUnicodeケースフォールディングの使用 <a class="header-anchor" href="#js-regexでのunicodeケースフォールディングの使用" aria-label="Permalink to &quot;JS RegexでのUnicodeケースフォールディングの使用&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.com/issue/KT-45928" target="_blank" rel="noreferrer">KT-45928</a></p><p><strong>コンポーネント</strong>: <code>kotlin-stdlib</code> (JS)</p><p><strong>非互換な変更の種類</strong>: 振る舞い</p><p><strong>概要</strong>: Kotlin/JSの<code>Regex</code>クラスは、基盤となるJS正規表現エンジンを呼び出してUnicodeルールに従って文字を検索および比較する際に、<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode" target="_blank" rel="noreferrer"><code>unicode</code></a>フラグを使用するようになります。 これにより、JS環境の特定のバージョン要件が発生し、正規表現パターン文字列における不要なエスケープのより厳密な検証が引き起こされます。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.5.0: JS <code>Regex</code>クラスのほとんどの関数でUnicodeケースフォールディングを有効にする</li><li>1.6.0: <code>Regex.replaceFirst</code>関数でUnicodeケースフォールディングを有効にする</li></ul></blockquote><h3 id="一部のjs専用apiを非推奨にする" tabindex="-1">一部のJS専用APIを非推奨にする <a class="header-anchor" href="#一部のjs専用apiを非推奨にする" aria-label="Permalink to &quot;一部のJS専用APIを非推奨にする&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.com/issue/KT-48587" target="_blank" rel="noreferrer">KT-48587</a></p><p><strong>コンポーネント</strong>: <code>kotlin-stdlib</code> (JS)</p><p><strong>非互換な変更の種類</strong>: ソース</p><p><strong>概要</strong>: stdlib内の一部のJS専用関数が削除のために非推奨になりました。これには、<code>String.concat(String)</code>、<code>String.match(regex: String)</code>、<code>String.matches(regex: String)</code>、および比較関数を取る配列の<code>sort</code>関数（例: <code>Array&lt;out T&gt;.sort(comparison: (a: T, b: T) -&gt; Int)</code>)が含まれます。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.6.0: 影響を受ける関数を警告付きで非推奨にする</li><li>1.7.0: 非推奨レベルをエラーに引き上げる</li><li>1.8.0: 非推奨の関数をパブリックAPIから削除する</li></ul></blockquote><h3 id="kotlin-jsのクラスのパブリックapiから実装固有および相互運用固有の関数を隠す" tabindex="-1">Kotlin/JSのクラスのパブリックAPIから実装固有および相互運用固有の関数を隠す <a class="header-anchor" href="#kotlin-jsのクラスのパブリックapiから実装固有および相互運用固有の関数を隠す" aria-label="Permalink to &quot;Kotlin/JSのクラスのパブリックAPIから実装固有および相互運用固有の関数を隠す&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.com/issue/KT-48587" target="_blank" rel="noreferrer">KT-48587</a></p><p><strong>コンポーネント</strong>: <code>kotlin-stdlib</code> (JS)</p><p><strong>非互換な変更の種類</strong>: ソース、バイナリ</p><p><strong>概要</strong>: <code>HashMap.createEntrySet</code>関数と<code>AbstactMutableCollection.toJSON</code>関数の可視性がinternalに変更されます。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.6.0: 関数をinternalにし、パブリックAPIから削除する</li></ul></blockquote><h2 id="ツール" tabindex="-1">ツール <a class="header-anchor" href="#ツール" aria-label="Permalink to &quot;ツール&quot;">​</a></h2><h3 id="kotlingradlesubpluginクラスを非推奨にする" tabindex="-1"><code>KotlinGradleSubplugin</code>クラスを非推奨にする <a class="header-anchor" href="#kotlingradlesubpluginクラスを非推奨にする" aria-label="Permalink to &quot;`KotlinGradleSubplugin`クラスを非推奨にする&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.com/issue/KT-48830" target="_blank" rel="noreferrer">KT-48830</a></p><p><strong>コンポーネント</strong>: Gradle</p><p><strong>非互換な変更の種類</strong>: ソース</p><p><strong>概要</strong>: <code>KotlinGradleSubplugin</code>クラスは<code>KotlinCompilerPluginSupportPlugin</code>に推奨されます。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.6.0: 非推奨レベルをエラーに引き上げる</li><li><blockquote><p>= 1.7.0: 非推奨のクラスを削除する</p></blockquote></li></ul></blockquote><h3 id="kotlin-usefallbackcompilersearchビルドオプションを削除する" tabindex="-1"><code>kotlin.useFallbackCompilerSearch</code>ビルドオプションを削除する <a class="header-anchor" href="#kotlin-usefallbackcompilersearchビルドオプションを削除する" aria-label="Permalink to &quot;`kotlin.useFallbackCompilerSearch`ビルドオプションを削除する&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.com/issue/KT-46719" target="_blank" rel="noreferrer">KT-46719</a></p><p><strong>コンポーネント</strong>: Gradle</p><p><strong>非互換な変更の種類</strong>: ソース</p><p><strong>概要</strong>: 非推奨の<code>kotlin.useFallbackCompilerSearch</code>ビルドオプションを削除します。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.5.0: 非推奨レベルを警告に引き上げる</li><li>1.6.0: 非推奨オプションを削除する</li></ul></blockquote><h3 id="いくつかのコンパイラオプションを削除する" tabindex="-1">いくつかのコンパイラオプションを削除する <a class="header-anchor" href="#いくつかのコンパイラオプションを削除する" aria-label="Permalink to &quot;いくつかのコンパイラオプションを削除する&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.com/issue/KT-48847" target="_blank" rel="noreferrer">KT-48847</a></p><p><strong>コンポーネント</strong>: Gradle</p><p><strong>非互換な変更の種類</strong>: ソース</p><p><strong>概要</strong>: 非推奨の<code>noReflect</code>および<code>includeRuntime</code>コンパイラオプションを削除します。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.5.0: 非推奨レベルをエラーに引き上げる</li><li>1.6.0: 非推奨オプションを削除する</li></ul></blockquote><h3 id="useirコンパイラオプションを非推奨にする" tabindex="-1"><code>useIR</code>コンパイラオプションを非推奨にする <a class="header-anchor" href="#useirコンパイラオプションを非推奨にする" aria-label="Permalink to &quot;`useIR`コンパイラオプションを非推奨にする&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.com/issue/KT-48847" target="_blank" rel="noreferrer">KT-48847</a></p><p><strong>コンポーネント</strong>: Gradle</p><p><strong>非互換な変更の種類</strong>: ソース</p><p><strong>概要</strong>: 非推奨の<code>useIR</code>コンパイラオプションを隠します。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.5.0: 非推奨レベルを警告に引き上げる</li><li>1.6.0: オプションを隠す</li><li><blockquote><p>= 1.7.0: 非推奨オプションを削除する</p></blockquote></li></ul></blockquote><h3 id="kapt-use-worker-api-gradleプロパティを非推奨にする" tabindex="-1"><code>kapt.use.worker.api</code> Gradleプロパティを非推奨にする <a class="header-anchor" href="#kapt-use-worker-api-gradleプロパティを非推奨にする" aria-label="Permalink to &quot;`kapt.use.worker.api` Gradleプロパティを非推奨にする&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.com/issue/KT-48826" target="_blank" rel="noreferrer">KT-48826</a></p><p><strong>コンポーネント</strong>: Gradle</p><p><strong>非互換な変更の種類</strong>: ソース</p><p><strong>概要</strong>: Gradle Workers API経由でkaptを実行することを許可していた<code>kapt.use.worker.api</code>プロパティ（デフォルト: true）を非推奨にします。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.6.20: 非推奨レベルを警告に引き上げる</li><li><blockquote><p>= 1.8.0: このプロパティを削除する</p></blockquote></li></ul></blockquote><h3 id="kotlin-parallel-tasks-in-project-gradleプロパティを削除する" tabindex="-1"><code>kotlin.parallel.tasks.in.project</code> Gradleプロパティを削除する <a class="header-anchor" href="#kotlin-parallel-tasks-in-project-gradleプロパティを削除する" aria-label="Permalink to &quot;`kotlin.parallel.tasks.in.project` Gradleプロパティを削除する&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.com/issue/KT-46406" target="_blank" rel="noreferrer">KT-46406</a></p><p><strong>コンポーネント</strong>: Gradle</p><p><strong>非互換な変更の種類</strong>: ソース</p><p><strong>概要</strong>: <code>kotlin.parallel.tasks.in.project</code>プロパティを削除します。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.5.20: 非推奨レベルを警告に引き上げる</li><li>1.6.20: このプロパティを削除する</li></ul></blockquote><h3 id="kotlin-experimental-coroutines-gradle-dslオプションとkotlin-coroutines-gradleプロパティを非推奨にする" tabindex="-1"><code>kotlin.experimental.coroutines</code> Gradle DSLオプションと<code>kotlin.coroutines</code> Gradleプロパティを非推奨にする <a class="header-anchor" href="#kotlin-experimental-coroutines-gradle-dslオプションとkotlin-coroutines-gradleプロパティを非推奨にする" aria-label="Permalink to &quot;`kotlin.experimental.coroutines` Gradle DSLオプションと`kotlin.coroutines` Gradleプロパティを非推奨にする&quot;">​</a></h3><blockquote><p><strong>課題</strong>: <a href="https://youtrack.com/issue/KT-50369" target="_blank" rel="noreferrer">KT-50369</a></p><p><strong>コンポーネント</strong>: Gradle</p><p><strong>非互換な変更の種類</strong>: ソース</p><p><strong>概要</strong>: <code>kotlin.experimental.coroutines</code> Gradle DSLオプションと<code>kotlin.coroutines</code>プロパティを非推奨にします。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.6.20: 非推奨レベルを警告に引き上げる</li><li><blockquote><p>= 1.7.0: DSLオプションとプロパティを削除する</p></blockquote></li></ul></blockquote>',72)]))}const b=e(n,[["render",a]]);export{u as __pageData,b as default};
