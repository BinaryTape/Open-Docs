import{_ as g,C as t,c,o as E,j as i,G as a,ag as h,a as e,w as n}from"./chunks/framework.Bksy39di.js";const q=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ktor/server-digest-auth.md","filePath":"ktor/server-digest-auth.md","lastUpdated":1755457140000}'),u={name:"ktor/server-digest-auth.md"};function y(F,s,v,m,C,b){const r=t("show-structure"),k=t("Links"),o=t("tldr"),l=t("code-block"),p=t("TabItem"),d=t("Tabs");return E(),c("div",null,[s[5]||(s[5]=i("h1",{id:"ktor-server-中的摘要认证",tabindex:"-1"},[e("Ktor Server 中的摘要认证 "),i("a",{class:"header-anchor",href:"#ktor-server-中的摘要认证","aria-label":'Permalink to "Ktor Server 中的摘要认证"'},"​")],-1)),a(r,{for:"chapter",depth:"2"}),a(o,null,{default:n(()=>[s[3]||(s[3]=i("p",null,[i("b",null,"必需的依赖项"),e(": "),i("code",null,"io.ktor:ktor-server-auth")],-1)),s[4]||(s[4]=i("p",null,[i("b",null,"代码示例"),e(": "),i("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/auth-digest"}," auth-digest ")],-1)),i("p",null,[i("b",null,[a(k,{href:"/ktor/server-native",summary:"Ktor 支持 Kotlin/Native，允许您无需额外的运行时或虚拟机即可运行服务器。"},{default:n(()=>s[0]||(s[0]=[e("原生服务器")])),_:1}),s[1]||(s[1]=e("支持"))]),s[2]||(s[2]=e(": ✖️ "))])]),_:1}),s[6]||(s[6]=h('<p>摘要认证方案是 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication" target="_blank" rel="noreferrer">HTTP 框架</a>的一部分，用于访问控制和认证。在此方案中，在通过网络发送用户名和密码之前，会对其应用哈希函数。</p><p>Ktor 允许您使用摘要认证来登录用户和保护特定的<a href="./server-routing">路由</a>。您可以在 <a href="./server-auth">Ktor Server 中的认证与授权</a>章节中获取有关 Ktor 认证的一般信息。</p><h2 id="add_dependencies" tabindex="-1">添加依赖项 <a class="header-anchor" href="#add_dependencies" aria-label="Permalink to &quot;添加依赖项 {id=&quot;add_dependencies&quot;}&quot;">​</a></h2><p>要启用 <code>digest</code> 认证，您需要在构建脚本中包含 <code>ktor-server-auth</code> 构件：</p>',4)),a(d,{group:"languages"},{default:n(()=>[a(p,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[a(l,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-server-auth:$ktor_version")'})]),_:1}),a(p,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[a(l,{lang:"Groovy",code:'            implementation "io.ktor:ktor-server-auth:$ktor_version"'})]),_:1}),a(p,{title:"Maven","group-key":"maven"},{default:n(()=>[a(l,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-server-auth-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),s[7]||(s[7]=h(`<h2 id="flow" tabindex="-1">摘要认证流程 <a class="header-anchor" href="#flow" aria-label="Permalink to &quot;摘要认证流程 {id=&quot;flow&quot;}&quot;">​</a></h2><p>摘要认证流程如下所示：</p><ol><li><p>客户端向服务器应用程序中的特定<a href="./server-routing">路由</a>发起不带 <code>Authorization</code> 请求头的请求。</p></li><li><p>服务器向客户端响应 <code>401</code> (Unauthorized) 响应状态，并使用 <code>WWW-Authenticate</code> 响应头提供信息，表明该路由使用了摘要认证方案。一个典型的 <code>WWW-Authenticate</code> 头如下所示：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>WWW-Authenticate: Digest</span></span>
<span class="line"><span>        realm=&quot;Access to the &#39;/&#39; path&quot;,</span></span>
<span class="line"><span>        nonce=&quot;e4549c0548886bc2&quot;,</span></span>
<span class="line"><span>        algorithm=&quot;MD5&quot;</span></span></code></pre></div><p>在 Ktor 中，您可以在<a href="#configure-provider">配置</a> <code>digest</code> 认证提供者时指定 realm 和生成 nonce 值的方式。</p></li><li><p>通常，客户端会显示一个登录对话框，用户可以在其中输入凭据。然后，客户端发起一个带有以下 <code>Authorization</code> 请求头的请求：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Authorization: Digest username=&quot;jetbrains&quot;,</span></span>
<span class="line"><span>        realm=&quot;Access to the &#39;/&#39; path&quot;,</span></span>
<span class="line"><span>        nonce=&quot;e4549c0548886bc2&quot;,</span></span>
<span class="line"><span>        uri=&quot;/&quot;,</span></span>
<span class="line"><span>        algorithm=MD5,</span></span>
<span class="line"><span>        response=&quot;6299988bb4f05c0d8ad44295873858cf&quot;</span></span></code></pre></div><p><code>response</code> 值通过以下方式生成：</p><p>a. <code>HA1 = MD5(username:realm:password)</code></p><blockquote><p>这部分<a href="#digest-table">存储</a>在服务器上，Ktor 可以用它来验证用户凭据。</p></blockquote><p>b. <code>HA2 = MD5(method:digestURI)</code></p><p>c. <code>response = MD5(HA1:nonce:HA2)</code></p></li><li><p>服务器<a href="#configure-provider">验证</a>客户端发送的凭据并响应所请求的内容。</p></li></ol><h2 id="install" tabindex="-1">安装摘要认证 <a class="header-anchor" href="#install" aria-label="Permalink to &quot;安装摘要认证 {id=&quot;install&quot;}&quot;">​</a></h2><p>要安装 <code>digest</code> 认证提供者，请在 <code>install</code> 代码块中调用 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/digest.html" target="_blank" rel="noreferrer">digest</a> 函数：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.application.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.auth.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Authentication) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    digest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Configure digest authentication</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>您可以选择性地指定一个<a href="./server-auth#provider-name">提供者名称</a>，该名称可用于<a href="#authenticate-route">认证指定的路由</a>。</p><h2 id="configure" tabindex="-1">配置摘要认证 <a class="header-anchor" href="#configure" aria-label="Permalink to &quot;配置摘要认证 {id=&quot;configure&quot;}&quot;">​</a></h2><p>要大致了解如何在 Ktor 中配置不同的认证提供者，请参阅<a href="./server-auth#configure">配置认证</a>。在本节中，我们将重点介绍 <code>digest</code> 认证提供者的配置细节。</p><h3 id="digest-table" tabindex="-1">步骤 1：提供包含摘要的用户表 <a class="header-anchor" href="#digest-table" aria-label="Permalink to &quot;步骤 1：提供包含摘要的用户表 {id=&quot;digest-table&quot;}&quot;">​</a></h3><p><code>digest</code> 认证提供者使用摘要消息的 <code>HA1</code> 部分来验证用户凭据。因此，您可以提供一个包含用户名和对应的 <code>HA1</code> 哈希值的用户表。在下面的示例中，<code>getMd5Digest</code> 函数用于生成 <code>HA1</code> 哈希值：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getMd5Digest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(str: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ByteArray</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MessageDigest.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MD5&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">digest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(str.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toByteArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(UTF_8))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myRealm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Access to the &#39;/&#39; path&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userTable: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ByteArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mapOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;jetbrains&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> to </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getMd5Digest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jetbrains:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$myRealm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:foobar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;admin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> to </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getMd5Digest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;admin:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$myRealm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:password&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="configure-provider" tabindex="-1">步骤 2：配置摘要提供者 <a class="header-anchor" href="#configure-provider" aria-label="Permalink to &quot;步骤 2：配置摘要提供者 {id=&quot;configure-provider&quot;}&quot;">​</a></h3><p><code>digest</code> 认证提供者通过 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-digest-authentication-provider/-config/index.html" target="_blank" rel="noreferrer">DigestAuthenticationProvider.Config</a> 类公开其设置。在下面的示例中，指定了以下设置：</p><ul><li><code>realm</code> 属性设置要传递到 <code>WWW-Authenticate</code> 请求头中的 realm。</li><li><code>digestProvider</code> 函数获取指定用户名的摘要的 <code>HA1</code> 部分。</li><li>(可选) <code>validate</code> 函数允许您将凭据映射到自定义 Principal。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Authentication) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        digest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-digest&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            realm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myRealm</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            digestProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { userName, realm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                userTable[userName]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            validate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { credentials </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (credentials.userName.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isNotEmpty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    CustomPrincipal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(credentials.userName, credentials.realm)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                    null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CustomPrincipal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userName: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> realm: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>您还可以使用 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-digest-authentication-provider/-config/nonce-manager.html" target="_blank" rel="noreferrer">nonceManager</a> 属性来指定如何生成 nonce 值。</p><h3 id="authenticate-route" tabindex="-1">步骤 3：保护特定资源 <a class="header-anchor" href="#authenticate-route" aria-label="Permalink to &quot;步骤 3：保护特定资源 {id=&quot;authenticate-route&quot;}&quot;">​</a></h3><p>配置 <code>digest</code> 提供者后，您可以使用 <strong><a href="./server-auth#authenticate-route">authenticate</a></strong> 函数保护应用程序中的特定资源。如果认证成功，您可以在路由处理程序中使用 <code>call.principal</code> 函数检索经过认证的 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-principal/index.html" target="_blank" rel="noreferrer">Principal</a>，并获取认证用户的名称。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    authenticate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-digest&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, \${call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">principal</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CustomPrincipal</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&gt;()?.userName}!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,20))])}const B=g(u,[["render",y]]);export{q as __pageData,B as default};
