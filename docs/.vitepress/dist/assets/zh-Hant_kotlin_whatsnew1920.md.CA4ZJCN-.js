import{_ as t}from"./chunks/default-hierarchy-example.DgJqkpuk.js";import{_ as e,a as p}from"./chunks/full-template-hierarchy.DK23XVrY.js";import{_ as o,a as r}from"./chunks/multiplatform-create-project-button.ihqOV7P4.js";import{_ as h,C as k,c as d,o as c,ag as i,G as E,j as s,a as n}from"./chunks/framework.Bksy39di.js";const w=JSON.parse('{"title":"Kotlin 1.9.20 有什麼新功能","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/whatsnew1920.md","filePath":"zh-Hant/kotlin/whatsnew1920.md","lastUpdated":1754307826000}'),g={name:"zh-Hant/kotlin/whatsnew1920.md"};function m(u,a,y,b,f,v){const l=k("YouTubeVideo");return c(),d("div",null,[a[0]||(a[0]=i('<h1 id="kotlin-1-9-20-有什麼新功能" tabindex="-1">Kotlin 1.9.20 有什麼新功能 <a class="header-anchor" href="#kotlin-1-9-20-有什麼新功能" aria-label="Permalink to &quot;Kotlin 1.9.20 有什麼新功能&quot;">​</a></h1><p><em><a href="/zh-Hant/kotlin/releases#release-details">發佈日期：2023 年 11 月 1 日</a></em></p><p>Kotlin 1.9.20 版本現已推出，<a href="#new-kotlin-k2-compiler-updates">所有目標平台的 K2 編譯器現已進入 Beta 階段</a>， 且 <a href="#kotlin-multiplatform-is-stable">Kotlin Multiplatform 現已穩定</a>。此外，以下是一些主要亮點：</p><ul><li><a href="#template-for-configuring-multiplatform-projects">設定多平台專案的新預設階層範本</a></li><li><a href="#full-support-for-the-gradle-configuration-cache-in-kotlin-multiplatform">Kotlin Multiplatform 中對 Gradle 配置快取的完整支援</a></li><li><a href="#custom-memory-allocator-enabled-by-default">Kotlin/Native 中預設啟用自訂記憶體分配器</a></li><li><a href="#performance-improvements-for-the-garbage-collector">Kotlin/Native 垃圾收集器的效能改進</a></li><li><a href="#new-wasm-wasi-target-and-the-renaming-of-the-wasm-target-to-wasm-js">Kotlin/Wasm 中的新目標與重新命名目標</a></li><li><a href="#support-for-the-wasi-api-in-the-standard-library">Kotlin/Wasm 標準函式庫中對 WASI API 的支援</a></li></ul><p>您也可以在此影片中找到這些更新的簡要概述：</p>',5)),E(l,{src:"https://www.youtube.com/v/Ol_96CHKqg8",title:"Kotlin 1.9.20 有什麼新功能"}),a[1]||(a[1]=i(`<h2 id="ide-支援" tabindex="-1">IDE 支援 <a class="header-anchor" href="#ide-支援" aria-label="Permalink to &quot;IDE 支援&quot;">​</a></h2><p>支援 1.9.20 的 Kotlin 外掛程式適用於：</p><table tabindex="0"><thead><tr><th>IDE</th><th>支援版本</th></tr></thead><tbody><tr><td>IntelliJ IDEA</td><td>2023.1.x, 2023.2.x, 2023.x</td></tr><tr><td>Android Studio</td><td>Hedgehog (2023.1.1), Iguana (2023.2.1)</td></tr></tbody></table><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>自 IntelliJ IDEA 2023.3.x 和 Android Studio Iguana (2023.2.1) Canary 15 起，Kotlin 外掛程式會自動 包含並更新。您只需要更新專案中的 Kotlin 版本即可。</p></div><h2 id="新-kotlin-k2-編譯器更新" tabindex="-1">新 Kotlin K2 編譯器更新 <a class="header-anchor" href="#新-kotlin-k2-編譯器更新" aria-label="Permalink to &quot;新 Kotlin K2 編譯器更新&quot;">​</a></h2><p>JetBrains 的 Kotlin 團隊持續穩定新的 K2 編譯器，這將帶來主要的效能改進、 加速新語言功能開發、統一 Kotlin 支援的所有平台，並為多平台專案提供更好的架構。</p><p>K2 目前已為所有目標平台進入 <strong>Beta</strong> 階段。<a href="https://blog.jetbrains.com/kotlin/2023/11/kotlin-1-9-20-released/" target="_blank" rel="noreferrer">閱讀發佈部落格文章了解更多資訊</a></p><h3 id="支援-kotlin-wasm" tabindex="-1">支援 Kotlin/Wasm <a class="header-anchor" href="#支援-kotlin-wasm" aria-label="Permalink to &quot;支援 Kotlin/Wasm&quot;">​</a></h3><p>自此版本以來，Kotlin/Wasm 支援新的 K2 編譯器。 <a href="#how-to-enable-the-kotlin-k2-compiler">了解如何在專案中啟用它</a>。</p><h3 id="kapt-編譯器外掛程式與-k2-的預覽" tabindex="-1">Kapt 編譯器外掛程式與 K2 的預覽 <a class="header-anchor" href="#kapt-編譯器外掛程式與-k2-的預覽" aria-label="Permalink to &quot;Kapt 編譯器外掛程式與 K2 的預覽&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>kapt 編譯器外掛程式中對 K2 的支援是 <a href="/zh-Hant/kotlin/components-stability">Experimental (實驗性功能)</a>。 需要選用加入 (請參閱下方詳細資訊)，您應該僅將其用於評估目的。</p></div><p>在 1.9.20 中，您可以嘗試將 <a href="/zh-Hant/kotlin/kapt">kapt 編譯器外掛程式</a>與 K2 編譯器一起使用。 要在專案中使用 K2 編譯器，請將以下選項新增到 <code>gradle.properties</code> 檔案中：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.experimental.tryK2=true</span></span>
<span class="line"><span>kapt.use.k2=true</span></span></code></pre></div><p>或者，您可以透過完成以下步驟來啟用 kapt 的 K2：</p><ol><li>在您的 <code>build.gradle.kts</code> 檔案中，將 <a href="/zh-Hant/kotlin/gradle-compiler-options#example-of-setting-languageversion">語言版本設定</a> 為 <code>2.0</code>。</li><li>在您的 <code>gradle.properties</code> 檔案中，新增 <code>kapt.use.k2=true</code>。</li></ol><p>如果您在使用 kapt 與 K2 編譯器時遇到任何問題，請向我們的 <a href="http://kotl.in/issue" target="_blank" rel="noreferrer">問題追蹤器</a> 報告。</p><h3 id="如何啟用-kotlin-k2-編譯器" tabindex="-1">如何啟用 Kotlin K2 編譯器 <a class="header-anchor" href="#如何啟用-kotlin-k2-編譯器" aria-label="Permalink to &quot;如何啟用 Kotlin K2 編譯器&quot;">​</a></h3><h4 id="在-gradle-中啟用-k2" tabindex="-1">在 Gradle 中啟用 K2 <a class="header-anchor" href="#在-gradle-中啟用-k2" aria-label="Permalink to &quot;在 Gradle 中啟用 K2&quot;">​</a></h4><p>要啟用和測試 Kotlin K2 編譯器，請使用以下編譯器選項的新語言版本：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-language-version</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2.0</span></span></code></pre></div><p>您可以在 <code>build.gradle.kts</code> 檔案中指定它：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sourceSets.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        languageSettings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            languageVersion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;2.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="在-maven-中啟用-k2" tabindex="-1">在 Maven 中啟用 K2 <a class="header-anchor" href="#在-maven-中啟用-k2" aria-label="Permalink to &quot;在 Maven 中啟用 K2&quot;">​</a></h4><p>要啟用和測試 Kotlin K2 編譯器，請更新您的 <code>pom.xml</code> 檔案的 <code>&lt;project/&gt;</code> 區段：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">properties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">kotlin.compiler.languageVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;2.0&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">kotlin.compiler.languageVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">properties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h4 id="在-intellij-idea-中啟用-k2" tabindex="-1">在 IntelliJ IDEA 中啟用 K2 <a class="header-anchor" href="#在-intellij-idea-中啟用-k2" aria-label="Permalink to &quot;在 IntelliJ IDEA 中啟用 K2&quot;">​</a></h4><p>要在 IntelliJ IDEA 中啟用和測試 Kotlin K2 編譯器，請前往 <strong>Settings (設定)</strong> | <strong>Build, Execution, Deployment (建置、執行、部署)</strong> | <strong>Compiler (編譯器)</strong> | <strong>Kotlin Compiler (Kotlin 編譯器)</strong> 並將 <strong>Language Version (語言版本)</strong> 欄位更新為 <code>2.0 (experimental)</code>。</p><h3 id="對新-k2-編譯器提供回饋意見" tabindex="-1">對新 K2 編譯器提供回饋意見 <a class="header-anchor" href="#對新-k2-編譯器提供回饋意見" aria-label="Permalink to &quot;對新 K2 編譯器提供回饋意見&quot;">​</a></h3><p>我們將會感謝您的任何回饋意見！</p><ul><li>直接在 Kotlin Slack 上向 K2 開發人員提供您的回饋意見 – <a href="https://surveys.jetbrains.com/s3/kotlin-slack-sign-up?_gl=1*ju6cbn*_ga*MTA3MTk5NDkzMC4xNjQ2MDY3MDU4*_ga_9J976DJZ68*MTY1ODMzNzA3OS4xMDAuMS4xNjU4MzQwODEwLjYw" target="_blank" rel="noreferrer">取得邀請</a> 並加入 <a href="https://kotlinlang.slack.com/archives/C03PK0PE257" target="_blank" rel="noreferrer">#k2-early-adopters</a> 頻道。</li><li>報告您在使用新 K2 編譯器時遇到的任何問題 在 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">我們的問題追蹤器</a> 上。</li><li><a href="https://www.jetbrains.com/help/idea/settings-usage-statistics.html" target="_blank" rel="noreferrer">啟用 Send usage statistics (傳送使用統計資料) 選項</a> 以 允許 JetBrains 收集有關 K2 使用情況的匿名資料。</li></ul><h2 id="kotlin-jvm" tabindex="-1">Kotlin/JVM <a class="header-anchor" href="#kotlin-jvm" aria-label="Permalink to &quot;Kotlin/JVM&quot;">​</a></h2><p>自 1.9.20 版本開始，編譯器可以產生包含 Java 21 位元碼的類別。</p><h2 id="kotlin-native" tabindex="-1">Kotlin/Native <a class="header-anchor" href="#kotlin-native" aria-label="Permalink to &quot;Kotlin/Native&quot;">​</a></h2><p>Kotlin 1.9.20 包含一個預設啟用新記憶體分配器的穩定版記憶體管理員、垃圾收集器的效能改進，以及其他更新：</p><ul><li><a href="#custom-memory-allocator-enabled-by-default">預設啟用自訂記憶體分配器</a></li><li><a href="#performance-improvements-for-the-garbage-collector">垃圾收集器的效能改進</a></li><li><a href="#incremental-compilation-of-klib-artifacts">klib 構件的增量編譯</a></li><li><a href="#managing-library-linkage-issues">管理函式庫連結問題</a></li><li><a href="#companion-object-initialization-on-class-constructor-calls">類別建構函式呼叫時的伴隨物件初始化</a></li><li><a href="#opt-in-requirement-for-all-cinterop-declarations">所有 cinterop 宣告的選用加入要求</a></li><li><a href="#custom-message-for-linker-errors">連結器錯誤的自訂訊息</a></li><li><a href="#removal-of-the-legacy-memory-manager">移除舊版記憶體管理員</a></li><li><a href="#change-to-our-target-tiers-policy">變更我們的目標層級策略</a></li></ul><h3 id="預設啟用自訂記憶體分配器" tabindex="-1">預設啟用自訂記憶體分配器 <a class="header-anchor" href="#預設啟用自訂記憶體分配器" aria-label="Permalink to &quot;預設啟用自訂記憶體分配器&quot;">​</a></h3><p>Kotlin 1.9.20 預設啟用新的記憶體分配器。它旨在取代先前的預設分配器 <code>mimalloc</code>， 以提高垃圾收集的效率並改善 <a href="/zh-Hant/kotlin/native-memory-manager">Kotlin/Native 記憶體管理員</a> 的執行時間效能。</p><p>新的自訂分配器將系統記憶體劃分為頁面，允許以連續順序獨立掃描。 每個分配都成為頁面內的記憶體區塊，頁面會追蹤區塊大小。 不同的頁面類型針對各種分配大小進行了優化。 記憶體區塊的連續排列確保了對所有已分配區塊的高效迭代。</p><p>當執行緒分配記憶體時，它會根據分配大小搜尋適合的頁面。 執行緒為不同的記憶體大小類別維護一組頁面。 通常，給定大小的目前頁面可以容納分配。 如果不能，執行緒會從共用分配空間請求不同的頁面。 此頁面可能已經可用，需要掃描，或者必須先建立。</p><p>新的分配器允許同時存在多個獨立的分配空間， 這將使 Kotlin 團隊能夠嘗試不同的頁面佈局，以進一步提高效能。</p><h4 id="如何啟用自訂記憶體分配器" tabindex="-1">如何啟用自訂記憶體分配器 <a class="header-anchor" href="#如何啟用自訂記憶體分配器" aria-label="Permalink to &quot;如何啟用自訂記憶體分配器&quot;">​</a></h4><p>從 Kotlin 1.9.20 開始，新的記憶體分配器是預設值。無需額外設定。</p><p>如果您遇到高記憶體消耗問題，可以在 Gradle 建置腳本中使用 <code>-Xallocator=mimalloc</code> 或 <code>-Xallocator=std</code> 切換回 <code>mimalloc</code> 或系統分配器。請在 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a> 中報告此類問題，以幫助我們改進新的記憶體分配器。</p><p>有關新分配器設計的技術細節，請參閱此 <a href="https://github.com/JetBrains/kotlin/blob/master/kotlin-native/runtime/src/alloc/custom/README.md" target="_blank" rel="noreferrer">README</a>。</p><h3 id="垃圾收集器的效能改進" tabindex="-1">垃圾收集器的效能改進 <a class="header-anchor" href="#垃圾收集器的效能改進" aria-label="Permalink to &quot;垃圾收集器的效能改進&quot;">​</a></h3><p>Kotlin 團隊持續改進新的 Kotlin/Native 記憶體管理員的效能和穩定性。 此版本對垃圾收集器 (GC) 進行了許多重大變更，包括以下 1.9.20 亮點：</p><ul><li><a href="#full-parallel-mark-to-reduce-the-pause-time-for-the-gc"></a></li><li><a href="#tracking-memory-in-big-chunks-to-improve-the-allocation-performance"></a></li></ul><h4 id="完全平行標記以減少-gc-的暫停時間" tabindex="-1">完全平行標記以減少 GC 的暫停時間 <a class="header-anchor" href="#完全平行標記以減少-gc-的暫停時間" aria-label="Permalink to &quot;完全平行標記以減少 GC 的暫停時間&quot;">​</a></h4><p>以前，預設的垃圾收集器僅執行部分平行標記。當變更者執行緒暫停時， 它會從自己的根，例如執行緒區域變數和呼叫堆疊，開始標記 GC。 同時，一個單獨的 GC 執行緒負責從全域根以及所有正在主動執行原生程式碼且因此未暫停的變更者的根開始標記。</p><p>這種方法在全域物件數量有限且變更者執行緒花費大量時間處於可執行狀態並執行 Kotlin 程式碼的情況下效果很好。然而，對於典型的 iOS 應用程式而言並非如此。</p><p>現在 GC 使用完全平行標記，它結合了暫停的變更者、GC 執行緒和可選的標記執行緒來處理 標記佇列。預設情況下，標記過程由以下執行：</p><ul><li>暫停的變更者。它們不是處理自己的根然後在不主動執行程式碼時處於閒置狀態，而是參與 整個標記過程。</li><li>GC 執行緒。這確保至少有一個執行緒會執行標記。</li></ul><p>這種新方法使標記過程更有效率，減少了 GC 的暫停時間。</p><h4 id="以大塊追蹤記憶體以改進分配效能" tabindex="-1">以大塊追蹤記憶體以改進分配效能 <a class="header-anchor" href="#以大塊追蹤記憶體以改進分配效能" aria-label="Permalink to &quot;以大塊追蹤記憶體以改進分配效能&quot;">​</a></h4><p>以前，GC 排程器單獨追蹤每個物件的分配。然而，新的預設自訂 分配器和 <code>mimalloc</code> 記憶體分配器都不會為每個物件分配單獨的儲存空間；它們會一次為多個物件分配大面積空間。</p><p>在 Kotlin 1.9.20 中，GC 追蹤區域而不是單個物件。這透過減少 每次分配執行的任務數量，從而有助於最小化垃圾收集器的記憶體使用量來加快小型物件的分配。</p><h3 id="klib-構件的增量編譯" tabindex="-1">klib 構件的增量編譯 <a class="header-anchor" href="#klib-構件的增量編譯" aria-label="Permalink to &quot;klib 構件的增量編譯&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>此功能是 <a href="/zh-Hant/kotlin/components-stability#stability-levels-explained">Experimental (實驗性功能)</a>。 它可能隨時被移除或變更。需要選用加入 (請參閱下方詳細資訊)。 僅將其用於評估目的。我們非常感謝您在 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a> 中提供回饋意見。</p></div><p>Kotlin 1.9.20 為 Kotlin/Native 引入了一項新的編譯時間優化。 將 <code>klib</code> 構件編譯為原生程式碼現在是部分增量的。</p><p>在偵錯模式下將 Kotlin 原始碼編譯為原生二進位檔時，編譯會經過兩個階段：</p><ol><li>原始碼編譯為 <code>klib</code> 構件。</li><li><code>klib</code> 構件與依賴項一起編譯為二進位檔。</li></ol><p>為了優化第二階段的編譯時間，團隊已經為依賴項實施了編譯器快取。 它們只會編譯為原生程式碼一次，結果會在每次編譯二進位檔時重複使用。 但是從專案原始碼建置的 <code>klib</code> 構件始終在每次專案變更時完全重新編譯為原生程式碼。</p><p>透過新的增量編譯，如果專案模組變更僅導致原始碼部分重新編譯為 <code>klib</code> 構件，則 <code>klib</code> 的一部分會進一步重新編譯為二進位檔。</p><p>要啟用增量編譯，請將以下選項新增到您的 <code>gradle.properties</code> 檔案中：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.incremental.native=true</span></span></code></pre></div><p>如果您遇到任何問題，請向 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a> 報告此類情況。</p><h3 id="管理函式庫連結問題" tabindex="-1">管理函式庫連結問題 <a class="header-anchor" href="#管理函式庫連結問題" aria-label="Permalink to &quot;管理函式庫連結問題&quot;">​</a></h3><p>此版本改進了 Kotlin/Native 編譯器處理 Kotlin 函式庫中連結問題的方式。錯誤訊息現在 包含更可讀的宣告，因為它們使用簽章名稱而不是雜湊，幫助您更容易找到並修復問題。例如：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>No function found for symbol &#39;org.samples/MyClass.removedFunction|removedFunction(kotlin.Int;kotlin.String){}[0]&#39;</span></span></code></pre></div><p>Kotlin/Native 編譯器會偵測第三方 Kotlin 函式庫之間的連結問題，並在執行時報告錯誤。 如果某個第三方 Kotlin 函式庫的作者在另一個第三方 Kotlin 函式庫使用的實驗性 API 中進行了不相容的變更，您可能會遇到此類問題。</p><p>從 Kotlin 1.9.20 開始，編譯器預設以靜默模式偵測連結問題。您可以在專案中調整此設定：</p><ul><li>如果您想將這些問題記錄在編譯日誌中，請使用 <code>-Xpartial-linkage-loglevel=WARNING</code> 編譯器選項啟用警告。</li><li>也可以使用 <code>-Xpartial-linkage-loglevel=ERROR</code> 將報告警告的嚴重性提高到編譯錯誤。 在這種情況下，編譯會失敗，您會在編譯日誌中獲得所有錯誤。使用此選項可更仔細地檢查連結問題。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在 Gradle 建置檔案中傳遞編譯器選項的範例：</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    macosX64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;native&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        binaries.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        compilations.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configureEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            compilerOptions.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // 將連結問題報告為警告：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                freeCompilerArgs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xpartial-linkage-loglevel=WARNING&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // 將連結警告提高到錯誤：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                freeCompilerArgs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xpartial-linkage-loglevel=ERROR&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>如果您遇到此功能的意外問題，您可以隨時使用 <code>-Xpartial-linkage=disable</code> 編譯器選項停用。請隨時向 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">我們的問題 追蹤器</a> 報告此類情況。</p><h3 id="類別建構函式呼叫時的伴隨物件初始化" tabindex="-1">類別建構函式呼叫時的伴隨物件初始化 <a class="header-anchor" href="#類別建構函式呼叫時的伴隨物件初始化" aria-label="Permalink to &quot;類別建構函式呼叫時的伴隨物件初始化&quot;">​</a></h3><p>從 Kotlin 1.9.20 開始，Kotlin/Native 後端會在類別建構函式中呼叫伴隨物件的靜態初始化器：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Greeting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    companion</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, Kotlin!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> start </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Greeting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 輸出 &quot;Hello, Kotlin!&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>該行為現在與 Kotlin/JVM 統一，其中伴隨物件在載入（解析）與 Java 靜態初始化器語義相符的相應類別時進行初始化。</p><p>現在，此功能的實作在平台之間更加一致，在 Kotlin Multiplatform 專案中共享程式碼變得更容易。</p><h3 id="所有-cinterop-宣告的選用加入要求" tabindex="-1">所有 cinterop 宣告的選用加入要求 <a class="header-anchor" href="#所有-cinterop-宣告的選用加入要求" aria-label="Permalink to &quot;所有 cinterop 宣告的選用加入要求&quot;">​</a></h3><p>從 Kotlin 1.9.20 開始，由 <code>cinterop</code> 工具從 C 和 Objective-C 函式庫（例如 libcurl 和 libxml）產生 的所有 Kotlin 宣告都標記為 <code>@ExperimentalForeignApi</code>。如果缺少選用加入註解，您的程式碼將無法編譯。</p><p>此要求反映了匯入 C 和 Objective-C 函式庫的 <a href="/zh-Hant/kotlin/components-stability#stability-levels-explained">Experimental (實驗性功能)</a> 狀態。我們建議您將其使用限制在專案中的特定區域。一旦我們開始穩定化匯入，這將使您的遷移更容易。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>至於 Kotlin/Native 隨附的原生平台函式庫 (例如 Foundation、UIKit 和 POSIX)， 只有它們的一些 API 需要透過 <code>@ExperimentalForeignApi</code> 選用加入。在這種情況下，您會收到一個需要選用加入的警告。</p></div><h3 id="連結器錯誤的自訂訊息" tabindex="-1">連結器錯誤的自訂訊息 <a class="header-anchor" href="#連結器錯誤的自訂訊息" aria-label="Permalink to &quot;連結器錯誤的自訂訊息&quot;">​</a></h3><p>如果您是函式庫作者，您現在可以透過自訂訊息幫助使用者解決連結器錯誤。</p><p>如果您的 Kotlin 函式庫依賴於 C 或 Objective-C 函式庫，例如，使用 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-cocoapods-overview.html" target="_blank" rel="noreferrer">CocoaPods 整合</a>， 其使用者需要將這些依賴函式庫在本機上或在專案建置腳本中明確配置它們。 如果不是這樣，使用者通常會收到令人困惑的「Framework not found」訊息。</p><p>您現在可以在編譯失敗訊息中提供特定的說明或連結。為此，請將 <code>-Xuser-setup-hint</code> 編譯器選項傳遞給 <code>cinterop</code> 或將 <code>userSetupHint=message</code> 屬性新增到您的 <code>.def</code> 檔案中。</p><h3 id="移除舊版記憶體管理員" tabindex="-1">移除舊版記憶體管理員 <a class="header-anchor" href="#移除舊版記憶體管理員" aria-label="Permalink to &quot;移除舊版記憶體管理員&quot;">​</a></h3><p><a href="/zh-Hant/kotlin/native-memory-manager">新的記憶體管理員</a> 在 Kotlin 1.6.20 中引入，並在 1.7.20 中成為預設。 從那時起，它一直獲得進一步的更新和效能改進，並已變得穩定。</p><p>現在是完成棄用週期並移除舊版記憶體管理員的時候了。如果您仍在 使用它，請從 <code>gradle.properties</code> 中移除 <code>kotlin.native.binary.memoryModel=strict</code> 選項，並遵循我們的 <a href="/zh-Hant/kotlin/native-migration-guide">遷移指南</a> 進行必要的更改。</p><h3 id="變更我們的目標層級策略" tabindex="-1">變更我們的目標層級策略 <a class="header-anchor" href="#變更我們的目標層級策略" aria-label="Permalink to &quot;變更我們的目標層級策略&quot;">​</a></h3><p>我們已決定升級 <a href="/zh-Hant/kotlin/native-target-support#tier-1">層級 1 支援</a> 的要求。Kotlin 團隊現在 致力於為符合層級 1 資格的目標提供編譯器版本之間的原始碼和二進位碼相容性。它們 還必須定期使用 CI 工具進行測試，才能編譯和執行。目前，層級 1 包含以下 macOS 主機目標：</p><ul><li><code>macosX64</code></li><li><code>macosArm64</code></li><li><code>iosSimulatorArm64</code></li><li><code>iosX64</code></li></ul><p>在 Kotlin 1.9.20 中，我們還移除了許多先前已棄用的目標，即：</p><ul><li><code>iosArm32</code></li><li><code>watchosX86</code></li><li><code>wasm32</code></li><li><code>mingwX86</code></li><li><code>linuxMips32</code></li><li><code>linuxMipsel32</code></li></ul><p>查看目前 <a href="/zh-Hant/kotlin/native-target-support">支援目標</a> 的完整列表。</p><h2 id="kotlin-multiplatform" tabindex="-1">Kotlin Multiplatform <a class="header-anchor" href="#kotlin-multiplatform" aria-label="Permalink to &quot;Kotlin Multiplatform&quot;">​</a></h2><p>Kotlin 1.9.20 專注於 Kotlin Multiplatform 的穩定化，並透過新的專案精靈和其他值得注意的功能，在改善開發人員體驗方面邁出了新的一步：</p><ul><li><a href="#kotlin-multiplatform-is-stable">Kotlin Multiplatform 穩定版</a></li><li><a href="#template-for-configuring-multiplatform-projects">配置多平台專案的範本</a></li><li><a href="#new-project-wizard">新專案精靈</a></li><li><a href="#full-support-for-the-gradle-configuration-cache-in-kotlin-multiplatform">全面支援 Gradle 配置快取</a></li><li><a href="#easier-configuration-of-new-standard-library-versions-in-gradle">更輕鬆地在 Gradle 中配置新標準函式庫版本</a></li><li><a href="#default-support-for-third-party-cinterop-libraries">預設支援第三方 cinterop 函式庫</a></li><li><a href="#support-for-kotlin-native-compilation-caches-in-compose-multiplatform-projects">支援 Compose Multiplatform 專案中的 Kotlin/Native 編譯快取</a></li><li><a href="#compatibility-guidelines">相容性指南</a></li></ul><h3 id="kotlin-multiplatform-穩定版" tabindex="-1">Kotlin Multiplatform 穩定版 <a class="header-anchor" href="#kotlin-multiplatform-穩定版" aria-label="Permalink to &quot;Kotlin Multiplatform 穩定版&quot;">​</a></h3><p>1.9.20 版本標誌著 Kotlin 演變的重要里程碑：<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/get-started.html" target="_blank" rel="noreferrer">Kotlin Multiplatform</a> 終於 變得穩定。這意味著該技術可以安全地用於您的專案，並且 100% 準備好用於生產環境。它還 意味著 Kotlin Multiplatform 的進一步開發將繼續遵循我們嚴格的 <a href="https://kotlinfoundation.org/language-committee-guidelines/" target="_blank" rel="noreferrer">向後相容性規則</a>。</p><p>請注意，Kotlin Multiplatform 的一些進階功能仍在發展中。使用它們時，您會收到一個警告，描述 您正在使用的功能的目前穩定狀態。在使用 IntelliJ IDEA 中的任何實驗性功能之前， 您需要明確地在 <strong>Settings (設定)</strong> | <strong>Advanced Settings (進階設定)</strong> | <strong>Kotlin</strong> | <strong>Experimental Multiplatform (實驗性多平台)</strong> 中啟用它。</p><ul><li>造訪 <a href="https://blog.jetbrains.com/kotlin/2023/11/kotlin-multiplatform-stable/" target="_blank" rel="noreferrer">Kotlin 部落格</a> 以了解更多關於 Kotlin Multiplatform 穩定化和未來計畫的資訊。</li><li>查看 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-compatibility-guide.html" target="_blank" rel="noreferrer">Multiplatform 相容性指南</a> 以了解在穩定化過程中進行了哪些重大變更。</li><li>閱讀有關 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-expect-actual.html" target="_blank" rel="noreferrer">預期和實際宣告機制</a> 的資訊，這是 Kotlin Multiplatform 的重要組成部分，在此版本中也部分穩定化。</li></ul><h3 id="配置多平台專案的範本" tabindex="-1">配置多平台專案的範本 <a class="header-anchor" href="#配置多平台專案的範本" aria-label="Permalink to &quot;配置多平台專案的範本&quot;">​</a></h3><p>從 Kotlin 1.9.20 開始，Kotlin Gradle 外掛程式會自動為常見的多平台場景建立共用原始碼集。 如果您的專案設定屬於這些場景之一，您不需要手動配置原始碼集階層。 只需明確指定專案所需的目標平台即可。</p><p>現在，由於預設階層範本（Kotlin Gradle 外掛程式的新功能），設定變得更容易。 它是一個內建於外掛程式中的原始碼集階層預定義範本。 它包含 Kotlin 為您宣告的目標自動建立的中間原始碼集。 <a href="#see-the-full-hierarchy-template">查看完整範本</a>。</p><h4 id="更輕鬆地建立專案" tabindex="-1">更輕鬆地建立專案 <a class="header-anchor" href="#更輕鬆地建立專案" aria-label="Permalink to &quot;更輕鬆地建立專案&quot;">​</a></h4><p>考慮一個同時針對 Android 和 iPhone 裝置的多平台專案，並在 Apple silicon MacBook 上開發。 比較此專案在不同 Kotlin 版本之間的設定方式：</p><table><tr><td>Kotlin 1.9.0 及更早版本（標準設定）</td><td>Kotlin 1.9.20</td></tr><tr><td><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    androidTarget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosSimulatorArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> commonMain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> getting</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> iosMain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> creating</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependsOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(commonMain)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> iosArm64Main </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependsOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(iosMain)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> iosSimulatorArm64Main </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependsOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(iosMain)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></td><td><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    androidTarget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosSimulatorArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // iosMain 原始碼集會自動建立</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></td></tr></table><p>請注意，使用預設階層範本如何大幅減少設定專案所需的樣板程式碼數量。</p><p>當您在程式碼中宣告 <code>androidTarget</code>、<code>iosArm64</code> 和 <code>iosSimulatorArm64</code> 目標時，Kotlin Gradle 外掛程式會從範本中找到 合適的共用原始碼集並為您建立它們。結果階層如下所示：</p>`,111)),a[2]||(a[2]=s("p",null,[s("img",{src:t,alt:"預設目標階層的使用範例",thumbnail:"true",width:"350","thumbnail-same-file":"true"})],-1)),a[3]||(a[3]=s("p",null,"綠色原始碼集是實際建立並包含在專案中的，而預設範本中的灰色原始碼集則被忽略。",-1)),a[4]||(a[4]=s("h4",{id:"使用原始碼集的自動完成功能",tabindex:"-1"},[n("使用原始碼集的自動完成功能 "),s("a",{class:"header-anchor",href:"#使用原始碼集的自動完成功能","aria-label":'Permalink to "使用原始碼集的自動完成功能"'},"​")],-1)),a[5]||(a[5]=s("p",null,"為了讓使用建立的專案結構更容易，IntelliJ IDEA 現在為使用預設階層範本建立的原始碼集提供自動完成功能：",-1)),a[6]||(a[6]=s("img",{src:e,alt:"IDE 原始碼集名稱自動完成",width:"350","preview-src":"multiplatform-hierarchy-completion.png"},null,-1)),a[7]||(a[7]=i(`<p>如果您嘗試存取不存在的原始碼集，Kotlin 也會發出警告，因為您尚未宣告相應的目標。 在下面的範例中，沒有 JVM 目標（只有 <code>androidTarget</code>，這不相同）。但是，讓我們嘗試使用 <code>jvmMain</code> 原始碼集 ，看看會發生什麼：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    androidTarget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosSimulatorArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        jvmMain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在這種情況下，Kotlin 會在建置日誌中報告警告：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>w: Accessed &#39;source set jvmMain&#39; without registering the jvm target:</span></span>
<span class="line"><span>  kotlin {</span></span>
<span class="line"><span>      jvm() /* &lt;- register the &#39;jvm&#39; target */</span></span>
<span class="line"><span></span></span>
<span class="line"><span>      sourceSets.jvmMain.dependencies {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>      }</span></span>
<span class="line"><span>  }</span></span></code></pre></div><h4 id="設定目標階層" tabindex="-1">設定目標階層 <a class="header-anchor" href="#設定目標階層" aria-label="Permalink to &quot;設定目標階層&quot;">​</a></h4><p>從 Kotlin 1.9.20 開始，預設階層範本會自動啟用。在大多數情況下，無需額外設定。</p><p>但是，如果您正在遷移在 1.9.20 之前建立的現有專案，如果您之前 手動使用 <code>dependsOn()</code> 呼叫引入了中間原始碼，您可能會遇到警告。為了解決此問題，請執行以下操作：</p><ul><li><p>如果您的中間原始碼集目前涵蓋在預設階層範本中，請移除所有手動的 <code>dependsOn()</code> 呼叫和使用 <code>by creating</code> 建構建立的原始碼集。</p><p>要檢查所有預設原始碼集的列表，請參閱 <a href="#see-the-full-hierarchy-template">完整階層範本</a>。</p></li><li><p>如果您想要擁有預設階層範本未提供的額外原始碼集，例如，一個在 macOS 和 JVM 目標之間 共用程式碼的原始碼集，請透過使用 <code>applyDefaultHierarchyTemplate()</code> 明確重新應用範本並像往常一樣使用 <code>dependsOn()</code> 手動配置額外原始碼集來調整階層：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    macosArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosSimulatorArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 明確應用預設階層。它將例如建立 iosMain 原始碼集：</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    applyDefaultHierarchyTemplate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 建立一個額外的 jvmAndMacos 原始碼集</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jvmAndMacos </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> creating</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependsOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(commonMain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        macosArm64Main.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependsOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(jvmAndMacos)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        jvmMain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependsOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(jvmAndMacos)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>如果您的專案中已經存在與範本產生的原始碼集名稱完全相同，但 在不同目標集之間共用的原始碼集，則目前無法修改範本原始碼集之間的預設 <code>dependsOn</code> 關係。</p><p>您在這裡的一個選項是為您的目的找到不同的原始碼集，無論是在預設階層範本中 還是手動建立的原始碼集。另一個選項是完全停用範本。</p><p>要停用，請將 <code>kotlin.mpp.applyDefaultHierarchyTemplate=false</code> 新增到您的 <code>gradle.properties</code> 並手動配置所有其他 原始碼集。</p><p>我們目前正在開發一個用於建立您自己的階層範本的 API，以簡化此類情況下的設定過程。</p></li></ul>`,8)),a[8]||(a[8]=s("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"查看完整階層範本",tabindex:"-1"},[n("查看完整階層範本 "),s("a",{class:"header-anchor",href:"#查看完整階層範本","aria-label":'Permalink to "查看完整階層範本 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),a[9]||(a[9]=i('<p>當您宣告專案要編譯的目標時， 外掛程式會相應地從範本中選擇共用原始碼集並在您的專案中建立它們。</p><p><img src="'+p+'" alt="預設階層範本"></p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>此範例僅顯示專案的生產部分，省略了 <code>Main</code> 後綴 (例如，使用 <code>common</code> 而不是 <code>commonMain</code>)。然而，對於 <code>*Test</code> 原始碼，一切都是相同的。</p></div><h3 id="新專案精靈" tabindex="-1">新專案精靈 <a class="header-anchor" href="#新專案精靈" aria-label="Permalink to &quot;新專案精靈&quot;">​</a></h3><p>JetBrains 團隊正在引入一種新的跨平台專案建立方式 – <a href="https://kmp.jetbrains.com" target="_blank" rel="noreferrer">Kotlin Multiplatform 網路精靈</a>。</p><p>新的 Kotlin Multiplatform 精靈的首次實作涵蓋了最受歡迎的 Kotlin Multiplatform 用例。它整合了以前專案範本的所有回饋意見，並使架構盡可能穩健和可靠。</p><p>新的精靈採用分散式架構，允許我們擁有統一的後端和 不同的前端，其中網路版本是第一步。我們正在考慮在未來實作 IDE 版本和 建立命令列工具。在網路上，您始終可以獲得最新版本的精靈，而在 IDE 中，您需要等待下一個版本。</p><p>有了新的精靈，專案設定比以往任何時候都更容易。您可以透過 選擇行動、伺服器和桌面開發的目標平台來根據您的需求自訂專案。我們還計畫在未來版本中新增網路開發。</p><img src="'+o+'" alt="多平台網路精靈" width="400"><p>新專案精靈現在是使用 Kotlin 建立跨平台專案的首選方式。自 1.9.20 起，Kotlin 外掛程式不再在 IntelliJ IDEA 中提供 <strong>Kotlin Multiplatform</strong> 專案精靈。</p><p>新的精靈將輕鬆引導您完成初始設定，使入門過程更加順暢。 如果您遇到任何問題，請將其報告給 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a>，以幫助我們改善您的精靈使用體驗。</p><a href="https://kmp.jetbrains.com"><img src="'+r+`" alt="建立專案" style=""></a><h3 id="全面支援-gradle-配置快取" tabindex="-1">全面支援 Gradle 配置快取 <a class="header-anchor" href="#全面支援-gradle-配置快取" aria-label="Permalink to &quot;全面支援 Gradle 配置快取&quot;">​</a></h3><p>以前，我們為 Kotlin 多平台函式庫引入了 Gradle 配置快取的 <a href="/zh-Hant/kotlin/whatsnew19#preview-of-the-gradle-configuration-cache">預覽版</a>。在 1.9.20 中，Kotlin Multiplatform 外掛程式更進一步。</p><p>它現在支援 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-cocoapods-dsl-reference.html" target="_blank" rel="noreferrer">Kotlin CocoaPods Gradle 外掛程式</a> 中的 Gradle 配置快取， 以及 Xcode 建置所需的整合任務，例如 <code>embedAndSignAppleFrameworkForXcode</code>。</p><p>現在所有多平台專案都可以利用改進的建置時間。 Gradle 配置快取透過重複使用配置階段的結果來加速建置過程。 有關更多詳細資訊和設定說明，請參閱 <a href="https://docs.gradle.org/current/userguide/configuration_cache.html#config_cache:usage" target="_blank" rel="noreferrer">Gradle 文件</a>。</p><h3 id="更輕鬆地在-gradle-中配置新標準函式庫版本" tabindex="-1">更輕鬆地在 Gradle 中配置新標準函式庫版本 <a class="header-anchor" href="#更輕鬆地在-gradle-中配置新標準函式庫版本" aria-label="Permalink to &quot;更輕鬆地在 Gradle 中配置新標準函式庫版本&quot;">​</a></h3><p>當您建立多平台專案時，標準函式庫 (<code>stdlib</code>) 的依賴項會自動新增到每個 原始碼集中。這是開始使用多平台專案最簡單的方法。</p><p>以前，如果您想手動配置對標準函式庫的依賴項，您需要為 每個原始碼集單獨配置它。從 <code>kotlin-stdlib:1.9.20</code> 開始，您只需在 <code>commonMain</code> 根原始碼集中<strong>配置一次</strong>依賴項：</p><table><tr><td>標準函式庫版本 1.9.10 及更早版本</td><td>標準函式庫版本 1.9.20</td></tr><tr><td><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 對於 common 原始碼集</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> commonMain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.kotlin:kotlin-stdlib-common:1.9.10&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 對於 JVM 原始碼集</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jvmMain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.kotlin:kotlin-stdlib:1.9.10&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 對於 JS 原始碼集</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jsMain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.kotlin:kotlin-stdlib-js:1.9.10&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></td><td><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        commonMain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.kotlin:kotlin-stdlib:1.9.20&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></td></tr></table><p>此變更由於標準函式庫的 Gradle 後設資料中包含新資訊而成為可能。這允許 Gradle 自動解析其他原始碼集的正確標準函式庫構件。</p><h3 id="預設支援第三方-cinterop-函式庫" tabindex="-1">預設支援第三方 cinterop 函式庫 <a class="header-anchor" href="#預設支援第三方-cinterop-函式庫" aria-label="Permalink to &quot;預設支援第三方 cinterop 函式庫&quot;">​</a></h3><p>Kotlin 1.9.20 新增了對所有 cinterop 依賴項的預設支援（而非選用加入），適用於套用了 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-cocoapods-overview.html" target="_blank" rel="noreferrer">Kotlin CocoaPods Gradle</a> 外掛程式的專案。</p><p>這意味著您現在可以共用更多原生程式碼，而無需受限於平台特定的依賴項。例如，您可以將 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-cocoapods-libraries.html" target="_blank" rel="noreferrer">對 Pod 函式庫的依賴項</a> 新增到 <code>iosMain</code> 共用原始碼集。</p><p>以前，這僅適用於 Kotlin/Native 發行版隨附的<a href="/zh-Hant/kotlin/native-platform-libs">平台特定函式庫</a>（例如 Foundation、UIKit 和 POSIX）。所有第三方 Pod 函式庫現在預設在共用原始碼集中可用。您不再需要指定單獨的 Gradle 屬性來支援它們。</p><h3 id="支援-compose-multiplatform-專案中的-kotlin-native-編譯快取" tabindex="-1">支援 Compose Multiplatform 專案中的 Kotlin/Native 編譯快取 <a class="header-anchor" href="#支援-compose-multiplatform-專案中的-kotlin-native-編譯快取" aria-label="Permalink to &quot;支援 Compose Multiplatform 專案中的 Kotlin/Native 編譯快取&quot;">​</a></h3><p>此版本解決了與 Compose Multiplatform 編譯器外掛程式的相容性問題，該問題主要影響 iOS 的 Compose Multiplatform 專案。</p><p>為了解決此問題，您必須使用 <code>kotlin.native.cacheKind=none</code> Gradle 屬性停用快取。然而，此 解決方法會帶來效能成本：由於快取在 Kotlin/Native 編譯器中不起作用，它會降低編譯時間。</p><p>現在問題已修復，您可以從 <code>gradle.properties</code> 檔案中移除 <code>kotlin.native.cacheKind=none</code>，並在 Compose Multiplatform 專案中享受 改進的編譯時間。</p><p>有關提高編譯時間的更多提示，請參閱 <a href="/zh-Hant/kotlin/native-improving-compilation-time">Kotlin/Native 文件</a>。</p><h3 id="相容性指南" tabindex="-1">相容性指南 <a class="header-anchor" href="#相容性指南" aria-label="Permalink to &quot;相容性指南&quot;">​</a></h3><p>配置專案時，請檢查 Kotlin Multiplatform Gradle 外掛程式與可用 Gradle、Xcode 和 Android Gradle 外掛程式 (AGP) 版本的相容性：</p><table tabindex="0"><thead><tr><th>Kotlin Multiplatform Gradle 外掛程式</th><th>Gradle</th><th>Android Gradle 外掛程式</th><th>Xcode</th></tr></thead><tbody><tr><td>1.9.20</td><td>7.5 及更高版本</td><td>7.4.2–8.2</td><td>15.0。請參閱下方詳細資訊</td></tr></tbody></table><p>截至此版本，Xcode 的推薦版本為 15.0。Xcode 15.0 隨附的函式庫已完全支援， 您可以從 Kotlin 程式碼中的任何位置存取它們。</p><p>然而，Xcode 14.3 在大多數情況下仍應能正常運作。請記住，如果您在本機上使用 14.3 版， Xcode 15 隨附的函式庫將可見但無法存取。</p><h2 id="kotlin-wasm" tabindex="-1">Kotlin/Wasm <a class="header-anchor" href="#kotlin-wasm" aria-label="Permalink to &quot;Kotlin/Wasm&quot;">​</a></h2><p>在 1.9.20 中，Kotlin Wasm 達到了 <a href="/zh-Hant/kotlin/components-stability">Alpha (測試版) 穩定性</a>。</p><ul><li><a href="#compatibility-with-wasm-gc-phase-4-and-final-opcodes">與 Wasm GC 第 4 階段和最終操作碼的相容性</a></li><li><a href="#new-wasm-wasi-target-and-the-renaming-of-the-wasm-target-to-wasm-js">新的 <code>wasm-wasi</code> 目標，以及將 <code>wasm</code> 目標重新命名為 <code>wasm-js</code></a></li><li><a href="#support-for-the-wasi-api-in-the-standard-library">標準函式庫中對 WASI API 的支援</a></li><li><a href="#kotlin-wasm-api-improvements">Kotlin/Wasm API 改進</a></li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Kotlin Wasm 為 <a href="/zh-Hant/kotlin/components-stability">Alpha (測試版)</a>。 它可能隨時變更。僅供評估之用。 我們非常感謝您在 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a> 中提供回饋意見。</p></div><h3 id="與-wasm-gc-第-4-階段和最終操作碼的相容性" tabindex="-1">與 Wasm GC 第 4 階段和最終操作碼的相容性 <a class="header-anchor" href="#與-wasm-gc-第-4-階段和最終操作碼的相容性" aria-label="Permalink to &quot;與 Wasm GC 第 4 階段和最終操作碼的相容性&quot;">​</a></h3><p>Wasm GC 進入最後階段，需要更新操作碼 – 在二進位表示中使用的常數數字。 Kotlin 1.9.20 支援最新的操作碼，因此我們強烈建議您將 Wasm 專案更新到最新的 Kotlin 版本。 我們還建議在 Wasm 環境中使用最新版本的瀏覽器：</p><ul><li>Chrome 和基於 Chromium 的瀏覽器版本 119 或更高版本。</li><li>Firefox 版本 119 或更高版本。請注意，在 Firefox 119 中，您需要<a href="/zh-Hant/kotlin/wasm-troubleshooting">手動開啟 Wasm GC</a>。</li></ul><h3 id="新的-wasm-wasi-目標-以及將-wasm-目標重新命名為-wasm-js" tabindex="-1">新的 wasm-wasi 目標，以及將 wasm 目標重新命名為 wasm-js <a class="header-anchor" href="#新的-wasm-wasi-目標-以及將-wasm-目標重新命名為-wasm-js" aria-label="Permalink to &quot;新的 wasm-wasi 目標，以及將 wasm 目標重新命名為 wasm-js&quot;">​</a></h3><p>在此版本中，我們為 Kotlin/Wasm 引入了一個新目標 – <code>wasm-wasi</code>。我們還將 <code>wasm</code> 目標重新命名為 <code>wasm-js</code>。 在 Gradle DSL 中，這些目標分別以 <code>wasmWasi {}</code> 和 <code>wasmJs {}</code> 的形式提供。</p><p>要在專案中使用這些目標，請更新 <code>build.gradle.kts</code> 檔案：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    wasmWasi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    wasmJs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>先前引入的 <code>wasm {}</code> 區塊已棄用，改用 <code>wasmJs {}</code>。</p><p>要遷移現有的 Kotlin/Wasm 專案，請執行以下操作：</p><ul><li>在 <code>build.gradle.kts</code> 檔案中，將 <code>wasm {}</code> 區塊重新命名為 <code>wasmJs {}</code>。</li><li>在您的專案結構中，將 <code>wasmMain</code> 目錄重新命名為 <code>wasmJsMain</code>。</li></ul><h3 id="標準函式庫中對-wasi-api-的支援" tabindex="-1">標準函式庫中對 WASI API 的支援 <a class="header-anchor" href="#標準函式庫中對-wasi-api-的支援" aria-label="Permalink to &quot;標準函式庫中對 WASI API 的支援&quot;">​</a></h3><p>在此版本中，我們支援 <a href="https://github.com/WebAssembly/WASI" target="_blank" rel="noreferrer">WASI</a>，這是 Wasm 平台的系統介面。 WASI 支援讓您更容易在瀏覽器外部使用 Kotlin/Wasm，例如在伺服器端應用程式中，透過提供 一組標準化的 API 來存取系統資源。此外，WASI 還提供基於能力的安全性 – 存取外部資源時的另一層安全性。</p><p>要執行 Kotlin/Wasm 應用程式，您需要一個支援 Wasm 垃圾收集 (GC) 的 VM，例如 Node.js 或 Deno。 Wasmtime、WasmEdge 和其他 VM 仍在努力實現完整的 Wasm GC 支援。</p><p>要匯入 WASI 函式，請使用 <code>@WasmImport</code> 註解：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.wasm.WasmImport</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@WasmImport</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;wasi_snapshot_preview1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;clock_time_get&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> external</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> wasiRawClockTimeGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(clockId: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, precision: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, resultPtr: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span></span></code></pre></div><p><a href="https://github.com/Kotlin/kotlin-wasm-examples/tree/main/wasi-example" target="_blank" rel="noreferrer">您可以在我們的 GitHub 儲存庫中找到完整範例</a>。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>在以 <code>wasmWasi</code> 為目標時，無法使用 <a href="/zh-Hant/kotlin/wasm-js-interop">與 JavaScript 的互操作性</a>。</p></div><h3 id="kotlin-wasm-api-改進" tabindex="-1">Kotlin/Wasm API 改進 <a class="header-anchor" href="#kotlin-wasm-api-改進" aria-label="Permalink to &quot;Kotlin/Wasm API 改進&quot;">​</a></h3><p>此版本為 Kotlin/Wasm API 帶來了多項使用品質改進。 例如，您不再需要為 DOM 事件監聽器傳回值：</p><table><tr><td>1.9.20 之前</td><td>1.9.20 中</td></tr><tr><td><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    window.onload </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        document.body?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sayHello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></td><td><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    window.onload </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { document.body?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sayHello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></td></tr></table><h2 id="gradle" tabindex="-1">Gradle <a class="header-anchor" href="#gradle" aria-label="Permalink to &quot;Gradle&quot;">​</a></h2><p>Kotlin 1.9.20 與 Gradle 6.8.3 到 8.1 完全相容。您也可以使用到最新 Gradle 版本為止的 Gradle 版本，但如果您這樣做，請記住您可能會遇到棄用警告或一些新的 Gradle 功能可能無法使用。</p><p>此版本帶來了以下變更：</p><ul><li><a href="#support-for-test-fixtures-to-access-internal-declarations">支援測試夾具存取內部宣告</a></li><li><a href="#new-property-to-configure-paths-to-konan-directories">配置 Konan 目錄路徑的新屬性</a></li><li><a href="#new-build-report-metrics-for-kotlin-native-tasks">Kotlin/Native 任務的新建置報告指標</a></li></ul><h3 id="支援測試夾具存取內部宣告" tabindex="-1">支援測試夾具存取內部宣告 <a class="header-anchor" href="#支援測試夾具存取內部宣告" aria-label="Permalink to &quot;支援測試夾具存取內部宣告&quot;">​</a></h3><p>在 Kotlin 1.9.20 中，如果您使用 Gradle 的 <code>java-test-fixtures</code> 外掛程式，則您的 <a href="https://docs.gradle.org/current/userguide/java_testing.html#sec:java_test_fixtures" target="_blank" rel="noreferrer">測試夾具</a> 現在可以存取主原始碼集類別中的 <code>internal</code> 宣告。此外，任何測試原始碼也可以看到測試夾具類別中的任何 <code>internal</code> 宣告。</p><h3 id="配置-konan-目錄路徑的新屬性" tabindex="-1">配置 Konan 目錄路徑的新屬性 <a class="header-anchor" href="#配置-konan-目錄路徑的新屬性" aria-label="Permalink to &quot;配置 Konan 目錄路徑的新屬性&quot;">​</a></h3><p>在 Kotlin 1.9.20 中，<code>kotlin.data.dir</code> Gradle 屬性可用於自訂您的 <code>~/.konan</code> 目錄路徑， 這樣您就不必透過環境變數 <code>KONAN_DATA_DIR</code> 進行配置。</p><p>或者，您可以使用 <code>-Xkonan-data-dir</code> 編譯器選項，透過 <code>cinterop</code> 和 <code>konanc</code> 工具配置您的自訂 <code>~/.konan</code> 目錄路徑。</p><h3 id="kotlin-native-任務的新建置報告指標" tabindex="-1">Kotlin/Native 任務的新建置報告指標 <a class="header-anchor" href="#kotlin-native-任務的新建置報告指標" aria-label="Permalink to &quot;Kotlin/Native 任務的新建置報告指標&quot;">​</a></h3><p>在 Kotlin 1.9.20 中，Gradle 建置報告現在包含 Kotlin/Native 任務的指標。這是一個包含這些指標的建置報告範例：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Total time for Kotlin tasks: 20.81 s (93.1 % of all tasks time)</span></span>
<span class="line"><span>Time   |% of Kotlin time|Task                            </span></span>
<span class="line"><span>15.24 s|73.2 %          |:compileCommonMainKotlinMetadata</span></span>
<span class="line"><span>5.57 s |26.8 %          |:compileNativeMainKotlinMetadata</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Task &#39;:compileCommonMainKotlinMetadata&#39; finished in 15.24 s</span></span>
<span class="line"><span>Task info:</span></span>
<span class="line"><span>  Kotlin language version: 2.0</span></span>
<span class="line"><span>Time metrics:</span></span>
<span class="line"><span>  Total Gradle task time: 15.24 s</span></span>
<span class="line"><span>  Spent time before task action: 0.16 s</span></span>
<span class="line"><span>  Task action before worker execution: 0.21 s</span></span>
<span class="line"><span>  Run native in process: 2.70 s</span></span>
<span class="line"><span>    Run entry point: 2.64 s</span></span>
<span class="line"><span>Size metrics:</span></span>
<span class="line"><span>  Start time of task action: 2023-07-27T11:04:17</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Task &#39;:compileNativeMainKotlinMetadata&#39; finished in 5.57 s</span></span>
<span class="line"><span>Task info:</span></span>
<span class="line"><span>  Kotlin language version: 2.0</span></span>
<span class="line"><span>Time metrics:</span></span>
<span class="line"><span>  Total Gradle task time: 5.57 s</span></span>
<span class="line"><span>  Spent time before task action: 0.04 s</span></span>
<span class="line"><span>  Task action before worker execution: 0.02 s</span></span>
<span class="line"><span>  Run native in process: 1.48 s</span></span>
<span class="line"><span>    Run entry point: 1.47 s</span></span>
<span class="line"><span>Size metrics:</span></span>
<span class="line"><span>  Start time of task action: 2023-07-27T11:04:32</span></span></code></pre></div><p>此外，<code>kotlin.experimental.tryK2</code> 建置報告現在包含任何已編譯的 Kotlin/Native 任務，並列出 使用的語言版本：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>##### &#39;kotlin.experimental.tryK2&#39; results #####</span></span>
<span class="line"><span>:lib:compileCommonMainKotlinMetadata: 2.0 language version</span></span>
<span class="line"><span>:lib:compileKotlinJvm: 2.0 language version</span></span>
<span class="line"><span>:lib:compileKotlinIosArm64: 2.0 language version</span></span>
<span class="line"><span>:lib:compileKotlinIosSimulatorArm64: 2.0 language version</span></span>
<span class="line"><span>:lib:compileKotlinLinuxX64: 2.0 language version</span></span>
<span class="line"><span>:lib:compileTestKotlinJvm: 2.0 language version</span></span>
<span class="line"><span>:lib:compileTestKotlinIosSimulatorArm64: 2.0 language version</span></span>
<span class="line"><span>:lib:compileTestKotlinLinuxX64: 2.0 language version</span></span>
<span class="line"><span>##### 100% (8/8) tasks have been compiled with Kotlin 2.0 #####</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>如果您使用 Gradle 8.0，您可能會遇到一些建置報告問題，尤其是在啟用 Gradle 配置 快取時。這是一個已知問題，已在 Gradle 8.1 及更高版本中修復。</p></div><h2 id="標準函式庫" tabindex="-1">標準函式庫 <a class="header-anchor" href="#標準函式庫" aria-label="Permalink to &quot;標準函式庫&quot;">​</a></h2><p>在 Kotlin 1.9.20 中，<a href="#the-kotlin-native-standard-library-becomes-stable">Kotlin/Native 標準函式庫變得穩定</a>， 並有一些新功能：</p><ul><li><a href="#replacement-of-the-enum-class-values-generic-function">替換 Enum 類別值泛型函式</a></li><li><a href="#improved-performance-of-hashmap-operations-in-kotlin-js">Kotlin/JS 中 HashMap 操作的效能改進</a></li></ul><h3 id="替換-enum-類別值泛型函式" tabindex="-1">替換 Enum 類別值泛型函式 <a class="header-anchor" href="#替換-enum-類別值泛型函式" aria-label="Permalink to &quot;替換 Enum 類別值泛型函式&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>此功能是 <a href="/zh-Hant/kotlin/components-stability#stability-levels-explained">Experimental (實驗性功能)</a>。它可能隨時被移除或變更。 需要選用加入 (請參閱下方詳細資訊)。僅將其用於評估目的。我們非常感謝您在 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a> 中提供回饋意見。</p></div><p>在 Kotlin 1.9.0 中，enum 類別的 <code>entries</code> 屬性變得穩定。<code>entries</code> 屬性是 <code>values()</code> 合成函式的現代高效能替代品。作為 Kotlin 1.9.20 的一部分，有 <code>enumEntries&lt;T&gt;()</code> 替換泛型 <code>enumValues&lt;T&gt;()</code> 函式。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>enumValues&lt;T&gt;()</code> 函式仍受支援，但我們建議您改用 <code>enumEntries&lt;T&gt;()</code> 函式， 因為它的效能影響較小。每次呼叫 <code>enumValues&lt;T&gt;()</code> 時，都會建立一個新陣列，而每次 呼叫 <code>enumEntries&lt;T&gt;()</code> 時，都會傳回相同的列表，效率更高。</p></div><p>例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">enum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RGB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { RED, GREEN, BLUE }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalStdlibApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">inline</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reified</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Enum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printAllValues</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">enumEntries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">joinToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.name })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printAllValues</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RGB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// RED, GREEN, BLUE</span></span></code></pre></div><h4 id="如何啟用-enumentries-函式" tabindex="-1">如何啟用 enumEntries 函式 <a class="header-anchor" href="#如何啟用-enumentries-函式" aria-label="Permalink to &quot;如何啟用 enumEntries 函式&quot;">​</a></h4><p>要嘗試此功能，請使用 <code>@OptIn(ExperimentalStdlibApi)</code> 選用加入，並使用語言版本 1.9 或更高版本。如果您使用 最新版本的 Kotlin Gradle 外掛程式，則無需指定語言版本即可測試該功能。</p><h3 id="kotlin-native-標準函式庫變得穩定" tabindex="-1">Kotlin/Native 標準函式庫變得穩定 <a class="header-anchor" href="#kotlin-native-標準函式庫變得穩定" aria-label="Permalink to &quot;Kotlin/Native 標準函式庫變得穩定&quot;">​</a></h3><p>在 Kotlin 1.9.0 中，我們<a href="/zh-Hant/kotlin/whatsnew19#the-kotlin-native-standard-library-s-journey-towards-stabilization">解釋了</a>我們為使 Kotlin/Native 標準函式庫更接近穩定化目標所採取的行動。在 Kotlin 1.9.20 中， 我們最終完成了這項工作，並使 Kotlin/Native 標準函式庫穩定。以下是此版本的一些亮點：</p><ul><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlinx.cinterop/-vector128/" target="_blank" rel="noreferrer"><code>Vector128</code></a> 類別已從 <code>kotlin.native</code> 套件移至 <code>kotlinx.cinterop</code> 套件。</li><li><code>ExperimentalNativeApi</code> 和 <code>NativeRuntimeApi</code> 註解（作為 Kotlin 1.9.0 的一部分引入）的選用加入要求等級已從 <code>WARNING</code> 提高到 <code>ERROR</code>。</li><li>Kotlin/Native 集合現在會偵測並行修改，例如在 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-array-list/" target="_blank" rel="noreferrer"><code>ArrayList</code></a> 和 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-hash-map/" target="_blank" rel="noreferrer"><code>HashMap</code></a> 集合中。</li><li><code>Throwable</code> 類別的 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-throwable/print-stack-trace.html" target="_blank" rel="noreferrer"><code>printStackTrace()</code></a> 函式現在會列印到 <code>STDERR</code> 而不是 <code>STDOUT</code>。<div class="danger custom-block"><p class="custom-block-title">WARNING</p><p><code>printStackTrace()</code> 的輸出格式不穩定，可能隨時變更。</p></div></li></ul><h4 id="atomics-api-的改進" tabindex="-1">Atomics API 的改進 <a class="header-anchor" href="#atomics-api-的改進" aria-label="Permalink to &quot;Atomics API 的改進&quot;">​</a></h4><p>在 Kotlin 1.9.0 中，我們曾表示當 Kotlin/Native 標準函式庫穩定時，Atomics API 將準備好穩定。 Kotlin 1.9.20 包含以下額外變更：</p><ul><li>引入了實驗性 <code>AtomicIntArray</code>、<code>AtomicLongArray</code> 和 <code>AtomicArray&lt;T&gt;</code> 類別。這些新類別 專門設計用於與 Java 的原子陣列保持一致，以便將來它們可以包含在通用標準函式庫中。<div class="danger custom-block"><p class="custom-block-title">WARNING</p><p><code>AtomicIntArray</code>、<code>AtomicLongArray</code> 和 <code>AtomicArray&lt;T&gt;</code> 類別是 <a href="/zh-Hant/kotlin/components-stability#stability-levels-explained">Experimental (實驗性功能)</a>。它們可能隨時被移除或變更。要 嘗試它們，請使用 <code>@OptIn(ExperimentalStdlibApi)</code> 選用加入。僅將它們用於評估目的。我們非常感謝您在 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a> 中提供回饋意見。</p></div></li><li>在 <code>kotlin.native.concurrent</code> 套件中，在 Kotlin 1.9.0 中已棄用且棄用等級為 <code>WARNING</code> 的 Atomics API，其棄用等級已提高到 <code>ERROR</code>。</li><li>在 <code>kotlin.concurrent</code> 套件中，已移除 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.concurrent/-atomic-int/index.html" target="_blank" rel="noreferrer"><code>AtomicInt</code></a> 和 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.concurrent/-atomic-long/index.html" target="_blank" rel="noreferrer"><code>AtomicLong</code></a> 類別中棄用等級為 <code>ERROR</code> 的成員函式。</li><li><code>AtomicReference</code> 類別的 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.concurrent/-atomic-reference/#functions" target="_blank" rel="noreferrer">所有成員函式</a> 現在都使用原子內聯函式。</li></ul><p>有關 Kotlin 1.9.20 中所有變更的更多資訊，請參閱我們的 <a href="https://youtrack.jetbrains.com/issue/KT-61028/Behavioural-changes-to-the-Native-stdlib-API" target="_blank" rel="noreferrer">YouTrack 票證</a>。</p><h3 id="kotlin-js-中-hashmap-操作的效能改進" tabindex="-1">Kotlin/JS 中 HashMap 操作的效能改進 <a class="header-anchor" href="#kotlin-js-中-hashmap-操作的效能改進" aria-label="Permalink to &quot;Kotlin/JS 中 HashMap 操作的效能改進&quot;">​</a></h3><p>Kotlin 1.9.20 改進了 Kotlin/JS 中 <code>HashMap</code> 操作的效能並減少了其記憶體佔用。在內部， Kotlin/JS 已將其內部實作變更為開放定址。這意味著當您：</p><ul><li>將新元素插入 <code>HashMap</code> 時，您應該會看到效能改進。</li><li>搜尋 <code>HashMap</code> 中現有元素時。</li><li>迭代 <code>HashMap</code> 中的鍵或值時。</li></ul><h2 id="文件更新" tabindex="-1">文件更新 <a class="header-anchor" href="#文件更新" aria-label="Permalink to &quot;文件更新&quot;">​</a></h2><p>Kotlin 文件收到了一些值得注意的變更：</p><ul><li><a href="https://kotlinlang.org/api/kotlinx-metadata-jvm/" target="_blank" rel="noreferrer">JVM 中繼資料</a> API 參考 – 探索如何使用 Kotlin/JVM 解析中繼資料。</li><li><a href="/zh-Hant/kotlin/time-measurement">時間測量指南</a> – 學習如何在 Kotlin 中計算和測量時間。</li><li><a href="/zh-Hant/kotlin/kotlin-tour-welcome">Kotlin 導覽</a> 中改進的集合章節 – 學習 Kotlin 程式設計語言的基礎知識，章節包括理論和實踐。</li><li><a href="/zh-Hant/kotlin/generics#definitely-non-nullable-types">明確不可為 null 的類型</a> – 學習明確不可為 null 的泛型類型。</li><li>改進的 <a href="/zh-Hant/kotlin/arrays">陣列頁面</a> – 學習陣列以及何時使用它們。</li><li><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-expect-actual.html" target="_blank" rel="noreferrer">Kotlin Multiplatform 中的預期和實際宣告</a> – 學習 Kotlin Multiplatform 中 Kotlin 預期和實際宣告機制。</li></ul><h2 id="安裝-kotlin-1-9-20" tabindex="-1">安裝 Kotlin 1.9.20 <a class="header-anchor" href="#安裝-kotlin-1-9-20" aria-label="Permalink to &quot;安裝 Kotlin 1.9.20&quot;">​</a></h2><h3 id="檢查-ide-版本" tabindex="-1">檢查 IDE 版本 <a class="header-anchor" href="#檢查-ide-版本" aria-label="Permalink to &quot;檢查 IDE 版本&quot;">​</a></h3><p><a href="https://www.jetbrains.com/idea/download/" target="_blank" rel="noreferrer">IntelliJ IDEA</a> 2023.1.x 和 2023.2.x 會自動建議將 Kotlin 外掛程式更新到 1.9.20 版。IntelliJ IDEA 2023.3 將包含 Kotlin 1.9.20 外掛程式。</p><p>Android Studio Hedgehog (231) 和 Iguana (232) 將在其即將推出的版本中支援 Kotlin 1.9.20。</p><p>新的命令列編譯器可在 <a href="https://github.com/JetBrains/kotlin/releases/tag/v1.9.20" target="_blank" rel="noreferrer">GitHub 發佈頁面</a> 下載。</p><h3 id="配置-gradle-設定" tabindex="-1">配置 Gradle 設定 <a class="header-anchor" href="#配置-gradle-設定" aria-label="Permalink to &quot;配置 Gradle 設定&quot;">​</a></h3><p>要下載 Kotlin 構件和依賴項，請更新您的 <code>settings.gradle(.kts)</code> 檔案以使用 Maven Central 儲存庫：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pluginManagement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    repositories</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        mavenCentral</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        gradlePluginPortal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>如果未指定儲存庫，Gradle 會使用已棄用的 JCenter 儲存庫，這可能導致 Kotlin 構件問題。</p>`,107))])}const x=h(g,[["render",m]]);export{w as __pageData,x as default};
