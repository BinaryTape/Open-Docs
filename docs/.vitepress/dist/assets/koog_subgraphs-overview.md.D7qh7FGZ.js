import{_ as e,c as r,o as i,ag as l}from"./chunks/framework.Bksy39di.js";const u=JSON.parse('{"title":"概述","description":"","frontmatter":{},"headers":[],"relativePath":"koog/subgraphs-overview.md","filePath":"koog/subgraphs-overview.md","lastUpdated":1754431054000}'),o={name:"koog/subgraphs-overview.md"};function t(s,a,p,h,n,d){return i(),r("div",null,a[0]||(a[0]=[l('<h1 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h1><p>本页面详细介绍了 Koog framework 中的子图。理解这些概念对于创建跨多个处理步骤维护上下文的复杂代理工作流至关重要。</p><h2 id="引言" tabindex="-1">引言 <a class="header-anchor" href="#引言" aria-label="Permalink to &quot;引言&quot;">​</a></h2><p>子图是 Koog framework 中的一个基本概念，它允许您将复杂的代理工作流拆解成可管理的、按序的步骤。每个子图都代表一个处理阶段，具有其自身的上下文、职责以及可选的工具子集。</p><p>子图是策略的组成部分，策略是代表整体代理工作流的图。关于策略的更多信息，请参见 <a href="./custom-strategy-graphs">自定义策略图</a>。</p><h2 id="理解子图" tabindex="-1">理解子图 <a class="header-anchor" href="#理解子图" aria-label="Permalink to &quot;理解子图&quot;">​</a></h2><p>子图是代理策略中一个自包含的处理单元。每个子图：</p><ul><li>具有唯一名称</li><li>包含由边连接的节点或子图的图</li><li>可以使用工具注册表中的任何工具或工具子集</li><li>从上一个子图（或初始用户输入）接收输入</li><li>生成输出并将其传递给下一个子图（或最终输出）</li></ul><p>要在图中定义子图序列，请使用边连接或使用 <code>then</code> 关键字定义序列。关于更多信息，请参见 <a href="./custom-strategy-graphs">自定义策略图</a>。</p><h3 id="子图上下文" tabindex="-1">子图上下文 <a class="header-anchor" href="#子图上下文" aria-label="Permalink to &quot;子图上下文&quot;">​</a></h3><p>每个子图都在一个上下文中执行，该上下文提供对以下各项的访问：</p><ul><li>环境</li><li>代理输入</li><li>代理配置</li><li>LLM 上下文（包括对话历史记录）</li><li>状态管理器</li><li>存储</li><li>会话和策略</li></ul><p>上下文会传递给子图中的每个节点，并提供节点执行其操作所需的资源。</p>',13)]))}const _=e(o,[["render",t]]);export{u as __pageData,_ as default};
