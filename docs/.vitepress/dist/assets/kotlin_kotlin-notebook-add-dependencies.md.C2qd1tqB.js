import{_ as n}from"./chunks/icon-1-done.ZX9lW-aj.js";import{_ as l}from"./chunks/icon-2-done.DCMUaFG5.js";import{_ as e}from"./chunks/icon-3.BwKvTetO.js";import{_ as p,a as o,b as k}from"./chunks/kandy-library.BjUNQ4SJ.js";import{_ as h,C as r,c as d,o as E,j as s,G as c,ag as g,a,w as y}from"./chunks/framework.Bksy39di.js";const w=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/kotlin-notebook-add-dependencies.md","filePath":"kotlin/kotlin-notebook-add-dependencies.md","lastUpdated":1754307826000}'),b={name:"kotlin/kotlin-notebook-add-dependencies.md"};function u(m,i,F,f,D,C){const t=r("tldr");return E(),d("div",null,[i[1]||(i[1]=s("h1",{id:"向-kotlin-notebook-添加依赖项",tabindex:"-1"},[a("向 Kotlin Notebook 添加依赖项 "),s("a",{class:"header-anchor",href:"#向-kotlin-notebook-添加依赖项","aria-label":'Permalink to "向 Kotlin Notebook 添加依赖项"'},"​")],-1)),c(t,null,{default:y(()=>i[0]||(i[0]=[s("p",null,[a("这是 "),s("strong",null,"Kotlin Notebook 入门"),a("教程的第三部分。在继续之前，请确保您已完成之前的步骤。")],-1),s("p",null,[s("img",{src:n,width:"20",alt:"First step"}),a(),s("a",{href:"/kotlin/kotlin-notebook-set-up-env"},"设置环境"),s("br"),s("img",{src:l,width:"20",alt:"Second step"}),a(),s("a",{href:"/kotlin/kotlin-notebook-create"},"创建 Kotlin Notebook"),s("br"),s("img",{src:e,width:"20",alt:"Third step"}),a(),s("strong",null,"向 Kotlin Notebook 添加依赖项"),s("br")],-1)])),_:1}),i[2]||(i[2]=g(`<p>您已经创建了您的第一个 <a href="/kotlin/kotlin-notebook-overview">Kotlin Notebook</a>！现在让我们学习如何向库添加依赖项，这对于解锁高级特性是必要的。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Kotlin 标准库可以开箱即用，因此您无需导入它。</p></div><p>您可以通过在任何代码单元格中使用 Gradle 风格语法指定其坐标，从 Maven 版本库加载任何库。但是，Kotlin Notebook 有一种简化的方法来加载常用库，即 <a href="https://www.jetbrains.com/help/idea/kotlin-notebook.html#import-libraries" target="_blank" rel="noreferrer"><code>%use</code> 语句</a>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 将 libraryName 替换为您要添加的库依赖项</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">use libraryName</span></span></code></pre></div><p>您还可以使用 Kotlin Notebook 中的自动补全特性来快速访问可用库：</p><p><img src="`+p+`" alt="Autocompletion feature in Kotlin Notebook" width="700"></p><h2 id="向您的-kotlin-notebook-添加-kotlin-dataframe-和-kandy-库" tabindex="-1">向您的 Kotlin Notebook 添加 Kotlin DataFrame 和 Kandy 库 <a class="header-anchor" href="#向您的-kotlin-notebook-添加-kotlin-dataframe-和-kandy-库" aria-label="Permalink to &quot;向您的 Kotlin Notebook 添加 Kotlin DataFrame 和 Kandy 库&quot;">​</a></h2><p>让我们向您的 Kotlin Notebook 添加两个常用的 Kotlin 库依赖项：</p><ul><li><a href="https://kotlin.github.io/dataframe/gettingstarted.html" target="_blank" rel="noreferrer">Kotlin DataFrame 库</a>使您能够操纵 Kotlin 项目中的数据。您可以使用它从 <a href="/kotlin/data-analysis-work-with-api">APIs</a>、<a href="/kotlin/data-analysis-connect-to-db">SQL 数据库</a>以及 <a href="/kotlin/data-analysis-work-with-data-sources">各种文件格式</a>（例如 CSV 或 JSON）检索数据。</li><li><a href="https://kotlin.github.io/kandy/welcome.html" target="_blank" rel="noreferrer">Kandy 库</a>提供了一个强大而灵活的 DSL，用于<a href="/kotlin/data-analysis-visualization">创建图表</a>。</li></ul><p>要添加这些库：</p><ol><li><p>点击 <strong>Add Code Cell</strong> 以创建一个新的代码单元格。</p></li><li><p>在代码单元格中输入以下代码：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 确保使用最新可用的库版本</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">useLatestDescriptors</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 导入 Kotlin DataFrame 库</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">use dataframe</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 导入 Kotlin Kandy 库</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">use kandy</span></span></code></pre></div></li><li><p>运行该代码单元格。</p><p>当 <code>%use</code> 语句执行时，它会下载库依赖项并向您的 Notebook 添加默认导入项。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>请务必在运行任何其他依赖于该库的代码单元格之前，运行包含 <code>%use libraryName</code> 行的代码单元格。</p></div></li><li><p>要使用 Kotlin DataFrame 库从 CSV 文件导入数据，请在新代码单元格中使用 <code>.read()</code> 函数：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 通过从 &quot;netflix_titles.csv&quot; 文件导入数据来创建 DataFrame。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rawDf </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DataFrame.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;netflix_titles.csv&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 显示原始 DataFrame 数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rawDf</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>您可以从 <a href="https://github.com/Kotlin/dataframe/blob/master/examples/notebooks/netflix/netflix_titles.csv" target="_blank" rel="noreferrer">Kotlin DataFrame 示例 GitHub 版本库</a>下载此示例 CSV。 将其添加到您的项目目录。</p></div><p><img src="`+o+`" alt="Using DataFrame to display data" width="700"></p></li><li><p>在新的代码单元格中，使用 <code>.plot</code> 方法可视化表示 DataFrame 中电视节目和电影的分布：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rawDf</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 统计名为 &quot;type&quot; 列中每个唯一值的出现次数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">valueCounts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sort </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { type }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 在条形图（指定颜色）中可视化数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        bars</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;count&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            fillColor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                scale </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> categorical</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(range </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Color.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#00BCD4&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), Color.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#009688&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 配置图表布局并设置标题</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        layout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            title </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;电视节目和电影计数&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            size </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 900</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> to </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">550</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre></div></li></ol><p>结果图表：</p><p><img src="`+k+'" alt="Visualization using the Kandy library" width="700"></p><p>恭喜您成功添加并利用这些库到您的 Kotlin Notebook！这只是您可以通过 Kotlin Notebook 及其<a href="/kotlin/data-analysis-libraries">支持的库</a>实现的一瞥。</p><h2 id="下一步" tabindex="-1">下一步 <a class="header-anchor" href="#下一步" aria-label="Permalink to &quot;下一步&quot;">​</a></h2><ul><li>学习如何<a href="/kotlin/kotlin-notebook-share">共享您的 Kotlin Notebook</a></li><li>查看更多关于<a href="https://www.jetbrains.com/help/idea/kotlin-notebook.html#add-dependencies" target="_blank" rel="noreferrer">向您的 Kotlin Notebook 添加依赖项</a>的详细信息</li><li>有关使用 Kotlin DataFrame 库的更详尽指南，请参见<a href="/kotlin/data-analysis-work-with-data-sources">从文件检索数据</a></li><li>有关 Kotlin 中可用于数据科学和分析的工具和资源的详尽概述，请参见<a href="/kotlin/data-analysis-libraries">用于数据分析的 Kotlin 和 Java 库</a></li></ul>',16))])}const B=h(b,[["render",u]]);export{w as __pageData,B as default};
