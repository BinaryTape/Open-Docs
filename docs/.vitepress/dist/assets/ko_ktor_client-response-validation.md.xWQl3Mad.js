import{_ as k,C as t,c as r,o,j as i,G as e,ag as d,a,w as n}from"./chunks/framework.Bksy39di.js";const f=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ko/ktor/client-response-validation.md","filePath":"ko/ktor/client-response-validation.md","lastUpdated":1755457140000}'),c={name:"ko/ktor/client-response-validation.md"};function E(g,s,y,u,x,F){const l=t("show-structure"),p=t("tldr"),h=t("link-summary");return o(),r("div",null,[s[2]||(s[2]=i("h1",{id:"응답-유효성-검사",tabindex:"-1"},[a("응답 유효성 검사 "),i("a",{class:"header-anchor",href:"#응답-유효성-검사","aria-label":'Permalink to "응답 유효성 검사"'},"​")],-1)),e(l,{for:"chapter",depth:"2"}),e(p,null,{default:n(()=>s[0]||(s[0]=[i("p",null,[i("b",null,"코드 예시"),a(": "),i("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/client-validate-2xx-response"},"client-validate-2xx-response"),a(", "),i("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/client-validate-non-2xx-response"},"client-validate-non-2xx-response")],-1)])),_:1}),e(h,null,{default:n(()=>s[1]||(s[1]=[a(" 응답의 상태 코드에 따라 유효성을 검사하는 방법을 알아봅니다. ")])),_:1}),s[3]||(s[3]=d(`<p>기본적으로 Ktor는 상태 코드에 따라 <a href="./client-responses">응답</a>의 유효성을 검사하지 않습니다. 필요한 경우 다음 유효성 검사 전략을 사용할 수 있습니다.</p><ul><li><code>expectSuccess</code> 속성을 사용하여 2xx가 아닌 응답에 대해 예외를 발생시킵니다.</li><li>2xx 응답에 대한 더 엄격한 유효성 검사를 추가합니다.</li><li>2xx가 아닌 응답의 유효성 검사를 사용자 지정합니다.</li></ul><h2 id="default" tabindex="-1">기본 유효성 검사 활성화 <a class="header-anchor" href="#default" aria-label="Permalink to &quot;기본 유효성 검사 활성화 {id=&quot;default&quot;}&quot;">​</a></h2><p>Ktor를 사용하면 <code>expectSuccess</code> 속성을 <code>true</code>로 설정하여 기본 유효성 검사를 활성화할 수 있습니다. 이 작업은 <a href="./client-create-and-configure#configure-client">클라이언트 구성</a> 수준에서 수행할 수 있습니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.engine.cio.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    expectSuccess </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>... 또는 <a href="./client-requests#parameters">요청</a> 수준에서 동일한 속성을 사용하여 수행할 수 있습니다. 이 경우, 2xx가 아닌 오류 응답에 대해 다음 예외가 발생합니다.</p><ul><li>3xx 응답의 경우 <a href="https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins/-redirect-response-exception/index.html" target="_blank" rel="noreferrer">RedirectResponseException</a>.</li><li>4xx 응답의 경우 <a href="https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins/-client-request-exception/index.html" target="_blank" rel="noreferrer">ClientRequestException</a>.</li><li>5xx 응답의 경우 <a href="https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins/-server-response-exception/index.html" target="_blank" rel="noreferrer">ServerResponseException</a>.</li></ul><h2 id="custom" tabindex="-1">사용자 지정 유효성 검사 <a class="header-anchor" href="#custom" aria-label="Permalink to &quot;사용자 지정 유효성 검사 {id=&quot;custom&quot;}&quot;">​</a></h2><p><a href="https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins/-http-call-validator" target="_blank" rel="noreferrer">HttpCallValidator</a> 플러그인을 사용하여 2xx 응답에 대한 추가 유효성 검사를 추가하거나 기본 유효성 검사를 사용자 지정할 수 있습니다. <code>HttpCallValidator</code>를 설치하려면 <a href="./client-create-and-configure#configure-client">클라이언트 구성 블록</a> 내에서 <a href="https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins/-http-response-validator.html" target="_blank" rel="noreferrer">HttpResponseValidator</a> 함수를 호출합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    HttpResponseValidator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="2xx" tabindex="-1">2xx 응답 유효성 검사 <a class="header-anchor" href="#2xx" aria-label="Permalink to &quot;2xx 응답 유효성 검사 {id=&quot;2xx&quot;}&quot;">​</a></h3><p>위에서 언급했듯이, <a href="#default">기본 유효성 검사</a>는 2xx가 아닌 오류 응답에 대해 예외를 발생시킵니다. 2xx 응답에 대한 더 엄격한 유효성 검사 및 확인이 필요한 경우, <code>HttpCallValidator</code>에서 사용할 수 있는 <a href="https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins/-http-call-validator-config/validate-response.html" target="_blank" rel="noreferrer">validateResponse</a> 함수를 사용합니다.</p><p>아래 <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/client-validate-2xx-response" target="_blank" rel="noreferrer">예시</a>에서 클라이언트는 <a href="./client-serialization">JSON</a> 형식으로 오류 세부 정보가 포함된 2xx 응답을 수신합니다. <code>validateResponse</code>는 <code>CustomResponseException</code>을 발생시키는 데 사용됩니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ContentNegotiation) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    HttpResponseValidator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        validateResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { response </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> error: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Error</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (error.code </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                throw</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CustomResponseException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(response, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Code: \${error.code}, message: \${error.message}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="non-2xx" tabindex="-1">2xx가 아닌 예외 처리 <a class="header-anchor" href="#non-2xx" aria-label="Permalink to &quot;2xx가 아닌 예외 처리 {id=&quot;non-2xx&quot;}&quot;">​</a></h3><p><a href="#default">기본 유효성 검사</a>를 사용자 지정하고 2xx가 아닌 응답에 대한 예외를 특정 방식으로 처리해야 하는 경우, <a href="https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins/-http-call-validator-config/handle-response-exception-with-request.html" target="_blank" rel="noreferrer">handleResponseExceptionWithRequest</a>를 사용합니다. 아래 <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/client-validate-non-2xx-response" target="_blank" rel="noreferrer">예시</a>에서 클라이언트는 기본 <code>ClientRequestException</code> 대신 404 응답에 대해 사용자 지정 <code>MissingPageException</code>을 발생시킵니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    expectSuccess </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    HttpResponseValidator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        handleResponseExceptionWithRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { exception, request </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clientException </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exception </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? ClientRequestException ?: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@handleResponseExceptionWithRequest</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exceptionResponse </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clientException.response</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (exceptionResponse.status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HttpStatusCode.NotFound) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exceptionResponseText </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exceptionResponse.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bodyAsText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                throw</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MissingPageException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(exceptionResponse, exceptionResponseText)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,17))])}const m=k(c,[["render",E]]);export{f as __pageData,m as default};
