import{_ as i,c as a,o as n,ag as h}from"./chunks/framework.Bksy39di.js";const g=JSON.parse('{"title":"Kotlin/Nativeのデバッグ","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/native-debugging.md","filePath":"ja/kotlin/native-debugging.md","lastUpdated":1754307826000}'),k={name:"ja/kotlin/native-debugging.md"};function l(t,s,p,F,e,r){return n(),a("div",null,s[0]||(s[0]=[h(`<h1 id="kotlin-nativeのデバッグ" tabindex="-1">Kotlin/Nativeのデバッグ <a class="header-anchor" href="#kotlin-nativeのデバッグ" aria-label="Permalink to &quot;Kotlin/Nativeのデバッグ&quot;">​</a></h1><p>現在、Kotlin/NativeコンパイラはDWARF 2仕様に準拠したデバッグ情報を生成するため、最新のデバッガツールは以下の操作を実行できます。</p><ul><li>ブレークポイント</li><li>ステッピング</li><li>型情報の検査</li><li>変数検査</li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>DWARF 2仕様をサポートするということは、デバッガツールがKotlinをC89として認識することを意味します。これは、DWARF 5仕様以前には、仕様にKotlin言語の型を識別するものが存在しないためです。</p></div><h2 id="kotlin-nativeコンパイラでデバッグ情報付きバイナリを生成する" tabindex="-1">Kotlin/Nativeコンパイラでデバッグ情報付きバイナリを生成する <a class="header-anchor" href="#kotlin-nativeコンパイラでデバッグ情報付きバイナリを生成する" aria-label="Permalink to &quot;Kotlin/Nativeコンパイラでデバッグ情報付きバイナリを生成する&quot;">​</a></h2><p>Kotlin/Nativeコンパイラでバイナリを生成するには、コマンドラインで<code>-g</code>オプションを使用します。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">0:b-debugger-fixes:minamoto@unit-703(0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)# cat - </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hello.kt</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fun</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">args:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Array</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Strin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">g</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  println(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;Hello world&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  println(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;I need your clothes, your boots and your motocycle&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">0:b-debugger-fixes:minamoto@unit-703(0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)# dist/bin/konanc -g hello.kt -o terminator</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KtFile:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.kt</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">0:b-debugger-fixes:minamoto@unit-703(0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)# lldb terminator.kexe</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lldb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">target</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;terminator.kexe&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Current</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> executable</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;terminator.kexe&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x86_64).</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lldb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kfun:main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin.Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;kotlin.String&gt;)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Breakpoint</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 1:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> where</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> terminator.kexe\`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kfun:main(kotlin.Array</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;kotlin.String&gt;) + 4 at hello.kt:2, address = 0x00000001000012e4</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lldb</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">r</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Process</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 28473</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> launched: &#39;/Users/minamoto/ws/.git-trees/debugger-fixes/terminator.kexe&#39; (x86_64)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Process</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 28473</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stopped</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> thread </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 1.1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    frame</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> #0: 0x00000001000012e4 terminator.kexe\`kfun:main(kotlin.Array&lt;kotlin.String&gt;) at hello.kt:2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    fun main(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">args:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Array</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&gt; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      println(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;Hello world&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      println(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;I need your clothes, your boots and your motocycle&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   4</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    }</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lldb</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">n</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Hello</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> world</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Process</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 28473</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stopped</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> thread </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#1, queue = &#39;com.apple.main-thread&#39;, stop reason = step over</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    frame</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> #0: 0x00000001000012f0 terminator.kexe\`kfun:main(kotlin.Array&lt;kotlin.String&gt;) at hello.kt:3</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    fun main(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">args:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Array</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      println(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;Hello world&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&gt; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      println(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;I need your clothes, your boots and your motocycle&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   4</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    }</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lldb</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span></span></code></pre></div><h2 id="ブレークポイント" tabindex="-1">ブレークポイント <a class="header-anchor" href="#ブレークポイント" aria-label="Permalink to &quot;ブレークポイント&quot;">​</a></h2><p>最新のデバッガはブレークポイントを設定するいくつかの方法を提供しています。ツールごとの内訳については以下を参照してください。</p><h3 id="lldb" tabindex="-1">lldb <a class="header-anchor" href="#lldb" aria-label="Permalink to &quot;lldb&quot;">​</a></h3><ul><li><p>名前で</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lldb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">b</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kfun:main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin.Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;kotlin.String&gt;)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Breakpoint</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 4:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> where</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> terminator.kexe\`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kfun:main(kotlin.Array</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;kotlin.String&gt;) + 4 at hello.kt:2, address = 0x00000001000012e4</span></span></code></pre></div></li></ul><p><em><code>-n</code>はオプションです。このフラグはデフォルトで適用されます</em></p><ul><li><p>場所で (ファイル名、行番号)</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lldb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">b</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.kt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -l</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Breakpoint</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 1:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> where</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> terminator.kexe\`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kfun:main(kotlin.Array</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;kotlin.String&gt;) + 4 at hello.kt:2, address = 0x00000001000012e4</span></span></code></pre></div></li><li><p>アドレスで</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lldb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">b</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -a</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0x00000001000012e4</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Breakpoint</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 2:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> address</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0x00000001000012e4</span></span></code></pre></div></li><li><p>正規表現で、ラムダなどの生成された成果物のデバッグに役立つ場合があります (名前に<code>#</code>記号が使用されている場合)。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">3:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> regex</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;main\\(&#39;,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> locations</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  3.1:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> where</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> terminator.kexe\`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kfun:main(kotlin.Array</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;kotlin.String&gt;) + 4 at hello.kt:2, address = terminator.kexe[0x00000001000012e4], unresolved, hit count = 0</span></span></code></pre></div></li></ul><h3 id="gdb" tabindex="-1">gdb <a class="header-anchor" href="#gdb" aria-label="Permalink to &quot;gdb&quot;">​</a></h3><ul><li><p>正規表現で</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gdb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rbreak</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Breakpoint</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> at</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0x1000109b4</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">struct</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ktype:kotlin.Unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kfun:main(kotlin.Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;kotlin.String&gt;);</span></span></code></pre></div></li><li><p>名前で <strong>使用不可</strong>、<code>:</code>が場所によるブレークポイントの区切り文字であるため</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gdb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kfun:main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin.Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;kotlin.String&gt;)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">No</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> source</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> file</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> named</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kfun.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> breakpoint</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pending</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> on</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> future</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> shared</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> library</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> load?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (y </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">or</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [n]) y</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Breakpoint</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (kfun:main(kotlin.Array&lt;kotlin.String&gt;)) pending</span></span></code></pre></div></li><li><p>場所で</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gdb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.kt:1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Breakpoint</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 0x100001704:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> file</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /Users/minamoto/ws/.git-trees/hello.kt,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> line</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 1.</span></span></code></pre></div></li><li><p>アドレスで</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gdb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">b</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">0x100001704</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Note:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> breakpoint</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> also</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 0x100001704.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Breakpoint</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> at</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 0x100001704:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> file</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /Users/minamoto/ws/.git-trees/hello.kt,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> line</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 2.</span></span></code></pre></div></li></ul><h2 id="ステッピング" tabindex="-1">ステッピング <a class="header-anchor" href="#ステッピング" aria-label="Permalink to &quot;ステッピング&quot;">​</a></h2><p>ステッピング関数は、C/C++プログラムの場合とほぼ同じように機能します。</p><h2 id="変数検査" tabindex="-1">変数検査 <a class="header-anchor" href="#変数検査" aria-label="Permalink to &quot;変数検査&quot;">​</a></h2><p><code>var</code>変数に対する変数検査は、プリミティブ型の場合にはすぐに機能します。 非プリミティブ型の場合、<code>konan_lldb.py</code>にlldb用のカスタムプリティプリンターがあります。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">λ</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main.kt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> nl</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  fun</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">args:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Array</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Strin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">g</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      var</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> x</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      var</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> y</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     4</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      var</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Point</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">x,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     5</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;p = </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$p</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     6</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     7</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  data</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> class</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Point</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">val</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> x:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Int,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> val</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> y:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">λ</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lldb</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./program.kexe</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;b main.kt:5&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lldb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">target</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;./program.kexe&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Current</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> executable</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./program.kexe&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x86_64).</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lldb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main.kt:5</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Breakpoint</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 1:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> where</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> program.kexe\`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kfun:main(kotlin.Array</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;kotlin.String&gt;) + 289 at main.kt:5, address = 0x000000000040af11</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lldb</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">r</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Process</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4985</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stopped</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> thread </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#1, name = &#39;program.kexe&#39;, stop reason = breakpoint 1.1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    frame</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> #0: program.kexe\`kfun:main(kotlin.Array&lt;kotlin.String&gt;) at main.kt:5</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        var x = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        var y = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   4</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        var p = Point(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">x,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> y)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&gt; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        println(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;p = </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$p</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   6</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   7</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   8</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    data class Point(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">val</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> x: Int, val y: Int)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Process</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4985</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> launched: &#39;./program.kexe&#39; (x86_64)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lldb</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fr</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> var</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">int</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">x</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">int</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">y</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ObjHeader</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x00000000007643d8</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lldb</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">) </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">command</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> script import dist/tools/konan_lldb.py</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lldb</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fr</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> var</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">int</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">x</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">int</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">y</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ObjHeader</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> = [x: ..., y: ...]</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lldb</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> p</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ObjHeader</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">) </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> = [x: ..., y: ...]</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lldb</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">script</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lldb.frame.FindVariable(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;p&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">).GetChildMemberWithName(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;x&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">).Dereference().GetValue()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&#39;1&#39;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lldb</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span></span></code></pre></div><p>オブジェクト変数(<code>var</code>)の表現を取得するには、ビルトインランタイム関数<code>Konan_DebugPrint</code>を使用することもできます (このアプローチは、コマンド構文のモジュールを使用することでgdbでも機能します)。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">0:b-debugger-fixes:minamoto@unit-703(0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)# cat ../debugger-plugin/1.kt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> nl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  fun</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">a:String,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> b:Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> b</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  fun</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> one</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  fun</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">arg:Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;String&gt;) </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     4</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    var</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a_variable</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;(a_variable) one is &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     5</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    var</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> b_variable</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;(b_variable) two is &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     6</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    var</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> c_variable</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;(c_variable) two is &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     7</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    var</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> d_variable</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;(d_variable) two is &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     8</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">a_variable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">     9</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">b_variable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    10</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">c_variable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    11</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">d_variable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    12</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">0:b-debugger-fixes:minamoto@unit-703(0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)# lldb ./program.kexe -o </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;b -f 1.kt -l 9&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> -o r</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lldb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">target</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;./program.kexe&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Current</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> executable</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> set</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./program.kexe&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x86_64).</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lldb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">b</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 1.kt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -l</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 9</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Breakpoint</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 1:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> where</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> program.kexe\`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kfun:main(kotlin.Array</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;kotlin.String&gt;) + 463 at 1.kt:9, address = 0x0000000100000dbf</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lldb</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">r</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">a_variable</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">one</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> is </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Process</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 80496</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stopped</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> thread </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#1, queue = &#39;com.apple.main-thread&#39;, stop reason = breakpoint 1.1</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    frame</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> #0: 0x0000000100000dbf program.kexe\`kfun:main(kotlin.Array&lt;kotlin.String&gt;) at 1.kt:9</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   6</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      var c_variable = foo(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;(c_variable) two is &quot;,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   7</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      var d_variable = foo(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;(d_variable) two is &quot;,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   8</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      println(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">a_variable</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&gt; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      println(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">b_variable</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   10</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     println(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">c_variable</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   11</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     println(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">d_variable</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   12</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Process</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 80496</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> launched: &#39;./program.kexe&#39; (x86_64)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lldb</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">expression</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> (int32_t)Konan_DebugPrint(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">a_variable</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">a_variable</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">one</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> is </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">int32_t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">) </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lldb</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span></span></code></pre></div><h2 id="既知の問題" tabindex="-1">既知の問題 <a class="header-anchor" href="#既知の問題" aria-label="Permalink to &quot;既知の問題&quot;">​</a></h2><ul><li>Pythonバインディングのパフォーマンス。</li></ul>`,24)]))}const y=i(k,[["render",l]]);export{g as __pageData,y as default};
