import{_ as e,a as o,b as l}from"./chunks/wasm-performance-compose.D4ElAMQ8.js";import{_ as t}from"./chunks/slack.7XnOPcJK.js";import{_ as r,c as s,o as i,ag as m}from"./chunks/framework.Bksy39di.js";const K=JSON.parse('{"title":"Kotlin/Wasm","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/wasm-overview.md","filePath":"ja/kotlin/wasm-overview.md","lastUpdated":1754307826000}'),n={name:"ja/kotlin/wasm-overview.md"};function p(c,a,h,f,b,k){return i(),s("div",null,a[0]||(a[0]=[m('<h1 id="kotlin-wasm" tabindex="-1">Kotlin/Wasm <a class="header-anchor" href="#kotlin-wasm" aria-label="Permalink to &quot;Kotlin/Wasm&quot;">​</a></h1><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Kotlin/Wasmは<a href="/ja/kotlin/components-stability">アルファ版</a>です。 いつでも変更される可能性があります。プロダクション前のシナリオでご利用いただけます。<a href="https://youtrack.jetbrains.com/issue/KT-56492" target="_blank" rel="noreferrer">YouTrack</a>にてフィードバックをいただけると幸いです。 <a href="https://slack-chats.kotlinlang.org/c/webassembly" target="_blank" rel="noreferrer">Kotlin/Wasmコミュニティに参加</a>しましょう。</p></div><p>Kotlin/Wasmは、Kotlinコードを<a href="https://webassembly.org/" target="_blank" rel="noreferrer">WebAssembly (Wasm)</a>形式にコンパイルする機能を提供します。 Kotlin/Wasmを使用すると、Wasmをサポートし、Kotlinの要件を満たす様々な環境やデバイスで動作するアプリケーションを作成できます。</p><p>Wasmは、スタックベースの仮想マシンのためのバイナリ命令形式です。この形式は、独自の仮想マシン上で動作するため、 プラットフォームに依存しません。Wasmは、Kotlinやその他の言語にコンパイルターゲットを提供します。</p><p>Kotlin/Wasmは、ブラウザなどの様々なターゲット環境で利用できます。例えば、<a href="https://www.jetbrains.com/lp/compose-multiplatform/" target="_blank" rel="noreferrer">Compose Multiplatform</a>で構築された Webアプリケーションの開発や、ブラウザ外のスタンドアロンWasm仮想マシンで利用可能です。ブラウザ外のケースでは、 <a href="https://wasi.dev/" target="_blank" rel="noreferrer">WebAssembly System Interface (WASI)</a>がプラットフォームAPIへのアクセスを提供し、これも利用できます。</p><h2 id="kotlin-wasmとcompose-multiplatform" tabindex="-1">Kotlin/WasmとCompose Multiplatform <a class="header-anchor" href="#kotlin-wasmとcompose-multiplatform" aria-label="Permalink to &quot;Kotlin/WasmとCompose Multiplatform&quot;">​</a></h2><p>Kotlinを使用すると、Compose MultiplatformとKotlin/Wasmを介して、モバイルおよびデスクトップのユーザーインターフェース (UI) をWebプロジェクトで再利用し、アプリケーションを構築する能力が得られます。</p><p><a href="https://www.jetbrains.com/lp/compose-multiplatform/" target="_blank" rel="noreferrer">Compose Multiplatform</a>は、Kotlinと<a href="https://developer.android.com/jetpack/compose" target="_blank" rel="noreferrer">Jetpack Compose</a>に基づく宣言型フレームワークであり、UIを一度実装するだけで、ターゲットとするすべてのプラットフォームで共有できます。</p><p>Webプラットフォーム向けには、Compose MultiplatformはKotlin/Wasmをコンパイルターゲットとして使用します。Kotlin/WasmとCompose Multiplatformで構築されたアプリケーションは、<code>wasm-js</code>ターゲットを使用し、ブラウザで動作します。</p><p><a href="https://zal.im/wasm/jetsnack/" target="_blank" rel="noreferrer">Compose MultiplatformとKotlin/Wasmで構築されたアプリケーションのオンラインデモを体験</a>してください</p><p><img src="'+e+'" alt="Kotlin/Wasm demo" width="700"></p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Kotlin/Wasmで構築されたアプリケーションをブラウザで実行するには、新しいガベージコレクションとレガシー例外処理のプロポーザルをサポートするブラウザバージョンが必要です。ブラウザのサポート状況を確認するには、<a href="https://webassembly.org/roadmap/" target="_blank" rel="noreferrer">WebAssembly roadmap</a>を参照してください。</p></div><p>さらに、Kotlin/Wasmでは、最も人気のあるKotlinライブラリをすぐに利用できます。他のKotlinおよびMultiplatformプロジェクトと同様に、ビルドスクリプトに依存関係宣言を含めることができます。詳細については、<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-add-dependencies.html" target="_blank" rel="noreferrer">マルチプラットフォームライブラリへの依存関係の追加</a>を参照してください。</p><p>ご自身で試してみませんか？</p><p><a href="/ja/kotlin/wasm-get-started"><img src="'+o+'" width="600" alt="Get started with Kotlin/Wasm" style=""></a></p><h2 id="kotlin-wasmとwasi" tabindex="-1">Kotlin/WasmとWASI <a class="header-anchor" href="#kotlin-wasmとwasi" aria-label="Permalink to &quot;Kotlin/WasmとWASI&quot;">​</a></h2><p>Kotlin/Wasmは、サーバーサイドアプリケーション向けに<a href="https://wasi.dev/" target="_blank" rel="noreferrer">WebAssembly System Interface (WASI)</a>を使用します。 Kotlin/WasmとWASIで構築されたアプリケーションは、Wasm-WASIターゲットを使用するため、WASI APIを呼び出し、ブラウザ環境外でアプリケーションを実行できます。</p><p>Kotlin/WasmはWASIを活用してプラットフォーム固有の詳細を抽象化し、同じKotlinコードを多様なプラットフォームで実行できるようにします。これにより、各ランタイムでカスタム処理を必要とすることなく、Kotlin/Wasmの適用範囲がWebアプリケーション以外にも拡大します。</p><p>WASIは、WebAssemblyにコンパイルされたKotlinアプリケーションを様々な環境で実行するための、安全な標準インターフェースを提供します。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Kotlin/WasmとWASIの動作を確認するには、<a href="/ja/kotlin/wasm-wasi">Kotlin/WasmとWASI入門チュートリアル</a>をご覧ください。</p></div><h2 id="kotlin-wasmのパフォーマンス" tabindex="-1">Kotlin/Wasmのパフォーマンス <a class="header-anchor" href="#kotlin-wasmのパフォーマンス" aria-label="Permalink to &quot;Kotlin/Wasmのパフォーマンス&quot;">​</a></h2><p>Kotlin/Wasmはまだアルファ版ですが、Kotlin/Wasm上で動作するCompose Multiplatformは、すでに有望なパフォーマンス特性を示しています。その実行速度はJavaScriptを上回り、JVMのそれに近づいていることがわかります。</p><p><img src="'+l+'" alt="Kotlin/Wasm performance" width="700"></p><p>私たちはKotlin/Wasmで定期的にベンチマークを実行しており、これらの結果はGoogle Chromeの最新バージョンでのテストによるものです。</p><h2 id="ブラウザapiのサポート" tabindex="-1">ブラウザAPIのサポート <a class="header-anchor" href="#ブラウザapiのサポート" aria-label="Permalink to &quot;ブラウザAPIのサポート&quot;">​</a></h2><p>Kotlin/Wasm標準ライブラリは、DOM APIを含むブラウザAPIの宣言を提供します。 これらの宣言により、Kotlin APIを直接使用して、様々なブラウザ機能をアクセスおよび利用できます。例えば、Kotlin/Wasmアプリケーションでは、DOM要素の操作やAPIのフェッチを、これらの宣言をゼロから定義することなく利用できます。詳細については、<a href="https://github.com/Kotlin/kotlin-wasm-examples/tree/main/browser-example" target="_blank" rel="noreferrer">Kotlin/Wasmブラウザの例</a>をご覧ください。</p><p>ブラウザAPIサポートのための宣言は、JavaScriptの<a href="/ja/kotlin/wasm-js-interop">相互運用機能</a>を使用して定義されています。 同じ機能を使用して、独自の宣言を定義できます。さらに、Kotlin/WasmとJavaScriptの相互運用性により、JavaScriptからKotlinコードを使用できます。詳細については、<a href="/ja/kotlin/wasm-js-interop#use-kotlin-code-in-javascript">JavaScriptでKotlinコードを使用する</a>を参照してください。</p><h2 id="フィードバック" tabindex="-1">フィードバック <a class="header-anchor" href="#フィードバック" aria-label="Permalink to &quot;フィードバック&quot;">​</a></h2><h3 id="kotlin-wasmに関するフィードバック" tabindex="-1">Kotlin/Wasmに関するフィードバック <a class="header-anchor" href="#kotlin-wasmに関するフィードバック" aria-label="Permalink to &quot;Kotlin/Wasmに関するフィードバック&quot;">​</a></h3><ul><li><img src="'+t+'" alt="Slack" width="25" type="joined"> Slack: <a href="https://surveys.jetbrains.com/s3/kotlin-slack-sign-up" target="_blank" rel="noreferrer">Slackへの招待</a>を受け取り、<a href="https://kotlinlang.slack.com/archives/CDFP59223" target="_blank" rel="noreferrer">#webassembly</a>チャンネルで開発者に直接フィードバックを提供してください。</li><li><a href="https://youtrack.jetbrains.com/issue/KT-56492" target="_blank" rel="noreferrer">YouTrack</a>で問題があれば報告してください。</li></ul><h3 id="compose-multiplatformに関するフィードバック" tabindex="-1">Compose Multiplatformに関するフィードバック <a class="header-anchor" href="#compose-multiplatformに関するフィードバック" aria-label="Permalink to &quot;Compose Multiplatformに関するフィードバック&quot;">​</a></h3><ul><li><img src="'+t+'" alt="Slack" width="25" type="joined"> Slack: <a href="https://slack-chats.kotlinlang.org/c/compose-web" target="_blank" rel="noreferrer">#compose-web</a>公開チャンネルでフィードバックを提供してください。</li><li><a href="https://github.com/JetBrains/compose-multiplatform/issues" target="_blank" rel="noreferrer">GitHubで問題があれば報告してください</a>。</li></ul><h2 id="詳細情報" tabindex="-1">詳細情報 <a class="header-anchor" href="#詳細情報" aria-label="Permalink to &quot;詳細情報&quot;">​</a></h2><ul><li>Kotlin/Wasmの詳細については、こちらの<a href="https://kotl.in/wasm-pl" target="_blank" rel="noreferrer">YouTubeプレイリスト</a>をご覧ください。</li><li>GitHubリポジトリの<a href="https://github.com/Kotlin/kotlin-wasm-examples" target="_blank" rel="noreferrer">Kotlin/Wasmの例</a>をご覧ください。</li></ul>',34)]))}const w=r(n,[["render",p]]);export{K as __pageData,w as default};
