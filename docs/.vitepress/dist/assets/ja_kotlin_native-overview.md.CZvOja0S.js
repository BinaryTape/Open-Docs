import{_ as t}from"./chunks/native-get-started-button.Cbc-25HC.js";import{_ as e,c as i,o as l,ag as o}from"./chunks/framework.Bksy39di.js";const m=JSON.parse('{"title":"Kotlin/Native","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/native-overview.md","filePath":"ja/kotlin/native-overview.md","lastUpdated":1754307826000}'),r={name:"ja/kotlin/native-overview.md"};function n(p,a,h,c,v,s){return l(),i("div",null,a[0]||(a[0]=[o('<h1 id="kotlin-native" tabindex="-1">Kotlin/Native <a class="header-anchor" href="#kotlin-native" aria-label="Permalink to &quot;Kotlin/Native&quot;">​</a></h1><p>Kotlin/Nativeは、Kotlinコードを仮想マシンなしで実行できるネイティブバイナリにコンパイルするためのテクノロジーです。Kotlin/Nativeには、Kotlinコンパイラ用の<a href="https://llvm.org/" target="_blank" rel="noreferrer">LLVM</a>-ベースのバックエンドと、Kotlin標準ライブラリのネイティブ実装が含まれています。</p><h2 id="kotlin-nativeの利点" tabindex="-1">Kotlin/Nativeの利点 <a class="header-anchor" href="#kotlin-nativeの利点" aria-label="Permalink to &quot;Kotlin/Nativeの利点&quot;">​</a></h2><p>Kotlin/Nativeは、主に組み込みデバイスやiOSなど、_仮想マシン_が望ましくないまたは不可能なプラットフォーム向けにコンパイルできるように設計されています。追加のランタイムや仮想マシンを必要としない自己完結型プログラムを作成する必要がある場合に最適です。</p><p>コンパイルされたKotlinコードを、C、C++、Swift、Objective-C、その他の言語で記述された既存のプロジェクトに簡単に含めることができます。また、既存のネイティブコード、静的または動的Cライブラリ、Swift/Objective-Cフレームワーク、グラフィックエンジンなど、あらゆるものをKotlin/Nativeから直接使用できます。</p><p><a href="/ja/kotlin/native-get-started"><img src="'+t+'" width="350" alt="Kotlin/Nativeを始める" style=""></a></p><h2 id="ターゲットプラットフォーム" tabindex="-1">ターゲットプラットフォーム <a class="header-anchor" href="#ターゲットプラットフォーム" aria-label="Permalink to &quot;ターゲットプラットフォーム&quot;">​</a></h2><p>Kotlin/Nativeは以下のプラットフォームをサポートしています。</p><ul><li>Linux</li><li>Windows (<a href="https://www.mingw-w64.org/" target="_blank" rel="noreferrer">MinGW</a>経由)</li><li><a href="https://developer.android.com/ndk" target="_blank" rel="noreferrer">Android NDK</a></li><li>macOS、iOS、tvOS、watchOS向けのAppleターゲット</li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Appleターゲットをコンパイルするには、<a href="https://apps.apple.com/us/app/xcode/id497799835" target="_blank" rel="noreferrer">Xcode</a>とそのコマンドラインツールをインストールする必要があります。</p></div><p><a href="/ja/kotlin/native-target-support">サポートされているターゲットの全リストを見る</a>。</p><h2 id="相互運用性" tabindex="-1">相互運用性 <a class="header-anchor" href="#相互運用性" aria-label="Permalink to &quot;相互運用性&quot;">​</a></h2><p>Kotlin/Nativeは、異なるオペレーティングシステム向けのネイティブプログラミング言語との双方向の相互運用性をサポートしています。コンパイラは、多くのプラットフォーム向けの実行可能ファイル、静的または動的Cライブラリ、およびSwift/Objective-Cフレームワークを作成できます。</p><h3 id="cとの相互運用" tabindex="-1">Cとの相互運用 <a class="header-anchor" href="#cとの相互運用" aria-label="Permalink to &quot;Cとの相互運用&quot;">​</a></h3><p>Kotlin/Nativeは<a href="/ja/kotlin/native-c-interop">Cとの相互運用</a>を提供します。既存のCライブラリをKotlinコードから直接使用できます。</p><p>詳細については、以下のチュートリアルを完了してください。</p><ul><li><a href="/ja/kotlin/native-dynamic-libraries">C/C++プロジェクト向けのCヘッダー付き動的ライブラリを作成する</a></li><li><a href="/ja/kotlin/mapping-primitive-data-types-from-c">Cの型がKotlinにどのようにマッピングされるかを学ぶ</a></li><li><a href="/ja/kotlin/native-app-with-c-and-libcurl">C相互運用とlibcurlを使用してネイティブHTTPクライアントを作成する</a></li></ul><h3 id="swift-objective-cとの相互運用" tabindex="-1">Swift/Objective-Cとの相互運用 <a class="header-anchor" href="#swift-objective-cとの相互運用" aria-label="Permalink to &quot;Swift/Objective-Cとの相互運用&quot;">​</a></h3><p>Kotlin/Nativeは<a href="/ja/kotlin/native-objc-interop">Objective-Cを介したSwiftとの相互運用</a>を提供します。macOSおよびiOS上のSwift/Objective-CアプリケーションからKotlinコードを直接使用できます。</p><p>詳細については、<a href="/ja/kotlin/apple-framework">AppleフレームワークとしてのKotlin/Native</a>チュートリアルを完了してください。</p><h2 id="プラットフォーム間でのコード共有" tabindex="-1">プラットフォーム間でのコード共有 <a class="header-anchor" href="#プラットフォーム間でのコード共有" aria-label="Permalink to &quot;プラットフォーム間でのコード共有&quot;">​</a></h2><p>Kotlin/Nativeには、プロジェクト間でKotlinコードを共有するのに役立つ、事前ビルドされた<a href="/ja/kotlin/native-platform-libs">プラットフォームライブラリ</a>のセットが含まれています。POSIX、gzip、OpenGL、Metal、Foundation、その他多くの人気のあるライブラリやAppleフレームワークは、コンパイラパッケージにKotlin/Nativeライブラリとして事前インポートされ、含まれています。</p><p>Kotlin/Nativeは、Android、iOS、JVM、Web、ネイティブなど、複数のプラットフォーム間で共通コードを共有するのに役立つ<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/get-started.html" target="_blank" rel="noreferrer">Kotlin Multiplatform</a>テクノロジーの一部です。マルチプラットフォームライブラリは、共通のKotlinコードに必要なAPIを提供し、プロジェクトの共有部分をすべてKotlinで一箇所に記述することを可能にします。</p><h2 id="メモリマネージャ" tabindex="-1">メモリマネージャ <a class="header-anchor" href="#メモリマネージャ" aria-label="Permalink to &quot;メモリマネージャ&quot;">​</a></h2><p>Kotlin/Nativeは、JVMやGoに似た自動<a href="/ja/kotlin/native-memory-manager">メモリマネージャ</a>を使用します。独自のトレース型ガベージコレクタを持ち、Swift/Objective-CのARCとも統合されています。</p><p>メモリ消費量はカスタムメモリ割り当て器によって制御されます。これによりメモリ使用量が最適化され、メモリ割り当ての急増を防ぐのに役立ちます。</p>',26)]))}const b=e(r,[["render",n]]);export{m as __pageData,b as default};
