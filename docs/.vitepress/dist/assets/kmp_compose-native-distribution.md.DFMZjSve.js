import{_ as i,c as a,o as n,ag as t}from"./chunks/framework.Bksy39di.js";const E=JSON.parse('{"title":"原生分发包","description":"","frontmatter":{},"headers":[],"relativePath":"kmp/compose-native-distribution.md","filePath":"kmp/compose-native-distribution.md","lastUpdated":1755522191000}'),e={name:"kmp/compose-native-distribution.md"};function l(p,s,h,k,d,r){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="原生分发包" tabindex="-1">原生分发包 <a class="header-anchor" href="#原生分发包" aria-label="Permalink to &quot;原生分发包&quot;">​</a></h1><p>本部分你将了解原生分发包：如何为所有支持的系统创建安装程序和软件包，以及如何在本地以与分发包相同的设置运行应用程序。</p><p>请阅读以下内容的详细信息：</p><ul><li><a href="#gradle-plugin">Compose Multiplatform Gradle 插件是什么</a>？</li><li>关于<a href="#basic-tasks">基本任务</a>（例如在本地运行应用程序）和<a href="#minification-and-obfuscation">高级任务</a>（例如代码精简和混淆）的详细信息。</li><li><a href="#including-jdk-modules">如何包含 JDK 模块</a>以及处理 <code>ClassNotFoundException</code>。</li><li><a href="#specifying-distribution-properties">如何指定分发包属性</a>：包版本、JDK 版本、输出目录、启动器属性和元数据。</li><li><a href="#managing-resources">如何管理资源</a>：使用资源库、JVM 资源加载或将文件添加到打包的应用程序。</li><li><a href="#custom-source-sets">如何自定义源代码集</a>：使用 Gradle 源代码集、Kotlin JVM 目标或手动配置。</li><li><a href="#application-icon">如何为每个操作系统指定应用程序图标</a>。</li><li><a href="#platform-specific-options">平台特有选项</a>，例如 Linux 上软件包维护者的电子邮件以及 macOS 上 Apple App Store 的应用类别。</li><li><a href="#macos-specific-configuration">macOS 特有配置</a>：签名、公证和 <code>Info.plist</code>。</li></ul><h2 id="gradle-插件" tabindex="-1">Gradle 插件 <a class="header-anchor" href="#gradle-插件" aria-label="Permalink to &quot;Gradle 插件&quot;">​</a></h2><p>本指南主要关注使用 Compose Multiplatform Gradle 插件打包 Compose 应用程序。 <code>org.jetbrains.compose</code> 插件提供了用于基本打包、混淆和 macOS 代码签名的任务。</p><p>该插件简化了使用 <code>jpackage</code> 将应用程序打包成原生分发包并在本地运行应用程序的过程。 可分发的应用程序是自包含的、可安装的二进制文件，包含所有必要的 Java 运行时组件，无需在目标系统上安装 JDK。</p><p>为了最小化软件包大小，Gradle 插件使用了 <a href="https://openjdk.org/jeps/282" target="_blank" rel="noreferrer">jlink</a> 工具，该工具确保在可分发包中只捆绑必要的 Java 模块。 但是，你仍然必须配置 Gradle 插件以指定你需要哪些模块。 有关更多信息，请参见 <a href="#including-jdk-modules">undefined</a> 部分。</p><p>作为替代方案，你可以使用 <a href="https://www.hydraulic.software" target="_blank" rel="noreferrer">Conveyor</a>，这是一个不由 JetBrains 开发的外部工具。 Conveyor 支持在线更新、交叉构建和各种其他特性，但非开源项目需要<a href="https://hydraulic.software/pricing.html" target="_blank" rel="noreferrer">许可证</a>。 有关更多信息，请参考 <a href="https://conveyor.hydraulic.dev/latest/tutorial/hare/jvm" target="_blank" rel="noreferrer">Conveyor 文档</a>。</p><h2 id="基本任务" tabindex="-1">基本任务 <a class="header-anchor" href="#基本任务" aria-label="Permalink to &quot;基本任务&quot;">​</a></h2><p>Compose Multiplatform Gradle 插件中可配置的基本单元是 <code>application</code>（不要与已弃用的 <a href="https://docs.gradle.org/current/userguide/application_plugin.html" target="_blank" rel="noreferrer">Gradle application</a> 插件混淆）。</p><p><code>application</code> DSL 方法定义了一组最终二进制文件的共享配置，这意味着 它允许你将一组文件以及 JDK 分发包打包成各种格式的压缩二进制安装程序。</p><p>支持的操作系统有以下可用格式：</p><ul><li><strong>macOS</strong>: <code>.dmg</code> (<code>TargetFormat.Dmg</code>), <code>.pkg</code> (<code>TargetFormat.Pkg</code>)</li><li><strong>Windows</strong>: <code>.exe</code> (<code>TargetFormat.Exe</code>), <code>.msi</code> (<code>TargetFormat.Msi</code>)</li><li><strong>Linux</strong>: <code>.deb</code> (<code>TargetFormat.Deb</code>), <code>.rpm</code> (<code>TargetFormat.Rpm</code>)</li></ul><p>以下是包含基本桌面配置的 <code>build.gradle.kts</code> 文件示例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.compose.desktop.application.dsl.TargetFormat</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jvm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.compose&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(compose.desktop.currentOs)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compose.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">desktop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        mainClass </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;example.MainKt&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        nativeDistributions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            targetFormats</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TargetFormat.Dmg, TargetFormat.Msi, TargetFormat.Exe)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>当你构建项目时，插件会创建以下任务：</p><table><tr><td>Gradle 任务</td><td>描述</td></tr><tr><td><code>package&lt;FormatName&gt;</code></td><td>将应用程序打包成相应的 <code>FormatName</code> 二进制文件。目前不支持交叉编译， 这意味着你只能使用相应的兼容操作系统来构建特定格式。 例如，要构建 <code>.dmg</code> 二进制文件，你必须在 macOS 上运行 <code>packageDmg</code> 任务。 如果任何任务与当前操作系统不兼容，它们默认会被跳过。</td></tr><tr><td><code>packageDistributionForCurrentOS</code></td><td>聚合应用程序的所有打包任务。这是一个 <a href="https://docs.gradle.org/current/userguide/more_about_tasks.html#sec:task_categories">生命周期任务</a>。</td></tr><tr><td><code>packageUberJarForCurrentOS</code></td><td>为当前操作系统创建一个包含所有依赖项的单个 JAR 文件。 该任务要求将 <code>compose.desktop.currentOS</code> 用作 <code>compile</code>、<code>implementation</code> 或 <code>runtime</code> 依赖项。</td></tr><tr><td><code>run</code></td><td>从 <code>mainClass</code> 中指定的入口点在本地运行应用程序。<code>run</code> 任务启动一个未打包的 JVM 应用程序，带有完整的运行时。 与使用精简运行时创建紧凑二进制镜像相比，此方法更快且更易于调试。 要运行最终二进制镜像，请改用 <code>runDistributable</code> 任务。</td></tr><tr><td><code>createDistributable</code></td><td>创建最终应用程序镜像而不创建安装程序。</td></tr><tr><td><code>runDistributable</code></td><td>运行预打包的应用程序镜像。</td></tr></table><p>所有可用任务都列在 Gradle 工具窗口中。执行任务后，Gradle 会在 <code>\${project.buildDir}/compose/binaries</code> 目录中生成输出二进制文件。</p><h2 id="包含-jdk-模块" tabindex="-1">包含 JDK 模块 <a class="header-anchor" href="#包含-jdk-模块" aria-label="Permalink to &quot;包含 JDK 模块&quot;">​</a></h2><p>为了减小分发包大小，Gradle 插件使用 <a href="https://openjdk.org/jeps/282" target="_blank" rel="noreferrer">jlink</a> 来帮助只捆绑必要的 JDK 模块。</p><p>目前，Gradle 插件不会自动确定必要的 JDK 模块。虽然这不会导致编译问题， 但未能提供必要的模块可能导致运行时出现 <code>ClassNotFoundException</code>。</p><p>如果你在运行打包应用程序或 <code>runDistributable</code> 任务时遇到 <code>ClassNotFoundException</code>， 你可以使用 <code>modules</code> DSL 方法包含额外的 JDK 模块：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compose.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">desktop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        nativeDistributions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            modules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;java.sql&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // Alternatively: includeAllModules = true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>你可以手动指定所需的模块，或运行 <code>suggestModules</code>。<code>suggestModules</code> 任务使用 <a href="https://docs.oracle.com/javase/9/tools/jdeps.htm" target="_blank" rel="noreferrer">jdeps</a> 静态分析工具来确定可能缺失的模块。 请注意，该工具的输出可能不完整或列出不必要的模块。</p><p>如果分发包的大小不是关键因素并且可以忽略，你可以选择使用 <code>includeAllModules</code> DSL 属性包含所有运行时模块。</p><h2 id="指定分发包属性" tabindex="-1">指定分发包属性 <a class="header-anchor" href="#指定分发包属性" aria-label="Permalink to &quot;指定分发包属性&quot;">​</a></h2><h3 id="包版本" tabindex="-1">包版本 <a class="header-anchor" href="#包版本" aria-label="Permalink to &quot;包版本&quot;">​</a></h3><p>原生分发包必须具有特定的包版本。 要指定包版本，你可以使用以下 DSL 属性，按优先级从高到低列出：</p><ul><li><code>nativeDistributions.&lt;os&gt;.&lt;packageFormat&gt;PackageVersion</code> 为单个包格式指定版本。</li><li><code>nativeDistributions.&lt;os&gt;.packageVersion</code> 为单个目标操作系统指定版本。</li><li><code>nativeDistributions.packageVersion</code> 为所有包指定版本。</li></ul><p>在 macOS 上，你还可以使用以下 DSL 属性指定构建版本，同样按优先级从高到低列出：</p><ul><li><code>nativeDistributions.macOS.&lt;packageFormat&gt;PackageBuildVersion</code> 为单个包格式指定构建版本。</li><li><code>nativeDistributions.macOS.packageBuildVersion</code> 为所有 macOS 包指定构建版本。</li></ul><p>如果你未指定构建版本，Gradle 会改用包版本。有关 macOS 上版本控制的更多信息， 请参见 <a href="https://developer.apple.com/documentation/bundleresources/information_property_list/cfbundleshortversionstring" target="_blank" rel="noreferrer"><code>CFBundleShortVersionString</code></a> 和 <a href="https://developer.apple.com/documentation/bundleresources/information_property_list/cfbundleversion" target="_blank" rel="noreferrer"><code>CFBundleVersion</code></a> 文档。</p><p>以下是按优先级顺序指定包版本的模板：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compose.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">desktop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        nativeDistributions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // Version for all packages</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            packageVersion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            macOS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">              // Version for all macOS packages</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              packageVersion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;...&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">              // Version for the dmg package only</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              dmgPackageVersion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">              // Version for the pkg package only</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              pkgPackageVersion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">              // Build version for all macOS packages</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              packageBuildVersion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;...&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">              // Build version for the dmg package only</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              dmgPackageBuildVersion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">              // Build version for the pkg package only</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              pkgPackageBuildVersion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            windows</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">              // Version for all Windows packages</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              packageVersion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">              // Version for the msi package only</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              msiPackageVersion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;...&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">              // Version for the exe package only</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              exePackageVersion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            linux</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">              // Version for all Linux packages</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              packageVersion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;...&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">              // Version for the deb package only</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              debPackageVersion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;...&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">              // Version for the rpm package only</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              rpmPackageVersion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;...&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>要定义包版本，请遵循以下规则：</p><table><tr><td>文件类型</td><td>版本格式</td><td>详情</td></tr><tr><td><code>dmg</code>, <code>pkg</code></td><td><code>MAJOR[.MINOR][.PATCH]</code></td><td><ul><li><code>MAJOR</code> 是一个大于 0 的整数</li><li><code>MINOR</code> 是一个可选的非负整数</li><li><code>PATCH</code> 是一个可选的非负整数</li></ul></td></tr><tr><td><code>msi</code>, <code>exe</code></td><td><code>MAJOR.MINOR.BUILD</code></td><td><ul><li><code>MAJOR</code> 是一个最大值为 255 的非负整数</li><li><code>MINOR</code> 是一个最大值为 255 的非负整数</li><li><code>BUILD</code> 是一个最大值为 65535 的非负整数</li></ul></td></tr><tr><td><code>deb</code></td><td><code>[EPOCH:]UPSTREAM_VERSION[-DEBIAN_REVISION]</code></td><td><ul><li><code>EPOCH</code> 是一个可选的非负整数</li><li><code>UPSTREAM_VERSION</code>: <ul><li>只能包含字母数字字符以及 <code>.</code>、<code>+</code>、<code>-</code>、<code>~</code> 字符</li><li>必须以数字开头</li></ul></li><li><code>DEBIAN_REVISION</code>: <ul><li>可选</li><li>只能包含字母数字字符以及 <code>.</code>、<code>+</code>、<code>~</code> 字符</li></ul></li></ul> 有关更多详情，请参见 <a href="https://www.debian.org/doc/debian-policy/ch-controlfields.html#version">Debian 文档</a>。 </td></tr><tr><td><code>rpm</code></td><td>任何格式</td><td>版本不得包含 <code>-</code>（破折号）字符。</td></tr></table><h3 id="jdk-版本" tabindex="-1">JDK 版本 <a class="header-anchor" href="#jdk-版本" aria-label="Permalink to &quot;JDK 版本&quot;">​</a></h3><p>该插件使用 <code>jpackage</code>，它要求 JDK 版本不低于 <a href="https://openjdk.java.net/projects/jdk/17/" target="_blank" rel="noreferrer">JDK 17</a>。 在指定 JDK 版本时，请确保你满足以下至少一项要求：</p><ul><li><p><code>JAVA_HOME</code> 环境变量指向兼容的 JDK 版本。</p></li><li><p>通过 DSL 设置 <code>javaHome</code> 属性：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compose.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">desktop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        javaHome </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getenv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;JDK_17&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><h3 id="输出目录" tabindex="-1">输出目录 <a class="header-anchor" href="#输出目录" aria-label="Permalink to &quot;输出目录&quot;">​</a></h3><p>要为原生分发包使用自定义输出目录，请按如下所示配置 <code>outputBaseDir</code> 属性：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compose.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">desktop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        nativeDistributions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            outputBaseDir.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(project.layout.buildDirectory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dir</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;customOutputDir&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="启动器属性" tabindex="-1">启动器属性 <a class="header-anchor" href="#启动器属性" aria-label="Permalink to &quot;启动器属性&quot;">​</a></h3><p>要调整应用程序启动过程，你可以自定义以下属性：</p><table><tr><td>属性</td><td>描述</td></tr><tr><td><code>mainClass</code></td><td>包含 <code>main</code> 方法的类的完全限定名称。</td></tr><tr><td><code>args</code></td><td>应用程序 <code>main</code> 方法的实参。</td></tr><tr><td><code>jvmArgs</code></td><td>应用程序 JVM 的实参。</td></tr></table><p>以下是一个配置示例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compose.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">desktop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        mainClass </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;MainKt&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        args </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-customArgument&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        jvmArgs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xmx2G&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="元数据" tabindex="-1">元数据 <a class="header-anchor" href="#元数据" aria-label="Permalink to &quot;元数据&quot;">​</a></h3><p>在 <code>nativeDistributions</code> DSL 代码块中，你可以配置以下属性：</p><table><tr><td>属性</td><td>描述</td><td>默认值</td></tr><tr><td><code>packageName</code></td><td>应用程序的名称。</td><td>Gradle 项目的 <a href="https://docs.gradle.org/current/javadoc/org/gradle/api/Project.html#getName--">名称</a></td></tr><tr><td><code>packageVersion</code></td><td>应用程序的版本。</td><td>Gradle 项目的 <a href="https://docs.gradle.org/current/javadoc/org/gradle/api/Project.html#getVersion--">版本</a></td></tr><tr><td><code>description</code></td><td>应用程序的描述。</td><td>无</td></tr><tr><td><code>copyright</code></td><td>应用程序的版权信息。</td><td>无</td></tr><tr><td><code>vendor</code></td><td>应用程序的供应商。</td><td>无</td></tr><tr><td><code>licenseFile</code></td><td>应用程序的许可证文件。</td><td>无</td></tr></table><p>以下是一个配置示例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compose.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">desktop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        nativeDistributions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            packageName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;ExampleApp&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            packageVersion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;0.1-SNAPSHOT&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            description </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Compose Multiplatform App&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            copyright </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;© 2024 My Name. All rights reserved.&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            vendor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Example vendor&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            licenseFile.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(project.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;LICENSE.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="资源管理" tabindex="-1">资源管理 <a class="header-anchor" href="#资源管理" aria-label="Permalink to &quot;资源管理&quot;">​</a></h2><p>要打包和加载资源，你可以使用 Compose Multiplatform 资源库、JVM 资源加载或将文件添加到打包的应用程序。</p><h3 id="资源库" tabindex="-1">资源库 <a class="header-anchor" href="#资源库" aria-label="Permalink to &quot;资源库&quot;">​</a></h3><p>为项目设置资源最直接的方法是使用资源库。 通过资源库，你可以在所有支持的平台上的通用代码中访问资源。 详情请参见<a href="./compose-multiplatform-resources">多平台资源</a>。</p><h3 id="jvm-资源加载" tabindex="-1">JVM 资源加载 <a class="header-anchor" href="#jvm-资源加载" aria-label="Permalink to &quot;JVM 资源加载&quot;">​</a></h3><p>Compose Multiplatform for desktop 在 JVM 平台上运行，这意味着你可以使用 <code>java.lang.Class</code> API 从 <code>.jar</code> 文件加载资源。你可以通过 <a href="https://docs.oracle.com/en/java/javase/15/docs/api/java.base/java/lang/Class.html#getResource(java.lang.String)" target="_blank" rel="noreferrer"><code>Class::getResource</code></a> 或 <a href="https://docs.oracle.com/en/java/javase/15/docs/api/java.base/java/lang/Class.html#getResourceAsStream(java.lang.String)" target="_blank" rel="noreferrer"><code>Class::getResourceAsStream</code></a> 访问 <code>src/main/resources</code> 目录中的文件。</p><h3 id="将文件添加到打包的应用程序" tabindex="-1">将文件添加到打包的应用程序 <a class="header-anchor" href="#将文件添加到打包的应用程序" aria-label="Permalink to &quot;将文件添加到打包的应用程序&quot;">​</a></h3><p>在某些情况下，从 <code>.jar</code> 文件加载资源可能不那么实用，例如，当你有特定于目标的资产并且需要只将文件包含在 macOS 包中而不包含在 Windows 包中时。</p><p>在这些情况下，你可以配置 Gradle 插件以在安装目录中包含额外的资源文件。 按如下所示使用 DSL 指定根资源目录：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compose.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">desktop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        mainClass </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;MainKt&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        nativeDistributions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            targetFormats</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TargetFormat.Dmg, TargetFormat.Msi, TargetFormat.Deb)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            packageVersion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1.0.0&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            appResourcesRootDir.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(project.layout.projectDirectory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dir</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;resources&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在上述示例中，根资源目录被定义为 <code>&lt;PROJECT_DIR&gt;/resources</code>。</p><p>Gradle 插件将按如下方式包含资源子目录中的文件：</p><ol><li><p><strong>通用资源：</strong> 位于 <code>&lt;RESOURCES_ROOT_DIR&gt;/common</code> 中的文件将包含在所有包中，无论目标操作系统或架构如何。</p></li><li><p><strong>操作系统特有资源：</strong> 位于 <code>&lt;RESOURCES_ROOT_DIR&gt;/&lt;OS_NAME&gt;</code> 中的文件将只包含在为特定操作系统构建的包中。 <code>&lt;OS_NAME&gt;</code> 的有效值为：<code>windows</code>、<code>macos</code> 和 <code>linux</code>。</p></li><li><p><strong>操作系统和架构特有资源：</strong> 位于 <code>&lt;RESOURCES_ROOT_DIR&gt;/&lt;OS_NAME&gt;-&lt;ARCH_NAME&gt;</code> 中的文件将只包含在为操作系统和 CPU 架构的特定组合构建的包中。 <code>&lt;ARCH_NAME&gt;</code> 的有效值为：<code>x64</code> 和 <code>arm64</code>。 例如，<code>&lt;RESOURCES_ROOT_DIR&gt;/macos-arm64</code> 中的文件将只包含在用于 Apple Silicon Mac 的包中。</p></li></ol><p>你可以使用 <code>compose.application.resources.dir</code> 系统属性访问包含的资源：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> java.io.File</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> resourcesDir </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> File</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;compose.application.resources.dir&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(resourcesDir.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;resource.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="自定义源代码集" tabindex="-1">自定义源代码集 <a class="header-anchor" href="#自定义源代码集" aria-label="Permalink to &quot;自定义源代码集&quot;">​</a></h2><p>如果你使用 <code>org.jetbrains.kotlin.jvm</code> 或 <code>org.jetbrains.kotlin.multiplatform</code> 插件，你可以依赖默认配置：</p><ul><li>使用 <code>org.jetbrains.kotlin.jvm</code> 的配置包含来自 <code>main</code> <a href="https://docs.gradle.org/current/userguide/java_plugin.html#source_sets" target="_blank" rel="noreferrer">源代码集</a>的内容。</li><li>使用 <code>org.jetbrains.kotlin.multiplatform</code> 的配置包含来自单个 <a href="./multiplatform-dsl-reference#targets">JVM 目标</a>的内容。 如果你定义了多个 JVM 目标，则默认配置会被禁用。在这种情况下，你需要手动配置插件， 或指定单个目标（参见下文）。</li></ul><p>如果默认配置模糊或不充分，你可以通过以下几种方式进行自定义：</p><p>使用 Gradle <a href="https://docs.gradle.org/current/userguide/java_plugin.html#source_sets" target="_blank" rel="noreferrer">源代码集</a>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jvm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.compose&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> customSourceSet </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sourceSets.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;customSourceSet&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compose.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">desktop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(customSourceSet)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>使用 Kotlin <a href="./multiplatform-dsl-reference#targets">JVM 目标</a>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;multiplatform&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.compose&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;customJvmTarget&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compose.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">desktop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(kotlin.targets[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;customJvmTarget&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>手动：</p><ul><li>使用 <code>disableDefaultConfiguration</code> 禁用默认设置。</li><li>使用 <code>fromFiles</code> 指定要包含的文件。</li><li>指定 <code>mainJar</code> 文件属性以指向包含主类的 <code>.jar</code> 文件。</li><li>使用 <code>dependsOn</code> 将任务依赖项添加到所有插件任务。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compose.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">desktop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        disableDefaultConfiguration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        fromFiles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(project.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fileTree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;libs/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">include</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;**/*.jar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        mainJar.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(project.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;main.jar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        dependsOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;mainJarTask&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="应用程序图标" tabindex="-1">应用程序图标 <a class="header-anchor" href="#应用程序图标" aria-label="Permalink to &quot;应用程序图标&quot;">​</a></h2><p>确保你的应用程序图标以以下操作系统特有格式提供：</p><ul><li><code>.icns</code> 用于 macOS</li><li><code>.ico</code> 用于 Windows</li><li><code>.png</code> 用于 Linux</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compose.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">desktop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        nativeDistributions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            macOS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                iconFile.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(project.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;icon.icns&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            windows</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                iconFile.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(project.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;icon.ico&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            linux</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                iconFile.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(project.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;icon.png&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="平台特有选项" tabindex="-1">平台特有选项 <a class="header-anchor" href="#平台特有选项" aria-label="Permalink to &quot;平台特有选项&quot;">​</a></h2><p>平台特有设置可以使用相应的 DSL 代码块进行配置：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compose.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">desktop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        nativeDistributions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            macOS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // Options for macOS</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            windows</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // Options for Windows</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            linux</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // Options for Linux</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>下表描述了所有支持的平台特有选项。<strong>不推荐</strong>使用未文档化的属性。</p><table><tr><td>平台</td><td>选项</td><td width="500">描述</td></tr><tr><td rowspan="3">所有平台</td><td><code>iconFile.set(File(&quot;PATH_TO_ICON&quot;))</code></td><td>指定应用程序平台特有图标的路径。详情请参见<a href="#application-icon">应用程序图标</a>部分。</td></tr><tr><td><code>packageVersion = &quot;1.0.0&quot;</code></td><td>设置平台特有的包版本。详情请参见<a href="#package-version">包版本</a>部分。</td></tr><tr><td><code>installationPath = &quot;PATH_TO_INST_DIR&quot;</code></td><td>指定默认安装目录的绝对或相对路径。 在 Windows 上，你还可以使用 <code>dirChooser = true</code> 来在安装过程中启用自定义路径。</td></tr><tr><td rowspan="8">Linux</td><td><code>packageName = &quot;custom-package-name&quot;</code></td><td>覆盖默认应用程序名称。</td></tr><tr><td><code>debMaintainer = &quot;maintainer@example.com&quot;</code></td><td>指定包维护者的电子邮件。</td></tr><tr><td><code>menuGroup = &quot;my-example-menu-group&quot;</code></td><td>为应用程序定义菜单组。</td></tr><tr><td><code>appRelease = &quot;1&quot;</code></td><td>为 rpm 包设置发布值，或为 deb 包设置修订值。</td></tr><tr><td><code>appCategory = &quot;CATEGORY&quot;</code></td><td>为 rpm 包分配组值，或为 deb 包分配节值。</td></tr><tr><td><code>rpmLicenseType = &quot;TYPE_OF_LICENSE&quot;</code></td><td>指示 rpm 包的许可证类型。</td></tr><tr><td><code>debPackageVersion = &quot;DEB_VERSION&quot;</code></td><td>设置 deb 特有的包版本。详情请参见<a href="#package-version">包版本</a>部分。</td></tr><tr><td><code>rpmPackageVersion = &quot;RPM_VERSION&quot;</code></td><td>设置 rpm 特有的包版本。详情请参见<a href="#package-version">包版本</a>部分。</td></tr><tr><td rowspan="15">macOS</td><td><code>bundleID</code></td><td> 指定唯一的应用程序标识符，只能包含字母数字字符 (<code>A-Z</code>, <code>a-z</code>, <code>0-9</code>)、连字符 (<code>-</code>) 和 句点 (<code>.</code>)。建议使用反向 DNS 表示法 (<code>com.mycompany.myapp</code>)。 </td></tr><tr><td><code>packageName</code></td><td>应用程序的名称。</td></tr><tr><td><code>dockName</code></td><td> 在菜单栏、&quot;关于 &lt;App&gt;&quot; 菜单项和 Dock 中显示的应用程序名称。默认值为 <code>packageName</code>。 </td></tr><tr><td><code>minimumSystemVersion</code></td><td> 运行应用程序所需的最低 macOS 版本。详情请参见 <a href="https://developer.apple.com/documentation/bundleresources/information_property_list/lsminimumsystemversion"><code>LSMinimumSystemVersion</code></a>。 </td></tr><tr><td><code>signing</code>, <code>notarization</code>, <code>provisioningProfile</code>, <code>runtimeProvisioningProfile</code></td><td> 请参见 <a href="https://github.com/JetBrains/compose-multiplatform/tree/master/tutorials/Signing_and_notarization_on_macOS"> macOS 上的分发包签名与公证</a> 教程。 </td></tr><tr><td><code>appStore = true</code></td><td>指定是否为 Apple App Store 构建和签名应用程序。要求至少 JDK 17。</td></tr><tr><td><code>appCategory</code></td><td> Apple App Store 的应用类别。为 App Store 构建时，默认值为 <code>public.app-category.utilities</code>，否则为 <code>Unknown</code>。 有效类别列表请参见 <a href="https://developer.apple.com/documentation/bundleresources/information_property_list/lsapplicationcategorytype"><code>LSApplicationCategoryType</code></a>。 </td></tr><tr><td><code>entitlementsFile.set(File(&quot;PATH_ENT&quot;))</code></td><td> 指定包含签名时使用的授权文件的路径。当你提供自定义文件时， 请确保添加 Java 应用程序所需的授权。有关为 App Store 构建时使用的默认文件，请参见 <a href="https://github.com/openjdk/jdk/blob/master/src/jdk.jpackage/macosx/classes/jdk/jpackage/internal/resources/sandbox.plist"> sandbox.plist</a>。请注意，此默认文件可能因你的 JDK 版本而异。 如果未指定文件，插件将使用 <code>jpackage</code> 提供的默认授权。 详情请参见 <a href="https://github.com/JetBrains/compose-multiplatform/tree/master/tutorials/Signing_and_notarization_on_macOS"> macOS 上的分发包签名与公证</a> 教程。 </td></tr><tr><td><code>runtimeEntitlementsFile.set(File(&quot;PATH_R_ENT&quot;))</code></td><td> 指定包含签名 JVM 运行时时使用的授权文件的路径。当你提供自定义文件时， 请确保添加 Java 应用程序所需的授权。有关为 App Store 构建时使用的默认文件，请参见 <a href="https://github.com/openjdk/jdk/blob/master/src/jdk.jpackage/macosx/classes/jdk/jpackage/internal/resources/sandbox.plist"> sandbox.plist</a>。请注意，此默认文件可能因你的 JDK 版本而异。 如果未指定文件，插件将使用 <code>jpackage</code> 提供的默认授权。 详情请参见 <a href="https://github.com/JetBrains/compose-multiplatform/tree/master/tutorials/Signing_and_notarization_on_macOS"> macOS 上的分发包签名与公证</a> 教程。 </td></tr><tr><td><code>dmgPackageVersion = &quot;DMG_VERSION&quot;</code></td><td> 设置 DMG 特有的包版本。详情请参见<a href="#package-version">包版本</a>部分。 </td></tr><tr><td><code>pkgPackageVersion = &quot;PKG_VERSION&quot;</code></td><td> 设置 PKG 特有的包版本。详情请参见<a href="#package-version">包版本</a>部分。 </td></tr><tr><td><code>packageBuildVersion = &quot;DMG_VERSION&quot;</code></td><td> 设置包构建版本。详情请参见<a href="#package-version">包版本</a>部分。 </td></tr><tr><td><code>dmgPackageBuildVersion = &quot;DMG_VERSION&quot;</code></td><td> 设置 DMG 特有的包构建版本。详情请参见<a href="#package-version">包版本</a>部分。 </td></tr><tr><td><code>pkgPackageBuildVersion = &quot;PKG_VERSION&quot;</code></td><td> 设置 PKG 特有的包构建版本。详情请参见<a href="#package-version">包版本</a>部分。 </td></tr><tr><td><code>infoPlist</code></td><td>请参见<a href="#information-property-list-on-macos">macOS 上的 <code>Info.plist</code></a> 部分。</td></tr><tr><td rowspan="7">Windows</td><td><code>console = true</code></td><td>为应用程序添加控制台启动器。</td></tr><tr><td><code>dirChooser = true</code></td><td>在安装过程中启用自定义安装路径。</td></tr><tr><td><code>perUserInstall = true</code></td><td>启用按用户安装应用程序。</td></tr><tr><td><code>menuGroup = &quot;start-menu-group&quot;</code></td><td>将应用程序添加到指定的开始菜单组。</td></tr><tr><td><code>upgradeUuid = &quot;UUID&quot;</code></td><td>指定一个唯一 ID，该 ID 允许用户通过安装程序更新应用程序， 当有比已安装版本更新的版本时。该值对于单个应用程序必须保持不变。 详情请参见 <a href="https://wixtoolset.org/documentation/manual/v3/howtos/general/generate_guids.html">How To: Generate a GUID</a>。</td></tr><tr><td><code>msiPackageVersion = &quot;MSI_VERSION&quot;</code></td><td>设置 MSI 特有的包版本。详情请参见<a href="#package-version">包版本</a>部分。</td></tr><tr><td><code>exePackageVersion = &quot;EXE_VERSION&quot;</code></td><td>设置 EXE 特有的包版本。详情请参见<a href="#package-version">包版本</a>部分。</td></tr></table><h2 id="macos-特有配置" tabindex="-1">macOS 特有配置 <a class="header-anchor" href="#macos-特有配置" aria-label="Permalink to &quot;macOS 特有配置&quot;">​</a></h2><h3 id="macos-上的签名与公证" tabindex="-1">macOS 上的签名与公证 <a class="header-anchor" href="#macos-上的签名与公证" aria-label="Permalink to &quot;macOS 上的签名与公证&quot;">​</a></h3><p>现代 macOS 版本不允许用户执行从互联网下载的未签名应用程序。如果你尝试运行此类应用程序，你将遇到 以下错误：“YourApp is damaged and can&#39;t be open. You should eject the disk image”（你的应用已损坏，无法打开。你应该弹出磁盘镜像）。</p><p>要了解如何签名和公证你的应用程序，请参见我们的<a href="./https://github.com/JetBrains/compose-multiplatform/blob/master/tutorials/Signing_and_notarization_on_macOS/README">教程</a>。</p><h3 id="macos-上的信息属性列表" tabindex="-1">macOS 上的信息属性列表 <a class="header-anchor" href="#macos-上的信息属性列表" aria-label="Permalink to &quot;macOS 上的信息属性列表&quot;">​</a></h3><p>虽然 DSL 支持基本的平台特有自定义，但仍可能存在超出所提供功能的情况。 如果你需要指定 DSL 中未表示的 <code>Info.plist</code> 值， 你可以包含一段原始 XML 作为变通方法。此 XML 将附加到应用程序的 <code>Info.plist</code> 中。</p><h4 id="示例-深度链接" tabindex="-1">示例：深度链接 <a class="header-anchor" href="#示例-深度链接" aria-label="Permalink to &quot;示例：深度链接&quot;">​</a></h4><ol><li><p>在 <code>build.gradle.kts</code> 文件中定义一个自定义 URL 方案：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compose.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">desktop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        mainClass </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;MainKt&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        nativeDistributions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            targetFormats</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TargetFormat.Dmg)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            packageName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Deep Linking Example App&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            macOS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                bundleID </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;org.jetbrains.compose.examples.deeplinking&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                infoPlist</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    extraKeysRawXml </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> macExtraPlistKeys</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> macExtraPlistKeys: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &lt;key&gt;CFBundleURLTypes&lt;/key&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &lt;array&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &lt;dict&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          &lt;key&gt;CFBundleURLName&lt;/key&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          &lt;string&gt;Example deep link&lt;/string&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          &lt;key&gt;CFBundleURLSchemes&lt;/key&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          &lt;array&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &lt;string&gt;compose&lt;/string&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          &lt;/array&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &lt;/dict&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &lt;/array&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;</span></span></code></pre></div></li><li><p>在 <code>src/main/main.kt</code> 文件中使用 <code>java.awt.Desktop</code> 类设置 URI 处理程序：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> androidx.compose.material.MaterialTheme</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> androidx.compose.material.Text</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> androidx.compose.runtime.getValue</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> androidx.compose.runtime.mutableStateOf</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> androidx.compose.runtime.setValue</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> androidx.compose.ui.window.singleWindowApplication</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> java.awt.Desktop</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mutableStateOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, World!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Desktop.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getDesktop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setOpenURIHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { event </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Open URI: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> event.uri</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (e: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UnsupportedOperationException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;setOpenURIHandler is unsupported&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    singleWindowApplication</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        MaterialTheme</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(text)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>执行 <code>runDistributable</code> 任务：<code>./gradlew runDistributable</code>。</p></li></ol><p>结果是，像 <code>compose://foo/bar</code> 这样的链接现在可以从浏览器重定向到你的应用程序。</p><h2 id="精简与混淆" tabindex="-1">精简与混淆 <a class="header-anchor" href="#精简与混淆" aria-label="Permalink to &quot;精简与混淆&quot;">​</a></h2><p>Compose Multiplatform Gradle 插件内置支持 <a href="https://www.guardsquare.com/proguard" target="_blank" rel="noreferrer">ProGuard</a>。 ProGuard 是一个用于代码精简和混淆的<a href="https://github.com/Guardsquare/proguard" target="_blank" rel="noreferrer">开源工具</a>。</p><p>对于每个<em>默认</em>（不带 ProGuard）打包任务，Gradle 插件提供一个<em>发布</em>任务（带 ProGuard）：</p><table><tr><td width="400">Gradle 任务</td><td>描述</td></tr><tr><td><p>默认: <code>createDistributable</code></p><p>发布: <code>createReleaseDistributable</code></p></td><td>创建捆绑了 JDK 和资源的应用程序镜像。</td></tr><tr><td><p>默认: <code>runDistributable</code></p><p>发布: <code>runReleaseDistributable</code></p></td><td>运行捆绑了 JDK 和资源的应用程序镜像。</td></tr><tr><td><p>默认: <code>run</code></p><p>发布: <code>runRelease</code></p></td><td>使用 Gradle JDK 运行非打包应用程序 <code>.jar</code>。</td></tr><tr><td><p>默认: <code>package&lt;FORMAT_NAME&gt;</code></p><p>发布: <code>packageRelease&lt;FORMAT_NAME&gt;</code></p></td><td>将应用程序镜像打包成 <code>&lt;FORMAT_NAME&gt;</code> 文件。</td></tr><tr><td><p>默认: <code>packageDistributionForCurrentOS</code></p><p>发布: <code>packageReleaseDistributionForCurrentOS</code></p></td><td>将应用程序镜像打包成与当前操作系统兼容的格式。</td></tr><tr><td><p>默认: <code>packageUberJarForCurrentOS</code></p><p>发布: <code>packageReleaseUberJarForCurrentOS</code></p></td><td>将应用程序镜像打包成一个超级 (胖) <code>.jar</code>。</td></tr><tr><td><p>默认: <code>notarize&lt;FORMAT_NAME&gt;</code></p><p>发布: <code>notarizeRelease&lt;FORMAT_NAME&gt;</code></p></td><td>上传 <code>&lt;FORMAT_NAME&gt;</code> 应用程序镜像以进行公证（仅限 macOS）。</td></tr><tr><td><p>默认: <code>checkNotarizationStatus</code></p><p>发布: <code>checkReleaseNotarizationStatus</code></p></td><td>检测公证是否成功（仅限 macOS）。</td></tr></table><p>默认配置启用了一些预定义 ProGuard 规则：</p><ul><li>应用程序镜像被精简，即移除了未使用的类。</li><li><code>compose.desktop.application.mainClass</code> 用作入口点。</li><li>包含多条 <code>keep</code> 规则以确保 Compose 运行时保持功能性。</li></ul><p>在大多数情况下，你不需要任何额外的配置即可获得精简的应用程序。 然而，ProGuard 可能不会跟踪字节码中的某些用法，例如，当一个类通过反射使用时。 如果你遇到只在 ProGuard 处理后出现的问题，你可能需要添加自定义规则。</p><p>要指定自定义配置文件，请按如下所示使用 DSL：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compose.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">desktop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        buildTypes.release.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">proguard</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            configurationFiles.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(project.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;compose-desktop.pro&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>有关 ProGuard 规则和配置选项的更多信息，请参阅 Guardsquare <a href="https://www.guardsquare.com/manual/configuration/usage" target="_blank" rel="noreferrer">手册</a>。</p><p>混淆默认禁用。要启用它，请通过 Gradle DSL 设置以下属性：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compose.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">desktop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        buildTypes.release.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">proguard</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            obfuscate.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>ProGuard 的优化默认启用。要禁用它们，请通过 Gradle DSL 设置以下属性：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compose.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">desktop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        buildTypes.release.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">proguard</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            optimize.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>生成超级 JAR 默认禁用，ProGuard 会为每个输入 <code>.jar</code> 生成相应的 <code>.jar</code> 文件。要启用它，请通过 Gradle DSL 设置以下属性：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compose.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">desktop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        buildTypes.release.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">proguard</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            joinOutputJars.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="下一步" tabindex="-1">下一步？ <a class="header-anchor" href="#下一步" aria-label="Permalink to &quot;下一步？&quot;">​</a></h2><p>探索关于<a href="https://github.com/JetBrains/compose-multiplatform/tree/master/tutorials#desktop" target="_blank" rel="noreferrer">桌面组件</a>的教程。</p>`,115)]))}const c=i(e,[["render",l]]);export{E as __pageData,c as default};
