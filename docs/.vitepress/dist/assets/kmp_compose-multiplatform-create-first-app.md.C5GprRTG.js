import{_ as h,a as d,b as k,c,d as m,e as u}from"./chunks/ios-new-configuration.DNF7jnri.js";import{_ as g}from"./chunks/icon-3-todo.aEuKIG4W.js";import{_ as E}from"./chunks/icon-4-todo.DqbNYzPe.js";import{_ as f,a as b,b as _,c as y,d as C,e as A,f as F,g as I,h as v}from"./chunks/first-compose-project-on-web.B8aVrJBG.js";import{_ as M,C as t,c as S,o as D,j as i,G as a,ag as n,a as s,w as e}from"./chunks/framework.Bksy39di.js";const X=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"kmp/compose-multiplatform-create-first-app.md","filePath":"kmp/compose-multiplatform-create-first-app.md","lastUpdated":1755516278000}'),w={name:"kmp/compose-multiplatform-create-first-app.md"};function P(T,l,x,q,B,K){const o=t("secondary-label"),r=t("tldr"),p=t("snippet");return D(),S("div",null,[l[3]||(l[3]=i("h1",{id:"创建你的-compose-multiplatform-应用",tabindex:"-1"},[s("创建你的 Compose Multiplatform 应用 "),i("a",{class:"header-anchor",href:"#创建你的-compose-multiplatform-应用","aria-label":'Permalink to "创建你的 Compose Multiplatform 应用"'},"​")],-1)),a(o,{ref:"IntelliJ IDEA"},null,512),a(o,{ref:"Android Studio"},null,512),a(r,null,{default:e(()=>l[0]||(l[0]=[i("p",null,"本教程使用 IntelliJ IDEA，但你也可以在 Android Studio 中遵循操作 – 两款 IDE 共享相同的核心功能和 Kotlin Multiplatform 支持。",-1),i("br",null,null,-1),i("p",null,[s("这是"),i("strong",null,"创建具有共享逻辑和 UI 的 Compose Multiplatform 应用"),s("教程的第一部分。")],-1),i("p",null,[i("img",{src:h,width:"20",alt:"第一步"}),s(),i("strong",null,"创建你的 Compose Multiplatform 应用"),i("br"),i("img",{src:d,width:"20",alt:"第二步"}),s(" 探索可组合代码 "),i("br"),i("img",{src:g,width:"20",alt:"第三步"}),s(" 修改项目 "),i("br"),i("br"),i("img",{src:E,width:"20",alt:"第四步"}),s(" 创建你自己的应用程序 "),i("br")],-1)])),_:1}),l[4]||(l[4]=n('<p>在此，你将学习如何使用 IntelliJ IDEA 创建并运行你的第一个 Compose Multiplatform 应用程序。</p><p>借助 <a href="https://www.jetbrains.com/lp/compose-multiplatform/" target="_blank" rel="noreferrer">Compose Multiplatform</a> UI 框架，你可以将 Kotlin Multiplatform 的代码共享能力扩展到应用程序逻辑之外。你可以实现一次用户界面，然后将其用于 Compose Multiplatform 支持的所有平台。</p><p>在本教程中，你将构建一个可在 Android、iOS、桌面和 Web 上运行的示例应用程序。为了创建用户界面，你将使用 Compose Multiplatform 框架并学习其基础知识：可组合函数、主题、布局、事件和修饰符。</p><p>本教程需要注意的事项：</p><ul><li>无需具备 Compose Multiplatform、Android 或 iOS 的经验。我们建议你在开始前熟悉 <a href="https://kotlinlang.org/docs/getting-started.html" target="_blank" rel="noreferrer">Kotlin 基础知识</a>。</li><li>要完成本教程，你只需要 IntelliJ IDEA。它允许你尝试在 Android 和桌面平台进行多平台开发。对于 iOS，你需要一台安装了 Xcode 的 macOS 机器。这是 iOS 开发的普遍限制。</li><li>如果需要，你可以将选择限制在你感兴趣的特定平台，并省略其他平台。</li></ul><h2 id="创建项目" tabindex="-1">创建项目 <a class="header-anchor" href="#创建项目" aria-label="Permalink to &quot;创建项目&quot;">​</a></h2><ol><li><p>在<a href="./quickstart">快速入门</a>中，完成<a href="https://kotlinlang.org/docs/multiplatform-quickstart.html#set-up-the-environment" target="_blank" rel="noreferrer">设置 Kotlin Multiplatform 开发环境</a>的说明。</p></li><li><p>在 IntelliJ IDEA 中，选择 <strong>File</strong> | <strong>New</strong> | <strong>Project</strong>。</p></li><li><p>在左侧面板中，选择 <strong>Kotlin Multiplatform</strong>。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>如果你未使用 Kotlin Multiplatform IDE 插件，可以使用 <a href="https://kmp.jetbrains.com/?android=true&amp;ios=true&amp;iosui=compose&amp;desktop=true&amp;web=true&amp;includeTests=true" target="_blank" rel="noreferrer">KMP Web 向导</a> 生成相同的项目。</p></div></li><li><p>在 <strong>New Project</strong> 窗口中指定以下字段：</p><ul><li><strong>Name</strong>: ComposeDemo</li><li><strong>Group</strong>: compose.project</li><li><strong>Artifact</strong>: demo</li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>如果使用 Web 向导，请将 &quot;ComposeDemo&quot; 指定为 <strong>Project Name</strong>，将 &quot;compose.project.demo&quot; 指定为 <strong>Project ID</strong>。</p></div></li><li><p>选择 <strong>Android</strong>、<strong>iOS</strong>、<strong>Desktop</strong> 和 <strong>Web</strong> 目标。 确保 <strong>Share UI</strong> 选项已为 iOS 选中。</p></li><li><p>指定所有字段和目标后，点击 <strong>Create</strong>（Web 向导中为 <strong>Download</strong>）。</p><p><img src="'+f+'" alt="创建 Compose Multiplatform 项目" width="800"></p></li></ol><h2 id="检查项目结构" tabindex="-1">检查项目结构 <a class="header-anchor" href="#检查项目结构" aria-label="Permalink to &quot;检查项目结构&quot;">​</a></h2><p>在 IntelliJ IDEA 中，导航到 &quot;ComposeDemo&quot; 文件夹。 如果你未在向导中选择 iOS，将不会有以 &quot;ios&quot; 或 &quot;apple&quot; 开头的文件夹。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>IntelliJ IDEA 可能会自动建议将项目中的 Android Gradle 插件升级到最新版本。我们不建议升级，因为 Kotlin Multiplatform 与最新 AGP 版本不兼容（参阅 <a href="https://kotlinlang.org/docs/multiplatform-compatibility-guide.html#version-compatibility" target="_blank" rel="noreferrer">兼容性表</a>）。</p></div><p>该项目包含两个模块：</p><ul><li><p><em>composeApp</em> 是一个 Kotlin 模块，包含在 Android、桌面、iOS 和 Web 应用程序之间共享的逻辑——即你在所有平台使用的代码。它使用 <a href="https://kotlinlang.org/docs/gradle.html" target="_blank" rel="noreferrer">Gradle</a> 作为构建系统，帮助你自动化构建过程。</p></li><li><p><em>iosApp</em> 是一个 Xcode 项目，它构建为 iOS 应用程序。它依赖并使用共享模块作为 iOS framework。</p><p><img src="'+b+'" alt="Compose Multiplatform 项目结构" width="350"></p></li></ul><p><strong>composeApp</strong> 模块由以下源代码集组成：<code>androidMain</code>、<code>commonMain</code>、<code>desktopMain</code>、<code>iosMain</code> 和 <code>wasmJsMain</code>。 <em>源代码集</em> 是 Gradle 的一个概念，指一组逻辑上组合在一起的文件，其中每个组都有自己的依赖项。在 Kotlin Multiplatform 中，不同的源代码集可以面向不同的平台。</p><p><code>commonMain</code> 源代码集使用通用 Kotlin 代码，平台源代码集使用每个目标特有的 Kotlin 代码。Kotlin/JVM 用于 <code>androidMain</code> 和 <code>desktopMain</code>。Kotlin/Native 用于 <code>iosMain</code>。另一方面，Kotlin/Wasm 用于 <code>wasmJsMain</code>。</p><p>当共享模块构建为 Android 库时，通用 Kotlin 代码被视为 Kotlin/JVM。当它构建为 iOS framework 时，通用 Kotlin 代码被视为 Kotlin/Native。当共享模块构建为 Web 应用时，通用 Kotlin 代码被视为 Kotlin/Wasm。</p><p><img src="'+_+`" alt="通用 Kotlin、Kotlin/JVM 和 Kotlin/Native" width="700"></p><p>通常，尽可能将你的实现编写为通用代码，而不是在平台特有的源代码集中重复功能。</p><p>在 <code>composeApp/src/commonMain/kotlin</code> 目录中，打开 <code>App.kt</code> 文件。它包含 <code>App()</code> 函数，该函数实现了一个极简但完整的 Compose Multiplatform UI：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Composable</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Preview</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    MaterialTheme</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> showContent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> remember</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mutableStateOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        Column</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            modifier </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Modifier</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">safeContentPadding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fillMaxSize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            horizontalAlignment </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Alignment.CenterHorizontally,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            Button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(onClick </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { showContent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">showContent }) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Click me!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            AnimatedVisibility</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(showContent) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> greeting </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> remember</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Greeting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                Column</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Modifier.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fillMaxWidth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), horizontalAlignment </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Alignment.CenterHorizontally) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    Image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">painterResource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Res.drawable.compose_multiplatform), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Compose: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$greeting</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>让我们在所有支持的平台上运行该应用程序。</p><h2 id="运行你的应用程序" tabindex="-1">运行你的应用程序 <a class="header-anchor" href="#运行你的应用程序" aria-label="Permalink to &quot;运行你的应用程序&quot;">​</a></h2><p>你可以在 Android、iOS、桌面和 Web 上运行该应用程序。你不必以任何特定顺序运行应用程序，所以从你最熟悉的平台开始。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>你无需使用 Gradle 构建任务。在多平台应用程序中，这将构建所有支持的目标的调试和发布版本。根据在多平台向导中选择的平台，这可能需要一些时间。使用运行配置要快得多；在这种情况下，只会构建选定的目标。</p></div><h3 id="在-android-上运行你的应用程序" tabindex="-1">在 Android 上运行你的应用程序 <a class="header-anchor" href="#在-android-上运行你的应用程序" aria-label="Permalink to &quot;在 Android 上运行你的应用程序&quot;">​</a></h3><ol><li>在运行配置列表中，选择 <strong>composeApp</strong>。</li><li>选择你的 Android 虚拟设备，然后点击 <strong>Run</strong>：如果所选虚拟设备已关机，你的 IDE 将启动它，并运行该应用。</li></ol><p><img src="`+m+'" alt="在 Android 上运行 Compose Multiplatform 应用" width="350"></p><p><img src="'+y+'" alt="第一个 Android 上的 Compose Multiplatform 应用" width="300"></p>',27)),a(p,{id:"run_android_other_devices"},{default:e(()=>l[1]||(l[1]=[i("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"在不同的-android-模拟设备上运行",tabindex:"-1"},[s("在不同的 Android 模拟设备上运行 "),i("a",{class:"header-anchor",href:"#在不同的-android-模拟设备上运行","aria-label":'Permalink to "在不同的 Android 模拟设备上运行 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1),i("p",null,[s("了解如何"),i("a",{href:"https://developer.android.com/studio/run/emulator#runningapp",target:"_blank",rel:"noreferrer"},"配置 Android Emulator 并在不同的模拟设备上运行你的应用程序"),s("。")],-1),i("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"在真实的-android-设备上运行",tabindex:"-1"},[s("在真实的 Android 设备上运行 "),i("a",{class:"header-anchor",href:"#在真实的-android-设备上运行","aria-label":'Permalink to "在真实的 Android 设备上运行 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1),i("p",null,[s("了解如何"),i("a",{href:"https://developer.android.com/studio/run/device",target:"_blank",rel:"noreferrer"},"配置并连接硬件设备并在其上运行你的应用程序"),s("。")],-1)])),_:1}),l[5]||(l[5]=n('<h3 id="在-ios-上运行你的应用程序" tabindex="-1">在 iOS 上运行你的应用程序 <a class="header-anchor" href="#在-ios-上运行你的应用程序" aria-label="Permalink to &quot;在 iOS 上运行你的应用程序&quot;">​</a></h3><p>如果你尚未将 Xcode 作为初始设置的一部分启动，请在运行 iOS 应用之前执行此操作。</p><p>在 IntelliJ IDEA 中，在运行配置列表中选择 <strong>iosApp</strong>，在运行配置旁边选择一个模拟设备，然后点击 <strong>Run</strong>。 如果列表中没有可用的 iOS 配置，请添加<a href="#run-on-a-new-ios-simulated-device">新的运行配置</a>。</p><p><img src="'+u+'" alt="在 iOS 上运行 Compose Multiplatform 应用" width="350"></p><p><img src="'+C+'" alt="第一个 iOS 上的 Compose Multiplatform 应用" width="300"></p>',5)),a(p,{id:"run_ios_other_devices"},{default:e(()=>l[2]||(l[2]=[i("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"在新的-ios-模拟设备上运行",tabindex:"-1"},[s("在新的 iOS 模拟设备上运行 "),i("a",{class:"header-anchor",href:"#在新的-ios-模拟设备上运行","aria-label":'Permalink to "在新的 iOS 模拟设备上运行 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1),i("p",null,"如果你想在模拟设备上运行你的应用程序，可以添加新的运行配置。",-1),i("ol",null,[i("li",null,[i("p",null,[s("在运行配置列表中，点击 "),i("strong",null,"Edit Configurations"),s("。")]),i("p",null,[i("img",{src:k,alt:"编辑运行配置",width:"450"})])]),i("li",null,[i("p",null,[s("点击配置列表上方的 "),i("strong",null,"+"),s(" 按钮，然后选择 "),i("strong",null,"Xcode Application"),s("。")]),i("p",null,[i("img",{src:c,alt:"iOS 应用程序的新运行配置"})])]),i("li",null,[i("p",null,"命名你的配置。")]),i("li",null,[i("p",null,[s("选择"),i("strong",null,"工作目录"),s("。为此，导航到你的项目，例如 "),i("strong",null,"KotlinMultiplatformSandbox"),s("，在 "),i("code",null,"iosApp"),s(" 文件夹中。")])]),i("li",null,[i("p",null,[s("点击 "),i("strong",null,"Run"),s(" 以在新模拟设备上运行你的应用程序。")])])],-1),i("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"在真实的-ios-设备上运行",tabindex:"-1"},[s("在真实的 iOS 设备上运行 "),i("a",{class:"header-anchor",href:"#在真实的-ios-设备上运行","aria-label":'Permalink to "在真实的 iOS 设备上运行 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1),i("p",null,[s("你可以在真实的 iOS 设备上运行你的多平台应用程序。开始之前，你需要设置与你的 "),i("a",{href:"https://support.apple.com/en-us/HT204316",target:"_blank",rel:"noreferrer"},"Apple ID"),s(" 关联的 Team ID。")],-1),i("h5",{id:"设置你的-team-id",tabindex:"-1"},[s("设置你的 Team ID "),i("a",{class:"header-anchor",href:"#设置你的-team-id","aria-label":'Permalink to "设置你的 Team ID"'},"​")],-1),i("p",null,"要在你的项目中设置 Team ID，你可以使用 IntelliJ IDEA 中的 KDoctor 工具，或在 Xcode 中选择你的团队。",-1),i("p",null,"对于 KDoctor：",-1),i("ol",null,[i("li",null,[i("p",null,"在 IntelliJ IDEA 中，在终端中运行以下命令："),i("div",{class:"language-none vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"none"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",null,"kdoctor --team-ids")])])])]),i("p",null,"KDoctor 将列出你系统上当前配置的所有 Team ID，例如："),i("div",{class:"language-text vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"text"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",null,"3ABC246XYZ (Max Sample)")]),s(`
`),i("span",{class:"line"},[i("span",null,"ZABCW6SXYZ (SampleTech Inc.)")])])])])]),i("li",null,[i("p",null,[s("在 IntelliJ IDEA 中，打开 "),i("code",null,"iosApp/Configuration/Config.xcconfig"),s(" 并指定你的 Team ID。")])])],-1),i("p",null,"或者，在 Xcode 中选择团队：",-1),i("ol",null,[i("li",null,[i("p",null,[s("转到 Xcode 并选择 "),i("strong",null,"Open a project or file"),s("。")])]),i("li",null,[i("p",null,[s("导航到你的项目的 "),i("code",null,"iosApp/iosApp.xcworkspace"),s(" 文件。")])]),i("li",null,[i("p",null,[s("在左侧菜单中，选择 "),i("code",null,"iosApp"),s("。")])]),i("li",null,[i("p",null,[s("导航到 "),i("strong",null,"Signing & Capabilities"),s("。")])]),i("li",null,[i("p",null,[s("在 "),i("strong",null,"Team"),s(" 列表中，选择你的团队。")]),i("p",null,[s("如果你尚未设置你的团队，请在 "),i("strong",null,"Team"),s(" 列表中使用 "),i("strong",null,"Add an Account"),s(" 选项，并遵循 Xcode 说明。")])]),i("li",null,[i("p",null,"确保 Bundle Identifier 是唯一的且签名证书已成功分配。")])],-1),i("h5",{id:"运行应用",tabindex:"-1"},[s("运行应用 "),i("a",{class:"header-anchor",href:"#运行应用","aria-label":'Permalink to "运行应用"'},"​")],-1),i("p",null,[s("用数据线连接你的 iPhone。如果你的设备已在 Xcode 中注册，IntelliJ IDEA 应该在运行配置列表中显示它。运行相应的 "),i("code",null,"iosApp"),s(" 配置。")],-1),i("p",null,[s("如果你尚未在 Xcode 中注册你的 iPhone，请遵循 "),i("a",{href:"https://developer.apple.com/documentation/xcode/running-your-app-in-simulator-or-on-a-device/",target:"_blank",rel:"noreferrer"},"Apple 建议"),s("。 简而言之，你应该：")],-1),i("ol",null,[i("li",null,"用数据线连接你的 iPhone。"),i("li",null,[s("在你的 iPhone 上，在 "),i("strong",null,"Settings"),s(" | "),i("strong",null,"Privacy & Security"),s(" 中启用开发者模式。")]),i("li",null,[s("在 Xcode 中，转到顶部菜单并选择 "),i("strong",null,"Window"),s(" | "),i("strong",null,"Devices and Simulators"),s("。")]),i("li",null,[s("点击加号。选择你已连接的 iPhone，然后点击 "),i("strong",null,"Add"),s("。")]),i("li",null,"使用你的 Apple ID 登录，以在设备上启用开发功能。"),i("li",null,"遵循屏幕上的说明完成配对过程。")],-1),i("p",null,[s("在 Xcode 中注册你的 iPhone 后，在 IntelliJ IDEA 中"),i("a",{href:"#run-on-a-new-ios-simulated-device"},"创建新的运行配置"),s("，并在"),i("strong",null,"执行目标"),s("列表中选择你的设备。运行相应的 "),i("code",null,"iosApp"),s(" 配置。")],-1)])),_:1}),l[6]||(l[6]=n('<h3 id="在桌面平台上运行你的应用程序" tabindex="-1">在桌面平台上运行你的应用程序 <a class="header-anchor" href="#在桌面平台上运行你的应用程序" aria-label="Permalink to &quot;在桌面平台上运行你的应用程序&quot;">​</a></h3><p>在运行配置列表中选择 <strong>composeApp [desktop]</strong> 并点击 <strong>Run</strong>。默认情况下，运行配置会在其自己的操作系统窗口中启动一个桌面应用：</p><p><img src="'+A+'" alt="在桌面平台上运行 Compose Multiplatform 应用" width="350"></p><p><img src="'+F+'" alt="第一个桌面平台上的 Compose Multiplatform 应用" width="500"></p><h3 id="运行你的-web-应用程序" tabindex="-1">运行你的 Web 应用程序 <a class="header-anchor" href="#运行你的-web-应用程序" aria-label="Permalink to &quot;运行你的 Web 应用程序&quot;">​</a></h3><p>在运行配置列表中选择 <strong>composeApp [wasmJs]</strong> 并点击 <strong>Run</strong>。</p><p><img src="'+I+'" alt="在 Web 上运行 Compose Multiplatform 应用" width="350"></p><p>Web 应用程序将在你的浏览器中自动打开。或者，当运行完成后，你可以在浏览器中输入以下 URL：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   http://localhost:8080/</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>端口号可能不同，因为 8080 端口可能不可用。你可以在 Gradle 构建控制台中找到实际的端口号。</p></div><p><img src="'+v+'" alt="Compose Web 应用程序" width="550"></p><h2 id="下一步" tabindex="-1">下一步 <a class="header-anchor" href="#下一步" aria-label="Permalink to &quot;下一步&quot;">​</a></h2><p>在本教程的下一部分，你将学习如何实现可组合函数并在每个平台上启动你的应用程序。</p><p><strong><a href="./compose-multiplatform-explore-composables">继续前往下一部分</a></strong></p><h2 id="获取帮助" tabindex="-1">获取帮助 <a class="header-anchor" href="#获取帮助" aria-label="Permalink to &quot;获取帮助&quot;">​</a></h2><ul><li><strong>Kotlin Slack</strong>。获取<a href="https://surveys.jetbrains.com/s3/kotlin-slack-sign-up" target="_blank" rel="noreferrer">邀请</a>并加入 <a href="https://kotlinlang.slack.com/archives/C3PQML5NU" target="_blank" rel="noreferrer">#multiplatform</a> 频道。</li><li><strong>Kotlin 问题追踪器</strong>。<a href="https://youtrack.jetbrains.com/newIssue?project=KT" target="_blank" rel="noreferrer">报告新问题</a>。</li></ul>',16))])}const j=M(w,[["render",P]]);export{X as __pageData,j as default};
