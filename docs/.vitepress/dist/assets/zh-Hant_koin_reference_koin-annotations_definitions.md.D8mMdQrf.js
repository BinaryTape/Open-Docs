import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.Bksy39di.js";const g=JSON.parse('{"title":"帶有註解的定義","description":"","frontmatter":{"title":"帶有註解的定義"},"headers":[],"relativePath":"zh-Hant/koin/reference/koin-annotations/definitions.md","filePath":"zh-Hant/koin/reference/koin-annotations/definitions.md","lastUpdated":1748365453000}'),t={name:"zh-Hant/koin/reference/koin-annotations/definitions.md"};function l(p,s,h,k,o,d){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="帶有註解的定義" tabindex="-1">帶有註解的定義 <a class="header-anchor" href="#帶有註解的定義" aria-label="Permalink to &quot;帶有註解的定義&quot;">​</a></h1><p>Koin 註解 (Koin Annotations) 允許像常規的 Koin DSL 一樣宣告相同類型的定義，但改用註解方式。只需使用所需的註解標記您的類別，它將為您生成所有內容！</p><p>例如，等同於 <code>single { MyComponent(get()) }</code> DSL 宣告的方式，只需像這樣使用 <code>@Single</code> 標記：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Single</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myDependency : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyDependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Koin 註解保持與 Koin DSL 相同的語義。您可以使用以下定義來宣告您的元件：</p><ul><li><code>@Single</code> - 單例實例 (在 DSL 中使用 <code>single { }</code> 宣告)</li><li><code>@Factory</code> - 工廠實例。用於每次您需要實例時重新建立的實例。(在 DSL 中使用 <code>factory { }</code> 宣告)</li><li><code>@KoinViewModel</code> - Android ViewModel 實例 (在 DSL 中使用 <code>viewModel { }</code> 宣告)</li><li><code>@KoinWorker</code> - Android Worker Workmanager 實例 (在 DSL 中使用 <code>worker { }</code> 宣告)</li></ul><p>關於作用域 (Scopes)，請查閱 <a href="/zh-Hant/koin/reference/koin-core/scopes">宣告作用域</a> 章節。</p><h3 id="為-kotlin-multiplatform-生成-compose-viewmodel-自-1-4-0-起" tabindex="-1">為 Kotlin Multiplatform 生成 Compose ViewModel (自 1.4.0 起) <a class="header-anchor" href="#為-kotlin-multiplatform-生成-compose-viewmodel-自-1-4-0-起" aria-label="Permalink to &quot;為 Kotlin Multiplatform 生成 Compose ViewModel (自 1.4.0 起)&quot;">​</a></h3><p><code>@KoinViewModel</code> 註解可用於生成 Android 或 Compose KMP ViewModel。要在 Koin 定義中生成 <code>viewModel</code> (使用 <code>org.koin.compose.viewmodel.dsl.viewModel</code> 而非常規的 <code>org.koin.androidx.viewmodel.dsl.viewModel</code>)，您需要啟用 <code>KOIN_USE_COMPOSE_VIEWMODEL</code> 選項：</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ksp {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    arg(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;KOIN_USE_COMPOSE_VIEWMODEL&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;true&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p><code>USE_COMPOSE_VIEWMODEL</code> 鍵已被棄用，請改用 <code>KOIN_USE_COMPOSE_VIEWMODEL</code>。</p></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Koin 4.0 應會將這兩個 ViewModel DSL 合併為一個，因為 ViewModel 類型參數來自同一個函式庫。</p></div><h2 id="自動或特定綁定" tabindex="-1">自動或特定綁定 <a class="header-anchor" href="#自動或特定綁定" aria-label="Permalink to &quot;自動或特定綁定&quot;">​</a></h2><p>當宣告一個元件時，所有檢測到的「綁定」(相關聯的超類別) 都將為您準備好。例如，以下定義：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Single</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myDependency : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyDependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyInterface</span></span></code></pre></div><p>Koin 將宣告您的 <code>MyComponent</code> 元件也與 <code>MyInterface</code> 綁定。其 DSL 等效為 <code>single { MyComponent(get()) } bind MyInterface::class</code>。</p><p>除了讓 Koin 為您檢測，您也可以透過 <code>binds</code> 註解參數來指定您真正想要綁定的類型：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Single</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(binds </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [MyBoundType::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span></code></pre></div><h2 id="可為-null-的依賴項" tabindex="-1">可為 Null 的依賴項 <a class="header-anchor" href="#可為-null-的依賴項" aria-label="Permalink to &quot;可為 Null 的依賴項&quot;">​</a></h2><p>如果您的元件使用可為 Null 的依賴項，請不用擔心，它將自動為您處理。只需繼續使用您的定義註解，Koin 會猜測該怎麼做：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Single</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myDependency : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyDependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?)</span></span></code></pre></div><p>生成的 DSL 等效將是 <code>single { MyComponent(getOrNull()) }</code></p><blockquote><p>請注意，這也適用於注入的參數和屬性。</p></blockquote><h2 id="使用-named-的限定符" tabindex="-1">使用 @Named 的限定符 <a class="header-anchor" href="#使用-named-的限定符" aria-label="Permalink to &quot;使用 @Named 的限定符&quot;">​</a></h2><p>您可以為定義添加一個「名稱」(也稱為限定符 Qualifier)，以區分相同類型的多個定義，使用 <code>@Named</code> 註解：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Single</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Named</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;InMemoryLogger&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LoggerInMemoryDataSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LoggerDataSource</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Single</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Named</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;DatabaseLogger&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LoggerLocalDataSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> logDao: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LogDao</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LoggerDataSource</span></span></code></pre></div><p>解析依賴項時，只需使用 <code>named</code> 函式搭配限定符：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> logger: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LoggerDataSource</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> inject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">named</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;InMemoryLogger&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><p>也可以建立自訂的限定符註解。以上述範例為例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Named</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">annotation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> InMemoryLogger</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Named</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">annotation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DatabaseLogger</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Single</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@InMemoryLogger</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LoggerInMemoryDataSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LoggerDataSource</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Single</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@DatabaseLogger</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LoggerLocalDataSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> logDao: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LogDao</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LoggerDataSource</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> logger: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LoggerDataSource</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> inject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">named</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">InMemoryLogger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;())</span></span></code></pre></div><h2 id="使用-injectedparam-注入參數" tabindex="-1">使用 @InjectedParam 注入參數 <a class="header-anchor" href="#使用-injectedparam-注入參數" aria-label="Permalink to &quot;使用 @InjectedParam 注入參數&quot;">​</a></h2><p>您可以將建構子成員標記為「注入參數」，這表示在呼叫解析時，該依賴項將在圖中傳遞。</p><p>例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Single</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@InjectedParam</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myDependency : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyDependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>然後您可以呼叫您的 <code>MyComponent</code> 並傳遞 <code>MyDependency</code> 的實例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MyDependency</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Resolve MyComponent while passing  MyDependency</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">koin.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parametersOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(m) }</span></span></code></pre></div><p>生成的 DSL 等效將是 <code>single { params -&gt; MyComponent(params.get()) }</code></p><h2 id="注入懶載入依賴項-lazy-t" tabindex="-1">注入懶載入依賴項 - <code>Lazy&lt;T&gt;</code> <a class="header-anchor" href="#注入懶載入依賴項-lazy-t" aria-label="Permalink to &quot;注入懶載入依賴項 - \`Lazy&lt;T&gt;\`&quot;">​</a></h2><p>Koin 可以自動檢測並解析懶載入的依賴項。例如，我們希望懶載入解析 <code>LoggerDataSource</code> 定義。您只需使用 <code>Lazy</code> Kotlin 類型，如下所示：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Single</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LoggerInMemoryDataSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LoggerDataSource</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Single</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LoggerAggregator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lazyLogger : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Lazy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LoggerDataSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;)</span></span></code></pre></div><p>其背後將生成類似於使用 <code>inject()</code> 而非 <code>get()</code> 的 DSL：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">single</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LoggerAggregator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">inject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) }</span></span></code></pre></div><h2 id="注入依賴項列表-list-t" tabindex="-1">注入依賴項列表 - <code>List&lt;T&gt;</code> <a class="header-anchor" href="#注入依賴項列表-list-t" aria-label="Permalink to &quot;注入依賴項列表 - \`List&lt;T&gt;\`&quot;">​</a></h2><p>Koin 可以自動檢測並解析所有依賴項列表。例如，我們希望解析所有 <code>LoggerDataSource</code> 定義。您只需使用 <code>List</code> Kotlin 類型，如下所示：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Single</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Named</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;InMemoryLogger&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LoggerInMemoryDataSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LoggerDataSource</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Single</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Named</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;DatabaseLogger&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LoggerLocalDataSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> logDao: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LogDao</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LoggerDataSource</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Single</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LoggerAggregator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> datasource : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LoggerDataSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;)</span></span></code></pre></div><p>其背後將生成類似於使用 <code>getAll()</code> 函式的 DSL：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">single</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LoggerAggregator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) }</span></span></code></pre></div><h2 id="帶有-property-的屬性" tabindex="-1">帶有 @Property 的屬性 <a class="header-anchor" href="#帶有-property-的屬性" aria-label="Permalink to &quot;帶有 @Property 的屬性&quot;">​</a></h2><p>要在您的定義中解析 Koin 屬性，只需使用 <code>@Property</code> 標記建構子成員。這將透過傳遞給註解的值來解析 Koin 屬性：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Factory</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ComponentWithProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @Property</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>生成的 DSL 等效將是 <code>factory { ComponentWithProps(getProperty(&quot;id&quot;)) }</code></p><h3 id="propertyvalue-帶有預設值的屬性-自-1-4-起" tabindex="-1">@PropertyValue - 帶有預設值的屬性 (自 1.4 起) <a class="header-anchor" href="#propertyvalue-帶有預設值的屬性-自-1-4-起" aria-label="Permalink to &quot;@PropertyValue - 帶有預設值的屬性 (自 1.4 起)&quot;">​</a></h3><p>Koin 註解提供了直接從您的程式碼中透過 <code>@PropertyValue</code> 註解為屬性定義預設值的可能性。讓我們沿用我們的範例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Factory</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ComponentWithProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @Property</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> companion</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        @PropertyValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DEFAULT_ID : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;_empty_id&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>生成的 DSL 等效將是 <code>factory { ComponentWithProps(getProperty(&quot;id&quot;, ComponentWithProps.DEFAAULT_ID)) }</code></p>`,56)]))}const c=i(t,[["render",l]]);export{g as __pageData,c as default};
