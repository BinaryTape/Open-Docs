import{_ as p,C as t,c as o,o as h,G as s,ag as r,w as k,j as e,a as d}from"./chunks/framework.Bksy39di.js";const _=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/ktor/client-timeout.md","filePath":"zh-Hant/ktor/client-timeout.md","lastUpdated":1755457140000}'),c={name:"zh-Hant/ktor/client-timeout.md"};function u(g,i,E,m,y,F){const a=t("TopicTitle"),n=t("primary-label"),l=t("tldr");return h(),o("div",null,[s(a,{labelRef:"client-plugin",title:"逾時"}),s(n,{ref:"client-plugin"},null,512),s(l,null,{default:k(()=>i[0]||(i[0]=[e("p",null,[e("b",null,"程式碼範例"),d(": "),e("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/client-timeout"}," client-timeout ")],-1)])),_:1}),i[1]||(i[1]=r(`<p><a href="https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins/-http-timeout" target="_blank" rel="noreferrer">HttpTimeout</a> 插件允許您配置以下逾時：</p><ul><li><strong>請求逾時</strong> — 處理 HTTP 呼叫所需的時間週期：從傳送請求到接收回應。</li><li><strong>連線逾時</strong> — 用戶端應與伺服器建立連線的時間週期。</li><li><strong>Socket 逾時</strong> — 與伺服器交換資料時，兩個資料封包之間的最大非活動時間。</li></ul><p>您可以為所有請求或僅特定請求指定這些逾時。</p><h2 id="add_dependencies" tabindex="-1">新增相依性 <a class="header-anchor" href="#add_dependencies" aria-label="Permalink to &quot;新增相依性 {id=&quot;add_dependencies&quot;}&quot;">​</a></h2><p><code>HttpTimeout</code> 僅需要 <a href="./client-dependencies">ktor-client-core</a> 構件，不需要任何特定的相依性。</p><h2 id="install_plugin" tabindex="-1">安裝 HttpTimeout <a class="header-anchor" href="#install_plugin" aria-label="Permalink to &quot;安裝 HttpTimeout {id=&quot;install_plugin&quot;}&quot;">​</a></h2><p>要安裝 <code>HttpTimeout</code>，請在<a href="./client-create-and-configure#configure-client">用戶端配置區塊</a>內的 <code>install</code> 函數中傳遞它：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.engine.cio.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.plugins.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpTimeout)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="configure_plugin" tabindex="-1">配置逾時 <a class="header-anchor" href="#configure_plugin" aria-label="Permalink to &quot;配置逾時 {id=&quot;configure_plugin&quot;}&quot;">​</a></h2><p>要配置逾時，您可以使用對應的屬性：</p><ul><li><a href="https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins/-http-timeout-config/request-timeout-millis.html" target="_blank" rel="noreferrer">requestTimeoutMillis</a> 指定了整個 HTTP 呼叫的逾時，從傳送請求到接收回應。</li><li><a href="https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins/-http-timeout-config/connect-timeout-millis.html" target="_blank" rel="noreferrer">connectTimeoutMillis</a> 指定了與伺服器建立連線的逾時。</li><li><a href="https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins/-http-timeout-config/socket-timeout-millis.html" target="_blank" rel="noreferrer">socketTimeoutMillis</a> 指定了與伺服器交換資料時，兩個資料封包之間的最大非活動時間逾時。</li></ul><p>您可以在 <code>install</code> 區塊內為所有請求指定逾時。下面的程式碼範例展示了如何使用 <code>requestTimeoutMillis</code> 設定請求逾時：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpTimeout) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        requestTimeoutMillis </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>如果您只需要為特定請求設定逾時，請使用 <a href="https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins/timeout.html" target="_blank" rel="noreferrer">HttpRequestBuilder.timeout</a> 屬性：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HttpResponse</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://0.0.0.0:8080/path1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    timeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        requestTimeoutMillis </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>請注意，為特定請求指定的逾時會覆寫 <code>install</code> 區塊中的全域逾時。</p><p>在逾時的情況下，Ktor 會拋出 <code>HttpRequestTimeoutException</code>、<code>ConnectTimeoutException</code> 或 <code>SocketTimeoutException</code>。</p><h2 id="limitations" tabindex="-1">限制 <a class="header-anchor" href="#limitations" aria-label="Permalink to &quot;限制 {id=&quot;limitations&quot;}&quot;">​</a></h2><p><code>HttpTimeout</code> 對於特定的<a href="./client-engines">引擎</a>有一些限制。下表顯示了這些引擎支援哪些逾時：</p><table tabindex="0"><thead><tr><th>引擎</th><th>請求逾時</th><th>連線逾時</th><th>Socket 逾時</th></tr></thead><tbody><tr><td><a href="./client-engines#darwin">Darwin</a></td><td>✅️</td><td>✖️</td><td>✅️</td></tr><tr><td><a href="./client-engines#js">JavaScript</a></td><td>✅</td><td>✖️</td><td>✖️</td></tr><tr><td><a href="./client-engines#curl">Curl</a></td><td>✅</td><td>✅️</td><td>✖️</td></tr><tr><td><a href="./client-testing">MockEngine</a></td><td>✅</td><td>✖️</td><td>✅</td></tr></tbody></table>`,20))])}const b=p(c,[["render",u]]);export{_ as __pageData,b as default};
