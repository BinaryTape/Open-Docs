import{_ as i,a,b as t}from"./chunks/kotlin-analysis.DmuGV0qM.js";import{_ as n,c as l,o as e,ag as h}from"./chunks/framework.Bksy39di.js";const F=JSON.parse('{"title":"웹 소스 및 API에서 데이터 가져오기","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kotlin/data-analysis-work-with-api.md","filePath":"ko/kotlin/data-analysis-work-with-api.md","lastUpdated":1754307826000}'),p={name:"ko/kotlin/data-analysis-work-with-api.md"};function k(r,s,o,d,E,g){return e(),l("div",null,s[0]||(s[0]=[h(`<h1 id="웹-소스-및-api에서-데이터-가져오기" tabindex="-1">웹 소스 및 API에서 데이터 가져오기 <a class="header-anchor" href="#웹-소스-및-api에서-데이터-가져오기" aria-label="Permalink to &quot;웹 소스 및 API에서 데이터 가져오기&quot;">​</a></h1><p><a href="/ko/kotlin/kotlin-notebook-overview">Kotlin Notebook</a>은 다양한 웹 소스 및 API에서 데이터에 액세스하고 조작하기 위한 강력한 플랫폼을 제공합니다. 이는 모든 단계를 명확하게 시각화할 수 있는 반복적인 환경을 제공하여 데이터 추출 및 분석 작업을 단순화합니다. 따라서 익숙하지 않은 API를 탐색할 때 특히 유용합니다.</p><p><a href="https://kotlin.github.io/dataframe/gettingstarted.html" target="_blank" rel="noreferrer">Kotlin DataFrame 라이브러리</a>와 함께 사용하면 Kotlin Notebook은 API에 연결하여 JSON 데이터를 가져올 수 있을 뿐만 아니라, 포괄적인 분석 및 시각화를 위해 이 데이터를 재구성하는 데도 도움을 줍니다.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Kotlin Notebook 예시는 <a href="https://github.com/Kotlin/dataframe/blob/master/examples/notebooks/youtube/Youtube.ipynb" target="_blank" rel="noreferrer">GitHub의 DataFrame 예시</a>를 참조하세요.</p></div><h2 id="시작하기-전에" tabindex="-1">시작하기 전에 <a class="header-anchor" href="#시작하기-전에" aria-label="Permalink to &quot;시작하기 전에&quot;">​</a></h2><p>Kotlin Notebook은 <a href="https://plugins.jetbrains.com/plugin/16340-kotlin-notebook" target="_blank" rel="noreferrer">Kotlin Notebook 플러그인</a>에 의존하며, 이 플러그인은 IntelliJ IDEA에 기본적으로 번들로 제공되고 활성화되어 있습니다.</p><p>Kotlin Notebook 기능이 활성화되어 있지 않다면, 플러그인이 활성화되었는지 확인하세요. 자세한 내용은 <a href="/ko/kotlin/kotlin-notebook-set-up-env">환경 설정</a>을 참조하세요.</p><p>새 Kotlin Notebook 생성:</p><ol><li><p><strong>파일</strong> | <strong>새로 만들기</strong> | <strong>Kotlin Notebook</strong>을 선택합니다.</p></li><li><p>Kotlin Notebook에서 다음 명령을 실행하여 Kotlin DataFrame 라이브러리를 임포트합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">use dataframe</span></span></code></pre></div></li></ol><h2 id="api에서-데이터-가져오기" tabindex="-1">API에서 데이터 가져오기 <a class="header-anchor" href="#api에서-데이터-가져오기" aria-label="Permalink to &quot;API에서 데이터 가져오기&quot;">​</a></h2><p>Kotlin DataFrame 라이브러리가 포함된 Kotlin Notebook을 사용하여 API에서 데이터를 가져오는 것은 <a href="/ko/kotlin/data-analysis-work-with-data-sources#retrieve-data-from-a-file">CSV 또는 JSON과 같은 파일에서 데이터 검색</a>과 유사한 <a href="https://kotlin.github.io/dataframe/read.html" target="_blank" rel="noreferrer"><code>.read()</code></a> 함수를 통해 이루어집니다. 그러나 웹 기반 소스와 작업할 때는 원시 API 데이터를 구조화된 형식으로 변환하기 위해 추가적인 포맷팅이 필요할 수 있습니다.</p><p><a href="https://console.cloud.google.com/apis/library/youtube.googleapis.com" target="_blank" rel="noreferrer">YouTube Data API</a>에서 데이터를 가져오는 예시를 살펴보겠습니다:</p><ol><li><p>Kotlin Notebook 파일(<code>.ipynb</code>)을 엽니다.</p></li><li><p>데이터 조작 작업에 필수적인 Kotlin DataFrame 라이브러리를 임포트합니다. 다음 명령을 코드 셀에서 실행하여 수행할 수 있습니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">use dataframe</span></span></code></pre></div></li><li><p>새 코드 셀에 API 키를 안전하게 추가합니다. 이는 YouTube Data API에 대한 요청을 인증하는 데 필요합니다. <a href="https://console.cloud.google.com/apis/credentials" target="_blank" rel="noreferrer">자격 증명 탭</a>에서 API 키를 얻을 수 있습니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> apiKey </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;YOUR-API_KEY&quot;</span></span></code></pre></div></li><li><p>경로를 문자열로 받아 DataFrame의 <code>.read()</code> 함수를 사용하여 YouTube Data API에서 데이터를 가져오는 <code>load</code> 함수를 생성합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(path: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AnyRow</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DataRow.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://www.googleapis.com/youtube/v3/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$path</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&amp;key=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$apiKey</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></li><li><p>가져온 데이터를 행으로 구성하고 <code>nextPageToken</code>을 통해 YouTube API의 페이지네이션을 처리합니다. 이를 통해 여러 페이지에 걸쳐 데이터를 수집할 수 있습니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(path: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, maxPages: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AnyFrame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 데이터 행을 저장할 변경 가능한 리스트를 초기화합니다.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rows </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mutableListOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AnyRow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 데이터 로드를 위한 초기 페이지 경로를 설정합니다.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pagePath </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> path</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    do</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 현재 페이지 경로에서 데이터를 로드합니다.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> row </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pagePath)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 로드된 데이터를 행으로 리스트에 추가합니다.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        rows.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(row)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 다음 페이지의 토큰을 가져옵니다(사용 가능한 경우).</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> next </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> row.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getValueOrNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;nextPageToken&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 새 토큰을 포함하여 다음 반복을 위한 페이지 경로를 업데이트합니다.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        pagePath </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&amp;pageToken=&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> next</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 다음 페이지가 없을 때까지 페이지 로드를 계속합니다.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (next </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rows.size </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> maxPages) </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 로드된 모든 행을 DataFrame으로 연결하고 반환합니다.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rows.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">concat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>이전에 정의한 <code>load()</code> 함수를 사용하여 새 코드 셀에서 데이터를 가져와 DataFrame을 생성합니다. 이 예시는 페이지당 최대 50개 결과, 최대 5페이지까지 Kotlin과 관련된 데이터(이 경우 비디오)를 가져옵니다. 결과는 <code>df</code> 변수에 저장됩니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> df </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;search?q=kotlin&amp;maxResults=50&amp;part=snippet&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">df</span></span></code></pre></div></li><li><p>마지막으로, DataFrame에서 항목을 추출하고 연결합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> items </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> df.items.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">concat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">items</span></span></code></pre></div></li></ol><h2 id="데이터-정제-및-개선" tabindex="-1">데이터 정제 및 개선 <a class="header-anchor" href="#데이터-정제-및-개선" aria-label="Permalink to &quot;데이터 정제 및 개선&quot;">​</a></h2><p>데이터를 정제하고 개선하는 것은 분석을 위한 데이터셋 준비에 있어 중요한 단계입니다. <a href="https://kotlin.github.io/dataframe/gettingstarted.html" target="_blank" rel="noreferrer">Kotlin DataFrame 라이브러리</a>는 이러한 작업을 위한 강력한 기능을 제공합니다. <a href="https://kotlin.github.io/dataframe/move.html" target="_blank" rel="noreferrer"><code>move</code></a>, <a href="https://kotlin.github.io/dataframe/concatdf.html" target="_blank" rel="noreferrer"><code>concat</code></a>, <a href="https://kotlin.github.io/dataframe/select.html" target="_blank" rel="noreferrer"><code>select</code></a>, <a href="https://kotlin.github.io/dataframe/parse.html" target="_blank" rel="noreferrer"><code>parse</code></a>, <a href="https://kotlin.github.io/dataframe/join.html" target="_blank" rel="noreferrer"><code>join</code></a>과 같은 메서드는 데이터를 구성하고 변환하는 데 중요한 역할을 합니다.</p><p>데이터가 이미 <a href="#fetch-data-from-an-api">YouTube 데이터 API를 사용하여 가져와진</a> 예시를 살펴보겠습니다. 목표는 심층 분석을 위해 데이터셋을 정제하고 재구성하는 것입니다:</p><ol><li><p>데이터를 재구성하고 정제하는 것부터 시작할 수 있습니다. 여기에는 특정 열을 새 헤더 아래로 이동하고 명확성을 위해 불필요한 열을 제거하는 작업이 포함됩니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> videos </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> items.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dropNulls</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { id.videoId }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { id.videoId named </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> and snippet }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">distinct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">videos</span></span></code></pre></div></li><li><p>정제된 데이터에서 ID를 청크(chunk)하고 해당 비디오 통계를 로드합니다. 여기에는 데이터를 더 작은 배치로 분할하고 추가 세부 정보를 가져오는 작업이 포함됩니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> statPages </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clean.id.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">chunked</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ids </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">joinToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;%2C&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;videos?part=statistics&amp;id=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$ids</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">statPages</span></span></code></pre></div></li><li><p>가져온 통계를 연결하고 관련 열을 선택합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> stats </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> statPages.items.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">concat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { id and statistics.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">stats</span></span></code></pre></div></li><li><p>기존 정제된 데이터와 새로 가져온 통계를 조인합니다. 이는 두 데이터셋을 포괄적인 DataFrame으로 병합합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> joined </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clean.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(stats)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">joined</span></span></code></pre></div></li></ol><p>이 예시는 Kotlin DataFrame의 다양한 함수를 사용하여 데이터셋을 정제, 재구성 및 개선하는 방법을 보여줍니다. 각 단계는 데이터를 개선하여 <a href="#analyze-data-in-kotlin-notebook">심층 분석</a>에 더 적합하도록 설계되었습니다.</p><h2 id="kotlin-notebook에서-데이터-분석" tabindex="-1">Kotlin Notebook에서 데이터 분석 <a class="header-anchor" href="#kotlin-notebook에서-데이터-분석" aria-label="Permalink to &quot;Kotlin Notebook에서 데이터 분석&quot;">​</a></h2><p><a href="https://kotlin.github.io/dataframe/gettingstarted.html" target="_blank" rel="noreferrer">Kotlin DataFrame 라이브러리</a>의 함수를 사용하여 데이터를 성공적으로 <a href="#fetch-data-from-an-api">가져오고</a> <a href="#clean-and-refine-data">정제 및 개선</a>했다면, 다음 단계는 이 준비된 데이터셋을 분석하여 의미 있는 통찰력을 추출하는 것입니다.</p><p>데이터 분류를 위한 <a href="https://kotlin.github.io/dataframe/groupby.html" target="_blank" rel="noreferrer"><code>groupBy</code></a>, <a href="https://kotlin.github.io/dataframe/summarystatistics.html" target="_blank" rel="noreferrer">요약 통계</a>를 위한 <a href="https://kotlin.github.io/dataframe/sum.html" target="_blank" rel="noreferrer"><code>sum</code></a> 및 <a href="https://kotlin.github.io/dataframe/maxby.html" target="_blank" rel="noreferrer"><code>maxBy</code></a>, 데이터 순서 지정을 위한 <a href="https://kotlin.github.io/dataframe/sortby.html" target="_blank" rel="noreferrer"><code>sortBy</code></a>와 같은 메서드는 특히 유용합니다. 이러한 도구를 사용하면 복잡한 데이터 분석 작업을 효율적으로 수행할 수 있습니다.</p><p><code>groupBy</code>를 사용하여 채널별 비디오를 분류하고, <code>sum</code>을 사용하여 카테고리별 총 조회수를 계산하며, <code>maxBy</code>를 사용하여 각 그룹에서 가장 최신 또는 가장 많이 조회된 비디오를 찾는 예시를 살펴보겠습니다:</p><ol><li><p>참조를 설정하여 특정 열에 대한 액세스를 단순화합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> view </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> column</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span></code></pre></div></li><li><p><code>groupBy</code> 메서드를 사용하여 <code>channel</code> 열을 기준으로 데이터를 그룹화하고 정렬합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> channels </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> joined.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">groupBy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { channel }.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sortByCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div></li></ol><p>결과 테이블에서 데이터를 상호 작용하며 탐색할 수 있습니다. 채널에 해당하는 행의 <code>group</code> 필드를 클릭하면 해당 행이 확장되어 해당 채널 비디오에 대한 더 많은 세부 정보를 볼 수 있습니다.</p><p><img src="`+i+'" alt="Expanding a row to reveal more details" width="700"></p><p>왼쪽 하단의 테이블 아이콘을 클릭하여 그룹화된 데이터셋으로 돌아갈 수 있습니다.</p><p><img src="'+a+`" alt="Click on the table icon in the bottom left to return" width="700"></p><ol start="3"><li><p><code>aggregate</code>, <code>sum</code>, <code>maxBy</code>, <code>flatten</code>을 사용하여 각 채널의 총 조회수와 가장 최신 또는 가장 많이 조회된 비디오의 세부 정보를 요약하는 DataFrame을 생성합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> aggregated </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> channels.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">aggregate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    viewCount.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() into view</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> last </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> maxBy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { publishedAt }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    last.title into </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;last title&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    last.publishedAt into </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;time&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    last.viewCount into </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;viewCount&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 조회수 기준으로 DataFrame을 내림차순으로 정렬하고 평면 구조로 변환합니다.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sortByDesc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(view).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">flatten</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">aggregated</span></span></code></pre></div></li></ol><p>분석 결과:</p><p><img src="`+t+'" alt="Analysis results" width="700"></p><p>더 고급 기술에 대한 자세한 내용은 <a href="https://kotlin.github.io/dataframe/gettingstarted.html" target="_blank" rel="noreferrer">Kotlin DataFrame 문서</a>를 참조하세요.</p><h2 id="다음-단계" tabindex="-1">다음 단계 <a class="header-anchor" href="#다음-단계" aria-label="Permalink to &quot;다음 단계&quot;">​</a></h2><ul><li><a href="https://kotlin.github.io/kandy/examples.html" target="_blank" rel="noreferrer">Kandy 라이브러리</a>를 사용한 데이터 시각화 탐색</li><li><a href="/ko/kotlin/data-analysis-visualization">Kandy를 사용한 Kotlin Notebook의 데이터 시각화</a>에서 데이터 시각화에 대한 추가 정보 찾기</li><li>Kotlin의 데이터 과학 및 분석을 위해 사용할 수 있는 도구 및 리소스에 대한 광범위한 개요는 <a href="/ko/kotlin/data-analysis-libraries">데이터 분석을 위한 Kotlin 및 Java 라이브러리</a>를 참조하세요.</li></ul>',33)]))}const u=n(p,[["render",k]]);export{F as __pageData,u as default};
