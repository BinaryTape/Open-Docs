import{_ as h}from"./chunks/icon-1-done.B5D6C9SU.js";import{_ as k}from"./chunks/icon-2-done.e1N9yMQF.js";import{_ as o}from"./chunks/icon-3.DqpDG4W7.js";import{_ as d}from"./chunks/icon-4-todo.DqbNYzPe.js";import{_ as E}from"./chunks/icon-5-todo.DJgVODZv.js";import{_ as g}from"./chunks/gradle-sync.fCQp85Nh.js";import{_ as u}from"./chunks/first-multiplatform-project-3.DSsneMHX.js";import{_ as m,C as l,c as y,o as F,j as s,G as t,ag as c,a,w as n}from"./chunks/framework.Bksy39di.js";const M=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kmp/multiplatform-dependencies.md","filePath":"zh-Hant/kmp/multiplatform-dependencies.md","lastUpdated":1755516278000}'),f={name:"zh-Hant/kmp/multiplatform-dependencies.md"};function C(b,i,B,A,D,v){const e=l("secondary-label"),p=l("Links"),r=l("tldr");return F(),y("div",null,[i[22]||(i[22]=s("h1",{id:"將依賴項新增至您的專案",tabindex:"-1"},[a("將依賴項新增至您的專案 "),s("a",{class:"header-anchor",href:"#將依賴項新增至您的專案","aria-label":'Permalink to "將依賴項新增至您的專案"'},"​")],-1)),t(e,{ref:"IntelliJ IDEA"},null,512),t(e,{ref:"Android Studio"},null,512),t(r,null,{default:n(()=>[i[18]||(i[18]=s("p",null,"本教學使用 IntelliJ IDEA，但您也可以在 Android Studio 中遵循此教學 — 兩個 IDE 都共用相同的核心功能和 Kotlin 多平台支援。",-1)),i[19]||(i[19]=s("br",null,null,-1)),i[20]||(i[20]=s("br",null,null,-1)),i[21]||(i[21]=s("p",null,[a("這是「"),s("strong",null,"使用共享邏輯和原生 UI 建立 Kotlin 多平台應用程式"),a("」教學的第三部分。在繼續之前，請確保您已完成先前的步驟。")],-1)),s("p",null,[i[2]||(i[2]=s("img",{src:h,width:"20",alt:"First step"},null,-1)),i[3]||(i[3]=a()),t(p,{href:"/kmp/multiplatform-create-first-app",summary:"This tutorial uses IntelliJ IDEA, but you can also follow it in Android Studio – both IDEs share the same core functionality and Kotlin Multiplatform support. This is the first part of the Create a Kotlin Multiplatform app with shared logic and native UI tutorial. Create your Kotlin Multiplatform app Update the user interface Add dependencies Share more logic Wrap up your project"},{default:n(()=>i[0]||(i[0]=[a("建立您的 Kotlin 多平台應用程式")])),_:1}),i[4]||(i[4]=s("br",null,null,-1)),i[5]||(i[5]=s("img",{src:k,width:"20",alt:"Second step"},null,-1)),i[6]||(i[6]=a()),t(p,{href:"/kmp/multiplatform-update-ui",summary:"This tutorial uses IntelliJ IDEA, but you can also follow it in Android Studio – both IDEs share the same core functionality and Kotlin Multiplatform support. This is the second part of the Create a Kotlin Multiplatform app with shared logic and native UI tutorial. Before proceeding, make sure you've completed previous steps. Create your Kotlin Multiplatform app Update the user interface Add dependencies Share more logic Wrap up your project"},{default:n(()=>i[1]||(i[1]=[a("更新使用者介面")])),_:1}),i[7]||(i[7]=s("br",null,null,-1)),i[8]||(i[8]=s("img",{src:o,width:"20",alt:"Third step"},null,-1)),i[9]||(i[9]=a()),i[10]||(i[10]=s("strong",null,"新增依賴項",-1)),i[11]||(i[11]=s("br",null,null,-1)),i[12]||(i[12]=s("img",{src:d,width:"20",alt:"Fourth step"},null,-1)),i[13]||(i[13]=a(" 分享更多邏輯")),i[14]||(i[14]=s("br",null,null,-1)),i[15]||(i[15]=s("img",{src:E,width:"20",alt:"Fifth step"},null,-1)),i[16]||(i[16]=a(" 結束您的專案")),i[17]||(i[17]=s("br",null,null,-1))])]),_:1}),i[23]||(i[23]=c("",19))])}const N=m(f,[["render",C]]);export{M as __pageData,N as default};
