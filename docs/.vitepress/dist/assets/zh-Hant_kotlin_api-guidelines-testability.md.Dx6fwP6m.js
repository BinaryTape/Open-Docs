import{_ as a,c as s,o as t,ag as n}from"./chunks/framework.Bksy39di.js";const c=JSON.parse('{"title":"可測試性","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/api-guidelines-testability.md","filePath":"zh-Hant/kotlin/api-guidelines-testability.md","lastUpdated":1754307826000}'),e={name:"zh-Hant/kotlin/api-guidelines-testability.md"};function l(p,i,h,k,o,d){return t(),s("div",null,i[0]||(i[0]=[n(`<h1 id="可測試性" tabindex="-1">可測試性 <a class="header-anchor" href="#可測試性" aria-label="Permalink to &quot;可測試性&quot;">​</a></h1><p><code>[//]: # (title: 可測試性)</code></p><p>除了<a href="/zh-Hant/kotlin/api-guidelines-consistency#maintain-conventions-and-quality">測試您的函式庫</a>之外，請確保使用您函式庫的程式碼也具有可測試性。</p><h2 id="避免全域狀態和有狀態的頂層函數" tabindex="-1">避免全域狀態和有狀態的頂層函數 <a class="header-anchor" href="#避免全域狀態和有狀態的頂層函數" aria-label="Permalink to &quot;避免全域狀態和有狀態的頂層函數&quot;">​</a></h2><p>您的函式庫不應依賴全域變數中的狀態，或提供有狀態的頂層函數作為其公開 API 的一部分。 此類變數和函數使得測試使用該函式庫的程式碼變得困難，因為測試需要找到方法來控制這些全域值。</p><p>例如，一個函式庫可能會定義一個全域可存取函式，提供對當前時間的存取：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> instant: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Instant</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Clock.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">now</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(instant)</span></span></code></pre></div><p>任何使用此 API 的程式碼都將難以測試，因為對 <code>now()</code> 函數的呼叫將始終返回實際當前時間，而在測試中，通常期望返回模擬值。</p><p>為了實現可測試性，<a href="https://github.com/Kotlin/kotlinx-datetime" target="_blank" rel="noreferrer"><code>kotlinx-datetime</code></a> 函式庫提供了一個 API，允許使用者獲取一個 <code>Clock</code> 實例，然後使用它來獲取當前時間：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clock: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Clock</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Clock.System</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> instant: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Instant</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clock.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">now</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(instant)</span></span></code></pre></div><p>這允許函式庫的使用者將 <code>Clock</code> 實例注入到他們自己的類別中，並在測試期間用模擬實作替換實際實作。</p><h2 id="接下來" tabindex="-1">接下來 <a class="header-anchor" href="#接下來" aria-label="Permalink to &quot;接下來&quot;">​</a></h2><p>如果您還沒有，請考慮查看這些頁面：</p><ul><li>在<a href="/zh-Hant/kotlin/api-guidelines-backward-compatibility">向後相容性</a>頁面中瞭解如何維護向後相容性。</li><li>有關有效文件實踐的廣泛概述，請參閱<a href="/zh-Hant/kotlin/api-guidelines-informative-documentation">資訊性文件</a>。</li></ul>`,14)]))}const g=a(e,[["render",l]]);export{c as __pageData,g as default};
