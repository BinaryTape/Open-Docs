import{_ as t}from"./chunks/lifecycle-states.Kfhu0FKr.js";import{_ as d,c as o,o as a,ag as i}from"./chunks/framework.Bksy39di.js";const m=JSON.parse('{"title":"ライフサイクル","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kmp/compose-lifecycle.md","filePath":"ja/kmp/compose-lifecycle.md","lastUpdated":1755516278000}'),c={name:"ja/kmp/compose-lifecycle.md"};function s(l,e,r,n,p,h){return a(),o("div",null,e[0]||(e[0]=[i(`<h1 id="ライフサイクル" tabindex="-1">ライフサイクル <a class="header-anchor" href="#ライフサイクル" aria-label="Permalink to &quot;ライフサイクル&quot;">​</a></h1><p>Compose Multiplatformにおけるコンポーネントのライフサイクルは、Jetpack Composeの<a href="https://developer.android.com/topic/libraries/architecture/lifecycle" target="_blank" rel="noreferrer">ライフサイクル</a>コンセプトから採用されています。ライフサイクルに対応したコンポーネントは、他のコンポーネントのライフサイクル状態の変化に反応でき、より整理され、多くの場合より軽量で、メンテナンスしやすいコードを作成するのに役立ちます。</p><p>Compose Multiplatformは共通の<code>LifecycleOwner</code>実装を提供します。これは、元のJetpack Composeの機能を他のプラットフォームに拡張し、共通コードでライフサイクル状態を監視するのに役立ちます。</p><p>マルチプラットフォームの<code>Lifecycle</code>実装を使用するには、<code>commonMain</code>ソースセットに以下の依存関係を追加してください。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        commonMain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.androidx.lifecycle:lifecycle-runtime-compose:2.9.2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>マルチプラットフォームのLifecycle実装の変更は、当社の<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/whats-new-compose.html" target="_blank" rel="noreferrer">最新情報</a>で追跡できます。または、<a href="./https://github.com/JetBrains/compose-multiplatform/blob/master/CHANGELOG">Compose Multiplatform changelog</a>で特定のEAPリリースを追跡することも可能です。</p></div><h2 id="状態とイベント" tabindex="-1">状態とイベント <a class="header-anchor" href="#状態とイベント" aria-label="Permalink to &quot;状態とイベント&quot;">​</a></h2><p>ライフサイクル状態とイベントの流れ（<a href="https://developer.android.com/topic/libraries/architecture/lifecycle" target="_blank" rel="noreferrer">Jetpack lifecycle</a>と同じ）：</p><p><img src="`+t+'" alt="Lifecycle diagram" width="700"></p><h2 id="ライフサイクルの実装" tabindex="-1">ライフサイクルの実装 <a class="header-anchor" href="#ライフサイクルの実装" aria-label="Permalink to &quot;ライフサイクルの実装&quot;">​</a></h2><p>Composablesは通常、独自のライフサイクルを必要としません。共通の<code>LifecycleOwner</code>が、相互接続されたすべてのエンティティにライフサイクルを提供します。デフォルトでは、Compose Multiplatformによって作成されたすべてのComposableは同じライフサイクルを共有し、そのイベントを購読したり、ライフサイクル状態を参照したりできます。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>LifecycleOwner</code>オブジェクトは<a href="https://developer.android.com/reference/kotlin/androidx/compose/runtime/CompositionLocal" target="_blank" rel="noreferrer">CompositionLocal</a>として提供されます。 特定のComposableサブツリーのライフサイクルを個別に管理したい場合は、独自の<code>LifecycleOwner</code>実装を<a href="https://developer.android.com/topic/libraries/architecture/lifecycle#implementing-lco" target="_blank" rel="noreferrer">作成できます</a>。</p></div><p>マルチプラットフォームのライフサイクルでコルーチンを扱う際、<code>Lifecycle.coroutineScope</code>の値は<code>Dispatchers.Main.immediate</code>の値に紐付けられており、これはデフォルトではデスクトップターゲットで利用できない場合があることを覚えておいてください。ライフサイクル内のコルーチンとフローがCompose Multiplatformで正しく機能するようにするには、プロジェクトに<code>kotlinx-coroutines-swing</code>の依存関係を追加してください。詳細については、<a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-main.html" target="_blank" rel="noreferrer"><code>Dispatchers.Main</code>のドキュメント</a>を参照してください。</p><ul><li><a href="./compose-navigation-routing">ナビゲーションとルーティング</a>で、ナビゲーションコンポーネントにおけるライフサイクルの動作について学びます。</li><li><a href="./compose-viewmodel">共通ViewModel</a>ページで、マルチプラットフォームViewModelの実装について詳しく学びます。</li></ul><h2 id="androidライフサイクルと他のプラットフォームのマッピング" tabindex="-1">Androidライフサイクルと他のプラットフォームのマッピング <a class="header-anchor" href="#androidライフサイクルと他のプラットフォームのマッピング" aria-label="Permalink to &quot;Androidライフサイクルと他のプラットフォームのマッピング&quot;">​</a></h2><h3 id="ios" tabindex="-1">iOS <a class="header-anchor" href="#ios" aria-label="Permalink to &quot;iOS&quot;">​</a></h3><table tabindex="0"><thead><tr><th>ネイティブイベントと通知</th><th>ライフサイクルイベント</th><th>ライフサイクル状態の変化</th></tr></thead><tbody><tr><td><code>viewDidDisappear</code></td><td><code>ON_STOP</code></td><td><code>STARTED</code> → <code>CREATED</code></td></tr><tr><td><code>viewWillAppear</code></td><td><code>ON_START</code></td><td><code>CREATED</code> → <code>STARTED</code></td></tr><tr><td><code>willResignActive</code></td><td><code>ON_PAUSE</code></td><td><code>RESUMED</code> → <code>STARTED</code></td></tr><tr><td><code>didBecomeActive</code></td><td><code>ON_RESUME</code></td><td><code>STARTED</code> → <code>RESUMED</code></td></tr><tr><td><code>didEnterBackground</code></td><td><code>ON_STOP</code></td><td><code>STARTED</code> → <code>CREATED</code></td></tr><tr><td><code>willEnterForeground</code></td><td><code>ON_START</code></td><td><code>CREATED</code> → <code>STARTED</code></td></tr><tr><td><code>viewControllerDidLeaveWindowHierarchy</code></td><td><code>ON_DESTROY</code></td><td><code>CREATED</code> → <code>DESTROYED</code></td></tr></tbody></table><h3 id="web" tabindex="-1">Web <a class="header-anchor" href="#web" aria-label="Permalink to &quot;Web&quot;">​</a></h3><p>Wasmターゲットの制限により、ライフサイクルは以下のようになります。</p><ul><li>アプリケーションは常にページにアタッチされているため、<code>CREATED</code>状態をスキップします。</li><li>ウェブページは通常、ユーザーがタブを閉じたときにのみ終了するため、<code>DESTROYED</code>状態には決して到達しません。</li></ul><table tabindex="0"><thead><tr><th>ネイティブイベント</th><th>ライフサイクルイベント</th><th>ライフサイクル状態の変化</th></tr></thead><tbody><tr><td><code>blur</code></td><td><code>ON_PAUSE</code></td><td><code>RESUMED</code> → <code>STARTED</code></td></tr><tr><td><code>focus</code></td><td><code>ON_RESUME</code></td><td><code>STARTED</code> → <code>RESUMED</code></td></tr></tbody></table><h3 id="デスクトップ" tabindex="-1">デスクトップ <a class="header-anchor" href="#デスクトップ" aria-label="Permalink to &quot;デスクトップ&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Swingリスナーコールバック</th><th>ライフサイクルイベント</th><th>ライフサイクル状態の変化</th></tr></thead><tbody><tr><td><code>windowIconified</code></td><td><code>ON_STOP</code></td><td><code>STARTED</code> → <code>CREATED</code></td></tr><tr><td><code>windowDeiconified</code></td><td><code>ON_START</code></td><td><code>CREATED</code> → <code>STARTED</code></td></tr><tr><td><code>windowLostFocus</code></td><td><code>ON_PAUSE</code></td><td><code>RESUMED</code> → <code>STARTED</code></td></tr><tr><td><code>windowGainedFocus</code></td><td><code>ON_RESUME</code></td><td><code>STARTED</code> → <code>RESUMED</code></td></tr><tr><td><code>dispose</code></td><td><code>ON_DESTROY</code></td><td><code>CREATED</code> → <code>DESTROYED</code></td></tr></tbody></table>',23)]))}const b=d(c,[["render",s]]);export{m as __pageData,b as default};
