import{_ as t,c as a,o as l,ag as o}from"./chunks/framework.Bksy39di.js";const m=JSON.parse('{"title":"库作者指南简介","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/api-guidelines-introduction.md","filePath":"kotlin/api-guidelines-introduction.md","lastUpdated":1754307826000}'),n={name:"kotlin/api-guidelines-introduction.md"};function e(r,i,s,p,d,c){return l(),a("div",null,i[0]||(i[0]=[o('<h1 id="库作者指南简介" tabindex="-1">库作者指南简介 <a class="header-anchor" href="#库作者指南简介" aria-label="Permalink to &quot;库作者指南简介&quot;">​</a></h1><p>本指南总结了在设计库时应考虑的最佳实践和理念。</p><p>为了有效，一个库必须实现某些基本目标。具体而言，它应做到：</p><ul><li><p>定义其问题域，并实现一组相关的、能解决其定义问题的<strong>功能需求</strong>。 例如，一个 HTTP 客户端可能旨在支持所有 HTTP 请求类型，并理解各种标头、内容类型和状态码。</p></li><li><p>满足与问题域相符的<strong>非功能性标准</strong>。这些通常包括性能、可靠性、安全性及可用性。 这些标准的相对重要性差异很大。例如，一个为批处理设计的库可能不需要与旨在日内交易的库相同水平的性能。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>识别和定义功能性与非功能性需求的过程是一个复杂主题，已在软件工程中被广泛研究。 本指南不深入涵盖这些主题，因为它们超出了其作用域。</p></div></li></ul><p>本指南的主要关注点是探讨一个库为保持其相关性并受用户欢迎所必须具备的特点。这些特点包括：</p><ul><li><strong>最大限度降低心智复杂性：</strong> 所有开发者都必须考虑其代码的可读性和可维护性。降低他人阅读、理解和使用你的 API 所需的心智负担至关重要。实现这一点需要创建清晰、一致、可预测且易于调试的库。</li><li><strong>向后兼容性：</strong> 发布 API 新版本时，确保现有 API 仍可运行。清晰地传达并提前文档化任何破坏性变更。为用户提供直接、清晰、渐进的途径，以便他们采用新的 API 或设计变更。</li><li><strong>信息丰富的文档：</strong> 随库附带的文档不仅仅需要重复函数和类型声明。它应该全面且专门定制以适应库的目标受众。它应准确反映各种用户角色的需求和场景，确保在不过于简单或复杂的情况下提供必要信息。始终包含清晰的示例，平衡解释性文本与实际代码示例。</li></ul><p>此外，<strong>构建具有多平台支持的 Kotlin 库</strong>可以拓宽其在面向各种环境的项目中的适用性。 设计 API 以使其在共享代码和平台特有的代码中都能可靠工作，可以提高库在所有支持的目标平台中的多功能性和可用性。</p><p>以下章节将深入探讨这些特点，并提供实用建议，帮助你为库的用户提供最佳体验。</p><h2 id="接下来" tabindex="-1">接下来 <a class="header-anchor" href="#接下来" aria-label="Permalink to &quot;接下来&quot;">​</a></h2><ul><li>关于降低心智复杂性的策略，请参见 <a href="/kotlin/api-guidelines-minimizing-mental-complexity">Minimizing mental complexity</a>。</li><li>了解如何在 <a href="/kotlin/api-guidelines-backward-compatibility">Backward compatibility</a> 中保持向后兼容性。</li><li>有关有效文档实践的全面概述，请参见 <a href="/kotlin/api-guidelines-informative-documentation">Informative documentation</a>。</li><li>探索在 <a href="/kotlin/api-guidelines-build-for-multiplatform">Building Kotlin library for multiplatform</a> 中构建多平台库的最佳实践。</li></ul>',10)]))}const g=t(n,[["render",e]]);export{m as __pageData,g as default};
