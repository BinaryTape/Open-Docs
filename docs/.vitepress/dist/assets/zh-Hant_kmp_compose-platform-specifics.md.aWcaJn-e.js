import{_ as a,c as o,o as i,ag as t}from"./chunks/framework.Bksy39di.js";const m=JSON.parse('{"title":"不同平台上的預設 UI 行為","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kmp/compose-platform-specifics.md","filePath":"zh-Hant/kmp/compose-platform-specifics.md","lastUpdated":1755516278000}'),r={name:"zh-Hant/kmp/compose-platform-specifics.md"};function l(p,e,s,n,d,h){return i(),o("div",null,e[0]||(e[0]=[t('<h1 id="不同平台上的預設-ui-行為" tabindex="-1">不同平台上的預設 UI 行為 <a class="header-anchor" href="#不同平台上的預設-ui-行為" aria-label="Permalink to &quot;不同平台上的預設 UI 行為&quot;">​</a></h1><p>Compose Multiplatform 旨在協助您在不同平台上，建立行為盡可能一致的應用程式。 在本頁面上，您將了解使用 Compose Multiplatform 為不同平台編寫共用 UI 程式碼時，應預期的不可避免差異或暫時性權衡。</p><h2 id="專案結構" tabindex="-1">專案結構 <a class="header-anchor" href="#專案結構" aria-label="Permalink to &quot;專案結構&quot;">​</a></h2><p>無論您鎖定哪個平台，每個平台都需要專用的進入點：</p><ul><li>對於 Android，這是 <code>Activity</code>，其職責是從通用程式碼中顯示主要的可組合項 (composable)。</li><li>對於 iOS 應用程式，這是初始化應用程式的 <code>@main</code> 類別或結構。</li><li>對於 JVM 應用程式，這是啟動應用程式並啟用主要通用可組合項的 <code>main()</code> 函數。</li><li>對於 Kotlin/JS 或 Kotlin/Wasm 應用程式，這是將主要通用程式碼可組合項附加到網頁上的 <code>main()</code> 函數。</li></ul><p>您的應用程式所需的某些平台特定 API 可能不支援多平台，您將需要在平台特定原始碼集中實作呼叫這些 API。 在此之前，請查看 <a href="https://klibs.io/" target="_blank" rel="noreferrer">klibs.io</a>，這是一個 JetBrains 專案，旨在全面收錄所有可用的 Kotlin Multiplatform 函式庫。 目前已有可用於網路程式碼、資料庫、協程 (coroutines) 等的函式庫。</p><h2 id="輸入方法" tabindex="-1">輸入方法 <a class="header-anchor" href="#輸入方法" aria-label="Permalink to &quot;輸入方法&quot;">​</a></h2><h3 id="軟體鍵盤" tabindex="-1">軟體鍵盤 <a class="header-anchor" href="#軟體鍵盤" aria-label="Permalink to &quot;軟體鍵盤&quot;">​</a></h3><p>每個平台處理軟體鍵盤的方式可能略有不同，包括文字欄位啟用時鍵盤的出現方式。</p><p>Compose Multiplatform 採用 <a href="https://developer.android.com/develop/ui/compose/system/insets" target="_blank" rel="noreferrer">Compose 視窗內嵌 (insets) 方法</a> 並在 iOS 上模擬此方法，以考量 <a href="https://developer.apple.com/documentation/UIKit/positioning-content-relative-to-the-safe-area" target="_blank" rel="noreferrer">安全區域 (safe areas)</a>。 根據您的實作，軟體鍵盤在 iOS 上的位置可能會略有不同。 請務必檢查鍵盤是否遮蓋了兩個平台上的重要 UI 元素。</p><p>Compose Multiplatform 目前不支援變更預設的 IME 動作，例如，顯示放大鏡或勾選符號，而不是常見的 ↵ 圖示。</p><h3 id="觸控與滑鼠支援" tabindex="-1">觸控與滑鼠支援 <a class="header-anchor" href="#觸控與滑鼠支援" aria-label="Permalink to &quot;觸控與滑鼠支援&quot;">​</a></h3><p>目前的桌面實作將所有指標操作解讀為滑鼠手勢，因此不支援多點觸控手勢。 例如，由於需要同時處理兩次觸控，因此桌面版的 Compose Multiplatform 無法實作常見的雙指縮放手勢。</p><h2 id="ui-行為與外觀" tabindex="-1">UI 行為與外觀 <a class="header-anchor" href="#ui-行為與外觀" aria-label="Permalink to &quot;UI 行為與外觀&quot;">​</a></h2><h3 id="平台特定功能" tabindex="-1">平台特定功能 <a class="header-anchor" href="#平台特定功能" aria-label="Permalink to &quot;平台特定功能&quot;">​</a></h3><p>某些常見的 UI 元素不在 Compose Multiplatform 的範圍內，且無法使用該框架進行自訂。 因此，您應該預期它們在不同平台上的外觀會有所不同。</p><p>原生彈出式檢視 (pop-up views) 就是一個例子： 當您在 Compose Multiplatform 文字欄位中選取文字時，預設的建議動作，例如 <strong>複製</strong> 或 <strong>翻譯</strong>，將會是應用程式執行所在平台特有的。</p><h3 id="滾動物理" tabindex="-1">滾動物理 <a class="header-anchor" href="#滾動物理" aria-label="Permalink to &quot;滾動物理&quot;">​</a></h3><p>對於 Android 和 iOS，滾動的手感與平台保持一致。 對於桌面，滾動支援僅限於滑鼠滾輪（如 <a href="#touch-and-mouse-support">undefined</a> 中所述）。</p><h3 id="互通檢視-interop-views" tabindex="-1">互通檢視 (Interop views) <a class="header-anchor" href="#互通檢視-interop-views" aria-label="Permalink to &quot;互通檢視 (Interop views)&quot;">​</a></h3><p>如果您想在通用可組合項中嵌入原生檢視，反之亦然，您將需要熟悉 Compose Multiplatform 支援的平台特定機制。</p><p>對於 iOS，有關於與 <a href="./compose-swiftui-integration">SwiftUI</a> 和 <a href="./compose-uikit-integration">UIKit</a> 互通 (interop) 程式碼的單獨指南。</p><p>對於桌面，Compose Multiplatform 支援 <a href="./compose-desktop-swing-interoperability">Swing 互通性</a>。</p><h3 id="返回手勢" tabindex="-1">返回手勢 <a class="header-anchor" href="#返回手勢" aria-label="Permalink to &quot;返回手勢&quot;">​</a></h3><p>Android 裝置預設支援返回手勢，每個畫面都會以某種方式回應 <strong>返回</strong> 按鈕。</p><p>在 iOS 上，預設沒有返回手勢，儘管鼓勵開發人員實作類似功能以符合使用者體驗預期。 適用於 iOS 的 Compose Multiplatform 預設支援返回手勢，以模仿 Android 功能。</p><p>在桌面，Compose Multiplatform 使用 <strong>Esc</strong> 鍵作為預設的返回觸發器。</p><p>詳細資訊請參閱 <a href="./compose-navigation#back-gesture">undefined</a> 部分。</p><h3 id="文字" tabindex="-1">文字 <a class="header-anchor" href="#文字" aria-label="Permalink to &quot;文字&quot;">​</a></h3><p>在文字方面，Compose Multiplatform 不保證不同平台之間有像素級的精確對應關係：</p><ul><li>如果您未明確設定字體，每個系統都會為您的文字指定不同的預設字體。</li><li>即使是相同的字體，每個平台特有的字型反鋸齒 (letter aliasing) 機制也可能導致明顯的差異。</li></ul><p>這對使用者體驗沒有顯著影響。相反地，預設字體在每個平台上都按預期顯示。 然而，像素差異可能會干擾螢幕截圖測試等情況。</p><h2 id="開發者體驗" tabindex="-1">開發者體驗 <a class="header-anchor" href="#開發者體驗" aria-label="Permalink to &quot;開發者體驗&quot;">​</a></h2><h3 id="預覽-previews" tabindex="-1">預覽 (Previews) <a class="header-anchor" href="#預覽-previews" aria-label="Permalink to &quot;預覽 (Previews)&quot;">​</a></h3><p><em>預覽 (Previews)</em> 是 IDE 中可用的可組合項的非互動式佈局呈現。</p><p>若要查看可組合項的預覽：</p><ol><li>如果您的專案中沒有 Android 目標，請新增一個（預覽機制使用 Android 函式庫）。</li><li>在通用程式碼中，使用 <code>@Preview</code> 註解標記您希望可預覽的可組合項。</li><li>切換到編輯器視窗中的 <strong>分割 (Split)</strong> 或 <strong>設計 (Design)</strong> 檢視。如果您尚未這麼做，它將提示您首次建置專案。</li></ol><p>在 IntelliJ IDEA 和 Android Studio 中，您將能夠看到目前檔案中，每個標註 <code>@Preview</code> 的可組合項的初始佈局。</p><h3 id="熱重載-hot-reload" tabindex="-1">熱重載 (Hot reload) <a class="header-anchor" href="#熱重載-hot-reload" aria-label="Permalink to &quot;熱重載 (Hot reload)&quot;">​</a></h3><p><em>熱重載 (Hot reload)</em> 指的是應用程式即時反映程式碼變更，而無需額外輸入。 在 Compose Multiplatform 中，熱重載功能僅適用於 JVM（桌面）目標。 然而，您可以使用它來快速排除故障，然後再切換到您預期的平台進行微調。</p><p>若要了解更多資訊，請參閱我們的 <a href="./compose-hot-reload">Compose 熱重載</a> 文章。</p><h2 id="後續步驟" tabindex="-1">後續步驟 <a class="header-anchor" href="#後續步驟" aria-label="Permalink to &quot;後續步驟&quot;">​</a></h2><p>閱讀更多關於以下組件的 Compose Multiplatform 實作：</p><ul><li><a href="./compose-multiplatform-resources">資源 (Resources)</a></li><li><a href="./compose-lifecycle">生命週期 (Lifecycle)</a></li><li><a href="./compose-viewmodel">通用 ViewModel</a></li><li><a href="./compose-navigation-routing">導航與路由</a></li></ul>',44)]))}const u=a(r,[["render",l]]);export{m as __pageData,u as default};
