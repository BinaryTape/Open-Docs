import{_ as t,c as e,o as l,ag as i}from"./chunks/framework.Bksy39di.js";const c=JSON.parse('{"title":"KSP 常見問題","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/ksp-faq.md","filePath":"zh-Hant/kotlin/ksp-faq.md","lastUpdated":1754307826000}'),o={name:"zh-Hant/kotlin/ksp-faq.md"};function n(r,a,s,p,h,k){return l(),e("div",null,a[0]||(a[0]=[i('<h1 id="ksp-常見問題" tabindex="-1">KSP 常見問題 <a class="header-anchor" href="#ksp-常見問題" aria-label="Permalink to &quot;KSP 常見問題&quot;">​</a></h1><h3 id="為何選擇-ksp" tabindex="-1">為何選擇 KSP？ <a class="header-anchor" href="#為何選擇-ksp" aria-label="Permalink to &quot;為何選擇 KSP？&quot;">​</a></h3><p>KSP 相較於 <a href="/zh-Hant/kotlin/kapt">kapt</a> 具有多項優勢：</p><ul><li>速度更快。</li><li>API 對於 Kotlin 使用者而言更為流暢。</li><li>它支援對生成的 Kotlin 原始碼進行<a href="/zh-Hant/kotlin/ksp-multi-round">多輪處理</a>。</li><li>其設計時已將多平台相容性納入考量。</li></ul><h3 id="為何-ksp-比-kapt-更快" tabindex="-1">為何 KSP 比 kapt 更快？ <a class="header-anchor" href="#為何-ksp-比-kapt-更快" aria-label="Permalink to &quot;為何 KSP 比 kapt 更快？&quot;">​</a></h3><p>kapt 必須解析並解析每個型別引用才能生成 Java 存根，而 KSP 則是按需解析引用。委託給 javac 也會耗費時間。</p><p>此外，KSP 的<a href="/zh-Hant/kotlin/ksp-incremental">增量處理模型</a>比單純的隔離和聚合具有更細的粒度。它能找到更多機會來避免重新處理所有內容。此外，由於 KSP 動態追蹤符號解析，檔案中的變更較不容易污染其他檔案，因此需要重新處理的檔案集合會更小。這對於 kapt 來說是不可能的，因為它將處理委託給 javac。</p><h3 id="ksp-是否為-kotlin-專用" tabindex="-1">KSP 是否為 Kotlin 專用？ <a class="header-anchor" href="#ksp-是否為-kotlin-專用" aria-label="Permalink to &quot;KSP 是否為 Kotlin 專用？&quot;">​</a></h3><p>KSP 也能處理 Java 原始碼。API 是統一的，這表示當你解析一個 Java 類別和一個 Kotlin 類別時，你在 KSP 中會得到一個統一的資料結構。</p><h3 id="如何升級-ksp" tabindex="-1">如何升級 KSP？ <a class="header-anchor" href="#如何升級-ksp" aria-label="Permalink to &quot;如何升級 KSP？&quot;">​</a></h3><p>KSP 包含 API 和實作。API 很少變更且向後相容：可以有新的介面，但舊的介面永不變更。實作綁定於特定的編譯器版本。隨著新版本的發布，支援的編譯器版本可能會改變。</p><p>處理器僅依賴於 API，因此不綁定於編譯器版本。然而，處理器的使用者在專案中提升編譯器版本時，需要提升 KSP 版本。否則，將會發生以下錯誤：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ksp-a.b.c is too old for kotlin-x.y.z. Please upgrade ksp or downgrade kotlin-gradle-plugin</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>處理器的使用者不需要提升處理器的版本，因為處理器僅依賴於 API。</p></div><p>例如，某個處理器是與 KSP 1.0.1（嚴格依賴於 Kotlin 1.6.0）一起發布和測試的。若要使其能與 Kotlin 1.6.20 協同工作，你唯一需要做的就是將 KSP 提升到為 Kotlin 1.6.20 構建的版本（例如，KSP 1.1.0）。</p><h3 id="我可以使用較新的-ksp-實作搭配較舊的-kotlin-編譯器嗎" tabindex="-1">我可以使用較新的 KSP 實作搭配較舊的 Kotlin 編譯器嗎？ <a class="header-anchor" href="#我可以使用較新的-ksp-實作搭配較舊的-kotlin-編譯器嗎" aria-label="Permalink to &quot;我可以使用較新的 KSP 實作搭配較舊的 Kotlin 編譯器嗎？&quot;">​</a></h3><p>如果語言版本相同，Kotlin 編譯器應該是向後相容的。大多數時候提升 Kotlin 編譯器應該是輕而易舉的。如果你需要較新的 KSP 實作，請相應地升級 Kotlin 編譯器。</p><h3 id="你們多久更新一次-ksp" tabindex="-1">你們多久更新一次 KSP？ <a class="header-anchor" href="#你們多久更新一次-ksp" aria-label="Permalink to &quot;你們多久更新一次 KSP？&quot;">​</a></h3><p>KSP 盡可能遵循 <a href="https://semver.org/" target="_blank" rel="noreferrer">語義化版本控制 (Semantic Versioning)</a>。 對於 KSP 版本 <code>major.minor.patch</code>，</p><ul><li><code>major</code> 保留用於不相容的 API 變更。目前沒有預定的時程表。</li><li><code>minor</code> 保留用於新功能。這大約每季度更新一次。</li><li><code>patch</code> 保留用於錯誤修復和新的 Kotlin 版本發布。它大約每月更新一次。</li></ul><p>通常在新的 Kotlin 版本發布後的幾天內，就會有對應的 KSP 版本可用，包括<a href="/zh-Hant/kotlin/eap">預發布版本（Beta 或 RC）</a>。</p><h3 id="除了-kotlin-之外-函式庫還有其他版本要求嗎" tabindex="-1">除了 Kotlin 之外，函式庫還有其他版本要求嗎？ <a class="header-anchor" href="#除了-kotlin-之外-函式庫還有其他版本要求嗎" aria-label="Permalink to &quot;除了 Kotlin 之外，函式庫還有其他版本要求嗎？&quot;">​</a></h3><p>以下是針對函式庫/基礎設施的要求列表：</p><ul><li>Android Gradle Plugin 7.1.3+</li><li>Gradle 6.8.3+</li></ul><h3 id="ksp-的未來藍圖為何" tabindex="-1">KSP 的未來藍圖為何？ <a class="header-anchor" href="#ksp-的未來藍圖為何" aria-label="Permalink to &quot;KSP 的未來藍圖為何？&quot;">​</a></h3><p>以下項目已規劃：</p><ul><li>支援<a href="/zh-Hant/kotlin/roadmap">新的 Kotlin 編譯器</a></li><li>改進對多平台的支援。例如，在目標的子集上執行 KSP / 在目標之間共享計算。</li><li>提升效能。還有許多最佳化工作待完成！</li><li>持續修復錯誤。</li></ul><p>如果你想討論任何想法，請隨時透過<a href="https://kotlinlang.slack.com/archives/C013BA8EQSE" target="_blank" rel="noreferrer">Kotlin Slack 的 #ksp 頻道</a>（<a href="https://surveys.jetbrains.com/s3/kotlin-slack-sign-up" target="_blank" rel="noreferrer">獲取邀請</a>）聯繫我們。也歡迎提交 <a href="https://github.com/google/ksp/issues" target="_blank" rel="noreferrer">GitHub 問題/功能請求</a> 或拉取請求！</p>',28)]))}const P=t(o,[["render",n]]);export{c as __pageData,P as default};
