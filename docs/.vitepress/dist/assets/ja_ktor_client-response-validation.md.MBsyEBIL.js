import{_ as k,C as t,c as r,o,j as i,G as e,ag as d,a,w as n}from"./chunks/framework.Bksy39di.js";const f=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ja/ktor/client-response-validation.md","filePath":"ja/ktor/client-response-validation.md","lastUpdated":1755457140000}'),c={name:"ja/ktor/client-response-validation.md"};function E(g,s,y,u,x,F){const l=t("show-structure"),p=t("tldr"),h=t("link-summary");return o(),r("div",null,[s[2]||(s[2]=i("h1",{id:"レスポンスの検証",tabindex:"-1"},[a("レスポンスの検証 "),i("a",{class:"header-anchor",href:"#レスポンスの検証","aria-label":'Permalink to "レスポンスの検証"'},"​")],-1)),e(l,{for:"chapter",depth:"2"}),e(p,null,{default:n(()=>s[0]||(s[0]=[i("p",null,[i("b",null,"コード例"),a(": "),i("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/client-validate-2xx-response"},"client-validate-2xx-response"),a(", "),i("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/client-validate-non-2xx-response"},"client-validate-non-2xx-response")],-1)])),_:1}),e(h,null,{default:n(()=>s[1]||(s[1]=[a(" ステータスコードに応じたレスポンスの検証方法を学びます。 ")])),_:1}),s[3]||(s[3]=d(`<p>デフォルトでは、Ktor はステータスコードに応じた<a href="./client-responses">レスポンス</a>の検証を行いません。 必要に応じて、以下の検証戦略を使用できます。</p><ul><li><code>expectSuccess</code> プロパティを使用して、2xx以外のレスポンスに対して例外をスローする。</li><li>2xxレスポンスに対してより厳格な検証を追加する。</li><li>2xx以外のレスポンスの検証をカスタマイズする。</li></ul><h2 id="default" tabindex="-1">デフォルトの検証を有効にする <a class="header-anchor" href="#default" aria-label="Permalink to &quot;デフォルトの検証を有効にする {id=&quot;default&quot;}&quot;">​</a></h2><p>Ktorでは、<code>expectSuccess</code> プロパティを <code>true</code> に設定することで、デフォルトの検証を有効にできます。 これは、<a href="./client-create-and-configure#configure-client">クライアント設定</a>レベルで設定できます...</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.engine.cio.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    expectSuccess </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>... または、<a href="./client-requests#parameters">リクエスト</a>レベルで同じプロパティを使用することもできます。 この場合、2xx以外のエラーレスポンスに対して、以下の例外がスローされます。</p><ul><li><a href="https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins/-redirect-response-exception/index.html" target="_blank" rel="noreferrer">RedirectResponseException</a> 3xxレスポンスの場合。</li><li><a href="https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins/-client-request-exception/index.html" target="_blank" rel="noreferrer">ClientRequestException</a> 4xxレスポンスの場合。</li><li><a href="https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins/-server-response-exception/index.html" target="_blank" rel="noreferrer">ServerResponseException</a> 5xxレスポンスの場合。</li></ul><h2 id="custom" tabindex="-1">カスタム検証 <a class="header-anchor" href="#custom" aria-label="Permalink to &quot;カスタム検証 {id=&quot;custom&quot;}&quot;">​</a></h2><p>2xxレスポンスに追加の検証を追加したり、デフォルトの検証をカスタマイズしたりするには、 <a href="https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins/-http-call-validator" target="_blank" rel="noreferrer">HttpCallValidator</a> プラグインを使用します。<code>HttpCallValidator</code> をインストールするには、<a href="./client-create-and-configure#configure-client">クライアント設定ブロック</a>内で <a href="https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins/-http-response-validator.html" target="_blank" rel="noreferrer">HttpResponseValidator</a> 関数を呼び出します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    HttpResponseValidator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="2xx" tabindex="-1">2xxレスポンスの検証 <a class="header-anchor" href="#2xx" aria-label="Permalink to &quot;2xxレスポンスの検証 {id=&quot;2xx&quot;}&quot;">​</a></h3><p>前述の通り、<a href="#default">デフォルトの検証</a>は2xx以外のエラーレスポンスに対して例外をスローします。より厳格な検証を追加し、2xxレスポンスをチェックする必要がある場合は、 <code>HttpCallValidator</code> で利用可能な <a href="https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins/-http-call-validator-config/validate-response.html" target="_blank" rel="noreferrer">validateResponse</a> 関数を使用します。</p><p>以下の<a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/client-validate-2xx-response" target="_blank" rel="noreferrer">例</a>では、クライアントがエラー詳細を<a href="./client-serialization">JSON</a>形式で含む2xxレスポンスを受け取ります。 <code>validateResponse</code> は <code>CustomResponseException</code> を発生させるために使用されます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ContentNegotiation) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    HttpResponseValidator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        validateResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { response </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> error: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Error</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (error.code </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                throw</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CustomResponseException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(response, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Code: \${error.code}, message: \${error.message}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="non-2xx" tabindex="-1">2xx以外の例外を処理する <a class="header-anchor" href="#non-2xx" aria-label="Permalink to &quot;2xx以外の例外を処理する {id=&quot;non-2xx&quot;}&quot;">​</a></h3><p><a href="#default">デフォルトの検証</a>をカスタマイズし、2xx以外のレスポンスに対する例外を特定の方法で処理する必要がある場合は、 <a href="https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins/-http-call-validator-config/handle-response-exception-with-request.html" target="_blank" rel="noreferrer">handleResponseExceptionWithRequest</a>を使用します。 以下の<a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/client-validate-non-2xx-response" target="_blank" rel="noreferrer">例</a>では、クライアントは404レスポンスに対して、デフォルトの <code>ClientRequestException</code> ではなく、カスタムの <code>MissingPageException</code> を発生させます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    expectSuccess </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    HttpResponseValidator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        handleResponseExceptionWithRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { exception, request </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clientException </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exception </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? ClientRequestException ?: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@handleResponseExceptionWithRequest</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exceptionResponse </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clientException.response</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (exceptionResponse.status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HttpStatusCode.NotFound) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exceptionResponseText </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exceptionResponse.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bodyAsText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                throw</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MissingPageException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(exceptionResponse, exceptionResponseText)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,17))])}const m=k(c,[["render",E]]);export{f as __pageData,m as default};
