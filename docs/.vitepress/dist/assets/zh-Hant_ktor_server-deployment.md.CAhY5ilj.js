import{_ as n,C as t,c as s,o as p,j as a,G as r,ag as c,a as o,w as d}from"./chunks/framework.Bksy39di.js";const q=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/ktor/server-deployment.md","filePath":"zh-Hant/ktor/server-deployment.md","lastUpdated":1755457140000}'),h={name:"zh-Hant/ktor/server-deployment.md"};function u(f,e,g,v,k,m){const l=t("show-structure"),i=t("tldr");return p(),s("div",null,[e[1]||(e[1]=a("h1",{id:"部署",tabindex:"-1"},[o("部署 "),a("a",{class:"header-anchor",href:"#部署","aria-label":'Permalink to "部署"'},"​")],-1)),r(l,{for:"chapter",depth:"2"}),r(i,null,{default:d(()=>e[0]||(e[0]=[a("p",null,[a("b",null,"程式碼範例"),o(": "),a("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/deployment-ktor-plugin"}," deployment-ktor-plugin ")],-1)])),_:1}),e[2]||(e[2]=c('<p>在本主題中，我們將概述如何部署 Ktor 應用程式。</p><blockquote><p>為了簡化伺服器 Ktor 應用程式的部署過程，您可以使用 <a href="https://github.com/ktorio/ktor-build-plugins" target="_blank" rel="noreferrer">Ktor</a> 的 Gradle 插件，它提供了以下功能：</p><ul><li>建立 fat JAR。</li><li>將您的應用程式 Docker 化。</li></ul></blockquote><h2 id="ktor-specifics" tabindex="-1">Ktor 部署細節 <a class="header-anchor" href="#ktor-specifics" aria-label="Permalink to &quot;Ktor 部署細節 {id=&quot;ktor-specifics&quot;}&quot;">​</a></h2><p>伺服器 Ktor 應用程式的部署過程取決於以下細節：</p><ul><li>您打算將應用程式部署為自包含套件還是部署到 servlet 容器中。</li><li>您使用哪種方法來建立和配置伺服器。</li></ul><h3 id="self-contained-vs-servlet" tabindex="-1">自包含應用程式 vs Servlet 容器 <a class="header-anchor" href="#self-contained-vs-servlet" aria-label="Permalink to &quot;自包含應用程式 vs Servlet 容器 {id=&quot;self-contained-vs-servlet&quot;}&quot;">​</a></h3><p>Ktor 允許您直接在應用程式中建立並啟動帶有所需網路<a href="./server-engines">引擎</a>（例如 Netty、Jetty 或 Tomcat）的伺服器。在此情況下，引擎是您應用程式的一部分。您的應用程式可以控制引擎設定、連線和 SSL 選項。要部署您的應用程式，您可以將其<a href="#packaging">打包</a>為 fat JAR 或可執行 JVM 應用程式。</p><p>與上述方法相反，servlet 容器應控制應用程式生命週期和連線設定。Ktor 提供了一個特殊的 <code>ServletApplicationEngine</code> 引擎，將應用程式的控制權委託給 servlet 容器。要在 servlet 容器中部署，您需要生成一個 <a href="./server-war">WAR 歸檔</a>。</p><h3 id="code-vs-config" tabindex="-1">配置：程式碼 vs 配置檔 <a class="header-anchor" href="#code-vs-config" aria-label="Permalink to &quot;配置：程式碼 vs 配置檔 {id=&quot;code-vs-config&quot;}&quot;">​</a></h3><p>為部署配置自包含的 Ktor 應用程式可能取決於<a href="./server-create-and-configure">建立和配置伺服器</a>所使用的方法：是在程式碼中進行，還是透過使用<a href="./server-configuration-file">配置檔</a>。例如，<a href="#publishing">託管服務供應商</a>可能要求指定用於監聽傳入請求的埠。在此情況下，您需要透過程式碼或在 <code>application.conf</code>/<code>application.yaml</code> 中<a href="./server-configuration-file">配置</a>一個埠。</p><h2 id="packaging" tabindex="-1">打包 <a class="header-anchor" href="#packaging" aria-label="Permalink to &quot;打包 {id=&quot;packaging&quot;}&quot;">​</a></h2><p>在部署您的應用程式之前，您需要以以下其中一種方式對其進行打包：</p><ul><li><p><strong>Fat JAR</strong></p><p>Fat JAR 是一個包含所有程式碼依賴的可執行 JAR。您可以將其部署到任何支援 fat JAR 的<a href="#publishing">雲端服務</a>。如果您需要為 GraalVM 生成原生二進位檔，也需要 fat JAR。要建立 fat JAR，您可以使用 Ktor 的 <a href="./server-fatjar">Gradle</a> 插件或 Maven 的 <a href="./maven-assembly-plugin">Assembly</a> 插件。</p></li><li><p><strong>可執行 JVM 應用程式</strong></p><p>可執行 JVM 應用程式是一個已打包的應用程式，包含程式碼依賴和生成的啟動腳本。對於 Gradle，您可以使用 <a href="./server-packaging">Application</a> 插件來生成應用程式。</p></li><li><p><strong>WAR</strong></p><p><a href="./server-war">WAR 歸檔</a>允許您將應用程式部署到 servlet 容器中，例如 Tomcat 或 Jetty。</p></li><li><p><strong>GraalVM</strong></p><p>Ktor 伺服器應用程式可以使用 <a href="./graalvm">GraalVM</a> 以便為不同平台提供原生映像檔。</p></li></ul><h2 id="containerizing" tabindex="-1">容器化 <a class="header-anchor" href="#containerizing" aria-label="Permalink to &quot;容器化 {id=&quot;containerizing&quot;}&quot;">​</a></h2><p>在您打包應用程式（例如，為可執行 JVM 應用程式或 fat JAR）之後，您可以準備一個包含此應用程式的 <a href="./docker">Docker 映像檔</a>。此映像檔隨後可用於在 Kubernetes、Swarm 或所需的雲端服務容器實例上運行您的應用程式。</p><h2 id="publishing" tabindex="-1">發佈 <a class="header-anchor" href="#publishing" aria-label="Permalink to &quot;發佈 {id=&quot;publishing&quot;}&quot;">​</a></h2><p>以下教學展示了如何將 Ktor 應用程式部署到特定的雲端服務供應商：</p><ul><li><a href="./google-app-engine">Google App Engine</a></li><li><a href="./heroku">Heroku</a></li><li><a href="./elastic-beanstalk">AWS Elastic Beanstalk</a></li></ul><h2 id="ssl" tabindex="-1">SSL <a class="header-anchor" href="#ssl" aria-label="Permalink to &quot;SSL {id=&quot;ssl&quot;}&quot;">​</a></h2><p>如果您的 Ktor 伺服器位於反向代理（例如 Nginx 或 Apache）之後，或者在 servlet 容器（Tomcat 或 Jetty）中運行，則 SSL 設定由反向代理或 servlet 容器管理。如果需要，您可以使用 Java KeyStore 配置 Ktor <a href="./server-ssl">直接提供 SSL</a>。</p><blockquote><p>請注意，當 Ktor 應用程式部署到 servlet 容器中時，SSL 設定無效。</p></blockquote>',21))])}const S=n(h,[["render",u]]);export{q as __pageData,S as default};
