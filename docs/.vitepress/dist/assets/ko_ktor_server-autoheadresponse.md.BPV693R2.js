import{_ as g,C as a,c as E,o as _,G as e,ag as l,w as n,j as i,a as t}from"./chunks/framework.Bksy39di.js";const A=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ko/ktor/server-autoheadresponse.md","filePath":"ko/ktor/server-autoheadresponse.md","lastUpdated":1755457140000}'),m={name:"ko/ktor/server-autoheadresponse.md"};function y(v,s,F,f,C,T){const p=a("TopicTitle"),d=a("primary-label"),k=a("Links"),h=a("tldr"),u=a("link-summary"),o=a("code-block"),r=a("TabItem"),c=a("Tabs");return _(),E("div",null,[e(p,{labelRef:"server-plugin",title:"AutoHeadResponse"}),e(d,{ref:"server-plugin"},null,512),e(h,null,{default:n(()=>[s[3]||(s[3]=i("p",null,[i("b",null,"필수 의존성"),t(": "),i("code",null,"io.ktor:ktor-server-auto-head-response")],-1)),s[4]||(s[4]=i("p",null,[i("b",null,"코드 예시"),t(": "),i("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/autohead"}," autohead ")],-1)),i("p",null,[i("b",null,[e(k,{href:"/ktor/server-native",summary:"Ktor는 Kotlin/Native를 지원하며 추가 런타임이나 가상 머신 없이 서버를 실행할 수 있습니다."},{default:n(()=>s[0]||(s[0]=[t("네이티브 서버")])),_:1}),s[1]||(s[1]=t(" 지원"))]),s[2]||(s[2]=t(": ✅ "))])]),_:1}),e(u,null,{default:n(()=>s[5]||(s[5]=[t(" AutoHeadResponse은(는) GET이 정의된 모든 라우트에 대해 HEAD 요청에 자동으로 응답하는 기능을 제공합니다. ")])),_:1}),s[6]||(s[6]=l('<p><a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auto-head-response/io.ktor.server.plugins.autohead/-auto-head-response.html" target="_blank" rel="noreferrer">AutoHeadResponse</a> 플러그인은 <code>GET</code>이 정의된 모든 라우트에 대해 <code>HEAD</code> 요청에 자동으로 응답하는 기능을 제공합니다. AutoHeadResponse을(를) 사용하여 실제 콘텐츠를 가져오기 전에 클라이언트에서 응답을 어떤 식으로든 처리해야 하는 경우 별도의 <a href="./server-routing#define_route">head</a> 핸들러를 생성하는 것을 피할 수 있습니다. 예를 들어, <a href="./server-responses#file">respondFile</a> 함수를 호출하면 <code>Content-Length</code> 및 <code>Content-Type</code> 헤더가 응답에 자동으로 추가되며, 파일을 다운로드하기 전에 클라이언트에서 이 정보를 얻을 수 있습니다.</p><h2 id="add_dependencies" tabindex="-1">종속성 추가 <a class="header-anchor" href="#add_dependencies" aria-label="Permalink to &quot;종속성 추가 {id=&quot;add_dependencies&quot;}&quot;">​</a></h2><p> AutoHeadResponse을(를) 사용하려면 빌드 스크립트에 <code>ktor-server-auto-head-response</code> 아티팩트를 포함해야 합니다: </p>',3)),e(c,{group:"languages"},{default:n(()=>[e(r,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[e(o,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-server-auto-head-response:$ktor_version")'})]),_:1}),e(r,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[e(o,{lang:"Groovy",code:'            implementation "io.ktor:ktor-server-auto-head-response:$ktor_version"'})]),_:1}),e(r,{title:"Maven","group-key":"maven"},{default:n(()=>[e(o,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-server-auto-head-response-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),s[7]||(s[7]=l(`<h2 id="사용법" tabindex="-1">사용법 <a class="header-anchor" href="#사용법" aria-label="Permalink to &quot;사용법&quot;">​</a></h2><p>이 기능을 활용하려면 애플리케이션에 <code>AutoHeadResponse</code> 플러그인을 설치해야 합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.application.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.plugins.autohead.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.response.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.routing.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(AutoHeadResponse)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/home&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;This is a response to a GET, but HEAD also works&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>이 경우 <code>/home</code> 라우트는 이 동사(verb)에 대한 명시적인 정의가 없어도 <code>HEAD</code> 요청에 응답할 것입니다.</p><p>이 플러그인을 사용하는 경우, 동일한 <code>GET</code> 라우트에 대한 사용자 지정 <code>HEAD</code> 정의는 무시된다는 점에 유의하는 것이 중요합니다.</p><h2 id="옵션" tabindex="-1">옵션 <a class="header-anchor" href="#옵션" aria-label="Permalink to &quot;옵션&quot;">​</a></h2><p>AutoHeadResponse은(는) 추가 구성 옵션을 제공하지 않습니다.</p>`,7))])}const B=g(m,[["render",y]]);export{A as __pageData,B as default};
