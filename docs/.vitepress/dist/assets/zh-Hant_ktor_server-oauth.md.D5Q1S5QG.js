import{_ as c,C as a,c as u,o as y,G as i,ag as p,w as n,j as t,a as e}from"./chunks/framework.Bksy39di.js";const B=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/ktor/server-oauth.md","filePath":"zh-Hant/ktor/server-oauth.md","lastUpdated":1755457140000}'),F={name:"zh-Hant/ktor/server-oauth.md"};function C(v,s,A,f,b,q){const k=a("TopicTitle"),r=a("show-structure"),o=a("primary-label"),E=a("Links"),d=a("tldr"),l=a("code-block"),h=a("TabItem"),g=a("Tabs");return y(),u("div",null,[i(k,{labelRef:"server-plugin",title:"OAuth"}),i(r,{for:"chapter",depth:"2"}),i(o,{ref:"server-plugin"},null,512),i(d,null,{default:n(()=>[s[3]||(s[3]=t("p",null,[t("b",null,"必要相依性"),e("："),t("code",null,"io.ktor:ktor-server-auth")],-1)),s[4]||(s[4]=t("p",null,[t("b",null,"程式碼範例"),e("： "),t("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/auth-oauth-google"}," auth-oauth-google ")],-1)),t("p",null,[t("b",null,[i(E,{href:"/ktor/server-native",summary:"Ktor supports Kotlin/Native and allows you to run a server without an additional runtime or virtual machine."},{default:n(()=>s[0]||(s[0]=[e("原生伺服器")])),_:1}),s[1]||(s[1]=e("支援"))]),s[2]||(s[2]=e("：✅ "))])]),_:1}),s[5]||(s[5]=p('<p><a href="https://oauth.net/" target="_blank" rel="noreferrer">OAuth</a> 是一個用於存取委託的開放標準。OAuth 可用於透過外部提供者（例如 Google、Facebook、Twitter 等）授權您的應用程式使用者。</p><p><code>oauth</code> 提供者支援授權碼流程 (authorization code flow)。您可以在一個地方配置 OAuth 參數，Ktor 將自動使用必要的參數向指定的授權伺服器發出請求。</p><blockquote><p>您可以在 <a href="./server-auth">Ktor Server 中的驗證與授權</a> 章節中取得關於 Ktor 驗證與授權的一般資訊。</p></blockquote><h2 id="add_dependencies" tabindex="-1">新增相依性 <a class="header-anchor" href="#add_dependencies" aria-label="Permalink to &quot;新增相依性 {id=&quot;add_dependencies&quot;}&quot;">​</a></h2><p> 若要使用 <code>OAuth</code>，您需要在建置指令碼中包含 <code>ktor-server-auth</code> 構件： </p>',5)),i(g,{group:"languages"},{default:n(()=>[i(h,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[i(l,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-server-auth:$ktor_version")'})]),_:1}),i(h,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[i(l,{lang:"Groovy",code:'            implementation "io.ktor:ktor-server-auth:$ktor_version"'})]),_:1}),i(h,{title:"Maven","group-key":"maven"},{default:n(()=>[i(l,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-server-auth-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),s[6]||(s[6]=p(`<h2 id="安裝-sessions-外掛程式" tabindex="-1">安裝 Sessions 外掛程式 <a class="header-anchor" href="#安裝-sessions-外掛程式" aria-label="Permalink to &quot;安裝 Sessions 外掛程式&quot;">​</a></h2><p>為避免用戶端每次嘗試存取受保護資源時都請求授權，您可以在成功授權後將存取權杖儲存在 Session 中。 然後，您可以在受保護路由的處理器中從目前的 Session 擷取存取權杖，並使用它來請求資源。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.sessions.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(httpClient: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HttpClient</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> applicationHttpClient) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Sessions) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        cookie</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user_session&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Serializable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> state: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> token: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="flow" tabindex="-1">OAuth 授權流程 <a class="header-anchor" href="#flow" aria-label="Permalink to &quot;OAuth 授權流程 {id=&quot;flow&quot;}&quot;">​</a></h2><p>Ktor 應用程式中的 OAuth 授權流程可能如下所示：</p><ol><li><p>使用者在 Ktor 應用程式中開啟登入頁面。</p></li><li><p>Ktor 會自動重新導向至特定提供者的授權頁面，並傳遞必要的 <a href="#configure-oauth-provider">參數</a>：</p><ul><li>用於存取所選提供者 API 的用戶端 ID (client ID)。</li><li>回調 (callback) 或重新導向 (redirect) URL，指定授權完成後將開啟的 Ktor 應用程式頁面。</li><li>Ktor 應用程式所需之第三方資源的範圍 (scopes)。</li><li>用於取得存取權杖的授權類型 (grant type) (Authorization Code)。</li><li>用於減輕 CSRF 攻擊並重新導向使用者的 <code>state</code> 參數。</li><li>特定提供者專屬的選用參數。</li></ul></li><li><p>授權頁面會顯示一個同意畫面，其中包含 Ktor 應用程式所需的權限等級。這些權限取決於在 <a href="#configure-oauth-provider">步驟 2：配置 OAuth 提供者</a> 中配置的指定範圍。</p></li><li><p>如果使用者批准了請求的權限，授權伺服器會重新導向回指定的重新導向 URL 並傳送授權碼。</p></li><li><p>Ktor 會再次自動請求指定的存取權杖 URL，其中包含以下參數：</p><ul><li>授權碼。</li><li>用戶端 ID 和用戶端密鑰。</li></ul><p>授權伺服器回應時會傳回一個存取權杖。</p></li><li><p>用戶端隨後可以使用此權杖向所選提供者的所需服務發出請求。在大多數情況下，權杖將使用 <code>Bearer</code> 方案在 <code>Authorization</code> 標頭中傳送。</p></li><li><p>服務驗證權杖，使用其範圍進行授權，並傳回請求的資料。</p></li></ol><h2 id="install" tabindex="-1">安裝 OAuth <a class="header-anchor" href="#install" aria-label="Permalink to &quot;安裝 OAuth {id=&quot;install&quot;}&quot;">​</a></h2><p>若要安裝 <code>oauth</code> 驗證提供者，請在 <code>install</code> 區塊中呼叫 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/oauth.html" target="_blank" rel="noreferrer">oauth</a> 函式。您可以選用性地 <a href="./server-auth#provider-name">指定提供者名稱</a>。 例如，若要安裝名稱為 &quot;auth-oauth-google&quot; 的 <code>oauth</code> 提供者，它將如下所示：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.application.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.auth.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(httpClient: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HttpClient</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> applicationHttpClient) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Authentication) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        oauth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-oauth-google&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // Configure oauth authentication</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="configure-oauth" tabindex="-1">配置 OAuth <a class="header-anchor" href="#configure-oauth" aria-label="Permalink to &quot;配置 OAuth {id=&quot;configure-oauth&quot;}&quot;">​</a></h2><p>本節示範如何配置 <code>oauth</code> 提供者，以使用 Google 授權您的應用程式使用者。 有關完整的可執行範例，請參閱 <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/auth-oauth-google" target="_blank" rel="noreferrer">auth-oauth-google</a>。</p><h3 id="authorization-credentials" tabindex="-1">先決條件：建立授權憑證 <a class="header-anchor" href="#authorization-credentials" aria-label="Permalink to &quot;先決條件：建立授權憑證 {id=&quot;authorization-credentials&quot;}&quot;">​</a></h3><p>若要存取 Google API，您需要在 Google Cloud Console 中建立授權憑證。</p><ol><li><p>在 Google Cloud Console 中開啟 <a href="https://console.cloud.google.com/apis/credentials" target="_blank" rel="noreferrer">憑證</a> 頁面。</p></li><li><p>按一下 <strong>CREATE CREDENTIALS</strong> 並選擇 <code>OAuth client ID</code>。</p></li><li><p>從下拉式選單中選擇 <code>Web application</code>。</p></li><li><p>指定以下設定：</p><ul><li><strong>已授權的 JavaScript 來源 (Authorised JavaScript origins)</strong>：<code>http://localhost:8080</code>。</li><li><strong>已授權的重新導向 URI (Authorised redirect URIs)</strong>：<code>http://localhost:8080/callback</code>。 在 Ktor 中，<a href="#configure-oauth-provider">urlProvider</a> 屬性用於指定授權完成後將開啟的重新導向路由。</li></ul></li><li><p>按一下 <strong>CREATE</strong>。</p></li><li><p>在彈出的對話框中，複製所建立的用戶端 ID (client ID) 和用戶端密鑰 (client secret)，這些將用於配置 <code>oauth</code> 提供者。</p></li></ol><h3 id="create-http-client" tabindex="-1">步驟 1：建立 HTTP 用戶端 <a class="header-anchor" href="#create-http-client" aria-label="Permalink to &quot;步驟 1：建立 HTTP 用戶端 {id=&quot;create-http-client&quot;}&quot;">​</a></h3><p>在配置 <code>oauth</code> 提供者之前，您需要建立 <a href="./client-create-and-configure">HttpClient</a>，該用戶端將由伺服器用於向 OAuth 伺服器發出請求。<a href="./client-serialization">ContentNegotiation</a> 用戶端外掛程式與 JSON 序列化器是必要的，以便在 <a href="#request-api">向 API 發出請求</a> 後反序列化接收到的 JSON 資料。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> applicationHttpClient </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ContentNegotiation) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>用戶端實例會傳遞給 <code>main</code> <a href="./server-modules">模組函式</a>，以便在伺服器 <a href="./server-testing">測試</a> 中建立獨立的用戶端實例。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(httpClient: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HttpClient</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> applicationHttpClient) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="configure-oauth-provider" tabindex="-1">步驟 2：配置 OAuth 提供者 <a class="header-anchor" href="#configure-oauth-provider" aria-label="Permalink to &quot;步驟 2：配置 OAuth 提供者 {id=&quot;configure-oauth-provider&quot;}&quot;">​</a></h3><p>下面的程式碼片段示範了如何建立和配置名稱為 <code>auth-oauth-google</code> 的 <code>oauth</code> 提供者。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> redirects </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mutableMapOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Authentication) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    oauth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-oauth-google&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Configure oauth authentication</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        urlProvider </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://localhost:8080/callback&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        providerLookup </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            OAuthServerSettings.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OAuth2ServerSettings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;google&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                authorizeUrl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://accounts.google.com/o/oauth2/auth&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                accessTokenUrl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://accounts.google.com/o/oauth2/token&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                requestMethod </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HttpMethod.Post,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                clientId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getenv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;GOOGLE_CLIENT_ID&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                clientSecret </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getenv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;GOOGLE_CLIENT_SECRET&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                defaultScopes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://www.googleapis.com/auth/userinfo.profile&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                extraAuthParameters </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;access_type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> to </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;offline&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                onStateCreated </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { call, state </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                    //saves new state with redirect url value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    call.request.queryParameters[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;redirectUrl&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        redirects[state] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> it</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> httpClient</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre></div><ul><li><code>urlProvider</code> 指定一個 <a href="#redirect-route">重新導向路由</a>，該路由將在授權完成時被呼叫。 <blockquote><p>確保此路由已添加到 <a href="#authorization-credentials"><strong>已授權的重新導向 URI (Authorised redirect URIs)</strong></a> 列表中。</p></blockquote></li><li><code>providerLookup</code> 允許您為所需的提供者指定 OAuth 設定。這些設定由 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-o-auth-server-settings/index.html" target="_blank" rel="noreferrer">OAuthServerSettings</a> 類別表示，並允許 Ktor 自動向 OAuth 伺服器發出請求。</li><li><code>client</code> 屬性指定由 Ktor 用於向 OAuth 伺服器發出請求的 <a href="#create-http-client">HttpClient</a>。</li></ul><h3 id="login-route" tabindex="-1">步驟 3：新增登入路由 <a class="header-anchor" href="#login-route" aria-label="Permalink to &quot;步驟 3：新增登入路由 {id=&quot;login-route&quot;}&quot;">​</a></h3><p>配置 <code>oauth</code> 提供者後，您需要在 <code>authenticate</code> 函式中 <a href="./server-auth#authenticate-route">建立一個受保護的登入路由</a>，該路由接受 <code>oauth</code> 提供者的名稱。當 Ktor 收到對此路由的請求時，它將自動重新導向到 <a href="#configure-oauth-provider">providerLookup</a> 中定義的 <code>authorizeUrl</code>。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    authenticate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-oauth-google&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/login&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // Redirects to &#39;authorizeUrl&#39; automatically</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>使用者將會看到授權頁面，其中包含 Ktor 應用程式所需的權限等級。這些權限取決於 <a href="#configure-oauth-provider">providerLookup</a> 中指定的 <code>defaultScopes</code>。</p><h3 id="redirect-route" tabindex="-1">步驟 4：新增重新導向路由 <a class="header-anchor" href="#redirect-route" aria-label="Permalink to &quot;步驟 4：新增重新導向路由 {id=&quot;redirect-route&quot;}&quot;">​</a></h3><p>除了登入路由之外，您還需要為 <code>urlProvider</code> 建立重新導向路由，如 <a href="#configure-oauth-provider">步驟 2：配置 OAuth 提供者</a> 中所指定。</p><p>在此路由中，您可以使用 <code>call.principal</code> 函式擷取 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-o-auth-access-token-response/index.html" target="_blank" rel="noreferrer">OAuthAccessTokenResponse</a> 物件。<code>OAuthAccessTokenResponse</code> 允許您存取 OAuth 伺服器傳回的權杖和其他參數。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        authenticate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-oauth-google&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/login&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // Redirects to &#39;authorizeUrl&#39; automatically</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/callback&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> currentPrincipal: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OAuthAccessTokenResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.OAuth2? </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">principal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // redirects home if the url is not found before authorization</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                currentPrincipal?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { principal </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    principal.state?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { state </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        call.sessions.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(state, principal.accessToken))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        redirects[state]?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { redirect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                            call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondRedirect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(redirect)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                            return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">get</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondRedirect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/home&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre></div><p>在此範例中，在收到權杖後執行以下動作：</p><ul><li>權杖儲存在 <a href="./server-sessions">Session</a> 中，其內容可在其他路由中存取。</li><li>使用者重新導向到下一個路由，在此路由中向 Google API 發出請求。</li><li>如果找不到請求的路由，使用者將重新導向到 <code>/home</code> 路由。</li></ul><h3 id="request-api" tabindex="-1">步驟 5：向 API 發出請求 <a class="header-anchor" href="#request-api" aria-label="Permalink to &quot;步驟 5：向 API 發出請求 {id=&quot;request-api&quot;}&quot;">​</a></h3><p>在 <a href="#redirect-route">重新導向路由</a> 中收到權杖並將其儲存到 Session 後，您可以使用此權杖向外部 API 發出請求。以下程式碼片段示範了如何使用 <a href="#create-http-client">HttpClient</a> 發出此類請求，並透過在 <code>Authorization</code> 標頭中傳送此權杖來獲取使用者資訊。</p><p>建立一個名為 <code>getPersonalGreeting</code> 的新函式，該函式將發出請求並傳回回應主體：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> suspend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getPersonalGreeting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    httpClient: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    userSession: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserSession</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserInfo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> httpClient.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://www.googleapis.com/oauth2/v2/userinfo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    headers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpHeaders.Authorization, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Bearer \${userSession.token}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>然後，您可以在 <code>get</code> 路由中呼叫此函式以擷取使用者資訊：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/{path}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userSession: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(call)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (userSession </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userInfo: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserInfo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getPersonalGreeting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(httpClient, userSession)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, \${userInfo.name}!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>有關完整的可執行範例，請參閱 <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/auth-oauth-google" target="_blank" rel="noreferrer">auth-oauth-google</a>。</p>`,40))])}const D=c(F,[["render",C]]);export{B as __pageData,D as default};
