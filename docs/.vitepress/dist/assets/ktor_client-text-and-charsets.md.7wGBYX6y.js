import{_ as p,C as a,c as h,o as k,j as i,G as n,ag as r,a as t,w as d}from"./chunks/framework.Bksy39di.js";const A=JSON.parse('{"title":"文本与字符集","description":"","frontmatter":{},"headers":[],"relativePath":"ktor/client-text-and-charsets.md","filePath":"ktor/client-text-and-charsets.md","lastUpdated":1755457140000}'),c={name:"ktor/client-text-and-charsets.md"};function o(E,s,g,y,_,C){const e=a("tip"),l=a("primary-label");return k(),h("div",null,[s[1]||(s[1]=i("h1",{id:"文本与字符集",tabindex:"-1"},[t("文本与字符集 "),i("a",{class:"header-anchor",href:"#文本与字符集","aria-label":'Permalink to "文本与字符集"'},"​")],-1)),n(e,null,{default:d(()=>s[0]||(s[0]=[t(" 此帮助主题正在开发中，未来会进行更新。 ")])),_:1}),n(l,{ref:"client-plugin"},null,512),s[2]||(s[2]=r(`<p>此插件允许你处理请求和响应中的纯文本内容：它会使用已注册的字符集填充 <code>Accept</code> 头部，并根据 <code>ContentType</code> 字符集编码请求体和解码响应体。</p><h2 id="配置" tabindex="-1">配置 <a class="header-anchor" href="#配置" aria-label="Permalink to &quot;配置&quot;">​</a></h2><p>如果在配置或 HTTP 调用属性中未指定配置，则默认使用 <code>Charsets.UTF_8</code>。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpClientEngine) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Charsets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 允许使用 \`UTF_8\`。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Charsets.UTF_8)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 允许使用质量为 0.1 的 \`ISO_8859_1\`。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Charsets.ISO_8859_1, quality</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.1f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 指定发送请求时使用的字符集（如果请求头部中没有字符集）。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        sendCharset </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 指定接收响应时使用的字符集（如果响应头部中没有字符集）。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        responseCharsetFallback </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,4))])}const m=p(c,[["render",o]]);export{A as __pageData,m as default};
