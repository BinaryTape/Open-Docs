import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.Bksy39di.js";const E=JSON.parse('{"title":"Jetpack Compose 및 Compose Multiplatform용 Koin","description":"","frontmatter":{"title":"Jetpack Compose 및 Compose Multiplatform용 Koin"},"headers":[],"relativePath":"ko/koin/reference/koin-compose/compose.md","filePath":"ko/koin/reference/koin-compose/compose.md","lastUpdated":1750001831000}'),l={name:"ko/koin/reference/koin-compose/compose.md"};function p(t,s,h,k,o,d){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="jetpack-compose-및-compose-multiplatform용-koin" tabindex="-1">Jetpack Compose 및 Compose Multiplatform용 Koin <a class="header-anchor" href="#jetpack-compose-및-compose-multiplatform용-koin" aria-label="Permalink to &quot;Jetpack Compose 및 Compose Multiplatform용 Koin&quot;">​</a></h1><p>이 페이지에서는 <a href="https://developer.android.com/jetpack/compose" target="_blank" rel="noreferrer">Android Jetpack Compose</a> 또는 <a href="https://www.jetbrains.com/lp/compose-mpp/" target="_blank" rel="noreferrer">Multiplatform Compose</a> 앱에 의존성을 주입하는 방법을 설명합니다.</p><h2 id="koin-compose-multiplatform-vs-koin-android-jetpack-compose" tabindex="-1">Koin Compose Multiplatform vs Koin Android Jetpack Compose <a class="header-anchor" href="#koin-compose-multiplatform-vs-koin-android-jetpack-compose" aria-label="Permalink to &quot;Koin Compose Multiplatform vs Koin Android Jetpack Compose&quot;">​</a></h2><p>2024년 중반부터 Compose 애플리케이션은 Koin Multiplatform API를 사용하여 개발할 수 있습니다. 모든 API는 Koin Jetpack Compose (<code>koin-androidx-compose</code>)와 Koin Compose Multiplatform (<code>koin-compose</code>) 간에 동일합니다.</p><h3 id="compose용-koin-패키지는-무엇인가요" tabindex="-1">Compose용 Koin 패키지는 무엇인가요? <a class="header-anchor" href="#compose용-koin-패키지는-무엇인가요" aria-label="Permalink to &quot;Compose용 Koin 패키지는 무엇인가요?&quot;">​</a></h3><p>Android Jetpack Compose API만 사용하는 순수 Android 앱의 경우 다음 패키지를 사용하세요.</p><ul><li><code>koin-androidx-compose</code> - Compose 기본 API + Compose ViewModel API를 잠금 해제합니다.</li><li><code>koin-androidx-compose-navigation</code> - Navigation API 통합을 포함한 Compose ViewModel API</li></ul><p>Android/Multiplatform 앱의 경우 다음 패키지를 사용하세요.</p><ul><li><code>koin-compose</code> - Compose 기본 API</li><li><code>koin-compose-viewmodel</code> - Compose ViewModel API</li><li><code>koin-compose-viewmodel-navigation</code> - Navigation API 통합을 포함한 Compose ViewModel API</li></ul><h2 id="기존-koin-컨텍스트에서-시작하기" tabindex="-1">기존 Koin 컨텍스트에서 시작하기 <a class="header-anchor" href="#기존-koin-컨텍스트에서-시작하기" aria-label="Permalink to &quot;기존 Koin 컨텍스트에서 시작하기&quot;">​</a></h2><p>Compose 애플리케이션 이전에 <code>startKoin</code> 함수를 사용하면 애플리케이션은 Koin 주입을 받아들일 준비가 됩니다. Compose로 Koin 컨텍스트를 설정하기 위해 더 이상 필요한 것은 없습니다.</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p><code>KoinContext</code> 및 <code>KoinAndroidContext</code>는 더 이상 사용되지 않습니다.</p></div><h2 id="compose-앱으로-koin-시작하기-koinapplication" tabindex="-1">Compose 앱으로 Koin 시작하기 - KoinApplication <a class="header-anchor" href="#compose-앱으로-koin-시작하기-koinapplication" aria-label="Permalink to &quot;Compose 앱으로 Koin 시작하기 - KoinApplication&quot;">​</a></h2><p><code>startKoin</code> 함수를 실행할 수 있는 공간에 접근할 수 없는 경우, Compose와 Koin에 의존하여 Koin 설정을 시작할 수 있습니다.</p><p><code>KoinApplication</code> Compose 함수는 Composable로서 Koin 애플리케이션 인스턴스를 생성하는 데 도움을 줍니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Composable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    KoinApplication</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(application </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        modules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 여기에 화면들을 추가...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        MyScreen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>KoinApplication</code> 함수는 Compose 컨텍스트의 주기에 따라 Koin 컨텍스트의 시작 및 중지를 처리합니다. 이 함수는 새로운 Koin 애플리케이션 컨텍스트를 시작하고 중지합니다.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Android 애플리케이션에서 <code>KoinApplication</code>은 구성 변경 또는 Activity 제거에 따른 Koin 컨텍스트 중지/재시작의 모든 필요성을 처리합니다.</p></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>(실험적 API) <code>KoinMultiplatformApplication</code>을 사용하여 멀티플랫폼 진입점을 대체할 수 있습니다. 이는 <code>KoinApplication</code>과 동일하지만, 자동으로 <code>androidContext</code>와 <code>androidLogger</code>를 주입합니다.</p></div><h2 id="koinapplicationpreview를-사용한-compose-미리보기" tabindex="-1">KoinApplicationPreview를 사용한 Compose 미리보기 <a class="header-anchor" href="#koinapplicationpreview를-사용한-compose-미리보기" aria-label="Permalink to &quot;KoinApplicationPreview를 사용한 Compose 미리보기&quot;">​</a></h2><p><code>KoinApplicationPreview</code> Compose 함수는 Composable을 미리보기하는 데 전용됩니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Preview</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1 - Pixel 2 XL&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, device </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Devices.PIXEL_2_XL, locale </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;en&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Preview</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;2 - Pixel 5&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, device </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Devices.PIXEL_5, locale </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;en&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, uiMode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Configuration.UI_MODE_NIGHT_YES)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Preview</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;3 - Pixel 7 &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, device </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Devices.PIXEL_7, locale </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;ru&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, uiMode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Configuration.UI_MODE_NIGHT_YES)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Composable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> previewVMComposable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    KoinApplicationPreview</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(application </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">modules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(appModule) }) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        ViewModelComposable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="composable에-주입하기" tabindex="-1">@Composable에 주입하기 <a class="header-anchor" href="#composable에-주입하기" aria-label="Permalink to &quot;@Composable에 주입하기&quot;">​</a></h2><p>Composable 함수를 작성하는 동안 Koin 컨테이너에서 인스턴스를 주입하는 Koin API인 <code>koinInject()</code>에 접근할 수 있습니다.</p><p>&#39;MyService&#39; 컴포넌트를 선언하는 모듈의 경우:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> androidModule </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    single</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 또는 생성자 DSL</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    singleOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>인스턴스를 다음과 같이 가져올 수 있습니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Composable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myService </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> koinInject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Jetpack Compose의 함수형 측면에 맞춰, 가장 좋은 작성 방식은 인스턴스를 함수의 매개변수에 직접 주입하는 것입니다. 이 방식은 Koin을 사용한 기본 구현을 허용하면서도 원하는 방식으로 인스턴스를 주입할 수 있도록 개방합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Composable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myService: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyService</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> koinInject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="매개변수를-사용하여-composable에-주입하기" tabindex="-1">매개변수를 사용하여 @Composable에 주입하기 <a class="header-anchor" href="#매개변수를-사용하여-composable에-주입하기" aria-label="Permalink to &quot;매개변수를 사용하여 @Composable에 주입하기&quot;">​</a></h3><p>Koin에서 새로운 의존성을 요청할 때 매개변수를 주입해야 할 수도 있습니다. 이를 위해서는 <code>koinInject</code> 함수의 <code>parameters</code> 매개변수를 <code>parametersOf()</code> 함수와 함께 다음과 같이 사용할 수 있습니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Composable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myService </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> koinInject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(parameters </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> parametersOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a_string&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p><code>koinInject&lt;MyService&gt;{ parametersOf(&quot;a_string&quot;) }</code>와 같이 람다 주입과 함께 매개변수를 사용할 수 있지만, 리컴포징이 많이 일어나는 경우 성능에 영향을 미칠 수 있습니다. 이 람다 버전은 호출 시 매개변수를 언랩해야 매개변수를 기억하지 않도록 돕습니다.</p><p>Koin 버전 4.0.2부터 <code>koinInject(Qualifier,Scope,ParametersHolder)</code>가 도입되어 가장 효율적인 방식으로 매개변수를 사용할 수 있습니다.</p></div><h2 id="composable용-viewmodel" tabindex="-1">@Composable용 ViewModel <a class="header-anchor" href="#composable용-viewmodel" aria-label="Permalink to &quot;@Composable용 ViewModel&quot;">​</a></h2><p>클래식한 single/factory 인스턴스에 접근하는 것과 마찬가지로, 다음 Koin ViewModel API에 접근할 수 있습니다.</p><ul><li><code>koinViewModel()</code> - ViewModel 인스턴스 주입</li><li><code>koinNavViewModel()</code> - ViewModel 인스턴스 + Navigation 인자 데이터 주입 (<code>Navigation</code> API를 사용하는 경우)</li></ul><p>&#39;MyViewModel&#39; 컴포넌트를 선언하는 모듈의 경우:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    viewModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyViewModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 또는 생성자 DSL</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    viewModelOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyViewModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>인스턴스를 다음과 같이 가져올 수 있습니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Composable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> koinViewModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyViewModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>함수 매개변수에서 인스턴스를 가져올 수 있습니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Composable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vm : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyViewModel</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> koinViewModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Jetpack Compose 업데이트와 함께 Lazy API는 지원되지 않습니다.</p></div><h3 id="공유-activity-viewmodel-4-1-android" tabindex="-1">공유 Activity ViewModel (4.1 - Android) <a class="header-anchor" href="#공유-activity-viewmodel-4-1-android" aria-label="Permalink to &quot;공유 Activity ViewModel (4.1 - Android)&quot;">​</a></h3><p>이제 <code>koinActivityViewModel()</code>을 사용하여 동일한 ViewModel 호스트인 Activity에서 ViewModel을 주입할 수 있습니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Composable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Activity 수준에서 ViewModel 인스턴스를 유지</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> koinActivityViewModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyViewModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="composable용-viewmodel-및-savedstatehandle" tabindex="-1">@Composable용 ViewModel 및 SavedStateHandle <a class="header-anchor" href="#composable용-viewmodel-및-savedstatehandle" aria-label="Permalink to &quot;@Composable용 ViewModel 및 SavedStateHandle&quot;">​</a></h3><p><code>SavedStateHandle</code> 생성자 매개변수를 가질 수 있으며, 이는 Compose 환경(Navigation BackStack 또는 ViewModel)에 따라 주입됩니다. 이는 ViewModel <code>CreationExtras</code>를 통해 주입되거나 Navigation <code>BackStackEntry</code>를 통해 주입됩니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// NavHost에 objectId 인자 설정</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NavHost</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    navController,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    startDestination </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;list&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    composable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;list&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { backStackEntry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    composable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;detail/{objectId}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { backStackEntry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> backStackEntry.arguments?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;objectId&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        DetailScreen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(navController, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ViewModel에 주입된 인자</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DetailViewModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> savedStateHandle: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SavedStateHandle</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ViewModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$this</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> - objectId: \${savedStateHandle.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&gt;(&quot;objectId&quot;)}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>SavedStateHandle 주입 차이에 대한 자세한 내용은 다음을 참조하세요: <a href="https://github.com/InsertKoinIO/koin/issues/1935#issuecomment-2362335705" target="_blank" rel="noreferrer">https://github.com/InsertKoinIO/koin/issues/1935#issuecomment-2362335705</a></p></div><h3 id="공유-viewmodel-및-navigation-실험적" tabindex="-1">공유 ViewModel 및 Navigation (실험적) <a class="header-anchor" href="#공유-viewmodel-및-navigation-실험적" aria-label="Permalink to &quot;공유 ViewModel 및 Navigation (실험적)&quot;">​</a></h3><p>Koin Compose Navigation은 이제 현재 <code>NavBackEntry</code>에 이미 저장된 ViewModel을 검색할 수 있도록 <code>NavBackEntry.sharedKoinViewModel()</code> 함수를 제공합니다. 내비게이션 부분에서 <code>sharedKoinViewModel</code>을 사용하기만 하면 됩니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">navigation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Route</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BookGraph</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                startDestination </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Route.BookList</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            ) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                composable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Route</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BookList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    exitTransition </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">slideOutHorizontally</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    popEnterTransition </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">slideInHorizontally</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                ) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                    // 여기에 SharedViewModel 사용 ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> selectedBookViewModel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sharedKoinViewModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SelectedBookViewModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(navController)</span></span></code></pre></div><h2 id="composable에-연결된-모듈-로드-및-언로드" tabindex="-1">Composable에 연결된 모듈 로드 및 언로드 <a class="header-anchor" href="#composable에-연결된-모듈-로드-및-언로드" aria-label="Permalink to &quot;Composable에 연결된 모듈 로드 및 언로드&quot;">​</a></h2><p>Koin은 주어진 Composable 함수에 대해 특정 모듈을 로드하는 방법을 제공합니다. <code>rememberKoinModules</code> 함수는 Koin 모듈을 로드하고 현재 Composable에서 유지합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Composable</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Preview</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyComponentComposable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 이 컴포넌트의 첫 호출 시 모듈 로드</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    rememberKoinModules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myModule)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>두 가지 측면에서 모듈을 언로드하는 <code>abandon</code> 함수 중 하나를 사용할 수 있습니다.</p><ul><li><code>onForgotten</code> - 컴포지션이 제거된 후</li><li><code>onAbandoned</code> - 컴포지션이 실패한 경우</li></ul><p>이를 위해 <code>rememberKoinModules</code>의 <code>unloadOnForgotten</code> 또는 <code>unloadOnAbandoned</code> 인자를 사용하세요.</p><h2 id="composable을-사용하여-koin-scope-생성" tabindex="-1">Composable을 사용하여 Koin Scope 생성 <a class="header-anchor" href="#composable을-사용하여-koin-scope-생성" aria-label="Permalink to &quot;Composable을 사용하여 Koin Scope 생성&quot;">​</a></h2><p><code>rememberKoinScope</code> 및 <code>KoinScope</code> Composable 함수는 Composable 내에서 Koin Scope를 처리하고, Composable이 종료되면 현재 스코프를 추적하여 닫을 수 있도록 합니다.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>이 API는 아직 불안정합니다.</p></div>`,63)]))}const c=i(l,[["render",p]]);export{E as __pageData,c as default};
