import{_ as i}from"./chunks/app-store-required-reasons-warning.Jd9b2vB2.js";import{_ as s,c as e,o as t,ag as n}from"./chunks/framework.Bksy39di.js";const m=JSON.parse('{"title":"iOS 应用的隐私清单","description":"","frontmatter":{},"headers":[],"relativePath":"kmp/multiplatform-privacy-manifest.md","filePath":"kmp/multiplatform-privacy-manifest.md","lastUpdated":1755516278000}'),l={name:"kmp/multiplatform-privacy-manifest.md"};function p(r,a,o,h,c,d){return t(),e("div",null,a[0]||(a[0]=[n('<h1 id="ios-应用的隐私清单" tabindex="-1">iOS 应用的隐私清单 <a class="header-anchor" href="#ios-应用的隐私清单" aria-label="Permalink to &quot;iOS 应用的隐私清单&quot;">​</a></h1><p>如果你的应用旨在 Apple App Store 发布，并使用了<a href="https://developer.apple.com/documentation/bundleresources/describing-use-of-required-reason-api" target="_blank" rel="noreferrer">必填理由 API</a>，App Store Connect 可能会发出警告，指出该应用没有正确的隐私清单：</p><p><img src="'+i+`" alt="必填理由警告" width="700"></p><p>这可能会影响任何 Apple 生态系统应用，无论是原生还是多平台应用。你的应用可能通过第三方库或 SDK 使用了必填理由 API，这可能不明显。Kotlin Multiplatform 可能是你不知情地使用了某些 API 的框架之一。</p><p>在此页面上，你将找到关于此问题的详细描述以及应对建议。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>本页面反映了 Kotlin 团队对该问题的当前理解。 随着我们掌握更多关于已接受的方法和变通方案的数据和知识，我们将更新此页面以反映这些信息。</p></div><h2 id="问题何在" tabindex="-1">问题何在 <a class="header-anchor" href="#问题何在" aria-label="Permalink to &quot;问题何在&quot;">​</a></h2><p>Apple 对 App Store 提交的要求已在 <a href="https://developer.apple.com/news/?id=r1henawx" target="_blank" rel="noreferrer">2024 年春季发生变化</a>。<a href="https://appstoreconnect.apple.com" target="_blank" rel="noreferrer">App Store Connect</a> 不再接受那些未在其隐私清单中指定使用必填理由 API 的应用。</p><p>这是一种自动检测，而非人工审核：你的应用代码会受到分析，你会收到一封电子邮件，其中列出了问题。该电子邮件将提及“ITMS-91053: Missing API declaration”问题，列出应用中所有归入<a href="https://developer.apple.com/documentation/bundleresources/describing-use-of-required-reason-api" target="_blank" rel="noreferrer">必填理由</a>类别的 API 类别。</p><p>理想情况下，你的应用所使用的所有 SDK 都提供其自己的隐私清单，你无需担心。但如果你的某些依赖项没有这样做，你的 App Store 提交可能会被标记。</p><h2 id="如何解决" tabindex="-1">如何解决 <a class="header-anchor" href="#如何解决" aria-label="Permalink to &quot;如何解决&quot;">​</a></h2><p>在你尝试提交应用并从 App Store 收到详细问题列表后，你可以按照 Apple 文档构建你的清单：</p><ul><li><a href="https://developer.apple.com/documentation/bundleresources/privacy-manifest-files" target="_blank" rel="noreferrer">隐私清单文件概述</a></li><li><a href="https://developer.apple.com/documentation/bundleresources/describing-data-use-in-privacy-manifests" target="_blank" rel="noreferrer">描述隐私清单中的数据使用</a></li><li><a href="https://developer.apple.com/documentation/bundleresources/describing-use-of-required-reason-api" target="_blank" rel="noreferrer">描述必填理由 API 的使用</a></li></ul><p>生成的文件是字典的集合。对于每种访问的 API 类型，请从提供的列表中选择一个或多个使用理由。Xcode 通过提供可视化布局和带有每个字段有效值的下拉列表来帮助编辑 <code>.xcprivacy</code> 文件。</p><p>你可以使用<a href="#find-usages-of-required-reason-apis">专用工具</a>来查找你的 Kotlin 框架依赖项中必填理由 API 的用法，并使用<a href="#place-the-xcprivacy-file-in-your-kotlin-artifacts">独立插件</a>将 <code>.xcprivacy</code> 文件与你的 Kotlin 构件捆绑在一起。</p><p>如果新的隐私清单无法满足 App Store 要求，或者你无法弄清如何执行这些步骤，请联系我们并在<a href="https://youtrack.jetbrains.com/issue/KT-67603" target="_blank" rel="noreferrer">此 YouTrack 问题</a>中分享你的情况。</p><h2 id="查找必填理由-api-的用法" tabindex="-1">查找必填理由 API 的用法 <a class="header-anchor" href="#查找必填理由-api-的用法" aria-label="Permalink to &quot;查找必填理由 API 的用法&quot;">​</a></h2><p>你的应用或某个依赖项中的 Kotlin 代码可能会访问来自 <code>platform.posix</code> 等库的必填理由 API，例如 <code>fstat</code>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> platform.posix.fstat</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useRequiredReasonAPI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    fstat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在某些情况下，可能难以确定哪些依赖项使用了必填理由 API。为了帮助你找到它们，我们构建了一个简单工具。</p><p>要使用它，请在你的项目声明 Kotlin 框架的目录中运行以下命令：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/usr/bin/python3</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -fsSL</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/JetBrains/kotlin/raw/rrf_v0.0.1/libraries/tools/required-reason-finder/required_reason_finder.py)&quot;</span></span></code></pre></div><p>你也可以单独<a href="https://github.com/JetBrains/kotlin/blob/rrf_v0.0.1/libraries/tools/required-reason-finder/required_reason_finder.py" target="_blank" rel="noreferrer">下载此脚本</a>，检查它，然后使用 <code>python3</code> 运行。</p><h2 id="将-xcprivacy-文件放入你的-kotlin-构件中" tabindex="-1">将 .xcprivacy 文件放入你的 Kotlin 构件中 <a class="header-anchor" href="#将-xcprivacy-文件放入你的-kotlin-构件中" aria-label="Permalink to &quot;将 .xcprivacy 文件放入你的 Kotlin 构件中&quot;">​</a></h2><p>如果你需要将 <code>PrivacyInfo.xcprivacy</code> 文件与你的 Kotlin 构件捆绑在一起，请使用 <code>apple-privacy-manifests</code> 插件：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;multiplatform&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;apple-privacy-manifests&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) version </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.0.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    privacyManifest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        embed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            privacyManifest </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> layout.projectDirectory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;PrivacyInfo.xcprivacy&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).asFile,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>该插件会将隐私清单文件复制到<a href="https://developer.apple.com/documentation/bundleresources/adding-a-privacy-manifest-to-your-app-or-third-party-sdk?language=objc" target="_blank" rel="noreferrer">对应的输出位置</a>。</p><h2 id="已知用法" tabindex="-1">已知用法 <a class="header-anchor" href="#已知用法" aria-label="Permalink to &quot;已知用法&quot;">​</a></h2><h3 id="compose-multiplatform" tabindex="-1">Compose Multiplatform <a class="header-anchor" href="#compose-multiplatform" aria-label="Permalink to &quot;Compose Multiplatform&quot;">​</a></h3><p>使用 Compose Multiplatform 可能会导致你的二进制文件中出现 <code>fstat</code>、<code>stat</code> 和 <code>mach_absolute_time</code> 的用法。尽管这些函数不用于跟踪或指纹识别，也不会从设备发送，但 Apple 仍可能将其标记为缺少必填理由的 API。</p><p>如果你必须为 <code>stat</code> 和 <code>fstat</code> 的用法指定理由，请使用 <code>0A2A.1</code>。对于 <code>mach_absolute_time</code>，请使用 <code>35F9.1</code>。</p><p>有关 Compose Multiplatform 中使用的必填理由 API 的进一步更新，请关注<a href="https://github.com/JetBrains/compose-multiplatform/issues/4738" target="_blank" rel="noreferrer">此问题</a>。</p><h3 id="kotlin-native-运行时在-1-9-10-或更早版本中" tabindex="-1">Kotlin/Native 运行时在 1.9.10 或更早版本中 <a class="header-anchor" href="#kotlin-native-运行时在-1-9-10-或更早版本中" aria-label="Permalink to &quot;Kotlin/Native 运行时在 1.9.10 或更早版本中&quot;">​</a></h3><p><code>mach_absolute_time</code> API 在 Kotlin/Native 运行时中的 <code>mimalloc</code> 分配器中使用。这是 Kotlin 1.9.10 及更早版本中的默认分配器。</p><p>我们建议升级到 Kotlin 1.9.20 或更高版本。如果无法升级，请更改内存分配器。为此，请在你的 Gradle 构建脚本中为当前的 Kotlin 分配器设置 <code>-Xallocator=custom</code> 编译选项，或为系统分配器设置 <code>-Xallocator=std</code>。</p><p>有关更多信息，请参见<a href="https://kotlinlang.org/docs/native-memory-manager.html" target="_blank" rel="noreferrer">Kotlin/Native 内存管理</a>。</p>`,36)]))}const f=s(l,[["render",p]]);export{m as __pageData,f as default};
