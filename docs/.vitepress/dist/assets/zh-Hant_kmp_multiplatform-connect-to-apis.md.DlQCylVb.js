import{_ as i,a,b as n,c as l}from"./chunks/expect-di-framework.p8QbgfKZ.js";import{_ as t,c as p,o as h,ag as e}from"./chunks/framework.Bksy39di.js";const m=JSON.parse('{"title":"使用平台特定 API","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kmp/multiplatform-connect-to-apis.md","filePath":"zh-Hant/kmp/multiplatform-connect-to-apis.md","lastUpdated":1755516278000}'),k={name:"zh-Hant/kmp/multiplatform-connect-to-apis.md"};function d(r,s,o,c,g,E){return h(),p("div",null,s[0]||(s[0]=[e('<h1 id="使用平台特定-api" tabindex="-1">使用平台特定 API <a class="header-anchor" href="#使用平台特定-api" aria-label="Permalink to &quot;使用平台特定 API&quot;">​</a></h1><p>在本文中，您將學習如何在開發多平台應用程式和函式庫時使用平台特定 API。</p><h2 id="kotlin-多平台函式庫" tabindex="-1">Kotlin 多平台函式庫 <a class="header-anchor" href="#kotlin-多平台函式庫" aria-label="Permalink to &quot;Kotlin 多平台函式庫&quot;">​</a></h2><p>在編寫使用平台特定 API 的程式碼之前，請檢查是否可以使用多平台函式庫來替代。這類函式庫提供一個通用的 Kotlin API，其針對不同平台具有不同的實作。</p><p>目前已有許多可用的函式庫，可用於實作網路、日誌記錄、分析，以及存取裝置功能等。欲了解更多資訊，請參閱<a href="https://github.com/terrakok/kmm-awesome" target="_blank" rel="noreferrer">此精選清單</a>。</p><h2 id="預期與實際函式和屬性" tabindex="-1">預期與實際函式和屬性 <a class="header-anchor" href="#預期與實際函式和屬性" aria-label="Permalink to &quot;預期與實際函式和屬性&quot;">​</a></h2><p>Kotlin 提供一種語言機制，可在開發通用邏輯時存取平台特定 API： <a href="./multiplatform-expect-actual">預期與實際宣告</a>。</p><p>透過此機制，多平台模組的通用原始碼集定義一個預期宣告，每個平台原始碼集都必須提供與該預期宣告對應的實際宣告。編譯器確保在通用原始碼集中標記為 <code>expect</code> 關鍵字的每個宣告，在所有目標平台原始碼集中都有對應標記為 <code>actual</code> 關鍵字的宣告。</p><p>這適用於大多數 Kotlin 宣告，例如函式、類別、介面、列舉、屬性和註解。本節著重於使用預期與實際函式和屬性。</p><p><img src="'+i+`" alt="使用預期與實際函式和屬性" width="700"></p><p>在此範例中，您將在通用原始碼集中定義一個預期 <code>platform()</code> 函式，並在平台原始碼集中提供實際實作。在為特定平台產生程式碼時，Kotlin 編譯器會合併預期與實際宣告。它會產生一個 <code>platform()</code> 函式及其實際實作。預期與實際宣告應定義在相同的套件中，並在產生後的平台程式碼中合併成 <em>一個宣告</em>。任何在產生後的平台程式碼中呼叫預期 <code>platform()</code> 函式的動作，都將呼叫正確的實際實作。</p><h3 id="範例-產生-uuid" tabindex="-1">範例：產生 UUID <a class="header-anchor" href="#範例-產生-uuid" aria-label="Permalink to &quot;範例：產生 UUID&quot;">​</a></h3><p>假設您正在使用 Kotlin Multiplatform 開發 iOS 和 Android 應用程式，並且想要產生一個通用唯一識別碼 (UUID)。</p><p>為此，請在您的 Kotlin 多平台模組的通用原始碼集中，使用 <code>expect</code> 關鍵字宣告預期函式 <code>randomUUID()</code>。請<strong>勿</strong>包含任何實作程式碼。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在通用原始碼集中：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> randomUUID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span></span></code></pre></div><p>在每個平台特定原始碼集（iOS 和 Android）中，提供通用模組中預期函式 <code>randomUUID()</code> 的實際實作。使用 <code>actual</code> 關鍵字來標記這些實際實作。</p><p><img src="`+a+`" alt="使用預期與實際宣告產生 UUID" width="700"></p><p>以下程式碼片段顯示 Android 和 iOS 的實作。平台特定程式碼使用 <code>actual</code> 關鍵字和函式的相同名稱：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在 android 原始碼集中：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> java.util.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> randomUUID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UUID.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">randomUUID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在 iOS 原始碼集中：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> platform.Foundation.NSUUID</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> randomUUID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NSUUID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UUIDString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Android 實作使用 Android 上可用的 API，而 iOS 實作則使用 iOS 上可用的 API。您可以從 Kotlin/Native 程式碼存取 iOS API。</p><p>在為 Android 產生最終平台程式碼時，Kotlin 編譯器會自動合併預期與實際宣告，並產生一個單一的 <code>randomUUID()</code> 函式及其實際的 Android 特定實作。iOS 也會重複相同的過程。</p><p>為求簡潔，本範例及後續範例均使用簡化後的原始碼集名稱「common」、「ios」和「android」。通常，這意味著 <code>commonMain</code>、<code>iosMain</code> 和 <code>androidMain</code>，類似的邏輯也可以在測試原始碼集 <code>commonTest</code>、<code>iosTest</code> 和 <code>androidTest</code> 中定義。</p><p>與預期與實際函式類似，預期與實際屬性允許您在不同平台上使用不同的值。預期與實際函式和屬性最適用於簡單情況。</p><h2 id="通用程式碼中的介面" tabindex="-1">通用程式碼中的介面 <a class="header-anchor" href="#通用程式碼中的介面" aria-label="Permalink to &quot;通用程式碼中的介面&quot;">​</a></h2><p>如果平台特定邏輯過於龐大和複雜，您可以透過在通用程式碼中定義一個介面來表示它，然後在平台原始碼集中提供不同的實作，從而簡化您的程式碼。</p><p><img src="`+n+`" alt="使用介面" width="700"></p><p>平台原始碼集中的實作使用其相應的依賴項：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在 commonMain 原始碼集中：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Platform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在 androidMain 原始碼集中：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> android.os.Build</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AndroidPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Android \${Build.VERSION.SDK_INT}&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在 iosMain 原始碼集中：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> platform.UIKit.UIDevice</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IOSPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UIDevice.currentDevice.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot; &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UIDevice.currentDevice.systemVersion</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>當您需要通用介面時，若要注入適當的平台實作，您可以選擇以下其中一個選項，每個選項都將在下方更詳細地解釋：</p><ul><li><a href="#expected-and-actual-functions">使用預期與實際函式</a></li><li><a href="#different-entry-points">透過不同進入點提供實作</a></li><li><a href="#dependency-injection-framework">使用依賴注入框架</a></li></ul><h3 id="預期與實際函式" tabindex="-1">預期與實際函式 <a class="header-anchor" href="#預期與實際函式" aria-label="Permalink to &quot;預期與實際函式&quot;">​</a></h3><p>定義一個返回此介面值的預期函式，然後定義返回其子類別的實際函式：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在 commonMain 原始碼集中：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Platform</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> platform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在 androidMain 原始碼集中：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AndroidPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> platform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AndroidPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在 iosMain 原始碼集中：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IOSPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> platform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IOSPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>當您在通用程式碼中呼叫 <code>platform()</code> 函式時，它可以處理 <code>Platform</code> 類型的物件。當您在 Android 上執行此通用程式碼時，<code>platform()</code> 呼叫會返回 <code>AndroidPlatform</code> 類別的實例。當您在 iOS 上執行時，<code>platform()</code> 會返回 <code>IOSPlatform</code> 類別的實例。</p><h3 id="不同進入點" tabindex="-1">不同進入點 <a class="header-anchor" href="#不同進入點" aria-label="Permalink to &quot;不同進入點&quot;">​</a></h3><p>如果您控制進入點，則無需使用預期與實際宣告即可建構每個平台產物的實作。為此，請在共享的 Kotlin 多平台模組中定義平台實作，但在平台模組中實例化它們：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 共享的 Kotlin 多平台模組</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在 commonMain 原始碼集中：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Platform</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 應用程式邏輯</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在 androidMain 原始碼集中：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AndroidPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在 iosMain 原始碼集中：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IOSPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在 androidApp 平台模組中：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> android.app.Application</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mysharedpackage.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyApp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onCreate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onCreate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AndroidPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-Swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在 iosApp 平台模組中（使用 Swift）：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> shared</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@main</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> iOSApp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">App </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">IOSPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在 Android 上，您應該建立一個 <code>AndroidPlatform</code> 實例並將其傳遞給 <code>application()</code> 函式；而在 iOS 上，您也應該類似地建立並傳遞一個 <code>IOSPlatform</code> 實例。這些進入點不一定是您應用程式的進入點，但這是您可以呼叫共享模組特定功能的地方。</p><p>透過預期與實際函式或直接透過進入點提供正確的實作，對於簡單情境效果良好。但是，如果您的專案中使用依賴注入框架，我們建議在簡單情況下也使用它，以確保一致性。</p><h3 id="依賴注入框架" tabindex="-1">依賴注入框架 <a class="header-anchor" href="#依賴注入框架" aria-label="Permalink to &quot;依賴注入框架&quot;">​</a></h3><p>現代應用程式通常使用依賴注入 (DI) 框架來建立鬆散耦合的架構。DI 框架允許根據當前環境將依賴項注入元件中。</p><p>任何支援 Kotlin Multiplatform 的 DI 框架都可以幫助您為不同平台注入不同的依賴項。</p><p>例如，<a href="https://insert-koin.io/" target="_blank" rel="noreferrer">Koin</a> 是一個支援 Kotlin Multiplatform 的依賴注入框架：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在通用原始碼集中：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.koin.dsl.module</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Platform</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> platformModule: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Module</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在 androidMain 原始碼集中：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AndroidPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> platformModule: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Module</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    single</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        AndroidPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在 iosMain 原始碼集中：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IOSPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> platformModule </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    single</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IOSPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在這裡，Koin DSL 用於建立模組，這些模組定義了用於注入的元件。您在通用程式碼中用 <code>expect</code> 關鍵字宣告一個模組，然後使用 <code>actual</code> 關鍵字為每個平台提供平台特定實作。框架會負責在執行時期選擇正確的實作。</p><p>當您使用 DI 框架時，所有依賴項都會透過此框架注入。相同的邏輯也適用於處理平台依賴項。如果您的專案中已經有 DI 框架，我們建議您繼續使用它，而不是手動使用預期與實際函式。這樣可以避免混用兩種不同的依賴注入方式。</p><p>您也不必總是在 Kotlin 中實作通用介面。您可以在不同的 <em>平台模組</em> 中使用另一種語言（例如 Swift）來實作。如果您選擇這種方法，則應該從 iOS 平台模組中提供實作，並使用 DI 框架：</p><p><img src="`+l+'" alt="使用依賴注入框架" width="700"></p><p>這種方法僅在您將實作放在平台模組中時才有效。它不太具擴展性，因為您的 Kotlin 多平台模組無法自給自足，並且您需要將通用介面在不同的模組中實作。</p><h2 id="接下來是什麼" tabindex="-1">接下來是什麼？ <a class="header-anchor" href="#接下來是什麼" aria-label="Permalink to &quot;接下來是什麼？&quot;">​</a></h2><ul><li>觀看 <a href="https://youtu.be/bSNumV04y_w" target="_blank" rel="noreferrer">在 KMP 應用程式中使用平台特定 API</a> 的影片教學。</li><li>如需了解 expect/actual 機制的更多範例和資訊，請參閱<a href="./multiplatform-expect-actual">預期與實際宣告</a>。</li></ul>',62)]))}const u=t(k,[["render",d]]);export{m as __pageData,u as default};
