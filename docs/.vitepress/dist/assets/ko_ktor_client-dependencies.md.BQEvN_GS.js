import{_ as E,C as l,c as y,o as m,j as t,G as i,ag as r,a as o,w as n}from"./chunks/framework.Bksy39di.js";const K=JSON.parse('{"title":"클라이언트 종속성 추가","description":"","frontmatter":{},"headers":[],"relativePath":"ko/ktor/client-dependencies.md","filePath":"ko/ktor/client-dependencies.md","lastUpdated":1755457140000}'),v={name:"ko/ktor/client-dependencies.md"};function _(f,e,b,F,q,A){const h=l("show-structure"),c=l("link-summary"),d=l("control"),s=l("code-block"),a=l("TabItem"),g=l("note"),p=l("Tabs"),k=l("list"),u=l("chapter");return m(),y("div",null,[e[10]||(e[10]=t("h1",{id:"클라이언트-종속성-추가",tabindex:"-1"},[o("클라이언트 종속성 추가 "),t("a",{class:"header-anchor",href:"#클라이언트-종속성-추가","aria-label":'Permalink to "클라이언트 종속성 추가"'},"​")],-1)),i(h,{for:"chapter",depth:"2"}),i(c,null,{default:n(()=>e[0]||(e[0]=[o("기존 프로젝트에 클라이언트 종속성을 추가하는 방법을 알아봅니다.")])),_:1}),e[11]||(e[11]=r('<p>프로젝트에서 Ktor HTTP 클라이언트를 사용하려면 <a href="#repositories">레포지토리 구성</a>이 필요하며 다음 종속성을 추가해야 합니다.</p><ul><li><p><strong><a href="#client-dependency">ktor-client-core</a></strong></p><p><code>ktor-client-core</code>는 핵심 Ktor 클라이언트 기능을 포함합니다.</p></li><li><p><strong><a href="#engine-dependency">엔진 종속성</a></strong></p><p>엔진은 네트워크 요청을 처리하는 데 사용됩니다. <a href="./client-supported-platforms">특정 플랫폼</a>에는 네트워크 요청을 처리하는 특정 엔진이 필요할 수 있습니다.</p></li><li><p>(선택 사항) <strong><a href="#logging-dependency">로깅 종속성</a></strong></p><p>구조화되고 유연한 로깅 기능을 활성화하기 위한 로깅 프레임워크를 제공합니다.</p></li><li><p>(선택 사항) <strong><a href="#plugin-dependency">플러그인 종속성</a></strong></p><p>플러그인은 특정 기능으로 클라이언트를 확장하는 데 사용됩니다.</p></li></ul><p> Ktor 종속성을 추가하기 전에, 이 프로젝트의 레포지토리를 구성해야 합니다. </p>',3)),i(k,null,{default:n(()=>[t("li",null,[t("p",null,[i(d,null,{default:n(()=>e[1]||(e[1]=[o("프로덕션")])),_:1})]),e[3]||(e[3]=t("p",null," Ktor의 프로덕션 릴리스는 Maven 중앙 레포지토리에서 사용할 수 있습니다. 빌드 스크립트에서 이 레포지토리를 다음과 같이 선언할 수 있습니다. ",-1)),i(p,{group:"languages"},{default:n(()=>[i(a,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[i(s,{lang:"Kotlin",code:`                    repositories {
                        mavenCentral()
                    }`})]),_:1}),i(a,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[i(s,{lang:"Groovy",code:`                    repositories {
                        mavenCentral()
                    }`})]),_:1}),i(a,{title:"Maven","group-key":"maven"},{default:n(()=>[i(g,null,{default:n(()=>e[2]||(e[2]=[t("p",null,[o(" 프로젝트는 "),t("a",{href:"https://maven.apache.org/guides/introduction/introduction-to-the-pom.html#super-pom"},"Super POM"),o("으로부터 중앙 레포지토리를 상속하므로 "),t("path",null,"pom.xml"),o(" 파일에 Maven 중앙 레포지토리를 추가할 필요가 없습니다. ")],-1)])),_:1})]),_:1})]),_:1})]),t("li",null,[t("p",null,[i(d,null,{default:n(()=>e[4]||(e[4]=[o("얼리 액세스 프로그램 (EAP)")])),_:1})]),e[5]||(e[5]=t("p",null,[o(" Ktor의 "),t("a",{href:"https://ktor.io/eap/"},"EAP"),o(" 버전에 액세스하려면 "),t("a",{href:"https://maven.pkg.jetbrains.space/public/p/ktor/eap/io/ktor/"},"Space 레포지토리"),o("를 참조해야 합니다. ")],-1)),i(p,{group:"languages"},{default:n(()=>[i(a,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[i(s,{lang:"Kotlin",code:`                    repositories {
                        maven {
                            url = uri("https://maven.pkg.jetbrains.space/public/p/ktor/eap")
                        }
                    }`})]),_:1}),i(a,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[i(s,{lang:"Groovy",code:`                    repositories {
                        maven {
                            url "https://maven.pkg.jetbrains.space/public/p/ktor/eap"
                        }
                    }`})]),_:1}),i(a,{title:"Maven","group-key":"maven"},{default:n(()=>[i(s,{lang:"XML",code:`                    <repositories>
                        <repository>
                            <id>ktor-eap</id>
                            <url>https://maven.pkg.jetbrains.space/public/p/ktor/eap</url>
                        </repository>
                    </repositories>`})]),_:1})]),_:1}),e[6]||(e[6]=t("p",null,[o(" Ktor EAP는 "),t("a",{href:"https://maven.pkg.jetbrains.space/kotlin/p/kotlin/dev"},"Kotlin 개발 레포지토리"),o("를 요구할 수 있습니다. ")],-1)),i(p,{group:"languages"},{default:n(()=>[i(a,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[i(s,{lang:"Kotlin",code:`                    repositories {
                        maven {
                            url = uri("https://maven.pkg.jetbrains.space/kotlin/p/kotlin/dev")
                        }
                    }`})]),_:1}),i(a,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[i(s,{lang:"Groovy",code:`                    repositories {
                        maven {
                            url "https://maven.pkg.jetbrains.space/kotlin/p/kotlin/dev"
                        }
                    }`})]),_:1}),i(a,{title:"Maven","group-key":"maven"},{default:n(()=>[i(s,{lang:"XML",code:`                    <repositories>
                        <repository>
                            <id>ktor-eap</id>
                            <url>https://maven.pkg.jetbrains.space/kotlin/p/kotlin/dev</url>
                        </repository>
                    </repositories>`})]),_:1})]),_:1})])]),_:1}),e[12]||(e[12]=r('<h2 id="add-ktor-dependencies" tabindex="-1">종속성 추가 <a class="header-anchor" href="#add-ktor-dependencies" aria-label="Permalink to &quot;종속성 추가 {id=&quot;add-ktor-dependencies&quot;}&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><a href="./client-supported-platforms">다양한 플랫폼</a>을 위해 Ktor는 <code>-jvm</code> 또는 <code>-js</code>와 같은 접미사가 붙은 플랫폼별 아티팩트를 제공합니다. 예를 들어, <code>ktor-client-core-jvm</code>과 같습니다. Gradle은 주어진 플랫폼에 적합한 아티팩트를 자동으로 해결하지만, Maven은 이 기능을 지원하지 않습니다. 이는 Maven의 경우 플랫폼별 접미사를 수동으로 추가해야 함을 의미합니다.</p></div><h3 id="client-dependency" tabindex="-1">클라이언트 종속성 <a class="header-anchor" href="#client-dependency" aria-label="Permalink to &quot;클라이언트 종속성 {id=&quot;client-dependency&quot;}&quot;">​</a></h3><p>주요 클라이언트 기능은 <code>ktor-client-core</code> 아티팩트에서 사용할 수 있습니다. 빌드 시스템에 따라 다음과 같이 추가할 수 있습니다.</p>',4)),i(p,{group:"languages"},{default:n(()=>[i(a,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[i(s,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-client-core:$ktor_version")'})]),_:1}),i(a,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[i(s,{lang:"Groovy",code:'            implementation "io.ktor:ktor-client-core:$ktor_version"'})]),_:1}),i(a,{title:"Maven","group-key":"maven"},{default:n(()=>[i(s,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-client-core-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),e[13]||(e[13]=r(`<p><code>$ktor_version</code>을 필요한 Ktor 버전으로 바꿀 수 있습니다. 예를 들어, <code>3.2.3</code>과 같이 말입니다.</p><h4 id="client-dependency-multiplatform" tabindex="-1">멀티플랫폼 <a class="header-anchor" href="#client-dependency-multiplatform" aria-label="Permalink to &quot;멀티플랫폼 {id=&quot;client-dependency-multiplatform&quot;}&quot;">​</a></h4><p>멀티플랫폼 프로젝트의 경우, <code>gradle/libs.versions.toml</code> 파일에서 Ktor 버전과 <code>ktor-client-core</code> 아티팩트를 정의할 수 있습니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[versions]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ktor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;3.2.3&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[libraries]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kotlin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">test </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { module </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;org.jetbrains.kotlin:kotlin-test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, version.ref </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;kotlin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ktor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">client</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">okhttp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { module </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;io.ktor:ktor-client-okhttp&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, version.ref </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;ktor&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div><p>그런 다음, <code>commonMain</code> 소스 세트에 <code>ktor-client-core</code>를 종속성으로 추가합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    commonMain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(libs.ktor.client.core)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="engine-dependency" tabindex="-1">엔진 종속성 <a class="header-anchor" href="#engine-dependency" aria-label="Permalink to &quot;엔진 종속성 {id=&quot;engine-dependency&quot;}&quot;">​</a></h3><p><a href="./client-engines">엔진</a>은 네트워크 요청을 처리하는 역할을 합니다. Apache, CIO, Android, iOS 등 다양한 플랫폼에서 사용할 수 있는 여러 클라이언트 엔진이 있습니다. 예를 들어, <code>CIO</code> 엔진 종속성을 다음과 같이 추가할 수 있습니다.</p>`,8)),i(p,{group:"languages"},{default:n(()=>[i(a,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[i(s,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-client-cio:$ktor_version")'})]),_:1}),i(a,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[i(s,{lang:"Groovy",code:'            implementation "io.ktor:ktor-client-cio:$ktor_version"'})]),_:1}),i(a,{title:"Maven","group-key":"maven"},{default:n(()=>[i(s,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-client-cio-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),e[14]||(e[14]=r(`<h4 id="engine-dependency-multiplatform" tabindex="-1">멀티플랫폼 <a class="header-anchor" href="#engine-dependency-multiplatform" aria-label="Permalink to &quot;멀티플랫폼 {id=&quot;engine-dependency-multiplatform&quot;}&quot;">​</a></h4><p>멀티플랫폼 프로젝트의 경우, 해당 소스 세트에 필요한 엔진에 대한 종속성을 추가해야 합니다.</p><p>예를 들어, Android용 <code>OkHttp</code> 엔진 종속성을 추가하려면 먼저 <code>gradle/libs.versions.toml</code> 파일에서 Ktor 버전과 <code>ktor-client-okhttp</code> 아티팩트를 정의할 수 있습니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[versions]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ktor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;3.2.3&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[libraries]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kotlin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">test </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { module </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;org.jetbrains.kotlin:kotlin-test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, version.ref </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;kotlin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ktor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">client</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">darwin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { module </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;io.ktor:ktor-client-darwin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, version.ref </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;ktor&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div><p>그런 다음, <code>androidMain</code> 소스 세트에 <code>ktor-client-okhttp</code>를 종속성으로 추가합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    androidMain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(libs.ktor.client.okhttp)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>특정 엔진에 필요한 종속성의 전체 목록은 <a href="./client-engines#dependencies">엔진 종속성 추가</a>를 참조하십시오.</p><h3 id="로깅-종속성" tabindex="-1">로깅 종속성 <a class="header-anchor" href="#로깅-종속성" aria-label="Permalink to &quot;로깅 종속성&quot;">​</a></h3><p><a href="#jvm">JVM</a>에서 Ktor는 로깅을 위한 추상화 계층으로 Java용 Simple Logging Facade (<a href="http://www.slf4j.org/">SLF4J</a>)를 사용합니다. SLF4J는 로깅 API를 기본 로깅 구현으로부터 분리하여, 애플리케이션의 요구 사항에 가장 적합한 로깅 프레임워크를 통합할 수 있도록 합니다. 일반적인 선택 사항으로는 <a href="https://logback.qos.ch/">Logback</a> 또는 <a href="https://logging.apache.org/log4j">Log4j</a>가 있습니다. 프레임워크가 제공되지 않으면 SLF4J는 기본적으로 로깅을 비활성화하는 NOP(No-Operation) 구현으로 설정됩니다. </p><p> 로깅을 활성화하려면 <a href="https://logback.qos.ch/">Logback</a>과 같이 필요한 SLF4J 구현이 포함된 아티팩트를 포함합니다. </p>`,10)),i(p,{group:"languages"},{default:n(()=>[i(a,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[i(s,{lang:"Kotlin",code:'              implementation("ch.qos.logback:logback-classic:$logback_version")'})]),_:1}),i(a,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[i(s,{lang:"Groovy",code:'              implementation "ch.qos.logback:logback-classic:$logback_version"'})]),_:1}),i(a,{title:"Maven","group-key":"maven"},{default:n(()=>[i(s,{lang:"XML",code:`              <dependency>
                  <groupId>ch.qos.logback</groupId>
                  <artifactId>logback-classic</artifactId>
                  <version>\${logback_version}</version>
              </dependency>`})]),_:1})]),_:1}),e[15]||(e[15]=r('<p>Ktor의 로깅에 대한 자세한 내용은 <a href="./client-logging">Ktor 클라이언트의 로깅</a>을 참조하십시오.</p><h3 id="plugin-dependency" tabindex="-1">플러그인 종속성 <a class="header-anchor" href="#plugin-dependency" aria-label="Permalink to &quot;플러그인 종속성 {id=&quot;plugin-dependency&quot;}&quot;">​</a></h3><p>Ktor를 사용하면 기본적으로 제공되지 않는 추가 클라이언트 기능(<a href="./client-plugins">플러그인</a>) (예: 인증 및 직렬화)을 사용할 수 있습니다. 이 중 일부는 별도의 아티팩트로 제공됩니다. 필요한 플러그인에 대한 토픽에서 어떤 종속성이 필요한지 알 수 있습니다.</p><blockquote><p>멀티플랫폼 프로젝트의 경우, 플러그인 종속성은 <code>commonMain</code> 소스 세트에 추가되어야 합니다. 일부 플러그인은 특정 플랫폼에 대한 <a href="./client-engines#limitations">제한 사항</a>이 있을 수 있습니다.</p></blockquote><h2 id="ktor-버전-일관성-보장" tabindex="-1">Ktor 버전 일관성 보장 <a class="header-anchor" href="#ktor-버전-일관성-보장" aria-label="Permalink to &quot;Ktor 버전 일관성 보장&quot;">​</a></h2>',5)),i(u,{title:"Ktor BOM 종속성 사용"},{default:n(()=>[e[7]||(e[7]=t("p",null,"Ktor BOM은 각 종속성에 대해 개별적으로 버전을 지정하지 않고도 모든 Ktor 모듈이 동일하고 일관된 버전을 사용하도록 보장합니다.",-1)),e[8]||(e[8]=t("p",null,"Ktor BOM 종속성을 추가하려면 빌드 스크립트에서 다음과 같이 선언합니다.",-1)),i(p,{group:"languages"},{default:n(()=>[i(a,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[i(s,{lang:"Kotlin",code:'            implementation(platform("io.ktor:ktor-bom:$ktor_version"))'})]),_:1}),i(a,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[i(s,{lang:"Groovy",code:'            implementation platform "io.ktor:ktor-bom:$ktor_version"'})]),_:1}),i(a,{title:"Maven","group-key":"maven"},{default:n(()=>[i(s,{lang:"XML",code:`            <dependencyManagement>
              <dependencies>
                  <dependency>
                      <groupId>io.ktor</groupId>
                      <artifactId>ktor-bom</artifactId>
                      <version>3.2.3</version>
                      <type>pom</type>
                      <scope>import</scope>
                  </dependency>
              </dependencies>
          </dependencyManagement>`})]),_:1})]),_:1})]),_:1}),e[16]||(e[16]=t("p",null," 게시된 버전 카탈로그를 사용하여 Ktor 종속성 선언을 중앙화할 수도 있습니다. 이 접근 방식은 다음과 같은 이점을 제공합니다. ",-1)),i(k,{id:"published-version-catalog-benefits"},{default:n(()=>e[9]||(e[9]=[t("li",null," 자체 카탈로그에 Ktor 버전을 수동으로 선언할 필요가 없어집니다. ",-1),t("li",null," 모든 Ktor 모듈을 단일 네임스페이스 아래에 노출합니다. ",-1)])),_:1}),e[17]||(e[17]=t("p",null,[o(" 카탈로그를 선언하려면, "),t("path",null,"settings.gradle.kts"),o("에서 선택한 이름으로 버전 카탈로그를 생성하십시오. ")],-1)),i(s,{lang:"kotlin",code:`    dependencyResolutionManagement {
        versionCatalogs {
            create("ktorLibs") {
                from("io.ktor:ktor-version-catalog:3.2.3")
            }
        }
    }`}),e[18]||(e[18]=t("p",null,[o(" 그런 다음, 모듈의 "),t("path",null,"build.gradle.kts"),o("에서 카탈로그 이름을 참조하여 종속성을 추가할 수 있습니다. ")],-1)),i(s,{lang:"kotlin",code:`    dependencies {
        implementation(ktorLibs.client.core)
        // ...
    }`})])}const T=E(v,[["render",_]]);export{K as __pageData,T as default};
