import{_ as o,c as t,o as r,ag as a}from"./chunks/framework.Bksy39di.js";const h=JSON.parse('{"title":"Kotlin 2.0 互換性ガイド","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/compatibility-guide-20.md","filePath":"ja/kotlin/compatibility-guide-20.md","lastUpdated":1754307826000}'),n={name:"ja/kotlin/compatibility-guide-20.md"};function l(s,e,i,c,p,g){return r(),t("div",null,e[0]||(e[0]=[a('<h1 id="kotlin-2-0-互換性ガイド" tabindex="-1">Kotlin 2.0 互換性ガイド <a class="header-anchor" href="#kotlin-2-0-互換性ガイド" aria-label="Permalink to &quot;Kotlin 2.0 互換性ガイド&quot;">​</a></h1><p><em><a href="/ja/kotlin/kotlin-evolution-principles">Keeping the Language Modern</a></em> および <em><a href="/ja/kotlin/kotlin-evolution-principles">Comfortable Updates</a></em> は、Kotlin言語設計における基本的な原則の1つです。前者は、言語の進化を妨げる構文は削除されるべきであると述べており、後者は、コード移行を可能な限りスムーズにするために、この削除が事前に十分に通知されるべきであると述べています。</p><p>言語の変更のほとんどは、更新された変更履歴やコンパイラの警告など、他のチャネルを通じてすでに発表されていますが、このドキュメントはKotlin 1.9からKotlin 2.0への移行に関する完全なリファレンスを提供します。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Kotlin K2コンパイラはKotlin 2.0の一部として導入されます。新しいコンパイラの利点、移行中に遭遇する可能性のある変更点、および以前のコンパイラに戻す方法については、<a href="/ja/kotlin/k2-compiler-migration-guide">K2コンパイラ移行ガイド</a>を参照してください。</p></div><h2 id="基本用語" tabindex="-1">基本用語 <a class="header-anchor" href="#基本用語" aria-label="Permalink to &quot;基本用語&quot;">​</a></h2><p>このドキュメントでは、いくつかの種類の互換性について説明します。</p><ul><li><em>ソース</em>: ソース非互換な変更とは、以前は問題なく（エラーや警告なしで）コンパイルされていたコードが、もはやコンパイルできなくなる変更です。</li><li><em>バイナリ</em>: 2つのバイナリ成果物は、それらを入れ替えてもロードエラーやリンクエラーが発生しない場合に、バイナリ互換であると言われます。</li><li><em>振る舞い</em>: 振る舞い非互換な変更とは、同じプログラムが変更適用前と後で異なる振る舞いを示す場合を指します。</li></ul><p>これらの定義は純粋なKotlinのみに適用されることに留意してください。他の言語の視点（例えばJava）から見たKotlinコードの互換性は、このドキュメントの範囲外です。</p><h2 id="言語" tabindex="-1">言語 <a class="header-anchor" href="#言語" aria-label="Permalink to &quot;言語&quot;">​</a></h2><h3 id="プロジェクトされたレシーバー上での合成セッターの使用を非推奨化" tabindex="-1">プロジェクトされたレシーバー上での合成セッターの使用を非推奨化 <a class="header-anchor" href="#プロジェクトされたレシーバー上での合成セッターの使用を非推奨化" aria-label="Permalink to &quot;プロジェクトされたレシーバー上での合成セッターの使用を非推奨化&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-54309" target="_blank" rel="noreferrer">KT-54309</a></p><p><strong>Component</strong>: Core language</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Short summary</strong>: Javaクラスの合成セッターを使用して、クラスのプロジェクトされた型と競合する型を割り当てると、エラーが発生します。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.8.20: 合成プロパティセッターが反変位置にプロジェクトされたパラメータ型を持ち、呼び出しサイトの引数型が非互換になる場合に警告を報告</li><li>2.0.0: 警告をエラーに昇格</li></ul></blockquote><h3 id="javaサブクラスでオーバーロードされているインラインクラスパラメータを持つ関数を呼び出す際のマングリングの修正" tabindex="-1">Javaサブクラスでオーバーロードされているインラインクラスパラメータを持つ関数を呼び出す際のマングリングの修正 <a class="header-anchor" href="#javaサブクラスでオーバーロードされているインラインクラスパラメータを持つ関数を呼び出す際のマングリングの修正" aria-label="Permalink to &quot;Javaサブクラスでオーバーロードされているインラインクラスパラメータを持つ関数を呼び出す際のマングリングの修正&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-56545" target="_blank" rel="noreferrer">KT-56545</a></p><p><strong>Component</strong>: Core language</p><p><strong>Incompatible change type</strong>: behavioral</p><p><strong>Deprecation cycle</strong>:</p><ul><li>2.0.0: 関数呼び出しで正しいマングリング動作を使用。以前の動作に戻すには、<code>-XXLanguage:-MangleCallsToJavaMethodsWithValueClasses</code> コンパイラオプションを使用します。</li></ul></blockquote><h3 id="反変キャプチャ型に対する型近似アルゴリズムの修正" tabindex="-1">反変キャプチャ型に対する型近似アルゴリズムの修正 <a class="header-anchor" href="#反変キャプチャ型に対する型近似アルゴリズムの修正" aria-label="Permalink to &quot;反変キャプチャ型に対する型近似アルゴリズムの修正&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-49404" target="_blank" rel="noreferrer">KT-49404</a></p><p><strong>Component</strong>: Core language</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.8.20: 問題のある呼び出しに対して警告を報告</li><li>2.0.0: 警告をエラーに昇格</li></ul></blockquote><h3 id="プロパティ初期化前のプロパティ値へのアクセスを禁止" tabindex="-1">プロパティ初期化前のプロパティ値へのアクセスを禁止 <a class="header-anchor" href="#プロパティ初期化前のプロパティ値へのアクセスを禁止" aria-label="Permalink to &quot;プロパティ初期化前のプロパティ値へのアクセスを禁止&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-56408" target="_blank" rel="noreferrer">KT-56408</a></p><p><strong>Component</strong>: Core language</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Deprecation cycle</strong>:</p><ul><li>2.0.0: 影響を受けるコンテキストでプロパティが初期化前にアクセスされた場合にエラーを報告</li></ul></blockquote><h3 id="同じ名前のインポートされたクラスに曖昧性がある場合にエラーを報告" tabindex="-1">同じ名前のインポートされたクラスに曖昧性がある場合にエラーを報告 <a class="header-anchor" href="#同じ名前のインポートされたクラスに曖昧性がある場合にエラーを報告" aria-label="Permalink to &quot;同じ名前のインポートされたクラスに曖昧性がある場合にエラーを報告&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-57750" target="_blank" rel="noreferrer">KT-57750</a></p><p><strong>Component</strong>: Core language</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Deprecation cycle</strong>:</p><ul><li>2.0.0: スターインポートでインポートされた複数のパッケージに存在するクラス名を解決する際にエラーを報告</li></ul></blockquote><h3 id="kotlinラムダをデフォルトで-invokedynamic-と-lambdametafactory-経由で生成" tabindex="-1">Kotlinラムダをデフォルトで <code>invokedynamic</code> と <code>LambdaMetafactory</code> 経由で生成 <a class="header-anchor" href="#kotlinラムダをデフォルトで-invokedynamic-と-lambdametafactory-経由で生成" aria-label="Permalink to &quot;Kotlinラムダをデフォルトで `invokedynamic` と `LambdaMetafactory` 経由で生成&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-45375" target="_blank" rel="noreferrer">KT-45375</a></p><p><strong>Component</strong>: Core language</p><p><strong>Incompatible change type</strong>: behavioral</p><p><strong>Deprecation cycle</strong>:</p><ul><li>2.0.0: 新しい動作を実装。ラムダはデフォルトで<code>invokedynamic</code>と<code>LambdaMetafactory</code>を使用して生成されます。</li></ul></blockquote><h3 id="式が必要な場合に単一ブランチの-if-条件を禁止" tabindex="-1">式が必要な場合に単一ブランチの <code>if</code> 条件を禁止 <a class="header-anchor" href="#式が必要な場合に単一ブランチの-if-条件を禁止" aria-label="Permalink to &quot;式が必要な場合に単一ブランチの `if` 条件を禁止&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-57871" target="_blank" rel="noreferrer">KT-57871</a></p><p><strong>Component</strong>: Core language</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Deprecation cycle</strong>:</p><ul><li>2.0.0: <code>if</code>条件が単一ブランチしか持たない場合にエラーを報告</li></ul></blockquote><h3 id="ジェネリック型のスタープロジェクションを渡すことによる自己上限の違反を禁止" tabindex="-1">ジェネリック型のスタープロジェクションを渡すことによる自己上限の違反を禁止 <a class="header-anchor" href="#ジェネリック型のスタープロジェクションを渡すことによる自己上限の違反を禁止" aria-label="Permalink to &quot;ジェネリック型のスタープロジェクションを渡すことによる自己上限の違反を禁止&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-61718" target="_blank" rel="noreferrer">KT-61718</a></p><p><strong>Component</strong>: Core language</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Deprecation cycle</strong>:</p><ul><li>2.0.0: ジェネリック型のスタープロジェクションを渡すことで自己上限が違反された場合にエラーを報告</li></ul></blockquote><h3 id="プライベートインライン関数の戻り値型の匿名型を近似" tabindex="-1">プライベートインライン関数の戻り値型の匿名型を近似 <a class="header-anchor" href="#プライベートインライン関数の戻り値型の匿名型を近似" aria-label="Permalink to &quot;プライベートインライン関数の戻り値型の匿名型を近似&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-54862" target="_blank" rel="noreferrer">KT-54862</a></p><p><strong>Component</strong>: Core language</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.9.0: 推論された戻り値型が匿名型を含むプライベートインライン関数に対して警告を報告</li><li>2.0.0: そのようなプライベートインライン関数の戻り値型をスーパータイプに近似</li></ul></blockquote><h3 id="ローカル関数型プロパティのinvoke規約よりもローカル拡張関数呼び出しを優先するようにオーバーロード解決の振る舞いを変更" tabindex="-1">ローカル関数型プロパティのinvoke規約よりもローカル拡張関数呼び出しを優先するようにオーバーロード解決の振る舞いを変更 <a class="header-anchor" href="#ローカル関数型プロパティのinvoke規約よりもローカル拡張関数呼び出しを優先するようにオーバーロード解決の振る舞いを変更" aria-label="Permalink to &quot;ローカル関数型プロパティのinvoke規約よりもローカル拡張関数呼び出しを優先するようにオーバーロード解決の振る舞いを変更&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-37592" target="_blank" rel="noreferrer">KT-37592</a></p><p><strong>Component</strong>: Core language</p><p><strong>Incompatible change type</strong>: behavioral</p><p><strong>Deprecation cycle</strong>:</p><ul><li>2.0.0: 新しいオーバーロード解決の動作。関数呼び出しがinvoke規約よりも一貫して優先されます。</li></ul></blockquote><h3 id="バイナリ依存関係からのスーパータイプにおける変更が原因で継承メンバーの競合が発生した場合にエラーを報告" tabindex="-1">バイナリ依存関係からのスーパータイプにおける変更が原因で継承メンバーの競合が発生した場合にエラーを報告 <a class="header-anchor" href="#バイナリ依存関係からのスーパータイプにおける変更が原因で継承メンバーの競合が発生した場合にエラーを報告" aria-label="Permalink to &quot;バイナリ依存関係からのスーパータイプにおける変更が原因で継承メンバーの競合が発生した場合にエラーを報告&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-51194" target="_blank" rel="noreferrer">KT-51194</a></p><p><strong>Component</strong>: Core language</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.7.0: バイナリ依存関係からのスーパータイプで継承メンバーの競合が発生した宣言に対して警告 <code>CONFLICTING_INHERITED_MEMBERS_WARNING</code> を報告</li><li>2.0.0: 警告をエラー <code>CONFLICTING_INHERITED_MEMBERS</code> に昇格</li></ul></blockquote><h3 id="不変型におけるパラメータの-unsafevariance-アノテーションを無視" tabindex="-1">不変型におけるパラメータの <code>@UnsafeVariance</code> アノテーションを無視 <a class="header-anchor" href="#不変型におけるパラメータの-unsafevariance-アノテーションを無視" aria-label="Permalink to &quot;不変型におけるパラメータの `@UnsafeVariance` アノテーションを無視&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-57609" target="_blank" rel="noreferrer">KT-57609</a></p><p><strong>Component</strong>: Core language</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Deprecation cycle</strong>:</p><ul><li>2.0.0: 新しい動作を実装。反変パラメータにおける型不一致に関するエラーを報告する際に、<code>@UnsafeVariance</code>アノテーションは無視されます。</li></ul></blockquote><h3 id="コンパニオンオブジェクトのメンバーへの呼び出し外参照の型を変更" tabindex="-1">コンパニオンオブジェクトのメンバーへの呼び出し外参照の型を変更 <a class="header-anchor" href="#コンパニオンオブジェクトのメンバーへの呼び出し外参照の型を変更" aria-label="Permalink to &quot;コンパニオンオブジェクトのメンバーへの呼び出し外参照の型を変更&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-54316" target="_blank" rel="noreferrer">KT-54316</a></p><p><strong>Component</strong>: Core language</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.8.20: コンパニオンオブジェクト関数参照の型が非束縛参照として推論された場合に警告を報告</li><li>2.0.0: すべての使用コンテキストでコンパニオンオブジェクト関数参照が束縛参照として推論されるように動作を変更</li></ul></blockquote><h3 id="プライベートインライン関数からの匿名型の露出を禁止" tabindex="-1">プライベートインライン関数からの匿名型の露出を禁止 <a class="header-anchor" href="#プライベートインライン関数からの匿名型の露出を禁止" aria-label="Permalink to &quot;プライベートインライン関数からの匿名型の露出を禁止&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-33917" target="_blank" rel="noreferrer">KT-33917</a></p><p><strong>Component</strong>: Core language</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.3.0: プライベートインライン関数から返される匿名オブジェクトの自身のメンバーへの呼び出しに対して警告を報告</li><li>2.0.0: そのようなプライベートインライン関数の戻り値型をスーパータイプに近似し、匿名オブジェクトメンバーへの呼び出しを解決しない</li></ul></blockquote><h3 id="whileループのbreak後の不健全なスマートキャストに対してエラーを報告" tabindex="-1">whileループのbreak後の不健全なスマートキャストに対してエラーを報告 <a class="header-anchor" href="#whileループのbreak後の不健全なスマートキャストに対してエラーを報告" aria-label="Permalink to &quot;whileループのbreak後の不健全なスマートキャストに対してエラーを報告&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-22379" target="_blank" rel="noreferrer">KT-22379</a></p><p><strong>Component</strong>: Core language</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Deprecation cycle</strong>:</p><ul><li>2.0.0: 新しい動作を実装。以前の動作は言語バージョン1.9に切り替えることで復元できます。</li></ul></blockquote><h3 id="交差型の変数がその交差型のサブタイプではない値に割り当てられた場合にエラーを報告" tabindex="-1">交差型の変数がその交差型のサブタイプではない値に割り当てられた場合にエラーを報告 <a class="header-anchor" href="#交差型の変数がその交差型のサブタイプではない値に割り当てられた場合にエラーを報告" aria-label="Permalink to &quot;交差型の変数がその交差型のサブタイプではない値に割り当てられた場合にエラーを報告&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-53752" target="_blank" rel="noreferrer">KT-53752</a></p><p><strong>Component</strong>: Core language</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Deprecation cycle</strong>:</p><ul><li>2.0.0: 交差型を持つ変数がその交差型のサブタイプではない値に割り当てられた場合にエラーを報告</li></ul></blockquote><h3 id="samコンストラクタで構築されたインターフェースがオプトインを必要とするメソッドを含む場合にオプトインを要求" tabindex="-1">SAMコンストラクタで構築されたインターフェースがオプトインを必要とするメソッドを含む場合にオプトインを要求 <a class="header-anchor" href="#samコンストラクタで構築されたインターフェースがオプトインを必要とするメソッドを含む場合にオプトインを要求" aria-label="Permalink to &quot;SAMコンストラクタで構築されたインターフェースがオプトインを必要とするメソッドを含む場合にオプトインを要求&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-52628" target="_blank" rel="noreferrer">KT-52628</a></p><p><strong>Component</strong>: Core language</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.7.20: SAMコンストラクタを介した <code>OptIn</code> の使用に対して警告を報告</li><li>2.0.0: SAMコンストラクタを介した <code>OptIn</code> の使用に対して警告をエラーに昇格（または<code>OptIn</code>マーカーの重要度が警告の場合は警告を報告し続ける）</li></ul></blockquote><h3 id="型エイリアスコンストラクタにおける上限違反を禁止" tabindex="-1">型エイリアスコンストラクタにおける上限違反を禁止 <a class="header-anchor" href="#型エイリアスコンストラクタにおける上限違反を禁止" aria-label="Permalink to &quot;型エイリアスコンストラクタにおける上限違反を禁止&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-54066" target="_blank" rel="noreferrer">KT-54066</a></p><p><strong>Component</strong>: Core language</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.8.0: 型エイリアスコンストラクタで上限が違反されるケースに対して警告を導入</li><li>2.0.0: K2コンパイラで警告をエラーに昇格</li></ul></blockquote><h3 id="分解宣言変数の実型を明示的な型が指定された場合に一貫させる" tabindex="-1">分解宣言変数の実型を明示的な型が指定された場合に一貫させる <a class="header-anchor" href="#分解宣言変数の実型を明示的な型が指定された場合に一貫させる" aria-label="Permalink to &quot;分解宣言変数の実型を明示的な型が指定された場合に一貫させる&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-57011" target="_blank" rel="noreferrer">KT-57011</a></p><p><strong>Component</strong>: Core language</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Deprecation cycle</strong>:</p><ul><li>2.0.0: 新しい動作を実装。分解宣言変数の実型は、明示的な型が指定された場合に一貫するようになりました。</li></ul></blockquote><h3 id="デフォルト値を持つパラメータ型がオプトインを必要とするコンストラクタを呼び出す場合にオプトインを要求" tabindex="-1">デフォルト値を持つパラメータ型がオプトインを必要とするコンストラクタを呼び出す場合にオプトインを要求 <a class="header-anchor" href="#デフォルト値を持つパラメータ型がオプトインを必要とするコンストラクタを呼び出す場合にオプトインを要求" aria-label="Permalink to &quot;デフォルト値を持つパラメータ型がオプトインを必要とするコンストラクタを呼び出す場合にオプトインを要求&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-55111" target="_blank" rel="noreferrer">KT-55111</a></p><p><strong>Component</strong>: Core language</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.8.20: オプトインを必要とするパラメータ型を持つコンストラクタ呼び出しに対して警告を報告</li><li>2.0.0: 警告をエラーに昇格（または<code>OptIn</code>マーカーの重要度が警告の場合は警告を報告し続ける）</li></ul></blockquote><h3 id="同じスコープレベルで同じ名前のプロパティとenumエントリの間に曖昧性がある場合にエラーを報告" tabindex="-1">同じスコープレベルで同じ名前のプロパティとenumエントリの間に曖昧性がある場合にエラーを報告 <a class="header-anchor" href="#同じスコープレベルで同じ名前のプロパティとenumエントリの間に曖昧性がある場合にエラーを報告" aria-label="Permalink to &quot;同じスコープレベルで同じ名前のプロパティとenumエントリの間に曖昧性がある場合にエラーを報告&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-52802" target="_blank" rel="noreferrer">KT-52802</a></p><p><strong>Component</strong>: Core language</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.7.20: コンパイラが同じスコープレベルでenumエントリの代わりにプロパティに解決する場合に警告を報告</li><li>2.0.0: K2コンパイラで、コンパイラが同じスコープレベルで同じ名前のプロパティとenumエントリの両方を検出した場合に曖昧性を報告（古いコンパイラでは警告のまま）</li></ul></blockquote><h3 id="enumエントリよりもコンパニオンプロパティを優先するように限定子解決の振る舞いを変更" tabindex="-1">enumエントリよりもコンパニオンプロパティを優先するように限定子解決の振る舞いを変更 <a class="header-anchor" href="#enumエントリよりもコンパニオンプロパティを優先するように限定子解決の振る舞いを変更" aria-label="Permalink to &quot;enumエントリよりもコンパニオンプロパティを優先するように限定子解決の振る舞いを変更&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-47310" target="_blank" rel="noreferrer">KT-47310</a></p><p><strong>Component</strong>: Core language</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Deprecation cycle</strong>:</p><ul><li>2.0.0: 新しい解決動作を実装。コンパニオンプロパティがenumエントリよりも優先されます。</li></ul></blockquote><h3 id="invoke呼び出しレシーバー型とinvoke関数型を脱糖形式で書かれたかのように解決" tabindex="-1">invoke呼び出しレシーバー型とinvoke関数型を脱糖形式で書かれたかのように解決 <a class="header-anchor" href="#invoke呼び出しレシーバー型とinvoke関数型を脱糖形式で書かれたかのように解決" aria-label="Permalink to &quot;invoke呼び出しレシーバー型とinvoke関数型を脱糖形式で書かれたかのように解決&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-58260" target="_blank" rel="noreferrer">KT-58260</a></p><p><strong>Component</strong>: Core language</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Deprecation cycle</strong>:</p><ul><li>2.0.0: invoke呼び出しレシーバー型とinvoke関数型を、それらが脱糖形式で書かれたかのように独立して解決</li></ul></blockquote><h3 id="非プライベートインライン関数を介してプライベートクラスメンバーを公開することを禁止" tabindex="-1">非プライベートインライン関数を介してプライベートクラスメンバーを公開することを禁止 <a class="header-anchor" href="#非プライベートインライン関数を介してプライベートクラスメンバーを公開することを禁止" aria-label="Permalink to &quot;非プライベートインライン関数を介してプライベートクラスメンバーを公開することを禁止&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-55179" target="_blank" rel="noreferrer">KT-55179</a></p><p><strong>Component</strong>: Core language</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.9.0: 内部インライン関数からプライベートクラスのコンパニオンオブジェクトメンバーを呼び出す際に、<code>PRIVATE_CLASS_MEMBER_FROM_INLINE_WARNING</code> 警告を報告</li><li>2.0.0: この警告を <code>PRIVATE_CLASS_MEMBER_FROM_INLINE</code> エラーに昇格</li></ul></blockquote><h3 id="プロジェクトされたジェネリック型における確実に非ヌル型のヌル許容性を修正" tabindex="-1">プロジェクトされたジェネリック型における確実に非ヌル型のヌル許容性を修正 <a class="header-anchor" href="#プロジェクトされたジェネリック型における確実に非ヌル型のヌル許容性を修正" aria-label="Permalink to &quot;プロジェクトされたジェネリック型における確実に非ヌル型のヌル許容性を修正&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-54663" target="_blank" rel="noreferrer">KT-54663</a></p><p><strong>Component</strong>: Core language</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Deprecation cycle</strong>:</p><ul><li>2.0.0: 新しい動作を実装。プロジェクトされた型は、すべてのインプレースの非ヌル型を考慮するようになりました。</li></ul></blockquote><h3 id="前置インクリメントの推論型を-inc-演算子の戻り値型ではなくゲッターの戻り値型に合わせるように変更" tabindex="-1">前置インクリメントの推論型を <code>inc()</code> 演算子の戻り値型ではなくゲッターの戻り値型に合わせるように変更 <a class="header-anchor" href="#前置インクリメントの推論型を-inc-演算子の戻り値型ではなくゲッターの戻り値型に合わせるように変更" aria-label="Permalink to &quot;前置インクリメントの推論型を `inc()` 演算子の戻り値型ではなくゲッターの戻り値型に合わせるように変更&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-57178" target="_blank" rel="noreferrer">KT-57178</a></p><p><strong>Component</strong>: Core language</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Deprecation cycle</strong>:</p><ul><li>2.0.0: 新しい動作を実装。前置インクリメントの推論型は、<code>inc()</code>演算子の戻り値型ではなくゲッターの戻り値型に合わせるように変更されます。</li></ul></blockquote><h3 id="スーパークラスで宣言されたジェネリックな内部クラスから内部クラスを継承する際にバウンドチェックを強制" tabindex="-1">スーパークラスで宣言されたジェネリックな内部クラスから内部クラスを継承する際にバウンドチェックを強制 <a class="header-anchor" href="#スーパークラスで宣言されたジェネリックな内部クラスから内部クラスを継承する際にバウンドチェックを強制" aria-label="Permalink to &quot;スーパークラスで宣言されたジェネリックな内部クラスから内部クラスを継承する際にバウンドチェックを強制&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-61749" target="_blank" rel="noreferrer">KT-61749</a></p><p><strong>Component</strong>: Core language</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Deprecation cycle</strong>:</p><ul><li>2.0.0: ジェネリックなスーパータイプの型パラメータの上限が違反された場合にエラーを報告</li></ul></blockquote><h3 id="期待される型が関数型パラメータを持つ関数型である場合に、sam型を持つcallable参照の割り当てを禁止" tabindex="-1">期待される型が関数型パラメータを持つ関数型である場合に、SAM型を持つcallable参照の割り当てを禁止 <a class="header-anchor" href="#期待される型が関数型パラメータを持つ関数型である場合に、sam型を持つcallable参照の割り当てを禁止" aria-label="Permalink to &quot;期待される型が関数型パラメータを持つ関数型である場合に、SAM型を持つcallable参照の割り当てを禁止&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-64342" target="_blank" rel="noreferrer">KT-64342</a></p><p><strong>Component</strong>: Core language</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Deprecation cycle</strong>:</p><ul><li>2.0.0: 期待される型が関数型パラメータを持つ関数型である場合に、SAM型を持つcallable参照に対してコンパイルエラーを報告</li></ul></blockquote><h3 id="コンパニオンオブジェクト上のアノテーション解決のためにコンパニオンオブジェクトスコープを考慮" tabindex="-1">コンパニオンオブジェクト上のアノテーション解決のためにコンパニオンオブジェクトスコープを考慮 <a class="header-anchor" href="#コンパニオンオブジェクト上のアノテーション解決のためにコンパニオンオブジェクトスコープを考慮" aria-label="Permalink to &quot;コンパニオンオブジェクト上のアノテーション解決のためにコンパニオンオブジェクトスコープを考慮&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-64299" target="_blank" rel="noreferrer">KT-64299</a></p><p><strong>Component</strong>: Core language</p><p><strong>Incompatible change type</strong>: behavioral</p><p><strong>Deprecation cycle</strong>:</p><ul><li>2.0.0: 新しい動作を実装。コンパニオンオブジェクト上のアノテーション解決中にコンパニオンオブジェクトスコープが無視されなくなりました。</li></ul></blockquote><h3 id="セーフコールと規約演算子の組み合わせの評価セマンティクスを変更" tabindex="-1">セーフコールと規約演算子の組み合わせの評価セマンティクスを変更 <a class="header-anchor" href="#セーフコールと規約演算子の組み合わせの評価セマンティクスを変更" aria-label="Permalink to &quot;セーフコールと規約演算子の組み合わせの評価セマンティクスを変更&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-41034" target="_blank" rel="noreferrer">KT-41034</a></p><p><strong>Component</strong>: Core language</p><p><strong>Incompatible change type</strong>: behavioral</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.4.0: 各不正な呼び出しに対して警告を報告</li><li>2.0.0: 新しい解決動作を実装</li></ul></blockquote><h3 id="バッキングフィールドとカスタムセッターを持つプロパティが即座に初期化されることを要求" tabindex="-1">バッキングフィールドとカスタムセッターを持つプロパティが即座に初期化されることを要求 <a class="header-anchor" href="#バッキングフィールドとカスタムセッターを持つプロパティが即座に初期化されることを要求" aria-label="Permalink to &quot;バッキングフィールドとカスタムセッターを持つプロパティが即座に初期化されることを要求&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-58589" target="_blank" rel="noreferrer">KT-58589</a></p><p><strong>Component</strong>: Core language</p><p><strong>Incompatible change type</strong>: behavioral</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.9.20: プライマリコンストラクタがない場合に <code>MUST_BE_INITIALIZED</code> 警告を導入</li><li>2.0.0: 警告をエラーに昇格</li></ul></blockquote><h3 id="invoke演算子規約呼び出しにおける任意の式に対するunit変換を禁止" tabindex="-1">invoke演算子規約呼び出しにおける任意の式に対するUnit変換を禁止 <a class="header-anchor" href="#invoke演算子規約呼び出しにおける任意の式に対するunit変換を禁止" aria-label="Permalink to &quot;invoke演算子規約呼び出しにおける任意の式に対するUnit変換を禁止&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-61182" target="_blank" rel="noreferrer">KT-61182</a></p><p><strong>Component</strong>: Core language</p><p><strong>Incompatible change type</strong>: behavioral</p><p><strong>Deprecation cycle</strong>:</p><ul><li>2.0.0: 変数およびinvoke解決における任意の式にUnit変換が適用された場合にエラーを報告。影響を受ける式で以前の動作を維持するには、<code>-XXLanguage:+UnitConversionsOnArbitraryExpressions</code> コンパイラオプションを使用します。</li></ul></blockquote><h3 id="フィールドがセーフコールでアクセスされる場合に、ヌル許容な値を非ヌルなjavaフィールドに割り当てることを禁止" tabindex="-1">フィールドがセーフコールでアクセスされる場合に、ヌル許容な値を非ヌルなJavaフィールドに割り当てることを禁止 <a class="header-anchor" href="#フィールドがセーフコールでアクセスされる場合に、ヌル許容な値を非ヌルなjavaフィールドに割り当てることを禁止" aria-label="Permalink to &quot;フィールドがセーフコールでアクセスされる場合に、ヌル許容な値を非ヌルなJavaフィールドに割り当てることを禁止&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-62998" target="_blank" rel="noreferrer">KT-62998</a></p><p><strong>Component</strong>: Core language</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Deprecation cycle</strong>:</p><ul><li>2.0.0: ヌル許容な値が非ヌルなJavaフィールドに割り当てられた場合にエラーを報告</li></ul></blockquote><h3 id="raw型パラメータを含むjavaメソッドをオーバーライドする際にスタープロジェクション型を要求" tabindex="-1">raw型パラメータを含むJavaメソッドをオーバーライドする際にスタープロジェクション型を要求 <a class="header-anchor" href="#raw型パラメータを含むjavaメソッドをオーバーライドする際にスタープロジェクション型を要求" aria-label="Permalink to &quot;raw型パラメータを含むJavaメソッドをオーバーライドする際にスタープロジェクション型を要求&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-57600" target="_blank" rel="noreferrer">KT-57600</a></p><p><strong>Component</strong>: Core language</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Deprecation cycle</strong>:</p><ul><li>2.0.0: 新しい動作を実装。raw型パラメータに対するオーバーライドは禁止されます。</li></ul></blockquote><h3 id="vがコンパニオンを持つ場合の-v-foo-参照解決を変更" tabindex="-1">Vがコンパニオンを持つ場合の <code>(V)::foo</code> 参照解決を変更 <a class="header-anchor" href="#vがコンパニオンを持つ場合の-v-foo-参照解決を変更" aria-label="Permalink to &quot;Vがコンパニオンを持つ場合の `(V)::foo` 参照解決を変更&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-47313" target="_blank" rel="noreferrer">KT-47313</a></p><p><strong>Component</strong>: Core language</p><p><strong>Incompatible change type</strong>: behavioral</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.6.0: 現在コンパニオンオブジェクトインスタンスに束縛されているcallable参照に対して警告を報告</li><li>2.0.0: 新しい動作を実装。型を括弧で囲むことが、もはやその型のコンパニオンオブジェクトインスタンスへの参照とはなりません。</li></ul></blockquote><h3 id="実質的に公開なインライン関数における暗黙的な非公開apiアクセスを禁止" tabindex="-1">実質的に公開なインライン関数における暗黙的な非公開APIアクセスを禁止 <a class="header-anchor" href="#実質的に公開なインライン関数における暗黙的な非公開apiアクセスを禁止" aria-label="Permalink to &quot;実質的に公開なインライン関数における暗黙的な非公開APIアクセスを禁止&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-54997" target="_blank" rel="noreferrer">KT-54997</a></p><p><strong>Component</strong>: Core language</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.8.20: 公開インライン関数で暗黙的な非公開APIにアクセスされた場合にコンパイル警告を報告</li><li>2.0.0: 警告をエラーに昇格</li></ul></blockquote><h3 id="プロパティゲッターにおけるユースサイトの-get-アノテーションを禁止" tabindex="-1">プロパティゲッターにおけるユースサイトの <code>get</code> アノテーションを禁止 <a class="header-anchor" href="#プロパティゲッターにおけるユースサイトの-get-アノテーションを禁止" aria-label="Permalink to &quot;プロパティゲッターにおけるユースサイトの `get` アノテーションを禁止&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-57422" target="_blank" rel="noreferrer">KT-57422</a></p><p><strong>Component</strong>: Core language</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.9.0: ゲッターにおけるユースサイトの <code>get</code> アノテーションに対して警告（プログレッシブモードではエラー）を報告</li><li>2.0.0: 警告を <code>INAPPLICABLE_TARGET_ON_PROPERTY</code> エラーに昇格。警告に戻すには <code>-XXLanguage:-ProhibitUseSiteGetTargetAnnotations</code> を使用します。</li></ul></blockquote><h3 id="ビルダー推論ラムダ関数における型パラメータの上限への暗黙的な推論を防止" tabindex="-1">ビルダー推論ラムダ関数における型パラメータの上限への暗黙的な推論を防止 <a class="header-anchor" href="#ビルダー推論ラムダ関数における型パラメータの上限への暗黙的な推論を防止" aria-label="Permalink to &quot;ビルダー推論ラムダ関数における型パラメータの上限への暗黙的な推論を防止&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-47986" target="_blank" rel="noreferrer">KT-47986</a></p><p><strong>Component</strong>: Core language</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.7.20: 型引数の型パラメータが宣言された上限に推論できない場合に警告（またはプログレッシブモードではエラー）を報告</li><li>2.0.0: 警告をエラーに昇格</li></ul></blockquote><h3 id="公開シグネチャにおけるローカル型の近似時にヌル許容性を保持" tabindex="-1">公開シグネチャにおけるローカル型の近似時にヌル許容性を保持 <a class="header-anchor" href="#公開シグネチャにおけるローカル型の近似時にヌル許容性を保持" aria-label="Permalink to &quot;公開シグネチャにおけるローカル型の近似時にヌル許容性を保持&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-53982" target="_blank" rel="noreferrer">KT-53982</a></p><p><strong>Component</strong>: Core language</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.8.0: 柔軟な型は柔軟なスーパータイプによって近似されます。宣言がヌル許容であるべき非ヌル許容型として推論され、<code>NullPointerException</code>を避けるために型を明示的に指定するように促す警告を報告</li><li>2.0.0: ヌル許容型はヌル許容スーパータイプによって近似されます。</li></ul></blockquote><h3 id="スマートキャスト目的での-false-および-false-に対する特別な処理を削除" tabindex="-1">スマートキャスト目的での <code>false &amp;&amp; ...</code> および <code>false || ...</code> に対する特別な処理を削除 <a class="header-anchor" href="#スマートキャスト目的での-false-および-false-に対する特別な処理を削除" aria-label="Permalink to &quot;スマートキャスト目的での `false &amp;&amp; ...` および `false || ...` に対する特別な処理を削除&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-65776" target="_blank" rel="noreferrer">KT-65776</a></p><p><strong>Component</strong>: Core language</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Deprecation cycle</strong>:</p><ul><li>2.0.0: 新しい動作を実装。<code>false &amp;&amp; ...</code> および <code>false || ...</code> に対する特別な処理は行われません。</li></ul></blockquote><h3 id="enumにおけるインラインopen関数を禁止" tabindex="-1">enumにおけるインラインopen関数を禁止 <a class="header-anchor" href="#enumにおけるインラインopen関数を禁止" aria-label="Permalink to &quot;enumにおけるインラインopen関数を禁止&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-34372" target="_blank" rel="noreferrer">KT-34372</a></p><p><strong>Component</strong>: Core language</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.8.0: enumにおけるインラインopen関数に対して警告を報告</li><li>2.0.0: 警告をエラーに昇格</li></ul></blockquote><h2 id="ツール" tabindex="-1">ツール <a class="header-anchor" href="#ツール" aria-label="Permalink to &quot;ツール&quot;">​</a></h2><h3 id="gradleにおける可視性の変更" tabindex="-1">Gradleにおける可視性の変更 <a class="header-anchor" href="#gradleにおける可視性の変更" aria-label="Permalink to &quot;Gradleにおける可視性の変更&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-64653" target="_blank" rel="noreferrer">KT-64653</a></p><p><strong>Component</strong>: Gradle</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Short summary</strong>: 以前は、特定のDSLコンテキストを意図したKotlin DSL関数やプロパティが、意図せず他のDSLコンテキストに漏洩していました。私たちは <code>@KotlinGradlePluginDsl</code> アノテーションを追加し、Kotlin GradleプラグインのDSL関数やプロパティが、利用されるべきではないレベルに露出するのを防ぎます。以下のレベルは相互に分離されています。</p><ul><li>Kotlin拡張</li><li>Kotlinターゲット</li><li>Kotlinコンパイル</li><li>Kotlinコンパイルタスク</li></ul><p><strong>Deprecation cycle</strong>:</p><ul><li>2.0.0: ほとんどの一般的なケースでは、ビルドスクリプトが誤って設定されている場合に、コンパイラは修正方法の提案を含む警告を報告します。それ以外の場合は、コンパイラはエラーを報告します。</li></ul></blockquote><h3 id="kotlinoptions-dslの廃止" tabindex="-1"><code>kotlinOptions</code> DSLの廃止 <a class="header-anchor" href="#kotlinoptions-dslの廃止" aria-label="Permalink to &quot;`kotlinOptions` DSLの廃止&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-63419" target="_blank" rel="noreferrer">KT-63419</a></p><p><strong>Component</strong>: Gradle</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Short summary</strong>: <code>kotlinOptions</code> DSLおよび関連する <code>KotlinCompile&lt;KotlinOptions&gt;</code> タスクインターフェースを介してコンパイラオプションを設定する機能が非推奨になりました。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>2.0.0: 警告を報告</li></ul></blockquote><h3 id="kotlincompilation-dslにおける-compileroptions-の廃止" tabindex="-1"><code>KotlinCompilation</code> DSLにおける <code>compilerOptions</code> の廃止 <a class="header-anchor" href="#kotlincompilation-dslにおける-compileroptions-の廃止" aria-label="Permalink to &quot;`KotlinCompilation` DSLにおける `compilerOptions` の廃止&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-65568" target="_blank" rel="noreferrer">KT-65568</a></p><p><strong>Component</strong>: Gradle</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Short summary</strong>: <code>KotlinCompilation</code> DSLにおける <code>compilerOptions</code> プロパティを設定する機能が非推奨になりました。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>2.0.0: 警告を報告</li></ul></blockquote><h3 id="cinteropprocessの古い取り扱い方法の削除" tabindex="-1">CInteropProcessの古い取り扱い方法の削除 <a class="header-anchor" href="#cinteropprocessの古い取り扱い方法の削除" aria-label="Permalink to &quot;CInteropProcessの古い取り扱い方法の削除&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-62795" target="_blank" rel="noreferrer">KT-62795</a></p><p><strong>Component</strong>: Gradle</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Short summary</strong>: <code>CInteropProcess</code> タスクと <code>CInteropSettings</code> クラスは、<code>defFile</code> と <code>defFileProperty</code> の代わりに <code>definitionFile</code> プロパティを使用するようになりました。</p><p>これにより、<code>defFile</code> が動的に生成される場合に、<code>CInteropProcess</code> タスクと <code>defFile</code> を生成するタスクとの間に余分な <code>dependsOn</code> 関係を追加する必要がなくなります。</p><p>Kotlin/Nativeプロジェクトでは、Gradleは、接続されたタスクがビルドプロセスの後半で実行された後、<code>definitionFile</code> プロパティの存在を遅延検証するようになりました。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>2.0.0: <code>defFile</code> および <code>defFileProperty</code> パラメータが非推奨になりました。</li></ul></blockquote><h3 id="kotlin-usek2-gradleプロパティの削除" tabindex="-1"><code>kotlin.useK2</code> Gradleプロパティの削除 <a class="header-anchor" href="#kotlin-usek2-gradleプロパティの削除" aria-label="Permalink to &quot;`kotlin.useK2` Gradleプロパティの削除&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-64379" target="_blank" rel="noreferrer">KT-64379</a></p><p><strong>Component</strong>: Gradle</p><p><strong>Incompatible change type</strong>: behavioral</p><p><strong>Short summary</strong>: <code>kotlin.useK2</code> Gradleプロパティが削除されました。Kotlin 1.9.*ではK2コンパイラを有効にするために使用できましたが、Kotlin 2.0.0以降ではK2コンパイラがデフォルトで有効になっているため、このプロパティは効果がなく、以前のコンパイラに戻すために使用することはできません。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.8.20: <code>kotlin.useK2</code> Gradleプロパティは非推奨になりました。</li><li>2.0.0: <code>kotlin.useK2</code> Gradleプロパティは削除されました。</li></ul></blockquote><h3 id="廃止されたプラットフォームプラグインidの削除" tabindex="-1">廃止されたプラットフォームプラグインIDの削除 <a class="header-anchor" href="#廃止されたプラットフォームプラグインidの削除" aria-label="Permalink to &quot;廃止されたプラットフォームプラグインIDの削除&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-65187" target="_blank" rel="noreferrer">KT-65187</a></p><p><strong>Component</strong>: Gradle</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Short summary</strong>: 以下のプラットフォームプラグインIDのサポートが削除されました。</p><ul><li><code>kotlin-platform-android</code></li><li><code>kotlin-platform-jvm</code></li><li><code>kotlin-platform-js</code></li><li><code>org.jetbrains.kotlin.platform.android</code></li><li><code>org.jetbrains.kotlin.platform.jvm</code></li><li><code>org.jetbrains.kotlin.platform.js</code></li></ul><p><strong>Deprecation cycle</strong>:</p><ul><li>1.3: プラットフォームプラグインIDは非推奨になりました。</li><li>2.0.0: プラットフォームプラグインIDはもはやサポートされません。</li></ul></blockquote><h3 id="outputfile-javascriptコンパイラオプションの削除" tabindex="-1"><code>outputFile</code> JavaScriptコンパイラオプションの削除 <a class="header-anchor" href="#outputfile-javascriptコンパイラオプションの削除" aria-label="Permalink to &quot;`outputFile` JavaScriptコンパイラオプションの削除&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-61116" target="_blank" rel="noreferrer">KT-61116</a></p><p><strong>Component</strong>: Gradle</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Short summary</strong>: <code>outputFile</code> JavaScriptコンパイラオプションが削除されました。代わりに、<code>Kotlin2JsCompile</code> タスクの <code>destinationDirectory</code> プロパティを使用して、コンパイルされたJavaScript出力ファイルが書き込まれるディレクトリを指定できます。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.9.25: <code>outputFile</code> コンパイラオプションは非推奨になりました。</li><li>2.0.0: <code>outputFile</code> コンパイラオプションは削除されました。</li></ul></blockquote>',106)]))}const b=o(n,[["render",l]]);export{h as __pageData,b as default};
