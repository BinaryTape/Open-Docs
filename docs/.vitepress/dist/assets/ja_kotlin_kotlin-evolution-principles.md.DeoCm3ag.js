import{_ as a,c as t,o as l,ag as i}from"./chunks/framework.Bksy39di.js";const u=JSON.parse('{"title":"Kotlinの進化の原則","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/kotlin-evolution-principles.md","filePath":"ja/kotlin/kotlin-evolution-principles.md","lastUpdated":1754307826000}'),o={name:"ja/kotlin/kotlin-evolution-principles.md"};function n(r,e,p,s,h,c){return l(),t("div",null,e[0]||(e[0]=[i('<h1 id="kotlinの進化の原則" tabindex="-1">Kotlinの進化の原則 <a class="header-anchor" href="#kotlinの進化の原則" aria-label="Permalink to &quot;Kotlinの進化の原則&quot;">​</a></h1><h2 id="実用的な進化の原則" tabindex="-1">実用的な進化の原則 <a class="header-anchor" href="#実用的な進化の原則" aria-label="Permalink to &quot;実用的な進化の原則&quot;">​</a></h2><blockquote><p><em>言語の設計は石に刻まれる</em></p><p><em>しかし、この石は適度に柔らかく</em></p><p><em>少しの努力で後から形を変えることができる</em></p><p><em>Kotlin デザインチーム</em></p></blockquote><p>Kotlinはプログラマーにとって実用的なツールとして設計されています。言語の進化に関しては、その実用的な性質が以下の原則によって捉えられています。</p><ul><li>言語を常に最新に保つ。</li><li>ユーザーとの継続的なフィードバックループを維持する。</li><li>ユーザーにとって新しいバージョンへの更新を簡単かつ快適にする。</li></ul><p>これらはKotlinがどのように前進しているかを理解する上で重要であるため、これらの原則を詳しく見ていきましょう。</p><p><strong>言語を最新に保つ</strong>。システムは時間とともにレガシーを蓄積することを認識しています。かつて最先端だった技術が、今日ではどうしようもなく時代遅れになることがあります。私たちは、ユーザーのニーズに関連し、期待に応え続けるために、言語を進化させる必要があります。これには、新しい機能の追加だけでなく、本番環境での使用が推奨されなくなり、レガシーとなった古い機能を段階的に廃止することも含まれます。</p><p><strong>快適なアップデート</strong>。言語からの削除のような非互換な変更は、適切な注意を払わずに行われると、あるバージョンから次のバージョンへの移行が困難になる可能性があります。私たちは、そのような変更を常に十分前もって発表し、非推奨としてマークし、<strong>変更が発生する前に</strong>自動移行ツールを提供します。言語が変更される頃には、世界のほとんどのコードがすでに更新され、新しいバージョンへの移行に問題がないようにしたいと考えています。</p><p><strong>フィードバックループ</strong>。非推奨サイクルを経験するにはかなりの努力が必要なため、将来行う非互換な変更の数を最小限に抑えたいと考えています。私たちは最善の判断を使用することに加えて、現実世界で試すことが設計を検証する最良の方法だと信じています。物事を石に刻む前に、実地で十分にテストしたいのです。このため、私たちは設計の初期バージョンを言語のプロダクションバージョンで利用可能にするあらゆる機会を利用していますが、それは<a href="/ja/kotlin/components-stability">Experimental、Alpha、またはBeta</a>といった<strong>プレ安定版</strong>のステータスのいずれかで行われます。そのような機能は安定しておらず、いつでも変更される可能性があり、それらの使用をオプトインするユーザーは、将来の移行問題に対処する準備ができていることを明示的に示すためにそうします。これらのユーザーは、設計を繰り返し改善し、それを堅固なものにするために私たちが収集する貴重なフィードバックを提供してくれます。</p><h2 id="非互換な変更" tabindex="-1">非互換な変更 <a class="header-anchor" href="#非互換な変更" aria-label="Permalink to &quot;非互換な変更&quot;">​</a></h2><p>あるバージョンから別のバージョンに更新したときに、以前は動作していたコードが動作しなくなった場合、それは言語における<strong>非互換な変更</strong>（「破壊的変更」と呼ばれることもあります）です。 「動作しなくなった」が正確に何を意味するかについては、場合によっては議論の余地がありますが、以下のものは間違いなく含まれます。</p><ul><li>コンパイルおよび実行が正常に完了していたコードが、エラー（コンパイル時またはリンク時）で拒否されるようになった場合。これには、言語構造の削除や新しい制限の追加が含まれます。</li><li>通常に実行されていたコードが、例外をスローするようになった場合。</li></ul><p>「グレーゾーン」に属する、より不明瞭なケースには、コーナーケースの異なる処理、以前とは異なる型の例外のスロー、リフレクションを通じてのみ観測可能な動作の変更、文書化されていないまたは未定義の動作の変更、バイナリ成果物の名前変更などがあります。 時には、そのような変更が極めて重要であり、移行体験に劇的に影響することもありますが、時には些細なこともあります。</p><p>明らかに非互換な変更ではないものの例をいくつか挙げます。</p><ul><li>新しい警告の追加。</li><li>新しい言語構造の有効化、または既存の構造の制限の緩和。</li><li>private/internal APIやその他の実装の詳細の変更。</li></ul><p>「言語を最新に保つ」および「快適なアップデート」の原則は、非互換な変更が時として必要であるが、慎重に導入されるべきであることを示唆しています。私たちの目標は、ユーザーがコードを快適に移行できるように、今後の変更を事前に十分に認識させることです。</p><p>理想的には、すべての非互換な変更は、問題のあるコードで報告されるコンパイル時警告（通常、「<strong>非推奨警告</strong>」と呼ばれます）を通じて発表され、自動移行支援を伴うべきです。 したがって、理想的な移行ワークフローは次のとおりです。</p><ul><li>バージョンAにアップデートする（変更が発表されるバージョン） <ul><li>今後の変更に関する警告を確認する</li><li>ツールを使用してコードを移行する</li></ul></li><li>バージョンBにアップデートする（変更が発生するバージョン） <ul><li>一切問題が発生しないことを確認する</li></ul></li></ul><p>実際には、コンパイル時に正確に検出できない変更もあるため、警告を報告できない場合がありますが、少なくともユーザーには、バージョンAのリリースノートを通じて、バージョンBで変更があることが通知されます。</p><h3 id="コンパイラのバグへの対処" tabindex="-1">コンパイラのバグへの対処 <a class="header-anchor" href="#コンパイラのバグへの対処" aria-label="Permalink to &quot;コンパイラのバグへの対処&quot;">​</a></h3><p>コンパイラは複雑なソフトウェアであり、開発者の最善の努力にもかかわらず、バグが存在します。 コンパイラ自体が失敗したり、誤ったエラーを報告したり、明らかに失敗するコードを生成したりするバグは、煩わしく、しばしば恥ずかしいものではありますが、修正が簡単です。なぜなら、修正が非互換な変更を構成しないからです。 他のバグは、コンパイラが失敗しない間違ったコードを生成する可能性があります。たとえば、ソース内の一部のエラーを見逃したり、単に間違った命令を生成したりする場合です。 そのようなバグの修正は、技術的には非互換な変更（以前は正常にコンパイルできたコードが、今はコンパイルできなくなるため）ですが、不適切なコードパターンがユーザーコード全体に広がるのを防ぐために、可能な限り早く修正する傾向にあります。 私たちの意見では、これは「快適なアップデート」の原則を支持します。なぜなら、問題に遭遇する可能性のあるユーザーが少なくなるからです。 もちろん、これはリリースバージョンに登場してすぐに発見されたバグにのみ適用されます。</p><h2 id="意思決定" tabindex="-1">意思決定 <a class="header-anchor" href="#意思決定" aria-label="Permalink to &quot;意思決定&quot;">​</a></h2><p>Kotlinの元の作成者である<a href="https://jetbrains.com" target="_blank" rel="noreferrer">JetBrains</a>は、コミュニティの助けを借りて、また<a href="https://kotlinfoundation.org/" target="_blank" rel="noreferrer">Kotlin財団</a>と協力して、その進歩を推進しています。</p><p>Kotlinプログラミング言語へのすべての変更は、<a href="https://kotlinfoundation.org/structure/" target="_blank" rel="noreferrer">リード言語デザイナー</a>（現在はMichail Zarečenskij）によって監督されています。 リードデザイナーは、言語の進化に関するすべての事柄について最終的な決定権を持ちます。 さらに、完全に安定したコンポーネントへの非互換な変更は、<a href="https://kotlinfoundation.org/" target="_blank" rel="noreferrer">Kotlin財団</a>の下で指定された<a href="https://kotlinfoundation.org/structure/" target="_blank" rel="noreferrer">言語委員会</a>（現在はJeffrey van Gogh、Werner Dietl、Michail Zarečenskijで構成）によって承認される必要があります。</p><p>言語委員会は、どの非互換な変更が行われるか、そしてユーザーのアップデートを可能な限りシームレスにするためにどのような具体的な措置が取られるかについて最終決定を下します。 その際、委員会は一連の<a href="https://kotlinfoundation.org/language-committee-guidelines/" target="_blank" rel="noreferrer">言語委員会ガイドライン</a>に依拠しています。</p><h2 id="言語とツールのリリース" tabindex="-1">言語とツールのリリース <a class="header-anchor" href="#言語とツールのリリース" aria-label="Permalink to &quot;言語とツールのリリース&quot;">​</a></h2><p>2.0.0のようなバージョン番号を持つ安定版リリースは、通常、言語の主要な変更をもたらす<strong>言語リリース</strong>と見なされます。 通常、言語リリースとリリース言語の間には、x.x.<strong>20</strong>と番号付けされた<strong>ツールリリース</strong>を公開しています。</p><p>ツールリリースは、ツール（しばしば機能を含む）、パフォーマンスの改善、バグ修正の更新をもたらします。 私たちはそのようなバージョン間での互換性を維持するよう努めているため、コンパイラの変更は主に最適化と警告の追加/削除に限られます。 プレ安定版機能は、いつでも追加、削除、または変更される可能性があります。</p><p>言語リリースでは、しばしば新機能が追加され、以前に非推奨になった機能が削除または変更される場合があります。 プレ安定版から安定版への機能の卒業も言語リリースで行われます。</p><h3 id="eapビルド" tabindex="-1">EAPビルド <a class="header-anchor" href="#eapビルド" aria-label="Permalink to &quot;EAPビルド&quot;">​</a></h3><p>言語およびツールの安定版リリースに先立ち、私たちはEAP（「早期アクセスプレビュー」の略）と呼ばれる多数のプレビュービルドを公開し、より迅速に反復し、コミュニティからフィードバックを収集できるようにしています。 言語リリースのEAPは通常、後で安定版コンパイラによって拒否されるバイナリを生成し、バイナリ形式の潜在的なバグがプレビュー期間を超えて残らないようにします。 最終的なリリース候補には、通常この制限はありません。</p><h3 id="プレ安定版機能" tabindex="-1">プレ安定版機能 <a class="header-anchor" href="#プレ安定版機能" aria-label="Permalink to &quot;プレ安定版機能&quot;">​</a></h3><p>上記の「フィードバックループ」の原則に従い、私たちは設計を公開で反復し、一部の機能が<strong>プレ安定版</strong>のステータスのいずれかであり、<strong>変更されることが想定されている</strong>言語のバージョンをリリースします。 そのような機能は、いつでも警告なしに追加、変更、または削除される可能性があります。 私たちは、無意識のユーザーがプレ安定版機能を誤って使用しないように最善を尽くします。 そのような機能は通常、コード内またはプロジェクト設定内で何らかの明示的なオプトインを必要とします。</p><p>Kotlin言語機能は、以下のいずれかのステータスを持つことができます。</p><ul><li><p><strong>検討と設計 (Exploration and design)</strong>。私たちは言語に新機能を導入することを検討しています。 これには、既存の機能との統合方法の議論、ユースケースの収集、潜在的な影響の評価が含まれます。 ユーザーから、この機能が解決する問題と対処するユースケースに関するフィードバックが必要です。 可能な限り、これらのユースケースと問題の発生頻度を推定することも有益です。 通常、アイデアはYouTrackのIssueとして文書化され、そこで議論が続けられます。</p></li><li><p><strong>KEEPに関する議論 (KEEP discussion)</strong>。私たちはその機能が言語に追加されるべきであるとかなり確信しています。 私たちは、その動機、ユースケース、設計、およびその他の重要な詳細を<code>KEEP</code>と呼ばれる文書で提供することを目指しています。 ユーザーからのフィードバックは、<code>KEEP</code>で提供されたすべての情報に関する議論に焦点を当てることを期待しています。</p></li><li><p><strong>プレビュー中 (In preview)</strong>。機能のプロトタイプが準備されており、機能固有のコンパイラオプションを使用して有効にすることができます。 私たちは、その機能がコードベースにどれだけ簡単に統合されるか、既存のコードとどのように相互作用するか、IDEサポートの問題や提案など、機能の使用経験に関するフィードバックを求めています。 フィードバックに基づいて、機能の設計が大幅に変更されたり、完全に撤回されたりする可能性があります。機能が<strong>プレビュー中</strong>の場合、<a href="/ja/kotlin/components-stability#stability-levels-explained">安定性レベル</a>があります。</p></li><li><p><strong>安定版 (Stable)</strong>。この言語機能は、Kotlin言語のファーストクラスの市民となりました。 私たちはその下位互換性と、ツールサポートを提供することを保証します。</p></li><li><p><strong>取り消し済み (Revoked)</strong>。私たちは提案を取り消し、Kotlin言語でその機能を実装しないことにしました。 <strong>プレビュー中</strong>の機能がKotlinに適合しないと判断された場合、その機能を取り消すことがあります。</p></li></ul><p><a href="/ja/kotlin/kotlin-language-features-and-proposals">Kotlin言語の提案とそのステータスの一覧</a>をご覧ください。</p><h3 id="各コンポーネントのステータス" tabindex="-1">各コンポーネントのステータス <a class="header-anchor" href="#各コンポーネントのステータス" aria-label="Permalink to &quot;各コンポーネントのステータス&quot;">​</a></h3><p>Kotlin/JVM、JS、Nativeコンパイラ、および各種ライブラリなど、<a href="/ja/kotlin/components-stability">Kotlinの様々なコンポーネントの安定性ステータス</a>について詳しくはこちらをご覧ください。</p><h2 id="ライブラリ" tabindex="-1">ライブラリ <a class="header-anchor" href="#ライブラリ" aria-label="Permalink to &quot;ライブラリ&quot;">​</a></h2><p>言語はエコシステムなしでは成り立たないため、スムーズなライブラリの進化を可能にすることに特に注意を払っています。</p><p>理想的には、新しいバージョンのライブラリは、古いバージョンの「ドロップイン置換」として使用できるべきです。 これは、バイナリ依存関係をアップグレードしても、アプリケーションが再コンパイルされない場合でも（動的リンクの下で可能）、何も壊れてはならないことを意味します。</p><p>一方、これを達成するために、コンパイラは分離コンパイルの制約の下で特定の<strong>アプリケーションバイナリインターフェース</strong>（ABI）安定性保証を提供する必要があります。 これが、言語のすべての変更がバイナリ互換性の観点から検討される理由です。</p><p>他方、多くのことは、ライブラリの作成者がどの変更が安全であるかについて注意を払うことに依存しています。 したがって、ライブラリの作成者がソース変更が互換性にどのように影響するかを理解し、ライブラリのAPIとABIの両方を安定に保つための特定のベストプラクティスに従うことが重要です。 以下は、ライブラリの進化の観点から言語の変更を検討する際に私たちが想定するいくつかのことです。</p><ul><li>ライブラリコードは、常にpublic/protected関数およびプロパティの戻り型を明示的に指定し、public APIの型推論に依存しないようにすべきです。型推論の微妙な変更は、意図せず戻り型を変更させ、バイナリ互換性の問題を引き起こす可能性があります。</li><li>同じライブラリによって提供されるオーバーロードされた関数およびプロパティは、本質的に同じことをすべきです。型推論の変更により、呼び出しサイトでより正確な静的型が認識され、オーバーロード解決が変更される可能性があります。</li></ul><p>ライブラリの作成者は、<code>@Deprecated</code>および<a href="/ja/kotlin/opt-in-requirements"><code>@RequiresOptIn</code></a>アノテーションを使用して、APIサーフェスの進化を制御できます。<code>@Deprecated(level=HIDDEN)</code>は、APIから削除された宣言であってもバイナリ互換性を維持するために使用できることに注意してください。</p><p>また、慣例として、「internal」と名付けられたパッケージはpublic APIとは見なされません。 「experimental」と名付けられたパッケージに存在するすべてのAPIはプレ安定版と見なされ、いつでも変更される可能性があります。</p><p>私たちは、安定版プラットフォーム向けのKotlin標準ライブラリ（<code>kotlin-stdlib</code>）を、上記の原則に従って進化させています。 そのAPIのコントラクトへの変更は、言語自体への変更と同じ手順を経て行われます。</p><h2 id="コンパイラオプション" tabindex="-1">コンパイラオプション <a class="header-anchor" href="#コンパイラオプション" aria-label="Permalink to &quot;コンパイラオプション&quot;">​</a></h2><p>コンパイラが受け入れるコマンドラインオプションも一種のpublic APIであり、同じ考慮事項の対象となります。 サポートされているオプション（「-X」または「-XX」プレフィックスを持たないもの）は、言語リリースでのみ追加でき、削除される前に適切に非推奨化されるべきです。 「-X」および「-XX」オプションは実験的であり、いつでも追加および削除できます。</p><h2 id="互換性ツール" tabindex="-1">互換性ツール <a class="header-anchor" href="#互換性ツール" aria-label="Permalink to &quot;互換性ツール&quot;">​</a></h2><p>レガシー機能が削除され、バグが修正されるにつれて、ソース言語が変更され、適切に移行されていない古いコードはコンパイルできなくなる可能性があります。 通常の非推奨サイクルでは、移行のために十分な期間が与えられ、それが終了し、変更が安定版でリリースされた後でも、移行されていないコードをコンパイルする方法があります。</p><h3 id="互換性オプション" tabindex="-1">互換性オプション <a class="header-anchor" href="#互換性オプション" aria-label="Permalink to &quot;互換性オプション&quot;">​</a></h3><p>新しいバージョンが互換性のために古いバージョンの動作をエミュレートする<code>-language-version X.Y</code>および<code>-api-version X.Y</code>オプションを提供しています。移行により多くの時間を与えるために、最新の安定版に加えて、過去3つの言語およびAPIバージョンを<a href="/ja/kotlin/compatibility-modes">サポート</a>しています。</p><p>積極的にメンテナンスされているコードベースは、完全な非推奨サイクルが完了するのを待つことなく、可能な限り早くバグ修正の恩恵を受けることができます。 現在、そのようなプロジェクトは<code>-progressive</code>オプションを有効にすることで、ツールリリースでもそのような修正を有効にすることができます。</p><p>すべてのオプションは、コマンドラインだけでなく、<a href="/ja/kotlin/gradle-compiler-options">Gradle</a>および<a href="/ja/kotlin/maven#specify-compiler-options">Maven</a>でも利用できます。</p><h3 id="バイナリフォーマットの進化" tabindex="-1">バイナリフォーマットの進化 <a class="header-anchor" href="#バイナリフォーマットの進化" aria-label="Permalink to &quot;バイナリフォーマットの進化&quot;">​</a></h3><p>最悪の場合、手作業で修正できるソースとは異なり、バイナリは移行がはるかに困難であり、これがバイナリの場合に後方互換性が極めて重要になる理由です。 バイナリへの非互換な変更は、アップデートを非常に不快にする可能性があり、したがって、ソース言語構文での変更よりもさらに注意深く導入されるべきです。</p><p>コンパイラの完全に安定したバージョンでは、デフォルトのバイナリ互換性プロトコルは以下の通りです。</p><ul><li>すべてのバイナリは後方互換性があります。つまり、新しいコンパイラは古いバイナリを読み取ることができます（例：1.3は1.0から1.2までを理解します）。</li><li>古いコンパイラは、新機能に依存するバイナリを拒否します（例：1.0コンパイラはコルーチンを使用するバイナリを拒否します）。</li><li>できれば（ただし保証はできませんが）、バイナリ形式は次の言語リリースとほとんど前方互換性がありますが、それ以降のリリースとは互換性がない場合があります（新機能が使用されていない場合など、例：1.9は2.0のほとんどのバイナリを理解しますが、2.1は理解しません）。</li></ul><p>このプロトコルは、プロジェクトがわずかに古いコンパイラを使用している場合でも、依存関係の更新を妨げられないように、快適なアップデートのために設計されています。</p><p>すべてのターゲットプラットフォームがこのレベルの安定性に達しているわけではありませんが、Kotlin/JVMは達成しています。</p><h4 id="kotlin-klibバイナリ" tabindex="-1">Kotlin klibバイナリ <a class="header-anchor" href="#kotlin-klibバイナリ" aria-label="Permalink to &quot;Kotlin klibバイナリ&quot;">​</a></h4><p>Kotlin klibバイナリは、Kotlin 1.9.20で<a href="/ja/kotlin/components-stability#stability-levels-explained">安定版</a>レベルに達しました。 ただし、いくつかの互換性の詳細に注意する必要があります。</p><ul><li>klibバイナリは、Kotlin 1.9.20以降、後方互換性があります。たとえば、2.0.xコンパイラは1.9.2xコンパイラによって生成されたバイナリを読み取ることができます。</li><li>前方互換性は<strong>保証されません</strong>。たとえば、2.0.xコンパイラが2.1.xコンパイラによって生成されたバイナリを読み取れることは<strong>保証されません</strong>。</li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Kotlin cinterop klibバイナリはまだ<a href="/ja/kotlin/components-stability#stability-levels-explained">ベータ版</a>です。 現在、cinterop klibバイナリについては、異なるKotlinバージョン間での特定の互換性保証を提供することはできません。</p></div>',65)]))}const g=a(o,[["render",n]]);export{u as __pageData,g as default};
