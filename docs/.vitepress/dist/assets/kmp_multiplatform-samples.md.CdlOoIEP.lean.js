import{_ as r,C as e,c as s,o as m,j as l,G as t,ag as p,a as o,w as i}from"./chunks/framework.Bksy39di.js";const C=JSON.parse('{"title":"Kotlin Multiplatform 示例","description":"","frontmatter":{},"headers":[],"relativePath":"kmp/multiplatform-samples.md","filePath":"kmp/multiplatform-samples.md","lastUpdated":1755516278000}'),a={name:"kmp/multiplatform-samples.md"};function f(k,n,g,b,S,M){const d=e("show-structure"),u=e("list");return m(),s("div",null,[n[88]||(n[88]=l("h1",{id:"kotlin-multiplatform-示例",tabindex:"-1"},[o("Kotlin Multiplatform 示例 "),l("a",{class:"header-anchor",href:"#kotlin-multiplatform-示例","aria-label":'Permalink to "Kotlin Multiplatform 示例"'},"​")],-1)),t(d,{for:"none"}),n[89]||(n[89]=p("",5)),l("table",null,[n[20]||(n[20]=l("tr",null,[l("td",null,"名称"),l("td",null,"描述"),l("td",null,"共享内容？"),l("td",null,"值得注意的库"),l("td",null,"用户界面")],-1)),l("tr",null,[n[3]||(n[3]=l("td",null,[l("strong",null,[l("a",{href:"https://github.com/JetBrains/compose-multiplatform/tree/master/examples/imageviewer"},"Image Viewer")])],-1)),n[4]||(n[4]=l("td",null,[o("一个用于拍摄、查看和存储图片的应用程序。包含地图支持。用户界面使用 Compose Multiplatform。于 "),l("a",{href:"https://www.youtube.com/watch?v=FWVi4aV36d8"},"KotlinConf 2023"),o(" 推出。 ")],-1)),l("td",null,[t(u,null,{default:i(()=>n[0]||(n[0]=[l("li",null,"UI",-1),l("li",null,"模型",-1),l("li",null,"网络",-1),l("li",null,"动画",-1),l("li",null,"数据存储",-1)])),_:1})]),l("td",null,[t(u,null,{default:i(()=>n[1]||(n[1]=[l("li",null,[l("code",null,"kotlinx-serialization")],-1),l("li",null,[l("code",null,"kotlinx-datetime")],-1),l("li",null,[l("code",null,"kotlinx-coroutines")],-1),l("li",null,[l("code",null,"play-services-maps")],-1),l("li",null,[l("code",null,"play-services-locations")],-1),l("li",null,[l("code",null,"android-maps-compose")],-1),l("li",null,[l("code",null,"accompanist-permissions")],-1)])),_:1})]),l("td",null,[t(u,null,{default:i(()=>n[2]||(n[2]=[l("li",null,"Android 上的 Jetpack Compose",-1),l("li",null,"iOS、桌面和 Web 上的 Compose Multiplatform",-1)])),_:1})])]),l("tr",null,[n[7]||(n[7]=l("td",null,[l("strong",null,[l("a",{href:"https://github.com/JetBrains/compose-multiplatform/tree/master/examples/chat"},"Chat")])],-1)),n[8]||(n[8]=l("td",null,"演示如何在 SwiftUI 界面中嵌入 Compose Multiplatform 组件。用例是在线消息。 ",-1)),l("td",null,[t(u,null,{default:i(()=>n[5]||(n[5]=[l("li",null,"UI",-1),l("li",null,"模型",-1),l("li",null,"网络",-1)])),_:1})]),n[9]||(n[9]=l("td",null,null,-1)),l("td",null,[t(u,null,{default:i(()=>n[6]||(n[6]=[l("li",null,"Android 上的 Jetpack Compose",-1),l("li",null,"iOS、桌面和 Web 上的 Compose Multiplatform",-1),l("li",null,"iOS 上的 SwiftUI",-1)])),_:1})])]),l("tr",null,[n[13]||(n[13]=l("td",null,[l("strong",null,[l("a",{href:"https://github.com/Kotlin/kmm-production-sample"},"KMM RSS Reader")])],-1)),n[14]||(n[14]=l("td",null,[o("一个用于消费 RSS 订阅的示例应用程序，旨在展示 Kotlin Multiplatform 如何在生产环境中使用。UI 采用原生实现，但有一个实验性分支展示了 Compose Multiplatform 如何在 iOS 和桌面使用。网络通信通过 "),l("a",{href:"https://ktor.io/docs/create-client.html"},"Ktor HTTP Client"),o(" 实现，而 XML 解析采用原生实现。使用 Redux 架构共享 UI 状态。 ")],-1)),l("td",null,[t(u,null,{default:i(()=>n[10]||(n[10]=[l("li",null,"模型",-1),l("li",null,"网络",-1),l("li",null,"UI 状态",-1),l("li",null,"数据存储",-1)])),_:1})]),l("td",null,[t(u,null,{default:i(()=>n[11]||(n[11]=[l("li",null,[l("code",null,"kotlinx-serialization")],-1),l("li",null,[l("code",null,"kotlinx-coroutines")],-1),l("li",null,[l("code",null,"ktor-client")],-1),l("li",null,[l("code",null,"voyager")],-1),l("li",null,[l("code",null,"coil")],-1),l("li",null,[l("code",null,"multiplatform-settings")],-1),l("li",null,[l("code",null,"napier")],-1),l("li",null,"SQLDelight",-1)])),_:1})]),l("td",null,[t(u,null,{default:i(()=>n[12]||(n[12]=[l("li",null,"Android 上的 Jetpack Compose",-1),l("li",null,"iOS 和桌面上的 Compose Multiplatform（在实验性分支上）",-1),l("li",null,"iOS 上的 SwiftUI",-1)])),_:1})])]),l("tr",null,[n[16]||(n[16]=l("td",null,[l("strong",null,[l("a",{href:"https://github.com/Kotlin/kmm-basic-sample"},"Kotlin Multiplatform Sample")])],-1)),n[17]||(n[17]=l("td",null,"一个简单的计算器应用程序。展示了如何使用 `expected` 和 `actual` 声明集成 Kotlin 和原生代码。 ",-1)),n[18]||(n[18]=l("td",null,[l("p",null,"算法")],-1)),n[19]||(n[19]=l("td",null,null,-1)),l("td",null,[t(u,null,{default:i(()=>n[15]||(n[15]=[l("li",null,"Android 上的 Jetpack Compose",-1),l("li",null,"SwiftUI",-1)])),_:1})])])]),n[90]||(n[90]=l("h3",{id:"推荐示例",tabindex:"-1"},[o("推荐示例 "),l("a",{class:"header-anchor",href:"#推荐示例","aria-label":'Permalink to "推荐示例"'},"​")],-1)),l("table",null,[n[41]||(n[41]=l("tr",null,[l("td",null,"名称"),l("td",null,"描述"),l("td",null,"共享内容？"),l("td",null,"值得注意的库"),l("td",null,"用户界面")],-1)),l("tr",null,[n[24]||(n[24]=l("td",null,[l("strong",null,[l("a",{href:"https://github.com/joreilly/Confetti"},"Confetti")])],-1)),n[25]||(n[25]=l("td",null,[o("展示了 Kotlin Multiplatform 和 Compose Multiplatform 的多个不同方面。用例是用于获取和显示会议日程信息的应用程序。包含对 Wear 和 Auto 平台的支持。使用 GraphQL 进行客户端-服务器通信。架构在 "),l("a",{href:"https://www.youtube.com/watch?v=uATlWUBSx8Q"},"KotlinConf 2023"),o(" 进行了深入讨论。 ")],-1)),l("td",null,[t(u,null,{default:i(()=>n[21]||(n[21]=[l("li",null,"UI",-1),l("li",null,"模型",-1),l("li",null,"网络",-1),l("li",null,"数据存储",-1),l("li",null,"导航",-1)])),_:1})]),l("td",null,[t(u,null,{default:i(()=>n[22]||(n[22]=[l("li",null,[l("code",null,"kotlinx-serialization")],-1),l("li",null,[l("code",null,"kotlinx-datetime")],-1),l("li",null,[l("code",null,"kotlinx-coroutines")],-1),l("li",null,[l("code",null,"decompose")],-1),l("li",null,[l("code",null,"koin")],-1),l("li",null,[l("code",null,"jsonpathkt-kotlinx")],-1),l("li",null,[l("code",null,"horologist")],-1),l("li",null,[l("code",null,"google-cloud")],-1),l("li",null,[l("code",null,"firebase")],-1),l("li",null,[l("code",null,"bare-graphql")],-1),l("li",null,[l("code",null,"apollo")],-1),l("li",null,[l("code",null,"accompanist")],-1)])),_:1})]),l("td",null,[t(u,null,{default:i(()=>n[23]||(n[23]=[l("li",null,"Android、Auto 和 Wear 上的 Jetpack Compose",-1),l("li",null,"iOS、桌面和 Web 上的 Compose Multiplatform",-1)])),_:1})])]),l("tr",null,[n[29]||(n[29]=l("td",null,[l("strong",null,[l("a",{href:"https://github.com/joreilly/PeopleInSpace"},"People In Space")])],-1)),n[30]||(n[30]=l("td",null,"展示了 Kotlin Multiplatform 可运行的多个不同平台。用例是显示当前在太空中的人数和国际空间站的位置。 ",-1)),l("td",null,[t(u,null,{default:i(()=>n[26]||(n[26]=[l("li",null,"模型",-1),l("li",null,"网络",-1),l("li",null,"数据存储",-1)])),_:1})]),l("td",null,[t(u,null,{default:i(()=>n[27]||(n[27]=[l("li",null,[l("code",null,"kotlinx-serialization")],-1),l("li",null,[l("code",null,"kotlinx-coroutines")],-1),l("li",null,[l("code",null,"kotlinx-datetime")],-1),l("li",null,[l("code",null,"ktor-client")],-1),l("li",null,[l("code",null,"koin")],-1),l("li",null,[l("code",null,"multiplatform-settings")],-1),l("li",null,"SQLDelight",-1)])),_:1})]),l("td",null,[t(u,null,{default:i(()=>n[28]||(n[28]=[l("li",null,"Android 和 Wear OS 上的 Jetpack Compose",-1),l("li",null,"iOS、桌面和 Web 上的 Compose Multiplatform",-1),l("li",null,"iOS 和 macOS 上的 SwiftUI",-1)])),_:1})])]),l("tr",null,[n[34]||(n[34]=l("td",null,[l("strong",null,[l("a",{href:"https://github.com/touchlab/DroidconKotlin"},"Sessionize / Droidcon")])],-1)),n[35]||(n[35]=l("td",null,"一个用于使用 Sessionize API 查看 Droidcon 活动议程的应用程序。可定制用于任何在 Sessionize 中存储演讲的活动。与 Firebase 集成，因此运行需要 Firebase 帐户。 ",-1)),l("td",null,[t(u,null,{default:i(()=>n[31]||(n[31]=[l("li",null,"UI",-1),l("li",null,"模型",-1),l("li",null,"网络",-1),l("li",null,"数据存储",-1)])),_:1})]),l("td",null,[t(u,null,{default:i(()=>n[32]||(n[32]=[l("li",null,[l("code",null,"kotlinx-coroutines")],-1),l("li",null,[l("code",null,"kotlinx-datetime")],-1),l("li",null,[l("code",null,"ktor-client")],-1),l("li",null,[l("code",null,"koin")],-1),l("li",null,[l("code",null,"multiplatform-settings")],-1),l("li",null,[l("code",null,"firebase")],-1),l("li",null,[l("code",null,"kermit")],-1),l("li",null,[l("code",null,"accompanist")],-1),l("li",null,[l("code",null,"hyperdrive-multiplatformx")],-1),l("li",null,"SQLDelight",-1)])),_:1})]),l("td",null,[t(u,null,{default:i(()=>n[33]||(n[33]=[l("li",null,"Android 上的 Jetpack Compose",-1),l("li",null,"iOS 上的 Compose Multiplatform",-1)])),_:1})])]),l("tr",null,[n[39]||(n[39]=l("td",null,[l("strong",null,[l("a",{href:"https://github.com/touchlab/KaMPKit"},"KaMPKit")])],-1)),n[40]||(n[40]=l("td",null,[o("一个用于 Kotlin Multiplatform 开发的代码和工具集合。旨在展示构建 Kotlin Multiplatform 应用程序时的库、架构选择和最佳实践。用例是下载和显示狗的品种信息。在此"),l("a",{href:"https://www.youtube.com/watch?v=EJVq_QWaWXE"},"视频教程"),o("中介绍。 ")],-1)),l("td",null,[t(u,null,{default:i(()=>n[36]||(n[36]=[l("li",null,"模型",-1),l("li",null,"网络",-1),l("li",null,"ViewModel",-1),l("li",null,"数据存储",-1)])),_:1})]),l("td",null,[t(u,null,{default:i(()=>n[37]||(n[37]=[l("li",null,[l("code",null,"ktor-client")],-1),l("li",null,[l("code",null,"koin")],-1),l("li",null,[l("code",null,"multiplatform-settings")],-1),l("li",null,[l("code",null,"kermit")],-1),l("li",null,"SQLDelight",-1)])),_:1})]),l("td",null,[t(u,null,{default:i(()=>n[38]||(n[38]=[l("li",null,"Android 上的 Jetpack Compose",-1),l("li",null,"iOS 上的 SwiftUI",-1)])),_:1})])])]),n[91]||(n[91]=l("h3",{id:"其他社区示例",tabindex:"-1"},[o("其他社区示例 "),l("a",{class:"header-anchor",href:"#其他社区示例","aria-label":'Permalink to "其他社区示例"'},"​")],-1)),l("table",null,[n[87]||(n[87]=l("tr",null,[l("td",null,"名称"),l("td",null,"描述"),l("td",null,"共享内容？"),l("td",null,"值得注意的库"),l("td",null,"用户界面")],-1)),l("tr",null,[n[45]||(n[45]=l("td",null,[l("strong",null,[l("a",{href:"https://github.com/xxfast/NYTimes-KMP"},"NYTimes KMP")])],-1)),n[46]||(n[46]=l("td",null,[o("一个基于 Compose Multiplatform 的《纽约时报》应用程序版本。允许用户浏览和阅读文章。请注意，要构建和运行此应用程序，您需要一个来自 "),l("a",{href:"https://developer.nytimes.com/"},"《纽约时报》的 API 密钥"),o("。 ")],-1)),l("td",null,[t(u,null,{default:i(()=>n[42]||(n[42]=[l("li",null,"UI",-1),l("li",null,"模型",-1),l("li",null,"网络",-1)])),_:1})]),l("td",null,[t(u,null,{default:i(()=>n[43]||(n[43]=[l("li",null,[l("code",null,"kotlinx-serialization")],-1),l("li",null,[l("code",null,"kotlinx-datetime")],-1),l("li",null,[l("code",null,"kotlinx-coroutines")],-1),l("li",null,[l("code",null,"ktor-client")],-1),l("li",null,[l("code",null,"molecule")],-1),l("li",null,[l("code",null,"decompose")],-1),l("li",null,[l("code",null,"horologist")],-1)])),_:1})]),l("td",null,[t(u,null,{default:i(()=>n[44]||(n[44]=[l("li",null,"Android 和 Wear 上的 Jetpack Compose",-1),l("li",null,"iOS、桌面和 Web 上的 Compose Multiplatform",-1)])),_:1})])]),l("tr",null,[n[50]||(n[50]=l("td",null,[l("strong",null,[l("a",{href:"https://github.com/JoelKanyi/FocusBloom"},"Focus Bloom")])],-1)),n[51]||(n[51]=l("td",null,"一个生产力与时间管理应用程序。允许用户安排任务并提供关于他们成就的反馈。 ",-1)),l("td",null,[t(u,null,{default:i(()=>n[47]||(n[47]=[l("li",null,"UI",-1),l("li",null,"模型",-1),l("li",null,"动画",-1),l("li",null,"数据存储",-1)])),_:1})]),l("td",null,[t(u,null,{default:i(()=>n[48]||(n[48]=[l("li",null,[l("code",null,"kotlinx.serialization")],-1),l("li",null,[l("code",null,"kotlinx.coroutines")],-1),l("li",null,[l("code",null,"kotlinx.datetime")],-1),l("li",null,[l("code",null,"koin")],-1),l("li",null,[l("code",null,"navigation-compose")],-1),l("li",null,[l("code",null,"multiplatform-settings")],-1),l("li",null,"SQLDelight",-1)])),_:1})]),l("td",null,[t(u,null,{default:i(()=>n[49]||(n[49]=[l("li",null,"Android、iOS 和桌面上的 Compose Multiplatform",-1)])),_:1})])]),l("tr",null,[n[54]||(n[54]=l("td",null,[l("strong",null,[l("a",{href:"https://github.com/SEAbdulbasit/recipe-app"},"Recipe App")])],-1)),n[55]||(n[55]=l("td",null,"一个用于查看食谱的演示应用程序。展示了动画的使用。",-1)),l("td",null,[t(u,null,{default:i(()=>n[52]||(n[52]=[l("li",null,"UI",-1),l("li",null,"模型",-1),l("li",null,"数据存储",-1)])),_:1})]),n[56]||(n[56]=l("td",null,[l("p",null,[l("code",null,"kotlinx-coroutines")])],-1)),l("td",null,[t(u,null,{default:i(()=>n[53]||(n[53]=[l("li",null,"Android 上的 Jetpack Compose",-1),l("li",null,"iOS、桌面和 Web 上的 Compose Multiplatform",-1)])),_:1})])]),l("tr",null,[n[60]||(n[60]=l("td",null,[l("strong",null,[l("a",{href:"https://github.com/dbaroncelli/D-KMP-sample"},"D-KMP-sample")])],-1)),n[61]||(n[61]=l("td",null,[o("一个关于 "),l("a",{href:"https://danielebaroncelli.medium.com/d-kmp-sample-now-leverages-ios-16-navigation-cebbb81ba2e7"},"使用 Kotlin MultiPlatform 的声明式 UI 架构"),o("的示例应用程序。用例是检索和显示不同国家/地区的疫苗接种统计数据。 ")],-1)),l("td",null,[t(u,null,{default:i(()=>n[57]||(n[57]=[l("li",null,"网络",-1),l("li",null,"数据存储",-1),l("li",null,"ViewModel",-1),l("li",null,"导航",-1)])),_:1})]),l("td",null,[t(u,null,{default:i(()=>n[58]||(n[58]=[l("li",null,[l("code",null,"ktor-client")],-1),l("li",null,[l("code",null,"multiplatform-settings")],-1),l("li",null,"SQLDelight",-1)])),_:1})]),l("td",null,[t(u,null,{default:i(()=>n[59]||(n[59]=[l("li",null,"Android 上的 Jetpack Compose",-1),l("li",null,"iOS 上的 SwiftUI",-1)])),_:1})])]),l("tr",null,[n[65]||(n[65]=l("td",null,[l("strong",null,[l("a",{href:"https://github.com/VictorKabata/Notflix"},"Notflix")])],-1)),n[66]||(n[66]=l("td",null,[o("一个从 "),l("a",{href:"https://www.themoviedb.org/"},"The Movie Database"),o(" 消费数据以显示当前热门、即将上映和流行的电影与电视节目的应用程序。要求您在 The Movie Database 创建一个 API 密钥。 ")],-1)),l("td",null,[t(u,null,{default:i(()=>n[62]||(n[62]=[l("li",null,"模型",-1),l("li",null,"网络",-1),l("li",null,"缓存",-1),l("li",null,"ViewModel",-1)])),_:1})]),l("td",null,[t(u,null,{default:i(()=>n[63]||(n[63]=[l("li",null,[l("code",null,"kotlinx-coroutines")],-1),l("li",null,[l("code",null,"kotlinx-serialization")],-1),l("li",null,[l("code",null,"kotlinx-datetime")],-1),l("li",null,[l("code",null,"ktor-client")],-1),l("li",null,[l("code",null,"multiplatform-settings")],-1),l("li",null,[l("code",null,"napier")],-1)])),_:1})]),l("td",null,[t(u,null,{default:i(()=>n[64]||(n[64]=[l("li",null,"Android 上的 Jetpack Compose",-1),l("li",null,"iOS 上的 SwiftUI",-1)])),_:1})])]),l("tr",null,[n[70]||(n[70]=l("td",null,[l("strong",null,[l("a",{href:"https://github.com/msasikanth/twine"},"Twine - RSS Reader")])],-1)),n[71]||(n[71]=l("td",null,"Twine 是一个使用 Kotlin 和 Compose Multiplatform 构建的多平台 RSS 阅读器应用。它具有出色的用户界面和体验，可用于浏览订阅源，并支持 Material 3 基于内容的动态主题。 ",-1)),l("td",null,[t(u,null,{default:i(()=>n[67]||(n[67]=[l("li",null,"模型",-1),l("li",null,"网络",-1),l("li",null,"数据存储",-1),l("li",null,"UI",-1)])),_:1})]),l("td",null,[t(u,null,{default:i(()=>n[68]||(n[68]=[l("li",null,[l("code",null,"kotlinx-coroutines")],-1),l("li",null,[l("code",null,"kotlinx-serialization")],-1),l("li",null,[l("code",null,"kotlinx-datetime")],-1),l("li",null,[l("code",null,"ktor-client")],-1),l("li",null,[l("code",null,"napier")],-1),l("li",null,[l("code",null,"decompose")],-1)])),_:1})]),l("td",null,[t(u,null,{default:i(()=>n[69]||(n[69]=[l("li",null,"Android 和 iOS 上的 Compose Multiplatform",-1)])),_:1})])]),l("tr",null,[n[75]||(n[75]=l("td",null,[l("strong",null,[l("a",{href:"https://github.com/razaghimahdi/Shopping-By-KMP"},"Shopping By KMP")])],-1)),n[76]||(n[76]=l("td",null,"一个使用 Jetpack Compose Multiplatform 构建的跨平台应用程序，Jetpack Compose Multiplatform 是一个用于使用 Kotlin 在多个平台间共享 UI 的声明式框架。该应用程序允许用户在 Android、iOS、Web、桌面、Android Automotive 和 Android TV 上浏览、搜索和购买购物目录中的产品。 ",-1)),l("td",null,[t(u,null,{default:i(()=>n[72]||(n[72]=[l("li",null,"模型",-1),l("li",null,"网络",-1),l("li",null,"数据存储",-1),l("li",null,"UI",-1),l("li",null,"ViewModel",-1),l("li",null,"动画",-1),l("li",null,"导航",-1),l("li",null,"UI 状态",-1),l("li",null,"用例",-1),l("li",null,"单元测试",-1),l("li",null,"UI 测试",-1)])),_:1})]),l("td",null,[t(u,null,{default:i(()=>n[73]||(n[73]=[l("li",null,[l("code",null,"kotlinx-coroutines")],-1),l("li",null,[l("code",null,"kotlinx-serialization")],-1),l("li",null,[l("code",null,"kotlinx-datetime")],-1),l("li",null,[l("code",null,"ktor-client")],-1),l("li",null,[l("code",null,"datastore")],-1),l("li",null,[l("code",null,"koin")],-1),l("li",null,[l("code",null,"google-map")],-1),l("li",null,[l("code",null,"navigation-compose")],-1),l("li",null,[l("code",null,"coil")],-1),l("li",null,[l("code",null,"kotest")],-1)])),_:1})]),l("td",null,[t(u,null,{default:i(()=>n[74]||(n[74]=[l("li",null,"Android、iOS、Web、桌面、automotive 和 Android TV 上的 Compose Multiplatform",-1)])),_:1})])]),l("tr",null,[n[80]||(n[80]=l("td",null,[l("strong",null,[l("a",{href:"https://github.com/SEAbdulbasit/MusicApp-KMP"},"Music App KMP")])],-1)),n[81]||(n[81]=l("td",null,"一个展示了如何在不同平台上与 `MediaPlayer` 等原生 API 交互的应用程序。它使用 Spotify API 获取数据。 ",-1)),l("td",null,[t(u,null,{default:i(()=>n[77]||(n[77]=[l("li",null,"模型",-1),l("li",null,"网络",-1),l("li",null,"UI",-1)])),_:1})]),l("td",null,[t(u,null,{default:i(()=>n[78]||(n[78]=[l("li",null,[l("code",null,"kotlinx-coroutines")],-1),l("li",null,[l("code",null,"kotlinx-serialization")],-1),l("li",null,[l("code",null,"ktor-client")],-1),l("li",null,[l("code",null,"decompose")],-1)])),_:1})]),l("td",null,[t(u,null,{default:i(()=>n[79]||(n[79]=[l("li",null,"Android、iOS、桌面和 Web 上的 Compose Multiplatform",-1)])),_:1})])]),l("tr",null,[n[85]||(n[85]=l("td",null,[l("strong",null,[l("a",{href:"https://github.com/fethij/Rijksmuseum"},"Rijksmuseum")])],-1)),n[86]||(n[86]=l("td",null,"Rijksmuseum 是一个多模块的 Kotlin 和 Compose Multiplatform 应用，提供了一种沉浸式方式来探索阿姆斯特丹著名的 `Rijksmuseum` 的艺术收藏。它利用 `Rijksmuseum` API 获取和显示各种艺术品的详细信息，包括图片和描述。 ",-1)),l("td",null,[t(u,null,{default:i(()=>n[82]||(n[82]=[l("li",null,"UI",-1),l("li",null,"模型",-1),l("li",null,"网络",-1),l("li",null,"导航",-1),l("li",null,"ViewModel",-1)])),_:1})]),l("td",null,[t(u,null,{default:i(()=>n[83]||(n[83]=[l("li",null,[l("code",null,"kotlinx-coroutines")],-1),l("li",null,[l("code",null,"kotlinx-serialization")],-1),l("li",null,[l("code",null,"ktor-client")],-1),l("li",null,[l("code",null,"koin")],-1),l("li",null,[l("code",null,"navigation-compose")],-1),l("li",null,[l("code",null,"Coil")],-1),l("li",null,[l("code",null,"Jetpack ViewModel")],-1)])),_:1})]),l("td",null,[t(u,null,{default:i(()=>n[84]||(n[84]=[l("li",null,"Android、iOS、桌面和 Web 上的 Compose Multiplatform",-1)])),_:1})])])])])}const w=r(a,[["render",f]]);export{C as __pageData,w as default};
