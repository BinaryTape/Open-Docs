import{_ as i,c as a,o as t,ag as l}from"./chunks/framework.Bksy39di.js";const c=JSON.parse('{"title":"Kotlin 命令行编译器","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/command-line.md","filePath":"kotlin/command-line.md","lastUpdated":1754307826000}'),e={name:"kotlin/command-line.md"};function n(h,s,p,k,o,r){return t(),a("div",null,s[0]||(s[0]=[l(`<h1 id="kotlin-命令行编译器" tabindex="-1">Kotlin 命令行编译器 <a class="header-anchor" href="#kotlin-命令行编译器" aria-label="Permalink to &quot;Kotlin 命令行编译器&quot;">​</a></h1><p>Kotlin 的每个版本都附带一个独立的编译器。你可以手动下载最新版本或通过包管理器下载。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>安装命令行编译器并非使用 Kotlin 的必要步骤。 常见的方法是使用支持 Kotlin 的官方 IDE 或代码编辑器来编写 Kotlin 应用程序， 例如 <a href="https://www.jetbrains.com/idea/" target="_blank" rel="noreferrer">IntelliJ IDEA</a> 或 <a href="https://developer.android.com/studio" target="_blank" rel="noreferrer">Android Studio</a>。 它们提供开箱即用的完整 Kotlin 支持。 了解如何在 <a href="/kotlin/getting-started">IDE 中开始使用 Kotlin</a>。</p></div><h2 id="安装编译器" tabindex="-1">安装编译器 <a class="header-anchor" href="#安装编译器" aria-label="Permalink to &quot;安装编译器&quot;">​</a></h2><h3 id="手动安装" tabindex="-1">手动安装 <a class="header-anchor" href="#手动安装" aria-label="Permalink to &quot;手动安装&quot;">​</a></h3><p>要手动安装 Kotlin 编译器：</p><ol><li>从 <a href="https://github.com/JetBrains/kotlin/releases/tag/v2.2.10" target="_blank" rel="noreferrer">GitHub Releases</a> 下载最新版本（<code>kotlin-compiler-2.2.10.zip</code>）。</li><li>将独立编译器解压到某个目录中，并可选地将 <code>bin</code> 目录添加到系统路径。<code>bin</code> 目录包含在 Windows、macOS 和 Linux 上编译和运行 Kotlin 所需的脚本。</li></ol><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>如果你想在 Windows 上使用 Kotlin 命令行编译器，我们建议手动安装它。</p></div><h3 id="sdkman" tabindex="-1">SDKMAN! <a class="header-anchor" href="#sdkman" aria-label="Permalink to &quot;SDKMAN!&quot;">​</a></h3><p>在基于 UNIX 的系统（例如 macOS、Linux、Cygwin、FreeBSD 和 Solaris）上安装 Kotlin 更简单的方法是 <a href="https://sdkman.io" target="_blank" rel="noreferrer">SDKMAN!</a>。它也适用于 Bash 和 ZSH shell。了解如何 <a href="https://sdkman.io/install" target="_blank" rel="noreferrer">安装 SDKMAN!</a>。</p><p>要通过 SDKMAN! 安装 Kotlin 编译器，请在终端中运行以下命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sdk</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kotlin</span></span></code></pre></div><h3 id="homebrew" tabindex="-1">Homebrew <a class="header-anchor" href="#homebrew" aria-label="Permalink to &quot;Homebrew&quot;">​</a></h3><p>或者，在 macOS 上你可以通过 <a href="https://brew.sh/" target="_blank" rel="noreferrer">Homebrew</a> 安装编译器：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">brew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">brew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kotlin</span></span></code></pre></div><h3 id="snap-包" tabindex="-1">Snap 包 <a class="header-anchor" href="#snap-包" aria-label="Permalink to &quot;Snap 包&quot;">​</a></h3><p>如果你在 Ubuntu 16.04 或更高版本上使用 <a href="https://snapcraft.io/" target="_blank" rel="noreferrer">Snap</a>，可以通过命令行安装编译器：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> snap</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --classic</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kotlin</span></span></code></pre></div><h2 id="创建并运行应用程序" tabindex="-1">创建并运行应用程序 <a class="header-anchor" href="#创建并运行应用程序" aria-label="Permalink to &quot;创建并运行应用程序&quot;">​</a></h2><ol><li><p>在 Kotlin 中创建一个简单的控制台 JVM 应用程序，显示“Hello, World!”。在代码编辑器中，创建一个名为 <code>hello.kt</code> 的新文件，其中包含以下代码：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, World!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>使用 Kotlin 编译器编译应用程序：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlinc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.kt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -include-runtime</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.jar</span></span></code></pre></div><ul><li><code>-d</code> 选项指示生成的类文件的输出路径，该路径可以是目录或 <strong>.jar</strong> 文件。</li><li><code>-include-runtime</code> 选项通过在生成的 <strong>.jar</strong> 文件中包含 Kotlin 运行时库，使其成为自包含的可运行文件。</li></ul><p>要查看所有可用选项，请运行：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlinc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -help</span></span></code></pre></div></li><li><p>运行应用程序：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">java</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -jar</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.jar</span></span></code></pre></div></li></ol><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>要编译 Kotlin/Native 应用程序，请使用 <a href="/kotlin/native-get-started#using-the-command-line-compiler">Kotlin/Native 编译器</a>。</p></div><h2 id="编译库" tabindex="-1">编译库 <a class="header-anchor" href="#编译库" aria-label="Permalink to &quot;编译库&quot;">​</a></h2><p>如果你正在开发一个供其他 Kotlin 应用程序使用的库，可以在不包含 Kotlin 运行时的情况下构建 <strong>.jar</strong> 文件：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlinc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.kt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.jar</span></span></code></pre></div><p>由于以这种方式编译的二进制文件依赖于 Kotlin 运行时，因此每当你的编译库被使用时，都应确保它存在于 classpath 中。</p><p>你也可以使用 <code>kotlin</code> 脚本来运行由 Kotlin 编译器生成的二进制文件：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -classpath</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.jar</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> HelloKt</span></span></code></pre></div><p><code>HelloKt</code> 是 Kotlin 编译器为名为 <code>hello.kt</code> 的文件生成的主类名。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>要编译 Kotlin/Native 库，请使用 <a href="/kotlin/native-libraries#kotlin-compiler-specifics">Kotlin/Native 编译器</a>。</p></div><h2 id="运行-repl" tabindex="-1">运行 REPL <a class="header-anchor" href="#运行-repl" aria-label="Permalink to &quot;运行 REPL&quot;">​</a></h2><p>使用 <a href="/kotlin/compiler-reference#xrepl"><code>-Xrepl</code> 编译器选项</a> 运行编译器以获得交互式 shell。在此 shell 中，你可以输入任何有效的 Kotlin 代码并查看结果。</p><h2 id="运行脚本" tabindex="-1">运行脚本 <a class="header-anchor" href="#运行脚本" aria-label="Permalink to &quot;运行脚本&quot;">​</a></h2><p>你可以将 Kotlin 用作脚本语言。Kotlin 脚本是包含顶层可执行代码的 Kotlin 源文件（<code>.kts</code>）。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> java.io.File</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 获取传入的路径，即 “-d some/path” 或使用当前路径。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (args.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">contains</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-d&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) args[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> args.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">indexOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-d&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">           else</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;.&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> folders </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> File</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(path).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listFiles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { file </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> file.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isDirectory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">folders?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { folder </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(folder) }</span></span></code></pre></div><p>要运行脚本，请将 <code>-script</code> 选项与相应的脚本文件一起传递给编译器：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlinc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -script</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> list_folders.kts</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">path_to_folder_to_inspec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>Kotlin 为脚本自定义提供实验性的支持，例如添加外部属性、提供静态或动态依赖项等等。自定义由所谓的 <em>脚本定义</em> 定义——即带有相应支持代码的、带有注解的 Kotlin 类。脚本文件扩展名用于选择相应的定义。了解更多关于 <a href="/kotlin/custom-script-deps-tutorial">Kotlin 自定义脚本</a> 的信息。</p><p>当相应的 jar 文件包含在编译 classpath 中时，准备好的脚本定义会被自动检测并应用。或者，你可以通过向编译器传递 <code>-script-templates</code> 选项来手动指定定义：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlinc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -script-templates</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> org.example.CustomScriptDefinition</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -script</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> custom.script1.kts</span></span></code></pre></div><p>有关更多详细信息，请参见 <a href="https://github.com/Kotlin/KEEP/blob/master/proposals/scripting-support.md" target="_blank" rel="noreferrer">KEEP-75</a>。</p>`,40)]))}const g=i(e,[["render",n]]);export{c as __pageData,g as default};
