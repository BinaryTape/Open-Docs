import{_ as o,a as d,b as E}from"./chunks/wasm-1-9-0-size-improvements.B8FiXYUf.js";import{_ as c,C as t,c as g,o as y,ag as l,G as n,j as i,w as e,a}from"./chunks/framework.Bksy39di.js";const K=JSON.parse('{"title":"Kotlin 1.9.0 新特性","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/whatsnew19.md","filePath":"kotlin/whatsnew19.md","lastUpdated":1754307826000}'),u={name:"kotlin/whatsnew19.md"};function F(m,s,b,C,v,f){const p=t("YouTubeVideo"),k=t("anchor"),h=t("tab"),r=t("tabs");return y(),g("div",null,[s[2]||(s[2]=l('<h1 id="kotlin-1-9-0-新特性" tabindex="-1">Kotlin 1.9.0 新特性 <a class="header-anchor" href="#kotlin-1-9-0-新特性" aria-label="Permalink to &quot;Kotlin 1.9.0 新特性&quot;">​</a></h1><p><em><a href="/kotlin/releases#release-details">发布日期：2023 年 7 月 6 日</a></em></p><p>Kotlin 1.9.0 版本现已发布，面向 JVM 的 K2 编译器现在已进入 <strong>Beta</strong> 阶段。此外，以下是一些主要亮点：</p><ul><li><a href="#new-kotlin-k2-compiler-updates">新的 Kotlin K2 编译器更新</a></li><li><a href="#stable-replacement-of-the-enum-class-values-function">enum class values 函数的稳定替代</a></li><li><a href="#stable-operator-for-open-ended-ranges">用于开区间操作的稳定 <code>..&lt;</code> 操作符</a></li><li><a href="#new-common-function-to-get-regex-capture-group-by-name">通过名称获取正则表达式捕获组的新公共函数</a></li><li><a href="#new-path-utility-to-create-parent-directories">创建父目录的新路径工具</a></li><li><a href="#preview-of-the-gradle-configuration-cache">Kotlin Multiplatform 中 Gradle 配置缓存的预览</a></li><li><a href="#changes-to-android-target-support">Kotlin Multiplatform 中 Android 目标平台支持的变化</a></li><li><a href="#preview-of-custom-memory-allocator">Kotlin/Native 中自定义内存分配器的预览</a></li><li><a href="#library-linkage-in-kotlin-native">Kotlin/Native 中的库链接</a></li><li><a href="#size-related-optimizations">Kotlin/Wasm 中的大小相关优化</a></li></ul><p>你还可以在此视频中找到更新的简要概述：</p>',5)),n(p,{src:"https://www.youtube.com/v/fvwTZc-dxsM",title:"What's new in Kotlin 1.9.0"}),s[3]||(s[3]=l(`<h2 id="ide-支持" tabindex="-1">IDE 支持 <a class="header-anchor" href="#ide-支持" aria-label="Permalink to &quot;IDE 支持&quot;">​</a></h2><p>支持 1.9.0 的 Kotlin 插件适用于：</p><table tabindex="0"><thead><tr><th>IDE</th><th>支持的版本</th></tr></thead><tbody><tr><td>IntelliJ IDEA</td><td>2022.3.x, 2023.1.x</td></tr><tr><td>Android Studio</td><td>Giraffe (223), Hedgehog (231)*</td></tr></tbody></table><p>*Kotlin 1.9.0 插件将随 Android Studio Giraffe (223) 和 Hedgehog (231) 的即将发布版本一同提供。</p><p>Kotlin 1.9.0 插件将随 IntelliJ IDEA 2023.2 的即将发布版本一同提供。</p><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>要下载 Kotlin artifact 和依赖项，请<a href="#configure-gradle-settings">配置你的 Gradle 设置</a>以使用 Maven Central Repository。</p></div><h2 id="新的-kotlin-k2-编译器更新" tabindex="-1">新的 Kotlin K2 编译器更新 <a class="header-anchor" href="#新的-kotlin-k2-编译器更新" aria-label="Permalink to &quot;新的 Kotlin K2 编译器更新&quot;">​</a></h2><p>JetBrains 的 Kotlin 团队持续稳定 K2 编译器，而 1.9.0 版本引入了进一步的改进。面向 JVM 的 K2 编译器现在已进入 <strong>Beta</strong> 阶段。</p><p>现在还为 Kotlin/Native 和多平台项目提供了基本支持。</p><h3 id="kapt-编译器插件与-k2-编译器的兼容性" tabindex="-1">kapt 编译器插件与 K2 编译器的兼容性 <a class="header-anchor" href="#kapt-编译器插件与-k2-编译器的兼容性" aria-label="Permalink to &quot;kapt 编译器插件与 K2 编译器的兼容性&quot;">​</a></h3><p>你可以在你的项目中将 <a href="/kotlin/kapt">kapt 插件</a>与 K2 编译器一起使用，但有一些限制。尽管将 <code>languageVersion</code> 设置为 <code>2.0</code>，kapt 编译器插件仍会使用旧的编译器。</p><p>如果你在 <code>languageVersion</code> 设置为 <code>2.0</code> 的项目中执行 kapt 编译器插件，kapt 将自动切换到 <code>1.9</code> 并禁用特定的版本兼容性检测。此行为等同于包含以下命令实参：</p><ul><li><code>-Xskip-metadata-version-check</code></li><li><code>-Xskip-prerelease-check</code></li><li><code>-Xallow-unstable-dependencies</code></li></ul><p>这些检测仅对 kapt 任务禁用。所有其他编译任务将继续使用新的 K2 编译器。</p><p>如果你在使用 kapt 和 K2 编译器时遇到任何问题，请向我们的<a href="http://kotl.in/issue" target="_blank" rel="noreferrer">问题跟踪器</a>报告。</p><h3 id="在你的项目中尝试-k2-编译器" tabindex="-1">在你的项目中尝试 K2 编译器 <a class="header-anchor" href="#在你的项目中尝试-k2-编译器" aria-label="Permalink to &quot;在你的项目中尝试 K2 编译器&quot;">​</a></h3><p>从 1.9.0 版本开始，直到 Kotlin 2.0 发布，你可以通过将 <code>kotlin.experimental.tryK2=true</code> 这个 Gradle 属性添加到你的 <code>gradle.properties</code> 文件中来轻松测试 K2 编译器。你也可以运行以下命令：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> assemble</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Pkotlin.experimental.tryK2=true</span></span></code></pre></div><p>此 Gradle 属性会自动将语言版本设置为 2.0，并更新构建报告，其中包含使用 K2 编译器编译的 Kotlin 任务数量与当前编译器相比的信息：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>##### &#39;kotlin.experimental.tryK2&#39; results (Kotlin/Native not checked) #####</span></span>
<span class="line"><span>:lib:compileKotlin: 2.0 language version</span></span>
<span class="line"><span>:app:compileKotlin: 2.0 language version</span></span>
<span class="line"><span>##### 100% (2/2) tasks have been compiled with Kotlin 2.0 #####</span></span></code></pre></div><h3 id="gradle-构建报告" tabindex="-1">Gradle 构建报告 <a class="header-anchor" href="#gradle-构建报告" aria-label="Permalink to &quot;Gradle 构建报告&quot;">​</a></h3><p><a href="/kotlin/gradle-compilation-and-caches#build-reports">Gradle 构建报告</a>现在显示是使用了当前编译器还是 K2 编译器来编译代码。在 Kotlin 1.9.0 中，你可以在 <a href="https://scans.gradle.com/" target="_blank" rel="noreferrer">Gradle 构建扫描</a>中查看此信息：</p><p><img src="`+o+'" alt="Gradle 构建扫描 - K1" width="700"></p><p><img src="'+d+`" alt="Gradle 构建扫描 - K2" width="700"></p><p>你还可以在构建报告中找到项目中使用的 Kotlin 版本：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Task info:</span></span>
<span class="line"><span>  Kotlin language version: 1.9</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>如果你使用 Gradle 8.0，你可能会遇到一些构建报告问题，尤其是在启用 Gradle 配置缓存时。这是一个已知问题，已在 Gradle 8.1 及更高版本中修复。</p></div><h3 id="当前-k2-编译器限制" tabindex="-1">当前 K2 编译器限制 <a class="header-anchor" href="#当前-k2-编译器限制" aria-label="Permalink to &quot;当前 K2 编译器限制&quot;">​</a></h3><p>在你的 Gradle 项目中启用 K2 伴随着某些限制，这可能会影响在以下情况下使用 Gradle 8.3 以下版本的项目：</p><ul><li>从 <code>buildSrc</code> 编译源代码。</li><li>在包含的构建中编译 Gradle 插件。</li><li>如果在 Gradle 8.3 以下版本的项目中使用其他 Gradle 插件，则编译这些插件。</li><li>构建 Gradle 插件依赖项。</li></ul><p>如果你遇到上述任何问题，可以采取以下步骤来解决：</p><ul><li>为 <code>buildSrc</code>、任何 Gradle 插件及其依赖项设置语言版本：</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        languageVersion.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_1_9)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        apiVersion.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_1_9)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>将项目中的 Gradle 版本更新到 8.3（一旦可用）。</li></ul><h3 id="留下你对新-k2-编译器的反馈" tabindex="-1">留下你对新 K2 编译器的反馈 <a class="header-anchor" href="#留下你对新-k2-编译器的反馈" aria-label="Permalink to &quot;留下你对新 K2 编译器的反馈&quot;">​</a></h3><p>我们期待收到你的任何反馈！</p><ul><li>直接向 K2 开发者提供反馈：加入 Kotlin 的 Slack – <a href="https://surveys.jetbrains.com/s3/kotlin-slack-sign-up" target="_blank" rel="noreferrer">获取邀请</a>并加入 <a href="https://kotlinlang.slack.com/archives/C03PK0PE257" target="_blank" rel="noreferrer">#k2-early-adopters</a> 频道。</li><li>向我们的<a href="https://kotl.in/issue" target="_blank" rel="noreferrer">问题跟踪器</a>报告你在新 K2 编译器中遇到的任何问题。</li><li><a href="https://www.jetbrains.com/help/idea/settings-usage-statistics.html" target="_blank" rel="noreferrer">启用 <strong>发送使用情况统计信息</strong> 选项</a>以允许 JetBrains 收集 K2 使用情况的匿名数据。</li></ul><h2 id="语言" tabindex="-1">语言 <a class="header-anchor" href="#语言" aria-label="Permalink to &quot;语言&quot;">​</a></h2><p>在 Kotlin 1.9.0 中，我们正在稳定一些早期引入的新语言特性：</p><ul><li><a href="#stable-replacement-of-the-enum-class-values-function">enum class values 函数的替代</a></li><li><a href="#stable-data-objects-for-symmetry-with-data-classes">data object 与 data class 的对称性</a></li><li><a href="#support-for-secondary-constructors-with-bodies-in-inline-value-classes">支持 inline value class 中带函数体的次构造函数</a></li></ul><h3 id="enum-class-values-函数的稳定替代" tabindex="-1">enum class values 函数的稳定替代 <a class="header-anchor" href="#enum-class-values-函数的稳定替代" aria-label="Permalink to &quot;enum class values 函数的稳定替代&quot;">​</a></h3><p>在 1.8.20 中，enum class 的 <code>entries</code> 属性作为一项实验性的特性引入。<code>entries</code> 属性是合成 <code>values()</code> 函数的一种现代化且高性能的替代。在 1.9.0 中，<code>entries</code> 属性已稳定。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>values()</code> 函数仍然受支持，但我们建议你使用 <code>entries</code> 属性。</p></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">enum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> colorName: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rgb: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    RED</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Red&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#FF0000&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ORANGE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Orange&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#FF7F00&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    YELLOW</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Yellow&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#FFFF00&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> findByRgb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rgb: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Color.entries.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">find</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.rgb </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rgb }</span></span></code></pre></div><p>关于 enum class 的 <code>entries</code> 属性的更多信息，请参见 <a href="/kotlin/whatsnew1820#a-modern-and-performant-replacement-of-the-enum-class-values-function">Kotlin 1.8.20 新特性</a>。</p><h3 id="data-object-与-data-class-的稳定对称性" tabindex="-1">data object 与 data class 的稳定对称性 <a class="header-anchor" href="#data-object-与-data-class-的稳定对称性" aria-label="Permalink to &quot;data object 与 data class 的稳定对称性&quot;">​</a></h3><p>在 <a href="/kotlin/whatsnew1820#preview-of-data-objects-for-symmetry-with-data-classes">Kotlin 1.8.20</a> 中引入的 data object 声明现在已稳定。这包括为与 data class 对称而添加的函数：<code>toString()</code>、<code>equals()</code> 和 <code>hashCode()</code>。</p><p>此特性对于 <code>sealed</code> 层次结构（例如 <code>sealed class</code> 或 <code>sealed interface</code> 层次结构）特别有用，因为 <code>data object</code> 声明可以方便地与 <code>data class</code> 声明一起使用。在此示例中，将 <code>EndOfFile</code> 声明为 <code>data object</code> 而不是普通 <code>object</code> 意味着它会自动拥有 <code>toString()</code> 函数，而无需手动覆盖。这保持了与伴随的 data class 定义的对称性。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">sealed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ReadResult</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> number: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ReadResult</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> text: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ReadResult</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EndOfFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ReadResult</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Number(number=7)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(EndOfFile) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// EndOfFile</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>更多信息，请参见 <a href="/kotlin/whatsnew1820#preview-of-data-objects-for-symmetry-with-data-classes">Kotlin 1.8.20 新特性</a>。</p><h3 id="支持-inline-value-class-中带函数体的次构造函数" tabindex="-1">支持 inline value class 中带函数体的次构造函数 <a class="header-anchor" href="#支持-inline-value-class-中带函数体的次构造函数" aria-label="Permalink to &quot;支持 inline value class 中带函数体的次构造函数&quot;">​</a></h3><p>从 Kotlin 1.9.0 开始，<a href="/kotlin/inline-classes">inline value class</a> 中使用带函数体的次构造函数默认可用：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JvmInline</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fullName: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 允许自 Kotlin 1.4.30 起：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        check</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fullName.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isNotBlank</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;Full name shouldn&#39;t be empty&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 允许自 Kotlin 1.9.0 起默认使用：</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, lastName: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$name</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> $lastName</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        check</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lastName.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isNotBlank</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;Last name shouldn&#39;t be empty&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>以前，Kotlin 只允许 inline class 中有公共的主构造函数。因此，不可能封装底层值或创建表示某些受限值的 inline class。</p><p>随着 Kotlin 的发展，这些问题得到了修复。Kotlin 1.4.30 取消了对 <code>init</code> 代码块的限制，然后 Kotlin 1.8.20 带来了带函数体的次构造函数的预览。它们现在默认可用。关于 Kotlin inline class 的更多发展信息，请参阅<a href="https://github.com/Kotlin/KEEP/blob/master/proposals/inline-classes.md" target="_blank" rel="noreferrer">这个 KEEP</a>。</p><h2 id="kotlin-jvm" tabindex="-1">Kotlin/JVM <a class="header-anchor" href="#kotlin-jvm" aria-label="Permalink to &quot;Kotlin/JVM&quot;">​</a></h2><p>从 1.9.0 版本开始，编译器可以生成与 JVM 20 对应的字节码版本的类。此外，<code>JvmDefault</code> 注解和旧版 <code>-Xjvm-default</code> 模式的弃用仍在继续。</p><h3 id="jvmdefault-注解和旧版-xjvm-default-模式的弃用" tabindex="-1">JvmDefault 注解和旧版 -Xjvm-default 模式的弃用 <a class="header-anchor" href="#jvmdefault-注解和旧版-xjvm-default-模式的弃用" aria-label="Permalink to &quot;JvmDefault 注解和旧版 -Xjvm-default 模式的弃用&quot;">​</a></h3><p>从 Kotlin 1.5 开始，<code>JvmDefault</code> 注解的使用已被弃用，取而代之的是新的 <code>-Xjvm-default</code> 模式：<code>all</code> 和 <code>all-compatibility</code>。随着 Kotlin 1.4 中引入 <code>JvmDefaultWithoutCompatibility</code> 和 Kotlin 1.6 中引入 <code>JvmDefaultWithCompatibility</code>，这些模式提供了对 <code>DefaultImpls</code> 类生成的全面控制，确保与旧版 Kotlin 代码的无缝兼容性。</p><p>因此，在 Kotlin 1.9.0 中，<code>JvmDefault</code> 注解不再具有任何意义并已被标记为弃用，导致错误。它最终将从 Kotlin 中移除。</p><h2 id="kotlin-native" tabindex="-1">Kotlin/Native <a class="header-anchor" href="#kotlin-native" aria-label="Permalink to &quot;Kotlin/Native&quot;">​</a></h2><p>除了其他改进之外，此版本还进一步改进了 <a href="/kotlin/native-memory-manager">Kotlin/Native 内存管理器</a>，这应该会增强其鲁棒性和性能：</p><ul><li><a href="#preview-of-custom-memory-allocator">自定义内存分配器的预览</a></li><li><a href="#objective-c-or-swift-object-deallocation-hook-on-the-main-thread">主线程上的 Objective-C 或 Swift 对象释放钩子</a></li><li><a href="#no-object-initialization-when-accessing-constant-values-in-kotlin-native">在 Kotlin/Native 中访问常量值时无对象初始化</a></li><li><a href="#ability-to-configure-standalone-mode-for-ios-simulator-tests-in-kotlin-native">在 Kotlin/Native 中为 iOS 模拟器测试配置独立模式的能力</a></li><li><a href="#library-linkage-in-kotlin-native">Kotlin/Native 中的库链接</a></li></ul><h3 id="自定义内存分配器的预览" tabindex="-1">自定义内存分配器的预览 <a class="header-anchor" href="#自定义内存分配器的预览" aria-label="Permalink to &quot;自定义内存分配器的预览&quot;">​</a></h3><p>Kotlin 1.9.0 引入了自定义内存分配器的预览。其分配系统改善了 <a href="/kotlin/native-memory-manager">Kotlin/Native 内存管理器</a>的运行时性能。</p><p>Kotlin/Native 中当前的对象分配系统使用通用分配器，该分配器不具备高效垃圾回收的功能。为了弥补这一点，它在垃圾收集器 (GC) 将所有已分配对象合并成一个链表之前，维护着线程局部链表，该链表可在清理期间进行迭代。这种方法存在几个性能缺点：</p><ul><li>清理顺序缺乏内存局部性，并且通常会导致分散的内存访问模式，从而可能导致性能问题。</li><li>链表需要为每个对象额外的内存，这会增加内存使用量，尤其是在处理许多小对象时。</li><li>已分配对象的单个链表使得并行清理变得困难，当修改线程分配对象的速度快于 GC 线程收集它们的速度时，这可能会导致内存使用问题。</li></ul><p>为了解决这些问题，Kotlin 1.9.0 引入了自定义分配器的预览。它将系统内存划分为页，允许以连续顺序进行独立清理。每次分配都成为页内的内存块，并且页会跟踪块大小。不同的页类型针对各种分配大小进行了优化。内存块的连续排列确保了对所有已分配块的高效迭代。</p><p>当线程分配内存时，它会根据分配大小搜索合适的页。线程维护着一组用于不同大小类别的页。通常，给定大小的当前页可以容纳分配。如果不能，线程会从共享分配空间请求不同的页。此页可能已经可用，需要清理，或者应该首先创建。</p><p>新的分配器允许同时拥有多个独立的分配空间，这将使 Kotlin 团队能够尝试不同的页布局，以进一步提高性能。</p><p>有关新分配器设计的更多信息，请参阅此 <a href="https://github.com/JetBrains/kotlin/blob/master/kotlin-native/runtime/src/alloc/custom/README.md" target="_blank" rel="noreferrer">README</a>。</p><h4 id="如何启用" tabindex="-1">如何启用 <a class="header-anchor" href="#如何启用" aria-label="Permalink to &quot;如何启用&quot;">​</a></h4><p>添加 <code>-Xallocator=custom</code> 编译器选项：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    macosX64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;native&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        binaries.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        compilations.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configureEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            compilerOptions.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                freeCompilerArgs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xallocator=custom&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="留下反馈" tabindex="-1">留下反馈 <a class="header-anchor" href="#留下反馈" aria-label="Permalink to &quot;留下反馈&quot;">​</a></h4><p>我们非常感谢你在 <a href="https://youtrack.jetbrains.com/issue/KT-55364/Implement-custom-allocator-for-Kotlin-Native" target="_blank" rel="noreferrer">YouTrack</a> 中提供反馈，以改进自定义分配器。</p><h3 id="主线程上的-objective-c-或-swift-对象释放钩子" tabindex="-1">主线程上的 Objective-C 或 Swift 对象释放钩子 <a class="header-anchor" href="#主线程上的-objective-c-或-swift-对象释放钩子" aria-label="Permalink to &quot;主线程上的 Objective-C 或 Swift 对象释放钩子&quot;">​</a></h3><p>从 Kotlin 1.9.0 开始，如果 Objective-C 或 Swift 对象在主线程上传递给 Kotlin，则 Objective-C 或 Swift 对象释放钩子将在主线程上调用。<a href="/kotlin/native-memory-manager">Kotlin/Native 内存管理器</a>以前处理 Objective-C 对象引用的方式可能导致内存泄漏。我们相信新行为将提高内存管理器的鲁棒性。</p><p>考虑一个在 Kotlin 代码中被引用的 Objective-C 对象，例如，作为实参传递，由函数返回，或从集合中检索。在这种情况下，Kotlin 创建自己的对象，该对象持有对 Objective-C 对象的引用。当 Kotlin 对象被释放时，Kotlin/Native 运行时调用 <code>objc_release</code> 函数，该函数释放该 Objective-C 引用。</p><p>以前，Kotlin/Native 内存管理器在特殊的 GC 线程上运行 <code>objc_release</code>。如果它是最后一个对象引用，对象将被释放。当 Objective-C 对象具有自定义释放钩子（例如 Objective-C 中的 <code>dealloc</code> 方法或 Swift 中的 <code>deinit</code> 代码块），并且这些钩子期望在特定线程上调用时，可能会出现问题。</p><p>由于主线程上的对象钩子通常期望在那里被调用，Kotlin/Native 运行时现在也在主线程上调用 <code>objc_release</code>。它应该涵盖 Objective-C 对象在主线程上传递给 Kotlin，并在那里创建 Kotlin 对等对象的情况。这仅在主调度队列被处理时才有效，这对于常规 UI 应用程序是这种情况。当它不是主队列或对象在非主线程上传递给 Kotlin 时，<code>objc_release</code> 像以前一样在特殊的 GC 线程上调用。</p><h4 id="如何选择退出" tabindex="-1">如何选择退出 <a class="header-anchor" href="#如何选择退出" aria-label="Permalink to &quot;如何选择退出&quot;">​</a></h4><p>如果你遇到问题，可以在 <code>gradle.properties</code> 文件中使用以下选项禁用此行为：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.native.binary.objcDisposeOnMain=false</span></span></code></pre></div><p>请随时向我们的<a href="https://kotl.in/issue" target="_blank" rel="noreferrer">问题跟踪器</a>报告此类情况。</p><h3 id="在-kotlin-native-中访问常量值时无对象初始化" tabindex="-1">在 Kotlin/Native 中访问常量值时无对象初始化 <a class="header-anchor" href="#在-kotlin-native-中访问常量值时无对象初始化" aria-label="Permalink to &quot;在 Kotlin/Native 中访问常量值时无对象初始化&quot;">​</a></h3><p>从 Kotlin 1.9.0 开始，Kotlin/Native 后端在访问 <code>const val</code> 字段时不会初始化对象：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;side effect!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MyObject.y) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 首次访问时无初始化</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MyObject    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 发生初始化</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x.y)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>此行为现在与 Kotlin/JVM 统一，其实现与 Java 保持一致，在这种情况下永远不会初始化对象。由于此更改，你还可以预期你的 Kotlin/Native 项目的性能会得到一些提高。</p><h3 id="在-kotlin-native-中为-ios-模拟器测试配置独立模式的能力" tabindex="-1">在 Kotlin/Native 中为 iOS 模拟器测试配置独立模式的能力 <a class="header-anchor" href="#在-kotlin-native-中为-ios-模拟器测试配置独立模式的能力" aria-label="Permalink to &quot;在 Kotlin/Native 中为 iOS 模拟器测试配置独立模式的能力&quot;">​</a></h3><p>默认情况下，在运行 Kotlin/Native 的 iOS 模拟器测试时，使用 <code>--standalone</code> 标志来避免手动模拟器启动和关闭。在 1.9.0 中，你现在可以通过 <code>standalone</code> 属性来配置是否在 Gradle 任务中使用此标志。默认情况下，使用 <code>--standalone</code> 标志，因此独立模式是启用的。</p><p>以下是禁用 <code>standalone</code> 模式在 <code>build.gradle.kts</code> 文件中的示例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tasks.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">org</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jetbrains</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gradle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">targets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">native</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tasks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KotlinNativeSimulatorTest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configureEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    standalone.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>如果你禁用独立模式，则必须手动启动模拟器。要从 CLI 启动模拟器，你可以使用以下命令： <code>shell /usr/bin/xcrun simctl boot &lt;DeviceId&gt; </code></p></div><h3 id="kotlin-native-中的库链接" tabindex="-1">Kotlin/Native 中的库链接 <a class="header-anchor" href="#kotlin-native-中的库链接" aria-label="Permalink to &quot;Kotlin/Native 中的库链接&quot;">​</a></h3><p>从 Kotlin 1.9.0 开始，Kotlin/Native 编译器处理 Kotlin 库中的链接问题的方式与 Kotlin/JVM 相同。如果某个第三方 Kotlin 库的作者在另一个第三方 Kotlin 库使用的实验性 API 中进行了不兼容的更改，你可能会面临此类问题。</p><p>现在，在第三方 Kotlin 库之间存在链接问题时，构建不会在编译期间失败。相反，你只会在运行时遇到这些错误，这与在 JVM 上完全相同。</p><p>Kotlin/Native 编译器每次检测到库链接问题时都会报告警告。你可以在编译日志中找到此类警告，例如：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>No function found for symbol &#39;org.samples/MyRemovedClass.doSomething|3657632771909858561[0]&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Can not get instance of singleton &#39;MyEnumClass.REMOVED_ENTRY&#39;: No enum entry found for symbol &#39;org.samples/MyEnumClass.REMOVED_ENTRY|null[0]&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Function &#39;getMyRemovedClass&#39; can not be called: Function uses unlinked class symbol &#39;org.samples/MyRemovedClass|null[0]&#39;</span></span></code></pre></div><p>你可以进一步配置甚至禁用项目中的此行为：</p><ul><li>如果你不想在编译日志中看到这些警告，请使用 <code>-Xpartial-linkage-loglevel=INFO</code> 编译器选项来抑制它们。</li><li>还可以使用 <code>-Xpartial-linkage-loglevel=ERROR</code> 将报告警告的严重性提升为编译错误。在这种情况下，编译将失败，你将在编译日志中看到所有错误。使用此选项可以更仔细地检查链接问题。</li><li>如果你遇到此功能的意外问题，你可以随时使用 <code>-Xpartial-linkage=disable</code> 编译器选项选择退出。请随时向我们的<a href="https://kotl.in/issue" target="_blank" rel="noreferrer">问题跟踪器</a>报告此类情况。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 通过 Gradle 构建文件传递编译器选项的示例。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    macosX64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;native&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        binaries.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        compilations.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configureEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            compilerOptions.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // 抑制链接警告：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                freeCompilerArgs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xpartial-linkage-loglevel=INFO&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // 将链接警告提升为错误：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                freeCompilerArgs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xpartial-linkage-loglevel=ERROR&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // 完全禁用此特性：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                freeCompilerArgs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xpartial-linkage=disable&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="用于-c-互操作隐式整数转换的编译器选项" tabindex="-1">用于 C 互操作隐式整数转换的编译器选项 <a class="header-anchor" href="#用于-c-互操作隐式整数转换的编译器选项" aria-label="Permalink to &quot;用于 C 互操作隐式整数转换的编译器选项&quot;">​</a></h3><p>我们为 C 互操作引入了一个编译器选项，允许你使用隐式整数转换。经过仔细考虑，我们引入了此编译器选项以防止意外使用，因为此功能仍有改进空间，我们的目标是提供最高质量的 API。</p><p>在此代码示例中，即使 <a href="https://developer.apple.com/documentation/foundation/nscalendar/options" target="_blank" rel="noreferrer"><code>options</code></a> 具有无符号类型 <code>UInt</code> 且 <code>0</code> 为有符号，隐式整数转换也允许 <code>options = 0</code>。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> today </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NSDate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tomorrow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NSCalendar.currentCalendar.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dateByAddingUnit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    unit </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NSCalendarUnitDay,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    toDate </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> today,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    options </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>要将隐式转换与 native 互操作库一起使用，请使用 <code>-XXLanguage:+ImplicitSignedToUnsignedIntegerConversion</code> 编译器选项。</p><p>你可以在 Gradle 的 <code>build.gradle.kts</code> 文件中进行此配置：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tasks.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">org</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jetbrains</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gradle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tasks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KotlinNativeCompile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configureEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    compilerOptions.freeCompilerArgs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;-XXLanguage:+ImplicitSignedToUnsignedIntegerConversion&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="kotlin-multiplatform" tabindex="-1">Kotlin Multiplatform <a class="header-anchor" href="#kotlin-multiplatform" aria-label="Permalink to &quot;Kotlin Multiplatform&quot;">​</a></h2><p>Kotlin Multiplatform 在 1.9.0 中获得了一些显著更新，旨在改善你的开发者体验：</p><ul><li><a href="#changes-to-android-target-support">Android 目标平台支持的变化</a></li><li><a href="#new-android-source-set-layout-enabled-by-default">新 Android 源代码集布局默认启用</a></li><li><a href="#preview-of-the-gradle-configuration-cache">多平台项目中 Gradle 配置缓存的预览</a></li></ul><h3 id="android-目标平台支持的变化" tabindex="-1">Android 目标平台支持的变化 <a class="header-anchor" href="#android-目标平台支持的变化" aria-label="Permalink to &quot;Android 目标平台支持的变化&quot;">​</a></h3><p>我们继续努力稳定 Kotlin Multiplatform。重要的一步是为 Android 目标平台提供一流的支持。我们很高兴地宣布，未来 Google 的 Android 团队将提供自己的 Gradle 插件来支持 Kotlin Multiplatform 中的 Android。</p><p>为了为 Google 的新解决方案铺平道路，我们在 1.9.0 中重命名了当前 Kotlin DSL 中的 <code>android</code> 代码块。请将构建脚本中所有出现的 <code>android</code> 代码块更改为 <code>androidTarget</code>。这是一个临时更改，是为 Google 即将推出的 DSL 释放 <code>android</code> 名称所必需的。</p><p>Google 插件将是多平台项目中与 Android 配合使用的首选方式。当它准备就绪时，我们将提供必要的迁移说明，以便你能够像以前一样使用简短的 <code>android</code> 名称。</p><h3 id="新-android-源代码集布局默认启用" tabindex="-1">新 Android 源代码集布局默认启用 <a class="header-anchor" href="#新-android-源代码集布局默认启用" aria-label="Permalink to &quot;新 Android 源代码集布局默认启用&quot;">​</a></h3><p>从 Kotlin 1.9.0 开始，新的 Android 源代码集布局是默认设置。它取代了以前的目录命名方案，该方案在多个方面令人困惑。新布局具有许多优点：</p><ul><li>简化的类型语义 – 新的 Android 源代码布局提供了清晰一致的命名约定，有助于区分不同类型的源代码集。</li><li>改进的源代码目录布局 – 使用新布局，<code>SourceDirectories</code> 的排列变得更加连贯，从而更易于组织代码和查找源文件。</li><li>清晰的 Gradle 配置命名方案 – 该方案现在在 <code>KotlinSourceSets</code> 和 <code>AndroidSourceSets</code> 中都更加一致和可预测。</li></ul><p>新布局需要 Android Gradle 插件版本 7.0 或更高版本，并支持 Android Studio 2022.3 及更高版本。请参阅我们的<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-android-layout.html" target="_blank" rel="noreferrer">迁移指南</a>以在你的 <code>build.gradle(.kts)</code> 文件中进行必要的更改。</p><h3 id="gradle-配置缓存的预览" tabindex="-1">Gradle 配置缓存的预览 <a class="header-anchor" href="#gradle-配置缓存的预览" aria-label="Permalink to &quot;Gradle 配置缓存的预览&quot;">​</a></h3>`,121)),n(k,{name:"preview-of-gradle-configuration-cache"}),s[4]||(s[4]=l('<p>Kotlin 1.9.0 支持多平台库中的 <a href="https://docs.gradle.org/current/userguide/configuration_cache.html" target="_blank" rel="noreferrer">Gradle 配置缓存</a>。如果你是库作者，你已经可以从改进的构建性能中受益。</p><p>Gradle 配置缓存通过重用配置阶段的结果来加快构建过程，以便后续构建。该特性自 Gradle 8.1 起已稳定。要启用它，请遵循 <a href="https://docs.gradle.org/current/userguide/configuration_cache.html#config_cache:usage" target="_blank" rel="noreferrer">Gradle 文档</a>中的说明。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Kotlin Multiplatform 插件仍然不支持与 Xcode 集成任务或 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-cocoapods-dsl-reference.html" target="_blank" rel="noreferrer">Kotlin CocoaPods Gradle 插件</a>一起使用 Gradle 配置缓存。我们预计将在未来的 Kotlin 版本中添加此特性。</p></div><h2 id="kotlin-wasm" tabindex="-1">Kotlin/Wasm <a class="header-anchor" href="#kotlin-wasm" aria-label="Permalink to &quot;Kotlin/Wasm&quot;">​</a></h2><p>Kotlin 团队继续试验新的 Kotlin/Wasm 目标平台。此版本引入了一些性能和<a href="#size-related-optimizations">大小相关优化</a>，以及 <a href="#updates-in-javascript-interop">JavaScript 互操作中的更新</a>。</p><h3 id="大小相关优化" tabindex="-1">大小相关优化 <a class="header-anchor" href="#大小相关优化" aria-label="Permalink to &quot;大小相关优化&quot;">​</a></h3><p>Kotlin 1.9.0 为 WebAssembly (Wasm) 项目引入了显著的大小改进。比较两个“Hello World”项目，Kotlin 1.9.0 中 Wasm 的代码占用空间现在比 Kotlin 1.8.20 小 10 倍以上。</p><p><img src="'+E+`" alt="Kotlin/Wasm 大小相关优化" width="700"></p><p>这些大小优化带来了更有效的资源利用和在使用 Kotlin 代码面向 Wasm 平台时的改进性能。</p><h3 id="javascript-互操作中的更新" tabindex="-1">JavaScript 互操作中的更新 <a class="header-anchor" href="#javascript-互操作中的更新" aria-label="Permalink to &quot;JavaScript 互操作中的更新&quot;">​</a></h3><p>此 Kotlin 更新引入了 Kotlin 和 JavaScript 之间针对 Kotlin/Wasm 互操作的更改。由于 Kotlin/Wasm 是一个<a href="/kotlin/components-stability#stability-levels-explained">实验性的</a>特性，因此对其互操作性存在某些限制。</p><h4 id="dynamic-类型的限制" tabindex="-1"><code>Dynamic</code> 类型的限制 <a class="header-anchor" href="#dynamic-类型的限制" aria-label="Permalink to &quot;\`Dynamic\` 类型的限制&quot;">​</a></h4><p>从 1.9.0 版本开始，Kotlin 不再支持在 Kotlin/Wasm 中使用 <code>Dynamic</code> 类型。现在弃用它，转而使用新的通用 <code>JsAny</code> 类型，它有助于 JavaScript 互操作。</p><p>更多详情，请参见 <a href="/kotlin/wasm-js-interop">Kotlin/Wasm 与 JavaScript 互操作</a>文档。</p><h4 id="非外部类型的限制" tabindex="-1">非外部类型的限制 <a class="header-anchor" href="#非外部类型的限制" aria-label="Permalink to &quot;非外部类型的限制&quot;">​</a></h4><p>Kotlin/Wasm 支持在将值传递给 JavaScript 和从 JavaScript 传递值时，对特定 Kotlin 静态类型进行转换。这些受支持的类型包括：</p><ul><li>原生类型，例如有符号数字、<code>Boolean</code> 和 <code>Char</code>。</li><li><code>String</code>。</li><li>函数类型。</li></ul><p>其他类型作为不透明引用传递，没有进行转换，导致 JavaScript 和 Kotlin 子类型之间存在不一致。</p><p>为了解决这个问题，Kotlin 将 JavaScript 互操作限制为一组受良好支持的类型。从 Kotlin 1.9.0 开始，Kotlin/Wasm JavaScript 互操作中只支持外部、原生类型、字符串和函数类型。此外，还引入了一个单独的显式类型 <code>JsReference</code>，用于表示可以在 JavaScript 互操作中使用的 Kotlin/Wasm 对象的句柄。</p><p>更多详情，请参阅 <a href="/kotlin/wasm-js-interop">Kotlin/Wasm 与 JavaScript 互操作</a>文档。</p><h3 id="kotlin-wasm-在-kotlin-playground-中" tabindex="-1">Kotlin/Wasm 在 Kotlin Playground 中 <a class="header-anchor" href="#kotlin-wasm-在-kotlin-playground-中" aria-label="Permalink to &quot;Kotlin/Wasm 在 Kotlin Playground 中&quot;">​</a></h3><p>Kotlin Playground 支持 Kotlin/Wasm 目标平台。 你可以编写、运行和分享你的面向 Kotlin/Wasm 的 Kotlin 代码。<a href="https://pl.kotl.in/HDFAvimga" target="_blank" rel="noreferrer">立即试用！</a></p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>使用 Kotlin/Wasm 需要在你的浏览器中启用实验性特性。 <a href="/kotlin/wasm-troubleshooting">了解如何启用这些特性</a>。</p></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.time.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.time.measureTime</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello from Kotlin/Wasm!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    computeAck</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">tailrec</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(m: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, n: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> when</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(m, n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> computeAck</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(m: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, n: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> res </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> t </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> measureTime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        res </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(m, n)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ack(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">) = \${res}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;duration: \${t.inWholeNanoseconds </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1e6</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">} ms&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="kotlin-js" tabindex="-1">Kotlin/JS <a class="header-anchor" href="#kotlin-js" aria-label="Permalink to &quot;Kotlin/JS&quot;">​</a></h2><p>此版本引入了 Kotlin/JS 的更新，包括旧 Kotlin/JS 编译器的移除、Kotlin/JS Gradle 插件的弃用以及对 ES2015 的实验性支持：</p><ul><li><a href="#removal-of-the-old-kotlin-js-compiler">移除旧版 Kotlin/JS 编译器</a></li><li><a href="#deprecation-of-the-kotlin-js-gradle-plugin">Kotlin/JS Gradle 插件的弃用</a></li><li><a href="#deprecation-of-external-enum">外部枚举的弃用</a></li><li><a href="#experimental-support-for-es2015-classes-and-modules">对 ES2015 类和模块的实验性支持</a></li><li><a href="#changed-default-destination-of-js-production-distribution">JS 生产构件的默认目标路径已更改</a></li><li><a href="#extract-org-w3c-declarations-from-stdlib-js">从 stdlib-js 中提取 org.w3c 声明</a></li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>从 1.9.0 版本开始，<a href="#library-linkage-in-kotlin-native">部分库链接</a>也为 Kotlin/JS 启用。</p></div><h3 id="移除旧版-kotlin-js-编译器" tabindex="-1">移除旧版 Kotlin/JS 编译器 <a class="header-anchor" href="#移除旧版-kotlin-js-编译器" aria-label="Permalink to &quot;移除旧版 Kotlin/JS 编译器&quot;">​</a></h3><p>在 Kotlin 1.8.0 中，我们<a href="/kotlin/whatsnew18#stable-js-ir-compiler-backend">宣布</a>基于 IR 的后端已<a href="/kotlin/components-stability">稳定</a>。从那时起，不指定编译器就成了错误，而使用旧编译器则会导致警告。</p><p>在 Kotlin 1.9.0 中，使用旧后端会导致错误。请按照我们的<a href="/kotlin/js-ir-migration">迁移指南</a>迁移到 IR 编译器。</p><h3 id="kotlin-js-gradle-插件的弃用" tabindex="-1">Kotlin/JS Gradle 插件的弃用 <a class="header-anchor" href="#kotlin-js-gradle-插件的弃用" aria-label="Permalink to &quot;Kotlin/JS Gradle 插件的弃用&quot;">​</a></h3><p>从 Kotlin 1.9.0 开始，<code>kotlin-js</code> Gradle 插件已弃用。我们鼓励你转而使用 <code>kotlin-multiplatform</code> Gradle 插件与 <code>js()</code> 目标平台。</p><p>Kotlin/JS Gradle 插件的功能本质上是重复 <code>kotlin-multiplatform</code> 插件的功能，并在底层共享相同的实现。这种重叠造成了混淆，并增加了 Kotlin 团队的维护负担。</p><p>请参阅我们的 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-compatibility-guide.html#migration-from-kotlin-js-gradle-plugin-to-kotlin-multiplatform-gradle-plugin" target="_blank" rel="noreferrer">Kotlin Multiplatform 兼容性指南</a>以获取迁移说明。如果你发现指南中未涵盖的任何问题，请向我们的<a href="http://kotl.in/issue" target="_blank" rel="noreferrer">问题跟踪器</a>报告。</p><h3 id="外部枚举的弃用" tabindex="-1">外部枚举的弃用 <a class="header-anchor" href="#外部枚举的弃用" aria-label="Permalink to &quot;外部枚举的弃用&quot;">​</a></h3><p>在 Kotlin 1.9.0 中，外部枚举的使用将被弃用，因为存在静态枚举成员（如 <code>entries</code>）无法在 Kotlin 外部存在的问题。我们建议改用带对象子类的外部密封类：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 之前</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">external</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> enum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ExternalEnum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { A, B }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 之后</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">external</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> sealed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ExternalEnum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ExternalEnum</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> B</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ExternalEnum</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>通过切换到带对象子类的外部密封类，你可以实现与外部枚举类似的功能，同时避免与默认方法相关的问题。</p><p>从 Kotlin 1.9.0 开始，外部枚举的使用将被标记为弃用。我们鼓励你更新代码以利用建议的外部密封类实现，以确保兼容性和未来的维护。</p><h3 id="对-es2015-类和模块的实验性支持" tabindex="-1">对 ES2015 类和模块的实验性支持 <a class="header-anchor" href="#对-es2015-类和模块的实验性支持" aria-label="Permalink to &quot;对 ES2015 类和模块的实验性支持&quot;">​</a></h3><p>此版本引入了对 ES2015 模块和 ES2015 类生成的<a href="/kotlin/components-stability#stability-levels-explained">实验性</a>支持：</p><ul><li>模块提供了一种简化代码库和提高可维护性的方法。</li><li>类允许你结合面向对象编程 (OOP) 原则，从而产生更清晰、更直观的代码。</li></ul><p>要启用这些特性，请相应地更新你的 <code>build.gradle.kts</code> 文件：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(IR) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        useEsModules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 启用 ES2015 模块</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        browser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 启用 ES2015 类生成</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tasks.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KotlinJsCompile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configureEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    kotlinOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        useEsClasses </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://262.ecma-international.org/6.0/" target="_blank" rel="noreferrer">在官方文档中了解有关 ES2015 (ECMAScript 2015, ES6) 的更多信息</a>。</p><h3 id="js-生产构件的默认目标路径已更改" tabindex="-1">JS 生产构件的默认目标路径已更改 <a class="header-anchor" href="#js-生产构件的默认目标路径已更改" aria-label="Permalink to &quot;JS 生产构件的默认目标路径已更改&quot;">​</a></h3><p>在 Kotlin 1.9.0 之前，分发目标目录是 <code>build/distributions</code>。然而，这是 Gradle archive 的常见目录。为了解决这个问题，我们在 Kotlin 1.9.0 中将默认分发目标目录更改为：<code>build/dist/&lt;targetName&gt;/&lt;binaryName&gt;</code>。</p><p>例如，<code>productionExecutable</code> 以前在 <code>build/distributions</code> 中。在 Kotlin 1.9.0 中，它位于 <code>build/dist/js/productionExecutable</code> 中。</p><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>如果你有一个使用这些构建结果的流水线，请确保更新目录。</p></div><h3 id="从-stdlib-js-中提取-org-w3c-声明" tabindex="-1">从 stdlib-js 中提取 org.w3c 声明 <a class="header-anchor" href="#从-stdlib-js-中提取-org-w3c-声明" aria-label="Permalink to &quot;从 stdlib-js 中提取 org.w3c 声明&quot;">​</a></h3><p>从 Kotlin 1.9.0 开始，<code>stdlib-js</code> 不再包含 <code>org.w3c</code> 声明。相反，这些声明已移至单独的 Gradle 依赖项。当你在 <code>build.gradle.kts</code> 文件中添加 Kotlin Multiplatform Gradle 插件时，这些声明将自动包含在你的项目中，类似于标准库。</p><p>无需任何手动操作或迁移。必要的调整将自动处理。</p><h2 id="gradle" tabindex="-1">Gradle <a class="header-anchor" href="#gradle" aria-label="Permalink to &quot;Gradle&quot;">​</a></h2><p>Kotlin 1.9.0 带来了新的 Gradle 编译器选项以及更多功能：</p><ul><li><a href="#removed-classpath-property">移除 classpath 属性</a></li><li><a href="#new-compiler-options">新的 Gradle 编译器选项</a></li><li><a href="#project-level-compiler-options-for-kotlin-jvm">Kotlin/JVM 的项目级编译器选项</a></li><li><a href="#compiler-option-for-kotlin-native-module-name">Kotlin/Native 模块名称的编译器选项</a></li><li><a href="#separate-compiler-plugins-for-official-kotlin-libraries">官方 Kotlin 库的独立编译器插件</a></li><li><a href="#incremented-minimum-supported-version">最低支持版本已增加</a></li><li><a href="#kapt-doesn-t-cause-eager-task-creation-in-gradle">kapt 不再导致 Gradle 中的急切任务创建</a></li><li><a href="#programmatic-configuration-of-the-jvm-target-validation-mode">JVM 目标平台验证模式的编程式配置</a></li></ul><h3 id="移除-classpath-属性" tabindex="-1">移除 classpath 属性 <a class="header-anchor" href="#移除-classpath-属性" aria-label="Permalink to &quot;移除 classpath 属性&quot;">​</a></h3><p>在 Kotlin 1.7.0 中，我们宣布开始弃用 <code>KotlinCompile</code> 任务的属性 <code>classpath</code>。在 Kotlin 1.8.0 中，弃用级别提高到 <code>ERROR</code>。在此版本中，我们最终移除了 <code>classpath</code> 属性。所有编译任务现在都应使用 <code>libraries</code> 输入来获取编译所需的库列表。</p><h3 id="新的编译器选项" tabindex="-1">新的编译器选项 <a class="header-anchor" href="#新的编译器选项" aria-label="Permalink to &quot;新的编译器选项&quot;">​</a></h3><p>Kotlin Gradle 插件现在为 opt-ins 和编译器的渐进模式提供了新属性。</p><ul><li>要选择启用新 API，你现在可以使用 <code>optIn</code> 属性并传递字符串列表，例如：<code>optIn.set(listOf(a, b, c))</code>。</li><li>要启用渐进模式，请使用 <code>progressiveMode.set(true)</code>。</li></ul><h3 id="kotlin-jvm-的项目级编译器选项" tabindex="-1">Kotlin/JVM 的项目级编译器选项 <a class="header-anchor" href="#kotlin-jvm-的项目级编译器选项" aria-label="Permalink to &quot;Kotlin/JVM 的项目级编译器选项&quot;">​</a></h3><p>从 Kotlin 1.9.0 开始，<code>kotlin</code> 配置块中新增了一个 <code>compilerOptions</code> 代码块：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        jvmTarget.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(JVM.Target_11)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这使得配置编译器选项变得容易得多。然而，需要注意一些重要细节：</p><ul><li>此配置仅适用于项目级别。</li><li>对于 Android 插件，此代码块配置的对象与以下代码相同：</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">android</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    kotlinOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><code>android.kotlinOptions</code> 和 <code>kotlin.compilerOptions</code> 配置代码块会相互覆盖。构建文件中最后一个（最低的）代码块始终生效。</li><li>如果 <code>moduleName</code> 在项目级别配置，其值在传递给编译器时可能会更改。对于 <code>main</code> 编译而言并非如此，但对于其他类型，例如测试源代码，Kotlin Gradle 插件将添加 <code>_test</code> 后缀。</li><li><code>tasks.withType&lt;KotlinJvmCompile&gt;().configureEach {}</code>（或 <code>tasks.named&lt;KotlinJvmCompile&gt;(&quot;compileKotlin&quot;) { }</code>）内部的配置会覆盖 <code>kotlin.compilerOptions</code> 和 <code>android.kotlinOptions</code>。</li></ul><h3 id="kotlin-native-模块名称的编译器选项" tabindex="-1">Kotlin/Native 模块名称的编译器选项 <a class="header-anchor" href="#kotlin-native-模块名称的编译器选项" aria-label="Permalink to &quot;Kotlin/Native 模块名称的编译器选项&quot;">​</a></h3><p>Kotlin/Native 的 <a href="/kotlin/compiler-reference#module-name-name-native"><code>module-name</code></a> 编译器选项现在在 Kotlin Gradle 插件中易于使用。</p><p>此选项指定编译模块的名称，也可以用于为导出到 Objective-C 的声明添加名称前缀。</p><p>你现在可以直接在 Gradle 构建文件的 <code>compilerOptions</code> 代码块中设置模块名称：</p>`,72)),n(r,{group:"build-script"},{default:e(()=>[n(h,{title:"Kotlin","group-key":"kotlin"},{default:e(()=>s[0]||(s[0]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"named"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"org"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"jetbrains"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"gradle"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"tasks"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"KotlinNativeCompile"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},">("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"compileKotlinLinuxX64"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    compilerOptions"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        moduleName."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"set"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"my-module-name"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),n(h,{title:"Groovy","group-key":"groovy"},{default:e(()=>s[1]||(s[1]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"named("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"compileKotlinLinuxX64"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"org.jetbrains.kotlin.gradle.tasks.KotlinNativeCompile."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"class) {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    compilerOptions {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        moduleName "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "my-module-name"')]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),s[5]||(s[5]=l('<h3 id="官方-kotlin-库的独立编译器插件" tabindex="-1">官方 Kotlin 库的独立编译器插件 <a class="header-anchor" href="#官方-kotlin-库的独立编译器插件" aria-label="Permalink to &quot;官方 Kotlin 库的独立编译器插件&quot;">​</a></h3><p>Kotlin 1.9.0 引入了其官方库的独立编译器插件。以前，编译器插件嵌入在其相应的 Gradle 插件中。这可能导致兼容性问题，如果编译器插件是针对高于 Gradle 构建的 Kotlin 运行时版本的 Kotlin 版本编译的。</p><p>现在，编译器插件作为独立的依赖项添加，因此你将不再面临与旧版本 Gradle 的兼容性问题。新方法的另一个主要优点是新编译器插件可以与其他构建系统（如 <a href="https://bazel.build/" target="_blank" rel="noreferrer">Bazel</a>）一起使用。</p><p>以下是我们现在发布到 Maven Central 的新编译器插件列表：</p><ul><li>kotlin-atomicfu-compiler-plugin</li><li>kotlin-allopen-compiler-plugin</li><li>kotlin-lombok-compiler-plugin</li><li>kotlin-noarg-compiler-plugin</li><li>kotlin-sam-with-receiver-compiler-plugin</li><li>kotlinx-serialization-compiler-plugin</li></ul><p>每个插件都有其 <code>-embeddable</code> 对应项，例如，<code>kotlin-allopen-compiler-plugin-embeddable</code> 旨在与 <code>kotlin-compiler-embeddable</code> artifact 一起使用，这是脚本 artifact 的默认选项。</p><p>Gradle 将这些插件作为编译器实参添加。你无需对现有项目进行任何更改。</p><h3 id="最低支持版本已增加" tabindex="-1">最低支持版本已增加 <a class="header-anchor" href="#最低支持版本已增加" aria-label="Permalink to &quot;最低支持版本已增加&quot;">​</a></h3><p>从 Kotlin 1.9.0 开始，支持的最低 Android Gradle 插件版本是 4.2.2。</p><p>请参阅我们的文档中 <a href="/kotlin/gradle-configure-project#apply-the-plugin">Kotlin Gradle 插件与可用 Gradle 版本的兼容性</a>。</p><h3 id="kapt-不再导致-gradle-中的急切任务创建" tabindex="-1">kapt 不再导致 Gradle 中的急切任务创建 <a class="header-anchor" href="#kapt-不再导致-gradle-中的急切任务创建" aria-label="Permalink to &quot;kapt 不再导致 Gradle 中的急切任务创建&quot;">​</a></h3><p>在 1.9.0 之前，<a href="/kotlin/kapt">kapt 编译器插件</a>通过请求 Kotlin 编译任务的已配置实例，导致急切任务创建。此行为已在 Kotlin 1.9.0 中修复。如果你使用 <code>build.gradle.kts</code> 文件的默认配置，则此更改不会影响你的设置。</p>',12)),s[6]||(s[6]=i("div",{class:"danger custom-block"},[i("p",{class:"custom-block-title"},"WARNING"),i("p",{validate:"false"},[a("如果你使用自定义配置，你的设置将受到不利影响。 例如，如果你使用 Gradle 的任务 API 修改了 "),i("code",null,"KotlinJvmCompile"),a(" 任务，则必须在构建脚本中类似地修改 "),i("code",null,"KaptGenerateStubs"),a(" 任务。 例如，如果你的脚本对 "),i("code",null,"KotlinJvmCompile"),a(" 任务有以下配置： "),i("code",null,'kotlin tasks.named<KotlinJvmCompile>("compileKotlin") { // 你的自定义配置 } '),a(' {validate="false"} 在这种情况下，你需要确保 '),i("code",null,"KaptGenerateStubs"),a(" 任务也包含相同的修改： "),i("code",null,'kotlin tasks.named<KaptGenerateStubs>("kaptGenerateStubs") { // 你的自定义配置 } ')])],-1)),s[7]||(s[7]=l(`<p>更多信息，请参阅我们的 <a href="https://youtrack.jetbrains.com/issue/KT-54468/KAPT-Gradle-plugin-causes-eager-task-creation" target="_blank" rel="noreferrer">YouTrack ticket</a>。</p><h3 id="jvm-目标平台验证模式的编程式配置" tabindex="-1">JVM 目标平台验证模式的编程式配置 <a class="header-anchor" href="#jvm-目标平台验证模式的编程式配置" aria-label="Permalink to &quot;JVM 目标平台验证模式的编程式配置&quot;">​</a></h3><p>在 Kotlin 1.9.0 之前，只有一种方法可以调整 Kotlin 和 Java 之间 JVM 目标平台不兼容性的检测。你必须在 <code>gradle.properties</code> 中为整个项目设置 <code>kotlin.jvm.target.validation.mode=ERROR</code>。</p><p>你现在还可以在 <code>build.gradle.kts</code> 文件中在任务级别进行配置：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tasks.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">named</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">org</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jetbrains</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gradle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tasks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KotlinJvmCompile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;compileKotlin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    jvmTargetValidationMode.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(org.jetbrains.kotlin.gradle.dsl.jvm.JvmTargetValidationMode.WARNING)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="标准库" tabindex="-1">标准库 <a class="header-anchor" href="#标准库" aria-label="Permalink to &quot;标准库&quot;">​</a></h2><p>Kotlin 1.9.0 对标准库进行了一些重大改进：</p><ul><li><a href="#stable-operator-for-open-ended-ranges"><code>..&lt;</code> 操作符</a>和<a href="#stable-time-api">时间 API</a> 已稳定。</li><li><a href="#the-kotlin-native-standard-library-s-journey-towards-stabilization">Kotlin/Native 标准库已彻底审阅和更新</a>。</li><li><a href="#stable-volatile-annotation"><code>@Volatile</code> 注解可在更多平台使用</a>。</li><li><a href="#new-common-function-to-get-regex-capture-group-by-name">有一个<strong>公共</strong>函数可以通过名称获取正则表达式捕获组</a>。</li><li><a href="#new-hexformat-class-to-format-and-parse-hexadecimals">引入了 <code>HexFormat</code> 类来格式化和解析十六进制</a>。</li></ul><h3 id="用于开区间操作的稳定-操作符" tabindex="-1">用于开区间操作的稳定 <code>..&lt;</code> 操作符 <a class="header-anchor" href="#用于开区间操作的稳定-操作符" aria-label="Permalink to &quot;用于开区间操作的稳定 \`..&lt;\` 操作符&quot;">​</a></h3><p>新的 <code>..&lt;</code> 操作符用于开区间操作，它在 <a href="/kotlin/whatsnew1720#preview-of-the-operator-for-creating-open-ended-ranges">Kotlin 1.7.20</a> 中引入并在 1.8.0 中稳定。在 1.9.0 中，用于处理开区间操作的标准库 API 也已稳定。</p><p>我们的研究表明，新的 <code>..&lt;</code> 操作符使得理解开区间的声明变得更容易。如果你使用 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.ranges/until.html" target="_blank" rel="noreferrer"><code>until</code></a> 中缀函数，很容易错误地认为上限是包含在内的。</p><p>以下是使用 <code>until</code> 函数的示例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (number </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> until </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (number </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$number</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 2 4 6 8</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>以下是使用新 <code>..&lt;</code> 操作符的示例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (number </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (number </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$number</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 2 4 6 8</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>从 IntelliJ IDEA 2023.1.1 版本开始，提供了一项新的代码检测功能，当你可以使用 <code>..&lt;</code> 操作符时，它会突出显示。</p></div><p>有关此操作符的更多信息，请参见 <a href="/kotlin/whatsnew1720#preview-of-the-operator-for-creating-open-ended-ranges">Kotlin 1.7.20 新特性</a>。</p><h3 id="稳定时间-api" tabindex="-1">稳定时间 API <a class="header-anchor" href="#稳定时间-api" aria-label="Permalink to &quot;稳定时间 API&quot;">​</a></h3><p>自 1.3.50 以来，我们已经预览了一个新的时间测量 API。该 API 的持续时间部分在 1.6.0 中稳定。在 1.9.0 中，剩余的时间测量 API 也已稳定。</p><p>旧的时间 API 提供了 <code>measureTimeMillis</code> 和 <code>measureNanoTime</code> 函数，它们的使用不直观。尽管它们都以不同的单位测量时间很清楚，但 <code>measureTimeMillis</code> 使用<a href="https://en.wikipedia.org/wiki/Elapsed_real_time" target="_blank" rel="noreferrer">挂钟</a>测量时间，而 <code>measureNanoTime</code> 使用单调时间源并不清楚。新的时间 API 解决了这个问题以及其他问题，使 API 更易于使用。</p><p>使用新的时间 API，你可以轻松地：</p><ul><li>使用单调时间源和所需的时间单位测量代码执行所需的时间。</li><li>标记一个时间点。</li><li>比较并找出两个时间点之间的差异。</li><li>检测自特定时间点以来已经过去了多长时间。</li><li>检测当前时间是否已超过特定时间点。</li></ul><h4 id="测量代码执行时间" tabindex="-1">测量代码执行时间 <a class="header-anchor" href="#测量代码执行时间" aria-label="Permalink to &quot;测量代码执行时间&quot;">​</a></h4><p>要测量代码块执行所需的时间，请使用 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.time/measure-time.html" target="_blank" rel="noreferrer"><code>measureTime</code></a> 内联函数。</p><p>要测量代码块执行所需的时间<strong>并</strong>返回代码块的结果，请使用 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.time/measure-timed-value.html" target="_blank" rel="noreferrer"><code>measureTimedValue</code></a> 内联函数。</p><p>默认情况下，这两个函数都使用单调时间源。但是，如果你想使用实时流逝时间源，你也可以。例如，在 Android 上，默认时间源 <code>System.nanoTime()</code> 只在设备处于活动状态时计算时间。当设备进入深度睡眠时，它会失去对时间的跟踪。为了在设备深度睡眠时跟踪时间，你可以创建一个使用 <a href="https://developer.android.com/reference/android/os/SystemClock#elapsedRealtimeNanos()" target="_blank" rel="noreferrer"><code>SystemClock.elapsedRealtimeNanos()</code></a> 的时间源：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RealtimeMonotonicTimeSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AbstractLongTimeSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DurationUnit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NANOSECONDS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Long</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SystemClock.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">elapsedRealtimeNanos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="标记和测量时间差" tabindex="-1">标记和测量时间差 <a class="header-anchor" href="#标记和测量时间差" aria-label="Permalink to &quot;标记和测量时间差&quot;">​</a></h4><p>要标记一个特定的时间点，请使用 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.time/-time-source/" target="_blank" rel="noreferrer"><code>TimeSource</code></a> 接口和 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.time/-time-source/mark-now.html" target="_blank" rel="noreferrer"><code>markNow()</code></a> 函数来创建一个 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.time/-time-mark/" target="_blank" rel="noreferrer"><code>TimeMark</code></a>。要测量来自同一时间源的 <code>TimeMarks</code> 之间的差异，请使用减法操作符 (<code>-</code>)：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.time.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> timeSource </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TimeSource.Monotonic</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mark1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> timeSource.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">markNow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 睡眠 0.5 秒。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mark2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> timeSource.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">markNow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    repeat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mark3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> timeSource.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">markNow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> elapsed1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mark3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mark1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> elapsed2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mark3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mark2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Measurement 1.\${n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}: elapsed1=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$elapsed1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">, elapsed2=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$elapsed2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">, diff=\${elapsed1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> elapsed2}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 也可以相互比较时间标记。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mark2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mark1) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 为 true，因为 mark2 比 mark1 捕获得晚。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>要检查截止日期是否已过或是否已达到超时，请使用 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.time/-time-mark/has-passed-now.html" target="_blank" rel="noreferrer"><code>hasPassedNow()</code></a> 和 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.time/-time-mark/has-not-passed-now.html" target="_blank" rel="noreferrer"><code>hasNotPassedNow()</code></a> 扩展函数：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.time.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.time.Duration.Companion.seconds</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> timeSource </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TimeSource.Monotonic</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mark1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> timeSource.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">markNow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fiveSeconds: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Duration</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.seconds</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mark2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mark1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fiveSeconds</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 还没过 5 秒</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mark2.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hasPassedNow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // false</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 等待 6 秒</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mark2.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hasPassedNow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="kotlin-native-标准库的稳定化之旅" tabindex="-1">Kotlin/Native 标准库的稳定化之旅 <a class="header-anchor" href="#kotlin-native-标准库的稳定化之旅" aria-label="Permalink to &quot;Kotlin/Native 标准库的稳定化之旅&quot;">​</a></h3><p>随着 Kotlin/Native 标准库的不断发展，我们决定是时候进行一次全面审阅，以确保其符合我们的高标准。作为其中的一部分，我们仔细审阅了<strong>每一个</strong>现有的公共签名。对于每个签名，我们都考虑了它是否：</p><ul><li>具有独特的目的。</li><li>与 Kotin 其他 API 保持一致。</li><li>与 JVM 上的对应项行为相似。</li><li>面向未来。</li></ul><p>基于这些考虑，我们做出了以下决策之一：</p><ul><li>将其稳定。</li><li>使其成为实验性的。</li><li>将其标记为 <code>private</code>。</li><li>修改其行为。</li><li>将其移动到其他位置。</li><li>弃用它。</li><li>将其标记为已废弃。</li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>如果现有签名已： * 移动到另一个包，则该签名仍存在于原始包中，但现在已弃用，弃用级别为 <code>WARNING</code>。IntelliJ IDEA 将在代码检测时自动建议替代项。 * 弃用，则它已弃用，弃用级别为 <code>WARNING</code>。 * 标记为已废弃，则你可以继续使用它，但它将在未来被替换。</p></div><p>我们不会在此处列出审阅的所有结果，但以下是一些亮点：</p><ul><li>我们稳定了 Atomics API。</li><li>我们将 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlinx.cinterop/" target="_blank" rel="noreferrer"><code>kotlinx.cinterop</code></a> 设为实验性的，现在需要不同的 opt-in 才能使用该包。更多信息，请参见<a href="#explicit-c-interoperability-stability-guarantees">显式 C 互操作稳定性保证</a>。</li><li>我们将 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.native.concurrent/-worker/" target="_blank" rel="noreferrer"><code>Worker</code></a> 类及其相关 API 标记为已废弃。</li><li>我们将 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.native/-bit-set/" target="_blank" rel="noreferrer"><code>BitSet</code></a> 类标记为已废弃。</li><li>我们将 <code>kotlin.native.internal</code> 包中的所有 <code>public</code> API 标记为 <code>private</code> 或将其移动到其他包。</li></ul><h4 id="显式-c-互操作稳定性保证" tabindex="-1">显式 C 互操作稳定性保证 <a class="header-anchor" href="#显式-c-互操作稳定性保证" aria-label="Permalink to &quot;显式 C 互操作稳定性保证&quot;">​</a></h4><p>为了保持 API 的高质量，我们决定将 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlinx.cinterop/" target="_blank" rel="noreferrer"><code>kotlinx.cinterop</code></a> 设为实验性的。尽管 <code>kotlinx.cinterop</code> 已经过彻底的尝试和测试，但在我们满意并将其稳定之前，仍有改进空间。我们建议你将此 API 用于互操作，但尽量将其使用限制在项目中的特定区域。一旦我们开始发展此 API 以使其稳定，这将使你的迁移更容易。</p><p>如果你想使用类似 C 的外部 API（例如指针），则必须使用 <code>@OptIn(ExperimentalForeignApi)</code> 选择启用，否则你的代码将无法编译。</p><p>要使用 <code>kotlinx.cinterop</code> 的其余部分（涵盖 Objective-C/Swift 互操作），你必须选择启用 <code>@OptIn(BetaInteropApi)</code>。如果你尝试在没有选择启用的情况下使用此 API，你的代码将编译成功，但编译器会发出警告，提供对你所期望行为的清晰解释。</p><p>有关这些注解的更多信息，请参阅我们的 <a href="https://github.com/JetBrains/kotlin/blob/master/kotlin-native/Interop/Runtime/src/main/kotlin/kotlinx/cinterop/Annotations.kt" target="_blank" rel="noreferrer"><code>Annotations.kt</code></a> 源代码。</p><p>有关此审阅所有更改的更多信息，请参阅我们的 <a href="https://youtrack.jetbrains.com/issue/KT-55765" target="_blank" rel="noreferrer">YouTrack ticket</a>。</p><p>我们感谢你的任何反馈！你可以通过在 <a href="https://youtrack.jetbrains.com/issue/KT-57728" target="_blank" rel="noreferrer">ticket</a> 上评论直接提供反馈。</p><h3 id="稳定-volatile-注解" tabindex="-1">稳定 @Volatile 注解 <a class="header-anchor" href="#稳定-volatile-注解" aria-label="Permalink to &quot;稳定 @Volatile 注解&quot;">​</a></h3><p>如果你用 <code>@Volatile</code> 注解 <code>var</code> 属性，则幕后字段将被标记，以便对该字段的任何读取或写入都是原子的，并且写入总是对其他线程可见。</p><p>在 1.8.20 之前，<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.jvm/-volatile/" target="_blank" rel="noreferrer"><code>kotlin.jvm.Volatile</code> 注解</a> 在公共标准库中可用。然而，此注解仅在 JVM 上有效。如果你在其他平台使用它，它将被忽略，从而导致错误。</p><p>在 1.8.20 中，我们引入了一个实验性的公共注解 <code>kotlin.concurrent.Volatile</code>，你可以在 JVM 和 Kotlin/Native 中预览它。</p><p>在 1.9.0 中，<code>kotlin.concurrent.Volatile</code> 已稳定。如果你在多平台项目中使用 <code>kotlin.jvm.Volatile</code>，我们建议你迁移到 <code>kotlin.concurrent.Volatile</code>。</p><h3 id="通过名称获取正则表达式捕获组的新公共函数" tabindex="-1">通过名称获取正则表达式捕获组的新公共函数 <a class="header-anchor" href="#通过名称获取正则表达式捕获组的新公共函数" aria-label="Permalink to &quot;通过名称获取正则表达式捕获组的新公共函数&quot;">​</a></h3><p>在 1.9.0 之前，每个平台都有自己的扩展来从正则表达式匹配中通过名称获取正则表达式捕获组。然而，没有公共函数。在 Kotlin 1.8.0 之前不可能拥有公共函数，因为标准库仍然支持 JVM 目标平台 1.6 和 1.7。</p><p>从 Kotlin 1.8.0 开始，标准库与 JVM 目标平台 1.8 编译。因此，在 1.9.0 中，现在有一个<strong>公共</strong> <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/-match-result/groups.html" target="_blank" rel="noreferrer"><code>groups</code></a> 函数，你可以使用它来检索正则表达式匹配的捕获组内容。这在你想要访问属于特定捕获组的正则表达式匹配结果时很有用。</p><p>以下是一个包含三个捕获组（<code>city</code>、<code>state</code> 和 <code>areaCode</code>）的正则表达式示例。你可以使用这些组名称来访问匹配的值：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> regex </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(?&lt;city&gt;[A-Za-z</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">]+),</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(?&lt;state&gt;[A-Z]{2}):</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(?&lt;areaCode&gt;[0-9]{3})</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toRegex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> input </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Coordinates: Austin, TX: 123&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> match </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> regex.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">find</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(input)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!!</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(match.groups[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;city&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]?.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Austin</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(match.groups[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;state&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]?.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // TX</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(match.groups[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;areaCode&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]?.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 123</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="创建父目录的新路径工具" tabindex="-1">创建父目录的新路径工具 <a class="header-anchor" href="#创建父目录的新路径工具" aria-label="Permalink to &quot;创建父目录的新路径工具&quot;">​</a></h3><p>在 1.9.0 中，有一个新的 <code>createParentDirectories()</code> 扩展函数，你可以使用它来创建具有所有必要父目录的新文件。当你向 <code>createParentDirectories()</code> 提供文件路径时，它会检查父目录是否已存在。如果存在，它不执行任何操作。但是，如果不存在，它会为你创建它们。</p><p><code>createParentDirectories()</code> 在复制文件时特别有用。例如，你可以将其与 <code>copyToRecursively()</code> 函数结合使用：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sourcePath.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">copyToRecursively</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   destinationPath.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createParentDirectories</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   followLinks </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="新-hexformat-类来格式化和解析十六进制" tabindex="-1">新 HexFormat 类来格式化和解析十六进制 <a class="header-anchor" href="#新-hexformat-类来格式化和解析十六进制" aria-label="Permalink to &quot;新 HexFormat 类来格式化和解析十六进制&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>新的 <code>HexFormat</code> 类及其相关扩展函数是<a href="/kotlin/components-stability#stability-levels-explained">实验性的</a>，要使用它们，你可以使用 <code>@OptIn(ExperimentalStdlibApi::class)</code> 或编译器实参 <code>-opt-in=kotlin.ExperimentalStdlibApi</code> 选择启用。</p></div><p>在 1.9.0 中，<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/-hex-format/" target="_blank" rel="noreferrer"><code>HexFormat</code></a> 类及其相关扩展函数作为一项实验性特性提供，允许你在数值和十六进制字符串之间进行转换。具体来说，你可以使用扩展函数在十六进制字符串和 <code>ByteArrays</code> 或其他数字类型（<code>Int</code>、<code>Short</code>、<code>Long</code>）之间进行转换。</p><p>例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">93</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toHexString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;0000005d&quot;</span></span></code></pre></div><p><code>HexFormat</code> 类包含格式化选项，你可以使用 <code>HexFormat{}</code> 构建器进行配置。</p><p>如果你正在处理 <code>ByteArrays</code>，你有以下选项，可通过属性进行配置：</p><table tabindex="0"><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td><code>upperCase</code></td><td>十六进制数字是大写还是小写。默认情况下，假定为小写。<code>upperCase = false</code>。</td></tr><tr><td><code>bytes.bytesPerLine</code></td><td>每行的最大字节数。</td></tr><tr><td><code>bytes.bytesPerGroup</code></td><td>每组的最大字节数。</td></tr><tr><td><code>bytes.bytesSeparator</code></td><td>字节之间的分隔符。默认情况下为空。</td></tr><tr><td><code>bytes.bytesPrefix</code></td><td>紧跟在每个字节两位十六进制表示之前的字符串，默认情况下为空。</td></tr><tr><td><code>bytes.bytesSuffix</code></td><td>紧跟在每个字节两位十六进制表示之后的字符串，默认情况下为空。</td></tr></tbody></table><p>例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> macAddress </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;001b638445e6&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hexToByteArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用 HexFormat{} 构建器通过冒号分隔十六进制字符串</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(macAddress.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toHexString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HexFormat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { bytes.byteSeparator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;00:1b:63:84:45:e6&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用 HexFormat{} 构建器执行以下操作：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// * 将十六进制字符串转换为大写</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// * 将字节分组为对</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// * 用句点分隔</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> threeGroupFormat </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HexFormat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { upperCase </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; bytes.bytesPerGroup </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; bytes.groupSeparator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(macAddress.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toHexString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(threeGroupFormat))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;001B.6384.45E6&quot;</span></span></code></pre></div><p>如果你正在使用数字类型，你有以下选项，可通过属性进行配置：</p><table tabindex="0"><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td><code>number.prefix</code></td><td>十六进制字符串的前缀，默认情况下为空。</td></tr><tr><td><code>number.suffix</code></td><td>十六进制字符串的后缀，默认情况下为空。</td></tr><tr><td><code>number.removeLeadingZeros</code></td><td>是否移除十六进制字符串中的前导零。默认情况下，不移除前导零。<code>number.removeLeadingZeros = false</code></td></tr></tbody></table><p>例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用 HexFormat{} 构建器解析带有前缀 &quot;0x&quot; 的十六进制。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0x3a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hexToInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HexFormat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { number.prefix </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;0x&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;58&quot;</span></span></code></pre></div><h2 id="文档更新" tabindex="-1">文档更新 <a class="header-anchor" href="#文档更新" aria-label="Permalink to &quot;文档更新&quot;">​</a></h2><p>Kotlin 文档收到了一些显著更改：</p><ul><li><a href="/kotlin/kotlin-tour-welcome">Kotlin 之旅</a> – 通过包含理论和实践章节的指南，学习 Kotlin 编程语言的基础知识。</li><li><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-android-layout.html" target="_blank" rel="noreferrer">Android 源代码集布局</a> – 了解新的 Android 源代码集布局。</li><li><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-compatibility-guide.html" target="_blank" rel="noreferrer">Kotlin Multiplatform 兼容性指南</a> – 了解你在使用 Kotlin Multiplatform 开发项目时可能遇到的不兼容更改。</li><li><a href="/kotlin/wasm-overview">Kotlin Wasm</a> – 了解 Kotlin/Wasm 以及如何在你的 Kotlin Multiplatform 项目中使用它。</li></ul><h2 id="安装-kotlin-1-9-0" tabindex="-1">安装 Kotlin 1.9.0 <a class="header-anchor" href="#安装-kotlin-1-9-0" aria-label="Permalink to &quot;安装 Kotlin 1.9.0&quot;">​</a></h2><h3 id="检测-ide-版本" tabindex="-1">检测 IDE 版本 <a class="header-anchor" href="#检测-ide-版本" aria-label="Permalink to &quot;检测 IDE 版本&quot;">​</a></h3><p><a href="https://www.jetbrains.com/idea/download/" target="_blank" rel="noreferrer">IntelliJ IDEA</a> 2022.3.3 和 2023.1.1 会自动建议将 Kotlin 插件更新到 1.9.0 版本。IntelliJ IDEA 2023.2 将包含 Kotlin 1.9.0 插件。</p><p>Android Studio Giraffe (223) 和 Hedgehog (231) 将在其即将发布的版本中支持 Kotlin 1.9.0。</p><p>新的命令行编译器可在 <a href="https://github.com/JetBrains/kotlin/releases/tag/v1.9.0" target="_blank" rel="noreferrer">GitHub 发布页面</a>下载。</p><h3 id="配置-gradle-设置" tabindex="-1">配置 Gradle 设置 <a class="header-anchor" href="#配置-gradle-设置" aria-label="Permalink to &quot;配置 Gradle 设置&quot;">​</a></h3><p>要下载 Kotlin artifact 和依赖项，请更新你的 <code>settings.gradle(.kts)</code> 文件以使用 Maven Central 版本库：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pluginManagement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    repositories</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        mavenCentral</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        gradlePluginPortal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>如果未指定版本库，Gradle 将使用已废弃的 JCenter 版本库，这可能会导致 Kotlin artifact 的问题。</p><h2 id="kotlin-1-9-0-兼容性指南" tabindex="-1">Kotlin 1.9.0 兼容性指南 <a class="header-anchor" href="#kotlin-1-9-0-兼容性指南" aria-label="Permalink to &quot;Kotlin 1.9.0 兼容性指南&quot;">​</a></h2><p>Kotlin 1.9.0 是一个<a href="/kotlin/kotlin-evolution-principles#language-and-tooling-releases">特性版本</a>，因此可能会带来与你为早期语言版本编写的代码不兼容的更改。有关这些更改的详细列表，请参见 <a href="/kotlin/compatibility-guide-19">Kotlin 1.9.0 兼容性指南</a>。</p>`,89))])}const D=c(u,[["render",F]]);export{K as __pageData,D as default};
