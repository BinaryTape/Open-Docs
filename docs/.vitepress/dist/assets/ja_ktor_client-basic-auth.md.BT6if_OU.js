import{_ as e,C as n,c as l,o as p,j as s,G as h,ag as o,a,w as r}from"./chunks/framework.Bksy39di.js";const F=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ja/ktor/client-basic-auth.md","filePath":"ja/ktor/client-basic-auth.md","lastUpdated":1755457140000}'),c={name:"ja/ktor/client-basic-auth.md"};function k(d,i,u,E,g,b){const t=n("tldr");return p(),l("div",null,[i[1]||(i[1]=s("h1",{id:"ktorクライアントでのbasic認証",tabindex:"-1"},[a("KtorクライアントでのBasic認証 "),s("a",{class:"header-anchor",href:"#ktorクライアントでのbasic認証","aria-label":'Permalink to "KtorクライアントでのBasic認証"'},"​")],-1)),h(t,null,{default:r(()=>i[0]||(i[0]=[s("p",null,[s("b",null,"必要な依存関係"),a(": "),s("code",null,"io.ktor:ktor-client-auth")],-1),s("p",null,[s("b",null,"コード例"),a(": "),s("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/client-auth-basic"}," client-auth-basic ")],-1)])),_:1}),i[2]||(i[2]=o(`<p>Basic <a href="./client-auth">認証スキーム</a>は、ユーザーのログインに使用できます。このスキームでは、ユーザーの資格情報は、Base64でエンコードされたユーザー名とパスワードのペアとして送信されます。</p><blockquote><p>サーバー側では、KtorはBasic認証を処理するための<a href="./server-basic-auth">Authentication</a>プラグインを提供します。</p></blockquote><h2 id="flow" tabindex="-1">Basic認証のフロー <a class="header-anchor" href="#flow" aria-label="Permalink to &quot;Basic認証のフロー {id=&quot;flow&quot;}&quot;">​</a></h2><p>Basic認証のフローは次のようになります。</p><ol><li><p>クライアントは、サーバーアプリケーション内の特定のリソースに対して、<code>Authorization</code>ヘッダーなしでリクエストを送信します。</p></li><li><p>サーバーは、クライアントに<code>401</code> (Unauthorized) レスポンスステータスで応答し、<code>WWW-Authenticate</code>レスポンスヘッダーを使用して、Basic認証スキームがルートを保護するために使用されているという情報を提供します。典型的な<code>WWW-Authenticate</code>ヘッダーは次のようになります。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>WWW-Authenticate: Basic realm=&quot;Access to the &#39;/&#39; path&quot;, charset=&quot;UTF-8&quot;</span></span></code></pre></div><p>Ktorクライアントでは、<code>sendWithoutRequest</code> <a href="#configure">関数</a>を使用して、<code>WWW-Authenticate</code>ヘッダーを待たずに資格情報を送信できます。</p></li><li><p>通常、クライアントはユーザーが資格情報を入力できるログインダイアログを表示します。その後、クライアントは、Base64でエンコードされたユーザー名とパスワードのペアを含む<code>Authorization</code>ヘッダーでリクエストを送信します。例：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Authorization: Basic amV0YnJhaW5zOmZvb2Jhcg</span></span></code></pre></div></li><li><p>サーバーはクライアントから送信された資格情報を検証し、要求されたコンテンツで応答します。</p></li></ol><h2 id="configure" tabindex="-1">Basic認証を構成する <a class="header-anchor" href="#configure" aria-label="Permalink to &quot;Basic認証を構成する {id=&quot;configure&quot;}&quot;">​</a></h2><p><code>Basic</code>スキームを使用して<code>Authorization</code>ヘッダーにユーザーの資格情報を送信するには、<code>basic</code>認証プロバイダーを次のように構成する必要があります。</p><ol><li><p><code>install</code>ブロック内で<a href="https://api.ktor.io/ktor-client/ktor-client-plugins/ktor-client-auth/io.ktor.client.plugins.auth.providers/basic.html" target="_blank" rel="noreferrer">basic</a>関数を呼び出します。</p></li><li><p><a href="https://api.ktor.io/ktor-client/ktor-client-plugins/ktor-client-auth/io.ktor.client.plugins.auth.providers/-basic-auth-credentials/index.html" target="_blank" rel="noreferrer">BasicAuthCredentials</a>を使用して必要な資格情報を提供し、このオブジェクトを<a href="https://api.ktor.io/ktor-client/ktor-client-plugins/ktor-client-auth/io.ktor.client.plugins.auth.providers/-basic-auth-config/credentials.html" target="_blank" rel="noreferrer">credentials</a>関数に渡します。</p></li><li><p><code>realm</code>プロパティを使用してレルムを構成します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Auth) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        basic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            credentials</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                BasicAuthCredentials</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(username </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;jetbrains&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, password </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;foobar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            realm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Access to the &#39;/&#39; path&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>オプションで、<code>WWW-Authenticate</code>ヘッダーを含む<code>401</code> (Unauthorized) レスポンスを待たずに、初期リクエストで資格情報を送信するように有効にします。ブール値を返す<code>sendWithoutRequest</code>関数を呼び出し、リクエストパラメーターをチェックする必要があります。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Auth) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    basic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        sendWithoutRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { request </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            request.url.host </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;0.0.0.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ol><blockquote><p>完全な例はこちらで確認できます: <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/client-auth-basic" target="_blank" rel="noreferrer">client-auth-basic</a>。</p></blockquote>`,9))])}const m=e(c,[["render",k]]);export{F as __pageData,m as default};
