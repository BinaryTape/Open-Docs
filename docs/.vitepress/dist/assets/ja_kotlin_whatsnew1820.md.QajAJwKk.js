import{_ as r}from"./chunks/default-hierarchy-example.DgJqkpuk.js";import{_ as o,a as d}from"./chunks/comparison-of-full-and-precise-backups.BbJYXOYw.js";import{_ as E,C as p,c,o as g,ag as e,G as l,j as s,w as t,a as i}from"./chunks/framework.Bksy39di.js";const K=JSON.parse('{"title":"Kotlin 1.8.20 の新機能","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/whatsnew1820.md","filePath":"ja/kotlin/whatsnew1820.md","lastUpdated":1754307826000}'),y={name:"ja/kotlin/whatsnew1820.md"};function u(F,a,b,m,C,f){const k=p("YouTubeVideo"),n=p("tab"),h=p("tabs");return g(),c("div",null,[a[13]||(a[13]=e('<h1 id="kotlin-1-8-20-の新機能" tabindex="-1">Kotlin 1.8.20 の新機能 <a class="header-anchor" href="#kotlin-1-8-20-の新機能" aria-label="Permalink to &quot;Kotlin 1.8.20 の新機能&quot;">​</a></h1><p><em><a href="/ja/kotlin/releases#release-details">リリース日: 2023年4月25日</a></em></p><p>Kotlin 1.8.20 がリリースされ、主なハイライトは以下の通りです。</p><ul><li><a href="#new-kotlin-k2-compiler-updates">新しい Kotlin K2 コンパイラの更新</a></li><li><a href="#new-kotlin-wasm-target">新しい実験的な Kotlin/Wasm ターゲット</a></li><li><a href="#new-jvm-incremental-compilation-by-default-in-gradle">Gradle でデフォルトで有効になった新しい JVM インクリメンタルコンパイル</a></li><li><a href="#update-for-kotlin-native-targets">Kotlin/Native ターゲットの更新</a></li><li><a href="#preview-of-gradle-composite-builds-support-in-kotlin-multiplatform">Kotlin Multiplatform での Gradle コンポジットビルドのプレビュー</a></li><li><a href="#improved-output-for-gradle-errors-in-xcode">Xcode での Gradle エラー出力の改善</a></li><li><a href="#support-for-the-autocloseable-interface">標準ライブラリにおける AutoCloseable インターフェースの実験的なサポート</a></li><li><a href="#support-for-base64-encoding">標準ライブラリにおける Base64 エンコーディングの実験的なサポート</a></li></ul><p>これらの変更点の概要は以下の動画でもご確認いただけます。</p>',5)),l(k,{src:"https://www.youtube.com/v/R1JpkpPzyBU",title:"What's new in Kotlin 1.8.20"}),a[14]||(a[14]=e(`<h2 id="ide-サポート" tabindex="-1">IDE サポート <a class="header-anchor" href="#ide-サポート" aria-label="Permalink to &quot;IDE サポート&quot;">​</a></h2><p>1.8.20 をサポートする Kotlin プラグインは、以下の IDE で利用可能です。</p><table tabindex="0"><thead><tr><th>IDE</th><th>サポートバージョン</th></tr></thead><tbody><tr><td>IntelliJ IDEA</td><td>2022.2.x, 2022.3.x, 2023.1.x</td></tr><tr><td>Android Studio</td><td>Flamingo (222)</td></tr></tbody></table><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>Kotlin の成果物と依存関係を適切にダウンロードするには、<a href="#configure-gradle-settings">Gradle 設定</a>を Maven Central リポジトリを使用するように構成してください。</p></div><h2 id="新しい-kotlin-k2-コンパイラの更新" tabindex="-1">新しい Kotlin K2 コンパイラの更新 <a class="header-anchor" href="#新しい-kotlin-k2-コンパイラの更新" aria-label="Permalink to &quot;新しい Kotlin K2 コンパイラの更新&quot;">​</a></h2><p>Kotlin チームは K2 コンパイラの安定化を続けています。<a href="/ja/kotlin/whatsnew17#new-kotlin-k2-compiler-for-the-jvm-in-alpha">Kotlin 1.7.0 の発表</a>で述べたように、まだ <strong>Alpha</strong> 段階です。 今回のリリースでは、<a href="https://youtrack.jetbrains.com/issue/KT-52604" target="_blank" rel="noreferrer">K2 Beta</a> に向けてさらなる改善が導入されました。</p><p>この 1.8.20 リリースから、Kotlin K2 コンパイラは以下の機能を提供します。</p><ul><li>シリアライズプラグインのプレビューバージョンが含まれています。</li><li><a href="/ja/kotlin/js-ir-compiler">JS IR コンパイラ</a>の Alpha サポートを提供します。</li><li><a href="https://blog.jetbrains.com/kotlin/2023/02/k2-kotlin-2-0/" target="_blank" rel="noreferrer">新しい言語バージョン、Kotlin 2.0</a> の将来のリリースを導入します。</li></ul><p>新しいコンパイラとその利点の詳細については、以下の動画をご覧ください。</p><ul><li><a href="https://www.youtube.com/watch?v=iTdJJq_LyoY" target="_blank" rel="noreferrer">What Everyone Must Know About The NEW Kotlin K2 Compiler</a></li><li><a href="https://www.youtube.com/watch?v=db19VFLZqJM" target="_blank" rel="noreferrer">The New Kotlin K2 Compiler: Expert Review</a></li></ul><h3 id="kotlin-k2-コンパイラを有効にする方法" tabindex="-1">Kotlin K2 コンパイラを有効にする方法 <a class="header-anchor" href="#kotlin-k2-コンパイラを有効にする方法" aria-label="Permalink to &quot;Kotlin K2 コンパイラを有効にする方法&quot;">​</a></h3><p>Kotlin K2 コンパイラを有効にしてテストするには、以下のコンパイラオプションで新しい言語バージョンを使用します。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-language-version</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2.0</span></span></code></pre></div><p><code>build.gradle(.kts)</code> ファイルで指定できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   sourceSets.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">       languageSettings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           languageVersion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;2.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>以前の <code>-Xuse-k2</code> コンパイラオプションは非推奨になりました。</p><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>新しい K2 コンパイラの Alpha バージョンは、JVM および JS IR プロジェクトでのみ動作します。 Kotlin/Native やマルチプラットフォームプロジェクトはまだサポートしていません。</p></div><h3 id="新しい-k2-コンパイラに関するフィードバックをお願いします" tabindex="-1">新しい K2 コンパイラに関するフィードバックをお願いします <a class="header-anchor" href="#新しい-k2-コンパイラに関するフィードバックをお願いします" aria-label="Permalink to &quot;新しい K2 コンパイラに関するフィードバックをお願いします&quot;">​</a></h3><p>皆様からのフィードバックをお待ちしております！</p><ul><li>Kotlin Slack で K2 開発者に直接フィードバックを提供してください – <a href="https://surveys.jetbrains.com/s3/kotlin-slack-sign-up?_gl=1*ju6cbn*_ga*MTA3MTk5NDkzMC4xNjQ2MDY3MDU4*_ga_9J976DJZ68*MTY1ODMzNzA3OS4xMDAuMS4xNjU4MzQwODEwLjYw" target="_blank" rel="noreferrer">招待状を入手</a>して、<a href="https://kotlinlang.slack.com/archives/C03PK0PE257" target="_blank" rel="noreferrer">#k2-early-adopters</a> チャンネルに参加してください。</li><li>新しい K2 コンパイラで遭遇した問題は、<a href="https://kotl.in/issue" target="_blank" rel="noreferrer">課題トラッカー</a>に報告してください。</li><li>JetBrains が K2 の使用に関する匿名データを収集できるように、<a href="https://www.jetbrains.com/help/idea/settings-usage-statistics.html" target="_blank" rel="noreferrer"><strong>使用統計の送信</strong>オプションを有効</a>にしてください。</li></ul><h2 id="言語" tabindex="-1">言語 <a class="header-anchor" href="#言語" aria-label="Permalink to &quot;言語&quot;">​</a></h2><p>Kotlin は進化を続けており、1.8.20 では新しい言語機能のプレビューバージョンを導入しています。</p><ul><li><a href="#a-modern-and-performant-replacement-of-the-enum-class-values-function">Enum クラスの values 関数を置き換えるモダンで高性能な代替機能</a></li><li><a href="#preview-of-data-objects-for-symmetry-with-data-classes">データクラスとの対称性のためのデータオブジェクト</a></li><li><a href="#preview-of-lifting-restriction-on-secondary-constructors-with-bodies-in-inline-classes">インラインクラス内の本文を持つセカンダリコンストラクタの制限解除のプレビュー</a></li></ul><h3 id="enum-クラスの-values-関数を置き換えるモダンで高性能な代替機能" tabindex="-1">Enum クラスの values 関数を置き換えるモダンで高性能な代替機能 <a class="header-anchor" href="#enum-クラスの-values-関数を置き換えるモダンで高性能な代替機能" aria-label="Permalink to &quot;Enum クラスの values 関数を置き換えるモダンで高性能な代替機能&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>この機能は<a href="/ja/kotlin/components-stability#stability-levels-explained">実験的</a>です。 いつでも変更または削除される可能性があります。オプトインが必要です（詳細は下記参照）。評価目的でのみ使用してください。 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a> でのフィードバックをお待ちしております。</p></div><p>Enum クラスには、定義された Enum 定数の配列を返す合成の <code>values()</code> 関数があります。しかし、配列を使用すると、Kotlin や Java で<a href="https://github.com/Kotlin/KEEP/blob/master/proposals/enum-entries.md#examples-of-performance-issues" target="_blank" rel="noreferrer">隠れたパフォーマンス問題</a>が発生する可能性があります。さらに、ほとんどの API はコレクションを使用するため、最終的な変換が必要です。これらの問題を解決するため、<code>values()</code> 関数ではなく、Enum クラスの <code>entries</code> プロパティを導入しました。<code>entries</code> プロパティを呼び出すと、事前に割り当てられた定義済み Enum 定数のイミュータブルなリストが返されます。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>values()</code> 関数は引き続きサポートされますが、代わりに <code>entries</code> プロパティを使用することをお勧めします。</p></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">enum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> colorName: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rgb: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    RED</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Red&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#FF0000&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ORANGE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Orange&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#FF7F00&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    YELLOW</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Yellow&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#FFFF00&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalStdlibApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> findByRgb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rgb: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Color.entries.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">find</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.rgb </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rgb }</span></span></code></pre></div><h4 id="entries-プロパティを有効にする方法" tabindex="-1">entries プロパティを有効にする方法 <a class="header-anchor" href="#entries-プロパティを有効にする方法" aria-label="Permalink to &quot;entries プロパティを有効にする方法&quot;">​</a></h4><p>この機能を試すには、<code>@OptIn(ExperimentalStdlibApi)</code> でオプトインし、<code>-language-version 1.9</code> コンパイラオプションを有効にします。Gradle プロジェクトでは、<code>build.gradle(.kts)</code> ファイルに以下を追加することで行えます。</p>`,30)),l(h,{group:"build-script"},{default:t(()=>[l(n,{title:"Kotlin","group-key":"kotlin"},{default:t(()=>a[0]||(a[0]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withType"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"org"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"jetbrains"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"gradle"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"tasks"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"KotlinCompilationTask"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<*>>()")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"configureEach"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        compilerOptions")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            .languageVersion")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            ."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"set"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"                org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_1_9")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            )")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")])])])],-1)])),_:1}),l(n,{title:"Groovy","group-key":"groovy"},{default:t(()=>a[1]||(a[1]=[s("div",{class:"language-groovy vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"groovy"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    .withType("),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask."),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"class)")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    .configureEach {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        compilerOptions"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"languageVersion "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"=")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"            org.jetbrains.kotlin.gradle.dsl.KotlinVersion."),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"KOTLIN_1_9")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")])])])],-1)])),_:1})]),_:1}),a[15]||(a[15]=e(`<div class="tip custom-block"><p class="custom-block-title">TIP</p><p>IntelliJ IDEA 2023.1 以降では、この機能をオプトインしている場合、適切な IDE のインスペクションが <code>values()</code> から <code>entries</code> への変換について通知し、クイックフィックスを提供します。</p></div><p>提案の詳細については、<a href="https://github.com/Kotlin/KEEP/blob/master/proposals/enum-entries.md" target="_blank" rel="noreferrer">KEEP ノート</a>を参照してください。</p><h3 id="データクラスとの対称性のためのデータオブジェクトのプレビュー" tabindex="-1">データクラスとの対称性のためのデータオブジェクトのプレビュー <a class="header-anchor" href="#データクラスとの対称性のためのデータオブジェクトのプレビュー" aria-label="Permalink to &quot;データクラスとの対称性のためのデータオブジェクトのプレビュー&quot;">​</a></h3><p>データオブジェクトを使用すると、シングルトンのセマンティクスとクリーンな <code>toString()</code> 表現を持つオブジェクトを宣言できます。次のスニペットでは、オブジェクト宣言に <code>data</code> キーワードを追加することで、その <code>toString()</code> 出力の可読性がどのように向上するかを確認できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.example</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyObject</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyDataObject</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MyObject) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// org.example.MyObject@1f32e575</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MyDataObject) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// MyDataObject</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>特に <code>sealed</code> 階層（<code>sealed class</code> や <code>sealed interface</code> 階層など）では、<code>data object</code> は <code>data class</code> 宣言と一緒に便利に使用できるため、非常に適しています。このスニペットでは、<code>EndOfFile</code> をプレーンな <code>object</code> ではなく <code>data object</code> として宣言することで、手動でオーバーライドする必要なく、きれいな <code>toString</code> を得ることができます。これにより、付随するデータクラス定義との対称性が維持されます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">sealed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ReadResult</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> number: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ReadResult</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> text: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ReadResult</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EndOfFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ReadResult</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Number(number=7)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(EndOfFile) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// EndOfFile</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="データオブジェクトのセマンティクス" tabindex="-1">データオブジェクトのセマンティクス <a class="header-anchor" href="#データオブジェクトのセマンティクス" aria-label="Permalink to &quot;データオブジェクトのセマンティクス&quot;">​</a></h4><p><a href="/ja/kotlin/whatsnew1720#improved-string-representations-for-singletons-and-sealed-class-hierarchies-with-data-objects">Kotlin 1.7.20</a> での最初のプレビューバージョン以降、データオブジェクトのセマンティクスは洗練されました。コンパイラは現在、以下の便利な関数を自動的に生成します。</p><h5 id="tostring" tabindex="-1">toString <a class="header-anchor" href="#tostring" aria-label="Permalink to &quot;toString&quot;">​</a></h5><p>データオブジェクトの <code>toString()</code> 関数は、オブジェクトの単純名 (simple name) を返します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyDataObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MyDataObject) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// MyDataObject</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h5 id="equals-と-hashcode" tabindex="-1">equals と hashCode <a class="header-anchor" href="#equals-と-hashcode" aria-label="Permalink to &quot;equals と hashCode&quot;">​</a></h5><p><code>data object</code> の <code>equals()</code> 関数は、<code>data object</code> の型を持つすべてのオブジェクトが等しいとみなされることを保証します。ほとんどの場合、実行時にはデータオブジェクトの単一のインスタンスしか存在しません（結局、<code>data object</code> はシングルトンを宣言します）。ただし、実行時に同じ型の別のオブジェクトが生成される（たとえば、<code>java.lang.reflect</code> を介したプラットフォームリフレクション、またはこの API を内部で使用する JVM シリアライズライブラリを使用した場合）といったエッジケースでは、これによりオブジェクトが等しいものとして扱われることが保証されます。</p><p><code>data object</code> は構造的に（<code>==</code> 演算子を使用して）のみ比較し、参照（<code>===</code> 演算子）では決して比較しないようにしてください。これにより、実行時にデータオブジェクトの複数のインスタンスが存在する場合の落とし穴を回避できます。次のスニペットは、この特定のエッジケースを示しています。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> java.lang.reflect.Constructor</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MySingleton</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> evilTwin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createInstanceViaReflection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MySingleton) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// MySingleton</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(evilTwin) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// MySingleton</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Even when a library forcefully creates a second instance of MySingleton, its \`equals\` method returns true:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MySingleton </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> evilTwin) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Do not compare data objects via ===.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MySingleton </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> evilTwin) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createInstanceViaReflection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MySingleton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Kotlin reflection does not permit the instantiation of data objects.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // This creates a new MySingleton instance &quot;by force&quot; (i.e., Java platform reflection)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Don&#39;t do this yourself!</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (MySingleton.javaClass.declaredConstructors[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { isAccessible </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Constructor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MySingleton</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">newInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>生成される <code>hashCode()</code> 関数の動作は <code>equals()</code> 関数の動作と一貫しており、<code>data object</code> のすべてのランタイムインスタンスが同じハッシュコードを持つようにします。</p><h5 id="データオブジェクトには-copy-および-componentn-関数は生成されません" tabindex="-1">データオブジェクトには copy および componentN 関数は生成されません <a class="header-anchor" href="#データオブジェクトには-copy-および-componentn-関数は生成されません" aria-label="Permalink to &quot;データオブジェクトには copy および componentN 関数は生成されません&quot;">​</a></h5><p><code>data object</code> と <code>data class</code> 宣言はしばしば一緒に使用され、いくつかの類似点がありますが、<code>data object</code> に対しては生成されない関数がいくつかあります。</p><p><code>data object</code> 宣言はシングルトンオブジェクトとして使用することを意図しているため、<code>copy()</code> 関数は生成されません。シングルトンパターンは、クラスのインスタンス化を単一のインスタンスに制限するため、インスタンスのコピーが作成されることを許可すると、その制限に違反することになります。</p><p>また、<code>data class</code> とは異なり、<code>data object</code> にはデータプロパティがありません。このようなオブジェクトを分割 (destructure) しようとすることは意味がないため、<code>componentN()</code> 関数は生成されません。</p><p>この機能に関するフィードバックを<a href="https://youtrack.jetbrains.com/issue/KT-4107" target="_blank" rel="noreferrer">YouTrack</a>でお待ちしております。</p><h4 id="データオブジェクトのプレビューを有効にする方法" tabindex="-1">データオブジェクトのプレビューを有効にする方法 <a class="header-anchor" href="#データオブジェクトのプレビューを有効にする方法" aria-label="Permalink to &quot;データオブジェクトのプレビューを有効にする方法&quot;">​</a></h4><p>この機能を試すには、<code>-language-version 1.9</code> コンパイラオプションを有効にします。Gradle プロジェクトでは、<code>build.gradle(.kts)</code> ファイルに以下を追加することで行えます。</p>`,24)),l(h,{group:"build-script"},{default:t(()=>[l(n,{title:"Kotlin","group-key":"kotlin"},{default:t(()=>a[2]||(a[2]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withType"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"org"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"jetbrains"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"gradle"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"tasks"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"KotlinCompilationTask"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<*>>()")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"configureEach"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        compilerOptions")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            .languageVersion")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            ."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"set"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"                org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_1_9")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            )")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")])])])],-1)])),_:1}),l(n,{title:"Groovy","group-key":"groovy"},{default:t(()=>a[3]||(a[3]=[s("div",{class:"language-groovy vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"groovy"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    .withType("),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask."),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"class)")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    .configureEach {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        compilerOptions"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"languageVersion "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"=")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"            org.jetbrains.kotlin.gradle.dsl.KotlinVersion."),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"KOTLIN_1_9")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")])])])],-1)])),_:1})]),_:1}),a[16]||(a[16]=e(`<h3 id="インラインクラス内の本文を持つセカンダリコンストラクタの制限解除のプレビュー" tabindex="-1">インラインクラス内の本文を持つセカンダリコンストラクタの制限解除のプレビュー <a class="header-anchor" href="#インラインクラス内の本文を持つセカンダリコンストラクタの制限解除のプレビュー" aria-label="Permalink to &quot;インラインクラス内の本文を持つセカンダリコンストラクタの制限解除のプレビュー&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>この機能は<a href="/ja/kotlin/components-stability#stability-levels-explained">実験的</a>です。いつでも変更または削除される可能性があります。 オプトインが必要です（詳細は下記参照）。評価目的でのみ使用してください。<a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a> でのフィードバックをお待ちしております。</p></div><p>Kotlin 1.8.20 では、<a href="/ja/kotlin/inline-classes">インラインクラス</a>における本文を持つセカンダリコンストラクタの使用に関する制限が解除されました。</p><p>インラインクラスは以前、明確な初期化セマンティクスを持つために <code>init</code> ブロックやセカンダリコンストラクタを持たないパブリックなプライマリコンストラクタのみを許可していました。その結果、基になる値をカプセル化したり、制約のある値を表現するインラインクラスを作成したりすることが不可能でした。</p><p>これらの問題は、Kotlin 1.4.30 で <code>init</code> ブロックの制限が解除された際に修正されました。今回、さらに一歩進んで、プレビューモードで本文を持つセカンダリコンストラクタを許可します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JvmInline</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fullName: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Allowed since Kotlin 1.4.30:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        check</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fullName.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isNotBlank</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;Full name shouldn&#39;t be empty&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Preview available since Kotlin 1.8.20:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, lastName: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$name</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> $lastName</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        check</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lastName.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isNotBlank</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;Last name shouldn&#39;t be empty&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="本文を持つセカンダリコンストラクタを有効にする方法" tabindex="-1">本文を持つセカンダリコンストラクタを有効にする方法 <a class="header-anchor" href="#本文を持つセカンダリコンストラクタを有効にする方法" aria-label="Permalink to &quot;本文を持つセカンダリコンストラクタを有効にする方法&quot;">​</a></h4><p>この機能を試すには、<code>-language-version 1.9</code> コンパイラオプションを有効にします。Gradle プロジェクトでは、<code>build.gradle(.kts)</code> に以下を追加することで行えます。</p>`,8)),l(h,{group:"build-script"},{default:t(()=>[l(n,{title:"Kotlin","group-key":"kotlin"},{default:t(()=>a[4]||(a[4]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withType"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"org"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"jetbrains"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"gradle"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"tasks"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"KotlinCompilationTask"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<*>>()")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"configureEach"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        compilerOptions")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            .languageVersion")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            ."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"set"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"                org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_1_9")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            )")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")])])])],-1)])),_:1}),l(n,{title:"Groovy","group-key":"groovy"},{default:t(()=>a[5]||(a[5]=[s("div",{class:"language-groovy vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"groovy"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    .withType("),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask."),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"class)")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    .configureEach {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        compilerOptions"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"languageVersion "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"=")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"            org.jetbrains.kotlin.gradle.dsl.KotlinVersion."),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"KOTLIN_1_9")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")])])])],-1)])),_:1})]),_:1}),a[17]||(a[17]=e(`<p>この機能をぜひお試しいただき、<a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a> にレポートを提出して、Kotlin 1.9.0 でデフォルトにするためのご協力をお願いいたします。</p><p>Kotlin のインラインクラスの開発については、<a href="https://github.com/Kotlin/KEEP/blob/master/proposals/inline-classes.md" target="_blank" rel="noreferrer">こちらの KEEP</a> をご覧ください。</p><h2 id="新しい-kotlin-wasm-ターゲット" tabindex="-1">新しい Kotlin/Wasm ターゲット <a class="header-anchor" href="#新しい-kotlin-wasm-ターゲット" aria-label="Permalink to &quot;新しい Kotlin/Wasm ターゲット&quot;">​</a></h2><p>このリリースで Kotlin/Wasm (Kotlin WebAssembly) が<a href="/ja/kotlin/components-stability#stability-levels-explained">実験的</a>機能となりました。Kotlin チームは <a href="https://webassembly.org/" target="_blank" rel="noreferrer">WebAssembly</a> を有望な技術と捉えており、Kotlin の利点をすべて活用できるより良い方法を見つけたいと考えています。</p><p>WebAssembly バイナリ形式は独自の仮想マシンを使用して実行されるため、プラットフォームに依存しません。ほとんどすべてのモダンブラウザはすでに WebAssembly 1.0 をサポートしています。WebAssembly を実行するための環境をセットアップするには、Kotlin/Wasm がターゲットとする実験的なガベージコレクションモードを有効にするだけで済みます。詳細な手順は<a href="#how-to-enable-kotlin-wasm">Kotlin/Wasm を有効にする方法</a>で確認できます。</p><p>新しい Kotlin/Wasm ターゲットの以下の利点を強調したいと思います。</p><ul><li>Kotlin/Wasm は LLVM を使用する必要がないため、<code>wasm32</code> Kotlin/Native ターゲットと比較してコンパイル速度が速い。</li><li><a href="https://github.com/WebAssembly/gc" target="_blank" rel="noreferrer">Wasm ガベージコレクション</a>のおかげで、<code>wasm32</code> ターゲットと比較して JS との相互運用性やブラウザとの統合が容易。</li><li>Wasm はコンパクトで解析しやすいバイトコードを持つため、Kotlin/JS および JavaScript と比較してアプリケーションの起動が潜在的に速い。</li><li>Wasm は静的型付け言語であるため、Kotlin/JS および JavaScript と比較してアプリケーションの実行時パフォーマンスが向上。</li></ul><p>1.8.20 リリースから、実験的なプロジェクトで Kotlin/Wasm を使用できます。 Kotlin 標準ライブラリ (<code>stdlib</code>) およびテストライブラリ (<code>kotlin.test</code>) は、Kotlin/Wasm 向けにすぐに利用可能です。 IDE サポートは将来のリリースで追加される予定です。</p><p><a href="https://www.youtube.com/watch?v=-pqz9sKXatw" target="_blank" rel="noreferrer">この YouTube 動画で Kotlin/Wasm について詳しく学ぶ</a>。</p><h3 id="kotlin-wasm-を有効にする方法" tabindex="-1">Kotlin/Wasm を有効にする方法 <a class="header-anchor" href="#kotlin-wasm-を有効にする方法" aria-label="Permalink to &quot;Kotlin/Wasm を有効にする方法&quot;">​</a></h3><p>Kotlin/Wasm を有効にしてテストするには、<code>build.gradle.kts</code> ファイルを更新します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;multiplatform&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) version </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.8.20&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    wasm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        binaries.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        browser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> commonMain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> getting</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> commonTest </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wasmMain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> getting</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wasmTest </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> getting</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><a href="https://github.com/Kotlin/kotlin-wasm-examples" target="_blank" rel="noreferrer">Kotlin/Wasm のサンプルを含む GitHub リポジトリ</a>をご覧ください。</p></div><p>Kotlin/Wasm プロジェクトを実行するには、ターゲット環境の設定を更新する必要があります。</p>`,14)),l(h,null,{default:t(()=>[l(n,{title:"Chrome"},{default:t(()=>a[6]||(a[6]=[s("ul",null,[s("li",null,[s("p",null,"バージョン 109 の場合:"),s("p",null,[s("code",null,"--js-flags=--experimental-wasm-gc"),i(" コマンドライン引数を付けてアプリケーションを実行します。")])]),s("li",null,[s("p",null,"バージョン 110 以降の場合:"),s("ol",null,[s("li",null,[i("ブラウザで "),s("code",null,"chrome://flags/#enable-webassembly-garbage-collection"),i(" に移動します。")]),s("li",null,[s("strong",null,"WebAssembly Garbage Collection"),i(" を有効にします。")]),s("li",null,"ブラウザを再起動します。")])])],-1)])),_:1}),l(n,{title:"Firefox"},{default:t(()=>a[7]||(a[7]=[s("p",null,"バージョン 109 以降の場合:",-1),s("ol",null,[s("li",null,[i("ブラウザで "),s("code",null,"about:config"),i(" に移動します。")]),s("li",null,[s("code",null,"javascript.options.wasm_function_references"),i(" と "),s("code",null,"javascript.options.wasm_gc"),i(" オプションを有効にします。")]),s("li",null,"ブラウザを再起動します。")],-1)])),_:1}),l(n,{title:"Edge"},{default:t(()=>a[8]||(a[8]=[s("p",null,"バージョン 109 以降の場合:",-1),s("p",null,[s("code",null,"--js-flags=--experimental-wasm-gc"),i(" コマンドライン引数を付けてアプリケーションを実行します。")],-1)])),_:1})]),_:1}),a[18]||(a[18]=e(`<h3 id="kotlin-wasm-に関するフィードバックをお願いします" tabindex="-1">Kotlin/Wasm に関するフィードバックをお願いします <a class="header-anchor" href="#kotlin-wasm-に関するフィードバックをお願いします" aria-label="Permalink to &quot;Kotlin/Wasm に関するフィードバックをお願いします&quot;">​</a></h3><p>皆様からのフィードバックをお待ちしております！</p><ul><li>Kotlin Slack で開発者に直接フィードバックを提供してください – <a href="https://surveys.jetbrains.com/s3/kotlin-slack-sign-up?_gl=1*ju6cbn*_ga*MTA3MTk5NDkzMC4xNjQ2MDY3MDU4*_ga_9J976DJZ68*MTY1ODMzNzA3OS4xMDAuMS4xNjU4MzQwODEwLjYw" target="_blank" rel="noreferrer">招待状を入手</a>して、<a href="https://kotlinlang.slack.com/archives/CDFP59223" target="_blank" rel="noreferrer">#webassembly</a> チャンネルに参加してください。</li><li>Kotlin/Wasm で遭遇した問題は、<a href="https://youtrack.jetbrains.com/issue/KT-56492" target="_blank" rel="noreferrer">この YouTrack 課題</a>に報告してください。</li></ul><h2 id="kotlin-jvm" tabindex="-1">Kotlin/JVM <a class="header-anchor" href="#kotlin-jvm" aria-label="Permalink to &quot;Kotlin/JVM&quot;">​</a></h2><p>Kotlin 1.8.20 では、<a href="#preview-of-java-synthetic-property-references">Java の合成プロパティ参照のプレビュー</a>と、<a href="#support-for-the-jvm-ir-backend-in-kapt-stub-generating-task-by-default">kapt スタブ生成タスクにおける JVM IR バックエンドのデフォルトサポート</a>が導入されました。</p><h3 id="java-の合成プロパティ参照のプレビュー" tabindex="-1">Java の合成プロパティ参照のプレビュー <a class="header-anchor" href="#java-の合成プロパティ参照のプレビュー" aria-label="Permalink to &quot;Java の合成プロパティ参照のプレビュー&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>この機能は<a href="/ja/kotlin/components-stability#stability-levels-explained">実験的</a>です。 いつでも変更または削除される可能性があります。評価目的でのみ使用してください。 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a> でのフィードバックをお待ちしております。</p></div><p>Kotlin 1.8.20 では、Java の合成プロパティへの参照を作成する機能が導入されました。例えば、次の Java コードの場合です。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String name;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> age</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getAge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Kotlin では、これまでも <code>age</code> が合成プロパティである場合に <code>person.age</code> と記述することができました。 今回、<code>Person::age</code> や <code>person::age</code> への参照を作成することもできるようになりました。<code>name</code> についても同様に動作します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> persons </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Jack&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">11</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Sofie&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Peter&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">11</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    persons</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Call a reference to Java synthetic property:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sortedBy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Person::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">age</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Call Java getter via the Kotlin property syntax:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { person </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(person.name) }</span></span></code></pre></div><h4 id="java-の合成プロパティ参照を有効にする方法" tabindex="-1">Java の合成プロパティ参照を有効にする方法 <a class="header-anchor" href="#java-の合成プロパティ参照を有効にする方法" aria-label="Permalink to &quot;Java の合成プロパティ参照を有効にする方法&quot;">​</a></h4><p>この機能を試すには、<code>-language-version 1.9</code> コンパイラオプションを有効にします。 Gradle プロジェクトでは、<code>build.gradle(.kts)</code> に以下を追加することで行えます。</p>`,13)),l(h,{group:"build-script"},{default:t(()=>[l(n,{title:"Kotlin","group-key":"kotlin"},{default:t(()=>a[9]||(a[9]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withType"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"org"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"jetbrains"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"gradle"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"tasks"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"KotlinCompilationTask"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<*>>()")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"configureEach"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        compilerOptions")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            .languageVersion")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            ."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"set"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"                org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_1_9")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            )")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")])])])],-1)])),_:1}),l(n,{title:"Groovy","group-key":"groovy"},{default:t(()=>a[10]||(a[10]=[s("div",{class:"language-groovy vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"groovy"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    .withType("),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask."),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"class)")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    .configureEach {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        compilerOptions"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"languageVersion "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"=")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"            org.jetbrains.kotlin.gradle.dsl.KotlinVersion."),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"KOTLIN_1_9")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")])])])],-1)])),_:1})]),_:1}),a[19]||(a[19]=e(`<h3 id="kapt-スタブ生成タスクにおける-jvm-ir-バックエンドのデフォルトサポート" tabindex="-1">kapt スタブ生成タスクにおける JVM IR バックエンドのデフォルトサポート <a class="header-anchor" href="#kapt-スタブ生成タスクにおける-jvm-ir-バックエンドのデフォルトサポート" aria-label="Permalink to &quot;kapt スタブ生成タスクにおける JVM IR バックエンドのデフォルトサポート&quot;">​</a></h3><p>Kotlin 1.7.20 では、<a href="/ja/kotlin/whatsnew1720#support-for-the-jvm-ir-backend-in-kapt-stub-generating-task">kapt スタブ生成タスクにおける JVM IR バックエンドのサポート</a>を導入しました。今回のリリースから、このサポートはデフォルトで有効になります。有効にするために <code>kapt.use.jvm.ir=true</code> を <code>gradle.properties</code> で指定する必要はなくなりました。 この機能に関するフィードバックを<a href="https://youtrack.jetbrains.com/issue/KT-49682" target="_blank" rel="noreferrer">YouTrack</a>でお待ちしております。</p><h2 id="kotlin-native" tabindex="-1">Kotlin/Native <a class="header-anchor" href="#kotlin-native" aria-label="Permalink to &quot;Kotlin/Native&quot;">​</a></h2><p>Kotlin 1.8.20 には、サポートされる Kotlin/Native ターゲットの変更、Objective-C との相互運用性、CocoaPods Gradle プラグインの改善などが含まれています。</p><ul><li><a href="#update-for-kotlin-native-targets">Kotlin/Native ターゲットの更新</a></li><li><a href="#deprecation-of-the-legacy-memory-manager">レガシーメモリマネージャーの非推奨化</a></li><li><a href="#support-for-objective-c-headers-with-import-directives">@import ディレクティブを含む Objective-C ヘッダーのサポート</a></li><li><a href="#support-for-the-link-only-mode-in-cocoapods-gradle-plugin">Cocoapods Gradle プラグインにおけるリンクオンリーモードのサポート</a></li><li><a href="#import-objective-c-extensions-as-class-members-in-uikit">Objective-C 拡張を UIKit のクラスメンバとしてインポート</a></li><li><a href="#reimplementation-of-compiler-cache-management-in-the-compiler">コンパイラにおけるコンパイラキャッシュ管理の再実装</a></li><li><a href="#deprecation-of-uselibraries-in-cocoapods-gradle-plugin">Cocoapods Gradle プラグインにおける <code>useLibraries()</code> の非推奨化</a></li></ul><h3 id="kotlin-native-ターゲットの更新" tabindex="-1">Kotlin/Native ターゲットの更新 <a class="header-anchor" href="#kotlin-native-ターゲットの更新" aria-label="Permalink to &quot;Kotlin/Native ターゲットの更新&quot;">​</a></h3><p>Kotlin チームは、Kotlin/Native でサポートされるターゲットのリストを見直し、ティアに分割し、 Kotlin 1.8.20 から一部のターゲットを非推奨とすることを決定しました。サポートされるターゲットと非推奨のターゲットの全リストについては、<a href="/ja/kotlin/native-target-support">Kotlin/Native ターゲットサポート</a>セクションを参照してください。</p><p>以下のターゲットは Kotlin 1.8.20 で非推奨となり、1.9.20 で削除されます。</p><ul><li><code>iosArm32</code></li><li><code>watchosX86</code></li><li><code>wasm32</code></li><li><code>mingwX86</code></li><li><code>linuxArm32Hfp</code></li><li><code>linuxMips32</code></li><li><code>linuxMipsel32</code></li></ul><p>残りのターゲットについては、Kotlin/Native コンパイラでターゲットがどの程度サポートされ、テストされているかに応じて、3つのサポートティアが設けられました。ターゲットは異なるティアに移動する可能性があります。例えば、<code>iosArm64</code> は<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/get-started.html" target="_blank" rel="noreferrer">Kotlin Multiplatform</a>にとって重要であるため、将来的には完全なサポートを提供するよう最善を尽くします。</p><p>ライブラリの作者であれば、これらのターゲットティアは CI ツールでどのターゲットをテストし、どのターゲットをスキップするかを決定するのに役立ちます。Kotlin チームは、<a href="/ja/kotlin/coroutines-guide">kotlinx.coroutines</a> のような公式 Kotlin ライブラリを開発する際にも同じアプローチを使用します。</p><p>これらの変更の理由については、<a href="https://blog.jetbrains.com/kotlin/2023/02/update-regarding-kotlin-native-targets/" target="_blank" rel="noreferrer">ブログ記事</a>をご覧ください。</p><h3 id="レガシーメモリマネージャーの非推奨化" tabindex="-1">レガシーメモリマネージャーの非推奨化 <a class="header-anchor" href="#レガシーメモリマネージャーの非推奨化" aria-label="Permalink to &quot;レガシーメモリマネージャーの非推奨化&quot;">​</a></h3><p>1.8.20 以降、レガシーメモリマネージャーは非推奨となり、1.9.20 で削除されます。 <a href="/ja/kotlin/native-memory-manager">新しいメモリマネージャー</a>は 1.7.20 でデフォルトで有効になり、さらなる安定性アップデートとパフォーマンス改善を受けてきました。</p><p>まだレガシーメモリマネージャーを使用している場合は、<code>gradle.properties</code> から <code>kotlin.native.binary.memoryModel=strict</code> オプションを削除し、必要な変更を行うために<a href="/ja/kotlin/native-migration-guide">移行ガイド</a>に従ってください。</p><p>新しいメモリマネージャーは <code>wasm32</code> ターゲットをサポートしていません。このターゲットも<a href="#update-for-kotlin-native-targets">今回のリリースから非推奨</a>となり、1.9.20 で削除されます。</p><h3 id="import-ディレクティブを含む-objective-c-ヘッダーのサポート" tabindex="-1">@import ディレクティブを含む Objective-C ヘッダーのサポート <a class="header-anchor" href="#import-ディレクティブを含む-objective-c-ヘッダーのサポート" aria-label="Permalink to &quot;@import ディレクティブを含む Objective-C ヘッダーのサポート&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>この機能は<a href="/ja/kotlin/components-stability#stability-levels-explained">実験的</a>です。 いつでも変更または削除される可能性があります。オプトインが必要です（詳細は下記参照）。評価目的でのみ使用してください。 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a> でのフィードバックをお待ちしております。</p></div><p>Kotlin/Native は <code>@import</code> ディレクティブを含む Objective-C ヘッダーをインポートできるようになりました。この機能は、自動生成された Objective-C ヘッダーを持つ Swift ライブラリや、Swift で書かれた CocoaPods 依存関係のクラスを使用する場合に役立ちます。</p><p>以前は、cinterop ツールは <code>@import</code> ディレクティブを介して Objective-C モジュールに依存するヘッダーを解析できませんでした。その理由は、<code>-fmodules</code> オプションのサポートが不足していたためです。</p><p>Kotlin 1.8.20 以降、<code>@import</code> を使用する Objective-C ヘッダーを使用できます。これを行うには、定義ファイルで <code>-fmodules</code> オプションを <code>compilerOpts</code> としてコンパイラに渡します。<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-cocoapods-overview.html" target="_blank" rel="noreferrer">CocoaPods 統合</a>を使用している場合、<code>pod()</code> 関数の構成ブロックで cinterop オプションを次のように指定します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ios</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    cocoapods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        summary </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;CocoaPods test library&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        homepage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://github.com/JetBrains/kotlin&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ios.deploymentTarget </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;13.5&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        pod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;PodName&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            extraOpts </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-compiler-option&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-fmodules&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>これは<a href="https://youtrack.jetbrains.com/issue/KT-39120" target="_blank" rel="noreferrer">待望の機能</a>であり、将来のリリースでデフォルトにするためのフィードバックを<a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a>でお待ちしております。</p><h3 id="cocoapods-gradle-プラグインにおけるリンクオンリーモードのサポート" tabindex="-1">Cocoapods Gradle プラグインにおけるリンクオンリーモードのサポート <a class="header-anchor" href="#cocoapods-gradle-プラグインにおけるリンクオンリーモードのサポート" aria-label="Permalink to &quot;Cocoapods Gradle プラグインにおけるリンクオンリーモードのサポート&quot;">​</a></h3><p>Kotlin 1.8.20 では、Pod 依存関係を動的フレームワークとともにリンク専用で使用し、 cinterop バインディングを生成しないようにすることができます。これは cinterop バインディングがすでに生成されている場合に便利です。</p><p>ライブラリとアプリの2つのモジュールを持つプロジェクトを考えてみましょう。ライブラリは Pod に依存しますが、フレームワークは生成せず、<code>.klib</code> のみ生成します。アプリはライブラリに依存し、動的フレームワークを生成します。 この場合、ライブラリが依存する Pods とこのフレームワークをリンクする必要がありますが、cinterop バインディングはすでにライブラリ用に生成されているため、必要ありません。</p><p>この機能を有効にするには、Pod への依存関係を追加する際に <code>linkOnly</code> オプションまたはビルダープロパティを使用します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cocoapods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    summary </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;CocoaPods test library&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    homepage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://github.com/JetBrains/kotlin&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    pod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Alamofire&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, linkOnly </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        version </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;5.7.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>このオプションを静的フレームワークとともに使用すると、Pods は静的フレームワークのリンクには使用されないため、Pod 依存関係が完全に削除されます。</p></div><h3 id="objective-c-拡張を-uikit-のクラスメンバとしてインポート" tabindex="-1">Objective-C 拡張を UIKit のクラスメンバとしてインポート <a class="header-anchor" href="#objective-c-拡張を-uikit-のクラスメンバとしてインポート" aria-label="Permalink to &quot;Objective-C 拡張を UIKit のクラスメンバとしてインポート&quot;">​</a></h3><p>Xcode 14.1 以降、Objective-C クラスの一部のメソッドがカテゴリメンバに移動されました。これにより、異なる Kotlin API が生成され、これらのメソッドはメソッドではなく Kotlin 拡張としてインポートされるようになりました。</p><p>これにより、UIKit を使用してメソッドをオーバーライドする際に問題が発生することがありました。たとえば、Kotlin で UIVIew をサブクラス化する際に <code>drawRect()</code> や <code>layoutSubviews()</code> メソッドをオーバーライドできなくなりました。</p><p>1.8.20 以降、NSView および UIView クラスと同じヘッダーで宣言されているカテゴリメンバは、これらのクラスのメンバとしてインポートされます。これは、NSView および UIView からサブクラス化するメソッドが、他のメソッドと同様に簡単にオーバーライドできることを意味します。</p><p>すべてがうまくいけば、将来的にはこの動作をすべての Objective-C クラスでデフォルトで有効にする予定です。</p><h3 id="コンパイラにおけるコンパイラキャッシュ管理の再実装" tabindex="-1">コンパイラにおけるコンパイラキャッシュ管理の再実装 <a class="header-anchor" href="#コンパイラにおけるコンパイラキャッシュ管理の再実装" aria-label="Permalink to &quot;コンパイラにおけるコンパイラキャッシュ管理の再実装&quot;">​</a></h3><p>コンパイラキャッシュの進化を加速させるため、コンパイラキャッシュ管理を Kotlin Gradle プラグインから Kotlin/Native コンパイラに移行しました。これにより、コンパイル時間やコンパイラキャッシュの柔軟性に関するいくつかの重要な改善への作業が開放されます。</p><p>問題が発生し、古い動作に戻す必要がある場合は、<code>kotlin.native.cacheOrchestration=gradle</code> という Gradle プロパティを使用してください。</p><p>この件に関するフィードバックを<a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a>でお待ちしております。</p><h3 id="cocoapods-gradle-プラグインにおける-uselibraries-の非推奨化" tabindex="-1">Cocoapods Gradle プラグインにおける useLibraries() の非推奨化 <a class="header-anchor" href="#cocoapods-gradle-プラグインにおける-uselibraries-の非推奨化" aria-label="Permalink to &quot;Cocoapods Gradle プラグインにおける useLibraries() の非推奨化&quot;">​</a></h3><p>Kotlin 1.8.20 では、静的ライブラリ向けの <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-cocoapods-overview.html" target="_blank" rel="noreferrer">CocoaPods 統合</a>で使用される <code>useLibraries()</code> 関数の非推奨化サイクルを開始します。</p><p>私たちは静的ライブラリを含む Pods への依存を可能にするために <code>useLibraries()</code> 関数を導入しました。しかし、時間の経過とともに、このケースは非常にまれになりました。ほとんどの Pods はソースで配布されており、Objective-C フレームワークまたは XCFrameworks がバイナリ配布の一般的な選択肢となっています。</p><p>この関数は人気がなく、Kotlin CocoaPods Gradle プラグインの開発を複雑にする問題を引き起こすため、非推奨とすることにしました。</p><p>フレームワークと XCFrameworks の詳細については、<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-build-native-binaries.html" target="_blank" rel="noreferrer">最終ネイティブバイナリのビルド</a>を参照してください。</p><h2 id="kotlin-multiplatform" tabindex="-1">Kotlin Multiplatform <a class="header-anchor" href="#kotlin-multiplatform" aria-label="Permalink to &quot;Kotlin Multiplatform&quot;">​</a></h2><p>Kotlin 1.8.20 は、Kotlin Multiplatform への以下のアップデートにより、開発者エクスペリエンスの向上を目指します。</p><ul><li><a href="#new-approach-to-source-set-hierarchy">ソースセット階層の設定における新しいアプローチ</a></li><li><a href="#preview-of-gradle-composite-builds-support-in-kotlin-multiplatform">Kotlin Multiplatform での Gradle コンポジットビルドのサポートのプレビュー</a></li><li><a href="#improved-output-for-gradle-errors-in-xcode">Xcode での Gradle エラー出力の改善</a></li></ul><h3 id="ソースセット階層への新しいアプローチ" tabindex="-1">ソースセット階層への新しいアプローチ <a class="header-anchor" href="#ソースセット階層への新しいアプローチ" aria-label="Permalink to &quot;ソースセット階層への新しいアプローチ&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>ソースセット階層への新しいアプローチは<a href="/ja/kotlin/components-stability#stability-levels-explained">実験的</a>です。 将来の Kotlin リリースで予告なく変更される可能性があります。オプトインが必要です（詳細は下記参照）。 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a> でのフィードバックをお待ちしております。</p></div><p>Kotlin 1.8.20 では、マルチプラットフォームプロジェクトのソースセット階層を設定する新しい方法として、デフォルトのターゲット階層を提供します。この新しいアプローチは、<a href="#why-replace-shortcuts">設計上の欠陥</a>がある <code>ios</code> のようなターゲットショートカットを置き換えることを意図しています。</p><p>デフォルトのターゲット階層のアイデアはシンプルです。プロジェクトがコンパイルするすべてのターゲットを明示的に宣言すると、Kotlin Gradle プラグインが指定されたターゲットに基づいて共有ソースセットを自動的に作成します。</p><h4 id="プロジェクトのセットアップ" tabindex="-1">プロジェクトのセットアップ <a class="header-anchor" href="#プロジェクトのセットアップ" aria-label="Permalink to &quot;プロジェクトのセットアップ&quot;">​</a></h4><p>簡単なマルチプラットフォームモバイルアプリの例を考えてみましょう。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalKotlinGradlePluginApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Enable the default target hierarchy:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    targetHierarchy.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    android</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosSimulatorArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>デフォルトのターゲット階層は、利用可能なすべてのターゲットとそれらの共有ソースセットのテンプレートとして考えることができます。コード内で最終的なターゲット <code>android</code>、<code>iosArm64</code>、<code>iosSimulatorArm64</code> を宣言すると、Kotlin Gradle プラグインがテンプレートから適切な共有ソースセットを見つけて作成します。その結果の階層は次のようになります。</p>`,54)),a[20]||(a[20]=s("p",null,[s("img",{src:r,alt:"デフォルトのターゲット階層の使用例",thumbnail:"true",width:"350","thumbnail-same-file":"true"})],-1)),a[21]||(a[21]=e('<p>緑色のソースセットは実際に作成されプロジェクトに存在しますが、デフォルトテンプレートからの灰色のソースセットは無視されます。ご覧のとおり、Kotlin Gradle プラグインは、たとえば <code>watchos</code> ソースセットを作成していません。これは、プロジェクトに watchOS ターゲットがないためです。</p><p><code>watchosArm64</code> のような watchOS ターゲットを追加すると、<code>watchos</code> ソースセットが作成され、<code>apple</code>、<code>native</code>、<code>common</code> ソースセットからのコードも <code>watchosArm64</code> にコンパイルされます。</p><p>デフォルトのターゲット階層の完全なスキームは、<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-hierarchy.html#default-hierarchy-template" target="_blank" rel="noreferrer">ドキュメント</a>で確認できます。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>この例では、<code>apple</code> および <code>native</code> ソースセットは <code>iosArm64</code> および <code>iosSimulatorArm64</code> ターゲットにのみコンパイルされます。 そのため、それらの名前にもかかわらず、完全な iOS API にアクセスできます。 これは <code>native</code> のようなソースセットでは直感に反するかもしれません。なぜなら、このソースセットではすべてのネイティブターゲットで利用可能な API のみがアクセス可能であると期待されるかもしれないからです。この動作は将来変更される可能性があります。</p></div>',4)),a[22]||(a[22]=s("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"ショートカットを置き換える理由",tabindex:"-1"},[i("ショートカットを置き換える理由 "),s("a",{class:"header-anchor",href:"#ショートカットを置き換える理由","aria-label":'Permalink to "ショートカットを置き換える理由 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),a[23]||(a[23]=e('<p>ソースセットの階層を作成することは、冗長でエラーが発生しやすく、初心者には優しくありませんでした。以前の解決策は、<code>ios</code> のようなショートカットを導入し、階層の一部を自動生成することでした。しかし、ショートカットの使用は、大きな設計上の欠陥、つまり変更が難しいという問題があることが判明しました。</p><p>例えば、<code>ios</code> ショートカットは <code>iosArm64</code> と <code>iosX64</code> ターゲットのみを作成します。これは混乱を招き、<code>iosSimulatorArm64</code> ターゲットも必要とする M1 ベースのホストで作業する際に問題を引き起こす可能性があります。しかし、<code>iosSimulatorArm64</code> ターゲットを追加することは、ユーザープロジェクトにとって非常に破壊的な変更となる可能性があります。</p><ul><li><code>iosMain</code> ソースセットで使用されるすべての依存関係は、<code>iosSimulatorArm64</code> ターゲットをサポートしている必要があります。そうでない場合、依存関係の解決が失敗します。</li><li><code>iosMain</code> で使用される一部のネイティブ API は、新しいターゲットを追加すると消失する可能性があります（ただし、<code>iosSimulatorArm64</code> の場合は可能性は低いです）。</li><li>Intel ベースの MacBook で小さな個人プロジェクトを作成している場合など、この変更が不要な場合もあります。</li></ul><p>ショートカットが階層の設定という問題を解決しなかったことは明らかになり、そのため、ある時点で新しいショートカットの追加を中止しました。</p><p>デフォルトのターゲット階層は一見ショートカットに似ているかもしれませんが、重要な違いがあります。それは、<strong>ユーザーがターゲットのセットを明示的に指定する必要がある</strong>ということです。このセットは、プロジェクトがどのようにコンパイルされ、公開され、依存関係の解決に参加するかを定義します。このセットが固定されているため、Kotlin Gradle プラグインによるデフォルト設定の変更は、エコシステムに与える混乱が大幅に少なくなり、ツール支援による移行の提供がはるかに容易になります。</p><h4 id="デフォルトの階層を有効にする方法" tabindex="-1">デフォルトの階層を有効にする方法 <a class="header-anchor" href="#デフォルトの階層を有効にする方法" aria-label="Permalink to &quot;デフォルトの階層を有効にする方法&quot;">​</a></h4><p>この新機能は<a href="/ja/kotlin/components-stability#stability-levels-explained">実験的</a>です。Kotlin Gradle ビルドスクリプトの場合、<code>@OptIn(ExperimentalKotlinGradlePluginApi::class)</code> でオプトインする必要があります。</p><p>詳細については、<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-hierarchy.html#default-hierarchy-template" target="_blank" rel="noreferrer">階層型プロジェクト構造</a>を参照してください。</p><h4 id="フィードバックを残す" tabindex="-1">フィードバックを残す <a class="header-anchor" href="#フィードバックを残す" aria-label="Permalink to &quot;フィードバックを残す&quot;">​</a></h4><p>これはマルチプラットフォームプロジェクトにとって重要な変更です。より良くするために、皆様からの<a href="https://kotl.in/issue" target="_blank" rel="noreferrer">フィードバック</a>をお待ちしております。</p><h3 id="kotlin-multiplatform-での-gradle-コンポジットビルドのサポートのプレビュー" tabindex="-1">Kotlin Multiplatform での Gradle コンポジットビルドのサポートのプレビュー <a class="header-anchor" href="#kotlin-multiplatform-での-gradle-コンポジットビルドのサポートのプレビュー" aria-label="Permalink to &quot;Kotlin Multiplatform での Gradle コンポジットビルドのサポートのプレビュー&quot;">​</a></h3><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>この機能は Kotlin Gradle Plugin 1.8.20 から Gradle ビルドでサポートされています。IDE サポートについては、IntelliJ IDEA 2023.1 Beta 2 (231.8109.2) 以降と、任意の Kotlin IDE プラグインを搭載した Kotlin Gradle プラグイン 1.8.20 を使用してください。</p></div><p>1.8.20 以降、Kotlin Multiplatform は <a href="https://docs.gradle.org/current/userguide/composite_builds.html" target="_blank" rel="noreferrer">Gradle コンポジットビルド</a>をサポートします。 コンポジットビルドを使用すると、別々のプロジェクトのビルド、または同じプロジェクトの一部を単一のビルドに含めることができます。</p><p>いくつかの技術的な課題により、Kotlin Multiplatform での Gradle コンポジットビルドの使用は部分的にしかサポートされていませんでした。 Kotlin 1.8.20 には、より多くの種類のプロジェクトで動作するはずの改善されたサポートのプレビューが含まれています。 試すには、<code>gradle.properties</code> に以下のオプションを追加してください。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.mpp.import.enableKgpDependencyResolution=true</span></span></code></pre></div><p>このオプションは、新しいインポートモードのプレビューを有効にします。コンポジットビルドのサポートに加えて、インポートをより安定させるための主要なバグ修正と改善が含まれているため、マルチプラットフォームプロジェクトでのインポートエクスペリエンスがよりスムーズになります。</p><h4 id="既知の問題" tabindex="-1">既知の問題 <a class="header-anchor" href="#既知の問題" aria-label="Permalink to &quot;既知の問題&quot;">​</a></h4><p>これはまだプレビューバージョンであり、さらなる安定化が必要です。途中でインポートに関するいくつかの問題に遭遇する可能性があります。Kotlin 1.8.20 の最終リリース前に修正を計画している既知の問題をいくつか挙げます。</p><ul><li>IntelliJ IDEA 2023.1 EAP には、まだ Kotlin 1.8.20 プラグインが利用できません。それでも、Kotlin Gradle プラグインのバージョンを 1.8.20 に設定し、この IDE でコンポジットビルドを試すことはできます。</li><li>プロジェクトに <code>rootProject.name</code> が指定されたビルドが含まれている場合、コンポジットビルドが Kotlin メタデータを解決できないことがあります。 回避策と詳細については、この <a href="https://youtrack.jetbrains.com/issue/KT-56536" target="_blank" rel="noreferrer">Youtrack 課題</a>を参照してください。</li></ul><p>ぜひお試しいただき、<a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a> にすべてのレポートを提出して、Kotlin 1.9.0 でデフォルトにするためのご協力をお願いいたします。</p><h3 id="xcode-での-gradle-エラー出力の改善" tabindex="-1">Xcode での Gradle エラー出力の改善 <a class="header-anchor" href="#xcode-での-gradle-エラー出力の改善" aria-label="Permalink to &quot;Xcode での Gradle エラー出力の改善&quot;">​</a></h3><p>Xcode でマルチプラットフォームプロジェクトをビルドする際に問題が発生した場合、「Command PhaseScriptExecution failed with a nonzero exit code」というエラーに遭遇したことがあるかもしれません。 このメッセージは Gradle の呼び出しが失敗したことを示しますが、問題の検出にはあまり役立ちません。</p><p>Kotlin 1.8.20 以降、Xcode は Kotlin/Native コンパイラからの出力を解析できるようになりました。さらに、Gradle ビルドが失敗した場合、Xcode で根本原因の例外からの追加のエラーメッセージが表示されます。ほとんどの場合、これにより根本的な問題を特定するのに役立ちます。</p><p><img src="'+o+`" alt="Xcode での Gradle エラー出力の改善" width="700"></p><p>この新しい動作は、Xcode 統合のための標準的な Gradle タスク（例えば、マルチプラットフォームプロジェクトの iOS フレームワークを Xcode の iOS アプリケーションに接続できる <code>embedAndSignAppleFrameworkForXcode</code> など）でデフォルトで有効になっています。また、<code>kotlin.native.useXcodeMessageStyle</code> Gradle プロパティを使用して有効（または無効）にすることもできます。</p><h2 id="kotlin-javascript" tabindex="-1">Kotlin/JavaScript <a class="header-anchor" href="#kotlin-javascript" aria-label="Permalink to &quot;Kotlin/JavaScript&quot;">​</a></h2><p>Kotlin 1.8.20 では、TypeScript 定義の生成方法が変更されました。また、デバッグエクスペリエンスを向上させるための変更も含まれています。</p><ul><li><a href="#removal-of-dukat-integration-from-gradle-plugin">Gradle プラグインからの Dukat 統合の削除</a></li><li><a href="#kotlin-variable-and-function-names-in-source-maps">ソースマップにおける Kotlin の変数名と関数名</a></li><li><a href="#opt-in-for-generation-of-typescript-definition-files">TypeScript 定義ファイルの生成をオプトイン</a></li></ul><h3 id="gradle-プラグインからの-dukat-統合の削除" tabindex="-1">Gradle プラグインからの Dukat 統合の削除 <a class="header-anchor" href="#gradle-プラグインからの-dukat-統合の削除" aria-label="Permalink to &quot;Gradle プラグインからの Dukat 統合の削除&quot;">​</a></h3><p>Kotlin 1.8.20 では、Kotlin/JavaScript Gradle プラグインから<a href="/ja/kotlin/components-stability#stability-levels-explained">実験的</a>な Dukat 統合を削除しました。Dukat 統合は、TypeScript 宣言ファイル（<code>.d.ts</code>）から Kotlin 外部宣言への自動変換をサポートしていました。</p><p>TypeScript 宣言ファイル（<code>.d.ts</code>）から Kotlin 外部宣言への変換は、引き続き<a href="https://github.com/Kotlin/dukat" target="_blank" rel="noreferrer">Dukat ツール</a>を使用することで可能です。</p><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>Dukat ツールは<a href="/ja/kotlin/components-stability#stability-levels-explained">実験的</a>です。 いつでも変更または削除される可能性があります。</p></div><h3 id="ソースマップにおける-kotlin-の変数名と関数名" tabindex="-1">ソースマップにおける Kotlin の変数名と関数名 <a class="header-anchor" href="#ソースマップにおける-kotlin-の変数名と関数名" aria-label="Permalink to &quot;ソースマップにおける Kotlin の変数名と関数名&quot;">​</a></h3><p>デバッグを助けるために、変数や関数の Kotlin コードで宣言した名前をソースマップに追加する機能が導入されました。1.8.20 以前は、これらはソースマップで利用できなかったため、デバッガでは常に生成された JavaScript の変数名と関数名が表示されていました。</p><p>Gradle ファイル <code>build.gradle.kts</code> の <code>sourceMapNamesPolicy</code>、または <code>-source-map-names-policy</code> コンパイラオプションを使用して、追加する内容を設定できます。以下の表に可能な設定を示します。</p><table tabindex="0"><thead><tr><th>設定</th><th>説明</th><th>出力例</th></tr></thead><tbody><tr><td><code>simple-names</code></td><td>変数名と単純な関数名が追加されます。（デフォルト）</td><td><code>main</code></td></tr><tr><td><code>fully-qualified-names</code></td><td>変数名と完全修飾関数名が追加されます。</td><td><code>com.example.kjs.playground.main</code></td></tr><tr><td><code>no</code></td><td>変数名も関数名も追加されません。</td><td>N/A</td></tr></tbody></table><p><code>build.gradle.kts</code> ファイルの構成例を以下に示します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tasks.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">org</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jetbrains</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gradle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tasks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Kotlin2JsCompile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configureEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    compilercompileOptions.sourceMapNamesPolicy.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(org.jetbrains.kotlin.gradle.dsl.JsSourceMapNamesPolicy.SOURCE_MAP_NAMES_POLICY_FQ_NAMES) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// or SOURCE_MAP_NAMES_POLICY_NO, or SOURCE_MAP_NAMES_POLICY_SIMPLE_NAMES</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Chromium ベースのブラウザで提供されるもののようなデバッグツールは、ソースマップから元の Kotlin 名を取得して、スタックトレースの可読性を向上させることができます。快適なデバッグをお楽しみください！</p><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>ソースマップへの変数名と関数名の追加は<a href="/ja/kotlin/components-stability#stability-levels-explained">実験的</a>です。 いつでも変更または削除される可能性があります。</p></div><h3 id="typescript-定義ファイルの生成をオプトイン" tabindex="-1">TypeScript 定義ファイルの生成をオプトイン <a class="header-anchor" href="#typescript-定義ファイルの生成をオプトイン" aria-label="Permalink to &quot;TypeScript 定義ファイルの生成をオプトイン&quot;">​</a></h3><p>以前は、実行可能ファイルを生成するプロジェクト (<code>binaries.executable()</code>) の場合、Kotlin/JS IR コンパイラは <code>@JsExport</code> でマークされたトップレベル宣言を収集し、自動的に TypeScript 定義を <code>.d.ts</code> ファイルに生成していました。</p><p>これはすべてのプロジェクトに役立つわけではないため、Kotlin 1.8.20 では動作を変更しました。TypeScript 定義を生成したい場合は、Gradle ビルドファイルで明示的にこれを構成する必要があります。<code>build.gradle.kts</code> ファイルの <a href="/ja/kotlin/js-project-setup#execution-environments"><code>js</code> セクション</a>に <code>generateTypeScriptDefinitions()</code> を追加してください。例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        binaries.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        browser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        generateTypeScriptDefinitions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>TypeScript 定義 (<code>d.ts</code>) の生成は<a href="/ja/kotlin/components-stability#stability-levels-explained">実験的</a>です。いつでも削除または変更される可能性があります。</p></div><h2 id="gradle" tabindex="-1">Gradle <a class="header-anchor" href="#gradle" aria-label="Permalink to &quot;Gradle&quot;">​</a></h2><p>Kotlin 1.8.20 は、Gradle 6.8 から 7.6 までと完全に互換性がありますが、<a href="https://youtrack.jetbrains.com/issue/KT-55751" target="_blank" rel="noreferrer">Multiplatform プラグインのいくつかの特別なケース</a>は除きます。 最新の Gradle リリースまで使用することもできますが、その場合、非推奨の警告に遭遇したり、一部の新しい Gradle 機能が動作しない可能性があることに注意してください。</p><p>このバージョンでは、以下の変更が加えられました。</p><ul><li><a href="#new-gradle-plugins-versions-alignment">新しい Gradle プラグインバージョンのアラインメント</a></li><li><a href="#new-jvm-incremental-compilation-by-default-in-gradle">Gradle でデフォルトで有効になった新しい JVM インクリメンタルコンパイル</a></li><li><a href="#precise-backup-of-compilation-tasks-outputs">コンパイルタスク出力の正確なバックアップ</a></li><li><a href="#lazy-kotlin-jvm-tasks-creation-for-all-gradle-versions">すべての Gradle バージョンで Kotlin/JVM タスクを遅延作成</a></li><li><a href="#non-default-location-of-compile-tasks-destinationdirectory">コンパイルタスクの destinationDirectory の非デフォルトロケーション</a></li><li><a href="#ability-to-opt-out-from-reporting-compiler-arguments-to-an-http-statistics-service">HTTP 統計サービスへのコンパイラ引数のレポートをオプトアウトする機能</a></li></ul><h3 id="新しい-gradle-プラグインバージョンのアラインメント" tabindex="-1">新しい Gradle プラグインバージョンのアラインメント <a class="header-anchor" href="#新しい-gradle-プラグインバージョンのアラインメント" aria-label="Permalink to &quot;新しい Gradle プラグインバージョンのアラインメント&quot;">​</a></h3><p>Gradle は、連携して動作する必要がある依存関係の<a href="https://docs.gradle.org/current/userguide/dependency_version_alignment.html#aligning_versions_natively_with_gradle" target="_blank" rel="noreferrer">バージョンを常に揃える</a>方法を提供しています。 Kotlin 1.8.20 もこのアプローチを採用しました。デフォルトで動作するため、有効にするために設定を変更したり更新したりする必要はありません。さらに、<a href="/ja/kotlin/whatsnew18#resolution-of-kotlin-gradle-plugins-transitive-dependencies">Kotlin Gradle プラグインの推移的依存関係を解決するためのこの回避策</a>に頼る必要もなくなりました。</p><p>この機能に関するフィードバックを<a href="https://youtrack.jetbrains.com/issue/KT-54691" target="_blank" rel="noreferrer">YouTrack</a>でお待ちしております。</p><h3 id="gradle-でデフォルトで有効になった新しい-jvm-インクリメンタルコンパイル" tabindex="-1">Gradle でデフォルトで有効になった新しい JVM インクリメンタルコンパイル <a class="header-anchor" href="#gradle-でデフォルトで有効になった新しい-jvm-インクリメンタルコンパイル" aria-label="Permalink to &quot;Gradle でデフォルトで有効になった新しい JVM インクリメンタルコンパイル&quot;">​</a></h3><p><a href="/ja/kotlin/whatsnew17#a-new-approach-to-incremental-compilation">Kotlin 1.7.0 から利用可能</a>になったインクリメンタルコンパイルの新しいアプローチは、デフォルトで動作するようになりました。有効にするために <code>kotlin.incremental.useClasspathSnapshot=true</code> を <code>gradle.properties</code> で指定する必要はなくなりました。</p><p>この件に関するフィードバックをお待ちしております。<a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a>で課題を報告してください。</p><h3 id="コンパイルタスク出力の正確なバックアップ" tabindex="-1">コンパイルタスク出力の正確なバックアップ <a class="header-anchor" href="#コンパイルタスク出力の正確なバックアップ" aria-label="Permalink to &quot;コンパイルタスク出力の正確なバックアップ&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>コンパイルタスク出力の正確なバックアップは<a href="/ja/kotlin/components-stability#stability-levels-explained">実験的</a>です。 使用するには、<code>gradle.properties</code> に <code>kotlin.compiler.preciseCompilationResultsBackup=true</code> を追加してください。 <a href="https://kotl.in/issue/experimental-ic-optimizations" target="_blank" rel="noreferrer">YouTrack</a> でのフィードバックをお待ちしております。</p></div><p>Kotlin 1.8.20 以降、正確なバックアップを有効にできるようになりました。これにより、<a href="/ja/kotlin/gradle-compilation-and-caches#incremental-compilation">インクリメンタルコンパイル</a>で Kotlin が再コンパイルするクラスのみがバックアップされます。 完全バックアップと正確なバックアップの両方が、コンパイルエラー後にビルドをインクリメンタルに再度実行するのに役立ちます。正確なバックアップは、完全バックアップと比較してビルド時間を節約します。完全バックアップは、特にプロジェクトが遅い HDD にある場合や、多くのタスクがバックアップを行っている場合に、大規模プロジェクトで<strong>かなりの</strong>ビルド時間を要する可能性があります。</p><p>この最適化は実験的です。<code>gradle.properties</code> ファイルに <code>kotlin.compiler.preciseCompilationResultsBackup</code> Gradle プロパティを追加することで有効にできます。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.compiler.preciseCompilationResultsBackup=true</span></span></code></pre></div>`,60)),a[24]||(a[24]=s("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"jetbrains-における正確なバックアップ使用例",tabindex:"-1"},[i("JetBrains における正確なバックアップ使用例 "),s("a",{class:"header-anchor",href:"#jetbrains-における正確なバックアップ使用例","aria-label":'Permalink to "JetBrains における正確なバックアップ使用例 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),a[25]||(a[25]=e('<p>以下のチャートでは、完全バックアップと比較した正確なバックアップの使用例を確認できます。</p><p><img src="'+d+'" alt="完全バックアップと正確なバックアップの比較" width="700"></p><p>最初の2つのチャートは、Kotlin プロジェクトにおける正確なバックアップが、Kotlin Gradle プラグインのビルドにどのように影響するかを示しています。</p><ol><li>多くのモジュールが依存するモジュールに、小さな <a href="https://en.wikipedia.org/wiki/Application_binary_interface" target="_blank" rel="noreferrer">ABI</a> 変更（新しいパブリックメソッドの追加）を加えた後。</li><li>他のモジュールが依存しないモジュールに、小さな非 ABI 変更（プライベート関数の追加）を加えた後。</li></ol><p>3番目のチャートは、<a href="https://www.jetbrains.com/space/" target="_blank" rel="noreferrer">Space</a> プロジェクトにおける正確なバックアップが、多くのモジュールが依存する Kotlin/JS モジュールに小さな非 ABI 変更（プライベート関数の追加）を加えた後の Web フロントエンドのビルドにどのように影響するかを示しています。</p><p>これらの測定は Apple M1 Max CPU を搭載したコンピュータで実施されました。異なるコンピュータではわずかに異なる結果が得られる場合があります。パフォーマンスに影響を与える要因には、以下が含まれますが、これらに限定されません。</p><ul><li><a href="/ja/kotlin/gradle-compilation-and-caches#the-kotlin-daemon-and-how-to-use-it-with-gradle">Kotlin デーモン</a>と <a href="https://docs.gradle.org/current/userguide/gradle_daemon.html" target="_blank" rel="noreferrer">Gradle デーモン</a>のウォームアップ度。</li><li>ディスクの速度。</li><li>CPU モデルと使用率。</li><li>変更によって影響を受けるモジュールと、それらのモジュールのサイズ。</li><li>変更が ABI 変更か非 ABI 変更か。</li></ul>',7)),a[26]||(a[26]=s("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"ビルドレポートを使用した最適化の評価",tabindex:"-1"},[i("ビルドレポートを使用した最適化の評価 "),s("a",{class:"header-anchor",href:"#ビルドレポートを使用した最適化の評価","aria-label":'Permalink to "ビルドレポートを使用した最適化の評価 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),a[27]||(a[27]=e(`<p>使用しているコンピュータで、プロジェクトとシナリオに対する最適化の影響を評価するには、<a href="/ja/kotlin/gradle-compilation-and-caches#build-reports">Kotlin ビルドレポート</a>を使用できます。 以下のプロパティを <code>gradle.properties</code> ファイルに追加して、テキストファイル形式のレポートを有効にします。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.build.report.output=file</span></span></code></pre></div><p>正確なバックアップを有効にする前のレポートの関連部分の例を以下に示します。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Task &#39;:kotlin-gradle-plugin:compileCommonKotlin&#39; finished in 0.59 s</span></span>
<span class="line"><span>&lt;...&gt;</span></span>
<span class="line"><span>Time metrics:</span></span>
<span class="line"><span> Total Gradle task time: 0.59 s</span></span>
<span class="line"><span> Task action before worker execution: 0.24 s</span></span>
<span class="line"><span>  Backup output: 0.22 s // Pay attention to this number </span></span>
<span class="line"><span>&lt;...&gt;</span></span></code></pre></div><p>正確なバックアップを有効にした後のレポートの関連部分の例を以下に示します。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Task &#39;:kotlin-gradle-plugin:compileCommonKotlin&#39; finished in 0.46 s</span></span>
<span class="line"><span>&lt;...&gt;</span></span>
<span class="line"><span>Time metrics:</span></span>
<span class="line"><span> Total Gradle task time: 0.46 s</span></span>
<span class="line"><span> Task action before worker execution: 0.07 s</span></span>
<span class="line"><span>  Backup output: 0.05 s // The time has reduced</span></span>
<span class="line"><span> Run compilation in Gradle worker: 0.32 s</span></span>
<span class="line"><span>  Clear jar cache: 0.00 s</span></span>
<span class="line"><span>  Precise backup output: 0.00 s // Related to precise backup</span></span>
<span class="line"><span>  Cleaning up the backup stash: 0.00 s // Related to precise backup</span></span>
<span class="line"><span>&lt;...&gt;</span></span></code></pre></div><h3 id="すべての-gradle-バージョンで-kotlin-jvm-タスクを遅延作成" tabindex="-1">すべての Gradle バージョンで Kotlin/JVM タスクを遅延作成 <a class="header-anchor" href="#すべての-gradle-バージョンで-kotlin-jvm-タスクを遅延作成" aria-label="Permalink to &quot;すべての Gradle バージョンで Kotlin/JVM タスクを遅延作成&quot;">​</a></h3><p>Gradle 7.3+ で <code>org.jetbrains.kotlin.gradle.jvm</code> プラグインを使用しているプロジェクトの場合、Kotlin Gradle プラグインは <code>compileKotlin</code> タスクを積極的に作成および構成しなくなりました。下位の Gradle バージョンでは、すべてのタスクを登録するだけで、ドライランでは構成しませんでした。この同じ動作が、Gradle 7.3+ を使用する場合も適用されるようになりました。</p><h3 id="コンパイルタスクの-destinationdirectory-の非デフォルトロケーション" tabindex="-1">コンパイルタスクの destinationDirectory の非デフォルトロケーション <a class="header-anchor" href="#コンパイルタスクの-destinationdirectory-の非デフォルトロケーション" aria-label="Permalink to &quot;コンパイルタスクの destinationDirectory の非デフォルトロケーション&quot;">​</a></h3><p>以下のいずれかの操作を行う場合は、ビルドスクリプトにいくつかの追加コードを更新してください。</p><ul><li>Kotlin/JVM <code>KotlinJvmCompile</code>/<code>KotlinCompile</code> タスクの <code>destinationDirectory</code> ロケーションをオーバーライドする。</li><li>非推奨の Kotlin/JS/Non-IR <a href="/ja/kotlin/gradle-plugin-variants">バリアント</a>を使用し、<code>Kotlin2JsCompile</code> タスクの <code>destinationDirectory</code> をオーバーライドする。</li></ul><p><code>sourceSets.main.kotlin.classesDirectories</code> を JAR ファイルの <code>sourceSets.main.outputs</code> に明示的に追加する必要があります。</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tasks</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">jar(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Jar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    from sourceSets</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">main</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">outputs</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    from sourceSets</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">main</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kotlin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">classesDirectories</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="http-統計サービスへのコンパイラ引数のレポートをオプトアウトする機能" tabindex="-1">HTTP 統計サービスへのコンパイラ引数のレポートをオプトアウトする機能 <a class="header-anchor" href="#http-統計サービスへのコンパイラ引数のレポートをオプトアウトする機能" aria-label="Permalink to &quot;HTTP 統計サービスへのコンパイラ引数のレポートをオプトアウトする機能&quot;">​</a></h3><p>Kotlin Gradle プラグインが HTTP <a href="/ja/kotlin/gradle-compilation-and-caches#build-reports">ビルドレポート</a>にコンパイラ引数を含めるかどうかを制御できるようになりました。 プロジェクトに多くのモジュールが含まれている場合、レポート内のコンパイラ引数が非常に重く、あまり役に立たない場合があります。これを無効にしてメモリを節約する方法が追加されました。 <code>gradle.properties</code> または <code>local.properties</code> で、<code>kotlin.build.report.include_compiler_arguments=(true|false)</code> プロパティを使用してください。</p><p>この機能に関するフィードバックを<a href="https://youtrack.jetbrains.com/issue/KT-55323/" target="_blank" rel="noreferrer">YouTrack</a>でお待ちしております。</p><h2 id="標準ライブラリ" tabindex="-1">標準ライブラリ <a class="header-anchor" href="#標準ライブラリ" aria-label="Permalink to &quot;標準ライブラリ&quot;">​</a></h2><p>Kotlin 1.8.20 では、特に Kotlin/Native 開発に役立つものを含む、さまざまな新機能が追加されました。</p><ul><li><a href="#support-for-the-autocloseable-interface">AutoCloseable インターフェースのサポート</a></li><li><a href="#support-for-base64-encoding">Base64 エンコーディングとデコーディングのサポート</a></li><li><a href="#support-for-volatile-in-kotlin-native">Kotlin/Native での @Volatile のサポート</a></li><li><a href="#bug-fix-for-stack-overflow-when-using-regex-in-kotlin-native">Kotlin/Native での正規表現使用時のスタックオーバーフローのバグ修正</a></li></ul><h3 id="autocloseable-インターフェースのサポート" tabindex="-1">AutoCloseable インターフェースのサポート <a class="header-anchor" href="#autocloseable-インターフェースのサポート" aria-label="Permalink to &quot;AutoCloseable インターフェースのサポート&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>新しい <code>AutoCloseable</code> インターフェースは<a href="/ja/kotlin/components-stability#stability-levels-explained">実験的</a>であり、使用するには <code>@OptIn(ExperimentalStdlibApi::class)</code> またはコンパイラ引数 <code>-opt-in=kotlin.ExperimentalStdlibApi</code> でオプトインする必要があります。</p></div><p><code>AutoCloseable</code> インターフェースが共通標準ライブラリに追加され、すべてのライブラリでリソースを閉じるための共通インターフェースを使用できるようになりました。Kotlin/JVM では、<code>AutoCloseable</code> インターフェースは <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/AutoCloseable.html" target="_blank" rel="noreferrer"><code>java.lang.AutoClosable</code></a> のエイリアスです。</p><p>さらに、拡張関数 <code>use()</code> が含まれるようになりました。これは、選択されたリソースに対して指定されたブロック関数を実行し、例外がスローされたかどうかに関わらず、適切にクローズします。</p><p>共通標準ライブラリには、<code>AutoCloseable</code> インターフェースを実装する公開クラスはありません。以下の例では、<code>XMLWriter</code> インターフェースを定義し、それを実装するリソースが存在すると仮定します。たとえば、このリソースは、ファイルを開き、XML コンテンツを書き込み、その後ファイルを閉じるクラスである可能性があります。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> XMLWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AutoCloseable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> document</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(encoding: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, version: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, content: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">XMLWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Unit)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, content: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">XMLWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Unit)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> attribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> writeBooksTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(writer: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">XMLWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    writer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { xml </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        xml.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">document</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(encoding </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;UTF-8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, version </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;bookstore&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;book&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    attribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;category&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;fiction&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;title&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Harry Potter and the Prisoner of Azkaban&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;author&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;J. K. Rowling&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;year&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1999&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;price&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;29.99&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;book&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    attribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;category&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;programming&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;title&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Kotlin in Action&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;author&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Dmitry Jemerov&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;author&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Svetlana Isakova&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;year&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2017&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;price&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;25.19&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="base64-エンコーディングのサポート" tabindex="-1">Base64 エンコーディングのサポート <a class="header-anchor" href="#base64-エンコーディングのサポート" aria-label="Permalink to &quot;Base64 エンコーディングのサポート&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>新しいエンコードとデコード機能は<a href="/ja/kotlin/components-stability#stability-levels-explained">実験的</a>であり、 使用するには <code>@OptIn(ExperimentalEncodingApi::class)</code> または コンパイラ引数 <code>-opt-in=kotlin.io.encoding.ExperimentalEncodingApi</code> でオプトインする必要があります。</p></div><p>Base64 エンコーディングとデコーディングのサポートが追加されました。異なるエンコーディングスキームを使用し、異なる動作を示す 3 つのクラスインスタンスを提供します。標準の<a href="https://www.rfc-editor.org/rfc/rfc4648#section-4" target="_blank" rel="noreferrer">Base64 エンコーディングスキーム</a>には <code>Base64.Default</code> インスタンスを使用します。</p><p><a href="https://www.rfc-editor.org/rfc/rfc4648#section-5" target="_blank" rel="noreferrer">&quot;URL およびファイル名セーフ&quot;</a>エンコーディングスキームには <code>Base64.UrlSafe</code> インスタンスを使用します。</p><p><a href="https://www.rfc-editor.org/rfc/rfc2045#section-6.8" target="_blank" rel="noreferrer">MIME</a> エンコーディングスキームには <code>Base64.Mime</code> インスタンスを使用します。<code>Base64.Mime</code> インスタンスを使用すると、すべてのエンコーディング関数は 76 文字ごとに改行コードを挿入します。デコーディングの場合、不正な文字はスキップされ、例外はスローされません。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>Base64.Default</code> インスタンスは <code>Base64</code> クラスのコンパニオンオブジェクトです。そのため、<code>Base64.Default.encode()</code> および <code>Base64.Default.decode()</code> の代わりに <code>Base64.encode()</code> および <code>Base64.decode()</code> を介してその関数を呼び出すことができます。</p></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foBytes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;fo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.code.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toByte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toByteArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base64.Default.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">encode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(foBytes) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;Zm8=&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Alternatively:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Base64.encode(foBytes)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foobarBytes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;foobar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.code.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toByte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toByteArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base64.UrlSafe.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">encode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(foobarBytes) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;Zm9vYmFy&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base64.Default.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">decode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Zm8=&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// foBytes</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Alternatively:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Base64.decode(&quot;Zm8=&quot;)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base64.UrlSafe.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">decode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Zm9vYmFy&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// foobarBytes</span></span></code></pre></div><p>既存のバッファにバイトをエンコードまたはデコードしたり、提供された <code>Appendable</code> 型オブジェクトにエンコード結果を追加したりするための追加関数を使用できます。</p><p>Kotlin/JVM では、入出力ストリームで Base64 エンコーディングとデコーディングを実行できるように、拡張関数 <code>encodingWith()</code> と <code>decodingWith()</code> も追加されました。</p><h3 id="kotlin-native-での-volatile-のサポート" tabindex="-1">Kotlin/Native での @Volatile のサポート <a class="header-anchor" href="#kotlin-native-での-volatile-のサポート" aria-label="Permalink to &quot;Kotlin/Native での @Volatile のサポート&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>Kotlin/Native の <code>@Volatile</code> は<a href="/ja/kotlin/components-stability#stability-levels-explained">実験的</a>です。 いつでも変更または削除される可能性があります。オプトインが必要です（詳細は下記参照）。 評価目的でのみ使用してください。<a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a> でのフィードバックをお待ちしております。</p></div><p><code>var</code> プロパティに <code>@Volatile</code> アノテーションを付与すると、そのバッキングフィールドがマークされ、そのフィールドへの読み書きがアトミックになり、書き込みが常に他のスレッドから見えるようになります。</p><p>1.8.20 以前は、<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.jvm/-volatile/" target="_blank" rel="noreferrer"><code>kotlin.jvm.Volatile</code> アノテーション</a>が共通標準ライブラリで利用可能でした。しかし、このアノテーションは JVM でのみ有効でした。 Kotlin/Native で使用した場合、無視され、エラーにつながる可能性がありました。</p><p>1.8.20 では、JVM と Kotlin/Native の両方で使用できる共通アノテーション <code>kotlin.concurrent.Volatile</code> を導入しました。</p><h4 id="有効にする方法" tabindex="-1">有効にする方法 <a class="header-anchor" href="#有効にする方法" aria-label="Permalink to &quot;有効にする方法&quot;">​</a></h4><p>この機能を試すには、<code>@OptIn(ExperimentalStdlibApi)</code> でオプトインし、<code>-language-version 1.9</code> コンパイラオプションを有効にします。Gradle プロジェクトでは、<code>build.gradle(.kts)</code> ファイルに以下を追加することで行えます。</p>`,41)),l(h,{group:"build-script"},{default:t(()=>[l(n,{title:"Kotlin","group-key":"kotlin"},{default:t(()=>a[11]||(a[11]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withType"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"org"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"jetbrains"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"gradle"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"tasks"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"KotlinCompilationTask"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<*>>()")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"configureEach"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        compilerOptions")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            .languageVersion")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            ."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"set"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"                org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_1_9")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            )")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")])])])],-1)])),_:1}),l(n,{title:"Groovy","group-key":"groovy"},{default:t(()=>a[12]||(a[12]=[s("div",{class:"language-groovy vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"groovy"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    .withType("),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask."),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"class)")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    .configureEach {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        compilerOptions"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"languageVersion "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"=")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"            org.jetbrains.kotlin.gradle.dsl.KotlinVersion."),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"KOTLIN_1_9")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")])])])],-1)])),_:1})]),_:1}),a[28]||(a[28]=e(`<h3 id="kotlin-native-での正規表現使用時のスタックオーバーフローのバグ修正" tabindex="-1">Kotlin/Native での正規表現使用時のスタックオーバーフローのバグ修正 <a class="header-anchor" href="#kotlin-native-での正規表現使用時のスタックオーバーフローのバグ修正" aria-label="Permalink to &quot;Kotlin/Native での正規表現使用時のスタックオーバーフローのバグ修正&quot;">​</a></h3><p>以前の Kotlin バージョンでは、正規表現パターンが非常に単純であっても、正規表現の入力に大量の文字が含まれているとクラッシュが発生する可能性がありました。1.8.20 では、この問題が解決されました。 詳細については、<a href="https://youtrack.jetbrains.com/issue/KT-46211" target="_blank" rel="noreferrer">KT-46211</a> を参照してください。</p><h2 id="シリアライズの更新" tabindex="-1">シリアライズの更新 <a class="header-anchor" href="#シリアライズの更新" aria-label="Permalink to &quot;シリアライズの更新&quot;">​</a></h2><p>Kotlin 1.8.20 には、<a href="#prototype-serialization-compiler-plugin-for-kotlin-k2-compiler">Kotlin K2 コンパイラの Alpha サポート</a>と、<a href="#prohibit-implicit-serializer-customization-via-companion-object">コンパニオンオブジェクトによるシリアライザのカスタマイズの禁止</a>が含まれています。</p><h3 id="kotlin-k2-コンパイラ用のプロトタイプシリアライズコンパイラプラグイン" tabindex="-1">Kotlin K2 コンパイラ用のプロトタイプシリアライズコンパイラプラグイン <a class="header-anchor" href="#kotlin-k2-コンパイラ用のプロトタイプシリアライズコンパイラプラグイン" aria-label="Permalink to &quot;Kotlin K2 コンパイラ用のプロトタイプシリアライズコンパイラプラグイン&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>K2 用シリアライズコンパイラプラグインのサポートは<a href="/ja/kotlin/components-stability#stability-levels-explained">Alpha</a>版です。使用するには、 <a href="#how-to-enable-the-kotlin-k2-compiler">Kotlin K2 コンパイラを有効</a>にする必要があります。</p></div><p>1.8.20 以降、シリアライズコンパイラプラグインは Kotlin K2 コンパイラと連携して動作します。 ぜひお試しいただき、<a href="#leave-your-feedback-on-the-new-k2-compiler">フィードバックをお寄せください</a>！</p><h3 id="コンパニオンオブジェクトによる暗黙的なシリアライザカスタマイズの禁止" tabindex="-1">コンパニオンオブジェクトによる暗黙的なシリアライザカスタマイズの禁止 <a class="header-anchor" href="#コンパニオンオブジェクトによる暗黙的なシリアライザカスタマイズの禁止" aria-label="Permalink to &quot;コンパニオンオブジェクトによる暗黙的なシリアライザカスタマイズの禁止&quot;">​</a></h3><p>現在、<code>@Serializable</code> アノテーションを使用してクラスをシリアライズ可能として宣言し、同時にそのコンパニオンオブジェクトに <code>@Serializer</code> アノテーションを付けてカスタムシリアライザを宣言することが可能です。</p><p>例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.serialization.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Serializable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @Serializer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Foo::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    companion</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Custom implementation of KSerializer&lt;Foo&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>この場合、<code>@Serializable</code> アノテーションからはどのシリアライザが使用されているか不明確です。実際には、クラス <code>Foo</code> はカスタムシリアライザを使用しています。</p><p>このような混乱を防ぐため、Kotlin 1.8.20 では、このシナリオが検出された場合にコンパイラ警告を導入しました。この警告には、問題を解決するための移行パスが含まれています。</p><p>コードでこのような構造を使用している場合は、以下のように更新することをお勧めします。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.serialization.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Serializable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Foo.Companion::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Doesn&#39;t matter if you use @Serializer(Foo::class) or not</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    companion</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KSerializer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Custom implementation of KSerializer&lt;Foo&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>このアプローチにより、<code>Foo</code> クラスがコンパニオンオブジェクトで宣言されたカスタムシリアライザを使用していることが明確になります。詳細については、<a href="https://youtrack.jetbrains.com/issue/KT-54441" target="_blank" rel="noreferrer">YouTrack のチケット</a>を参照してください。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Kotlin 2.0 では、コンパイラ警告をコンパイラエラーに昇格させる予定です。この警告が表示された場合は、 コードを移行することをお勧めします。</p></div><h2 id="ドキュメントの更新" tabindex="-1">ドキュメントの更新 <a class="header-anchor" href="#ドキュメントの更新" aria-label="Permalink to &quot;ドキュメントの更新&quot;">​</a></h2><p>Kotlin ドキュメントにはいくつかの注目すべき変更が加えられました。</p><ul><li><a href="/ja/kotlin/jvm-get-started-spring-boot">Spring Boot と Kotlin を始めよう</a> – データベースを備えたシンプルなアプリケーションを作成し、Spring Boot と Kotlin の機能について詳しく学びます。</li><li><a href="/ja/kotlin/scope-functions">スコープ関数</a> – 標準ライブラリの便利なスコープ関数を使用してコードを簡素化する方法を学びます。</li><li><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-cocoapods-overview.html" target="_blank" rel="noreferrer">CocoaPods 統合</a> – CocoaPods を使用するための環境をセットアップします。</li></ul><h2 id="kotlin-1-8-20-をインストールする" tabindex="-1">Kotlin 1.8.20 をインストールする <a class="header-anchor" href="#kotlin-1-8-20-をインストールする" aria-label="Permalink to &quot;Kotlin 1.8.20 をインストールする&quot;">​</a></h2><h3 id="ide-バージョンの確認" tabindex="-1">IDE バージョンの確認 <a class="header-anchor" href="#ide-バージョンの確認" aria-label="Permalink to &quot;IDE バージョンの確認&quot;">​</a></h3><p><a href="https://www.jetbrains.com/idea/download/" target="_blank" rel="noreferrer">IntelliJ IDEA</a> 2022.2 および 2022.3 は、Kotlin プラグインをバージョン 1.8.20 に自動的に更新することを提案します。IntelliJ IDEA 2023.1 には、Kotlin プラグイン 1.8.20 が組み込まれています。</p><p>Android Studio Flamingo (222) および Giraffe (223) は、次のリリースで Kotlin 1.8.20 をサポートする予定です。</p><p>新しいコマンドラインコンパイラは、<a href="https://github.com/JetBrains/kotlin/releases/tag/v1.8.20" target="_blank" rel="noreferrer">GitHub のリリース</a>ページからダウンロードできます。</p><h3 id="gradle-設定の構成" tabindex="-1">Gradle 設定の構成 <a class="header-anchor" href="#gradle-設定の構成" aria-label="Permalink to &quot;Gradle 設定の構成&quot;">​</a></h3><p>Kotlin の成果物と依存関係を適切にダウンロードするには、<code>settings.gradle(.kts)</code> ファイルを更新して Maven Central リポジトリを使用するようにしてください。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pluginManagement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    repositories</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        mavenCentral</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        gradlePluginPortal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>リポジトリが指定されていない場合、Gradle は使用停止された JCenter リポジトリを使用し、Kotlin の成果物に関する問題を引き起こす可能性があります。</p>`,29))])}const D=E(y,[["render",u]]);export{K as __pageData,D as default};
