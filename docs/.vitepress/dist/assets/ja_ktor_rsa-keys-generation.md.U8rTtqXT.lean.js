import{_ as r,C as p,c,o as u,j as i,G as a,ag as n,a as e,w as t}from"./chunks/framework.Bksy39di.js";const B=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ja/ktor/rsa-keys-generation.md","filePath":"ja/ktor/rsa-keys-generation.md","lastUpdated":1755457140000}'),g={name:"ja/ktor/rsa-keys-generation.md"};function F(y,s,b,C,E,_){const k=p("show-structure"),h=p("tldr"),o=p("warning"),l=p("code-block"),d=p("note");return u(),c("div",null,[s[6]||(s[6]=i("h1",{id:"rsaキーの生成",tabindex:"-1"},[e("RSAキーの生成 "),i("a",{class:"header-anchor",href:"#rsaキーの生成","aria-label":'Permalink to "RSAキーの生成"'},"​")],-1)),a(k,{for:"chapter",depth:"2"}),a(h,null,{default:t(()=>s[0]||(s[0]=[i("p",null,[i("b",null,"コード例"),e(": "),i("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/auth-jwt-rs256"}," auth-jwt-rs256 ")],-1)])),_:1}),s[7]||(s[7]=i("p",null,[i("a",{href:"https://en.wikipedia.org/wiki/RSA_(cryptosystem)",target:"_blank",rel:"noreferrer"},"RSA (Rivest–Shamir–Adleman)"),e("は、安全なデータ送信、デジタル署名、鍵交換を可能にする広く使用されている公開鍵暗号システムです。")],-1)),s[8]||(s[8]=i("p",null,"RSA暗号アルゴリズムの一部であるRS256は、ハッシュ化にSHA-256を利用し、鍵（通常は2048ビット、4096ビット以上）を使用してデジタル通信を安全にします。",-1)),s[9]||(s[9]=i("p",null,[i("a",{href:"https://jwt.io/",target:"_blank",rel:"noreferrer"},"JSON Web Token (JWT)"),e("認証の分野では、RS256は重要な役割を果たします。なぜなら、公開鍵/秘密鍵のペアが使用されるRS256などの署名メカニズムを通じて、JWTの整合性と信頼性を検証できるからです。これにより、トークンに含まれる情報が改ざん防止され、信頼できるものとして維持されます。")],-1)),s[10]||(s[10]=i("p",null,[e("このセクションでは、Ktorが提供する"),i("a",{href:"./server-jwt"},"Authentication JWT"),e("プラグインとともに、そのような鍵がどのように生成され、使用されるかを学びます。")],-1)),a(o,null,{default:t(()=>s[1]||(s[1]=[i("p",null," 本番環境での使用には、RSAと比較してより効率的で安全な暗号化に基づく[ES256](https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm)のような、よりモダンな代替手段を選択することをお勧めします。 ",-1)])),_:1}),s[11]||(s[11]=i("h2",{id:"rsa秘密鍵の生成",tabindex:"-1"},[e("RSA秘密鍵の生成 "),i("a",{class:"header-anchor",href:"#rsa秘密鍵の生成","aria-label":'Permalink to "RSA秘密鍵の生成"'},"​")],-1)),s[12]||(s[12]=i("p",null,[e("秘密鍵を生成するには、OpenSSL、"),i("code",null,"ssh-keygen"),e("、または認証鍵ペアを作成するための別のツールを使用できます。デモンストレーション目的のため、OpenSSLを使用します。")],-1)),s[13]||(s[13]=i("p",null,"新しいターミナルウィンドウで、次のコマンドを実行します。",-1)),a(l,{lang:"shell",code:"openssl genpkey -algorithm rsa -pkeyopt rsa_keygen_bits:2048 &gt; ktor.pk8"}),s[14]||(s[14]=n("",6)),a(l,{lang:"shell",code:"openssl rsa -in ktor.pk8 -pubout | tee ktor.spki"}),s[15]||(s[15]=n("",6)),a(l,{lang:"shell",code:"openssl pkey -in ktor.spki -pubin -noout -text"}),s[16]||(s[16]=n("",3)),a(o,null,{default:t(()=>s[2]||(s[2]=[i("p",null," この例では公開鍵が512ビットを使用しており、安全ではないことに注意してください。理想的には、2048ビットまたは4096ビットの鍵を選択すべきです。 ",-1)])),_:1}),s[17]||(s[17]=n("",4)),a(l,{lang:"shell",code:"echo 010001 | xxd -p -r | base64 "}),s[18]||(s[18]=n("",1)),a(d,null,{default:t(()=>s[3]||(s[3]=[i("p",null," 左側に0を追加することで、HEX桁の数が偶数になるようにしています。 ",-1)])),_:1}),s[19]||(s[19]=n("",5)),a(l,{lang:"shell",code:`echo "b5:f2:5a:2e:bc:d7:20:b5:20:d5:4d:cd:d4:a5:
    7c:c8:9a:fd:d8:61:e7:e4:eb:58:65:1e:ea:5a:4d:
    4c:73:87:32:e0:91:a3:92:56:2e:a7:bc:1e:32:30:
    43:f5:fd:db:05:5a:08:b2:25:15:5f:ac:4d:71:82:
    2b:d0:87:b4:01" | tr -d ": 
" | xxd -p -r | base64 | tr +/ -_ | tr -d "=
"`}),a(d,null,{default:t(()=>s[4]||(s[4]=[i("p",null," 先頭の00バイトは省略されていることに注意してください。モジュラスの先頭の00バイトは、RSA公開鍵のASN.1エンコーディングに関連しています。整数のASN.1 DERエンコーディングでは、整数の最上位ビットが0である場合、先頭のゼロバイトは削除されます。これはASN.1エンコーディング規則の標準的な部分です。RSA公開鍵のコンテキストでは、モジュラスはビッグエンディアン整数であり、DERエンコーディングで表現される場合、これらの規則に従います。先頭のゼロバイトの削除は、整数がDER規則に従って正しく解釈されることを保証するために行われます。 ",-1)])),_:1}),s[20]||(s[20]=n("",15)),a(o,null,{default:t(()=>s[5]||(s[5]=[i("p",null," 秘密鍵は機密情報とみなされ、コードに直接保存すべきではありません。機密データには、環境変数または[シークレットストア](https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html)の使用を検討してください。 ",-1)])),_:1})])}const f=r(g,[["render",F]]);export{B as __pageData,f as default};
