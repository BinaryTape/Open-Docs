import{_ as g,C as n,c as K,o as w,G as r,w as e,j as s,a as o}from"./chunks/framework.Bksy39di.js";const H=JSON.parse('{"title":"","description":"","frontmatter":{"aside":false},"headers":[],"relativePath":"ja/ktor/welcome.md","filePath":"ja/ktor/welcome.md","lastUpdated":1755457140000}'),S={name:"ja/ktor/welcome.md"};function R(T,t,b,A,P,M){const d=n("description"),u=n("card"),a=n("spotlight"),k=n("primary"),l=n("Links"),m=n("group"),f=n("links"),i=n("cards"),p=n("misc"),y=n("section-starting-page"),v=n("topic");return w(),K("div",null,[r(v,{"xsi:noNamespaceSchemaLocation":"https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd","xmlns:xsi":"http://www.w3.org/2001/XMLSchema-instance",title:"ようこそ",id:"welcome"},{default:e(()=>[r(y,null,{default:e(()=>[t[76]||(t[76]=s("title",null,"Ktorドキュメント",-1)),r(d,null,{default:e(()=>t[0]||(t[0]=[o(" Ktorは、非同期のサーバーサイドおよびクライアントサイドアプリケーションを簡単に構築するためのフレームワークです。 ")])),_:1}),r(a,null,{default:e(()=>[r(u,{href:"/ktor/server-create-a-new-project",summary:"Ktorでサーバーアプリケーションを作成、実行、テストする方法を学びます。"},{default:e(()=>t[1]||(t[1]=[o(" Ktorサーバーを始める ")])),_:1}),r(u,{href:"/ktor/client-create-new-application",summary:"Ktorでクライアントアプリケーションを作成、実行、テストする方法を学びます。"},{default:e(()=>t[2]||(t[2]=[o(" Ktorクライアントを始める ")])),_:1})]),_:1}),r(k,null,{default:e(()=>[t[8]||(t[8]=s("title",null,"Ktorサーバー",-1)),r(u,{href:"/ktor/server-requests-and-responses",summary:"タスクマネージャーアプリケーションを作成して、Ktorでのルーティングとリクエストの動作を学びます。"},{default:e(()=>t[3]||(t[3]=[o(" リクエストを処理し、レスポンスを生成する ")])),_:1}),r(u,{href:"/ktor/server-create-restful-apis",summary:"KtorでRESTful APIを構築する方法を学びます。このチュートリアルでは、実際の例に基づいてセットアップ、ルーティング、テストを扱います。"},{default:e(()=>t[4]||(t[4]=[o("RESTful APIを作成する")])),_:1}),r(u,{href:"/ktor/server-create-website",summary:"KtorとThymeleafテンプレートを使用して、Kotlinでウェブサイトを構築する方法を学びます。"},{default:e(()=>t[5]||(t[5]=[o("ウェブサイトを作成する")])),_:1}),r(u,{href:"/ktor/server-create-websocket-application",summary:"WebSocketの力を活用してコンテンツを送受信する方法を学びます。"},{default:e(()=>t[6]||(t[6]=[o(" WebSocketアプリケーションを作成する ")])),_:1}),r(u,{href:"/ktor/server-integrate-database",summary:"KtorサービスをExposed SQLライブラリを使用してデータベースリポジトリに接続するプロセスを学びます。"},{default:e(()=>t[7]||(t[7]=[o("データベースを統合する")])),_:1})]),_:1}),r(p,null,{default:e(()=>[r(f,{narrow:"true"},{default:e(()=>[r(m,null,{default:e(()=>[t[15]||(t[15]=s("title",null,"サーバー設定",-1)),r(l,{href:"/ktor/server-create-a-new-project",summary:"Ktorでサーバーアプリケーションを開き、実行し、テストする方法を学びます。"},{default:e(()=>t[9]||(t[9]=[o("新しいKtorプロジェクトを作成、開いて実行する")])),_:1}),r(l,{href:"/ktor/server-dependencies",summary:"既存のGradle/MavenプロジェクトにKtorサーバーの依存関係を追加する方法を学びます。"},{default:e(()=>t[10]||(t[10]=[o("サーバーの依存関係を追加する")])),_:1}),r(l,{href:"/ktor/server-create-and-configure",summary:"アプリケーションのデプロイ要件に応じてサーバーを作成する方法を学びます。"},{default:e(()=>t[11]||(t[11]=[o("サーバーを作成する")])),_:1}),r(l,{href:"/ktor/server-configuration-code",summary:"コードで様々なサーバーパラメータを設定する方法を学びます。"},{default:e(()=>t[12]||(t[12]=[o("コードでの設定")])),_:1}),r(l,{href:"/ktor/server-configuration-file",summary:"設定ファイルで様々なサーバーパラメータを設定する方法を学びます。"},{default:e(()=>t[13]||(t[13]=[o("ファイルでの設定")])),_:1}),r(l,{href:"/ktor/server-plugins",summary:"プラグインは、シリアル化、コンテンツエンコーディング、圧縮などの共通機能を提供します。"},{default:e(()=>t[14]||(t[14]=[o("サーバープラグイン")])),_:1})]),_:1}),r(m,null,{default:e(()=>[t[22]||(t[22]=s("title",null,"ルーティング",-1)),r(l,{href:"/ktor/server-routing",summary:"ルーティングは、サーバーアプリケーションで受信リクエストを処理するためのコアプラグインです。"},{default:e(()=>t[16]||(t[16]=[o("ルーティング")])),_:1}),r(l,{href:"/ktor/server-resources",summary:"Resourcesプラグインを使用すると、型安全なルーティングを実装できます。"},{default:e(()=>t[17]||(t[17]=[o("型安全なルーティング")])),_:1}),r(l,{href:"/ktor/server-application-structure",summary:"アプリケーションの成長に合わせて、保守しやすい構造にする方法を学びます。"},{default:e(()=>t[18]||(t[18]=[o("アプリケーションの構造")])),_:1}),r(l,{href:"/ktor/server-requests",summary:"ルートハンドラ内で受信リクエストを処理する方法を学びます。"},{default:e(()=>t[19]||(t[19]=[o("リクエストの処理")])),_:1}),r(l,{href:"/ktor/server-responses",summary:"異なる種類のレスポンスを送信する方法を学びます。"},{default:e(()=>t[20]||(t[20]=[o("レスポンスの送信")])),_:1}),r(l,{href:"/ktor/server-static-content",summary:"スタイルシート、スクリプト、画像などの静的コンテンツを提供する方法を学びます。"},{default:e(()=>t[21]||(t[21]=[o("静的コンテンツの提供")])),_:1})]),_:1}),r(m,null,{default:e(()=>[t[32]||(t[32]=s("title",null,"プラグイン",-1)),r(l,{href:"/ktor/server-serialization",summary:"ContentNegotiationプラグインには2つの主な目的があります。クライアントとサーバー間のメディアタイプをネゴシエートすることと、特定の形式でコンテンツをシリアル化/デシリアル化することです。"},{default:e(()=>t[23]||(t[23]=[o("Ktorサーバーでのコンテンツネゴシエーションとシリアル化")])),_:1}),r(l,{href:"/ktor/server-templating",summary:"HTML/CSSまたはJVMテンプレートエンジンで構築されたビューを操作する方法を学びます。"},{default:e(()=>t[24]||(t[24]=[o("テンプレート")])),_:1}),r(l,{href:"/ktor/server-auth",summary:"AuthenticationプラグインはKtorでの認証と認可を処理します。"},{default:e(()=>t[25]||(t[25]=[o("Ktorサーバーでの認証と認可")])),_:1}),r(l,{href:"/ktor/server-sessions",summary:"Sessionsプラグインは、異なるHTTPリクエスト間でデータを永続化するメカニズムを提供します。"},{default:e(()=>t[26]||(t[26]=[o("セッション")])),_:1}),r(l,{href:"/ktor/server-websockets",summary:"WebSocketsプラグインを使用すると、サーバーとクライアント間で多方向通信セッションを作成できます。"},{default:e(()=>t[27]||(t[27]=[o("KtorサーバーでのWebSockets")])),_:1}),r(l,{href:"/ktor/server-server-sent-events",summary:"SSEプラグインを使用すると、サーバーはHTTP接続を介してクライアントにイベントベースの更新を送信できます。"},{default:e(()=>t[28]||(t[28]=[o("KtorサーバーでのServer-Sent Events")])),_:1}),r(l,{href:"/ktor/server-swagger-ui",summary:"SwaggerUIプラグインを使用すると、プロジェクトのSwagger UIを生成できます。"},{default:e(()=>t[29]||(t[29]=[o("Swagger UI")])),_:1}),t[33]||(t[33]=o(" / ")),r(l,{href:"/ktor/server-openapi",summary:"OpenAPIプラグインを使用すると、プロジェクトのOpenAPIドキュメントを生成できます。"},{default:e(()=>t[30]||(t[30]=[o("OpenAPI")])),_:1}),r(l,{href:"/ktor/server-custom-plugins",summary:"独自のカスタムプラグインを作成する方法を学びます。"},{default:e(()=>t[31]||(t[31]=[o("カスタムサーバープラグイン")])),_:1})]),_:1}),r(m,null,{default:e(()=>[t[37]||(t[37]=s("title",null,"実行、デバッグ、テスト",-1)),r(l,{href:"/ktor/server-run",summary:"Ktorサーバーアプリケーションを実行する方法を学びます。"},{default:e(()=>t[34]||(t[34]=[o("実行")])),_:1}),r(l,{href:"/ktor/server-auto-reload",summary:"Auto-reloadを使用して、コード変更時にアプリケーションクラスをリロードする方法を学びます。"},{default:e(()=>t[35]||(t[35]=[o("自動リロード")])),_:1}),r(l,{href:"/ktor/server-testing",summary:"特別なテストエンジンを使用してサーバーアプリケーションをテストする方法を学びます。"},{default:e(()=>t[36]||(t[36]=[o("Ktorサーバーでのテスト")])),_:1})]),_:1}),r(m,null,{default:e(()=>[t[44]||(t[44]=s("title",null,"デプロイ",-1)),r(l,{href:"/ktor/server-fatjar",summary:"Ktor Gradleプラグインを使用して、実行可能なfat JARを作成および実行する方法を学びます。"},{default:e(()=>t[38]||(t[38]=[o("Fat JARの作成")])),_:1}),r(l,{href:"/ktor/server-war",summary:"WARアーカイブを使用して、サーブレットコンテナ内でKtorアプリケーションを実行およびデプロイする方法を学びます。"},{default:e(()=>t[39]||(t[39]=[o("WAR")])),_:1}),r(l,{href:"/ktor/graalvm",summary:"様々なプラットフォームでネイティブイメージにGraalVMを使用する方法を学びます。"},{default:e(()=>t[40]||(t[40]=[o("GraalVM")])),_:1}),r(l,{href:"/ktor/docker",summary:"アプリケーションをDockerコンテナにデプロイする方法を学びます。"},{default:e(()=>t[41]||(t[41]=[o("Docker")])),_:1}),r(l,{href:"/ktor/google-app-engine",summary:"Google App Engine標準環境にプロジェクトをデプロイする方法を学びます。"},{default:e(()=>t[42]||(t[42]=[o("Google App Engine")])),_:1}),r(l,{href:"/ktor/heroku",summary:"HerokuにKtorアプリケーションを準備およびデプロイする方法を学びます。"},{default:e(()=>t[43]||(t[43]=[o("Heroku")])),_:1})]),_:1})]),_:1}),r(i,null,{default:e(()=>[t[47]||(t[47]=s("title",null,"Ktorクライアント",-1)),r(u,{href:"/ktor/client-create-new-application",summary:"Ktorでクライアントアプリケーションを作成します。"},{default:e(()=>t[45]||(t[45]=[o(" クライアントアプリケーションを作成する ")])),_:1}),r(u,{href:"/ktor/client-create-multiplatform-application",summary:"Kotlin Multiplatform Mobileアプリケーションを作成し、Ktorクライアントでリクエストを作成し、レスポンスを受信する方法を学びます。"},{default:e(()=>t[46]||(t[46]=[o(" クロスプラットフォームモバイルアプリケーションを作成する ")])),_:1})]),_:1}),r(f,{narrow:"true"},{default:e(()=>[r(m,null,{default:e(()=>[t[53]||(t[53]=s("title",null,"クライアントのセットアップ",-1)),r(l,{href:"/ktor/client-create-new-application",summary:"リクエストを送信し、レスポンスを受信するための最初のクライアントアプリケーションを作成します。"},{default:e(()=>t[48]||(t[48]=[o("クライアントアプリケーションを作成する")])),_:1}),r(l,{href:"/ktor/client-dependencies",summary:"既存のプロジェクトにクライアントの依存関係を追加する方法を学びます。"},{default:e(()=>t[49]||(t[49]=[o("クライアントの依存関係を追加する")])),_:1}),r(l,{href:"/ktor/client-create-and-configure",summary:"Ktorクライアントを作成および設定する方法を学びます。"},{default:e(()=>t[50]||(t[50]=[o("クライアントの作成と設定")])),_:1}),r(l,{href:"/ktor/client-engines",summary:"ネットワークリクエストを処理するエンジンについて学びます。"},{default:e(()=>t[51]||(t[51]=[o("クライアントエンジン")])),_:1}),r(l,{href:"/ktor/client-plugins",summary:"ロギング、シリアル化、認可などの共通機能を提供するプラグインについて理解を深めます。"},{default:e(()=>t[52]||(t[52]=[o("クライアントプラグイン")])),_:1})]),_:1}),r(m,null,{default:e(()=>[t[58]||(t[58]=s("title",null,"リクエスト",-1)),r(l,{href:"/ktor/client-requests",summary:"リクエストの作成方法と、リクエストURL、HTTPメソッド、ヘッダー、リクエスト本文など、様々なリクエストパラメータを指定する方法を学びます。"},{default:e(()=>t[54]||(t[54]=[o("リクエストの作成")])),_:1}),r(l,{href:"/ktor/client-resources",summary:"Resourcesプラグインを使用して型安全なリクエストを作成する方法を学びます。"},{default:e(()=>t[55]||(t[55]=[o("型安全なリクエスト")])),_:1}),r(l,{href:"/ktor/client-default-request",summary:"DefaultRequestプラグインを使用すると、すべてのリクエストのデフォルトパラメータを設定できます。"},{default:e(()=>t[56]||(t[56]=[o("デフォルトリクエスト")])),_:1}),r(l,{href:"/ktor/client-request-retry",summary:"HttpRequestRetryプラグインを使用すると、失敗したリクエストの再試行ポリシーを設定できます。"},{default:e(()=>t[57]||(t[57]=[o("失敗したリクエストの再試行")])),_:1})]),_:1}),r(m,null,{default:e(()=>[t[61]||(t[61]=s("title",null,"レスポンス",-1)),r(l,{href:"/ktor/client-responses",summary:"レスポンスの受信方法、レスポンス本文の取得方法、レスポンスパラメータの取得方法を学びます。"},{default:e(()=>t[59]||(t[59]=[o("レスポンスの受信")])),_:1}),r(l,{href:"/ktor/client-response-validation",summary:"ステータスコードに応じてレスポンスを検証する方法を学びます。"},{default:e(()=>t[60]||(t[60]=[o("レスポンスの検証")])),_:1})]),_:1}),r(m,null,{default:e(()=>[t[70]||(t[70]=s("title",null,"プラグイン",-1)),r(l,{href:"/ktor/client-auth",summary:"Authプラグインは、クライアントアプリケーションでの認証と認可を処理します。"},{default:e(()=>t[62]||(t[62]=[o("Ktorクライアントでの認証と認可")])),_:1}),r(l,{href:"/ktor/client-cookies",summary:"HttpCookiesプラグインはクッキーを自動的に処理し、ストレージで呼び出し間で保持します。"},{default:e(()=>t[63]||(t[63]=[o("クッキー")])),_:1}),r(l,{href:"/ktor/client-content-encoding",summary:"ContentEncodingプラグインを使用すると、指定された圧縮アルゴリズム（「gzip」や「deflate」など）を有効にし、その設定を構成できます。"},{default:e(()=>t[64]||(t[64]=[o("コンテンツエンコーディング")])),_:1}),r(l,{href:"/ktor/client-bom-remover",summary:"BOMRemoverプラグインを使用すると、レスポンス本文からバイトオーダーマーク (BOM) を削除できます。"},{default:e(()=>t[65]||(t[65]=[o("BOMリムーバー")])),_:1}),r(l,{href:"/ktor/client-caching",summary:"HttpCacheプラグインを使用すると、以前にフェッチしたリソースをインメモリまたは永続キャッシュに保存できます。"},{default:e(()=>t[66]||(t[66]=[o("キャッシング")])),_:1}),r(l,{href:"/ktor/client-websockets",summary:"Websocketsプラグインを使用すると、サーバーとクライアント間で多方向通信セッションを作成できます。"},{default:e(()=>t[67]||(t[67]=[o("KtorクライアントでのWebSockets")])),_:1}),r(l,{href:"/ktor/client-server-sent-events",summary:"SSEプラグインを使用すると、クライアントはHTTP接続を介してサーバーからイベントベースの更新を受信できます。"},{default:e(()=>t[68]||(t[68]=[o("KtorクライアントでのServer-Sent Events")])),_:1}),r(l,{href:"/ktor/client-custom-plugins",summary:"独自のカスタムクライアントプラグインを作成する方法を学びます。"},{default:e(()=>t[69]||(t[69]=[o("カスタムクライアントプラグイン")])),_:1})]),_:1}),r(m,null,{default:e(()=>[t[72]||(t[72]=s("title",null,"テスト",-1)),r(l,{href:"/ktor/client-testing",summary:"MockEngineを使用してHTTP呼び出しをシミュレートすることにより、クライアントをテストする方法を学びます。"},{default:e(()=>t[71]||(t[71]=[o("Ktorクライアントでのテスト")])),_:1})]),_:1})]),_:1}),r(i,null,{default:e(()=>[t[75]||(t[75]=s("title",null,"統合",-1)),r(u,{href:"/ktor//ktor/full-stack-development-with-kotlin-multiplatform",summary:"KotlinとKtorでクロスプラットフォームのフルスタックアプリケーションを開発する方法を学びます。"},{default:e(()=>t[73]||(t[73]=[o("Kotlin Multiplatformでフルスタックアプリケーションを構築する")])),_:1}),r(u,{href:"/ktor//ktor/tutorial-first-steps-with-kotlin-rpc",summary:"Kotlin RPCとKtorで最初のアプリケーションを作成する方法を学びます。"},{default:e(()=>t[74]||(t[74]=[o("Kotlin RPCの最初のステップ")])),_:1})]),_:1})]),_:1})]),_:1})]),_:1})])}const x=g(S,[["render",R]]);export{H as __pageData,x as default};
