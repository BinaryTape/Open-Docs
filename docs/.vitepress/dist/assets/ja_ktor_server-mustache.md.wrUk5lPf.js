import{_ as g,C as n,c,o as m,G as t,j as i,ag as y,w as e,a}from"./chunks/framework.Bksy39di.js";const B=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ja/ktor/server-mustache.md","filePath":"ja/ktor/server-mustache.md","lastUpdated":1755457140000}'),v={name:"ja/ktor/server-mustache.md"};function F(b,s,f,C,_,M){const k=n("TopicTitle"),o=n("show-structure"),d=n("primary-label"),r=n("Links"),u=n("tldr"),l=n("code-block"),p=n("TabItem"),h=n("Tabs"),E=n("list");return m(),c("div",null,[t(k,{labelRef:"server-plugin",title:"Mustache"}),t(o,{for:"chapter",depth:"2"}),t(d,{ref:"server-plugin"},null,512),t(u,null,{default:e(()=>[s[3]||(s[3]=i("p",null,[i("b",null,"必要な依存関係"),a(": "),i("code",null,"io.ktor:ktor-server-mustache")],-1)),s[4]||(s[4]=i("p",null,[i("b",null,"コード例"),a(": "),i("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/mustache"}," mustache ")],-1)),i("p",null,[i("b",null,[t(r,{href:"/ktor/server-native",summary:"KtorはKotlin/Nativeをサポートしており、追加のランタイムや仮想マシンなしでサーバーを実行できます。"},{default:e(()=>s[0]||(s[0]=[a("Nativeサーバー")])),_:1}),s[1]||(s[1]=a("のサポート"))]),s[2]||(s[2]=a(": ✖️ "))])]),_:1}),s[17]||(s[17]=i("p",null,[a("Ktorでは、"),i("a",{href:"https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-mustache/io.ktor.server.mustache/-mustache",target:"_blank",rel:"noreferrer"},"Mustache"),a("プラグインをインストールすることで、アプリケーション内で"),i("a",{href:"https://github.com/spullara/mustache.java",target:"_blank",rel:"noreferrer"},"Mustacheテンプレート"),a("をビューとして使用できます。")],-1)),s[18]||(s[18]=i("h2",{id:"add_dependencies",tabindex:"-1"},[a("依存関係を追加する "),i("a",{class:"header-anchor",href:"#add_dependencies","aria-label":'Permalink to "依存関係を追加する {id="add_dependencies"}"'},"​")],-1)),s[19]||(s[19]=i("p",null,[i("code",null,"Mustache"),a("を使用するには、ビルドスクリプトに"),i("code",null,"ktor-server-mustache"),a("アーティファクトを含める必要があります。 ")],-1)),t(h,{group:"languages"},{default:e(()=>[t(p,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:e(()=>[t(l,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-server-mustache:$ktor_version")'})]),_:1}),t(p,{title:"Gradle (Groovy)","group-key":"groovy"},{default:e(()=>[t(l,{lang:"Groovy",code:'            implementation "io.ktor:ktor-server-mustache:$ktor_version"'})]),_:1}),t(p,{title:"Maven","group-key":"maven"},{default:e(()=>[t(l,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-server-mustache-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),s[20]||(s[20]=i("h2",{id:"install_plugin",tabindex:"-1"},[a("Mustacheをインストールする "),i("a",{class:"header-anchor",href:"#install_plugin","aria-label":'Permalink to "Mustacheをインストールする {id="install_plugin"}"'},"​")],-1)),i("p",null,[s[6]||(s[6]=a(" アプリケーションに")),s[7]||(s[7]=i("code",null,"Mustache",-1)),s[8]||(s[8]=a("プラグインを")),s[9]||(s[9]=i("a",{href:"#install"},"インストール",-1)),s[10]||(s[10]=a("するには、指定された")),t(r,{href:"/ktor/server-modules",summary:"モジュールを使用すると、ルートをグループ化してアプリケーションを構造化できます。"},{default:e(()=>s[5]||(s[5]=[a("モジュール")])),_:1}),s[11]||(s[11]=a("の")),s[12]||(s[12]=i("code",null,"install",-1)),s[13]||(s[13]=a("関数に渡します。以下のコードスニペットは、")),s[14]||(s[14]=i("code",null,"Mustache",-1)),s[15]||(s[15]=a("をインストールする方法を示しています。 "))]),t(E,null,{default:e(()=>s[16]||(s[16]=[i("li",null,[a(" ... "),i("code",null,"embeddedServer"),a("関数呼び出し内。 ")],-1),i("li",null,[a(" ... 明示的に定義された"),i("code",null,"module"),a("内（これは"),i("code",null,"Application"),a("クラスの拡張関数です）。 ")],-1)])),_:1}),t(h,null,{default:e(()=>[t(p,{title:"embeddedServer"},{default:e(()=>[t(l,{lang:"kotlin",code:`            import io.ktor.server.engine.*
            import io.ktor.server.netty.*
            import io.ktor.server.application.*
            import io.ktor.server.mustache.*

            fun main() {
                embeddedServer(Netty, port = 8080) {
                    install(Mustache)
                    // ...
                }.start(wait = true)
            }`})]),_:1}),t(p,{title:"module"},{default:e(()=>[t(l,{lang:"kotlin",code:`            import io.ktor.server.application.*
            import io.ktor.server.mustache.*
            // ...
            fun Application.module() {
                install(Mustache)
                // ...
            }`})]),_:1})]),_:1}),s[21]||(s[21]=y(`<p><code>install</code>ブロック内で、Mustacheテンプレートをロードするための<a href="http://spullara.github.io/mustache/apidocs/com/github/mustachejava/MustacheFactory.html" target="_blank" rel="noreferrer">MustacheFactory</a>を<a href="#template_loading">設定</a>できます。</p><h2 id="configure" tabindex="-1">Mustacheを設定する <a class="header-anchor" href="#configure" aria-label="Permalink to &quot;Mustacheを設定する {id=&quot;configure&quot;}&quot;">​</a></h2><h3 id="template_loading" tabindex="-1">テンプレートの読み込みを設定する <a class="header-anchor" href="#template_loading" aria-label="Permalink to &quot;テンプレートの読み込みを設定する {id=&quot;template_loading&quot;}&quot;">​</a></h3><p>テンプレートをロードするには、<a href="http://spullara.github.io/mustache/apidocs/com/github/mustachejava/MustacheFactory.html" target="_blank" rel="noreferrer">MustacheFactory</a>を<code>mustacheFactory</code>プロパティに割り当てる必要があります。例えば、以下のコードスニペットは、Ktorが現在のクラスパスに対する<code>templates</code>パッケージ内のテンプレートを探すように設定します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> com.github.mustachejava.DefaultMustacheFactory</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.application.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.mustache.Mustache</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.mustache.MustacheContent</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Mustache) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        mustacheFactory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DefaultMustacheFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;templates&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="use_template" tabindex="-1">レスポンスでテンプレートを送信する <a class="header-anchor" href="#use_template" aria-label="Permalink to &quot;レスポンスでテンプレートを送信する {id=&quot;use_template&quot;}&quot;">​</a></h3><p><code>index.hbs</code>テンプレートが<code>resources/templates</code>にあるとします。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Hello, {{user.name}}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>ユーザーのデータモデルは次のようになります。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>指定された<a href="./server-routing">ルート</a>にテンプレートを使用するには、<code>MustacheContent</code>を<code>call.respond</code>メソッドに次のように渡します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sampleUser </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;John&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respond</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MustacheContent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;index.hbs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mapOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> to sampleUser)))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,12))])}const D=g(v,[["render",F]]);export{B as __pageData,D as default};
