import{_ as r,a as o,b as d,c as E,d as g,e as c}from"./chunks/native-output-gutter-3.D2hCv83U.js";import{_ as u,C as p,c as y,o as F,ag as n,j as i,G as l,a as s,w as t}from"./chunks/framework.Bksy39di.js";const q=JSON.parse('{"title":"Kotlin/Native の利用を開始する","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/native-get-started.md","filePath":"ja/kotlin/native-get-started.md","lastUpdated":1754307826000}'),b={name:"ja/kotlin/native-get-started.md"};function m(v,a,C,A,f,D){const h=p("shortcut"),e=p("tab"),k=p("tabs");return F(),y("div",null,[a[13]||(a[13]=n(`<h1 id="kotlin-native-の利用を開始する" tabindex="-1">Kotlin/Native の利用を開始する <a class="header-anchor" href="#kotlin-native-の利用を開始する" aria-label="Permalink to &quot;Kotlin/Native の利用を開始する&quot;">​</a></h1><p>このチュートリアルでは、Kotlin/Native アプリケーションの作成方法を学びます。あなたにとって最適なツールを選択し、以下の方法でアプリを作成できます。</p><ul><li><p><strong><a href="#in-ide">IDE</a></strong>。ここでは、バージョン管理システムからプロジェクトテンプレートをクローンし、IntelliJ IDEA で使用できます。</p></li><li><p><strong><a href="#using-gradle">Gradle ビルドシステム</a></strong>。内部の仕組みをよりよく理解するために、プロジェクトのビルドファイルを手動で作成します。</p></li><li><p><strong><a href="#using-the-command-line-compiler">コマンドラインツール</a></strong>。標準の Kotlin ディストリビューションの一部として提供される Kotlin/Native コンパイラを使用して、コマンドラインツールで直接アプリを作成できます。</p><p>コンソールでのコンパイルは簡単で分かりやすく見えるかもしれませんが、数百のファイルやライブラリを持つ大規模なプロジェクトには適していません。そのようなプロジェクトには、IDEまたはビルドシステムの使用をお勧めします。</p></li></ul><p>Kotlin/Native では、Linux、macOS、Windows など、<a href="/ja/kotlin/native-target-support">様々なターゲット</a>向けにコンパイルできます。クロスプラットフォームコンパイル（あるプラットフォームを使用して別のプラットフォーム向けにコンパイルすること）は可能ですが、このチュートリアルでは、コンパイルしているのと同じプラットフォームをターゲットにします。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Mac を使用していて macOS またはその他の Apple ターゲット向けのアプリケーションを作成・実行したい場合は、<a href="https://developer.apple.com/download/" target="_blank" rel="noreferrer">Xcode Command Line Tools</a> をインストールし、起動して、最初にライセンス条項に同意する必要があります。</p></div><h2 id="ide-で" tabindex="-1">IDE で <a class="header-anchor" href="#ide-で" aria-label="Permalink to &quot;IDE で&quot;">​</a></h2><p>このセクションでは、IntelliJ IDEA を使用して Kotlin/Native アプリケーションを作成する方法を学びます。Community Edition と Ultimate Edition の両方を使用できます。</p><h3 id="プロジェクトを作成する" tabindex="-1">プロジェクトを作成する <a class="header-anchor" href="#プロジェクトを作成する" aria-label="Permalink to &quot;プロジェクトを作成する&quot;">​</a></h3><ol><li><p><a href="https://www.jetbrains.com/idea/" target="_blank" rel="noreferrer">IntelliJ IDEA</a> の最新バージョンをダウンロードしてインストールします。</p></li><li><p>IntelliJ IDEA で <strong>File</strong> | <strong>New</strong> | <strong>Project from Version Control</strong> を選択し、以下のURLを使用して<a href="https://github.com/Kotlin/kmp-native-wizard" target="_blank" rel="noreferrer">プロジェクトテンプレート</a>をクローンします。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>https://github.com/Kotlin/kmp-native-wizard</span></span></code></pre></div></li><li><p>プロジェクトの依存関係のバージョンカタログである <code>gradle/libs.versions.toml</code> ファイルを開きます。Kotlin/Native アプリケーションを作成するには、Kotlin と同じバージョンの Kotlin Multiplatform Gradle プラグインが必要です。最新の Kotlin バージョンを使用していることを確認してください。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[versions]</span></span>
<span class="line"><span>kotlin = &quot;2.2.10&quot;</span></span></code></pre></div></li><li><p>提案に従って Gradle ファイルをリロードします。</p><p><img src="`+r+'" alt="Load Gradle changes button" width="295"></p></li></ol><p>これらの設定の詳細については、<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-dsl-reference.html" target="_blank" rel="noreferrer">Multiplatform Gradle DSL リファレンス</a>を参照してください。</p><h3 id="アプリケーションをビルドして実行する" tabindex="-1">アプリケーションをビルドして実行する <a class="header-anchor" href="#アプリケーションをビルドして実行する" aria-label="Permalink to &quot;アプリケーションをビルドして実行する&quot;">​</a></h3><p><code>src/nativeMain/kotlin/</code> ディレクトリにある <code>Main.kt</code> ファイルを開きます。</p><ul><li><code>src</code> ディレクトリには Kotlin ソースファイルが含まれています。</li><li><code>Main.kt</code> ファイルには、<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.io/println.html" target="_blank" rel="noreferrer"><code>println()</code></a> 関数を使用して &quot;Hello, Kotlin/Native!&quot; を出力するコードが含まれています。</li></ul><p>ガターの緑色のアイコンを押してコードを実行します。</p><p><img src="'+o+'" alt="Run the application" width="478"></p><p>IntelliJ IDEA は Gradle タスクを使用してコードを実行し、結果を<strong>Run</strong>タブに出力します。</p><p><img src="'+d+'" alt="Application output" width="331"></p><p>初回実行後、IDE は上部に該当する実行設定を作成します。</p><p><img src="'+E+'" alt="Gradle run configuration" width="503"></p><blockquote><p>IntelliJ IDEA Ultimate ユーザーは、コンパイルされたネイティブ実行可能ファイルのデバッグを可能にし、インポートされた Kotlin/Native プロジェクトの実行設定を自動的に作成する<a href="https://plugins.jetbrains.com/plugin/12775-native-debugging-support" target="_blank" rel="noreferrer">Native Debugging Support</a> プラグインをインストールできます。</p></blockquote><p><a href="https://www.jetbrains.com/help/idea/compiling-applications.html#auto-build" target="_blank" rel="noreferrer">IntelliJ IDEA を設定</a>して、プロジェクトを自動的にビルドできます。</p><ol><li><strong>Settings | Build, Execution, Deployment | Compiler</strong> に移動します。</li><li><strong>Compiler</strong> ページで、<strong>Build project automatically</strong> を選択します。</li><li>変更を適用します。</li></ol>',22)),i("p",null,[a[2]||(a[2]=s("これで、クラスファイルに変更を加えるか、ファイルを保存する（")),l(h,null,{default:t(()=>a[0]||(a[0]=[s("Ctrl + S")])),_:1}),a[3]||(a[3]=s("/")),l(h,null,{default:t(()=>a[1]||(a[1]=[s("Cmd + S")])),_:1}),a[4]||(a[4]=s("）と、IntelliJ IDEA はプロジェクトのインクリメンタルビルドを自動的に実行します。"))]),a[14]||(a[14]=n(`<h3 id="アプリケーションを更新する" tabindex="-1">アプリケーションを更新する <a class="header-anchor" href="#アプリケーションを更新する" aria-label="Permalink to &quot;アプリケーションを更新する&quot;">​</a></h3><p>アプリケーションに、名前の文字数を数える機能を追加しましょう。</p><ol><li><p><code>Main.kt</code> ファイルに、入力を読み取るコードを追加します。<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.io/readln.html" target="_blank" rel="noreferrer"><code>readln()</code></a> 関数を使用して入力値を読み取り、<code>name</code> 変数に割り当てます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 入力値を読み取ります。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, enter your name:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> readln</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>このアプリを Gradle を使用して実行するには、<code>build.gradle.kts</code> ファイルで使用する入力として <code>System.in</code> を指定し、Gradle の変更をロードします。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    nativeTarget.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        binaries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                entryPoint </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;main&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                runTask?.standardInput </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> System.\`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>空白を削除し、文字数を数えます。</p><ul><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/replace.html" target="_blank" rel="noreferrer"><code>replace()</code></a> 関数を使用して、名前から空白を削除します。</li><li>スコープ関数 <a href="/ja/kotlin/scope-functions#let"><code>let</code></a> を使用して、オブジェクトコンテキスト内で関数を実行します。</li><li><a href="/ja/kotlin/strings#string-templates">文字列テンプレート</a>を使用して、ドル記号を追加し中括弧で囲むことで、名前の長さを文字列に挿入します – <code>\${it.length}</code>。<code>it</code> は<a href="/ja/kotlin/coding-conventions#lambda-parameters">ラムダパラメータ</a>のデフォルト名です。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 入力値を読み取ります。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, enter your name:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> readln</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 名前の文字数を数えます。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot; &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Your name contains \${it.length} letters&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>アプリケーションを実行します。</p></li><li><p>名前を入力し、結果を確認します。</p><p><img src="`+g+`" alt="Application output" width="422"></p></li></ol><p>次に、名前のユニークな文字だけを数えてみましょう。</p><ol><li><p><code>Main.kt</code> ファイルに、<code>String</code> の新しい<a href="/ja/kotlin/extensions#extension-functions">拡張関数</a> <code>.countDistinctCharacters()</code> を宣言します。</p><ul><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/lowercase.html" target="_blank" rel="noreferrer"><code>lowercase()</code></a> 関数を使用して、名前を小文字に変換します。</li><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/to-list.html" target="_blank" rel="noreferrer"><code>toList()</code></a> 関数を使用して、入力文字列を文字のリストに変換します。</li><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/distinct.html" target="_blank" rel="noreferrer"><code>distinct()</code></a> 関数を使用して、名前のユニークな文字のみを選択します。</li><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/count.html" target="_blank" rel="noreferrer"><code>count()</code></a> 関数を使用して、ユニークな文字の数を数えます。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">countDistinctCharacters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lowercase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">distinct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div></li><li><p><code>.countDistinctCharacters()</code> 関数を使用して、名前のユニークな文字数を数えます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">countDistinctCharacters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lowercase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">distinct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 入力値を読み取ります。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, enter your name:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> readln</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 名前の文字数を数えます。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot; &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Your name contains \${it.length} letters&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ユニークな文字数を出力します。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Your name contains \${it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">countDistinctCharacters</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">()} unique letters&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>アプリケーションを実行します。</p></li><li><p>名前を入力し、結果を確認します。</p><p><img src="`+c+'" alt="Application output" width="422"></p></li></ol><h2 id="gradle-を使用する" tabindex="-1">Gradle を使用する <a class="header-anchor" href="#gradle-を使用する" aria-label="Permalink to &quot;Gradle を使用する&quot;">​</a></h2><p>このセクションでは、<a href="https://gradle.org" target="_blank" rel="noreferrer">Gradle</a> を使用して Kotlin/Native アプリケーションを手動で作成する方法を学びます。これは Kotlin/Native および Kotlin Multiplatform プロジェクトのデフォルトのビルドシステムであり、Java、Android、その他のエコシステムでも一般的に使用されています。</p><h3 id="プロジェクトファイルを作成する" tabindex="-1">プロジェクトファイルを作成する <a class="header-anchor" href="#プロジェクトファイルを作成する" aria-label="Permalink to &quot;プロジェクトファイルを作成する&quot;">​</a></h3>',8)),i("ol",null,[a[9]||(a[9]=i("li",null,[i("p",null,[s("まず、互換性のあるバージョンの"),i("a",{href:"https://gradle.org/install/",target:"_blank",rel:"noreferrer"},"Gradle"),s("をインストールします。"),i("a",{href:"/ja/kotlin/gradle-configure-project#apply-the-plugin"},"互換性テーブル"),s("を参照して、Kotlin Gradle プラグイン (KGP) と利用可能な Gradle バージョンの互換性を確認してください。")])],-1)),i("li",null,[a[7]||(a[7]=i("p",null,[s("空のプロジェクトディレクトリを作成します。その中に、次の内容の "),i("code",null,"build.gradle(.kts)"),s(" ファイルを作成します。")],-1)),l(k,{group:"build-script"},{default:t(()=>[l(e,{title:"Kotlin","group-key":"kotlin"},{default:t(()=>a[5]||(a[5]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// build.gradle.kts")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"plugins"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"multiplatform"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") version "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"2.2.10"')]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"repositories"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    mavenCentral"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    macosArm64"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"native"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {  "),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// macOS上")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},'    // linuxArm64("native")'),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}}," // Linux上")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},'    // mingwX64("native")'),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"   // Windows上")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"        binaries"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"            executable"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withType"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"Wrapper"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"> {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    gradleVersion "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "8.14"')]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    distributionType "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," Wrapper.DistributionType.BIN")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),l(e,{title:"Groovy","group-key":"groovy"},{default:t(()=>a[6]||(a[6]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// build.gradle")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"plugins {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    id "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'org.jetbrains.kotlin.multiplatform'"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," version "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'2.2.10'")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"repositories {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    mavenCentral()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"kotlin {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    macosArm64("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'native'"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {  "),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// macOS上")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"    // linuxArm64('native')"),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}}," // Linux上")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"    // mingwX64('native')"),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"   // Windows上")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        binaries {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            executable()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"wrapper {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    gradleVersion "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," '8.14'")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    distributionType "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," 'BIN'")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),a[8]||(a[8]=i("p",null,[i("code",null,"macosArm64"),s("、"),i("code",null,"iosArm64"),s("、"),i("code",null,"linuxArm64"),s("、"),i("code",null,"mingwX64"),s(" のような異なる"),i("a",{href:"/ja/kotlin/native-target-support"},"ターゲット名"),s("を使用して、コードをコンパイルするターゲットを定義できます。これらのターゲット名は、オプションでプラットフォーム名をパラメータとして取ることができます。この場合は "),i("code",null,"native"),s(" です。プラットフォーム名は、プロジェクト内のソースパスとタスク名を生成するために使用されます。")],-1))]),a[10]||(a[10]=n(`<li><p>プロジェクトディレクトリに空の <code>settings.gradle(.kts)</code> ファイルを作成します。</p></li><li><p><code>src/nativeMain/kotlin</code> ディレクトリを作成し、その中に以下の内容の <code>hello.kt</code> ファイルを配置します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, Kotlin/Native!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li>`,2))]),a[15]||(a[15]=n(`<p>慣例により、すべてのソースは <code>src/&lt;target name&gt;[Main|Test]/kotlin</code> ディレクトリに配置されます。ここで <code>Main</code> はソースコード用、<code>Test</code> はテスト用です。<code>&lt;target name&gt;</code> は、ビルドファイルで指定されたターゲットプラットフォーム（この場合は <code>native</code>）に対応します。</p><h3 id="プロジェクトをビルドして実行する" tabindex="-1">プロジェクトをビルドして実行する <a class="header-anchor" href="#プロジェクトをビルドして実行する" aria-label="Permalink to &quot;プロジェクトをビルドして実行する&quot;">​</a></h3><ol><li><p>プロジェクトのルートディレクトリから、ビルドコマンドを実行します。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nativeBinaries</span></span></code></pre></div><p>このコマンドは <code>build/bin/native</code> ディレクトリを作成し、その中に <code>debugExecutable</code> と <code>releaseExecutable</code> の2つのディレクトリを作成します。これらには対応するバイナリファイルが含まれます。</p><p>デフォルトでは、バイナリファイルの名前はプロジェクトディレクトリと同じになります。</p></li><li><p>プロジェクトを実行するには、以下のコマンドを実行します。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build/bin/native/debugExecutable/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;project_name&gt;.kexe</span></span></code></pre></div></li></ol><p>ターミナルに &quot;Hello, Kotlin/Native!&quot; と出力されます。</p><h3 id="ide-でプロジェクトを開く" tabindex="-1">IDE でプロジェクトを開く <a class="header-anchor" href="#ide-でプロジェクトを開く" aria-label="Permalink to &quot;IDE でプロジェクトを開く&quot;">​</a></h3><p>これで、Gradle をサポートする任意の IDE でプロジェクトを開くことができます。IntelliJ IDEA を使用する場合:</p><ol><li><strong>File</strong> | <strong>Open</strong> を選択します。</li><li>プロジェクトディレクトリを選択し、<strong>Open</strong> をクリックします。 IntelliJ IDEA は、それが Kotlin/Native プロジェクトであるかどうかを自動的に検出します。</li></ol><p>プロジェクトで問題が発生した場合、IntelliJ IDEA は<strong>Build</strong>タブにエラーメッセージを表示します。</p><h2 id="コマンドラインコンパイラを使用する" tabindex="-1">コマンドラインコンパイラを使用する <a class="header-anchor" href="#コマンドラインコンパイラを使用する" aria-label="Permalink to &quot;コマンドラインコンパイラを使用する&quot;">​</a></h2><p>このセクションでは、コマンドラインツールで Kotlin コンパイラを使用して Kotlin/Native アプリケーションを作成する方法を学びます。</p><h3 id="コンパイラをダウンロードしてインストールする" tabindex="-1">コンパイラをダウンロードしてインストールする <a class="header-anchor" href="#コンパイラをダウンロードしてインストールする" aria-label="Permalink to &quot;コンパイラをダウンロードしてインストールする&quot;">​</a></h3><p>コンパイラをインストールするには：</p><ol><li><p>Kotlin の<a href="https://github.com/JetBrains/kotlin/releases/tag/v2.2.10" target="_blank" rel="noreferrer">GitHubリリース</a>ページに移動し、<strong>Assets</strong>セクションまでスクロールします。</p></li><li><p>名前に <code>kotlin-native</code> を含むファイルを探し、ご使用のオペレーティングシステムに適したものをダウンロードします。例えば、<code>kotlin-native-prebuilt-linux-x86_64-2.2.10.tar.gz</code> です。</p></li><li><p>選択したディレクトリにアーカイブを解凍します。</p></li><li><p>シェルプロファイルを開き、コンパイラの <code>/bin</code> ディレクトリへのパスを <code>PATH</code> 環境変数に追加します。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PATH</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/&lt;path to the compiler&gt;/kotlin-native/bin:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$PATH</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span></code></pre></div></li></ol><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>コンパイラ出力には依存関係や仮想マシンの要件はありませんが、コンパイラ自体には Java 1.8 以降のランタイムが必要です。<a href="https://www.oracle.com/java/technologies/downloads/" target="_blank" rel="noreferrer">JDK 8 (JAVA SE 8) 以降のバージョン</a>でサポートされています。</p></div><h3 id="プログラムを作成する" tabindex="-1">プログラムを作成する <a class="header-anchor" href="#プログラムを作成する" aria-label="Permalink to &quot;プログラムを作成する&quot;">​</a></h3><p>作業ディレクトリを選択し、<code>hello.kt</code> という名前のファイルを作成します。以下のコードで更新します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, Kotlin/Native!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="コンソールからコードをコンパイルする" tabindex="-1">コンソールからコードをコンパイルする <a class="header-anchor" href="#コンソールからコードをコンパイルする" aria-label="Permalink to &quot;コンソールからコードをコンパイルする&quot;">​</a></h3><p>アプリケーションをコンパイルするには、ダウンロードしたコンパイラで以下のコマンドを実行します。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlinc-native</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.kt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello</span></span></code></pre></div><p><code>-o</code> オプションの値は出力ファイルの名前を指定するため、この呼び出しは macOS および Linux では <code>hello.kexe</code> バイナリファイル（Windows では <code>hello.exe</code>）を生成します。</p><p>利用可能なオプションの完全なリストについては、<a href="/ja/kotlin/compiler-reference">Kotlin コンパイラオプション</a>を参照してください。</p><h3 id="プログラムを実行する" tabindex="-1">プログラムを実行する <a class="header-anchor" href="#プログラムを実行する" aria-label="Permalink to &quot;プログラムを実行する&quot;">​</a></h3><p>プログラムを実行するには、コマンドラインツールでバイナリファイルが含まれるディレクトリに移動し、以下のコマンドを実行します。</p>`,24)),l(k,null,{default:t(()=>[l(e,{title:"macOS および Linux"},{default:t(()=>a[11]||(a[11]=[i("div",{class:"language-none vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"none"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",null,"./hello.kexe")])])])],-1)])),_:1}),l(e,{title:"Windows"},{default:t(()=>a[12]||(a[12]=[i("div",{class:"language-none vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"none"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",null,"./hello.exe")])])])],-1)])),_:1})]),_:1}),a[16]||(a[16]=n('<p>アプリケーションは標準出力に &quot;Hello, Kotlin/Native&quot; と出力します。</p><h2 id="次のステップ" tabindex="-1">次のステップ <a class="header-anchor" href="#次のステップ" aria-label="Permalink to &quot;次のステップ&quot;">​</a></h2><ul><li>ネイティブ HTTP クライアントを作成し、C ライブラリと相互運用する方法を説明する<a href="/ja/kotlin/native-app-with-c-and-libcurl">C interop と libcurl を使用したアプリの作成</a>チュートリアルを完了してください。</li><li><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-dsl-reference.html" target="_blank" rel="noreferrer">実際の Kotlin/Native プロジェクト向けに Gradle ビルドスクリプトを記述する方法</a>を学びましょう。</li><li>Gradle ビルドシステムの詳細については、<a href="/ja/kotlin/gradle">ドキュメント</a>を参照してください。</li></ul>',3))])}const x=u(b,[["render",m]]);export{q as __pageData,x as default};
