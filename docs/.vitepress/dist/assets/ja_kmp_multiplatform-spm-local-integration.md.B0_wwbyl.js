import{_ as r}from"./chunks/direct-integration-scheme.Cw1ubqmC.js";import{_ as d,a as k,b as h,c as g}from"./chunks/xcode-spm-usage.Dn1odtN3.js";import{_ as c,C as p,c as u,o as E,j as s,G as l,ag as t,a,w as n}from"./chunks/framework.Bksy39di.js";const B=JSON.parse('{"title":"ローカルのSwiftパッケージからKotlinを使用する","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kmp/multiplatform-spm-local-integration.md","filePath":"ja/kmp/multiplatform-spm-local-integration.md","lastUpdated":1755516278000}'),m={name:"ja/kmp/multiplatform-spm-local-integration.md"};function F(y,i,f,C,b,S){const o=p("tldr"),e=p("shortcut");return E(),u("div",null,[i[17]||(i[17]=s("h1",{id:"ローカルのswiftパッケージからkotlinを使用する",tabindex:"-1"},[a("ローカルのSwiftパッケージからKotlinを使用する "),s("a",{class:"header-anchor",href:"#ローカルのswiftパッケージからkotlinを使用する","aria-label":'Permalink to "ローカルのSwiftパッケージからKotlinを使用する"'},"​")],-1)),l(o,null,{default:n(()=>i[0]||(i[0]=[a(" これはローカルでの統合方法です。次の場合に役立ちます。"),s("br",null,null,-1),s("ul",null,[s("li",null,"ローカルのSPMモジュールを持つiOSアプリがある。"),s("li",null,"ローカルマシンでiOSをターゲットとするKotlin Multiplatformプロジェクトを既にセットアップしている。"),s("li",null,[a("既存のiOSプロジェクトが静的リンクタイプを使用している。"),s("br")])],-1),s("p",null,[s("a",{href:"./multiplatform-ios-integration-overview"},"最適な統合方法を選択する")],-1)])),_:1}),i[18]||(i[18]=t('<p>このチュートリアルでは、Swift Package Manager (SPM) を使用して、Kotlin Multiplatformプロジェクトから生成されたKotlinフレームワークをローカルパッケージに統合する方法を学習します。</p><p><img src="'+r+'" alt="Direct integration diagram" width="700"></p><p>統合をセットアップするには、プロジェクトのビルド設定に<code>embedAndSignAppleFrameworkForXcode</code> Gradleタスクをプリ実行アクションとして使用する特別なスクリプトを追加します。共通コードで行われた変更がXcodeプロジェクトに反映されるのを確認するには、Kotlin Multiplatformプロジェクトをリビルドするだけで済みます。</p><p>この方法は、スクリプトをビルドフェーズに追加し、共通コードからの変更を取得するためにKotlin MultiplatformプロジェクトとiOSプロジェクトの両方のリビルドが必要な通常の直接統合方法と比較して、ローカルのSwiftパッケージでKotlinコードを簡単に使用できるようにします。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Kotlin Multiplatformに慣れていない場合は、まず<a href="./quickstart">環境のセットアップ</a>と<a href="./compose-multiplatform-create-first-app">クロスプラットフォームアプリケーションのゼロからの作成</a>について学習してください。</p></div><h2 id="プロジェクトをセットアップする" tabindex="-1">プロジェクトをセットアップする <a class="header-anchor" href="#プロジェクトをセットアップする" aria-label="Permalink to &quot;プロジェクトをセットアップする&quot;">​</a></h2><p>この機能はKotlin 2.0.0以降で利用可能です。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Kotlinのバージョンを確認するには、Kotlin Multiplatformプロジェクトのルートにある<code>build.gradle(.kts)</code>ファイルに移動します。ファイルの先頭にある<code>plugins {}</code>ブロックに現在のバージョンが表示されます。 あるいは、<code>gradle/libs.versions.toml</code>ファイルでバージョンカタログを確認することもできます。</p></div><p>このチュートリアルでは、プロジェクトが<code>embedAndSignAppleFrameworkForXcode</code>タスクをプロジェクトのビルドフェーズで使用する<a href="./multiplatform-direct-integration">直接統合</a>アプローチを採用していることを前提としています。KotlinフレームワークをCocoaPodsプラグインまたは<code>binaryTarget</code>を使用したSwiftパッケージを介して接続している場合は、まず移行してください。</p>',9)),i[19]||(i[19]=s("h3",{"initial-collapse-state":"collapsed",collapsible:"true",id:"spmのbinarytarget統合からの移行",tabindex:"-1"},[a("SPMの"),s("code",null,"binaryTarget"),a("統合からの移行 "),s("a",{class:"header-anchor",href:"#spmのbinarytarget統合からの移行","aria-label":'Permalink to "SPMの`binaryTarget`統合からの移行 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),i[20]||(i[20]=s("p",null,[s("code",null,"binaryTarget"),a("を使用したSPM統合から移行するには：")],-1)),s("ol",null,[s("li",null,[i[2]||(i[2]=a("Xcodeで、")),i[3]||(i[3]=s("strong",null,"Product",-1)),i[4]||(i[4]=a(" | ")),i[5]||(i[5]=s("strong",null,"Clean Build Folder",-1)),i[6]||(i[6]=a(" を使用するか、")),l(e,null,{default:n(()=>i[1]||(i[1]=[a("Cmd + Shift + K")])),_:1}),i[7]||(i[7]=a("ショートカットでビルドディレクトリをクリーンアップします。"))]),i[8]||(i[8]=s("li",null,[a("すべての"),s("code",null,"Package.swift"),a("ファイルから、Kotlinフレームワークを含むパッケージへの依存関係と、プロダクトへのターゲット依存関係の両方を削除します。")],-1))]),i[21]||(i[21]=s("h3",{"initial-collapse-state":"collapsed",collapsible:"true",id:"cocoapodsプラグインからの移行",tabindex:"-1"},[a("CocoaPodsプラグインからの移行 "),s("a",{class:"header-anchor",href:"#cocoapodsプラグインからの移行","aria-label":'Permalink to "CocoaPodsプラグインからの移行 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),i[22]||(i[22]=s("div",{class:"danger custom-block"},[s("p",{class:"custom-block-title"},"WARNING"),s("p",null,[s("code",null,"cocoapods {}"),a("ブロックに他のPodへの依存関係がある場合は、CocoaPods統合アプローチに頼る必要があります。現在、マルチモーダルSPMプロジェクトでPodとKotlinフレームワークの両方に依存関係を持つことは不可能です。")])],-1)),i[23]||(i[23]=s("p",null,"CocoaPodsプラグインから移行するには：",-1)),s("ol",null,[s("li",null,[s("p",null,[i[10]||(i[10]=a("Xcodeで、")),i[11]||(i[11]=s("strong",null,"Product",-1)),i[12]||(i[12]=a(" | ")),i[13]||(i[13]=s("strong",null,"Clean Build Folder",-1)),i[14]||(i[14]=a(" を使用するか、")),l(e,null,{default:n(()=>i[9]||(i[9]=[a("Cmd + Shift + K")])),_:1}),i[15]||(i[15]=a("ショートカットでビルドディレクトリをクリーンアップします。"))])]),i[16]||(i[16]=t('<li><p>Podfileのあるディレクトリで、次のコマンドを実行します。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pod deintegrate</span></span></code></pre></div></li><li><p><code>build.gradle(.kts)</code>ファイルから<code>cocoapods {}</code>ブロックを削除します。</p></li><li><p><code>.podspec</code>ファイルとPodfileを削除します。</p></li>',3))]),i[24]||(i[24]=t('<h2 id="フレームワークをプロジェクトに接続する" tabindex="-1">フレームワークをプロジェクトに接続する <a class="header-anchor" href="#フレームワークをプロジェクトに接続する" aria-label="Permalink to &quot;フレームワークをプロジェクトに接続する&quot;">​</a></h2><div class="note custom-block"><p class="custom-block-title">NOTE</p><p><code>swift build</code>への統合は現在サポートされていません。</p></div><p>ローカルのSwiftパッケージでKotlinコードを使用できるようにするには、マルチプラットフォームプロジェクトから生成されたKotlinフレームワークをXcodeプロジェクトに接続します。</p><ol><li><p>Xcodeで、<strong>Product</strong> | <strong>Scheme</strong> | <strong>Edit scheme</strong> に移動するか、トップバーのスキームアイコンをクリックして<strong>Edit scheme</strong>を選択します。</p><p><img src="'+d+'" alt="Edit scheme" width="700"></p></li><li><p><strong>Build</strong> | <strong>Pre-actions</strong> アイテムを選択し、<strong>+</strong> | <strong>New Run Script Action</strong> をクリックします。</p><p><img src="'+k+`" alt="New run script action" width="700"></p></li><li><p>次のスクリプトを調整し、アクションとして追加します。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&lt;Path to the root of the multiplatform project&gt;&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> :</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Shared</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> module</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:embedAndSignAppleFrameworkForXcode</span></span></code></pre></div><ul><li><code>cd</code>コマンドで、Kotlin Multiplatformプロジェクトのルートへのパス（例: <code>$SRCROOT/..</code>）を指定します。</li><li><code>./gradlew</code>コマンドで、共有モジュールの名前（例: <code>:shared</code>または<code>:composeApp</code>）を指定します。</li></ul></li><li><p><strong>Provide build settings from</strong>セクションでアプリのターゲットを選択します。</p><p><img src="`+h+`" alt="Filled run script action" width="700"></p></li><li><p>これで、共有モジュールをローカルのSwiftパッケージにインポートして、Kotlinコードを使用できるようになります。</p><p>Xcodeで、ローカルのSwiftパッケージに移動し、モジュールのインポートを伴う関数を定義します。例：</p><div class="language-Swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Shared</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> greetingsFromSpmLocalPackage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Greeting.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><img src="`+g+`" alt="SPM usage" width="700"></p></li><li><p>iOSプロジェクトの<code>ContentView.swift</code>ファイルで、ローカルパッケージをインポートすることでこの関数を使用できるようになりました。</p><div class="language-Swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SwiftUI</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SpmLocalPackage</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ContentView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        Vstack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            Image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">systemName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;globe&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">imageScale</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.large)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">foregroundStyle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.tint)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">greetingsFromSpmLocalPackage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">padding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#Preview</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    ContentView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>Xcodeでプロジェクトをビルドします。すべてが正しく設定されていれば、プロジェクトのビルドは成功します。</p></li></ol><p>考慮すべき点が他にもいくつかあります。</p><ul><li>デフォルトの<code>Debug</code>または<code>Release</code>とは異なるカスタムビルド設定を使用している場合は、<strong>Build Settings</strong>タブの<strong>User-Defined</strong>セクションに<code>KOTLIN_FRAMEWORK_BUILD_TYPE</code>設定を追加し、<code>Debug</code>または<code>Release</code>に設定します。</li><li>スクリプトのサンドボックス化に関するエラーが発生した場合は、プロジェクト名をダブルクリックしてiOSプロジェクト設定を開き、<strong>Build Settings</strong>タブで<strong>Build Options</strong>の下にある<strong>User Script Sandboxing</strong>を無効にします。</li></ul><h2 id="次のステップ" tabindex="-1">次のステップ <a class="header-anchor" href="#次のステップ" aria-label="Permalink to &quot;次のステップ&quot;">​</a></h2><ul><li><a href="./multiplatform-ios-integration-overview">統合方法を選択する</a></li><li><a href="./multiplatform-spm-export">Swiftパッケージのエクスポート方法を設定する</a></li></ul>`,8))])}const A=c(m,[["render",F]]);export{B as __pageData,A as default};
