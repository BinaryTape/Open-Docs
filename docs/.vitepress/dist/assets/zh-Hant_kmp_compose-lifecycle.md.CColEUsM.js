import{_ as t}from"./chunks/lifecycle-states.Kfhu0FKr.js";import{_ as o,c as d,o as a,ag as i}from"./chunks/framework.Bksy39di.js";const m=JSON.parse('{"title":"生命週期","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kmp/compose-lifecycle.md","filePath":"zh-Hant/kmp/compose-lifecycle.md","lastUpdated":1755516278000}'),c={name:"zh-Hant/kmp/compose-lifecycle.md"};function s(r,e,l,n,p,h){return a(),d("div",null,e[0]||(e[0]=[i(`<h1 id="生命週期" tabindex="-1">生命週期 <a class="header-anchor" href="#生命週期" aria-label="Permalink to &quot;生命週期&quot;">​</a></h1><p>Compose Multiplatform 中元件的生命週期概念，是借鑑自 Jetpack Compose 的<a href="https://developer.android.com/topic/libraries/architecture/lifecycle" target="_blank" rel="noreferrer">生命週期</a>概念。 具備生命週期感知能力的元件能夠回應其他元件生命週期狀態的變化，幫助您產生組織更良好且通常更輕量的程式碼，這些程式碼也更容易維護。</p><p>Compose Multiplatform 提供了一個通用的 <code>LifecycleOwner</code> 實作，它將原始 Jetpack Compose 功能擴展到其他平台，並有助於在通用程式碼中觀察生命週期狀態。</p><p>若要使用多平台 <code>Lifecycle</code> 實作，請將以下依賴項新增至您的 <code>commonMain</code> 原始碼集：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        commonMain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.androidx.lifecycle:lifecycle-runtime-compose:2.9.2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>您可以在我們的<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/whats-new-compose.html" target="_blank" rel="noreferrer">最新消息</a>中追蹤多平台 Lifecycle 實作的變更，或在 <a href="./https://github.com/JetBrains/compose-multiplatform/blob/master/CHANGELOG">Compose Multiplatform 變更日誌</a>中關注特定的 EAP 版本。</p></div><h2 id="狀態與事件" tabindex="-1">狀態與事件 <a class="header-anchor" href="#狀態與事件" aria-label="Permalink to &quot;狀態與事件&quot;">​</a></h2><p>生命週期狀態與事件的流程（與 <a href="https://developer.android.com/topic/libraries/architecture/lifecycle" target="_blank" rel="noreferrer">Jetpack 生命週期</a>相同）：</p><p><img src="`+t+'" alt="生命週期圖" width="700"></p><h2 id="生命週期實作" tabindex="-1">生命週期實作 <a class="header-anchor" href="#生命週期實作" aria-label="Permalink to &quot;生命週期實作&quot;">​</a></h2><p><code>Composable</code> 通常不需要獨特的生命週期：一個通用的 <code>LifecycleOwner</code> 為所有相互連接的實體提供生命週期。預設情況下，Compose Multiplatform 建立的所有 <code>Composable</code> 都共享相同的生命週期 – 它們可以訂閱其事件、參照生命週期狀態等等。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>LifecycleOwner</code> 物件以 <a href="https://developer.android.com/reference/kotlin/androidx/compose/runtime/CompositionLocal" target="_blank" rel="noreferrer">CompositionLocal</a> 的形式提供。如果您想為特定的 <code>Composable</code> 子樹單獨管理生命週期，您可以<a href="https://developer.android.com/topic/libraries/architecture/lifecycle#implementing-lco" target="_blank" rel="noreferrer">建立自己的</a> <code>LifecycleOwner</code> 實作。</p></div><p>在多平台生命週期中處理協程時，請記住 <code>Lifecycle.coroutineScope</code> 值綁定至 <code>Dispatchers.Main.immediate</code> 值，而該值在桌面目標上可能預設不可用。 為了讓生命週期中的協程和流在 Compose Multiplatform 中正常運作，請將 <code>kotlinx-coroutines-swing</code> 依賴項新增至您的專案。 有關詳細資訊，請參閱 <a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-main.html" target="_blank" rel="noreferrer"><code>Dispatchers.Main</code> 文件</a>。</p><ul><li>了解 <a href="./compose-navigation-routing">導航與路由</a> 中導航元件的生命週期運作方式。</li><li>在 <a href="./compose-viewmodel">通用 ViewModel</a> 頁面上了解有關多平台 ViewModel 實作的更多資訊。</li></ul><h2 id="將-android-生命週期映射至其他平台" tabindex="-1">將 Android 生命週期映射至其他平台 <a class="header-anchor" href="#將-android-生命週期映射至其他平台" aria-label="Permalink to &quot;將 Android 生命週期映射至其他平台&quot;">​</a></h2><h3 id="ios" tabindex="-1">iOS <a class="header-anchor" href="#ios" aria-label="Permalink to &quot;iOS&quot;">​</a></h3><table tabindex="0"><thead><tr><th>原生事件與通知</th><th>生命週期事件</th><th>生命週期狀態變更</th></tr></thead><tbody><tr><td><code>viewDidDisappear</code></td><td><code>ON_STOP</code></td><td><code>STARTED</code> → <code>CREATED</code></td></tr><tr><td><code>viewWillAppear</code></td><td><code>ON_START</code></td><td><code>CREATED</code> → <code>STARTED</code></td></tr><tr><td><code>willResignActive</code></td><td><code>ON_PAUSE</code></td><td><code>RESUMED</code> → <code>STARTED</code></td></tr><tr><td><code>didBecomeActive</code></td><td><code>ON_RESUME</code></td><td><code>STARTED</code> → <code>RESUMED</code></td></tr><tr><td><code>didEnterBackground</code></td><td><code>ON_STOP</code></td><td><code>STARTED</code> → <code>CREATED</code></td></tr><tr><td><code>willEnterForeground</code></td><td><code>ON_START</code></td><td><code>CREATED</code> → <code>STARTED</code></td></tr><tr><td><code>viewControllerDidLeaveWindowHierarchy</code></td><td><code>ON_DESTROY</code></td><td><code>CREATED</code> → <code>DESTROYED</code></td></tr></tbody></table><h3 id="web" tabindex="-1">Web <a class="header-anchor" href="#web" aria-label="Permalink to &quot;Web&quot;">​</a></h3><p>由於 Wasm 目標的限制，生命週期：</p><ul><li>會跳過 <code>CREATED</code> 狀態，因為應用程式總是附著在頁面上。</li><li>永遠不會達到 <code>DESTROYED</code> 狀態，因為網頁通常只會在使用者關閉分頁時終止。</li></ul><table tabindex="0"><thead><tr><th>原生事件</th><th>生命週期事件</th><th>生命週期狀態變更</th></tr></thead><tbody><tr><td><code>blur</code></td><td><code>ON_PAUSE</code></td><td><code>RESUMED</code> → <code>STARTED</code></td></tr><tr><td><code>focus</code></td><td><code>ON_RESUME</code></td><td><code>STARTED</code> → <code>RESUMED</code></td></tr></tbody></table><h3 id="desktop" tabindex="-1">Desktop <a class="header-anchor" href="#desktop" aria-label="Permalink to &quot;Desktop&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Swing 監聽器回呼</th><th>生命週期事件</th><th>生命週期狀態變更</th></tr></thead><tbody><tr><td><code>windowIconified</code></td><td><code>ON_STOP</code></td><td><code>STARTED</code> → <code>CREATED</code></td></tr><tr><td><code>windowDeiconified</code></td><td><code>ON_START</code></td><td><code>CREATED</code> → <code>STARTED</code></td></tr><tr><td><code>windowLostFocus</code></td><td><code>ON_PAUSE</code></td><td><code>RESUMED</code> → <code>STARTED</code></td></tr><tr><td><code>windowGainedFocus</code></td><td><code>ON_RESUME</code></td><td><code>STARTED</code> → <code>RESUMED</code></td></tr><tr><td><code>dispose</code></td><td><code>ON_DESTROY</code></td><td><code>CREATED</code> → <code>DESTROYED</code></td></tr></tbody></table>',23)]))}const b=o(c,[["render",s]]);export{m as __pageData,b as default};
