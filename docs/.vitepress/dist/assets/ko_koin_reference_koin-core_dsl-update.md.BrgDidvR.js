import{_ as i,c as a,o as l,ag as n}from"./chunks/framework.Bksy39di.js";const r=JSON.parse('{"title":"생성자 DSL","description":"","frontmatter":{"title":"생성자 DSL"},"headers":[],"relativePath":"ko/koin/reference/koin-core/dsl-update.md","filePath":"ko/koin/reference/koin-core/dsl-update.md","lastUpdated":1750001831000}'),t={name:"ko/koin/reference/koin-core/dsl-update.md"};function e(p,s,h,k,d,o){return l(),a("div",null,s[0]||(s[0]=[n(`<h1 id="생성자-dsl" tabindex="-1">생성자 DSL <a class="header-anchor" href="#생성자-dsl" aria-label="Permalink to &quot;생성자 DSL&quot;">​</a></h1><p>Koin은 이제 클래스 생성자를 직접 대상으로 지정하고 람다 표현식 내에서 정의를 직접 입력할 필요가 없는 새로운 종류의 DSL 키워드를 제공합니다.</p><p>다음 의존성을 가진 <code>ClassA</code> 클래스의 경우:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ClassA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ClassB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ClassC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ClassB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ClassC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>이제 <code>클래스 생성자</code>를 직접 대상으로 하여 해당 컴포넌트를 선언할 수 있습니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    singleOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ClassA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    singleOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ClassB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    singleOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ClassC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>이제 <code>get()</code> 함수로 생성자에 의존성을 지정할 필요가 없습니다! 🎉</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>클래스 생성자를 대상으로 지정하려면 클래스 이름 앞에 <code>::</code>를 사용해야 합니다.</p></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>생성자는 모든 <code>get()</code>으로 자동으로 채워집니다. Koin이 현재 그래프에서 값을 찾으려고 시도하므로 기본값을 사용하지 마세요.</p></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>&quot;이름이 지정된&quot; 정의를 검색해야 하는 경우, 한정자(qualifier)를 지정하기 위해 람다와 <code>get()</code>을 사용하는 표준 DSL을 사용해야 합니다.</p></div><h2 id="사용-가능한-키워드" tabindex="-1">사용 가능한 키워드 <a class="header-anchor" href="#사용-가능한-키워드" aria-label="Permalink to &quot;사용 가능한 키워드&quot;">​</a></h2><p>생성자로부터 정의를 빌드하는 데 사용할 수 있는 키워드는 다음과 같습니다.</p><ul><li><code>factoryOf</code> - <code>factory { }</code>와 동일 - 팩토리 정의</li><li><code>singleOf</code> - <code>single { }</code>와 동일 - 싱글턴 정의</li><li><code>scopedOf</code> - <code>scoped { }</code>와 동일 - 스코프 정의</li></ul><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Koin이 모든 매개변수를 해당 값으로 채우려고 시도하므로, 생성자에 기본값을 사용하지 않도록 주의하세요.</p></div><h2 id="dsl-옵션" tabindex="-1">DSL 옵션 <a class="header-anchor" href="#dsl-옵션" aria-label="Permalink to &quot;DSL 옵션&quot;">​</a></h2><p>모든 생성자 DSL 정의는 람다 내에서 일부 옵션을 열 수도 있습니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    singleOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ClassA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // definition options</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        named</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my_qualifier&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        bind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">InterfaceA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        createdAtStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>일반적인 옵션 및 DSL 키워드는 이 람다에서 사용할 수 있습니다.</p><ul><li><code>named(&quot;a_qualifier&quot;)</code> - 정의에 String 한정자를 부여합니다.</li><li><code>named&lt;MyType&gt;()</code> - 정의에 Type 한정자를 부여합니다.</li><li><code>bind&lt;MyInterface&gt;()</code> - 주어진 빈 정의에 바인딩할 타입을 추가합니다.</li><li><code>binds(listOf(...))</code> - 주어진 빈 정의에 바인딩할 타입 목록을 추가합니다.</li><li><code>createdAtStart()</code> - Koin 시작 시 싱글턴 인스턴스를 생성합니다.</li></ul><p>또한 람다 없이 <code>bind</code> 또는 <code>binds</code> 연산자를 사용할 수도 있습니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    singleOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ClassA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) bind InterfaceA::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="주입된-매개변수" tabindex="-1">주입된 매개변수 <a class="header-anchor" href="#주입된-매개변수" aria-label="Permalink to &quot;주입된 매개변수&quot;">​</a></h2><p>이러한 종류의 선언으로도 주입된 매개변수를 사용할 수 있습니다. Koin은 생성자를 주입하기 위해 주입된 매개변수와 현재 의존성을 찾아볼 것입니다.</p><p>다음과 같습니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>생성자 DSL로 선언된 경우:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    factoryOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>다음과 같이 주입될 수 있습니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;a_factory_id&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> factory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> koin.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parametersOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(id)}</span></span></code></pre></div><h2 id="리플렉션-기반-dsl-3-2부터-사용-중단" tabindex="-1">리플렉션 기반 DSL (3.2부터 사용 중단) <a class="header-anchor" href="#리플렉션-기반-dsl-3-2부터-사용-중단" aria-label="Permalink to &quot;리플렉션 기반 DSL (3.2부터 사용 중단)&quot;">​</a></h2><div class="warning custom-block"><p class="custom-block-title">CAUTION</p><p>Koin 리플렉션 DSL은 현재 사용 중단되었습니다. 위에 있는 Koin 생성자 DSL을 사용하십시오.</p></div>`,31)]))}const E=i(t,[["render",e]]);export{r as __pageData,E as default};
