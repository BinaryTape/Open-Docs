import{_ as e,c as t,o as r,ag as n}from"./chunks/framework.Bksy39di.js";const h=JSON.parse('{"title":"Kotlin 1.3 的相容性指南","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/compatibility-guide-13.md","filePath":"zh-Hant/kotlin/compatibility-guide-13.md","lastUpdated":1754307826000}'),a={name:"zh-Hant/kotlin/compatibility-guide-13.md"};function l(s,o,i,c,p,g){return r(),t("div",null,o[0]||(o[0]=[n('<h1 id="kotlin-1-3-的相容性指南" tabindex="-1">Kotlin 1.3 的相容性指南 <a class="header-anchor" href="#kotlin-1-3-的相容性指南" aria-label="Permalink to &quot;Kotlin 1.3 的相容性指南&quot;">​</a></h1><p><em>保持語言現代化 (Keeping the Language Modern)</em> 和 <em>舒適的更新 (Comfortable Updates)</em> 是 Kotlin 語言設計中的基本原則之一。前者指出，應移除阻礙語言演進的結構，而後者則表示，這種移除應事先充分溝通，以使程式碼遷移盡可能順暢。</p><p>儘管大多數語言變更已透過其他管道（例如更新日誌或編譯器警告）發布，但本文件將其全部總結，為從 Kotlin 1.2 遷移到 Kotlin 1.3 提供完整參考。</p><h2 id="基本術語" tabindex="-1">基本術語 <a class="header-anchor" href="#基本術語" aria-label="Permalink to &quot;基本術語&quot;">​</a></h2><p>本文件介紹了幾種相容性：</p><ul><li><em>來源 (Source)</em>：來源不相容的變更會導致原本編譯正常（無錯誤或警告）的程式碼無法再編譯。</li><li><em>二進制 (Binary)</em>：如果兩個二進制產物可以互換而不會導致載入或連結錯誤，則稱它們為二進制相容。</li><li><em>行為 (Behavioral)</em>：如果同一個程式在應用變更前後表現出不同的行為，則稱該變更為行為不相容。</li></ul><p>請記住，這些定義僅適用於純粹的 Kotlin。Kotlin 程式碼與其他語言（例如 Java）的相容性不在本文件討論範圍內。</p><h2 id="不相容變更" tabindex="-1">不相容變更 <a class="header-anchor" href="#不相容變更" aria-label="Permalink to &quot;不相容變更&quot;">​</a></h2><h3 id="建構子引數關於-clinit-呼叫的求值順序" tabindex="-1">建構子引數關於 <code>&lt;clinit&gt;</code> 呼叫的求值順序 <a class="header-anchor" href="#建構子引數關於-clinit-呼叫的求值順序" aria-label="Permalink to &quot;建構子引數關於 `&lt;clinit&gt;` 呼叫的求值順序&quot;">​</a></h3><blockquote><p><strong>問題 (Issue)</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-19532" target="_blank" rel="noreferrer">KT-19532</a></p><p><strong>組件 (Component)</strong>: Kotlin/JVM</p><p><strong>不相容變更類型 (Incompatible change type)</strong>: 行為 (behavioral)</p><p><strong>簡要摘要 (Short summary)</strong>: 1.3 版中，與類別初始化相關的求值順序已變更。</p><p><strong>棄用週期 (Deprecation cycle)</strong>:</p><ul><li>&lt;1.3: 舊行為（詳見問題說明）</li><li>&gt;= 1.3: 行為已變更， <code>-Xnormalize-constructor-calls=disable</code> 可用於暫時恢復到 1.3 之前的行為。此標誌的支援將在下一個主要版本中移除。</li></ul></blockquote><h3 id="註解建構子參數上缺少-getter-定位註解" tabindex="-1">註解建構子參數上缺少 getter 定位註解 <a class="header-anchor" href="#註解建構子參數上缺少-getter-定位註解" aria-label="Permalink to &quot;註解建構子參數上缺少 getter 定位註解&quot;">​</a></h3><blockquote><p><strong>問題 (Issue)</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-25287" target="_blank" rel="noreferrer">KT-25287</a></p><p><strong>組件 (Component)</strong>: Kotlin/JVM</p><p><strong>不相容變更類型 (Incompatible change type)</strong>: 行為 (behavioral)</p><p><strong>簡要摘要 (Short summary)</strong>: 針對註解建構子參數的 getter 定位註解將在 1.3 版中正確寫入到類別檔案。</p><p><strong>棄用週期 (Deprecation cycle)</strong>:</p><ul><li>&lt;1.3: 針對註解建構子參數的 getter 定位註解未套用。</li><li>&gt;=1.3: 針對註解建構子參數的 getter 定位註解已正確套用並寫入到生成的程式碼中。</li></ul></blockquote><h3 id="類別建構子的-get-註解中缺少錯誤" tabindex="-1">類別建構子的 <code>@get:</code> 註解中缺少錯誤 <a class="header-anchor" href="#類別建構子的-get-註解中缺少錯誤" aria-label="Permalink to &quot;類別建構子的 `@get:` 註解中缺少錯誤&quot;">​</a></h3><blockquote><p><strong>問題 (Issue)</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-19628" target="_blank" rel="noreferrer">KT-19628</a></p><p><strong>組件 (Component)</strong>: 核心語言 (Core language)</p><p><strong>不相容變更類型 (Incompatible change type)</strong>: 來源 (Source)</p><p><strong>簡要摘要 (Short summary)</strong>: getter 定位註解中的錯誤將在 1.3 版中正確報告。</p><p><strong>棄用週期 (Deprecation cycle)</strong>:</p><ul><li>&lt;1.2: getter 定位註解中的編譯錯誤未報告，導致不正確的程式碼也能正常編譯。</li><li>1.2.x: 錯誤僅由工具報告，編譯器仍然在沒有任何警告的情況下編譯此類程式碼。</li><li>&gt;=1.3: 編譯器也報告錯誤，導致錯誤程式碼被拒絕。</li></ul></blockquote><h3 id="存取使用-notnull-註解的-java-類型時的可空性斷言" tabindex="-1">存取使用 @NotNull 註解的 Java 類型時的可空性斷言 <a class="header-anchor" href="#存取使用-notnull-註解的-java-類型時的可空性斷言" aria-label="Permalink to &quot;存取使用 @NotNull 註解的 Java 類型時的可空性斷言&quot;">​</a></h3><blockquote><p><strong>問題 (Issue)</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-20830" target="_blank" rel="noreferrer">KT-20830</a></p><p><strong>組件 (Component)</strong>: Kotlin/JVM</p><p><strong>不相容變更類型 (Incompatible change type)</strong>: 行為 (Behavioral)</p><p><strong>簡要摘要 (Short summary)</strong>: 對於使用非空註解標記的 Java 類型，將更積極地生成可空性斷言，導致在此處傳遞 <code>null</code> 的程式碼更快失敗。</p><p><strong>棄用週期 (Deprecation cycle)</strong>:</p><ul><li>&lt;1.3: 當涉及類型推斷時，編譯器可能會遺漏此類斷言，允許在針對二進制檔案編譯期間潛在的 <code>null</code> 傳播（詳情請見問題說明）。</li><li>&gt;=1.3: 編譯器生成遺漏的斷言。這可能會導致原本（錯誤地）在此處傳遞 <code>null</code> 的程式碼更快失敗。 <code>-XXLanguage:-StrictJavaNullabilityAssertions</code> 可用於暫時恢復到 1.3 之前的行為。此標誌的支援將在下一個主要版本中移除。</li></ul></blockquote><h3 id="列舉成員上不健全的智能轉換" tabindex="-1">列舉成員上不健全的智能轉換 <a class="header-anchor" href="#列舉成員上不健全的智能轉換" aria-label="Permalink to &quot;列舉成員上不健全的智能轉換&quot;">​</a></h3><blockquote><p><strong>問題 (Issue)</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-20772" target="_blank" rel="noreferrer">KT-20772</a></p><p><strong>組件 (Component)</strong>: 核心語言 (Core language)</p><p><strong>不相容變更類型 (Incompatible change type)</strong>: 來源 (Source)</p><p><strong>簡要摘要 (Short summary)</strong>: 對於一個列舉條目成員的智能轉換將正確地只套用至此列舉條目。</p><p><strong>棄用週期 (Deprecation cycle)</strong>:</p><ul><li>&lt;1.3: 對於一個列舉條目成員的智能轉換可能導致對其他列舉條目相同成員的不健全智能轉換。</li><li>&gt;=1.3: 智能轉換將正確地只套用至一個列舉條目成員。 <code>-XXLanguage:-SoundSmartcastForEnumEntries</code> 將暫時恢復舊行為。此標誌的支援將在下一個主要版本中移除。</li></ul></blockquote><h3 id="在-getter-中重新賦值-val-支援欄位" tabindex="-1">在 getter 中重新賦值 <code>val</code> 支援欄位 <a class="header-anchor" href="#在-getter-中重新賦值-val-支援欄位" aria-label="Permalink to &quot;在 getter 中重新賦值 `val` 支援欄位&quot;">​</a></h3><blockquote><p><strong>問題 (Issue)</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-16681" target="_blank" rel="noreferrer">KT-16681</a></p><p><strong>組件 (Components)</strong>: 核心語言 (Core language)</p><p><strong>不相容變更類型 (Incompatible change type)</strong>: 來源 (Source)</p><p><strong>簡要摘要 (Short summary)</strong>: 自 Kotlin 1.3 起，禁止在其 getter 中重新賦值 <code>val</code> 屬性的支援欄位。</p><p><strong>棄用週期 (Deprecation cycle)</strong>:</p><ul><li>&lt;1.2: Kotlin 編譯器允許在其 getter 中修改 <code>val</code> 的支援欄位。這不僅違反 Kotlin 語義，還會生成行為不端的 JVM 位元組碼，重新賦值 <code>final</code> 欄位。</li><li>1.2.X: 對於重新賦值 <code>val</code> 支援欄位的程式碼會報告棄用警告。</li><li>&gt;=1.3: 棄用警告提升為錯誤。</li></ul></blockquote><h3 id="在-for-迴圈迭代之前捕獲陣列" tabindex="-1">在 for 迴圈迭代之前捕獲陣列 <a class="header-anchor" href="#在-for-迴圈迭代之前捕獲陣列" aria-label="Permalink to &quot;在 for 迴圈迭代之前捕獲陣列&quot;">​</a></h3><blockquote><p><strong>問題 (Issue)</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-21354" target="_blank" rel="noreferrer">KT-21354</a></p><p><strong>組件 (Component)</strong>: Kotlin/JVM</p><p><strong>不相容變更類型 (Incompatible change type)</strong>: 來源 (Source)</p><p><strong>簡要摘要 (Short summary)</strong>: 如果 for 迴圈範圍中的表達式是在迴圈主體中更新的局部變數，此變更會影響迴圈執行。這與迭代其他容器（例如範圍、字元序列和集合）不一致。</p><p><strong>棄用週期 (Deprecation cycle)</strong>:</p><ul><li>&lt;1.2: 描述的程式碼模式編譯正常，但對局部變數的更新會影響迴圈執行。</li><li>1.2.X: 如果 for 迴圈中的範圍表達式是在迴圈主體中賦值的陣列類型局部變數，則會報告棄用警告。</li><li>1.3: 在此類情況下改變行為以與其他容器保持一致。</li></ul></blockquote><h3 id="列舉條目中的巢狀分類器" tabindex="-1">列舉條目中的巢狀分類器 <a class="header-anchor" href="#列舉條目中的巢狀分類器" aria-label="Permalink to &quot;列舉條目中的巢狀分類器&quot;">​</a></h3><blockquote><p><strong>問題 (Issue)</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-16310" target="_blank" rel="noreferrer">KT-16310</a></p><p><strong>組件 (Component)</strong>: 核心語言 (Core language)</p><p><strong>不相容變更類型 (Incompatible change type)</strong>: 來源 (Source)</p><p><strong>簡要摘要 (Short summary)</strong>: 自 Kotlin 1.3 起，禁止在列舉條目中包含巢狀分類器（類別、物件、介面、註解類別、列舉類別）。</p><p><strong>棄用週期 (Deprecation cycle)</strong>:</p><ul><li>&lt;1.2: 列舉條目中的巢狀分類器編譯正常，但在執行時可能會因異常失敗。</li><li>1.2.X: 對於巢狀分類器報告棄用警告。</li><li>&gt;=1.3: 棄用警告提升為錯誤。</li></ul></blockquote><h3 id="資料類別覆寫-copy" tabindex="-1">資料類別覆寫 <code>copy</code> <a class="header-anchor" href="#資料類別覆寫-copy" aria-label="Permalink to &quot;資料類別覆寫 `copy`&quot;">​</a></h3><blockquote><p><strong>問題 (Issue)</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-19618" target="_blank" rel="noreferrer">KT-19618</a></p><p><strong>組件 (Components)</strong>: 核心語言 (Core language)</p><p><strong>不相容變更類型 (Incompatible change type)</strong>: 來源 (Source)</p><p><strong>簡要摘要 (Short summary)</strong>: 自 Kotlin 1.3 起，禁止資料類別覆寫 <code>copy()</code>。</p><p><strong>棄用週期 (Deprecation cycle)</strong>:</p><ul><li>&lt;1.2: 覆寫 <code>copy()</code> 的資料類別編譯正常，但在執行時可能會失敗/暴露奇怪行為。</li><li>1.2.X: 對於覆寫 <code>copy()</code> 的資料類別報告棄用警告。</li><li>&gt;=1.3: 棄用警告提升為錯誤。</li></ul></blockquote><h3 id="繼承-throwable-並從外部類別捕獲泛型參數的內部類別" tabindex="-1">繼承 <code>Throwable</code> 並從外部類別捕獲泛型參數的內部類別 <a class="header-anchor" href="#繼承-throwable-並從外部類別捕獲泛型參數的內部類別" aria-label="Permalink to &quot;繼承 `Throwable` 並從外部類別捕獲泛型參數的內部類別&quot;">​</a></h3><blockquote><p><strong>問題 (Issue)</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-17981" target="_blank" rel="noreferrer">KT-17981</a></p><p><strong>組件 (Component)</strong>: 核心語言 (Core language)</p><p><strong>不相容變更類型 (Incompatible change type)</strong>: 來源 (Source)</p><p><strong>簡要摘要 (Short summary)</strong>: 自 Kotlin 1.3 起，內部類別不允許繼承 <code>Throwable</code>。</p><p><strong>棄用週期 (Deprecation cycle)</strong>:</p><ul><li>&lt;1.2: 繼承 <code>Throwable</code> 的內部類別編譯正常。如果此類內部類別碰巧捕獲泛型參數，可能導致在執行時失敗的奇怪程式碼模式。</li><li>1.2.X: 對於繼承 <code>Throwable</code> 的內部類別報告棄用警告。</li><li>&gt;=1.3: 棄用警告提升為錯誤。</li></ul></blockquote><h3 id="關於包含伴生物件的複雜類別階層的可見性規則" tabindex="-1">關於包含伴生物件的複雜類別階層的可見性規則 <a class="header-anchor" href="#關於包含伴生物件的複雜類別階層的可見性規則" aria-label="Permalink to &quot;關於包含伴生物件的複雜類別階層的可見性規則&quot;">​</a></h3><blockquote><p><strong>問題 (Issues)</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-21515" target="_blank" rel="noreferrer">KT-21515</a>, <a href="https://youtrack.jetbrains.com/issue/KT-25333" target="_blank" rel="noreferrer">KT-25333</a></p><p><strong>組件 (Component)</strong>: 核心語言 (Core language)</p><p><strong>不相容變更類型 (Incompatible change type)</strong>: 來源 (Source)</p><p><strong>簡要摘要 (Short summary)</strong>: 自 Kotlin 1.3 起，對於涉及伴生物件和巢狀分類器的複雜類別階層，短名稱的可見性規則更嚴格。</p><p><strong>棄用週期 (Deprecation cycle)</strong>:</p><ul><li>&lt;1.2: 舊的可見性規則（詳情請見問題說明）。</li><li>1.2.X: 對於將不再可存取的短名稱報告棄用警告。工具建議透過添加完整名稱進行自動遷移。</li><li>&gt;=1.3: 棄用警告提升為錯誤。有問題的程式碼應添加完整限定符或顯式導入。</li></ul></blockquote><h3 id="非常數變長引數註解參數" tabindex="-1">非常數變長引數註解參數 <a class="header-anchor" href="#非常數變長引數註解參數" aria-label="Permalink to &quot;非常數變長引數註解參數&quot;">​</a></h3><blockquote><p><strong>問題 (Issue)</strong>: <a href="https://youtrack.com/issue/KT-23153" target="_blank" rel="noreferrer">KT-23153</a></p><p><strong>組件 (Component)</strong>: 核心語言 (Core language)</p><p><strong>不相容變更類型 (Incompatible change type)</strong>: 來源 (Source)</p><p><strong>簡要摘要 (Short summary)</strong>: 自 Kotlin 1.3 起，禁止設定非常數值作為變長引數註解參數。</p><p><strong>棄用週期 (Deprecation cycle)</strong>:</p><ul><li>&lt;1.2: 編譯器允許為變長引數註解參數傳遞非常數值，但實際上在位元組碼生成過程中會丟棄該值，導致不明顯的行為。</li><li>1.2.X: 對於此類程式碼模式報告棄用警告。</li><li>&gt;=1.3: 棄用警告提升為錯誤。</li></ul></blockquote><h3 id="局部註解類別" tabindex="-1">局部註解類別 <a class="header-anchor" href="#局部註解類別" aria-label="Permalink to &quot;局部註解類別&quot;">​</a></h3><blockquote><p><strong>問題 (Issue)</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-23277" target="_blank" rel="noreferrer">KT-23277</a></p><p><strong>組件 (Component)</strong>: 核心語言 (Core language)</p><p><strong>不相容變更類型 (Incompatible change type)</strong>: 來源 (Source)</p><p><strong>簡要摘要 (Short summary)</strong>: 自 Kotlin 1.3 起，不支援局部註解類別。</p><p><strong>棄用週期 (Deprecation cycle)</strong>:</p><ul><li>&lt;1.2: 編譯器正常編譯局部註解類別。</li><li>1.2.X: 對於局部註解類別報告棄用警告。</li><li>&gt;=1.3: 棄用警告提升為錯誤。</li></ul></blockquote><h3 id="對局部委託屬性的智能轉換" tabindex="-1">對局部委託屬性的智能轉換 <a class="header-anchor" href="#對局部委託屬性的智能轉換" aria-label="Permalink to &quot;對局部委託屬性的智能轉換&quot;">​</a></h3><blockquote><p><strong>問題 (Issue)</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-22517" target="_blank" rel="noreferrer">KT-22517</a></p><p><strong>組件 (Component)</strong>: 核心語言 (Core language)</p><p><strong>不相容變更類型 (Incompatible change type)</strong>: 來源 (Source)</p><p><strong>簡要摘要 (Short summary)</strong>: 自 Kotlin 1.3 起，不允許對局部委託屬性進行智能轉換。</p><p><strong>棄用週期 (Deprecation cycle)</strong>:</p><ul><li>&lt;1.2: 編譯器允許對局部委託屬性進行智能轉換，這在行為不端的委託情況下可能導致不健全的智能轉換。</li><li>1.2.X: 對於局部委託屬性的智能轉換會報告為棄用（編譯器發出警告）。</li><li>&gt;=1.3: 棄用警告提升為錯誤。</li></ul></blockquote><h3 id="mod-運算子慣例" tabindex="-1"><code>mod</code> 運算子慣例 <a class="header-anchor" href="#mod-運算子慣例" aria-label="Permalink to &quot;`mod` 運算子慣例&quot;">​</a></h3><blockquote><p><strong>問題 (Issues)</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-24197" target="_blank" rel="noreferrer">KT-24197</a></p><p><strong>組件 (Component)</strong>: 核心語言 (Core language)</p><p><strong>不相容變更類型 (Incompatible change type)</strong>: 來源 (Source)</p><p><strong>簡要摘要 (Short summary)</strong>: 自 Kotlin 1.3 起，禁止聲明 <code>mod</code> 運算子，以及解析為此類聲明的呼叫。</p><p><strong>棄用週期 (Deprecation cycle)</strong>:</p><ul><li>1.1.X, 1.2.X: 對於 <code>operator mod</code> 的聲明以及解析為它的呼叫報告警告。</li><li>1.3.X: 將警告提升為錯誤，但仍允許解析為 <code>operator mod</code> 聲明。</li><li>1.4.X: 不再解析對 <code>operator mod</code> 的呼叫。</li></ul></blockquote><h3 id="以命名形式將單一元素傳遞給變長引數" tabindex="-1">以命名形式將單一元素傳遞給變長引數 <a class="header-anchor" href="#以命名形式將單一元素傳遞給變長引數" aria-label="Permalink to &quot;以命名形式將單一元素傳遞給變長引數&quot;">​</a></h3><blockquote><p><strong>問題 (Issues)</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-20588" target="_blank" rel="noreferrer">KT-20588</a>, <a href="https://youtrack.jetbrains.com/issue/KT-20589" target="_blank" rel="noreferrer">KT-20589</a>。另見 <a href="https://youtrack.jetbrains.com/issue/KT-20171" target="_blank" rel="noreferrer">KT-20171</a></p><p><strong>組件 (Component)</strong>: 核心語言 (Core language)</p><p><strong>不相容變更類型 (Incompatible change type)</strong>: 來源 (Source)</p><p><strong>簡要摘要 (Short summary)</strong>: 在 Kotlin 1.3 中，將單一元素賦值給變長引數已被棄用，應替換為連續的展開和陣列建構。</p><p><strong>棄用週期 (Deprecation cycle)</strong>:</p><ul><li>&lt;1.2: 以命名形式將一個值元素賦值給變長引數編譯正常，並被視為將<em>單一</em>元素賦值給陣列，這在將陣列賦值給變長引數時導致不明顯的行為。</li><li>1.2.X: 對於此類賦值報告棄用警告，建議使用者切換到連續的展開和陣列建構。</li><li>1.3.X: 警告提升為錯誤。</li><li>&gt;= 1.4: 改變將單一元素賦值給變長引數的語義，使陣列的賦值等同於陣列展開的賦值。</li></ul></blockquote><h3 id="目標為-expression-的註解的保留" tabindex="-1">目標為 <code>EXPRESSION</code> 的註解的保留 <a class="header-anchor" href="#目標為-expression-的註解的保留" aria-label="Permalink to &quot;目標為 `EXPRESSION` 的註解的保留&quot;">​</a></h3><blockquote><p><strong>問題 (Issue)</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-13762" target="_blank" rel="noreferrer">KT-13762</a></p><p><strong>組件 (Component)</strong>: 核心語言 (Core language)</p><p><strong>不相容變更類型 (Incompatible change type)</strong>: 來源 (Source)</p><p><strong>簡要摘要 (Short summary)</strong>: 自 Kotlin 1.3 起，對於目標為 <code>EXPRESSION</code> 的註解，只允許 <code>SOURCE</code> 保留。</p><p><strong>棄用週期 (Deprecation cycle)</strong>:</p><ul><li>&lt;1.2: 目標為 <code>EXPRESSION</code> 且保留非 <code>SOURCE</code> 的註解被允許，但在使用時靜默忽略。</li><li>1.2.X: 對於此類註解的聲明報告棄用警告。</li><li>&gt;=1.3: 警告提升為錯誤。</li></ul></blockquote><h3 id="目標為-parameter-的註解不應適用於參數類型" tabindex="-1">目標為 <code>PARAMETER</code> 的註解不應適用於參數類型 <a class="header-anchor" href="#目標為-parameter-的註解不應適用於參數類型" aria-label="Permalink to &quot;目標為 `PARAMETER` 的註解不應適用於參數類型&quot;">​</a></h3><blockquote><p><strong>問題 (Issue)</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-9580" target="_blank" rel="noreferrer">KT-9580</a></p><p><strong>組件 (Component)</strong>: 核心語言 (Core language)</p><p><strong>不相容變更類型 (Incompatible change type)</strong>: 來源 (Source)</p><p><strong>簡要摘要 (Short summary)</strong>: 自 Kotlin 1.3 起，當目標為 <code>PARAMETER</code> 的註解套用至參數類型時，關於錯誤註解目標的錯誤將被正確報告。</p><p><strong>棄用週期 (Deprecation cycle)</strong>:</p><ul><li>&lt;1.2: 前述程式碼模式編譯正常；註解被靜默忽略且不存在於位元組碼中。</li><li>1.2.X: 對於此類用法報告棄用警告。</li><li>&gt;=1.3: 警告提升為錯誤。</li></ul></blockquote><h3 id="array-copyofrange-在索引超出範圍時拋出異常-而不是擴大返回的陣列" tabindex="-1"><code>Array.copyOfRange</code> 在索引超出範圍時拋出異常，而不是擴大返回的陣列 <a class="header-anchor" href="#array-copyofrange-在索引超出範圍時拋出異常-而不是擴大返回的陣列" aria-label="Permalink to &quot;`Array.copyOfRange` 在索引超出範圍時拋出異常，而不是擴大返回的陣列&quot;">​</a></h3><blockquote><p><strong>問題 (Issue)</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-19489" target="_blank" rel="noreferrer">KT-19489</a></p><p><strong>組件 (Component)</strong>: kotlin-stdlib (JVM)</p><p><strong>不相容變更類型 (Incompatible change type)</strong>: 行為 (Behavioral)</p><p><strong>簡要摘要 (Short summary)</strong>: 自 Kotlin 1.3 起，確保 <code>Array.copyOfRange</code> 的 <code>toIndex</code> 引數（代表複製範圍的獨佔結束）不大於陣列大小，如果大於則拋出 <code>IllegalArgumentException</code>。</p><p><strong>棄用週期 (Deprecation cycle)</strong>:</p><ul><li>&lt;1.3: 在呼叫 <code>Array.copyOfRange</code> 時，如果 <code>toIndex</code> 大於陣列大小，範圍中缺失的元素將填充 <code>null</code>，這違反了 Kotlin 類型系統的健全性。</li><li>&gt;=1.3: 檢查 <code>toIndex</code> 是否在陣列邊界內，如果不在則拋出異常。</li></ul></blockquote><h3 id="步長為-int-min-value-和-long-min-value-的-int-和-long-進程被禁止且不允許被實例化" tabindex="-1">步長為 <code>Int.MIN_VALUE</code> 和 <code>Long.MIN_VALUE</code> 的 <code>Int</code> 和 <code>Long</code> 進程被禁止且不允許被實例化 <a class="header-anchor" href="#步長為-int-min-value-和-long-min-value-的-int-和-long-進程被禁止且不允許被實例化" aria-label="Permalink to &quot;步長為 `Int.MIN_VALUE` 和 `Long.MIN_VALUE` 的 `Int` 和 `Long` 進程被禁止且不允許被實例化&quot;">​</a></h3><blockquote><p><strong>問題 (Issue)</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-17176" target="_blank" rel="noreferrer">KT-17176</a></p><p><strong>組件 (Component)</strong>: kotlin-stdlib (JVM)</p><p><strong>不相容變更類型 (Incompatible change type)</strong>: 行為 (Behavioral)</p><p><strong>簡要摘要 (Short summary)</strong>: 自 Kotlin 1.3 起，禁止整數進程的步長值為其整數類型（<code>Long</code> 或 <code>Int</code>）的最小負值，因此呼叫 <code>IntProgression.fromClosedRange(0, 1, step = Int.MIN_VALUE)</code> 將拋出 <code>IllegalArgumentException</code>。</p><p><strong>棄用週期 (Deprecation cycle)</strong>:</p><ul><li>&lt;1.3: 可以創建一個步長為 <code>Int.MIN_VALUE</code> 的 <code>IntProgression</code>，這會產生兩個值 <code>[0, -2147483648]</code>，這是一個不明顯的行為。</li><li>&gt;=1.3: 如果步長是其整數類型的最小負值，則拋出 <code>IllegalArgumentException</code>。</li></ul></blockquote><h3 id="檢查超長序列操作中的索引溢位" tabindex="-1">檢查超長序列操作中的索引溢位 <a class="header-anchor" href="#檢查超長序列操作中的索引溢位" aria-label="Permalink to &quot;檢查超長序列操作中的索引溢位&quot;">​</a></h3><blockquote><p><strong>問題 (Issue)</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-16097" target="_blank" rel="noreferrer">KT-16097</a></p><p><strong>組件 (Component)</strong>: kotlin-stdlib (JVM)</p><p><strong>不相容變更類型 (Incompatible change type)</strong>: 行為 (Behavioral)</p><p><strong>簡要摘要 (Short summary)</strong>: 自 Kotlin 1.3 起，確保 <code>index</code>、<code>count</code> 和類似方法不會在長序列中溢位。受影響方法的完整列表請參見問題說明。</p><p><strong>棄用週期 (Deprecation cycle)</strong>:</p><ul><li>&lt;1.3: 在超長序列上呼叫此類方法可能由於整數溢位而產生負結果。</li><li>&gt;=1.3: 在此類方法中檢測溢位並立即拋出異常。</li></ul></blockquote><h3 id="統一跨平台空匹配正則表達式的-split-結果" tabindex="-1">統一跨平台空匹配正則表達式的 <code>split</code> 結果 <a class="header-anchor" href="#統一跨平台空匹配正則表達式的-split-結果" aria-label="Permalink to &quot;統一跨平台空匹配正則表達式的 `split` 結果&quot;">​</a></h3><blockquote><p><strong>問題 (Issue)</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-21049" target="_blank" rel="noreferrer">KT-21049</a></p><p><strong>組件 (Component)</strong>: kotlin-stdlib (JVM)</p><p><strong>不相容變更類型 (Incompatible change type)</strong>: 行為 (Behavioral)</p><p><strong>簡要摘要 (Short summary)</strong>: 自 Kotlin 1.3 起，統一 <code>split</code> 方法透過空匹配正則表達式在所有平台上的行為。</p><p><strong>棄用週期 (Deprecation cycle)</strong>:</p><ul><li>&lt;1.3: 描述的呼叫行為在比較 JS、JRE 6、JRE 7 與 JRE 8+ 時不同。</li><li>&gt;=1.3: 統一跨平台行為。</li></ul></blockquote><h3 id="編譯器發行版中已停用的棄用產物" tabindex="-1">編譯器發行版中已停用的棄用產物 <a class="header-anchor" href="#編譯器發行版中已停用的棄用產物" aria-label="Permalink to &quot;編譯器發行版中已停用的棄用產物&quot;">​</a></h3><blockquote><p><strong>問題 (Issue)</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-23799" target="_blank" rel="noreferrer">KT-23799</a></p><p><strong>組件 (Component)</strong>: 其他 (other)</p><p><strong>不相容變更類型 (Incompatible change type)</strong>: 二進制 (Binary)</p><p><strong>簡要摘要 (Short summary)</strong>: Kotlin 1.3 停用以下已棄用的二進制產物：</p><ul><li><code>kotlin-runtime</code>: 改用 <code>kotlin-stdlib</code></li><li><code>kotlin-stdlib-jre7/8</code>: 改用 <code>kotlin-stdlib-jdk7/8</code></li><li>編譯器發行版中的 <code>kotlin-jslib</code>: 改用 <code>kotlin-stdlib-js</code></li></ul><p><strong>棄用週期 (Deprecation cycle)</strong>:</p><ul><li>1.2.X: 產物被標記為已棄用，編譯器在使用這些產物時報告警告。</li><li>&gt;=1.3: 產物已停用。</li></ul></blockquote><h3 id="標準庫中的註解" tabindex="-1">標準庫中的註解 <a class="header-anchor" href="#標準庫中的註解" aria-label="Permalink to &quot;標準庫中的註解&quot;">​</a></h3><blockquote><p><strong>問題 (Issue)</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-21784" target="_blank" rel="noreferrer">KT-21784</a></p><p><strong>組件 (Component)</strong>: kotlin-stdlib (JVM)</p><p><strong>不相容變更類型 (Incompatible change type)</strong>: 二進制 (Binary)</p><p><strong>簡要摘要 (Short summary)</strong>: Kotlin 1.3 從標準庫中移除 <code>org.jetbrains.annotations</code> 套件中的註解，並將它們移動到隨編譯器發行的獨立產物：<code>annotations-13.0.jar</code> 和 <code>mutability-annotations-compat.jar</code>。</p><p><strong>棄用週期 (Deprecation cycle)</strong>:</p><ul><li>&lt;1.3: 註解隨標準庫產物一起發行。</li><li>&gt;=1.3: 註解在獨立產物中發行。</li></ul></blockquote>',56)]))}const d=e(a,[["render",l]]);export{h as __pageData,d as default};
