import{_ as i,c as a,o as e,ag as l}from"./chunks/framework.Bksy39di.js";const c=JSON.parse('{"title":"インクリメンタル処理","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/ksp-incremental.md","filePath":"ja/kotlin/ksp-incremental.md","lastUpdated":1754307826000}'),t={name:"ja/kotlin/ksp-incremental.md"};function n(p,s,h,k,o,d){return e(),a("div",null,s[0]||(s[0]=[l(`<h1 id="インクリメンタル処理" tabindex="-1">インクリメンタル処理 <a class="header-anchor" href="#インクリメンタル処理" aria-label="Permalink to &quot;インクリメンタル処理&quot;">​</a></h1><p>インクリメンタル処理は、可能な限りソースの再処理を避ける処理手法です。 インクリメンタル処理の主な目的は、典型的な変更・コンパイル・テストのサイクルのターンアラウンドタイムを短縮することです。 一般的な情報については、Wikipediaの<a href="https://en.wikipedia.org/wiki/Incremental_computing" target="_blank" rel="noreferrer">インクリメンタル・コンピューティング</a>に関する記事を参照してください。</p><p>どのソースが <em>ダーティ</em> (再処理が必要なもの) であるかを判断するため、KSPはプロセッサーの助けを借りて、どの入力ソースがどの生成された出力に対応するかを特定する必要があります。しばしば煩雑でエラーが発生しやすいこのプロセスを助けるため、KSPはプロセッサーがコード構造をナビゲートするための開始点として使用する、最小限の <em>ルートソース</em> のみを必要とするように設計されています。言い換えれば、<code>KSNode</code> が以下のいずれかから取得された場合、プロセッサーは出力を対応する <code>KSNode</code> のソースと関連付ける必要があります。</p><ul><li><code>Resolver.getAllFiles</code></li><li><code>Resolver.getSymbolsWithAnnotation</code></li><li><code>Resolver.getClassDeclarationByName</code></li><li><code>Resolver.getDeclarationsFromPackage</code></li></ul><p>インクリメンタル処理は現在、デフォルトで有効になっています。無効にするには、Gradleプロパティ <code>ksp.incremental=false</code> を設定します。 依存関係と出力に基づいてダーティセットをダンプするログを有効にするには、<code>ksp.incremental.log=true</code> を使用します。 これらのログファイルは、<code>build</code> 出力ディレクトリに <code>.log</code> 拡張子で格納されています。</p><p>JVM上では、クラスパスの変更、およびKotlinとJavaのソース変更は、デフォルトで追跡されます。 KotlinとJavaのソース変更のみを追跡するには、<code>ksp.incremental.intermodule=false</code> Gradleプロパティを設定してクラスパスの追跡を無効にします。</p><h2 id="アグリゲーティングとアイソレーティング" tabindex="-1">アグリゲーティングとアイソレーティング <a class="header-anchor" href="#アグリゲーティングとアイソレーティング" aria-label="Permalink to &quot;アグリゲーティングとアイソレーティング&quot;">​</a></h2><p><a href="https://docs.gradle.org/current/userguide/java_plugin.html#sec:incremental_annotation_processing" target="_blank" rel="noreferrer">Gradleアノテーション処理</a>の概念と同様に、KSPは <em>アグリゲーティング</em> モードと <em>アイソレーティング</em> モードの両方をサポートしています。Gradleアノテーション処理とは異なり、KSPはプロセッサー全体ではなく、各出力をアグリゲーティングまたはアイソレーティングのいずれかに分類する点に注意してください。</p><p>アグリゲーティング出力は、他のファイルに影響を与えないファイルの削除を除く、あらゆる入力変更の影響を潜在的に受ける可能性があります。これは、入力の変更によってすべてのアグリゲーティング出力が再ビルドされることを意味し、ひいては、対応するすべての登録済み、新規、および変更されたソースファイルの再処理を意味します。</p><p>例として、特定の<code>アノテーション</code>を持つすべての<code>シンボル</code>を収集する出力は、<code>アグリゲーティング出力</code>と見なされます。</p><p>アイソレーティング出力は、指定されたソースのみに依存します。他のソースへの変更は、アイソレーティング出力に影響を与えません。 Gradleアノテーション処理とは異なり、指定された出力に対して複数のソースファイルを定義できる点に注意してください。</p><p>例として、実装するインターフェース専用に生成されたクラスは、アイソレーティングと見なされます。</p><p>要約すると、出力が新規または変更されたソースに依存する可能性がある場合、それはアグリゲーティングと見なされます。 そうでない場合、出力はアイソレーティングです。</p><p>Javaアノテーション処理に精通している読者向けのまとめです:</p><ul><li>アイソレーティングなJavaアノテーションプロセッサーでは、すべての出力がKSPではアイソレーティングです。</li><li>アグリゲーティングなJavaアノテーションプロセッサーでは、KSPでは一部の出力がアイソレーティング、一部がアグリゲーティングになりえます。</li></ul><h3 id="実装方法" tabindex="-1">実装方法 <a class="header-anchor" href="#実装方法" aria-label="Permalink to &quot;実装方法&quot;">​</a></h3><p>依存関係は、アノテーションではなく、入力ファイルと出力ファイルの関連付けによって計算されます。 これは多対多の関係です。</p><p>入出力の関連付けによるダーティネス伝播ルールは次のとおりです:</p><ol><li>入力ファイルが変更された場合、それは常に再処理されます。</li><li>入力ファイルが変更され、それが特定の出力に関連付けられている場合、同じ出力に関連付けられている他のすべての入力ファイルも再処理されます。これは推移的であり、新しいダーティファイルがなくなるまで無効化が繰り返し発生します。</li><li>1つ以上のアグリゲーティング出力に関連付けられているすべての入力ファイルは再処理されます。 言い換えれば、入力ファイルがいずれのアグリゲーティング出力にも関連付けられていない場合、それは再処理されません（上記の1.または2.に該当する場合を除く）。</li></ol><p>理由は次のとおりです:</p><ol><li>入力が変更された場合、新しい情報が導入される可能性があるため、プロセッサーはその入力で再度実行する必要があります。</li><li>出力は一連の入力から生成されます。プロセッサーは出力を再生成するためにすべての入力を必要とする場合があります。</li><li><code>aggregating=true</code> は、出力が新しい情報（新規ファイルまたは変更された既存ファイルから来る可能性がある）に潜在的に依存する可能性があることを意味します。</li><li><code>aggregating=false</code> は、プロセッサーが情報が特定の入力ファイルからのみ来るものであり、他のファイルや新規ファイルからは決して来ないことを確信していることを意味します。</li></ol><h2 id="例1" tabindex="-1">例1 <a class="header-anchor" href="#例1" aria-label="Permalink to &quot;例1&quot;">​</a></h2><p>プロセッサーは、<code>A.kt</code>のクラス<code>A</code>と<code>B.kt</code>のクラス<code>B</code>を読み取った後、<code>outputForA</code>を生成します。ここで、<code>A</code>は<code>B</code>を継承しています。 プロセッサーは<code>Resolver.getSymbolsWithAnnotation</code>で<code>A</code>を取得し、その後<code>A</code>から<code>KSClassDeclaration.superTypes</code>で<code>B</code>を取得しました。 <code>B</code>の包含は<code>A</code>によるものであるため、<code>outputForA</code>の<code>dependencies</code>に<code>B.kt</code>を指定する必要はありません。 この場合でも<code>B.kt</code>を指定することは可能ですが、それは不要です。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// A.kt</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Interesting</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">B</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// B.kt</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">open</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> B</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Example1Processor.kt</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Example1Processor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SymbolProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> process</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(resolver: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Resolver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> declA </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> resolver.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getSymbolsWithAnnotation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Interesting&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">first</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> KSClassDeclaration</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> declB </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> declA.superTypes.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">first</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().declaration</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // B.kt はKSPによって依存関係として推論できるため、必要ありません。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dependencies </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(aggregating </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, declA.containingFile</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // outputForA.kt</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> outputName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;outputFor\${declA.simpleName.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">asString</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">()}&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // outputForA は A.kt と B.kt に依存します。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> output </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> codeGenerator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createNewFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dependencies, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;com.example&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, outputName, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;kt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        output.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;// </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$declA</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> : </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$declB</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toByteArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        output.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="例2" tabindex="-1">例2 <a class="header-anchor" href="#例2" aria-label="Permalink to &quot;例2&quot;">​</a></h2><p>プロセッサーが<code>sourceA</code>を読み取った後に<code>outputA</code>を生成し、<code>sourceB</code>を読み取った後に<code>outputB</code>を生成すると考えます。</p><p><code>sourceA</code>が変更された場合:</p><ul><li><code>outputB</code>がアグリゲーティングの場合、<code>sourceA</code>と<code>sourceB</code>の両方が再処理されます。</li><li><code>outputB</code>がアイソレーティングの場合、<code>sourceA</code>のみが再処理されます。</li></ul><p><code>sourceC</code>が追加された場合:</p><ul><li><code>outputB</code>がアグリゲーティングの場合、<code>sourceC</code>と<code>sourceB</code>の両方が再処理されます。</li><li><code>outputB</code>がアイソレーティングの場合、<code>sourceC</code>のみが再処理されます。</li></ul><p><code>sourceA</code>が削除された場合、何も再処理する必要はありません。</p><p><code>sourceB</code>が削除された場合、何も再処理する必要はありません。</p><h2 id="ファイルのダーティネスはどのように決定されるか" tabindex="-1">ファイルのダーティネスはどのように決定されるか <a class="header-anchor" href="#ファイルのダーティネスはどのように決定されるか" aria-label="Permalink to &quot;ファイルのダーティネスはどのように決定されるか&quot;">​</a></h2><p>ダーティファイルは、ユーザーによって直接 <em>変更</em> されたか、他のダーティファイルによって間接的に <em>影響</em> を受けたかのいずれかです。KSPはダーティネスを2つのステップで伝播させます:</p><ul><li><em>解決追跡</em> による伝播: 型参照（暗黙的または明示的）を解決することが、あるファイルから別のファイルへ移動する唯一の方法です。プロセッサーによって型参照が解決されたとき、解決結果に潜在的に影響を与える可能性のある変更を含む変更済みまたは影響を受けたファイルは、その参照を含むファイルに影響を与えます。</li><li><em>入出力対応</em> による伝播: ソースファイルが変更または影響を受けた場合、そのファイルと共通の出力を持つ他のすべてのソースファイルが影響を受けます。</li></ul><p>これらはいずれも推移的であり、2番目のもの（入出力対応）は同値類を形成することに注意してください。</p><h2 id="バグの報告" tabindex="-1">バグの報告 <a class="header-anchor" href="#バグの報告" aria-label="Permalink to &quot;バグの報告&quot;">​</a></h2><p>バグを報告するには、Gradleプロパティ<code>ksp.incremental=true</code>と<code>ksp.incremental.log=true</code>を設定し、クリーンビルドを実行してください。 このビルドにより、以下の2つのログファイルが生成されます。</p><ul><li><code>build/kspCaches/&lt;source set&gt;/logs/kspDirtySet.log</code></li><li><code>build/kspCaches/&lt;source set&gt;/logs/kspSourceToOutputs.log</code></li></ul><p>その後、連続するインクリメンタルビルドを実行すると、さらに2つのログファイルが生成されます。</p><ul><li><code>build/kspCaches/&lt;source set&gt;/logs/kspDirtySetByDeps.log</code></li><li><code>build/kspCaches/&lt;source set&gt;/logs/kspDirtySetByOutputs.log</code></li></ul><p>これらのログには、ソースと出力のファイル名、およびビルドのタイムスタンプが含まれています。</p>`,42)]))}const E=i(t,[["render",n]]);export{c as __pageData,E as default};
