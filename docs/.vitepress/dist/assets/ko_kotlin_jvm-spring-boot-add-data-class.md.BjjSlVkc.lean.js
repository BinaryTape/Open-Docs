import{_ as g}from"./chunks/icon-1-done.ZX9lW-aj.js";import{_ as E}from"./chunks/icon-2.DCnUydpf.js";import{_ as u}from"./chunks/icon-3-todo.Gx4op1du.js";import{_ as c}from"./chunks/icon-4-todo.GaeEmerm.js";import{_ as y}from"./chunks/messages-in-json-format.6v4MkOOj.js";import{_ as F,C as t,c as m,o as C,j as s,G as n,ag as e,a as i,w as l}from"./chunks/framework.Bksy39di.js";const N=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kotlin/jvm-spring-boot-add-data-class.md","filePath":"ko/kotlin/jvm-spring-boot-add-data-class.md","lastUpdated":1755514048000}'),b={name:"ko/kotlin/jvm-spring-boot-add-data-class.md"};function B(f,a,A,v,D,M){const r=t("web-summary"),d=t("tldr"),p=t("def"),k=t("list"),h=t("code-block"),o=t("deflist");return C(),m("div",null,[a[20]||(a[20]=s("h1",{id:"spring-boot-프로젝트에-데이터-클래스-추가하기",tabindex:"-1"},[i("Spring Boot 프로젝트에 데이터 클래스 추가하기 "),s("a",{class:"header-anchor",href:"#spring-boot-프로젝트에-데이터-클래스-추가하기","aria-label":'Permalink to "Spring Boot 프로젝트에 데이터 클래스 추가하기"'},"​")],-1)),n(r,null,{default:l(()=>a[0]||(a[0]=[i("Spring Boot 프로젝트에 Kotlin 데이터 클래스를 추가합니다.")])),_:1}),n(d,null,{default:l(()=>a[1]||(a[1]=[s("p",null,[i("이 문서는 "),s("strong",null,"Spring Boot 및 Kotlin 시작하기"),i(" 튜토리얼의 두 번째 부분입니다. 계속 진행하기 전에 이전 단계를 완료했는지 확인하세요:")],-1),s("br",null,null,-1),s("p",null,[s("img",{src:g,width:"20",alt:"First step"}),i(),s("a",{href:"/ko/kotlin/jvm-create-project-with-spring-boot"},"Kotlin으로 Spring Boot 프로젝트 생성하기"),s("br"),s("img",{src:E,width:"20",alt:"Second step"}),i(),s("strong",null,"Spring Boot 프로젝트에 데이터 클래스 추가하기"),s("br"),s("img",{src:u,width:"20",alt:"Third step"}),i(" Spring Boot 프로젝트에 데이터베이스 지원 추가하기"),s("br"),s("img",{src:c,width:"20",alt:"Fourth step"}),i(" 데이터베이스 접근을 위해 Spring Data CrudRepository 사용하기")],-1)])),_:1}),a[21]||(a[21]=s("p",null,[i("이 튜토리얼 부분에서는 애플리케이션에 몇 가지 기능을 더 추가하고 데이터 클래스와 같은 Kotlin 언어 기능을 더 살펴볼 것입니다. 이를 위해 "),s("code",null,"MessageController"),i(" 클래스를 직렬화된 객체 컬렉션을 포함하는 JSON 문서로 응답하도록 변경해야 합니다.")],-1)),a[22]||(a[22]=s("h2",{id:"애플리케이션-업데이트",tabindex:"-1"},[i("애플리케이션 업데이트 "),s("a",{class:"header-anchor",href:"#애플리케이션-업데이트","aria-label":'Permalink to "애플리케이션 업데이트"'},"​")],-1)),s("ol",null,[a[19]||(a[19]=s("li",null,[s("p",null,[s("code",null,"DemoApplication.kt"),i(" 파일과 같은 패키지에 "),s("code",null,"Message.kt"),i(" 파일을 생성합니다.")])],-1)),s("li",null,[a[9]||(a[9]=e("",3)),n(o,{collapsible:"true"},{default:l(()=>[n(p,{title:"데이터 클래스 – data class Message"},{default:l(()=>a[2]||(a[2]=[s("p",null,[i("Kotlin의 "),s("a",{href:"/ko/kotlin/data-classes"},"데이터 클래스"),i("의 주요 목적은 데이터를 저장하는 것입니다. 이러한 클래스는 "),s("code",null,"data"),i(" 키워드로 표시되며, 일부 표준 기능과 유틸리티 함수는 클래스 구조로부터 기계적으로 파생될 수 있습니다.")],-1),s("p",null,[i("이 예시에서는 "),s("code",null,"Message"),i(" 클래스의 주요 목적이 데이터를 저장하는 것이므로 데이터 클래스로 선언했습니다.")],-1)])),_:1}),n(p,{title:"val 및 var 프로퍼티"},{default:l(()=>[a[4]||(a[4]=s("p",null,[i("Kotlin 클래스의 "),s("a",{href:"/ko/kotlin/properties"},"프로퍼티"),i("는 다음과 같이 선언할 수 있습니다:")],-1)),n(k,null,{default:l(()=>a[3]||(a[3]=[s("li",null,[s("i",null,"가변(mutable)"),i(", "),s("code",null,"var"),i(" 키워드를 사용합니다")],-1),s("li",null,[s("i",null,"읽기 전용(read-only)"),i(", "),s("code",null,"val"),i(" 키워드를 사용합니다")],-1)])),_:1}),a[5]||(a[5]=s("p",null,[s("code",null,"Message"),i(" 클래스는 "),s("code",null,"val"),i(" 키워드를 사용하여 "),s("code",null,"id"),i("와 "),s("code",null,"text"),i(" 두 개의 프로퍼티를 선언합니다. 컴파일러는 이 두 프로퍼티에 대한 게터(getter)를 자동으로 생성합니다. "),s("code",null,"Message"),i(" 클래스의 인스턴스가 생성된 후에는 이 프로퍼티들의 값을 다시 할당하는 것이 불가능합니다. ")],-1))]),_:1}),n(p,{title:"널러블 타입 – String?"},{default:l(()=>[a[7]||(a[7]=s("p",null,[i("Kotlin은 "),s("a",{href:"/ko/kotlin/null-safety#nullable-types-and-non-nullable-types"},"널러블 타입에 대한 내장 지원"),i("을 제공합니다. Kotlin에서 타입 시스템은 "),s("code",null,"null"),i("을 가질 수 있는 참조("),s("i",null,"널러블 참조"),i(")와 가질 수 없는 참조("),s("i",null,"논널러블 참조"),i(")를 구별합니다."),s("br"),i(" 예를 들어, "),s("code",null,"String"),i(" 타입의 일반 변수는 "),s("code",null,"null"),i("을 가질 수 없습니다. null을 허용하려면 "),s("code",null,"String?"),i("로 작성하여 변수를 널러블 문자열로 선언할 수 있습니다. ")],-1)),a[8]||(a[8]=s("p",null,[s("code",null,"Message"),i(" 클래스의 "),s("code",null,"id"),i(" 프로퍼티는 이번에는 널러블 타입으로 선언되었습니다. 따라서 "),s("code",null,"id"),i(" 값으로 "),s("code",null,"null"),i("을 전달하여 "),s("code",null,"Message"),i(" 클래스의 인스턴스를 생성하는 것이 가능합니다:")],-1)),n(h,{lang:"kotlin"},{default:l(()=>a[6]||(a[6]=[i(' Message(null, "Hello!") ')])),_:1})]),_:1})]),_:1})]),s("li",null,[a[18]||(a[18]=e("",2)),n(o,{collapsible:"true"},{default:l(()=>[n(p,{title:"컬렉션 – listOf()"},{default:l(()=>[a[11]||(a[11]=s("p",null,[i("Kotlin 표준 라이브러리는 기본 컬렉션 타입인 세트, 리스트, 맵에 대한 구현을 제공합니다."),s("br"),i(" 각 컬렉션 타입은 "),s("i",null,"읽기 전용"),i(" 또는 "),s("i",null,"가변"),i("일 수 있습니다:")],-1)),n(k,null,{default:l(()=>a[10]||(a[10]=[s("li",null,[s("i",null,"읽기 전용"),i(" 컬렉션은 컬렉션 요소에 접근하기 위한 연산을 제공합니다.")],-1),s("li",null,[s("i",null,"가변"),i(" 컬렉션은 요소를 추가, 제거 및 업데이트하는 쓰기 연산도 제공합니다.")],-1)])),_:1}),a[12]||(a[12]=s("p",null,"Kotlin 표준 라이브러리에서 이러한 컬렉션의 인스턴스를 생성하기 위한 해당 팩토리 함수도 제공합니다. ",-1)),a[13]||(a[13]=s("p",null,[i("이 튜토리얼에서는 "),s("a",{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/list-of.html"},[s("code",null,"listOf()")]),i(" 함수를 사용하여 "),s("code",null,"Message"),i(" 객체 목록을 생성합니다. 이것은 읽기 전용 객체 목록을 생성하는 팩토리 함수입니다. 목록에서 요소를 추가하거나 제거할 수 없습니다."),s("br"),i(" 목록에 쓰기 연산을 수행해야 하는 경우, "),s("a",{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/mutable-list-of.html"},[s("code",null,"mutableListOf()")]),i(" 함수를 호출하여 가변 리스트 인스턴스를 생성하세요. ")],-1))]),_:1}),n(p,{title:"후행 쉼표"},{default:l(()=>[a[15]||(a[15]=s("p",null,[s("a",{href:"/ko/kotlin/coding-conventions#trailing-commas"},"후행 쉼표"),i("는 일련의 요소 중 "),s("b",null,"마지막 항목"),i(" 뒤에 오는 쉼표 기호입니다:")],-1)),n(h,{lang:"kotlin"},{default:l(()=>a[14]||(a[14]=[i(' Message("3", "Privet!"), ')])),_:1}),a[16]||(a[16]=s("p",null,"이는 Kotlin 구문의 편리한 기능이며 완전히 선택 사항입니다. 이것이 없어도 코드는 여전히 작동합니다. ",-1)),a[17]||(a[17]=s("p",null,[i("위 예시에서 "),s("code",null,"Message"),i(" 객체 목록을 생성하는 부분에는 마지막 "),s("code",null,"listOf()"),i(" 함수 인수 뒤에 후행 쉼표가 포함되어 있습니다.")],-1))]),_:1})]),_:1})])]),a[23]||(a[23]=e("",12))])}const P=F(b,[["render",B]]);export{N as __pageData,P as default};
