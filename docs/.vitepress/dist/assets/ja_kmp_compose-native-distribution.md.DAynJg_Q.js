import{_ as i,c as a,o as t,ag as n}from"./chunks/framework.Bksy39di.js";const E=JSON.parse('{"title":"ネイティブディストリビューション","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kmp/compose-native-distribution.md","filePath":"ja/kmp/compose-native-distribution.md","lastUpdated":1755516278000}'),e={name:"ja/kmp/compose-native-distribution.md"};function l(p,s,h,k,d,r){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="ネイティブディストリビューション" tabindex="-1">ネイティブディストリビューション <a class="header-anchor" href="#ネイティブディストリビューション" aria-label="Permalink to &quot;ネイティブディストリビューション&quot;">​</a></h1><p>ここでは、ネイティブディストリビューションについて学習します。サポートされているすべてのシステム向けにインストーラーやパッケージを作成する方法、およびディストリビューションと同じ設定でアプリケーションをローカルで実行する方法を学びます。</p><p>以下のトピックの詳細については、引き続きお読みください。</p><ul><li><a href="#gradle-plugin">Compose Multiplatform Gradleプラグインとは</a></li><li>アプリケーションをローカルで実行するなどの<a href="#basic-tasks">基本的なタスク</a>と、ミニファイや難読化などの<a href="#minification-and-obfuscation">高度なタスク</a>に関する詳細。</li><li><a href="#including-jdk-modules">JDKモジュールを含める方法</a>と<code>ClassNotFoundException</code>への対処法。</li><li><a href="#specifying-distribution-properties">ディストリビューションのプロパティを指定する方法</a>: パッケージバージョン、JDKバージョン、出力ディレクトリ、ランチャーのプロパティ、およびメタデータ。</li><li>リソースライブラリ、JVMリソースのロード、またはパックされたアプリケーションへのファイルの追加を使用した<a href="#managing-resources">リソースの管理方法</a>。</li><li>Gradleソースセット、Kotlin JVMターゲット、または手動での<a href="#custom-source-sets">ソースセットのカスタマイズ方法</a>。</li><li>OSごとに<a href="#application-icon">アプリケーションアイコンを指定する方法</a>。</li><li>Linux上のパッケージメンテナーのメールアドレスやmacOS上のApple App Storeのアプリカテゴリなど、<a href="#platform-specific-options">プラットフォーム固有のオプション</a>。</li><li><a href="#macos-specific-configuration">macOS固有の構成</a>: 署名、公証、および<code>Info.plist</code>。</li></ul><h2 id="gradleプラグイン" tabindex="-1">Gradleプラグイン <a class="header-anchor" href="#gradleプラグイン" aria-label="Permalink to &quot;Gradleプラグイン&quot;">​</a></h2><p>このガイドは、Compose Multiplatform Gradleプラグインを使用したComposeアプリケーションのパッケージ化に主に焦点を当てています。<code>org.jetbrains.compose</code>プラグインは、基本的なパッケージ化、難読化、macOSのコード署名のためのタスクを提供します。</p><p>このプラグインを使用すると、<code>jpackage</code>を使用してアプリケーションをネイティブディストリビューションにパッケージ化したり、アプリケーションをローカルで実行したりするプロセスが簡素化されます。配布可能なアプリケーションは自己完結型でインストール可能なバイナリであり、必要なすべてのJavaランタイムコンポーネントを含んでいるため、ターゲットシステムにJDKがインストールされている必要はありません。</p><p>パッケージサイズを最小限に抑えるため、Gradleプラグインは<a href="https://openjdk.org/jeps/282" target="_blank" rel="noreferrer">jlink</a>ツールを使用し、配布可能なパッケージに必要なJavaモジュールのみがバンドルされるようにします。ただし、必要なモジュールを指定するには、Gradleプラグインを構成する必要があります。詳細については、<a href="#including-jdk-modules">未定義</a>のセクションを参照してください。</p><p>代替として、JetBrainsが開発していない外部ツールである<a href="https://www.hydraulic.software" target="_blank" rel="noreferrer">Conveyor</a>を使用することもできます。Conveyorはオンラインアップデート、クロスビルド、その他様々な機能をサポートしていますが、オープンソース以外のプロジェクトでは<a href="https://hydraulic.software/pricing.html" target="_blank" rel="noreferrer">ライセンス</a>が必要です。詳細については、<a href="https://conveyor.hydraulic.dev/latest/tutorial/hare/jvm" target="_blank" rel="noreferrer">Conveyorドキュメント</a>を参照してください。</p><h2 id="基本的なタスク" tabindex="-1">基本的なタスク <a class="header-anchor" href="#基本的なタスク" aria-label="Permalink to &quot;基本的なタスク&quot;">​</a></h2><p>Compose Multiplatform Gradleプラグインの基本的な設定可能な単位は<code>application</code>です（これは<a href="https://docs.gradle.org/current/userguide/application_plugin.html" target="_blank" rel="noreferrer">Gradleアプリケーション</a>プラグインと混同しないようにしてください。こちらは非推奨です）。</p><p><code>application</code> DSLメソッドは、一連の最終バイナリに対する共有構成を定義します。つまり、ファイルのコレクションとJDKディストリビューションを、様々な形式の圧縮されたバイナリインストーラーのセットにパッケージ化できます。</p><p>サポートされているオペレーティングシステムで利用可能な形式は次のとおりです。</p><ul><li><strong>macOS</strong>: <code>.dmg</code> (<code>TargetFormat.Dmg</code>)、<code>.pkg</code> (<code>TargetFormat.Pkg</code>)</li><li><strong>Windows</strong>: <code>.exe</code> (<code>TargetFormat.Exe</code>)、<code>.msi</code> (<code>TargetFormat.Msi</code>)</li><li><strong>Linux</strong>: <code>.deb</code> (<code>TargetFormat.Deb</code>)、<code>.rpm</code> (<code>TargetFormat.Rpm</code>)</li></ul><p>基本的なデスクトップ構成を持つ<code>build.gradle.kts</code>ファイルの例を次に示します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.compose.desktop.application.dsl.TargetFormat</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jvm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.compose&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(compose.desktop.currentOs)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compose.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">desktop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        mainClass </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;example.MainKt&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        nativeDistributions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            targetFormats</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TargetFormat.Dmg, TargetFormat.Msi, TargetFormat.Exe)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>プロジェクトをビルドすると、プラグインは次のタスクを作成します。</p><table><tr><td>Gradleタスク</td><td>説明</td></tr><tr><td><code>package&lt;FormatName&gt;</code></td><td>アプリケーションを対応する<code>FormatName</code>バイナリにパッケージ化します。現時点ではクロスコンパイルはサポートされていません。つまり、対応する互換性のあるOSを使用してのみ特定の形式をビルドできます。たとえば、<code>.dmg</code>バイナリをビルドするには、macOSで<code>packageDmg</code>タスクを実行する必要があります。タスクが現在のOSと互換性がない場合、それらはデフォルトでスキップされます。</td></tr><tr><td><code>packageDistributionForCurrentOS</code></td><td>アプリケーションのすべてのパッケージタスクを集約します。これは<a href="https://docs.gradle.org/current/userguide/more_about_tasks.html#sec:task_categories">ライフサイクルタスク</a>です。</td></tr><tr><td><code>packageUberJarForCurrentOS</code></td><td>現在のオペレーティングシステム用のすべての依存関係を含む単一のjarファイルを作成します。このタスクは、<code>compose.desktop.currentOS</code>が<code>compile</code>、<code>implementation</code>、または<code>runtime</code>依存関係として使用されることを想定しています。</td></tr><tr><td><code>run</code></td><td><code>mainClass</code>で指定されたエントリポイントからアプリケーションをローカルで実行します。<code>run</code>タスクは、完全なランタイムを持つ非パッケージのJVMアプリケーションを開始します。このアプローチは、ミニファイされたランタイムでコンパクトなバイナリイメージを作成するよりも高速でデバッグが容易です。最終バイナリイメージを実行するには、代わりに<code>runDistributable</code>タスクを使用してください。</td></tr><tr><td><code>createDistributable</code></td><td>インストーラーを作成せずに最終アプリケーションイメージを作成します。</td></tr><tr><td><code>runDistributable</code></td><td>プリパッケージされたアプリケーションイメージを実行します。</td></tr></table><p>利用可能なすべてのタスクは、Gradleツールウィンドウにリストされています。タスクを実行すると、Gradleは<code>\${project.buildDir}/compose/binaries</code>ディレクトリに出力バイナリを生成します。</p><h2 id="jdkモジュールの含め方" tabindex="-1">JDKモジュールの含め方 <a class="header-anchor" href="#jdkモジュールの含め方" aria-label="Permalink to &quot;JDKモジュールの含め方&quot;">​</a></h2><p>配布可能ファイルのサイズを削減するために、Gradleプラグインは<a href="https://openjdk.org/jeps/282" target="_blank" rel="noreferrer">jlink</a>を使用しており、必要なJDKモジュールのみをバンドルするのに役立ちます。</p><p>現在、Gradleプラグインは必要なJDKモジュールを自動的に判断しません。これはコンパイルの問題を引き起こすことはありませんが、必要なモジュールを提供しないと、実行時に<code>ClassNotFoundException</code>が発生する可能性があります。</p><p>パッケージ化されたアプリケーションや<code>runDistributable</code>タスクの実行時に<code>ClassNotFoundException</code>が発生した場合は、<code>modules</code> DSLメソッドを使用して追加のJDKモジュールを含めることができます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compose.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">desktop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        nativeDistributions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            modules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;java.sql&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // Alternatively: includeAllModules = true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>必要なモジュールは手動で指定するか、<code>suggestModules</code>を実行できます。<code>suggestModules</code>タスクは、<a href="https://docs.oracle.com/javase/9/tools/jdeps.htm" target="_blank" rel="noreferrer">jdeps</a>静的解析ツールを使用して、不足している可能性のあるモジュールを特定します。このツールの出力は不完全であったり、不要なモジュールをリストしたりする可能性があることに注意してください。</p><p>配布可能ファイルのサイズが重要な要因ではなく、無視できる場合は、<code>includeAllModules</code> DSLプロパティを使用してすべてのランタイムモジュールを含めることもできます。</p><h2 id="ディストリビューションプロパティの指定" tabindex="-1">ディストリビューションプロパティの指定 <a class="header-anchor" href="#ディストリビューションプロパティの指定" aria-label="Permalink to &quot;ディストリビューションプロパティの指定&quot;">​</a></h2><h3 id="パッケージバージョン" tabindex="-1">パッケージバージョン <a class="header-anchor" href="#パッケージバージョン" aria-label="Permalink to &quot;パッケージバージョン&quot;">​</a></h3><p>ネイティブディストリビューションパッケージには、特定のパッケージバージョンが必要です。 パッケージバージョンを指定するには、次のDSLプロパティを優先度の高い順に低い順に使用します。</p><ul><li><code>nativeDistributions.&lt;os&gt;.&lt;packageFormat&gt;PackageVersion</code>は、単一のパッケージ形式のバージョンを指定します。</li><li><code>nativeDistributions.&lt;os&gt;.packageVersion</code>は、単一のターゲットOSのバージョンを指定します。</li><li><code>nativeDistributions.packageVersion</code>は、すべてのパッケージのバージョンを指定します。</li></ul><p>macOSでは、ビルドバージョンを次のDSLプロパティ（これも優先度の高い順に低い順）を使用して指定することもできます。</p><ul><li><code>nativeDistributions.macOS.&lt;packageFormat&gt;PackageBuildVersion</code>は、単一のパッケージ形式のビルドバージョンを指定します。</li><li><code>nativeDistributions.macOS.packageBuildVersion</code>は、すべてのmacOSパッケージのビルドバージョンを指定します。</li></ul><p>ビルドバージョンを指定しない場合、Gradleは代わりにパッケージバージョンを使用します。macOSでのバージョン管理の詳細については、<a href="https://developer.apple.com/documentation/bundleresources/information_property_list/cfbundleshortversionstring" target="_blank" rel="noreferrer"><code>CFBundleShortVersionString</code></a>および<a href="https://developer.apple.com/documentation/bundleresources/information_property_list/cfbundleversion" target="_blank" rel="noreferrer"><code>CFBundleVersion</code></a>ドキュメントを参照してください。</p><p>パッケージバージョンを優先順位で指定するためのテンプレートを次に示します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compose.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">desktop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        nativeDistributions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // Version for all packages</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            packageVersion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            macOS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">              // Version for all macOS packages</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              packageVersion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;...&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">              // Version for the dmg package only</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              dmgPackageVersion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">              // Version for the pkg package only</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              pkgPackageVersion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">              // Build version for all macOS packages</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              packageBuildVersion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;...&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">              // Build version for the dmg package only</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              dmgPackageBuildVersion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">              // Build version for the pkg package only</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              pkgPackageBuildVersion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            windows</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">              // Version for all Windows packages</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              packageVersion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">              // Version for the msi package only</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              msiPackageVersion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;...&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">              // Version for the exe package only</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              exePackageVersion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            linux</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">              // Version for all Linux packages</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              packageVersion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;...&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">              // Version for the deb package only</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              debPackageVersion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;...&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">              // Version for the rpm package only</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              rpmPackageVersion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;...&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>パッケージバージョンを定義するには、次の規則に従ってください。</p><table><tr><td>ファイルタイプ</td><td>バージョン形式</td><td>詳細</td></tr><tr><td><code>dmg</code>, <code>pkg</code></td><td><code>MAJOR[.MINOR][.PATCH]</code></td><td><ul><li><code>MAJOR</code>は0より大きい整数</li><li><code>MINOR</code>はオプションの非負整数</li><li><code>PATCH</code>はオプションの非負整数</li></ul></td></tr><tr><td><code>msi</code>, <code>exe</code></td><td><code>MAJOR.MINOR.BUILD</code></td><td><ul><li><code>MAJOR</code>は最大値255の非負整数</li><li><code>MINOR</code>は最大値255の非負整数</li><li><code>BUILD</code>は最大値65535の非負整数</li></ul></td></tr><tr><td><code>deb</code></td><td><code>[EPOCH:]UPSTREAM_VERSION[-DEBIAN_REVISION]</code></td><td><ul><li><code>EPOCH</code>はオプションの非負整数</li><li><code>UPSTREAM_VERSION</code>: <ul><li>英数字および<code>.</code>、<code>+</code>、<code>-</code>、<code>~</code>文字のみを含めることができます</li><li>数字で始まる必要があります</li></ul></li><li><code>DEBIAN_REVISION</code>: <ul><li>オプション</li><li>英数字および<code>.</code>、<code>+</code>、<code>~</code>文字のみを含めることができます</li></ul></li></ul> 詳細については、<a href="https://www.debian.org/doc/debian-policy/ch-controlfields.html#version">Debianドキュメント</a>を参照してください。 </td></tr><tr><td><code>rpm</code></td><td>任意の形式</td><td>バージョンに<code>-</code> (ダッシュ) 文字を含めることはできません。</td></tr></table><h3 id="jdkバージョン" tabindex="-1">JDKバージョン <a class="header-anchor" href="#jdkバージョン" aria-label="Permalink to &quot;JDKバージョン&quot;">​</a></h3><p>このプラグインは<code>jpackage</code>を使用しますが、これは<a href="https://openjdk.java.net/projects/jdk/17/" target="_blank" rel="noreferrer">JDK 17</a>以上のJDKバージョンを必要とします。JDKバージョンを指定する際は、以下のいずれかの要件を満たしていることを確認してください。</p><ul><li><code>JAVA_HOME</code>環境変数が互換性のあるJDKバージョンを指している。</li><li><code>javaHome</code>プロパティがDSL経由で設定されている。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compose.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">desktop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        javaHome </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getenv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;JDK_17&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="出力ディレクトリ" tabindex="-1">出力ディレクトリ <a class="header-anchor" href="#出力ディレクトリ" aria-label="Permalink to &quot;出力ディレクトリ&quot;">​</a></h3><p>ネイティブディストリビューションにカスタムの出力ディレクトリを使用するには、次のように<code>outputBaseDir</code>プロパティを構成します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compose.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">desktop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        nativeDistributions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            outputBaseDir.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(project.layout.buildDirectory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dir</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;customOutputDir&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="ランチャープロパティ" tabindex="-1">ランチャープロパティ <a class="header-anchor" href="#ランチャープロパティ" aria-label="Permalink to &quot;ランチャープロパティ&quot;">​</a></h3><p>アプリケーションの起動プロセスを調整するために、以下のプロパティをカスタマイズできます。</p><table><tr><td>プロパティ</td><td>説明</td></tr><tr><td><code>mainClass</code></td><td><code>main</code>メソッドを含むクラスの完全修飾名。</td></tr><tr><td><code>args</code></td><td>アプリケーションの<code>main</code>メソッドへの引数。</td></tr><tr><td><code>jvmArgs</code></td><td>アプリケーションのJVMへの引数。</td></tr></table><p>設定例を次に示します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compose.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">desktop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        mainClass </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;MainKt&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        args </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-customArgument&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        jvmArgs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xmx2G&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="メタデータ" tabindex="-1">メタデータ <a class="header-anchor" href="#メタデータ" aria-label="Permalink to &quot;メタデータ&quot;">​</a></h3><p><code>nativeDistributions</code> DSLブロック内で、以下のプロパティを設定できます。</p><table><tr><td>プロパティ</td><td>説明</td><td>デフォルト値</td></tr><tr><td><code>packageName</code></td><td>アプリケーションの名前。</td><td>Gradleプロジェクトの<a href="https://docs.gradle.org/current/javadoc/org/gradle/api/Project.html#getName--">名前</a></td></tr><tr><td><code>packageVersion</code></td><td>アプリケーションのバージョン。</td><td>Gradleプロジェクトの<a href="https://docs.gradle.org/current/javadoc/org/gradle/api/Project.html#getVersion--">バージョン</a></td></tr><tr><td><code>description</code></td><td>アプリケーションの説明。</td><td>なし</td></tr><tr><td><code>copyright</code></td><td>アプリケーションの著作権情報。</td><td>なし</td></tr><tr><td><code>vendor</code></td><td>アプリケーションのベンダー。</td><td>なし</td></tr><tr><td><code>licenseFile</code></td><td>アプリケーションのライセンスファイル。</td><td>なし</td></tr></table><p>設定例を次に示します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compose.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">desktop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        nativeDistributions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            packageName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;ExampleApp&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            packageVersion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;0.1-SNAPSHOT&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            description </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Compose Multiplatform App&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            copyright </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;© 2024 My Name. All rights reserved.&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            vendor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Example vendor&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            licenseFile.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(project.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;LICENSE.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="リソースの管理" tabindex="-1">リソースの管理 <a class="header-anchor" href="#リソースの管理" aria-label="Permalink to &quot;リソースの管理&quot;">​</a></h2><p>リソースをパッケージ化してロードするには、Compose Multiplatformリソースライブラリ、JVMリソースのロード、またはパッケージ化されたアプリケーションへのファイルの追加を使用できます。</p><h3 id="リソースライブラリ" tabindex="-1">リソースライブラリ <a class="header-anchor" href="#リソースライブラリ" aria-label="Permalink to &quot;リソースライブラリ&quot;">​</a></h3><p>プロジェクトのリソースを設定する最も簡単な方法は、リソースライブラリを使用することです。 リソースライブラリを使用すると、サポートされているすべてのプラットフォームで共通コード内のリソースにアクセスできます。 詳細については、<a href="./compose-multiplatform-resources">マルチプラットフォームリソース</a>を参照してください。</p><h3 id="jvmリソースのロード" tabindex="-1">JVMリソースのロード <a class="header-anchor" href="#jvmリソースのロード" aria-label="Permalink to &quot;JVMリソースのロード&quot;">​</a></h3><p>Compose Multiplatform for desktopはJVMプラットフォーム上で動作します。これは、<code>java.lang.Class</code> APIを使用して<code>.jar</code>ファイルからリソースをロードできることを意味します。<code>src/main/resources</code>ディレクトリ内のファイルには、<a href="https://docs.oracle.com/en/java/javase/15/docs/api/java.base/java/lang/Class.html#getResource(java.lang.String)" target="_blank" rel="noreferrer"><code>Class::getResource</code></a>または<a href="https://docs.oracle.com/en/java/javase/15/docs/api/java.base/java/lang/Class.html#getResourceAsStream(java.lang.String)" target="_blank" rel="noreferrer"><code>Class::getResourceAsStream</code></a>を介してアクセスできます。</p><h3 id="パッケージ化されたアプリケーションへのファイルの追加" tabindex="-1">パッケージ化されたアプリケーションへのファイルの追加 <a class="header-anchor" href="#パッケージ化されたアプリケーションへのファイルの追加" aria-label="Permalink to &quot;パッケージ化されたアプリケーションへのファイルの追加&quot;">​</a></h3><p><code>.jar</code>ファイルからリソースをロードすることが実用的でないシナリオもあります。たとえば、ターゲット固有のアセットがあり、macOSパッケージにはファイルを含めるが、Windowsパッケージには含めない場合などです。</p><p>このような場合、Gradleプラグインを構成して、追加のリソースファイルをインストールディレクトリに含めることができます。 次のようにDSLを使用してルートリソースディレクトリを指定します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compose.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">desktop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        mainClass </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;MainKt&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        nativeDistributions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            targetFormats</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TargetFormat.Dmg, TargetFormat.Msi, TargetFormat.Deb)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            packageVersion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1.0.0&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            appResourcesRootDir.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(project.layout.projectDirectory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dir</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;resources&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>上記の例では、ルートリソースディレクトリは<code>&lt;PROJECT_DIR&gt;/resources</code>として定義されています。</p><p>Gradleプラグインは、リソースのサブディレクトリからファイルを次のように含めます。</p><ol><li><p><strong>共通リソース:</strong><code>&lt;RESOURCES_ROOT_DIR&gt;/common</code>にあるファイルは、ターゲットOSやアーキテクチャに関係なく、すべてのパッケージに含まれます。</p></li><li><p><strong>OS固有のリソース:</strong><code>&lt;RESOURCES_ROOT_DIR&gt;/&lt;OS_NAME&gt;</code>にあるファイルは、特定のオペレーティングシステム用にビルドされたパッケージにのみ含まれます。 <code>&lt;OS_NAME&gt;</code>の有効な値は、<code>windows</code>、<code>macos</code>、<code>linux</code>です。</p></li><li><p><strong>OSおよびアーキテクチャ固有のリソース:</strong><code>&lt;RESOURCES_ROOT_DIR&gt;/&lt;OS_NAME&gt;-&lt;ARCH_NAME&gt;</code>にあるファイルは、特定のオペレーティングシステムとCPUアーキテクチャの組み合わせ用にビルドされたパッケージにのみ含まれます。 <code>&lt;ARCH_NAME&gt;</code>の有効な値は、<code>x64</code>および<code>arm64</code>です。 たとえば、<code>&lt;RESOURCES_ROOT_DIR&gt;/macos-arm64</code>にあるファイルは、Apple Silicon Mac向けパッケージにのみ含まれます。</p></li></ol><p><code>compose.application.resources.dir</code>システムプロパティを使用して、含まれるリソースにアクセスできます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> java.io.File</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> resourcesDir </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> File</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;compose.application.resources.dir&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(resourcesDir.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;resource.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="カスタムソースセット" tabindex="-1">カスタムソースセット <a class="header-anchor" href="#カスタムソースセット" aria-label="Permalink to &quot;カスタムソースセット&quot;">​</a></h2><p><code>org.jetbrains.kotlin.jvm</code>または<code>org.jetbrains.kotlin.multiplatform</code>プラグインを使用している場合は、デフォルト構成に依存できます。</p><ul><li><code>org.jetbrains.kotlin.jvm</code>を使用した構成には、<code>main</code><a href="https://docs.gradle.org/current/userguide/java_plugin.html#source_sets" target="_blank" rel="noreferrer">ソースセット</a>の内容が含まれます。</li><li><code>org.jetbrains.kotlin.multiplatform</code>を使用した構成には、単一の<a href="./multiplatform-dsl-reference#targets">JVMターゲット</a>の内容が含まれます。 複数のJVMターゲットを定義すると、デフォルト構成は無効になります。この場合、プラグインを手動で構成するか、単一のターゲットを指定する必要があります（以下を参照）。</li></ul><p>デフォルト設定があいまいまたは不十分な場合は、いくつかの方法でカスタマイズできます。</p><p>Gradle <a href="https://docs.gradle.org/current/userguide/java_plugin.html#source_sets" target="_blank" rel="noreferrer">ソースセット</a>を使用する:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jvm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.compose&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> customSourceSet </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sourceSets.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;customSourceSet&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compose.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">desktop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(customSourceSet)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Kotlin <a href="./multiplatform-dsl-reference#targets">JVMターゲット</a>を使用する:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;multiplatform&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.compose&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;customJvmTarget&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compose.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">desktop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(kotlin.targets[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;customJvmTarget&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>手動で:</p><ul><li><code>disableDefaultConfiguration</code>を使用してデフォルト設定を無効にします。</li><li><code>fromFiles</code>を使用して含めるファイルを指定します。</li><li><code>mainJar</code>ファイルプロパティに、メインクラスを含む<code>.jar</code>ファイルを指定します。</li><li><code>dependsOn</code>を使用して、すべてのプラグインタスクにタスク依存関係を追加します。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compose.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">desktop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        disableDefaultConfiguration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        fromFiles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(project.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fileTree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;libs/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">include</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;**/*.jar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        mainJar.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(project.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;main.jar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        dependsOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;mainJarTask&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="アプリケーションアイコン" tabindex="-1">アプリケーションアイコン <a class="header-anchor" href="#アプリケーションアイコン" aria-label="Permalink to &quot;アプリケーションアイコン&quot;">​</a></h2><p>アプリのアイコンが、次のOS固有の形式で利用可能であることを確認してください。</p><ul><li>macOSの場合は<code>.icns</code></li><li>Windowsの場合は<code>.ico</code></li><li>Linuxの場合は<code>.png</code></li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compose.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">desktop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        nativeDistributions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            macOS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                iconFile.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(project.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;icon.icns&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            windows</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                iconFile.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(project.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;icon.ico&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            linux</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                iconFile.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(project.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;icon.png&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="プラットフォーム固有のオプション" tabindex="-1">プラットフォーム固有のオプション <a class="header-anchor" href="#プラットフォーム固有のオプション" aria-label="Permalink to &quot;プラットフォーム固有のオプション&quot;">​</a></h2><p>プラットフォーム固有の設定は、対応するDSLブロックを使用して構成できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compose.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">desktop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        nativeDistributions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            macOS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // Options for macOS</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            windows</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // Options for Windows</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            linux</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // Options for Linux</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>次の表は、サポートされているすべてのプラットフォーム固有のオプションを示しています。文書化されていないプロパティの使用は<strong>推奨されません</strong>。</p><table><tr><td>プラットフォーム</td><td>オプション</td><td width="500">説明</td></tr><tr><td rowspan="3">すべてのプラットフォーム</td><td><code>iconFile.set(File(&quot;PATH_TO_ICON&quot;))</code></td><td>アプリケーションのプラットフォーム固有のアイコンへのパスを指定します。詳細については、<a href="#application-icon">アプリケーションアイコン</a>セクションを参照してください。</td></tr><tr><td><code>packageVersion = &quot;1.0.0&quot;</code></td><td>プラットフォーム固有のパッケージバージョンを設定します。詳細については、<a href="#package-version">パッケージバージョン</a>セクションを参照してください。</td></tr><tr><td><code>installationPath = &quot;PATH_TO_INST_DIR&quot;</code></td><td>デフォルトのインストールディレクトリへの絶対パスまたは相対パスを指定します。 Windowsでは、インストール時にパスをカスタマイズできるように<code>dirChooser = true</code>も使用できます。</td></tr><tr><td rowspan="8">Linux</td><td><code>packageName = &quot;custom-package-name&quot;</code></td><td>デフォルトのアプリケーション名を上書きします。</td></tr><tr><td><code>debMaintainer = &quot;maintainer@example.com&quot;</code></td><td>パッケージメンテナーのメールアドレスを指定します。</td></tr><tr><td><code>menuGroup = &quot;my-example-menu-group&quot;</code></td><td>アプリケーションのメニューグループを定義します。</td></tr><tr><td><code>appRelease = &quot;1&quot;</code></td><td>rpmパッケージのリリースの値、またはdebパッケージのリビジョンの値を設定します。</td></tr><tr><td><code>appCategory = &quot;CATEGORY&quot;</code></td><td>rpmパッケージのグループ値、またはdebパッケージのセクション値を割り当てます。</td></tr><tr><td><code>rpmLicenseType = &quot;TYPE_OF_LICENSE&quot;</code></td><td>rpmパッケージのライセンスのタイプを示します。</td></tr><tr><td><code>debPackageVersion = &quot;DEB_VERSION&quot;</code></td><td>deb固有のパッケージバージョンを設定します。詳細については、<a href="#package-version">パッケージバージョン</a>セクションを参照してください。</td></tr><tr><td><code>rpmPackageVersion = &quot;RPM_VERSION&quot;</code></td><td>rpm固有のパッケージバージョンを設定します。詳細については、<a href="#package-version">パッケージバージョン</a>セクションを参照してください。</td></tr><tr><td rowspan="15">macOS</td><td><code>bundleID</code></td><td> 一意のアプリケーション識別子を指定します。これには、英数字 (<code>A-Z</code>、<code>a-z</code>、<code>0-9</code>)、ハイフン (<code>-</code>)、 およびピリオド (<code>.</code>) のみを含めることができます。リバースDNS表記 (<code>com.mycompany.myapp</code>) を使用することをお勧めします。 </td></tr><tr><td><code>packageName</code></td><td>アプリケーションの名前。</td></tr><tr><td><code>dockName</code></td><td> メニューバー、「&lt;App&gt;について」メニュー項目、 およびDockに表示されるアプリケーションの名前。デフォルト値は<code>packageName</code>です。 </td></tr><tr><td><code>minimumSystemVersion</code></td><td> アプリケーションを実行するために必要な最小macOSバージョン。詳細については、 <a href="https://developer.apple.com/documentation/bundleresources/information_property_list/lsminimumsystemversion"><code>LSMinimumSystemVersion</code></a>を参照してください。 </td></tr><tr><td><code>signing</code>, <code>notarization</code>, <code>provisioningProfile</code>, <code>runtimeProvisioningProfile</code></td><td><a href="https://github.com/JetBrains/compose-multiplatform/tree/master/tutorials/Signing_and_notarization_on_macOS"> macOS向けディストリビューションの署名と公証</a>チュートリアルを参照してください。 </td></tr><tr><td><code>appStore = true</code></td><td>Apple App Store向けにアプリをビルドおよび署名するかどうかを指定します。JDK 17以上が必要です。</td></tr><tr><td><code>appCategory</code></td><td> Apple App Store向けアプリのカテゴリ。App Store向けにビルドする場合のデフォルト値は <code>public.app-category.utilities</code>、それ以外の場合は<code>Unknown</code>です。 有効なカテゴリのリストについては、 <a href="https://developer.apple.com/documentation/bundleresources/information_property_list/lsapplicationcategorytype"><code>LSApplicationCategoryType</code></a>を参照してください。 </td></tr><tr><td><code>entitlementsFile.set(File(&quot;PATH_ENT&quot;))</code></td><td> 署名時に使用されるエンタイトルメントを含むファイルへのパスを指定します。カスタムファイルを提供する場合、 Javaアプリケーションに必要なエンタイトルメントを追加してください。App Store向けにビルドする際に使用されるデフォルトファイルについては、 <a href="https://github.com/openjdk/jdk/blob/master/src/jdk.jpackage/macosx/classes/jdk/jpackage/internal/resources/sandbox.plist"> sandbox.plist</a>を参照してください。このデフォルトファイルはJDKのバージョンによって異なる場合があります。 ファイルが指定されていない場合、プラグインは<code>jpackage</code>が提供するデフォルトのエンタイトルメントを使用します。 詳細については、<a href="https://github.com/JetBrains/compose-multiplatform/tree/master/tutorials/Signing_and_notarization_on_macOS"> macOS向けディストリビューションの署名と公証</a>チュートリアルを参照してください。 </td></tr><tr><td><code>runtimeEntitlementsFile.set(File(&quot;PATH_R_ENT&quot;))</code></td><td> JVMランタイムの署名時に使用されるエンタイトルメントを含むファイルへのパスを指定します。カスタムファイルを提供する場合、 Javaアプリケーションに必要なエンタイトルメントを追加してください。App Store向けにビルドする際に使用されるデフォルトファイルについては、 <a href="https://github.com/openjdk/jdk/blob/master/src/jdk.jpackage/macosx/classes/jdk/jpackage/internal/resources/sandbox.plist"> sandbox.plist</a>を参照してください。このデフォルトファイルはJDKのバージョンによって異なる場合があります。 ファイルが指定されていない場合、プラグインは<code>jpackage</code>が提供するデフォルトのエンタイトルメントを使用します。 詳細については、<a href="https://github.com/JetBrains/compose-multiplatform/tree/master/tutorials/Signing_and_notarization_on_macOS"> macOS向けディストリビューションの署名と公証</a>チュートリアルを参照してください。 </td></tr><tr><td><code>dmgPackageVersion = &quot;DMG_VERSION&quot;</code></td><td> DMG固有のパッケージバージョンを設定します。詳細については、<a href="#package-version">パッケージバージョン</a>セクションを参照してください。 </td></tr><tr><td><code>pkgPackageVersion = &quot;PKG_VERSION&quot;</code></td><td> PKG固有のパッケージバージョンを設定します。詳細については、<a href="#package-version">パッケージバージョン</a>セクションを参照してください。 </td></tr><tr><td><code>packageBuildVersion = &quot;DMG_VERSION&quot;</code></td><td> パッケージのビルドバージョンを設定します。詳細については、<a href="#package-version">パッケージバージョン</a>セクションを参照してください。 </td></tr><tr><td><code>dmgPackageBuildVersion = &quot;DMG_VERSION&quot;</code></td><td> DMG固有のパッケージビルドバージョンを設定します。詳細については、<a href="#package-version">パッケージバージョン</a>セクションを参照してください。 </td></tr><tr><td><code>pkgPackageBuildVersion = &quot;PKG_VERSION&quot;</code></td><td> PKG固有のパッケージビルドバージョンを設定します。詳細については、<a href="#package-version">パッケージバージョン</a>セクションを参照してください。 </td></tr><tr><td><code>infoPlist</code></td><td><a href="#information-property-list-on-macos">macOS上の<code>Info.plist</code></a>セクションを参照してください。</td></tr><tr><td rowspan="7">Windows</td><td><code>console = true</code></td><td>アプリケーションのコンソールランチャーを追加します。</td></tr><tr><td><code>dirChooser = true</code></td><td>インストール時にインストールパスをカスタマイズできるようにします。</td></tr><tr><td><code>perUserInstall = true</code></td><td>アプリケーションをユーザーごとにインストールできるようにします。</td></tr><tr><td><code>menuGroup = &quot;start-menu-group&quot;</code></td><td>アプリケーションを指定されたスタートメニューグループに追加します。</td></tr><tr><td><code>upgradeUuid = &quot;UUID&quot;</code></td><td>インストールされているバージョンよりも新しいバージョンがある場合に、ユーザーがインストーラー経由でアプリケーションを更新できるようにする一意のIDを指定します。この値は単一のアプリケーションに対して一定である必要があります。詳細については、<a href="https://wixtoolset.org/documentation/manual/v3/howtos/general/generate_guids.html">How To: GUIDを生成する</a>を参照してください。</td></tr><tr><td><code>msiPackageVersion = &quot;MSI_VERSION&quot;</code></td><td>MSI固有のパッケージバージョンを設定します。詳細については、<a href="#package-version">パッケージバージョン</a>セクションを参照してください。</td></tr><tr><td><code>exePackageVersion = &quot;EXE_VERSION&quot;</code></td><td>EXE固有のパッケージバージョンを設定します。詳細については、<a href="#package-version">パッケージバージョン</a>セクションを参照してください。</td></tr></table><h2 id="macos固有の構成" tabindex="-1">macOS固有の構成 <a class="header-anchor" href="#macos固有の構成" aria-label="Permalink to &quot;macOS固有の構成&quot;">​</a></h2><h3 id="macosでの署名と公証" tabindex="-1">macOSでの署名と公証 <a class="header-anchor" href="#macosでの署名と公証" aria-label="Permalink to &quot;macOSでの署名と公証&quot;">​</a></h3><p>最新のmacOSバージョンでは、インターネットからダウンロードされた署名されていないアプリケーションの実行が許可されていません。そのようなアプリケーションを実行しようとすると、次のエラーが発生します。「YourApp is damaged and can&#39;t be open. You should eject the disk image」（YourAppは破損しており開けません。ディスクイメージを取り出す必要があります）。</p><p>アプリケーションに署名して公証する方法については、<a href="./https://github.com/JetBrains/compose-multiplatform/blob/master/tutorials/Signing_and_notarization_on_macOS/README">チュートリアル</a>を参照してください。</p><h3 id="macos上のinformation-property-list" tabindex="-1">macOS上のInformation Property List <a class="header-anchor" href="#macos上のinformation-property-list" aria-label="Permalink to &quot;macOS上のInformation Property List&quot;">​</a></h3><p>DSLは基本的なプラットフォーム固有のカスタマイズをサポートしていますが、提供された機能を超えるケースも存在します。DSLに表現されていない<code>Info.plist</code>の値を指定する必要がある場合は、生のXMLスニペットを回避策として含めることができます。このXMLはアプリケーションの<code>Info.plist</code>に追加されます。</p><h4 id="例-ディープリンク" tabindex="-1">例: ディープリンク <a class="header-anchor" href="#例-ディープリンク" aria-label="Permalink to &quot;例: ディープリンク&quot;">​</a></h4><ol><li><code>build.gradle.kts</code>ファイルでカスタムURLスキームを定義します。</li></ol><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compose.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">desktop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        mainClass </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;MainKt&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        nativeDistributions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            targetFormats</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TargetFormat.Dmg)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            packageName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Deep Linking Example App&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            macOS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                bundleID </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;org.jetbrains.compose.examples.deeplinking&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                infoPlist</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    extraKeysRawXml </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> macExtraPlistKeys</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> macExtraPlistKeys: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &lt;key&gt;CFBundleURLTypes&lt;/key&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &lt;array&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &lt;dict&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          &lt;key&gt;CFBundleURLName&lt;/key&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          &lt;string&gt;Example deep link&lt;/string&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          &lt;key&gt;CFBundleURLSchemes&lt;/key&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          &lt;array&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &lt;string&gt;compose&lt;/string&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">          &lt;/array&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &lt;/dict&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &lt;/array&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;</span></span></code></pre></div><ol start="2"><li><code>src/main/main.kt</code>ファイルで<code>java.awt.Desktop</code>クラスを使用してURIハンドラーを設定します。</li></ol><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> androidx.compose.material.MaterialTheme</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> androidx.compose.material.Text</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> androidx.compose.runtime.getValue</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> androidx.compose.runtime.mutableStateOf</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> androidx.compose.runtime.setValue</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> androidx.compose.ui.window.singleWindowApplication</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> java.awt.Desktop</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mutableStateOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, World!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Desktop.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getDesktop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setOpenURIHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { event </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Open URI: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> event.uri</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (e: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UnsupportedOperationException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;setOpenURIHandler is unsupported&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    singleWindowApplication</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        MaterialTheme</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(text)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ol start="3"><li><code>runDistributable</code>タスクを実行します: <code>./gradlew runDistributable</code>。</li></ol><p>結果として、<code>compose://foo/bar</code>のようなリンクがブラウザからアプリケーションにリダイレクトされるようになります。</p><h2 id="ミニファイと難読化" tabindex="-1">ミニファイと難読化 <a class="header-anchor" href="#ミニファイと難読化" aria-label="Permalink to &quot;ミニファイと難読化&quot;">​</a></h2><p>Compose Multiplatform Gradleプラグインには、<a href="https://www.guardsquare.com/proguard" target="_blank" rel="noreferrer">ProGuard</a>の組み込みサポートが含まれています。ProGuardは、コードのミニファイと難読化のための<a href="https://github.com/Guardsquare/proguard" target="_blank" rel="noreferrer">オープンソースツール</a>です。</p><p>各<em>デフォルト</em>（ProGuardなし）パッケージングタスクには、Gradleプラグインが<em>リリース</em>タスク（ProGuardあり）を提供します。</p><table><tr><td width="400">Gradleタスク</td><td>説明</td></tr><tr><td><p>デフォルト: <code>createDistributable</code></p><p>リリース: <code>createReleaseDistributable</code></p></td><td>JDKとリソースをバンドルしたアプリケーションイメージを作成します。</td></tr><tr><td><p>デフォルト: <code>runDistributable</code></p><p>リリース: <code>runReleaseDistributable</code></p></td><td>JDKとリソースをバンドルしたアプリケーションイメージを実行します。</td></tr><tr><td><p>デフォルト: <code>run</code></p><p>リリース: <code>runRelease</code></p></td><td>Gradle JDKを使用して非パッケージ化アプリケーション<code>.jar</code>を実行します。</td></tr><tr><td><p>デフォルト: <code>package&lt;FORMAT_NAME&gt;</code></p><p>リリース: <code>packageRelease&lt;FORMAT_NAME&gt;</code></p></td><td>アプリケーションイメージを<code>&lt;FORMAT_NAME&gt;</code>ファイルにパッケージ化します。</td></tr><tr><td><p>デフォルト: <code>packageDistributionForCurrentOS</code></p><p>リリース: <code>packageReleaseDistributionForCurrentOS</code></p></td><td>アプリケーションイメージを現在のOSと互換性のある形式にパッケージ化します。</td></tr><tr><td><p>デフォルト: <code>packageUberJarForCurrentOS</code></p><p>リリース: <code>packageReleaseUberJarForCurrentOS</code></p></td><td>アプリケーションイメージをUber (fat) <code>.jar</code>にパッケージ化します。</td></tr><tr><td><p>デフォルト: <code>notarize&lt;FORMAT_NAME&gt;</code></p><p>リリース: <code>notarizeRelease&lt;FORMAT_NAME&gt;</code></p></td><td><code>&lt;FORMAT_NAME&gt;</code>アプリケーションイメージを公証のためにアップロードします (macOSのみ)。</td></tr><tr><td><p>デフォルト: <code>checkNotarizationStatus</code></p><p>リリース: <code>checkReleaseNotarizationStatus</code></p></td><td>公証が成功したかどうかを確認します (macOSのみ)。</td></tr></table><p>デフォルト構成では、いくつかの事前定義されたProGuardルールが有効になっています。</p><ul><li>アプリケーションイメージはミニファイされ、未使用のクラスが削除されます。</li><li><code>compose.desktop.application.mainClass</code>がエントリポイントとして使用されます。</li><li>Composeランタイムが機能し続けるように、いくつかの<code>keep</code>ルールが含まれています。</li></ul><p>ほとんどの場合、ミニファイされたアプリケーションを取得するために追加の構成は必要ありません。ただし、ProGuardは、たとえばクラスがリフレクションを介して使用される場合など、バイトコード内の特定の用途を追跡しないことがあります。ProGuard処理後にのみ発生する問題に遭遇した場合は、カスタムルールを追加する必要があるかもしれません。</p><p>カスタム構成ファイルを指定するには、次のようにDSLを使用します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compose.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">desktop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        buildTypes.release.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">proguard</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            configurationFiles.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(project.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;compose-desktop.pro&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>ProGuardのルールと構成オプションの詳細については、Guardsquareの<a href="https://www.guardsquare.com/manual/configuration/usage" target="_blank" rel="noreferrer">マニュアル</a>を参照してください。</p><p>難読化はデフォルトで無効になっています。有効にするには、Gradle DSL経由で次のプロパティを設定します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compose.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">desktop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        buildTypes.release.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">proguard</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            obfuscate.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>ProGuardの最適化はデフォルトで有効になっています。無効にするには、Gradle DSL経由で次のプロパティを設定します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compose.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">desktop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        buildTypes.release.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">proguard</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            optimize.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Uber JARの生成はデフォルトで無効になっており、ProGuardは入力されたすべての<code>.jar</code>に対して対応する<code>.jar</code>ファイルを生成します。有効にするには、Gradle DSL経由で次のプロパティを設定します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compose.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">desktop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        buildTypes.release.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">proguard</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            joinOutputJars.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="次のステップ" tabindex="-1">次のステップ <a class="header-anchor" href="#次のステップ" aria-label="Permalink to &quot;次のステップ&quot;">​</a></h2><p><a href="https://github.com/JetBrains/compose-multiplatform/tree/master/tutorials#desktop" target="_blank" rel="noreferrer">デスクトップコンポーネント</a>に関するチュートリアルを探索してください。</p>`,120)]))}const c=i(e,[["render",l]]);export{E as __pageData,c as default};
