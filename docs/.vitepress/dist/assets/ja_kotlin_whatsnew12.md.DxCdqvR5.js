import{_ as i,c as a,o as n,ag as l}from"./chunks/framework.Bksy39di.js";const o=JSON.parse('{"title":"Kotlin 1.2の新機能","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/whatsnew12.md","filePath":"ja/kotlin/whatsnew12.md","lastUpdated":1754307826000}'),h={name:"ja/kotlin/whatsnew12.md"};function t(k,s,e,p,d,r){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="kotlin-1-2の新機能" tabindex="-1">Kotlin 1.2の新機能 <a class="header-anchor" href="#kotlin-1-2の新機能" aria-label="Permalink to &quot;Kotlin 1.2の新機能&quot;">​</a></h1><p><em>リリース日: 2017年11月28日</em></p><h2 id="目次" tabindex="-1">目次 <a class="header-anchor" href="#目次" aria-label="Permalink to &quot;目次&quot;">​</a></h2><ul><li><a href="#multiplatform-projects-experimental">マルチプラットフォームプロジェクト (実験的機能)</a></li><li><a href="#other-language-features">その他の言語機能</a></li><li><a href="#standard-library">標準ライブラリ</a></li><li><a href="#jvm-backend">JVMバックエンド</a></li><li><a href="#javascript-backend">JavaScriptバックエンド</a></li></ul><h2 id="マルチプラットフォームプロジェクト-実験的機能" tabindex="-1">マルチプラットフォームプロジェクト (実験的機能) <a class="header-anchor" href="#マルチプラットフォームプロジェクト-実験的機能" aria-label="Permalink to &quot;マルチプラットフォームプロジェクト (実験的機能)&quot;">​</a></h2><p>マルチプラットフォームプロジェクトはKotlin 1.2で導入された新しい<strong>実験的機能</strong>であり、Kotlinがサポートするターゲットプラットフォーム（JVM、JavaScript、そして（将来的には）Native）間でコードを再利用できます。マルチプラットフォームプロジェクトでは、3種類のモジュールがあります。</p><ul><li><em>共通 (common)</em> モジュールには、どのプラットフォームにも固有ではないコード、およびプラットフォーム依存APIの実装を持たない宣言が含まれます。</li><li><em>プラットフォーム (platform)</em> モジュールには、特定のプラットフォームに対する共通モジュール内のプラットフォーム依存宣言の実装、およびその他のプラットフォーム依存コードが含まれます。</li><li><em>通常 (regular)</em> モジュールは特定のプラットフォームをターゲットとし、プラットフォームモジュールの依存関係になることも、プラットフォームモジュールに依存することもできます。</li></ul><p>特定のプラットフォーム向けにマルチプラットフォームプロジェクトをコンパイルすると、共通部分とプラットフォーム固有部分の両方のコードが生成されます。</p><p>マルチプラットフォームプロジェクトサポートの主要な機能は、<em>expected</em>（期待される）宣言と<em>actual</em>（実際の）宣言を通じて、共通コードからプラットフォーム固有部分への依存関係を表現できることです。<em>expected</em> 宣言はAPI（クラス、インターフェース、アノテーション、トップレベル宣言など）を指定します。<em>actual</em> 宣言は、そのAPIのプラットフォーム依存の実装であるか、または外部ライブラリの既存のAPI実装を参照する型エイリアスです。以下に例を示します。</p><p>共通コードの場合:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// expected platform-specific API:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> hello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(world: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // usage of the expected API:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> greeting </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> hello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;multiplatform world&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(greeting)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> URL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(spec: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    open</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getHost</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    open</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getPath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>JVMプラットフォームコードの場合:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> hello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(world: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;Hello, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$world</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">, on the JVM platform!&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// using existing platform-specific implementation:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typealias</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> URL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.net.URL</span></span></code></pre></div><p>詳細およびマルチプラットフォームプロジェクトの構築手順については、<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/get-started.html" target="_blank" rel="noreferrer">マルチプラットフォームプログラミングのドキュメント</a>を参照してください。</p><h2 id="その他の言語機能" tabindex="-1">その他の言語機能 <a class="header-anchor" href="#その他の言語機能" aria-label="Permalink to &quot;その他の言語機能&quot;">​</a></h2><h3 id="アノテーションにおける配列リテラル" tabindex="-1">アノテーションにおける配列リテラル <a class="header-anchor" href="#アノテーションにおける配列リテラル" aria-label="Permalink to &quot;アノテーションにおける配列リテラル&quot;">​</a></h3><p>Kotlin 1.2以降、アノテーションの配列引数は、<code>arrayOf</code> 関数ではなく、新しい配列リテラル構文で渡せるようになりました。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@CacheConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cacheNames </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;books&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;default&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BookRepositoryImpl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>配列リテラル構文は、アノテーション引数に限定されます。</p><h3 id="lateinit-トップレベルプロパティとローカル変数" tabindex="-1">lateinit トップレベルプロパティとローカル変数 <a class="header-anchor" href="#lateinit-トップレベルプロパティとローカル変数" aria-label="Permalink to &quot;lateinit トップレベルプロパティとローカル変数&quot;">​</a></h3><p><code>lateinit</code> 修飾子は、トップレベルプロパティとローカル変数で使用できるようになりました。後者は、例えば、あるオブジェクトのコンストラクタ引数として渡されるラムダが、後で定義する必要がある別のオブジェクトを参照する場合などに使用できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> next: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Node</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // A cycle of three nodes:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    lateinit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> third: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> second </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, next </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { third })</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> first </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, next </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { second })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    third </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, next </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { first })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nodes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> generateSequence</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(first) { it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Values in the cycle: \${nodes.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">take</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">joinToString</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> { it.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">() }}, ...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="lateinit-var-が初期化されているかどうかの確認" tabindex="-1">lateinit var が初期化されているかどうかの確認 <a class="header-anchor" href="#lateinit-var-が初期化されているかどうかの確認" aria-label="Permalink to &quot;lateinit var が初期化されているかどうかの確認&quot;">​</a></h3><p><code>lateinit var</code> が初期化されているかどうかを、プロパティ参照に対して <code>isInitialized</code> を使用して確認できるようになりました。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    lateinit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lateinitVar: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> initializationLogic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;isInitialized before assignment: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lateinitVar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.isInitialized)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        lateinitVar </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;value&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;isInitialized after assignment: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lateinitVar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.isInitialized)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">initializationLogic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="デフォルトの関数型パラメーターを持つインライン関数" tabindex="-1">デフォルトの関数型パラメーターを持つインライン関数 <a class="header-anchor" href="#デフォルトの関数型パラメーターを持つインライン関数" aria-label="Permalink to &quot;デフォルトの関数型パラメーターを持つインライン関数&quot;">​</a></h3><p>インライン関数は、インライン化された関数型パラメーターにデフォルト値を持たせることが許可されるようになりました。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">inline</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">E</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Iterable</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">E</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">strings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(transform: (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">E</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) -&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(it) }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> defaultStrings </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">strings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> customStrings </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">strings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$it</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;defaultStrings = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$defaultStrings</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;customStrings = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$customStrings</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="明示的なキャスト情報が型推論に使用される" tabindex="-1">明示的なキャスト情報が型推論に使用される <a class="header-anchor" href="#明示的なキャスト情報が型推論に使用される" aria-label="Permalink to &quot;明示的なキャスト情報が型推論に使用される&quot;">​</a></h3><p>Kotlinコンパイラは、型キャストからの情報を型推論で使用できるようになりました。型パラメーター <code>T</code> を返すジェネリックメソッドを呼び出し、その戻り値を特定の型 <code>Foo</code> にキャストする場合、コンパイラは、この呼び出しの <code>T</code> が型 <code>Foo</code> にバインドされる必要があることを理解します。</p><p>これはAndroid開発者にとって特に重要です。コンパイラがAndroid APIレベル26におけるジェネリックな <code>findViewById</code> 呼び出しを正しく解析できるようになったためです。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> button </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> findViewById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(R.id.button) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Button</span></span></code></pre></div><h3 id="スマートキャストの改善" tabindex="-1">スマートキャストの改善 <a class="header-anchor" href="#スマートキャストの改善" aria-label="Permalink to &quot;スマートキャストの改善&quot;">​</a></h3><p>変数がセーフコール式から代入され、nullチェックされる場合、スマートキャストはセーフコールレシーバーにも適用されるようになりました。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> countFirst</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> firstChar </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? CharSequence)?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">firstOrNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (firstChar </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> firstChar } </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// s: Any is smart cast to CharSequence</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> firstItem </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? Iterable</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;*&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">firstOrNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (firstItem </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> firstItem } </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// s: Any is smart cast to Iterable&lt;*&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> string </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;abacaba&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> countInString </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> countFirst</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(string)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;called on </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;$string\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$countInString</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> list </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> countInList </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> countFirst</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(list)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;called on </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$list</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$countInList</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>また、ラムダ内のスマートキャストが、ラムダの前にのみ変更されるローカル変数に対しても許可されるようになりました。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> flag </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> args.size </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (flag) x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Yahoo!&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x.length) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// x is smart cast to String</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="this-foo-の省略形としての-foo-のサポート" tabindex="-1"><code>this::foo</code> の省略形としての <code>::foo</code> のサポート <a class="header-anchor" href="#this-foo-の省略形としての-foo-のサポート" aria-label="Permalink to &quot;\`this::foo\` の省略形としての \`::foo\` のサポート&quot;">​</a></h3><p><code>this</code> のメンバーへの束縛された呼び出し可能参照は、明示的なレシーバーなしで、<code>this::foo</code> の代わりに <code>::foo</code> と記述できるようになりました。これにより、外側のレシーバーのメンバーを参照するラムダ内での呼び出し可能参照の使用がより便利になります。</p><h3 id="破壊的変更-tryブロック後の堅牢なスマートキャスト" tabindex="-1">破壊的変更: tryブロック後の堅牢なスマートキャスト <a class="header-anchor" href="#破壊的変更-tryブロック後の堅牢なスマートキャスト" aria-label="Permalink to &quot;破壊的変更: tryブロック後の堅牢なスマートキャスト&quot;">​</a></h3><p>以前、Kotlinは <code>try</code> ブロック内で行われた代入を、ブロック後のスマートキャストに使用していました。これは型安全性とnull安全性を損ない、実行時エラーにつながる可能性がありました。このリリースではこの問題を修正し、スマートキャストをより厳密にしましたが、そのようなスマートキャストに依存していた一部のコードが動作しなくなる可能性があります。</p><p>以前のスマートキャストの挙動に戻すには、フォールバックフラグ <code>-Xlegacy-smart-cast-after-try</code> をコンパイラ引数として渡してください。このフラグはKotlin 1.3で非推奨になります。</p><h3 id="非推奨-copy-をオーバーライドするデータクラス" tabindex="-1">非推奨: <code>copy</code> をオーバーライドするデータクラス <a class="header-anchor" href="#非推奨-copy-をオーバーライドするデータクラス" aria-label="Permalink to &quot;非推奨: \`copy\` をオーバーライドするデータクラス&quot;">​</a></h3><p>すでに同じシグネチャを持つ <code>copy</code> 関数を持っていた型から派生したデータクラスの場合、データクラスのために生成された <code>copy</code> 実装はスーパータイプからのデフォルト値を使用し、直感に反する挙動につながるか、スーパータイプにデフォルトパラメーターがない場合、実行時に失敗しました。</p><p><code>copy</code> の競合を引き起こす継承は、Kotlin 1.2で警告とともに非推奨になり、Kotlin 1.3ではエラーになります。</p><h3 id="非推奨-enumエントリ内のネストされた型" tabindex="-1">非推奨: enumエントリ内のネストされた型 <a class="header-anchor" href="#非推奨-enumエントリ内のネストされた型" aria-label="Permalink to &quot;非推奨: enumエントリ内のネストされた型&quot;">​</a></h3><p>enumエントリ内で、<code>inner class</code> ではないネストされた型を定義することは、初期化ロジックの問題のため非推奨になりました。これはKotlin 1.2では警告を発し、Kotlin 1.3ではエラーになります。</p><h3 id="非推奨-varargに対する単一の名前付き引数" tabindex="-1">非推奨: varargに対する単一の名前付き引数 <a class="header-anchor" href="#非推奨-varargに対する単一の名前付き引数" aria-label="Permalink to &quot;非推奨: varargに対する単一の名前付き引数&quot;">​</a></h3><p>アノテーションにおける配列リテラルとの一貫性を保つため、<code>vararg</code> パラメーターに単一の項目を名前付き形式（<code>foo(items = i)</code>）で渡すことは非推奨になりました。対応する配列ファクトリ関数とともにスプレッド演算子を使用してください。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(items </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">arrayOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><p>このようなケースでは、冗長な配列作成を削除する最適化が施されており、パフォーマンス低下を防ぎます。単一引数形式はKotlin 1.2で警告を発し、Kotlin 1.3で削除される予定です。</p><h3 id="非推奨-throwable-を継承するジェネリッククラスの内部クラス" tabindex="-1">非推奨: <code>Throwable</code> を継承するジェネリッククラスの内部クラス <a class="header-anchor" href="#非推奨-throwable-を継承するジェネリッククラスの内部クラス" aria-label="Permalink to &quot;非推奨: \`Throwable\` を継承するジェネリッククラスの内部クラス&quot;">​</a></h3><p><code>Throwable</code> を継承するジェネリック型の内部クラスは、throw-catchシナリオで型安全性を侵害する可能性があったため、非推奨になりました。Kotlin 1.2では警告、Kotlin 1.3ではエラーになります。</p><h3 id="非推奨-読み取り専用プロパティのバッキングフィールドのミューテーション" tabindex="-1">非推奨: 読み取り専用プロパティのバッキングフィールドのミューテーション <a class="header-anchor" href="#非推奨-読み取り専用プロパティのバッキングフィールドのミューテーション" aria-label="Permalink to &quot;非推奨: 読み取り専用プロパティのバッキングフィールドのミューテーション&quot;">​</a></h3><p>カスタムゲッターで <code>field = ...</code> を代入することによる読み取り専用プロパティのバッキングフィールドの変更は非推奨になりました。Kotlin 1.2では警告、Kotlin 1.3ではエラーになります。</p><h2 id="標準ライブラリ" tabindex="-1">標準ライブラリ <a class="header-anchor" href="#標準ライブラリ" aria-label="Permalink to &quot;標準ライブラリ&quot;">​</a></h2><h3 id="kotlin標準ライブラリアーティファクトと分割パッケージ" tabindex="-1">Kotlin標準ライブラリアーティファクトと分割パッケージ <a class="header-anchor" href="#kotlin標準ライブラリアーティファクトと分割パッケージ" aria-label="Permalink to &quot;Kotlin標準ライブラリアーティファクトと分割パッケージ&quot;">​</a></h3><p>Kotlin標準ライブラリは、Java 9モジュールシステムと完全に互換性を持つようになりました。Java 9モジュールシステムは分割パッケージ（同じパッケージ内のクラスを宣言する複数のjarファイル）を禁止しています。これをサポートするために、新しいアーティファクト <code>kotlin-stdlib-jdk7</code> と <code>kotlin-stdlib-jdk8</code> が導入されました。これらは古い <code>kotlin-stdlib-jre7</code> および <code>kotlin-stdlib-jre8</code> を置き換えるものです。</p><p>新しいアーティファクトの宣言は、Kotlinの観点からは同じパッケージ名の下で可視ですが、Javaでは異なるパッケージ名になります。したがって、新しいアーティファクトに切り替えても、ソースコードの変更は不要です。</p><p>新しいモジュールシステムとの互換性を確保するために行われたもう1つの変更は、<code>kotlin-reflect</code> ライブラリから <code>kotlin.reflect</code> パッケージ内の非推奨の宣言を削除したことです。これらを使用していた場合は、Kotlin 1.1以降サポートされている <code>kotlin.reflect.full</code> パッケージ内の宣言を使用するように切り替える必要があります。</p><h3 id="windowed、chunked、zipwithnext" tabindex="-1">windowed、chunked、zipWithNext <a class="header-anchor" href="#windowed、chunked、zipwithnext" aria-label="Permalink to &quot;windowed、chunked、zipWithNext&quot;">​</a></h3><p><code>Iterable&lt;T&gt;</code>、<code>Sequence&lt;T&gt;</code>、および <code>CharSequence</code> の新しい拡張が追加され、バッファリングやバッチ処理（<code>chunked</code>）、スライディングウィンドウおよび移動平均の計算（<code>windowed</code>）、連続するアイテムのペアの処理（<code>zipWithNext</code>）などのユースケースに対応します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> items </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> it }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> chunkedIntoLists </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> items.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">chunked</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> points3d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> items.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">chunked</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { (x, y, z) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Triple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, y, z) }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> windowed </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> items.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">windowed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> slidingAverage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> items.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">windowed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">average</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pairwiseDifferences </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> items.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">zipWithNext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { a, b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;items: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$items</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;chunked into lists: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$chunkedIntoLists</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;3D points: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$points3d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;windowed by 4: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$windowed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sliding average by 4: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$slidingAverage</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;pairwise differences: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$pairwiseDifferences</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="fill、replaceall、shuffle-shuffled" tabindex="-1">fill、replaceAll、shuffle/shuffled <a class="header-anchor" href="#fill、replaceall、shuffle-shuffled" aria-label="Permalink to &quot;fill、replaceAll、shuffle/shuffled&quot;">​</a></h3><p>リストを操作するための拡張関数のセットが追加されました。<code>MutableList</code> 用の <code>fill</code>、<code>replaceAll</code>、<code>shuffle</code>、および読み取り専用 <code>List</code> 用の <code>shuffled</code> です。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> items </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toMutableList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    items.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">shuffle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Shuffled items: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$items</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    items.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replaceAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Items doubled: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$items</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    items.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fill</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Items filled with 5: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$items</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="kotlin-stdlibにおける数学演算" tabindex="-1">kotlin-stdlibにおける数学演算 <a class="header-anchor" href="#kotlin-stdlibにおける数学演算" aria-label="Permalink to &quot;kotlin-stdlibにおける数学演算&quot;">​</a></h3><p>長年の要望に応えて、Kotlin 1.2ではJVMとJSで共通の数学演算用の <code>kotlin.math</code> APIが追加され、以下のものが含まれます。</p><ul><li>定数: <code>PI</code> および <code>E</code></li><li>三角関数: <code>cos</code>、<code>sin</code>、<code>tan</code> とその逆関数: <code>acos</code>、<code>asin</code>、<code>atan</code>、<code>atan2</code></li><li>双曲線関数: <code>cosh</code>、<code>sinh</code>、<code>tanh</code> とその逆関数: <code>acosh</code>、<code>asinh</code>、<code>atanh</code></li><li>指数関数: <code>pow</code>（拡張関数）、<code>sqrt</code>、<code>hypot</code>、<code>exp</code>、<code>expm1</code></li><li>対数関数: <code>log</code>、<code>log2</code>、<code>log10</code>、<code>ln</code>、<code>ln1p</code></li><li>丸め処理: <ul><li><code>ceil</code>、<code>floor</code>、<code>truncate</code>、<code>round</code>（最近接偶数への丸め）関数</li><li><code>roundToInt</code>、<code>roundToLong</code>（最近接整数への丸め）拡張関数</li></ul></li><li>符号と絶対値: <ul><li><code>abs</code> および <code>sign</code> 関数</li><li><code>absoluteValue</code> および <code>sign</code> 拡張プロパティ</li><li><code>withSign</code> 拡張関数</li></ul></li><li>2つの値の <code>max</code> および <code>min</code></li><li>二進数表現: <ul><li><code>ulp</code> 拡張プロパティ</li><li><code>nextUp</code>、<code>nextDown</code>、<code>nextTowards</code> 拡張関数</li><li><code>toBits</code>、<code>toRawBits</code>、<code>Double.fromBits</code>（これらは <code>kotlin</code> パッケージにあります）</li></ul></li></ul><p>同じ関数セット（ただし定数を除く）は <code>Float</code> 引数でも利用可能です。</p><h3 id="bigintegerおよびbigdecimalの演算子と変換" tabindex="-1">BigIntegerおよびBigDecimalの演算子と変換 <a class="header-anchor" href="#bigintegerおよびbigdecimalの演算子と変換" aria-label="Permalink to &quot;BigIntegerおよびBigDecimalの演算子と変換&quot;">​</a></h3><p>Kotlin 1.2では、<code>BigInteger</code> および <code>BigDecimal</code> の操作と、他の数値型からの生成のための関数セットを導入しました。これらは以下の通りです。</p><ul><li><code>Int</code> および <code>Long</code> 用の <code>toBigInteger</code></li><li><code>Int</code>、<code>Long</code>、<code>Float</code>、<code>Double</code>、および <code>BigInteger</code> 用の <code>toBigDecimal</code></li><li>算術およびビット演算子関数: <ul><li>二項演算子 <code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>、<code>%</code> および中置関数 <code>and</code>、<code>or</code>、<code>xor</code>、<code>shl</code>、<code>shr</code></li><li>単項演算子 <code>-</code>、<code>++</code>、<code>--</code>、および関数 <code>inv</code></li></ul></li></ul><h3 id="浮動小数点からビットへの変換" tabindex="-1">浮動小数点からビットへの変換 <a class="header-anchor" href="#浮動小数点からビットへの変換" aria-label="Permalink to &quot;浮動小数点からビットへの変換&quot;">​</a></h3><p><code>Double</code> および <code>Float</code> をビット表現に、またはビット表現から変換するための新しい関数が追加されました。</p><ul><li><code>Double</code> 用に <code>Long</code> を、<code>Float</code> 用に <code>Int</code> を返す <code>toBits</code> および <code>toRawBits</code></li><li>ビット表現から浮動小数点数を作成するための <code>Double.fromBits</code> および <code>Float.fromBits</code></li></ul><h3 id="regexがシリアライズ可能に" tabindex="-1">Regexがシリアライズ可能に <a class="header-anchor" href="#regexがシリアライズ可能に" aria-label="Permalink to &quot;Regexがシリアライズ可能に&quot;">​</a></h3><p><code>kotlin.text.Regex</code> クラスが <code>Serializable</code> になり、シリアライズ可能な階層で使用できるようになりました。</p><h3 id="closeable-use-は利用可能であれば-throwable-addsuppressed-を呼び出す" tabindex="-1"><code>Closeable.use</code> は利用可能であれば <code>Throwable.addSuppressed</code> を呼び出す <a class="header-anchor" href="#closeable-use-は利用可能であれば-throwable-addsuppressed-を呼び出す" aria-label="Permalink to &quot;\`Closeable.use\` は利用可能であれば \`Throwable.addSuppressed\` を呼び出す&quot;">​</a></h3><p><code>Closeable.use</code> 関数は、他の例外の後にリソースを閉じている最中に例外がスローされた場合、<code>Throwable.addSuppressed</code> を呼び出すようになりました。</p><p>この挙動を有効にするには、依存関係に <code>kotlin-stdlib-jdk7</code> が必要です。</p><h2 id="jvmバックエンド" tabindex="-1">JVMバックエンド <a class="header-anchor" href="#jvmバックエンド" aria-label="Permalink to &quot;JVMバックエンド&quot;">​</a></h2><h3 id="コンストラクタ呼び出しの正規化" tabindex="-1">コンストラクタ呼び出しの正規化 <a class="header-anchor" href="#コンストラクタ呼び出しの正規化" aria-label="Permalink to &quot;コンストラクタ呼び出しの正規化&quot;">​</a></h3><p>バージョン1.0以来、Kotlinはtry-catch式やインライン関数呼び出しのような、複雑な制御フローを持つ式をサポートしてきました。そのようなコードはJava仮想マシン仕様によれば有効です。残念ながら、一部のバイトコード処理ツールでは、そのような式がコンストラクタ呼び出しの引数に存在する場合、うまく処理できません。</p><p>このようなバイトコード処理ツールのユーザーのためにこの問題を軽減するため、そのような構文に対してよりJavaライクなバイトコードを生成するようコンパイラに指示するコマンドラインコンパイラオプション（<code>-Xnormalize-constructor-calls=MODE</code>）を追加しました。ここで <code>MODE</code> は以下のいずれかです。</p><ul><li><code>disable</code>（デフォルト）– Kotlin 1.0および1.1と同様の方法でバイトコードを生成します。</li><li><code>enable</code> – コンストラクタ呼び出しに対してJavaライクなバイトコードを生成します。これにより、クラスのロードと初期化の順序が変更される可能性があります。</li><li><code>preserve-class-initialization</code> – コンストラクタ呼び出しに対してJavaライクなバイトコードを生成し、クラスの初期化順序が保持されるようにします。これはアプリケーション全体のパフォーマンスに影響を与える可能性があります。複数のクラス間で共有され、クラス初期化時に更新される複雑な状態がある場合にのみ使用してください。</li></ul><p>「手動」での回避策は、制御フローを持つサブ式の値を、呼び出し引数内で直接評価する代わりに変数に格納することです。これは <code>-Xnormalize-constructor-calls=enable</code> と同様です。</p><h3 id="javaデフォルトメソッドの呼び出し" tabindex="-1">Javaデフォルトメソッドの呼び出し <a class="header-anchor" href="#javaデフォルトメソッドの呼び出し" aria-label="Permalink to &quot;Javaデフォルトメソッドの呼び出し&quot;">​</a></h3><p>Kotlin 1.2より前では、JVM 1.6をターゲットにしている間にJavaデフォルトメソッドをオーバーライドするインターフェースメンバーは、<code>super</code> 呼び出しで「<code>Super calls to Java default methods are deprecated in JVM target 1.6. Recompile with &#39;-jvm-target 1.8&#39;</code>」という警告を発していました。Kotlin 1.2では、代わりに<strong>エラー</strong>が発生するため、そのようなコードはJVMターゲット1.8でコンパイルする必要があります。</p><h3 id="破壊的変更-プラットフォーム型に対する-x-equals-null-の一貫した挙動" tabindex="-1">破壊的変更: プラットフォーム型に対する <code>x.equals(null)</code> の一貫した挙動 <a class="header-anchor" href="#破壊的変更-プラットフォーム型に対する-x-equals-null-の一貫した挙動" aria-label="Permalink to &quot;破壊的変更: プラットフォーム型に対する \`x.equals(null)\` の一貫した挙動&quot;">​</a></h3><p>Javaプリミティブ（<code>Int!</code>, <code>Boolean!</code>, <code>Short!</code>, <code>Long!</code>, <code>Float!</code>, <code>Double!</code>, <code>Char!</code>）にマッピングされるプラットフォーム型に対して <code>x.equals(null)</code> を呼び出すと、<code>x</code> がnullの場合に誤って <code>true</code> を返していました。Kotlin 1.2以降、プラットフォーム型のnull値に対して <code>x.equals(...)</code> を呼び出すと<strong>NPE（NullPointerException）がスローされます</strong>（ただし、<code>x == ...</code> はスローしません）。</p><p>1.2より前の挙動に戻すには、コンパイラにフラグ <code>-Xno-exception-on-explicit-equals-for-boxed-null</code> を渡してください。</p><h3 id="破壊的変更-インライン化された拡張レシーバーを介したプラットフォームnullのエスケープの修正" tabindex="-1">破壊的変更: インライン化された拡張レシーバーを介したプラットフォームnullのエスケープの修正 <a class="header-anchor" href="#破壊的変更-インライン化された拡張レシーバーを介したプラットフォームnullのエスケープの修正" aria-label="Permalink to &quot;破壊的変更: インライン化された拡張レシーバーを介したプラットフォームnullのエスケープの修正&quot;">​</a></h3><p>プラットフォーム型のnull値で呼び出されたインライン拡張関数は、レシーバーのnullチェックを行わず、その結果、nullが他のコードにエスケープすることを許容していました。Kotlin 1.2では、呼び出し箇所でこのチェックを強制し、レシーバーがnullの場合は例外をスローします。</p><p>以前の挙動に戻すには、コンパイラにフォールバックフラグ <code>-Xno-receiver-assertions</code> を渡してください。</p><h2 id="javascriptバックエンド" tabindex="-1">JavaScriptバックエンド <a class="header-anchor" href="#javascriptバックエンド" aria-label="Permalink to &quot;JavaScriptバックエンド&quot;">​</a></h2><h3 id="typedarrayサポートがデフォルトで有効に" tabindex="-1">TypedArrayサポートがデフォルトで有効に <a class="header-anchor" href="#typedarrayサポートがデフォルトで有効に" aria-label="Permalink to &quot;TypedArrayサポートがデフォルトで有効に&quot;">​</a></h3><p>Kotlinのプリミティブ配列（<code>IntArray</code>、<code>DoubleArray</code> など）を<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays" target="_blank" rel="noreferrer">JavaScriptのTypedArray</a>に変換するJS TypedArrayサポートは、以前はオプトイン機能でしたが、デフォルトで有効になりました。</p><h2 id="ツール" tabindex="-1">ツール <a class="header-anchor" href="#ツール" aria-label="Permalink to &quot;ツール&quot;">​</a></h2><h3 id="警告をエラーとして扱う" tabindex="-1">警告をエラーとして扱う <a class="header-anchor" href="#警告をエラーとして扱う" aria-label="Permalink to &quot;警告をエラーとして扱う&quot;">​</a></h3><p>コンパイラは、すべての警告をエラーとして扱うオプションを提供するようになりました。コマンドラインで <code>-Werror</code> を使用するか、以下のGradleスニペットを使用してください。</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compileKotlin {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    kotlinOptions</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">allWarningsAsErrors </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,102)]))}const g=i(h,[["render",t]]);export{o as __pageData,g as default};
