import{_ as e,c as o,o as i,ag as t}from"./chunks/framework.Bksy39di.js";const c=JSON.parse('{"title":"不同平台上的默认 UI 行为","description":"","frontmatter":{},"headers":[],"relativePath":"kmp/compose-platform-specifics.md","filePath":"kmp/compose-platform-specifics.md","lastUpdated":1755516278000}'),r={name:"kmp/compose-platform-specifics.md"};function l(p,a,s,n,d,h){return i(),o("div",null,a[0]||(a[0]=[t('<h1 id="不同平台上的默认-ui-行为" tabindex="-1">不同平台上的默认 UI 行为 <a class="header-anchor" href="#不同平台上的默认-ui-行为" aria-label="Permalink to &quot;不同平台上的默认 UI 行为&quot;">​</a></h1><p>Compose Multiplatform 旨在帮助您开发出在不同平台行为尽可能相似的应用程序。 在本页面中，您将了解到在使用 Compose Multiplatform 为不同平台编写共享 UI 代码时， 需要预期的不可避免的差异或临时折衷方案。</p><h2 id="项目结构" tabindex="-1">项目结构 <a class="header-anchor" href="#项目结构" aria-label="Permalink to &quot;项目结构&quot;">​</a></h2><p>无论您面向哪个平台，每个平台都需要一个专属的入口点：</p><ul><li>对于 Android，它是 <code>Activity</code>，其作用是显示来自公共代码的主可组合项。</li><li>对于 iOS 应用，它是 <code>@main</code> 类或结构体，用于初始化应用。</li><li>对于 JVM 应用，它是 <code>main()</code> 函数，用于启动应用程序，进而启动主公共可组合项。</li><li>对于 Kotlin/JS 或 Kotlin/Wasm 应用，它是 <code>main()</code> 函数，用于将主公共代码可组合项 附加到网页。</li></ul><p>您应用所需的某些平台特有 API 可能不具备多平台支持， 您将不得不在平台特有的源代码集中实现这些 API 的调用。 在此之前，请查阅 <a href="https://klibs.io/" target="_blank" rel="noreferrer">klibs.io</a>，这是一个 JetBrains 项目，旨在全面收录 所有可用的 Kotlin Multiplatform 库。 目前已有适用于网络代码、数据库、协程等多种场景的库可用。</p><h2 id="输入法" tabindex="-1">输入法 <a class="header-anchor" href="#输入法" aria-label="Permalink to &quot;输入法&quot;">​</a></h2><h3 id="软键盘" tabindex="-1">软键盘 <a class="header-anchor" href="#软键盘" aria-label="Permalink to &quot;软键盘&quot;">​</a></h3><p>每个平台处理软键盘的方式可能略有不同，包括文本字段激活时键盘的显示方式。</p><p>Compose Multiplatform 采用了 <a href="https://developer.android.com/develop/ui/compose/system/insets" target="_blank" rel="noreferrer">Compose 窗口插边处理方法</a> 并在 iOS 上模仿了它， 以考虑 <a href="https://developer.apple.com/documentation/UIKit/positioning-content-relative-to-the-safe-area" target="_blank" rel="noreferrer">安全区域</a>。 根据您的实现，软键盘在 iOS 上的位置可能会略有不同。 请务必检测键盘是否会遮盖两个平台上的重要 UI 元素。</p><p>Compose Multiplatform 目前不支持更改默认 IME action，例如， 显示放大镜或复选标记，而不是通常的 ↵ 图标。</p><h3 id="触摸和鼠标支持" tabindex="-1">触摸和鼠标支持 <a class="header-anchor" href="#触摸和鼠标支持" aria-label="Permalink to &quot;触摸和鼠标支持&quot;">​</a></h3><p>当前的桌面实现将所有指针操作解释为鼠标手势， 因此，不支持多点触控手势。 例如，桌面平台的 Compose Multiplatform 无法实现常见的捏合缩放手势， 因为它需要同时处理两次触摸。</p><h2 id="ui-行为和外观" tabindex="-1">UI 行为和外观 <a class="header-anchor" href="#ui-行为和外观" aria-label="Permalink to &quot;UI 行为和外观&quot;">​</a></h2><h3 id="平台特有的功能" tabindex="-1">平台特有的功能 <a class="header-anchor" href="#平台特有的功能" aria-label="Permalink to &quot;平台特有的功能&quot;">​</a></h3><p>一些常见的 UI 元素未被 Compose Multiplatform 覆盖，也无法使用该框架进行定制。 因此，您应该预期它们在不同平台上的外观会不同。</p><p>原生弹窗视图就是一个例子： 当您在 Compose Multiplatform 文本字段中选择文本时，像 <strong>复制</strong> 或 <strong>翻译</strong> 这样的默认建议操作 是应用运行所在平台特有的。</p><h3 id="滚动物理特性" tabindex="-1">滚动物理特性 <a class="header-anchor" href="#滚动物理特性" aria-label="Permalink to &quot;滚动物理特性&quot;">​</a></h3><p>对于 Android 和 iOS，滚动感受与平台保持一致。 对于桌面平台，滚动支持仅限于鼠标滚轮（如 <a href="#touch-and-mouse-support">触摸和鼠标支持</a> 中所述）。</p><h3 id="互操作视图" tabindex="-1">互操作视图 <a class="header-anchor" href="#互操作视图" aria-label="Permalink to &quot;互操作视图&quot;">​</a></h3><p>如果您想在公共可组合项中嵌入原生视图，或反之， 您需要熟悉 Compose Multiplatform 支持的平台特有机制。</p><p>对于 iOS，有针对与 <a href="./compose-swiftui-integration">SwiftUI</a> 和 <a href="./compose-uikit-integration">UIKit</a> 进行互操作代码的单独指南。</p><p>对于桌面平台，Compose Multiplatform 支持 <a href="./compose-desktop-swing-interoperability">Swing 互操作性</a>。</p><h3 id="返回手势" tabindex="-1">返回手势 <a class="header-anchor" href="#返回手势" aria-label="Permalink to &quot;返回手势&quot;">​</a></h3><p>Android 设备默认支持返回手势，并且每个屏幕都会以某种方式响应 <strong>返回</strong> 按钮。</p><p>在 iOS 上，默认没有返回手势，尽管鼓励开发者实现类似的功能 以满足用户体验预期。 Compose Multiplatform for iOS 默认支持返回手势，以模仿 Android 功能。</p><p>在桌面平台上，Compose Multiplatform 使用 <strong>Esc</strong> 键作为默认返回触发器。</p><p>有关详细信息，请参见 <a href="./compose-navigation#back-gesture">undefined</a> 节。</p><h3 id="文本" tabindex="-1">文本 <a class="header-anchor" href="#文本" aria-label="Permalink to &quot;文本&quot;">​</a></h3><p>对于文本，Compose Multiplatform 不保证不同平台之间像素级完美一致：</p><ul><li>如果您没有显式设置字体，每个系统都会为您的文本分配不同的默认字体。</li><li>即使是相同的字体，每个平台特有的字母抗锯齿机制也可能导致明显的差异。</li></ul><p>这不会对用户体验产生显著影响。相反，默认字体在每个平台上都会如预期般显示。 然而，像素差异可能会干扰截屏测试，例如。</p><h2 id="开发者体验" tabindex="-1">开发者体验 <a class="header-anchor" href="#开发者体验" aria-label="Permalink to &quot;开发者体验&quot;">​</a></h2><h3 id="预览" tabindex="-1">预览 <a class="header-anchor" href="#预览" aria-label="Permalink to &quot;预览&quot;">​</a></h3><p><em>预览</em> 是 IDE 中可组合项的不可交互的布局呈现。</p><p>要查看可组合项的预览：</p><ol><li>如果项目中没有 Android 目标平台，请添加一个（预览机制使用 Android 库）。</li><li>在公共代码中使用 <code>@Preview</code> 注解标记您想要预览的可组合项。</li><li>切换到编辑器窗口中的 <strong>分割</strong> 视图或 <strong>设计</strong> 视图。 如果尚未构建项目，它将提示您首次构建。</li></ol><p>在 IntelliJ IDEA 和 Android Studio 中，您都将能够看到当前文件中所有 使用 <code>@Preview</code> 注解标记的可组合项的初始布局。</p><h3 id="热重载" tabindex="-1">热重载 <a class="header-anchor" href="#热重载" aria-label="Permalink to &quot;热重载&quot;">​</a></h3><p><em>热重载</em> 是指应用程序在无需额外输入的情况下即时反映代码更改。 在 Compose Multiplatform 中，热重载功能仅适用于 JVM（桌面）目标平台。 但是，您可以使用它来快速解决问题，然后再切换到目标平台进行细致调整。</p><p>要了解更多信息，请参阅我们的 <a href="./compose-hot-reload">Compose 热重载</a> 文章。</p><h2 id="下一步" tabindex="-1">下一步 <a class="header-anchor" href="#下一步" aria-label="Permalink to &quot;下一步&quot;">​</a></h2><p>阅读更多关于 Compose Multiplatform 对以下组件的实现：</p><ul><li><a href="./compose-multiplatform-resources">资源</a></li><li><a href="./compose-lifecycle">生命周期</a></li><li><a href="./compose-viewmodel">公共 ViewModel</a></li><li><a href="./compose-navigation-routing">导航和路由</a></li></ul>',44)]))}const u=e(r,[["render",l]]);export{c as __pageData,u as default};
