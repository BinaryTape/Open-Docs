import{_ as y,C as r,c as x,o as S,G as o,w as n,j as t,a as e}from"./chunks/framework.Bksy39di.js";const $=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ko/ktor/server-auto-reload.md","filePath":"ko/ktor/server-auto-reload.md","lastUpdated":1755457140000}'),A={name:"ko/ktor/server-auto-reload.md"};function N(P,l,E,I,K,G){const f=r("tldr"),k=r("link-summary"),p=r("Links"),b=r("emphasis"),u=r("list"),a=r("chapter"),d=r("Path"),s=r("code-block"),i=r("tab"),m=r("tabs"),g=r("ui-path"),v=r("tip"),w=r("topic");return S(),x("div",null,[o(w,{"xsi:noNamespaceSchemaLocation":"https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd","xmlns:xsi":"http://www.w3.org/2001/XMLSchema-instance",title:"자동 리로드",id:"server-auto-reload","help-id":"Auto_reload"},{default:n(()=>[o(f,null,{default:n(()=>l[0]||(l[0]=[t("p",null,[t("b",null,"코드 예시"),e(": "),t("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/autoreload-engine-main"},"autoreload-engine-main"),e(", "),t("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/autoreload-embedded-server"},"autoreload-embedded-server")],-1)])),_:1}),o(k,null,{default:n(()=>l[1]||(l[1]=[e(" 코드 변경 시 애플리케이션 클래스를 다시 로드하는 자동 리로드(Auto-reload) 사용법을 알아보세요. ")])),_:1}),t("p",null,[o(p,{href:"/ktor/server-run",summary:"Ktor 서버 애플리케이션 실행 방법을 알아보세요."},{default:n(()=>l[2]||(l[2]=[e("서버 재시작")])),_:1}),l[4]||(l[4]=e("은 개발 중에 시간이 걸릴 수 있습니다. Ktor는 ")),o(b,null,{default:n(()=>l[3]||(l[3]=[e("자동 리로드")])),_:1}),l[5]||(l[5]=e("를 사용하여 이러한 제한을 극복할 수 있도록 해줍니다. 자동 리로드는 코드 변경 시 애플리케이션 클래스를 다시 로드하여 빠른 피드백 루프를 제공합니다. 자동 리로드를 사용하려면 다음 단계를 따르세요: "))]),o(u,{style:{}},{default:n(()=>l[6]||(l[6]=[t("li",null,[t("p",null,[t("a",{href:"#enable"},"개발 모드 활성화")])],-1),t("li",null,[t("p",null,[e(" (선택 사항) "),t("a",{href:"#watch-paths"},"감시 경로 구성")])],-1),t("li",null,[t("p",null,[t("a",{href:"#recompile"},"변경 시 재컴파일 활성화")])],-1)])),_:1}),o(a,{title:"개발 모드 활성화",id:"enable"},{default:n(()=>[t("p",null,[l[8]||(l[8]=e(" 자동 리로드를 사용하려면 먼저 ")),l[9]||(l[9]=t("a",{href:"#enable"},"개발 모드",-1)),l[10]||(l[10]=e("를 활성화해야 합니다. 이는 ")),o(p,{href:"/ktor/server-create-and-configure",summary:"애플리케이션 배포 요구 사항에 따라 서버를 생성하는 방법을 알아보세요."},{default:n(()=>l[7]||(l[7]=[e("서버를 생성하고 실행하는")])),_:1}),l[11]||(l[11]=e(" 방식에 따라 달라집니다: "))]),o(u,null,{default:n(()=>l[12]||(l[12]=[t("li",null,[t("p",null,[t("code",null,"EngineMain"),e("을 사용하여 서버를 실행하는 경우, "),t("a",{href:"#application-conf"},"구성 파일"),e("에서 개발 모드를 활성화하세요. ")])],-1),t("li",null,[t("p",null,[t("code",null,"embeddedServer"),e("를 사용하여 서버를 실행하는 경우, "),t("a",{href:"#system-property"},"io.ktor.development"),e(" 시스템 속성을 사용할 수 있습니다. ")])],-1)])),_:1}),l[13]||(l[13]=t("p",null,[e(" 개발 모드가 활성화되면 Ktor는 작업 디렉터리에서 출력 파일을 자동으로 감시합니다. 필요한 경우, "),t("a",{href:"#watch-paths"},"감시 경로"),e("를 지정하여 감시할 폴더 집합을 좁힐 수 있습니다. ")],-1))]),_:1}),o(a,{title:"감시 경로 구성",id:"watch-paths"},{default:n(()=>[t("p",null,[l[15]||(l[15]=t("a",{href:"#enable"},"개발 모드",-1)),l[16]||(l[16]=e("를 활성화하면 Ktor는 작업 디렉터리에서 출력 파일을 감시하기 시작합니다. 예를 들어, Gradle로 빌드된 ")),o(d,null,{default:n(()=>l[14]||(l[14]=[e("ktor-sample")])),_:1}),l[17]||(l[17]=e(" 프로젝트의 경우 다음 폴더들이 감시됩니다: "))]),o(s,{code:`            ktor-sample/build/classes/kotlin/main/META-INF
            ktor-sample/build/classes/kotlin/main/com/example
            ktor-sample/build/classes/kotlin/main/com
            ktor-sample/build/classes/kotlin/main
            ktor-sample/build/resources/main`}),t("p",null,[l[19]||(l[19]=e(" 감시 경로는 감시할 폴더 집합을 좁힐 수 있도록 해줍니다. 이를 위해 감시 경로의 일부를 지정할 수 있습니다. 예를 들어, ")),o(d,null,{default:n(()=>l[18]||(l[18]=[e("ktor-sample/build/classes")])),_:1}),l[20]||(l[20]=e(" 하위 폴더의 변경 사항을 모니터링하려면 ")),l[21]||(l[21]=t("code",null,"classes",-1)),l[22]||(l[22]=e("를 감시 경로로 전달하세요. 서버를 실행하는 방식에 따라 다음 방법으로 감시 경로를 지정할 수 있습니다: "))]),o(u,null,{default:n(()=>[t("li",null,[t("p",null,[o(d,null,{default:n(()=>l[23]||(l[23]=[e("application.conf")])),_:1}),l[25]||(l[25]=e(" 또는 ")),o(d,null,{default:n(()=>l[24]||(l[24]=[e("application.yaml")])),_:1}),l[26]||(l[26]=e(" 파일에서 ")),l[27]||(l[27]=t("code",null,"watch",-1)),l[28]||(l[28]=e(" 옵션을 지정하세요: "))]),o(m,{group:"config"},{default:n(()=>[o(i,{title:"application.conf","group-key":"hocon"},{default:n(()=>[o(s,{code:`ktor {
    development = true
    deployment {
        watch = [ classes ]
    }
}`})]),_:1}),o(i,{title:"application.yaml","group-key":"yaml"},{default:n(()=>[o(s,{lang:"yaml",code:`ktor:
    development: true
    deployment:
        watch:
            - classes`})]),_:1})]),_:1}),l[29]||(l[29]=t("p",null," 여러 감시 경로를 지정할 수도 있습니다. 예를 들어: ",-1)),o(m,{group:"config"},{default:n(()=>[o(i,{title:"application.conf","group-key":"hocon"},{default:n(()=>[o(s,{code:"                            watch = [ classes, resources ]"})]),_:1}),o(i,{title:"application.yaml","group-key":"yaml"},{default:n(()=>[o(s,{lang:"yaml",code:`                            watch:
                                - classes
                                - resources`})]),_:1})]),_:1}),l[30]||(l[30]=t("p",null,[e(" 전체 예시는 다음에서 찾을 수 있습니다: "),t("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/autoreload-engine-main"},"autoreload-engine-main"),e(". ")],-1))]),t("li",null,[l[31]||(l[31]=t("p",null,[t("code",null,"embeddedServer"),e("를 사용하는 경우, "),t("code",null,"watchPaths"),e(" 매개변수로 감시 경로를 전달하세요: ")],-1)),o(s,{lang:"Kotlin",code:`fun main() {
    embeddedServer(Netty, port = 8080, watchPaths = listOf("classes"), host = "0.0.0.0", module = Application::module)
        .start(wait = true)
}

fun Application.module() {
    routing {
        get("/") {
            call.respondText("Hello, world!")
        }
    }
}`}),l[32]||(l[32]=t("p",null,[e(" 전체 예시는 다음을 참조하세요: "),t("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/autoreload-embedded-server"}," autoreload-embedded-server "),e(" . ")],-1))])]),_:1})]),_:1}),o(a,{title:"변경 시 재컴파일",id:"recompile"},{default:n(()=>[l[38]||(l[38]=t("p",null,[e(" 자동 리로드는 출력 파일의 변경 사항을 감지하므로, 프로젝트를 재빌드해야 합니다. IntelliJ IDEA에서 수동으로 이 작업을 수행하거나, Gradle에서 "),t("code",null,"-t"),e(" 명령줄 옵션을 사용하여 지속적인 빌드 실행을 활성화할 수 있습니다. ")],-1)),o(u,null,{default:n(()=>[t("li",null,[t("p",null,[l[34]||(l[34]=e(" IntelliJ IDEA에서 프로젝트를 수동으로 재빌드하려면, 메인 메뉴에서 ")),o(g,null,{default:n(()=>l[33]||(l[33]=[e("빌드 | 프로젝트 재빌드")])),_:1}),l[35]||(l[35]=e("를 선택하세요. "))])]),t("li",null,[l[37]||(l[37]=t("p",null,[e(" Gradle을 사용하여 프로젝트를 자동으로 재빌드하려면, 터미널에서 "),t("code",null,"-t"),e(" 옵션과 함께 "),t("code",null,"build"),e(" 작업을 실행할 수 있습니다: ")],-1)),o(s,{code:"                    ./gradlew -t build"}),o(v,null,{default:n(()=>[l[36]||(l[36]=t("p",null,[e(" 프로젝트 리로드 시 테스트 실행을 건너뛰려면, "),t("code",null,"build"),e(" 작업에 "),t("code",null,"-x"),e(" 옵션을 전달할 수 있습니다: ")],-1)),o(s,{code:"                        ./gradlew -t build -x test -i"})]),_:1})])]),_:1})]),_:1})]),_:1})])}const B=y(A,[["render",N]]);export{$ as __pageData,B as default};
