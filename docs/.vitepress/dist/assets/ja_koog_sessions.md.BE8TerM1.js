import{_ as i,c as a,o as n,ag as l}from"./chunks/framework.Bksy39di.js";const E=JSON.parse('{"title":"LLMセッションと手動での履歴管理","description":"","frontmatter":{},"headers":[],"relativePath":"ja/koog/sessions.md","filePath":"ja/koog/sessions.md","lastUpdated":1755146406000}'),e={name:"ja/koog/sessions.md"};function t(p,s,h,k,r,o){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="llmセッションと手動での履歴管理" tabindex="-1">LLMセッションと手動での履歴管理 <a class="header-anchor" href="#llmセッションと手動での履歴管理" aria-label="Permalink to &quot;LLMセッションと手動での履歴管理&quot;">​</a></h1><p>このページでは、LLMセッションについて、読み書きセッションの操作方法、会話履歴の管理、言語モデルへのリクエスト方法など、詳細情報を提供します。</p><h2 id="はじめに" tabindex="-1">はじめに <a class="header-anchor" href="#はじめに" aria-label="Permalink to &quot;はじめに&quot;">​</a></h2><p>LLMセッションは、言語モデル（LLM）とやり取りするための構造化された方法を提供する基本的な概念です。これらは会話履歴を管理し、LLMへのリクエストを処理し、ツールを実行して応答を処理するための一貫したインターフェースを提供します。</p><h2 id="llmセッションの理解" tabindex="-1">LLMセッションの理解 <a class="header-anchor" href="#llmセッションの理解" aria-label="Permalink to &quot;LLMセッションの理解&quot;">​</a></h2><p>LLMセッションは、言語モデルとやり取りするためのコンテキストを表します。これは以下をカプセル化します。</p><ul><li>会話履歴（プロンプト）</li><li>利用可能なツール</li><li>LLMへのリクエストを行うメソッド</li><li>会話履歴を更新するメソッド</li><li>ツールを実行するメソッド</li></ul><p>セッションは、読み書きセッションを作成するメソッドを提供する <code>AIAgentLLMContext</code> クラスによって管理されます。</p><h3 id="セッションの種類" tabindex="-1">セッションの種類 <a class="header-anchor" href="#セッションの種類" aria-label="Permalink to &quot;セッションの種類&quot;">​</a></h3><p>Koogフレームワークは2種類のセッションを提供します。</p><ol><li><p><strong>書き込みセッション</strong> (<code>AIAgentLLMWriteSession</code>): プロンプトとツールを変更し、LLMリクエストを行い、ツールを実行できます。書き込みセッションで行われた変更は、LLMコンテキストに永続化されます。</p></li><li><p><strong>読み取りセッション</strong> (<code>AIAgentLLMReadSession</code>): プロンプトとツールへの読み取り専用アクセスを提供します。変更を加えることなく現在の状態を検査するのに役立ちます。</p></li></ol><p>主な違いは、書き込みセッションは会話履歴を変更できるのに対し、読み取りセッションは変更できない点です。</p><h3 id="セッションのライフサイクル" tabindex="-1">セッションのライフサイクル <a class="header-anchor" href="#セッションのライフサイクル" aria-label="Permalink to &quot;セッションのライフサイクル&quot;">​</a></h3><p>セッションには明確なライフサイクルがあります。</p><ol><li><strong>作成</strong>: セッションは <code>llm.writeSession { ... }</code> または <code>llm.readSession { ... }</code> を使用して作成されます。</li><li><strong>アクティブフェーズ</strong>: ラムダブロックが実行されている間、セッションはアクティブです。</li><li><strong>終了</strong>: ラムダブロックが完了すると、セッションは自動的に閉じられます。</li></ol><p>セッションは <code>AutoCloseable</code> インターフェースを実装しており、例外が発生した場合でも適切にクリーンアップされることを保証します。</p><h2 id="llmセッションの操作" tabindex="-1">LLMセッションの操作 <a class="header-anchor" href="#llmセッションの操作" aria-label="Permalink to &quot;LLMセッションの操作&quot;">​</a></h2><h3 id="セッションの作成" tabindex="-1">セッションの作成 <a class="header-anchor" href="#セッションの作成" aria-label="Permalink to &quot;セッションの作成&quot;">​</a></h3><p>セッションは <code>AIAgentLLMContext</code> クラスの拡張関数を使用して作成されます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Creating a write session</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">llm.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Session code here</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Creating a read session</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">llm.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Session code here</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>これらの関数は、セッションのコンテキスト内で実行されるラムダブロックを受け取ります。ブロックが完了すると、セッションは自動的に閉じられます。</p><h3 id="セッションスコープとスレッドセーフティ" tabindex="-1">セッションスコープとスレッドセーフティ <a class="header-anchor" href="#セッションスコープとスレッドセーフティ" aria-label="Permalink to &quot;セッションスコープとスレッドセーフティ&quot;">​</a></h3><p>セッションはスレッドセーフティを確保するために読み書きロックを使用します。</p><ul><li>複数の読み取りセッションを同時にアクティブにできます。</li><li>書き込みセッションは一度に1つのみアクティブにできます。</li><li>書き込みセッションは、他のすべてのセッション（読み取りおよび書き込みの両方）をブロックします。</li></ul><p>これにより、会話履歴が同時変更によって破損しないことが保証されます。</p><h3 id="セッションプロパティへのアクセス" tabindex="-1">セッションプロパティへのアクセス <a class="header-anchor" href="#セッションプロパティへのアクセス" aria-label="Permalink to &quot;セッションプロパティへのアクセス&quot;">​</a></h3><p>セッション内では、プロンプトとツールにアクセスできます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">llm.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> messageCount </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> prompt.messages.size</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> availableTools </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tools.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.name }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>書き込みセッションでは、これらのプロパティを変更することもできます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">llm.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Modify the prompt</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    updatePrompt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;New user message&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Modify the tools</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    tools </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newTools</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>詳細については、<a href="https://api.koog.ai/agents/agents-core/ai.koog.agents.core.agent.session/-a-i-agent-l-l-m-read-session/index.html" target="_blank" rel="noreferrer">AIAgentLLMReadSession</a> および <a href="https://api.koog.ai/agents/agents-core/ai.koog.agents.core.agent.session/-a-i-agent-l-l-m-write-session/index.html" target="_blank" rel="noreferrer">AIAgentLLMWriteSession</a> の詳細なAPIリファレンスを参照してください。</p><h2 id="llmリクエストの作成" tabindex="-1">LLMリクエストの作成 <a class="header-anchor" href="#llmリクエストの作成" aria-label="Permalink to &quot;LLMリクエストの作成&quot;">​</a></h2><h3 id="基本的なリクエストメソッド" tabindex="-1">基本的なリクエストメソッド <a class="header-anchor" href="#基本的なリクエストメソッド" aria-label="Permalink to &quot;基本的なリクエストメソッド&quot;">​</a></h3><p>LLMリクエストを行うための最も一般的なメソッドは次のとおりです。</p><ol><li><p><code>requestLLM()</code>: 現在のプロンプトとツールを使用してLLMにリクエストを行い、単一の応答を返します。</p></li><li><p><code>requestLLMMultiple()</code>: 現在のプロンプトとツールを使用してLLMにリクエストを行い、複数の応答を返します。</p></li><li><p><code>requestLLMWithoutTools()</code>: 現在のプロンプトを使用するがツールなしでLLMにリクエストを行い、単一の応答を返します。</p></li><li><p><code>requestLLMForceOneTool</code>: 現在のプロンプトとツールを使用してLLMにリクエストを行い、1つのツールの使用を強制します。</p></li><li><p><code>requestLLMOnlyCallingTools</code>: ツールのみを使用することによって処理されるべきLLMへのリクエストを行います。</p></li></ol><p>例:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">llm.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Make a request with tools enabled</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> requestLLM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Make a request without tools</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> responseWithoutTools </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> requestLLMWithoutTools</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Make a request that returns multiple responses</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> responses </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> requestLLMMultiple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="リクエストの仕組み" tabindex="-1">リクエストの仕組み <a class="header-anchor" href="#リクエストの仕組み" aria-label="Permalink to &quot;リクエストの仕組み&quot;">​</a></h3><p>LLMリクエストは、リクエストメソッドのいずれかを明示的に呼び出したときに作成されます。理解すべき重要な点は次のとおりです。</p><ol><li><strong>明示的な呼び出し</strong>: リクエストは、<code>requestLLM()</code>、<code>requestLLMWithoutTools()</code> などのメソッドを呼び出したときにのみ発生します。</li><li><strong>即時実行</strong>: リクエストメソッドを呼び出すと、リクエストはすぐに作成され、メソッドは応答が受信されるまでブロックします。</li><li><strong>自動履歴更新</strong>: 書き込みセッションでは、応答は会話履歴に自動的に追加されます。</li><li><strong>暗黙のリクエストなし</strong>: システムは暗黙的なリクエストを行いません。リクエストメソッドを明示的に呼び出す必要があります。</li></ol><h3 id="ツールを使用するリクエストメソッド" tabindex="-1">ツールを使用するリクエストメソッド <a class="header-anchor" href="#ツールを使用するリクエストメソッド" aria-label="Permalink to &quot;ツールを使用するリクエストメソッド&quot;">​</a></h3><p>ツールが有効な状態でリクエストを行うと、LLMはテキスト応答の代わりにツール呼び出しで応答する場合があります。リクエストメソッドはこれを透過的に処理します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">llm.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> requestLLM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // The response might be a tool call or a text response</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (response </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Message.Tool.Call) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Handle tool call</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Handle text response</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>実際には、エージェントグラフがこのルーティングを自動的に処理するため、通常は応答タイプを手動で確認する必要はありません。</p><h3 id="構造化リクエストとストリーミングリクエスト" tabindex="-1">構造化リクエストとストリーミングリクエスト <a class="header-anchor" href="#構造化リクエストとストリーミングリクエスト" aria-label="Permalink to &quot;構造化リクエストとストリーミングリクエスト&quot;">​</a></h3><p>より高度なユースケースのために、このプラットフォームは構造化リクエストとストリーミングリクエストのメソッドを提供します。</p><ol><li><p><code>requestLLMStructured()</code>: 特定の構造化された形式で応答を提供するようLLMに要求します。</p></li><li><p><code>requestLLMStructuredOneShot()</code>: <code>requestLLMStructured()</code> に似ていますが、リトライや修正はありません。</p></li><li><p><code>requestLLMStreaming()</code>: LLMにストリーミングリクエストを行い、応答チャンクのフローを返します。</p></li></ol><p>例:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">llm.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Make a structured request</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> structuredResponse </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> requestLLMStructured</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">JokeRating</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Make a streaming request</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> responseStream </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> requestLLMStreaming</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    responseStream.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">collect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { chunk </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Process each chunk as it arrives</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="会話履歴の管理" tabindex="-1">会話履歴の管理 <a class="header-anchor" href="#会話履歴の管理" aria-label="Permalink to &quot;会話履歴の管理&quot;">​</a></h2><h3 id="プロンプトの更新" tabindex="-1">プロンプトの更新 <a class="header-anchor" href="#プロンプトの更新" aria-label="Permalink to &quot;プロンプトの更新&quot;">​</a></h3><p>書き込みセッションでは、<code>updatePrompt</code> メソッドを使用してプロンプト（会話履歴）を更新できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">llm.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    updatePrompt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Add a system message</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        system</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;You are a helpful assistant.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Add a user message</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, can you help me with a coding question?&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Add an assistant message</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        assistant</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Of course! What&#39;s your question?&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Add a tool result</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        tool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myToolResult)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>また、<code>rewritePrompt</code> メソッドを使用してプロンプトを完全に書き換えることもできます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">llm.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    rewritePrompt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { oldPrompt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Create a new prompt based on the old one</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        oldPrompt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">copy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(messages </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> filteredMessages)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="応答時の履歴自動更新" tabindex="-1">応答時の履歴自動更新 <a class="header-anchor" href="#応答時の履歴自動更新" aria-label="Permalink to &quot;応答時の履歴自動更新&quot;">​</a></h3><p>書き込みセッションでLLMリクエストを行うと、応答は会話履歴に自動的に追加されます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">llm.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Add a user message</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    updatePrompt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;What&#39;s the capital of France?&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Make a request – the response is automatically added to the history</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> requestLLM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // The prompt now includes both the user message and the model&#39;s response</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>この自動履歴更新は書き込みセッションの主要な機能であり、会話が自然に流れることを保証します。</p><h3 id="履歴の圧縮" tabindex="-1">履歴の圧縮 <a class="header-anchor" href="#履歴の圧縮" aria-label="Permalink to &quot;履歴の圧縮&quot;">​</a></h3><p>長時間実行される会話では、履歴が大きくなり、多くのトークンを消費する可能性があります。このプラットフォームは履歴を圧縮するためのメソッドを提供します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">llm.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Compress the history using a TLDR approach</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    replaceHistoryWithTLDR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HistoryCompressionStrategy.WholeHistory, preserveMemory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>また、戦略グラフの <code>nodeLLMCompressHistory</code> ノードを使用して、特定のポイントで履歴を圧縮することもできます。</p><p>履歴の圧縮と圧縮戦略の詳細については、<a href="./history-compression">履歴の圧縮</a> を参照してください。</p><h2 id="セッションでのツールの実行" tabindex="-1">セッションでのツールの実行 <a class="header-anchor" href="#セッションでのツールの実行" aria-label="Permalink to &quot;セッションでのツールの実行&quot;">​</a></h2><h3 id="ツールの呼び出し" tabindex="-1">ツールの呼び出し <a class="header-anchor" href="#ツールの呼び出し" aria-label="Permalink to &quot;ツールの呼び出し&quot;">​</a></h3><p>書き込みセッションは、ツールを呼び出すためのいくつかのメソッドを提供します。</p><ol><li><p><code>callTool(tool, args)</code>: 参照によってツールを呼び出します。</p></li><li><p><code>callTool(toolName, args)</code>: 名前によってツールを呼び出します。</p></li><li><p><code>callTool(toolClass, args)</code>: クラスによってツールを呼び出します。</p></li><li><p><code>callToolRaw(toolName, args)</code>: 名前によってツールを呼び出し、生の文字列結果を返します。</p></li></ol><p>例:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">llm.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Call a tool by reference</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> callTool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myTool, myArgs)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Call a tool by name</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> callTool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;myToolName&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, myArgs)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Call a tool by class</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> callTool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MyTool::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, myArgs)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Call a tool and get the raw result</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rawResult </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> callToolRaw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;myToolName&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, myArgs)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="並行ツール実行" tabindex="-1">並行ツール実行 <a class="header-anchor" href="#並行ツール実行" aria-label="Permalink to &quot;並行ツール実行&quot;">​</a></h3><p>複数のツールを並行して実行するために、書き込みセッションは <code>Flow</code> の拡張関数を提供します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">llm.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Run tools in parallel</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    parseDataToArgs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toParallelToolCalls</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MyTool::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">collect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Process each result</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Run tools in parallel and get raw results</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    parseDataToArgs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toParallelToolCallsRaw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MyTool::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">collect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { rawResult </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Process each raw result</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>これは、大量のデータを効率的に処理するのに役立ちます。</p><h2 id="ベストプラクティス" tabindex="-1">ベストプラクティス <a class="header-anchor" href="#ベストプラクティス" aria-label="Permalink to &quot;ベストプラクティス&quot;">​</a></h2><p>LLMセッションを操作する際は、次のベストプラクティスに従ってください。</p><ol><li><p><strong>適切なセッションタイプを使用する</strong>: 会話履歴を変更する必要がある場合は書き込みセッションを、読み取るだけでよい場合は読み取りセッションを使用してください。</p></li><li><p><strong>セッションを短く保つ</strong>: セッションは特定のタスクに集中し、リソースを解放するためにできるだけ早く閉じるべきです。</p></li><li><p><strong>例外を処理する</strong>: リソースリークを防ぐため、セッション内で例外を確実に処理してください。</p></li><li><p><strong>履歴サイズを管理する</strong>: 長時間実行される会話では、履歴圧縮を使用してトークン使用量を削減してください。</p></li><li><p><strong>高レベルの抽象化を優先する</strong>: 可能な場合は、セッションと直接やり取りするのではなく、ノードベースのAPI（例: <code>nodeLLMRequest</code>）を使用してください。</p></li><li><p><strong>スレッドセーフティに留意する</strong>: 書き込みセッションは他のセッションをブロックすることを覚えておいてください。そのため、書き込み操作は可能な限り短くしてください。</p></li><li><p><strong>複雑なデータには構造化リクエストを使用する</strong>: LLMに構造化されたデータを返させたい場合は、自由形式のテキストを解析するのではなく、<code>requestLLMStructured</code> を使用してください。</p></li><li><p><strong>長い応答にはストリーミングを使用する</strong>: 長い応答の場合、<code>requestLLMStreaming</code> を使用して、応答が到着するにつれて処理してください。</p></li></ol><h2 id="トラブルシューティング" tabindex="-1">トラブルシューティング <a class="header-anchor" href="#トラブルシューティング" aria-label="Permalink to &quot;トラブルシューティング&quot;">​</a></h2><h3 id="セッションがすでに閉じられている" tabindex="-1">セッションがすでに閉じられている <a class="header-anchor" href="#セッションがすでに閉じられている" aria-label="Permalink to &quot;セッションがすでに閉じられている&quot;">​</a></h3><p>「<code>Cannot use session after it was closed</code>」などのエラーが表示される場合、ラムダブロックが完了した後にセッションを使用しようとしています。すべてのセッション操作がセッションブロック内で実行されていることを確認してください。</p><h3 id="履歴が大きすぎる" tabindex="-1">履歴が大きすぎる <a class="header-anchor" href="#履歴が大きすぎる" aria-label="Permalink to &quot;履歴が大きすぎる&quot;">​</a></h3><p>履歴が大きくなりすぎて多くのトークンを消費する場合、履歴圧縮技術を使用してください。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">llm.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    replaceHistoryWithTLDR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HistoryCompressionStrategy.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FromLastNMessages</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), preserveMemory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>詳細については、<a href="./history-compression">履歴の圧縮</a> を参照してください。</p><h3 id="ツールが見つからない" tabindex="-1">ツールが見つからない <a class="header-anchor" href="#ツールが見つからない" aria-label="Permalink to &quot;ツールが見つからない&quot;">​</a></h3><p>ツールが見つからないというエラーが表示される場合、次の点を確認してください。</p><ul><li>ツールがツールレジストリに正しく登録されているか。</li><li>正しいツール名またはクラスを使用しているか。</li></ul><h2 id="apiドキュメント" tabindex="-1">APIドキュメント <a class="header-anchor" href="#apiドキュメント" aria-label="Permalink to &quot;APIドキュメント&quot;">​</a></h2><p>詳細については、<a href="https://api.koog.ai/agents/agents-core/ai.koog.agents.core.agent.session/-a-i-agent-l-l-m-session/index.html" target="_blank" rel="noreferrer">AIAgentLLMSession</a> および <a href="https://api.koog.ai/agents/agents-core/ai.koog.agents.core.agent.context/-a-i-agent-l-l-m-context/index.html" target="_blank" rel="noreferrer">AIAgentLLMContext</a> の完全なリファレンスを参照してください。</p>`,89)]))}const g=i(e,[["render",t]]);export{E as __pageData,g as default};
