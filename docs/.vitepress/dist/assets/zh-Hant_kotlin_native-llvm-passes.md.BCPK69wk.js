import{_ as p,C as a,c as l,o as t,G as n,ag as o}from"./chunks/framework.Bksy39di.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/native-llvm-passes.md","filePath":"zh-Hant/kotlin/native-llvm-passes.md","lastUpdated":1754307826000}'),c={name:"zh-Hant/kotlin/native-llvm-passes.md"};function d(r,s,h,k,m,g){const e=a("TopicTitle"),i=a("primary-label");return t(),l("div",null,[n(e,{labelRef:"advanced",title:"最佳化 LLVM 後端的秘訣"}),n(i,{ref:"advanced"},null,512),s[0]||(s[0]=o(`<p>Kotlin/Native 編譯器使用 <a href="https://llvm.org/" target="_blank" rel="noreferrer">LLVM</a> 來優化並為不同目標平台生成二進位執行檔。 編譯時間中有很大一部分也花費在 LLVM 上，對於大型應用程式而言，這可能導致 無法接受的長時間。</p><p>您可以自訂 Kotlin/Native 如何使用 LLVM，並調整優化遍歷 (optimization passes) 的清單。</p><h2 id="檢查建置日誌" tabindex="-1">檢查建置日誌 <a class="header-anchor" href="#檢查建置日誌" aria-label="Permalink to &quot;檢查建置日誌&quot;">​</a></h2><p>讓我們看看建置日誌，了解有多少編譯時間花費在 LLVM 優化遍歷上：</p><ol><li><p>執行 <code>linkRelease*</code> Gradle 任務，並帶上 <code>-Pkotlin.internal.compiler.arguments.log.level=warning</code> 選項，讓 Gradle 輸出 LLVM 效能分析細節，例如：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> linkReleaseExecutableMacosArm64</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Pkotlin.internal.compiler.arguments.log.level=warning</span></span></code></pre></div><p>執行時，任務會印出必要的編譯器引數，例如：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&gt; Task :linkReleaseExecutableMacosArm64</span></span>
<span class="line"><span>Run in-process tool &quot;konanc&quot;</span></span>
<span class="line"><span>Entry point method = org.jetbrains.kotlin.cli.utilities.MainKt.daemonMain</span></span>
<span class="line"><span>Classpath = [</span></span>
<span class="line"><span>        /Users/user/.konan/kotlin-native-prebuilt-macos-aarch64-2.2.0/konan/lib/kotlin-native-compiler-embeddable.jar</span></span>
<span class="line"><span>        /Users/user/.konan/kotlin-native-prebuilt-macos-aarch64-2.2.0/konan/lib/trove4j.jar</span></span>
<span class="line"><span>]</span></span>
<span class="line"><span>Arguments = [</span></span>
<span class="line"><span>        -Xinclude=...</span></span>
<span class="line"><span>        -library</span></span>
<span class="line"><span>        /Users/user/.konan/kotlin-native-prebuilt-macos-aarch64-2.2.0/klib/common/stdlib</span></span>
<span class="line"><span>        -no-endorsed-libs</span></span>
<span class="line"><span>        -nostdlib</span></span>
<span class="line"><span>        ...</span></span>
<span class="line"><span>]</span></span></code></pre></div></li><li><p>使用提供的引數以及 <code>-Xprofile-phases</code> 引數執行命令列編譯器，例如：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/Users/user/.konan/kotlin-native-prebuilt-macos-aarch64-2.2.0/bin/kotlinc-native</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-Xinclude=... </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-library </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/Users/user/.konan/kotlin-native-prebuilt-macos-aarch64-2.2.0/klib/common/stdlib</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">... </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-Xprofile-phases</span></span></code></pre></div></li><li><p>檢查建置日誌中生成的輸出。日誌可能包含數萬行；LLVM 效能分析的部分位於結尾。</p></li></ol><p>以下是一個簡單 Kotlin/Native 程式執行時的摘錄：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Frontend: 275 msec</span></span>
<span class="line"><span>PsiToIr: 1186 msec</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>... 30k lines</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>LinkBitcodeDependencies: 476 msec</span></span>
<span class="line"><span>StackProtectorPhase: 0 msec</span></span>
<span class="line"><span>MandatoryBitcodeLLVMPostprocessingPhase: 2 msec</span></span>
<span class="line"><span>===-------------------------------------------------------------------------===</span></span>
<span class="line"><span>                          Pass execution timing report</span></span>
<span class="line"><span>===-------------------------------------------------------------------------===</span></span>
<span class="line"><span>  Total Execution Time: 6.7726 seconds (6.7192 wall clock)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>   ---User Time---   --System Time--   --User+System--   ---Wall Time---  --- Name ---</span></span>
<span class="line"><span>   0.9778 ( 22.4%)   0.5043 ( 21.0%)   1.4821 ( 21.9%)   1.4628 ( 21.8%)  InstCombinePass</span></span>
<span class="line"><span>   0.3827 (  8.8%)   0.2497 ( 10.4%)   0.6323 (  9.3%)   0.6283 (  9.4%)  InlinerPass</span></span>
<span class="line"><span>   0.2815 (  6.4%)   0.1792 (  7.5%)   0.4608 (  6.8%)   0.4555 (  6.8%)  SimplifyCFGPass</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>   0.6444 (100.0%)   0.5474 (100.0%)   1.1917 (100.0%)   1.1870 (100.0%)  Total</span></span>
<span class="line"><span></span></span>
<span class="line"><span>ModuleBitcodeOptimization: 8118 msec</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>LTOBitcodeOptimization: 1399 msec</span></span>
<span class="line"><span>...</span></span></code></pre></div><p>Kotlin/Native 編譯器執行兩組獨立的 LLVM 優化序列：模組遍歷 (module passes) 和連結時遍歷 (link-time passes)。對於典型編譯，這兩個管線會接續執行，唯一的實際區別在於它們執行哪些 LLVM 優化遍歷。</p><p>在上面的日誌中，這兩個 LLVM 優化是 <code>ModuleBitcodeOptimization</code> 和 <code>LTOBitcodeOptimization</code>。 格式化的表格是優化的輸出，其中包含每個遍歷的時間。</p><h2 id="自訂-llvm-優化遍歷" tabindex="-1">自訂 LLVM 優化遍歷 <a class="header-anchor" href="#自訂-llvm-優化遍歷" aria-label="Permalink to &quot;自訂 LLVM 優化遍歷&quot;">​</a></h2><p>如果上述某個遍歷似乎耗時過長，您可以跳過它。但是，這可能會損害執行時效能， 因此之後您應該檢查基準測試的效能變化。</p><p>目前，沒有直接的方法可以 <a href="https://youtrack.jetbrains.com/issue/KT-69212" target="_blank" rel="noreferrer">停用給定的遍歷</a>。 但是，您可以使用以下編譯器選項提供新的遍歷清單來執行：</p><table tabindex="0"><thead><tr><th><strong>選項</strong></th><th><strong>發行二進位檔的預設值</strong></th></tr></thead><tbody><tr><td><code>-Xllvm-module-passes</code></td><td><code>&quot;default&lt;O3&gt;&quot;</code></td></tr><tr><td><code>-Xllvm-lto-passes</code></td><td><code>&quot;internalize,globaldce,lto&lt;O3&gt;&quot;</code></td></tr></tbody></table><p>預設值會展開為一長串實際遍歷，您需要從中排除不想要的遍歷。</p><p>要獲取實際遍歷清單，請執行 <a href="https://llvm.org/docs/CommandGuide/opt.html" target="_blank" rel="noreferrer"><code>opt</code></a> 工具，該工具會 隨 LLVM 發行版自動下載到 <code>~/.konan/dependencies/llvm-{VERSION}-{ARCH}-{OS}-dev-{BUILD}/bin</code> 目錄。</p><p>例如，要獲取連結時遍歷的清單，請執行：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">opt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -print-pipeline-passes</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -passes=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;internalize,globaldce,lto&lt;O3&gt;&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /dev/null</span></span></code></pre></div><p>這將輸出一個警告和一長串遍歷，這取決於 LLVM 版本。</p><p><code>opt</code> 工具輸出的遍歷清單與 Kotlin/Native 編譯器實際執行的遍歷之間有兩個區別：</p><ul><li>由於 <code>opt</code> 是一個除錯工具，它包含一個或多個 <code>verify</code> 遍歷，這些遍歷通常不會執行。</li><li>Kotlin/Native 停用了 <code>devirt</code> 遍歷，因為 Kotlin 編譯器本身已經執行這些操作。</li></ul><p>停用任何遍歷後，請務必重新執行效能測試，以檢查執行時效能下降是否可接受。</p>`,21))])}const v=p(c,[["render",d]]);export{b as __pageData,v as default};
