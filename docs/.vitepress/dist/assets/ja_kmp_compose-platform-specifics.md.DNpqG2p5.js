import{_ as e,c as o,o as i,ag as t}from"./chunks/framework.Bksy39di.js";const m=JSON.parse('{"title":"異なるプラットフォームにおけるデフォルトのUI動作","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kmp/compose-platform-specifics.md","filePath":"ja/kmp/compose-platform-specifics.md","lastUpdated":1755516278000}'),r={name:"ja/kmp/compose-platform-specifics.md"};function l(p,a,n,s,d,h){return i(),o("div",null,a[0]||(a[0]=[t('<h1 id="異なるプラットフォームにおけるデフォルトのui動作" tabindex="-1">異なるプラットフォームにおけるデフォルトのUI動作 <a class="header-anchor" href="#異なるプラットフォームにおけるデフォルトのui動作" aria-label="Permalink to &quot;異なるプラットフォームにおけるデフォルトのUI動作&quot;">​</a></h1><p>Compose Multiplatformは、異なるプラットフォームで可能な限り同様に動作するアプリを開発するのに役立つことを目指しています。 このページでは、Compose Multiplatformで異なるプラットフォーム向けの共有UIコードを記述する際に予期すべき、避けられない相違点や一時的な妥協点について説明します。</p><h2 id="プロジェクト構造" tabindex="-1">プロジェクト構造 <a class="header-anchor" href="#プロジェクト構造" aria-label="Permalink to &quot;プロジェクト構造&quot;">​</a></h2><p>ターゲットとするプラットフォームに関係なく、それぞれに専用のエントリポイントが必要です。</p><ul><li>Androidの場合、それは<code>Activity</code>であり、共通コードからメインのコンポーザブルを表示する役割を担います。</li><li>iOSアプリの場合、それはアプリを初期化する<code>@main</code>クラスまたは構造体です。</li><li>JVMアプリの場合、それはメインの共通コンポーザブルを起動するアプリケーションを開始する<code>main()</code>関数です。</li><li>Kotlin/JSまたはKotlin/Wasmアプリの場合、それはメインの共通コードコンポーザブルをウェブページにアタッチする<code>main()</code>関数です。</li></ul><p>アプリに必要な特定のプラットフォーム固有のAPIには、マルチプラットフォームサポートがない場合があり、それらのAPIの呼び出しはプラットフォーム固有のソースセットで実装する必要があります。 そうする前に、<a href="https://klibs.io/" target="_blank" rel="noreferrer">klibs.io</a>を確認してください。これは、利用可能なすべてのKotlin Multiplatformライブラリを包括的にカタログ化することを目的としたJetBrainsプロジェクトです。 すでにネットワークコード、データベース、コルーチンなど、多くのライブラリが利用可能です。</p><h2 id="入力方法" tabindex="-1">入力方法 <a class="header-anchor" href="#入力方法" aria-label="Permalink to &quot;入力方法&quot;">​</a></h2><h3 id="ソフトウェアキーボード" tabindex="-1">ソフトウェアキーボード <a class="header-anchor" href="#ソフトウェアキーボード" aria-label="Permalink to &quot;ソフトウェアキーボード&quot;">​</a></h3><p>各プラットフォームでは、テキストフィールドがアクティブになったときにキーボードが表示される方法を含め、ソフトウェアキーボードの処理方法が多少異なる場合があります。</p><p>Compose Multiplatformは、<a href="https://developer.android.com/develop/ui/compose/system/insets" target="_blank" rel="noreferrer">Composeのウィンドウインセットアプローチ</a>を採用しており、 <a href="https://developer.apple.com/documentation/UIKit/positioning-content-relative-to-the-safe-area" target="_blank" rel="noreferrer">セーフエリア</a>を考慮するためにiOSでそれを模倣しています。 実装によっては、ソフトウェアキーボードがiOSで少し異なる位置に配置される場合があります。 キーボードが両方のプラットフォームで重要なUI要素を覆わないことを確認してください。</p><p>Compose Multiplatformは現在、デフォルトのIMEアクションの変更をサポートしていません。例えば、通常の↵アイコンの代わりに、虫眼鏡やチェックマークを表示するなどです。</p><h3 id="タッチとマウスのサポート" tabindex="-1">タッチとマウスのサポート <a class="header-anchor" href="#タッチとマウスのサポート" aria-label="Permalink to &quot;タッチとマウスのサポート&quot;">​</a></h3><p>現在のデスクトップ実装では、すべてのポインター操作をマウスジェスチャーとして解釈するため、マルチタッチジェスチャーはサポートしていません。 例えば、一般的なピンチズームジェスチャーは、2つのタッチを同時に処理する必要があるため、デスクトップ版Compose Multiplatformでは実装できません。</p><h2 id="uiの動作と外観" tabindex="-1">UIの動作と外観 <a class="header-anchor" href="#uiの動作と外観" aria-label="Permalink to &quot;UIの動作と外観&quot;">​</a></h2><h3 id="プラットフォーム固有の機能" tabindex="-1">プラットフォーム固有の機能 <a class="header-anchor" href="#プラットフォーム固有の機能" aria-label="Permalink to &quot;プラットフォーム固有の機能&quot;">​</a></h3><p>一部の一般的なUI要素はCompose Multiplatformではカバーされておらず、フレームワークを使用してカスタマイズすることはできません。 したがって、それらが異なるプラットフォームで異なって見えることを予期すべきです。</p><p>ネイティブのポップアップビューがその一例です。 Compose Multiplatformのテキストフィールドでテキストを選択すると、<strong>コピー</strong>や<strong>翻訳</strong>といったデフォルトの推奨アクションは、アプリが実行されているプラットフォームに固有のものになります。</p><h3 id="スクロール物理" tabindex="-1">スクロール物理 <a class="header-anchor" href="#スクロール物理" aria-label="Permalink to &quot;スクロール物理&quot;">​</a></h3><p>AndroidとiOSでは、スクロール感がプラットフォームに合わせられています。 デスクトップでは、スクロールサポートはマウスホイールに限定されます（<a href="#touch-and-mouse-support">undefined</a>で言及されているとおり）。</p><h3 id="相互運用ビュー" tabindex="-1">相互運用ビュー <a class="header-anchor" href="#相互運用ビュー" aria-label="Permalink to &quot;相互運用ビュー&quot;">​</a></h3><p>共通のコンポーザブル内にネイティブビューを埋め込みたい場合、またはその逆の場合、 Compose Multiplatformでサポートされているプラットフォーム固有のメカニズムについてよく理解しておく必要があります。</p><p>iOS向けには、<a href="./compose-swiftui-integration">SwiftUI</a>および<a href="./compose-uikit-integration">UIKit</a>との相互運用コードに関する個別のガイドがあります。</p><p>デスクトップ向けには、Compose Multiplatformは<a href="./compose-desktop-swing-interoperability">Swingの相互運用性</a>をサポートしています。</p><h3 id="戻るジェスチャー" tabindex="-1">戻るジェスチャー <a class="header-anchor" href="#戻るジェスチャー" aria-label="Permalink to &quot;戻るジェスチャー&quot;">​</a></h3><p>Androidデバイスはデフォルトで戻るジェスチャーをサポートしており、すべての画面が<strong>戻る</strong>ボタンに何らかの形で反応します。</p><p>iOSでは、デフォルトでは戻るジェスチャーはありませんが、開発者はユーザーエクスペリエンスの期待に応えるために同様の機能を実装することが推奨されています。 iOS版Compose Multiplatformは、Androidの機能を模倣するために、デフォルトで戻るジェスチャーをサポートしています。</p><p>デスクトップでは、Compose Multiplatformは<strong>Esc</strong>キーをデフォルトの戻るトリガーとして使用します。</p><p>詳細は、<a href="./compose-navigation#back-gesture">undefined</a>セクションを参照してください。</p><h3 id="テキスト" tabindex="-1">テキスト <a class="header-anchor" href="#テキスト" aria-label="Permalink to &quot;テキスト&quot;">​</a></h3><p>テキストに関して、Compose Multiplatformは異なるプラットフォーム間でのピクセル単位での完全な一致を保証しません。</p><ul><li>明示的にフォントを設定しない場合、各システムがテキストに異なるデフォルトフォントを割り当てます。</li><li>同じフォントを使用した場合でも、各プラットフォームに固有の文字のアンチエイリアシングメカニズムにより、目立つ違いが生じる可能性があります。</li></ul><p>これはユーザーエクスペリエンスに大きな影響を与えません。それどころか、デフォルトフォントは各プラットフォームで期待通りに表示されます。 しかし、ピクセルの違いは、例えばスクリーンショットテストの妨げとなる場合があります。</p><h2 id="開発者エクスペリエンス" tabindex="-1">開発者エクスペリエンス <a class="header-anchor" href="#開発者エクスペリエンス" aria-label="Permalink to &quot;開発者エクスペリエンス&quot;">​</a></h2><h3 id="プレビュー" tabindex="-1">プレビュー <a class="header-anchor" href="#プレビュー" aria-label="Permalink to &quot;プレビュー&quot;">​</a></h3><p>_プレビュー_とは、IDEで利用できる、コンポーザブルの非インタラクティブなレイアウト表示のことです。</p><p>コンポーザブルのプレビューを表示するには：</p><ol><li>Androidターゲットがまだプロジェクトにない場合は追加します（プレビューメカニズムはAndroidライブラリを使用します）。</li><li>プレビュー可能にしたいコンポーザブルに、共通コードで<code>@Preview</code>アノテーションを付けます。</li><li>エディターウィンドウで<strong>分割</strong>または<strong>デザイン</strong>ビューに切り替えます。 まだプロジェクトをビルドしていない場合、初めてプロジェクトをビルドするように促されます。</li></ol><p>IntelliJ IDEAとAndroid Studioの両方で、現在のファイル内の<code>@Preview</code>でアノテーション付けされたすべてのコンポーザブルの初期レイアウトを確認できます。</p><h3 id="ホットリロード" tabindex="-1">ホットリロード <a class="header-anchor" href="#ホットリロード" aria-label="Permalink to &quot;ホットリロード&quot;">​</a></h3><p>_ホットリロード_とは、追加の入力を必要とせずに、アプリがコード変更をその場で反映することを指します。 Compose Multiplatformでは、ホットリロード機能はJVM（デスクトップ）ターゲットでのみ利用可能です。 しかし、これを使用して問題を迅速にトラブルシューティングし、微調整のために目的のプラットフォームに切り替える前に利用することができます。</p><p>詳細については、<a href="./compose-hot-reload">Composeホットリロード</a>の記事を参照してください。</p><h2 id="次のステップ" tabindex="-1">次のステップ <a class="header-anchor" href="#次のステップ" aria-label="Permalink to &quot;次のステップ&quot;">​</a></h2><p>次のコンポーネントにおけるCompose Multiplatformの実装について、さらに学習してください。</p><ul><li><a href="./compose-multiplatform-resources">リソース</a></li><li><a href="./compose-lifecycle">ライフサイクル</a></li><li><a href="./compose-viewmodel">共通ViewModel</a></li><li><a href="./compose-navigation-routing">ナビゲーションとルーティング</a></li></ul>',44)]))}const u=e(r,[["render",l]]);export{m as __pageData,u as default};
