import{_ as r}from"./chunks/default-hierarchy-example.DgJqkpuk.js";import{_ as o,a as d}from"./chunks/comparison-of-full-and-precise-backups.BbJYXOYw.js";import{_ as E,C as p,c,o as g,ag as n,G as t,j as i,w as l,a as s}from"./chunks/framework.Bksy39di.js";const K=JSON.parse('{"title":"Kotlin 1.8.20 有哪些新特性","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/whatsnew1820.md","filePath":"kotlin/whatsnew1820.md","lastUpdated":1754307826000}'),y={name:"kotlin/whatsnew1820.md"};function u(F,a,b,m,f,C){const k=p("YouTubeVideo"),e=p("tab"),h=p("tabs");return g(),c("div",null,[a[13]||(a[13]=n('<h1 id="kotlin-1-8-20-有哪些新特性" tabindex="-1">Kotlin 1.8.20 有哪些新特性 <a class="header-anchor" href="#kotlin-1-8-20-有哪些新特性" aria-label="Permalink to &quot;Kotlin 1.8.20 有哪些新特性&quot;">​</a></h1><p><em><a href="/kotlin/releases#release-details">发布日期：2023 年 4 月 25 日</a></em></p><p>Kotlin 1.8.20 版本已发布，以下是其一些重要亮点：</p><ul><li><a href="#new-kotlin-k2-compiler-updates">Kotlin K2 编译器新更新</a></li><li><a href="#new-kotlin-wasm-target">新的实验性 Kotlin/Wasm 目标平台</a></li><li><a href="#new-jvm-incremental-compilation-by-default-in-gradle">Gradle 中默认启用新的 JVM 增量编译</a></li><li><a href="#update-for-kotlin-native-targets">Kotlin/Native 目标平台更新</a></li><li><a href="#preview-of-gradle-composite-builds-support-in-kotlin-multiplatform">Kotlin Multiplatform 中 Gradle 复合构建的预览版</a></li><li><a href="#improved-output-for-gradle-errors-in-xcode">改进了 Xcode 中 Gradle 错误的输出</a></li><li><a href="#support-for-the-autocloseable-interface">标准库中对 AutoCloseable 接口的实验性支持</a></li><li><a href="#support-for-base64-encoding">标准库中对 Base64 编码的实验性支持</a></li></ul><p>你也可以在这段视频中找到这些更改的简短概述：</p>',5)),t(k,{src:"https://www.youtube.com/v/R1JpkpPzyBU",title:"Kotlin 1.8.20 有哪些新特性"}),a[14]||(a[14]=n(`<h2 id="ide-支持" tabindex="-1">IDE 支持 <a class="header-anchor" href="#ide-支持" aria-label="Permalink to &quot;IDE 支持&quot;">​</a></h2><p>支持 1.8.20 的 Kotlin 插件适用于：</p><table tabindex="0"><thead><tr><th>IDE</th><th>支持的版本</th></tr></thead><tbody><tr><td>IntelliJ IDEA</td><td>2022.2.x, 2022.3.x, 2023.1.x</td></tr><tr><td>Android Studio</td><td>Flamingo (222)</td></tr></tbody></table><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>为了正确下载 Kotlin 构件和依赖项，请<a href="#configure-gradle-settings">配置 Gradle 设置</a>以使用 Maven Central 仓库。</p></div><h2 id="kotlin-k2-编译器新更新" tabindex="-1">Kotlin K2 编译器新更新 <a class="header-anchor" href="#kotlin-k2-编译器新更新" aria-label="Permalink to &quot;Kotlin K2 编译器新更新&quot;">​</a></h2><p>Kotlin 团队持续稳定 K2 编译器。正如在 <a href="/kotlin/whatsnew17#new-kotlin-k2-compiler-for-the-jvm-in-alpha">Kotlin 1.7.0 公告</a>中提及的，它仍处于 <strong>Alpha</strong> 阶段。 此版本引入了进一步的改进，为迈向 <a href="https://youtrack.jetbrains.com/issue/KT-52604" target="_blank" rel="noreferrer">K2 Beta</a> 铺平了道路。</p><p>从 1.8.20 版本开始，Kotlin K2 编译器：</p><ul><li>拥有序列化插件的预览版本。</li><li>为 <a href="/kotlin/js-ir-compiler">JS IR 编译器</a>提供了 Alpha 支持。</li><li>引入了 <a href="https://blog.jetbrains.com/kotlin/2023/02/k2-kotlin-2-0/" target="_blank" rel="noreferrer">新语言版本 Kotlin 2.0</a> 的未来版本。</li></ul><p>通过以下视频了解新编译器及其优势：</p><ul><li><a href="https://www.youtube.com/watch?v=iTdJJq_LyoY" target="_blank" rel="noreferrer">每个人都必须了解的全新 Kotlin K2 编译器</a></li><li><a href="https://www.youtube.com/watch?v=db19VFLZqJM" target="_blank" rel="noreferrer">全新 Kotlin K2 编译器：专家审阅</a></li></ul><h3 id="如何启用-kotlin-k2-编译器" tabindex="-1">如何启用 Kotlin K2 编译器 <a class="header-anchor" href="#如何启用-kotlin-k2-编译器" aria-label="Permalink to &quot;如何启用 Kotlin K2 编译器&quot;">​</a></h3><p>要启用并测试 Kotlin K2 编译器，请使用新语言版本以及以下编译器选项：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-language-version</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2.0</span></span></code></pre></div><p>你可以在 <code>build.gradle(.kts)</code> 文件中指定它：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   sourceSets.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">       languageSettings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           languageVersion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;2.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>之前的 <code>-Xuse-k2</code> 编译器选项已被弃用。</p><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>新 K2 编译器的 Alpha 版本仅适用于 JVM 和 JS IR 项目。 它尚不支持 Kotlin/Native 或任何多平台项目。</p></div><h3 id="对新-k2-编译器留下你的反馈" tabindex="-1">对新 K2 编译器留下你的反馈 <a class="header-anchor" href="#对新-k2-编译器留下你的反馈" aria-label="Permalink to &quot;对新 K2 编译器留下你的反馈&quot;">​</a></h3><p>我们非常感谢你提供的任何反馈！</p><ul><li>直接向 Kotlin Slack 上的 K2 开发者提供反馈 – <a href="https://surveys.jetbrains.com/s3/kotlin-slack-sign-up?_gl=1*ju6cbn*_ga*MTA3MTk5NDkzMC4xNjQ2MDY3MDU4*_ga_9J976DJZ68*MTY1ODMzNzA3OS4xMDAuMS4xNjU4MzQwODEwLjYw" target="_blank" rel="noreferrer">获取邀请</a>并加入 <a href="https://kotlinlang.slack.com/archives/C03PK0PE257" target="_blank" rel="noreferrer">#k2-early-adopters</a> 频道。</li><li>在<a href="https://kotl.in/issue" target="_blank" rel="noreferrer">我们的问题追踪器</a>上报告你使用新 K2 编译器时遇到的任何问题。</li><li><a href="https://www.jetbrains.com/help/idea/settings-usage-statistics.html" target="_blank" rel="noreferrer">启用 <strong>Send usage statistics</strong> 选项</a>以允许 JetBrains 收集有关 K2 使用的匿名数据。</li></ul><h2 id="语言" tabindex="-1">语言 <a class="header-anchor" href="#语言" aria-label="Permalink to &quot;语言&quot;">​</a></h2><p>随着 Kotlin 的不断发展，我们将在 1.8.20 中引入新语言特性的预览版本：</p><ul><li><a href="#a-modern-and-performant-replacement-of-the-enum-class-values-function">Enum 类 values 函数的现代化高性能替代方案</a></li><li><a href="#preview-of-data-objects-for-symmetry-with-data-classes">与数据类对称的数据对象</a></li><li><a href="#preview-of-lifting-restriction-on-secondary-constructors-with-bodies-in-inline-classes">取消对内联类中带有函数体的次构造函数限制的预览</a></li></ul><h3 id="enum-类-values-函数的现代化高性能替代方案" tabindex="-1">Enum 类 values 函数的现代化高性能替代方案 <a class="header-anchor" href="#enum-类-values-函数的现代化高性能替代方案" aria-label="Permalink to &quot;Enum 类 values 函数的现代化高性能替代方案&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>这项特性是<a href="/kotlin/components-stability#stability-levels-explained">实验性的</a>。 它可能随时被删除或更改。需要选择启用（详见下文）。仅用于评估目的。 我们非常感谢你在 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a> 上提供反馈。</p></div><p>Enum 类有一个合成的 <code>values()</code> 函数，它返回一个已定义枚举常量的数组。然而，在 Kotlin 和 Java 中，使用数组可能导致<a href="https://github.com/Kotlin/KEEP/blob/master/proposals/enum-entries.md#examples-of-performance-issues" target="_blank" rel="noreferrer">隐藏的性能问题</a>。 此外，大多数 API 使用集合，这需要最终进行转换。为了解决这些问题，我们为 Enum 类引入了 <code>entries</code> 属性，它应该替代 <code>values()</code> 函数使用。调用时，<code>entries</code> 属性返回一个预分配的不可变 Enum 常量 list。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>values()</code> 函数仍然受支持，但我们建议你使用 <code>entries</code> 属性来替代。</p></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">enum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> colorName: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rgb: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    RED</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Red&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#FF0000&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ORANGE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Orange&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#FF7F00&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    YELLOW</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Yellow&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#FFFF00&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalStdlibApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> findByRgb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rgb: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Color.entries.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">find</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.rgb </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rgb }</span></span></code></pre></div><h4 id="如何启用-entries-属性" tabindex="-1">如何启用 entries 属性 <a class="header-anchor" href="#如何启用-entries-属性" aria-label="Permalink to &quot;如何启用 entries 属性&quot;">​</a></h4><p>要试用这项特性，请选择启用 <code>@OptIn(ExperimentalStdlibApi)</code> 并启用 <code>-language-version 1.9</code> 编译器选项。在 Gradle 项目中，你可以通过将以下内容添加到 <code>build.gradle(.kts)</code> 文件中来完成：</p>`,30)),t(h,{group:"build-script"},{default:l(()=>[t(e,{title:"Kotlin","group-key":"kotlin"},{default:l(()=>a[0]||(a[0]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withType"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"org"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"jetbrains"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"gradle"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"tasks"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"KotlinCompilationTask"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<*>>()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"configureEach"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        compilerOptions")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            .languageVersion")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            ."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"set"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"                org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_1_9")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            )")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")])])])],-1)])),_:1}),t(e,{title:"Groovy","group-key":"groovy"},{default:l(()=>a[1]||(a[1]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    .withType("),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"class)")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    .configureEach {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        compilerOptions"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"languageVersion "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"=")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"            org.jetbrains.kotlin.gradle.dsl.KotlinVersion."),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"KOTLIN_1_9")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")])])])],-1)])),_:1})]),_:1}),a[15]||(a[15]=n(`<div class="tip custom-block"><p class="custom-block-title">TIP</p><p>从 IntelliJ IDEA 2023.1 开始，如果你已选择启用此特性，则相应的 IDE 检查将通知你从 <code>values()</code> 转换为 <code>entries</code> 并提供快速修复。</p></div><p>有关该提案的更多信息，请参见 <a href="https://github.com/Kotlin/KEEP/blob/master/proposals/enum-entries.md" target="_blank" rel="noreferrer">KEEP 笔记</a>。</p><h3 id="与数据类对称的数据对象预览" tabindex="-1">与数据类对称的数据对象预览 <a class="header-anchor" href="#与数据类对称的数据对象预览" aria-label="Permalink to &quot;与数据类对称的数据对象预览&quot;">​</a></h3><p>data object 允许你声明具有单例语义和简洁 <code>toString()</code> 表示的对象。在此代码片段中，你可以看到将 <code>data</code> 关键字添加到对象声明如何提高其 <code>toString()</code> 输出的可读性：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.example</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyObject</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyDataObject</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MyObject) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// org.example.MyObject@1f32e575</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MyDataObject) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// MyDataObject</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>特别对于 <code>sealed</code> 层次结构（例如 <code>sealed class</code> 或 <code>sealed interface</code> 层次结构），<code>data object</code> 是一个绝佳的选择，因为它们可以方便地与 <code>data class</code> 声明一起使用。在此代码片段中，将 <code>EndOfFile</code> 声明为 <code>data object</code> 而不是普通 <code>object</code> 意味着它将获得一个漂亮的 <code>toString</code>，而无需手动覆盖它。这与随附的数据类定义保持了对称性。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">sealed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ReadResult</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> number: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ReadResult</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> text: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ReadResult</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EndOfFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ReadResult</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Number(number=7)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(EndOfFile) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// EndOfFile</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="data-object-的语义" tabindex="-1">data object 的语义 <a class="header-anchor" href="#data-object-的语义" aria-label="Permalink to &quot;data object 的语义&quot;">​</a></h4><p>自 <a href="/kotlin/whatsnew1720#improved-string-representations-for-singletons-and-sealed-class-hierarchies-with-data-objects">Kotlin 1.7.20</a> 的第一个预览版本以来，data object 的语义已经过改进。编译器现在会自动为它们生成多个便利函数：</p><h5 id="tostring" tabindex="-1">toString <a class="header-anchor" href="#tostring" aria-label="Permalink to &quot;toString&quot;">​</a></h5><p>data object 的 <code>toString()</code> 函数返回对象的简单名称：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyDataObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MyDataObject) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// MyDataObject</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h5 id="equals-和-hashcode" tabindex="-1">equals 和 hashCode <a class="header-anchor" href="#equals-和-hashcode" aria-label="Permalink to &quot;equals 和 hashCode&quot;">​</a></h5><p>data object 的 <code>equals()</code> 函数确保所有具有你的 <code>data object</code> 类型的对象都被认为是相等的。在大多数情况下，你只会有一个 data object 的单例实例（毕竟，<code>data object</code> 声明了一个单例）。然而，在运行时生成相同类型的另一个对象的边缘情况下（例如，通过 <code>java.lang.reflect</code> 的平台反射，或者使用底层使用此 API 的 JVM 序列化库），这确保了这些对象被视为相等。</p><p>确保只对 <code>data object</code> 进行结构化比较（使用 <code>==</code> 操作符），而不要进行引用比较（<code>===</code> 操作符）。这有助于避免在运行时存在多个 data object 实例时可能遇到的陷阱。以下代码片段说明了这个特殊的边缘情况：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> java.lang.reflect.Constructor</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MySingleton</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> evilTwin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createInstanceViaReflection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MySingleton) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// MySingleton</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(evilTwin) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// MySingleton</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Even when a library forcefully creates a second instance of MySingleton, its \`equals\` method returns true:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MySingleton </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> evilTwin) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Do not compare data objects via ===.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MySingleton </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> evilTwin) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createInstanceViaReflection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MySingleton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Kotlin reflection does not permit the instantiation of data objects.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // This creates a new MySingleton instance &quot;by force&quot; (i.e., Java platform reflection)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Don&#39;t do this yourself!</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (MySingleton.javaClass.declaredConstructors[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { isAccessible </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Constructor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MySingleton</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">newInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>生成的 <code>hashCode()</code> 函数的行为与 <code>equals()</code> 函数一致，因此 data object 的所有运行时实例都具有相同的哈希码。</p><h5 id="data-object-没有-copy-和-componentn-函数" tabindex="-1">data object 没有 copy 和 componentN 函数 <a class="header-anchor" href="#data-object-没有-copy-和-componentn-函数" aria-label="Permalink to &quot;data object 没有 copy 和 componentN 函数&quot;">​</a></h5><p>虽然 <code>data object</code> 和 <code>data class</code> 声明经常一起使用并有一些相似之处，但有些函数是不会为 <code>data object</code> 生成的：</p><p>因为 <code>data object</code> 声明旨在用作单例对象，所以不生成 <code>copy()</code> 函数。单例模式将类的实例化限制为单个实例，允许创建实例的副本将违反该限制。</p><p>此外，与 <code>data class</code> 不同，<code>data object</code> 没有任何数据属性。由于尝试<a href="/kotlindestructure">解构</a>此类对象没有意义，因此不生成 <code>componentN()</code> 函数。</p><p>我们非常感谢你在 <a href="https://youtrack.com/issue/KT-4107" target="_blank" rel="noreferrer">YouTrack</a> 上对此特性提供反馈。</p><h4 id="如何启用-data-object-预览" tabindex="-1">如何启用 data object 预览 <a class="header-anchor" href="#如何启用-data-object-预览" aria-label="Permalink to &quot;如何启用 data object 预览&quot;">​</a></h4><p>要试用这项特性，请启用 <code>-language-version 1.9</code> 编译器选项。在 Gradle 项目中，你可以通过将以下内容添加到 <code>build.gradle(.kts)</code> 文件中来完成：</p>`,24)),t(h,{group:"build-script"},{default:l(()=>[t(e,{title:"Kotlin","group-key":"kotlin"},{default:l(()=>a[2]||(a[2]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withType"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"org"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"jetbrains"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"gradle"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"tasks"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"KotlinCompilationTask"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<*>>()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"configureEach"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        compilerOptions")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            .languageVersion")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            ."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"set"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"                org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_1_9")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            )")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")])])])],-1)])),_:1}),t(e,{title:"Groovy","group-key":"groovy"},{default:l(()=>a[3]||(a[3]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    .withType("),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"class)")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    .configureEach {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        compilerOptions"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"languageVersion "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"=")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"            org.jetbrains.kotlin.gradle.dsl.KotlinVersion."),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"KOTLIN_1_9")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")])])])],-1)])),_:1})]),_:1}),a[16]||(a[16]=n(`<h3 id="取消对内联类中带有函数体的次构造函数限制的预览" tabindex="-1">取消对内联类中带有函数体的次构造函数限制的预览 <a class="header-anchor" href="#取消对内联类中带有函数体的次构造函数限制的预览" aria-label="Permalink to &quot;取消对内联类中带有函数体的次构造函数限制的预览&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>这项特性是<a href="/kotlin/components-stability#stability-levels-explained">实验性的</a>。它可能随时被删除或更改。 需要选择启用（详见下文）。仅用于评估目的。我们非常感谢你在 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a> 上对此提供反馈。</p></div><p>Kotlin 1.8.20 取消了对<a href="/kotlin/inline-classes">内联类</a>中使用带函数体的次构造函数的限制。</p><p>内联类以前只允许一个不带 <code>init</code> 代码块或次构造函数的公共主构造函数，以保持清晰的初始化语义。结果，无法封装底层值或创建表示某些受限值的内联类。</p><p>当 Kotlin 1.4.30 取消对 <code>init</code> 代码块的限制时，这些问题得到了解决。现在我们更进一步，在预览模式下允许带有函数体的次构造函数：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JvmInline</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fullName: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Allowed since Kotlin 1.4.30:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        check</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fullName.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isNotBlank</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;Full name shouldn&#39;t be empty&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Preview available since Kotlin 1.8.20:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, lastName: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$name</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> $lastName</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        check</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lastName.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isNotBlank</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;Last name shouldn&#39;t be empty&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="如何启用带函数体的次构造函数" tabindex="-1">如何启用带函数体的次构造函数 <a class="header-anchor" href="#如何启用带函数体的次构造函数" aria-label="Permalink to &quot;如何启用带函数体的次构造函数&quot;">​</a></h4><p>要试用这项特性，请启用 <code>-language-version 1.9</code> 编译器选项。在 Gradle 项目中，你可以通过将以下内容添加到 <code>build.gradle(.kts)</code> 中来完成：</p>`,8)),t(h,{group:"build-script"},{default:l(()=>[t(e,{title:"Kotlin","group-key":"kotlin"},{default:l(()=>a[4]||(a[4]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withType"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"org"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"jetbrains"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"gradle"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"tasks"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"KotlinCompilationTask"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<*>>()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"configureEach"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        compilerOptions")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            .languageVersion")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            ."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"set"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"                org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_1_9")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            )")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")])])])],-1)])),_:1}),t(e,{title:"Groovy","group-key":"groovy"},{default:l(()=>a[5]||(a[5]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    .withType("),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"class)")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    .configureEach {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        compilerOptions"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"languageVersion "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"=")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"            org.jetbrains.kotlin.gradle.dsl.KotlinVersion."),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"KOTLIN_1_9")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")])])])],-1)])),_:1})]),_:1}),a[17]||(a[17]=n(`<p>我们鼓励你试用此特性，并在 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a> 中提交所有报告，以帮助我们在 Kotlin 1.9.0 中将其设为默认。</p><p>通过 <a href="https://github.com/Kotlin/KEEP/blob/master/proposals/inline-classes.md" target="_blank" rel="noreferrer">此 KEEP</a> 了解更多关于 Kotlin 内联类的开发信息。</p><h2 id="新的-kotlin-wasm-目标平台" tabindex="-1">新的 Kotlin/Wasm 目标平台 <a class="header-anchor" href="#新的-kotlin-wasm-目标平台" aria-label="Permalink to &quot;新的 Kotlin/Wasm 目标平台&quot;">​</a></h2><p>Kotlin/Wasm (Kotlin WebAssembly) 在此版本中进入<a href="/kotlin/components-stability#stability-levels-explained">实验阶段</a>。Kotlin 团队认为 <a href="https://webassembly.org/" target="_blank" rel="noreferrer">WebAssembly</a> 是一项很有前景的技术，并希望找到更好的方法让你使用它并获得 Kotlin 的所有优势。</p><p>WebAssembly 二进制格式是平台独立的，因为它使用自己的虚拟机运行。几乎所有现代浏览器都已支持 WebAssembly 1.0。要设置运行 WebAssembly 的环境，你只需启用 Kotlin/Wasm 所面向的实验性垃圾回收模式。你可以在此处找到详细说明：<a href="#how-to-enable-kotlin-wasm">如何启用 Kotlin/Wasm</a>。</p><p>我们希望强调新的 Kotlin/Wasm 目标平台的以下优点：</p><ul><li>与 <code>wasm32</code> Kotlin/Native 目标平台相比，编译速度更快，因为 Kotlin/Wasm 无需使用 LLVM。</li><li>与 <code>wasm32</code> 目标平台相比，与 JS 的<a href="/kotlininterop">互操作性</a>和与浏览器的集成更容易，这得益于 <a href="https://github.com/WebAssembly/gc" target="_blank" rel="noreferrer">Wasm 垃圾回收</a>。</li><li>与 Kotlin/JS 和 JavaScript 相比，应用程序启动可能更快，因为 Wasm 具有紧凑且易于解析的字节码。</li><li>与 Kotlin/JS 和 JavaScript 相比，应用程序运行时性能有所提高，因为 Wasm 是一种静态类型语言。</li></ul><p>从 1.8.20 版本开始，你可以在实验性项目中使用 Kotlin/Wasm。 我们开箱即用地为 Kotlin/Wasm 提供了 Kotlin 标准库 (<code>stdlib</code>) 和测试库 (<code>kotlin.test</code>)。 IDE 支持将在未来的版本中添加。</p><p><a href="https://www.youtube.com/watch?v=-pqz9sKXatw" target="_blank" rel="noreferrer">在此 YouTube 视频中了解更多关于 Kotlin/Wasm 的信息</a>。</p><h3 id="如何启用-kotlin-wasm" tabindex="-1">如何启用 Kotlin/Wasm <a class="header-anchor" href="#如何启用-kotlin-wasm" aria-label="Permalink to &quot;如何启用 Kotlin/Wasm&quot;">​</a></h3><p>要启用并测试 Kotlin/Wasm，请更新你的 <code>build.gradle.kts</code> 文件：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;multiplatform&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) version </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.8.20&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    wasm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        binaries.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        browser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> commonMain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> getting</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> commonTest </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wasmMain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> getting</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wasmTest </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> getting</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>访问<a href="https://github.com/Kotlin/kotlin-wasm-examples" target="_blank" rel="noreferrer">包含 Kotlin/Wasm 示例的 GitHub 版本库</a>。</p></div><p>要运行 Kotlin/Wasm 项目，你需要更新目标环境的设置：</p>`,14)),t(h,null,{default:l(()=>[t(e,{title:"Chrome"},{default:l(()=>a[6]||(a[6]=[i("ul",null,[i("li",null,[i("p",null,"对于 109 版本："),i("p",null,[s("使用 "),i("code",null,"--js-flags=--experimental-wasm-gc"),s(" 命令行实参运行应用程序。")])]),i("li",null,[i("p",null,"对于 110 或更高版本："),i("ol",null,[i("li",null,[s("在浏览器中打开 "),i("code",null,"chrome://flags/#enable-webassembly-garbage-collection"),s("。")]),i("li",null,[s("启用 "),i("strong",null,"WebAssembly Garbage Collection"),s("。")]),i("li",null,"重启你的浏览器。")])])],-1)])),_:1}),t(e,{title:"Firefox"},{default:l(()=>a[7]||(a[7]=[i("p",null,"对于 109 或更高版本：",-1),i("ol",null,[i("li",null,[s("在浏览器中打开 "),i("code",null,"about:config"),s("。")]),i("li",null,[s("启用 "),i("code",null,"javascript.options.wasm_function_references"),s(" 和 "),i("code",null,"javascript.options.wasm_gc"),s(" 选项。")]),i("li",null,"重启你的浏览器。")],-1)])),_:1}),t(e,{title:"Edge"},{default:l(()=>a[8]||(a[8]=[i("p",null,"对于 109 或更高版本：",-1),i("p",null,[s("使用 "),i("code",null,"--js-flags=--experimental-wasm-gc"),s(" 命令行实参运行应用程序。")],-1)])),_:1})]),_:1}),a[18]||(a[18]=n(`<h3 id="对-kotlin-wasm-留下你的反馈" tabindex="-1">对 Kotlin/Wasm 留下你的反馈 <a class="header-anchor" href="#对-kotlin-wasm-留下你的反馈" aria-label="Permalink to &quot;对 Kotlin/Wasm 留下你的反馈&quot;">​</a></h3><p>我们非常感谢你提供的任何反馈！</p><ul><li>直接向 Kotlin Slack 上的开发者提供反馈 – <a href="https://surveys.jetbrains.com/s3/kotlin-slack-sign-up?_gl=1*ju6cbn*_ga*MTA3MTk5NDkzMC4xNjQ2MDY3MDU4*_ga_9J976DJZ68*MTY1ODMzNzA3OS4xMDAuMS4xNjU4MzQwODEwLjYw" target="_blank" rel="noreferrer">获取邀请</a>并加入 <a href="https://kotlinlang.slack.com/archives/CDFP59223" target="_blank" rel="noreferrer">#webassembly</a> 频道。</li><li>在 <a href="https://youtrack.jetbrains.com/issue/KT-56492" target="_blank" rel="noreferrer">此 YouTrack 问题</a>上报告你使用 Kotlin/Wasm 时遇到的任何问题。</li></ul><h2 id="kotlin-jvm" tabindex="-1">Kotlin/JVM <a class="header-anchor" href="#kotlin-jvm" aria-label="Permalink to &quot;Kotlin/JVM&quot;">​</a></h2><p>Kotlin 1.8.20 引入了 <a href="#preview-of-java-synthetic-property-references">Java 合成属性引用的预览</a>， 以及<a href="#support-for-the-jvm-ir-backend-in-kapt-stub-generating-task-by-default">默认情况下 kapt 存根生成任务中对 JVM IR 后端的支持</a>。</p><h3 id="java-合成属性引用的预览" tabindex="-1">Java 合成属性引用的预览 <a class="header-anchor" href="#java-合成属性引用的预览" aria-label="Permalink to &quot;Java 合成属性引用的预览&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>这项特性是<a href="/kotlin/components-stability#stability-levels-explained">实验性的</a>。 它可能随时被删除或更改。仅用于评估目的。 我们非常感谢你在 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a> 上对此提供反馈。</p></div><p>Kotlin 1.8.20 引入了创建 Java 合成属性引用的能力，例如，对于以下 Java 代码：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String name;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> age</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getAge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Kotlin 一直允许你编写 <code>person.age</code>，其中 <code>age</code> 是一个合成属性。 现在，你也可以创建对 <code>Person::age</code> 和 <code>person::age</code> 的引用。<code>name</code> 也同样适用。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> persons </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Jack&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">11</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Sofie&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Peter&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">11</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    persons</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Call a reference to Java synthetic property:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sortedBy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Person::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">age</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Call Java getter via the Kotlin property syntax:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { person </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(person.name) }</span></span></code></pre></div><h4 id="如何启用-java-合成属性引用" tabindex="-1">如何启用 Java 合成属性引用 <a class="header-anchor" href="#如何启用-java-合成属性引用" aria-label="Permalink to &quot;如何启用 Java 合成属性引用&quot;">​</a></h4><p>要试用这项特性，请启用 <code>-language-version 1.9</code> 编译器选项。 在 Gradle 项目中，你可以通过将以下内容添加到 <code>build.gradle(.kts)</code> 中来完成：</p>`,13)),t(h,{group:"build-script"},{default:l(()=>[t(e,{title:"Kotlin","group-key":"kotlin"},{default:l(()=>a[9]||(a[9]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withType"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"org"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"jetbrains"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"gradle"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"tasks"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"KotlinCompilationTask"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<*>>()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"configureEach"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        compilerOptions")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            .languageVersion")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            ."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"set"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"                org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_1_9")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            )")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")])])])],-1)])),_:1}),t(e,{title:"Groovy","group-key":"groovy"},{default:l(()=>a[10]||(a[10]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    .withType("),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"class)")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    .configureEach {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        compilerOptions"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"languageVersion "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"=")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"            org.jetbrains.kotlin.gradle.dsl.KotlinVersion."),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"KOTLIN_1_9")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")])])])],-1)])),_:1})]),_:1}),a[19]||(a[19]=n(`<h3 id="默认情况下-kapt-存根生成任务中对-jvm-ir-后端的支持" tabindex="-1">默认情况下 kapt 存根生成任务中对 JVM IR 后端的支持 <a class="header-anchor" href="#默认情况下-kapt-存根生成任务中对-jvm-ir-后端的支持" aria-label="Permalink to &quot;默认情况下 kapt 存根生成任务中对 JVM IR 后端的支持&quot;">​</a></h3><p>在 Kotlin 1.7.20 中，我们引入了<a href="/kotlin/whatsnew1720#support-for-the-jvm-ir-backend-in-kapt-stub-generating-task">在 kapt 存根生成任务中对 JVM IR 后端的支持</a>。从本版本开始，这项支持默认生效。你不再需要 在 <code>gradle.properties</code> 中指定 <code>kapt.use.jvm.ir=true</code> 来启用它。 我们非常感谢你在 <a href="https://youtrack.jetbrains.com/issue/KT-49682" target="_blank" rel="noreferrer">YouTrack</a> 上对此特性提供反馈。</p><h2 id="kotlin-native" tabindex="-1">Kotlin/Native <a class="header-anchor" href="#kotlin-native" aria-label="Permalink to &quot;Kotlin/Native&quot;">​</a></h2><p>Kotlin 1.8.20 包含对支持的 Kotlin/Native 目标平台、与 Objective-C 的<a href="/kotlininterop">互操作性</a>以及 CocoaPods Gradle 插件改进等更新：</p><ul><li><a href="#update-for-kotlin-native-targets">Kotlin/Native 目标平台更新</a></li><li><a href="#deprecation-of-the-legacy-memory-manager">旧内存管理器的弃用</a></li><li><a href="#support-for-objective-c-headers-with-import-directives">支持带有 @import 指令的 Objective-C 头文件</a></li><li><a href="#support-for-the-link-only-mode-in-cocoapods-gradle-plugin">Cocoapods Gradle 插件中支持仅链接模式</a></li><li><a href="#import-objective-c-extensions-as-class-members-in-uikit">在 UIKit 中将 Objective-C 扩展作为类成员导入</a></li><li><a href="#reimplementation-of-compiler-cache-management-in-the-compiler">重新实现编译器中的编译器缓存管理</a></li><li><a href="#deprecation-of-uselibraries-in-cocoapods-gradle-plugin">Cocoapods Gradle 插件中 <code>useLibraries()</code> 的弃用</a></li></ul><h3 id="kotlin-native-目标平台更新" tabindex="-1">Kotlin/Native 目标平台更新 <a class="header-anchor" href="#kotlin-native-目标平台更新" aria-label="Permalink to &quot;Kotlin/Native 目标平台更新&quot;">​</a></h3><p>Kotlin 团队决定重新审视 Kotlin/Native 支持的<a href="/kotlintarget">目标平台</a>列表，将其分为不同的层级，并从 Kotlin 1.8.20 开始弃用其中一些。 请参见 <a href="/kotlin/native-target-support">Kotlin/Native 目标平台支持</a>部分，了解受支持和已弃用目标平台的完整列表。</p><p>以下目标平台已随 Kotlin 1.8.20 弃用，并将在 1.9.20 中移除：</p><ul><li><code>iosArm32</code></li><li><code>watchosX86</code></li><li><code>wasm32</code></li><li><code>mingwX86</code></li><li><code>linuxArm32Hfp</code></li><li><code>linuxMips32</code></li><li><code>linuxMipsel32</code></li></ul><p>至于其余目标平台，现在有三种支持层级，取决于 Kotlin/Native 编译器对其支持和测试的程度。 一个目标平台可以被移动到不同的层级。例如，我们将尽最大努力在未来为 <code>iosArm64</code> 提供全面支持，因为它对 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/get-started.html" target="_blank" rel="noreferrer">Kotlin Multiplatform</a> 很重要。</p><p>如果你是库作者，这些目标平台层级可以帮助你决定在 CI 工具上测试哪些目标平台以及跳过哪些。 Kotlin 团队在开发官方 Kotlin 库（例如 <a href="/kotlin/coroutines-guide">kotlinx.coroutines</a>）时将采用相同的方法。</p><p>请查看我们的<a href="https://blog.jetbrains.com/kotlin/2023/02/update-regarding-kotlin-native-targets/" target="_blank" rel="noreferrer">博客文章</a>，了解这些更改的原因。</p><h3 id="旧内存管理器的弃用" tabindex="-1">旧内存管理器的弃用 <a class="header-anchor" href="#旧内存管理器的弃用" aria-label="Permalink to &quot;旧内存管理器的弃用&quot;">​</a></h3><p>从 1.8.20 开始，旧内存管理器已被弃用，并将在 1.9.20 中移除。 <a href="/kotlin/native-memory-manager">新内存管理器</a>在 1.7.20 中默认启用，并已获得进一步的稳定性更新和性能改进。</p><p>如果你仍在使用旧内存管理器，请从 <code>gradle.properties</code> 中移除 <code>kotlin.native.binary.memoryModel=strict</code> 选项，并遵循我们的<a href="/kotlin/native-migration-guide">迁移指南</a>进行必要的更改。</p><p>新内存管理器不支持 <code>wasm32</code> 目标平台。该目标平台也<a href="#update-for-kotlin-native-targets">从本版本开始</a>弃用，并将在 1.9.20 中移除。</p><h3 id="支持带有-import-指令的-objective-c-头文件" tabindex="-1">支持带有 @import 指令的 Objective-C 头文件 <a class="header-anchor" href="#支持带有-import-指令的-objective-c-头文件" aria-label="Permalink to &quot;支持带有 @import 指令的 Objective-C 头文件&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>这项特性是<a href="/kotlin/components-stability#stability-levels-explained">实验性的</a>。 它可能随时被删除或更改。需要选择启用（详见下文）。仅用于评估目的。 我们非常感谢你在 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a> 上对此提供反馈。</p></div><p>Kotlin/Native 现在可以导入带有 <code>@import</code> 指令的 Objective-C 头文件。这项特性对于使用具有自动生成 Objective-C 头文件的 Swift 库，或用 Swift 编写的 CocoaPods 依赖项的类非常有用。</p><p>以前，cinterop 工具无法分析通过 <code>@import</code> 指令依赖于 Objective-C 模块的头文件。原因是它缺少对 <code>-fmodules</code> 选项的支持。</p><p>从 Kotlin 1.8.20 开始，你可以使用带有 <code>@import</code> 的 Objective-C 头文件。为此，请在定义文件中将 <code>-fmodules</code> 选项作为 <code>compilerOpts</code> 传递给编译器。 如果你使用 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-cocoapods-overview.html" target="_blank" rel="noreferrer">CocoaPods 集成</a>，请在 <code>pod()</code> 函数的配置代码块中指定 cinterop 选项，如下所示：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ios</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    cocoapods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        summary </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;CocoaPods test library&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        homepage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://github.com/JetBrains/kotlin&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ios.deploymentTarget </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;13.5&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        pod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;PodName&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            extraOpts </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-compiler-option&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-fmodules&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这是一项<a href="https://youtrack.jetbrains.com/issue/KT-39120" target="_blank" rel="noreferrer">备受期待的特性</a>，我们欢迎你在 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a> 上提供反馈，以帮助我们在未来的版本中将其设为默认。</p><h3 id="cocoapods-gradle-插件中支持仅链接模式" tabindex="-1">Cocoapods Gradle 插件中支持仅链接模式 <a class="header-anchor" href="#cocoapods-gradle-插件中支持仅链接模式" aria-label="Permalink to &quot;Cocoapods Gradle 插件中支持仅链接模式&quot;">​</a></h3><p>使用 Kotlin 1.8.20，你可以仅将 Pod 依赖项与动态 framework 用于链接，而无需生成 cinterop 绑定。 当 cinterop 绑定已生成时，这可能会派上用场。</p><p>考虑一个包含 2 个模块的<a href="/kotlinproject">项目</a>：一个库和一个应用。该库依赖于一个 Pod，但不生成 framework， 只生成一个 <code>.klib</code>。该应用依赖于该库并生成一个动态 framework。 在这种情况下，你需要将此 framework 与该库依赖的 Pods 链接， 但你不需要 cinterop 绑定，因为它们已经为该库生成了。</p><p>要启用该特性，请在添加 Pod <a href="/kotlindependency">依赖项</a>时使用 <code>linkOnly</code> 选项或构建器属性：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cocoapods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    summary </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;CocoaPods test library&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    homepage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://github.com/JetBrains/kotlin&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    pod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Alamofire&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, linkOnly </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        version </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;5.7.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>如果你将此选项与静态 framework 一起使用，它将完全移除 Pod <a href="/kotlindependency">依赖项</a>，因为 Pods 不用于静态 framework 链接。</p></div><h3 id="在-uikit-中将-objective-c-扩展作为类成员导入" tabindex="-1">在 UIKit 中将 Objective-C 扩展作为类成员导入 <a class="header-anchor" href="#在-uikit-中将-objective-c-扩展作为类成员导入" aria-label="Permalink to &quot;在 UIKit 中将 Objective-C 扩展作为类成员导入&quot;">​</a></h3><p>自 Xcode 14.1 以来，Objective-C 类中的一些<a href="/kotlinmethod">方法</a>已移至类别成员。这导致生成了不同的 Kotlin API，并且这些<a href="/kotlinmethod">方法</a>被作为 Kotlin <a href="/kotlinextension">扩展</a>而不是<a href="/kotlinmethod">方法</a>导入。</p><p>在使用 UIKit <a href="/kotlinoverride">覆盖</a><a href="/kotlinmethod">方法</a>时，你可能因此遇到了问题。例如，在 Kotlin 中对 UIVIew 进行子类化时，无法<a href="/kotlinoverride">覆盖</a> <code>drawRect()</code> 或 <code>layoutSubviews()</code> <a href="/kotlinmethod">方法</a>。</p><p>从 1.8.20 开始，与 NSView 和 UIView 类在相同头文件中<a href="/kotlindeclare">声明</a>的类别成员将作为这些类的成员导入。 这意味着从 NSView 和 UIView 子类化的<a href="/kotlinmethod">方法</a>可以像任何其他<a href="/kotlinmethod">方法</a>一样轻松地被<a href="/kotlinoverride">覆盖</a>。</p><p>如果一切顺利，我们计划默认对所有 Objective-C 类启用此行为。</p><h3 id="重新实现编译器中的编译器缓存管理" tabindex="-1">重新实现编译器中的编译器缓存管理 <a class="header-anchor" href="#重新实现编译器中的编译器缓存管理" aria-label="Permalink to &quot;重新实现编译器中的编译器缓存管理&quot;">​</a></h3><p>为了加速编译器缓存的演进，我们已将编译器缓存管理从 Kotlin Gradle 插件转移到 Kotlin/Native 编译器。 这为几项重要改进扫清了障碍，包括与<a href="/kotlincompilation">编译</a>时间 和编译器缓存灵活性相关的改进。</p><p>如果你遇到问题并需要恢复旧行为，请使用 <code>kotlin.native.cacheOrchestration=gradle</code> Gradle 属性。</p><p>我们非常感谢你在 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a> 上对此提供反馈。</p><h3 id="cocoapods-gradle-插件中-uselibraries-的弃用" tabindex="-1">Cocoapods Gradle 插件中 <code>useLibraries()</code> 的弃用 <a class="header-anchor" href="#cocoapods-gradle-插件中-uselibraries-的弃用" aria-label="Permalink to &quot;Cocoapods Gradle 插件中 \`useLibraries()\` 的弃用&quot;">​</a></h3><p>Kotlin 1.8.20 开始弃用用于静态库的 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-cocoapods-overview.html" target="_blank" rel="noreferrer">CocoaPods 集成</a>中的 <code>useLibraries()</code> 函数。</p><p>我们引入 <code>useLibraries()</code> 函数是为了允许对包含静态库的 Pod 进行<a href="/kotlindependency">依赖项</a>引用。随着时间的推移，这种情况变得非常罕见。大多数 Pod 通过源代码分发，而 Objective-C framework 或 XCFramework 是二进制分发的常见选择。</p><p>由于此函数不受欢迎，并且它会产生复杂化 Kotlin CocoaPods Gradle 插件开发的问题，我们已决定弃用它。</p><p>有关 framework 和 XCFramework 的更多信息，请参见<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-build-native-binaries.html" target="_blank" rel="noreferrer">构建最终原生二进制文件</a>。</p><h2 id="kotlin-multiplatform" tabindex="-1">Kotlin Multiplatform <a class="header-anchor" href="#kotlin-multiplatform" aria-label="Permalink to &quot;Kotlin Multiplatform&quot;">​</a></h2><p>Kotlin 1.8.20 旨在通过以下对 Kotlin Multiplatform 的更新来改善开发者体验：</p><ul><li><a href="#new-approach-to-source-set-hierarchy">设置源代码集层次结构的新方法</a></li><li><a href="#preview-of-gradle-composite-builds-support-in-kotlin-multiplatform">Kotlin Multiplatform 中 Gradle 复合构建支持的预览</a></li><li><a href="#improved-output-for-gradle-errors-in-xcode">改进了 Xcode 中 Gradle 错误的输出</a></li></ul><h3 id="源代码集层次结构的新方法" tabindex="-1">源代码集层次结构的新方法 <a class="header-anchor" href="#源代码集层次结构的新方法" aria-label="Permalink to &quot;源代码集层次结构的新方法&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>源代码集层次结构的新方法是<a href="/kotlin/components-stability#stability-levels-explained">实验性的</a>。 它可能会在未来的 Kotlin 版本中在不提前通知的情况下更改。需要选择启用（详见下文）。 我们非常感谢你在 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a> 中提供反馈。</p></div><p>Kotlin 1.8.20 提供了一种在多平台项目中设置源代码集层次结构的新方法——默认目标层次结构。 新方法旨在取代像 <code>ios</code> 这样的目标快捷方式，这些快捷方式存在<a href="#why-replace-shortcuts">设计缺陷</a>。</p><p>默认目标层次结构背后的思想很简单：你<a href="/kotlinexplicit">显式</a><a href="/kotlindeclare">声明</a>项目<a href="/kotlincompilation">编译</a>到的所有<a href="/kotlintarget">目标平台</a>，而 Kotlin Gradle 插件会根据指定的<a href="/kotlintarget">目标平台</a>自动创建共享源代码集。</p><h4 id="设置你的项目" tabindex="-1">设置你的项目 <a class="header-anchor" href="#设置你的项目" aria-label="Permalink to &quot;设置你的项目&quot;">​</a></h4><p>考虑这个简单的多平台移动应用程序示例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalKotlinGradlePluginApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Enable the default target hierarchy:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    targetHierarchy.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    android</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosSimulatorArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>你可以将默认目标层次结构视为所有可能目标平台及其共享源代码集的模板。 当你在代码中<a href="/kotlindeclare">声明</a>最终目标平台 <code>android</code>、<code>iosArm64</code> 和 <code>iosSimulatorArm64</code> 时，Kotlin Gradle 插件会从模板中找到合适的共享源代码集并为你创建它们。 最终的层次结构如下所示：</p>`,54)),a[20]||(a[20]=i("p",null,[i("img",{src:r,alt:"An example of using the default target hierarchy",thumbnail:"true",width:"350","thumbnail-same-file":"true"})],-1)),a[21]||(a[21]=n('<p>绿色源代码集是实际创建并存在于<a href="/kotlinproject">项目</a>中的，而默认模板中的灰色源代码集则被忽略。 如你所见，Kotlin Gradle 插件没有创建 <code>watchos</code> 源代码集，例如，因为<a href="/kotlinproject">项目</a>中没有 watchOS 目标平台。</p><p>如果你添加一个 watchOS 目标平台，例如 <code>watchosArm64</code>，<code>watchos</code> 源代码集将被创建，并且来自 <code>apple</code>、<code>native</code> 和 <code>common</code> 源代码集的代码也将<a href="/kotlincompilation">编译</a>到 <code>watchosArm64</code>。</p><p>你可以在<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-hierarchy.html#default-hierarchy-template" target="_blank" rel="noreferrer">文档</a>中找到默认目标层次结构的完整方案。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>在此示例中，<code>apple</code> 和 <code>native</code> 源代码集仅<a href="/kotlincompilation">编译</a>到 <code>iosArm64</code> 和 <code>iosSimulatorArm64</code> 目标平台。 因此，尽管名称如此，它们仍可访问完整的 iOS API。 这对于像 <code>native</code> 这样的源代码集来说可能有些反直觉，因为你可能期望只有在所有<a href="/kotlinnative">原生</a>目标平台上可用的 API 才能在此源代码集中访问。 此行为在未来可能会改变。</p></div>',4)),a[22]||(a[22]=i("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"为何取代快捷方式",tabindex:"-1"},[s("为何取代快捷方式 "),i("a",{class:"header-anchor",href:"#为何取代快捷方式","aria-label":'Permalink to "为何取代快捷方式 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),a[23]||(a[23]=n('<p>创建源代码集层次结构可能冗长、容易出错且对初学者不友好。我们之前的解决方案是引入像 <code>ios</code> 这样的快捷方式，它们为你创建了部分层次结构。 然而，事实证明，使用快捷方式存在一个巨大的设计缺陷：它们难以更改。</p><p>以 <code>ios</code> 快捷方式为例。它只创建 <code>iosArm64</code> 和 <code>iosX64</code> 目标平台，这可能会令人困惑，并在需要 <code>iosSimulatorArm64</code> 目标平台的基于 M1 的主机上工作时导致问题。 然而，添加 <code>iosSimulatorArm64</code> 目标平台对用户<a href="/kotlinproject">项目</a>来说可能是一个非常具有破坏性的更改：</p><ul><li>在 <code>iosMain</code> 源代码集中使用的所有<a href="/kotlindependency">依赖项</a>都必须支持 <code>iosSimulatorArm64</code> 目标平台；否则，<a href="/kotlindependency">依赖项</a>解析将失败。</li><li>添加新目标平台时，<code>iosMain</code> 中使用的一些<a href="/kotlinnative">原生</a> API 可能会消失（尽管在 <code>iosSimulatorArm64</code> 的情况下不太可能）。</li><li>在某些情况下，例如在你的基于 Intel 的 MacBook 上编写一个小型宠物<a href="/kotlinproject">项目</a>时，你甚至可能不需要此更改。</li></ul><p>很明显，快捷方式并未解决配置层次结构的问题，这就是我们停止添加新快捷方式的原因。</p><p>默认目标层次结构乍看起来可能与快捷方式相似，但它们有一个关键区别：<strong>用户必须<a href="/kotlinexplicit">显式</a>指定目标平台集</strong>。 此集合<a href="/kotlindefine">定义</a>了你的<a href="/kotlinproject">项目</a>如何<a href="/kotlincompilation">编译</a>和发布，以及它如何参与<a href="/kotlindependency">依赖项</a>解析。 由于此集合是固定的，因此 Kotlin Gradle 插件的默认配置更改应该会显著减少生态系统中的困扰，并且提供工具辅助迁移将变得更加容易。</p><h4 id="如何启用默认层次结构" tabindex="-1">如何启用默认层次结构 <a class="header-anchor" href="#如何启用默认层次结构" aria-label="Permalink to &quot;如何启用默认层次结构&quot;">​</a></h4><p>这项新<a href="/kotlinfeature">特性</a>是<a href="/kotlin/components-stability#stability-levels-explained">实验性的</a>。对于 Kotlin Gradle <a href="/kotlinbuild">构建</a>脚本， 你需要选择启用 <code>@OptIn(ExperimentalKotlinGradlePluginApi::class)</code>。</p><p>有关更多信息，请参见<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-hierarchy.html#default-hierarchy-template" target="_blank" rel="noreferrer">分层项目结构</a>。</p><h4 id="留下反馈" tabindex="-1">留下反馈 <a class="header-anchor" href="#留下反馈" aria-label="Permalink to &quot;留下反馈&quot;">​</a></h4><p>这是多平台<a href="/kotlinproject">项目</a>的一项重大变更。我们非常感谢你的<a href="https://kotl.in/issue" target="_blank" rel="noreferrer">反馈</a>，以帮助我们做得更好。</p><h3 id="kotlin-multiplatform-中-gradle-复合构建支持的预览" tabindex="-1">Kotlin Multiplatform 中 Gradle 复合构建支持的预览 <a class="header-anchor" href="#kotlin-multiplatform-中-gradle-复合构建支持的预览" aria-label="Permalink to &quot;Kotlin Multiplatform 中 Gradle 复合构建支持的预览&quot;">​</a></h3><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>自 Kotlin Gradle Plugin 1.8.20 起，此<a href="/kotlinfeature">特性</a>已在 Gradle <a href="/kotlinbuild">构建</a>中得到支持。对于 IDE 支持，请使用 IntelliJ IDEA 2023.1 Beta 2 (231.8109.2) 或更高版本，以及带有任何 Kotlin IDE 插件的 Kotlin Gradle 插件 1.8.20。</p></div><p>从 1.8.20 开始，Kotlin Multiplatform 支持 <a href="https://docs.gradle.org/current/userguide/composite_builds.html" target="_blank" rel="noreferrer">Gradle 复合构建</a>。 复合构建允许你将独立<a href="/kotlinproject">项目</a>或同一<a href="/kotlinproject">项目</a>部分的<a href="/kotlinbuild">构建</a>包含到单个<a href="/kotlinbuild">构建</a>中。</p><p>由于一些技术挑战，Kotlin Multiplatform 对 Gradle 复合构建的支持一直不完整。 Kotlin 1.8.20 包含了改进支持的预览版，该版本应该适用于更广泛的<a href="/kotlinproject">项目</a>类型。 要试用它，请将以下选项添加到你的 <code>gradle.properties</code> 中：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.mpp.import.enableKgpDependencyResolution=true</span></span></code></pre></div><p>此选项启用了新导入模式的预览。除了对复合<a href="/kotlinbuild">构建</a>的支持外，它还提供了更流畅的多平台<a href="/kotlinproject">项目</a>导入体验， 因为我们包含了主要的错误修复和改进，以使导入更加稳定。</p><h4 id="已知问题" tabindex="-1">已知问题 <a class="header-anchor" href="#已知问题" aria-label="Permalink to &quot;已知问题&quot;">​</a></h4><p>它仍然是一个需要进一步稳定的预览版本，你在导入过程中可能会遇到一些问题。以下是我们计划在 Kotlin 1.8.20 最终发布之前修复的一些已知问题：</p><ul><li>目前还没有适用于 IntelliJ IDEA 2023.1 EAP 的 Kotlin 1.8.20 插件。尽管如此，你仍然可以将 Kotlin Gradle 插件版本设置为 1.8.20 并在该 IDE 中试用复合<a href="/kotlinbuild">构建</a>。</li><li>如果你的<a href="/kotlinproject">项目</a>包含带有指定 <code>rootProject.name</code> 的<a href="/kotlinbuild">构建</a>，复合<a href="/kotlinbuild">构建</a>可能无法解析 Kotlin 元数据。有关解决方法和详细信息，请参见此 <a href="https://youtrack.jetbrains.com/issue/KT-56536" target="_blank" rel="noreferrer">Youtrack 问题</a>。</li></ul><p>我们鼓励你试用此特性，并在 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a> 上提交所有报告，以帮助我们在 Kotlin 1.9.0 中将其设为默认。</p><h3 id="改进了-xcode-中-gradle-错误的输出" tabindex="-1">改进了 Xcode 中 Gradle 错误的输出 <a class="header-anchor" href="#改进了-xcode-中-gradle-错误的输出" aria-label="Permalink to &quot;改进了 Xcode 中 Gradle 错误的输出&quot;">​</a></h3><p>如果你在 Xcode 中<a href="/kotlinbuild">构建</a>多平台<a href="/kotlinproject">项目</a>时遇到问题，你可能会遇到“Command PhaseScriptExecution failed with a nonzero exit code”错误。 此消息表明 Gradle 调用失败，但在尝试检测问题时帮助不大。</p><p>从 Kotlin 1.8.20 开始，Xcode 可以解析 Kotlin/Native 编译器的输出。此外，如果 Gradle <a href="/kotlinbuild">构建</a>失败，你将在 Xcode 中看到来自根本原因异常的附加错误消息。在大多数情况下， 这将有助于识别根本问题。</p><p><img src="'+o+`" alt="Improved output for Gradle errors in Xcode" width="700"></p><p>新行为默认对用于 Xcode 集成的标准 Gradle <a href="/kotlintask">任务</a>启用， 例如 <code>embedAndSignAppleFrameworkForXcode</code>，它可将多平台<a href="/kotlinproject">项目</a>中的 iOS framework 连接到 Xcode 中的 iOS <a href="/kotlinapplication">应用程序</a>。 它也可以通过 <code>kotlin.native.useXcodeMessageStyle</code> Gradle 属性启用（或禁用）。</p><h2 id="kotlin-javascript" tabindex="-1">Kotlin/JavaScript <a class="header-anchor" href="#kotlin-javascript" aria-label="Permalink to &quot;Kotlin/JavaScript&quot;">​</a></h2><p>Kotlin 1.8.20 改变了 TypeScript <a href="/kotlindefinition">定义</a>的生成方式。它还包括一项旨在改善你的调试体验的更改：</p><ul><li><a href="#removal-of-dukat-integration-from-gradle-plugin">从 Gradle 插件中移除 Dukat 集成</a></li><li><a href="#kotlin-variable-and-function-names-in-source-maps">源代码映射中的 Kotlin 变量和函数名称</a></li><li><a href="#opt-in-for-generation-of-typescript-definition-files">选择启用 TypeScript 定义文件的生成</a></li></ul><h3 id="从-gradle-插件中移除-dukat-集成" tabindex="-1">从 Gradle 插件中移除 Dukat 集成 <a class="header-anchor" href="#从-gradle-插件中移除-dukat-集成" aria-label="Permalink to &quot;从 Gradle 插件中移除 Dukat 集成&quot;">​</a></h3><p>在 Kotlin 1.8.20 中，我们已将<a href="/kotlin/components-stability#stability-levels-explained">实验性</a> Dukat 集成从 Kotlin/JavaScript Gradle 插件中移除。Dukat 集成支持将 TypeScript <a href="/kotlindeclaration">声明</a>文件 (<code>.d.ts</code>) 自动转换为 Kotlin 外部<a href="/kotlindeclaration">声明</a>。</p><p>你仍然可以使用我们的 <a href="https://github.com/Kotlin/dukat" target="_blank" rel="noreferrer">Dukat 工具</a>将 TypeScript <a href="/kotlindeclaration">声明</a>文件 (<code>.d.ts</code>) 转换为 Kotlin 外部<a href="/kotlindeclaration">声明</a>。</p><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>Dukat 工具是<a href="/kotlin/components-stability#stability-levels-explained">实验性的</a>。 它可能随时被删除或更改。</p></div><h3 id="源代码映射中的-kotlin-变量和函数名称" tabindex="-1">源代码映射中的 Kotlin 变量和函数名称 <a class="header-anchor" href="#源代码映射中的-kotlin-变量和函数名称" aria-label="Permalink to &quot;源代码映射中的 Kotlin 变量和函数名称&quot;">​</a></h3><p>为了帮助调试，我们引入了将你在 Kotlin 代码中为变量和<a href="/kotlinfunction">函数</a><a href="/kotlindeclare">声明</a>的名称添加到源代码映射中的功能。 在 1.8.20 之前，这些名称在源代码映射中不可用，因此在调试器中，你总是看到生成的 JavaScript 的变量和<a href="/kotlinfunction">函数</a>名称。</p><p>你可以通过在 Gradle 文件 <code>build.gradle.kts</code> 中使用 <code>sourceMapNamesPolicy</code> 或 <code>-source-map-names-policy</code> 编译器选项来配置要添加的内容。下表列出了可能的设置：</p><table tabindex="0"><thead><tr><th>设置</th><th>描述</th><th>示例输出</th></tr></thead><tbody><tr><td><code>simple-names</code></td><td>添加变量名称和简单的函数名称。（默认）</td><td><code>main</code></td></tr><tr><td><code>fully-qualified-names</code></td><td>添加变量名称和完全限定的函数名称。</td><td><code>com.example.kjs.playground.main</code></td></tr><tr><td><code>no</code></td><td>不添加变量或函数名称。</td><td>不适用</td></tr></tbody></table><p>请参见 <code>build.gradle.kts</code> 文件中的示例配置：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tasks.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">org</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jetbrains</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gradle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tasks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Kotlin2JsCompile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configureEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    compilercompileOptions.sourceMapNamesPolicy.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(org.jetbrains.kotlin.gradle.dsl.JsSourceMapNamesPolicy.SOURCE_MAP_NAMES_POLICY_FQ_NAMES) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// or SOURCE_MAP_NAMES_POLICY_NO, or SOURCE_MAP_NAMES_POLICY_SIMPLE_NAMES</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>基于 Chromium 的浏览器中提供的调试工具可以从你的源代码映射中获取原始 Kotlin 名称，以提高堆栈跟踪的可读性。祝你调试愉快！</p><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>源代码映射中添加变量和<a href="/kotlinfunction">函数</a>名称是<a href="/kotlin/components-stability#stability-levels-explained">实验性的</a>。 它可能随时被删除或更改。</p></div><h3 id="选择启用-typescript-定义文件的生成" tabindex="-1">选择启用 TypeScript 定义文件的生成 <a class="header-anchor" href="#选择启用-typescript-定义文件的生成" aria-label="Permalink to &quot;选择启用 TypeScript 定义文件的生成&quot;">​</a></h3><p>以前，如果你有一个生成可执行文件 (<code>binaries.executable()</code>) 的<a href="/kotlinproject">项目</a>，Kotlin/JS IR 编译器会收集任何带有 <code>@JsExport</code> 标记的<a href="/kotlintop-level">顶层</a><a href="/kotlindeclaration">声明</a>，并自动在 <code>.d.ts</code> 文件中生成 TypeScript <a href="/kotlindefinition">定义</a>。</p><p>由于这并非对每个<a href="/kotlinproject">项目</a>都适用，因此我们在 Kotlin 1.8.20 中更改了行为。如果你想生成 TypeScript <a href="/kotlindefinition">定义</a>，你必须在 Gradle <a href="/kotlinbuild">构建</a>文件中<a href="/kotlinexplicit">显式</a>配置此项。 将 <code>generateTypeScriptDefinitions()</code> 添加到你的 <code>build.gradle.kts.file</code> 中<a href="/kotlin/js-project-setup#execution-environments"><code>js</code> 部分</a>。例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        binaries.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        browser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        generateTypeScriptDefinitions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>TypeScript <a href="/kotlindefinition">定义</a> (<code>d.ts</code>) 的生成是<a href="/kotlin/components-stability#stability-levels-explained">实验性的</a>。它可能随时被删除或更改。</p></div><h2 id="gradle" tabindex="-1">Gradle <a class="header-anchor" href="#gradle" aria-label="Permalink to &quot;Gradle&quot;">​</a></h2><p>Kotlin 1.8.20 完全兼容 Gradle 6.8 到 7.6 版本，除了<a href="https://youtrack.jetbrains.com/issue/KT-55751" target="_blank" rel="noreferrer">多平台插件中的一些特殊情况</a>。 你也可以使用最新的 Gradle 版本，但如果你这样做， 请记住你可能会遇到弃用警告或某些新的 Gradle <a href="/kotlinfeature">特性</a>可能无法工作。</p><p>此版本带来了以下更改：</p><ul><li><a href="#new-gradle-plugins-versions-alignment">Gradle 插件版本新对齐方式</a></li><li><a href="#new-jvm-incremental-compilation-by-default-in-gradle">Gradle 中默认启用新的 JVM 增量编译</a></li><li><a href="#precise-backup-of-compilation-tasks-outputs">编译任务输出的精确备份</a></li><li><a href="#lazy-kotlin-jvm-tasks-creation-for-all-gradle-versions">所有 Gradle 版本都可延迟创建 Kotlin/JVM 任务</a></li><li><a href="#non-default-location-of-compile-tasks-destinationdirectory">编译任务 destinationDirectory 的非默认位置</a></li><li><a href="#ability-to-opt-out-from-reporting-compiler-arguments-to-an-http-statistics-service">选择退出向 HTTP 统计服务报告编译器实参的能力</a></li></ul><h3 id="gradle-插件版本新对齐方式" tabindex="-1">Gradle 插件版本新对齐方式 <a class="header-anchor" href="#gradle-插件版本新对齐方式" aria-label="Permalink to &quot;Gradle 插件版本新对齐方式&quot;">​</a></h3><p>Gradle 提供了一种方法来确保必须协同工作的<a href="/kotlindependency">依赖项</a>在其版本上始终<a href="https://docs.gradle.org/current/userguide/dependency_version_alignment.html#aligning_versions_natively_with_gradle" target="_blank" rel="noreferrer">对齐</a>。 Kotlin 1.8.20 也采用了这种方法。它默认工作，因此你无需更改或更新配置即可启用它。 此外，你不再需要通过<a href="/kotlin/whatsnew18#resolution-of-kotlin-gradle-plugins-transitive-dependencies">此变通方法来解决 Kotlin Gradle 插件的传递依赖项</a>。</p><p>我们非常感谢你在 <a href="https://youtrack.jetbrains.com/issue/KT-54691" target="_blank" rel="noreferrer">YouTrack</a> 上对此特性提供反馈。</p><h3 id="gradle-中默认启用新的-jvm-增量编译" tabindex="-1">Gradle 中默认启用新的 JVM 增量编译 <a class="header-anchor" href="#gradle-中默认启用新的-jvm-增量编译" aria-label="Permalink to &quot;Gradle 中默认启用新的 JVM 增量编译&quot;">​</a></h3><p>增量<a href="/kotlincompilation">编译</a>的新方法（<a href="/kotlin/whatsnew17#a-new-approach-to-incremental-compilation">自 Kotlin 1.7.0 起可用</a>）现在默认工作。 你不再需要在 <code>gradle.properties</code> 中指定 <code>kotlin.incremental.useClasspathSnapshot=true</code> 来启用它。</p><p>我们非常感谢你对此的反馈。你可以在 YouTrack 中<a href="https://kotl.in/issue" target="_blank" rel="noreferrer">提交一个问题</a>。</p><h3 id="编译任务输出的精确备份" tabindex="-1">编译任务输出的精确备份 <a class="header-anchor" href="#编译任务输出的精确备份" aria-label="Permalink to &quot;编译任务输出的精确备份&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>编译任务输出的精确备份是<a href="/kotlin/components-stability#stability-levels-explained">实验性的</a>。 要使用它，请将 <code>kotlin.compiler.preciseCompilationResultsBackup=true</code> 添加到 <code>gradle.properties</code> 中。 我们非常感谢你在 <a href="https://kotl.in/issue/experimental-ic-optimizations" target="_blank" rel="noreferrer">YouTrack</a> 上对此提供反馈。</p></div><p>从 Kotlin 1.8.20 开始，你可以启用精确备份，只有 Kotlin 在<a href="/kotlin/gradle-compilation-and-caches#incremental-compilation">增量编译</a>中重新<a href="/kotlincompilation">编译</a>的类才会被备份。 完整备份和精确备份都有助于在<a href="/kotlincompilation">编译</a>错误后再次增量运行<a href="/kotlinbuild">构建</a>。精确备份还可以节省<a href="/kotlinbuild">构建</a>时间。 在大型<a href="/kotlinproject">项目</a>中，或者如果许多<a href="/kotlintask">任务</a>正在进行备份，完整备份可能会花费<strong>显著的</strong><a href="/kotlinbuild">构建</a>时间，特别是当<a href="/kotlinproject">项目</a>位于慢速 HDD 上时。</p><p>这项优化是实验性的。你可以通过将 <code>kotlin.compiler.preciseCompilationResultsBackup</code> Gradle 属性添加到 <code>gradle.properties</code> 文件中来启用它：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.compiler.preciseCompilationResultsBackup=true</span></span></code></pre></div>`,60)),a[24]||(a[24]=i("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"jetbrains-中精确备份用法的示例",tabindex:"-1"},[s("JetBrains 中精确备份用法的示例 "),i("a",{class:"header-anchor",href:"#jetbrains-中精确备份用法的示例","aria-label":'Permalink to "JetBrains 中精确备份用法的示例 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),a[25]||(a[25]=n('<p>在下面的图表中，你可以看到与完整备份相比使用精确备份的示例：</p><p><img src="'+d+'" alt="Comparison of full and precise backups" width="700"></p><p>第一个和第二个图表显示了 Kotlin <a href="/kotlinproject">项目</a>中精确备份如何影响 Kotlin Gradle 插件的<a href="/kotlinbuild">构建</a>：</p><ol><li>在对许多模块<a href="/kotlindependency">依赖项</a>的模块进行小的 <a href="https://en.wikipedia.org/wiki/Application_binary_interface" target="_blank" rel="noreferrer">ABI</a> 更改（添加一个新的公共<a href="/kotlinmethod">方法</a>）之后。</li><li>在对没有其他模块<a href="/kotlindependency">依赖项</a>的模块进行小的非 ABI 更改（添加一个私有<a href="/kotlinfunction">函数</a>）之后。</li></ol><p>第三个图表显示了在 <a href="https://www.jetbrains.com/space/" target="_blank" rel="noreferrer">Space</a> <a href="/kotlinproject">项目</a>中，在对许多模块<a href="/kotlindependency">依赖项</a>的 Kotlin/JS 模块进行小的非 ABI 更改（添加一个私有<a href="/kotlinfunction">函数</a>）之后，精确备份如何影响 Web 前端的<a href="/kotlinbuild">构建</a>。</p><p>这些测量是在配备 Apple M1 Max CPU 的计算机上进行的；不同的计算机将产生略有不同的结果。影响性能的因素包括但不限于：</p><ul><li><a href="/kotlin/gradle-compilation-and-caches#the-kotlin-daemon-and-how-to-use-it-with-gradle">Kotlin daemon</a> 和 <a href="https://docs.gradle.org/current/userguide/gradle_daemon.html" target="_blank" rel="noreferrer">Gradle daemon</a> 的“预热”程度。</li><li>磁盘的速度。</li><li>CPU 型号及其繁忙程度。</li><li>哪些模块受更改影响以及这些模块的大小。</li><li>更改是 ABI 还是非 ABI。</li></ul>',7)),a[26]||(a[26]=i("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"使用构建报告评估优化",tabindex:"-1"},[s("使用构建报告评估优化 "),i("a",{class:"header-anchor",href:"#使用构建报告评估优化","aria-label":'Permalink to "使用构建报告评估优化 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),a[27]||(a[27]=n(`<p>要估算优化对你的计算机在你的<a href="/kotlinproject">项目</a>和场景中的影响， 你可以使用 [Kotlin <a href="/kotlinbuild">构建</a>报告](gradle-compilation-and-caches.md#build-reports)。 通过将以下属性添加到你的 <code>gradle.properties</code> 文件中，启用文本文件格式的报告：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.build.report.output=file</span></span></code></pre></div><p>以下是启用精确备份前报告相关部分的示例：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Task &#39;:kotlin-gradle-plugin:compileCommonKotlin&#39; finished in 0.59 s</span></span>
<span class="line"><span>&lt;...&gt;</span></span>
<span class="line"><span>Time metrics:</span></span>
<span class="line"><span> Total Gradle task time: 0.59 s</span></span>
<span class="line"><span> Task action before worker execution: 0.24 s</span></span>
<span class="line"><span>  Backup output: 0.22 s // Pay attention to this number </span></span>
<span class="line"><span>&lt;...&gt;</span></span></code></pre></div><p>以下是启用精确备份后报告相关部分的示例：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Task &#39;:kotlin-gradle-plugin:compileCommonKotlin&#39; finished in 0.46 s</span></span>
<span class="line"><span>&lt;...&gt;</span></span>
<span class="line"><span>Time metrics:</span></span>
<span class="line"><span> Total Gradle task time: 0.46 s</span></span>
<span class="line"><span> Task action before worker execution: 0.07 s</span></span>
<span class="line"><span>  Backup output: 0.05 s // The time has reduced</span></span>
<span class="line"><span> Run compilation in Gradle worker: 0.32 s</span></span>
<span class="line"><span>  Clear jar cache: 0.00 s</span></span>
<span class="line"><span>  Precise backup output: 0.00 s // Related to precise backup</span></span>
<span class="line"><span>  Cleaning up the backup stash: 0.00 s // Related to precise backup</span></span>
<span class="line"><span>&lt;...&gt;</span></span></code></pre></div><h3 id="所有-gradle-版本都可延迟创建-kotlin-jvm-任务" tabindex="-1">所有 Gradle 版本都可延迟创建 Kotlin/JVM 任务 <a class="header-anchor" href="#所有-gradle-版本都可延迟创建-kotlin-jvm-任务" aria-label="Permalink to &quot;所有 Gradle 版本都可延迟创建 Kotlin/JVM 任务&quot;">​</a></h3><p>对于在 Gradle 7.3+ 上使用 <code>org.jetbrains.kotlin.gradle.jvm</code> 插件的<a href="/kotlinproject">项目</a>，Kotlin Gradle 插件不再急切地创建和配置<a href="/kotlintask">任务</a> <code>compileKotlin</code>。 在较低的 Gradle 版本上，它只是注册所有<a href="/kotlintask">任务</a>并且在空运行时不配置它们。 现在在使用 Gradle 7.3+ 时也存在相同的行为。</p><h3 id="编译任务-destinationdirectory-的非默认位置" tabindex="-1">编译任务 destinationDirectory 的非默认位置 <a class="header-anchor" href="#编译任务-destinationdirectory-的非默认位置" aria-label="Permalink to &quot;编译任务 destinationDirectory 的非默认位置&quot;">​</a></h3><p>如果执行以下任一操作，请更新你的<a href="/kotlinbuild">构建</a>脚本并添加一些额外的代码：</p><ul><li><a href="/kotlinoverride">覆盖</a> Kotlin/JVM <code>KotlinJvmCompile</code>/<code>KotlinCompile</code> <a href="/kotlintask">任务</a>的 <code>destinationDirectory</code> 位置。</li><li>使用已弃用的 Kotlin/JS/Non-IR <a href="/kotlin/gradle-plugin-variants">变体</a>并<a href="/kotlinoverride">覆盖</a> <code>Kotlin2JsCompile</code> <a href="/kotlintask">任务</a>的 <code>destinationDirectory</code>。</li></ul><p>你需要在 JAR 文件中将 <code>sourceSets.main.kotlin.classesDirectories</code> <a href="/kotlinexplicit">显式</a>添加到 <code>sourceSets.main.outputs</code>：</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tasks</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">jar(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Jar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    from sourceSets</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">main</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">outputs</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    from sourceSets</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">main</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kotlin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">classesDirectories</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="选择退出向-http-统计服务报告编译器实参的能力" tabindex="-1">选择退出向 HTTP 统计服务报告编译器实参的能力 <a class="header-anchor" href="#选择退出向-http-统计服务报告编译器实参的能力" aria-label="Permalink to &quot;选择退出向 HTTP 统计服务报告编译器实参的能力&quot;">​</a></h3><p>你现在可以控制 Kotlin Gradle 插件是否应在 HTTP <a href="/kotlinbuild">构建</a>报告中包含编译器<a href="/kotlinargument">实参</a>。 有时，你可能不需要插件报告这些<a href="/kotlinargument">实参</a>。如果一个<a href="/kotlinproject">项目</a>包含许多模块， 报告中的编译器<a href="/kotlinargument">实参</a>可能会非常庞大且帮助不大。现在有一种方法可以禁用它，从而节省内存。 在你的 <code>gradle.properties</code> 或 <code>local.properties</code> 中，使用 <code>kotlin.build.report.include_compiler_arguments=(true|false)</code> 属性。</p><p>我们非常感谢你在 <a href="https://youtrack.jetbrains.com/issue/KT-55323/" target="_blank" rel="noreferrer">YouTrack</a> 上对此特性提供反馈。</p><h2 id="标准库" tabindex="-1">标准库 <a class="header-anchor" href="#标准库" aria-label="Permalink to &quot;标准库&quot;">​</a></h2><p>Kotlin 1.8.20 添加了各种新的<a href="/kotlinfeature">特性</a>，其中包括一些对 Kotlin/Native 开发特别有用的<a href="/kotlinfeature">特性</a>：</p><ul><li><a href="#support-for-the-autocloseable-interface">支持 AutoCloseable 接口</a></li><li><a href="#support-for-base64-encoding">支持 Base64 编码和解码</a></li><li><a href="#support-for-volatile-in-kotlin-native">支持 Kotlin/Native 中的 @Volatile</a></li><li><a href="#bug-fix-for-stack-overflow-when-using-regex-in-kotlin-native">修复 Kotlin/Native 中使用正则表达式时的堆栈溢出错误</a></li></ul><h3 id="支持-autocloseable-接口" tabindex="-1">支持 AutoCloseable 接口 <a class="header-anchor" href="#支持-autocloseable-接口" aria-label="Permalink to &quot;支持 AutoCloseable 接口&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>新的 <code>AutoCloseable</code> 接口是<a href="/kotlin/components-stability#stability-levels-explained">实验性的</a>，要使用它， 你需要选择启用 <code>@OptIn(ExperimentalStdlibApi::class)</code> 或编译器<a href="/kotlinargument">实参</a> <code>-opt-in=kotlin.ExperimentalStdlibApi</code>。</p></div><p><code>AutoCloseable</code> 接口已添加到公共标准库中，以便你可以使用一个通用的接口来关闭所有库的资源。 在 Kotlin/JVM 中，<code>AutoCloseable</code> 接口是 <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/AutoCloseable.html" target="_blank" rel="noreferrer"><code>java.lang.AutoClosable</code></a> 的别名。</p><p>此外，现在包含<a href="/kotlinextension">扩展</a><a href="/kotlinfunction">函数</a> <code>use()</code>，它在选定的资源上执行给定的代码块<a href="/kotlinfunction">函数</a>， 然后正确关闭它，无论是否抛出异常。</p><p>公共标准库中没有实现 <code>AutoCloseable</code> 接口的公共类。在下面的示例中，我们<a href="/kotlindefine">定义</a>了 <code>XMLWriter</code> 接口，并假设存在实现它的资源。 例如，此资源可能是一个打开文件、写入 XML 内容然后关闭它的类。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> XMLWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AutoCloseable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> document</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(encoding: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, version: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, content: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">XMLWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Unit)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, content: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">XMLWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Unit)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> attribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> writeBooksTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(writer: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">XMLWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    writer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { xml </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        xml.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">document</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(encoding </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;UTF-8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, version </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;bookstore&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;book&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    attribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;category&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;fiction&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;title&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Harry Potter and the Prisoner of Azkaban&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;author&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;J. K. Rowling&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;year&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1999&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;price&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;29.99&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;book&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    attribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;category&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;programming&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;title&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Kotlin in Action&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;author&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Dmitry Jemerov&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;author&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Svetlana Isakova&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;year&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2017&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;price&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;25.19&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="支持-base64-编码" tabindex="-1">支持 Base64 编码 <a class="header-anchor" href="#支持-base64-编码" aria-label="Permalink to &quot;支持 Base64 编码&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>新的编码和解码<a href="/kotlinfunctionality">功能</a>是<a href="/kotlin/components-stability#stability-levels-explained">实验性的</a>， 要使用它，你需要选择启用 <code>@OptIn(ExperimentalEncodingApi::class)</code> 或编译器<a href="/kotlinargument">实参</a> <code>-opt-in=kotlin.io.encoding.ExperimentalEncodingApi</code>。</p></div><p>我们已添加对 Base64 编码和解码的支持。我们提供了 3 个类实例，每个实例使用不同的编码方案并显示不同的行为。 使用 <code>Base64.Default</code> 实例用于标准 <a href="https://www.rfc-editor.org/rfc/rfc4648#section-4" target="_blank" rel="noreferrer">Base64 编码方案</a>。</p><p>使用 <code>Base64.UrlSafe</code> 实例用于<a href="https://www.rfc-editor.org/rfc/rfc4648#section-5" target="_blank" rel="noreferrer">“URL 和文件名安全”</a>编码方案。</p><p>使用 <code>Base64.Mime</code> 实例用于 <a href="https://www.rfc-editor.org/rfc/rfc2045#section-6.8" target="_blank" rel="noreferrer">MIME</a> 编码方案。 当你使用 <code>Base64.Mime</code> 实例时，所有编码<a href="/kotlinfunction">函数</a>每隔 76 个字符会插入一个行分隔符。 在解码的情况下，任何非法字符都会被跳过，并且不会抛出异常。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>Base64.Default</code> 实例是 <code>Base64</code> 类的伴生对象。因此，你可以通过 <code>Base64.encode()</code> 和 <code>Base64.decode()</code> 调用其<a href="/kotlinfunction">函数</a>，而不是 <code>Base64.Default.encode()</code> 和 <code>Base64.Default.decode()</code>。</p></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foBytes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;fo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.code.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toByte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toByteArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base64.Default.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">encode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(foBytes) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;Zm8=&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Alternatively:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Base64.encode(foBytes)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foobarBytes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;foobar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.code.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toByte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toByteArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base64.UrlSafe.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">encode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(foobarBytes) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;Zm9vYmFy&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base64.Default.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">decode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Zm8=&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// foBytes</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Alternatively:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Base64.decode(&quot;Zm8=&quot;)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base64.UrlSafe.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">decode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Zm9vYmFy&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// foobarBytes</span></span></code></pre></div><p>你可以使用附加<a href="/kotlinfunction">函数</a>将字节编码或解码到现有缓冲区中，以及将编码结果附加到提供的 <code>Appendable</code> 类型对象。</p><p>在 Kotlin/JVM 中，我们还添加了<a href="/kotlinextension">扩展</a><a href="/kotlinfunction">函数</a> <code>encodingWith()</code> 和 <code>decodingWith()</code>，使你能够使用输入和输出流执行 Base64 编码和解码。</p><h3 id="支持-kotlin-native-中的-volatile" tabindex="-1">支持 Kotlin/Native 中的 @Volatile <a class="header-anchor" href="#支持-kotlin-native-中的-volatile" aria-label="Permalink to &quot;支持 Kotlin/Native 中的 @Volatile&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>Kotlin/Native 中的 <code>@Volatile</code> 是<a href="/kotlin/components-stability#stability-levels-explained">实验性的</a>。 它可能随时被删除或更改。需要选择启用（详见下文）。 仅用于评估目的。我们非常感谢你在 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a> 上对此提供反馈。</p></div><p>如果你用 <code>@Volatile</code> 注解一个 <code>var</code> 属性，那么[幕后字段](backing field)会被标记， 使得对该字段的任何读取或写入都是原子的，并且写入始终对其他线程可见。</p><p>在 1.8.20 之前，<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.jvm/-volatile/" target="_blank" rel="noreferrer"><code>kotlin.jvm.Volatile</code> 注解</a>在公共标准库中可用。 然而，此注解仅在 JVM 中有效。如果你在 Kotlin/Native 中使用它，它将被忽略，这可能导致错误。</p><p>在 1.8.20 中，我们引入了一个通用注解 <code>kotlin.concurrent.Volatile</code>，你可以在 JVM 和 Kotlin/Native 中使用它。</p><h4 id="如何启用" tabindex="-1">如何启用 <a class="header-anchor" href="#如何启用" aria-label="Permalink to &quot;如何启用&quot;">​</a></h4><p>要试用这项特性，请选择启用 <code>@OptIn(ExperimentalStdlibApi)</code> 并启用 <code>-language-version 1.9</code> 编译器选项。 在 Gradle <a href="/kotlinproject">项目</a>中，你可以通过将以下内容添加到你的 <code>build.gradle(.kts)</code> 文件中来完成：</p>`,41)),t(h,{group:"build-script"},{default:l(()=>[t(e,{title:"Kotlin","group-key":"kotlin"},{default:l(()=>a[11]||(a[11]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withType"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"org"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"jetbrains"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"gradle"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"tasks"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"KotlinCompilationTask"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<*>>()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"configureEach"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        compilerOptions")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            .languageVersion")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            ."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"set"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"                org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_1_9")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            )")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")])])])],-1)])),_:1}),t(e,{title:"Groovy","group-key":"groovy"},{default:l(()=>a[12]||(a[12]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    .withType("),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"class)")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    .configureEach {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        compilerOptions"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"languageVersion "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"=")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"            org.jetbrains.kotlin.gradle.dsl.KotlinVersion."),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"KOTLIN_1_9")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")])])])],-1)])),_:1})]),_:1}),a[28]||(a[28]=n(`<h3 id="修复-kotlin-native-中使用正则表达式时的堆栈溢出错误" tabindex="-1">修复 Kotlin/Native 中使用正则表达式时的堆栈溢出错误 <a class="header-anchor" href="#修复-kotlin-native-中使用正则表达式时的堆栈溢出错误" aria-label="Permalink to &quot;修复 Kotlin/Native 中使用正则表达式时的堆栈溢出错误&quot;">​</a></h3><p>在 Kotlin 的早期版本中，如果你的正则表达式输入包含大量字符，即使正则表达式模式非常简单，也可能发生崩溃。 在 1.8.20 中，此问题已得到解决。 有关更多信息，请参见 <a href="https://youtrack.jetbrains.com/issue/KT-46211" target="_blank" rel="noreferrer">KT-46211</a>。</p><h2 id="序列化更新" tabindex="-1">序列化更新 <a class="header-anchor" href="#序列化更新" aria-label="Permalink to &quot;序列化更新&quot;">​</a></h2><p>Kotlin 1.8.20 附带了<a href="#prototype-serialization-compiler-plugin-for-kotlin-k2-compiler">对 Kotlin K2 编译器的 Alpha 支持</a> 并<a href="#prohibit-implicit-serializer-customization-via-companion-object">禁止通过伴生对象进行序列化器定制</a>。</p><h3 id="适用于-kotlin-k2-编译器的原型序列化编译器插件" tabindex="-1">适用于 Kotlin K2 编译器的原型序列化编译器插件 <a class="header-anchor" href="#适用于-kotlin-k2-编译器的原型序列化编译器插件" aria-label="Permalink to &quot;适用于 Kotlin K2 编译器的原型序列化编译器插件&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>对 K2 序列化编译器插件的支持处于 <a href="/kotlin/components-stability#stability-levels-explained">Alpha</a> 阶段。 要使用它，请<a href="#how-to-enable-the-kotlin-k2-compiler">启用 Kotlin K2 编译器</a>。</p></div><p>从 1.8.20 开始，序列化编译器插件可与 Kotlin K2 编译器配合使用。 试一试，并<a href="#leave-your-feedback-on-the-new-k2-compiler">与我们分享你的反馈</a>！</p><h3 id="禁止通过伴生对象进行隐式序列化器定制" tabindex="-1">禁止通过伴生对象进行隐式序列化器定制 <a class="header-anchor" href="#禁止通过伴生对象进行隐式序列化器定制" aria-label="Permalink to &quot;禁止通过伴生对象进行隐式序列化器定制&quot;">​</a></h3><p>目前，可以使用 <code>@Serializable</code> 注解将类<a href="/kotlindeclare">声明</a>为可序列化，同时使用 <code>@Serializer</code> 注解在其伴生对象上<a href="/kotlindeclare">声明</a>自定义序列化器。</p><p>例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.serialization.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Serializable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @Serializer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Foo::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    companion</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Custom implementation of KSerializer&lt;Foo&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在这种情况下，从 <code>@Serializable</code> 注解中不清楚使用了哪个序列化器。实际上，类 <code>Foo</code> 有一个自定义序列化器。</p><p>为了防止这种混淆，在 Kotlin 1.8.20 中，我们引入了一个编译器警告，用于检测此场景。 该警告包含一个可能的迁移路径来解决此问题。</p><p>如果你在代码中使用了此类构造，我们建议将其更新为以下形式：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.serialization.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Serializable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Foo.Companion::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Doesn&#39;t matter if you use @Serializer(Foo::class) or not</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    companion</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KSerializer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Custom implementation of KSerializer&lt;Foo&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>通过这种方法，很明显 <code>Foo</code> 类使用了在伴生对象中<a href="/kotlindeclare">声明</a>的自定义序列化器。 有关更多信息，请参见我们的 <a href="https://youtrack.jetbrains.com/issue/KT-54441" target="_blank" rel="noreferrer">YouTrack 工单</a>。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>在 Kotlin 2.0 中，我们计划将编译警告提升为编译器错误。 如果你看到此警告，我们建议你迁移代码。</p></div><h2 id="文档更新" tabindex="-1">文档更新 <a class="header-anchor" href="#文档更新" aria-label="Permalink to &quot;文档更新&quot;">​</a></h2><p>Kotlin 文档已收到一些显著的更改：</p><ul><li><a href="/kotlin/jvm-get-started-spring-boot">Spring Boot 和 Kotlin 入门</a> – 创建一个带有数据库的简单<a href="/kotlinapplication">应用程序</a>，并了解更多关于 Spring Boot 和 Kotlin <a href="/kotlinfeature">特性</a>的信息。</li><li><a href="/kotlin/scope-functions">作用域函数</a> – 了解如何使用标准库中有用的<a href="/kotlin/scope-functions">作用域函数</a>来简化你的代码。</li><li><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-cocoapods-overview.html" target="_blank" rel="noreferrer">CocoaPods 集成</a> – 设置一个环境来使用 CocoaPods。</li></ul><h2 id="安装-kotlin-1-8-20" tabindex="-1">安装 Kotlin 1.8.20 <a class="header-anchor" href="#安装-kotlin-1-8-20" aria-label="Permalink to &quot;安装 Kotlin 1.8.20&quot;">​</a></h2><h3 id="检测-ide-版本" tabindex="-1">检测 IDE 版本 <a class="header-anchor" href="#检测-ide-版本" aria-label="Permalink to &quot;检测 IDE 版本&quot;">​</a></h3><p><a href="https://www.jetbrains.com/idea/download/" target="_blank" rel="noreferrer">IntelliJ IDEA</a> 2022.2 和 2022.3 会自动建议将 Kotlin 插件更新到 1.8.20 版本。 IntelliJ IDEA 2023.1 内置了 Kotlin 插件 1.8.20。</p><p>Android Studio Flamingo (222) 和 Giraffe (223) 将在下一版本中支持 Kotlin 1.8.20。</p><p>新的命令行编译器可在 <a href="https://github.com/JetBrains/kotlin/releases/tag/v1.8.20" target="_blank" rel="noreferrer">GitHub 发布页面</a>下载。</p><h3 id="配置-gradle-设置" tabindex="-1">配置 Gradle 设置 <a class="header-anchor" href="#配置-gradle-设置" aria-label="Permalink to &quot;配置 Gradle 设置&quot;">​</a></h3><p>为了正确下载 Kotlin <a href="/kotlinartifact">构件</a>和<a href="/kotlindependency">依赖项</a>，请更新你的 <code>settings.gradle(.kts)</code> 文件 以使用 Maven Central <a href="/kotlinrepository">仓库</a>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pluginManagement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    repositories</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        mavenCentral</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        gradlePluginPortal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>如果未指定<a href="/kotlinrepository">仓库</a>，Gradle 将使用已淘汰的 JCenter <a href="/kotlinrepository">仓库</a>，这可能导致 Kotlin <a href="/kotlinartifact">构件</a>相关问题。</p>`,29))])}const D=E(y,[["render",u]]);export{K as __pageData,D as default};
