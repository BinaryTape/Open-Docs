import{_ as i,c as a,o as n,ag as t}from"./chunks/framework.Bksy39di.js";const d=JSON.parse('{"title":"문자열 지역화","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kmp/compose-localize-strings.md","filePath":"ko/kmp/compose-localize-strings.md","lastUpdated":1755516278000}'),e={name:"ko/kmp/compose-localize-strings.md"};function l(p,s,h,k,r,o){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="문자열-지역화" tabindex="-1">문자열 지역화 <a class="header-anchor" href="#문자열-지역화" aria-label="Permalink to &quot;문자열 지역화&quot;">​</a></h1><p>지역화는 앱을 다양한 언어, 지역, 문화적 관습에 맞게 조정하는 과정입니다. 이 가이드는 번역 디렉터리를 설정하고, <a href="./compose-regional-format">지역별 형식으로 작업</a>하고, <a href="./compose-rtl">오른쪽에서 왼쪽 (RTL)으로 쓰는 언어를 처리</a>하며, <a href="./compose-localization-tests">플랫폼 전반에서 지역화를 테스트</a>하는 방법을 설명합니다.</p><p>Compose Multiplatform에서 문자열을 지역화하려면, 지원되는 모든 언어로 애플리케이션 사용자 인터페이스 요소에 대한 번역된 텍스트를 제공해야 합니다. Compose Multiplatform은 공통 리소스 관리 라이브러리와 코드 생성을 제공하여 이러한 번역에 쉽게 접근할 수 있도록 이 과정을 간소화합니다.</p><h2 id="번역-디렉터리-설정" tabindex="-1">번역 디렉터리 설정 <a class="header-anchor" href="#번역-디렉터리-설정" aria-label="Permalink to &quot;번역 디렉터리 설정&quot;">​</a></h2><p>모든 문자열 리소스는 공통 소스 세트 내의 전용 <code>composeResources</code> 디렉터리에 저장합니다. 기본 텍스트는 <code>values</code> 디렉터리에 배치하고, 각 언어에 해당하는 디렉터리를 생성합니다. 다음 구조를 사용하세요.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>commonMain/composeResources/</span></span>
<span class="line"><span>├── values/</span></span>
<span class="line"><span>│   └── strings.xml</span></span>
<span class="line"><span>├── values-es/</span></span>
<span class="line"><span>│   └── strings.xml</span></span>
<span class="line"><span>├── values-fr/</span></span>
<span class="line"><span>│   └── strings.xml</span></span>
<span class="line"><span>└── ... (other locale directories)</span></span></code></pre></div><p><code>values</code> 디렉터리와 그 지역화된 변형 내에서 <code>strings.xml</code> 파일을 사용하여 키-값 쌍으로 문자열 리소스를 정의합니다. 예를 들어, 영어 텍스트를 <code>commonMain/composeResources/values/strings.xml</code>에 추가합니다.</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">resources</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;app_name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;My Application&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;greeting&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Hello, world!&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;welcome_message&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Welcome, %s!&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">resources</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>그런 다음, 번역을 위한 해당 지역화된 파일을 생성합니다. 예를 들어, 스페인어 번역을 <code>commonMain/composeResources/values-es/strings.xml</code>에 추가합니다.</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">resources</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;app_name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Mi Aplicación&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;greeting&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;¡Hola mundo!&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;welcome_message&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;¡Bienvenido, %s!&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">resources</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="정적-접근을-위한-클래스-생성" tabindex="-1">정적 접근을 위한 클래스 생성 <a class="header-anchor" href="#정적-접근을-위한-클래스-생성" aria-label="Permalink to &quot;정적 접근을 위한 클래스 생성&quot;">​</a></h2><p>모든 번역을 추가했으면, 프로젝트를 빌드하여 리소스에 접근할 수 있는 특수 클래스를 생성합니다. Compose Multiplatform은 <code>composeResources</code> 내의 <code>strings.xml</code> 리소스 파일을 처리하고 각 문자열 리소스에 대한 정적 접근자 속성을 생성합니다.</p><p>결과적으로 생성된 <code>Res.strings</code> 객체를 사용하면 공유 코드에서 지역화된 문자열에 안전하게 접근할 수 있습니다. 앱 UI에 문자열을 표시하려면 <code>stringResource()</code> 컴포저블 함수를 사용하세요. 이 함수는 사용자의 현재 로케일을 기반으로 올바른 텍스트를 가져옵니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> project.composeapp.generated.resources.Res</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Composable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyApp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringResource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Res.strings.app_name))</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringResource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Res.strings.greeting))</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringResource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Res.strings.welcome_message, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;User&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>위 예시에서 <code>welcome_message</code> 문자열은 동적 값을 위한 자리표시자(<code>%s</code>)를 포함합니다. 생성된 접근자와 <code>stringResource()</code> 함수 모두 이러한 매개변수 전달을 지원합니다.</p><h2 id="다음-단계" tabindex="-1">다음 단계 <a class="header-anchor" href="#다음-단계" aria-label="Permalink to &quot;다음 단계&quot;">​</a></h2><ul><li><a href="./compose-regional-format">지역별 형식 관리 방법 배우기</a></li><li><a href="./compose-rtl">오른쪽에서 왼쪽 (RTL)으로 쓰는 언어 처리 읽어보기</a></li></ul>`,17)]))}const g=i(e,[["render",l]]);export{d as __pageData,g as default};
