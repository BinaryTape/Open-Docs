import{_ as d,C as p,c as o,o as E,j as s,G as a,ag as t,a as n,w as l}from"./chunks/framework.Bksy39di.js";const v=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/whatsnew1720.md","filePath":"kotlin/whatsnew1720.md","lastUpdated":1754307826000}'),g={name:"kotlin/whatsnew1720.md"};function c(y,i,F,u,b,C){const r=p("tldr"),e=p("YouTubeVideo"),h=p("tab"),k=p("tabs");return E(),o("div",null,[i[5]||(i[5]=s("h1",{id:"kotlin-1-7-20-有哪些新特性",tabindex:"-1"},[n("Kotlin 1.7.20 有哪些新特性 "),s("a",{class:"header-anchor",href:"#kotlin-1-7-20-有哪些新特性","aria-label":'Permalink to "Kotlin 1.7.20 有哪些新特性"'},"​")],-1)),a(r,null,{default:l(()=>i[0]||(i[0]=[s("p",null,"Kotlin 1.7.20 的 IDE 支持适用于 IntelliJ IDEA 2021.3、2022.1 和 2022.2。",-1)])),_:1}),i[6]||(i[6]=t('<p><em><a href="/kotlin/releases#release-details">发布日期：2022 年 9 月 29 日</a></em></p><p>Kotlin 1.7.20 已发布！以下是本次发布的一些亮点：</p><ul><li><a href="#support-for-kotlin-k2-compiler-plugins">新的 Kotlin K2 编译器支持 <code>all-open</code>、带接收者的 SAM、Lombok 和其他编译器插件</a></li><li><a href="#preview-of-the-operator-for-creating-open-ended-ranges">我们引入了用于创建开放区间的 <code>..&lt;</code> 操作符预览版</a></li><li><a href="#the-new-kotlin-native-memory-manager-enabled-by-default">新的 Kotlin/Native 内存管理器现在默认启用</a></li><li><a href="#generic-inline-classes">我们为 JVM 引入了一项新的实验性特性：具有泛型底层类型的内联类</a></li></ul><p>你还可以通过此视频了解更改的简要概述：</p>',4)),a(e,{src:"https://www.youtube.com/v/OG9npowJgE8",title:"Kotlin 1.7.20 有哪些新特性"}),i[7]||(i[7]=t('<h2 id="对-kotlin-k2-编译器插件的支持" tabindex="-1">对 Kotlin K2 编译器插件的支持 <a class="header-anchor" href="#对-kotlin-k2-编译器插件的支持" aria-label="Permalink to &quot;对 Kotlin K2 编译器插件的支持&quot;">​</a></h2><p>Kotlin 团队持续稳定化 K2 编译器。 K2 仍处于 <strong>Alpha</strong> 阶段（正如在 <a href="/kotlin/whatsnew17#new-kotlin-k2-compiler-for-the-jvm-in-alpha">Kotlin 1.7.0 发布</a>中宣布的），但它现在支持多种编译器插件。你可以关注 <a href="https://youtrack.jetbrains.com/issue/KT-52604" target="_blank" rel="noreferrer">此 YouTrack issue</a> 以获取 Kotlin 团队关于新编译器的更新。</p><p>从 Kotlin 1.7.20 发布开始，Kotlin K2 编译器支持以下插件：</p><ul><li><a href="/kotlin/all-open-plugin"><code>all-open</code></a></li><li><a href="/kotlin/no-arg-plugin"><code>no-arg</code></a></li><li><a href="/kotlin/sam-with-receiver-plugin">SAM with receiver</a></li><li><a href="/kotlin/lombok">Lombok</a></li><li>AtomicFU</li><li><code>jvm-abi-gen</code></li></ul><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>新的 K2 编译器的 Alpha 版本仅适用于 JVM 项目。 它不支持 Kotlin/JS、Kotlin/Native 或其他多平台项目。</p></div><p>在以下视频中了解更多关于新编译器及其优势：</p><ul><li><a href="https://www.youtube.com/watch?v=iTdJJq_LyoY" target="_blank" rel="noreferrer">通往新 Kotlin 编译器之路</a></li><li><a href="https://www.youtube.com/watch?v=db19VFLZqJM" target="_blank" rel="noreferrer">K2 编译器：自上而下的视图</a></li></ul><h3 id="如何启用-kotlin-k2-编译器" tabindex="-1">如何启用 Kotlin K2 编译器 <a class="header-anchor" href="#如何启用-kotlin-k2-编译器" aria-label="Permalink to &quot;如何启用 Kotlin K2 编译器&quot;">​</a></h3><p>要启用 Kotlin K2 编译器并进行测试，请使用以下编译器选项：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-Xuse-k2</span></span></code></pre></div><p>你可以在 <code>build.gradle(.kts)</code> 文件中指定它：</p>',11)),a(k,{group:"build-script"},{default:l(()=>[a(h,{title:"Kotlin","group-key":"kotlin"},{default:l(()=>i[1]||(i[1]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withType"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"KotlinCompile"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"> {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    kotlinOptions.useK2 "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," true")]),n(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),a(h,{title:"Groovy","group-key":"groovy"},{default:l(()=>i[2]||(i[2]=[s("div",{class:"language-groovy vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"groovy"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"compileKotlin {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    kotlinOptions"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"useK2 "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," true")]),n(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),i[8]||(i[8]=t('<p>查看 JVM 项目的性能提升，并将其与旧编译器的结果进行比较。</p><h3 id="留下你对新-k2-编译器的反馈" tabindex="-1">留下你对新 K2 编译器的反馈 <a class="header-anchor" href="#留下你对新-k2-编译器的反馈" aria-label="Permalink to &quot;留下你对新 K2 编译器的反馈&quot;">​</a></h3><p>我们非常感谢你以任何形式提供的反馈：</p><ul><li>在 Kotlin Slack 中直接向 K2 开发者提供反馈：<a href="https://surveys.jetbrains.com/s3/kotlin-slack-sign-up?_gl=1*ju6cbn*_ga*MTA3MTk5NDkzMC4xNjQ2MDY3MDU4*_ga_9J976DJZ68*MTY1ODMzNzA3OS4xMDAuMS4xNjU4MzQwODEwLjYw" target="_blank" rel="noreferrer">获取邀请</a> 并加入 <a href="https://kotlinlang.slack.com/archives/C03PK0PE257" target="_blank" rel="noreferrer">#k2-early-adopters</a> 频道。</li><li>向 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">我们的 issue 追踪器</a> 报告你使用新 K2 编译器时遇到的任何问题。</li><li><a href="https://www.jetbrains.com/help/idea/settings-usage-statistics.html" target="_blank" rel="noreferrer">启用 <strong>发送使用统计</strong> 选项</a> 以允许 JetBrains 收集关于 K2 使用情况的匿名数据。</li></ul><h2 id="语言" tabindex="-1">语言 <a class="header-anchor" href="#语言" aria-label="Permalink to &quot;语言&quot;">​</a></h2><p>Kotlin 1.7.20 引入了新语言特性的预览版，并对构建器类型推断施加了限制：</p><ul><li><a href="#preview-of-the-operator-for-creating-open-ended-ranges">用于创建开放区间的 <code>..&lt;</code> 操作符预览版</a></li><li><a href="#improved-string-representations-for-singletons-and-sealed-class-hierarchies-with-data-objects">新的数据对象声明</a></li><li><a href="#new-builder-type-inference-restrictions">新的构建器类型推断限制</a></li></ul><h3 id="用于创建开放区间的-操作符预览版" tabindex="-1">用于创建开放区间的 <code>..&lt;</code> 操作符预览版 <a class="header-anchor" href="#用于创建开放区间的-操作符预览版" aria-label="Permalink to &quot;用于创建开放区间的 `..&lt;` 操作符预览版&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>新的操作符是<a href="/kotlin/components-stability#stability-levels-explained">实验性的</a>，目前在 IDE 中支持有限。</p></div><p>本次发布引入了新的 <code>..&lt;</code> 操作符。Kotlin 拥有 <code>..</code> 操作符来表示一个值区间。新的 <code>..&lt;</code> 操作符作用类似于 <code>until</code> 函数，可以帮助你定义开放区间。</p>',10)),a(e,{src:"https://www.youtube.com/watch?v=v0AHdAIBnbs",title:"用于开放区间的新操作符"}),i[9]||(i[9]=t(`<p>我们的研究表明，这个新的操作符能更好地表达开放区间，并明确表明上限不包含在内。</p><p>以下是在 <code>when</code> 表达式中使用 <code>..&lt;</code> 操作符的示例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">when</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.25</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 第一季度</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.25</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 第二季度</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.75</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 第三季度</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.75</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 最后一个季度 &lt;- 请注意此处为闭区间</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="标准库-api-变更" tabindex="-1">标准库 API 变更 <a class="header-anchor" href="#标准库-api-变更" aria-label="Permalink to &quot;标准库 API 变更&quot;">​</a></h4><p>以下新的类型和操作将在公共 Kotlin 标准库的 <code>kotlin.ranges</code> 包中引入：</p><h5 id="新的-openendrange-lt-t-gt-接口" tabindex="-1">新的 OpenEndRange&lt;T&gt; 接口 <a class="header-anchor" href="#新的-openendrange-lt-t-gt-接口" aria-label="Permalink to &quot;新的 OpenEndRange&amp;lt;T&amp;gt; 接口&quot;">​</a></h5><p>用于表示开放区间的新接口与现有的 <code>ClosedRange&lt;T&gt;</code> 接口非常相似：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OpenEndRange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Comparable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt; {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 下限</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> start: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 上限，不包含在区间内</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> endExclusive: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    operator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> contains</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Boolean</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> start </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> endExclusive</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isEmpty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Boolean</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> start </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> endExclusive</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h5 id="在现有可迭代区间中实现-openendrange" tabindex="-1">在现有可迭代区间中实现 OpenEndRange <a class="header-anchor" href="#在现有可迭代区间中实现-openendrange" aria-label="Permalink to &quot;在现有可迭代区间中实现 OpenEndRange&quot;">​</a></h5><p>当开发者需要获取一个不包含上限的区间时，他们目前使用 <code>until</code> 函数来有效地生成一个包含相同值的闭合可迭代区间。为了使这些区间在新 API 中（该 API 接收 <code>OpenEndRange&lt;T&gt;</code>）可接受，我们希望在现有的可迭代区间（<code>IntRange</code>、<code>LongRange</code>、<code>CharRange</code>、<code>UIntRange</code> 和 <code>ULongRange</code>）中实现该接口。因此它们将同时实现 <code>ClosedRange&lt;T&gt;</code> 和 <code>OpenEndRange&lt;T&gt;</code> 接口。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IntRange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IntProgression</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(...), ClosedRange</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OpenEndRange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> start: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> endInclusive: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> endExclusive: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h5 id="标准类型的-rangeuntil-操作符" tabindex="-1">标准类型的 rangeUntil 操作符 <a class="header-anchor" href="#标准类型的-rangeuntil-操作符" aria-label="Permalink to &quot;标准类型的 rangeUntil 操作符&quot;">​</a></h5><p><code>rangeUntil</code> 操作符将为目前由 <code>rangeTo</code> 操作符定义的相同类型和组合提供。我们以扩展函数形式提供它们用于原型目的，但为保持一致性，我们计划在稳定开放区间 API 之前将它们转换为成员。</p><h4 id="如何启用-操作符" tabindex="-1">如何启用 <code>..&lt;</code> 操作符 <a class="header-anchor" href="#如何启用-操作符" aria-label="Permalink to &quot;如何启用 \`..&lt;\` 操作符&quot;">​</a></h4><p>要使用 <code>..&lt;</code> 操作符或为自己的类型实现该操作符约定，请启用 <code>-language-version 1.8</code> 编译器选项。</p><p>为支持标准类型的开放区间而引入的新 API 元素需要选择性加入，这对于实验性标准库 API 来说是惯例：<code>@OptIn(ExperimentalStdlibApi::class)</code>。或者，你可以使用 <code>-opt-in=kotlin.ExperimentalStdlibApi</code> 编译器选项。</p><p><a href="https://github.com/kotlin/KEEP/blob/open-ended-ranges/proposals/open-ended-ranges.md" target="_blank" rel="noreferrer">在此 KEEP 文档中阅读更多关于新操作符的信息</a>。</p><h3 id="数据对象改进单例和密封类层次结构的字符串表示" tabindex="-1">数据对象改进单例和密封类层次结构的字符串表示 <a class="header-anchor" href="#数据对象改进单例和密封类层次结构的字符串表示" aria-label="Permalink to &quot;数据对象改进单例和密封类层次结构的字符串表示&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>数据对象是<a href="/kotlin/components-stability#stability-levels-explained">实验性的</a>，目前在 IDE 中支持有限。</p></div><p>本次发布引入了一种新的 <code>object</code> 声明类型供你使用：<code>data object</code>。<a href="https://youtrack.jetbrains.com/issue/KT-4107" target="_blank" rel="noreferrer">数据对象</a> 在概念上与常规 <code>object</code> 声明行为相同，但自带清晰的 <code>toString</code> 表示。</p>`,20)),a(e,{src:"https://www.youtube.com/v/ovAqcwFhEGc",title:"Kotlin 1.7.20 中的数据对象"}),i[10]||(i[10]=t(`<div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.example</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyObject</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyDataObject</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MyObject) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// org.example.MyObject@1f32e575</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MyDataObject) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// MyDataObject</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这使得 <code>data object</code> 声明非常适合密封类层次结构，你可以在其中将它们与 <code>data class</code> 声明一起使用。在此代码片段中，将 <code>EndOfFile</code> 声明为 <code>data object</code> 而不是普通 <code>object</code> 意味着它将获得一个漂亮的 <code>toString</code>，无需手动覆盖，与附带的 <code>data class</code> 定义保持对称：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">sealed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ReadResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ReadResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ReadResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EndOfFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ReadResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ReadResult.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Number(value=1)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ReadResult.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Foo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Text(value=Foo)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ReadResult.EndOfFile) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// EndOfFile</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="如何启用数据对象" tabindex="-1">如何启用数据对象 <a class="header-anchor" href="#如何启用数据对象" aria-label="Permalink to &quot;如何启用数据对象&quot;">​</a></h4><p>要在代码中使用数据对象声明，请启用 <code>-language-version 1.9</code> 编译器选项。在 Gradle 项目中，你可以通过在 <code>build.gradle(.kts)</code> 中添加以下内容来实现：</p>`,5)),a(k,{group:"build-script"},{default:l(()=>[a(h,{title:"Kotlin","group-key":"kotlin"},{default:l(()=>i[3]||(i[3]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withType"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"org"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"jetbrains"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"gradle"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"tasks"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"KotlinCompile"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},">()."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"configureEach"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"    // ...")]),n(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    kotlinOptions.languageVersion "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "1.9"')]),n(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),a(h,{title:"Groovy","group-key":"groovy"},{default:l(()=>i[4]||(i[4]=[s("div",{class:"language-groovy vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"groovy"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"compileKotlin {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"    // ...")]),n(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    kotlinOptions"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"languageVersion "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," '1.9'")]),n(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),i[11]||(i[11]=t(`<p>在<a href="https://github.com/Kotlin/KEEP/pull/316" target="_blank" rel="noreferrer">相应的 KEEP 文档</a>中阅读更多关于数据对象的信息，并分享你对其实现的反馈。</p><h3 id="新的构建器类型推断限制" tabindex="-1">新的构建器类型推断限制 <a class="header-anchor" href="#新的构建器类型推断限制" aria-label="Permalink to &quot;新的构建器类型推断限制&quot;">​</a></h3><p>Kotlin 1.7.20 对<a href="/kotlin/using-builders-with-builder-inference">构建器类型推断的使用</a>施加了一些主要限制，这可能会影响你的代码。这些限制适用于包含构建器 lambda 函数的代码，在这种情况下，在不分析 lambda 本身的情况下无法推导出参数。该参数用作实参。现在，编译器总是会为此类代码显示错误，并要求你显式指定类型。</p><p>这是一个破坏性更改，但我们的研究表明，这些情况非常罕见，这些限制不应该影响你的代码。如果确实影响了，请考虑以下情况：</p><ul><li><p>带有隐藏成员的扩展的构建器推断。</p><p>如果你的代码包含一个在构建器推断期间使用的同名扩展函数，编译器会显示错误：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> doSmth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {} </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">doSmth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {} </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    buildList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">doSmth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 解析为 2 并导致错误</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>要修复代码，你应该显式指定类型：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> doSmth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {} </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">doSmth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {} </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    buildList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 类型实参！</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">doSmth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 解析为 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>具有多个 lambda 且类型实参未显式指定的构建器推断。</p><p>如果在构建器推断中有两个或更多 lambda 块，它们会影响类型。为防止出现错误，编译器要求你指定类型：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">buildList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    first: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MutableList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;.() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Unit, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    second: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MutableList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;.() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Unit</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> list </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mutableListOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    list.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">first</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    list.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">second</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> list </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    buildList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        first </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// this: MutableList&lt;String&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        second </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// this: MutableList&lt;Int&gt; </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>要修复此错误，你应该显式指定类型并修复类型不匹配：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    buildList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        first </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// this: MutableList&lt;Int&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        second </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// this: MutableList&lt;Int&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><p>如果你没有找到你上述提及的情况，请向我们团队<a href="https://kotl.in/issue" target="_blank" rel="noreferrer">提交 issue</a>。</p><p>关于此构建器推断更新的更多信息，请参阅此 <a href="https://youtrack.jetbrains.com/issue/KT-53797" target="_blank" rel="noreferrer">YouTrack issue</a>。</p><h2 id="kotlin-jvm" tabindex="-1">Kotlin/JVM <a class="header-anchor" href="#kotlin-jvm" aria-label="Permalink to &quot;Kotlin/JVM&quot;">​</a></h2><p>Kotlin 1.7.20 引入了泛型内联类，增加了对委托属性的字节码优化，并支持 kapt stub 生成任务中的 IR，使得可以将所有最新的 Kotlin 特性与 kapt 一起使用：</p><ul><li><a href="#generic-inline-classes">泛型内联类</a></li><li><a href="#more-optimized-cases-of-delegated-properties">委托属性的更多优化用例</a></li><li><a href="#support-for-the-jvm-ir-backend-in-kapt-stub-generating-task">kapt stub 生成任务中对 JVM IR 后端的支持</a></li></ul><h3 id="泛型内联类" tabindex="-1">泛型内联类 <a class="header-anchor" href="#泛型内联类" aria-label="Permalink to &quot;泛型内联类&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>泛型内联类是一项<a href="/kotlin/components-stability#stability-levels-explained">实验性的</a>特性。 它随时可能被取消或更改。需要选择性加入（详见下文），且仅应将其用于评估目的。 我们期待你能在 <a href="https://youtrack.jetbrains.com/issue/KT-52994" target="_blank" rel="noreferrer">YouTrack</a> 上提供关于此功能的反馈。</p></div><p>Kotlin 1.7.20 允许 JVM 内联类的底层类型作为类型形参。编译器将其映射到 <code>Any?</code>，或者通常映射到类型形参的上限。</p>`,13)),a(e,{src:"https://www.youtube.com/v/0JRPA0tt9og",title:"Kotlin 1.7.20 中的泛型内联类"}),i[12]||(i[12]=t(`<p>请看以下示例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JvmInline</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> compute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;) {} </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 编译器生成 fun compute-&lt;hashcode&gt;(s: Any?)</span></span></code></pre></div><p>该函数将内联类作为形参。该形参映射到上限，而不是类型实参。</p><p>要启用此特性，请使用 <code>-language-version 1.8</code> 编译器选项。</p><p>我们期待你能在 <a href="https://youtrack.jetbrains.com/issue/KT-52994" target="_blank" rel="noreferrer">YouTrack</a> 上提供关于此特性的反馈。</p><h3 id="委托属性的更多优化用例" tabindex="-1">委托属性的更多优化用例 <a class="header-anchor" href="#委托属性的更多优化用例" aria-label="Permalink to &quot;委托属性的更多优化用例&quot;">​</a></h3><p>在 Kotlin 1.6.0 中，我们通过省略 <code>$delegate</code> 字段并<a href="/kotlin/whatsnew16#optimize-delegated-properties-which-call-get-set-on-the-given-kproperty-instance">生成对引用属性的即时访问</a>来优化委托给属性的用例。在 1.7.20 中，我们将此优化应用于更多用例。 如果委托是以下情况，现在将省略 <code>$delegate</code> 字段：</p><ul><li><p>具名对象：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NamedObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    operator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(thisRef: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?, property: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;*&gt;): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NamedObject</span></span></code></pre></div></li><li><p>一个带有<a href="/kotlin/properties#backing-fields">幕后字段</a>且在同一模块中具有默认 getter 的 final <code>val</code> 属性：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> impl: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ReadOnlyProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> impl</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>一个常量表达式、一个枚举项、<code>this</code> 或 <code>null</code>。以下是 <code>this</code> 的示例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    operator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(thisRef: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?, property: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;*&gt;) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><p>了解更多关于<a href="/kotlin/delegated-properties">委托属性</a>的信息。</p><p>我们期待你能在 <a href="https://youtrack.jetbrains.com/issue/KT-23397" target="_blank" rel="noreferrer">YouTrack</a> 上提供关于此特性的反馈。</p><h3 id="kapt-stub-生成任务中对-jvm-ir-后端的支持" tabindex="-1">kapt stub 生成任务中对 JVM IR 后端的支持 <a class="header-anchor" href="#kapt-stub-生成任务中对-jvm-ir-后端的支持" aria-label="Permalink to &quot;kapt stub 生成任务中对 JVM IR 后端的支持&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>kapt stub 生成任务中对 JVM IR 后端的支持是一项<a href="/kotlin/components-stability">实验性的</a>特性。 它随时可能被更改。需要选择性加入（详见下文），且仅应将其用于评估目的。</p></div><p>在 1.7.20 之前，kapt stub 生成任务使用旧后端，并且<a href="/kotlin/annotations#repeatable-annotations">可重复注解</a>不适用于 <a href="/kotlin/kapt">kapt</a>。通过 Kotlin 1.7.20，我们增加了对 kapt stub 生成任务中 <a href="/kotlin/whatsnew15#stable-jvm-ir-backend">JVM IR 后端</a>的支持。这使得可以将所有最新的 Kotlin 特性与 kapt 一起使用，包括可重复注解。</p><p>要在 kapt 中使用 IR 后端，请将以下选项添加到你的 <code>gradle.properties</code> 文件中：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kapt.use.jvm.ir=true</span></span></code></pre></div><p>我们期待你能在 <a href="https://youtrack.jetbrains.com/issue/KT-49682" target="_blank" rel="noreferrer">YouTrack</a> 上提供关于此特性的反馈。</p><h2 id="kotlin-native" tabindex="-1">Kotlin/Native <a class="header-anchor" href="#kotlin-native" aria-label="Permalink to &quot;Kotlin/Native&quot;">​</a></h2><p>Kotlin 1.7.20 自带默认启用的新 Kotlin/Native 内存管理器，并提供自定义 <code>Info.plist</code> 文件的选项：</p><ul><li><a href="#the-new-kotlin-native-memory-manager-enabled-by-default">新的默认内存管理器</a></li><li><a href="#customizing-the-info-plist-file">自定义 Info.plist 文件</a></li></ul><h3 id="新的-kotlin-native-内存管理器默认启用" tabindex="-1">新的 Kotlin/Native 内存管理器默认启用 <a class="header-anchor" href="#新的-kotlin-native-内存管理器默认启用" aria-label="Permalink to &quot;新的 Kotlin/Native 内存管理器默认启用&quot;">​</a></h3><p>本次发布为新的内存管理器带来了进一步的稳定性和性能改进，使我们能够将新的内存管理器提升到 <a href="/kotlin/components-stability">Beta</a> 版。</p><p>以前的内存管理器使编写并发和异步代码变得复杂，包括在实现 <code>kotlinx.coroutines</code> 库时遇到的问题。这阻碍了 Kotlin Multiplatform Mobile 的采用，因为并发限制在 iOS 和 Android 平台之间共享 Kotlin 代码时造成了问题。新的内存管理器最终为<a href="https://blog.jetbrains.com/kotlin/2022/05/kotlin-multiplatform-mobile-beta-roadmap-update/" target="_blank" rel="noreferrer">将 Kotlin Multiplatform Mobile 提升到 Beta 版</a>铺平了道路。</p><p>新的内存管理器还支持编译器缓存，这使得编译时间与以前的版本相当。有关新内存管理器的更多优势，请参阅我们关于预览版的原始<a href="https://blog.jetbrains.com/kotlin/2021/08/try-the-new-kotlin-native-memory-manager-development-preview/" target="_blank" rel="noreferrer">博客文章</a>。你可以在<a href="/kotlin/native-memory-manager">文档</a>中找到更多技术细节。</p><h4 id="配置和设置" tabindex="-1">配置和设置 <a class="header-anchor" href="#配置和设置" aria-label="Permalink to &quot;配置和设置&quot;">​</a></h4><p>从 Kotlin 1.7.20 开始，新的内存管理器是默认设置。无需太多额外设置。</p><p>如果你已经手动开启了它，你可以从 <code>gradle.properties</code> 中移除 <code>kotlin.native.binary.memoryModel=experimental</code> 选项，或者从 <code>build.gradle(.kts)</code> 文件中移除 <code>binaryOptions[&quot;memoryModel&quot;] = &quot;experimental&quot;</code>。</p><p>如有必要，你可以使用 <code>gradle.properties</code> 文件中的 <code>kotlin.native.binary.memoryModel=strict</code> 选项切换回旧版内存管理器。然而，编译器缓存支持不再适用于旧版内存管理器，因此编译时间可能会变长。</p><h4 id="冻结" tabindex="-1">冻结 <a class="header-anchor" href="#冻结" aria-label="Permalink to &quot;冻结&quot;">​</a></h4><p>在新的内存管理器中，冻结已被废弃。除非你的代码需要与旧版管理器一起使用（旧版管理器仍然需要冻结），否则请勿使用它。这可能对需要维护对旧版内存管理器支持的库作者，或希望在新的内存管理器遇到问题时有备用方案的开发者有所帮助。</p><p>在这种情况下，你可以暂时支持新旧内存管理器代码。要忽略废弃警告，请执行以下操作之一：</p><ul><li>使用 <code>@OptIn(FreezingIsDeprecated::class)</code> 注解废弃 API 的用法。</li><li>将 <code>languageSettings.optIn(&quot;kotlin.native.FreezingIsDeprecated&quot;)</code> 应用于 Gradle 中的所有 Kotlin 源代码集。</li><li>传递编译器标志 <code>-opt-in=kotlin.native.FreezingIsDeprecated</code>。</li></ul><h4 id="从-swift-objective-c-调用-kotlin-挂起函数" tabindex="-1">从 Swift/Objective-C 调用 Kotlin 挂起函数 <a class="header-anchor" href="#从-swift-objective-c-调用-kotlin-挂起函数" aria-label="Permalink to &quot;从 Swift/Objective-C 调用 Kotlin 挂起函数&quot;">​</a></h4><p>新的内存管理器仍然限制从主线程以外的线程从 Swift 和 Objective-C 调用 Kotlin <code>suspend</code> 函数，但你可以通过新的 Gradle 选项解除它。</p><p>此限制最初是在旧版内存管理器中引入的，原因是代码分派了一个续体以在原始线程上恢复。如果此线程没有受支持的事件循环，任务将永远不会运行，并且协程将永远不会恢复。</p><p>在某些情况下，此限制不再需要，但对所有必要条件的检测无法轻易实现。因此，我们决定将其保留在新内存管理器中，同时引入一个选项供你禁用它。</p><p>为此，请将以下选项添加到你的 <code>gradle.properties</code> 中：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.native.binary.objcExportSuspendFunctionLaunchThreadRestriction=none</span></span></code></pre></div><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>如果你使用 <code>kotlinx.coroutines</code> 的 <code>native-mt</code> 版本或其他具有相同“分派到原始线程”方法的库，请勿添加此选项。</p></div><p>Kotlin 团队非常感谢 <a href="https://github.com/ahmedre" target="_blank" rel="noreferrer">Ahmed El-Helw</a> 实现了此选项。</p><h4 id="留下你的反馈" tabindex="-1">留下你的反馈 <a class="header-anchor" href="#留下你的反馈" aria-label="Permalink to &quot;留下你的反馈&quot;">​</a></h4><p>这是我们生态系统的一个重大更改。我们期待你提供反馈，以帮助我们使其变得更好。</p><p>在你的项目中试用新的内存管理器，并在<a href="https://youtrack.jetbrains.com/issue/KT-48525" target="_blank" rel="noreferrer">我们的 issue 追踪器 YouTrack</a> 中分享反馈。</p><h3 id="自定义-info-plist-文件" tabindex="-1">自定义 Info.plist 文件 <a class="header-anchor" href="#自定义-info-plist-文件" aria-label="Permalink to &quot;自定义 Info.plist 文件&quot;">​</a></h3><p>当生成 framework 时，Kotlin/Native 编译器会生成信息属性列表文件 <code>Info.plist</code>。此前，自定义其内容很繁琐。通过 Kotlin 1.7.20，你可以直接设置以下属性：</p><table tabindex="0"><thead><tr><th>属性</th><th>二进制选项</th></tr></thead><tbody><tr><td><code>CFBundleIdentifier</code></td><td><code>bundleId</code></td></tr><tr><td><code>CFBundleShortVersionString</code></td><td><code>bundleShortVersionString</code></td></tr><tr><td><code>CFBundleVersion</code></td><td><code>bundleVersion</code></td></tr></tbody></table><p>为此，请使用相应的二进制选项。传递 <code>-Xbinary=$option=$value</code> 编译器标志，或为所需的 framework 设置 <code>binaryOption(option, value)</code> Gradle DSL。</p><p>Kotlin 团队非常感谢 Mads Ager 实现了此特性。</p><h2 id="kotlin-js" tabindex="-1">Kotlin/JS <a class="header-anchor" href="#kotlin-js" aria-label="Permalink to &quot;Kotlin/JS&quot;">​</a></h2><p>Kotlin/JS 获得了一些增强，提升开发者体验并提高性能：</p><ul><li>Klib 生成在增量构建和干净构建中都更快，这得益于依赖项加载的效率提升。</li><li><a href="/kotlin/js-ir-compiler#incremental-compilation-for-development-binaries">开发二进制文件的增量编译</a>已重做，从而在干净构建场景中取得了重大改进，实现了更快的增量构建和稳定性修复。</li><li>我们改进了 <code>.d.ts</code> 的生成，以支持嵌套对象、密封类和构造函数中具有默认值的形参。</li></ul><h2 id="gradle" tabindex="-1">Gradle <a class="header-anchor" href="#gradle" aria-label="Permalink to &quot;Gradle&quot;">​</a></h2><p>Kotlin Gradle 插件的更新专注于与新的 Gradle 特性和最新的 Gradle 版本的兼容性。</p><p>Kotlin 1.7.20 包含对 Gradle 7.1 的支持更改。废弃的方法和属性已移除或替换，减少了 Kotlin Gradle 插件产生的废弃警告数量，并解除了对 Gradle 8.0 未来支持的阻碍。</p><p>然而，有一些潜在的破坏性更改可能需要你关注：</p><h3 id="目标配置" tabindex="-1">目标配置 <a class="header-anchor" href="#目标配置" aria-label="Permalink to &quot;目标配置&quot;">​</a></h3><ul><li><p><code>org.jetbrains.kotlin.gradle.dsl.SingleTargetExtension</code> 现在有一个泛型形参：<code>SingleTargetExtension&lt;T : KotlinTarget&gt;</code>。</p></li><li><p><code>kotlin.targets.fromPreset()</code> 约定已被废弃。作为替代，你仍然可以使用 <code>kotlin.targets { fromPreset() }</code>，但我们建议<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-discover-project.html#targets" target="_blank" rel="noreferrer">显式设置目标</a>。</p></li><li><p>由 Gradle 自动生成的目标访问器在 <code>kotlin.targets { }</code> 代码块中不再可用。请改用 <code>findByName(&quot;targetName&quot;)</code> 方法。</p><p>请注意，此类访问器在 <code>kotlin.targets</code> 的情况下仍然可用，例如 <code>kotlin.targets.linuxX64</code>。</p></li></ul><h3 id="源代码目录配置" tabindex="-1">源代码目录配置 <a class="header-anchor" href="#源代码目录配置" aria-label="Permalink to &quot;源代码目录配置&quot;">​</a></h3><p>Kotlin Gradle 插件现在将 Kotlin <code>SourceDirectorySet</code> 作为 <code>kotlin</code> 扩展添加到 Java 的 <code>SourceSet</code> 组。这使得可以在 <code>build.gradle.kts</code> 文件中配置源代码目录，类似于在 <a href="https://docs.gradle.org/7.1/release-notes.html#easier-source-set-configuration-in-kotlin-dsl" target="_blank" rel="noreferrer">Java、Groovy 和 Scala</a> 中配置的方式：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            java.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setSrcDirs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;src/java&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            kotlin.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setSrcDirs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;src/kotlin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>你不再需要使用废弃的 Gradle 约定并指定 Kotlin 的源代码目录。</p><p>请记住，你还可以使用 <code>kotlin</code> 扩展来访问 <code>KotlinSourceSet</code>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="jvm-工具链配置的新方法" tabindex="-1">JVM 工具链配置的新方法 <a class="header-anchor" href="#jvm-工具链配置的新方法" aria-label="Permalink to &quot;JVM 工具链配置的新方法&quot;">​</a></h3><p>本次发布提供了一种新的 <code>jvmToolchain()</code> 方法来启用 <a href="/kotlin/gradle-configure-project#gradle-java-toolchains-support">JVM 工具链特性</a>。如果你不需要任何额外的<a href="https://docs.gradle.org/current/javadoc/org/gradle/jvm/toolchain/JavaToolchainSpec.html" target="_blank" rel="noreferrer">配置字段</a>，例如 <code>implementation</code> 或 <code>vendor</code>，你可以从 Kotlin 扩展中使用此方法：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvmToolchain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">17</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这简化了 Kotlin 项目设置过程，无需任何额外配置。 在此发布之前，你只能通过以下方式指定 JDK 版本：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvmToolchain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        languageVersion.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(JavaLanguageVersion.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">17</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="标准库" tabindex="-1">标准库 <a class="header-anchor" href="#标准库" aria-label="Permalink to &quot;标准库&quot;">​</a></h2><p>Kotlin 1.7.20 为 <code>java.nio.file.Path</code> 类提供了新的<a href="/kotlin/extensions#extension-functions">扩展函数</a>，允许你遍历文件树：</p><ul><li><code>walk()</code> 惰性遍历以指定路径为根的文件树。</li><li><code>fileVisitor()</code> 使得可以单独创建 <code>FileVisitor</code>。<code>FileVisitor</code> 定义了遍历目录和文件时的操作。</li><li><code>visitFileTree(fileVisitor: FileVisitor, ...)</code> 接受一个已准备好的 <code>FileVisitor</code> 并在底层使用 <code>java.nio.file.Files.walkFileTree()</code>。</li><li><code>visitFileTree(..., builderAction: FileVisitorBuilder.() -&gt; Unit)</code> 使用 <code>builderAction</code> 创建一个 <code>FileVisitor</code> 并调用 <code>visitFileTree(fileVisitor, ...)</code> 函数。</li><li><code>FileVisitResult</code> 是 <code>FileVisitor</code> 的返回类型，其默认值为 <code>CONTINUE</code>，它会继续处理文件。</li></ul><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>为 <code>java.nio.file.Path</code> 提供的新扩展函数是<a href="/kotlin/components-stability">实验性的</a>。 它们随时可能被更改。需要选择性加入（详见下文），且仅应将其用于评估目的。</p></div><p>以下是你使用这些新扩展函数可以做的一些事情：</p><ul><li><p>显式创建一个 <code>FileVisitor</code>，然后使用：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cleanVisitor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fileVisitor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    onPreVisitDirectory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { directory, attributes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 访问目录时的某些逻辑</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        FileVisitResult.CONTINUE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    onVisitFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { file, attributes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 访问文件时的某些逻辑</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        FileVisitResult.CONTINUE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这里可以有一些逻辑</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">projectDirectory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">visitFileTree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cleanVisitor)</span></span></code></pre></div></li><li><p>使用 <code>builderAction</code> 创建一个 <code>FileVisitor</code> 并立即使用：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">projectDirectory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">visitFileTree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// builderAction 的定义：</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    onPreVisitDirectory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { directory, attributes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 访问目录时的某些逻辑</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        FileVisitResult.CONTINUE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    onVisitFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { file, attributes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 访问文件时的某些逻辑</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        FileVisitResult.CONTINUE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>使用 <code>walk()</code> 函数遍历以指定路径为根的文件树：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(kotlin.io.path.ExperimentalPathApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> traverseFileTree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cleanVisitor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fileVisitor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        onPreVisitDirectory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { directory, _ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (directory.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;build&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                directory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">deleteRecursively</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                FileVisitResult.SKIP_SUBTREE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                FileVisitResult.CONTINUE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        onVisitFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { file, _ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (file.extension </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;class&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                file.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">deleteExisting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            FileVisitResult.CONTINUE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rootDirectory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createTempDirectory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Project&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rootDirectory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;src&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { srcDirectory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        srcDirectory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createDirectory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        srcDirectory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;A.kt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        srcDirectory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;A.class&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rootDirectory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;build&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { buildDirectory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        buildDirectory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createDirectory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        buildDirectory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Project.jar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用 walk 函数：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> directoryStructure </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rootDirectory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">walk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(PathWalkOption.INCLUDE_DIRECTORIES)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">relativeTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rootDirectory).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sorted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    assertPrints</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(directoryStructure, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;[, build, build/Project.jar, src, src/A.class, src/A.kt]&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rootDirectory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">visitFileTree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cleanVisitor)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> directoryStructureAfterClean </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rootDirectory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">walk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(PathWalkOption.INCLUDE_DIRECTORIES)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">relativeTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rootDirectory).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sorted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    assertPrints</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(directoryStructureAfterClean, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;[, src, src/A.kt]&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><p>正如实验性 API 的惯例，新的扩展需要选择性加入：<code>@OptIn(kotlin.io.path.ExperimentalPathApi::class)</code> 或 <code>@kotlin.io.path.ExperimentalPathApi</code>。或者，你可以使用编译器选项：<code>-opt-in=kotlin.io.path.ExperimentalPathApi</code>。</p><p>我们期待你能在 YouTrack 中提供关于 <a href="https://youtrack.jetbrains.com/issue/KT-52909" target="_blank" rel="noreferrer"><code>walk()</code> 函数</a>和 <a href="https://youtrack.jetbrains.com/issue/KT-52910" target="_blank" rel="noreferrer">visit 扩展函数</a>的反馈。</p><h2 id="文档更新" tabindex="-1">文档更新 <a class="header-anchor" href="#文档更新" aria-label="Permalink to &quot;文档更新&quot;">​</a></h2><p>自上次发布以来，Kotlin 文档获得了一些显著的更改：</p><h3 id="改进和增强的页面" tabindex="-1">改进和增强的页面 <a class="header-anchor" href="#改进和增强的页面" aria-label="Permalink to &quot;改进和增强的页面&quot;">​</a></h3><ul><li><a href="/kotlin/basic-types">基本类型概述</a> – 了解 Kotlin 中使用的基本类型：数字、布尔值、字符、字符串、数组和无符号整数。</li><li><a href="/kotlin/kotlin-ide">用于 Kotlin 开发的 IDE</a> – 查看具有官方 Kotlin 支持的 IDE 列表以及具有社区支持插件的工具。</li></ul><h3 id="kotlin-多平台期刊中的新文章" tabindex="-1">Kotlin 多平台期刊中的新文章 <a class="header-anchor" href="#kotlin-多平台期刊中的新文章" aria-label="Permalink to &quot;Kotlin 多平台期刊中的新文章&quot;">​</a></h3><ul><li><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/native-and-cross-platform.html" target="_blank" rel="noreferrer">原生和跨平台应用开发：如何选择？</a> – 查看我们关于跨平台应用开发和原生方法的概述和优势。</li><li><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/cross-platform-frameworks.html" target="_blank" rel="noreferrer">六个最佳跨平台应用开发框架</a> – 阅读关于关键方面的内容，帮助你为跨平台项目选择合适的框架。</li></ul><h3 id="新的和更新的教程" tabindex="-1">新的和更新的教程 <a class="header-anchor" href="#新的和更新的教程" aria-label="Permalink to &quot;新的和更新的教程&quot;">​</a></h3><ul><li><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-create-first-app.html" target="_blank" rel="noreferrer">Kotlin 多平台入门</a> – 了解使用 Kotlin 进行跨平台移动开发，并创建一个可在 Android 和 iOS 上运行的应用。</li><li><a href="/kotlin/js-react">使用 React 和 Kotlin/JS 构建 Web 应用程序</a> – 创建一个浏览器应用，探索 Kotlin 的 DSL 和典型 React 程序的特性。</li></ul><h3 id="发布文档中的更改" tabindex="-1">发布文档中的更改 <a class="header-anchor" href="#发布文档中的更改" aria-label="Permalink to &quot;发布文档中的更改&quot;">​</a></h3><p>我们不再为每个版本提供推荐的 kotlinx 库列表。此列表仅包含与 Kotlin 本身推荐和测试的版本。它没有考虑到某些库相互依赖，并且需要特殊的 kotlinx 版本，这可能与推荐的 Kotlin 版本不同。</p><p>我们正在寻找一种方式来提供关于库如何相互关联和依赖的信息，以便明确在升级项目中 Kotlin 版本时应使用哪个 kotlinx 库版本。</p><h2 id="安装-kotlin-1-7-20" tabindex="-1">安装 Kotlin 1.7.20 <a class="header-anchor" href="#安装-kotlin-1-7-20" aria-label="Permalink to &quot;安装 Kotlin 1.7.20&quot;">​</a></h2><p><a href="https://www.jetbrains.com/idea/download/" target="_blank" rel="noreferrer">IntelliJ IDEA</a> 2021.3、2022.1 和 2022.2 会自动建议将 Kotlin 插件更新到 1.7.20。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>对于 Android Studio Dolphin (213)、Electric Eel (221) 和 Flamingo (222)，Kotlin 插件 1.7.20 将随即将到来的 Android Studio 更新一同交付。</p></div><p>新的命令行编译器可在 <a href="https://github.com/JetBrains/kotlin/releases/tag/v1.7.20" target="_blank" rel="noreferrer">GitHub 发布页面</a>下载。</p><h3 id="kotlin-1-7-20-兼容性指南" tabindex="-1">Kotlin 1.7.20 兼容性指南 <a class="header-anchor" href="#kotlin-1-7-20-兼容性指南" aria-label="Permalink to &quot;Kotlin 1.7.20 兼容性指南&quot;">​</a></h3><p>尽管 Kotlin 1.7.20 是一个增量发布，但为了限制 Kotlin 1.7.0 中引入的问题扩散，我们仍然不得不做出一些不兼容更改。</p><p>有关此类更改的详细列表，请参阅 <a href="/kotlin/compatibility-guide-1720">Kotlin 1.7.20 兼容性指南</a>。</p>`,93))])}const A=d(g,[["render",c]]);export{v as __pageData,A as default};
