import{_ as l,C as e,c as n,o as t,ag as i,G as p}from"./chunks/framework.Bksy39di.js";const E=JSON.parse('{"title":"マルチプラットフォームライブラリの公開設定","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kmp/multiplatform-publish-lib-setup.md","filePath":"ja/kmp/multiplatform-publish-lib-setup.md","lastUpdated":1755516278000}'),h={name:"ja/kmp/multiplatform-publish-lib-setup.md"};function r(o,s,d,k,c,g){const a=e("secondary-label");return t(),n("div",null,[s[0]||(s[0]=i(`<h1 id="マルチプラットフォームライブラリの公開設定" tabindex="-1">マルチプラットフォームライブラリの公開設定 <a class="header-anchor" href="#マルチプラットフォームライブラリの公開設定" aria-label="Permalink to &quot;マルチプラットフォームライブラリの公開設定&quot;">​</a></h1><p>マルチプラットフォームライブラリの公開は、様々な場所に対して設定できます。</p><ul><li><a href="#publishing-to-a-local-maven-repository">ローカルMavenリポジトリへ</a></li><li>Maven Centralリポジトリへ。アカウント認証情報の設定、ライブラリメタデータのカスタマイズ、公開プラグインの構成方法については、<a href="./multiplatform-publish-libraries">こちらのチュートリアル</a>を参照してください。</li><li>GitHubリポジトリへ。詳細は、GitHubの<a href="https://docs.github.com/en/packages" target="_blank" rel="noreferrer">GitHub Packages</a>に関するドキュメントを参照してください。</li></ul><h2 id="ローカルmavenリポジトリへの公開" tabindex="-1">ローカルMavenリポジトリへの公開 <a class="header-anchor" href="#ローカルmavenリポジトリへの公開" aria-label="Permalink to &quot;ローカルMavenリポジトリへの公開&quot;">​</a></h2><p><code>maven-publish</code> Gradleプラグインを使用すると、マルチプラットフォームライブラリをローカルMavenリポジトリに公開できます。</p><ol><li><p><code>shared/build.gradle.kts</code>ファイルに、<a href="https://docs.gradle.org/current/userguide/publishing_maven.html" target="_blank" rel="noreferrer"><code>maven-publish</code> Gradleプラグイン</a>を追加します。</p></li><li><p>ライブラリのグループとバージョン、および公開する<a href="https://docs.gradle.org/current/userguide/publishing_maven.html#publishing_maven:repositories" target="_blank" rel="noreferrer">リポジトリ</a>を指定します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;maven-publish&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">group </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;com.example&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">version </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1.0&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">publishing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    repositories</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        maven</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            //...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ol><p><code>maven-publish</code>と組み合わせて使用すると、Kotlinプラグインは現在のホストでビルド可能な各ターゲットに対して自動的に公開物を作成します。ただし、Androidターゲットは<a href="#publish-an-android-library">公開を設定するための追加の手順</a>が必要です。</p><h2 id="公開物の構造" tabindex="-1">公開物の構造 <a class="header-anchor" href="#公開物の構造" aria-label="Permalink to &quot;公開物の構造&quot;">​</a></h2><p>Kotlinマルチプラットフォームライブラリの公開物には、複数のMaven公開物が含まれており、それぞれが特定のターゲットに対応しています。さらに、ライブラリ全体を表す傘となる_root_公開物である<code>kotlinMultiplatform</code>も公開されます。</p><p><a href="./multiplatform-add-dependencies">共通ソースセット</a>に<a href="./multiplatform-add-dependencies">依存関係</a>として追加すると、root公開物は適切なプラットフォーム固有のアーティファクトに自動的に解決されます。</p><h3 id="ターゲット固有およびroot公開物" tabindex="-1">ターゲット固有およびroot公開物 <a class="header-anchor" href="#ターゲット固有およびroot公開物" aria-label="Permalink to &quot;ターゲット固有およびroot公開物&quot;">​</a></h3><p>KotlinマルチプラットフォームGradleプラグインは、各ターゲットに対して個別の公開物を構成します。 以下のプロジェクト構成を考えてみましょう。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// projectName = &quot;lib&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">group </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;test&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">version </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1.0&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosX64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>この設定により、以下のMaven公開物が生成されます。</p><p><strong>ターゲット固有の公開物</strong></p><ul><li><code>jvm</code>ターゲットの場合:<code>test:lib-jvm:1.0</code></li><li><code>iosX64</code>ターゲットの場合: <code>test:lib-iosx64:1.0</code></li><li><code>iosArm64</code>ターゲットの場合:<code>test:lib-iosarm64:1.0</code></li></ul><p>各ターゲット固有の公開物は独立しています。たとえば、<code>publishJvmPublicationTo&lt;MavenRepositoryName&gt;</code>を実行すると、JVMモジュールのみが公開され、他のモジュールは未公開のままになります。</p><p><strong>Root公開物</strong></p><p><code>kotlinMultiplatform</code> root公開物: <code>test:lib:1.0</code>。</p><p>root公開物は、すべてのターゲット固有の公開物を参照するエントリポイントとして機能します。 メタデータアーティファクトを含み、他の公開物（個々のプラットフォームアーティファクトの期待されるURLと座標）への参照を含めることで、適切な依存関係の解決を保証します。</p><ul><li><p>Maven Centralなど一部のリポジトリでは、rootモジュールに分類子 (classifier) のないJARアーティファクト（例: <code>kotlinMultiplatform-1.0.jar</code>）が含まれている必要があります。Kotlinマルチプラットフォームプラグインは、必要なアーティファクトを埋め込まれたメタデータアーティファクトとともに自動的に生成します。これにより、リポジトリの要件を満たすためにライブラリのrootモジュールに空のアーティファクトを追加する必要がなくなります。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>JARアーティファクトの生成については、<a href="./multiplatform-configure-compilations#compilation-for-jvm">Gradle</a>と<a href="https://kotlinlang.org/docs/maven.html#create-jar-file" target="_blank" rel="noreferrer">Maven</a>のビルドシステムで詳細を確認してください。</p></div></li><li><p>リポジトリが必要とする場合、<code>kotlinMultiplatform</code>公開物にもソースとドキュメントのアーティファクトが必要になることがあります。その場合は、公開のスコープで<a href="https://docs.gradle.org/current/javadoc/org/gradle/api/publish/maven/MavenPublication.html#artifact-java.lang.Object-" target="_blank" rel="noreferrer"><code>artifact()</code></a>を使用します。</p></li></ul><h3 id="完全なライブラリの公開" tabindex="-1">完全なライブラリの公開 <a class="header-anchor" href="#完全なライブラリの公開" aria-label="Permalink to &quot;完全なライブラリの公開&quot;">​</a></h3><p>必要なすべてのアーティファクトを1つのステップで公開するには、<code>publishAllPublicationsTo&lt;MavenRepositoryName&gt;</code>という傘となるタスクを使用します。例:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> publishAllPublicationsToGithubPackagesRepository</span></span></code></pre></div><p>Maven Localに公開する場合は、特別なタスクを使用できます。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> publishToMavenLocal</span></span></code></pre></div><p>これらのタスクは、すべてのターゲット固有およびroot公開物が一緒に公開されることを保証し、ライブラリを依存関係の解決に完全に利用できるようにします。</p><p>または、個別の公開タスクを使用することもできます。まずroot公開を実行します。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> publishKotlinMultiplatformPublicationToMavenLocal</span></span></code></pre></div><p>このタスクは、ターゲット固有の公開に関する情報を含む<code>*.module</code>ファイルを公開しますが、ターゲット自体は未公開のままです。プロセスを完了するには、各ターゲット固有の公開物を個別に公開します。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> publish</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">TargetNam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">PublicationToMavenLocal</span></span></code></pre></div><p>これにより、すべてのアーティファクトが利用可能で、正しく参照されることが保証されます。</p><h2 id="ホストの要件" tabindex="-1">ホストの要件 <a class="header-anchor" href="#ホストの要件" aria-label="Permalink to &quot;ホストの要件&quot;">​</a></h2><p>Kotlin/Nativeはクロスコンパイルをサポートしており、どのホストでも必要な<code>.klib</code>アーティファクトを生成できます。ただし、いくつか留意すべき具体的な点があります。</p><h3 id="appleターゲットのコンパイル" tabindex="-1">Appleターゲットのコンパイル <a class="header-anchor" href="#appleターゲットのコンパイル" aria-label="Permalink to &quot;Appleターゲットのコンパイル&quot;">​</a></h3>`,35)),p(a,{ref:"Experimental"},null,512),s[1]||(s[1]=i(`<p>Appleターゲットを含むプロジェクトのアーティファクトを生成するには、通常、Appleマシンが必要です。 ただし、他のホストを使用したい場合は、<code>gradle.properties</code>ファイルでこのオプションを設定します。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.native.enableKlibsCrossCompilation=true</span></span></code></pre></div><p>クロスコンパイルは現在Experimental（試験的）であり、いくつかの制限があります。以下の場合はMacマシンを使用する必要があります。</p><ul><li>ライブラリに<a href="https://kotlinlang.org/docs/native-c-interop.html" target="_blank" rel="noreferrer">cinterop依存関係</a>がある場合。</li><li>プロジェクトで<a href="./multiplatform-cocoapods-overview">CocoaPods連携</a>が設定されている場合。</li><li>Appleターゲットの<a href="./multiplatform-build-native-binaries">最終バイナリ</a>をビルドまたはテストする必要がある場合。</li></ul><h3 id="公開物の重複" tabindex="-1">公開物の重複 <a class="header-anchor" href="#公開物の重複" aria-label="Permalink to &quot;公開物の重複&quot;">​</a></h3><p>公開時の問題を避けるため、リポジトリでの公開物の重複を避けるために、すべてのアーティファクトを単一のホストから公開してください。例えば、Maven Centralは公開物の重複を明示的に禁止しており、プロセスは失敗します。</p><h2 id="androidライブラリの公開" tabindex="-1">Androidライブラリの公開 <a class="header-anchor" href="#androidライブラリの公開" aria-label="Permalink to &quot;Androidライブラリの公開&quot;">​</a></h2><p>Androidライブラリを公開するには、追加の構成が必要です。</p><p>デフォルトでは、Androidライブラリのアーティファクトは公開されません。<a href="https://developer.android.com/build/build-variants" target="_blank" rel="noreferrer">Androidビルドバリアント</a>によって生成されたアーティファクトを公開するには、<code>shared/build.gradle.kts</code>ファイルのAndroidターゲットブロックでバリアント名を指定します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    androidTarget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        publishLibraryVariants</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;release&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>この例は、<a href="https://developer.android.com/build/build-variants#product-flavors" target="_blank" rel="noreferrer">プロダクトフレーバー</a>を持たないAndroidライブラリで機能します。 プロダクトフレーバーを持つライブラリの場合、バリアント名には<code>fooBarDebug</code>や<code>fooBarRelease</code>のようなフレーバーも含まれます。</p><p>デフォルトの公開設定は以下のとおりです。</p><ul><li>公開されるバリアントが同じビルドタイプ（例えば、すべて<code>release</code>または<code>debug</code>）の場合、それらはどのコンシューマビルドタイプとも互換性があります。</li><li>公開されるバリアントが異なるビルドタイプの場合、公開されたバリアントに含まれないコンシューマビルドタイプと互換性があるのはリリースバリアントのみです。他のすべてのバリアント（<code>debug</code>など）は、コンシューマプロジェクトが<a href="https://developer.android.com/reference/tools/gradle-api/4.2/com/android/build/api/dsl/BuildType" target="_blank" rel="noreferrer">マッチングフォールバック</a>を指定しない限り、コンシューマ側で同じビルドタイプにのみ一致します。</li></ul><p>公開されるAndroidバリアントすべてを、ライブラリコンシューマが使用する同じビルドタイプのみと互換性を持たせたい場合は、このGradleプロパティを設定します: <code>kotlin.android.buildTypeAttribute.keep=true</code>。</p><p>プロダクトフレーバーごとにバリアントをグループ化して公開することもできます。これにより、異なるビルドタイプの出力が単一のモジュールに配置され、ビルドタイプがアーティファクトの分類子 (classifier) になります（リリースビルドタイプは引き続き分類子なしで公開されます）。このモードはデフォルトで無効になっており、<code>shared/build.gradle.kts</code>ファイルで次のように有効にできます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    androidTarget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        publishLibraryVariantsGroupedByFlavor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>異なる依存関係を持つ場合にプロダクトフレーバーごとにバリアントをグループ化して公開することは推奨されません。それらの依存関係は1つの依存関係リストにマージされるためです。</p></div><h2 id="ソース公開の無効化" tabindex="-1">ソース公開の無効化 <a class="header-anchor" href="#ソース公開の無効化" aria-label="Permalink to &quot;ソース公開の無効化&quot;">​</a></h2><p>デフォルトでは、KotlinマルチプラットフォームGradleプラグインは、指定されたすべてのターゲットのソースを公開します。しかし、<code>shared/build.gradle.kts</code>ファイルで<code>withSourcesJar()</code> APIを使用してソース公開を設定し、無効にすることができます。</p><ul><li><p>すべてのターゲットのソース公開を無効にする場合:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    withSourcesJar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(publish </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    linuxX64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>指定されたターゲットのみのソース公開を無効にする場合:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     // JVMのみソース公開を無効にする:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        withSourcesJar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(publish </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    linuxX64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>指定されたターゲット以外のすべてのターゲットのソース公開を無効にする場合:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // JVM以外のすべてのターゲットでソース公開を無効にする:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    withSourcesJar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(publish </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        withSourcesJar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(publish </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    linuxX64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><h2 id="jvm環境属性公開の無効化" tabindex="-1">JVM環境属性公開の無効化 <a class="header-anchor" href="#jvm環境属性公開の無効化" aria-label="Permalink to &quot;JVM環境属性公開の無効化&quot;">​</a></h2><p>Kotlin 2.0.0以降、Gradle属性<a href="https://docs.gradle.org/current/userguide/variant_attributes.html#sub:jvm_default_attributes" target="_blank" rel="noreferrer"><code>org.gradle.jvm.environment</code></a>は、KotlinマルチプラットフォームライブラリのJVMバリアントとAndroidバリアントを区別するために、すべてのKotlinバリアントとともに自動的に公開されます。この属性は、どのライブラリバリアントがどのJVM環境に適しているかを示し、Gradleはこの情報を使用してプロジェクトの依存関係の解決を助けます。ターゲット環境は「android」、「standard-jvm」、または「no-jvm」になります。</p><p>この属性の公開を無効にするには、<code>gradle.properties</code>ファイルに以下のGradleプロパティを追加します。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.publishJvmEnvironmentAttribute=false</span></span></code></pre></div><h2 id="ライブラリのプロモーション" tabindex="-1">ライブラリのプロモーション <a class="header-anchor" href="#ライブラリのプロモーション" aria-label="Permalink to &quot;ライブラリのプロモーション&quot;">​</a></h2><p>あなたのライブラリは、<a href="https://klibs.io/" target="_blank" rel="noreferrer">JetBrainsの検索プラットフォーム</a>で紹介される可能性があります。これは、ターゲットプラットフォームに基づいてKotlinマルチプラットフォームライブラリを簡単に検索できるように設計されています。</p><p>条件を満たすライブラリは自動的に追加されます。ライブラリを追加する方法の詳細については、<a href="https://klibs.io/faq" target="_blank" rel="noreferrer">FAQ</a>を参照してください。</p><h2 id="次のステップ" tabindex="-1">次のステップ <a class="header-anchor" href="#次のステップ" aria-label="Permalink to &quot;次のステップ&quot;">​</a></h2><ul><li><a href="./multiplatform-publish-libraries">KotlinマルチプラットフォームライブラリをMaven Centralリポジトリに公開する方法を学ぶ</a></li><li><a href="https://kotlinlang.org/docs/api-guidelines-build-for-multiplatform.html" target="_blank" rel="noreferrer">Kotlinマルチプラットフォーム向けのライブラリ設計に関するベストプラクティスとヒントについては、ライブラリ作成者向けガイドラインを参照する</a></li></ul>`,29))])}const b=l(h,[["render",r]]);export{E as __pageData,b as default};
