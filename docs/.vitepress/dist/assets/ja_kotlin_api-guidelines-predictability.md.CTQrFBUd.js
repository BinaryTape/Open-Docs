import{_ as i,c as a,o as n,ag as t}from"./chunks/framework.Bksy39di.js";const g=JSON.parse('{"title":"予測可能性","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/api-guidelines-predictability.md","filePath":"ja/kotlin/api-guidelines-predictability.md","lastUpdated":1754307826000}'),l={name:"ja/kotlin/api-guidelines-predictability.md"};function h(k,s,p,e,r,E){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="予測可能性" tabindex="-1">予測可能性 <a class="header-anchor" href="#予測可能性" aria-label="Permalink to &quot;予測可能性&quot;">​</a></h1><p>堅牢で使いやすいKotlinライブラリを設計するには、一般的なユースケースを想定し、拡張性を考慮し、適切な使用法を強制することが不可欠です。 デフォルト設定、エラー処理、状態管理に関するベストプラクティスに従うことで、ライブラリの整合性と品質を維持しつつ、ユーザーにシームレスな体験を提供できます。</p><h2 id="デフォルトで適切な動作をさせる" tabindex="-1">デフォルトで適切な動作をさせる <a class="header-anchor" href="#デフォルトで適切な動作をさせる" aria-label="Permalink to &quot;デフォルトで適切な動作をさせる&quot;">​</a></h2><p>あなたのライブラリは、それぞれのユースケースにおける「ハッピーパス」を想定し、それに応じてデフォルト設定を提供すべきです。 ライブラリが正しく機能するために、ユーザーがデフォルト値を指定する必要があってはなりません。</p><p>たとえば、<a href="https://ktor.io/docs/client-create-new-application.html" target="_blank" rel="noreferrer">Ktor <code>HttpClient</code></a>を使用する際、最も一般的なユースケースはサーバーへのGETリクエストの送信です。 これは以下のコードで実現でき、必要不可欠な情報のみを指定すればよいようになっています。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HttpResponse</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://ktor.io/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>必須のHTTPヘッダーや、レスポンスで起こりうるステータスコードに対するカスタムイベントハンドラーの値を指定する必要はありません。</p><p>ユースケースに明確な「ハッピーパス」がない場合や、パラメーターにデフォルト値を持たせるべきだが異論のない選択肢がない場合は、 それは要件分析に欠陥があることを示している可能性があります。</p><h2 id="拡張の機会を提供する" tabindex="-1">拡張の機会を提供する <a class="header-anchor" href="#拡張の機会を提供する" aria-label="Permalink to &quot;拡張の機会を提供する&quot;">​</a></h2><p>正しい選択肢を予測できない場合は、ユーザーが好むアプローチを指定できるようにします。 あなたのライブラリは、ユーザーが独自のアプローチを提供したり、サードパーティ製拡張機能を使用したりできるようにすべきです。</p><p>たとえば、<a href="https://ktor.io/docs/client-serialization.html" target="_blank" rel="noreferrer">Ktor <code>HttpClient</code></a>では、ユーザーはクライアントの設定時にコンテンツネゴシエーションのサポートをインストールし、好みのシリアライゼーション形式を指定することが推奨されています。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ContentNegotiation) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Json</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            prettyPrint </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            isLenient </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>ユーザーは、どのプラグインをインストールするかを選択したり、<a href="https://ktor.io/docs/client-custom-plugins.html" target="_blank" rel="noreferrer">クライアントプラグインを定義するための独立したAPI</a>を使用して独自のプラグインを作成したりできます。</p><p>さらに、ユーザーはライブラリ内の型に対して拡張関数やプロパティを定義できます。 ライブラリの作者として、あなたは<a href="/ja/kotlin/api-guidelines-readability#use-extension-functions-and-properties">拡張機能を念頭に置いて設計する</a>ことでこれを容易にし、 ライブラリの型が明確なコアコンセプトを持つことを保証できます。</p><h2 id="意図しない不正な拡張を防止する" tabindex="-1">意図しない不正な拡張を防止する <a class="header-anchor" href="#意図しない不正な拡張を防止する" aria-label="Permalink to &quot;意図しない不正な拡張を防止する&quot;">​</a></h2><p>ユーザーがライブラリを、その元の設計に違反するような方法や、問題領域のルール内で不可能な方法で拡張できないようにすべきです。</p><p>たとえば、JSONとの間でデータをマーシャリングする際、出力形式でサポートされる型は以下の6種類のみです。 <code>object</code>、<code>array</code>、<code>number</code>、<code>string</code>、<code>boolean</code>、<code>null</code>。</p><p><code>JsonElement</code>というオープンクラスまたはインターフェースを作成した場合、ユーザーは<code>JsonDate</code>のような不正な派生型を作成できてしまう可能性があります。 代わりに、<code>JsonElement</code>インターフェースをシールドにし、各型に実装を提供することができます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">sealed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> JsonElement</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> JsonNumber</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">JsonElement</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> JsonObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> values: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">JsonElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">JsonElement</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> JsonArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> values: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">JsonElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">JsonElement</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> JsonBoolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">JsonElement</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> JsonString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">JsonElement</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> JsonNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">JsonElement</span></span></code></pre></div><p>シールド型は、コンパイラが<code>when</code>式が網羅的であることを保証できるようにするため、<code>else</code>ステートメントを必要とせず、 可読性と一貫性を向上させます。</p><h2 id="可変状態の公開を避ける" tabindex="-1">可変状態の公開を避ける <a class="header-anchor" href="#可変状態の公開を避ける" aria-label="Permalink to &quot;可変状態の公開を避ける&quot;">​</a></h2><p>複数の値を管理する際、APIは可能な限り読み取り専用コレクションを受け入れ、また返すようにすべきです。 可変コレクションはスレッドセーフではなく、ライブラリに複雑さと予測不能性をもたらします。</p><p>たとえば、ユーザーがAPIのエントリポイントから返された可変コレクションを変更した場合、 それが実装の構造を修正しているのか、それともコピーを修正しているのかが不明確になります。 同様に、ユーザーがコレクションをライブラリに渡した後にその中の値を変更できる場合、それが実装に影響するかどうかが不明確になります。</p><p>配列は可変コレクションであるため、APIでの使用は避けてください。 配列を使用する必要がある場合は、ユーザーとデータを共有する前に防御的コピーを作成してください。これにより、データ構造が変更されないことが保証されます。</p><p>防御的コピーを作成するこのポリシーは、<code>vararg</code>引数に対してはコンパイラによって自動的に実行されます。 <code>vararg</code>引数が期待される場所に既存の配列をスプレッド演算子を使用して渡す場合、配列のコピーが自動的に作成されます。</p><p>この動作は以下の例で示されています。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> demo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">vararg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> input: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">out</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> input</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> originalArray </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> arrayOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;one&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;two&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;three&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;four&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newArray </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> demo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">originalArray)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    originalArray[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;ten&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // &quot;one, ten, three, four&quot;と出力される</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(originalArray.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">joinToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // &quot;one, two, three, four&quot;と出力される</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(newArray.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">joinToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="入力と状態を検証する" tabindex="-1">入力と状態を検証する <a class="header-anchor" href="#入力と状態を検証する" aria-label="Permalink to &quot;入力と状態を検証する&quot;">​</a></h2><p>実装が進む前に、入力と既存の状態を検証することで、ライブラリが正しく使用されていることを確認してください。 入力の検証には<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/require.html" target="_blank" rel="noreferrer"><code>require</code></a>関数を、既存の状態の検証には<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/check.html" target="_blank" rel="noreferrer"><code>check</code></a>関数を使用してください。</p><p><code>require</code>関数は、条件が<code>false</code>の場合に<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-illegal-argument-exception/#kotlin.IllegalArgumentException" target="_blank" rel="noreferrer"><code>IllegalArgumentException</code></a>をスローし、適切なエラーメッセージとともに即座に関数を失敗させます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> saveUser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(username: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, password: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(username.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isNotBlank</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) { </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Username should not be blank&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(username.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isLetterOrDigit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }) {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;Username can only contain letters and digits, was: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$username</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(password.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isNotBlank</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) { </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Password should not be blank&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(password.length </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;Password must contain at least 7 characters&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* Implementation can proceed */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>上記のように、不正な文字を含むユーザー名のエラーメッセージのように、ユーザーが失敗の原因を特定するのに役立つように、エラーメッセージには関連する入力を含めるべきです。 この慣行の例外として、エラーメッセージに値を含めることで、セキュリティエクスプロイトの一部として悪用される可能性のある情報が明らかになる場合があり、これがパスワードの長さのエラーメッセージにパスワード入力が含まれない理由です。</p><p>同様に、<code>check</code>関数は、条件が<code>false</code>の場合に<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-illegal-state-exception/#kotlin.IllegalStateException" target="_blank" rel="noreferrer"><code>IllegalStateException</code></a>をスローします。 以下の例に示すように、この関数はインスタンスの状態を検証するために使用します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ShoppingCart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> contents </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mutableListOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> addItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(item: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       contents.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(item)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> purchase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Amount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">       check</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(contents.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isNotEmpty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">           &quot;Cannot purchase an empty cart&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       // Calculate and return amount</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="次のステップ" tabindex="-1">次のステップ <a class="header-anchor" href="#次のステップ" aria-label="Permalink to &quot;次のステップ&quot;">​</a></h2><p>ガイドの次のパートでは、デバッグ可能性について学びます。</p><p><a href="/ja/kotlin/api-guidelines-debuggability">次のパートに進む</a></p>`,37)]))}const o=i(l,[["render",h]]);export{g as __pageData,o as default};
