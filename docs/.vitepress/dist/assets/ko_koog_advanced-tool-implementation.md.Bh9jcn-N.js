import{_ as i,c as a,o as t,ag as n}from"./chunks/framework.Bksy39di.js";const E=JSON.parse('{"title":"고급 구현","description":"","frontmatter":{},"headers":[],"relativePath":"ko/koog/advanced-tool-implementation.md","filePath":"ko/koog/advanced-tool-implementation.md","lastUpdated":1754431054000}'),l={name:"ko/koog/advanced-tool-implementation.md"};function e(h,s,p,k,r,o){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="고급-구현" tabindex="-1">고급 구현 <a class="header-anchor" href="#고급-구현" aria-label="Permalink to &quot;고급 구현&quot;">​</a></h1><p>이 섹션에서는 향상된 유연성과 사용자 정의 동작이 필요한 시나리오를 위해 설계된 고급 API를 설명합니다. 이 접근 방식을 통해 매개변수, 메타데이터, 실행 로직, 그리고 도구가 등록되고 호출되는 방식 등 도구의 모든 측면을 완벽하게 제어할 수 있습니다.</p><p>이러한 수준의 제어는 기본적인 사용 사례를 확장하여 에이전트 세션 및 워크플로우에 원활하게 통합할 수 있는 정교한 도구를 생성하는 데 이상적입니다.</p><p>이 페이지에서는 도구를 구현하고, 레지스트리를 통해 도구를 관리하며, 호출하고, 노드 기반 에이전트 아키텍처 내에서 사용하는 방법을 설명합니다.</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>고급 도구 API는 멀티플랫폼입니다. 이를 통해 여러 플랫폼에서 동일한 도구를 사용할 수 있습니다.</p></div><h2 id="도구-구현" tabindex="-1">도구 구현 <a class="header-anchor" href="#도구-구현" aria-label="Permalink to &quot;도구 구현&quot;">​</a></h2><p>Koog 프레임워크는 도구 구현을 위해 다음 접근 방식을 제공합니다:</p><ul><li>모든 도구에 기본 클래스 <code>Tool</code>을 사용합니다. 텍스트가 아닌 결과를 반환하거나 도구 동작에 대한 완전한 제어가 필요할 때 이 클래스를 사용해야 합니다.</li><li>기본 <code>Tool</code> 클래스를 확장하고 텍스트 결과를 반환하는 도구 생성을 단순화하는 <code>SimpleTool</code> 클래스를 사용합니다. 도구가 텍스트만 반환하면 되는 시나리오에 이 접근 방식을 사용해야 합니다.</li></ul><p>두 접근 방식 모두 동일한 핵심 구성 요소를 사용하지만, 구현 방식과 반환하는 결과에서 차이가 있습니다.</p><h3 id="tool-클래스" tabindex="-1">Tool 클래스 <a class="header-anchor" href="#tool-클래스" aria-label="Permalink to &quot;Tool 클래스&quot;">​</a></h3><p><a href="https://api.koog.ai/agents/agents-tools/ai.koog.agents.core.tools/-tool/index.html" target="_blank" rel="noreferrer"><code>Tool&lt;Args, Result&gt;</code></a> 추상 클래스는 Koog에서 도구를 생성하기 위한 기본 클래스입니다. 이 클래스를 사용하면 특정 인수 타입(<code>Args</code>)을 허용하고 다양한 타입(<code>Result</code>)의 결과를 반환하는 도구를 생성할 수 있습니다.</p><p>각 도구는 다음 구성 요소로 이루어집니다:</p><table tabindex="0"><thead><tr><th><div style="width:110px;">구성 요소</div></th><th>설명</th></tr></thead><tbody><tr><td><code>Args</code></td><td>도구에 필요한 인수를 정의하는 직렬화 가능한 데이터 클래스입니다. 이 클래스는 <a href="https://api.koog.ai/agents/agents-tools/ai.koog.agents.core.tools/-tool/-args/index.html" target="_blank" rel="noreferrer"><code>ToolArgs</code></a> 인터페이스를 구현해야 합니다. 인수가 필요 없는 도구의 경우, 내장된 <code>ToolArgs.Empty</code> 구현을 사용할 수 있습니다.</td></tr><tr><td><code>Result</code></td><td>도구가 반환하는 결과의 타입입니다. <code>ToolResult.Text</code>, <code>ToolResult.Boolean</code>, <code>ToolResult.Number</code> 또는 <code>ToolResult.JSONSerializable</code>의 사용자 정의 구현일 수 있는 <a href="https://api.koog.ai/agents/agents-tools/ai.koog.agents.core.tools/-tool-result/index.html" target="_blank" rel="noreferrer"><code>ToolResult</code></a> 인터페이스를 구현해야 합니다.</td></tr><tr><td><code>argsSerializer</code></td><td>도구의 인수가 역직렬화되는 방식을 정의하는 오버라이드된 변수입니다. <a href="https://api.koog.ai/agents/agents-tools/ai.koog.agents.core.tools/-tool/args-serializer.html" target="_blank" rel="noreferrer">argsSerializer</a>도 참조하세요.</td></tr><tr><td><code>descriptor</code></td><td>도구 메타데이터를 지정하는 오버라이드된 변수입니다:<br>- <code>name</code><br>- <code>description</code><br>- <code>requiredParameters</code> (기본적으로 비어 있음)<br>- <code>optionalParameters</code> (기본적으로 비어 있음)<br><a href="https://api.koog.ai/agents/agents-tools/ai.koog.agents.core.tools/-tool/descriptor.html" target="_blank" rel="noreferrer">descriptor</a>도 참조하세요.</td></tr><tr><td><code>execute()</code></td><td>도구의 로직을 구현하는 함수입니다. <code>Args</code> 타입의 인수를 받고 <code>Result</code> 타입의 결과를 반환합니다. <a href="/ko/koog">execute()</a>도 참조하세요.</td></tr></tbody></table><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>LLM이 도구를 올바르게 이해하고 사용하기 쉽도록 도구에 명확한 설명과 잘 정의된 매개변수 이름을 지정해야 합니다.</p></div><h4 id="사용-예시" tabindex="-1">사용 예시 <a class="header-anchor" href="#사용-예시" aria-label="Permalink to &quot;사용 예시&quot;">​</a></h4><p>다음은 숫자 결과를 반환하는 <code>Tool</code> 클래스를 사용한 사용자 정의 도구 구현 예시입니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Implement a simple calculator tool that adds two digits</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CalculatorTool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Tool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CalculatorTool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ToolResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Arguments for the calculator tool</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @Serializable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> digit1: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> digit2: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ToolArgs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(digit1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;digit1 must be a single digit (0-9)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(digit2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;digit2 must be a single digit (0-9)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Serializer for the Args class</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> argsSerializer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Args.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">serializer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Tool descriptor</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> descriptor: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ToolDescriptor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ToolDescriptor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;calculator&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        description </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;A simple calculator that can add two digits (0-9).&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        requiredParameters </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            ToolParameterDescriptor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;digit1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                description </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;The first digit to add (0-9)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ToolParameterType.Integer</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            ),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            ToolParameterDescriptor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;digit2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                description </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;The second digit to add (0-9)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ToolParameterType.Integer</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Function to add two digits</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> suspend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ToolResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> args.digit1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> args.digit2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ToolResult.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sum)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>도구를 구현한 후, 도구 레지스트리에 추가하고 에이전트와 함께 사용해야 합니다. 자세한 내용은 <a href="./tools-overview#tool-registry">도구 레지스트리</a>를 참조하세요.</p><p>더 자세한 내용은 <a href="https://api.koog.ai/agents/agents-tools/ai.koog.agents.core.tools/-tool/index.html" target="_blank" rel="noreferrer">API 참조</a>를 참조하세요.</p><h3 id="simpletool-클래스" tabindex="-1">SimpleTool 클래스 <a class="header-anchor" href="#simpletool-클래스" aria-label="Permalink to &quot;SimpleTool 클래스&quot;">​</a></h3><p><a href="https://api.koog.ai/agents/agents-tools/ai.koog.agents.core.tools/-simple-tool/index.html" target="_blank" rel="noreferrer"><code>SimpleTool&lt;Args&gt;</code></a> 추상 클래스는 <code>Tool&lt;Args, ToolResult.Text&gt;</code>를 확장하며 텍스트 결과를 반환하는 도구 생성을 단순화합니다.</p><p>각 간단한 도구는 다음 구성 요소로 이루어집니다:</p><table tabindex="0"><thead><tr><th><div style="width:110px;">구성 요소</div></th><th>설명</th></tr></thead><tbody><tr><td><code>Args</code></td><td>사용자 정의 도구에 필요한 인수를 정의하는 직렬화 가능한 데이터 클래스입니다.</td></tr><tr><td><code>argsSerializer</code></td><td>도구의 인수가 직렬화되는 방식을 정의하는 오버라이드된 변수입니다. <a href="https://api.koog.ai/agents/agents-tools/ai.koog.agents.core.tools/-tool/args-serializer.html" target="_blank" rel="noreferrer">argsSerializer</a>도 참조하세요.</td></tr><tr><td><code>descriptor</code></td><td>도구 메타데이터를 지정하는 오버라이드된 변수입니다:<br>- <code>name</code><br>- <code>description</code><br>- <code>requiredParameters</code> (기본적으로 비어 있음)<br> - <code>optionalParameters</code> (기본적으로 비어 있음)<br> <a href="https://api.koog.ai/agents/agents-tools/ai.koog.agents.core.tools/-tool/descriptor.html" target="_blank" rel="noreferrer">descriptor</a>도 참조하세요.</td></tr><tr><td><code>doExecute()</code></td><td>도구에 의해 수행되는 주요 작업을 설명하는 오버라이드된 함수입니다. <code>Args</code> 타입의 인수를 받고 <code>String</code>을 반환합니다. <a href="https://api.koog.ai/agents/agents-tools/ai.koog.agents.core.tools/-simple-tool/do-execute.html" target="_blank" rel="noreferrer">doExecute()</a>도 참조하세요.</td></tr></tbody></table><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>LLM이 도구를 올바르게 이해하고 사용하기 쉽도록 도구에 명확한 설명과 잘 정의된 매개변수 이름을 지정해야 합니다.</p></div><h4 id="사용-예시-1" tabindex="-1">사용 예시 <a class="header-anchor" href="#사용-예시-1" aria-label="Permalink to &quot;사용 예시&quot;">​</a></h4><p>다음은 <code>SimpleTool</code>을 사용한 사용자 정의 도구 구현 예시입니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Create a tool that casts a string expression to a double value</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CastToDoubleTool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SimpleTool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CastToDoubleTool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Define tool arguments</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @Serializable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> expression: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> comment: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ToolArgs</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Serializer for the Args class</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> argsSerializer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Args.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">serializer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Tool descriptor</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> descriptor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ToolDescriptor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;cast_to_double&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        description </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;casts the passed expression to double or returns 0.0 if the expression is not castable&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        requiredParameters </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            ToolParameterDescriptor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;expression&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, description </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;An expression to case to double&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ToolParameterType.String</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        optionalParameters </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            ToolParameterDescriptor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;comment&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                description </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;A comment on how to process the expression&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ToolParameterType.String</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Function that executes the tool with the provided arguments</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> suspend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> doExecute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Result: \${</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">castToDouble</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(args.expression)}, &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;the comment was: \${args.comment}&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Function to cast a string expression to a double value</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> castToDouble</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(expression: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> expression.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toDoubleOrNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() ?: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>도구를 구현한 후, 도구 레지스트리에 추가하고 에이전트와 함께 사용해야 합니다. 자세한 내용은 <a href="./tools-overview#tool-registry">도구 레지스트리</a>를 참조하세요.</p>`,28)]))}const g=i(l,[["render",e]]);export{E as __pageData,g as default};
