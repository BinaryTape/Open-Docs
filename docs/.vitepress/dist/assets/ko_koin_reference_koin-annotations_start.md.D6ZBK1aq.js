import{_ as i,c as a,o as n,ag as t}from"./chunks/framework.Bksy39di.js";const c=JSON.parse('{"title":"Koin Annotations 시작하기","description":"","frontmatter":{"title":"Koin Annotations 시작하기"},"headers":[],"relativePath":"ko/koin/reference/koin-annotations/start.md","filePath":"ko/koin/reference/koin-annotations/start.md","lastUpdated":1750001831000}'),e={name:"ko/koin/reference/koin-annotations/start.md"};function l(p,s,h,o,k,r){return n(),a("div",null,s[0]||(s[0]=[t(`<p>Koin Annotations 프로젝트의 목표는 Koin 정의를 매우 빠르고 직관적인 방식으로 선언하고, 기저의 모든 Koin DSL을 자동으로 생성하는 것입니다. Kotlin 컴파일러 덕분에 개발자 경험을 확장하고 빠르게 진행할 수 있도록 돕는 것이 목표입니다 🚀.</p><h2 id="시작하기" tabindex="-1">시작하기 <a class="header-anchor" href="#시작하기" aria-label="Permalink to &quot;시작하기&quot;">​</a></h2><p>Koin에 익숙하지 않으신가요? 먼저 <a href="https://insert-koin.io/docs/quickstart/kotlin" target="_blank" rel="noreferrer">Koin 시작하기</a>를 살펴보세요.</p><p>컴포넌트에 정의 및 모듈 애너테이션을 태그하고, 일반 Koin API를 사용하세요.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 컴포넌트에 태그를 지정하여 정의를 선언합니다.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Single</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyComponent</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 모듈을 선언하고 애너테이션을 스캔합니다.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Module</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@ComponentScan</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyModule</span></span></code></pre></div><p>생성된 코드를 사용하려면 <code>org.koin.ksp.generated.*</code> 임포트를 다음과 같이 사용하세요:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Koin 생성 기능을 사용합니다.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.koin.ksp.generated.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> koin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> startKoin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        printLogger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        modules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // 여기서 생성된 &quot;.module&quot; 확장 프로퍼티가 있는 모듈 클래스를 사용합니다.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          MyModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().module</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 평소처럼 Koin API를 사용하면 됩니다.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    koin.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>이게 전부입니다. <a href="https://insert-koin.io/docs/reference/introduction" target="_blank" rel="noreferrer">일반 Koin API</a>를 사용하여 Koin에서 새로운 정의를 사용할 수 있습니다.</p><h2 id="ksp-옵션" tabindex="-1">KSP 옵션 <a class="header-anchor" href="#ksp-옵션" aria-label="Permalink to &quot;KSP 옵션&quot;">​</a></h2><p>Koin 컴파일러는 몇 가지 구성 옵션을 제공합니다. 공식 문서에 따라 프로젝트에 다음 옵션을 추가할 수 있습니다: <a href="https://kotlinlang.org/docs/ksp-quickstart.html#pass-options-to-processors" target="_blank" rel="noreferrer">Ksp Quickstart Doc</a></p><h3 id="컴파일-안정성-컴파일-시점에-koin-구성-확인-1-3-0-버전부터" tabindex="-1">컴파일 안정성 - 컴파일 시점에 Koin 구성 확인 (1.3.0 버전부터) <a class="header-anchor" href="#컴파일-안정성-컴파일-시점에-koin-구성-확인-1-3-0-버전부터" aria-label="Permalink to &quot;컴파일 안정성 - 컴파일 시점에 Koin 구성 확인 (1.3.0 버전부터)&quot;">​</a></h3><p>Koin Annotations를 사용하면 컴파일러 플러그인이 컴파일 시점에 Koin 구성을 검증할 수 있습니다. 이 기능은 Gradle 모듈에 추가할 다음 Ksp 옵션으로 활성화할 수 있습니다:</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle 또는 build.gradle.kts 파일에서</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ksp {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    arg(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;KOIN_CONFIG_CHECK&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;true&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>컴파일러는 구성에 사용된 모든 의존성이 선언되었는지, 그리고 사용된 모든 모듈에 접근 가능한지 확인합니다.</p><h3 id="provided를-사용하여-컴파일-안정성-우회하기-1-4-0-버전부터" tabindex="-1">@Provided를 사용하여 컴파일 안정성 우회하기 (1.4.0 버전부터) <a class="header-anchor" href="#provided를-사용하여-컴파일-안정성-우회하기-1-4-0-버전부터" aria-label="Permalink to &quot;@Provided를 사용하여 컴파일 안정성 우회하기 (1.4.0 버전부터)&quot;">​</a></h3><p>컴파일러가 무시하는 타입(Android 공통 타입 등) 외에도, 컴파일러 플러그인은 컴파일 시점에 Koin 구성을 검증할 수 있습니다. 매개변수를 검사 대상에서 제외하고 싶다면, 해당 타입이 현재 Koin Annotations 구성에 외부에서 제공된다는 것을 나타내기 위해 매개변수에 <code>@Provided</code>를 사용할 수 있습니다.</p><p>다음은 <code>MyProvidedComponent</code>가 Koin에 이미 선언되어 있다는 것을 나타냅니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyProvidedComponent</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Factory</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyPresenter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Provided</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> provided : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyProvidedComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="기본-모듈-비활성화-1-3-0-버전부터" tabindex="-1">기본 모듈 비활성화 (1.3.0 버전부터) <a class="header-anchor" href="#기본-모듈-비활성화-1-3-0-버전부터" aria-label="Permalink to &quot;기본 모듈 비활성화 (1.3.0 버전부터)&quot;">​</a></h3><p>기본적으로 Koin 컴파일러는 모듈에 바인딩되지 않은 모든 정의를 감지하여 프로젝트 루트에 생성되는 &quot;기본 모듈(default module)&quot;에 포함시킵니다. 다음 옵션을 사용하여 기본 모듈의 사용 및 생성을 비활성화할 수 있습니다:</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle 또는 build.gradle.kts 파일에서</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ksp {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    arg(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;KOIN_DEFAULT_MODULE&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;false&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="kotlin-kmp-설정" tabindex="-1">Kotlin KMP 설정 <a class="header-anchor" href="#kotlin-kmp-설정" aria-label="Permalink to &quot;Kotlin KMP 설정&quot;">​</a></h3><p>공식 문서에 설명된 대로 KSP 설정을 따르세요: <a href="https://kotlinlang.org/docs/ksp-multiplatform.html" target="_blank" rel="noreferrer">KSP with Kotlin Multiplatform</a></p><p>Koin Annotations의 기본 설정이 포함된 <a href="https://github.com/InsertKoinIO/hello-kmp/tree/annotations" target="_blank" rel="noreferrer">Hello Koin KMP</a> 프로젝트도 확인할 수 있습니다.</p><h3 id="pro-guard" tabindex="-1">Pro-Guard <a class="header-anchor" href="#pro-guard" aria-label="Permalink to &quot;Pro-Guard&quot;">​</a></h3><p>Koin Annotations 애플리케이션을 SDK로 임베드하려는 경우, 다음 Pro-Guard 규칙을 살펴보세요:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 애너테이션 정의 유지</span></span>
<span class="line"><span>-keep class org.koin.core.annotation.** { *; }</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Koin 애너테이션이 붙은 클래스 유지  </span></span>
<span class="line"><span>-keep @org.koin.core.annotation.* class * { *; }</span></span></code></pre></div>`,28)]))}const g=i(e,[["render",l]]);export{c as __pageData,g as default};
