import{_ as n,C as t,c as e,o as l,ag as a,G as p}from"./chunks/framework.Bksy39di.js";const y=JSON.parse('{"title":"코틀린 심볼 처리 API","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kotlin/ksp-overview.md","filePath":"ko/kotlin/ksp-overview.md","lastUpdated":1754307826000}'),r={name:"ko/kotlin/ksp-overview.md"};function h(k,s,o,d,c,E){const i=t("YouTubeVideo");return l(),e("div",null,[s[0]||(s[0]=a('<h1 id="코틀린-심볼-처리-api" tabindex="-1">코틀린 심볼 처리 API <a class="header-anchor" href="#코틀린-심볼-처리-api" aria-label="Permalink to &quot;코틀린 심볼 처리 API&quot;">​</a></h1><p>코틀린 심볼 처리(<em>KSP</em>)는 경량 컴파일러 플러그인을 개발하는 데 사용할 수 있는 API입니다. KSP는 학습 곡선을 최소화하면서 코틀린의 강점을 활용하는 간소화된 컴파일러 플러그인 API를 제공합니다. <a href="/ko/kotlin/kapt">kapt</a>와 비교하여 KSP를 사용하는 어노테이션 프로세서는 최대 두 배 빠르게 실행될 수 있습니다.</p><ul><li>KSP가 kapt와 어떻게 비교되는지 자세히 알아보려면 <a href="/ko/kotlin/ksp-why-ksp">KSP를 사용해야 하는 이유</a>를 확인하세요.</li><li>KSP 프로세서 작성을 시작하려면 <a href="/ko/kotlin/ksp-quickstart">KSP 빠른 시작</a>을 참조하세요.</li></ul><h2 id="개요" tabindex="-1">개요 <a class="header-anchor" href="#개요" aria-label="Permalink to &quot;개요&quot;">​</a></h2><p>KSP API는 코틀린 프로그램을 코틀린답게(idiomatically) 처리합니다. KSP는 확장 함수, 선언-사이트 가변성, 지역 함수와 같은 코틀린 고유 기능을 이해합니다. 또한 타입을 명시적으로 모델링하고 동등성 및 할당 호환성과 같은 기본적인 타입 검사를 제공합니다.</p><p>이 API는 <a href="https://kotlinlang.org/docs/reference/grammar.html" target="_blank" rel="noreferrer">코틀린 문법</a>에 따라 코틀린 프로그램 구조를 심볼(symbol) 수준에서 모델링합니다. KSP 기반 플러그인이 소스 프로그램을 처리할 때, 클래스, 클래스 멤버, 함수 및 관련 매개변수와 같은 구성 요소는 프로세서에서 접근할 수 있지만, <code>if</code> 블록 및 <code>for</code> 루프와 같은 요소는 접근할 수 없습니다.</p><p>개념적으로 KSP는 코틀린 리플렉션의 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/-k-type/" target="_blank" rel="noreferrer">KType</a>와 유사합니다. 이 API를 통해 프로세서는 클래스 선언에서 특정 타입 인수를 가진 해당 타입으로, 그리고 그 반대로도 탐색할 수 있습니다. 또한 타입 인수를 대체하고, 가변성을 지정하며, 스타 프로젝션을 적용하고, 타입의 널 허용 여부를 표시할 수 있습니다.</p><p>KSP를 코틀린 프로그램의 전처리기(preprocessor) 프레임워크로 생각할 수도 있습니다. KSP 기반 플러그인을 <em>심볼 프로세서</em> 또는 간단히 _프로세서_로 간주하면 컴파일의 데이터 흐름은 다음 단계로 설명할 수 있습니다.</p><ol><li>프로세서는 소스 프로그램과 리소스를 읽고 분석합니다.</li><li>프로세서는 코드 또는 다른 형태의 출력을 생성합니다.</li><li>코틀린 컴파일러는 생성된 코드와 함께 소스 프로그램을 컴파일합니다.</li></ol><p>완전한 컴파일러 플러그인과 달리 프로세서는 코드를 수정할 수 없습니다. 언어 의미론을 변경하는 컴파일러 플러그인은 때때로 매우 혼란스러울 수 있습니다. KSP는 소스 프로그램을 읽기 전용으로 처리하여 이러한 문제를 피합니다.</p><p>이 영상에서 KSP의 개요를 확인할 수도 있습니다.</p>',11)),p(i,{src:"https://www.youtube.com/v/bv-VyGM3HCY",title:"Kotlin Symbol Processing (KSP)"}),s[1]||(s[1]=a(`<h2 id="ksp가-소스-파일을-보는-방식" tabindex="-1">KSP가 소스 파일을 보는 방식 <a class="header-anchor" href="#ksp가-소스-파일을-보는-방식" aria-label="Permalink to &quot;KSP가 소스 파일을 보는 방식&quot;">​</a></h2><p>대부분의 프로세서는 입력 소스 코드의 다양한 프로그램 구조를 탐색합니다. API 사용법을 자세히 알아보기 전에, KSP의 관점에서 파일이 어떻게 보이는지 살펴보겠습니다.</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>KSFile</span></span>
<span class="line"><span>  packageName: KSName</span></span>
<span class="line"><span>  fileName: String</span></span>
<span class="line"><span>  annotations: List&lt;KSAnnotation&gt;  (File annotations)</span></span>
<span class="line"><span>  declarations: List&lt;KSDeclaration&gt;</span></span>
<span class="line"><span>    KSClassDeclaration // class, interface, object</span></span>
<span class="line"><span>      simpleName: KSName</span></span>
<span class="line"><span>      qualifiedName: KSName</span></span>
<span class="line"><span>      containingFile: String</span></span>
<span class="line"><span>      typeParameters: KSTypeParameter</span></span>
<span class="line"><span>      parentDeclaration: KSDeclaration</span></span>
<span class="line"><span>      classKind: ClassKind</span></span>
<span class="line"><span>      primaryConstructor: KSFunctionDeclaration</span></span>
<span class="line"><span>      superTypes: List&lt;KSTypeReference&gt;</span></span>
<span class="line"><span>      // contains inner classes, member functions, properties, etc.</span></span>
<span class="line"><span>      declarations: List&lt;KSDeclaration&gt;</span></span>
<span class="line"><span>    KSFunctionDeclaration // top level function</span></span>
<span class="line"><span>      simpleName: KSName</span></span>
<span class="line"><span>      qualifiedName: KSName</span></span>
<span class="line"><span>      containingFile: String</span></span>
<span class="line"><span>      typeParameters: KSTypeParameter</span></span>
<span class="line"><span>      parentDeclaration: KSDeclaration</span></span>
<span class="line"><span>      functionKind: FunctionKind</span></span>
<span class="line"><span>      extensionReceiver: KSTypeReference?</span></span>
<span class="line"><span>      returnType: KSTypeReference</span></span>
<span class="line"><span>      parameters: List&lt;KSValueParameter&gt;</span></span>
<span class="line"><span>      // contains local classes, local functions, local variables, etc.</span></span>
<span class="line"><span>      declarations: List&lt;KSDeclaration&gt;</span></span>
<span class="line"><span>    KSPropertyDeclaration // global variable</span></span>
<span class="line"><span>      simpleName: KSName</span></span>
<span class="line"><span>      qualifiedName: KSName</span></span>
<span class="line"><span>      containingFile: String</span></span>
<span class="line"><span>      typeParameters: KSTypeParameter</span></span>
<span class="line"><span>      parentDeclaration: KSDeclaration</span></span>
<span class="line"><span>      extensionReceiver: KSTypeReference?</span></span>
<span class="line"><span>      type: KSTypeReference</span></span>
<span class="line"><span>      getter: KSPropertyGetter</span></span>
<span class="line"><span>        returnType: KSTypeReference</span></span>
<span class="line"><span>      setter: KSPropertySetter</span></span>
<span class="line"><span>        parameter: KSValueParameter</span></span></code></pre></div><p>이 보기에는 파일에 선언된 일반적인 요소들인 클래스, 함수, 프로퍼티 등이 나열됩니다.</p><h2 id="symbolprocessorprovider-진입점" tabindex="-1">SymbolProcessorProvider: 진입점 <a class="header-anchor" href="#symbolprocessorprovider-진입점" aria-label="Permalink to &quot;SymbolProcessorProvider: 진입점&quot;">​</a></h2><p>KSP는 <code>SymbolProcessor</code>를 인스턴스화하기 위해 <code>SymbolProcessorProvider</code> 인터페이스의 구현을 기대합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SymbolProcessorProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(environment: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SymbolProcessorEnvironment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SymbolProcessor</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>SymbolProcessor</code>는 다음과 같이 정의됩니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SymbolProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> process</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(resolver: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Resolver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KSAnnotated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Let&#39;s focus on this</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> finish</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>Resolver</code>는 <code>SymbolProcessor</code>에 심볼과 같은 컴파일러 세부 정보에 대한 접근을 제공합니다. 최상위 함수와 최상위 클래스 내의 비지역(non-local) 함수를 모두 찾는 프로세서는 다음과 같습니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HelloFunctionFinderProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SymbolProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> functions </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mutableListOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KSClassDeclaration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> visitor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FindFunctionsVisitor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> process</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(resolver: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Resolver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        resolver.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAllFiles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">accept</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(visitor, Unit) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    inner</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FindFunctionsVisitor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KSVisitorVoid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> visitClassDeclaration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(classDeclaration: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KSClassDeclaration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            classDeclaration.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getDeclaredFunctions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">accept</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Unit) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> visitFunctionDeclaration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(function: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KSFunctionDeclaration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            functions.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(function)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> visitFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(file: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KSFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            file.declarations.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">accept</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Unit) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Provider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SymbolProcessorProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(environment: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SymbolProcessorEnvironment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SymbolProcessor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TODO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="리소스" tabindex="-1">리소스 <a class="header-anchor" href="#리소스" aria-label="Permalink to &quot;리소스&quot;">​</a></h2><ul><li><a href="/ko/kotlin/ksp-quickstart">빠른 시작</a></li><li><a href="/ko/kotlin/ksp-why-ksp">KSP를 사용해야 하는 이유?</a></li><li><a href="/ko/kotlin/ksp-examples">예시</a></li><li><a href="/ko/kotlin/ksp-additional-details">KSP가 코틀린 코드를 모델링하는 방식</a></li><li><a href="/ko/kotlin/ksp-reference">자바 어노테이션 프로세서 작성자를 위한 참조</a></li><li><a href="/ko/kotlin/ksp-incremental">점진적 처리 노트</a></li><li><a href="/ko/kotlin/ksp-multi-round">다중 라운드 처리 노트</a></li><li><a href="/ko/kotlin/ksp-multiplatform">멀티플랫폼 프로젝트의 KSP</a></li><li><a href="/ko/kotlin/ksp-command-line">명령줄에서 KSP 실행</a></li><li><a href="/ko/kotlin/ksp-faq">자주 묻는 질문</a></li></ul><h2 id="지원-라이브러리" tabindex="-1">지원 라이브러리 <a class="header-anchor" href="#지원-라이브러리" aria-label="Permalink to &quot;지원 라이브러리&quot;">​</a></h2><p>다음 표에는 안드로이드의 인기 라이브러리 목록과 KSP 지원 단계가 포함되어 있습니다.</p><table tabindex="0"><thead><tr><th>라이브러리</th><th>상태</th></tr></thead><tbody><tr><td>Room</td><td><a href="https://developer.android.com/jetpack/androidx/releases/room#2.3.0-beta02" target="_blank" rel="noreferrer">공식 지원</a></td></tr><tr><td>Moshi</td><td><a href="https://github.com/square/moshi/" target="_blank" rel="noreferrer">공식 지원</a></td></tr><tr><td>RxHttp</td><td><a href="https://github.com/liujingxing/rxhttp" target="_blank" rel="noreferrer">공식 지원</a></td></tr><tr><td>Kotshi</td><td><a href="https://github.com/ansman/kotshi" target="_blank" rel="noreferrer">공식 지원</a></td></tr><tr><td>Lyricist</td><td><a href="https://github.com/adrielcafe/lyricist" target="_blank" rel="noreferrer">공식 지원</a></td></tr><tr><td>Lich SavedState</td><td><a href="https://github.com/line/lich/tree/master/savedstate" target="_blank" rel="noreferrer">공식 지원</a></td></tr><tr><td>gRPC Dekorator</td><td><a href="https://github.com/mottljan/grpc-dekorator" target="_blank" rel="noreferrer">공식 지원</a></td></tr><tr><td>EasyAdapter</td><td><a href="https://github.com/AmrDeveloper/EasyAdapter" target="_blank" rel="noreferrer">공식 지원</a></td></tr><tr><td>Koin Annotations</td><td><a href="https://github.com/InsertKoinIO/koin-annotations" target="_blank" rel="noreferrer">공식 지원</a></td></tr><tr><td>Glide</td><td><a href="https://github.com/bumptech/glide" target="_blank" rel="noreferrer">공식 지원</a></td></tr><tr><td>Micronaut</td><td><a href="https://micronaut.io/2023/07/14/micronaut-framework-4-0-0-released/" target="_blank" rel="noreferrer">공식 지원</a></td></tr><tr><td>Epoxy</td><td><a href="https://github.com/airbnb/epoxy" target="_blank" rel="noreferrer">공식 지원</a></td></tr><tr><td>Paris</td><td><a href="https://github.com/airbnb/paris" target="_blank" rel="noreferrer">공식 지원</a></td></tr><tr><td>Auto Dagger</td><td><a href="https://github.com/ansman/auto-dagger" target="_blank" rel="noreferrer">공식 지원</a></td></tr><tr><td>SealedX</td><td><a href="https://github.com/skydoves/sealedx" target="_blank" rel="noreferrer">공식 지원</a></td></tr><tr><td>Ktorfit</td><td><a href="https://github.com/Foso/Ktorfit" target="_blank" rel="noreferrer">공식 지원</a></td></tr><tr><td>Mockative</td><td><a href="https://github.com/mockative/mockative" target="_blank" rel="noreferrer">공식 지원</a></td></tr><tr><td>DeeplinkDispatch</td><td><a href="https://github.com/airbnb/DeepLinkDispatch/pull/323" target="_blank" rel="noreferrer">airbnb/DeepLinkDispatch#323를 통해 지원</a></td></tr><tr><td>Dagger</td><td><a href="https://dagger.dev/dev-guide/ksp" target="_blank" rel="noreferrer">알파</a></td></tr><tr><td>Motif</td><td><a href="https://github.com/uber/motif" target="_blank" rel="noreferrer">알파</a></td></tr><tr><td>Hilt</td><td><a href="https://dagger.dev/dev-guide/ksp" target="_blank" rel="noreferrer">진행 중</a></td></tr><tr><td>Auto Factory</td><td><a href="https://github.com/google/auto/issues/982" target="_blank" rel="noreferrer">아직 지원되지 않음</a></td></tr></tbody></table>`,16))])}const F=n(r,[["render",h]]);export{y as __pageData,F as default};
