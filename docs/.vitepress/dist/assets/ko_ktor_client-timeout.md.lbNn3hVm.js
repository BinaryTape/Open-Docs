import{_ as o,C as t,c as p,o as d,G as s,ag as h,w as k,j as e,a as c}from"./chunks/framework.Bksy39di.js";const _=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ko/ktor/client-timeout.md","filePath":"ko/ktor/client-timeout.md","lastUpdated":1755457140000}'),r={name:"ko/ktor/client-timeout.md"};function u(g,i,m,E,y,F){const n=t("TopicTitle"),a=t("primary-label"),l=t("tldr");return d(),p("div",null,[s(n,{labelRef:"client-plugin",title:"타임아웃"}),s(a,{ref:"client-plugin"},null,512),s(l,null,{default:k(()=>i[0]||(i[0]=[e("p",null,[e("b",null,"코드 예시"),c(": "),e("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/client-timeout"}," client-timeout ")],-1)])),_:1}),i[1]||(i[1]=h(`<p><code>[HttpTimeout](https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins/-http-timeout)</code> 플러그인을 사용하면 다음 타임아웃을 구성할 수 있습니다:</p><ul><li><strong>요청 타임아웃</strong> — HTTP 호출을 처리하는 데 필요한 시간: 요청을 보내는 시점부터 응답을 받는 시점까지.</li><li><strong>연결 타임아웃</strong> — 클라이언트가 서버와 연결을 설정해야 하는 시간.</li><li><strong>소켓 타임아웃</strong> — 서버와 데이터를 교환할 때 두 데이터 패킷 간의 최대 비활성 시간.</li></ul><p>이러한 타임아웃은 모든 요청에 대해 또는 특정 요청에 대해서만 지정할 수 있습니다.</p><h2 id="add_dependencies" tabindex="-1">의존성 추가 <a class="header-anchor" href="#add_dependencies" aria-label="Permalink to &quot;의존성 추가 {id=&quot;add_dependencies&quot;}&quot;">​</a></h2><p><code>HttpTimeout</code>은 <code>[ktor-client-core](client-dependencies.md)</code> 아티팩트만 필요하며, 별도의 의존성이 필요하지 않습니다.</p><h2 id="install_plugin" tabindex="-1">HttpTimeout 설치 <a class="header-anchor" href="#install_plugin" aria-label="Permalink to &quot;HttpTimeout 설치 {id=&quot;install_plugin&quot;}&quot;">​</a></h2><p><code>HttpTimeout</code>을 설치하려면, <code>[클라이언트 구성 블록](client-create-and-configure.md#configure-client)</code> 내의 <code>install</code> 함수에 전달하세요:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.engine.cio.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.plugins.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpTimeout)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="configure_plugin" tabindex="-1">타임아웃 구성 <a class="header-anchor" href="#configure_plugin" aria-label="Permalink to &quot;타임아웃 구성 {id=&quot;configure_plugin&quot;}&quot;">​</a></h2><p>타임아웃을 구성하려면 해당 속성을 사용할 수 있습니다:</p><ul><li><code>[requestTimeoutMillis](https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins/-http-timeout-config/request-timeout-millis.html)</code>는 요청을 보내는 시점부터 응답을 받는 시점까지 전체 HTTP 호출에 대한 타임아웃을 지정합니다.</li><li><code>[connectTimeoutMillis](https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins/-http-timeout-config/connect-timeout-millis.html)</code>는 서버와 연결을 설정하는 데 필요한 타임아웃을 지정합니다.</li><li><code>[socketTimeoutMillis](https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins/-http-timeout-config/socket-timeout-millis.html)</code>는 서버와 데이터를 교환할 때 두 데이터 패킷 간의 최대 비활성 시간을 위한 타임아웃을 지정합니다.</li></ul><p><code>install</code> 블록 내에서 모든 요청에 대한 타임아웃을 지정할 수 있습니다. 아래 코드 샘플은 <code>requestTimeoutMillis</code>를 사용하여 요청 타임아웃을 설정하는 방법을 보여줍니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpTimeout) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        requestTimeoutMillis </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>특정 요청에 대해서만 타임아웃을 설정해야 하는 경우, <code>[HttpRequestBuilder.timeout](https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins/timeout.html)</code> 속성을 사용하세요:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HttpResponse</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://0.0.0.0:8080/path1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    timeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        requestTimeoutMillis </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>특정 요청에 지정된 타임아웃이 <code>install</code> 블록의 전역 타임아웃을 재정의한다는 점에 유의하세요.</p><p>타임아웃이 발생하면 Ktor는 <code>HttpRequestTimeoutException</code>, <code>ConnectTimeoutException</code>, 또는 <code>SocketTimeoutException</code>을 발생시킵니다.</p><h2 id="limitations" tabindex="-1">제한사항 <a class="header-anchor" href="#limitations" aria-label="Permalink to &quot;제한사항 {id=&quot;limitations&quot;}&quot;">​</a></h2><p><code>HttpTimeout</code>은 특정 <code>[엔진](client-engines.md)</code>에 대해 몇 가지 제한사항이 있습니다. 아래 표는 해당 엔진에서 지원되는 타임아웃을 보여줍니다:</p><table tabindex="0"><thead><tr><th>엔진</th><th>요청 타임아웃</th><th>연결 타임아웃</th><th>소켓 타임아웃</th></tr></thead><tbody><tr><td><code>[Darwin](client-engines.md#darwin)</code></td><td>✅️</td><td>✖️</td><td>✅️</td></tr><tr><td><code>[JavaScript](client-engines.md#js)</code></td><td>✅</td><td>✖️</td><td>✖️</td></tr><tr><td><code>[Curl](client-engines.md#curl)</code></td><td>✅</td><td>✅️</td><td>✖️</td></tr><tr><td><code>[MockEngine](client-testing.md)</code></td><td>✅</td><td>✖️</td><td>✅</td></tr></tbody></table>`,20))])}const b=o(r,[["render",u]]);export{_ as __pageData,b as default};
