import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.Bksy39di.js";const d=JSON.parse('{"title":"Agent 事件","description":"","frontmatter":{},"headers":[],"relativePath":"koog/agent-events.md","filePath":"koog/agent-events.md","lastUpdated":1755146406000}'),t={name:"koog/agent-events.md"};function l(p,s,h,k,r,g){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="agent-事件" tabindex="-1">Agent 事件 <a class="header-anchor" href="#agent-事件" aria-label="Permalink to &quot;Agent 事件&quot;">​</a></h1><p>Agent 事件是作为 Agent 工作流一部分发生的操作或交互。它们包括：</p><ul><li>Agent 生命周期事件</li><li>策略事件</li><li>节点事件</li><li>LLM 调用事件</li><li>工具调用事件</li></ul><h2 id="事件处理程序" tabindex="-1">事件处理程序 <a class="header-anchor" href="#事件处理程序" aria-label="Permalink to &quot;事件处理程序&quot;">​</a></h2><p>您可以通过使用事件处理程序来监控和响应 Agent 工作流期间的特定事件，以实现日志记录、测试、调试和扩展 Agent 行为。</p><p>EventHandler 特性让您可以挂钩到各种 Agent 事件。它作为一种事件委托机制，可以：</p><ul><li>管理 AI Agent 操作的生命周期。</li><li>提供挂钩点，用于监控和响应工作流的不同阶段。</li><li>启用错误处理和恢复。</li><li>促进工具调用跟踪和结果处理。</li></ul><h3 id="安装与配置" tabindex="-1">安装与配置 <a class="header-anchor" href="#安装与配置" aria-label="Permalink to &quot;安装与配置&quot;">​</a></h3><p>EventHandler 特性通过 <code>EventHandler</code> 类集成到 Agent 工作流中，该类提供了一种为不同 Agent 事件注册回调的方式，并且可以作为一项特性安装到 Agent 配置中。有关详情，请参见 <a href="https://api.koog.ai/agents/agents-features/agents-features-event-handler/ai.koog.agents.local.features.eventHandler.feature/-event-handler/index.html" target="_blank" rel="noreferrer">API reference</a>。</p><p>要为 Agent 安装该特性并配置事件处理程序，请执行以下操作：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">handleEvents</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 处理工具调用</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    onToolCall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { eventContext </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Tool called: \${eventContext.tool} with args \${eventContext.toolArgs}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 处理 Agent 完成执行时触发的事件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    onAgentFinished</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { eventContext </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Agent finished with result: \${eventContext.result}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 其他事件处理程序</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>有关事件处理程序配置的更多详情，请参见 <a href="https://api.koog.ai/agents/agents-features/agents-features-event-handler/ai.koog.agents.local.features.eventHandler.feature/-event-handler-config/index.html" target="_blank" rel="noreferrer">API reference</a>。</p><p>您还可以在创建 Agent 时使用 <code>handleEvents</code> 扩展函数来设置事件处理程序。此函数还会安装事件处理程序特性并为 Agent 配置事件处理程序。以下是一个示例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> agent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AIAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    executor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> simpleOllamaAIExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    llmModel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> OllamaModels.Meta.LLAMA_3_2,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    handleEvents</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 处理工具调用</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        onToolCall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { eventContext </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Tool called: \${eventContext.tool} with args \${eventContext.toolArgs}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 处理 Agent 完成执行时触发的事件</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        onAgentFinished</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { eventContext </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Agent finished with result: \${eventContext.result}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 其他事件处理程序</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,14)]))}const o=i(t,[["render",l]]);export{d as __pageData,o as default};
