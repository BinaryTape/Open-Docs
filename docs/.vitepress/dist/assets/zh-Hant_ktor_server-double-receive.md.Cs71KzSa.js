import{_ as v,C as l,c as g,o as E,G as i,ag as d,j as s,w as t,a}from"./chunks/framework.Bksy39di.js";const T=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/ktor/server-double-receive.md","filePath":"zh-Hant/ktor/server-double-receive.md","lastUpdated":1755457140000}'),b={name:"zh-Hant/ktor/server-double-receive.md"};function y(m,e,_,f,F,C){const k=l("TopicTitle"),h=l("primary-label"),r=l("Links"),c=l("tldr"),n=l("code-block"),o=l("TabItem"),p=l("Tabs"),u=l("list");return E(),g("div",null,[i(k,{labelRef:"server-plugin",title:"DoubleReceive"}),i(h,{ref:"server-plugin"},null,512),i(c,null,{default:t(()=>[e[3]||(e[3]=s("p",null,[s("b",null,"所需依賴項"),a("："),s("code",null,"io.ktor:ktor-server-double-receive")],-1)),e[4]||(e[4]=s("p",null,[s("b",null,"程式碼範例"),a("： "),s("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/double-receive"}," double-receive ")],-1)),s("p",null,[s("b",null,[i(r,{href:"/ktor/server-native",summary:"Ktor 支援 Kotlin/Native，並允許您在沒有額外執行環境或虛擬機器下執行伺服器。"},{default:t(()=>e[0]||(e[0]=[a("原生伺服器")])),_:1}),e[1]||(e[1]=a("支援"))]),e[2]||(e[2]=a("：✅ "))])]),_:1}),e[9]||(e[9]=d('<p><a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-double-receive/io.ktor.server.plugins.doublereceive/-double-receive.html" target="_blank" rel="noreferrer">DoubleReceive</a> 外掛提供多次<a href="./server-requests#body_contents">接收請求主體</a>的能力，且不會拋出 <code>RequestAlreadyConsumedException</code> 例外。如果某個<a href="./server-plugins">外掛</a>已經消耗了請求主體，導致您無法在路由處理器中接收它，這可能就很有用。例如，您可以使用 <code>DoubleReceive</code> 透過 <a href="./server-call-logging">CallLogging</a> 外掛來記錄請求主體，然後在 <code>post</code> <a href="./server-routing#define_route">路由處理器</a>內部再次接收主體。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p><code>DoubleReceive</code> 外掛使用實驗性 API，預計在未來的更新中會演進，並可能導致破壞性變更。</p></div><h2 id="add_dependencies" tabindex="-1">新增依賴項 <a class="header-anchor" href="#add_dependencies" aria-label="Permalink to &quot;新增依賴項 {id=&quot;add_dependencies&quot;}&quot;">​</a></h2><p> 若要使用 `DoubleReceive`，您需要在建置腳本中納入 `ktor-server-double-receive` artifact： </p>',4)),i(p,{group:"languages"},{default:t(()=>[i(o,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:t(()=>[i(n,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-server-double-receive:$ktor_version")'})]),_:1}),i(o,{title:"Gradle (Groovy)","group-key":"groovy"},{default:t(()=>[i(n,{lang:"Groovy",code:'            implementation "io.ktor:ktor-server-double-receive:$ktor_version"'})]),_:1}),i(o,{title:"Maven","group-key":"maven"},{default:t(()=>[i(n,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-server-double-receive-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),e[10]||(e[10]=s("h2",{id:"install_plugin",tabindex:"-1"},[a("安裝 DoubleReceive "),s("a",{class:"header-anchor",href:"#install_plugin","aria-label":'Permalink to "安裝 DoubleReceive {id="install_plugin"}"'},"​")],-1)),s("p",null,[e[6]||(e[6]=a(" 若要將 `DoubleReceive` 外掛[安裝](#install)到應用程式， 請將其傳遞給指定[模組](")),i(r,{href:"/ktor/server-modules",summary:"模組允許您透過分組路由來組織應用程式。"},{default:t(()=>e[5]||(e[5]=[a("模組")])),_:1}),e[7]||(e[7]=a(")中的 `install` 函式。 下方的程式碼片段展示了如何安裝 `DoubleReceive` ... "))]),i(u,null,{default:t(()=>e[8]||(e[8]=[s("li",null," ... 在 `embeddedServer` 函式呼叫內。 ",-1),s("li",null," ... 在明確定義的 `module` 內，該 `module` 是 `Application` 類別的一個擴充函式。 ",-1)])),_:1}),i(p,null,{default:t(()=>[i(o,{title:"embeddedServer"},{default:t(()=>[i(n,{lang:"kotlin",code:`            import io.ktor.server.engine.*
            import io.ktor.server.netty.*
            import io.ktor.server.application.*
            import io.ktor.server.plugins.doublereceive.*

            fun main() {
                embeddedServer(Netty, port = 8080) {
                    install(DoubleReceive)
                    // ...
                }.start(wait = true)
            }`})]),_:1}),i(o,{title:"module"},{default:t(()=>[i(n,{lang:"kotlin",code:`            import io.ktor.server.application.*
            import io.ktor.server.plugins.doublereceive.*
            // ...
            fun Application.module() {
                install(DoubleReceive)
                // ...
            }`})]),_:1})]),_:1}),e[11]||(e[11]=d(`<p> \`DoubleReceive\` 外掛也可以[安裝](#install-route)到特定的路由。 如果您需要為不同的應用程式資源設定不同的 \`DoubleReceive\` 配置，這可能很有用。 </p><p>安裝 <code>DoubleReceive</code> 後，您可以多次<a href="./server-requests#body_contents">接收請求主體</a>，並且每次呼叫都返回相同的實例。 例如，您可以使用 <a href="./server-call-logging">CallLogging</a> 外掛啟用請求主體的日誌記錄...</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CallLogging) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    level </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Level.TRACE</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { call </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        runBlocking</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;Body: \${call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">receiveText</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">()}&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>... 然後在路由處理器內部再次取得請求主體。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> receivedText </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">receiveText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Text &#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$receivedText</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39; is received&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>您可以在此處找到完整範例：<a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/double-receive" target="_blank" rel="noreferrer">double-receive</a>。</p><h2 id="configure" tabindex="-1">配置 DoubleReceive <a class="header-anchor" href="#configure" aria-label="Permalink to &quot;配置 DoubleReceive {id=&quot;configure&quot;}&quot;">​</a></h2><p>在預設配置下，<code>DoubleReceive</code> 提供將<a href="./server-requests#body_contents">請求主體</a>接收為以下類型的能力：</p><ul><li><code>ByteArray</code></li><li><code>String</code></li><li><code>Parameters</code></li><li>由 <code>ContentNegotiation</code> 外掛使用的<a href="./server-serialization#create_data_class">資料類別</a></li></ul><p>依預設，<code>DoubleReceive</code> 不支援：</p><ul><li>從同一個請求接收不同類型；</li><li>接收<a href="./server-requests#raw">流或通道</a>。</li></ul><p>如果您不需要從同一個請求接收不同類型，或不需要接收流或通道，請將 <code>cacheRawRequest</code> 屬性設定為 <code>false</code>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(DoubleReceive) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    cacheRawRequest </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,13))])}const D=v(b,[["render",y]]);export{T as __pageData,D as default};
