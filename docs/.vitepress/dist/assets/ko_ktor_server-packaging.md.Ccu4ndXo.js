import{_ as u}from"./chunks/ktor_idea_new_project_browser.BM2Qc3X-.js";import{_ as h,C as l,c,o as g,j as i,G as s,ag as r,a as t,w as e}from"./chunks/framework.Bksy39di.js";const F=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ko/ktor/server-packaging.md","filePath":"ko/ktor/server-packaging.md","lastUpdated":1755457140000}'),m={name:"ko/ktor/server-packaging.md"};function E(b,a,_,f,y,v){const d=l("tldr"),n=l("code-block"),o=l("TabItem"),p=l("Tabs"),k=l("snippet");return g(),c("div",null,[a[7]||(a[7]=i("h1",{id:"애플리케이션-배포본-생성",tabindex:"-1"},[t("애플리케이션 배포본 생성 "),i("a",{class:"header-anchor",href:"#애플리케이션-배포본-생성","aria-label":'Permalink to "애플리케이션 배포본 생성"'},"​")],-1)),s(d,null,{default:e(()=>a[0]||(a[0]=[i("p",null,[i("b",null,"코드 예시"),t(": "),i("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/deployment-ktor-plugin"}," deployment-ktor-plugin ")],-1)])),_:1}),a[8]||(a[8]=r(`<p><a href="https://github.com/ktorio/ktor-build-plugins" target="_blank" rel="noreferrer">Ktor Gradle 플러그인</a>은 코드 의존성과 생성된 시작 스크립트를 포함하여 애플리케이션을 패키징하는 기능을 제공하는 Gradle <a href="https://docs.gradle.org/current/userguide/application_plugin.html" target="_blank" rel="noreferrer">Application 플러그인</a>을 자동으로 적용합니다. 이 토픽에서는 Ktor 애플리케이션을 패키징하고 실행하는 방법을 보여드립니다.</p><h2 id="configure-plugin" tabindex="-1">Ktor 플러그인 구성 <a class="header-anchor" href="#configure-plugin" aria-label="Permalink to &quot;Ktor 플러그인 구성 {id=&quot;configure-plugin&quot;}&quot;">​</a></h2><p>애플리케이션 배포본을 생성하려면 먼저 Ktor 플러그인을 적용해야 합니다:</p><ol><li><p><code>build.gradle.kts</code> 파일을 열고 <code>plugins</code> 블록에 플러그인을 추가합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;io.ktor.plugin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) version </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;3.2.3&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><a href="./server-dependencies#create-entry-point">메인 애플리케이션 클래스</a>가 구성되었는지 확인합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    mainClass.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;com.example.ApplicationKt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ol><h2 id="package" tabindex="-1">애플리케이션 패키징 <a class="header-anchor" href="#package" aria-label="Permalink to &quot;애플리케이션 패키징 {id=&quot;package&quot;}&quot;">​</a></h2><p>Application 플러그인은 애플리케이션을 패키징하는 다양한 방법을 제공합니다. 예를 들어, <code>installDist</code> 태스크는 모든 런타임 의존성과 시작 스크립트와 함께 애플리케이션을 설치합니다. 완전한 배포 아카이브를 생성하려면 <code>distZip</code> 및 <code>distTar</code> 태스크를 사용할 수 있습니다.</p><p>이 토픽에서는 <code>installDist</code>를 사용합니다:</p>`,7)),i("ol",null,[a[3]||(a[3]=i("li",null,[i("p",null,"터미널을 엽니다.")],-1)),i("li",null,[a[1]||(a[1]=i("p",null,[t("운영 체제에 따라 다음 방법 중 하나로 "),i("code",null,"installDist"),t(" 태스크를 실행합니다:")],-1)),s(p,{group:"os"},{default:e(()=>[s(o,{title:"Linux/macOS","group-key":"unix"},{default:e(()=>[s(n,{code:"./gradlew installDist"})]),_:1}),s(o,{title:"Windows","group-key":"windows"},{default:e(()=>[s(n,{code:"gradlew.bat installDist"})]),_:1})]),_:1}),a[2]||(a[2]=i("p",null,[t("Application 플러그인은 "),i("code",null,"build/install/<project_name>"),t(" 폴더에 애플리케이션 이미지를 생성합니다.")],-1))])]),a[9]||(a[9]=i("h2",{id:"run",tabindex:"-1"},[t("애플리케이션 실행 "),i("a",{class:"header-anchor",href:"#run","aria-label":'Permalink to "애플리케이션 실행 {id="run"}"'},"​")],-1)),a[10]||(a[10]=i("p",null,[i("a",{href:"#package"},"패키징된 애플리케이션"),t("을 실행하려면:")],-1)),i("ol",null,[a[5]||(a[5]=i("li",null,[i("p",null,[t("터미널에서 "),i("code",null,"build/install/<project_name>/bin"),t(" 폴더로 이동합니다.")])],-1)),i("li",null,[a[4]||(a[4]=i("p",null,[t("운영 체제에 따라 "),i("code",null,"<project_name>"),t(" 또는 "),i("code",null,"<project_name>.bat"),t(" 실행 파일을 실행합니다. 예를 들어:")],-1)),s(k,{id:"run_executable"},{default:e(()=>[s(p,{group:"os"},{default:e(()=>[s(o,{title:"Linux/macOS","group-key":"unix"},{default:e(()=>[s(n,{code:"./ktor-sample"})]),_:1}),s(o,{title:"Windows","group-key":"windows"},{default:e(()=>[s(n,{code:"ktor-sample.bat"})]),_:1})]),_:1})]),_:1})]),a[6]||(a[6]=r('<li><p>다음 메시지가 표시될 때까지 기다립니다:</p><div class="language-Bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[main] INFO  Application - Responding at http://0.0.0.0:8080</span></span></code></pre></div><p>실행 중인 애플리케이션을 보려면 브라우저에서 링크를 엽니다:</p><img src="'+u+'" alt="브라우저의 Ktor 앱" width="430"></li>',1))])])}const T=h(m,[["render",E]]);export{F as __pageData,T as default};
