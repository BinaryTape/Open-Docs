import{_ as A,a as J,b as C,c as H,d as S,e as x,f as P,g as L}from"./chunks/client_get_started_run_output_with_logs.BLNUpoCH.js";import{_ as w}from"./chunks/intellij_idea_rerun_icon.tlG8QH6A.js";import{_ as T,C as e,c as j,o as a,G as n,w as i,j as o,a as t}from"./chunks/framework.Bksy39di.js";const Y=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ja/ktor/client-create-new-application.md","filePath":"ja/ktor/client-create-new-application.md","lastUpdated":1755457140000}'),N={name:"ja/ktor/client-create-new-application.md"};function q(M,l,O,$,G,R){const I=e("show-structure"),b=e("tldr"),v=e("link-summary"),s=e("Links"),f=e("chapter"),r=e("control"),E=e("ui-path"),u=e("step"),g=e("list"),m=e("procedure"),d=e("Path"),p=e("code-block"),K=e("note"),y=e("emphasis"),k=e("tip"),D=e("topic");return a(),j("div",null,[n(D,{"xsi:noNamespaceSchemaLocation":"https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd","xmlns:xsi":"http://www.w3.org/2001/XMLSchema-instance",title:"クライアントアプリケーションの作成",id:"client-create-new-application","help-id":"getting_started_ktor_client;client-getting-started;client-get-started;client-create-a-new-application"},{default:i(()=>[n(I,{for:"chapter",depth:"2"}),n(b,null,{default:i(()=>l[0]||(l[0]=[o("p",null,[o("b",null,"コード例"),t(": "),o("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/tutorial-client-get-started"}," tutorial-client-get-started ")],-1)])),_:1}),n(v,null,{default:i(()=>l[1]||(l[1]=[t(" リクエストを送信し、レスポンスを受信する最初のクライアントアプリケーションを作成します。 ")])),_:1}),o("p",null,[l[7]||(l[7]=t(" Ktorにはマルチプラットフォームの非同期HTTPクライアントが搭載されており、")),n(s,{href:"/ktor/client-requests",summary:"リクエストの作成方法や、リクエストURL、HTTPメソッド、ヘッダー、リクエスト本文など、さまざまなリクエストパラメータの指定方法を学びます。"},{default:i(()=>l[2]||(l[2]=[t("リクエストを行う")])),_:1}),l[8]||(l[8]=t("ことや、")),n(s,{href:"/ktor/client-responses",summary:"レスポンスの受信方法、レスポンス本文の取得方法、レスポンスパラメータの取得方法を学びます。"},{default:i(()=>l[3]||(l[3]=[t("レスポンスを処理する")])),_:1}),l[9]||(l[9]=t("ことができます。また、")),n(s,{href:"/ktor/client-plugins",summary:"ロギング、シリアライゼーション、認証など、共通機能を提供するプラグインについて理解を深めます。"},{default:i(()=>l[4]||(l[4]=[t("プラグイン")])),_:1}),l[10]||(l[10]=t("（例: ")),n(s,{href:"/ktor/client-auth",summary:"Authプラグインは、クライアントアプリケーションの認証と認可を処理します。"},{default:i(()=>l[5]||(l[5]=[t("認証")])),_:1}),l[11]||(l[11]=t("、")),n(s,{href:"/ktor/client-serialization",summary:"ContentNegotiationプラグインには、クライアントとサーバー間のメディアタイプのネゴシエート、およびリクエストの送信時とレスポンスの受信時に特定の形式でコンテンツをシリアライズ/デシリアライズするという2つの主要な目的があります。"},{default:i(()=>l[6]||(l[6]=[t("JSONシリアライゼーション")])),_:1}),l[12]||(l[12]=t("）で機能を拡張することも可能です。 "))]),l[143]||(l[143]=o("p",null," このチュートリアルでは、リクエストを送信してレスポンスを出力する最初のKtorクライアントアプリケーションを作成する方法を示します。 ",-1)),n(f,{title:"前提条件",id:"prerequisites"},{default:i(()=>l[13]||(l[13]=[o("p",null,[t(" このチュートリアルを開始する前に、 "),o("a",{href:"https://www.jetbrains.com/help/idea/installation-guide.html"},"IntelliJ IDEA Community または Ultimate をインストールしてください"),t("。 ")],-1)])),_:1}),n(f,{title:"新しいプロジェクトの作成",id:"new-project"},{default:i(()=>[o("p",null,[l[15]||(l[15]=t(" 既存のプロジェクトでKtorクライアントを手動で")),n(s,{href:"/ktor/client-create-and-configure",summary:"Ktorクライアントの作成と構成方法について学びます。"},{default:i(()=>l[14]||(l[14]=[t("作成および構成")])),_:1}),l[16]||(l[16]=t("することもできますが、IntelliJ IDEAにバンドルされているKotlinプラグインを使用して新規プロジェクトを生成するのが、ゼロから始める便利な方法です。 "))]),l[45]||(l[45]=o("p",null,[t(" 新しいKotlinプロジェクトを作成するには、 "),o("a",{href:"https://www.jetbrains.com/help/idea/run-for-the-first-time.html"},"IntelliJ IDEA を開き"),t("、以下の手順に従ってください。 ")],-1)),n(m,null,{default:i(()=>[n(u,null,{default:i(()=>[o("p",null,[l[18]||(l[18]=t(" ようこそ画面で、")),n(r,null,{default:i(()=>l[17]||(l[17]=[t("新規プロジェクト")])),_:1}),l[19]||(l[19]=t("をクリックします。 "))]),o("p",null,[l[21]||(l[21]=t(" または、メインメニューから")),n(E,null,{default:i(()=>l[20]||(l[20]=[t("ファイル | 新規 | プロジェクト")])),_:1}),l[22]||(l[22]=t("を選択します。 "))])]),_:1}),n(u,null,{default:i(()=>[o("p",null,[n(r,null,{default:i(()=>l[23]||(l[23]=[t("新規プロジェクト")])),_:1}),l[25]||(l[25]=t("ウィザードで、左側のリストから")),n(r,null,{default:i(()=>l[24]||(l[24]=[t("Kotlin")])),_:1}),l[26]||(l[26]=t("を選択します。 "))])]),_:1}),n(u,null,{default:i(()=>[l[41]||(l[41]=o("p",null," 右側のペインで、以下の設定を指定します。 ",-1)),l[42]||(l[42]=o("img",{src:A,alt:"IntelliJ IDEAの新規Kotlinプロジェクトウィンドウ","border-effect":"rounded",width:"706"},null,-1)),n(g,{id:"kotlin_app_settings"},{default:i(()=>[o("li",null,[o("p",null,[n(r,null,{default:i(()=>l[27]||(l[27]=[t("名前")])),_:1}),l[28]||(l[28]=t(" : プロジェクト名を指定します。 "))])]),o("li",null,[o("p",null,[n(r,null,{default:i(()=>l[29]||(l[29]=[t("場所")])),_:1}),l[30]||(l[30]=t(" : プロジェクトのディレクトリを指定します。 "))])]),o("li",null,[o("p",null,[n(r,null,{default:i(()=>l[31]||(l[31]=[t("ビルドシステム")])),_:1}),l[33]||(l[33]=t(" : ")),n(r,null,{default:i(()=>l[32]||(l[32]=[t("Gradle")])),_:1}),l[34]||(l[34]=t("が選択されていることを確認します。 "))])]),o("li",null,[o("p",null,[n(r,null,{default:i(()=>l[35]||(l[35]=[t("Gradle DSL")])),_:1}),l[37]||(l[37]=t(" : ")),n(r,null,{default:i(()=>l[36]||(l[36]=[t("Kotlin")])),_:1}),l[38]||(l[38]=t("を選択します。 "))])]),o("li",null,[o("p",null,[n(r,null,{default:i(()=>l[39]||(l[39]=[t("サンプルコードを追加")])),_:1}),l[40]||(l[40]=t(" : 生成されたプロジェクトにサンプルコードを含めるには、このオプションを選択します。 "))])])]),_:1})]),_:1}),n(u,null,{default:i(()=>[o("p",null,[n(r,null,{default:i(()=>l[43]||(l[43]=[t("作成")])),_:1}),l[44]||(l[44]=t("をクリックし、IntelliJ IDEAがプロジェクトを生成して依存関係をインストールするまで待ちます。 "))])]),_:1})]),_:1})]),_:1}),n(f,{title:"依存関係の追加",id:"add-dependencies"},{default:i(()=>[l[62]||(l[62]=o("p",null," Ktorクライアントに必要な依存関係を追加しましょう。 ",-1)),n(m,null,{default:i(()=>[n(u,null,{default:i(()=>[o("p",null,[n(d,null,{default:i(()=>l[46]||(l[46]=[t("gradle.properties")])),_:1}),l[47]||(l[47]=t("ファイルを開き、Ktorのバージョンを指定するために次の行を追加します。 "))]),n(p,{lang:"kotlin",code:"                    ktor_version=3.2.3"}),n(K,{id:"eap-note"},{default:i(()=>l[48]||(l[48]=[o("p",null,[t(" KtorのEAPバージョンを使用するには、"),o("a",{href:"#repositories"},"Spaceリポジトリ"),t("を追加する必要があります。 ")],-1)])),_:1})]),_:1}),n(u,null,{default:i(()=>[o("p",null,[n(d,null,{default:i(()=>l[49]||(l[49]=[t("build.gradle.kts")])),_:1}),l[50]||(l[50]=t("ファイルを開き、次のアーティファクトを依存関係ブロックに追加します。 "))]),n(p,{lang:"kotlin",code:`val ktor_version: String by project

dependencies {
    implementation("io.ktor:ktor-client-core:$ktor_version")
    implementation("io.ktor:ktor-client-cio:$ktor_version")
}`}),n(g,null,{default:i(()=>[l[55]||(l[55]=o("li",null,[o("code",null,"ktor-client-core"),t("は、主要なクライアント機能を提供するコア依存関係です。 ")],-1)),o("li",null,[l[52]||(l[52]=o("code",null,"ktor-client-cio",-1)),l[53]||(l[53]=t("は、ネットワークリクエストを処理する")),n(s,{href:"/ktor/client-engines",summary:"ネットワークリクエストを処理するエンジンについて学びます。"},{default:i(()=>l[51]||(l[51]=[t("エンジン")])),_:1}),l[54]||(l[54]=t("の依存関係です。 "))])]),_:1})]),_:1}),n(u,null,{default:i(()=>[o("p",null,[l[58]||(l[58]=t(" 新しく追加された依存関係をインストールするには、")),n(d,null,{default:i(()=>l[56]||(l[56]=[t("build.gradle.kts")])),_:1}),l[59]||(l[59]=t("ファイルの右上にある")),n(r,null,{default:i(()=>l[57]||(l[57]=[t("Gradleの変更を読み込む")])),_:1}),l[60]||(l[60]=t("アイコンをクリックします。 "))]),l[61]||(l[61]=o("img",{src:J,alt:"Gradleの変更を読み込む",width:"706"},null,-1))]),_:1})]),_:1})]),_:1}),n(f,{title:"クライアントの作成",id:"create-client"},{default:i(()=>[o("p",null,[l[64]||(l[64]=t(" クライアントの実装を追加するには、")),n(d,null,{default:i(()=>l[63]||(l[63]=[t("src/main/kotlin")])),_:1}),l[65]||(l[65]=t("に移動し、以下の手順に従ってください。 "))]),n(m,null,{default:i(()=>[n(u,null,{default:i(()=>[o("p",null,[n(d,null,{default:i(()=>l[66]||(l[66]=[t("Main.kt")])),_:1}),l[67]||(l[67]=t("ファイルを開き、既存のコードを次の実装に置き換えます。 "))]),n(p,{lang:"kotlin",code:`                    import io.ktor.client.*
                    import io.ktor.client.engine.cio.*

                    fun main() {
                        val client = HttpClient(CIO)
                    }`}),l[68]||(l[68]=o("p",null,[t(" Ktorでは、クライアントは"),o("a",{href:"https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client/-http-client/index.html"},"HttpClient"),t("クラスで表されます。 ")],-1))]),_:1}),n(u,null,{default:i(()=>[o("p",null,[l[71]||(l[71]=o("a",{href:"https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.request/get.html"},[o("code",null,"HttpClient.get()")],-1)),l[72]||(l[72]=t("メソッドを使用して")),n(s,{href:"/ktor/client-requests",summary:"リクエストの作成方法や、リクエストURL、HTTPメソッド、ヘッダー、リクエスト本文など、さまざまなリクエストパラメータの指定方法を学びます。"},{default:i(()=>l[69]||(l[69]=[t("GETリクエスト")])),_:1}),l[73]||(l[73]=t("を行います。 ")),n(s,{href:"/ktor/client-responses",summary:"レスポンスの受信方法、レスポンス本文の取得方法、レスポンスパラメータの取得方法を学びます。"},{default:i(()=>l[70]||(l[70]=[t("レスポンス")])),_:1}),l[74]||(l[74]=t("は")),l[75]||(l[75]=o("code",null,"HttpResponse",-1)),l[76]||(l[76]=t("クラスオブジェクトとして受信されます。 "))]),n(p,{lang:"kotlin",code:`                    import io.ktor.client.*
                    import io.ktor.client.engine.cio.*
                    import io.ktor.client.request.*
                    import io.ktor.client.statement.*

                    fun main() {
                        val client = HttpClient(CIO)
                        val response: HttpResponse = client.get("https://ktor.io/")
                    }`}),o("p",null,[l[78]||(l[78]=t(" 上記のコードを追加すると、IDEは")),l[79]||(l[79]=o("code",null,"get()",-1)),l[80]||(l[80]=t("関数に対して次のエラーを表示します。")),n(y,null,{default:i(()=>l[77]||(l[77]=[t("'get' 停止関数はコルーチンまたは別の停止関数からのみ呼び出す必要があります")])),_:1}),l[81]||(l[81]=t("。 "))]),l[83]||(l[83]=o("img",{src:C,alt:"停止関数のエラー",width:"706"},null,-1)),l[84]||(l[84]=o("p",null,[t(" これを修正するには、"),o("code",null,"main()"),t("関数を停止関数にする必要があります。 ")],-1)),n(k,null,{default:i(()=>l[82]||(l[82]=[o("code",null,"suspend",-1),t("関数の呼び出しについて詳しくは、"),o("a",{href:"https://kotlinlang.org/docs/coroutines-basics.html"},"コルーチンの基本",-1),t("を参照してください。 ")])),_:1})]),_:1}),n(u,null,{default:i(()=>[o("p",null,[l[86]||(l[86]=t(" IntelliJ IDEAで、定義の横にある赤い電球をクリックし、")),n(r,null,{default:i(()=>l[85]||(l[85]=[t("メインを停止にする")])),_:1}),l[87]||(l[87]=t("を選択します。 "))]),l[88]||(l[88]=o("img",{src:H,alt:"メインを停止にする",width:"706"},null,-1))]),_:1}),n(u,null,{default:i(()=>[o("p",null,[l[90]||(l[90]=o("code",null,"println()",-1)),l[91]||(l[91]=t("関数を使用してサーバーが返した")),l[92]||(l[92]=o("a",{href:"#status"},"ステータスコード",-1)),l[93]||(l[93]=t("を出力し、")),l[94]||(l[94]=o("code",null,"close()",-1)),l[95]||(l[95]=t("関数を使用してストリームを閉じ、それに関連付けられたリソースを解放します。 ")),n(d,null,{default:i(()=>l[89]||(l[89]=[t("Main.kt")])),_:1}),l[96]||(l[96]=t("ファイルは次のようになります。 "))]),n(p,{lang:"kotlin",code:`import io.ktor.client.*
import io.ktor.client.engine.cio.*
import io.ktor.client.request.*
import io.ktor.client.statement.*

suspend fun main() {
    val client = HttpClient(CIO)
    val response: HttpResponse = client.get("https://ktor.io/")
    println(response.status)
    client.close()
}`})]),_:1})]),_:1})]),_:1}),n(f,{title:"アプリケーションの実行",id:"make-request"},{default:i(()=>[o("p",null,[l[98]||(l[98]=t(" アプリケーションを実行するには、")),n(d,null,{default:i(()=>l[97]||(l[97]=[t("Main.kt")])),_:1}),l[99]||(l[99]=t("ファイルに移動し、以下の手順に従ってください。 "))]),n(m,null,{default:i(()=>[n(u,null,{default:i(()=>[o("p",null,[l[101]||(l[101]=t(" IntelliJ IDEAで、")),l[102]||(l[102]=o("code",null,"main()",-1)),l[103]||(l[103]=t("関数の横にあるガターアイコンをクリックし、")),n(r,null,{default:i(()=>l[100]||(l[100]=[t("「MainKt」を実行")])),_:1}),l[104]||(l[104]=t("を選択します。 "))]),l[105]||(l[105]=o("img",{src:S,alt:"アプリケーションの実行",width:"706"},null,-1))]),_:1}),n(u,null,{default:i(()=>l[106]||(l[106]=[t(" IntelliJ IDEAがアプリケーションを実行するまで待ちます。 ")])),_:1}),n(u,null,{default:i(()=>[o("p",null,[l[108]||(l[108]=t(" IDEの下部にある")),n(r,null,{default:i(()=>l[107]||(l[107]=[t("実行")])),_:1}),l[109]||(l[109]=t("ペインに出力が表示されます。 "))]),l[110]||(l[110]=o("img",{src:x,alt:"サーバーレスポンス",width:"706"},null,-1)),l[111]||(l[111]=o("p",null,[t(" サーバーは"),o("code",null,"200 OK"),t("メッセージで応答しますが、SLF4Jが"),o("code",null,"StaticLoggerBinder"),t("クラスを見つけられず、デフォルトで何もしない（NOP）ロガー実装になることを示すエラーメッセージも表示されます。これは実質的にロギングが無効になっていることを意味します。 ")],-1)),l[112]||(l[112]=o("p",null,[t(" これで動作するクライアントアプリケーションが完成しました。ただし、この警告を修正し、ロギングを使用してHTTP呼び出しをデバッグできるようにするには、"),o("a",{href:"#enable-logging"},"追加の手順"),t("が必要です。 ")],-1))]),_:1})]),_:1})]),_:1}),n(f,{title:"ロギングの有効化",id:"enable-logging"},{default:i(()=>[l[139]||(l[139]=o("p",null,[t(" KtorはJVM上のロギングにSLF4J抽象化レイヤーを使用するため、ロギングを有効にするには、"),o("a",{href:"#jvm"},"Logback"),t("のようなロギングフレームワークを提供する必要があります。 ")],-1)),n(m,{id:"enable-logging-procedure"},{default:i(()=>[n(u,null,{default:i(()=>[o("p",null,[n(d,null,{default:i(()=>l[113]||(l[113]=[t("gradle.properties")])),_:1}),l[114]||(l[114]=t("ファイルで、ロギングフレームワークのバージョンを指定します。 "))]),n(p,{lang:"kotlin",code:"                    logback_version=1.5.6"})]),_:1}),n(u,null,{default:i(()=>[o("p",null,[n(d,null,{default:i(()=>l[115]||(l[115]=[t("build.gradle.kts")])),_:1}),l[116]||(l[116]=t("ファイルを開き、次のアーティファクトを依存関係ブロックに追加します。 "))]),n(p,{lang:"kotlin",code:`                    //...
                    val logback_version: String by project

                    dependencies {
                        //...
                        implementation("ch.qos.logback:logback-classic:$logback_version")
                    }`})]),_:1}),n(u,null,{default:i(()=>[l[118]||(l[118]=t(" 新しく追加された依存関係をインストールするには、")),n(r,null,{default:i(()=>l[117]||(l[117]=[t("Gradleの変更を読み込む")])),_:1}),l[119]||(l[119]=t("アイコンをクリックします。 "))]),_:1}),n(u,null,{default:i(()=>l[120]||(l[120]=[o("p",null,[t(" IntelliJ IDEAで、再実行ボタン（"),o("img",{src:w,style:{},height:"16",width:"16",alt:"intelliJ IDEA rerun icon"}),t("）をクリックしてアプリケーションを再起動します。 ")],-1)])),_:1}),n(u,null,{default:i(()=>[o("p",null,[l[122]||(l[122]=t(" エラーは表示されなくなりますが、IDEの下部にある")),n(r,null,{default:i(()=>l[121]||(l[121]=[t("実行")])),_:1}),l[123]||(l[123]=t("ペインには同じ")),l[124]||(l[124]=o("code",null,"200 OK",-1)),l[125]||(l[125]=t("メッセージが表示されます。 "))]),l[126]||(l[126]=o("img",{src:P,alt:"サーバーレスポンス",width:"706"},null,-1)),l[127]||(l[127]=o("p",null," これでロギングが有効になりました。ログを表示するには、ロギング設定を追加する必要があります。 ",-1))]),_:1}),n(u,null,{default:i(()=>[o("p",null,[n(d,null,{default:i(()=>l[128]||(l[128]=[t("src/main/resources")])),_:1}),l[130]||(l[130]=t("に移動し、次の実装で新しい")),n(d,null,{default:i(()=>l[129]||(l[129]=[t("logback.xml")])),_:1}),l[131]||(l[131]=t("ファイルを作成します。 "))]),n(p,{lang:"xml","ignore-vars":"true",code:`                    <configuration>
                        <appender name="APPENDER" class="ch.qos.logback.core.ConsoleAppender">
                            <encoder>
                                <pattern>%d{YYYY-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
                            </encoder>
                        </appender>
                        <root level="trace">
                            undefined
                        </root>
                    </configuration>`})]),_:1}),n(u,null,{default:i(()=>l[132]||(l[132]=[o("p",null,[t(" IntelliJ IDEAで、再実行ボタン（"),o("img",{src:w,style:{},height:"16",width:"16",alt:"intelliJ IDEA rerun icon"}),t("）をクリックしてアプリケーションを再起動します。 ")],-1)])),_:1}),n(u,null,{default:i(()=>[o("p",null,[n(r,null,{default:i(()=>l[133]||(l[133]=[t("実行")])),_:1}),l[134]||(l[134]=t("ペイン内の出力されたレスポンスの上にトレースログが表示されるはずです。 "))]),l[135]||(l[135]=o("img",{src:L,alt:"サーバーレスポンス",width:"706"},null,-1))]),_:1})]),_:1}),n(k,null,{default:i(()=>[l[137]||(l[137]=t(" Ktorは、")),n(s,{href:"/ktor/client-logging",summary:"必要な依存関係: io.ktor:ktor-client-logging コード例: tutorial-client-get-started"},{default:i(()=>l[136]||(l[136]=[t("Logging")])),_:1}),l[138]||(l[138]=t("プラグインを介してHTTP呼び出しのログを追加するシンプルで簡単な方法を提供します。一方、設定ファイルを追加することで、複雑なアプリケーションでのロギング動作を細かく調整できます。 "))]),_:1})]),_:1}),n(f,{title:"次のステップ",id:"next-steps"},{default:i(()=>[o("p",null,[l[141]||(l[141]=t(" この構成をよりよく理解し拡張するには、")),n(s,{href:"/ktor/client-create-and-configure",summary:"Ktorクライアントの作成と構成方法について学びます。"},{default:i(()=>l[140]||(l[140]=[t("Ktorクライアントの作成と構成")])),_:1}),l[142]||(l[142]=t("方法を調べてみてください。 "))])]),_:1})]),_:1})])}const F=T(N,[["render",q]]);export{Y as __pageData,F as default};
