import{_ as s,c as i,o as e,ag as t}from"./chunks/framework.Bksy39di.js";const c=JSON.parse('{"title":"複数ラウンド処理","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/ksp-multi-round.md","filePath":"ja/kotlin/ksp-multi-round.md","lastUpdated":1754307826000}'),l={name:"ja/kotlin/ksp-multi-round.md"};function n(h,a,r,o,p,d){return e(),i("div",null,a[0]||(a[0]=[t(`<h1 id="複数ラウンド処理" tabindex="-1">複数ラウンド処理 <a class="header-anchor" href="#複数ラウンド処理" aria-label="Permalink to &quot;複数ラウンド処理&quot;">​</a></h1><p>KSPは_複数ラウンド処理_、つまり複数ラウンドにわたるファイルの処理をサポートしています。これは、後続のラウンドが前のラウンドからの出力を追加の入力として使用することを意味します。</p><h2 id="プロセッサへの変更点" tabindex="-1">プロセッサへの変更点 <a class="header-anchor" href="#プロセッサへの変更点" aria-label="Permalink to &quot;プロセッサへの変更点&quot;">​</a></h2><p>複数ラウンド処理を使用するには、<code>SymbolProcessor.process()</code> 関数が無効なシンボルに対して遅延シンボルのリスト (<code>List&lt;KSAnnotated&gt;</code>) を返す必要があります。<code>KSAnnotated.validate()</code> を使用して、次のラウンドに遅延させる無効なシンボルをフィルタリングします。</p><p>次のサンプルコードは、検証チェックを使用して無効なシンボルを遅延させる方法を示しています。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> process</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(resolver: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Resolver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KSAnnotated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> symbols </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> resolver.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getSymbolsWithAnnotation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;com.example.annotation.Builder&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> symbols.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">validate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    symbols</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> KSClassDeclaration </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">validate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">accept</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BuilderVisitor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), Unit) }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="複数ラウンドの動作" tabindex="-1">複数ラウンドの動作 <a class="header-anchor" href="#複数ラウンドの動作" aria-label="Permalink to &quot;複数ラウンドの動作&quot;">​</a></h2><h3 id="シンボルを次のラウンドに遅延させる" tabindex="-1">シンボルを次のラウンドに遅延させる <a class="header-anchor" href="#シンボルを次のラウンドに遅延させる" aria-label="Permalink to &quot;シンボルを次のラウンドに遅延させる&quot;">​</a></h3><p>プロセッサは、特定のシンボルの処理を次のラウンドに遅延させることができます。シンボルが遅延されると、プロセッサは他のプロセッサが追加情報を提供するのを待機します。必要に応じて、何ラウンドでもシンボルを遅延させ続けることができます。他のプロセッサが必要な情報を提供すると、プロセッサは遅延されたシンボルを処理できるようになります。プロセッサは、必要な情報が不足している無効なシンボルのみを遅延させるべきです。したがって、プロセッサはクラスパスからのシンボルを<strong>遅延させるべきではありません</strong>。KSPは、ソースコードではない遅延されたシンボルもフィルタリングします。</p><p>例として、アノテーション付きクラスのビルダーを作成するプロセッサは、そのコンストラクタのすべてのパラメータ型が有効であること（具体的な型に解決されていること）を要求する場合があります。最初のラウンドでは、パラメータ型の1つが解決不可能です。その後、2番目のラウンドで、最初のラウンドで生成されたファイルのために解決可能になります。</p><h3 id="シンボルの検証" tabindex="-1">シンボルの検証 <a class="header-anchor" href="#シンボルの検証" aria-label="Permalink to &quot;シンボルの検証&quot;">​</a></h3><p>シンボルを遅延させるかどうかを決定する便利な方法は、検証によるものです。プロセッサは、シンボルを適切に処理するためにどの情報が必要かを知っている必要があります。検証には通常、コストのかかる解決（resolution）が必要となるため、必要なものだけをチェックすることを推奨します。前の例を続けると、ビルダープロセッサにとって理想的な検証は、アノテーション付きシンボルのコンストラクタのすべての解決済みパラメータ型が <code>isError == false</code> を含むかどうかだけをチェックします。</p><p>KSPはデフォルトの検証ユーティリティを提供します。詳細については、<a href="#advanced">高度な設定</a>セクションを参照してください。</p><h3 id="終了条件" tabindex="-1">終了条件 <a class="header-anchor" href="#終了条件" aria-label="Permalink to &quot;終了条件&quot;">​</a></h3><p>複数ラウンド処理は、1回の完全な処理ラウンドで新しいファイルが生成されなかったときに終了します。終了条件が満たされたときに未処理の遅延シンボルがまだ存在する場合、KSPは未処理の遅延シンボルを持つ各プロセッサに対してエラーメッセージをログに記録します。</p><h3 id="各ラウンドでアクセス可能なファイル" tabindex="-1">各ラウンドでアクセス可能なファイル <a class="header-anchor" href="#各ラウンドでアクセス可能なファイル" aria-label="Permalink to &quot;各ラウンドでアクセス可能なファイル&quot;">​</a></h3><p>新規生成されたファイルと既存のファイルの両方が <code>Resolver</code> を介してアクセス可能です。KSPはファイルにアクセスするための2つのAPIを提供します。<code>Resolver.getAllFiles()</code> と <code>Resolver.getNewFiles()</code> です。<code>getAllFiles()</code> は既存のファイルと新規生成されたファイルの両方を組み合わせたリストを返し、一方 <code>getNewFiles()</code> は新規生成されたファイルのみを返します。</p><h3 id="getsymbolsannotatedwith-への変更点" tabindex="-1"><code>getSymbolsAnnotatedWith()</code> への変更点 <a class="header-anchor" href="#getsymbolsannotatedwith-への変更点" aria-label="Permalink to &quot;\`getSymbolsAnnotatedWith()\` への変更点&quot;">​</a></h3><p>シンボルの不要な再処理を避けるため、<code>getSymbolsAnnotatedWith()</code> は、新しく生成されたファイル内で見つかったシンボルと、前回のラウンドで遅延されたシンボルからのシンボルのみを返します。</p><h3 id="プロセッサのインスタンス化" tabindex="-1">プロセッサのインスタンス化 <a class="header-anchor" href="#プロセッサのインスタンス化" aria-label="Permalink to &quot;プロセッサのインスタンス化&quot;">​</a></h3><p>プロセッサのインスタンスは一度だけ作成されます。これは、後続のラウンドで使用するために情報をプロセッサオブジェクトに保存できることを意味します。</p><h3 id="ラウンド間で一貫した情報" tabindex="-1">ラウンド間で一貫した情報 <a class="header-anchor" href="#ラウンド間で一貫した情報" aria-label="Permalink to &quot;ラウンド間で一貫した情報&quot;">​</a></h3><p>すべてのKSPシンボルは複数ラウンド間で再利用できません。なぜなら、解決結果は前のラウンドで生成されたものに基づいて変化する可能性があるためです。しかし、KSPは既存のコードの変更を許可しないため、シンボル名の文字列値などの一部の情報は、引き続き再利用可能です。要約すると、プロセッサは以前のラウンドからの情報を保存できますが、この情報が将来のラウンドで無効になる可能性があることを念頭に置く必要があります。</p><h3 id="エラーと例外の処理" tabindex="-1">エラーと例外の処理 <a class="header-anchor" href="#エラーと例外の処理" aria-label="Permalink to &quot;エラーと例外の処理&quot;">​</a></h3><p>エラー（プロセッサが <code>KSPLogger.error()</code> を呼び出すことによって定義されるもの）または例外が発生した場合、現在のラウンドが完了した後、処理は停止します。すべてのプロセッサは <code>onError()</code> メソッドを呼び出し、<code>finish()</code> メソッドは呼び出しません。</p><p>エラーが発生した場合でも、そのラウンドでは他のプロセッサは通常通り処理を続行します。これは、エラー処理がそのラウンドの処理が完了した後に発生することを意味します。</p><p>例外が発生した場合、KSPは、KSPからの例外とプロセッサからの例外を区別しようとします。例外は即座に処理の終了を引き起こし、KSPLoggerにエラーとしてログ記録されます。KSPからの例外は、さらなる調査のためにKSP開発者に報告されるべきです。例外またはエラーが発生したラウンドの最後に、すべてのプロセッサは <code>onError()</code> 関数を呼び出して、独自のエラー処理を行います。</p><p>KSPは、<code>SymbolProcessor</code> インターフェースの一部として、<code>onError()</code> のデフォルトのno-op（何もしない）実装を提供します。このメソッドをオーバーライドして、独自のエラー処理ロジックを提供できます。</p><h2 id="高度な設定" tabindex="-1">高度な設定 <a class="header-anchor" href="#高度な設定" aria-label="Permalink to &quot;高度な設定&quot;">​</a></h2><h3 id="検証のデフォルト動作" tabindex="-1">検証のデフォルト動作 <a class="header-anchor" href="#検証のデフォルト動作" aria-label="Permalink to &quot;検証のデフォルト動作&quot;">​</a></h3><p>KSPが提供するデフォルトの検証ロジックは、検証対象のシンボルの囲むスコープ内にある、直接到達可能なすべてのシンボルを検証します。デフォルトの検証は、囲まれたスコープ内の参照が具体的な型に解決可能かどうかをチェックしますが、参照されている型に再帰的に入り込んで検証を行うことはありません。</p><h3 id="独自の検証ロジックを記述する" tabindex="-1">独自の検証ロジックを記述する <a class="header-anchor" href="#独自の検証ロジックを記述する" aria-label="Permalink to &quot;独自の検証ロジックを記述する&quot;">​</a></h3><p>デフォルトの検証動作は、すべてのケースに適しているとは限りません。<code>KSValidateVisitor</code> を参照し、カスタムの <code>predicate</code> ラムダを提供することで独自の検証ロジックを記述できます。このラムダは <code>KSValidateVisitor</code> によって、チェックする必要があるシンボルをフィルタリングするために使用されます。</p>`,33)]))}const E=s(l,[["render",n]]);export{c as __pageData,E as default};
