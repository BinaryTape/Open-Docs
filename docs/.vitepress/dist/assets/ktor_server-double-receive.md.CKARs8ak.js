import{_ as v,C as n,c as g,o as E,G as s,ag as d,j as i,w as t,a as l}from"./chunks/framework.Bksy39di.js";const T=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ktor/server-double-receive.md","filePath":"ktor/server-double-receive.md","lastUpdated":1755457140000}'),b={name:"ktor/server-double-receive.md"};function y(m,e,f,_,F,C){const k=n("TopicTitle"),u=n("primary-label"),r=n("Links"),h=n("tldr"),a=n("code-block"),o=n("TabItem"),p=n("Tabs"),c=n("list");return E(),g("div",null,[s(k,{labelRef:"server-plugin",title:"DoubleReceive"}),s(u,{ref:"server-plugin"},null,512),s(h,null,{default:t(()=>[e[3]||(e[3]=i("p",null,[i("b",null,"所需依赖项"),l(": "),i("code",null,"<code>io.ktor:ktor-server-double-receive</code>")],-1)),e[4]||(e[4]=i("p",null,[i("b",null,"代码示例"),l(": "),i("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/double-receive"}," double-receive ")],-1)),i("p",null,[i("b",null,[s(r,{href:"/ktor/server-native",summary:"Ktor 支持 Kotlin/Native，无需额外的运行时或虚拟机即可运行服务器。"},{default:t(()=>e[0]||(e[0]=[l("原生服务器")])),_:1}),e[1]||(e[1]=l("支持"))]),e[2]||(e[2]=l(": ✅ "))])]),_:1}),e[17]||(e[17]=d('<p><a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-double-receive/io.ktor.server.plugins.doublereceive/-double-receive.html" target="_blank" rel="noreferrer"><code>DoubleReceive</code></a> 插件提供了多次<a href="./server-requests#body_contents">接收请求体</a>的能力，且不会抛出 <code>RequestAlreadyConsumedException</code> 异常。如果某个<a href="./server-plugins">插件</a>已经消费了请求体，导致你无法在路由处理函数内部接收它，那么此功能会很有用。例如，你可以使用 <code>DoubleReceive</code> 通过 <a href="./server-call-logging">CallLogging</a> 插件来记录请求体日志，然后再次在 <code>post</code> <a href="./server-routing#define_route">路由处理函数</a>内部接收请求体。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p><code>DoubleReceive</code> 插件使用了一个实验性的 API，预计在即将到来的更新中会有所演进，并可能包含破坏性变更。</p></div><h2 id="add_dependencies" tabindex="-1">添加依赖项 <a class="header-anchor" href="#add_dependencies" aria-label="Permalink to &quot;添加依赖项 {id=&quot;add_dependencies&quot;}&quot;">​</a></h2><p> 要使用 `<code>DoubleReceive</code>`，你需要在构建脚本中包含 `<code>ktor-server-double-receive</code>` 构件： </p>',4)),s(p,{group:"languages"},{default:t(()=>[s(o,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:t(()=>[s(a,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-server-double-receive:$ktor_version")'})]),_:1}),s(o,{title:"Gradle (Groovy)","group-key":"groovy"},{default:t(()=>[s(a,{lang:"Groovy",code:'            implementation "io.ktor:ktor-server-double-receive:$ktor_version"'})]),_:1}),s(o,{title:"Maven","group-key":"maven"},{default:t(()=>[s(a,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-server-double-receive-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),e[18]||(e[18]=i("h2",{id:"install_plugin",tabindex:"-1"},[l("安装 DoubleReceive "),i("a",{class:"header-anchor",href:"#install_plugin","aria-label":'Permalink to "安装 DoubleReceive {id="install_plugin"}"'},"​")],-1)),i("p",null,[e[6]||(e[6]=l(" 要将 `")),e[7]||(e[7]=i("code",null,"DoubleReceive",-1)),e[8]||(e[8]=l("` 插件")),e[9]||(e[9]=i("a",{href:"#install"},"安装",-1)),e[10]||(e[10]=l("到应用程序，请在指定的")),s(r,{href:"/ktor/server-modules",summary:"模块允许你通过对路由进行分组来组织应用程序。"},{default:t(()=>e[5]||(e[5]=[l("模块")])),_:1}),e[11]||(e[11]=l("中将其传递给 `")),e[12]||(e[12]=i("code",null,"install",-1)),e[13]||(e[13]=l("` 函数。以下代码片段展示了如何安装 `")),e[14]||(e[14]=i("code",null,"DoubleReceive",-1)),e[15]||(e[15]=l("` ... "))]),s(c,null,{default:t(()=>e[16]||(e[16]=[i("li",null,[l(" ... 在 `"),i("code",null,"embeddedServer"),l("` 函数调用内部。 ")],-1),i("li",null,[l(" ... 在显式定义的 `"),i("code",null,"module"),l("` 内部，这是一个 `"),i("code",null,"Application"),l("` 类的扩展函数。 ")],-1)])),_:1}),s(p,null,{default:t(()=>[s(o,{title:"embeddedServer"},{default:t(()=>[s(a,{lang:"kotlin",code:`            import io.ktor.server.engine.*
            import io.ktor.server.netty.*
            import io.ktor.server.application.*
            import io.ktor.server.plugins.doublereceive.*

            fun main() {
                embeddedServer(Netty, port = 8080) {
                    install(DoubleReceive)
                    // ...
                }.start(wait = true)
            }`})]),_:1}),s(o,{title:"module"},{default:t(()=>[s(a,{lang:"kotlin",code:`            import io.ktor.server.application.*
            import io.ktor.server.plugins.doublereceive.*
            // ...
            fun Application.module() {
                install(DoubleReceive)
                // ...
            }`})]),_:1})]),_:1}),e[19]||(e[19]=d(`<p> \`<code>DoubleReceive</code>\` 插件也可以<a href="#install-route">安装到特定路由</a>。如果你需要针对不同的应用程序资源使用不同的 \`<code>DoubleReceive</code>\` 配置，这可能会很有用。 </p><p>安装 <code>DoubleReceive</code> 后，你可以多次<a href="./server-requests#body_contents">接收请求体</a>，并且每次调用都会返回相同的实例。例如，你可以使用 <a href="./server-call-logging">CallLogging</a> 插件启用请求体日志记录...</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CallLogging) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    level </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Level.TRACE</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { call </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        runBlocking</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;Body: \${call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">receiveText</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">()}&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>... 然后在路由处理函数内部再次获取请求体。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> receivedText </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">receiveText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Text &#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$receivedText</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39; is received&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>你可以在此处找到完整示例：<a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/double-receive" target="_blank" rel="noreferrer">double-receive</a>。</p><h2 id="configure" tabindex="-1">配置 DoubleReceive <a class="header-anchor" href="#configure" aria-label="Permalink to &quot;配置 DoubleReceive {id=&quot;configure&quot;}&quot;">​</a></h2><p>在默认配置下，<code>DoubleReceive</code> 提供了以以下类型<a href="./server-requests#body_contents">接收请求体</a>的能力：</p><ul><li><code>ByteArray</code></li><li><code>String</code></li><li><code>Parameters</code></li><li><code>ContentNegotiation</code> 插件使用的<a href="./server-serialization#create_data_class">数据类</a></li></ul><p>默认情况下，<code>DoubleReceive</code> 不支持：</p><ul><li>从同一个请求中接收不同类型；</li><li>接收<a href="./server-requests#raw">流或通道</a>。</li></ul><p>如果你无需从同一个请求中接收不同类型，或无需接收流或通道，请将 <code>cacheRawRequest</code> 属性设置为 <code>false</code>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(DoubleReceive) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    cacheRawRequest </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,13))])}const D=v(b,[["render",y]]);export{T as __pageData,D as default};
