import{_ as i,c as a,o as e,ag as l}from"./chunks/framework.Bksy39di.js";const c=JSON.parse('{"title":"公共 ViewModel","description":"","frontmatter":{},"headers":[],"relativePath":"kmp/compose-viewmodel.md","filePath":"kmp/compose-viewmodel.md","lastUpdated":1755516278000}'),n={name:"kmp/compose-viewmodel.md"};function t(p,s,h,k,o,d){return e(),a("div",null,s[0]||(s[0]=[l(`<h1 id="公共-viewmodel" tabindex="-1">公共 ViewModel <a class="header-anchor" href="#公共-viewmodel" aria-label="Permalink to &quot;公共 ViewModel&quot;">​</a></h1><p>Android <a href="https://developer.android.com/topic/libraries/architecture/viewmodel" target="_blank" rel="noreferrer">ViewModel</a> 的 UI 构建方法可使用 Compose Multiplatform 在公共代码中实现。</p><h2 id="将公共-viewmodel-添加到你的项目" tabindex="-1">将公共 ViewModel 添加到你的项目 <a class="header-anchor" href="#将公共-viewmodel-添加到你的项目" aria-label="Permalink to &quot;将公共 ViewModel 添加到你的项目&quot;">​</a></h2><p>若要使用多平台 <code>ViewModel</code> 实现，请将以下依赖项添加到你的 <code>commonMain</code> 源代码集：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        commonMain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.androidx.lifecycle:lifecycle-viewmodel-compose:2.9.2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="在公共代码中使用-viewmodel" tabindex="-1">在公共代码中使用 ViewModel <a class="header-anchor" href="#在公共代码中使用-viewmodel" aria-label="Permalink to &quot;在公共代码中使用 ViewModel&quot;">​</a></h2><p>Compose Multiplatform 实现了公共的 <code>ViewModelStoreOwner</code> 接口，因此在公共代码中使用 <code>ViewModel</code> 类与 Android 最佳实践并无太大区别。</p><p>以 <a href="https://github.com/JetBrains/compose-multiplatform/tree/0e38f58b42d23ff6d0ad30b119d34fa1cd6ccedb/examples/nav_cupcake" target="_blank" rel="noreferrer">navigation example</a> 为例：</p><ol><li>声明 ViewModel 类：</li></ol><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> androidx.lifecycle.ViewModel</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> androidx.lifecycle.viewmodel.compose.viewModel</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OrderViewModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ViewModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _uiState </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MutableStateFlow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OrderUiState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pickupOptions </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> pickupOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uiState: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">StateFlow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OrderUiState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _uiState.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">asStateFlow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ol start="2"><li>将 ViewModel 添加到你的可组合函数：</li></ol><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Composable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CupcakeApp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   viewModel: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OrderViewModel</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> viewModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OrderViewModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>在 <code>ViewModel</code> 中运行协程时，请记住 <code>ViewModel.viewModelScope</code> 值与 <code>Dispatchers.Main.immediate</code> 值绑定，而该值在桌面端默认可能不可用。 为了使 <code>ViewModel</code> 协程与 Compose Multiplatform 正常工作，请将 <code>kotlinx-coroutines-swing</code> 依赖项添加到你的项目。 关于详细信息，请参见 <a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-main.html" target="_blank" rel="noreferrer"><code>Dispatchers.Main</code> 文档</a>。</p></div><p>在非 JVM 平台上，对象无法使用类型反射进行实例化。 因此在公共代码中，你不能无参调用 <code>viewModel()</code> 函数：每次创建 <code>ViewModel</code> 实例时，都需要至少提供一个初始化器作为实参。</p><p>如果仅提供初始化器，库会在底层创建一个默认工厂。 但你可以实现自己的工厂，并调用公共 <code>viewModel(...)</code> 函数的更显式版本，就像使用 <a href="https://developer.android.com/topic/libraries/architecture/viewmodel#jetpack-compose" target="_blank" rel="noreferrer">Jetpack Compose</a> 一样。</p>`,15)]))}const E=i(n,[["render",t]]);export{c as __pageData,E as default};
