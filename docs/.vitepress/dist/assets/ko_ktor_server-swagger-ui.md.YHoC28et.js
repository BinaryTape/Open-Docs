import{_ as u,C as a,c as E,o as y,G as e,ag as o,w as t,j as i,a as n}from"./chunks/framework.Bksy39di.js";const C=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ko/ktor/server-swagger-ui.md","filePath":"ko/ktor/server-swagger-ui.md","lastUpdated":1755457140000}'),m={name:"ko/ktor/server-swagger-ui.md"};function v(_,s,w,b,F,I){const p=a("TopicTitle"),k=a("primary-label"),g=a("Links"),h=a("tldr"),d=a("link-summary"),r=a("code-block"),l=a("TabItem"),c=a("Tabs");return y(),E("div",null,[e(p,{labelRef:"server-plugin",title:"Swagger UI"}),e(k,{ref:"server-plugin"},null,512),e(h,null,{default:t(()=>[s[3]||(s[3]=i("p",null,[i("b",null,"필수 종속성"),n(": "),i("code",null,"io.ktor:ktor-server-swagger")],-1)),s[4]||(s[4]=i("p",null,[i("b",null,"코드 예시"),n(": "),i("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/json-kotlinx-openapi"}," json-kotlinx-openapi ")],-1)),i("p",null,[i("b",null,[e(g,{href:"/ktor/server-native",summary:"Ktor는 Kotlin/Native를 지원하며 추가 런타임이나 가상 머신 없이 서버를 실행할 수 있게 합니다."},{default:t(()=>s[0]||(s[0]=[n("네이티브 서버")])),_:1}),s[1]||(s[1]=n(" 지원"))]),s[2]||(s[2]=n(": ✖️ "))])]),_:1}),e(d,null,{default:t(()=>s[5]||(s[5]=[n(" SwaggerUI 플러그인을 사용하면 프로젝트에 대한 Swagger UI를 생성할 수 있습니다. ")])),_:1}),s[6]||(s[6]=o('<p>Ktor를 사용하면 기존 OpenAPI 사양을 기반으로 프로젝트에 대한 Swagger UI를 생성하고 제공할 수 있습니다. Swagger UI를 통해 API 리소스를 시각화하고 상호 작용할 수 있습니다.</p><blockquote><p>다음 도구는 코드에서 OpenAPI 정의를 생성하거나 그 반대로 생성하는 데 사용할 수 있습니다.</p><ul><li>IntelliJ IDEA용 <a href="https://www.jetbrains.com/help/idea/ktor.html#openapi" target="_blank" rel="noreferrer">Ktor 플러그인</a>은 서버 측 Ktor 애플리케이션을 위한 OpenAPI 문서 생성 기능을 제공합니다.</li><li><a href="https://github.com/OpenAPITools/openapi-generator" target="_blank" rel="noreferrer">OpenAPI 제너레이터</a>는 <a href="./https://github.com/OpenAPITools/openapi-generator/blob/master/docs/generators/kotlin-server">kotlin-server</a> 제너레이터를 사용하여 API 정의로부터 Ktor 프로젝트를 생성할 수 있도록 해줍니다. 또는 IntelliJ IDEA의 <a href="https://www.jetbrains.com/help/idea/openapi.html#codegen" target="_blank" rel="noreferrer">기능</a>을 사용할 수도 있습니다.</li></ul></blockquote><p id="open-api-note"></p><h2 id="add_dependencies" tabindex="-1">종속성 추가 <a class="header-anchor" href="#add_dependencies" aria-label="Permalink to &quot;종속성 추가 {id=&quot;add_dependencies&quot;}&quot;">​</a></h2><p>Swagger UI를 제공하려면 빌드 스크립트에 <code>ktor-server-swagger</code> 아티팩트를 추가해야 합니다.</p>',5)),e(c,{group:"languages"},{default:t(()=>[e(l,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:t(()=>[e(r,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-server-swagger:$ktor_version")'})]),_:1}),e(l,{title:"Gradle (Groovy)","group-key":"groovy"},{default:t(()=>[e(r,{lang:"Groovy",code:'            implementation "io.ktor:ktor-server-swagger:$ktor_version"'})]),_:1}),e(l,{title:"Maven","group-key":"maven"},{default:t(()=>[e(r,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-server-swagger-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),s[7]||(s[7]=o(`<h2 id="configure-swagger" tabindex="-1">Swagger UI 구성 <a class="header-anchor" href="#configure-swagger" aria-label="Permalink to &quot;Swagger UI 구성 {id=&quot;configure-swagger&quot;}&quot;">​</a></h2><p>Swagger UI를 제공하려면 <code>swaggerFile</code>에 배치된 OpenAPI 사양에서 렌더링된 <code>path</code>에 Swagger UI와 함께 <code>GET</code> 엔드포인트를 생성하는 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-swagger/io.ktor.server.plugins.swagger/swagger-u-i.html" target="_blank" rel="noreferrer">swaggerUI</a> 메서드를 호출해야 합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.plugins.swagger.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    swaggerUI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;swagger&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, swaggerFile </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;openapi/documentation.yaml&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>이 메서드는 애플리케이션 리소스에서 OpenAPI 사양을 찾으려고 시도합니다. 그렇지 않으면 <code>java.io.File</code>을 사용하여 파일 시스템에서 OpenAPI 사양을 읽으려고 시도합니다.</p><p>선택적으로 <code>swaggerUI</code> 블록 내에서 Swagger UI를 사용자 지정할 수 있습니다. 예를 들어, 다른 Swagger UI 버전을 사용하거나 사용자 지정 스타일을 적용할 수 있습니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    swaggerUI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;swagger&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, swaggerFile </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;openapi/documentation.yaml&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        version </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;4.15.5&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>이제 애플리케이션을 <a href="./server-run">실행</a>하고 <code>/swagger</code> 페이지를 열어 사용 가능한 엔드포인트를 확인하고 테스트할 수 있습니다.</p><h2 id="configure-cors" tabindex="-1">CORS 구성 <a class="header-anchor" href="#configure-cors" aria-label="Permalink to &quot;CORS 구성 {id=&quot;configure-cors&quot;}&quot;">​</a></h2><p>API가 Swagger UI와 잘 작동하도록 하려면 <a href="./server-cors">교차 출원 리소스 공유(CORS)</a> 정책을 설정해야 합니다. 아래 예시는 다음 CORS 구성을 적용합니다.</p><ul><li><code>anyHost</code>는 모든 호스트의 교차 출원 요청을 활성화합니다.</li><li><code>allowHeader</code>는 <a href="./server-serialization">콘텐츠 협상</a>에 사용되는 <code>Content-Type</code> 클라이언트 헤더를 허용합니다.</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CORS) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    anyHost</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    allowHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpHeaders.ContentType)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,11))])}const A=u(m,[["render",v]]);export{C as __pageData,A as default};
