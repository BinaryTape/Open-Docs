import{_ as a}from"./chunks/compose-1610-ios-magnifier.YMZtwDpq.js";import{_ as o,c as r,o as i,ag as t}from"./chunks/framework.Bksy39di.js";const f=JSON.parse('{"title":"Compose Multiplatform 1.6.10-rc02 新特性","description":"","frontmatter":{},"headers":[],"relativePath":"kmp/whats-new-compose-eap.md","filePath":"kmp/whats-new-compose-eap.md","lastUpdated":1755516278000}'),l={name:"kmp/whats-new-compose-eap.md"};function s(n,e,p,c,d,h){return i(),r("div",null,e[0]||(e[0]=[t('<h1 id="compose-multiplatform-1-6-10-rc02-新特性" tabindex="-1">Compose Multiplatform 1.6.10-rc02 新特性 <a class="header-anchor" href="#compose-multiplatform-1-6-10-rc02-新特性" aria-label="Permalink to &quot;Compose Multiplatform 1.6.10-rc02 新特性&quot;">​</a></h1><p>以下是此抢先体验预览特性发布中的亮点：</p><ul><li><a href="#support-for-multimodule-projects-with-compose-multiplatform-resources">支持带有 Compose Multiplatform 资源的模块化项目</a></li><li><a href="#experimental-navigation-library">实验性的导航库</a></li><li><a href="#lifecycle-library">带有实验性通用 ViewModel 的生命周期库</a></li><li><a href="#known-issues">已知问题</a></li></ul><p>关于此版本的完整变更列表，请参见 <a href="./https://github.com/JetBrains/compose-multiplatform/blob/master/CHANGELOG#1610-beta01-april-2024">GitHub</a>。</p><h2 id="依赖项" tabindex="-1">依赖项 <a class="header-anchor" href="#依赖项" aria-label="Permalink to &quot;依赖项&quot;">​</a></h2><ul><li>Gradle 插件 <code>org.jetbrains.compose</code>，版本 1.6.10-rc01。基于 Jetpack Compose 库： <ul><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-compiler#1.5.13" target="_blank" rel="noreferrer">Compiler 1.5.13</a></li><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-runtime#1.6.7" target="_blank" rel="noreferrer">Runtime 1.6.7</a></li><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-ui#1.6.7" target="_blank" rel="noreferrer">UI 1.6.7</a></li><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-foundation#1.6.7" target="_blank" rel="noreferrer">Foundation 1.6.7</a></li><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-material#1.6.7" target="_blank" rel="noreferrer">Material 1.6.7</a></li><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-material3#1.2.1" target="_blank" rel="noreferrer">Material3 1.2.1</a></li></ul></li><li>生命周期库 <code>org.jetbrains.androidx.lifecycle:lifecycle-*:2.8.0-rc02</code>。基于 <a href="https://developer.android.com/jetpack/androidx/releases/lifecycle#2.8.0-rc01" target="_blank" rel="noreferrer">Jetpack Lifecycle 2.8.0-rc01</a>。</li><li>导航库 <code>org.jetbrains.androidx.navigation:navigation-*:2.7.0-alpha05</code>。基于 <a href="https://developer.android.com/jetpack/androidx/releases/navigation#2.7.7" target="_blank" rel="noreferrer">Jetpack Navigation 2.7.7</a>。</li></ul><h2 id="破坏性变更" tabindex="-1">破坏性变更 <a class="header-anchor" href="#破坏性变更" aria-label="Permalink to &quot;破坏性变更&quot;">​</a></h2><h3 id="kotlin-2-0-0-需要新的-compose-编译器-gradle-插件" tabindex="-1">Kotlin 2.0.0 需要新的 Compose 编译器 Gradle 插件 <a class="header-anchor" href="#kotlin-2-0-0-需要新的-compose-编译器-gradle-插件" aria-label="Permalink to &quot;Kotlin 2.0.0 需要新的 Compose 编译器 Gradle 插件&quot;">​</a></h3><p>从 Kotlin 2.0.0-RC2 开始，Compose Multiplatform 需要新的 Compose 编译器 Gradle 插件。 关于详细信息，请参见<a href="./compose-compiler#migrating-a-compose-multiplatform-project">迁移指南</a>。</p><h2 id="跨平台" tabindex="-1">跨平台 <a class="header-anchor" href="#跨平台" aria-label="Permalink to &quot;跨平台&quot;">​</a></h2><h3 id="资源" tabindex="-1">资源 <a class="header-anchor" href="#资源" aria-label="Permalink to &quot;资源&quot;">​</a></h3><h4 id="稳定的资源库" tabindex="-1">稳定的资源库 <a class="header-anchor" href="#稳定的资源库" aria-label="Permalink to &quot;稳定的资源库&quot;">​</a></h4><p><a href="./compose-multiplatform-resources">资源库 API</a> 的大部分现已稳定。</p><h4 id="支持带有-compose-multiplatform-资源的多模块项目" tabindex="-1">支持带有 Compose Multiplatform 资源的多模块项目 <a class="header-anchor" href="#支持带有-compose-multiplatform-资源的多模块项目" aria-label="Permalink to &quot;支持带有 Compose Multiplatform 资源的多模块项目&quot;">​</a></h4><p>从 Compose Multiplatform 1.6.10-beta01 开始，你可以在任意 Gradle 模块和任意源代码集中存储资源，并发布包含资源的[项目]和库。</p><p>要启用多模块支持，请将你的项目更新到 Kotlin 2.0.0 或更高版本以及 Gradle 7.6 或更高版本。</p><h4 id="多平台资源的配置-dsl" tabindex="-1">多平台资源的配置 DSL <a class="header-anchor" href="#多平台资源的配置-dsl" aria-label="Permalink to &quot;多平台资源的配置 DSL&quot;">​</a></h4><p>你现在可以微调项目中的 <code>Res</code> 类生成：修改类的模态和指定包，并选择其生成条件：始终、从不或仅在对资源库有显式依赖项时。</p><p>关于详细信息，请参见<a href="./compose-multiplatform-resources#configuration">文档部分</a>。</p><h4 id="用于生成资源-uri-的公共函数" tabindex="-1">用于生成资源 URI 的公共函数 <a class="header-anchor" href="#用于生成资源-uri-的公共函数" aria-label="Permalink to &quot;用于生成资源 URI 的公共函数&quot;">​</a></h4><p>新的 <code>getUri()</code> 函数允许你将资源的平台特有 URI 传递给外部库，以便它们可以直接访问文件。 关于详细信息，请参见<a href="./compose-multiplatform-resources#accessing-multiplatform-resources-from-external-libraries">文档</a>。</p><h4 id="字符串资源的复数形式" tabindex="-1">字符串资源的复数形式 <a class="header-anchor" href="#字符串资源的复数形式" aria-label="Permalink to &quot;字符串资源的复数形式&quot;">​</a></h4><p>你现在可以定义复数形式（数量字符串）以及其他多平台字符串资源。 关于详细信息，请参见<a href="./compose-multiplatform-resources#plurals">文档</a>。</p><h4 id="支持三字母语言环境" tabindex="-1">支持三字母语言环境 <a class="header-anchor" href="#支持三字母语言环境" aria-label="Permalink to &quot;支持三字母语言环境&quot;">​</a></h4><p><a href="./compose-multiplatform-resources#language-and-regional-qualifiers">语言限定符</a> 现在支持语言环境的 alpha-3 (ISO 639-2) 代码。</p><h4 id="实验性的图像和字体字节数组函数" tabindex="-1">实验性的图像和字体字节数组函数 <a class="header-anchor" href="#实验性的图像和字体字节数组函数" aria-label="Permalink to &quot;实验性的图像和字体字节数组函数&quot;">​</a></h4><p>你可以试用两个允许将字体和图像作为字节数组获取的函数：<code>getDrawableResourceBytes</code> 和 <code>getFontResourceBytes</code>。 这些函数旨在帮助从第三方库访问多平台资源。</p><p>详细信息请参见 <a href="https://github.com/JetBrains/compose-multiplatform/pull/4651" target="_blank" rel="noreferrer">pull request</a>。</p><h3 id="实验性的导航库" tabindex="-1">实验性的导航库 <a class="header-anchor" href="#实验性的导航库" aria-label="Permalink to &quot;实验性的导航库&quot;">​</a></h3><p>基于 Jetpack Compose 的通用导航库现已可用。 关于详细信息，请参见<a href="./compose-navigation-routing">文档</a>。</p><p>此版本的主要限制：</p><ul><li><a href="https://developer.android.com/guide/navigation/design/deep-link" target="_blank" rel="noreferrer">深层链接</a>（处理或跟踪它们）尚不支持。</li><li><a href="https://developer.android.com/develop/ui/compose/libraries#handling_the_system_back_button" target="_blank" rel="noreferrer">BackHandler</a> 函数和<a href="https://developer.android.com/guide/navigation/custom-back/predictive-back-gesture" target="_blank" rel="noreferrer">预测性返回手势</a>仅在 Android 上受支持。</li></ul><h3 id="生命周期库" tabindex="-1">生命周期库 <a class="header-anchor" href="#生命周期库" aria-label="Permalink to &quot;生命周期库&quot;">​</a></h3><p>基于 Jetpack lifecycle 的通用生命周期库现已可用，关于详细信息，请参见<a href="./compose-lifecycle">文档</a>。</p><p>此库主要引入以支持通用导航功能，但它也提供一个实验性的跨平台 <code>ViewModel</code> 实现，并包含一个你可以为你的项目实现的通用 <code>LifecycleOwner</code> 接口。</p><p>Compose Multiplatform 还提供一个通用的 <code>ViewModelStoreOwner</code> 实现。</p><h3 id="支持-kotlin-2-0-0" tabindex="-1">支持 Kotlin 2.0.0 <a class="header-anchor" href="#支持-kotlin-2-0-0" aria-label="Permalink to &quot;支持 Kotlin 2.0.0&quot;">​</a></h3><p>Kotlin 2.0.0-RC2 与新的 Compose 编译器 Gradle 插件一同发布。 要将 Compose Multiplatform 与最新编译器版本一同使用，请将插件应用到你项目中的模块（关于详细信息，请参见<a href="./compose-compiler#migrating-a-compose-multiplatform-project">迁移指南</a>）。</p><h2 id="桌面" tabindex="-1">桌面 <a class="header-anchor" href="#桌面" aria-label="Permalink to &quot;桌面&quot;">​</a></h2><h3 id="basictextfield2-的基本支持" tabindex="-1">BasicTextField2 的基本支持 <a class="header-anchor" href="#basictextfield2-的基本支持" aria-label="Permalink to &quot;BasicTextField2 的基本支持&quot;">​</a></h3><p><code>BasicTextField2</code> Compose 组件现在已在桌面目标上基础层面受支持。 如果你的项目绝对需要它，或者你只是想测试它，那么可以使用它，但请记住可能存在未发现的边缘情况。 例如，<code>BasicTextField2</code> 目前不支持 IME 事件，因此你将无法使用中文、日文或韩文的虚拟键盘。</p><p>对该组件的完整支持以及对其他平台的支持计划在 Compose Multiplatform 1.7.0 版本中实现。</p><h3 id="dialogwindow-的-alwaysontop-标志" tabindex="-1">DialogWindow 的 alwaysOnTop 标志 <a class="header-anchor" href="#dialogwindow-的-alwaysontop-标志" aria-label="Permalink to &quot;DialogWindow 的 alwaysOnTop 标志&quot;">​</a></h3><p>为避免你的对话窗口被覆盖，你现在可以为 <code>DialogWindow composable</code> 使用 <code>alwaysOnTop</code> 标志。</p><p>关于详细信息，请参见 <a href="https://github.com/JetBrains/compose-multiplatform-core/pull/1120" target="_blank" rel="noreferrer">pull request</a>。</p><h2 id="ios" tabindex="-1">iOS <a class="header-anchor" href="#ios" aria-label="Permalink to &quot;iOS&quot;">​</a></h2><h3 id="无障碍支持改进" tabindex="-1">无障碍支持改进 <a class="header-anchor" href="#无障碍支持改进" aria-label="Permalink to &quot;无障碍支持改进&quot;">​</a></h3><p>在此版本中：</p><ul><li>对话框和弹出窗口已与无障碍特性正确集成，</li><li>使用 <code>UIKitView</code> 和 <code>UIKitViewController</code> 创建的互操作视图现在可通过无障碍服务访问，</li><li><code>LiveRegion</code> 语义受无障碍 API 支持，</li><li><a href="https://github.com/JetBrains/compose-multiplatform-core/pull/1169" target="_blank" rel="noreferrer">无障碍滚动</a> 受支持，</li><li><code>触觉反馈</code> 受支持。</li></ul><h3 id="ios-17-及更高版本选择容器放大镜" tabindex="-1">iOS 17 及更高版本选择容器放大镜 <a class="header-anchor" href="#ios-17-及更高版本选择容器放大镜" aria-label="Permalink to &quot;iOS 17 及更高版本选择容器放大镜&quot;">​</a></h3><p>iOS 上的 Compose Multiplatform 选择容器现在模拟原生放大工具。</p><p><img src="'+a+`" alt="Screenshot of iPhone chat app with the text magnifier active" width="390"></p><h3 id="dialog-居中时软件键盘内边距" tabindex="-1">Dialog 居中时软件键盘内边距 <a class="header-anchor" href="#dialog-居中时软件键盘内边距" aria-label="Permalink to &quot;Dialog 居中时软件键盘内边距&quot;">​</a></h3><p><code>Dialog composable</code> 的行为现在与 Android 对齐：当软件键盘出现在屏幕上时，对话框会考虑应用程序窗口的有效高度进行居中。 可以使用 <code>DialogProperties.useSoftwareKeyboardInset</code> 属性禁用此选项。</p><h2 id="web" tabindex="-1">Web <a class="header-anchor" href="#web" aria-label="Permalink to &quot;Web&quot;">​</a></h2><h3 id="ime-键盘基本支持" tabindex="-1">IME 键盘基本支持 <a class="header-anchor" href="#ime-键盘基本支持" aria-label="Permalink to &quot;IME 键盘基本支持&quot;">​</a></h3><p>Compose Multiplatform 的 Web 目标现在拥有对虚拟 (IME) 键盘的基本支持。</p><h2 id="gradle-插件" tabindex="-1">Gradle 插件 <a class="header-anchor" href="#gradle-插件" aria-label="Permalink to &quot;Gradle 插件&quot;">​</a></h2><h3 id="修改-macos-最低版本的可能性" tabindex="-1">修改 macOS 最低版本的可能性 <a class="header-anchor" href="#修改-macos-最低版本的可能性" aria-label="Permalink to &quot;修改 macOS 最低版本的可能性&quot;">​</a></h3><p>在以前的版本中，无法在不包含 Intel 版本的情况下将 macOS 应用上传到 App Store。 你现在可以在平台特有的 Compose Multiplatform 选项中为你的应用设置一个最低 macOS 版本：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compose.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">desktop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        nativeDistributions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            macOS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                minimumSystemVersion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;12.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>关于详细信息，请参见 <a href="https://github.com/JetBrains/compose-multiplatform/pull/4271" target="_blank" rel="noreferrer">pull request</a>。</p><h3 id="使用-proguard-支持创建-uber-jar-的选项" tabindex="-1">使用 ProGuard 支持创建 uber JAR 的选项 <a class="header-anchor" href="#使用-proguard-支持创建-uber-jar-的选项" aria-label="Permalink to &quot;使用 ProGuard 支持创建 uber JAR 的选项&quot;">​</a></h3><p>你现在可以使用 ProGuard Gradle 任务创建 uber JAR（包含应用程序及其所有依赖项 JAR 的复杂包）。</p><p>关于详细信息，请参见 <a href="https://github.com/JetBrains/compose-multiplatform/pull/4136" target="_blank" rel="noreferrer">pull request</a>。</p><h2 id="已知问题" tabindex="-1">已知问题 <a class="header-anchor" href="#已知问题" aria-label="Permalink to &quot;已知问题&quot;">​</a></h2><h3 id="missingresourceexception" tabindex="-1">MissingResourceException <a class="header-anchor" href="#missingresourceexception" aria-label="Permalink to &quot;MissingResourceException&quot;">​</a></h3><p>将 Kotlin 版本从 1.9.x 更改为 2.0.0（或反之）后，你可能会遇到 <code>org.jetbrains.compose.resources.MissingResourceException: Missing resource with path: ...</code> 错误。 要解决此问题，请删除你项目中的 <code>build</code> 目录：这包括位于你项目根目录和模块文件夹中的文件夹。</p><h3 id="nativecodegeneratorexception" tabindex="-1">NativeCodeGeneratorException <a class="header-anchor" href="#nativecodegeneratorexception" aria-label="Permalink to &quot;NativeCodeGeneratorException&quot;">​</a></h3><p>iOS 编译项可能会在某些项目中失败并出现以下错误：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>org.jetbrains.kotlin.backend.konan.llvm.NativeCodeGeneratorException: Exception during generating code for following declaration: private fun $init_global()</span></span></code></pre></div><p>关于详细信息，请关注 <a href="https://github.com/JetBrains/compose-multiplatform/issues/4809" target="_blank" rel="noreferrer">GitHub issue</a>。</p>`,72)]))}const k=o(l,[["render",s]]);export{f as __pageData,k as default};
