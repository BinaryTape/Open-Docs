import{_ as k,C as n,c as o,o as c,ag as h,G as s,w as t,j as i,a as e}from"./chunks/framework.Bksy39di.js";const b=JSON.parse('{"title":"Lincheck 指南","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/lincheck-guide.md","filePath":"kotlin/lincheck-guide.md","lastUpdated":1754307826000}'),p={name:"kotlin/lincheck-guide.md"};function d(E,a,g,u,_,y){const l=n("tab"),r=n("tabs");return c(),o("div",null,[a[2]||(a[2]=h('<h1 id="lincheck-指南" tabindex="-1">Lincheck 指南 <a class="header-anchor" href="#lincheck-指南" aria-label="Permalink to &quot;Lincheck 指南&quot;">​</a></h1><p>Lincheck 是一个实用且用户友好的框架，用于在 JVM 上测试并发算法。它提供了一种简单而声明式的方式来编写并发测试。</p><p>借助 Lincheck 框架，你无需描述如何执行测试，而可以指定 <em>要测试什么</em>，即通过声明所有要探查的操作以及所需的正确性属性。因此，一个典型的 Lincheck 并发测试仅包含大约 15 行代码。</p><p>当给定一个操作列表时，Lincheck 会自动：</p><ul><li>生成一组随机并发场景。</li><li>使用压力测试或有界模型检测对其进行探查。</li><li>验证每次调用的结果是否满足所需的正确性属性（线性化是默认属性）。</li></ul><h2 id="将-lincheck-添加到你的项目" tabindex="-1">将 Lincheck 添加到你的项目 <a class="header-anchor" href="#将-lincheck-添加到你的项目" aria-label="Permalink to &quot;将 Lincheck 添加到你的项目&quot;">​</a></h2><p>要启用 Lincheck 支持，请在 Gradle 配置中包含相应的版本库和依赖项。在你的 <code>build.gradle(.kts)</code> 文件中，添加以下内容：</p>',7)),s(r,{group:"build-script"},{default:t(()=>[s(l,{title:"Kotlin","group-key":"kotlin"},{default:t(()=>a[0]||(a[0]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"repositories"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),e(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    mavenCentral"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),e(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),e(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," ")]),e(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"dependencies"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),e(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    testImplementation"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"org.jetbrains.lincheck:lincheck:3.0"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),e(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),s(l,{title:"Groovy","group-key":"groovy"},{default:t(()=>a[1]||(a[1]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"repositories {")]),e(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    mavenCentral()")]),e(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),e(`
`),i("span",{class:"line"}),e(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"dependencies {")]),e(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    testImplementation "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"org.jetbrains.lincheck:lincheck:3.0"')]),e(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),a[3]||(a[3]=h('<h2 id="探索-lincheck" tabindex="-1">探索 Lincheck <a class="header-anchor" href="#探索-lincheck" aria-label="Permalink to &quot;探索 Lincheck&quot;">​</a></h2><p>本指南将帮助你熟悉该框架，并尝试最实用的特性及示例。逐步学习 Lincheck 特性：</p><ol><li><a href="/kotlin/introduction">编写你的第一个 Lincheck 测试</a></li><li><a href="/kotlin/testing-strategies">选择你的测试策略</a></li><li><a href="/kotlin/operation-arguments">配置操作实参</a></li><li><a href="/kotlin/constraints">考虑常见的算法约束</a></li><li><a href="/kotlin/progress-guarantees">检测算法的无阻塞进展保证</a></li><li><a href="/kotlin/sequential-specification">定义算法的顺序规约</a></li></ol><h2 id="更多参考资料" tabindex="-1">更多参考资料 <a class="header-anchor" href="#更多参考资料" aria-label="Permalink to &quot;更多参考资料&quot;">​</a></h2><ul><li>&quot;我们如何在 Kotlin 协程中测试并发算法&quot;，作者：Nikita Koval：<a href="https://youtu.be/jZqkWfa11Js" target="_blank" rel="noreferrer">视频</a>。KotlinConf 2023</li><li>&quot;Lincheck：在 JVM 上测试并发&quot; 工作坊，作者：Maria Sokolova：<a href="https://www.youtube.com/watch?v=YNtUK9GK4pA" target="_blank" rel="noreferrer">第 1 部分</a>，<a href="https://www.youtube.com/watch?v=EW7mkAOErWw" target="_blank" rel="noreferrer">第 2 部分</a>。Hydra 2021</li></ul>',5))])}const f=k(p,[["render",d]]);export{b as __pageData,f as default};
