import{_ as o,C as r,c as h,o as p,ag as a,j as t,G as l,w as n,a as i}from"./chunks/framework.Bksy39di.js";const m=JSON.parse('{"title":"Kotlin 1.5 の互換性ガイド","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/compatibility-guide-15.md","filePath":"ja/kotlin/compatibility-guide-15.md","lastUpdated":1754307826000}'),k={name:"ja/kotlin/compatibility-guide-15.md"};function g(d,s,c,u,E,b){const e=r("tabs");return p(),h("div",null,[s[6]||(s[6]=a('<h1 id="kotlin-1-5-の互換性ガイド" tabindex="-1">Kotlin 1.5 の互換性ガイド <a class="header-anchor" href="#kotlin-1-5-の互換性ガイド" aria-label="Permalink to &quot;Kotlin 1.5 の互換性ガイド&quot;">​</a></h1><p><em><a href="/ja/kotlin/kotlin-evolution-principles">言語の現代性を保つ</a></em> と <em><a href="/ja/kotlin/kotlin-evolution-principles">快適なアップデート</a></em> は、Kotlin 言語設計における 基本的な原則です。前者は、言語の進化を妨げる構文は削除されるべきであると述べており、 後者は、コードの移行をできるだけスムーズにするために、この削除が事前に十分に周知されるべきであると述べています。</p><p>言語の変更のほとんどは、更新の変更履歴やコンパイラの警告など、他のチャネルを通じてすでに発表されていましたが、 このドキュメントではそれらすべてを要約し、Kotlin 1.4 から Kotlin 1.5 への移行に関する完全なリファレンスを提供します。</p><h2 id="基本的な用語" tabindex="-1">基本的な用語 <a class="header-anchor" href="#基本的な用語" aria-label="Permalink to &quot;基本的な用語&quot;">​</a></h2><p>このドキュメントでは、いくつかの種類の互換性について説明します。</p><ul><li><em>ソース互換性</em>：ソース互換性のない変更とは、これまで問題なく（エラーや警告なしで）コンパイルできていたコードが、それ以上コンパイルできなくなることです。</li><li><em>バイナリ互換性</em>：2つのバイナリ成果物は、それらを交換してもロードまたはリンクエラーが発生しない場合、バイナリ互換性があると言われます。</li><li><em>振る舞い互換性</em>：変更が適用される前後で、同じプログラムが異なる振る舞いを示す場合、その変更は振る舞い互換性がないと言われます。</li></ul><p>これらの定義は、純粋なKotlinのみに与えられていることを覚えておいてください。 他の言語（例えばJava）の観点から見たKotlinコードの互換性は、このドキュメントの範囲外です。</p><h2 id="言語と標準ライブラリ" tabindex="-1">言語と標準ライブラリ <a class="header-anchor" href="#言語と標準ライブラリ" aria-label="Permalink to &quot;言語と標準ライブラリ&quot;">​</a></h2><h3 id="シグネチャ多相呼び出しにおけるスプレッド演算子の禁止" tabindex="-1">シグネチャ多相呼び出しにおけるスプレッド演算子の禁止 <a class="header-anchor" href="#シグネチャ多相呼び出しにおけるスプレッド演算子の禁止" aria-label="Permalink to &quot;シグネチャ多相呼び出しにおけるスプレッド演算子の禁止&quot;">​</a></h3><blockquote><p><strong>問題</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-35226" target="_blank" rel="noreferrer">KT-35226</a></p><p><strong>コンポーネント</strong>: コア言語</p><p><strong>互換性のない変更の種類</strong>: ソース互換性</p><p><strong>概要</strong>: Kotlin 1.5 では、シグネチャ多相呼び出しにおけるスプレッド演算子 (<code>*</code>) の使用が禁止されます。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>&lt; 1.5: 呼び出しサイトでの問題のある演算子に対して警告を導入</li><li><code>&gt;=</code> 1.5: この警告をエラーに昇格 <code>-XXLanguage:-ProhibitSpreadOnSignaturePolymorphicCall</code> を使用すると、一時的に1.5以前の振る舞いに戻すことができます。</li></ul></blockquote><h3 id="それらのクラスから見えない抽象メンバー-internal-package-private-を含む非抽象クラスの禁止" tabindex="-1">それらのクラスから見えない抽象メンバー（internal/package-private）を含む非抽象クラスの禁止 <a class="header-anchor" href="#それらのクラスから見えない抽象メンバー-internal-package-private-を含む非抽象クラスの禁止" aria-label="Permalink to &quot;それらのクラスから見えない抽象メンバー（internal/package-private）を含む非抽象クラスの禁止&quot;">​</a></h3><blockquote><p><strong>問題</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-27825" target="_blank" rel="noreferrer">KT-27825</a></p><p><strong>コンポーネント</strong>: コア言語</p><p><strong>互換性のない変更の種類</strong>: ソース互換性</p><p><strong>概要</strong>: Kotlin 1.5 では、それらのクラスから見えない抽象メンバー（internal/package-private）を含む非抽象クラスが禁止されます。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>&lt; 1.5: 問題のあるクラスに対して警告を導入</li><li><code>&gt;=</code> 1.5: この警告をエラーに昇格 <code>-XXLanguage:-ProhibitInvisibleAbstractMethodsInSuperclasses</code> を使用すると、一時的に1.5以前の振る舞いに戻すことができます。</li></ul></blockquote><h3 id="jvmで非具体化型パラメータに基づく配列を具体化型引数として使用することの禁止" tabindex="-1">JVMで非具体化型パラメータに基づく配列を具体化型引数として使用することの禁止 <a class="header-anchor" href="#jvmで非具体化型パラメータに基づく配列を具体化型引数として使用することの禁止" aria-label="Permalink to &quot;JVMで非具体化型パラメータに基づく配列を具体化型引数として使用することの禁止&quot;">​</a></h3><blockquote><p><strong>問題</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-31227" target="_blank" rel="noreferrer">KT-31227</a></p><p><strong>コンポーネント</strong>: コア言語</p><p><strong>互換性のない変更の種類</strong>: ソース互換性</p><p><strong>概要</strong>: Kotlin 1.5 では、JVMで非具体化型パラメータに基づく配列を具体化型引数として使用することが禁止されます。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>&lt; 1.5: 問題のある呼び出しに対して警告を導入</li><li><code>&gt;=</code> 1.5: この警告をエラーに昇格 <code>-XXLanguage:-ProhibitNonReifiedArraysAsReifiedTypeArguments</code> を使用すると、一時的に1.5以前の振る舞いに戻すことができます。</li></ul></blockquote><h3 id="プライマリコンストラクタに委譲しないセカンダリ列挙型コンストラクタの禁止" tabindex="-1">プライマリコンストラクタに委譲しないセカンダリ列挙型コンストラクタの禁止 <a class="header-anchor" href="#プライマリコンストラクタに委譲しないセカンダリ列挙型コンストラクタの禁止" aria-label="Permalink to &quot;プライマリコンストラクタに委譲しないセカンダリ列挙型コンストラクタの禁止&quot;">​</a></h3><blockquote><p><strong>問題</strong>: <a href="https://youtrack.com/issue/KT-35870" target="_blank" rel="noreferrer">KT-35870</a></p><p><strong>コンポーネント</strong>: コア言語</p><p><strong>互換性のない変更の種類</strong>: ソース互換性</p><p><strong>概要</strong>: Kotlin 1.5 では、プライマリコンストラクタに委譲しないセカンダリ列挙型コンストラクタが禁止されます。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>&lt; 1.5: 問題のあるコンストラクタに対して警告を導入</li><li><code>&gt;=</code> 1.5: この警告をエラーに昇格 <code>-XXLanguage:-RequiredPrimaryConstructorDelegationCallInEnums</code> を使用すると、一時的に1.5以前の振る舞いに戻すことができます。</li></ul></blockquote><h3 id="プライベートなインライン関数から匿名型を公開することの禁止" tabindex="-1">プライベートなインライン関数から匿名型を公開することの禁止 <a class="header-anchor" href="#プライベートなインライン関数から匿名型を公開することの禁止" aria-label="Permalink to &quot;プライベートなインライン関数から匿名型を公開することの禁止&quot;">​</a></h3><blockquote><p><strong>問題</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-33917" target="_blank" rel="noreferrer">KT-33917</a></p><p><strong>コンポーネント</strong>: コア言語</p><p><strong>互換性のない変更の種類</strong>: ソース互換性</p><p><strong>概要</strong>: Kotlin 1.5 では、プライベートなインライン関数から匿名型を公開することが禁止されます。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>&lt; 1.5: 問題のあるコンストラクタに対して警告を導入</li><li><code>&gt;=</code> 1.5: この警告をエラーに昇格 <code>-XXLanguage:-ApproximateAnonymousReturnTypesInPrivateInlineFunctions</code> を使用すると、一時的に1.5以前の振る舞いに戻すことができます。</li></ul></blockquote><h3 id="sam変換を伴う引数の後に非スプレッド配列を渡すことの禁止" tabindex="-1">SAM変換を伴う引数の後に非スプレッド配列を渡すことの禁止 <a class="header-anchor" href="#sam変換を伴う引数の後に非スプレッド配列を渡すことの禁止" aria-label="Permalink to &quot;SAM変換を伴う引数の後に非スプレッド配列を渡すことの禁止&quot;">​</a></h3><blockquote><p><strong>問題</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-35224" target="_blank" rel="noreferrer">KT-35224</a></p><p><strong>コンポーネント</strong>: コア言語</p><p><strong>互換性のない変更の種類</strong>: ソース互換性</p><p><strong>概要</strong>: Kotlin 1.5 では、SAM変換を伴う引数の後に非スプレッド配列を渡すことが禁止されます。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.3.70: 問題のある呼び出しに対して警告を導入</li><li><code>&gt;=</code> 1.5: この警告をエラーに昇格 <code>-XXLanguage:-ProhibitVarargAsArrayAfterSamArgument</code> を使用すると、一時的に1.5以前の振る舞いに戻すことができます。</li></ul></blockquote><h3 id="アンダースコア付きcatchブロックパラメータの特別なセマンティクスのサポート" tabindex="-1">アンダースコア付きcatchブロックパラメータの特別なセマンティクスのサポート <a class="header-anchor" href="#アンダースコア付きcatchブロックパラメータの特別なセマンティクスのサポート" aria-label="Permalink to &quot;アンダースコア付きcatchブロックパラメータの特別なセマンティクスのサポート&quot;">​</a></h3><blockquote><p><strong>問題</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-31567" target="_blank" rel="noreferrer">KT-31567</a></p><p><strong>コンポーネント</strong>: コア言語</p><p><strong>互換性のない変更の種類</strong>: ソース互換性</p><p><strong>概要</strong>: Kotlin 1.5 では、catchブロックで例外のパラメータ名を省略するために使用されるアンダースコアシンボル (<code>_</code>) への参照が禁止されます。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.4.20: 問題のある参照に対して警告を導入</li><li><code>&gt;=</code> 1.5: この警告をエラーに昇格 <code>-XXLanguage:-ForbidReferencingToUnderscoreNamedParameterOfCatchBlock</code> を使用すると、一時的に1.5以前の振る舞いに戻すことができます。</li></ul></blockquote><h3 id="sam変換の実装戦略を匿名クラスベースから-invokedynamic-に変更" tabindex="-1">SAM変換の実装戦略を匿名クラスベースから invokedynamic に変更 <a class="header-anchor" href="#sam変換の実装戦略を匿名クラスベースから-invokedynamic-に変更" aria-label="Permalink to &quot;SAM変換の実装戦略を匿名クラスベースから invokedynamic に変更&quot;">​</a></h3><blockquote><p><strong>問題</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-44912" target="_blank" rel="noreferrer">KT-44912</a></p><p><strong>コンポーネント</strong>: Kotlin/JVM</p><p><strong>互換性のない変更の種類</strong>: 振る舞い互換性</p><p><strong>概要</strong>: Kotlin 1.5 から、SAM（単一抽象メソッド）変換の実装戦略が、匿名クラスの生成から <code>invokedynamic</code> JVM命令の使用に変更されます。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.5: SAM変換の実装戦略を変更 <code>-Xsam-conversions=class</code> を使用すると、以前に使用されていた実装スキームに戻すことができます。</li></ul></blockquote><h3 id="jvm-irベースのバックエンドにおけるパフォーマンスの問題" tabindex="-1">JVM IRベースのバックエンドにおけるパフォーマンスの問題 <a class="header-anchor" href="#jvm-irベースのバックエンドにおけるパフォーマンスの問題" aria-label="Permalink to &quot;JVM IRベースのバックエンドにおけるパフォーマンスの問題&quot;">​</a></h3>',25)),t("blockquote",null,[s[1]||(s[1]=a('<p><strong>問題</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-48233" target="_blank" rel="noreferrer">KT-48233</a></p><p><strong>コンポーネント</strong>: Kotlin/JVM</p><p><strong>互換性のない変更の種類</strong>: 振る舞い互換性</p><p><strong>概要</strong>: Kotlin 1.5 では、Kotlin/JVM コンパイラに<a href="https://blog.jetbrains.com/kotlin/2021/02/the-jvm-backend-is-in-beta-let-s-make-it-stable-together/" target="_blank" rel="noreferrer">IRベースのバックエンド</a>がデフォルトで使用されます。 以前の言語バージョンでは、古いバックエンドが引き続きデフォルトで使用されます。</p><p>Kotlin 1.5 で新しいコンパイラを使用すると、パフォーマンスの低下問題に遭遇する可能性があります。 これらのケースの修正に取り組んでいます。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>&lt; 1.5: デフォルトで古いJVMバックエンドが使用される</li><li><code>&gt;=</code> 1.5: デフォルトでIRベースのバックエンドが使用される。Kotlin 1.5 で古いバックエンドを使用する必要がある場合は、 一時的に1.5以前の振る舞いに戻すために、プロジェクトの設定ファイルに以下の行を追加します。</li></ul><p>Gradle の場合:</p>',8)),l(e,null,{default:n(()=>s[0]||(s[0]=[t("div",{class:"language-kotlin vp-adaptive-theme"},[t("button",{title:"Copy Code",class:"copy"}),t("span",{class:"lang"},"kotlin"),t("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[t("code",null,[t("span",{class:"line"},[t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks."),t("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withType"),t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),t("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"org"),t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),t("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"jetbrains"),t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),t("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),t("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"gradle"),t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),t("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"dsl"),t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),t("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"KotlinJvmCompile"),t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"> {")]),i(`
`),t("span",{class:"line"},[t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  kotlinOptions.useOldBackend "),t("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),t("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," true")]),i(`
`),t("span",{class:"line"},[t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1),t("div",{class:"language-groovy vp-adaptive-theme"},[t("button",{title:"Copy Code",class:"copy"}),t("span",{class:"lang"},"groovy"),t("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[t("code",null,[t("span",{class:"line"},[t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks"),t("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"withType("),t("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"org.jetbrains.kotlin.gradle.dsl.KotlinJvmCompile"),t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {")]),i(`
`),t("span",{class:"line"},[t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  kotlinOptions"),t("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"useOldBackend "),t("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),t("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," true")]),i(`
`),t("span",{class:"line"},[t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),s[2]||(s[2]=a(`<p>Maven の場合:</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">configuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">arg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;-Xuse-old-backend&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">arg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">configuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>このフラグのサポートは、今後のリリースで削除される予定です。</p>`,3))]),s[7]||(s[7]=t("h3",{id:"jvm-irベースのバックエンドにおける新しいフィールドソート",tabindex:"-1"},[i("JVM IRベースのバックエンドにおける新しいフィールドソート "),t("a",{class:"header-anchor",href:"#jvm-irベースのバックエンドにおける新しいフィールドソート","aria-label":'Permalink to "JVM IRベースのバックエンドにおける新しいフィールドソート"'},"​")],-1)),t("blockquote",null,[s[4]||(s[4]=a('<p><strong>問題</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-46378" target="_blank" rel="noreferrer">KT-46378</a></p><p><strong>コンポーネント</strong>: Kotlin/JVM</p><p><strong>互換性のない変更の種類</strong>: 振る舞い互換性</p><p><strong>概要</strong>: バージョン 1.5 から、Kotlin は<a href="https://blog.jetbrains.com/kotlin/2021/02/the-jvm-backend-is-in-beta-let-s-make-it-stable-together/" target="_blank" rel="noreferrer">IRベースのバックエンド</a>を 使用し、JVMバイトコードのソート方法が異なります。古いバックエンドでは本体で宣言されたフィールドがコンストラクタで宣言されたフィールドの前に生成されていましたが、新しいバックエンドでは逆になります。 新しいソート順は、Java シリアライゼーションのように、フィールドの順序に依存するシリアライゼーションフレームワークを使用するプログラムの振る舞いを変更する可能性があります。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>&lt; 1.5: デフォルトで古いJVMバックエンドが使用される。これは、本体で宣言されたフィールドがコンストラクタで宣言されたフィールドの前に来ます。</li><li><code>&gt;=</code> 1.5: デフォルトで新しいIRベースのバックエンドが使用される。コンストラクタで宣言されたフィールドが本体で宣言されたフィールドの前に生成されます。回避策として、 Kotlin 1.5 で一時的に古いバックエンドに切り替えることができます。そのためには、プロジェクトの設定ファイルに以下の行を追加します。</li></ul><p>Gradle の場合:</p>',7)),l(e,null,{default:n(()=>s[3]||(s[3]=[t("div",{class:"language-kotlin vp-adaptive-theme"},[t("button",{title:"Copy Code",class:"copy"}),t("span",{class:"lang"},"kotlin"),t("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[t("code",null,[t("span",{class:"line"},[t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks."),t("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withType"),t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),t("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"org"),t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),t("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"jetbrains"),t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),t("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),t("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"gradle"),t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),t("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"dsl"),t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),t("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"KotlinJvmCompile"),t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"> {")]),i(`
`),t("span",{class:"line"},[t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  kotlinOptions.useOldBackend "),t("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),t("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," true")]),i(`
`),t("span",{class:"line"},[t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1),t("div",{class:"language-groovy vp-adaptive-theme"},[t("button",{title:"Copy Code",class:"copy"}),t("span",{class:"lang"},"groovy"),t("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[t("code",null,[t("span",{class:"line"},[t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks"),t("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"withType("),t("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"org.jetbrains.kotlin.gradle.dsl.KotlinJvmCompile"),t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {")]),i(`
`),t("span",{class:"line"},[t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  kotlinOptions"),t("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"useOldBackend "),t("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),t("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," true")]),i(`
`),t("span",{class:"line"},[t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),s[5]||(s[5]=a(`<p>Maven の場合:</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">configuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">arg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;-Xuse-old-backend&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">arg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">configuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>このフラグのサポートは、今後のリリースで削除される予定です。</p>`,3))]),s[8]||(s[8]=a('<h3 id="デリゲート式でジェネリック呼び出しを含むデリゲートプロパティに対して-null-可能性アサーションを生成" tabindex="-1">デリゲート式でジェネリック呼び出しを含むデリゲートプロパティに対して null 可能性アサーションを生成 <a class="header-anchor" href="#デリゲート式でジェネリック呼び出しを含むデリゲートプロパティに対して-null-可能性アサーションを生成" aria-label="Permalink to &quot;デリゲート式でジェネリック呼び出しを含むデリゲートプロパティに対して null 可能性アサーションを生成&quot;">​</a></h3><blockquote><p><strong>問題</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-44304" target="_blank" rel="noreferrer">KT-44304</a></p><p><strong>コンポーネント</strong>: Kotlin/JVM</p><p><strong>互換性のない変更の種類</strong>: 振る舞い互換性</p><p><strong>概要</strong>: Kotlin 1.5 から、Kotlin コンパイラはデリゲート式でジェネリック呼び出しを含むデリゲートプロパティに対して null 可能性アサーションを発行します。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.5: デリゲートプロパティに対して null 可能性アサーションを発行（詳細については Issue を参照）。 <code>-Xuse-old-backend</code> または <code>-language-version 1.4</code> を使用すると、一時的に1.5以前の振る舞いに戻すことができます。</li></ul></blockquote><h3 id="onlyinputtypes-でアノテーションされた型パラメータを持つ呼び出しに対する警告をエラーに昇格" tabindex="-1">@OnlyInputTypes でアノテーションされた型パラメータを持つ呼び出しに対する警告をエラーに昇格 <a class="header-anchor" href="#onlyinputtypes-でアノテーションされた型パラメータを持つ呼び出しに対する警告をエラーに昇格" aria-label="Permalink to &quot;@OnlyInputTypes でアノテーションされた型パラメータを持つ呼び出しに対する警告をエラーに昇格&quot;">​</a></h3><blockquote><p><strong>問題</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-45861" target="_blank" rel="noreferrer">KT-45861</a></p><p><strong>コンポーネント</strong>: コア言語</p><p><strong>互換性のない変更の種類</strong>: ソース互換性</p><p><strong>概要</strong>: Kotlin 1.5 では、型安全性を向上させるために、<code>contains</code>、<code>indexOf</code>、<code>assertEquals</code> のような無意味な引数を持つ呼び出しが禁止されます。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.4.0: 問題のあるコンストラクタに対して警告を導入</li><li><code>&gt;=</code> 1.5: この警告をエラーに昇格 <code>-XXLanguage:-StrictOnlyInputTypesChecks</code> を使用すると、一時的に1.5以前の振る舞いに戻すことができます。</li></ul></blockquote><h3 id="名前付き可変長引数を持つ呼び出しにおける引数実行の正しい順序を使用" tabindex="-1">名前付き可変長引数を持つ呼び出しにおける引数実行の正しい順序を使用 <a class="header-anchor" href="#名前付き可変長引数を持つ呼び出しにおける引数実行の正しい順序を使用" aria-label="Permalink to &quot;名前付き可変長引数を持つ呼び出しにおける引数実行の正しい順序を使用&quot;">​</a></h3><blockquote><p><strong>問題</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-17691" target="_blank" rel="noreferrer">KT-17691</a></p><p><strong>コンポーネント</strong>: Kotlin/JVM</p><p><strong>互換性のない変更の種類</strong>: 振る舞い互換性</p><p><strong>概要</strong>: Kotlin 1.5 では、名前付き可変長引数を持つ呼び出しにおける引数実行の順序が変更されます。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>&lt; 1.5: 問題のあるコンストラクタに対して警告を導入</li><li><code>&gt;=</code> 1.5: この警告をエラーに昇格 <code>-XXLanguage:-UseCorrectExecutionOrderForVarargArguments</code> を使用すると、一時的に1.5以前の振る舞いに戻すことができます。</li></ul></blockquote><h3 id="演算子呼び出しにおけるパラメータのデフォルト値を使用" tabindex="-1">演算子呼び出しにおけるパラメータのデフォルト値を使用 <a class="header-anchor" href="#演算子呼び出しにおけるパラメータのデフォルト値を使用" aria-label="Permalink to &quot;演算子呼び出しにおけるパラメータのデフォルト値を使用&quot;">​</a></h3><blockquote><p><strong>問題</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-42064" target="_blank" rel="noreferrer">KT-42064</a></p><p><strong>コンポーネント</strong>: Kotlin/JVM</p><p><strong>互換性のない変更の種類</strong>: 振る舞い互換性</p><p><strong>概要</strong>: Kotlin 1.5 では、演算子呼び出しにおけるパラメータのデフォルト値が使用されます。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>&lt; 1.5: 以前の振る舞い（詳細については Issue を参照）</li><li><code>&gt;=</code> 1.5: 振る舞いが変更される <code>-XXLanguage:-JvmIrEnabledByDefault</code> を使用すると、一時的に1.5以前の振る舞いに戻すことができます。</li></ul></blockquote><h3 id="通常のプログレッションが空の場合、forループで空の逆順プログレッションを生成" tabindex="-1">通常のプログレッションが空の場合、forループで空の逆順プログレッションを生成 <a class="header-anchor" href="#通常のプログレッションが空の場合、forループで空の逆順プログレッションを生成" aria-label="Permalink to &quot;通常のプログレッションが空の場合、forループで空の逆順プログレッションを生成&quot;">​</a></h3><blockquote><p><strong>問題</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-42533" target="_blank" rel="noreferrer">KT-42533</a></p><p><strong>コンポーネント</strong>: Kotlin/JVM</p><p><strong>互換性のない変更の種類</strong>: 振る舞い互換性</p><p><strong>概要</strong>: Kotlin 1.5 では、通常のプログレッションが空の場合、forループで空の逆順プログレッションを生成します。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>&lt; 1.5: 以前の振る舞い（詳細については Issue を参照）</li><li><code>&gt;=</code> 1.5: 振る舞いが変更される <code>-XXLanguage:-JvmIrEnabledByDefault</code> を使用すると、一時的に1.5以前の振る舞いに戻すことができます。</li></ul></blockquote><h3 id="charから数値、charから数字への変換を整理" tabindex="-1">Charから数値、Charから数字への変換を整理 <a class="header-anchor" href="#charから数値、charから数字への変換を整理" aria-label="Permalink to &quot;Charから数値、Charから数字への変換を整理&quot;">​</a></h3><blockquote><p><strong>問題</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-23451" target="_blank" rel="noreferrer">KT-23451</a></p><p><strong>コンポーネント</strong>: kotlin-stdlib</p><p><strong>互換性のない変更の種類</strong>: ソース互換性</p><p><strong>概要</strong>: Kotlin 1.5 から、Charから数値型への変換が非推奨になります。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.5: <code>Char.toInt()/toShort()/toLong()/toByte()/toDouble()/toFloat()</code> および <code>Long.toChar()</code> のような逆関数を非推奨にし、代替案を提案</li></ul></blockquote><h3 id="kotlin-text-関数における文字の大文字・小文字を区別しない比較の不整合" tabindex="-1">kotlin.text 関数における文字の大文字・小文字を区別しない比較の不整合 <a class="header-anchor" href="#kotlin-text-関数における文字の大文字・小文字を区別しない比較の不整合" aria-label="Permalink to &quot;kotlin.text 関数における文字の大文字・小文字を区別しない比較の不整合&quot;">​</a></h3><blockquote><p><strong>問題</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-45496" target="_blank" rel="noreferrer">KT-45496</a></p><p><strong>コンポーネント</strong>: kotlin-stdlib</p><p><strong>互換性のない変更の種類</strong>: 振る舞い互換性</p><p><strong>概要</strong>: Kotlin 1.5 から、<code>Char.equals</code> は大文字・小文字を区別しない比較において、まず文字の大文字化された変種が等しいかどうかを比較し、次にそれらの大文字化された変種の小文字化された変種（文字自体とは対照的に）が等しいかどうかを比較することで改善されます。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>&lt; 1.5: 以前の振る舞い（詳細については Issue を参照）</li><li>1.5: <code>Char.equals</code> 関数の振る舞いを変更</li></ul></blockquote><h3 id="デフォルトのロケール依存大文字・小文字変換apiを削除" tabindex="-1">デフォルトのロケール依存大文字・小文字変換APIを削除 <a class="header-anchor" href="#デフォルトのロケール依存大文字・小文字変換apiを削除" aria-label="Permalink to &quot;デフォルトのロケール依存大文字・小文字変換APIを削除&quot;">​</a></h3><blockquote><p><strong>問題</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-43023" target="_blank" rel="noreferrer">KT-43023</a></p><p><strong>コンポーネント</strong>: kotlin-stdlib</p><p><strong>互換性のない変更の種類</strong>: ソース互換性</p><p><strong>概要</strong>: Kotlin 1.5 から、<code>String.toUpperCase()</code> のようなデフォルトロケールに依存する大文字・小文字変換関数が非推奨になります。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.5: デフォルトロケールを持つ大文字・小文字変換関数を非推奨にし（詳細については Issue を参照）、代替案を提案</li></ul></blockquote><h3 id="コレクションのminおよびmax関数の戻り値の型を段階的に非nullableに変更" tabindex="-1">コレクションのminおよびmax関数の戻り値の型を段階的に非Nullableに変更 <a class="header-anchor" href="#コレクションのminおよびmax関数の戻り値の型を段階的に非nullableに変更" aria-label="Permalink to &quot;コレクションのminおよびmax関数の戻り値の型を段階的に非Nullableに変更&quot;">​</a></h3><blockquote><p><strong>問題</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-38854" target="_blank" rel="noreferrer">KT-38854</a></p><p><strong>コンポーネント</strong>: kotlin-stdlib (JVM)</p><p><strong>互換性のない変更の種類</strong>: ソース互換性</p><p><strong>概要</strong>: コレクションの<code>min</code>および<code>max</code>関数の戻り値の型は、1.6で非Nullableに変更されます。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.4: <code>...OrNull</code> 関数を同義語として導入し、影響を受けるAPIを非推奨にする（詳細については Issue を参照）</li><li>1.5.0: 影響を受けるAPIの非推奨レベルをエラーに引き上げ</li><li><code>&gt;=</code> 1.6: 影響を受けるAPIを非Nullableの戻り値の型で再導入</li></ul></blockquote><h3 id="浮動小数点型からshortおよびbyteへの変換の非推奨レベルを上げる" tabindex="-1">浮動小数点型からShortおよびByteへの変換の非推奨レベルを上げる <a class="header-anchor" href="#浮動小数点型からshortおよびbyteへの変換の非推奨レベルを上げる" aria-label="Permalink to &quot;浮動小数点型からShortおよびByteへの変換の非推奨レベルを上げる&quot;">​</a></h3><blockquote><p><strong>問題</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-30360" target="_blank" rel="noreferrer">KT-30360</a></p><p><strong>コンポーネント</strong>: kotlin-stdlib (JVM)</p><p><strong>互換性のない変更の種類</strong>: ソース互換性</p><p><strong>概要</strong>: Kotlin 1.4 で <code>WARNING</code> レベルで非推奨とされた浮動小数点型から <code>Short</code> および <code>Byte</code> への変換は、Kotlin 1.5.0 以降エラーになります。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.4: <code>Double.toShort()/toByte()</code> および <code>Float.toShort()/toByte()</code> を非推奨にし、代替案を提案</li><li>1.5.0: 非推奨レベルをエラーに引き上げ</li></ul></blockquote><h2 id="ツール" tabindex="-1">ツール <a class="header-anchor" href="#ツール" aria-label="Permalink to &quot;ツール&quot;">​</a></h2><h3 id="単一プロジェクトで複数のjvm版-kotlin-test-を混在させない" tabindex="-1">単一プロジェクトで複数のJVM版 <code>kotlin-test</code> を混在させない <a class="header-anchor" href="#単一プロジェクトで複数のjvm版-kotlin-test-を混在させない" aria-label="Permalink to &quot;単一プロジェクトで複数のJVM版 `kotlin-test` を混在させない&quot;">​</a></h3><blockquote><p><strong>問題</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-40225" target="_blank" rel="noreferrer">KT-40225</a></p><p><strong>コンポーネント</strong>: Gradle</p><p><strong>互換性のない変更の種類</strong>: 振る舞い互換性</p><p><strong>概要</strong>: 異なるテストフレームワーク用の相互排他的な<code>kotlin-test</code>の複数のバリアントが、推移的な依存関係によってもたらされた場合、プロジェクト内に存在し得ました。 1.5.0 以降、Gradleは異なるテストフレームワーク用の相互排他的な<code>kotlin-test</code>バリアントの混在を許可しません。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>&lt; 1.5: 異なるテストフレームワーク用の相互排他的な<code>kotlin-test</code>バリアントの混在が許可される</li><li><code>&gt;=</code> 1.5: 振る舞いが変更される。 Gradleは「Cannot select module with conflict on capability...」のような例外をスローします。考えられる解決策は以下の通りです。 <ul><li>推移的依存関係がもたらすものと同じ<code>kotlin-test</code>バリアントと、それに対応するテストフレームワークを使用します。</li><li><code>kotlin-test</code>バリアントを推移的に持ち込まない別の依存関係のバリアントを見つけ、使用したいテストフレームワークを使えるようにします。</li><li>使用したいテストフレームワークと同じものを使用する別の<code>kotlin-test</code>バリアントを推移的に持ち込む、別の依存関係のバリアントを見つけます。</li><li>推移的に持ち込まれるテストフレームワークを除外します。以下の例はJUnit 4を除外するためのものです。</li></ul><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">configurations { </span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    testImplementation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">get()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">exclude(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.kotlin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;kotlin-test-junit&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>テストフレームワークを除外した後、アプリケーションをテストします。動作しなくなった場合は、除外した変更を元に戻し、 ライブラリが使用しているのと同じテストフレームワークを使用し、あなたのテストフレームワークを除外してください。</li></ul></blockquote>',23))])}const f=o(k,[["render",g]]);export{m as __pageData,f as default};
