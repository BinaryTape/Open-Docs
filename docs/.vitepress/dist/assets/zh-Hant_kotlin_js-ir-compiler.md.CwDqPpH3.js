import{_ as n,c as t,o as l,ag as a,j as i,a as e}from"./chunks/framework.Bksy39di.js";const g=JSON.parse('{"title":"Kotlin/JS IR 編譯器","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/js-ir-compiler.md","filePath":"zh-Hant/kotlin/js-ir-compiler.md","lastUpdated":1754307826000}'),p={name:"zh-Hant/kotlin/js-ir-compiler.md"};function o(r,s,h,d,c,k){return l(),t("div",null,s[0]||(s[0]=[a(`<h1 id="kotlin-js-ir-編譯器" tabindex="-1">Kotlin/JS IR 編譯器 <a class="header-anchor" href="#kotlin-js-ir-編譯器" aria-label="Permalink to &quot;Kotlin/JS IR 編譯器&quot;">​</a></h1><p>Kotlin/JS IR 編譯器後端是 Kotlin/JS 創新開發的重點，並為該技術鋪平了前進的道路。</p><p>Kotlin/JS IR 編譯器後端採用了一種新的方法，而不是直接從 Kotlin 原始碼生成 JavaScript 程式碼。Kotlin 原始碼首先被轉換為 <a href="/zh-Hant/kotlin/whatsnew14#unified-backends-and-extensibility">Kotlin 中介表示 (IR)</a>，然後再編譯為 JavaScript。對於 Kotlin/JS 而言，這實現了大幅優化，並改善了舊版編譯器中存在的痛點，例如生成的程式碼大小（透過 <a href="#dead-code-elimination">死程式碼消除</a>）以及 JavaScript 和 TypeScript 生態系互通性等。</p><p>IR 編譯器後端從 Kotlin 1.4.0 開始透過 Kotlin Multiplatform Gradle 外掛程式提供。若要在您的專案中啟用它，請在您的 Gradle 建置指令碼中將編譯器類型傳遞給 <code>js</code> 函式：</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kotlin {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    js(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">IR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 或：LEGACY, BOTH</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        binaries</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">executable() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 不適用於 BOTH，詳情請參閱下方</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><code>IR</code> 使用新的 Kotlin/JS IR 編譯器後端。</li><li><code>LEGACY</code> 使用舊版編譯器後端。</li><li><code>BOTH</code> 使用新的 IR 編譯器和預設編譯器後端來編譯您的專案。請使用此模式來 <a href="#authoring-libraries-for-the-ir-compiler-with-backwards-compatibility">撰寫與兩個後端都相容的函式庫</a>。</li></ul><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>舊版編譯器後端自 Kotlin 1.8.0 起已棄用。從 Kotlin 1.9.0 開始，使用編譯器類型 <code>LEGACY</code> 或 <code>BOTH</code> 將導致錯誤。</p></div><p>編譯器類型也可以在 <code>gradle.properties</code> 檔案中設定，鍵為 <code>kotlin.js.compiler=ir</code>。然而，此行為會被 <code>build.gradle(.kts)</code> 中的任何設定覆寫。</p><h2 id="頂層屬性的延遲初始化" tabindex="-1">頂層屬性的延遲初始化 <a class="header-anchor" href="#頂層屬性的延遲初始化" aria-label="Permalink to &quot;頂層屬性的延遲初始化&quot;">​</a></h2><p>為了提升應用程式啟動效能，Kotlin/JS IR 編譯器會延遲初始化頂層屬性。透過這種方式，應用程式在載入時無需初始化其程式碼中使用的所有頂層屬性。它只初始化啟動時所需的屬性；其他屬性稍後會在實際執行使用它們的程式碼時才取得其值。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // intensive computations</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    result</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// value is computed upon the first usage</span></span></code></pre></div>`,11),i("p",null,[e("如果出於某種原因，您需要立即（在應用程式啟動時）初始化一個屬性，請使用 "),i("a",{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.js/-eager-initialization/",nullable:"true",target:"_blank",rel:"noreferrer"},[i("code",null,"@EagerInitialization")]),e(" 註解來標記它。")],-1),a(`<h2 id="開發二進位檔案的增量編譯" tabindex="-1">開發二進位檔案的增量編譯 <a class="header-anchor" href="#開發二進位檔案的增量編譯" aria-label="Permalink to &quot;開發二進位檔案的增量編譯&quot;">​</a></h2><p>JS IR 編譯器為<strong>開發二進位檔案</strong>提供了<strong>增量編譯模式</strong>，這可以加速開發流程。在此模式下，編譯器會在模組層級快取 <code>compileDevelopmentExecutableKotlinJs</code> Gradle 任務的結果。它會在後續編譯期間使用未變更原始檔的快取編譯結果，從而使編譯完成得更快，特別是在只有少量變更的情況下。</p><p>增量編譯預設為啟用。若要停用開發二進位檔案的增量編譯，請將以下行新增到專案的 <code>gradle.properties</code> 或 <code>local.properties</code> 中：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.incremental.js.ir=false // true by default</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>由於需要建立和填充快取，增量編譯模式下的乾淨建置通常會較慢。</p></div><h2 id="輸出模式" tabindex="-1">輸出模式 <a class="header-anchor" href="#輸出模式" aria-label="Permalink to &quot;輸出模式&quot;">​</a></h2><p>您可以選擇 JS IR 編譯器如何在您的專案中輸出 <code>.js</code> 檔案：</p><ul><li><p><strong>每模組一個</strong>。預設情況下，JS 編譯器會為專案的每個模組輸出單獨的 <code>.js</code> 檔案作為編譯結果。</p></li><li><p><strong>每專案一個</strong>。您可以將整個專案編譯為單一的 <code>.js</code> 檔案，方法是將以下行新增到 <code>gradle.properties</code> 中：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.js.ir.output.granularity=whole-program // &#39;per-module&#39; is the default</span></span></code></pre></div></li><li><p><strong>每檔案一個</strong>。您可以設定更精細的輸出，為每個 Kotlin 檔案生成一個 (或兩個，如果檔案包含匯出宣告) JavaScript 檔案。若要啟用每檔案編譯模式：</p><ol><li><p>將 <code>useEsModules()</code> 函式新增到您的建置檔案中以支援 ECMAScript 模組：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(IR) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        useEsModules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Enables ES2015 modules</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        browser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>或者，您可以使用 <code>es2015</code> <a href="/zh-Hant/kotlin/js-project-setup#support-for-es2015-features">編譯目標</a> 來支援專案中的 ES2015 功能。</p></li><li><p>應用 <code>-Xir-per-file</code> 編譯器選項或更新您的 <code>gradle.properties</code> 檔案：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># gradle.properties</span></span>
<span class="line"><span>kotlin.js.ir.output.granularity=per-file // &#39;per-module&#39; is the default</span></span></code></pre></div></li></ol></li></ul><h2 id="生產環境中成員名稱的最小化" tabindex="-1">生產環境中成員名稱的最小化 <a class="header-anchor" href="#生產環境中成員名稱的最小化" aria-label="Permalink to &quot;生產環境中成員名稱的最小化&quot;">​</a></h2><p>Kotlin/JS IR 編譯器利用其關於 Kotlin 類別和函式關係的內部資訊，來應用更高效的最小化，縮短函式、屬性和類別的名稱。這減少了產生套件化應用程式的大小。</p><p>當您在 <a href="/zh-Hant/kotlin/js-project-setup#building-executables">生產</a> 模式下建置您的 Kotlin/JS 應用程式時，會自動應用此類型的最小化，並且預設為啟用。若要停用成員名稱最小化，請使用 <code>-Xir-minimized-member-names</code> 編譯器選項：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(IR) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        compilations.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            compileTaskProvider.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                compilerOptions.freeCompilerArgs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xir-minimized-member-names=false&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="死程式碼消除" tabindex="-1">死程式碼消除 <a class="header-anchor" href="#死程式碼消除" aria-label="Permalink to &quot;死程式碼消除&quot;">​</a></h2><p><a href="https://wikipedia.org/wiki/Dead_code_elimination" target="_blank" rel="noreferrer">死程式碼消除</a> (DCE) 透過移除未使用的屬性、函式和類別來減少產生的 JavaScript 程式碼的大小。</p><p>未使用的宣告可能出現在以下情況：</p><ul><li>函式被行內化並且從未被直接呼叫（除了少數情況外總是如此）。</li><li>模組使用了共享函式庫。如果沒有 DCE，您未使用的函式庫部分仍會包含在產生的套件中。例如，Kotlin 標準函式庫包含用於操作列表、陣列、字元序列、DOM 的轉接器等函式。所有這些功能將需要大約 1.3 MB 的 JavaScript 檔案。一個簡單的「Hello, world」應用程式只需要主控台常式，而整個檔案僅需幾千位元組。</li></ul><p>在 Kotlin/JS 編譯器中，DCE 會自動處理：</p><ul><li><p>DCE 在<strong>開發</strong>套件化任務中停用，這對應於以下 Gradle 任務：</p><ul><li><code>jsBrowserDevelopmentRun</code></li><li><code>jsBrowserDevelopmentWebpack</code></li><li><code>jsNodeDevelopmentRun</code></li><li><code>compileDevelopmentExecutableKotlinJs</code></li><li><code>compileDevelopmentLibraryKotlinJs</code></li><li>其他名稱中包含「development」的 Gradle 任務</li></ul></li><li><p>如果您建置<strong>生產</strong>套件，DCE 會啟用，這對應於以下 Gradle 任務：</p><ul><li><code>jsBrowserProductionRun</code></li><li><code>jsBrowserProductionWebpack</code></li><li><code>compileProductionExecutableKotlinJs</code></li><li><code>compileProductionLibraryKotlinJs</code></li><li>其他名稱中包含「production」的 Gradle 任務</li></ul></li></ul><p>使用 <a href="/zh-Hant/kotlin/js-to-kotlin-interop#jsexport-annotation"><code>@JsExport</code></a> 註解，您可以指定希望 DCE 視為根的宣告。</p><h2 id="預覽-typescript-宣告檔-d-ts-的生成" tabindex="-1">預覽：TypeScript 宣告檔 (d.ts) 的生成 <a class="header-anchor" href="#預覽-typescript-宣告檔-d-ts-的生成" aria-label="Permalink to &quot;預覽：TypeScript 宣告檔 (d.ts) 的生成&quot;">​</a></h2><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>TypeScript 宣告檔 (<code>d.ts</code>) 的生成是 <a href="/zh-Hant/kotlin/components-stability">實驗性</a> 功能。它可能隨時被刪除或更改。需要選擇啟用（詳情見下文），您應僅將其用於評估目的。我們非常感謝您在 <a href="https://youtrack.jetbrains.com/issues?q=%23%7BKJS:%20d.ts%20generation%7D" target="_blank" rel="noreferrer">YouTrack</a> 上提供相關回饋。</p></div><p>Kotlin/JS IR 編譯器能夠從您的 Kotlin 程式碼生成 TypeScript 定義。這些定義可供 JavaScript 工具和 IDE 在開發混合應用程式時使用，以提供自動完成、支援靜態分析器，並使 Kotlin 程式碼更容易整合到 JavaScript 和 TypeScript 專案中。</p><p>如果您的專案產生可執行檔案 (<code>binaries.executable()</code>)，Kotlin/JS IR 編譯器會收集任何標記有 <a href="/zh-Hant/kotlin/js-to-kotlin-interop#jsexport-annotation"><code>@JsExport</code></a> 的頂層宣告，並自動在 <code>.d.ts</code> 檔案中生成 TypeScript 定義。</p><p>如果您想生成 TypeScript 定義，您必須在 Gradle 建置檔案中明確配置此項。在 <a href="/zh-Hant/kotlin/js-project-setup#execution-environments"><code>js</code> 區段</a> 中將 <code>generateTypeScriptDefinitions()</code> 新增到您的 <code>build.gradle.kts</code> 檔案。例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        binaries.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        browser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        generateTypeScriptDefinitions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>這些定義可以在 <code>build/js/packages/&lt;package_name&gt;/kotlin</code> 中找到，與對應的未經 webpack 打包的 JavaScript 程式碼並存。</p><h2 id="ir-編譯器的當前限制" tabindex="-1">IR 編譯器的當前限制 <a class="header-anchor" href="#ir-編譯器的當前限制" aria-label="Permalink to &quot;IR 編譯器的當前限制&quot;">​</a></h2><p>新 IR 編譯器後端的一個主要變化是<strong>不具備與預設後端的二進位相容性</strong>。使用新 IR 編譯器建立的函式庫使用 <a href="/zh-Hant/kotlin/native-libraries#library-format"><code>klib</code> 格式</a>，無法從預設後端使用。同時，使用舊版編譯器建立的函式庫是帶有 <code>js</code> 檔案的 <code>jar</code>，無法從 IR 後端使用。</p><p>如果您想為您的專案使用 IR 編譯器後端，您需要<strong>將所有 Kotlin 依賴項更新到支援此新後端的版本</strong>。JetBrains 為 Kotlin 1.4+ 發佈的 Kotlin/JS 目標函式庫已包含與新 IR 編譯器後端一起使用所需的所有構件。</p><p><strong>如果您是函式庫作者</strong>，希望提供與當前編譯器後端以及新 IR 編譯器後端的相容性，請另外查閱 <a href="#authoring-libraries-for-the-ir-compiler-with-backwards-compatibility">關於為 IR 編譯器撰寫函式庫</a> 部分。</p><p>IR 編譯器後端與預設後端相比也存在一些差異。嘗試新後端時，最好留意這些可能的陷阱。</p><ul><li>某些<strong>依賴預設後端特定特性</strong>的函式庫，例如 <code>kotlin-wrappers</code>，可能會顯示一些問題。您可以在 <a href="https://youtrack.jetbrains.com/issue/KT-40525" target="_blank" rel="noreferrer">YouTrack</a> 上追蹤調查和進度。</li><li>IR 後端<strong>預設不會使 Kotlin 宣告對 JavaScript 可用</strong>。若要使 Kotlin 宣告對 JavaScript 可見，它們<strong>必須</strong>使用 <a href="/zh-Hant/kotlin/js-to-kotlin-interop#jsexport-annotation"><code>@JsExport</code></a> 註解。</li></ul><h2 id="將現有專案遷移到-ir-編譯器" tabindex="-1">將現有專案遷移到 IR 編譯器 <a class="header-anchor" href="#將現有專案遷移到-ir-編譯器" aria-label="Permalink to &quot;將現有專案遷移到 IR 編譯器&quot;">​</a></h2><p>由於兩種 Kotlin/JS 編譯器之間存在顯著差異，使您的 Kotlin/JS 程式碼與 IR 編譯器協同工作可能需要進行一些調整。了解如何在 <a href="/zh-Hant/kotlin/js-ir-migration">Kotlin/JS IR 編譯器遷移指南</a> 中將現有 Kotlin/JS 專案遷移到 IR 編譯器。</p><h2 id="為-ir-編譯器撰寫具備向下相容性的函式庫" tabindex="-1">為 IR 編譯器撰寫具備向下相容性的函式庫 <a class="header-anchor" href="#為-ir-編譯器撰寫具備向下相容性的函式庫" aria-label="Permalink to &quot;為 IR 編譯器撰寫具備向下相容性的函式庫&quot;">​</a></h2><p>如果您是函式庫維護者，希望提供與預設後端以及新 IR 編譯器後端的相容性，則編譯器選擇設定可用，允許您為兩個後端建立構件，使您能夠保持與現有使用者的相容性，同時為下一代 Kotlin 編譯器提供支援。這種所謂的 <code>both</code> 模式可以透過在 <code>gradle.properties</code> 檔案中設定 <code>kotlin.js.compiler=both</code> 來開啟，也可以在 <code>build.gradle(.kts)</code> 檔案中的 <code>js</code> 區塊內設定為專案特定選項之一：</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kotlin {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    js(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BOTH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在 <code>both</code> 模式下，當從您的原始碼建置函式庫時，IR 編譯器後端和預設編譯器後端都會被使用（因此得名）。這意味著將生成包含 Kotlin IR 的 <code>klib</code> 檔案以及用於預設編譯器的 <code>jar</code> 檔案。當在相同的 Maven 座標下發佈時，Gradle 將根據使用案例自動選擇正確的構件 – 舊版編譯器使用 <code>js</code>，新版編譯器使用 <code>klib</code>。這使您能夠為使用兩種編譯器後端任一者的專案編譯和發佈您的函式庫。</p>`,38)]))}const u=n(p,[["render",o]]);export{g as __pageData,u as default};
