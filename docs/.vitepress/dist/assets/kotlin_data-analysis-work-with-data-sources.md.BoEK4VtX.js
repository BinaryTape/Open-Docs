import{_ as s,a,b as t,c as e,d as l}from"./chunks/refined-data.Bho3Y6Lq.js";import{_ as n,c as h,o as p,ag as k}from"./chunks/framework.Bksy39di.js";const u=JSON.parse('{"title":"从文件中检索数据","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/data-analysis-work-with-data-sources.md","filePath":"kotlin/data-analysis-work-with-data-sources.md","lastUpdated":1754307826000}'),o={name:"kotlin/data-analysis-work-with-data-sources.md"};function r(d,i,E,c,g,y){return p(),h("div",null,i[0]||(i[0]=[k(`<h1 id="从文件中检索数据" tabindex="-1">从文件中检索数据 <a class="header-anchor" href="#从文件中检索数据" aria-label="Permalink to &quot;从文件中检索数据&quot;">​</a></h1><p><a href="/kotlin/kotlin-notebook-overview">Kotlin Notebook</a> 结合 <a href="https://kotlin.github.io/dataframe/gettingstarted.html" target="_blank" rel="noreferrer">Kotlin DataFrame 库</a>，使你能够处理非结构化数据和结构化数据。这种组合提供了将 TXT 文件等非结构化数据转换为结构化数据集的灵活性。</p><p>对于数据转换，你可以使用 <a href="https://kotlin.github.io/dataframe/adddf.html" target="_blank" rel="noreferrer"><code>add</code></a>、<a href="https://kotlin.github.io/dataframe/split.html" target="_blank" rel="noreferrer"><code>split</code></a>、<a href="https://kotlin.github.io/dataframe/convert.html" target="_blank" rel="noreferrer"><code>convert</code></a> 和 <a href="https://kotlin.github.io/dataframe/parse.html" target="_blank" rel="noreferrer"><code>parse</code></a> 等方法。此外，该工具集支持从各种结构化文件格式（包括 CSV、JSON、XLS、XLSX 和 Apache Arrow）中检索和操作数据。</p><p>在本指南中，你将通过多个示例学习如何检索、精炼和处理数据。</p><h2 id="开始之前" tabindex="-1">开始之前 <a class="header-anchor" href="#开始之前" aria-label="Permalink to &quot;开始之前&quot;">​</a></h2><p>Kotlin Notebook 依赖于 <a href="https://plugins.jetbrains.com/plugin/16340-kotlin-notebook" target="_blank" rel="noreferrer">Kotlin Notebook 插件</a>，该插件默认捆绑并启用在 IntelliJ IDEA 中。</p><p>如果 Kotlin Notebook 特性不可用，请确保插件已启用。关于更多信息，请参见 <a href="/kotlin/kotlin-notebook-set-up-env">设置环境</a>。</p><p>创建新的 Kotlin Notebook：</p><ol><li><p>选择 <strong>File</strong> | <strong>New</strong> | <strong>Kotlin Notebook</strong>。</p></li><li><p>在 Kotlin Notebook 中，通过运行以下命令导入 Kotlin DataFrame 库：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">use dataframe</span></span></code></pre></div></li></ol><h2 id="从文件中检索数据-1" tabindex="-1">从文件中检索数据 <a class="header-anchor" href="#从文件中检索数据-1" aria-label="Permalink to &quot;从文件中检索数据&quot;">​</a></h2><p>要在 Kotlin Notebook 中从文件中检索数据：</p><ol><li><p>打开你的 Kotlin Notebook 文件 (<code>.ipynb</code>)。</p></li><li><p>通过在 Notebook 开头的代码单元格中添加 <code>%use dataframe</code> 来导入 Kotlin DataFrame 库。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>确保在运行任何依赖于 Kotlin DataFrame 库的其他代码单元格之前，先运行包含 <code>%use dataframe</code> 行的代码单元格。</p></div></li><li><p>使用 Kotlin DataFrame 库的 <a href="https://kotlin.github.io/dataframe/read.html" target="_blank" rel="noreferrer"><code>.read()</code></a> 函数检索数据。例如，要读取 CSV 文件，请使用：<code>DataFrame.read(&quot;example.csv&quot;)</code>。</p></li></ol><p><code>.read()</code> 函数会根据文件扩展名和内容自动检测输入格式。你还可以添加其他实参来自定义该函数，例如使用 <code>delimiter = &#39;;&#39;</code> 指定分隔符。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>关于更多文件格式和各种读取函数的全面概述，请参见 <a href="https://kotlin.github.io/dataframe/read.html" target="_blank" rel="noreferrer">Kotlin DataFrame 库文档</a>。</p></div><h2 id="显示数据" tabindex="-1">显示数据 <a class="header-anchor" href="#显示数据" aria-label="Permalink to &quot;显示数据&quot;">​</a></h2><p>将数据 <a href="#retrieve-data-from-a-file">导入到 Notebook</a> 后，你可以轻松地将其存储到变量中，并通过在代码单元格中运行以下代码来访问它：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dfJson </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DataFrame.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jsonFile.json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dfJson</span></span></code></pre></div><p>这段代码显示了你选择的文件中的数据，例如 CSV、JSON、XLS、XLSX 或 Apache Arrow。</p><p><img src="`+s+'" alt="Display data" width="700"></p><p>要深入了解数据的结构或 schema，请将 <code>.schema()</code> 函数应用于你的 DataFrame 变量。例如，<code>dfJson.schema()</code> 会列出 JSON 数据集中每列的类型。</p><p><img src="'+a+'" alt="Schema example" width="700"></p><p>你还可以使用 Kotlin Notebook 中的自动补全特性，快速访问和操作 DataFrame 的属性。加载数据后，只需键入 DataFrame 变量并后跟一个点，即可查看可用列及其类型的列表。</p><p><img src="'+t+`" alt="Available properties" width="700"></p><h2 id="精炼数据" tabindex="-1">精炼数据 <a class="header-anchor" href="#精炼数据" aria-label="Permalink to &quot;精炼数据&quot;">​</a></h2><p>在 Kotlin DataFrame 库中可用于精炼数据集的各种操作中，主要示例包括 <a href="https://kotlin.github.io/dataframe/group.html" target="_blank" rel="noreferrer">分组</a>、<a href="https://kotlin.github.io/dataframe/filter.html" target="_blank" rel="noreferrer">过滤</a>、<a href="https://kotlin.github.io/dataframe/update.html" target="_blank" rel="noreferrer">更新</a> 和 <a href="https://kotlin.github.io/dataframe/add.html" target="_blank" rel="noreferrer">添加新列</a>。这些函数对于数据分析至关重要，使你能够有效地组织、清理和转换数据。</p><p>让我们看一个示例，其中数据包含电影标题及其对应的发行年份，它们位于同一个单元格中。目标是精炼此数据集，以便于分析：</p><ol><li><p>使用 <code>.read()</code> 函数将数据加载到 Notebook 中。此示例涉及从名为 <code>movies.csv</code> 的 CSV 文件读取数据并创建名为 <code>movies</code> 的 DataFrame：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> movies </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DataFrame.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;movies.csv&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></li><li><p>使用正则表达式从电影标题中提取发行年份，并将其添加为新列：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> moviesWithYear </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> movies</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;year&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">d{4}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toRegex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">findAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(title)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lastOrNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            ?.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            ?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            ?: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre></div></li><li><p>通过从每个电影标题中移除发行年份来修改标题。这可以清理标题以保持一致性：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> moviesTitle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> moviesWithYear</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;title&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">s*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">d{4}</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">s*$&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toRegex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(title, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre></div></li><li><p>使用 <code>filter</code> 方法聚焦于特定数据。在此示例中，数据集被过滤，以聚焦于 1996 年之后发行的电影：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> moviesNew </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> moviesWithYear.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { year </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1996</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">moviesNew</span></span></code></pre></div></li></ol><p>作为比较，以下是精炼前的数据集：</p><p><img src="`+e+'" alt="Original dataset" width="700"></p><p>精炼后的数据集：</p><p><img src="'+l+`" alt="Data refinement result" width="700"></p><p>这是一个实际演示，说明了如何在 Kotlin 中使用 Kotlin DataFrame 库的 <code>add</code>、<code>update</code> 和 <code>filter</code> 等方法来有效地精炼和分析数据。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>关于更多用例和详细示例，请参见 <a href="https://github.com/Kotlin/dataframe/tree/master/examples" target="_blank" rel="noreferrer">Kotlin Dataframe 示例</a>。</p></div><h2 id="保存-dataframe" tabindex="-1">保存 DataFrame <a class="header-anchor" href="#保存-dataframe" aria-label="Permalink to &quot;保存 DataFrame&quot;">​</a></h2><p>在 Kotlin Notebook 中使用 Kotlin DataFrame 库 <a href="#refine-data">精炼数据</a> 后，你可以轻松导出已处理的数据。你可以利用各种 <a href="https://kotlin.github.io/dataframe/write.html" target="_blank" rel="noreferrer"><code>.write()</code></a> 函数，它们支持保存为多种格式，包括 CSV、JSON、XLS、XLSX、Apache Arrow，甚至是 HTML 表格。这对于分享你的发现、创建报告或使你的数据可用于进一步分析特别有用。</p><p>以下是你如何过滤 DataFrame、移除列、将精炼后的数据保存到 JSON 文件以及在浏览器中打开 HTML 表格的方法：</p><ol><li><p>在 Kotlin Notebook 中，使用 <code>.read()</code> 函数将名为 <code>movies.csv</code> 的文件加载到名为 <code>moviesDf</code> 的 DataFrame 中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> moviesDf </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DataFrame.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;movies.csv&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></li><li><p>使用 <code>.filter</code> 方法过滤 DataFrame，使其仅包含属于“动作”类型的电影：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> actionMoviesDf </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> moviesDf.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { genres.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Action&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span></code></pre></div></li><li><p>使用 <code>.remove</code> 从 DataFrame 中移除 <code>movieId</code> 列：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> refinedMoviesDf </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> actionMoviesDf.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">remove</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { movieId }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">refinedMoviesDf</span></span></code></pre></div></li><li><p>Kotlin DataFrame 库提供各种写入函数，以不同格式保存数据。在此示例中，使用 <a href="https://kotlin.github.io/dataframe/write.html#writing-to-json" target="_blank" rel="noreferrer"><code>.writeJson()</code></a> 函数将修改后的 <code>movies.csv</code> 保存为 JSON 文件：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">refinedMoviesDf.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeJson</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;movies.json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></li><li><p>使用 <code>.toStandaloneHTML()</code> 函数将 DataFrame 转换为独立的 HTML 表格，并在默认网页浏览器中打开它：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">refinedMoviesDf.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toStandaloneHTML</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DisplayConfiguration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rowsLimit </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">openInBrowser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div></li></ol><h2 id="接下来" tabindex="-1">接下来 <a class="header-anchor" href="#接下来" aria-label="Permalink to &quot;接下来&quot;">​</a></h2><ul><li>使用 <a href="https://kotlin.github.io/kandy/examples.html" target="_blank" rel="noreferrer">Kandy 库</a> 探索数据可视化</li><li>在 <a href="/kotlin/data-analysis-visualization">Kotlin Notebook 中使用 Kandy 进行数据可视化</a> 中查找有关数据可视化的更多信息</li><li>关于 Kotlin 中可用于数据科学和分析的工具和资源的广泛概述，请参见 <a href="/kotlin/data-analysis-libraries">Kotlin 和 Java 数据分析库</a></li></ul>`,39)]))}const b=n(o,[["render",r]]);export{u as __pageData,b as default};
