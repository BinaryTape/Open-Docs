import{_ as i,c as a,o as n,ag as t}from"./chunks/framework.Bksy39di.js";const E=JSON.parse('{"title":"데이터베이스 연결 및 데이터 검색","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kotlin/data-analysis-connect-to-db.md","filePath":"ko/kotlin/data-analysis-connect-to-db.md","lastUpdated":1754307826000}'),l={name:"ko/kotlin/data-analysis-connect-to-db.md"};function e(h,s,p,k,r,o){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="데이터베이스-연결-및-데이터-검색" tabindex="-1">데이터베이스 연결 및 데이터 검색 <a class="header-anchor" href="#데이터베이스-연결-및-데이터-검색" aria-label="Permalink to &quot;데이터베이스 연결 및 데이터 검색&quot;">​</a></h1><p><a href="/ko/kotlin/kotlin-notebook-overview">Kotlin Notebook</a>은 MariaDB, PostgreSQL, MySQL, SQLite와 같은 다양한 유형의 SQL 데이터베이스에 연결하고 데이터를 검색하는 기능을 제공합니다. <a href="https://kotlin.github.io/dataframe/gettingstarted.html" target="_blank" rel="noreferrer">Kotlin DataFrame 라이브러리</a>를 활용하여 Kotlin Notebook은 데이터베이스에 연결하고, SQL 쿼리를 실행하며, 추가 작업을 위해 결과를 가져올 수 있습니다.</p><p>자세한 예시는 <a href="https://github.com/zaleslaw/KotlinDataFrame-SQL-Examples/blob/master/notebooks/imdb.ipynb" target="_blank" rel="noreferrer">KotlinDataFrame SQL Examples GitHub 저장소의 Notebook</a>을 참조하세요.</p><h2 id="시작하기-전에" tabindex="-1">시작하기 전에 <a class="header-anchor" href="#시작하기-전에" aria-label="Permalink to &quot;시작하기 전에&quot;">​</a></h2><p>Kotlin Notebook은 <a href="https://plugins.jetbrains.com/plugin/16340-kotlin-notebook" target="_blank" rel="noreferrer">Kotlin Notebook 플러그인</a>에 의존하며, 이 플러그인은 IntelliJ IDEA에 기본적으로 번들되어 활성화되어 있습니다.</p><p>Kotlin Notebook 기능이 사용 가능하지 않다면, 플러그인이 활성화되어 있는지 확인하세요. 자세한 내용은 <a href="/ko/kotlin/kotlin-notebook-set-up-env">환경 설정</a>을 참조하세요.</p><p>새 Kotlin Notebook 생성:</p><ol><li><strong>File</strong> | <strong>New</strong> | <strong>Kotlin Notebook</strong>를 선택합니다.</li><li>MariaDB 또는 MySQL과 같은 SQL 데이터베이스에 접근할 수 있는지 확인하세요.</li></ol><h2 id="데이터베이스-연결" tabindex="-1">데이터베이스 연결 <a class="header-anchor" href="#데이터베이스-연결" aria-label="Permalink to &quot;데이터베이스 연결&quot;">​</a></h2><p>SQL 데이터베이스에 연결하고 상호 작용하려면 <a href="https://kotlin.github.io/dataframe/gettingstarted.html" target="_blank" rel="noreferrer">Kotlin DataFrame 라이브러리</a>의 특정 함수를 사용할 수 있습니다. <code>DatabaseConfiguration</code>을 사용하여 데이터베이스에 연결하고 <code>getSchemaForAllSqlTables()</code>를 사용하여 데이터베이스 내 모든 테이블의 스키마를 검색할 수 있습니다.</p><p>예시를 살펴보겠습니다.</p><ol><li><p>Kotlin Notebook 파일(<code>.ipynb</code>)을 엽니다.</p></li><li><p>JDBC (Java Database Connectivity) 드라이버에 대한 종속성을 추가하고 JDBC 드라이버 버전을 지정합니다. 이 예시에서는 MariaDB를 사용합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">USE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.mariadb.jdbc:mariadb-java-client:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$version</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>데이터 조작 작업에 필수적인 Kotlin DataFrame 라이브러리와 SQL 연결 및 유틸리티 함수에 필요한 Java 라이브러리를 임포트합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">use dataframe</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> java.sql.DriverManager</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> java.util.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span></code></pre></div></li><li><p><code>DatabaseConfiguration</code> 클래스를 사용하여 URL, 사용자 이름, 비밀번호를 포함한 데이터베이스 연결 매개변수를 정의합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> URL </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;YOUR_URL&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> USER_NAME </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;YOUR_USERNAME&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PASSWORD </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;YOUR_PASSWORD&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dbConfig </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DatabaseConfiguration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(URL, USER_NAME, PASSWORD)</span></span></code></pre></div></li><li><p>연결되면 <code>getSchemaForAllSqlTables()</code> 함수를 사용하여 데이터베이스 내 각 테이블의 스키마 정보를 가져와 표시합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dataschemas </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DataFrame.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getSchemaForAllSqlTables</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dbConfig)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dataschemas.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;---Yet another table schema---&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(it)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>SQL 데이터베이스 연결에 대한 자세한 내용은 <a href="https://kotlin.github.io/dataframe/readsqldatabases.html" target="_blank" rel="noreferrer">Kotlin DataFrame 문서의 SQL 데이터베이스에서 읽기</a>를 참조하세요.</p></div></li></ol><h2 id="데이터-검색-및-조작" tabindex="-1">데이터 검색 및 조작 <a class="header-anchor" href="#데이터-검색-및-조작" aria-label="Permalink to &quot;데이터 검색 및 조작&quot;">​</a></h2><p><a href="#connect-to-database">SQL 데이터베이스 연결</a>을 설정한 후, Kotlin DataFrame 라이브러리를 활용하여 Kotlin Notebook에서 데이터를 검색하고 조작할 수 있습니다. <code>readSqlTable()</code> 함수를 사용하여 데이터를 검색할 수 있습니다. 데이터를 조작하려면 <a href="https://kotlin.github.io/dataframe/filter.html" target="_blank" rel="noreferrer"><code>filter</code></a>, <a href="https://kotlin.github.io/dataframe/groupby.html" target="_blank" rel="noreferrer"><code>groupBy</code></a>, <a href="https://kotlin.github.io/dataframe/convert.html" target="_blank" rel="noreferrer"><code>convert</code></a>와 같은 메서드를 사용할 수 있습니다.</p><p>IMDB 데이터베이스에 연결하고 Quentin Tarantino 감독이 연출한 영화에 대한 데이터를 검색하는 예시를 살펴보겠습니다:</p><ol><li><p><code>readSqlTable()</code> 함수를 사용하여 &quot;movies&quot; 테이블에서 데이터를 검색하고, 효율성을 위해 쿼리를 처음 100개 레코드로 제한하도록 <code>limit</code>을 설정합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dfs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DataFrame.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readSqlTable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dbConfig, tableName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;movies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, limit </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></li><li><p>SQL 쿼리를 사용하여 Quentin Tarantino 감독이 연출한 영화와 관련된 특정 데이터셋을 검색합니다. 이 쿼리는 영화 세부 정보를 선택하고 각 영화의 장르를 결합합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> props </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Properties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">props.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, USER_NAME)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">props.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;password&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, PASSWORD)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TARANTINO_FILMS_SQL_QUERY </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    SELECT name, year, rank, GROUP_CONCAT(genre) as &quot;genres&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    FROM movies JOIN movies_directors ON movie_id = movies.id</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    JOIN directors ON directors.id=director_id LEFT JOIN movies_genres ON movies.id = movies_genres.movie_id</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    WHERE directors.first_name = &quot;Quentin&quot; AND directors.last_name = &quot;Tarantino&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    GROUP BY name, year, rank</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    ORDER BY year</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Retrieves a list of Quentin Tarantino&#39;s movies, including their name, year, rank, and a concatenated string of all genres. </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// The results are grouped by name, year, rank, and sorted by year.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dfTarantinoMovies: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DataFrame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;*&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DriverManager.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getConnection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(URL, props).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { connection </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   connection.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createStatement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { st </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      st.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">executeQuery</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TARANTINO_FILMS_SQL_QUERY).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { rs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dfTarantinoFilmsSchema </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DataFrame.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getSchemaForResultSet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rs, connection)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         dfTarantinoFilmsSchema.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         dfTarantinoMovies </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DataFrame.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readResultSet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rs, connection)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         dfTarantinoMovies</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>Tarantino 영화 데이터셋을 가져온 후, 데이터를 추가로 조작하고 필터링할 수 있습니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> df </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dfTarantinoMovies</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Replaces any missing values in the &#39;year&#39; column with 0.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fillNA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { year }.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Converts the &#39;year&#39; column to integers.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">convert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { year }.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Filters the data to include only movies released after the year 2000.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { year </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">df</span></span></code></pre></div></li></ol><p>결과 출력은 <a href="https://kotlin.github.io/dataframe/fill.html#fillna" target="_blank" rel="noreferrer"><code>fillNA</code></a> 메서드를 사용하여 year 열의 누락된 값을 0으로 대체한 DataFrame입니다. year 열은 <a href="https://kotlin.github.io/dataframe/convert.html" target="_blank" rel="noreferrer"><code>convert</code></a> 메서드로 정수 값으로 변환되고, <a href="https://kotlin.github.io/dataframe/filter.html" target="_blank" rel="noreferrer"><code>filter</code></a> 메서드를 사용하여 2000년 이후의 행만 포함하도록 데이터가 필터링됩니다.</p><h2 id="kotlin-notebook에서-데이터-분석" tabindex="-1">Kotlin Notebook에서 데이터 분석 <a class="header-anchor" href="#kotlin-notebook에서-데이터-분석" aria-label="Permalink to &quot;Kotlin Notebook에서 데이터 분석&quot;">​</a></h2><p><a href="#connect-to-database">SQL 데이터베이스 연결</a>을 설정한 후, <a href="https://kotlin.github.io/dataframe/gettingstarted.html" target="_blank" rel="noreferrer">Kotlin DataFrame 라이브러리</a>를 활용하여 Kotlin Notebook에서 심층적인 데이터 분석을 수행할 수 있습니다. 여기에는 데이터 그룹화, 정렬 및 집계 기능이 포함되어 데이터 내의 패턴을 발견하고 이해하는 데 도움이 됩니다.</p><p>영화 데이터베이스에서 배우 데이터를 분석하는 예시를 살펴보겠습니다. 이 예시는 배우의 가장 자주 나타나는 이름에 초점을 맞춥니다:</p><ol><li><p><a href="https://kotlin.github.io/dataframe/readsqldatabases.html#reading-specific-tables" target="_blank" rel="noreferrer"><code>readSqlTable()</code></a> 함수를 사용하여 &quot;actors&quot; 테이블에서 데이터를 추출합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> actorDf </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DataFrame.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readSqlTable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dbConfig, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;actors&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></li><li><p>검색된 데이터를 처리하여 가장 일반적인 배우의 이름 상위 20개를 식별합니다. 이 분석에는 여러 DataFrame 메서드가 포함됩니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> top20ActorNames </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> actorDf</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Groups the data by the first_name column to organize it based on actor first names.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">groupBy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { first_name }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Counts the occurrences of each unique first name, providing a frequency distribution.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Sorts the results in descending order of count to identify the most common names.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sortByDesc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;count&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Selects the top 20 most frequent names for analysis.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">take</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">top20ActorNames</span></span></code></pre></div></li></ol><h2 id="다음-단계" tabindex="-1">다음 단계 <a class="header-anchor" href="#다음-단계" aria-label="Permalink to &quot;다음 단계&quot;">​</a></h2><ul><li><a href="https://kotlin.github.io/kandy/examples.html" target="_blank" rel="noreferrer">Kandy 라이브러리</a>를 사용한 데이터 시각화 탐색</li><li><a href="/ko/kotlin/data-analysis-visualization">Kandy를 사용한 Kotlin Notebook의 데이터 시각화</a>에서 데이터 시각화에 대한 추가 정보를 찾으세요.</li><li>Kotlin의 데이터 과학 및 분석에 사용할 수 있는 도구와 리소스에 대한 광범위한 개요는 <a href="/ko/kotlin/data-analysis-libraries">데이터 분석을 위한 Kotlin 및 Java 라이브러리</a>를 참조하세요.</li></ul>`,23)]))}const g=i(l,[["render",e]]);export{E as __pageData,g as default};
