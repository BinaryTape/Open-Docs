import{_ as E,C as h,c as g,o as c,j as i,G as a,ag as p,a as e,w as n}from"./chunks/framework.Bksy39di.js";const q=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ja/ktor/server-session-auth.md","filePath":"ja/ktor/server-session-auth.md","lastUpdated":1755457140000}'),u={name:"ja/ktor/server-session-auth.md"};function y(F,s,v,b,m,f){const r=h("show-structure"),o=h("Links"),d=h("tldr"),t=h("code-block"),l=h("TabItem"),k=h("Tabs");return c(),g("div",null,[s[7]||(s[7]=i("h1",{id:"ktor-serverにおけるセッション認証",tabindex:"-1"},[e("Ktor Serverにおけるセッション認証 "),i("a",{class:"header-anchor",href:"#ktor-serverにおけるセッション認証","aria-label":'Permalink to "Ktor Serverにおけるセッション認証"'},"​")],-1)),a(r,{for:"chapter",depth:"2"}),a(d,null,{default:n(()=>[s[3]||(s[3]=i("p",null,[i("b",null,"必須の依存関係"),e(": "),i("code",null,"io.ktor:ktor-server-auth"),e(", "),i("code",null,"io.ktor:ktor-server-sessions")],-1)),s[4]||(s[4]=i("p",null,[i("b",null,"コード例"),e(": "),i("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/auth-form-session"}," auth-form-session ")],-1)),i("p",null,[i("b",null,[a(o,{href:"/ktor/server-native",summary:"KtorはKotlin/Nativeをサポートしており、追加のランタイムや仮想マシンなしでサーバーを実行できます。"},{default:n(()=>s[0]||(s[0]=[e("ネイティブサーバー")])),_:1}),s[1]||(s[1]=e("のサポート"))]),s[2]||(s[2]=e(": ✖️ "))])]),_:1}),s[8]||(s[8]=p('<p><a href="./server-sessions">セッション</a>は、異なるHTTPリクエスト間でデータを永続化するメカニズムを提供します。一般的なユースケースとしては、ログイン中のユーザーIDの保存、ショッピングカートの内容、クライアント上でのユーザー設定の保持などがあります。</p><p>Ktorでは、既存の関連セッションを持つユーザーは、<code>session</code>プロバイダーを使用して認証できます。たとえば、ユーザーが初めて<a href="./server-form-based-auth">Webフォーム</a>を使用してログインした場合、ユーザー名をクッキーセッションに保存し、その後のリクエストで<code>session</code>プロバイダーを使用してそのユーザーを認証できます。</p><blockquote><p>Ktorにおける認証と認可に関する一般的な情報については、「<a href="./server-auth">Ktor Serverにおける認証と認可</a>」セクションを参照してください。</p></blockquote><h2 id="add_dependencies" tabindex="-1">依存関係の追加 <a class="header-anchor" href="#add_dependencies" aria-label="Permalink to &quot;依存関係の追加 {id=&quot;add_dependencies&quot;}&quot;">​</a></h2><p><code>session</code>認証を有効にするには、ビルドスクリプトに以下のアーティファクトを含める必要があります。</p>',5)),i("ul",null,[i("li",null,[s[5]||(s[5]=i("p",null,[e("セッションを使用するための"),i("code",null,"ktor-server-sessions"),e("依存関係を追加します。")],-1)),a(k,{group:"languages"},{default:n(()=>[a(l,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[a(t,{lang:"Kotlin",code:'              implementation("io.ktor:ktor-server-sessions:$ktor_version")'})]),_:1}),a(l,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[a(t,{lang:"Groovy",code:'              implementation "io.ktor:ktor-server-sessions:$ktor_version"'})]),_:1}),a(l,{title:"Maven","group-key":"maven"},{default:n(()=>[a(t,{lang:"XML",code:`              <dependency>
                  <groupId>io.ktor</groupId>
                  <artifactId>ktor-server-sessions-jvm</artifactId>
                  <version>\${ktor_version}</version>
              </dependency>`})]),_:1})]),_:1})]),i("li",null,[s[6]||(s[6]=i("p",null,[e("認証のための"),i("code",null,"ktor-server-auth"),e("依存関係を追加します。")],-1)),a(k,{group:"languages"},{default:n(()=>[a(l,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[a(t,{lang:"Kotlin",code:'              implementation("io.ktor:ktor-server-auth:$ktor_version")'})]),_:1}),a(l,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[a(t,{lang:"Groovy",code:'              implementation "io.ktor:ktor-server-auth:$ktor_version"'})]),_:1}),a(l,{title:"Maven","group-key":"maven"},{default:n(()=>[a(t,{lang:"XML",code:`              <dependency>
                  <groupId>io.ktor</groupId>
                  <artifactId>ktor-server-auth-jvm</artifactId>
                  <version>\${ktor_version}</version>
              </dependency>`})]),_:1})]),_:1})])]),s[9]||(s[9]=p(`<h2 id="flow" tabindex="-1">セッション認証フロー <a class="header-anchor" href="#flow" aria-label="Permalink to &quot;セッション認証フロー {id=&quot;flow&quot;}&quot;">​</a></h2><p>セッションを使用した認証フローはさまざまであり、アプリケーションでのユーザー認証方法によって異なります。ここでは、<a href="./server-form-based-auth">フォームベース認証</a>でどのように見えるかを見てみましょう。</p><ol><li>クライアントは（ユーザー名とパスワードを含む）Webフォームデータを含むリクエストをサーバーに送信します。</li><li>サーバーはクライアントから送信されたクレデンシャルを検証し、ユーザー名をクッキーセッションに保存し、要求されたコンテンツとユーザー名を含むクッキーで応答します。</li><li>クライアントは、クッキーを付けて保護されたリソースに後続のリクエストを行います。</li><li>受信したクッキーデータに基づき、Ktorはこのユーザーのクッキーセッションが存在するかどうかを確認し、オプションで受信したセッションデータに対して追加の検証を行います。検証が成功した場合、サーバーは要求されたコンテンツで応答します。</li></ol><h2 id="install" tabindex="-1">セッション認証のインストール <a class="header-anchor" href="#install" aria-label="Permalink to &quot;セッション認証のインストール {id=&quot;install&quot;}&quot;">​</a></h2><p><code>session</code>認証プロバイダーをインストールするには、<code>install</code>ブロック内で、必要なセッション型を指定して<a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/session.html" target="_blank" rel="noreferrer">session</a>関数を呼び出します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.application.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.auth.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.sessions.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Authentication) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    session</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Configure session authentication</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="configure" tabindex="-1">セッション認証の設定 <a class="header-anchor" href="#configure" aria-label="Permalink to &quot;セッション認証の設定 {id=&quot;configure&quot;}&quot;">​</a></h2><p>このセクションでは、<a href="./server-form-based-auth">フォームベース認証</a>を使用してユーザーを認証し、このユーザーに関する情報をクッキーセッションに保存し、その後のリクエストで<code>session</code>プロバイダーを使用してこのユーザーを認証する方法を示します。</p><blockquote><p>完全な例については、<a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/auth-form-session" target="_blank" rel="noreferrer">auth-form-session</a>を参照してください。</p></blockquote><h3 id="data-class" tabindex="-1">ステップ1: データクラスの作成 <a class="header-anchor" href="#data-class" aria-label="Permalink to &quot;ステップ1: データクラスの作成 {id=&quot;data-class&quot;}&quot;">​</a></h3><p>まず、セッションデータを保存するためのデータクラスを作成する必要があります。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Serializable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> count: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="install-session" tabindex="-1">ステップ2: セッションのインストールと設定 <a class="header-anchor" href="#install-session" aria-label="Permalink to &quot;ステップ2: セッションのインストールと設定 {id=&quot;install-session&quot;}&quot;">​</a></h3><p>データクラスを作成したら、<code>Sessions</code>プラグインをインストールして設定する必要があります。以下の例では、指定されたクッキーパスと有効期限を持つクッキーセッションをインストールし、設定します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    cookie</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user_session&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        cookie.path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        cookie.maxAgeInSeconds </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 60</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p>セッションの設定の詳細については、「<a href="./server-sessions#configuration_overview">セッション設定の概要</a>」を参照してください。</p></blockquote><h3 id="configure-session-auth" tabindex="-1">ステップ3: セッション認証の設定 <a class="header-anchor" href="#configure-session-auth" aria-label="Permalink to &quot;ステップ3: セッション認証の設定 {id=&quot;configure-session-auth&quot;}&quot;">​</a></h3><p><code>session</code>認証プロバイダーは、<a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-session-authentication-provider/-config/index.html" target="_blank" rel="noreferrer"><code>SessionAuthenticationProvider.Config</code></a>クラスを介してその設定を公開します。以下の例では、以下の設定が指定されています。</p><ul><li><code>validate()</code>関数は、<a href="#data-class">セッションインスタンス</a>をチェックし、認証が成功した場合に<code>Any</code>型のプリンシパルを返します。</li><li><code>challenge()</code>関数は、認証が失敗した場合に実行されるアクションを指定します。例えば、ログインページにリダイレクトしたり、<a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-unauthorized-response/index.html" target="_blank" rel="noreferrer"><code>UnauthorizedResponse</code></a>を送信したりできます。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Authentication) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    session</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-session&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        validate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { session </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(session.name.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startsWith</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jet&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                session</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        challenge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondRedirect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/login&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="save-session" tabindex="-1">ステップ4: セッションへのユーザーデータの保存 <a class="header-anchor" href="#save-session" aria-label="Permalink to &quot;ステップ4: セッションへのユーザーデータの保存 {id=&quot;save-session&quot;}&quot;">​</a></h3><p>ログイン中のユーザーに関する情報をセッションに保存するには、<a href="./server-sessions#use_sessions"><code>call.sessions.set()</code></a>関数を使用します。</p><p>以下の例は、Webフォームを使用したシンプルな認証フローを示しています。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">authenticate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-form&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/login&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">principal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserIdPrincipal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()?.name.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        call.sessions.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userName, count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondRedirect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p>フォームベース認証フローの詳細については、<a href="./server-form-based-auth">フォームベース認証</a>のドキュメントを参照してください。</p></blockquote><h3 id="authenticate-route" tabindex="-1">ステップ5: 特定のリソースを保護する <a class="header-anchor" href="#authenticate-route" aria-label="Permalink to &quot;ステップ5: 特定のリソースを保護する {id=&quot;authenticate-route&quot;}&quot;">​</a></h3><p><code>session</code>プロバイダーを設定した後、<a href="./server-auth#authenticate-route"><code>authenticate()</code></a>関数を使用してアプリケーション内の特定のリソースを保護できます。</p><p>認証に成功すると、ルートハンドラ内で<code>call.principal()</code>関数を使用することで、認証されたプリンシパル（この場合は<a href="#data-class"><code>UserSession</code></a>インスタンス）を取得できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">authenticate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-session&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userSession </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">principal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        call.sessions.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(userSession?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">copy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userSession.count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, \${userSession?.name}! Visit count is \${userSession?.count}.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p>完全な例については、<a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/auth-form-session" target="_blank" rel="noreferrer">auth-form-session</a>を参照してください。</p></blockquote>`,30))])}const _=E(u,[["render",y]]);export{q as __pageData,_ as default};
