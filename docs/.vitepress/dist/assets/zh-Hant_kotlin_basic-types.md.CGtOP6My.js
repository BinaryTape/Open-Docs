import{_ as a,c as e,o as l,ag as i}from"./chunks/framework.Bksy39di.js";const k=JSON.parse('{"title":"基本類型","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/basic-types.md","filePath":"zh-Hant/kotlin/basic-types.md","lastUpdated":1754307826000}'),n={name:"zh-Hant/kotlin/basic-types.md"};function o(r,t,s,c,h,p){return l(),e("div",null,t[0]||(t[0]=[i('<h1 id="基本類型" tabindex="-1">基本類型 <a class="header-anchor" href="#基本類型" aria-label="Permalink to &quot;基本類型&quot;">​</a></h1><p>在 Kotlin 中，從某種意義上說，一切皆為物件，因為您可以在任何變數上呼叫成員函式和屬性。雖然某些類型在執行時會以基本型別值（例如數字、字元、布林值及其他）的形式具備優化的內部表示，但對您而言，它們表現和行為都像常規類別。</p><p>本節描述了 Kotlin 中使用的基本類型：</p><ul><li><a href="/zh-Hant/kotlin/numbers">數字</a> 及其 <a href="/zh-Hant/kotlin/unsigned-integer-types">無符號對應型別</a></li><li><a href="/zh-Hant/kotlin/booleans">布林值</a></li><li><a href="/zh-Hant/kotlin/characters">字元</a></li><li><a href="/zh-Hant/kotlin/strings">字串</a></li><li><a href="/zh-Hant/kotlin/arrays">陣列</a></li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><a href="/zh-Hant/kotlin/typecasts">了解如何在 Kotlin 中執行型別檢查和轉換</a>。</p></div><p>欲了解其他 Kotlin 類型，例如 <code>Nothing</code>、<code>Any</code> 和 <code>Unit</code>，請查閱 Kotlin API 參考資料：</p><ul><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/" target="_blank" rel="noreferrer"><code>Any</code></a></li><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-nothing.html" target="_blank" rel="noreferrer"><code>Nothing</code></a></li><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/" target="_blank" rel="noreferrer"><code>Unit</code></a></li></ul>',7)]))}const _=a(n,[["render",o]]);export{k as __pageData,_ as default};
