import{_ as h,C as r,c,o as g,j as i,G as s,ag as k,a as t,w as e}from"./chunks/framework.Bksy39di.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ko/ktor/client-websocket-serialization.md","filePath":"ko/ktor/client-websocket-serialization.md","lastUpdated":1755457140000}'),u={name:"ko/ktor/client-websocket-serialization.md"};function E(y,a,b,v,F,_){const d=r("show-structure"),p=r("tldr"),l=r("code-block"),n=r("TabItem"),o=r("Tabs");return g(),c("div",null,[a[7]||(a[7]=i("h1",{id:"ktor-클라이언트에서의-웹소켓-직렬화",tabindex:"-1"},[t("Ktor 클라이언트에서의 웹소켓 직렬화 "),i("a",{class:"header-anchor",href:"#ktor-클라이언트에서의-웹소켓-직렬화","aria-label":'Permalink to "Ktor 클라이언트에서의 웹소켓 직렬화"'},"​")],-1)),s(d,{for:"chapter",depth:"2"}),s(p,null,{default:e(()=>a[0]||(a[0]=[i("p",null,[i("b",null,"코드 예시"),t(": "),i("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/client-websockets-serialization"}," client-websockets-serialization ")],-1)])),_:1}),a[8]||(a[8]=k('<p><code>[ContentNegotiation](client-serialization.md)</code> 플러그인과 유사하게, 웹소켓(WebSockets)은 특정 형식으로 텍스트 프레임(text frames)을 직렬화/역직렬화할 수 있도록 합니다. Ktor 클라이언트는 다음 형식을 기본으로(out-of-the-box) 지원합니다: JSON, XML, CBOR, ProtoBuf.</p><h2 id="add_dependencies" tabindex="-1">의존성 추가 <a class="header-anchor" href="#add_dependencies" aria-label="Permalink to &quot;의존성 추가 {id=&quot;add_dependencies&quot;}&quot;">​</a></h2><p><code>kotlinx.serialization</code> 컨버터를 사용하기 전에, <code>[Setup](https://github.com/Kotlin/kotlinx.serialization#setup)</code> 섹션에 설명된 대로 Kotlin 직렬화 플러그인을 추가해야 합니다.</p><h4 id="add_json_dependency" tabindex="-1">JSON <a class="header-anchor" href="#add_json_dependency" aria-label="Permalink to &quot;JSON {id=&quot;add_json_dependency&quot;}&quot;">​</a></h4><p>JSON 데이터를 직렬화/역직렬화하려면, 다음 라이브러리 중 하나를 선택할 수 있습니다: <code>kotlinx.serialization</code>, <code>Gson</code>, 또는 <code>Jackson</code>.</p>',5)),s(o,{group:"json-libraries"},{default:e(()=>[s(n,{title:"kotlinx.serialization","group-key":"kotlinx"},{default:e(()=>[a[1]||(a[1]=i("p",null,[t("빌드 스크립트에 "),i("code",null,"ktor-serialization-kotlinx-json"),t(" 아티팩트를 추가하세요:")],-1)),s(o,{group:"languages"},{default:e(()=>[s(n,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:e(()=>[s(l,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-serialization-kotlinx-json:$ktor_version")'})]),_:1}),s(n,{title:"Gradle (Groovy)","group-key":"groovy"},{default:e(()=>[s(l,{lang:"Groovy",code:'            implementation "io.ktor:ktor-serialization-kotlinx-json:$ktor_version"'})]),_:1}),s(n,{title:"Maven","group-key":"maven"},{default:e(()=>[s(l,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-serialization-kotlinx-json-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1})]),_:1}),s(n,{title:"Gson","group-key":"gson"},{default:e(()=>[a[2]||(a[2]=i("p",null,[t("빌드 스크립트에 "),i("code",null,"ktor-serialization-gson"),t(" 아티팩트를 추가하세요:")],-1)),s(o,{group:"languages"},{default:e(()=>[s(n,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:e(()=>[s(l,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-serialization-gson:$ktor_version")'})]),_:1}),s(n,{title:"Gradle (Groovy)","group-key":"groovy"},{default:e(()=>[s(l,{lang:"Groovy",code:'            implementation "io.ktor:ktor-serialization-gson:$ktor_version"'})]),_:1}),s(n,{title:"Maven","group-key":"maven"},{default:e(()=>[s(l,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-serialization-gson-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1})]),_:1}),s(n,{title:"Jackson","group-key":"jackson"},{default:e(()=>[a[3]||(a[3]=i("p",null,[t("빌드 스크립트에 "),i("code",null,"ktor-serialization-jackson"),t(" 아티팩트를 추가하세요:")],-1)),s(o,{group:"languages"},{default:e(()=>[s(n,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:e(()=>[s(l,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-serialization-jackson:$ktor_version")'})]),_:1}),s(n,{title:"Gradle (Groovy)","group-key":"groovy"},{default:e(()=>[s(l,{lang:"Groovy",code:'            implementation "io.ktor:ktor-serialization-jackson:$ktor_version"'})]),_:1}),s(n,{title:"Maven","group-key":"maven"},{default:e(()=>[s(l,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-serialization-jackson-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1})]),_:1})]),_:1}),a[9]||(a[9]=i("h4",{id:"add_xml_dependency",tabindex:"-1"},[t("XML "),i("a",{class:"header-anchor",href:"#add_xml_dependency","aria-label":'Permalink to "XML {id="add_xml_dependency"}"'},"​")],-1)),a[10]||(a[10]=i("p",null,[t("XML을 직렬화/역직렬화하려면 빌드 스크립트에 "),i("code",null,"ktor-serialization-kotlinx-xml"),t("을 추가하세요:")],-1)),s(o,{group:"languages"},{default:e(()=>[s(n,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:e(()=>[s(l,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-serialization-kotlinx-xml:$ktor_version")'})]),_:1}),s(n,{title:"Gradle (Groovy)","group-key":"groovy"},{default:e(()=>[s(l,{lang:"Groovy",code:'            implementation "io.ktor:ktor-serialization-kotlinx-xml:$ktor_version"'})]),_:1}),s(n,{title:"Maven","group-key":"maven"},{default:e(()=>[s(l,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-serialization-kotlinx-xml-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),a[11]||(a[11]=k('<div class="note custom-block"><p class="custom-block-title">NOTE</p><p>참고: XML 직렬화는 <code>jsNode</code> 타겟에서 <a href="https://github.com/pdvrieze/xmlutil/issues/83" target="_blank" rel="noreferrer">지원되지 않습니다</a>.</p></div><h4 id="add_cbor_dependency" tabindex="-1">CBOR <a class="header-anchor" href="#add_cbor_dependency" aria-label="Permalink to &quot;CBOR {id=&quot;add_cbor_dependency&quot;}&quot;">​</a></h4><p>CBOR을 직렬화/역직렬화하려면 빌드 스크립트에 <code>ktor-serialization-kotlinx-cbor</code>을 추가하세요:</p>',3)),s(o,{group:"languages"},{default:e(()=>[s(n,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:e(()=>[s(l,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-serialization-kotlinx-cbor:$ktor_version")'})]),_:1}),s(n,{title:"Gradle (Groovy)","group-key":"groovy"},{default:e(()=>[s(l,{lang:"Groovy",code:'            implementation "io.ktor:ktor-serialization-kotlinx-cbor:$ktor_version"'})]),_:1}),s(n,{title:"Maven","group-key":"maven"},{default:e(()=>[s(l,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-serialization-kotlinx-cbor-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),a[12]||(a[12]=i("h4",{id:"add_protobuf_dependency",tabindex:"-1"},[t("ProtoBuf "),i("a",{class:"header-anchor",href:"#add_protobuf_dependency","aria-label":'Permalink to "ProtoBuf {id="add_protobuf_dependency"}"'},"​")],-1)),a[13]||(a[13]=i("p",null,[t("ProtoBuf를 직렬화/역직렬화하려면 빌드 스크립트에 "),i("code",null,"ktor-serialization-kotlinx-protobuf"),t("를 추가하세요:")],-1)),s(o,{group:"languages"},{default:e(()=>[s(n,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:e(()=>[s(l,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-serialization-kotlinx-protobuf:$ktor_version")'})]),_:1}),s(n,{title:"Gradle (Groovy)","group-key":"groovy"},{default:e(()=>[s(l,{lang:"Groovy",code:'            implementation "io.ktor:ktor-serialization-kotlinx-protobuf:$ktor_version"'})]),_:1}),s(n,{title:"Maven","group-key":"maven"},{default:e(()=>[s(l,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-serialization-kotlinx-protobuf-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),a[14]||(a[14]=i("h2",{id:"configure_serializer",tabindex:"-1"},[t("직렬 변환기 구성 "),i("a",{class:"header-anchor",href:"#configure_serializer","aria-label":'Permalink to "직렬 변환기 구성 {id="configure_serializer"}"'},"​")],-1)),a[15]||(a[15]=i("h3",{id:"register_json",tabindex:"-1"},[t("JSON 직렬 변환기 "),i("a",{class:"header-anchor",href:"#register_json","aria-label":'Permalink to "JSON 직렬 변환기 {id="register_json"}"'},"​")],-1)),s(o,{group:"json-libraries"},{default:e(()=>[s(n,{title:"kotlinx.serialization","group-key":"kotlinx"},{default:e(()=>a[4]||(a[4]=[i("p",null,[t("웹소켓 "),i("code",null,"[configuration](client-websockets.topic#install_plugin)"),t("에 JSON 직렬 변환기를 등록하려면, "),i("code",null,"Json"),t(" 매개변수를 사용하여 "),i("code",null,"KotlinxWebsocketSerializationConverter"),t(" 인스턴스를 생성하고, 이 인스턴스를 "),i("code",null,"contentConverter"),t(" 속성에 할당하세요:")],-1),i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," io.ktor.serialization.kotlinx."),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"*")]),t(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," kotlinx.serialization.json."),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"*")]),t(`
`),i("span",{class:"line"}),t(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"val"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," client "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," HttpClient"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(CIO) {")]),t(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    install"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(WebSockets) {")]),t(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        contentConverter "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," KotlinxWebsocketSerializationConverter"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(Json)")]),t(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),t(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),s(n,{title:"Gson","group-key":"gson"},{default:e(()=>a[5]||(a[5]=[i("p",null,[t("Gson 직렬 변환기를 등록하려면, "),i("code",null,"GsonWebsocketContentConverter"),t("를 "),i("code",null,"contentConverter"),t(" 속성에 할당하세요:")],-1),i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," io.ktor.serialization.gson."),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"*")]),t(`
`),i("span",{class:"line"}),t(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"install"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(WebSockets) {")]),t(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    contentConverter "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," GsonWebsocketContentConverter"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),t(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),s(n,{title:"Jackson","group-key":"jackson"},{default:e(()=>a[6]||(a[6]=[i("p",null,[t("Jackson 직렬 변환기를 등록하려면, "),i("code",null,"JacksonWebsocketContentConverter"),t("를 "),i("code",null,"contentConverter"),t(" 속성에 할당하세요:")],-1),i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," io.ktor.serialization.jackson."),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"*")]),t(`
`),i("span",{class:"line"}),t(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"install"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(WebSockets) {")]),t(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    contentConverter "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," JacksonWebsocketContentConverter"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),t(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),a[16]||(a[16]=k(`<h3 id="register_xml" tabindex="-1">XML 직렬 변환기 <a class="header-anchor" href="#register_xml" aria-label="Permalink to &quot;XML 직렬 변환기 {id=&quot;register_xml&quot;}&quot;">​</a></h3><p>웹소켓 <code>[configuration](client-websockets.topic#install_plugin)</code>에 XML 직렬 변환기를 등록하려면, <code>XML</code> 매개변수를 사용하여 <code>KotlinxWebsocketSerializationConverter</code> 인스턴스를 생성하고, 이 인스턴스를 <code>contentConverter</code> 속성에 할당하세요:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> nl.adaptivity.xmlutil.serialization.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(WebSockets) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    contentConverter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> KotlinxWebsocketSerializationConverter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(XML)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="register_cbor" tabindex="-1">CBOR 직렬 변환기 <a class="header-anchor" href="#register_cbor" aria-label="Permalink to &quot;CBOR 직렬 변환기 {id=&quot;register_cbor&quot;}&quot;">​</a></h3><p>웹소켓 <code>[configuration](client-websockets.topic#install_plugin)</code>에 CBOR 직렬 변환기를 등록하려면, <code>Cbor</code> 매개변수를 사용하여 <code>KotlinxWebsocketSerializationConverter</code> 인스턴스를 생성하고, 이 인스턴스를 <code>contentConverter</code> 속성에 할당하세요:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.serialization.kotlinx.cbor.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(WebSockets) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    contentConverter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> KotlinxWebsocketSerializationConverter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Cbor)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="register_protobuf" tabindex="-1">ProtoBuf 직렬 변환기 <a class="header-anchor" href="#register_protobuf" aria-label="Permalink to &quot;ProtoBuf 직렬 변환기 {id=&quot;register_protobuf&quot;}&quot;">​</a></h3><p>웹소켓 <code>[configuration](client-websockets.topic#install_plugin)</code>에 ProtoBuf 직렬 변환기를 등록하려면, <code>ProtoBuf</code> 매개변수를 사용하여 <code>KotlinxWebsocketSerializationConverter</code> 인스턴스를 생성하고, 이 인스턴스를 <code>contentConverter</code> 속성에 할당하세요:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.serialization.kotlinx.protobuf.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(WebSockets) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    contentConverter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> KotlinxWebsocketSerializationConverter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ProtoBuf)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="receive_send_data" tabindex="-1">데이터 수신 및 전송 <a class="header-anchor" href="#receive_send_data" aria-label="Permalink to &quot;데이터 수신 및 전송 {id=&quot;receive_send_data&quot;}&quot;">​</a></h2><h3 id="create_data_class" tabindex="-1">데이터 클래스 생성 <a class="header-anchor" href="#create_data_class" aria-label="Permalink to &quot;데이터 클래스 생성 {id=&quot;create_data_class&quot;}&quot;">​</a></h3><p>텍스트 프레임을 객체로/객체에서 직렬화/역직렬화하려면, 데이터 클래스를 생성해야 합니다. 예를 들어:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Customer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> firstName: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lastName: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><code>kotlinx.serialization</code>을 사용하는 경우, 이 클래스에 <code>@Serializable</code> 어노테이션이 있는지 확인하세요:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Serializable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Customer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> firstName: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lastName: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><code>kotlinx.serialization</code>에 대해 더 알아보려면, <code>[Kotlin Serialization Guide](https://github.com/Kotlin/kotlinx.serialization/blob/master/docs/serialization-guide.md)</code>를 참조하세요.</p><h3 id="send_data" tabindex="-1">데이터 전송 <a class="header-anchor" href="#send_data" aria-label="Permalink to &quot;데이터 전송 {id=&quot;send_data&quot;}&quot;">​</a></h3><p><code>[지정된 형식](#configure_serializer)</code>으로 텍스트 프레임 내에서 <code>[클래스 인스턴스](#create_data_class)</code>를 전송하려면, <code>sendSerialized</code> 함수를 사용하세요:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">webSocket</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(method </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HttpMethod.Get, host </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;127.0.0.1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, port </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8080</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/customer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sendSerialized</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Customer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Jane&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Smith&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="receive_data" tabindex="-1">데이터 수신 <a class="header-anchor" href="#receive_data" aria-label="Permalink to &quot;데이터 수신 {id=&quot;receive_data&quot;}&quot;">​</a></h3><p>텍스트 프레임의 내용을 수신하고 변환하려면, 데이터 클래스를 매개변수로 받는 <code>receiveDeserialized</code> 함수를 호출하세요:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">webSocket</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(method </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HttpMethod.Get, host </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;127.0.0.1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, port </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8080</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/customer/1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> customer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> receiveDeserialized</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Customer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;A customer with id \${customer.id} is received by the client.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>[incoming](client-websockets.topic#incoming)</code> 채널에서 역직렬화된 프레임을 수신하려면, <code>[WebsocketContentConverter.deserialize](https://api.ktor.io/ktor-shared/ktor-serialization/io.ktor.serialization/-websocket-content-converter/deserialize.html)</code> 함수를 사용하세요. <code>WebsocketContentConverter</code>는 <code>DefaultClientWebSocketSession.converter</code> 속성을 통해 사용할 수 있습니다.</p><blockquote><p>전체 예시는 여기에서 찾을 수 있습니다: <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/client-websockets-serialization" target="_blank" rel="noreferrer">client-websockets-serialization</a>.</p></blockquote>`,24))])}const f=h(u,[["render",E]]);export{m as __pageData,f as default};
