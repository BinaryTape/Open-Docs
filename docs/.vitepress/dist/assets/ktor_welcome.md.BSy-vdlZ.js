import{_ as g,C as n,c as K,o as w,G as r,w as e,j as s,a as o}from"./chunks/framework.Bksy39di.js";const M=JSON.parse('{"title":"","description":"","frontmatter":{"aside":false},"headers":[],"relativePath":"ktor/welcome.md","filePath":"ktor/welcome.md","lastUpdated":1755457140000}'),S={name:"ktor/welcome.md"};function R(T,t,P,b,A,C){const d=n("description"),u=n("card"),a=n("spotlight"),k=n("primary"),l=n("Links"),m=n("group"),f=n("links"),i=n("cards"),p=n("misc"),y=n("section-starting-page"),v=n("topic");return w(),K("div",null,[r(v,{"xsi:noNamespaceSchemaLocation":"https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd","xmlns:xsi":"http://www.w3.org/2001/XMLSchema-instance",title:"欢迎",id:"welcome"},{default:e(()=>[r(y,null,{default:e(()=>[t[76]||(t[76]=s("title",null,"Ktor 文档",-1)),r(d,null,{default:e(()=>t[0]||(t[0]=[o(" Ktor 是一个用于轻松构建异步服务器端和客户端应用程序的框架。 ")])),_:1}),r(a,null,{default:e(()=>[r(u,{href:"/ktor/server-create-a-new-project",summary:"了解如何使用 Ktor 创建、运行和测试服务器应用程序。"},{default:e(()=>t[1]||(t[1]=[o(" Ktor 服务器端入门 ")])),_:1}),r(u,{href:"/ktor/client-create-new-application",summary:"了解如何使用 Ktor 创建、运行和测试客户端应用程序。"},{default:e(()=>t[2]||(t[2]=[o(" Ktor 客户端入门 ")])),_:1})]),_:1}),r(k,null,{default:e(()=>[t[8]||(t[8]=s("title",null,"Ktor 服务器端",-1)),r(u,{href:"/ktor/server-requests-and-responses",summary:"通过创建任务管理器应用程序，了解 Ktor 中的路由和请求如何工作。"},{default:e(()=>t[3]||(t[3]=[o(" 处理请求并生成响应 ")])),_:1}),r(u,{href:"/ktor/server-create-restful-apis",summary:"了解如何使用 Ktor 构建 RESTful API。本教程涵盖了在实际示例上的设置、路由和测试。"},{default:e(()=>t[4]||(t[4]=[o("创建 RESTful API")])),_:1}),r(u,{href:"/ktor/server-create-website",summary:"了解如何使用 Kotlin、Ktor 和 Thymeleaf 模板构建网站。"},{default:e(()=>t[5]||(t[5]=[o("创建网站")])),_:1}),r(u,{href:"/ktor/server-create-websocket-application",summary:"了解如何利用 WebSocket 的强大功能来发送和接收内容。"},{default:e(()=>t[6]||(t[6]=[o(" 创建 WebSocket 应用程序 ")])),_:1}),r(u,{href:"/ktor/server-integrate-database",summary:"了解使用 Exposed SQL 库将 Ktor 服务连接到数据库版本库的过程。"},{default:e(()=>t[7]||(t[7]=[o("集成数据库")])),_:1})]),_:1}),r(p,null,{default:e(()=>[r(f,{narrow:"true"},{default:e(()=>[r(m,null,{default:e(()=>[t[15]||(t[15]=s("title",null,"服务器配置",-1)),r(l,{href:"/ktor/server-create-a-new-project",summary:"了解如何使用 Ktor 打开、运行和测试服务器应用程序。"},{default:e(()=>t[9]||(t[9]=[o("创建、打开和运行新的 Ktor 项目")])),_:1}),r(l,{href:"/ktor/server-dependencies",summary:"了解如何将 Ktor 服务器依赖项添加到现有 Gradle/Maven 项目。"},{default:e(()=>t[10]||(t[10]=[o("添加服务器依赖项")])),_:1}),r(l,{href:"/ktor/server-create-and-configure",summary:"了解如何根据应用程序部署需求创建服务器。"},{default:e(()=>t[11]||(t[11]=[o("创建服务器")])),_:1}),r(l,{href:"/ktor/server-configuration-code",summary:"了解如何在代码中配置各种服务器参数。"},{default:e(()=>t[12]||(t[12]=[o("代码配置")])),_:1}),r(l,{href:"/ktor/server-configuration-file",summary:"了解如何在配置文件中配置各种服务器参数。"},{default:e(()=>t[13]||(t[13]=[o("文件配置")])),_:1}),r(l,{href:"/ktor/server-plugins",summary:"插件提供常见功能，例如序列化、内容编码、压缩等。"},{default:e(()=>t[14]||(t[14]=[o("服务器插件")])),_:1})]),_:1}),r(m,null,{default:e(()=>[t[22]||(t[22]=s("title",null,"路由",-1)),r(l,{href:"/ktor/server-routing",summary:"路由是用于处理服务器应用程序中传入请求的核心插件。"},{default:e(()=>t[16]||(t[16]=[o("路由")])),_:1}),r(l,{href:"/ktor/server-resources",summary:"Resources 插件允许您实现类型安全的路由。"},{default:e(()=>t[17]||(t[17]=[o("类型安全的路由")])),_:1}),r(l,{href:"/ktor/server-application-structure",summary:"了解如何构建应用程序，以在应用程序增长时保持其可维护性。"},{default:e(()=>t[18]||(t[18]=[o("应用程序结构")])),_:1}),r(l,{href:"/ktor/server-requests",summary:"了解如何在路由处理器内部处理传入请求。"},{default:e(()=>t[19]||(t[19]=[o("处理请求")])),_:1}),r(l,{href:"/ktor/server-responses",summary:"了解如何发送不同类型的响应。"},{default:e(()=>t[20]||(t[20]=[o("发送响应")])),_:1}),r(l,{href:"/ktor/server-static-content",summary:"了解如何提供静态内容，例如样式表、脚本、图像等。"},{default:e(()=>t[21]||(t[21]=[o("提供静态内容")])),_:1})]),_:1}),r(m,null,{default:e(()=>[t[32]||(t[32]=s("title",null,"插件",-1)),r(l,{href:"/ktor/server-serialization",summary:"ContentNegotiation 插件主要有两个目的：协商客户端和服务器之间的媒体类型，以及以特定格式序列化/反序列化内容。"},{default:e(()=>t[23]||(t[23]=[o("Ktor 服务器端中的内容协商和序列化")])),_:1}),r(l,{href:"/ktor/server-templating",summary:"了解如何使用 HTML/CSS 或 JVM 模板引擎构建视图。"},{default:e(()=>t[24]||(t[24]=[o("模板")])),_:1}),r(l,{href:"/ktor/server-auth",summary:"Authentication 插件处理 Ktor 中的认证和授权。"},{default:e(()=>t[25]||(t[25]=[o("Ktor 服务器端中的认证和授权")])),_:1}),r(l,{href:"/ktor/server-sessions",summary:"Sessions 插件提供了一种在不同 HTTP 请求之间持久化数据的机制。"},{default:e(()=>t[26]||(t[26]=[o("会话")])),_:1}),r(l,{href:"/ktor/server-websockets",summary:"Websockets 插件允许您在服务器和客户端之间创建多向通信会话。"},{default:e(()=>t[27]||(t[27]=[o("Ktor 服务器端中的 WebSocket")])),_:1}),r(l,{href:"/ktor/server-server-sent-events",summary:"SSE 插件允许服务器通过 HTTP 连接向客户端发送基于事件的更新。"},{default:e(()=>t[28]||(t[28]=[o("Ktor 服务器端中的服务器发送事件")])),_:1}),r(l,{href:"/ktor/server-swagger-ui",summary:"SwaggerUI 插件允许您为项目生成 Swagger UI。"},{default:e(()=>t[29]||(t[29]=[o("Swagger UI")])),_:1}),t[33]||(t[33]=o(" / ")),r(l,{href:"/ktor/server-openapi",summary:"OpenAPI 插件允许您为项目生成 OpenAPI 文档。"},{default:e(()=>t[30]||(t[30]=[o("OpenAPI")])),_:1}),r(l,{href:"/ktor/server-custom-plugins",summary:"了解如何创建自己的自定义插件。"},{default:e(()=>t[31]||(t[31]=[o("自定义服务器插件")])),_:1})]),_:1}),r(m,null,{default:e(()=>[t[37]||(t[37]=s("title",null,"运行、调试和测试",-1)),r(l,{href:"/ktor/server-run",summary:"了解如何运行服务器 Ktor 应用程序。"},{default:e(()=>t[34]||(t[34]=[o("运行")])),_:1}),r(l,{href:"/ktor/server-auto-reload",summary:"了解如何使用自动重载在代码更改时重新加载应用程序类。"},{default:e(()=>t[35]||(t[35]=[o("自动重载")])),_:1}),r(l,{href:"/ktor/server-testing",summary:"了解如何使用专用测试引擎测试服务器应用程序。"},{default:e(()=>t[36]||(t[36]=[o("Ktor 服务器端测试")])),_:1})]),_:1}),r(m,null,{default:e(()=>[t[44]||(t[44]=s("title",null,"部署",-1)),r(l,{href:"/ktor/server-fatjar",summary:"了解如何使用 Ktor Gradle 插件创建和运行可执行的 fat JAR。"},{default:e(()=>t[38]||(t[38]=[o("创建 Fat JAR")])),_:1}),r(l,{href:"/ktor/server-war",summary:"了解如何使用 WAR 归档在 Servlet 容器中运行和部署 Ktor 应用程序。"},{default:e(()=>t[39]||(t[39]=[o("WAR")])),_:1}),r(l,{href:"/ktor/graalvm",summary:"了解如何在不同平台上使用 GraalVM 创建原生镜像。"},{default:e(()=>t[40]||(t[40]=[o("GraalVM")])),_:1}),r(l,{href:"/ktor/docker",summary:"了解如何将应用程序部署到 Docker 容器。"},{default:e(()=>t[41]||(t[41]=[o("Docker")])),_:1}),r(l,{href:"/ktor/google-app-engine",summary:"了解如何将项目部署到 Google App Engine 标准环境。"},{default:e(()=>t[42]||(t[42]=[o("Google App Engine")])),_:1}),r(l,{href:"/ktor/heroku",summary:"了解如何准备 Ktor 应用程序并将其部署到 Heroku。"},{default:e(()=>t[43]||(t[43]=[o("Heroku")])),_:1})]),_:1})]),_:1}),r(i,null,{default:e(()=>[t[47]||(t[47]=s("title",null,"Ktor 客户端",-1)),r(u,{href:"/ktor/client-create-new-application",summary:"使用 Ktor 创建客户端应用程序。"},{default:e(()=>t[45]||(t[45]=[o(" 创建客户端应用程序 ")])),_:1}),r(u,{href:"/ktor/client-create-multiplatform-application",summary:"创建 Kotlin 多平台移动应用程序，并了解如何使用 Ktor 客户端发送请求和接收响应。"},{default:e(()=>t[46]||(t[46]=[o(" 创建跨平台移动应用程序 ")])),_:1})]),_:1}),r(f,{narrow:"true"},{default:e(()=>[r(m,null,{default:e(()=>[t[53]||(t[53]=s("title",null,"客户端设置",-1)),r(l,{href:"/ktor/client-create-new-application",summary:"创建您的第一个客户端应用程序，用于发送请求和接收响应。"},{default:e(()=>t[48]||(t[48]=[o("创建客户端应用程序")])),_:1}),r(l,{href:"/ktor/client-dependencies",summary:"了解如何将客户端依赖项添加到现有项目。"},{default:e(()=>t[49]||(t[49]=[o("添加客户端依赖项")])),_:1}),r(l,{href:"/ktor/client-create-and-configure",summary:"了解如何创建和配置 Ktor 客户端。"},{default:e(()=>t[50]||(t[50]=[o("创建和配置客户端")])),_:1}),r(l,{href:"/ktor/client-engines",summary:"了解处理网络请求的引擎。"},{default:e(()=>t[51]||(t[51]=[o("客户端引擎")])),_:1}),r(l,{href:"/ktor/client-plugins",summary:"了解提供常见功能（例如日志记录、序列化、授权等）的插件。"},{default:e(()=>t[52]||(t[52]=[o("客户端插件")])),_:1})]),_:1}),r(m,null,{default:e(()=>[t[58]||(t[58]=s("title",null,"请求",-1)),r(l,{href:"/ktor/client-requests",summary:"了解如何发出请求并指定各种请求参数：请求 URL、HTTP 方法、请求头和请求体。"},{default:e(()=>t[54]||(t[54]=[o("发出请求")])),_:1}),r(l,{href:"/ktor/client-resources",summary:"了解如何使用 Resources 插件发出类型安全的请求。"},{default:e(()=>t[55]||(t[55]=[o("类型安全的请求")])),_:1}),r(l,{href:"/ktor/client-default-request",summary:"DefaultRequest 插件允许您为所有请求配置默认参数。"},{default:e(()=>t[56]||(t[56]=[o("默认请求")])),_:1}),r(l,{href:"/ktor/client-request-retry",summary:"HttpRequestRetry 插件允许您配置失败请求的重试策略。"},{default:e(()=>t[57]||(t[57]=[o("重试失败的请求")])),_:1})]),_:1}),r(m,null,{default:e(()=>[t[61]||(t[61]=s("title",null,"响应",-1)),r(l,{href:"/ktor/client-responses",summary:"了解如何接收响应、获取响应体以及获取响应参数。"},{default:e(()=>t[59]||(t[59]=[o("接收响应")])),_:1}),r(l,{href:"/ktor/client-response-validation",summary:"了解如何根据响应的状态码验证响应。"},{default:e(()=>t[60]||(t[60]=[o("响应验证")])),_:1})]),_:1}),r(m,null,{default:e(()=>[t[70]||(t[70]=s("title",null,"插件",-1)),r(l,{href:"/ktor/client-auth",summary:"Auth 插件处理客户端应用程序中的认证和授权。"},{default:e(()=>t[62]||(t[62]=[o("Ktor 客户端中的认证和授权")])),_:1}),r(l,{href:"/ktor/client-cookies",summary:"HttpCookies 插件自动处理 Cookie，并将它们保存在存储中，以便在调用之间使用。"},{default:e(()=>t[63]||(t[63]=[o("Cookies")])),_:1}),r(l,{href:"/ktor/client-content-encoding",summary:"ContentEncoding 插件允许您启用指定的压缩算法（例如“gzip”和“deflate”）并配置其设置。"},{default:e(()=>t[64]||(t[64]=[o("内容编码")])),_:1}),r(l,{href:"/ktor/client-bom-remover",summary:"BOMRemover 插件允许您从响应体中删除字节顺序标记（BOM）。"},{default:e(()=>t[65]||(t[65]=[o("BOM 移除器")])),_:1}),r(l,{href:"/ktor/client-caching",summary:"HttpCache 插件允许您将先前获取的资源保存在内存缓存或持久缓存中。"},{default:e(()=>t[66]||(t[66]=[o("缓存")])),_:1}),r(l,{href:"/ktor/client-websockets",summary:"Websockets 插件允许您在服务器和客户端之间创建多向通信会话。"},{default:e(()=>t[67]||(t[67]=[o("Ktor 客户端中的 WebSocket")])),_:1}),r(l,{href:"/ktor/client-server-sent-events",summary:"SSE 插件允许客户端通过 HTTP 连接从服务器接收基于事件的更新。"},{default:e(()=>t[68]||(t[68]=[o("Ktor 客户端中的服务器发送事件")])),_:1}),r(l,{href:"/ktor/client-custom-plugins",summary:"了解如何创建自己的自定义客户端插件。"},{default:e(()=>t[69]||(t[69]=[o("自定义客户端插件")])),_:1})]),_:1}),r(m,null,{default:e(()=>[t[72]||(t[72]=s("title",null,"测试",-1)),r(l,{href:"/ktor/client-testing",summary:"了解如何使用 MockEngine 通过模拟 HTTP 调用来测试您的客户端。"},{default:e(()=>t[71]||(t[71]=[o("Ktor 客户端测试")])),_:1})]),_:1})]),_:1}),r(i,null,{default:e(()=>[t[75]||(t[75]=s("title",null,"集成",-1)),r(u,{href:"/ktor//ktor/full-stack-development-with-kotlin-multiplatform",summary:"了解如何使用 Kotlin 和 Ktor 开发跨平台全栈应用程序。"},{default:e(()=>t[73]||(t[73]=[o("使用 Kotlin Multiplatform 构建全栈应用程序")])),_:1}),r(u,{href:"/ktor//ktor/tutorial-first-steps-with-kotlin-rpc",summary:"了解如何使用 Kotlin RPC 和 Ktor 创建您的第一个应用程序。"},{default:e(()=>t[74]||(t[74]=[o("Kotlin RPC 初步")])),_:1})]),_:1})]),_:1})]),_:1})]),_:1})])}const x=g(S,[["render",R]]);export{M as __pageData,x as default};
