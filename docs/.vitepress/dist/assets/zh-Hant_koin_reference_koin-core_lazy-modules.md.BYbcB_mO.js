import{_ as i,c as a,o as n,ag as l}from"./chunks/framework.Bksy39di.js";const c=JSON.parse('{"title":"延遲載入模組與背景載入","description":"","frontmatter":{"title":"延遲載入模組與背景載入"},"headers":[],"relativePath":"zh-Hant/koin/reference/koin-core/lazy-modules.md","filePath":"zh-Hant/koin/reference/koin-core/lazy-modules.md","lastUpdated":1748365453000}'),t={name:"zh-Hant/koin/reference/koin-core/lazy-modules.md"};function e(p,s,h,k,d,o){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="延遲載入模組與背景載入" tabindex="-1">延遲載入模組與背景載入 <a class="header-anchor" href="#延遲載入模組與背景載入" aria-label="Permalink to &quot;延遲載入模組與背景載入&quot;">​</a></h1><p>在本節中，我們將探討如何利用延遲載入 (lazy loading) 方法組織您的模組。</p><h2 id="定義延遲載入模組-實驗性" tabindex="-1">定義延遲載入模組 [實驗性] <a class="header-anchor" href="#定義延遲載入模組-實驗性" aria-label="Permalink to &quot;定義延遲載入模組 [實驗性]&quot;">​</a></h2><p>您現在可以宣告延遲載入的 Koin 模組，以避免觸發任何資源的預先分配，並在 Koin 啟動時於背景載入它們。</p><ul><li><code>lazyModule</code> - 宣告 Koin 模組的延遲載入 Kotlin 版本</li><li><code>Module.includes</code> - 允許包含延遲載入模組</li></ul><p>一個好的範例總是有助於理解：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Some lazy modules</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lazyModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    singleOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ClassB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// include m2 lazy module</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lazyModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    includes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(m2)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    singleOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ClassA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IClassA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;() }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>延遲載入模組 (LazyModule) 在被下列 API 載入之前，不會觸發任何資源。</p></div><h2 id="使用-kotlin-協程進行背景載入-實驗性" tabindex="-1">使用 Kotlin 協程進行背景載入 [實驗性] <a class="header-anchor" href="#使用-kotlin-協程進行背景載入-實驗性" aria-label="Permalink to &quot;使用 Kotlin 協程進行背景載入 [實驗性]&quot;">​</a></h2><p>一旦您宣告了一些延遲載入模組，您就可以從 Koin 配置中於背景載入它們，甚至更多。</p><ul><li><code>KoinApplication.lazyModules</code> - 使用協程於背景載入延遲載入模組，依據平台預設的 Dispatchers</li><li><code>Koin.waitAllStartJobs</code> - 等待啟動任務完成</li><li><code>Koin.runOnKoinStarted</code> - 在啟動完成後執行程式碼區塊</li></ul><p>一個好的範例總是有助於理解：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startKoin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // load lazy Modules in background</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    lazyModules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(m1)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> koin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> KoinPlatform.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getKoin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// wait for loading jobs to finish</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">koin.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">waitAllStartJobs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// or run code after loading is done</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">koin.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">runOnKoinStarted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { koin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // run after background load complete</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p><code>lazyModules</code> 函數允許您指定一個 dispatcher：<code>lazyModules(modules, dispatcher = Dispatcher.IO)</code></p></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>協程引擎的預設 dispatcher 是 <code>Dispatchers.Default</code>。</p></div><h3 id="限制-混合模組與延遲載入模組" tabindex="-1">限制 - 混合模組與延遲載入模組 <a class="header-anchor" href="#限制-混合模組與延遲載入模組" aria-label="Permalink to &quot;限制 - 混合模組與延遲載入模組&quot;">​</a></h3><p>目前我們建議避免在啟動時混合使用模組與延遲載入模組。避免讓 <code>mainModule</code> 依賴於 <code>lazyReporter</code> 中的內容。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startKoin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    androidLogger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    androidContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this@TestApp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    modules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mainModule)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    lazyModules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lazyReporter)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>目前 Koin 不會檢查您的模組是否依賴於延遲載入模組。</p></div>`,19)]))}const E=i(t,[["render",e]]);export{c as __pageData,E as default};
