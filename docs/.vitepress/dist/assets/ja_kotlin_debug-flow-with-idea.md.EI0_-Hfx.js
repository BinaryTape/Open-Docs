import{_ as r,a as k,b as h}from"./chunks/variable-optimised-out.gsL8I0ER.js";import{_ as d,a as g,b as c,c as E,d as u,e as y}from"./chunks/flow-debug-4.C9ixceil.js";import{_ as F,C as o,c as m,o as b,ag as l,j as i,a,G as t,w as n}from"./chunks/framework.Bksy39di.js";const I=JSON.parse('{"title":"IntelliJ IDEA を使用して Kotlin Flow をデバッグする – チュートリアル","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/debug-flow-with-idea.md","filePath":"ja/kotlin/debug-flow-with-idea.md","lastUpdated":1754307826000}'),f={name:"ja/kotlin/debug-flow-with-idea.md"};function _(C,s,B,w,x,D){const e=o("tab"),p=o("tabs");return b(),m("div",null,[s[6]||(s[6]=l('<h1 id="intellij-idea-を使用して-kotlin-flow-をデバッグする-–-チュートリアル" tabindex="-1">IntelliJ IDEA を使用して Kotlin Flow をデバッグする – チュートリアル <a class="header-anchor" href="#intellij-idea-を使用して-kotlin-flow-をデバッグする-–-チュートリアル" aria-label="Permalink to &quot;IntelliJ IDEA を使用して Kotlin Flow をデバッグする – チュートリアル&quot;">​</a></h1><p>このチュートリアルでは、IntelliJ IDEA を使用して Kotlin Flow を作成しデバッグする方法を説明します。</p><p>このチュートリアルは、<a href="/ja/kotlin/coroutines-guide">コルーチン</a>と<a href="/ja/kotlin/flow#flows">Kotlin Flow</a>の概念に関する事前知識があることを前提としています。</p><h2 id="kotlin-flow-を作成する" tabindex="-1">Kotlin Flow を作成する <a class="header-anchor" href="#kotlin-flow-を作成する" aria-label="Permalink to &quot;Kotlin Flow を作成する&quot;">​</a></h2><p>低速なエミッターと低速なコレクターを持つ Kotlin <a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/flow.html" target="_blank" rel="noreferrer">Flow</a> を作成します。</p>',5)),i("ol",null,[s[4]||(s[4]=i("li",null,[i("p",null,[a("IntelliJ IDEA で Kotlin プロジェクトを開きます。プロジェクトがない場合は、"),i("a",{href:"/ja/kotlin/jvm-get-started#create-a-project"},"作成"),a("してください。")])],-1)),i("li",null,[s[2]||(s[2]=i("p",null,[a("Gradle プロジェクトで "),i("code",null,"kotlinx.coroutines"),a(" ライブラリを使用するには、"),i("code",null,"build.gradle(.kts)"),a(" に次の依存関係を追加します。")],-1)),t(p,{group:"build-script"},{default:n(()=>[t(e,{title:"Kotlin","group-key":"kotlin"},{default:n(()=>s[0]||(s[0]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"dependencies"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    implementation"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"org.jetbrains.kotlinx:kotlinx-coroutines-core:1.10.2"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),t(e,{title:"Groovy","group-key":"groovy"},{default:n(()=>s[1]||(s[1]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"dependencies {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    implementation "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.10.2'")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),s[3]||(s[3]=i("p",null,[a("他のビルドシステムについては、"),i("a",{href:"https://github.com/Kotlin/kotlinx.coroutines#using-in-your-projects",target:"_blank",rel:"noreferrer"},[i("code",null,"kotlinx.coroutines"),a(" README")]),a(" の指示を参照してください。")],-1))]),s[5]||(s[5]=l(`<li><p><code>src/main/kotlin</code> にある <code>Main.kt</code> ファイルを開きます。</p><p><code>src</code> ディレクトリには Kotlin のソースファイルとリソースが含まれています。<code>Main.kt</code> ファイルには、<code>Hello World!</code> を出力するサンプルコードが含まれています。</p></li><li><p>3つの数値の Flow を返す <code>simple()</code> 関数を作成します。</p><ul><li>CPU を消費するブロッキングコードを模倣するために、<a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/delay.html" target="_blank" rel="noreferrer"><code>delay()</code></a> 関数を使用します。この関数は、スレッドをブロックすることなくコルーチンを 100 ミリ秒間サスペンドします。</li><li><code>for</code> ループ内で<a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/-flow-collector/emit.html" target="_blank" rel="noreferrer"><code>emit()</code></a> 関数を使用して値を生成します。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.coroutines.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.coroutines.flow.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.system.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> simple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Flow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> flow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        delay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        emit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><code>main()</code> 関数内のコードを変更します。</p><ul><li>コルーチンをラップするために、<a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/run-blocking.html" target="_blank" rel="noreferrer"><code>runBlocking()</code></a> ブロックを使用します。</li><li><a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/collect.html" target="_blank" rel="noreferrer"><code>collect()</code></a> 関数を使用して発行された値を収集します。</li><li>CPU を消費するコードを模倣するために、<a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/delay.html" target="_blank" rel="noreferrer"><code>delay()</code></a> 関数を使用します。この関数は、スレッドをブロックすることなくコルーチンを 300 ミリ秒間サスペンドします。</li><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.io/println.html" target="_blank" rel="noreferrer"><code>println()</code></a> 関数を使用して、Flow から収集された値を出力します。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> runBlocking</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    simple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">collect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            delay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">300</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>Build Project</strong> をクリックしてコードをビルドします。</p><p><img src="`+r+'" alt="Build an application"></p></li>',4))]),s[7]||(s[7]=l('<h2 id="コルーチンをデバッグする" tabindex="-1">コルーチンをデバッグする <a class="header-anchor" href="#コルーチンをデバッグする" aria-label="Permalink to &quot;コルーチンをデバッグする&quot;">​</a></h2><ol><li><p><code>emit()</code> 関数が呼び出されている行にブレークポイントを設定します。</p><p><img src="'+d+'" alt="Build a console application"></p></li><li><p>画面上部の実行構成の隣にある <strong>Debug</strong> をクリックして、コードをデバッグモードで実行します。</p><p><img src="'+k+'" alt="Build a console application"></p><p><strong>Debug</strong> ツールウィンドウが表示されます。</p><ul><li><strong>Frames</strong> タブにはコールスタックが含まれています。</li><li><strong>Variables</strong> タブには現在のコンテキストの変数が含まれています。Flow が最初の値を発行していることがわかります。</li><li><strong>Coroutines</strong> タブには、実行中またはサスペンドされたコルーチンに関する情報が含まれています。</li></ul><p><img src="'+g+'" alt="Debug the coroutine"></p></li><li><p><strong>Debug</strong> ツールウィンドウで <strong>Resume Program</strong> をクリックしてデバッガーセッションを再開します。プログラムは同じブレークポイントで停止します。</p><p><img src="'+c+'" alt="Debug the coroutine"></p><p>これで Flow は2番目の値を発行します。</p><p><img src="'+E+'" alt="Debug the coroutine"></p></li></ol><h3 id="最適化により除外された変数" tabindex="-1">最適化により除外された変数 <a class="header-anchor" href="#最適化により除外された変数" aria-label="Permalink to &quot;最適化により除外された変数&quot;">​</a></h3><p><code>suspend</code> 関数を使用している場合、デバッガーで変数の名前の隣に「<code>was optimized out</code>」というテキストが表示されることがあります。</p><p><img src="'+h+`" alt="Variable &quot;a&quot; was optimized out"></p><p>このテキストは、変数のライフタイムが短縮され、その変数がもはや存在しないことを意味します。 値が見えないため、最適化された変数を含むコードをデバッグするのは困難です。 <code>-Xdebug</code> コンパイラオプションを使用すると、この動作を無効にできます。</p><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p><strong>本番環境ではこのフラグを絶対に使用しないでください</strong> : <code>-Xdebug</code> は<a href="https://youtrack.jetbrains.com/issue/KT-48678/Coroutine-debugger-disable-was-optimised-out-compiler-feature#focus=Comments-27-6015585.0-0" target="_blank" rel="noreferrer">メモリリーク</a>を引き起こす可能性があります。</p></div><h2 id="並行して実行されるコルーチンを追加する" tabindex="-1">並行して実行されるコルーチンを追加する <a class="header-anchor" href="#並行して実行されるコルーチンを追加する" aria-label="Permalink to &quot;並行して実行されるコルーチンを追加する&quot;">​</a></h2><ol><li><p><code>src/main/kotlin</code> にある <code>Main.kt</code> ファイルを開きます。</p></li><li><p>エミッターとコレクターを並行して実行するようにコードを強化します。</p><ul><li>エミッターとコレクターを並行して実行するために、<a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/buffer.html" target="_blank" rel="noreferrer"><code>buffer()</code></a> 関数への呼び出しを追加します。<code>buffer()</code> は発行された値を格納し、Flow コレクターを別のコルーチンで実行します。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> runBlocking</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    simple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">buffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">collect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            delay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">300</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>Build Project</strong> をクリックしてコードをビルドします。</p></li></ol><h2 id="_2つのコルーチンで-kotlin-flow-をデバッグする" tabindex="-1">2つのコルーチンで Kotlin Flow をデバッグする <a class="header-anchor" href="#_2つのコルーチンで-kotlin-flow-をデバッグする" aria-label="Permalink to &quot;2つのコルーチンで Kotlin Flow をデバッグする&quot;">​</a></h2><ol><li><p><code>println(value)</code> に新しいブレークポイントを設定します。</p></li><li><p>画面上部の実行構成の隣にある <strong>Debug</strong> をクリックして、コードをデバッグモードで実行します。</p><p><img src="`+u+'" alt="Build a console application"></p><p><strong>Debug</strong> ツールウィンドウが表示されます。</p><p><strong>Coroutines</strong> タブでは、2つのコルーチンが並行して実行されていることがわかります。<code>buffer()</code> 関数により、Flow コレクターとエミッターは別のコルーチンで実行されます。 <code>buffer()</code> 関数は Flow から発行された値をバッファリングします。 エミッターコルーチンは <strong>RUNNING</strong> ステータスになっており、コレクターコルーチンは <strong>SUSPENDED</strong> ステータスになっています。</p></li><li><p><strong>Debug</strong> ツールウィンドウで <strong>Resume Program</strong> をクリックして、デバッガーセッションを再開します。</p><p><img src="'+y+'" alt="Debugging coroutines"></p><p>これでコレクターコルーチンは <strong>RUNNING</strong> ステータスになり、一方エミッターコルーチンは <strong>SUSPENDED</strong> ステータスになっています。</p><p>各コルーチンをさらに詳しく調べて、コードをデバッグできます。</p></li></ol>',11))])}const T=F(f,[["render",_]]);export{I as __pageData,T as default};
