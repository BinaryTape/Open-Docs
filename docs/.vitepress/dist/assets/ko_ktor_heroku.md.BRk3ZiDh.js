import{_ as l,C as a,c as o,o as r,j as e,G as i,ag as h,a as t,w as d}from"./chunks/framework.Bksy39di.js";const F=JSON.parse('{"title":"헤로쿠","description":"","frontmatter":{},"headers":[],"relativePath":"ko/ktor/heroku.md","filePath":"ko/ktor/heroku.md","lastUpdated":1755457140000}'),k={name:"ko/ktor/heroku.md"};function c(u,s,g,E,y,b){const p=a("show-structure"),n=a("link-summary");return r(),o("div",null,[s[1]||(s[1]=e("h1",{id:"헤로쿠",tabindex:"-1"},[t("헤로쿠 "),e("a",{class:"header-anchor",href:"#헤로쿠","aria-label":'Permalink to "헤로쿠"'},"​")],-1)),i(p,{for:"chapter",depth:"2"}),i(n,null,{default:d(()=>s[0]||(s[0]=[t("Ktor 애플리케이션을 헤로쿠에 준비하고 배포하는 방법을 알아보세요.")])),_:1}),s[2]||(s[2]=h(`<p>이 튜토리얼에서는 Ktor 애플리케이션을 헤로쿠에 준비하고 배포하는 방법을 보여드립니다.</p><h2 id="prerequisites" tabindex="-1">사전 요구 사항 <a class="header-anchor" href="#prerequisites" aria-label="Permalink to &quot;사전 요구 사항 {id=&quot;prerequisites&quot;}&quot;">​</a></h2><p>이 튜토리얼을 시작하기 전에 다음 사전 요구 사항이 충족되었는지 확인하세요.</p><ul><li>헤로쿠 계정이 있어야 합니다.</li><li><a href="https://devcenter.heroku.com/articles/heroku-cli" target="_blank" rel="noreferrer">Heroku CLI</a>가 로컬 머신에 설치되어 있어야 합니다.</li></ul><h2 id="create-sample-app" tabindex="-1">샘플 애플리케이션 생성 <a class="header-anchor" href="#create-sample-app" aria-label="Permalink to &quot;샘플 애플리케이션 생성 {id=&quot;create-sample-app&quot;}&quot;">​</a></h2><p><a href="./server-create-a-new-project">새 Ktor 프로젝트 생성, 열기 및 실행</a>에 설명된 대로 샘플 애플리케이션을 생성합니다.</p><blockquote><p>Ktor는 <a href="./server-create-and-configure">서버 생성 및 구성</a>을 위한 두 가지 접근 방식(코드 또는 구성 파일 사용)을 제공합니다. 배포 시 유일한 차이점은 들어오는 요청을 수신하는 데 사용되는 <a href="#port">포트</a>를 지정하는 방법입니다.</p></blockquote><h2 id="prepare-app" tabindex="-1">애플리케이션 준비 <a class="header-anchor" href="#prepare-app" aria-label="Permalink to &quot;애플리케이션 준비 {id=&quot;prepare-app&quot;}&quot;">​</a></h2><h3 id="port" tabindex="-1">1단계: 포트 구성 <a class="header-anchor" href="#port" aria-label="Permalink to &quot;1단계: 포트 구성 {id=&quot;port&quot;}&quot;">​</a></h3><p>먼저, 들어오는 요청을 수신하는 데 사용될 포트를 지정해야 합니다. 헤로쿠는 <code>PORT</code> 환경 변수를 사용하므로, 애플리케이션이 이 변수의 값을 사용하도록 구성해야 합니다. <a href="./server-create-and-configure">Ktor 서버를 구성</a>하는 방식에 따라 다음 중 하나를 수행하세요:</p><ul><li><p>서버 구성이 코드에 지정된 경우, <code>System.getenv</code>를 사용하여 환경 변수 값을 얻을 수 있습니다. <code>src/main/kotlin/com/example</code> 폴더에 있는 <code>Application.kt</code> 파일을 열고, 아래와 같이 <code>embeddedServer</code> 함수의 <code>port</code> 파라미터 값을 변경하세요:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   embeddedServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Netty, port </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getenv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;PORT&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(wait </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>서버 구성이 <code>application.conf</code> 파일에 지정된 경우, <code>\${ENV}</code> 구문을 사용하여 환경 변수를 <code>port</code> 파라미터에 할당할 수 있습니다. <code>src/main/resources</code>에 있는 <code>application.conf</code> 파일을 열고, 아래와 같이 업데이트하세요:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ktor {</span></span>
<span class="line"><span>    deployment {</span></span>
<span class="line"><span>        port = 8080</span></span>
<span class="line"><span>        port = \${?PORT}</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div></li></ul><h3 id="stage" tabindex="-1">2단계: stage 태스크 추가 <a class="header-anchor" href="#stage" aria-label="Permalink to &quot;2단계: stage 태스크 추가 {id=&quot;stage&quot;}&quot;">​</a></h3><p><code>build.gradle.kts</code> 파일을 열고, 헤로쿠에서 실행되는 실행 파일을 만들기 위해 헤로쿠가 사용하는 사용자 지정 <code>stage</code> 태스크를 추가하세요:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tasks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;stage&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependsOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;installDist&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>installDist</code> 태스크는 Gradle <a href="https://docs.gradle.org/current/userguide/application_plugin.html" target="_blank" rel="noreferrer">애플리케이션 플러그인</a>에 포함되어 있으며, 이 플러그인은 이미 샘플 프로젝트에 추가되어 있습니다.</p><h3 id="procfile" tabindex="-1">3단계: Procfile 생성 <a class="header-anchor" href="#procfile" aria-label="Permalink to &quot;3단계: Procfile 생성 {id=&quot;procfile&quot;}&quot;">​</a></h3><p>프로젝트 루트에 <a href="https://devcenter.heroku.com/articles/procfile" target="_blank" rel="noreferrer">Procfile</a>을 생성하고 다음 내용을 추가하세요:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>web: ./build/install/ktor-get-started-sample/bin/ktor-get-started-sample</span></span></code></pre></div><p>이 파일은 <a href="#stage"><code>stage</code></a> 태스크에 의해 생성된 애플리케이션 실행 파일의 경로를 지정하며, 헤로쿠가 애플리케이션을 시작할 수 있도록 합니다. <code>ktor-get-started-sample</code>을 프로젝트 이름으로 바꿔야 할 수도 있습니다.</p><h2 id="deploy-app" tabindex="-1">애플리케이션 배포 <a class="header-anchor" href="#deploy-app" aria-label="Permalink to &quot;애플리케이션 배포 {id=&quot;deploy-app&quot;}&quot;">​</a></h2><p>Git을 사용하여 헤로쿠에 애플리케이션을 배포하려면 터미널을 열고 다음 단계를 따르세요:</p><ol><li><p><a href="#prepare-app">이전 섹션</a>에서 변경한 내용을 로컬에 커밋합니다:</p><div class="language-Bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> commit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -m</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Prepare app for deploying&quot;</span></span></code></pre></div></li><li><p>헤로쿠 CLI에 로그인합니다:</p><div class="language-Bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">heroku</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> login</span></span></code></pre></div></li><li><p><code>heroku create</code> 명령어를 사용하여 헤로쿠 애플리케이션을 생성합니다. <code>ktor-sample-heroku</code>를 애플리케이션 이름으로 바꿔야 합니다:</p><div class="language-Bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">heroku</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ktor-sample-heroku</span></span></code></pre></div><p>이 명령어는 두 가지를 수행합니다:</p><ul><li>새 헤로쿠 애플리케이션을 생성합니다. 이 애플리케이션은 <a href="https://dashboard.heroku.com/apps/" target="_blank" rel="noreferrer">웹 대시보드</a>에서 확인할 수 있습니다.</li><li>로컬 저장소에 <code>heroku</code>라는 새 Git 리모트를 추가합니다.</li></ul></li><li><p>애플리케이션을 배포하려면 <code>heroku main</code>으로 변경 사항을 푸시합니다...</p><div class="language-Bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> heroku</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main</span></span></code></pre></div><p>... 그리고 헤로쿠가 애플리케이션을 빌드하고 배포할 때까지 기다리세요:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>...</span></span>
<span class="line"><span>remote: https://ktor-sample-heroku.herokuapp.com/ deployed to Heroku</span></span>
<span class="line"><span>remote:</span></span>
<span class="line"><span>remote: Verifying deploy... done.</span></span></code></pre></div></li></ol>`,22))])}const v=l(k,[["render",c]]);export{F as __pageData,v as default};
