import{_ as i,c as a,o as n,ag as l}from"./chunks/framework.Bksy39di.js";const o=JSON.parse('{"title":"視認性修飾子","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/visibility-modifiers.md","filePath":"ja/kotlin/visibility-modifiers.md","lastUpdated":1754307826000}'),e={name:"ja/kotlin/visibility-modifiers.md"};function t(p,s,h,k,d,r){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="視認性修飾子" tabindex="-1">視認性修飾子 <a class="header-anchor" href="#視認性修飾子" aria-label="Permalink to &quot;視認性修飾子&quot;">​</a></h1><p>クラス、オブジェクト、インターフェース、コンストラクタ、関数、およびプロパティとそのセッターは、<em>視認性修飾子</em>を持つことができます。 ゲッターは常に、対応するプロパティと同じ視認性を持ちます。</p><p>Kotlinには、<code>private</code>、<code>protected</code>、<code>internal</code>、<code>public</code>の4つの視認性修飾子があります。 デフォルトの視認性は<code>public</code>です。</p><p>このページでは、これらの修飾子が異なる種類の宣言スコープにどのように適用されるかを学びます。</p><h2 id="パッケージ" tabindex="-1">パッケージ <a class="header-anchor" href="#パッケージ" aria-label="Permalink to &quot;パッケージ&quot;">​</a></h2><p>関数、プロパティ、クラス、オブジェクト、インターフェースは、パッケージ内に直接「トップレベル」で宣言できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// file name: example.kt</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> baz</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">. }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">. }</span></span></code></pre></div><ul><li>視認性修飾子を使用しない場合、デフォルトで<code>public</code>が使用されます。これは、宣言がどこからでも見えることを意味します。</li><li>宣言を<code>private</code>とマークした場合、その宣言を含むファイル内でのみ可視になります。</li><li><code>internal</code>とマークした場合、同じ<a href="#modules">モジュール</a>内のどこからでも可視になります。</li><li><code>protected</code>修飾子は、トップレベル宣言には使用できません。</li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>他のパッケージから可視なトップレベル宣言を使用するには、その宣言を<a href="/ja/kotlin/packages#imports">インポート</a>する必要があります。</p></div><p>例:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// file name: example.kt</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">. } </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// visible inside example.kt</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bar: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // property is visible everywhere</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> set</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         // setter is visible only in example.kt</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">internal</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> baz </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 6</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // visible inside the same module</span></span></code></pre></div><h2 id="クラスメンバー" tabindex="-1">クラスメンバー <a class="header-anchor" href="#クラスメンバー" aria-label="Permalink to &quot;クラスメンバー&quot;">​</a></h2><p>クラス内で宣言されたメンバーについて:</p><ul><li><code>private</code>は、そのメンバーがこのクラス内でのみ（そのすべてのメンバーを含め）可視であることを意味します。</li><li><code>protected</code>は、そのメンバーが<code>private</code>とマークされたものと同じ視認性を持つことを意味しますが、サブクラスからも可視です。</li><li><code>internal</code>は、宣言元のクラスを見ることができる<em>このモジュール内の</em>任意のクライアントが、その<code>internal</code>メンバーを見ることができることを意味します。</li><li><code>public</code>は、宣言元のクラスを見ることができる任意のクライアントが、その<code>public</code>メンバーを見ることができることを意味します。</li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Kotlinでは、外側のクラスは内部クラスのプライベートメンバーを見ることができません。</p></div><p><code>protected</code>または<code>internal</code>メンバーをオーバーライドする際に、視認性を明示的に指定しない場合、オーバーライドするメンバーも元のメンバーと同じ視認性を持ちます。</p><p>例:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">open</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Outer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    protected</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> open</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    internal</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> open</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // public by default</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    protected</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Nested</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Subclass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Outer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // a is not visible</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // b, c and d are visible</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Nested and e are visible</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // &#39;b&#39; is protected</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 7</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // &#39;c&#39; is internal</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Unrelated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(o: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Outer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // o.a, o.b are not visible</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // o.c and o.d are visible (same module)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Outer.Nested is not visible, and Nested::e is not visible either </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="コンストラクタ" tabindex="-1">コンストラクタ <a class="header-anchor" href="#コンストラクタ" aria-label="Permalink to &quot;コンストラクタ&quot;">​</a></h3><p>クラスのプライマリコンストラクタの視認性を指定するには、以下の構文を使用します。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>明示的に<code>constructor</code>キーワードを追加する必要があります。</p></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> C</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> private</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">. }</span></span></code></pre></div><p>ここでは、コンストラクタは<code>private</code>です。デフォルトでは、すべてのコンストラクタは<code>public</code>であり、事実上、クラスが可視であるどこからでも可視であることを意味します（これは、<code>internal</code>クラスのコンストラクタが同じモジュール内でのみ可視であることを意味します）。</p><p>シールドクラスの場合、コンストラクタはデフォルトで<code>protected</code>です。詳細については、<a href="/ja/kotlin/sealed-classes#constructors">シールドクラス</a>を参照してください。</p><h3 id="ローカル宣言" tabindex="-1">ローカル宣言 <a class="header-anchor" href="#ローカル宣言" aria-label="Permalink to &quot;ローカル宣言&quot;">​</a></h3><p>ローカル変数、関数、クラスは視認性修飾子を持つことができません。</p><h2 id="モジュール" tabindex="-1">モジュール <a class="header-anchor" href="#モジュール" aria-label="Permalink to &quot;モジュール&quot;">​</a></h2><p><code>internal</code>視認性修飾子は、そのメンバーが同じモジュール内で可視であることを意味します。より具体的には、 モジュールとは、以下に示すように、まとめてコンパイルされるKotlinファイルのセットです。</p><ul><li>IntelliJ IDEAモジュール。</li><li>Mavenプロジェクト。</li><li>Gradleソースセット（ただし、<code>test</code>ソースセットは<code>main</code>の内部宣言にアクセスできるという例外があります）。</li><li><code>&lt;kotlinc&gt;</code> Antタスクの1回の呼び出しでコンパイルされるファイルのセット。</li></ul>`,29)]))}const g=i(e,[["render",t]]);export{o as __pageData,g as default};
