import{_ as p,C as h,c as d,o as r,ag as n,j as i,G as l,a as s,w as t}from"./chunks/framework.Bksy39di.js";const _=JSON.parse('{"title":"Kotlin/Native를 동적 라이브러리로 사용하기 – 튜토리얼","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kotlin/native-dynamic-libraries.md","filePath":"ko/kotlin/native-dynamic-libraries.md","lastUpdated":1754307826000}'),E={name:"ko/kotlin/native-dynamic-libraries.md"};function o(g,a,c,y,F,b){const e=h("tab"),k=h("tabs");return r(),d("div",null,[a[6]||(a[6]=n('<h1 id="kotlin-native를-동적-라이브러리로-사용하기-–-튜토리얼" tabindex="-1">Kotlin/Native를 동적 라이브러리로 사용하기 – 튜토리얼 <a class="header-anchor" href="#kotlin-native를-동적-라이브러리로-사용하기-–-튜토리얼" aria-label="Permalink to &quot;Kotlin/Native를 동적 라이브러리로 사용하기 – 튜토리얼&quot;">​</a></h1><p>Kotlin 코드를 기존 프로그램에서 사용하기 위해 동적 라이브러리를 생성할 수 있습니다. 이를 통해 JVM, Python, Android 등을 포함한 다양한 플랫폼 또는 언어 간에 코드를 공유할 수 있습니다.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>iOS 및 기타 Apple 대상의 경우 프레임워크 생성을 권장합니다. <a href="/ko/kotlin/apple-framework">Kotlin/Native를 Apple 프레임워크로 사용하기</a> 튜토리얼을 참조하세요.</p></div><p>기존 네이티브 애플리케이션 또는 라이브러리에서 Kotlin/Native 코드를 사용할 수 있습니다. 이를 위해 Kotlin 코드를 <code>.so</code>, <code>.dylib</code>, 또는 <code>.dll</code> 형식의 동적 라이브러리로 컴파일해야 합니다.</p><p>이 튜토리얼에서는 다음을 수행합니다.</p><ul><li><a href="#create-a-kotlin-library">Kotlin 코드를 동적 라이브러리로 컴파일합니다.</a></li><li><a href="#generated-header-file">생성된 C 헤더를 살펴봅니다.</a></li><li><a href="#use-generated-headers-from-c">C에서 Kotlin 동적 라이브러리를 사용합니다.</a></li><li><a href="#compile-and-run-the-project">프로젝트를 컴파일하고 실행합니다.</a></li></ul><p>명령줄을 사용하거나 스크립트 파일(예: <code>.sh</code> 또는 <code>.bat</code> 파일)을 사용하여 직접 Kotlin 라이브러리를 생성할 수 있습니다. 하지만 이 접근 방식은 수백 개의 파일과 라이브러리를 가진 대규모 프로젝트에는 확장성이 떨어집니다. 빌드 시스템을 사용하면 Kotlin/Native 컴파일러 바이너리 및 전이적 종속성이 있는 라이브러리를 다운로드하고 캐싱하며, 컴파일러 및 테스트를 실행하여 프로세스를 간소화합니다. Kotlin/Native는 <a href="/ko/kotlin/gradle-configure-project#targeting-multiple-platforms">Kotlin Multiplatform 플러그인</a>을 통해 <a href="https://gradle.org" target="_blank" rel="noreferrer">Gradle</a> 빌드 시스템을 사용할 수 있습니다.</p><p>Gradle을 사용한 고급 C 상호 운용성 관련 Kotlin/Native 및 <a href="/ko/kotlin/gradle-configure-project#targeting-multiple-platforms">Kotlin Multiplatform</a> 빌드 사용법을 살펴보겠습니다.</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Mac을 사용하고 macOS 또는 기타 Apple 대상을 위한 애플리케이션을 생성하고 실행하려는 경우, <a href="https://developer.apple.com/download/" target="_blank" rel="noreferrer">Xcode Command Line Tools</a>를 설치하고 먼저 실행하여 라이선스 약관에 동의해야 합니다.</p></div><h2 id="kotlin-라이브러리-생성" tabindex="-1">Kotlin 라이브러리 생성 <a class="header-anchor" href="#kotlin-라이브러리-생성" aria-label="Permalink to &quot;Kotlin 라이브러리 생성&quot;">​</a></h2><p>Kotlin/Native 컴파일러는 Kotlin 코드로부터 동적 라이브러리를 생성할 수 있습니다. 동적 라이브러리에는 일반적으로 <code>.h</code> 헤더 파일이 함께 제공되며, 이를 사용하여 C에서 컴파일된 코드를 호출합니다.</p><p>Kotlin 라이브러리를 생성하고 C 프로그램에서 사용하는 방법을 살펴보겠습니다.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>자세한 첫 단계 및 새 Kotlin/Native 프로젝트를 생성하고 IntelliJ IDEA에서 여는 방법에 대한 지침은 <a href="/ko/kotlin/native-get-started#using-gradle">Kotlin/Native 시작하기</a> 튜토리얼을 참조하세요.</p></div>',13)),i("ol",null,[a[4]||(a[4]=n(`<li><p><code>src/nativeMain/kotlin</code> 디렉터리로 이동하여 다음 라이브러리 내용이 포함된 <code>lib.kt</code> 파일을 생성합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> example</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> field</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;A&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Clazz</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> memberFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ULong</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 42UL</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> forIntegers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(b: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, s: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Short</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, i: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, l: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> forFloats</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, d: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> strings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(str: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;That is &#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$str</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39; from C&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> globalString </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;A global String&quot;</span></span></code></pre></div></li>`,1)),i("li",null,[a[2]||(a[2]=i("p",null,[s("다음 내용으로 "),i("code",null,"build.gradle(.kts)"),s(" Gradle 빌드 파일을 업데이트합니다.")],-1)),l(k,{group:"build-script"},{default:t(()=>[l(e,{title:"Kotlin","group-key":"kotlin"},{default:t(()=>a[0]||(a[0]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"plugins"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"multiplatform"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") version "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"2.2.10"')]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"repositories"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    mavenCentral"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    macosArm64"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"native"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {    "),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// macOS on Apple Silicon")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},'    // macosX64("native") {'),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"   // macOS on x86_64 platforms")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},'    // linuxArm64("native") {'),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}}," // Linux on ARM64 platforms")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},'    // linuxX64("native") {'),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"   // Linux on x86_64 platforms")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},'    // mingwX64("native") {'),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"   // Windows")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"        binaries"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"            sharedLib"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"                baseName "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "native"'),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"       // macOS and Linux ")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},'                // baseName = "libnative"'),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}}," // Windows")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"wrapper"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    gradleVersion "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "8.14"')]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    distributionType "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," Wrapper.DistributionType.ALL")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),l(e,{title:"Groovy","group-key":"groovy"},{default:t(()=>a[1]||(a[1]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"plugins {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    id "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'org.jetbrains.kotlin.multiplatform'"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," version "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'2.2.10'")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"repositories {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    mavenCentral()")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"kotlin {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    macosArm64("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"native"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {    "),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// Apple Silicon macOS")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},'    // macosX64("native") {'),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"   // macOS on x86_64 platforms")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},'    // linuxArm64("native") {'),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}}," // Linux on ARM64 platforms")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},'    // linuxX64("native") {'),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"   // Linux on x86_64 platforms")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},'    // mingwX64("native") {'),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"   // Windows")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        binaries {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            sharedLib {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"                baseName "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "native"'),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"       // macOS and Linux ")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},'                // baseName = "libnative"'),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}}," // Windows")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"wrapper {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    gradleVersion "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "8.14"')]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    distributionType "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "ALL"')]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),a[3]||(a[3]=i("ul",null,[i("li",null,[i("code",null,"binaries {}"),s(" 블록은 동적 또는 공유 라이브러리를 생성하도록 프로젝트를 구성합니다.")]),i("li",null,[i("code",null,"libnative"),s("는 라이브러리 이름이자 생성된 헤더 파일 이름의 접두사로 사용됩니다. 또한 헤더 파일의 모든 선언에 접두사로 붙습니다.")])],-1))]),a[5]||(a[5]=n('<li><p>IDE에서 <code>linkDebugSharedNative</code> Gradle 작업을 실행하거나 터미널에서 다음 콘솔 명령어를 사용하여 라이브러리를 빌드합니다.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> linkDebugSharedNative</span></span></code></pre></div></li>',1))]),a[7]||(a[7]=n(`<p>빌드하면 라이브러리가 다음 파일들과 함께 <code>build/bin/native/debugShared</code> 디렉터리에 생성됩니다.</p><ul><li>macOS: <code>libnative_api.h</code> 및 <code>libnative.dylib</code></li><li>Linux: <code>libnative_api.h</code> 및 <code>libnative.so</code></li><li>Windows: <code>libnative_api.h</code>, <code>libnative.def</code>, 및 <code>libnative.dll</code></li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>linkNative</code> Gradle 작업을 사용하여 라이브러리의 <code>debug</code> 및 <code>release</code> 변형을 모두 생성할 수도 있습니다.</p></div><p>Kotlin/Native 컴파일러는 모든 플랫폼에 대해 <code>.h</code> 파일을 생성하는 데 동일한 규칙을 사용합니다. Kotlin 라이브러리의 C API를 살펴보겠습니다.</p><h2 id="생성된-헤더-파일" tabindex="-1">생성된 헤더 파일 <a class="header-anchor" href="#생성된-헤더-파일" aria-label="Permalink to &quot;생성된 헤더 파일&quot;">​</a></h2><p>Kotlin/Native 선언이 C 함수에 어떻게 매핑되는지 살펴보겠습니다.</p><p><code>build/bin/native/debugShared</code> 디렉터리에서 <code>libnative_api.h</code> 헤더 파일을 엽니다. 가장 첫 부분에는 표준 C/C++ 헤더와 푸터가 포함됩니다.</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#ifndef</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> KONAN_LIBNATIVE_H</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> KONAN_LIBNATIVE_H</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#ifdef</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> __cplusplus</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">extern</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;C&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#endif</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/// The rest of the generated code</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#ifdef</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> __cplusplus</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* extern &quot;C&quot; */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#endif</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#endif</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* KONAN_LIBNATIVE_H */</span></span></code></pre></div><p>이어서 <code>libnative_api.h</code>에는 공통 타입 정의 블록이 포함됩니다.</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#ifdef</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> __cplusplus</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            libnative_KBoolean;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#else</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> _Bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           libnative_KBoolean;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#endif</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> short</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     libnative_KChar;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> signed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        libnative_KByte;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> short</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              libnative_KShort;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                libnative_KInt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> long</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          libnative_KLong;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      libnative_KUByte;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> short</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     libnative_KUShort;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       libnative_KUInt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> unsigned</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> long</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> libnative_KULong;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              libnative_KFloat;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">             libnative_KDouble;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> float</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> __attribute__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ((</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">__vector_size__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))) libnative_KVector128;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              libnative_KNativePtr;</span></span></code></pre></div><p>Kotlin은 생성된 <code>libnative_api.h</code> 파일의 모든 선언에 <code>libnative_</code> 접두사를 사용합니다. 다음은 타입 매핑의 전체 목록입니다.</p><table tabindex="0"><thead><tr><th>Kotlin 정의</th><th>C 타입</th></tr></thead><tbody><tr><td><code>libnative_KBoolean</code></td><td><code>bool</code> or <code>_Bool</code></td></tr><tr><td><code>libnative_KChar</code></td><td><code>unsigned short</code></td></tr><tr><td><code>libnative_KByte</code></td><td><code>signed char</code></td></tr><tr><td><code>libnative_KShort</code></td><td><code>short</code></td></tr><tr><td><code>libnative_KInt</code></td><td><code>int</code></td></tr><tr><td><code>libnative_KLong</code></td><td><code>long long</code></td></tr><tr><td><code>libnative_KUByte</code></td><td><code>unsigned char</code></td></tr><tr><td><code>libnative_KUShort</code></td><td><code>unsigned short</code></td></tr><tr><td><code>libnative_KUInt</code></td><td><code>unsigned int</code></td></tr><tr><td><code>libnative_KULong</code></td><td><code>unsigned long long</code></td></tr><tr><td><code>libnative_KFloat</code></td><td><code>float</code></td></tr><tr><td><code>libnative_KDouble</code></td><td><code>double</code></td></tr><tr><td><code>libnative_KVector128</code></td><td><code>float __attribute__ ((__vector_size__ (16))</code></td></tr><tr><td><code>libnative_KNativePtr</code></td><td><code>void*</code></td></tr></tbody></table><p><code>libnative_api.h</code> 파일의 정의 섹션은 Kotlin 프리미티브 타입이 C 프리미티브 타입에 어떻게 매핑되는지를 보여줍니다. Kotlin/Native 컴파일러는 모든 라이브러리에 대해 이러한 항목을 자동으로 생성합니다. 역방향 매핑은 <a href="/ko/kotlin/mapping-primitive-data-types-from-c">C에서 프리미티브 데이터 타입 매핑</a> 튜토리얼에 설명되어 있습니다.</p><p>자동으로 생성된 타입 정의 다음에는 라이브러리에서 사용되는 별도의 타입 정의가 있습니다.</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> libnative_KType;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> libnative_KType libnative_KType;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/// Automatically generated type definitions</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  libnative_KNativePtr pinned;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} libnative_kref_example_Object;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  libnative_KNativePtr pinned;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} libnative_kref_example_Clazz;</span></span></code></pre></div><p>C에서 <code>typedef struct { ... } TYPE_NAME</code> 구문은 구조체를 선언합니다.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>이 패턴에 대한 자세한 설명은 <a href="https://stackoverflow.com/questions/1675351/typedef-struct-vs-struct-definitions" target="_blank" rel="noreferrer">이 StackOverflow 스레드</a>를 참조하세요.</p></div><p>이러한 정의에서 알 수 있듯이, Kotlin 타입은 동일한 패턴을 사용하여 매핑됩니다. <code>Object</code>는 <code>libnative_kref_example_Object</code>에 매핑되고, <code>Clazz</code>는 <code>libnative_kref_example_Clazz</code>에 매핑됩니다. 모든 구조체는 포인터가 있는 <code>pinned</code> 필드 외에는 아무것도 포함하지 않습니다. <code>libnative_KNativePtr</code> 필드 타입은 파일의 앞부분에서 <code>void*</code>로 정의됩니다.</p><p>C는 네임스페이스를 지원하지 않기 때문에, Kotlin/Native 컴파일러는 기존 네이티브 프로젝트의 다른 심볼과 충돌할 가능성을 피하기 위해 긴 이름을 생성합니다.</p><h3 id="서비스-런타임-함수" tabindex="-1">서비스 런타임 함수 <a class="header-anchor" href="#서비스-런타임-함수" aria-label="Permalink to &quot;서비스 런타임 함수&quot;">​</a></h3><p><code>libnative_ExportedSymbols</code> 구조체는 Kotlin/Native와 라이브러리에서 제공하는 모든 함수를 정의합니다. 패키지를 모방하기 위해 중첩된 익명 구조체를 많이 사용합니다. <code>libnative_</code> 접두사는 라이브러리 이름에서 가져온 것입니다.</p><p><code>libnative_ExportedSymbols</code>는 헤더 파일에 여러 헬퍼 함수를 포함합니다.</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* Service functions. */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DisposeStablePointer)(libnative_KNativePtr ptr);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DisposeString)(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> string);</span></span></code></pre></div><p>이 함수들은 Kotlin/Native 객체를 처리합니다. <code>DisposeStablePointer</code>는 Kotlin 객체에 대한 참조를 해제하는 데 사용되며, <code>DisposeString</code>은 C에서 <code>char*</code> 타입인 Kotlin 문자열을 해제하는 데 사용됩니다.</p><p><code>libnative_api.h</code> 파일의 다음 부분은 런타임 함수의 구조체 선언으로 구성됩니다.</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_KBoolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">IsInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(libnative_KNativePtr ref, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> libnative_KType</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> type);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_KBoolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">IsInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(libnative_KNativePtr ref, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> libnative_KType</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> type);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_kref_kotlin_Byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">createNullableByte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(libnative_KByte);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_KByte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">getNonNullValueOfByte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(libnative_kref_kotlin_Byte);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_kref_kotlin_Short</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">createNullableShort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(libnative_KShort);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_KShort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">getNonNullValueOfShort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(libnative_kref_kotlin_Short);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_kref_kotlin_Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">createNullableInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(libnative_KInt);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_KInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">getNonNullValueOfInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(libnative_kref_kotlin_Int);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_kref_kotlin_Long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">createNullableLong</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(libnative_KLong);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_KLong</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">getNonNullValueOfLong</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(libnative_kref_kotlin_Long);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_kref_kotlin_Float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">createNullableFloat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(libnative_KFloat);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_KFloat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">getNonNullValueOfFloat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(libnative_kref_kotlin_Float);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_kref_kotlin_Double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">createNullableDouble</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(libnative_KDouble);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_KDouble</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">getNonNullValueOfDouble</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(libnative_kref_kotlin_Double);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_kref_kotlin_Char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">createNullableChar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(libnative_KChar);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_KChar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">getNonNullValueOfChar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(libnative_kref_kotlin_Char);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_kref_kotlin_Boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">createNullableBoolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(libnative_KBoolean);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_KBoolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">getNonNullValueOfBoolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(libnative_kref_kotlin_Boolean);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_kref_kotlin_Unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">createNullableUnit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_kref_kotlin_UByte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">createNullableUByte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(libnative_KUByte);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_KUByte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">getNonNullValueOfUByte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(libnative_kref_kotlin_UByte);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_kref_kotlin_UShort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">createNullableUShort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(libnative_KUShort);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_KUShort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">getNonNullValueOfUShort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(libnative_kref_kotlin_UShort);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_kref_kotlin_UInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">createNullableUInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(libnative_KUInt);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_KUInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">getNonNullValueOfUInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(libnative_kref_kotlin_UInt);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_kref_kotlin_ULong</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">createNullableULong</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(libnative_KULong);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">libnative_KULong</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">getNonNullValueOfULong</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(libnative_kref_kotlin_ULong);</span></span></code></pre></div><p><code>IsInstance</code> 함수를 사용하여 Kotlin 객체(<code>.pinned</code> 포인터로 참조됨)가 특정 타입의 인스턴스인지 확인할 수 있습니다. 생성되는 실제 연산 집합은 실제 사용법에 따라 달라집니다.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Kotlin/Native는 자체 가비지 컬렉터를 가지고 있지만, C에서 접근하는 Kotlin 객체를 관리하지 않습니다. 하지만 Kotlin/Native는 <a href="/ko/kotlin/native-objc-interop">Swift/Objective-C와의 상호 운용성</a>을 제공하며, 가비지 컬렉터는 <a href="/ko/kotlin/native-arc-integration">Swift/Objective-C ARC와 통합</a>됩니다.</p></div><h3 id="라이브러리-함수" tabindex="-1">라이브러리 함수 <a class="header-anchor" href="#라이브러리-함수" aria-label="Permalink to &quot;라이브러리 함수&quot;">​</a></h3><p>라이브러리에서 사용되는 별도의 구조체 선언을 살펴보겠습니다. <code>libnative_kref_example</code> 필드는 <code>libnative_kref.</code> 접두사를 사용하여 Kotlin 코드의 패키지 구조를 모방합니다.</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* User functions. */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          libnative_KType</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_type)(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          libnative_kref_example_Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_instance)();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">get_field)(libnative_kref_example_Object thiz);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        } Object;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          libnative_KType</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_type)(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          libnative_kref_example_Clazz</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Clazz)();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          libnative_KULong</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">memberFunction)(libnative_kref_example_Clazz thiz, libnative_KInt p);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        } Clazz;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">get_globalString)();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">forFloats)(libnative_KFloat f, libnative_KDouble d);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">forIntegers)(libnative_KByte b, libnative_KShort s, libnative_KUInt i, libnative_KLong l);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">strings)(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      } example;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } root;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } kotlin;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} libnative_ExportedSymbols;</span></span></code></pre></div><p>이 코드는 익명 구조체 선언을 사용합니다. 여기서 <code>struct { ... } foo</code>는 이름이 없는 익명 구조체 타입의 바깥 구조체에 필드를 선언합니다.</p><p>C 또한 객체를 지원하지 않기 때문에, 함수 포인터를 사용하여 객체 의미론을 모방합니다. 함수 포인터는 <code>RETURN_TYPE (* FIELD_NAME)(PARAMETERS)</code>와 같이 선언됩니다.</p><p><code>libnative_kref_example_Clazz</code> 필드는 Kotlin의 <code>Clazz</code>를 나타냅니다. <code>libnative_KULong</code>은 <code>memberFunction</code> 필드를 통해 접근할 수 있습니다. 유일한 차이점은 <code>memberFunction</code>이 첫 번째 파라미터로 <code>thiz</code> 참조를 받는다는 것입니다. C는 객체를 지원하지 않으므로, <code>thiz</code> 포인터는 명시적으로 전달됩니다.</p><p><code>Clazz</code> 필드(일명 <code>libnative_kref_example_Clazz_Clazz</code>)에는 <code>Clazz</code>의 인스턴스를 생성하는 생성자 함수 역할을 하는 생성자가 있습니다.</p><p>Kotlin <code>object Object</code>는 <code>libnative_kref_example_Object</code>로 접근할 수 있습니다. <code>_instance</code> 함수는 해당 객체의 유일한 인스턴스를 검색합니다.</p><p>속성은 함수로 변환됩니다. <code>get_</code> 및 <code>set_</code> 접두사는 각각 getter 및 setter 함수의 이름을 지정합니다. 예를 들어, Kotlin의 읽기 전용 속성 <code>globalString</code>은 C에서 <code>get_globalString</code> 함수로 변환됩니다.</p><p>전역 함수 <code>forFloats</code>, <code>forIntegers</code>, <code>strings</code>는 <code>libnative_kref_example</code> 익명 구조체 내의 함수 포인터로 변환됩니다.</p><h3 id="진입점" tabindex="-1">진입점 <a class="header-anchor" href="#진입점" aria-label="Permalink to &quot;진입점&quot;">​</a></h3><p>이제 API가 어떻게 생성되는지 알았으니, <code>libnative_ExportedSymbols</code> 구조체의 초기화가 시작점입니다. 그럼 <code>libnative_api.h</code>의 마지막 부분을 살펴보겠습니다.</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">extern</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> libnative_ExportedSymbols</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> libnative_symbols</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p><code>libnative_symbols</code> 함수를 사용하면 네이티브 코드에서 Kotlin/Native 라이브러리로의 게이트웨이를 열 수 있습니다. 이는 라이브러리에 접근하기 위한 진입점입니다. 라이브러리 이름은 함수 이름의 접두사로 사용됩니다.</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>반환된 <code>libnative_ExportedSymbols*</code> 포인터를 스레드별로 호스팅해야 할 수도 있습니다.</p></div><h2 id="c에서-생성된-헤더-사용" tabindex="-1">C에서 생성된 헤더 사용 <a class="header-anchor" href="#c에서-생성된-헤더-사용" aria-label="Permalink to &quot;C에서 생성된 헤더 사용&quot;">​</a></h2><p>C에서 생성된 헤더를 사용하는 것은 간단합니다. 라이브러리 디렉터리에 다음 코드가 포함된 <code>main.c</code> 파일을 생성합니다.</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;libnative_api.h&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;stdio.h&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> argc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char**</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> argv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Obtain reference for calling Kotlin/Native functions</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  libnative_ExportedSymbols</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lib </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> libnative_symbols</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  lib-&gt;kotlin.root.example.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forIntegers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  lib-&gt;kotlin.root.example.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forFloats</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Use C and Kotlin/Native strings</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello from Native!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lib-&gt;kotlin.root.example.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">strings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(str);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;in: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%s</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">out:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%s</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, str, response);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  lib-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DisposeString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(response);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Create Kotlin object instance</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  libnative_kref_example_Clazz newInstance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lib-&gt;kotlin.root.example.Clazz.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Clazz</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lib-&gt;kotlin.root.example.Clazz.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">memberFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(newInstance, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  lib-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DisposeStablePointer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(newInstance.pinned);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;DemoClazz returned </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">%ld</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, x);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="프로젝트-컴파일-및-실행" tabindex="-1">프로젝트 컴파일 및 실행 <a class="header-anchor" href="#프로젝트-컴파일-및-실행" aria-label="Permalink to &quot;프로젝트 컴파일 및 실행&quot;">​</a></h2><h3 id="macos에서" tabindex="-1">macOS에서 <a class="header-anchor" href="#macos에서" aria-label="Permalink to &quot;macOS에서&quot;">​</a></h3><p>C 코드를 컴파일하고 동적 라이브러리와 링크하려면 라이브러리 디렉터리로 이동하여 다음 명령어를 실행합니다.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clang</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main.c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> libnative.dylib</span></span></code></pre></div><p>컴파일러는 <code>a.out</code>이라는 실행 파일을 생성합니다. 이를 실행하여 C 라이브러리에서 Kotlin 코드를 실행합니다.</p><h3 id="linux에서" tabindex="-1">Linux에서 <a class="header-anchor" href="#linux에서" aria-label="Permalink to &quot;Linux에서&quot;">​</a></h3><p>C 코드를 컴파일하고 동적 라이브러리와 링크하려면 라이브러리 디렉터리로 이동하여 다음 명령어를 실행합니다.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gcc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main.c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> libnative.so</span></span></code></pre></div><p>컴파일러는 <code>a.out</code>이라는 실행 파일을 생성합니다. 이를 실행하여 C 라이브러리에서 Kotlin 코드를 실행합니다. Linux에서는 애플리케이션이 현재 폴더에서 <code>libnative.so</code> 라이브러리를 로드하도록 <code>LD_LIBRARY_PATH</code>에 <code>.</code>을 포함해야 합니다.</p><h3 id="windows에서" tabindex="-1">Windows에서 <a class="header-anchor" href="#windows에서" aria-label="Permalink to &quot;Windows에서&quot;">​</a></h3><p>먼저 x64_64 대상을 지원하는 Microsoft Visual C++ 컴파일러를 설치해야 합니다.</p><p>가장 쉬운 방법은 Windows 컴퓨터에 Microsoft Visual Studio를 설치하는 것입니다. 설치 중에 C++ 작업을 위한 필수 구성 요소(예: <strong>C++를 사용한 데스크톱 개발</strong>)를 선택합니다.</p><p>Windows에서는 정적 라이브러리 래퍼를 생성하거나 <a href="https://learn.microsoft.com/en-gb/windows/win32/api/libloaderapi/nf-libloaderapi-loadlibrarya" target="_blank" rel="noreferrer">LoadLibrary</a> 또는 유사한 Win32API 함수를 사용하여 수동으로 동적 라이브러리를 포함할 수 있습니다.</p><p>첫 번째 옵션을 사용하여 <code>libnative.dll</code>에 대한 정적 래퍼 라이브러리를 생성해 보겠습니다.</p><ol><li><p>도구 체인에서 <code>lib.exe</code>를 호출하여 코드에서 DLL 사용을 자동화하는 정적 라이브러리 래퍼 <code>libnative.lib</code>를 생성합니다.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lib</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /def:libnative.def</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /out:libnative.lib</span></span></code></pre></div></li><li><p><code>main.c</code>를 실행 파일로 컴파일합니다. 생성된 <code>libnative.lib</code>를 빌드 명령에 포함하고 시작합니다.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cl.exe</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main.c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> libnative.lib</span></span></code></pre></div><p>이 명령은 실행할 수 있는 <code>main.exe</code> 파일을 생성합니다.</p></li></ol><h2 id="다음-단계" tabindex="-1">다음 단계 <a class="header-anchor" href="#다음-단계" aria-label="Permalink to &quot;다음 단계&quot;">​</a></h2><ul><li><a href="/ko/kotlin/native-objc-interop">Swift/Objective-C와의 상호 운용성에 대해 자세히 알아보기</a></li><li><a href="/ko/kotlin/apple-framework">Kotlin/Native를 Apple 프레임워크로 사용하기 튜토리얼 확인하기</a></li></ul>`,63))])}const u=p(E,[["render",o]]);export{_ as __pageData,u as default};
