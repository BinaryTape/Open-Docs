import{_ as v,C as n,c as g,o as E,G as s,ag as d,j as i,w as t,a as l}from"./chunks/framework.Bksy39di.js";const T=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ko/ktor/server-double-receive.md","filePath":"ko/ktor/server-double-receive.md","lastUpdated":1755457140000}'),b={name:"ko/ktor/server-double-receive.md"};function y(m,e,f,_,F,C){const k=n("TopicTitle"),u=n("primary-label"),r=n("Links"),h=n("tldr"),a=n("code-block"),o=n("TabItem"),p=n("Tabs"),c=n("list");return E(),g("div",null,[s(k,{labelRef:"server-plugin",title:"DoubleReceive"}),s(u,{ref:"server-plugin"},null,512),s(h,null,{default:t(()=>[e[3]||(e[3]=i("p",null,[i("b",null,"필수 의존성"),l(": "),i("code",null,"io.ktor:ktor-server-double-receive")],-1)),e[4]||(e[4]=i("p",null,[i("b",null,"코드 예시"),l(": "),i("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/double-receive"}," double-receive ")],-1)),i("p",null,[i("b",null,[s(r,{href:"/ktor/server-native",summary:"Ktor는 Kotlin/Native를 지원하며 추가 런타임이나 가상 머신 없이 서버를 실행할 수 있게 합니다."},{default:t(()=>e[0]||(e[0]=[l("네이티브 서버")])),_:1}),e[1]||(e[1]=l(" 지원"))]),e[2]||(e[2]=l(": ✅ "))])]),_:1}),e[17]||(e[17]=d('<p><a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-double-receive/io.ktor.server.plugins.doublereceive/-double-receive.html" target="_blank" rel="noreferrer">DoubleReceive</a> 플러그인은 <code>RequestAlreadyConsumedException</code> 예외 없이 <a href="./server-requests#body_contents">요청 바디를</a> 여러 번 수신할 수 있는 기능을 제공합니다. 이는 <a href="./server-plugins">플러그인</a>이 요청 바디를 이미 소비하여 라우트 핸들러 내에서 이를 수신할 수 없는 경우에 유용할 수 있습니다. 예를 들어, <a href="./server-call-logging">CallLogging</a> 플러그인을 사용하여 요청 바디를 로깅한 다음, <code>post</code> <a href="./server-routing#define_route">라우트 핸들러</a> 내에서 바디를 한 번 더 수신하는 데 <code>DoubleReceive</code>을 사용할 수 있습니다.</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p><code>DoubleReceive</code> 플러그인은 향후 업데이트에서 잠재적으로 호환성이 깨지는 변경 사항과 함께 발전할 것으로 예상되는 실험적인 API를 사용합니다.</p></div><h2 id="add_dependencies" tabindex="-1">의존성 추가 <a class="header-anchor" href="#add_dependencies" aria-label="Permalink to &quot;의존성 추가 {id=&quot;add_dependencies&quot;}&quot;">​</a></h2><p><code>DoubleReceive</code>을 사용하려면 빌드 스크립트에 <code>ktor-server-double-receive</code> 아티팩트를 포함해야 합니다: </p>',4)),s(p,{group:"languages"},{default:t(()=>[s(o,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:t(()=>[s(a,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-server-double-receive:$ktor_version")'})]),_:1}),s(o,{title:"Gradle (Groovy)","group-key":"groovy"},{default:t(()=>[s(a,{lang:"Groovy",code:'            implementation "io.ktor:ktor-server-double-receive:$ktor_version"'})]),_:1}),s(o,{title:"Maven","group-key":"maven"},{default:t(()=>[s(a,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-server-double-receive-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),e[18]||(e[18]=i("h2",{id:"install_plugin",tabindex:"-1"},[l("DoubleReceive 설치 "),i("a",{class:"header-anchor",href:"#install_plugin","aria-label":'Permalink to "DoubleReceive 설치 {id="install_plugin"}"'},"​")],-1)),i("p",null,[e[6]||(e[6]=l(" 애플리케이션에 ")),e[7]||(e[7]=i("code",null,"DoubleReceive",-1)),e[8]||(e[8]=l(" 플러그인을 ")),e[9]||(e[9]=i("a",{href:"#install"},"설치",-1)),e[10]||(e[10]=l("하려면, 지정된 ")),s(r,{href:"/ktor/server-modules",summary:"모듈을 사용하면 라우트를 그룹화하여 애플리케이션을 구조화할 수 있습니다."},{default:t(()=>e[5]||(e[5]=[l("모듈")])),_:1}),e[11]||(e[11]=l("의 ")),e[12]||(e[12]=i("code",null,"install",-1)),e[13]||(e[13]=l(" 함수에 전달하세요. 아래 코드 스니펫은 ")),e[14]||(e[14]=i("code",null,"DoubleReceive",-1)),e[15]||(e[15]=l("을 설치하는 방법을 보여줍니다... "))]),s(c,null,{default:t(()=>e[16]||(e[16]=[i("li",null,[l(" ... "),i("code",null,"embeddedServer"),l(" 함수 호출 내에서. ")],-1),i("li",null,[l(" ... "),i("code",null,"Application"),l(" 클래스의 확장 함수인 명시적으로 정의된 "),i("code",null,"module"),l(" 내에서. ")],-1)])),_:1}),s(p,null,{default:t(()=>[s(o,{title:"embeddedServer"},{default:t(()=>[s(a,{lang:"kotlin",code:`            import io.ktor.server.engine.*
            import io.ktor.server.netty.*
            import io.ktor.server.application.*
            import io.ktor.server.plugins.doublereceive.*

            fun main() {
                embeddedServer(Netty, port = 8080) {
                    install(DoubleReceive)
                    // ...
                }.start(wait = true)
            }`})]),_:1}),s(o,{title:"module"},{default:t(()=>[s(a,{lang:"kotlin",code:`            import io.ktor.server.application.*
            import io.ktor.server.plugins.doublereceive.*
            // ...
            fun Application.module() {
                install(DoubleReceive)
                // ...
            }`})]),_:1})]),_:1}),e[19]||(e[19]=d(`<p><code>DoubleReceive</code> 플러그인은 <a href="#install-route">특정 라우트에 설치</a>할 수도 있습니다. 이는 애플리케이션의 리소스별로 다른 <code>DoubleReceive</code> 설정을 필요로 할 때 유용할 수 있습니다. </p><p><code>DoubleReceive</code>을 설치한 후에는 <a href="./server-requests#body_contents">요청 바디를</a> 여러 번 수신할 수 있으며, 각 호출은 동일한 인스턴스를 반환합니다. 예를 들어, <a href="./server-call-logging">CallLogging</a> 플러그인을 사용하여 요청 바디 로깅을 활성화할 수 있습니다...</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CallLogging) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    level </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Level.TRACE</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { call </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        runBlocking</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;Body: \${call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">receiveText</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">()}&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>... 그리고 라우트 핸들러 내에서 요청 바디를 한 번 더 가져올 수 있습니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> receivedText </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">receiveText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Text &#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$receivedText</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39; is received&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>전체 예시는 다음에서 찾을 수 있습니다: <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/double-receive" target="_blank" rel="noreferrer">double-receive</a>.</p><h2 id="configure" tabindex="-1">DoubleReceive 설정 <a class="header-anchor" href="#configure" aria-label="Permalink to &quot;DoubleReceive 설정 {id=&quot;configure&quot;}&quot;">​</a></h2><p>기본 설정으로, <code>DoubleReceive</code>은 <a href="./server-requests#body_contents">요청 바디를</a> 다음 타입으로 수신하는 기능을 제공합니다:</p><ul><li><code>ByteArray</code></li><li><code>String</code></li><li><code>Parameters</code></li><li><code>ContentNegotiation</code> 플러그인에서 사용되는 <a href="./server-serialization#create_data_class">데이터 클래스</a></li></ul><p>기본적으로 <code>DoubleReceive</code>은 다음을 지원하지 않습니다:</p><ul><li>동일한 요청에서 다른 타입을 수신하는 것;</li><li><a href="./server-requests#raw">스트림 또는 채널</a>을 수신하는 것.</li></ul><p>동일한 요청에서 다른 타입을 수신하거나 스트림 또는 채널을 수신할 필요가 없다면 <code>cacheRawRequest</code> 속성을 <code>false</code>로 설정하세요:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(DoubleReceive) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    cacheRawRequest </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,13))])}const D=v(b,[["render",y]]);export{T as __pageData,D as default};
