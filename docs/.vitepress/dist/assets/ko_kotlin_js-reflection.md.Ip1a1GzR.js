import{_ as i,c as a,o as t,ag as l}from"./chunks/framework.Bksy39di.js";const c=JSON.parse('{"title":"Kotlin/JS 리플렉션","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kotlin/js-reflection.md","filePath":"ko/kotlin/js-reflection.md","lastUpdated":1754307826000}'),n={name:"ko/kotlin/js-reflection.md"};function e(h,s,k,p,r,o){return t(),a("div",null,s[0]||(s[0]=[l(`<h1 id="kotlin-js-리플렉션" tabindex="-1">Kotlin/JS 리플렉션 <a class="header-anchor" href="#kotlin-js-리플렉션" aria-label="Permalink to &quot;Kotlin/JS 리플렉션&quot;">​</a></h1><p>Kotlin/JS는 Kotlin <a href="/ko/kotlin/reflection">리플렉션 API</a>에 대한 제한적인 지원을 제공합니다. API의 지원되는 유일한 부분은 다음과 같습니다.</p><ul><li><a href="/ko/kotlin/reflection#class-references">클래스 참조</a> (<code>::class</code>)</li><li><a href="#ktype-and-typeof"><code>KType</code> 및 <code>typeof()</code></a></li><li><a href="#kclass-and-createinstance"><code>KClass</code> 및 <code>createInstance()</code></a></li></ul><h2 id="클래스-참조" tabindex="-1">클래스 참조 <a class="header-anchor" href="#클래스-참조" aria-label="Permalink to &quot;클래스 참조&quot;">​</a></h2><p><code>::class</code> 구문은 인스턴스의 클래스 또는 주어진 타입에 해당하는 클래스에 대한 참조를 반환합니다. Kotlin/JS에서 <code>::class</code> 표현식의 값은 다음만을 지원하는 간소화된 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/-k-class/" target="_blank" rel="noreferrer">KClass</a> 구현체입니다.</p><ul><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/-k-class/simple-name.html" target="_blank" rel="noreferrer">simpleName</a> 및 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/-k-class/is-instance.html" target="_blank" rel="noreferrer">isInstance()</a> 멤버.</li><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/cast.html" target="_blank" rel="noreferrer">cast()</a> 및 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/safe-cast.html" target="_blank" rel="noreferrer">safeCast()</a> 확장 함수.</li></ul><p>그 외에도 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.js/js.html" target="_blank" rel="noreferrer">KClass.js</a>를 사용하여 해당 클래스에 해당하는 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.js/-js-class/index.html" target="_blank" rel="noreferrer">JsClass</a> 인스턴스에 접근할 수 있습니다. <code>JsClass</code> 인스턴스 자체는 생성자 함수에 대한 참조입니다. 이는 생성자에 대한 참조를 필요로 하는 JS 함수와 상호 운용하는 데 사용될 수 있습니다.</p><h2 id="ktype-및-typeof" tabindex="-1">KType 및 typeOf() <a class="header-anchor" href="#ktype-및-typeof" aria-label="Permalink to &quot;KType 및 typeOf()&quot;">​</a></h2><p><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/type-of.html" target="_blank" rel="noreferrer"><code>typeof()</code></a> 함수는 주어진 타입에 대한 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/-k-type/" target="_blank" rel="noreferrer"><code>KType</code></a> 인스턴스를 구성합니다. <code>KType</code> API는 Java에 특화된 부분을 제외하고 Kotlin/JS에서 완전히 지원됩니다.</p><h2 id="kclass-및-createinstance" tabindex="-1">KClass 및 createInstance() <a class="header-anchor" href="#kclass-및-createinstance" aria-label="Permalink to &quot;KClass 및 createInstance()&quot;">​</a></h2><p><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/-k-class/" target="_blank" rel="noreferrer">KClass</a> 인터페이스의 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect.full/create-instance.html" target="_blank" rel="noreferrer"><code>createInstance()</code></a> 함수는 지정된 클래스의 새 인스턴스를 생성하며, 이는 Kotlin 클래스에 대한 런타임 참조를 얻는 데 유용합니다.</p><h2 id="예시" tabindex="-1">예시 <a class="header-anchor" href="#예시" aria-label="Permalink to &quot;예시&quot;">​</a></h2><p>다음은 Kotlin/JS에서 리플렉션을 사용하는 예시입니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">open</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Shape</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Rectangle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Shape</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">inline</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reified</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">accessReifiedTypeArg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">typeOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Shape</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> r </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Rectangle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(r::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.simpleName) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Prints &quot;Rectangle&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Shape::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.simpleName) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Prints &quot;Shape&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Shape::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.js.name) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Prints &quot;Shape&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Shape::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(r)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Prints &quot;true&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Rectangle::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Prints &quot;false&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rShape </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Shape::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cast</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(r) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Casts a Rectangle &quot;r&quot; to Shape</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    accessReifiedTypeArg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Rectangle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Accesses the type via typeOf(). Prints &quot;Rectangle&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,14)]))}const g=i(n,[["render",e]]);export{c as __pageData,g as default};
