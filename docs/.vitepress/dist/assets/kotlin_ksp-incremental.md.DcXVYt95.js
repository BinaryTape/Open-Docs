import{_ as i,c as a,o as e,ag as l}from"./chunks/framework.Bksy39di.js";const c=JSON.parse('{"title":"增量处理","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/ksp-incremental.md","filePath":"kotlin/ksp-incremental.md","lastUpdated":1754307826000}'),t={name:"kotlin/ksp-incremental.md"};function n(p,s,h,k,o,d){return e(),a("div",null,s[0]||(s[0]=[l(`<h1 id="增量处理" tabindex="-1">增量处理 <a class="header-anchor" href="#增量处理" aria-label="Permalink to &quot;增量处理&quot;">​</a></h1><p>增量处理是一种尽可能避免重复处理源文件的处理技术。 增量处理的主要目标是减少典型的修改-编译-测试循环的周转时间。 如需了解更多通用信息，请参阅维基百科上关于<a href="https://en.wikipedia.org/wiki/Incremental_computing" target="_blank" rel="noreferrer">增量计算</a>的文章。</p><p>为了确定哪些源文件是_脏的_（即需要重新处理的），KSP 需要处理器的帮助来识别哪些输入源文件与哪些生成的输出相对应。为了帮助解决这个通常繁琐且容易出错的过程，KSP 的设计要求只需最小集合的_根源文件_，处理器将其作为起点来导航代码结构。换句话说，如果 <code>KSNode</code> 是通过以下任何方式获得的，处理器需要将一个输出与对应的 <code>KSNode</code> 的源文件关联起来：</p><ul><li><code>Resolver.getAllFiles</code></li><li><code>Resolver.getSymbolsWithAnnotation</code></li><li><code>Resolver.getClassDeclarationByName</code></li><li><code>Resolver.getDeclarationsFromPackage</code></li></ul><p>增量处理当前默认启用。要禁用它，请设置 Gradle 属性 <code>ksp.incremental=false</code>。 要启用根据依赖项和输出转储脏集合的日志，请使用 <code>ksp.incremental.log=true</code>。 您可以在 <code>build</code> 输出目录中找到这些日志文件，其文件扩展名为 <code>.log</code>。</p><p>在 JVM 上，类路径更改以及 Kotlin 和 Java 源文件更改默认都会被跟踪。 要仅跟踪 Kotlin 和 Java 源文件更改，请通过设置 <code>ksp.incremental.intermodule=false</code> Gradle 属性来禁用类路径跟踪。</p><h2 id="聚合与隔离" tabindex="-1">聚合与隔离 <a class="header-anchor" href="#聚合与隔离" aria-label="Permalink to &quot;聚合与隔离&quot;">​</a></h2><p>类似于 <a href="https://docs.gradle.org/current/userguide/java_plugin.html#sec:incremental_annotation_processing" target="_blank" rel="noreferrer">Gradle 注解处理</a>中的概念，KSP 支持_聚合_模式和_隔离_模式。请注意，与 Gradle 注解处理不同，KSP 将每个输出归类为聚合或隔离，而不是将整个处理器归类。</p><p>聚合输出可能会受到任何输入更改的影响，除了移除不影响其他文件的文件。这意味着任何输入更改都会导致所有聚合输出的重新构建，这反过来意味着重新处理所有相应的已注册、新建和已修改的源文件。</p><p>例如，收集具有特定注解的所有符号的输出被视为聚合输出。</p><p>隔离输出仅依赖于其指定的源文件。对其他源文件的更改不会影响隔离输出。 请注意，与 Gradle 注解处理不同，您可以为一个给定输出定义多个源文件。</p><p>例如，一个专用于其所实现接口的生成类被视为隔离的。</p><p>总结来说，如果一个输出可能依赖于新的或任何已更改的源文件，它被视为聚合的。否则，该输出是隔离的。</p><p>以下是对熟悉 Java 注解处理的读者的总结：</p><ul><li>在隔离的 Java 注解处理器中，KSP 中的所有输出都是隔离的。</li><li>在聚合的 Java 注解处理器中，KSP 中的一些输出可以是隔离的，一些可以是聚合的。</li></ul><h3 id="实现方式" tabindex="-1">实现方式 <a class="header-anchor" href="#实现方式" aria-label="Permalink to &quot;实现方式&quot;">​</a></h3><p>依赖项是通过输入文件和输出文件的关联来计算的，而不是注解。 这是一个多对多关系。</p><p>由于输入-输出关联引起的脏性传播规则是：</p><ol><li>如果输入文件被更改，它总是会被重新处理。</li><li>如果输入文件被更改，并且它与一个输出相关联，那么与同一输出相关联的所有其他输入文件也将被重新处理。这是传递性的，即失效会反复发生，直到没有新的脏文件为止。</li><li>与一个或多个聚合输出相关联的所有输入文件都将被重新处理。换句话说，如果输入文件没有与任何聚合输出相关联，它将不会被重新处理（除非它满足上述第 1 或 2 条）。</li></ol><p>原因如下：</p><ol><li>如果输入发生更改，新信息可能会被引入，因此处理器需要再次使用该输入运行。</li><li>一个输出是由一组输入生成的。处理器可能需要所有输入才能重新生成该输出。</li><li><code>aggregating=true</code> 意味着输出可能依赖于新信息，这些信息可能来自新文件，或已更改的现有文件。 <code>aggregating=false</code> 意味着处理器确信信息仅来自某些输入文件，绝不来自其他文件或新文件。</li></ol><h2 id="示例-1" tabindex="-1">示例 1 <a class="header-anchor" href="#示例-1" aria-label="Permalink to &quot;示例 1&quot;">​</a></h2><p>一个处理器在读取 <code>A.kt</code> 中的 <code>A</code> 类和 <code>B.kt</code> 中的 <code>B</code> 类后生成 <code>outputForA</code>，其中 <code>A</code> 扩展了 <code>B</code>。 处理器通过 <code>Resolver.getSymbolsWithAnnotation</code> 获得 <code>A</code>，然后通过 <code>KSClassDeclaration.superTypes</code> 从 <code>A</code> 中获得 <code>B</code>。 因为 <code>B</code> 的包含是由于 <code>A</code>，<code>B.kt</code> 无需在 <code>outputForA</code> 的 <code>dependencies</code> 中指定。 在这种情况下，您仍然可以指定 <code>B.kt</code>，但这不是必需的。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// A.kt</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Interesting</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">B</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// B.kt</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">open</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> B</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Example1Processor.kt</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Example1Processor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SymbolProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> process</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(resolver: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Resolver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> declA </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> resolver.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getSymbolsWithAnnotation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Interesting&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">first</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> KSClassDeclaration</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> declB </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> declA.superTypes.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">first</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().declaration</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // B.kt 无需指定，因为它可以通过 KSP 推断为依赖项</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dependencies </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(aggregating </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, declA.containingFile</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // outputForA.kt</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> outputName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;outputFor\${declA.simpleName.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">asString</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">()}&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // outputForA 依赖于 A.kt 和 B.kt</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> output </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> codeGenerator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createNewFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dependencies, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;com.example&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, outputName, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;kt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        output.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;// </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$declA</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> : </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$declB</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toByteArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        output.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="示例-2" tabindex="-1">示例 2 <a class="header-anchor" href="#示例-2" aria-label="Permalink to &quot;示例 2&quot;">​</a></h2><p>假设一个处理器在读取 <code>sourceA</code> 后生成 <code>outputA</code>，并在读取 <code>sourceB</code> 后生成 <code>outputB</code>。</p><p>当 <code>sourceA</code> 被更改时：</p><ul><li>如果 <code>outputB</code> 是聚合的，<code>sourceA</code> 和 <code>sourceB</code> 都将被重新处理。</li><li>如果 <code>outputB</code> 是隔离的，只有 <code>sourceA</code> 会被重新处理。</li></ul><p>当 <code>sourceC</code> 被添加时：</p><ul><li>如果 <code>outputB</code> 是聚合的，<code>sourceC</code> 和 <code>sourceB</code> 都将被重新处理。</li><li>如果 <code>outputB</code> 是隔离的，只有 <code>sourceC</code> 会被重新处理。</li></ul><p>当 <code>sourceA</code> 被移除时，无需重新处理任何内容。</p><p>当 <code>sourceB</code> 被移除时，无需重新处理任何内容。</p><h2 id="如何确定文件脏性" tabindex="-1">如何确定文件脏性 <a class="header-anchor" href="#如何确定文件脏性" aria-label="Permalink to &quot;如何确定文件脏性&quot;">​</a></h2><p>脏文件要么由用户直接_更改_，要么间接被其他脏文件_影响_。KSP 分两步传播脏性：</p><ul><li>通过_解析追踪_传播： 解析类型引用（隐式或显式）是从一个文件导航到另一个文件的唯一方式。当处理器解析类型引用时，包含可能影响解析结果的更改的已更改或受影响文件将会影响包含该引用的文件。</li><li>通过_输入-输出对应关系_传播： 如果源文件被更改或受影响，所有与该文件具有共同输出的其他源文件都会受到影响。</li></ul><p>请注意，两者都具有传递性，第二种形式构成等价类。</p><h2 id="报告错误" tabindex="-1">报告错误 <a class="header-anchor" href="#报告错误" aria-label="Permalink to &quot;报告错误&quot;">​</a></h2><p>要报告错误，请设置 Gradle 属性 <code>ksp.incremental=true</code> 和 <code>ksp.incremental.log=true</code>，并执行一次完全构建。 此构建会生成两个日志文件：</p><ul><li><code>build/kspCaches/&lt;source set&gt;/logs/kspDirtySet.log</code></li><li><code>build/kspCaches/&lt;source set&gt;/logs/kspSourceToOutputs.log</code></li></ul><p>然后您可以运行后续的增量构建，这将生成两个额外的日志文件：</p><ul><li><code>build/kspCaches/&lt;source set&gt;/logs/kspDirtySetByDeps.log</code></li><li><code>build/kspCaches/&lt;source set&gt;/logs/kspDirtySetByOutputs.log</code></li></ul><p>这些日志包含源文件和输出的文件名，以及构建的时间戳。</p>`,42)]))}const E=i(t,[["render",n]]);export{c as __pageData,E as default};
