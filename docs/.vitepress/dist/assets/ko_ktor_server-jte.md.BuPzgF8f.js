import{_ as u,C as n,c as y,o as m,G as e,j as i,ag as c,w as a,a as t}from"./chunks/framework.Bksy39di.js";const q=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ko/ktor/server-jte.md","filePath":"ko/ktor/server-jte.md","lastUpdated":1755457140000}'),v={name:"ko/ktor/server-jte.md"};function F(f,s,b,C,B,_){const k=n("TopicTitle"),h=n("show-structure"),d=n("primary-label"),r=n("Links"),E=n("tldr"),l=n("code-block"),p=n("TabItem"),o=n("Tabs"),g=n("list");return m(),y("div",null,[e(k,{labelRef:"server-plugin",title:"JTE"}),e(h,{for:"chapter",depth:"2"}),e(d,{ref:"server-plugin"},null,512),e(E,null,{default:a(()=>[s[3]||(s[3]=i("p",null,[i("b",null,"필수 의존성"),t(": "),i("code",null,"io.ktor:ktor-server-jte")],-1)),s[4]||(s[4]=i("p",null,[i("b",null,"코드 예시"),t(": "),i("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/jte"}," jte ")],-1)),i("p",null,[i("b",null,[e(r,{href:"/ktor/server-native",summary:"Ktor는 Kotlin/Native를 지원하며 추가 런타임이나 가상 머신 없이 서버를 실행할 수 있게 합니다."},{default:a(()=>s[0]||(s[0]=[t("네이티브 서버")])),_:1}),s[1]||(s[1]=t(" 지원"))]),s[2]||(s[2]=t(": ✖️ "))])]),_:1}),s[17]||(s[17]=i("p",null,[t("Ktor는 "),i("a",{href:"https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-jte/io.ktor.server.jte/-jte.html",target:"_blank",rel:"noreferrer"},"Jte"),t(" 플러그인을 설치하여 애플리케이션 내에서 "),i("a",{href:"https://github.com/casid/jte",target:"_blank",rel:"noreferrer"},"JTE 템플릿"),t("을 뷰로 사용할 수 있게 합니다.")],-1)),s[18]||(s[18]=i("h2",{id:"add_dependencies",tabindex:"-1"},[t("의존성 추가 "),i("a",{class:"header-anchor",href:"#add_dependencies","aria-label":'Permalink to "의존성 추가 {id="add_dependencies"}"'},"​")],-1)),s[19]||(s[19]=i("p",null,[i("code",null,"Jte"),t("을(를) 사용하려면 빌드 스크립트에 "),i("code",null,"ktor-server-jte"),t(" 아티팩트를 포함해야 합니다: ")],-1)),e(o,{group:"languages"},{default:a(()=>[e(p,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:a(()=>[e(l,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-server-jte:$ktor_version")'})]),_:1}),e(p,{title:"Gradle (Groovy)","group-key":"groovy"},{default:a(()=>[e(l,{lang:"Groovy",code:'            implementation "io.ktor:ktor-server-jte:$ktor_version"'})]),_:1}),e(p,{title:"Maven","group-key":"maven"},{default:a(()=>[e(l,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-server-jte-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),s[20]||(s[20]=i("blockquote",null,[i("p",null,[i("code",null,".kte"),t(" 파일을 처리하려면 "),i("code",null,"gg.jte:jte-kotlin"),t(" 아티팩트를 프로젝트에 추가해야 합니다.")])],-1)),s[21]||(s[21]=i("h2",{id:"install_plugin",tabindex:"-1"},[t("Jte 설치 "),i("a",{class:"header-anchor",href:"#install_plugin","aria-label":'Permalink to "Jte 설치 {id="install_plugin"}"'},"​")],-1)),i("p",null,[s[6]||(s[6]=t(" 애플리케이션에 ")),s[7]||(s[7]=i("code",null,"Jte",-1)),s[8]||(s[8]=t(" 플러그인을 ")),s[9]||(s[9]=i("a",{href:"#install"},"설치",-1)),s[10]||(s[10]=t("하려면, 지정된 ")),e(r,{href:"/ktor/server-modules",summary:"모듈을 사용하면 경로를 그룹화하여 애플리케이션 구조를 구성할 수 있습니다."},{default:a(()=>s[5]||(s[5]=[t("모듈")])),_:1}),s[11]||(s[11]=t("의 ")),s[12]||(s[12]=i("code",null,"install",-1)),s[13]||(s[13]=t(" 함수에 전달하세요. 아래 코드 스니펫은 ")),s[14]||(s[14]=i("code",null,"Jte",-1)),s[15]||(s[15]=t("을(를) 설치하는 방법을 보여줍니다... "))]),e(g,null,{default:a(()=>s[16]||(s[16]=[i("li",null,[t(" ... "),i("code",null,"embeddedServer"),t(" 함수 호출 내에서. ")],-1),i("li",null,[t(" ... "),i("code",null,"Application"),t(" 클래스의 확장 함수인 명시적으로 정의된 "),i("code",null,"module"),t(" 내에서. ")],-1)])),_:1}),e(o,null,{default:a(()=>[e(p,{title:"embeddedServer"},{default:a(()=>[e(l,{lang:"kotlin",code:`            import io.ktor.server.engine.*
            import io.ktor.server.netty.*
            import io.ktor.server.application.*
            import io.ktor.server.jte.*

            fun main() {
                embeddedServer(Netty, port = 8080) {
                    install(Jte)
                    // ...
                }.start(wait = true)
            }`})]),_:1}),e(p,{title:"module"},{default:a(()=>[e(l,{lang:"kotlin",code:`            import io.ktor.server.application.*
            import io.ktor.server.jte.*
            // ...
            fun Application.module() {
                install(Jte)
                // ...
            }`})]),_:1})]),_:1}),s[22]||(s[22]=c(`<p><code>install</code> 블록 내에서 JTE 템플릿을 로드하는 방법을 <a href="#configure">구성</a>할 수 있습니다.</p><h2 id="configure" tabindex="-1">Jte 구성 <a class="header-anchor" href="#configure" aria-label="Permalink to &quot;Jte 구성 {id=&quot;configure&quot;}&quot;">​</a></h2><h3 id="template_loading" tabindex="-1">템플릿 로딩 구성 <a class="header-anchor" href="#template_loading" aria-label="Permalink to &quot;템플릿 로딩 구성 {id=&quot;template_loading&quot;}&quot;">​</a></h3><p>JTE 템플릿을 로드하려면 다음을 수행해야 합니다:</p><ol><li>템플릿 코드를 해석하는 데 사용되는 <code>CodeResolver</code>를 생성합니다. 예를 들어, <code>DirectoryCodeResolver</code>를 구성하여 지정된 디렉토리에서 템플릿을 로드하거나 <code>ResourceCodeResolver</code>를 구성하여 애플리케이션 리소스에서 템플릿을 로드할 수 있습니다.</li><li><code>templateEngine</code> 속성을 사용하여 템플릿 엔진을 지정합니다. 이 엔진은 생성된 <code>CodeResolver</code>를 사용하여 템플릿을 네이티브 Java/Kotlin 코드로 변환합니다.</li></ol><p>예를 들어, 아래 코드 스니펫은 Ktor가 <code>templates</code> 디렉토리에서 JTE 템플릿을 찾도록 합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> gg.jte.TemplateEngine</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> gg.jte.resolve.DirectoryCodeResolver</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.application.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.jte.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> java.nio.file.Path</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Jte) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> resolver </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DirectoryCodeResolver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;templates&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        templateEngine </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TemplateEngine.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(resolver, gg.jte.ContentType.Html)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="use_template" tabindex="-1">응답으로 템플릿 전송 <a class="header-anchor" href="#use_template" aria-label="Permalink to &quot;응답으로 템플릿 전송 {id=&quot;use_template&quot;}&quot;">​</a></h3><p><code>templates</code> 디렉토리에 <code>index.kte</code> 템플릿이 있다고 가정해 봅시다:</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@param id: Int</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@param name: String</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Hello, \${name}!&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>지정된 <a href="./server-routing">경로</a>에 템플릿을 사용하려면, 다음과 같이 <code>JteContent</code>를 <code>call.respond</code> 메서드에 전달하세요:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> params </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mapOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> to </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> to </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;John&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respond</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">JteContent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;index.kte&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, params))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,12))])}const A=u(v,[["render",F]]);export{q as __pageData,A as default};
