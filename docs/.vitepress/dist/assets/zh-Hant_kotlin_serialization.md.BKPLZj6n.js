import{_ as h,C as o,c as k,o as p,ag as r,j as i,G as t,a,w as l}from"./chunks/framework.Bksy39di.js";const m=JSON.parse('{"title":"序列化","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/serialization.md","filePath":"zh-Hant/kotlin/serialization.md","lastUpdated":1754307826000}'),d={name:"zh-Hant/kotlin/serialization.md"};function g(E,s,c,b,y,u){const n=o("tab"),e=o("tabs");return p(),k("div",null,[s[6]||(s[6]=r('<h1 id="序列化" tabindex="-1">序列化 <a class="header-anchor" href="#序列化" aria-label="Permalink to &quot;序列化&quot;">​</a></h1><p><em>序列化</em> 是將應用程式所使用的資料轉換為可透過網路傳輸或儲存在資料庫或檔案中的格式的過程。相對地，<em>反序列化</em> 則是從外部來源讀取資料並將其轉換為執行時物件的相反過程。兩者對於大多數與第三方交換資料的應用程式來說都至關重要。</p><p>某些資料序列化格式，例如 <a href="https://www.json.org/json-en.html" target="_blank" rel="noreferrer">JSON</a> 和 <a href="https://developers.google.com/protocol-buffers" target="_blank" rel="noreferrer">Protocol Buffers</a> 特別常見。它們是語言中立且平台中立的，因此能夠讓以任何現代語言編寫的系統之間進行資料交換。</p><p>在 Kotlin 中，資料序列化工具以獨立的元件 <a href="https://github.com/Kotlin/kotlinx.serialization" target="_blank" rel="noreferrer">kotlinx.serialization</a> 提供。它由數個部分組成：<code>org.jetbrains.kotlin.plugin.serialization</code> Gradle 外掛程式、<a href="#libraries">執行時函式庫</a> 和編譯器外掛程式。</p><p>編譯器外掛程式 <code>kotlinx-serialization-compiler-plugin</code> 和 <code>kotlinx-serialization-compiler-plugin-embeddable</code> 直接發佈到 Maven Central。第二個外掛程式設計用於處理 <code>kotlin-compiler-embeddable</code> 構件，這是指令碼構件的預設選項。Gradle 會將編譯器外掛程式作為編譯器引數新增到您的專案中。</p><h2 id="函式庫" tabindex="-1">函式庫 <a class="header-anchor" href="#函式庫" aria-label="Permalink to &quot;函式庫&quot;">​</a></h2><p><code>kotlinx.serialization</code> 為所有支援的平台（JVM、JavaScript、Native）以及各種序列化格式（JSON、CBOR、Protocol Buffers 等）提供多套函式庫。您可以在<a href="#formats">下方</a>找到所有支援的序列化格式的完整列表。</p><p>所有 Kotlin 序列化函式庫都屬於 <code>org.jetbrains.kotlinx:</code> 群組。它們的名稱以 <code>kotlinx-serialization-</code> 開頭，並帶有反映序列化格式的尾碼。範例：</p><ul><li><code>org.jetbrains.kotlinx:kotlinx-serialization-json</code> 為 Kotlin 專案提供 JSON 序列化。</li><li><code>org.jetbrains.kotlinx:kotlinx-serialization-cbor</code> 提供 CBOR 序列化。</li></ul><p>平台專用構件會自動處理；您無需手動新增它們。在 JVM、JS、Native 和多平台專案中使用相同的相依性。</p><p>請注意，<code>kotlinx.serialization</code> 函式庫使用其自己的版本控制結構，該結構與 Kotlin 的版本控制不符。請在 <a href="https://github.com/Kotlin/kotlinx.serialization/releases" target="_blank" rel="noreferrer">GitHub</a> 上查看發行版以找到最新版本。</p><h2 id="格式" tabindex="-1">格式 <a class="header-anchor" href="#格式" aria-label="Permalink to &quot;格式&quot;">​</a></h2><p><code>kotlinx.serialization</code> 包含多種序列化格式的函式庫：</p><ul><li><a href="https://www.json.org/" target="_blank" rel="noreferrer">JSON</a>：<a href="https://github.com/Kotlin/kotlinx.serialization/blob/master/formats/README.md#json" target="_blank" rel="noreferrer"><code>kotlinx-serialization-json</code></a></li><li><a href="https://developers.google.com/protocol-buffers" target="_blank" rel="noreferrer">Protocol Buffers</a>：<a href="https://github.com/Kotlin/kotlinx.serialization/blob/master/formats/README.md#protobuf" target="_blank" rel="noreferrer"><code>kotlinx-serialization-protobuf</code></a></li><li><a href="https://cbor.io/" target="_blank" rel="noreferrer">CBOR</a>：<a href="https://github.com/Kotlin/kotlinx.serialization/blob/master/formats/README.md#cbor" target="_blank" rel="noreferrer"><code>kotlinx-serialization-cbor</code></a></li><li><a href="https://en.wikipedia.org/wiki/.properties" target="_blank" rel="noreferrer">Properties</a>：<a href="https://github.com/Kotlin/kotlinx.serialization/blob/master/formats/README.md#properties" target="_blank" rel="noreferrer"><code>kotlinx-serialization-properties</code></a></li><li><a href="https://github.com/lightbend/config/blob/master/HOCON.md" target="_blank" rel="noreferrer">HOCON</a>：<a href="https://github.com/lightbend/config/blob/master/formats/README.md#hocon" target="_blank" rel="noreferrer"><code>kotlinx-serialization-hocon</code></a> (僅限 JVM)</li></ul><p>請注意，除了 JSON 序列化函式庫 (<code>kotlinx-serialization-json</code>) 之外，所有函式庫都是<a href="/zh-Hant/kotlin/components-stability">實驗性</a>的，這表示它們的 API 可能會在不另行通知的情況下更改。</p><p>也有社群維護的函式庫支援更多序列化格式，例如 <a href="https://yaml.org/" target="_blank" rel="noreferrer">YAML</a> 或 <a href="https://avro.apache.org/" target="_blank" rel="noreferrer">Apache Avro</a>。有關可用序列化格式的詳細資訊，請參閱 <a href="https://github.com/Kotlin/kotlinx.serialization/blob/master/formats/README.md" target="_blank" rel="noreferrer"><code>kotlinx.serialization</code> 文件</a>。</p><h2 id="範例-json-序列化" tabindex="-1">範例：JSON 序列化 <a class="header-anchor" href="#範例-json-序列化" aria-label="Permalink to &quot;範例：JSON 序列化&quot;">​</a></h2><p>讓我們看看如何將 Kotlin 物件序列化為 JSON。</p><h3 id="新增外掛程式和相依性" tabindex="-1">新增外掛程式和相依性 <a class="header-anchor" href="#新增外掛程式和相依性" aria-label="Permalink to &quot;新增外掛程式和相依性&quot;">​</a></h3><p>開始之前，您必須設定建置指令碼，以便在專案中使用 Kotlin 序列化工具：</p>',20)),i("ol",null,[i("li",null,[s[2]||(s[2]=i("p",null,[a("套用 Kotlin 序列化 Gradle 外掛程式 "),i("code",null,"org.jetbrains.kotlin.plugin.serialization"),a(" (或在 Kotlin Gradle DSL 中使用 "),i("code",null,'kotlin("plugin.serialization")'),a(")。")],-1)),t(e,{group:"build-script"},{default:l(()=>[t(n,{title:"Kotlin","group-key":"kotlin"},{default:l(()=>s[0]||(s[0]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"plugins"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"jvm"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") version "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"2.2.10"')]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"plugin.serialization"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") version "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"2.2.10"')]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),t(n,{title:"Groovy","group-key":"groovy"},{default:l(()=>s[1]||(s[1]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"plugins {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    id "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'org.jetbrains.kotlin.jvm'"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," version "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'2.2.10'")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    id "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'org.jetbrains.kotlin.plugin.serialization'"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," version "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'2.2.10'"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  ")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1})]),i("li",null,[s[5]||(s[5]=i("p",null,[a("新增 JSON 序列化函式庫相依性："),i("code",null,"org.jetbrains.kotlinx:kotlinx-serialization-json:1.9.0")],-1)),t(e,{group:"build-script"},{default:l(()=>[t(n,{title:"Kotlin","group-key":"kotlin"},{default:l(()=>s[3]||(s[3]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"dependencies"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    implementation"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"org.jetbrains.kotlinx:kotlinx-serialization-json:1.9.0"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),t(n,{title:"Groovy","group-key":"groovy"},{default:l(()=>s[4]||(s[4]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"dependencies {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    implementation "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'org.jetbrains.kotlinx:kotlinx-serialization-json:1.9.0'")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1})])]),s[7]||(s[7]=r(`<p>現在您就可以在程式碼中使用序列化 API 了。該 API 位於 <code>kotlinx.serialization</code> 套件及其格式專用子套件中，例如 <code>kotlinx.serialization.json</code>。</p><h3 id="序列化和反序列化-json" tabindex="-1">序列化和反序列化 JSON <a class="header-anchor" href="#序列化和反序列化-json" aria-label="Permalink to &quot;序列化和反序列化 JSON&quot;">​</a></h3><ol><li>使用 <code>@Serializable</code> 標註類別，使其可序列化。</li></ol><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.serialization.Serializable</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Serializable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><ol start="2"><li>透過呼叫 <code>Json.encodeToString()</code> 來序列化此類別的實例。</li></ol><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.serialization.Serializable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.serialization.json.Json</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.serialization.encodeToString</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Serializable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> json </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Json.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">encodeToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;str&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>結果，您會得到一個包含此物件狀態的 JSON 格式字串：<code>{&quot;a&quot;: 42, &quot;b&quot;: &quot;str&quot;}</code></p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>您也可以在單次呼叫中序列化物件集合，例如列表： <code>kotlin val dataList = listOf(Data(42, &quot;str&quot;), Data(12, &quot;test&quot;)) val jsonList = Json.encodeToString(dataList) </code></p></div><ol start="3"><li>使用 <code>decodeFromString()</code> 函數從 JSON 反序列化物件：</li></ol><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.serialization.Serializable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.serialization.json.Json</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.serialization.decodeFromString</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Serializable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Json.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">decodeFromString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;{&quot;a&quot;:42, &quot;b&quot;: &quot;str&quot;}&quot;&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>就這樣！您已成功將物件序列化為 JSON 字串，並將其反序列化回物件。</p><h2 id="接下來" tabindex="-1">接下來 <a class="header-anchor" href="#接下來" aria-label="Permalink to &quot;接下來&quot;">​</a></h2><p>有關 Kotlin 序列化的更多資訊，請參閱 <a href="https://github.com/Kotlin/kotlinx.serialization/blob/master/docs/serialization-guide.md" target="_blank" rel="noreferrer">Kotlin 序列化指南</a>。</p><p>您可以在以下資源中探索 Kotlin 序列化的不同方面：</p><ul><li><a href="https://github.com/Kotlin/kotlinx.serialization/blob/master/docs/basic-serialization.md" target="_blank" rel="noreferrer">了解更多關於 Kotlin 序列化及其核心概念的資訊</a></li><li><a href="https://github.com/Kotlin/kotlinx.serialization/blob/master/docs/builtin-classes.md" target="_blank" rel="noreferrer">探索 Kotlin 的內建可序列化類別</a></li><li><a href="https://github.com/Kotlin/kotlinx.serialization/blob/master/docs/serializers.md" target="_blank" rel="noreferrer">更詳細地了解序列化器並學習如何建立自訂序列化器</a></li><li><a href="https://github.com/Kotlin/kotlinx.serialization/blob/master/docs/polymorphism.md#open-polymorphism" target="_blank" rel="noreferrer">了解 Kotlin 中如何處理多型序列化</a></li><li><a href="https://github.com/Kotlin/kotlinx.serialization/blob/master/docs/json.md#json-elements" target="_blank" rel="noreferrer">深入探討處理 Kotlin 序列化的各種 JSON 功能</a></li><li><a href="https://github.com/Kotlin/kotlinx.serialization/blob/master/docs/formats.md" target="_blank" rel="noreferrer">了解更多關於 Kotlin 支援的實驗性序列化格式</a></li></ul>`,15))])}const f=h(d,[["render",g]]);export{m as __pageData,f as default};
