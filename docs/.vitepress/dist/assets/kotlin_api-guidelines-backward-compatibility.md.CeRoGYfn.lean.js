import{_ as l,C as e,c as p,o as h,j as s,ag as a,G as k,a as t}from"./chunks/framework.Bksy39di.js";const u=JSON.parse('{"title":"针对库作者的向后兼容性指南","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/api-guidelines-backward-compatibility.md","filePath":"kotlin/api-guidelines-backward-compatibility.md","lastUpdated":1754307826000}'),d={name:"kotlin/api-guidelines-backward-compatibility.md"};function r(o,i,c,g,E,y){const n=e("TopicTitle");return h(),p("div",null,[i[0]||(i[0]=s("h1",{id:"针对库作者的向后兼容性指南",tabindex:"-1"},[t("针对库作者的向后兼容性指南 "),s("a",{class:"header-anchor",href:"#针对库作者的向后兼容性指南","aria-label":'Permalink to "针对库作者的向后兼容性指南"'},"​")],-1)),i[1]||(i[1]=s("p",null,"创建库最常见的动机是向更广泛的社区暴露功能性。这个社区可能是一个单个团队、一家公司、一个特定行业或一个技术平台。在每种情况下，向后兼容性都将是一个重要考量。社区越广泛，向后兼容性就越重要，因为你将越不清楚你的用户是谁以及他们工作所受的限制。",-1)),i[2]||(i[2]=s("p",null,"向后兼容性并非单一术语，而可以在二进制、源代码和行为层面定义。本节将提供关于这些类型的更多信息。",-1)),i[3]||(i[3]=s("p",null,"请注意：",-1)),i[4]||(i[4]=s("ul",null,[s("li",null,"在不破坏源代码兼容性的情况下，可能会破坏二进制兼容性，反之亦然。"),s("li",null,"保证源代码兼容性是期望的，但非常困难。作为库作者，你必须考虑库用户可能调用或实例化函数或类型的每种可能方式。源代码兼容性通常是一种愿望，而非承诺。")],-1)),i[5]||(i[5]=s("p",null,"本节的其余部分将描述你可以采取的行动以及可以使用的工具，以帮助确保不同类型的兼容性。",-1)),i[6]||(i[6]=s("h2",{"initial-collapse-state":"collapsed",collapsible:"true",id:"兼容性类型",tabindex:"-1"},[t("兼容性类型 "),s("a",{class:"header-anchor",href:"#兼容性类型","aria-label":'Permalink to "兼容性类型 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),i[7]||(i[7]=a("",10)),k(n,{id:"kotlin-gradle-插件中的二进制兼容性验证",level:"3",title:"Kotlin Gradle 插件中的二进制兼容性验证",labelRef:"experimental-general"}),i[8]||(i[8]=a("",23)),i[9]||(i[9]=s("h3",{"initial-collapse-state":"collapsed",collapsible:"true",id:"使用重载保留兼容性",tabindex:"-1"},[t("使用重载保留兼容性 "),s("a",{class:"header-anchor",href:"#使用重载保留兼容性","aria-label":'Permalink to "使用重载保留兼容性 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),i[10]||(i[10]=a("",54))])}const F=l(d,[["render",r]]);export{u as __pageData,F as default};
