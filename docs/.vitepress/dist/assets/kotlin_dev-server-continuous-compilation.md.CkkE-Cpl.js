import{_ as t,a as i,b as a}from"./chunks/waiting-for-changes.B2D0TX8R.js";import{_ as n,c as o,o as s,ag as r}from"./chunks/framework.Bksy39di.js";const k=JSON.parse('{"title":"开发服务器与连续编译","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/dev-server-continuous-compilation.md","filePath":"kotlin/dev-server-continuous-compilation.md","lastUpdated":1754307826000}'),l={name:"kotlin/dev-server-continuous-compilation.md"};function p(d,e,c,u,m,h){return s(),o("div",null,e[0]||(e[0]=[r('<h1 id="开发服务器与连续编译" tabindex="-1">开发服务器与连续编译 <a class="header-anchor" href="#开发服务器与连续编译" aria-label="Permalink to &quot;开发服务器与连续编译&quot;">​</a></h1><p>无需每次手动编译和执行 Kotlin/JS 项目以查看您所做的更改，您可以使用<em>连续编译</em>模式。无需使用常规的 <code>run</code> 命令，您可以在<em>连续</em>模式下调用 Gradle wrapper：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --continuous</span></span></code></pre></div><p>如果您在 IntelliJ IDEA 中工作，可以通过<em>运行配置</em>传递相同的标志。首次从 IDE 运行 Gradle <code>run</code> 任务后，IntelliJ IDEA 会自动为其生成一个运行配置，您可以对其进行编辑：</p><p><img src="'+t+'" alt="Editing run configurations in IntelliJ IDEA" width="700"></p><p>通过<strong>运行/调试配置</strong>对话框启用连续模式非常简单，只需将 <code>--continuous</code> 标志添加到运行配置的实参中即可：</p><p><img src="'+i+'" alt="Adding the continuous flag to a run configuration in IntelliJ IDEA" width="700"></p><p>执行此运行配置时，您会注意到 Gradle 进程会持续监视程序的更改：</p><p><img src="'+a+'" alt="Gradle waiting for changes" width="700"></p><p>一旦检测到更改，程序将自动重新编译。如果您在浏览器中仍然打开该页面，开发服务器将触发页面自动重新加载，并且更改将可见。这得益于由 Kotlin Multiplatform Gradle plugin 管理的集成 <code>webpack-dev-server</code>。</p>',10)]))}const v=n(l,[["render",p]]);export{k as __pageData,v as default};
