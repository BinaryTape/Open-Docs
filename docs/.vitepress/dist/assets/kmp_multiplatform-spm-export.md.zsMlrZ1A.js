import{_ as d,a as E,b as o}from"./chunks/multiplatform-spm-url._IA5Tg3X.js";import{_ as g,C as l,c,o as y,j as s,G as n,ag as e,a,w as t}from"./chunks/framework.Bksy39di.js";const A=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"kmp/multiplatform-spm-export.md","filePath":"kmp/multiplatform-spm-export.md","lastUpdated":1755516278000}'),F={name:"kmp/multiplatform-spm-export.md"};function m(u,i,C,f,w,b){const p=l("tldr"),h=l("list"),k=l("def"),r=l("deflist");return y(),c("div",null,[i[5]||(i[5]=s("h1",{id:"swift-包导出设置",tabindex:"-1"},[a("Swift 包导出设置 "),s("a",{class:"header-anchor",href:"#swift-包导出设置","aria-label":'Permalink to "Swift 包导出设置"'},"​")],-1)),n(p,null,{default:t(()=>i[0]||(i[0]=[a(" 这是一个远程集成方法。它适用于以下情况："),s("br",null,null,-1),s("ul",null,[s("li",null,"你希望将最终应用程序的代码库与公共代码库分开。"),s("li",null,"你已经在本地机器上设置了一个面向 iOS 的 Kotlin Multiplatform 项目。"),s("li",null,[a("你在 iOS 项目中使用 Swift 包管理器来处理依赖项。"),s("br")])],-1),s("p",null,[s("a",{href:"./multiplatform-ios-integration-overview"},"选择最适合你的集成方法")],-1)])),_:1}),i[6]||(i[6]=e('<p>你可以将 Kotlin/Native 为 Apple 目标平台生成的输出设置为 Swift 包管理器 (SPM) 依赖项进行使用。</p><p>假设有一个包含 iOS 目标平台的 Kotlin Multiplatform 项目。你可能希望将此 iOS 二进制文件作为依赖项提供给从事原生 Swift 项目的 iOS 开发者。使用 Kotlin Multiplatform 工具，你可以提供一个能够与他们的 Xcode 项目无缝集成的构件。</p><p>本教程展示了如何使用 Kotlin Gradle 插件构建 <a href="./multiplatform-build-native-binaries#build-xcframeworks">XCFramework</a> 来实现此目的。</p><h2 id="设置远程集成" tabindex="-1">设置远程集成 <a class="header-anchor" href="#设置远程集成" aria-label="Permalink to &quot;设置远程集成&quot;">​</a></h2><p>为了使你的 framework 可用，你需要上传两个文件：</p><ul><li>一个包含 XCFramework 的 ZIP 归档。你需要将其上传到具有直接访问权限的便捷文件存储（例如，通过附加归档创建 GitHub release，使用 Amazon S3 或 Maven）。 选择最容易集成到你的工作流程中的选项。</li><li>描述包的 <code>Package.swift</code> 文件。你需要将其推送到一个单独的 Git 版本库。</li></ul>',6)),i[7]||(i[7]=s("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"项目配置选项",tabindex:"-1"},[a("项目配置选项 "),s("a",{class:"header-anchor",href:"#项目配置选项","aria-label":'Permalink to "项目配置选项 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),i[8]||(i[8]=e(`<p>在本教程中，你将把 XCFramework 作为二进制文件存储在你首选的文件存储中，并将 <code>Package.swift</code> 文件存储在一个单独的 Git 版本库中。</p><p>但是，你可以以不同的方式配置你的项目。考虑以下组织 Git 版本库的选项：</p><ul><li><p>将 <code>Package.swift</code> 文件和应打包到 XCFramework 中的代码存储在不同的 Git 版本库中。 这允许 Swift manifest 与文件所描述的项目分开进行版本控制。这是推荐的方法：它允许可伸缩性，并且通常更容易维护。</p></li><li><p>将 <code>Package.swift</code> 文件放在你的 Kotlin Multiplatform 代码旁边。这是一种更直接的方法，但请记住，在这种情况下，Swift 包和代码将使用相同的版本控制。SPM 使用 Git 标签进行包版本控制，这可能与你的项目使用的标签冲突。</p></li><li><p>将 <code>Package.swift</code> 文件存储在消费者项目的版本库中。这有助于避免版本控制和维护问题。 然而，这种方法可能会导致消费者项目在多版本库 SPM 设置和进一步自动化方面的某些问题：</p><ul><li>在一个多包项目中，只有一个消费者包可以依赖外部模块（以避免项目内的依赖项冲突）。因此，所有依赖于你的 Kotlin Multiplatform 模块的逻辑都应该封装在一个特定的消费者包中。</li><li>如果你使用自动化 CI 流程发布 Kotlin Multiplatform 项目，则此流程需要包含将更新的 <code>Package.swift</code> 文件发布到消费者版本库。这可能导致消费者版本库的更新冲突，因此 CI 中的此阶段可能难以维护。</li></ul></li></ul><h3 id="配置你的-multiplatform-项目" tabindex="-1">配置你的 Multiplatform 项目 <a class="header-anchor" href="#配置你的-multiplatform-项目" aria-label="Permalink to &quot;配置你的 Multiplatform 项目&quot;">​</a></h3><p>在以下示例中，Kotlin Multiplatform 项目的共享代码存储在本地的 <code>shared</code> 模块中。 如果你的项目结构不同，请在代码和路径示例中将 “shared” 替换为你的模块名称。</p><p>要设置 XCFramework 的发布：</p><ol><li><p>在 iOS 目标平台列表中，使用 <code>XCFramework</code> 调用更新你的 <code>shared/build.gradle.kts</code> 配置文件：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.kotlin.gradle.plugin.mpp.apple.XCFramework</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Other Kotlin Multiplatform targets</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Name of the module to be imported in the consumer project</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> xcframeworkName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Shared&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> xcf </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> XCFramework</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(xcframeworkName)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        iosX64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        iosArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        iosSimulatorArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        it.binaries.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">framework</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            baseName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> xcframeworkName</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // Specify CFBundleIdentifier to uniquely identify the framework</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            binaryOption</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;bundleId&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.example.\${xcframeworkName}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            xcf.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            isStatic </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>运行 Gradle 任务以创建 framework：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> :shared:assembleSharedXCFramework</span></span></code></pre></div><p>生成的 framework 将作为 <code>shared/build/XCFrameworks/release/Shared.xcframework</code> 文件夹创建在你的项目目录中。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>如果你正在使用 Compose Multiplatform 项目，请使用以下 Gradle 任务： <code>shell ./gradlew :composeApp:assembleSharedXCFramework </code> 然后你可以在 <code>composeApp/build/XCFrameworks/release/Shared.xcframework</code> 文件夹中找到生成的 framework。</p></div></li></ol><h3 id="准备-xcframework-和-swift-包-manifest" tabindex="-1">准备 XCFramework 和 Swift 包 manifest <a class="header-anchor" href="#准备-xcframework-和-swift-包-manifest" aria-label="Permalink to &quot;准备 XCFramework 和 Swift 包 manifest&quot;">​</a></h3>`,8)),s("ol",null,[i[3]||(i[3]=s("li",null,[s("p",null,[a("将 "),s("code",null,"Shared.xcframework"),a(" 文件夹压缩为 ZIP 文件，并计算生成归档的校验和，例如：")]),s("p",null,[s("code",null,"swift package compute-checksum Shared.xcframework.zip")])],-1)),s("li",null,[i[2]||(i[2]=s("p",null,"将 ZIP 文件上传到你选择的文件存储。该文件应可通过直接链接访问。例如，以下是使用 GitHub release 的操作方法：",-1)),n(r,{collapsible:"true"},{default:t(()=>[n(k,{title:"上传到 GitHub release"},{default:t(()=>[n(h,{type:"decimal"},{default:t(()=>i[1]||(i[1]=[s("li",null,[a("访问 "),s("a",{href:"https://github.com"},"GitHub"),a(" 并登录你的账户。")],-1),s("li",null,"导航到你希望创建 release 的版本库。",-1),s("li",null,[a("在右侧的 "),s("b",null,"Releases"),a(" 部分，点击 "),s("b",null,"Create a new release"),a(" 链接。")],-1),s("li",null,"填写 release 信息，添加或创建新标签，指定 release 标题并撰写描述。",-1),s("li",null,[s("p",null,[a("通过底部的 "),s("b",null,"Attach binaries by dropping them here or selecting them"),a(" 字段上传包含 XCFramework 的 ZIP 文件：")]),s("img",{src:d,alt:"Fill in the release information",width:"700"})],-1),s("li",null,[a("点击 "),s("b",null,"Publish release"),a("。")],-1),s("li",null,[s("p",null,[a("在 release 的 "),s("b",null,"Assets"),a(" 部分，右键点击 ZIP 文件并选择 "),s("b",null,"Copy link address"),a(" 或浏览器中类似选项：")]),s("img",{src:E,alt:"Copy the link to the uploaded file",width:"500"})],-1)])),_:1})]),_:1})]),_:1})]),i[4]||(i[4]=e(`<li><p>[推荐] 检测链接是否有效以及文件是否可下载。在终端中，运行以下命令：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>curl &lt;downloadable link to the uploaded XCFramework ZIP file&gt;</span></span></code></pre></div></li><li><p>选择任意目录，并在本地创建一个包含以下代码的 <code>Package.swift</code> 文件：</p><div class="language-Swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// swift-tools-version:5.3</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PackageDescription</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> package</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Package</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Shared&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   platforms</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">iOS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.v14),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   products</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">library</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Shared&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">targets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Shared&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   targets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">binaryTarget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">         name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Shared&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">         url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&lt;link to the uploaded XCFramework ZIP file&gt;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">         checksum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&lt;checksum calculated for the ZIP file&gt;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></li><li><p>在 <code>url</code> 字段中，指定包含 XCFramework 的 ZIP 归档链接。</p></li><li><p>[推荐] 为了验证生成的 manifest，你可以在包含 <code>Package.swift</code> 文件的目录中运行以下 shell 命令：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">swift</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> package</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> reset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">swift</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> package</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> show-dependencies</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --format</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> json</span></span></code></pre></div><p>如果 manifest 正确，输出将描述发现的任何错误，或显示成功的下载和解析结果。</p></li><li><p>将 <code>Package.swift</code> 文件推送到你的远程版本库。确保创建并推送一个带有包语义版本的 Git 标签。</p></li>`,5))]),i[9]||(i[9]=e('<h3 id="添加包依赖项" tabindex="-1">添加包依赖项 <a class="header-anchor" href="#添加包依赖项" aria-label="Permalink to &quot;添加包依赖项&quot;">​</a></h3><p>现在这两个文件都可访问，你可以将你创建的包的依赖项添加到现有的客户端 iOS 项目中，或者创建一个新项目。要添加包依赖项：</p><ol><li><p>在 Xcode 中，选择 <strong>File | Add Package Dependencies</strong>。</p></li><li><p>在搜索字段中，输入包含 <code>Package.swift</code> 文件的 Git 版本库的 URL：</p><p><img src="'+o+`" alt="Specify repo with the package file"></p></li><li><p>点击 <strong>Add package</strong> 按钮，然后选择包的产品和相应的目标平台。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>如果你正在创建一个 Swift 包，对话框会有所不同。在这种情况下，点击 <strong>Copy package</strong> 按钮。 这会将 <code>.package</code> 行复制到你的剪贴板。将此行粘贴到你自己的 <code>Package.swift</code> 文件的 <a href="https://developer.apple.com/documentation/packagedescription/package/dependency" target="_blank" rel="noreferrer">Package.Dependency</a> 代码块中，并将必要的产品添加到相应的 <code>Target.Dependency</code> 代码块中。</p></div></li></ol><h3 id="检测你的设置" tabindex="-1">检测你的设置 <a class="header-anchor" href="#检测你的设置" aria-label="Permalink to &quot;检测你的设置&quot;">​</a></h3><p>为了检测所有设置是否正确，请在 Xcode 中测试导入：</p><ol><li><p>在你的项目中，导航到你的 UI 视图文件，例如 <code>ContentView.swift</code>。</p></li><li><p>用以下代码片段替换现有代码：</p><div class="language-Swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SwiftUI</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Shared</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ContentView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        VStack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            Image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">systemName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;globe&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">imageScale</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.large)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">foregroundStyle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.tint)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, world! </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(Shared.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Platform_iosKt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">getPlatform</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">().</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">padding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#Preview</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    ContentView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在这里，你导入 <code>Shared</code> XCFramework，然后使用它在 <code>Text</code> 字段中获取平台名称。</p></li><li><p>确保预览已更新为新文本。</p></li></ol><h2 id="导出多个模块作为-xcframework" tabindex="-1">导出多个模块作为 XCFramework <a class="header-anchor" href="#导出多个模块作为-xcframework" aria-label="Permalink to &quot;导出多个模块作为 XCFramework&quot;">​</a></h2><p>要将来自多个 Kotlin Multiplatform 模块的代码作为 iOS 二进制文件提供，请将这些模块组合到一个单独的伞形模块中。然后，构建并导出此伞形模块的 XCFramework。</p><p>例如，你有一个 <code>network</code> 模块和一个 <code>database</code> 模块，你将它们组合到一个 <code>together</code> 模块中：</p><ol><li><p>在 <code>together/build.gradle.kts</code> 文件中，指定依赖项和 framework 配置：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> frameworkName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;together&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> xcf </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> XCFramework</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(frameworkName)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        iosX64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        iosArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        iosSimulatorArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { iosTarget </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 与上面的示例相同，增加了依赖项的导出调用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        iosTarget.binaries.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">framework</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(projects.network)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(projects.database)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            baseName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> frameworkName</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            xcf.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 将依赖项设置为 &quot;api&quot;（而非 &quot;implementation&quot;）以导出底层模块</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        commonMain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            api</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(projects.network)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            api</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(projects.database)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>每个包含的模块都应该配置其 iOS 目标平台，例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    androidTarget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosX64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosSimulatorArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>在 <code>together</code> 文件夹中创建一个空的 Kotlin 文件，例如 <code>together/src/commonMain/kotlin/Together.kt</code>。 这是一个临时解决方案，因为如果导出的模块不包含任何源代码，Gradle 脚本目前无法组装 framework。</p></li><li><p>运行组装 framework 的 Gradle 任务：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> :together:assembleTogetherReleaseXCFramework</span></span></code></pre></div></li><li><p>按照<a href="#prepare-the-xcframework-and-the-swift-package-manifest">上一节</a>中的步骤准备 <code>together.xcframework</code>：将其归档，计算校验和，将归档的 XCFramework 上传到文件存储，创建并推送 <code>Package.swift</code> 文件。</p></li></ol><p>现在，你可以将依赖项导入到 Xcode 项目中。添加 <code>import together</code> 指令后，你应该能够从 <code>network</code> 和 <code>database</code> 模块中导入类，并在 Swift 代码中使用。</p>`,11))])}const v=g(F,[["render",m]]);export{A as __pageData,v as default};
