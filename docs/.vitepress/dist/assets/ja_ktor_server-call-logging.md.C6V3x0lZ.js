import{_ as c,C as n,c as y,o as m,G as a,ag as k,j as i,w as t,a as l}from"./chunks/framework.Bksy39di.js";const B=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ja/ktor/server-call-logging.md","filePath":"ja/ktor/server-call-logging.md","lastUpdated":1755457140000}'),v={name:"ja/ktor/server-call-logging.md"};function F(C,s,f,b,_,q){const h=n("TopicTitle"),d=n("show-structure"),g=n("primary-label"),p=n("Links"),E=n("tldr"),e=n("code-block"),o=n("TabItem"),r=n("Tabs"),u=n("list");return m(),y("div",null,[a(h,{labelRef:"server-plugin",title:"コールロギング"}),a(d,{for:"chapter",depth:"2"}),a(g,{ref:"server-plugin"},null,512),a(E,null,{default:t(()=>[s[3]||(s[3]=i("p",null,[i("b",null,"必要な依存関係"),l(": "),i("code",null,"io.ktor:ktor-server-call-logging")],-1)),s[4]||(s[4]=i("p",null,[i("b",null,"コード例"),l(": "),i("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/logging"}," logging ")],-1)),i("p",null,[i("b",null,[a(p,{href:"/ktor/server-native",summary:"KtorはKotlin/Nativeをサポートしており、追加のランタイムや仮想マシンなしでサーバーを実行できます。"},{default:t(()=>s[0]||(s[0]=[l("ネイティブサーバー")])),_:1}),s[1]||(s[1]=l("のサポート"))]),s[2]||(s[2]=l(": ✖️ "))])]),_:1}),s[17]||(s[17]=k('<p>Ktorは、<a href="http://www.slf4j.org/" target="_blank" rel="noreferrer">SLF4J</a>ライブラリを使用してアプリケーションイベントをログに記録する機能を提供します。一般的なロギング設定については、<a href="./server-logging">Ktorサーバーでのロギング</a>のトピックを参照してください。</p><p>プラグイン<code>CallLogging</code>を使用すると、着信クライアントリクエストをログに記録できます。</p><h2 id="add_dependencies" tabindex="-1">依存関係を追加する <a class="header-anchor" href="#add_dependencies" aria-label="Permalink to &quot;依存関係を追加する {id=&quot;add_dependencies&quot;}&quot;">​</a></h2><p><code>CallLogging</code>を使用するには、<code>ktor-server-call-logging</code>アーティファクトをビルドスクリプトに含める必要があります。 </p>',4)),a(r,{group:"languages"},{default:t(()=>[a(o,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:t(()=>[a(e,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-server-call-logging:$ktor_version")'})]),_:1}),a(o,{title:"Gradle (Groovy)","group-key":"groovy"},{default:t(()=>[a(e,{lang:"Groovy",code:'            implementation "io.ktor:ktor-server-call-logging:$ktor_version"'})]),_:1}),a(o,{title:"Maven","group-key":"maven"},{default:t(()=>[a(e,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-server-call-logging-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),s[18]||(s[18]=i("h2",{id:"install_plugin",tabindex:"-1"},[l("CallLoggingをインストールする "),i("a",{class:"header-anchor",href:"#install_plugin","aria-label":'Permalink to "CallLoggingをインストールする {id="install_plugin"}"'},"​")],-1)),i("p",null,[s[6]||(s[6]=l(" アプリケーションに")),s[7]||(s[7]=i("code",null,"CallLogging",-1)),s[8]||(s[8]=l("プラグインを")),s[9]||(s[9]=i("a",{href:"#install"},"インストール",-1)),s[10]||(s[10]=l("するには、指定された")),a(p,{href:"/ktor/server-modules",summary:"モジュールを使用すると、ルートをグループ化してアプリケーションを構造化できます。"},{default:t(()=>s[5]||(s[5]=[l("モジュール")])),_:1}),s[11]||(s[11]=l("内の")),s[12]||(s[12]=i("code",null,"install",-1)),s[13]||(s[13]=l("関数に渡します。以下のコードスニペットは、")),s[14]||(s[14]=i("code",null,"CallLogging",-1)),s[15]||(s[15]=l("をインストールする方法を示しています... "))]),a(u,null,{default:t(()=>s[16]||(s[16]=[i("li",null,[l(" ... "),i("code",null,"embeddedServer"),l("関数呼び出し内。 ")],-1),i("li",null,[l(" ... "),i("code",null,"Application"),l("クラスの拡張関数である明示的に定義された"),i("code",null,"module"),l("内。 ")],-1)])),_:1}),a(r,null,{default:t(()=>[a(o,{title:"embeddedServer"},{default:t(()=>[a(e,{lang:"kotlin",code:`            import io.ktor.server.engine.*
            import io.ktor.server.netty.*
            import io.ktor.server.application.*
            import io.ktor.server.plugins.calllogging.*

            fun main() {
                embeddedServer(Netty, port = 8080) {
                    install(CallLogging)
                    // ...
                }.start(wait = true)
            }`})]),_:1}),a(o,{title:"module"},{default:t(()=>[a(e,{lang:"kotlin",code:`            import io.ktor.server.application.*
            import io.ktor.server.plugins.calllogging.*
            // ...
            fun Application.module() {
                install(CallLogging)
                // ...
            }`})]),_:1})]),_:1}),s[19]||(s[19]=k(`<h2 id="configure" tabindex="-1">ロギング設定を構成する <a class="header-anchor" href="#configure" aria-label="Permalink to &quot;ロギング設定を構成する {id=&quot;configure&quot;}&quot;">​</a></h2><p><code>CallLogging</code>は、複数の方法で構成できます。ロギングレベルの指定、指定された条件に基づくリクエストのフィルタリング、ログメッセージのカスタマイズなどです。利用可能な構成設定は、<a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-call-logging/io.ktor.server.plugins.calllogging/-call-logging-config/index.html" target="_blank" rel="noreferrer">CallLoggingConfig</a>で確認できます。</p><h3 id="logging_level" tabindex="-1">ロギングレベルを設定する <a class="header-anchor" href="#logging_level" aria-label="Permalink to &quot;ロギングレベルを設定する {id=&quot;logging_level&quot;}&quot;">​</a></h3><p>デフォルトでは、Ktorは<code>Level.INFO</code>ロギングレベルを使用します。これを変更するには、<code>level</code>プロパティを使用します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CallLogging) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    level </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Level.INFO</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="filter" tabindex="-1">ログリクエストをフィルタリングする <a class="header-anchor" href="#filter" aria-label="Permalink to &quot;ログリクエストをフィルタリングする {id=&quot;filter&quot;}&quot;">​</a></h3><p><code>filter</code>プロパティを使用すると、リクエストをフィルタリングするための条件を追加できます。以下の例では、<code>/api/v1</code>へのリクエストのみがログに記録されます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CallLogging) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { call </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        call.request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startsWith</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/api/v1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="format" tabindex="-1">ログメッセージの形式をカスタマイズする <a class="header-anchor" href="#format" aria-label="Permalink to &quot;ログメッセージの形式をカスタマイズする {id=&quot;format&quot;}&quot;">​</a></h3><p><code>format</code>関数を使用すると、リクエスト/レスポンスに関連する任意のデータをログに記録できます。以下の例は、各リクエストに対するレスポンスステータス、リクエストHTTPメソッド、および<code>User-Agent</code>ヘッダー値をログに記録する方法を示しています。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CallLogging) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { call </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> call.response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> httpMethod </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> call.request.httpMethod.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userAgent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> call.request.headers[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;User-Agent&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;Status: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$status</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">, HTTP method: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$httpMethod</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">, User agent: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$userAgent</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>完全な例は、<a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/logging" target="_blank" rel="noreferrer">logging</a>で確認できます。</p><h3 id="mdc" tabindex="-1">コールパラメーターをMDCに配置する <a class="header-anchor" href="#mdc" aria-label="Permalink to &quot;コールパラメーターをMDCに配置する {id=&quot;mdc&quot;}&quot;">​</a></h3><p><code>CallLogging</code>プラグインはMDC（Mapped Diagnostic Context）をサポートしています。<code>mdc</code>関数を使用して、指定された名前で目的のコンテキスト値をMDCに配置できます。たとえば、以下のコードスニペットでは、<code>name</code>クエリパラメーターがMDCに追加されます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CallLogging) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    mdc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;name-parameter&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { call </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        call.request.queryParameters[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>ApplicationCall</code>のライフタイム中に、追加された値にアクセスできます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.slf4j.MDC</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MDC.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;name-parameter&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div>`,17))])}const D=c(v,[["render",F]]);export{B as __pageData,D as default};
