import{_ as E,C as t,c,o as u,j as i,G as a,ag as p,a as e,w as n}from"./chunks/framework.Bksy39di.js";const _=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ktor/server-form-based-auth.md","filePath":"ktor/server-form-based-auth.md","lastUpdated":1755457140000}'),g={name:"ktor/server-form-based-auth.md"};function y(m,s,F,f,v,b){const h=t("show-structure"),o=t("Links"),k=t("tldr"),l=t("code-block"),r=t("TabItem"),d=t("Tabs");return u(),c("div",null,[s[5]||(s[5]=i("h1",{id:"ktor-服务器中的表单认证",tabindex:"-1"},[e("Ktor 服务器中的表单认证 "),i("a",{class:"header-anchor",href:"#ktor-服务器中的表单认证","aria-label":'Permalink to "Ktor 服务器中的表单认证"'},"​")],-1)),a(h,{for:"chapter",depth:"2"}),a(k,null,{default:n(()=>[s[3]||(s[3]=i("p",null,[i("b",null,"必需依赖项"),e(": "),i("code",null,"io.ktor:ktor-server-auth")],-1)),s[4]||(s[4]=i("p",null,[i("b",null,"代码示例"),e(": "),i("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/auth-form-html-dsl"},"auth-form-html-dsl"),e(", "),i("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/auth-form-session"},"auth-form-session")],-1)),i("p",null,[i("b",null,[a(o,{href:"/ktor/server-native",summary:"Ktor 支持 Kotlin/Native，并允许您在没有额外运行时或虚拟机的情况下运行服务器。"},{default:n(()=>s[0]||(s[0]=[e("Native 服务器")])),_:1}),s[1]||(s[1]=e(" 支持"))]),s[2]||(s[2]=e(": ✅ "))])]),_:1}),s[6]||(s[6]=p('<p>表单认证使用 <a href="https://developer.mozilla.org/en-US/docs/Learn/Forms" target="_blank" rel="noreferrer">Web 表单</a> 来收集凭证信息并认证用户。 要在 Ktor 中创建 Web 表单，您可以使用 <a href="./server-html-dsl#html_response">HTML DSL</a> 或选择 JVM <a href="./server-templating">模板引擎</a>，例如 FreeMarker、Velocity 等。</p><blockquote><p>鉴于在使用表单认证时，用户名和密码以明文形式传递，您需要使用 <a href="./server-ssl">HTTPS/TLS</a> 来保护敏感信息。</p></blockquote><h2 id="add_dependencies" tabindex="-1">添加依赖项 <a class="header-anchor" href="#add_dependencies" aria-label="Permalink to &quot;添加依赖项 {id=&quot;add_dependencies&quot;}&quot;">​</a></h2><p>要启用 <code>form</code> 认证，您需要将 <code>ktor-server-auth</code> 构件包含到构建脚本中：</p>',4)),a(d,{group:"languages"},{default:n(()=>[a(r,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[a(l,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-server-auth:$ktor_version")'})]),_:1}),a(r,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[a(l,{lang:"Groovy",code:'            implementation "io.ktor:ktor-server-auth:$ktor_version"'})]),_:1}),a(r,{title:"Maven","group-key":"maven"},{default:n(()=>[a(l,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-server-auth-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),s[7]||(s[7]=p(`<h2 id="flow" tabindex="-1">表单认证流程 <a class="header-anchor" href="#flow" aria-label="Permalink to &quot;表单认证流程 {id=&quot;flow&quot;}&quot;">​</a></h2><p>表单认证流程可能如下所示：</p><ol><li><p>未认证的客户端向服务器应用程序中的特定 <a href="./server-routing">路由</a> 发出请求。</p></li><li><p>服务器返回一个 HTML 页面，该页面至少包含一个基于 HTML 的 Web 表单，提示用户输入用户名和密码。</p><blockquote><p>Ktor 允许您使用 <a href="./server-html-dsl">Kotlin DSL</a> 构建表单，或者您可以选择各种 JVM 模板引擎，例如 FreeMarker、Velocity 等。</p></blockquote></li><li><p>当用户提交用户名和密码时，客户端会向服务器发出包含 Web 表单数据（其中包括用户名和密码）的请求。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">POST http:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//localhost:8080/login</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Content</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Type: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">application</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">www</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">form</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">urlencoded</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">username</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">jetbrains&amp;password</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">foobar</span></span></code></pre></div><p>在 Ktor 中，您需要<a href="#configure-provider">指定</a>用于获取用户名和密码的参数名。</p></li><li><p>服务器<a href="#configure-provider">检测</a>客户端发送的凭证，并响应请求的内容。</p></li></ol><h2 id="install" tabindex="-1">安装 form 认证 <a class="header-anchor" href="#install" aria-label="Permalink to &quot;安装 form 认证 {id=&quot;install&quot;}&quot;">​</a></h2><p>要安装 <code>form</code> 认证提供者，请在 <code>install</code> 代码块中调用 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/form.html" target="_blank" rel="noreferrer">form</a> 函数：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.application.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.auth.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Authentication) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    form</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 配置 form 认证</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>您可以可选地指定一个<a href="./server-auth#provider-name">提供者名称</a>，该名称可用于<a href="#authenticate-route">认证指定路由</a>。</p><h2 id="configure" tabindex="-1">配置 form 认证 <a class="header-anchor" href="#configure" aria-label="Permalink to &quot;配置 form 认证 {id=&quot;configure&quot;}&quot;">​</a></h2><h3 id="configure-provider" tabindex="-1">步骤 1: 配置 form 提供者 <a class="header-anchor" href="#configure-provider" aria-label="Permalink to &quot;步骤 1: 配置 form 提供者 {id=&quot;configure-provider&quot;}&quot;">​</a></h3><p><code>form</code> 认证提供者通过 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-form-authentication-provider/-config/index.html" target="_blank" rel="noreferrer">FormAuthenticationProvider.Config</a> 类暴露其设置。在下面的示例中，指定了以下设置：</p><ul><li><code>userParamName</code> 和 <code>passwordParamName</code> 属性指定了用于获取用户名和密码的参数名。</li><li><code>validate</code> 函数检测用户名和密码。 <code>validate</code> 函数检测 <code>UserPasswordCredential</code>，并在成功认证的情况下返回 <code>UserIdPrincipal</code>，如果认证失败则返回 <code>null</code>。</li><li><code>challenge</code> 函数指定了认证失败时执行的操作。例如，您可以重定向回登录页或发送 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-unauthorized-response/index.html" target="_blank" rel="noreferrer">UnauthorizedResponse</a>。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Authentication) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    form</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-form&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        userParamName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;username&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        passwordParamName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;password&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        validate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { credentials </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (credentials.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;jetbrains&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> credentials.password </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;foobar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                UserIdPrincipal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(credentials.name)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        challenge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respond</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpStatusCode.Unauthorized, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Credentials are not valid&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p>至于 <code>basic</code> 认证，您也可以使用 <a href="./server-basic-auth#validate-user-hash">UserHashedTableAuth</a> 来检测存储在内存表中保存用户名和密码哈希的用户。</p></blockquote><h3 id="authenticate-route" tabindex="-1">步骤 2: 保护特定资源 <a class="header-anchor" href="#authenticate-route" aria-label="Permalink to &quot;步骤 2: 保护特定资源 {id=&quot;authenticate-route&quot;}&quot;">​</a></h3><p>配置完 <code>form</code> 提供者之后，您需要定义一个 <code>post</code> 路由，数据将发送到该路由。 然后，将此路由添加到 <strong><a href="./server-auth#authenticate-route">authenticate</a></strong> 函数内部。 如果认证成功，您可以使用 <code>call.principal</code> 函数在路由处理程序中检索认证的 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-user-id-principal/index.html" target="_blank" rel="noreferrer">UserIdPrincipal</a>，并获取认证用户的名称。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    authenticate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-form&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/login&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, \${call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">principal</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserIdPrincipal</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&gt;()?.name}!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>您可以使用 <a href="./server-session-auth">Session 认证</a> 来存储已登录用户的 ID。 例如，当用户首次使用 Web 表单登录时，您可以将用户名保存到 cookie session 中，并在后续请求中使用 <code>session</code> 提供者授权此用户。</p>`,17))])}const q=E(g,[["render",y]]);export{_ as __pageData,q as default};
