import{_ as a,c as e,o,ag as i}from"./chunks/framework.Bksy39di.js";const d=JSON.parse('{"title":"更新 Compose compiler","description":"","frontmatter":{},"headers":[],"relativePath":"kmp/compose-compiler.md","filePath":"kmp/compose-compiler.md","lastUpdated":1755516278000}'),p={name:"kmp/compose-compiler.md"};function l(n,s,t,r,c,m){return o(),e("div",null,s[0]||(s[0]=[i(`<h1 id="更新-compose-compiler" tabindex="-1">更新 Compose compiler <a class="header-anchor" href="#更新-compose-compiler" aria-label="Permalink to &quot;更新 Compose compiler&quot;">​</a></h1><p>Compose compiler 由一个 Gradle 插件补充，该插件简化了设置并提供了对编译器选项的更便捷访问。当与 Android Gradle 插件 (AGP) 一起应用时，此 Compose compiler 插件将覆盖 AGP 自动提供的 Compose compiler 的坐标。</p><p>自 Kotlin 2.0.0 起，Compose compiler 已合并到 Kotlin 版本库中。这有助于平稳迁移您的项目到 Kotlin 2.0.0 及更高版本，因为 Compose compiler 与 Kotlin 同步发布，并且将始终与相同版本的 Kotlin 兼容。</p><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>强烈建议您将使用 Kotlin 2.0.0 创建的 Compose Multiplatform 应用更新到 2.0.10 或更高版本。Compose compiler 2.0.0 存在一个问题，在包含非 JVM 目标的跨平台项目中，它有时会错误地推断类型的稳定性，这可能导致不必要的（甚至无限的）重组。 如果您的应用是使用 Compose compiler 2.0.10 或更高版本构建的，但使用了用 Compose compiler 2.0.0 构建的依赖项，这些旧的依赖项仍可能导致重组问题。 为防止此问题，请将您的依赖项更新到与您的应用使用相同 Compose compiler 构建的版本。</p></div><p>要在您的项目中启用新的 Compose compiler 插件，请将其应用于每个使用 Compose 的模块。关于如何<a href="#migrating-a-compose-multiplatform-project">迁移 Compose Multiplatform 项目</a>的详细信息，请继续阅读。对于 Jetpack Compose 项目，关于<a href="https://kotlinlang.org/docs/compose-compiler-migration-guide.html#migrating-a-jetpack-compose-project" target="_blank" rel="noreferrer">迁移指南</a>请参考。</p><h2 id="迁移-compose-multiplatform-项目" tabindex="-1">迁移 Compose Multiplatform 项目 <a class="header-anchor" href="#迁移-compose-multiplatform-项目" aria-label="Permalink to &quot;迁移 Compose Multiplatform 项目&quot;">​</a></h2><p>从 Compose Multiplatform 1.6.10 开始，您应该将 <code>org.jetbrains.kotlin.plugin.compose</code> Gradle 插件应用于每个使用 <code>org.jetbrains.compose</code> 插件的模块：</p><ol><li><p>将 Compose compiler Gradle 插件添加到 <a href="https://docs.gradle.org/current/userguide/platforms.html#sub:conventional-dependencies-toml" target="_blank" rel="noreferrer">Gradle 版本目录</a>：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[versions]</span></span>
<span class="line"><span># ...</span></span>
<span class="line"><span>kotlin = &quot;2.2.0&quot;</span></span>
<span class="line"><span>compose-plugin = &quot;1.8.2&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[plugins]</span></span>
<span class="line"><span># ...</span></span>
<span class="line"><span>jetbrainsCompose = { id = &quot;org.jetbrains.compose&quot;, version.ref = &quot;compose-plugin&quot; }</span></span>
<span class="line"><span>kotlinMultiplatform = { id = &quot;org.jetbrains.kotlin.multiplatform&quot;, version.ref = &quot;kotlin&quot; }</span></span>
<span class="line"><span>compose-compiler = { id = &quot;org.jetbrains.kotlin.plugin.compose&quot;, version.ref = &quot;kotlin&quot; }</span></span></code></pre></div></li><li><p>将 Gradle 插件添加到根 <code>build.gradle.kts</code> 文件：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> alias</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(libs.plugins.jetbrainsCompose) apply </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> alias</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(libs.plugins.compose.compiler) apply </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>将插件应用于每个使用 Compose Multiplatform 的模块：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    alias</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(libs.plugins.jetbrainsCompose)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    alias</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(libs.plugins.compose.compiler)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>如果您正在使用 Jetpack Compose compiler 的编译器选项，请在 <code>composeCompiler {}</code> 代码块中设置它们。关于 <a href="https://kotlinlang.org/docs/compose-compiler-options.html" target="_blank" rel="noreferrer">Compose compiler options DSL</a> 请参考。</p></li></ol><h4 id="可能的问题-缺少路径资源" tabindex="-1">可能的问题：“缺少路径资源” <a class="header-anchor" href="#可能的问题-缺少路径资源" aria-label="Permalink to &quot;可能的问题：“缺少路径资源”&quot;">​</a></h4><p>从 Kotlin 1.9.0 切换到 2.0.0，或者从 2.0.0 切换到 1.9.0 时，您可能会遇到以下错误：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>org.jetbrains.compose.resources.MissingResourceException: Missing resource with path: ...</span></span></code></pre></div><p>要解决此问题，请删除所有 <code>build</code> 目录：包括项目根目录下的和每个模块中的。</p><h2 id="接下来" tabindex="-1">接下来 <a class="header-anchor" href="#接下来" aria-label="Permalink to &quot;接下来&quot;">​</a></h2><ul><li>关于 Compose compiler 迁移到 Kotlin 版本库的 <a href="https://android-developers.googleblog.com/2024/04/jetpack-compose-compiler-moving-to-kotlin-repository.html" target="_blank" rel="noreferrer">Google 公告</a>，请参见。</li><li>关于 <a href="https://kotlinlang.org/docs/compose-compiler-options.html" target="_blank" rel="noreferrer">Compose compiler options DSL</a>，请参考。</li><li>要迁移 Jetpack Compose 应用，请查看 <a href="https://kotlinlang.org/docs/compose-compiler-migration-guide.html" target="_blank" rel="noreferrer">Compose compiler 文档</a>。</li></ul>`,14)]))}const k=a(p,[["render",l]]);export{d as __pageData,k as default};
