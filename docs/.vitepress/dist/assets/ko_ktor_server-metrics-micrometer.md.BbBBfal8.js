import{_ as u,C as r,c as y,o as v,G as e,ag as k,j as i,w as a,a as t}from"./chunks/framework.Bksy39di.js";const T=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ko/ktor/server-metrics-micrometer.md","filePath":"ko/ktor/server-metrics-micrometer.md","lastUpdated":1755457140000}'),F={name:"ko/ktor/server-metrics-micrometer.md"};function f(b,s,_,C,M,B){const h=r("TopicTitle"),d=r("show-structure"),c=r("primary-label"),p=r("Links"),E=r("tldr"),m=r("link-summary"),n=r("code-block"),l=r("TabItem"),o=r("Tabs"),g=r("list");return v(),y("div",null,[e(h,{labelRef:"server-plugin",title:"Micrometer 메트릭"}),e(d,{for:"chapter",depth:"2"}),e(c,{ref:"server-plugin"},null,512),e(E,null,{default:a(()=>[s[3]||(s[3]=i("p",null,[i("b",null,"필수 종속성"),t(": "),i("code",null,"io.ktor:ktor-server-metrics-micrometer")],-1)),s[4]||(s[4]=i("p",null,[i("b",null,"코드 예시"),t(": "),i("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/micrometer-metrics"}," micrometer-metrics ")],-1)),i("p",null,[i("b",null,[e(p,{href:"/ktor/server-native",summary:"Ktor는 Kotlin/Native를 지원하며 추가 런타임이나 가상 머신 없이 서버를 실행할 수 있게 합니다."},{default:a(()=>s[0]||(s[0]=[t("네이티브 서버")])),_:1}),s[1]||(s[1]=t(" 지원"))]),s[2]||(s[2]=t(": ✖️ "))])]),_:1}),e(m,null,{default:a(()=>s[5]||(s[5]=[t("MicrometerMetrics 플러그인은 Ktor 서버 애플리케이션에서 Micrometer 메트릭을 활성화하고 Prometheus, JMX, Elastic 등 필요한 모니터링 시스템을 선택할 수 있도록 합니다.")])),_:1}),s[21]||(s[21]=k('<p><a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-metrics-micrometer/io.ktor.server.metrics.micrometer/-micrometer-metrics" target="_blank" rel="noreferrer">MicrometerMetrics</a> 플러그인은 Ktor 서버 애플리케이션에서 <a href="https://micrometer.io/docs" target="_blank" rel="noreferrer">Micrometer</a> 메트릭을 활성화하고 Prometheus, JMX, Elastic 등 필요한 모니터링 시스템을 선택할 수 있도록 합니다. 기본적으로 Ktor는 HTTP 요청 모니터링을 위한 메트릭과 <a href="https://micrometer.io/docs/ref/jvm" target="_blank" rel="noreferrer">JVM 모니터링</a>을 위한 일련의 저수준 메트릭을 노출합니다. 이러한 메트릭을 사용자 정의하거나 새로운 메트릭을 생성할 수 있습니다.</p><h2 id="add_dependencies" tabindex="-1">종속성 추가 <a class="header-anchor" href="#add_dependencies" aria-label="Permalink to &quot;종속성 추가 {id=&quot;add_dependencies&quot;}&quot;">​</a></h2><p><code>MicrometerMetrics</code>를 활성화하려면 빌드 스크립트에 다음 아티팩트를 포함해야 합니다.</p>',3)),i("ul",null,[i("li",null,[s[6]||(s[6]=i("p",null,[i("code",null,"ktor-server-metrics-micrometer"),t(" 종속성 추가:")],-1)),e(o,{group:"languages"},{default:a(()=>[e(l,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:a(()=>[e(n,{lang:"Kotlin",code:'              implementation("io.ktor:ktor-server-metrics-micrometer:$ktor_version")'})]),_:1}),e(l,{title:"Gradle (Groovy)","group-key":"groovy"},{default:a(()=>[e(n,{lang:"Groovy",code:'              implementation "io.ktor:ktor-server-metrics-micrometer:$ktor_version"'})]),_:1}),e(l,{title:"Maven","group-key":"maven"},{default:a(()=>[e(n,{lang:"XML",code:`              <dependency>
                  <groupId>io.ktor</groupId>
                  <artifactId>ktor-server-metrics-micrometer-jvm</artifactId>
                  <version>\${ktor_version}</version>
              </dependency>`})]),_:1})]),_:1})]),i("li",null,[s[7]||(s[7]=i("p",null,"모니터링 시스템에 필요한 종속성을 추가합니다. 다음 예시는 Prometheus용 아티팩트를 추가하는 방법을 보여줍니다.",-1)),e(o,{group:"languages"},{default:a(()=>[e(l,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:a(()=>[e(n,{lang:"Kotlin",code:'              implementation("io.micrometer:micrometer-registry-prometheus:$prometheus_version")'})]),_:1}),e(l,{title:"Gradle (Groovy)","group-key":"groovy"},{default:a(()=>[e(n,{lang:"Groovy",code:'              implementation "io.micrometer:micrometer-registry-prometheus:$prometheus_version"'})]),_:1}),e(l,{title:"Maven","group-key":"maven"},{default:a(()=>[e(n,{lang:"XML",code:`              <dependency>
                  <groupId>io.micrometer</groupId>
                  <artifactId>micrometer-registry-prometheus</artifactId>
                  <version>\${prometheus_version}</version>
              </dependency>`})]),_:1})]),_:1}),s[8]||(s[8]=i("p",null,[i("code",null,"$prometheus_version"),t("은 "),i("code",null,"micrometer-registry-prometheus"),t(" 아티팩트의 필수 버전(예: "),i("code",null,"1.10.3"),t(")으로 교체할 수 있습니다.")],-1))])]),s[22]||(s[22]=i("h2",{id:"install_plugin",tabindex:"-1"},[t("MicrometerMetrics 설치 "),i("a",{class:"header-anchor",href:"#install_plugin","aria-label":'Permalink to "MicrometerMetrics 설치 {id="install_plugin"}"'},"​")],-1)),i("p",null,[s[10]||(s[10]=t(" 애플리케이션에 ")),s[11]||(s[11]=i("code",null,"MicrometerMetrics",-1)),s[12]||(s[12]=t(" 플러그인을 ")),s[13]||(s[13]=i("a",{href:"#install"},"설치",-1)),s[14]||(s[14]=t("하려면, 지정된 ")),e(p,{href:"/ktor/server-modules",summary:"모듈을 사용하면 경로를 그룹화하여 애플리케이션 구조를 만들 수 있습니다."},{default:a(()=>s[9]||(s[9]=[t("모듈")])),_:1}),s[15]||(s[15]=t("의 ")),s[16]||(s[16]=i("code",null,"install",-1)),s[17]||(s[17]=t(" 함수에 전달하면 됩니다. 아래 코드 스니펫은 ")),s[18]||(s[18]=i("code",null,"MicrometerMetrics",-1)),s[19]||(s[19]=t("을 설치하는 방법을 보여줍니다. "))]),e(g,null,{default:a(()=>s[20]||(s[20]=[i("li",null,[t(" ... "),i("code",null,"embeddedServer"),t(" 함수 호출 내부. ")],-1),i("li",null,[t(" ... "),i("code",null,"Application"),t(" 클래스의 확장 함수인 명시적으로 정의된 "),i("code",null,"module"),t(" 내부. ")],-1)])),_:1}),e(o,null,{default:a(()=>[e(l,{title:"embeddedServer"},{default:a(()=>[e(n,{lang:"kotlin",code:`            import io.ktor.server.engine.*
            import io.ktor.server.netty.*
            import io.ktor.server.application.*
            import io.ktor.server.metrics.micrometer.*

            fun main() {
                embeddedServer(Netty, port = 8080) {
                    install(MicrometerMetrics)
                    // ...
                }.start(wait = true)
            }`})]),_:1}),e(l,{title:"module"},{default:a(()=>[e(n,{lang:"kotlin",code:`            import io.ktor.server.application.*
            import io.ktor.server.metrics.micrometer.*
            // ...
            fun Application.module() {
                install(MicrometerMetrics)
                // ...
            }`})]),_:1})]),_:1}),s[23]||(s[23]=k(`<h3 id="ktor_metrics" tabindex="-1">노출된 메트릭 <a class="header-anchor" href="#ktor_metrics" aria-label="Permalink to &quot;노출된 메트릭 {id=&quot;ktor_metrics&quot;}&quot;">​</a></h3><p>Ktor는 HTTP 요청 모니터링을 위해 다음 메트릭을 노출합니다.</p><ul><li><code>ktor.http.server.requests.active</code>: 동시 HTTP 요청 수를 세는 <a href="https://micrometer.io/docs/concepts#_gauges" target="_blank" rel="noreferrer">게이지 (gauge)</a>입니다. 이 메트릭은 태그를 제공하지 않습니다.</li><li><code>ktor.http.server.requests</code>: 각 요청 시간을 측정하는 <a href="https://micrometer.io/docs/concepts#_timers" target="_blank" rel="noreferrer">타이머 (timer)</a>입니다. 이 메트릭은 요청된 URL에 대한 <code>address</code>, HTTP 메서드에 대한 <code>method</code>, 요청을 처리하는 Ktor 경로에 대한 <code>route</code> 등 요청 데이터를 모니터링하기 위한 일련의 태그를 제공합니다.</li></ul><p><code>metricName</code> <a href="#configure_metrics">구성</a> 속성을 사용하여 기본 <code>ktor.http.server.requests</code> 접두사를 사용자 정의할 수 있습니다.</p><blockquote><p>메트릭 이름은 구성된 모니터링 시스템에 따라 <a href="https://micrometer.io/docs/concepts#_naming_meters" target="_blank" rel="noreferrer">다를 수 있습니다</a>.</p></blockquote><p>HTTP 메트릭 외에도 Ktor는 <a href="#jvm_metrics">JVM 모니터링</a>을 위한 일련의 메트릭을 노출합니다.</p><h2 id="create_registry" tabindex="-1">레지스트리 생성 <a class="header-anchor" href="#create_registry" aria-label="Permalink to &quot;레지스트리 생성 {id=&quot;create_registry&quot;}&quot;">​</a></h2><p><code>MicrometerMetrics</code>를 설치한 후, <a href="https://micrometer.io/docs/concepts#_registry" target="_blank" rel="noreferrer">모니터링 시스템을 위한 레지스트리</a>를 생성하고 <code>registry</code> 속성에 할당해야 합니다. 아래 예시에서는 다른 <a href="./server-routing">경로 핸들러</a>에서 이 레지스트리를 재사용할 수 있도록 <code>PrometheusMeterRegistry</code>가 <code>install</code> 블록 외부에서 생성됩니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> appMicrometerRegistry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PrometheusMeterRegistry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(PrometheusConfig.DEFAULT)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MicrometerMetrics) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        registry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> appMicrometerRegistry</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="configure_metrics" tabindex="-1">메트릭 구성 <a class="header-anchor" href="#configure_metrics" aria-label="Permalink to &quot;메트릭 구성 {id=&quot;configure_metrics&quot;}&quot;">​</a></h2><p><code>MicrometerMetrics</code> 플러그인은 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-metrics-micrometer/io.ktor.server.metrics.micrometer/-micrometer-metrics-config/index.html" target="_blank" rel="noreferrer">MicrometerMetricsConfig</a>를 사용하여 액세스할 수 있는 다양한 구성 옵션을 제공합니다.</p><h3 id="timers" tabindex="-1">타이머 <a class="header-anchor" href="#timers" aria-label="Permalink to &quot;타이머 {id=&quot;timers&quot;}&quot;">​</a></h3><p>각 타이머의 태그를 사용자 정의하려면 각 요청에 대해 호출되는 <code>timers</code> 함수를 사용할 수 있습니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MicrometerMetrics) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    timers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { call, exception </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        tag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;region&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, call.request.headers[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;regionId&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="distribution_statistics" tabindex="-1">분포 통계 <a class="header-anchor" href="#distribution_statistics" aria-label="Permalink to &quot;분포 통계 {id=&quot;distribution_statistics&quot;}&quot;">​</a></h3><p><code>distributionStatisticConfig</code> 속성을 사용하여 <a href="https://micrometer.io/docs/concepts#_configuring_distribution_statistics" target="_blank" rel="noreferrer">분포 통계</a>를 구성합니다. 예를 들면 다음과 같습니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MicrometerMetrics) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    distributionStatisticConfig </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DistributionStatisticConfig.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">percentilesHistogram</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">maximumExpectedValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Duration.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ofSeconds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toNanos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toDouble</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">serviceLevelObjectives</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Duration.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ofMillis</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toNanos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toDouble</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Duration.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ofMillis</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toNanos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toDouble</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="jvm_metrics" tabindex="-1">JVM 및 시스템 메트릭 <a class="header-anchor" href="#jvm_metrics" aria-label="Permalink to &quot;JVM 및 시스템 메트릭 {id=&quot;jvm_metrics&quot;}&quot;">​</a></h3><p><a href="#ktor_metrics">HTTP 메트릭</a> 외에도 Ktor는 <a href="https://micrometer.io/docs/ref/jvm" target="_blank" rel="noreferrer">JVM 모니터링</a>을 위한 일련의 메트릭을 노출합니다. <code>meterBinders</code> 속성을 사용하여 이러한 메트릭 목록을 사용자 정의할 수 있습니다. 예를 들면 다음과 같습니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MicrometerMetrics) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    meterBinders </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        JvmMemoryMetrics</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        JvmGcMetrics</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        ProcessorMetrics</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>이러한 메트릭을 완전히 비활성화하려면 빈 목록을 할당할 수도 있습니다.</p><h2 id="prometheus_endpoint" tabindex="-1">Prometheus: 스크랩 엔드포인트 노출 <a class="header-anchor" href="#prometheus_endpoint" aria-label="Permalink to &quot;Prometheus: 스크랩 엔드포인트 노출 {id=&quot;prometheus_endpoint&quot;}&quot;">​</a></h2><p>Prometheus를 모니터링 시스템으로 사용하는 경우 Prometheus 스크래퍼에 HTTP 엔드포인트를 노출해야 합니다. Ktor에서는 다음과 같은 방법으로 이를 수행할 수 있습니다.</p><ol><li><p>필요한 주소(아래 예시에서는 <code>/metrics</code>)로 GET 요청을 수락하는 전용 <a href="./server-routing">경로 (route)</a>를 생성합니다.</p></li><li><p><code>call.respond</code>를 사용하여 스크랩 데이터를 Prometheus로 보냅니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> appMicrometerRegistry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PrometheusMeterRegistry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(PrometheusConfig.DEFAULT)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MicrometerMetrics) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        registry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> appMicrometerRegistry</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/metrics&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respond</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(appMicrometerRegistry.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scrape</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>전체 예시는 다음에서 찾을 수 있습니다: <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/micrometer-metrics" target="_blank" rel="noreferrer">micrometer-metrics</a>.</p></li></ol>`,24))])}const P=u(F,[["render",f]]);export{T as __pageData,P as default};
