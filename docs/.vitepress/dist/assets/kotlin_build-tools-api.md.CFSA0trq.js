import{_ as e,C as s,c as p,o as r,G as a,ag as h,w as o,a as k}from"./chunks/framework.Bksy39di.js";const F=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/build-tools-api.md","filePath":"kotlin/build-tools-api.md","lastUpdated":1754307826000}'),d={name:"kotlin/build-tools-api.md"};function c(E,i,g,u,y,m){const l=s("TopicTitle"),n=s("primary-label"),t=s("tldr");return r(),p("div",null,[a(l,{labelRef:"experimental-general",title:"构建工具 API"}),a(n,{ref:"experimental-general"},null,512),a(t,null,{default:o(()=>i[0]||(i[0]=[k("目前，BTA 仅支持 Kotlin/JVM。")])),_:1}),i[1]||(i[1]=h(`<p>Kotlin 2.2.0 引入了实验性的构建工具 API (BTA)，它简化了构建系统与 Kotlin 编译器集成的方式。</p><p>此前，要为构建系统添加完整的 Kotlin 支持（例如增量编译、Kotlin 编译器插件、守护进程以及 Kotlin Multiplatform）需要付出大量工作。BTA 旨在通过在构建系统与 Kotlin 编译器生态系统之间提供统一的 API 来降低这种复杂性。</p><p>BTA 定义了一个单一入口点，构建系统可以实现该入口点。这消除了深度集成内部编译器细节的必要性。</p><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>BTA 本身尚未公开可用，无法直接用于您自己的构建工具集成。 如果您对该提案感兴趣或想分享反馈，请参阅 <a href="https://github.com/Kotlin/KEEP/issues/421" target="_blank" rel="noreferrer">KEEP</a>。 关注其实现状态请访问 <a href="https://youtrack.jetbrains.com/issue/KT-76255" target="_blank" rel="noreferrer">YouTrack</a>。</p></div><h2 id="与-gradle-集成" tabindex="-1">与 Gradle 集成 <a class="header-anchor" href="#与-gradle-集成" aria-label="Permalink to &quot;与 Gradle 集成&quot;">​</a></h2><p>Kotlin Gradle 插件 (KGP) 对 BTA 具有实验性支持，您需要选择启用才能使用它。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>我们非常感谢您在 <a href="https://youtrack.jetbrains.com/issue/KT-56574" target="_blank" rel="noreferrer">YouTrack</a> 上分享 KGP 的使用体验反馈。</p></div><h3 id="如何启用" tabindex="-1">如何启用 <a class="header-anchor" href="#如何启用" aria-label="Permalink to &quot;如何启用&quot;">​</a></h3><p>将以下属性添加到您的 <code>gradle.properties</code> 文件中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kotlin.compiler.runViaBuildToolsApi</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span></code></pre></div><h3 id="配置不同的编译器版本" tabindex="-1">配置不同的编译器版本 <a class="header-anchor" href="#配置不同的编译器版本" aria-label="Permalink to &quot;配置不同的编译器版本&quot;">​</a></h3><p>使用 BTA，您现在可以使用与 KGP 使用版本不同的 Kotlin 编译器版本。这在以下情况很有用：</p><ul><li>您想尝试新的 Kotlin 特性，但尚未更新构建脚本。</li><li>您需要最新的插件修复，但暂时想停留在旧的编译器版本。</li></ul><p>以下是如何在您的 <code>build.gradle.kts</code> 文件中配置的示例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.kotlin.buildtools.api.ExperimentalBuildToolsApi</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.kotlin.gradle.ExperimentalKotlinGradlePluginApi</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jvm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) version </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2.2.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">group </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;org.jetbrains.example&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">version </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1.0-SNAPSHOT&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">repositories</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	mavenCentral</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	jvmToolchain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalBuildToolsApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ExperimentalKotlinGradlePluginApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	compilerVersion.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2.1.21&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &lt;-- 与 2.2.0 不同的版本</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="兼容的-kotlin-编译器与-kgp-版本" tabindex="-1">兼容的 Kotlin 编译器与 KGP 版本 <a class="header-anchor" href="#兼容的-kotlin-编译器与-kgp-版本" aria-label="Permalink to &quot;兼容的 Kotlin 编译器与 KGP 版本&quot;">​</a></h4><p>BTA 支持：</p><ul><li>前三个主要 Kotlin 编译器版本。</li><li>一个主要版本向前。</li></ul><p>例如，在 KGP 2.2.0 中，支持的 Kotlin 编译器版本是：</p><ul><li>1.9.25</li><li>2.0.x</li><li>2.1.x</li><li>2.2.x</li><li>2.3.x</li></ul><h4 id="限制" tabindex="-1">限制 <a class="header-anchor" href="#限制" aria-label="Permalink to &quot;限制&quot;">​</a></h4><p>将不同的编译器版本与编译器插件一起使用，可能导致 Kotlin 编译器异常。Kotlin 团队计划在未来的 Kotlin 发布中解决此问题。</p><h3 id="启用-进程内-策略的增量编译" tabindex="-1">启用“进程内”策略的增量编译 <a class="header-anchor" href="#启用-进程内-策略的增量编译" aria-label="Permalink to &quot;启用“进程内”策略的增量编译&quot;">​</a></h3><p>KGP 支持三种<a href="/kotlin/gradle-compilation-and-caches#defining-kotlin-compiler-execution-strategy">编译器执行策略</a>。通常，“进程内”策略（在 Gradle 守护进程中运行编译器）不支持增量编译。</p><p>通过 BTA，“进程内”策略现在支持增量编译。要启用它，请将以下属性添加到您的 <code>gradle.properties</code> 文件中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kotlin.compiler.execution.strategy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=in-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process</span></span></code></pre></div><h2 id="与-maven-集成" tabindex="-1">与 Maven 集成 <a class="header-anchor" href="#与-maven-集成" aria-label="Permalink to &quot;与 Maven 集成&quot;">​</a></h2><p>从 Kotlin 2.2.0 开始，BTA 在 <a href="/kotlin/maven"><code>kotlin-maven-plugin</code></a> 中默认启用。</p><p>尽管 BTA 尚未直接为 Maven 用户带来好处，但它为开发以下特性提供了坚实的基础：</p><ul><li><a href="https://youtrack.jetbrains.com/issue/KT-77587" target="_blank" rel="noreferrer">Kotlin 守护进程支持</a></li><li><a href="https://youtrack.jetbrains.com/issue/KT-77086" target="_blank" rel="noreferrer">增量编译稳定性</a></li></ul>`,30))])}const B=e(d,[["render",c]]);export{F as __pageData,B as default};
