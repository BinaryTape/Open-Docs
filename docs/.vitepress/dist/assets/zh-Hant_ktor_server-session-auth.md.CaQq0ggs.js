import{_ as E,C as h,c,o as g,j as i,G as a,ag as p,a as n,w as e}from"./chunks/framework.Bksy39di.js";const q=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/ktor/server-session-auth.md","filePath":"zh-Hant/ktor/server-session-auth.md","lastUpdated":1755457140000}'),u={name:"zh-Hant/ktor/server-session-auth.md"};function y(F,s,v,m,C,b){const o=h("show-structure"),r=h("Links"),d=h("tldr"),t=h("code-block"),l=h("TabItem"),k=h("Tabs");return g(),c("div",null,[s[7]||(s[7]=i("h1",{id:"ktor-伺服器中的工作階段驗證",tabindex:"-1"},[n("Ktor 伺服器中的工作階段驗證 "),i("a",{class:"header-anchor",href:"#ktor-伺服器中的工作階段驗證","aria-label":'Permalink to "Ktor 伺服器中的工作階段驗證"'},"​")],-1)),a(o,{for:"chapter",depth:"2"}),a(d,null,{default:e(()=>[s[3]||(s[3]=i("p",null,[i("b",null,"必備依賴項"),n(": "),i("code",null,"io.ktor:ktor-server-auth"),n(", "),i("code",null,"io.ktor:ktor-server-sessions")],-1)),s[4]||(s[4]=i("p",null,[i("b",null,"程式碼範例"),n(": "),i("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/auth-form-session"}," auth-form-session ")],-1)),i("p",null,[i("b",null,[a(r,{href:"/ktor/server-native",summary:"Ktor supports Kotlin/Native and allows you to run a server without an additional runtime or virtual machine."},{default:e(()=>s[0]||(s[0]=[n("原生伺服器")])),_:1}),s[1]||(s[1]=n("支援"))]),s[2]||(s[2]=n(": ✖️ "))])]),_:1}),s[8]||(s[8]=p('<p><a href="./server-sessions">工作階段</a>提供了一種在不同 HTTP 請求之間持久化資料的機制。典型的用例包括儲存已登入使用者的 ID、購物車內容，或在用戶端保留使用者偏好設定。</p><p>在 Ktor 中，已關聯工作階段的使用者可以使用 <code>session</code> 提供者進行驗證。例如，當使用者首次使用<a href="./server-form-based-auth">網頁表單</a>登入時，您可以將使用者名稱儲存到 Cookie 工作階段，並在後續請求中使用 <code>session</code> 提供者授權此使用者。</p><blockquote><p>您可以在<a href="./server-auth">Ktor 伺服器中的驗證與授權</a>區段中獲取關於 Ktor 中驗證與授權的一般資訊。</p></blockquote><h2 id="add_dependencies" tabindex="-1">添加依賴項 <a class="header-anchor" href="#add_dependencies" aria-label="Permalink to &quot;添加依賴項 {id=&quot;add_dependencies&quot;}&quot;">​</a></h2><p>要啟用 <code>session</code> 驗證，您需要在建置腳本中包含以下構件：</p>',5)),i("ul",null,[i("li",null,[s[5]||(s[5]=i("p",null,[n("添加 "),i("code",null,"ktor-server-sessions"),n(" 依賴項以使用工作階段：")],-1)),a(k,{group:"languages"},{default:e(()=>[a(l,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:e(()=>[a(t,{lang:"Kotlin",code:'              implementation("io.ktor:ktor-server-sessions:$ktor_version")'})]),_:1}),a(l,{title:"Gradle (Groovy)","group-key":"groovy"},{default:e(()=>[a(t,{lang:"Groovy",code:'              implementation "io.ktor:ktor-server-sessions:$ktor_version"'})]),_:1}),a(l,{title:"Maven","group-key":"maven"},{default:e(()=>[a(t,{lang:"XML",code:`              <dependency>
                  <groupId>io.ktor</groupId>
                  <artifactId>ktor-server-sessions-jvm</artifactId>
                  <version>\${ktor_version}</version>
              </dependency>`})]),_:1})]),_:1})]),i("li",null,[s[6]||(s[6]=i("p",null,[n("添加 "),i("code",null,"ktor-server-auth"),n(" 依賴項以進行驗證：")],-1)),a(k,{group:"languages"},{default:e(()=>[a(l,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:e(()=>[a(t,{lang:"Kotlin",code:'              implementation("io.ktor:ktor-server-auth:$ktor_version")'})]),_:1}),a(l,{title:"Gradle (Groovy)","group-key":"groovy"},{default:e(()=>[a(t,{lang:"Groovy",code:'              implementation "io.ktor:ktor-server-auth:$ktor_version"'})]),_:1}),a(l,{title:"Maven","group-key":"maven"},{default:e(()=>[a(t,{lang:"XML",code:`              <dependency>
                  <groupId>io.ktor</groupId>
                  <artifactId>ktor-server-auth-jvm</artifactId>
                  <version>\${ktor_version}</version>
              </dependency>`})]),_:1})]),_:1})])]),s[9]||(s[9]=p(`<h2 id="flow" tabindex="-1">工作階段驗證流程 <a class="header-anchor" href="#flow" aria-label="Permalink to &quot;工作階段驗證流程 {id=&quot;flow&quot;}&quot;">​</a></h2><p>使用工作階段的驗證流程可能會有所不同，並取決於您的應用程式中如何驗證使用者。讓我們看看<a href="./server-form-based-auth">表單驗證</a>可能如何實作：</p><ol><li>用戶端向伺服器發出包含網頁表單資料（包括使用者名稱和密碼）的請求。</li><li>伺服器驗證用戶端傳送的憑證，將使用者名稱儲存到 Cookie 工作階段，並回應請求的內容以及包含使用者名稱的 Cookie。</li><li>用戶端帶著 Cookie 向受保護的資源發出後續請求。</li><li>根據收到的 Cookie 資料，Ktor 檢查此使用者是否存在 Cookie 工作階段，並可選擇性地對收到的工作階段資料執行額外驗證。如果驗證成功，伺服器將回應請求的內容。</li></ol><h2 id="install" tabindex="-1">安裝工作階段驗證 <a class="header-anchor" href="#install" aria-label="Permalink to &quot;安裝工作階段驗證 {id=&quot;install&quot;}&quot;">​</a></h2><p>要安裝 <code>session</code> 驗證提供者，請在 <code>install</code> 區塊內呼叫 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/session.html" target="_blank" rel="noreferrer">session</a> 函數並指定所需的工作階段類型：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.application.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.auth.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.sessions.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Authentication) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    session</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 配置工作階段驗證</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="configure" tabindex="-1">配置工作階段驗證 <a class="header-anchor" href="#configure" aria-label="Permalink to &quot;配置工作階段驗證 {id=&quot;configure&quot;}&quot;">​</a></h2><p>本節演示如何使用<a href="./server-form-based-auth">表單驗證</a>驗證使用者，將此使用者的資訊儲存到 Cookie 工作階段，然後在後續請求中使用 <code>session</code> 提供者授權此使用者。</p><blockquote><p>如需完整範例，請參閱 <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/auth-form-session" target="_blank" rel="noreferrer">auth-form-session</a>。</p></blockquote><h3 id="data-class" tabindex="-1">步驟 1：建立資料類別 <a class="header-anchor" href="#data-class" aria-label="Permalink to &quot;步驟 1：建立資料類別 {id=&quot;data-class&quot;}&quot;">​</a></h3><p>首先，您需要建立一個用於儲存工作階段資料的資料類別：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Serializable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> count: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="install-session" tabindex="-1">2. 安裝並配置工作階段 <a class="header-anchor" href="#install-session" aria-label="Permalink to &quot;2. 安裝並配置工作階段 {id=&quot;install-session&quot;}&quot;">​</a></h3><p>建立資料類別後，您需要安裝並配置 <code>Sessions</code> 外掛程式。下面的範例 安裝並配置了一個帶有指定 Cookie 路徑和過期時間的 Cookie 工作階段。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    cookie</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user_session&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        cookie.path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        cookie.maxAgeInSeconds </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 60</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p>要了解更多關於配置工作階段的資訊，請參閱<a href="./server-sessions#configuration_overview">工作階段配置概述</a>。</p></blockquote><h3 id="configure-session-auth" tabindex="-1">步驟 3：配置工作階段驗證 <a class="header-anchor" href="#configure-session-auth" aria-label="Permalink to &quot;步驟 3：配置工作階段驗證 {id=&quot;configure-session-auth&quot;}&quot;">​</a></h3><p><code>session</code> 驗證提供者透過 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-session-authentication-provider/-config/index.html" target="_blank" rel="noreferrer"><code>SessionAuthenticationProvider.Config</code></a> 類別公開其設定。在下面的範例中，指定了以下設定：</p><ul><li><code>validate()</code> 函數檢查<a href="#data-class">工作階段實例</a>並在成功驗證的情況下傳回 <code>Any</code> 類型的 principal。</li><li><code>challenge()</code> 函數指定驗證失敗時執行的動作。例如，您可以重定向回登入頁面或傳送 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-unauthorized-response/index.html" target="_blank" rel="noreferrer"><code>UnauthorizedResponse</code></a>。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Authentication) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    session</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-session&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        validate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { session </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(session.name.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startsWith</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jet&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                session</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        challenge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondRedirect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/login&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="save-session" tabindex="-1">步驟 4：將使用者資料儲存在工作階段中 <a class="header-anchor" href="#save-session" aria-label="Permalink to &quot;步驟 4：將使用者資料儲存在工作階段中 {id=&quot;save-session&quot;}&quot;">​</a></h3><p>要將已登入使用者的資訊儲存到工作階段，請使用 <a href="./server-sessions#use_sessions"><code>call.sessions.set()</code></a> 函數。</p><p>以下範例展示了使用網頁表單的簡單驗證流程：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">authenticate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-form&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/login&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">principal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserIdPrincipal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()?.name.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        call.sessions.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userName, count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondRedirect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p>有關表單驗證流程的更多詳細資訊，請參閱<a href="./server-form-based-auth">表單驗證</a>文件。</p></blockquote><h3 id="authenticate-route" tabindex="-1">步驟 5：保護特定資源 <a class="header-anchor" href="#authenticate-route" aria-label="Permalink to &quot;步驟 5：保護特定資源 {id=&quot;authenticate-route&quot;}&quot;">​</a></h3><p>配置 <code>session</code> 提供者後，您可以使用 <a href="./server-auth#authenticate-route"><code>authenticate()</code></a> 函數保護應用程式中的特定資源。</p><p>成功驗證後，您可以透過在路由處理常式內使用 <code>call.principal()</code> 函數來檢索已驗證的 principal (在此情況下為 <a href="#data-class"><code>UserSession</code></a> 實例)：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">authenticate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-session&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userSession </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">principal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        call.sessions.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(userSession?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">copy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userSession.count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, \${userSession?.name}! Visit count is \${userSession?.count}.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p>如需完整範例，請參閱 <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/auth-form-session" target="_blank" rel="noreferrer">auth-form-session</a>。</p></blockquote>`,30))])}const _=E(u,[["render",y]]);export{q as __pageData,_ as default};
