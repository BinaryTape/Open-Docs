import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.Bksy39di.js";const c=JSON.parse('{"title":"Koinを起動する","description":"","frontmatter":{"title":"Koinを起動する"},"headers":[],"relativePath":"ja/koin/reference/koin-core/start-koin.md","filePath":"ja/koin/reference/koin-core/start-koin.md","lastUpdated":1750001831000}'),l={name:"ja/koin/reference/koin-core/start-koin.md"};function t(p,s,h,k,o,d){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="koinを起動する" tabindex="-1">Koinを起動する <a class="header-anchor" href="#koinを起動する" aria-label="Permalink to &quot;Koinを起動する&quot;">​</a></h1><p>KoinはDSLであり、軽量なコンテナであり、実用的なAPIです。Koinモジュール内に定義を宣言したら、Koinコンテナを起動する準備ができています。</p><h3 id="startkoin関数" tabindex="-1"><code>startKoin</code>関数 <a class="header-anchor" href="#startkoin関数" aria-label="Permalink to &quot;\`startKoin\`関数&quot;">​</a></h3><p><code>startKoin</code>関数は、Koinコンテナを起動するための主要なエントリーポイントです。実行するには、<em>Koinモジュールのリスト</em>が必要です。モジュールがロードされ、定義はKoinコンテナによって解決可能になります。</p><p>.Koinの起動</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// start a KoinApplication in Global context</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startKoin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // declare used modules</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    modules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(coffeeAppModule)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>startKoin</code>が呼び出されると、Koinはすべてのモジュールと定義を読み込みます。その後、Koinは必要なインスタンスを取得するための任意の<code>get()</code>または<code>by inject()</code>呼び出しに対応できるようになります。</p><p>Koinコンテナにはいくつかのオプションがあります。</p><ul><li><code>logger</code> - ロギングを有効にする - <a href="/ja/koin#logging">ロギング</a>セクションを参照</li><li><code>properties()</code>, <code>fileProperties( )</code> または <code>environmentProperties( )</code> - 環境、koin.propertiesファイル、追加プロパティなどからプロパティをロードする - <a href="/ja/koin#loading-properties">プロパティのロード</a>セクションを参照</li></ul><div class="info custom-block"><p class="custom-block-title">INFO</p><p><code>startKoin</code>は複数回呼び出すことはできません。モジュールをロードする場所が複数必要な場合は、<code>loadKoinModules</code>関数を使用してください。</p></div><h3 id="koinの起動を拡張する-kmpなどでの再利用に役立つ" tabindex="-1">Koinの起動を拡張する（KMPなどでの再利用に役立つ） <a class="header-anchor" href="#koinの起動を拡張する-kmpなどでの再利用に役立つ" aria-label="Permalink to &quot;Koinの起動を拡張する（KMPなどでの再利用に役立つ）&quot;">​</a></h3><p>Koinは現在、<code>KoinConfiguration</code>の再利用可能で拡張可能な設定オブジェクトをサポートしています。共有設定をプラットフォーム間（Android、iOS、JVMなど）で利用したり、異なる環境に合わせたりするために抽出できます。これは<code>includes()</code>関数で行うことができます。以下では、共通の設定を簡単に再利用し、Android環境設定を追加するためにそれを拡張する方法を示します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> initKoin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(config : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KoinAppDeclaration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   startKoin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        includes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(config) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//can include external configuration extension</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        modules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(appModule)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MainApplication</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onCreate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onCreate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        initKoin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            androidContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this@MainApplication</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            androidLogger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="起動の裏側-内部のkoinインスタンス" tabindex="-1">起動の裏側 - 内部のKoinインスタンス <a class="header-anchor" href="#起動の裏側-内部のkoinインスタンス" aria-label="Permalink to &quot;起動の裏側 - 内部のKoinインスタンス&quot;">​</a></h3><p>Koinを起動すると、Koinコンテナの設定インスタンスを表す<code>KoinApplication</code>インスタンスが作成されます。起動されると、モジュールとオプションに基づいて<code>Koin</code>インスタンスを生成します。この<code>Koin</code>インスタンスは<code>GlobalContext</code>によって保持され、任意の<code>KoinComponent</code>クラスで使用されます。</p><p><code>GlobalContext</code>は、KoinのデフォルトのJVMコンテキスト戦略です。これは<code>startKoin</code>によって呼び出され、<code>GlobalContext</code>に登録されます。これにより、Koin Multiplatformの観点から、異なる種類のコンテキストを登録できるようになります。</p><h3 id="startkoin後にモジュールをロードする" tabindex="-1"><code>startKoin</code>後にモジュールをロードする <a class="header-anchor" href="#startkoin後にモジュールをロードする" aria-label="Permalink to &quot;\`startKoin\`後にモジュールをロードする&quot;">​</a></h3><p><code>startKoin</code>関数を複数回呼び出すことはできません。しかし、<code>loadKoinModules()</code>関数を直接使用することはできます。</p><p>この関数は、Koinを使いたいSDK開発者にとって興味深い機能です。なぜなら、彼らは<code>startKoin()</code>関数を使う必要がなく、ライブラリの開始時に<code>loadKoinModules</code>を使うだけでよいからです。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">loadKoinModules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(module1,module2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.)</span></span></code></pre></div><h3 id="モジュールのアンロード" tabindex="-1">モジュールのアンロード <a class="header-anchor" href="#モジュールのアンロード" aria-label="Permalink to &quot;モジュールのアンロード&quot;">​</a></h3><p>定義のセットをアンロードし、指定された関数でそれらのインスタンスを解放することも可能です。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unloadKoinModules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(module1,module2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.)</span></span></code></pre></div><h3 id="koinを停止する-すべてのリソースを閉じる" tabindex="-1">Koinを停止する - すべてのリソースを閉じる <a class="header-anchor" href="#koinを停止する-すべてのリソースを閉じる" aria-label="Permalink to &quot;Koinを停止する - すべてのリソースを閉じる&quot;">​</a></h3><p>Koinのすべてのリソースを閉じ、インスタンスと定義を破棄できます。そのためには、どこからでも<code>stopKoin()</code>関数を使用して、Koinの<code>GlobalContext</code>を停止できます。あるいは、<code>KoinApplication</code>インスタンスに対して、単に<code>close()</code>を呼び出すだけです。</p><h2 id="ロギング" tabindex="-1">ロギング <a class="header-anchor" href="#ロギング" aria-label="Permalink to &quot;ロギング&quot;">​</a></h2><p>Koinには、Koinの任意のアクティビティ（アロケーション、ルックアップなど）をログに記録するためのシンプルなロギングAPIがあります。ロギングAPIは以下のクラスによって表現されます。</p><p>Koinロガー</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Logger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> level: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Level</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Level.INFO) {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(level: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Level</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, msg: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MESSAGE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> debug</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(msg: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MESSAGE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Level.DEBUG, msg)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(msg: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MESSAGE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Level.INFO, msg)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> warn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(msg: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MESSAGE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Level.WARNING, msg)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(msg: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MESSAGE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Level.ERROR, msg)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Koinは、ターゲットプラットフォームに応じて、いくつかのロギング実装を提供しています。</p><ul><li><code>PrintLogger</code> - コンソールに直接ログを出力します (<code>koin-core</code>に含まれています)</li><li><code>EmptyLogger</code> - 何もログに出力しません (<code>koin-core</code>に含まれています)</li><li><code>SLF4JLogger</code> - SLF4Jでログを出力します。KtorとSparkで使用されます (<code>koin-logger-slf4j</code>プロジェクト)</li><li><code>AndroidLogger</code> - Androidロガーにログを出力します (<code>koin-android</code>に含まれています)</li></ul><h3 id="起動時にロギングを設定する" tabindex="-1">起動時にロギングを設定する <a class="header-anchor" href="#起動時にロギングを設定する" aria-label="Permalink to &quot;起動時にロギングを設定する&quot;">​</a></h3><p>デフォルトでは、Koinは<code>EmptyLogger</code>を使用します。以下の方法で<code>PrintLogger</code>を直接使用できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startKoin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    logger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(LEVEL.INFO)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="プロパティのロード" tabindex="-1">プロパティのロード <a class="header-anchor" href="#プロパティのロード" aria-label="Permalink to &quot;プロパティのロード&quot;">​</a></h2><p>起動時にいくつかの種類のプロパティをロードできます。</p><ul><li>環境プロパティ - <em>システム</em>プロパティをロードします</li><li>koin.propertiesファイル - <code>/src/main/resources/koin.properties</code>ファイルからプロパティをロードします</li><li>「追加の」起動プロパティ - <code>startKoin</code>関数に渡される値のマップ</li></ul><h3 id="モジュールからプロパティを読み込む" tabindex="-1">モジュールからプロパティを読み込む <a class="header-anchor" href="#モジュールからプロパティを読み込む" aria-label="Permalink to &quot;モジュールからプロパティを読み込む&quot;">​</a></h3><p>Koinの起動時にプロパティをロードするようにしてください。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startKoin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Load properties from the default location</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // (i.e. \`/src/main/resources/koin.properties\`)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    fileProperties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Koinモジュールでは、キーを使ってプロパティを取得できます。</p><p>/src/main/resources/koin.propertiesファイル内</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Key - value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server_url</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">http</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//service_url</span></span></code></pre></div><p><code>getProperty</code>関数を使ってロードするだけです。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myModule </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // use the &quot;server_url&quot; key to retrieve its value</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    single</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;server_url&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="koinオプション-機能フラグ-4-1-0" tabindex="-1">Koinオプション - 機能フラグ (4.1.0) <a class="header-anchor" href="#koinオプション-機能フラグ-4-1-0" aria-label="Permalink to &quot;Koinオプション - 機能フラグ (4.1.0)&quot;">​</a></h2><p>Koinアプリケーションは、専用の<code>options</code>セクションを通じて、いくつかの実験的な機能を有効にできるようになりました。例えば、以下のようになります。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startKoin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // activate ViewModel Scope factory feature </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        viewModelScopeFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,48)]))}const E=i(l,[["render",t]]);export{c as __pageData,E as default};
