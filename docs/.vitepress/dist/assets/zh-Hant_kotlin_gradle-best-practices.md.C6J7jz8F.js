import{_ as i,C as n,c as o,o as p,ag as r,G as l,j as e,a as s}from"./chunks/framework.Bksy39di.js";const _=JSON.parse('{"title":"Gradle 最佳實踐","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/gradle-best-practices.md","filePath":"zh-Hant/kotlin/gradle-best-practices.md","lastUpdated":1754307826000}'),d={name:"zh-Hant/kotlin/gradle-best-practices.md"};function h(c,a,k,g,u,b){const t=n("TopicTitle");return p(),o("div",null,[a[0]||(a[0]=r(`<h1 id="gradle-最佳實踐" tabindex="-1">Gradle 最佳實踐 <a class="header-anchor" href="#gradle-最佳實踐" aria-label="Permalink to &quot;Gradle 最佳實踐&quot;">​</a></h1><p><a href="https://docs.gradle.org/current/userguide/userguide.html" target="_blank" rel="noreferrer">Gradle</a> 是一個許多 Kotlin 專案用來自動化並管理構建過程的構建系統。</p><p>充分利用 Gradle 對於幫助您減少管理和等待構建的時間，並投入更多時間編碼至關重要。在這裡，我們提供了一套最佳實踐，分為兩個關鍵領域：<strong>組織</strong>和<strong>優化</strong>您的專案。</p><h2 id="組織" tabindex="-1">組織 <a class="header-anchor" href="#組織" aria-label="Permalink to &quot;組織&quot;">​</a></h2><p>本節重點介紹如何構建您的 Gradle 專案以提高清晰度、可維護性和可擴展性。</p><h3 id="使用-kotlin-dsl" tabindex="-1">使用 Kotlin DSL <a class="header-anchor" href="#使用-kotlin-dsl" aria-label="Permalink to &quot;使用 Kotlin DSL&quot;">​</a></h3><p>使用 Kotlin DSL 而非傳統的 Groovy DSL。您可以避免學習另一種語言，並獲得嚴格類型檢查的好處。嚴格類型檢查讓 IDE 能夠為重構和自動完成提供更好的支援，從而提高開發效率。</p><p>在 <a href="https://docs.gradle.org/current/userguide/kotlin_dsl.html" target="_blank" rel="noreferrer">Gradle 的 Kotlin DSL 入門</a>中找到更多資訊。</p><p>閱讀 Gradle 關於 Kotlin DSL 成為新 Gradle 構建預設值的<a href="https://blog.gradle.org/kotlin-dsl-is-now-the-default-for-new-gradle-builds" target="_blank" rel="noreferrer">部落格</a>。</p><h3 id="使用版本目錄" tabindex="-1">使用版本目錄 <a class="header-anchor" href="#使用版本目錄" aria-label="Permalink to &quot;使用版本目錄&quot;">​</a></h3><p>在 <code>libs.versions.toml</code> 檔案中使用版本目錄來集中管理依賴項。這讓您能夠在專案中一致地定義和重複使用版本、函式庫和外掛程式。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[versions]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kotlinxCoroutines </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1.10.2&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[libraries]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kotlinxCoroutines </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { module </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;org.jetbrains.kotlinx:kotlinx-coroutines-core&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, version.ref </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;kotlinxCoroutines&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div><p>並在您的 <code>build.gradle.kts</code> 檔案中添加以下依賴項：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(libs.kotlinxCoroutines)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在 Gradle 關於<a href="https://docs.gradle.org/current/userguide/dependency_management_basics.html#version_catalog" target="_blank" rel="noreferrer">依賴管理基礎</a>的文檔中了解更多。</p>`,15)),l(t,{id:"使用慣例外掛程式",level:"3",title:"使用慣例外掛程式",labelRef:"advanced"}),a[1]||(a[1]=r('<p>使用慣例外掛程式來封裝和重用多個構建檔案中的常見構建邏輯。將共享配置移到外掛程式中有助於簡化和模組化您的構建腳本。</p><p>儘管初始設定可能耗時，但一旦完成，維護和添加新的構建邏輯將變得容易。</p><p>在 Gradle 關於<a href="https://docs.gradle.org/current/userguide/custom_plugins.html#sec:convention_plugins" target="_blank" rel="noreferrer">慣例外掛程式</a>的文檔中了解更多。</p><h2 id="優化" tabindex="-1">優化 <a class="header-anchor" href="#優化" aria-label="Permalink to &quot;優化&quot;">​</a></h2><p>本節提供了增強 Gradle 構建性能和效率的策略。</p><h3 id="使用本地構建快取" tabindex="-1">使用本地構建快取 <a class="header-anchor" href="#使用本地構建快取" aria-label="Permalink to &quot;使用本地構建快取&quot;">​</a></h3><p>使用本地構建快取通過重用其他構建生成的輸出以節省時間。構建快取可以從您已經創建的任何早期構建中檢索輸出。</p><p>在 Gradle 關於其<a href="https://docs.gradle.org/current/userguide/build_cache.html" target="_blank" rel="noreferrer">構建快取</a>的文檔中了解更多。</p><h3 id="使用配置快取" tabindex="-1">使用配置快取 <a class="header-anchor" href="#使用配置快取" aria-label="Permalink to &quot;使用配置快取&quot;">​</a></h3><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>配置快取尚不支持所有核心 Gradle 外掛程式。有關最新資訊，請參閱 Gradle 的<a href="https://docs.gradle.org/current/userguide/configuration_cache.html#config_cache:plugins:core" target="_blank" rel="noreferrer">支援外掛程式列表</a>。</p></div><p>使用配置快取通過快取配置階段的結果並在後續構建中重複使用它來顯著提高構建性能。如果 Gradle 檢測到構建配置或相關依賴項沒有變化，它會跳過配置階段。</p><p>在 Gradle 關於其<a href="https://docs.gradle.org/current/userguide/configuration_cache.html" target="_blank" rel="noreferrer">配置快取</a>的文檔中了解更多。</p><h3 id="縮短多目標構建時間" tabindex="-1">縮短多目標構建時間 <a class="header-anchor" href="#縮短多目標構建時間" aria-label="Permalink to &quot;縮短多目標構建時間&quot;">​</a></h3><p>當您的多平台專案包含多個目標時，像 <code>build</code> 和 <code>assemble</code> 這樣的任務可能會為每個目標多次編譯相同的程式碼，導致編譯時間更長。</p><p>如果您正在積極開發和測試特定平台，請改為運行相應的 <code>linkDebug*</code> 任務。</p><p>有關更多資訊，請參閱<a href="/zh-Hant/kotlin/native-improving-compilation-time#gradle-configuration">提高編譯時間的提示</a>。</p><h3 id="從-kapt-遷移到-ksp" tabindex="-1">從 kapt 遷移到 KSP <a class="header-anchor" href="#從-kapt-遷移到-ksp" aria-label="Permalink to &quot;從 kapt 遷移到 KSP&quot;">​</a></h3><p>如果您正在使用依賴於 <a href="/zh-Hant/kotlin/kapt">kapt</a> 編譯器外掛程式的函式庫，請檢查您是否可以改為使用 <a href="/zh-Hant/kotlin/ksp-overview">Kotlin Symbol Processing (KSP) API</a>。KSP API 通過減少註解處理時間來提高構建性能。KSP 比 kapt 更快、更高效，因為它直接處理原始碼而無需生成中間 Java 存根。</p><p>有關遷移步驟的指導，請參閱 Google 的<a href="https://developer.android.com/build/migrate-to-ksp" target="_blank" rel="noreferrer">遷移指南</a>。</p><p>要了解更多關於 KSP 與 kapt 的比較，請查看<a href="/zh-Hant/kotlin/ksp-why-ksp">為何選擇 KSP</a>。</p>',20)),l(t,{id:"使用模組化",level:"3",title:"使用模組化",labelRef:"advanced"}),a[2]||(a[2]=r(`<div class="note custom-block"><p class="custom-block-title">NOTE</p><p>模組化僅對中大型專案有利。它對基於微服務架構的專案沒有優勢。</p></div><p>使用模組化的專案結構來提高構建速度並實現更輕鬆的平行開發。將您的專案結構化為一個根專案和一個或多個子專案。如果更改僅影響其中一個子專案，Gradle 只會重新構建該特定子專案。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>.</span></span>
<span class="line"><span>└── root-project/</span></span>
<span class="line"><span>    ├── settings.gradle.kts</span></span>
<span class="line"><span>    ├── app subproject/</span></span>
<span class="line"><span>    │   └── build.gradle.kts</span></span>
<span class="line"><span>    └── lib subproject/</span></span>
<span class="line"><span>        └── build.gradle.kts</span></span></code></pre></div><p>在 Gradle 關於<a href="https://docs.gradle.org/current/userguide/multi_project_builds.html" target="_blank" rel="noreferrer">使用 Gradle 構建專案</a>的文檔中了解更多。</p>`,4)),l(t,{id:"設定-ci-cd",level:"3",title:"設定 CI/CD",labelRef:"advanced"}),a[3]||(a[3]=e("p",null,[s("設定 CI/CD 過程可以通過使用增量構建和快取依賴項來顯著減少構建時間。添加持久化儲存或使用遠端構建快取可以讓您看到這些好處。這個過程不一定耗時，因為一些提供商，例如 "),e("a",{href:"https://github.com/features/actions",target:"_blank",rel:"noreferrer"},"GitHub"),s("，幾乎是開箱即用地提供此服務。")],-1)),a[4]||(a[4]=e("p",null,[s("探索 Gradle 社區烹飪書中關於"),e("a",{href:"https://cookbook.gradle.org/ci/",target:"_blank",rel:"noreferrer"},"將 Gradle 與持續整合系統結合使用"),s("的內容。")],-1)),l(t,{id:"使用遠端構建快取",level:"3",title:"使用遠端構建快取",labelRef:"advanced"}),a[5]||(a[5]=e("p",null,[s("與"),e("a",{href:"#use-local-build-cache"},"本地構建快取"),s("一樣，遠端構建快取通過重用其他構建的輸出幫助您節省時間。它可以從任何已運行過的構建中檢索任務輸出，而不僅僅是上一個構建。")],-1)),a[6]||(a[6]=e("p",null,"遠端構建快取使用快取伺服器在構建之間共享任務輸出。例如，在一個帶有 CI/CD 伺服器的開發環境中，伺服器上的所有構建都會填充遠端快取。當您簽出主分支以開始新功能時，您可以立即訪問增量構建。",-1)),a[7]||(a[7]=e("p",null,"請記住，緩慢的網路連接可能會使傳輸快取結果比本地運行任務更慢。",-1)),a[8]||(a[8]=e("p",null,[s("在 Gradle 關於其"),e("a",{href:"https://docs.gradle.org/current/userguide/build_cache.html",target:"_blank",rel:"noreferrer"},"構建快取"),s("的文檔中了解更多。")],-1))])}const m=i(d,[["render",h]]);export{_ as __pageData,m as default};
