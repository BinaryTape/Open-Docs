import{_ as u,C as t,c as y,o as C,G as a,ag as k,j as i,w as e,a as n}from"./chunks/framework.Bksy39di.js";const B=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ko/ktor/server-caching-headers.md","filePath":"ko/ktor/server-caching-headers.md","lastUpdated":1755457140000}'),F={name:"ko/ktor/server-caching-headers.md"};function m(f,s,v,b,A,_){const o=t("TopicTitle"),d=t("show-structure"),g=t("primary-label"),p=t("Links"),E=t("tldr"),l=t("code-block"),h=t("TabItem"),r=t("Tabs"),c=t("list");return C(),y("div",null,[a(o,{labelRef:"server-plugin",title:"캐싱 헤더"}),a(d,{for:"chapter",depth:"2"}),a(g,{ref:"server-plugin"},null,512),a(E,null,{default:e(()=>[s[3]||(s[3]=i("p",null,[i("b",null,"필수 의존성"),n(": "),i("code",null,"io.ktor:ktor-server-caching-headers")],-1)),s[4]||(s[4]=i("p",null,[i("b",null,"코드 예시"),n(": "),i("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/caching-headers"}," caching-headers ")],-1)),i("p",null,[i("b",null,[a(p,{href:"/ktor/server-native",summary:"Ktor는 Kotlin/Native를 지원하며 추가 런타임이나 가상 머신 없이 서버를 실행할 수 있습니다."},{default:e(()=>s[0]||(s[0]=[n("네이티브 서버")])),_:1}),s[1]||(s[1]=n(" 지원"))]),s[2]||(s[2]=n(": ✅ "))])]),_:1}),s[17]||(s[17]=k('<p><a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-caching-headers/io.ktor.server.plugins.cachingheaders/-caching-headers.html" target="_blank" rel="noreferrer">CachingHeaders</a> 플러그인은 HTTP 캐싱에 사용되는 <code>Cache-Control</code> 및 <code>Expires</code> 헤더를 구성하는 기능을 추가합니다. 다음 방법으로 <a href="#configure">캐싱을 구성</a>할 수 있습니다:</p><ul><li>이미지, CSS, JavaScript 파일 등 특정 콘텐츠 유형에 대해 다양한 캐싱 전략을 구성합니다.</li><li>애플리케이션 수준에서 전역적으로, 경로 수준에서, 또는 특정 호출에 대해 캐싱 옵션을 지정합니다.</li></ul><h2 id="add_dependencies" tabindex="-1">의존성 추가 <a class="header-anchor" href="#add_dependencies" aria-label="Permalink to &quot;의존성 추가 {id=&quot;add_dependencies&quot;}&quot;">​</a></h2><p><code>CachingHeaders</code>을(를) 사용하려면 빌드 스크립트에 <code>ktor-server-caching-headers</code> 아티팩트를 포함해야 합니다: </p>',4)),a(r,{group:"languages"},{default:e(()=>[a(h,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:e(()=>[a(l,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-server-caching-headers:$ktor_version")'})]),_:1}),a(h,{title:"Gradle (Groovy)","group-key":"groovy"},{default:e(()=>[a(l,{lang:"Groovy",code:'            implementation "io.ktor:ktor-server-caching-headers:$ktor_version"'})]),_:1}),a(h,{title:"Maven","group-key":"maven"},{default:e(()=>[a(l,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-server-caching-headers-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),s[18]||(s[18]=i("h2",{id:"install_plugin",tabindex:"-1"},[n("CachingHeaders 설치 "),i("a",{class:"header-anchor",href:"#install_plugin","aria-label":'Permalink to "CachingHeaders 설치 {id="install_plugin"}"'},"​")],-1)),i("p",null,[s[6]||(s[6]=n(" 애플리케이션에 ")),s[7]||(s[7]=i("code",null,"CachingHeaders",-1)),s[8]||(s[8]=n(" 플러그인을 [")),s[9]||(s[9]=i("a",{href:"#install"},"설치",-1)),s[10]||(s[10]=n("]하려면, 지정된 ")),a(p,{href:"/ktor/server-modules",summary:"모듈을 사용하면 경로를 그룹화하여 애플리케이션을 구조화할 수 있습니다."},{default:e(()=>s[5]||(s[5]=[n("모듈")])),_:1}),s[11]||(s[11]=n("의 ")),s[12]||(s[12]=i("code",null,"install",-1)),s[13]||(s[13]=n(" 함수에 전달합니다. 아래 코드 스니펫은 ")),s[14]||(s[14]=i("code",null,"CachingHeaders",-1)),s[15]||(s[15]=n("을(를) 설치하는 방법을 보여줍니다... "))]),a(c,null,{default:e(()=>s[16]||(s[16]=[i("li",null,[n(" ... "),i("code",null,"embeddedServer"),n(" 함수 호출 내부. ")],-1),i("li",null,[n(" ... "),i("code",null,"Application"),n(" 클래스의 확장 함수인 명시적으로 정의된 "),i("code",null,"module"),n(" 내부. ")],-1)])),_:1}),a(r,null,{default:e(()=>[a(h,{title:"embeddedServer"},{default:e(()=>[a(l,{lang:"kotlin",code:`            import io.ktor.server.engine.*
            import io.ktor.server.netty.*
            import io.ktor.server.application.*
            import io.ktor.server.plugins.cachingheaders.*

            fun main() {
                embeddedServer(Netty, port = 8080) {
                    install(CachingHeaders)
                    // ...
                }.start(wait = true)
            }`})]),_:1}),a(h,{title:"module"},{default:e(()=>[a(l,{lang:"kotlin",code:`            import io.ktor.server.application.*
            import io.ktor.server.plugins.cachingheaders.*
            // ...
            fun Application.module() {
                install(CachingHeaders)
                // ...
            }`})]),_:1})]),_:1}),s[19]||(s[19]=k(`<p><code>CachingHeaders</code> 플러그인은 <a href="#install-route">특정 경로에도 설치</a>할 수 있습니다. 이는 다양한 애플리케이션 리소스에 대해 다른 <code>CachingHeaders</code> 구성이 필요한 경우 유용할 수 있습니다. </p><p><code>CachingHeaders</code>을(를) 설치한 후에는 다양한 콘텐츠 유형에 대한 캐싱 설정을 <a href="#configure">구성</a>할 수 있습니다.</p><h2 id="configure" tabindex="-1">캐싱 구성 <a class="header-anchor" href="#configure" aria-label="Permalink to &quot;캐싱 구성 {id=&quot;configure&quot;}&quot;">​</a></h2><p><code>CachingHeaders</code> 플러그인을 구성하려면 지정된 <code>ApplicationCall</code> 및 콘텐츠 유형에 대한 캐싱 옵션을 제공하기 위해 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-caching-headers/io.ktor.server.plugins.cachingheaders/-caching-headers-config/options.html" target="_blank" rel="noreferrer">options</a> 함수를 정의해야 합니다. <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/caching-headers" target="_blank" rel="noreferrer">caching-headers</a> 예시의 코드 스니펫은 일반 텍스트 및 HTML에 <code>max-age</code> 옵션을 사용하여 <code>Cache-Control</code> 헤더를 추가하는 방법을 보여줍니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CachingHeaders) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { call, content </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                when</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (content.contentType?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withoutParameters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    ContentType.Text.Plain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CachingOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CacheControl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MaxAge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(maxAgeSeconds </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3600</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    ContentType.Text.Html </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CachingOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CacheControl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MaxAge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(maxAgeSeconds </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 60</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                    else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://api.ktor.io/ktor-http/io.ktor.http.content/-caching-options/index.html" target="_blank" rel="noreferrer">CachingOptions</a> 객체는 <code>Cache-Control</code> 및 <code>Expires</code> 헤더 값을 매개변수로 받습니다:</p><ul><li><code>cacheControl</code> 매개변수는 <a href="https://api.ktor.io/ktor-http/io.ktor.http/-cache-control/index.html" target="_blank" rel="noreferrer">CacheControl</a> 값을 받습니다. <code>CacheControl.MaxAge</code>를 사용하여 <code>max-age</code> 매개변수와 가시성, 재검증 옵션 등 관련 설정을 지정할 수 있습니다. <code>CacheControl.NoCache</code>/<code>CacheControl.NoStore</code>를 사용하여 캐싱을 비활성화할 수 있습니다.</li><li><code>expires</code> 매개변수를 사용하면 <code>Expires</code> 헤더를 <code>GMTDate</code> 또는 <code>ZonedDateTime</code> 값으로 지정할 수 있습니다.</li></ul><h3 id="configure-route" tabindex="-1">경로 수준 <a class="header-anchor" href="#configure-route" aria-label="Permalink to &quot;경로 수준 {id=&quot;configure-route&quot;}&quot;">​</a></h3><p>플러그인을 전역적으로 설치할 수 있을 뿐만 아니라 [<a href="./server-plugins#install-route">특정 경로에도 설치</a>]할 수 있습니다. 예를 들어, 아래 예시는 <code>/index</code> 경로에 지정된 캐싱 헤더를 추가하는 방법을 보여줍니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">route</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CachingHeaders) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { call, content </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CachingOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CacheControl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MaxAge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(maxAgeSeconds </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1800</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Index page&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="configure-call" tabindex="-1">호출 수준 <a class="header-anchor" href="#configure-call" aria-label="Permalink to &quot;호출 수준 {id=&quot;configure-call&quot;}&quot;">​</a></h3><p>더 세분화된 캐싱 설정이 필요한 경우, <code>ApplicationCall.caching</code> 속성을 사용하여 호출 수준에서 캐싱 옵션을 구성할 수 있습니다. 아래 예시는 사용자가 로그인했는지 여부에 따라 캐싱 옵션을 구성하는 방법을 보여줍니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">route</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/profile&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userLoggedIn </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(userLoggedIn) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            call.caching </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CachingOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CacheControl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NoStore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CacheControl.Visibility.Private))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Profile page&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            call.caching </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CachingOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CacheControl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MaxAge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(maxAgeSeconds </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 900</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Login page&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p>사용자를 로그인시키려면 <a href="./server-auth">Authentication</a> 및 <a href="./server-sessions">Sessions</a> 플러그인을 사용할 수 있습니다.</p></blockquote>`,14))])}const T=u(F,[["render",m]]);export{B as __pageData,T as default};
