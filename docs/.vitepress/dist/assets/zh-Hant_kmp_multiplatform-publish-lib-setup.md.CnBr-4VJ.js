import{_ as l,C as e,c as n,o as t,ag as i,G as p}from"./chunks/framework.Bksy39di.js";const E=JSON.parse('{"title":"設定多平台函式庫發佈","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kmp/multiplatform-publish-lib-setup.md","filePath":"zh-Hant/kmp/multiplatform-publish-lib-setup.md","lastUpdated":1755516278000}'),h={name:"zh-Hant/kmp/multiplatform-publish-lib-setup.md"};function r(o,s,d,k,c,g){const a=e("secondary-label");return t(),n("div",null,[s[0]||(s[0]=i(`<h1 id="設定多平台函式庫發佈" tabindex="-1">設定多平台函式庫發佈 <a class="header-anchor" href="#設定多平台函式庫發佈" aria-label="Permalink to &quot;設定多平台函式庫發佈&quot;">​</a></h1><p>您可以將多平台函式庫發佈到不同的位置：</p><ul><li><a href="#publishing-to-a-local-maven-repository">到本地 Maven 儲存庫</a></li><li>到 Maven Central 儲存庫。了解如何在<a href="./multiplatform-publish-libraries">我們的教學</a>中設定帳戶憑證、自訂函式庫中繼資料以及配置發佈外掛程式。</li><li>到 GitHub 儲存庫。更多資訊，請參閱 GitHub 上關於 <a href="https://docs.github.com/en/packages" target="_blank" rel="noreferrer">GitHub Packages</a> 的文件。</li></ul><h2 id="發佈到本地-maven-儲存庫" tabindex="-1">發佈到本地 Maven 儲存庫 <a class="header-anchor" href="#發佈到本地-maven-儲存庫" aria-label="Permalink to &quot;發佈到本地 Maven 儲存庫&quot;">​</a></h2><p>您可以使用 <code>maven-publish</code> Gradle 外掛程式將多平台函式庫發佈到本地 Maven 儲存庫：</p><ol><li><p>在 <code>shared/build.gradle.kts</code> 檔案中，加入 <a href="https://docs.gradle.org/current/userguide/publishing_maven.html" target="_blank" rel="noreferrer"><code>maven-publish</code> Gradle 外掛程式</a>。</p></li><li><p>為函式庫指定 group 和 version，以及應發佈到的<a href="https://docs.gradle.org/current/userguide/publishing_maven.html#publishing_maven:repositories" target="_blank" rel="noreferrer">儲存庫</a>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;maven-publish&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">group </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;com.example&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">version </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1.0&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">publishing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    repositories</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        maven</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            //...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ol><p>當與 <code>maven-publish</code> 結合使用時，Kotlin 外掛程式會自動為當前主機上可以建置的每個目標建立發佈，Android 目標除外，它需要<a href="#publish-an-android-library">額外的步驟來配置發佈</a>。</p><h2 id="發佈的結構" tabindex="-1">發佈的結構 <a class="header-anchor" href="#發佈的結構" aria-label="Permalink to &quot;發佈的結構&quot;">​</a></h2><p>Kotlin 多平台函式庫的發佈包含多個 Maven 發佈，每個發佈都對應一個特定的目標。此外，還會發佈一個代表整個函式庫的總括性_根_發佈，即 <code>kotlinMultiplatform</code>。</p><p>當作為<a href="./multiplatform-add-dependencies">依賴項</a>添加到通用原始碼集時，根發佈會自動解析為適當的平台特定產物。</p><h3 id="目標特定發佈與根發佈" tabindex="-1">目標特定發佈與根發佈 <a class="header-anchor" href="#目標特定發佈與根發佈" aria-label="Permalink to &quot;目標特定發佈與根發佈&quot;">​</a></h3><p>Kotlin 多平台 Gradle 外掛程式為每個目標配置單獨的發佈。考慮以下專案配置：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// projectName = &quot;lib&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">group </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;test&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">version </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1.0&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosX64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>此設定會產生以下 Maven 發佈：</p><p><strong>目標特定發佈</strong></p><ul><li>對於 <code>jvm</code> 目標：<code>test:lib-jvm:1.0</code></li><li>對於 <code>iosX64</code> 目標：<code>test:lib-iosx64:1.0</code></li><li>對於 <code>iosArm64</code> 目標：<code>test:lib-iosarm64:1.0</code></li></ul><p>每個目標特定發佈都是獨立的。例如，執行 <code>publishJvmPublicationTo&lt;MavenRepositoryName&gt;</code> 只會發佈 JVM 模組，而其他模組則未發佈。</p><p><strong>根發佈</strong></p><p><code>kotlinMultiplatform</code> 根發佈：<code>test:lib:1.0</code>。</p><p>根發佈作為一個入口點，引用所有目標特定的發佈。它包含中繼資料產物，並透過包含對其他發佈的引用來確保正確的依賴解析：個別平台產物的預期 URL 和座標。</p><ul><li><p>某些儲存庫，例如 Maven Central，要求根模組包含一個沒有分類器（classifier）的 JAR 產物，例如 <code>kotlinMultiplatform-1.0.jar</code>。Kotlin 多平台外掛程式會自動產生所需的產物，其中包含嵌入式中繼資料產物。這表示您無需在函式庫的根模組中添加一個空的產物來滿足儲存庫的要求。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>透過 <a href="./multiplatform-configure-compilations#compilation-for-jvm">Gradle</a> 和 <a href="https://kotlinlang.org/docs/maven.html#create-jar-file" target="_blank" rel="noreferrer">Maven</a> 建置系統了解更多關於 JAR 產物生成。</p></div></li><li><p>如果儲存庫有要求，<code>kotlinMultiplatform</code> 發佈可能還需要原始碼和文件產物。在這種情況下，請在發佈範圍內使用 <a href="https://docs.gradle.org/current/javadoc/org/gradle/api/publish/maven/MavenPublication.html#artifact-java.lang.Object-" target="_blank" rel="noreferrer"><code>artifact()</code></a>。</p></li></ul><h3 id="發佈完整的函式庫" tabindex="-1">發佈完整的函式庫 <a class="header-anchor" href="#發佈完整的函式庫" aria-label="Permalink to &quot;發佈完整的函式庫&quot;">​</a></h3><p>要一步到位發佈所有必要的產物，請使用 <code>publishAllPublicationsTo&lt;MavenRepositoryName&gt;</code> 總括任務。例如：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> publishAllPublicationsToGithubPackagesRepository</span></span></code></pre></div><p>發佈到 Maven Local 時，您可以使用一個特殊任務：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> publishToMavenLocal</span></span></code></pre></div><p>這些任務確保所有目標特定和根發佈都被一同發佈，使函式庫完全可供依賴解析。</p><p>或者，您可以使用單獨的發佈任務。首先執行根發佈：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> publishKotlinMultiplatformPublicationToMavenLocal</span></span></code></pre></div><p>此任務發佈一個 <code>*.module</code> 檔案，其中包含目標特定發佈的資訊，但目標本身仍未發佈。要完成此過程，請單獨發佈每個目標特定發佈：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> publish</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">TargetNam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">PublicationToMavenLocal</span></span></code></pre></div><p>這保證所有產物都可用並正確引用。</p><h2 id="主機要求" tabindex="-1">主機要求 <a class="header-anchor" href="#主機要求" aria-label="Permalink to &quot;主機要求&quot;">​</a></h2><p>Kotlin/Native 支援交叉編譯，允許任何主機生成必要的 <code>.klib</code> 產物。然而，您仍需注意一些細節。</p><h3 id="編譯-apple-目標" tabindex="-1">編譯 Apple 目標 <a class="header-anchor" href="#編譯-apple-目標" aria-label="Permalink to &quot;編譯 Apple 目標&quot;">​</a></h3>`,35)),p(a,{ref:"Experimental"},null,512),s[1]||(s[1]=i(`<p>為了為包含 Apple 目標的專案生成產物，您通常需要一台 Apple 機器。然而，如果您想使用其他主機，請在 <code>gradle.properties</code> 檔案中設定此選項：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.native.enableKlibsCrossCompilation=true</span></span></code></pre></div><p>交叉編譯目前仍處於實驗階段（Experimental），並有一些限制。您仍然需要使用 Mac 機器，如果：</p><ul><li>您的函式庫具有 <a href="https://kotlinlang.org/docs/native-c-interop.html" target="_blank" rel="noreferrer">cinterop 依賴項</a>。</li><li>您在專案中設定了 <a href="./multiplatform-cocoapods-overview">CocoaPods 整合</a>。</li><li>您需要為 Apple 目標建置或測試<a href="./multiplatform-build-native-binaries">最終二進位檔</a>。</li></ul><h3 id="重複發佈" tabindex="-1">重複發佈 <a class="header-anchor" href="#重複發佈" aria-label="Permalink to &quot;重複發佈&quot;">​</a></h3><p>為避免發佈過程中出現任何問題，請從單一主機發佈所有產物，以避免儲存庫中出現重複的發佈。例如，Maven Central 明確禁止重複發佈，並會導致該過程失敗。</p><h2 id="發佈-android-函式庫" tabindex="-1">發佈 Android 函式庫 <a class="header-anchor" href="#發佈-android-函式庫" aria-label="Permalink to &quot;發佈 Android 函式庫&quot;">​</a></h2><p>要發佈 Android 函式庫，您需要提供額外的配置。</p><p>預設情況下，Android 函式庫不發佈任何產物。要發佈由一組 Android <a href="https://developer.android.com/build/build-variants" target="_blank" rel="noreferrer">建置變體</a>產生的產物，請在 <code>shared/build.gradle.kts</code> 檔案的 Android 目標區塊中指定變體名稱：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    androidTarget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        publishLibraryVariants</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;release&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>此範例適用於沒有<a href="https://developer.android.com/build/build-variants#product-flavors" target="_blank" rel="noreferrer">產品特色</a>的 Android 函式庫。對於具有產品特色的函式庫，變體名稱也包含特色，例如 <code>fooBarDebug</code> 或 <code>fooBarRelease</code>。</p><p>預設的發佈設定如下：</p><ul><li>如果已發佈的變體具有相同的建置類型（例如，它們都是 <code>release</code> 或 <code>debug</code>），它們將與任何消費者建置類型相容。</li><li>如果已發佈的變體具有不同的建置類型，則只有 <code>release</code> 變體將與不屬於已發佈變體的消費者建置類型相容。所有其他變體（例如 <code>debug</code>）將僅在消費者端匹配相同的建置類型，除非消費者專案指定了<a href="https://developer.android.com/reference/tools/gradle-api/4.2/com/android/build/api/dsl/BuildType" target="_blank" rel="noreferrer">匹配回退</a>。</li></ul><p>如果您希望使每個已發佈的 Android 變體僅與函式庫消費者使用的相同建置類型相容，請設定此 Gradle 屬性：<code>kotlin.android.buildTypeAttribute.keep=true</code>。</p><p>您還可以按產品特色對變體進行分組發佈，以便不同建置類型的輸出放置在單個模組中，其中建置類型成為產物的分類器（<code>release</code> 建置類型仍以無分類器方式發佈）。此模式預設為禁用，可以在 <code>shared/build.gradle.kts</code> 檔案中啟用，如下所示：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    androidTarget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        publishLibraryVariantsGroupedByFlavor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>不建議您按產品特色對變體進行分組發佈，以防它們具有不同的依賴項，因為這些依賴項將合併到一個依賴項列表中。</p></div><h2 id="禁用原始碼發佈" tabindex="-1">禁用原始碼發佈 <a class="header-anchor" href="#禁用原始碼發佈" aria-label="Permalink to &quot;禁用原始碼發佈&quot;">​</a></h2><p>預設情況下，Kotlin 多平台 Gradle 外掛程式會為所有指定目標發佈原始碼。然而，您可以在 <code>shared/build.gradle.kts</code> 檔案中透過 <code>withSourcesJar()</code> API 配置和禁用原始碼發佈：</p><ul><li><p>要禁用所有目標的原始碼發佈：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    withSourcesJar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(publish </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    linuxX64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>僅禁用指定目標的原始碼發佈：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     // Disable sources publication only for JVM:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        withSourcesJar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(publish </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    linuxX64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>禁用除指定目標外的所有目標的原始碼發佈：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Disable sources publication for all targets except for JVM:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    withSourcesJar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(publish </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        withSourcesJar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(publish </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    linuxX64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><h2 id="禁用-jvm-環境屬性發佈" tabindex="-1">禁用 JVM 環境屬性發佈 <a class="header-anchor" href="#禁用-jvm-環境屬性發佈" aria-label="Permalink to &quot;禁用 JVM 環境屬性發佈&quot;">​</a></h2><p>從 Kotlin 2.0.0 開始，Gradle 屬性 <code>org.gradle.jvm.environment</code> 會隨所有 Kotlin 變體自動發佈，以幫助區分 Kotlin 多平台函式庫的 JVM 和 Android 變體。此屬性指示哪個函式庫變體適合哪個 JVM 環境，Gradle 使用此資訊協助您專案中的依賴解析。目標環境可以是 &quot;android&quot;、&quot;standard-jvm&quot; 或 &quot;no-jvm&quot;。</p><p>您可以透過在 <code>gradle.properties</code> 檔案中添加以下 Gradle 屬性來禁用此屬性的發佈：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.publishJvmEnvironmentAttribute=false</span></span></code></pre></div><h2 id="推廣您的函式庫" tabindex="-1">推廣您的函式庫 <a class="header-anchor" href="#推廣您的函式庫" aria-label="Permalink to &quot;推廣您的函式庫&quot;">​</a></h2><p>您的函式庫可以在 <a href="https://klibs.io/" target="_blank" rel="noreferrer">JetBrains 的搜尋平台</a>上展示。它旨在讓您根據目標平台輕鬆查找 Kotlin 多平台函式庫。</p><p>符合條件的函式庫會自動添加。有關如何添加函式庫的更多資訊，請參閱 <a href="https://klibs.io/faq" target="_blank" rel="noreferrer">常見問題</a>。</p><h2 id="接下來" tabindex="-1">接下來 <a class="header-anchor" href="#接下來" aria-label="Permalink to &quot;接下來&quot;">​</a></h2><ul><li><a href="./multiplatform-publish-libraries">了解如何將您的 Kotlin 多平台函式庫發佈到 Maven Central 儲存庫</a></li><li><a href="https://kotlinlang.org/docs/api-guidelines-build-for-multiplatform.html" target="_blank" rel="noreferrer">查看函式庫作者指南，了解設計 Kotlin 多平台函式庫的最佳實踐和技巧</a></li></ul>`,29))])}const b=l(h,[["render",r]]);export{E as __pageData,b as default};
