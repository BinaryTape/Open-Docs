import{_ as p,a as o}from"./chunks/compose-resources-qualifiers.Cw94GyEp.js";import{_ as r,C as i,c as h,o as k,j as a,G as e,ag as l,a as d}from"./chunks/framework.Bksy39di.js";const q=JSON.parse('{"title":"다중 플랫폼 리소스 설정 및 구성","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kmp/compose-multiplatform-resources-setup.md","filePath":"ko/kmp/compose-multiplatform-resources-setup.md","lastUpdated":1755516278000}'),c={name:"ko/kmp/compose-multiplatform-resources-setup.md"};function E(u,s,g,m,y,F){const n=i("show-structure"),t=i("secondary-label");return k(),h("div",null,[s[0]||(s[0]=a("h1",{id:"다중-플랫폼-리소스-설정-및-구성",tabindex:"-1"},[d("다중 플랫폼 리소스 설정 및 구성 "),a("a",{class:"header-anchor",href:"#다중-플랫폼-리소스-설정-및-구성","aria-label":'Permalink to "다중 플랫폼 리소스 설정 및 구성"'},"​")],-1)),e(n,{depth:"3"}),s[1]||(s[1]=l(`<p>다중 플랫폼 리소스를 사용하도록 프로젝트를 올바르게 구성하려면:</p><ol><li>라이브러리 종속성을 추가합니다.</li><li>각 리소스 종류에 필요한 디렉터리를 생성합니다.</li><li>한정된 리소스(예: 다크 UI 테마에 대한 다른 이미지 또는 지역화된 문자열)를 위한 추가 디렉터리를 생성합니다.</li></ol><h2 id="빌드-스크립트-및-디렉터리-설정" tabindex="-1">빌드 스크립트 및 디렉터리 설정 <a class="header-anchor" href="#빌드-스크립트-및-디렉터리-설정" aria-label="Permalink to &quot;빌드 스크립트 및 디렉터리 설정&quot;">​</a></h2><p>다중 플랫폼 프로젝트에서 리소스에 액세스하려면 라이브러리 종속성을 추가하고 프로젝트 디렉터리 내에서 파일을 구성합니다.</p><ol><li><p><code>composeApp</code> 디렉터리의 <code>build.gradle.kts</code> 파일에 <code>commonMain</code> 소스 세트에 대한 종속성을 추가합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        commonMain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(compose.components.resources)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>라이브러리를 직접 참조하려면 <a href="https://central.sonatype.com/artifact/org.jetbrains.compose.components/components-resources" target="_blank" rel="noreferrer">Maven Central의 아티팩트 페이지</a>에서 정규화된 이름을 사용하세요.</p></div></li><li><p>리소스를 추가하려는 소스 세트 디렉터리(이 예에서는 <code>commonMain</code>)에 새 <code>composeResources</code> 디렉터리를 생성합니다.</p><p><img src="`+p+`" alt="Compose resources project structure" width="250"></p></li><li><p>다음 규칙에 따라 <code>composeResources</code> 디렉터리 구조를 구성합니다.</p><ul><li>이미지는 <code>drawable</code> 디렉터리에 있어야 합니다. Compose Multiplatform은 래스터화된 이미지(JPEG, PNG, 비트맵, WebP)와 벡터 Android XML 이미지(Android 리소스 참조 없음)를 지원합니다.</li><li>글꼴은 <code>font</code> 디렉터리에 있어야 합니다.</li><li>문자열은 <code>values</code> 디렉터리에 있어야 합니다.</li><li>다른 파일은 <code>files</code> 디렉터리에 있어야 하며, 적절하다고 생각하는 모든 폴더 계층 구조를 가질 수 있습니다.</li></ul></li></ol><h3 id="사용자-지정-리소스-디렉터리" tabindex="-1">사용자 지정 리소스 디렉터리 <a class="header-anchor" href="#사용자-지정-리소스-디렉터리" aria-label="Permalink to &quot;사용자 지정 리소스 디렉터리&quot;">​</a></h3><p><code>build.gradle.kts</code> 파일의 <code>compose.resources {}</code> 블록에서 각 소스 세트에 대한 사용자 지정 리소스 디렉터리를 지정할 수 있습니다. 각 사용자 지정 디렉터리도 기본 <code>composeResources</code>와 동일한 방식으로 파일(예: 이미지용 <code>drawable</code> 하위 디렉터리, 글꼴용 <code>font</code> 하위 디렉터리 등)을 포함해야 합니다.</p><p>간단한 예는 특정 폴더를 가리키는 것입니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compose.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resources</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    customDirectory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        sourceSetName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;desktopMain&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        directoryProvider </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> provider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { layout.projectDirectory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dir</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;desktopResources&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Gradle 작업(예: 다운로드된 파일)으로 채워지는 폴더를 설정할 수도 있습니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DownloadRemoteFiles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DefaultTask</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OutputDirectory</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> outputDir </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> layout.buildDirectory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dir</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;downloadedRemoteFiles&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @TaskAction</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* your code for downloading files */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compose.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resources</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    customDirectory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        sourceSetName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;iosMain&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        directoryProvider </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tasks.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">register</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DownloadRemoteFiles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;downloadedRemoteFiles&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.outputDir.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="androidlibrary-타겟의-리소스" tabindex="-1"><code>androidLibrary</code> 타겟의 리소스 <a class="header-anchor" href="#androidlibrary-타겟의-리소스" aria-label="Permalink to &quot;\`androidLibrary\` 타겟의 리소스&quot;">​</a></h3>`,12)),e(t,{ref:"Experimental"},null,512),s[2]||(s[2]=l(`<p>Android Gradle 플러그인 버전 8.8.0부터 <code>androidLibrary</code> 타겟에서 생성된 <code>Res</code> 클래스와 리소스 접근자를 사용할 수 있습니다. <code>androidLibrary</code>에서 다중 플랫폼 리소스 지원을 활성화하려면 다음과 같이 구성을 업데이트하세요.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin {</span></span>
<span class="line"><span>  androidLibrary {</span></span>
<span class="line"><span>    androidResources.enable = true</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><h2 id="한정자" tabindex="-1">한정자 <a class="header-anchor" href="#한정자" aria-label="Permalink to &quot;한정자&quot;">​</a></h2><p>때로는 로케일, 화면 밀도 또는 인터페이스 테마와 같은 환경에 따라 동일한 리소스가 다르게 표시되어야 할 수 있습니다. 예를 들어, 다른 언어에 대해 텍스트를 지역화하거나 다크 테마에 맞게 이미지를 조정해야 할 수 있습니다. 이를 위해 라이브러리는 특수 한정자(qualifiers)를 제공합니다.</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p><a href="./compose-resource-environment">로컬 리소스 환경 관리</a> 튜토리얼에서 리소스 관련 설정을 처리하는 방법을 알아보세요.</p></div><p><code>files</code> 디렉터리의 원시 파일을 제외한 모든 리소스 유형은 한정자를 지원합니다. 하이픈을 사용하여 디렉터리 이름에 한정자를 추가합니다.</p><p><img src="`+o+'" alt="Qualifiers in multiplatform resources" width="250"></p><p>라이브러리는 (우선순위 순으로) 다음 한정자를 지원합니다: <a href="#language-and-regional-qualifiers">언어</a>, <a href="#theme-qualifier">테마</a>, <a href="#density-qualifier">밀도</a>.</p><ul><li>다른 유형의 한정자를 함께 적용할 수 있습니다. 예를 들어, &quot;drawable-en-rUS-mdpi-dark&quot;는 미국 지역의 영어 언어에 대한 이미지이며, 다크 테마의 160 DPI 화면에 적합합니다.</li><li>요청된 한정자가 있는 리소스에 액세스할 수 없는 경우, 기본 리소스(한정자 없음)가 대신 사용됩니다.</li></ul><h3 id="언어-및-지역-한정자" tabindex="-1">언어 및 지역 한정자 <a class="header-anchor" href="#언어-및-지역-한정자" aria-label="Permalink to &quot;언어 및 지역 한정자&quot;">​</a></h3><p>언어 및 지역 한정자를 결합할 수 있습니다.</p><ul><li>언어는 두 글자(ISO 639-1) 또는 세 글자(ISO 639-2) <a href="https://www.loc.gov/standards/iso639-2/php/code_list.php" target="_blank" rel="noreferrer">언어 코드</a>로 정의됩니다.</li><li>언어 코드에 두 글자 <a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2" target="_blank" rel="noreferrer">ISO 3166-1-alpha-2</a> 지역 코드를 추가할 수 있습니다. 지역 코드는 소문자 <code>r</code> 접두사를 가져야 합니다(예: <code>drawable-spa-rMX</code>).</li></ul><p>언어 및 지역 코드는 대소문자를 구분합니다.</p><h3 id="테마-한정자" tabindex="-1">테마 한정자 <a class="header-anchor" href="#테마-한정자" aria-label="Permalink to &quot;테마 한정자&quot;">​</a></h3><p>&quot;light&quot; 또는 &quot;dark&quot; 한정자를 추가할 수 있습니다. 그러면 Compose Multiplatform은 현재 시스템 테마에 따라 필요한 리소스를 선택합니다.</p><h3 id="밀도-한정자" tabindex="-1">밀도 한정자 <a class="header-anchor" href="#밀도-한정자" aria-label="Permalink to &quot;밀도 한정자&quot;">​</a></h3><p>다음 밀도 한정자를 사용할 수 있습니다.</p><ul><li>&quot;ldpi&quot; – 120 DPI, 0.75배 밀도</li><li>&quot;mdpi&quot; – 160 DPI, 1배 밀도</li><li>&quot;hdpi&quot; – 240 DPI, 1.5배 밀도</li><li>&quot;xhdpi&quot; – 320 DPI, 2배 밀도</li><li>&quot;xxhdpi&quot; – 480 DPI, 3배 밀도</li><li>&quot;xxxhdpi&quot; – 640 DPI, 4배 밀도</li></ul><p>리소스는 시스템에 정의된 화면 밀도에 따라 선택됩니다.</p><h2 id="게시" tabindex="-1">게시 <a class="header-anchor" href="#게시" aria-label="Permalink to &quot;게시&quot;">​</a></h2><p>Compose Multiplatform 1.6.10부터 필요한 모든 리소스가 게시 Maven 아티팩트에 포함됩니다.</p><p>이 기능을 활성화하려면 프로젝트에서 Kotlin 2.0.0 이상 및 Gradle 7.6 이상을 사용해야 합니다.</p><h2 id="다음-단계" tabindex="-1">다음 단계 <a class="header-anchor" href="#다음-단계" aria-label="Permalink to &quot;다음 단계&quot;">​</a></h2><ul><li>설정한 리소스에 액세스하고 <a href="./compose-multiplatform-resources-usage">앱에서 다중 플랫폼 리소스 사용</a> 페이지에서 기본적으로 생성된 접근자를 사용자 지정하는 방법을 알아보세요.</li><li>iOS, Android 및 데스크톱을 대상으로 하는 Compose Multiplatform 프로젝트에서 리소스가 어떻게 처리될 수 있는지 보여주는 공식 <a href="https://github.com/JetBrains/compose-multiplatform/tree/master/components/resources/demo" target="_blank" rel="noreferrer">데모 프로젝트</a>를 확인해 보세요.</li></ul>',24))])}const _=r(c,[["render",E]]);export{q as __pageData,_ as default};
