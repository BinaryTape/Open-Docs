import{_ as i,c as a,o as n,ag as l}from"./chunks/framework.Bksy39di.js";const c=JSON.parse('{"title":"지연 모듈 및 백그라운드 로딩","description":"","frontmatter":{"title":"지연 모듈 및 백그라운드 로딩"},"headers":[],"relativePath":"ko/koin/reference/koin-core/lazy-modules.md","filePath":"ko/koin/reference/koin-core/lazy-modules.md","lastUpdated":1748365453000}'),t={name:"ko/koin/reference/koin-core/lazy-modules.md"};function e(p,s,h,k,d,o){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="지연-모듈-및-백그라운드-로딩" tabindex="-1">지연 모듈 및 백그라운드 로딩 <a class="header-anchor" href="#지연-모듈-및-백그라운드-로딩" aria-label="Permalink to &quot;지연 모듈 및 백그라운드 로딩&quot;">​</a></h1><p>이 섹션에서는 지연 로딩 방식을 사용하여 모듈을 구성하는 방법을 살펴봅니다.</p><h2 id="지연-모듈-정의-실험적" tabindex="-1">지연 모듈 정의 [실험적] <a class="header-anchor" href="#지연-모듈-정의-실험적" aria-label="Permalink to &quot;지연 모듈 정의 [실험적]&quot;">​</a></h2><p>이제 지연 Koin 모듈을 선언하여 리소스의 사전 할당을 방지하고 Koin 시작 시 백그라운드에서 로드할 수 있습니다.</p><ul><li><code>lazyModule</code> - Koin 모듈의 지연(Lazy) Kotlin 버전 선언</li><li><code>Module.includes</code> - 지연 모듈 포함 허용</li></ul><p>좋은 예시를 보면 항상 더 잘 이해할 수 있습니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 일부 지연 모듈</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lazyModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    singleOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ClassB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// m2 지연 모듈 포함</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lazyModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    includes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(m2)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    singleOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ClassA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IClassA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;() }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><pre><code>LazyModule은 다음 API에 의해 로드될 때까지 어떤 리소스도 트리거하지 않습니다.
</code></pre></div><h2 id="kotlin-코루틴을-이용한-백그라운드-로딩-실험적" tabindex="-1">Kotlin 코루틴을 이용한 백그라운드 로딩 [실험적] <a class="header-anchor" href="#kotlin-코루틴을-이용한-백그라운드-로딩-실험적" aria-label="Permalink to &quot;Kotlin 코루틴을 이용한 백그라운드 로딩 [실험적]&quot;">​</a></h2><p>지연 모듈을 선언한 후에는 Koin 구성에서 해당 모듈을 백그라운드로 로드할 수 있으며, 그 외에도 더 많은 작업을 수행할 수 있습니다.</p><ul><li><code>KoinApplication.lazyModules</code> - 플랫폼 기본 Dispatcher를 사용하여 코루틴으로 백그라운드에서 지연 모듈 로드</li><li><code>Koin.waitAllStartJobs</code> - 시작 작업이 완료될 때까지 대기</li><li><code>Koin.runOnKoinStarted</code> - 시작 완료 후 코드 블록 실행</li></ul><p>좋은 예시를 보면 항상 더 잘 이해할 수 있습니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startKoin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 백그라운드에서 지연 모듈 로드</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    lazyModules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(m1)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> koin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> KoinPlatform.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getKoin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 로딩 작업이 완료될 때까지 대기</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">koin.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">waitAllStartJobs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 또는 로딩 완료 후 코드 실행</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">koin.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">runOnKoinStarted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { koin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 백그라운드 로드 완료 후 실행</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><pre><code>\`lazyModules\` 함수를 사용하면 디스패처를 지정할 수 있습니다: \`lazyModules(modules, dispatcher = Dispatcher.IO)\`
</code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><pre><code>코루틴 엔진의 기본 디스패처는 \`Dispatchers.Default\`입니다.
</code></pre></div><h3 id="제한-사항-모듈-지연-모듈-혼합" tabindex="-1">제한 사항 - 모듈/지연 모듈 혼합 <a class="header-anchor" href="#제한-사항-모듈-지연-모듈-혼합" aria-label="Permalink to &quot;제한 사항 - 모듈/지연 모듈 혼합&quot;">​</a></h3><p>현재로서는 시작 시 일반 모듈과 지연 모듈을 혼합하는 것을 피하는 것이 좋습니다. <code>mainModule</code>이 <code>lazyReporter</code>에 대한 의존성을 가지도록 하지 마십시오.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startKoin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    androidLogger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    androidContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this@TestApp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    modules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mainModule)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    lazyModules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lazyReporter)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>현재 Koin은 모듈이 지연 모듈에 의존하는지 확인하지 않습니다.</p></div>`,19)]))}const E=i(t,[["render",e]]);export{c as __pageData,E as default};
