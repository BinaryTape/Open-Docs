import{_ as e,C as s,c as p,o,G as a,ag as r,w as h,a as k}from"./chunks/framework.Bksy39di.js";const F=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/build-tools-api.md","filePath":"ja/kotlin/build-tools-api.md","lastUpdated":1754307826000}'),d={name:"ja/kotlin/build-tools-api.md"};function c(E,i,g,u,y,m){const l=s("TopicTitle"),n=s("primary-label"),t=s("tldr");return o(),p("div",null,[a(l,{labelRef:"experimental-general",title:"ビルドツールAPI"}),a(n,{ref:"experimental-general"},null,512),a(t,null,{default:h(()=>i[0]||(i[0]=[k("現在、BTAはKotlin/JVMのみをサポートしています。")])),_:1}),i[1]||(i[1]=r(`<p>Kotlin 2.2.0 では、ビルドシステムがKotlinコンパイラと統合する方法を簡素化する、実験的なビルドツールAPI (BTA) が導入されました。</p><p>これまで、完全なKotlinサポート（インクリメンタルコンパイル、Kotlinコンパイラプラグイン、デーモン、Kotlinマルチプラットフォームなど）をビルドシステムに追加するには、多大な労力が必要でした。BTAは、ビルドシステムとKotlinコンパイラエコシステムの間で統一されたAPIを提供することで、この複雑さを軽減することを目的としています。</p><p>BTAは、ビルドシステムが実装できる単一のエントリポイントを定義します。これにより、コンパイラの内部詳細に深く統合する必要がなくなります。</p><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>BTA自体は、独自のビルドツール統合で直接使用するためにまだ一般公開されていません。 提案に興味がある場合、またはフィードバックを共有したい場合は、<a href="https://github.com/Kotlin/KEEP/issues/421" target="_blank" rel="noreferrer">KEEP</a> を参照してください。 その実装状況は <a href="https://youtrack.jetbrains.com/issue/KT-76255" target="_blank" rel="noreferrer">YouTrack</a> で確認できます。</p></div><h2 id="gradleとの統合" tabindex="-1">Gradleとの統合 <a class="header-anchor" href="#gradleとの統合" aria-label="Permalink to &quot;Gradleとの統合&quot;">​</a></h2><p>Kotlin Gradleプラグイン (KGP) はBTAの実験的サポートを提供しており、使用するにはオプトインが必要です。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>KGPの使用経験に関するフィードバックを <a href="https://youtrack.jetbrains.com/issue/KT-56574" target="_blank" rel="noreferrer">YouTrack</a> にいただけると幸いです。</p></div><h3 id="有効にする方法" tabindex="-1">有効にする方法 <a class="header-anchor" href="#有効にする方法" aria-label="Permalink to &quot;有効にする方法&quot;">​</a></h3><p><code>gradle.properties</code> ファイルに次のプロパティを追加します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kotlin.compiler.runViaBuildToolsApi</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span></code></pre></div><h3 id="異なるコンパイラバージョンの構成" tabindex="-1">異なるコンパイラバージョンの構成 <a class="header-anchor" href="#異なるコンパイラバージョンの構成" aria-label="Permalink to &quot;異なるコンパイラバージョンの構成&quot;">​</a></h3><p>BTAを使用すると、KGPが使用するバージョンとは異なるKotlinコンパイラバージョンを使用できるようになります。これは、次のような場合に役立ちます。</p><ul><li>新しいKotlin機能を試したいが、まだビルドスクリプトを更新していない場合。</li><li>最新のプラグインの修正が必要だが、今のところ古いコンパイラバージョンに留まりたい場合。</li></ul><p><code>build.gradle.kts</code> ファイルでこれを構成する方法の例を次に示します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.kotlin.buildtools.api.ExperimentalBuildToolsApi</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.kotlin.gradle.ExperimentalKotlinGradlePluginApi</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jvm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) version </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2.2.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">group </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;org.jetbrains.example&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">version </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1.0-SNAPSHOT&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">repositories</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	mavenCentral</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	jvmToolchain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalBuildToolsApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ExperimentalKotlinGradlePluginApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	compilerVersion.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2.1.21&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &lt;-- different version than 2.2.0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="互換性のあるkotlinコンパイラとkgpのバージョン" tabindex="-1">互換性のあるKotlinコンパイラとKGPのバージョン <a class="header-anchor" href="#互換性のあるkotlinコンパイラとkgpのバージョン" aria-label="Permalink to &quot;互換性のあるKotlinコンパイラとKGPのバージョン&quot;">​</a></h4><p>BTAは以下をサポートしています。</p><ul><li>過去3つのメジャーなKotlinコンパイラバージョン。</li><li>1つ先のメジャーバージョン。</li></ul><p>たとえば、KGP 2.2.0では、サポートされるKotlinコンパイラバージョンは次のとおりです。</p><ul><li>1.9.25</li><li>2.0.x</li><li>2.1.x</li><li>2.2.x</li><li>2.3.x</li></ul><h4 id="制限事項" tabindex="-1">制限事項 <a class="header-anchor" href="#制限事項" aria-label="Permalink to &quot;制限事項&quot;">​</a></h4><p>異なるコンパイラバージョンをコンパイラプラグインと組み合わせて使用すると、Kotlinコンパイラの例外が発生する可能性があります。Kotlinチームは、将来のKotlinリリースでこれに対処する予定です。</p><h3 id="in-process-戦略でのインクリメンタルコンパイルの有効化" tabindex="-1">&quot;in process&quot; 戦略でのインクリメンタルコンパイルの有効化 <a class="header-anchor" href="#in-process-戦略でのインクリメンタルコンパイルの有効化" aria-label="Permalink to &quot;&quot;in process&quot; 戦略でのインクリメンタルコンパイルの有効化&quot;">​</a></h3><p>KGPは3つの<a href="/ja/kotlin/gradle-compilation-and-caches#defining-kotlin-compiler-execution-strategy">コンパイラ実行戦略</a>をサポートしています。通常、&quot;in-process&quot; 戦略（Gradleデーモンでコンパイラを実行する戦略）は、インクリメンタルコンパイルをサポートしていません。</p><p>BTAを使用すると、&quot;in-process&quot; 戦略がインクリメンタルコンパイルをサポートするようになりました。これを有効にするには、<code>gradle.properties</code> ファイルに次のプロパティを追加します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kotlin.compiler.execution.strategy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=in-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process</span></span></code></pre></div><h2 id="mavenとの統合" tabindex="-1">Mavenとの統合 <a class="header-anchor" href="#mavenとの統合" aria-label="Permalink to &quot;Mavenとの統合&quot;">​</a></h2><p>Kotlin 2.2.0以降、BTAは<a href="/ja/kotlin/maven"><code>kotlin-maven-plugin</code></a> でデフォルトで有効になっています。</p><p>BTAはまだMavenユーザーに直接的なメリットをもたらしていませんが、次のような機能を開発するための強固な基盤を提供します。</p><ul><li><a href="https://youtrack.jetbrains.com/issue/KT-77587" target="_blank" rel="noreferrer">Kotlinデーモンサポート</a></li><li><a href="https://youtrack.jetbrains.com/issue/KT-77086" target="_blank" rel="noreferrer">インクリメンタルコンパイルの安定化</a></li></ul>`,30))])}const v=e(d,[["render",c]]);export{F as __pageData,v as default};
