import{_ as h,C as t,c as k,o as r,j as s,G as n,ag as l,a,w as e}from"./chunks/framework.Bksy39di.js";const q=JSON.parse('{"title":"CocoaPods Gradle 插件 DSL 参考","description":"","frontmatter":{},"headers":[],"relativePath":"kmp/multiplatform-cocoapods-dsl-reference.md","filePath":"kmp/multiplatform-cocoapods-dsl-reference.md","lastUpdated":1755516278000}'),c={name:"kmp/multiplatform-cocoapods-dsl-reference.md"},E={tabindex:"0"};function g(u,i,y,F,m,C){const o=t("tldr"),d=t("list"),p=t("code-block");return r(),k("div",null,[i[12]||(i[12]=s("h1",{id:"cocoapods-gradle-插件-dsl-参考",tabindex:"-1"},[a("CocoaPods Gradle 插件 DSL 参考 "),s("a",{class:"header-anchor",href:"#cocoapods-gradle-插件-dsl-参考","aria-label":'Permalink to "CocoaPods Gradle 插件 DSL 参考"'},"​")],-1)),n(o,null,{default:e(()=>i[0]||(i[0]=[s("ul",null,[s("li",null,[a("在添加 Pod 依赖项之前，请"),s("a",{href:"./multiplatform-cocoapods-overview#set-up-an-environment-to-work-with-cocoapods"},"完成初始配置"),a("。")]),s("li",null,[a("关于"),s("a",{href:"https://github.com/Kotlin/kmp-with-cocoapods-multitarget-xcode-sample",target:"_blank",rel:"noreferrer"},"在 Kotlin 项目中设置不同 Pod 依赖项"),a("的示例项目，请参见。")]),s("li",null,[a("关于"),s("a",{href:"https://github.com/Kotlin/kmp-with-cocoapods-multitarget-xcode-sample",target:"_blank",rel:"noreferrer"},"包含多个 target 的 Xcode 项目如何依赖 Kotlin 库"),a("的示例项目，请查看。")])],-1)])),_:1}),i[13]||(i[13]=l("",23)),s("table",E,[i[11]||(i[11]=s("thead",null,[s("tr",null,[s("th",null,[s("strong",null,"名称")]),s("th",null,[s("strong",null,"描述")])])],-1)),s("tbody",null,[i[6]||(i[6]=s("tr",null,[s("td",null,[s("code",null,"version")]),s("td",null,"库版本。要使用库的最新版本，请省略形参。")],-1)),s("tr",null,[i[3]||(i[3]=s("td",null,[s("code",null,"source")],-1)),s("td",null,[i[2]||(i[2]=a("配置 Pod 的来源：")),n(d,null,{default:e(()=>i[1]||(i[1]=[s("li",null,[a("使用 "),s("code",null,"git()"),a(" 的 Git 版本库。在 "),s("code",null,"git()"),a(" 之后的块中，你可以指定 "),s("code",null,"commit"),a(" 以使用特定提交、"),s("code",null,"tag"),a(" 以使用特定标签，以及 "),s("code",null,"branch"),a(" 以使用版本库中的特定分支")],-1),s("li",null,[a("使用 "),s("code",null,"path()"),a(" 的本地版本库")],-1)])),_:1})])]),i[7]||(i[7]=s("tr",null,[s("td",null,[s("code",null,"packageName")]),s("td",null,"指定包名称。")],-1)),s("tr",null,[i[5]||(i[5]=s("td",null,[s("code",null,"extraOpts")],-1)),s("td",null,[i[4]||(i[4]=a("指定 Pod 库的选项的列表。例如，特定标志：")),n(p,{lang:"Kotlin",code:'extraOpts = listOf("-compiler-option")'})])]),i[8]||(i[8]=s("tr",null,[s("td",null,[s("code",null,"linkOnly")]),s("td",null,"指示 CocoaPods 插件使用动态框架的 Pod 依赖项，而不生成 cinterop 绑定。如果与静态框架一起使用，该选项将完全移除 Pod 依赖项。")],-1)),i[9]||(i[9]=s("tr",null,[s("td",null,[s("code",null,"interopBindingDependencies")]),s("td",null,"包含其他 Pod 的依赖项列表。当为新 Pod 构建 Kotlin 绑定时，将使用此列表。")],-1)),i[10]||(i[10]=s("tr",null,[s("td",null,[s("code",null,"useInteropBindingFrom()")]),s("td",null,"指定用作依赖项的现有 Pod 的名称。此 Pod 应在函数执行前声明。该函数指示 CocoaPods 插件在为新 Pod 构建绑定时使用现有 Pod 的 Kotlin 绑定。")],-1))])]),i[14]||(i[14]=l("",3))])}const B=h(c,[["render",g]]);export{q as __pageData,B as default};
