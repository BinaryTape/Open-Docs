import{_ as e,C as n,c as l,o as p,j as s,G as h,ag as o,a,w as r}from"./chunks/framework.Bksy39di.js";const F=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ktor/client-basic-auth.md","filePath":"ktor/client-basic-auth.md","lastUpdated":1755457140000}'),k={name:"ktor/client-basic-auth.md"};function c(d,i,u,E,g,b){const t=n("tldr");return p(),l("div",null,[i[1]||(i[1]=s("h1",{id:"ktor-客户端中的基本认证",tabindex:"-1"},[a("Ktor 客户端中的基本认证 "),s("a",{class:"header-anchor",href:"#ktor-客户端中的基本认证","aria-label":'Permalink to "Ktor 客户端中的基本认证"'},"​")],-1)),h(t,null,{default:r(()=>i[0]||(i[0]=[s("p",null,[s("b",null,"必需的依赖项"),a(": "),s("code",null,"io.ktor:ktor-client-auth")],-1),s("p",null,[s("b",null,"代码示例"),a(": "),s("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/client-auth-basic"}," client-auth-basic ")],-1)])),_:1}),i[2]||(i[2]=o(`<p>Basic <a href="./client-auth">认证方案</a> 可用于用户登录。在此方案中，用户凭据以 Base64 编码的用户名/密码对形式传输。</p><blockquote><p>在服务器端，Ktor 提供了 <a href="./server-basic-auth">Authentication</a> 插件用于处理基本认证。</p></blockquote><h2 id="flow" tabindex="-1">基本认证流程 <a class="header-anchor" href="#flow" aria-label="Permalink to &quot;基本认证流程 {id=&quot;flow&quot;}&quot;">​</a></h2><p>基本认证流程如下所示：</p><ol><li><p>客户端向服务器应用程序中的特定资源发起请求，但不带 <code>Authorization</code> 请求头。</p></li><li><p>服务器向客户端响应 <code>401</code>（未授权）响应状态，并使用 <code>WWW-Authenticate</code> 响应头提供信息，表明基本认证方案用于保护某个路由。典型的 <code>WWW-Authenticate</code> 请求头如下所示：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>WWW-Authenticate: Basic realm=&quot;Access to the &#39;/&#39; path&quot;, charset=&quot;UTF-8&quot;</span></span></code></pre></div><p>Ktor 客户端允许你使用 <code>sendWithoutRequest</code> <a href="#configure">函数</a> 发送凭据，而无需等待 <code>WWW-Authenticate</code> 请求头。</p></li><li><p>通常，客户端会显示一个登录对话框，用户可以在其中输入凭据。然后，客户端发起一个带有 <code>Authorization</code> 请求头的请求，该请求头包含使用 Base64 编码的用户名和密码对，例如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Authorization: Basic amV0YnJhaW5zOmZvb2Jhcg</span></span></code></pre></div></li><li><p>服务器验证客户端发送的凭据，并响应请求的内容。</p></li></ol><h2 id="configure" tabindex="-1">配置基本认证 <a class="header-anchor" href="#configure" aria-label="Permalink to &quot;配置基本认证 {id=&quot;configure&quot;}&quot;">​</a></h2><p>为了在 <code>Authorization</code> 请求头中使用 <code>Basic</code> 方案发送用户凭据，你需要按如下方式配置基本认证提供者：</p><ol><li><p>在 <code>install</code> 代码块中调用 <a href="https://api.ktor.io/ktor-client/ktor-client-plugins/ktor-client-auth/io.ktor.client.plugins.auth.providers/basic.html" target="_blank" rel="noreferrer">basic</a> 函数。</p></li><li><p>使用 <a href="https://api.ktor.io/ktor-client/ktor-client-plugins/ktor-client-auth/io.ktor.client.plugins.auth.providers/-basic-auth-credentials/index.html" target="_blank" rel="noreferrer">BasicAuthCredentials</a> 提供所需凭据，并将此对象传递给 <a href="https://api.ktor.io/ktor-client/ktor-client-plugins/ktor-client-auth/io.ktor.client.plugins.auth.providers/-basic-auth-config/credentials.html" target="_blank" rel="noreferrer">credentials</a> 函数。</p></li><li><p>使用 <code>realm</code> 属性配置认证领域。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Auth) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        basic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            credentials</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                BasicAuthCredentials</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(username </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;jetbrains&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, password </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;foobar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            realm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Access to the &#39;/&#39; path&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>可选地，在不等待 <code>401</code>（未授权）响应和 <code>WWW-Authenticate</code> 请求头的情况下，启用在初始请求中发送凭据。你需要调用返回布尔值的 <code>sendWithoutRequest</code> 函数并检测请求参数。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Auth) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    basic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        sendWithoutRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { request </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            request.url.host </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;0.0.0.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ol><blockquote><p>你可以在此处找到完整的示例：<a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/client-auth-basic" target="_blank" rel="noreferrer">client-auth-basic</a>。</p></blockquote>`,9))])}const m=e(k,[["render",c]]);export{F as __pageData,m as default};
