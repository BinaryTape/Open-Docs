import{_ as o,a as r,d as h,e as d,b as k,c}from"./chunks/ios-new-configuration.DNF7jnri.js";import{_ as g}from"./chunks/icon-3-todo.aEuKIG4W.js";import{_ as m}from"./chunks/icon-4-todo.DqbNYzPe.js";import{_ as u}from"./chunks/icon-5-todo.DJgVODZv.js";import{_ as E,a as y,b as F,c as f,d as b,e as A}from"./chunks/first-multiplatform-project-on-ios-1.Baa1gGHA.js";import{_ as v,C as e,c as C,o as _,j as i,G as l,ag as t,a,w as D}from"./chunks/framework.Bksy39di.js";const V=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kmp/multiplatform-create-first-app.md","filePath":"ko/kmp/multiplatform-create-first-app.md","lastUpdated":1755516278000}'),P={name:"ko/kmp/multiplatform-create-first-app.md"};function I(S,s,B,x,K,q){const n=e("secondary-label"),p=e("tldr");return _(),C("div",null,[s[1]||(s[1]=i("h1",{id:"kotlin-멀티플랫폼-앱-만들기",tabindex:"-1"},[a("Kotlin 멀티플랫폼 앱 만들기 "),i("a",{class:"header-anchor",href:"#kotlin-멀티플랫폼-앱-만들기","aria-label":'Permalink to "Kotlin 멀티플랫폼 앱 만들기"'},"​")],-1)),l(n,{ref:"IntelliJ IDEA"},null,512),l(n,{ref:"Android Studio"},null,512),l(p,null,{default:D(()=>s[0]||(s[0]=[i("p",null,"이 튜토리얼은 IntelliJ IDEA를 사용하지만 Android Studio에서도 따라할 수 있습니다. 두 IDE 모두 동일한 핵심 기능과 Kotlin Multiplatform 지원을 공유합니다.",-1),i("br",null,null,-1),i("p",null,[a("이 튜토리얼은 "),i("strong",null,"공유 로직과 네이티브 UI를 사용하는 Kotlin 멀티플랫폼 앱 만들기"),a(" 가이드의 첫 번째 부분입니다.")],-1),i("p",null,[i("img",{src:o,width:"20",alt:"첫 번째 단계"}),a(),i("strong",null,"Kotlin 멀티플랫폼 앱 만들기"),i("br"),i("img",{src:r,width:"20",alt:"두 번째 단계"}),a(" 사용자 인터페이스 업데이트"),i("br"),i("img",{src:g,width:"20",alt:"세 번째 단계"}),a(" 종속성 추가"),i("br"),i("br"),i("img",{src:m,width:"20",alt:"네 번째 단계"}),a(" 더 많은 로직 공유"),i("br"),i("img",{src:u,width:"20",alt:"다섯 번째 단계"}),a(" 프로젝트 마무리"),i("br")],-1)])),_:1}),s[2]||(s[2]=t('<p>여기서는 IntelliJ IDEA를 사용하여 첫 번째 Kotlin 멀티플랫폼 애플리케이션을 생성하고 실행하는 방법을 배웁니다.</p><p>Kotlin Multiplatform 기술은 크로스 플랫폼 프로젝트 개발을 간소화합니다. Kotlin Multiplatform 애플리케이션은 iOS, Android, macOS, Windows, Linux, 웹 등 다양한 플랫폼에서 작동할 수 있습니다.</p><p>Kotlin Multiplatform의 주요 사용 사례 중 하나는 모바일 플랫폼 간에 코드를 공유하는 것입니다. iOS 및 Android 앱 간에 애플리케이션 로직을 공유하고, 네이티브 UI를 구현하거나 플랫폼 API와 작업해야 할 때만 플랫폼별 코드를 작성할 수 있습니다.</p><h2 id="프로젝트-생성" tabindex="-1">프로젝트 생성 <a class="header-anchor" href="#프로젝트-생성" aria-label="Permalink to &quot;프로젝트 생성&quot;">​</a></h2><ol><li><p><a href="./quickstart">빠른 시작</a>에서 지침을 완료하여 <a href="./quickstart#set-up-the-environment">Kotlin Multiplatform 개발 환경을 설정하십시오</a>.</p></li><li><p>IntelliJ IDEA에서 <strong>File</strong> | <strong>New</strong> | <strong>Project</strong>를 선택합니다.</p></li><li><p>왼쪽 패널에서 <strong>Kotlin Multiplatform</strong>를 선택합니다.</p></li><li><p><strong>New Project</strong> 창에서 다음 필드를 지정합니다.</p><ul><li><strong>이름</strong>: GreetingKMP</li><li><strong>그룹</strong>: com.jetbrains.greeting</li><li><strong>아티팩트</strong>: greetingkmp</li></ul><p><img src="'+E+'" alt="Compose Multiplatform 프로젝트 생성" width="800"></p></li><li><p><strong>Android</strong> 및 <strong>iOS</strong> 대상을 선택합니다.</p></li><li><p>iOS의 경우, UI를 네이티브로 유지하기 위해 <strong>UI 공유 안 함</strong> 옵션을 선택합니다.</p></li><li><p>모든 필드와 대상을 지정했으면 <strong>Create</strong>를 클릭합니다.</p></li></ol><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>IntelliJ IDEA는 프로젝트의 Android Gradle 플러그인을 최신 버전으로 업그레이드하도록 자동으로 제안할 수 있습니다. Kotlin Multiplatform이 최신 AGP 버전과 호환되지 않으므로 업그레이드하는 것을 권장하지 않습니다 (<a href="https://kotlinlang.org/docs/multiplatform-compatibility-guide.html#version-compatibility" target="_blank" rel="noreferrer">호환성 표</a> 참조).</p></div><h2 id="프로젝트-구조-살펴보기" tabindex="-1">프로젝트 구조 살펴보기 <a class="header-anchor" href="#프로젝트-구조-살펴보기" aria-label="Permalink to &quot;프로젝트 구조 살펴보기&quot;">​</a></h2><p>IntelliJ IDEA에서 <code>GreetingKMP</code> 폴더를 확장합니다.</p><p>이 Kotlin Multiplatform 프로젝트에는 다음 세 가지 모듈이 포함됩니다.</p><ul><li>_shared_는 Android 및 iOS 애플리케이션 모두에 공통되는 로직을 포함하는 Kotlin 모듈입니다. 즉, 플랫폼 간에 공유하는 코드입니다. 빌드 시스템으로 <a href="https://kotlinlang.org/docs/gradle.html" target="_blank" rel="noreferrer">Gradle</a>을 사용하여 빌드 프로세스를 자동화하는 데 도움이 됩니다.</li><li>_composeApp_은 Android 애플리케이션으로 빌드되는 Kotlin 모듈입니다. 빌드 시스템으로 Gradle을 사용합니다. <code>composeApp</code> 모듈은 <code>shared</code> 모듈에 의존하며 일반 Android 라이브러리로 사용합니다.</li><li>_iosApp_은 iOS 애플리케이션으로 빌드되는 Xcode 프로젝트입니다. shared 모듈에 의존하며 iOS 프레임워크로 사용합니다. shared 모듈은 일반 프레임워크 또는 <a href="./multiplatform-cocoapods-overview">CocoaPods 종속성</a>으로 사용될 수 있습니다. 기본적으로 IntelliJ IDEA에서 생성된 Kotlin Multiplatform 프로젝트는 일반 프레임워크 종속성을 사용합니다.</li></ul><p><img src="'+y+'" alt="기본 Multiplatform 프로젝트 구조" width="700"></p><p><code>shared</code> 모듈은 다음 세 가지 소스 세트로 구성됩니다: <code>androidMain</code>, <code>commonMain</code>, <code>iosMain</code>. _Source set_은 논리적으로 함께 그룹화된 여러 파일을 위한 Gradle 개념으로, 각 그룹에는 자체 종속성이 있습니다. Kotlin Multiplatform에서 shared 모듈의 다른 소스 세트는 다른 플랫폼을 대상으로 할 수 있습니다.</p><p>common 소스 세트에는 공유 Kotlin 코드가 포함되어 있으며, 플랫폼 소스 세트는 각 대상에 특정한 Kotlin 코드를 사용합니다. <code>androidMain</code>에는 Kotlin/JVM이 사용되고 <code>iosMain</code>에는 Kotlin/Native가 사용됩니다:</p><p><img src="'+F+'" alt="소스 세트 및 모듈 구조" width="350"></p><p><code>shared</code> 모듈이 Android 라이브러리로 빌드될 때 common Kotlin 코드는 Kotlin/JVM으로 처리됩니다. iOS 프레임워크로 빌드될 때 common Kotlin은 Kotlin/Native로 처리됩니다:</p><p><img src="'+f+`" alt="Common Kotlin, Kotlin/JVM, 그리고 Kotlin/Native"></p><h3 id="공통-선언-작성" tabindex="-1">공통 선언 작성 <a class="header-anchor" href="#공통-선언-작성" aria-label="Permalink to &quot;공통 선언 작성&quot;">​</a></h3><p>common 소스 세트에는 여러 대상 플랫폼에서 사용될 수 있는 공유 코드가 포함되어 있습니다. 이는 플랫폼에 독립적인 코드를 포함하도록 설계되었습니다. common 소스 세트에서 플랫폼별 API를 사용하려고 하면 IDE에서 경고가 표시됩니다.</p><ol><li><p><code>shared/src/commonMain/kotlin/com/jetbrains/greeting/greetingkmp/Greeting.kt</code> 파일을 엽니다. 여기에는 자동으로 생성된 <code>Greeting</code> 클래스와 <code>greet()</code> 함수가 있습니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Greeting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> platform </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello, \${platform.name}!&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>인사에 약간의 다양성을 추가합니다. Kotlin 표준 라이브러리에서 <code>kotlin.random.Random</code>을 임포트합니다. 이것은 모든 플랫폼에서 작동하는 멀티플랫폼 라이브러리이며 종속성으로 자동으로 포함됩니다.</p></li><li><p>Kotlin 표준 라이브러리의 <code>reversed()</code> 호출을 사용하여 shared 코드를 업데이트하여 텍스트를 뒤집습니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.random.Random</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Greeting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> platform: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> firstWord </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Random.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nextBoolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hi!&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> else</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello!&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$firstWord</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Guess what this is! &gt; \${platform.name.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reversed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">()}!&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ol><p>common Kotlin으로만 코드를 작성하는 것은 플랫폼별 기능을 사용할 수 없으므로 명백한 한계가 있습니다. 인터페이스와 <a href="./multiplatform-connect-to-apis">expect/actual</a> 메커니즘을 사용하면 이 문제를 해결할 수 있습니다.</p><h3 id="플랫폼별-구현-확인" tabindex="-1">플랫폼별 구현 확인 <a class="header-anchor" href="#플랫폼별-구현-확인" aria-label="Permalink to &quot;플랫폼별 구현 확인&quot;">​</a></h3><p>common 소스 세트는 예상되는 선언(인터페이스, 클래스 등)을 정의할 수 있습니다. 그런 다음 각 플랫폼 소스 세트(이 경우 <code>androidMain</code> 및 <code>iosMain</code>)는 예상되는 선언에 대한 실제 플랫폼별 구현을 제공해야 합니다.</p><p>특정 플랫폼에 대한 코드를 생성하는 동안 Kotlin 컴파일러는 예상되는 선언과 실제 선언을 병합하고 실제 구현을 포함하는 단일 선언을 생성합니다.</p><ol><li><p>IntelliJ IDEA로 Kotlin Multiplatform 프로젝트를 생성하면 <code>commonMain</code> 모듈에 <code>Platform.kt</code> 파일 템플릿을 얻게 됩니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Platform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>이것은 플랫폼에 대한 정보를 담고 있는 공통 <code>Platform</code> 인터페이스입니다.</p></li><li><p><code>androidMain</code> 및 <code>iosMain</code> 모듈 간에 전환합니다. Android 및 iOS 소스 세트에 대해 동일한 기능의 다른 구현이 있는 것을 볼 수 있습니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Platform.android.kt in the androidMain module:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> android.os.Build</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AndroidPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Android \${Build.VERSION.SDK_INT}&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Platform.ios.kt in the iosMain module:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> platform.UIKit.UIDevice</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IOSPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        UIDevice.currentDevice.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot; &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UIDevice.currentDevice.systemVersion</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><code>AndroidPlatform</code>의 <code>name</code> 프로퍼티 구현은 Android 고유의 코드, 즉 <code>android.os.Build</code> 종속성을 사용합니다. 이 코드는 Kotlin/JVM으로 작성되었습니다. 여기서 <code>java.util.Random</code>과 같은 JVM 고유 클래스에 접근하려고 하면 이 코드는 컴파일됩니다.</li><li><code>IOSPlatform</code>의 <code>name</code> 프로퍼티 구현은 iOS 고유의 코드, 즉 <code>platform.UIKit.UIDevice</code> 종속성을 사용합니다. 이것은 Kotlin/Native로 작성되었으며, 이는 Kotlin으로 iOS 코드를 작성할 수 있음을 의미합니다. 이 코드는 나중에 iOS 애플리케이션에서 Swift로 호출할 iOS 프레임워크의 일부가 됩니다.</li></ul></li><li><p>다른 소스 세트의 <code>getPlatform()</code> 함수를 확인하십시오. 예상되는 선언에는 본문이 없으며, 실제 구현은 플랫폼 코드에 제공됩니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Platform.kt in the commonMain source set</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Platform.android.kt in the androidMain source set</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AndroidPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Platform.ios.kt in the iosMain source set</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IOSPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div></li></ol><p>여기서 common 소스 세트는 예상되는 <code>getPlatform()</code> 함수를 정의하고 플랫폼 소스 세트에 Android 앱용 <code>AndroidPlatform()</code> 및 iOS 앱용 <code>IOSPlatform()</code> 실제 구현을 가집니다.</p><p>특정 플랫폼에 대한 코드를 생성하는 동안 Kotlin 컴파일러는 예상되는 선언과 실제 선언을 실제 구현을 포함하는 단일 <code>getPlatform()</code> 함수로 병합합니다.</p><p>이것이 예상되는 선언과 실제 선언이 동일한 패키지에 정의되어야 하는 이유입니다. 최종 플랫폼 코드에서 하나의 선언으로 병합되기 때문입니다. 생성된 플랫폼 코드에서 예상되는 <code>getPlatform()</code> 함수를 호출하면 올바른 실제 구현이 호출됩니다.</p><p>이제 앱을 실행하고 이 모든 것을 실제로 확인할 수 있습니다.</p>`,28)),s[3]||(s[3]=i("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"expect-actual-메커니즘-살펴보기-선택-사항",tabindex:"-1"},[a("expect/actual 메커니즘 살펴보기 (선택 사항) "),i("a",{class:"header-anchor",href:"#expect-actual-메커니즘-살펴보기-선택-사항","aria-label":'Permalink to "expect/actual 메커니즘 살펴보기 (선택 사항) {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),s[4]||(s[4]=t(`<p>템플릿 프로젝트는 함수에 expect/actual 메커니즘을 사용하지만, 프로퍼티 및 클래스와 같은 대부분의 Kotlin 선언에도 작동합니다. 예상되는 프로퍼티를 구현해 보겠습니다:</p><ol><li><p><code>commonMain</code> 모듈에 있는 <code>Platform.kt</code> 파일을 열고 파일 끝에 다음을 추가합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span></span></code></pre></div><p>Kotlin 컴파일러는 이 프로퍼티에 해당하는 실제 선언이 플랫폼 모듈에 없다고 불평합니다.</p></li><li><p>다음과 같이 즉시 구현을 제공해 보십시오:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 42</span></span></code></pre></div><p>예상되는 선언에는 본문(이 경우 초기화 프로그램)이 없어야 한다는 오류가 발생합니다. 구현은 실제 플랫폼 모듈에 제공되어야 합니다. 초기화 프로그램을 제거합니다.</p></li><li><p><code>num</code> 프로퍼티 위로 마우스를 올리고 **Create missed actuals...**를 클릭합니다. <code>androidMain</code> 소스 세트를 선택합니다. 그런 다음 <code>androidMain/Platform.android.kt</code>에서 구현을 완료할 수 있습니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span></code></pre></div></li><li><p>이제 <code>iosMain</code> 모듈에 대한 구현을 제공합니다. <code>iosMain/Platform.ios.kt</code>에 다음을 추가합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span></code></pre></div></li><li><p><code>commonMain/Greeting.kt</code> 파일에서 <code>greet()</code> 함수에 <code>num</code> 프로퍼티를 추가하여 차이점을 확인합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> firstWord </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Random.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nextBoolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hi!&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> else</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello!&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$firstWord</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$num</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">] Guess what this is! &gt; \${platform.name.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reversed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">()}!&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ol><h2 id="애플리케이션-실행" tabindex="-1">애플리케이션 실행 <a class="header-anchor" href="#애플리케이션-실행" aria-label="Permalink to &quot;애플리케이션 실행&quot;">​</a></h2><p>IntelliJ IDEA에서 <a href="#run-your-application-on-android">Android</a> 또는 <a href="#run-your-application-on-ios">iOS</a> 모두에 대해 멀티플랫폼 애플리케이션을 실행할 수 있습니다.</p><p>이전에 expect/actual 메커니즘을 살펴보았다면, Android 인사말에 &quot;[1]&quot;이, iOS 인사말에 &quot;[2]&quot;가 추가된 것을 볼 수 있습니다.</p><h3 id="android에서-애플리케이션-실행" tabindex="-1">Android에서 애플리케이션 실행 <a class="header-anchor" href="#android에서-애플리케이션-실행" aria-label="Permalink to &quot;Android에서 애플리케이션 실행&quot;">​</a></h3><ol><li><p>실행 구성 목록에서 <strong>composeApp</strong>을 선택합니다.</p></li><li><p>구성 목록 옆에 있는 Android 가상 기기를 선택하고 <strong>Run</strong>을 클릭합니다.</p><p>목록에 기기가 없으면 <a href="https://developer.android.com/studio/run/managing-avds#createavd" target="_blank" rel="noreferrer">새 Android 가상 기기를 생성하십시오</a>.</p><p><img src="`+h+'" alt="Android에서 멀티플랫폼 앱 실행" width="350"></p><p><img src="'+b+'" alt="Android에서 첫 번째 모바일 멀티플랫폼 앱" width="300"></p></li></ol>',7)),s[5]||(s[5]=i("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"다른-android-시뮬레이션-기기에서-실행",tabindex:"-1"},[a("다른 Android 시뮬레이션 기기에서 실행 "),i("a",{class:"header-anchor",href:"#다른-android-시뮬레이션-기기에서-실행","aria-label":'Permalink to "다른 Android 시뮬레이션 기기에서 실행 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),s[6]||(s[6]=i("p",null,[i("a",{href:"https://developer.android.com/studio/run/emulator#runningapp",target:"_blank",rel:"noreferrer"},"Android 에뮬레이터를 구성하고 다른 시뮬레이션 기기에서 애플리케이션을 실행하는 방법"),a("을 알아보십시오.")],-1)),s[7]||(s[7]=i("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"실제-android-기기에서-실행",tabindex:"-1"},[a("실제 Android 기기에서 실행 "),i("a",{class:"header-anchor",href:"#실제-android-기기에서-실행","aria-label":'Permalink to "실제 Android 기기에서 실행 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),s[8]||(s[8]=t('<p><a href="https://developer.android.com/studio/run/device" target="_blank" rel="noreferrer">하드웨어 기기를 구성하고 연결하여 애플리케이션을 실행하는 방법</a>을 알아보십시오.</p><h3 id="ios에서-애플리케이션-실행" tabindex="-1">iOS에서 애플리케이션 실행 <a class="header-anchor" href="#ios에서-애플리케이션-실행" aria-label="Permalink to &quot;iOS에서 애플리케이션 실행&quot;">​</a></h3><p>초기 설정의 일부로 Xcode를 시작하지 않았다면, iOS 앱을 실행하기 전에 먼저 실행하십시오.</p><p>IntelliJ IDEA에서 실행 구성 목록에서 <strong>iosApp</strong>을 선택하고, 실행 구성 옆에 있는 시뮬레이션 기기를 선택한 다음, <strong>Run</strong>을 클릭합니다.</p><p>목록에 사용 가능한 iOS 구성이 없으면 <a href="#run-on-a-new-ios-simulated-device">새 실행 구성을 추가하십시오</a>.</p><p><img src="'+d+'" alt="iOS에서 멀티플랫폼 앱 실행" width="350"></p><p><img src="'+A+'" alt="iOS에서 첫 번째 모바일 멀티플랫폼 앱" width="300"></p>',7)),s[9]||(s[9]=i("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"새-ios-시뮬레이션-기기에서-실행",tabindex:"-1"},[a("새 iOS 시뮬레이션 기기에서 실행 "),i("a",{class:"header-anchor",href:"#새-ios-시뮬레이션-기기에서-실행","aria-label":'Permalink to "새 iOS 시뮬레이션 기기에서 실행 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),s[10]||(s[10]=t('<p>시뮬레이션 기기에서 애플리케이션을 실행하려면 새 실행 구성을 추가할 수 있습니다.</p><ol><li><p>실행 구성 목록에서 <strong>Edit Configurations</strong>를 클릭합니다.</p><p><img src="'+k+'" alt="실행 구성 편집" width="450"></p></li><li><p>구성 목록 위에 있는 <strong>+</strong> 버튼을 클릭한 다음 <strong>Xcode Application</strong>을 선택합니다.</p><p><img src="'+c+'" alt="iOS 애플리케이션용 새 실행 구성"></p></li><li><p>구성에 이름을 지정합니다.</p></li><li><p><strong>Working directory</strong>를 선택합니다. 그러려면 <code>iosApp</code> 폴더에 있는 프로젝트(예: <strong>KotlinMultiplatformSandbox</strong>)로 이동합니다.</p></li><li><p><strong>Run</strong>을 클릭하여 새 시뮬레이션 기기에서 애플리케이션을 실행합니다.</p></li></ol>',2)),s[11]||(s[11]=i("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"실제-ios-기기에서-실행",tabindex:"-1"},[a("실제 iOS 기기에서 실행 "),i("a",{class:"header-anchor",href:"#실제-ios-기기에서-실행","aria-label":'Permalink to "실제 iOS 기기에서 실행 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),s[12]||(s[12]=t(`<p>실제 iOS 기기에서 멀티플랫폼 애플리케이션을 실행할 수 있습니다. 시작하기 전에, <a href="https://support.apple.com/en-us/HT204316" target="_blank" rel="noreferrer">Apple ID</a>와 연결된 Team ID를 설정해야 합니다.</p><h5 id="team-id-설정" tabindex="-1">Team ID 설정 <a class="header-anchor" href="#team-id-설정" aria-label="Permalink to &quot;Team ID 설정&quot;">​</a></h5><p>프로젝트에서 Team ID를 설정하려면 IntelliJ IDEA에서 KDoctor 도구를 사용하거나 Xcode에서 팀을 선택할 수 있습니다.</p><p>KDoctor의 경우:</p><ol><li><p>IntelliJ IDEA에서 터미널에서 다음 명령어를 실행합니다:</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kdoctor --team-ids</span></span></code></pre></div><p>KDoctor는 현재 시스템에 구성된 모든 Team ID를 나열합니다. 예시:</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>3ABC246XYZ (Max Sample)</span></span>
<span class="line"><span>ZABCW6SXYZ (SampleTech Inc.)</span></span></code></pre></div></li><li><p>IntelliJ IDEA에서 <code>iosApp/Configuration/Config.xcconfig</code> 파일을 열고 Team ID를 지정합니다.</p></li></ol><p>다른 방법으로, Xcode에서 팀을 선택하십시오:</p><ol><li><p>Xcode로 이동하여 <strong>Open a project or file</strong>을 선택합니다.</p></li><li><p>프로젝트의 <code>iosApp/iosApp.xcworkspace</code> 파일로 이동합니다.</p></li><li><p>왼쪽 메뉴에서 <code>iosApp</code>을 선택합니다.</p></li><li><p><strong>Signing &amp; Capabilities</strong>로 이동합니다.</p></li><li><p><strong>Team</strong> 목록에서 팀을 선택합니다.</p><p>아직 팀을 설정하지 않았다면, <strong>Team</strong> 목록에서 <strong>Add an Account</strong> 옵션을 사용하고 Xcode 지침을 따르십시오.</p></li><li><p>번들 식별자가 고유하고 서명 인증서가 성공적으로 할당되었는지 확인하십시오.</p></li></ol><h5 id="앱-실행" tabindex="-1">앱 실행 <a class="header-anchor" href="#앱-실행" aria-label="Permalink to &quot;앱 실행&quot;">​</a></h5><p>케이블을 사용하여 iPhone을 연결합니다. Xcode에 기기가 이미 등록되어 있다면, IntelliJ IDEA는 해당 기기를 실행 구성 목록에 보여줄 것입니다. 해당 <code>iosApp</code> 구성을 실행합니다.</p><p>Xcode에 iPhone을 아직 등록하지 않았다면, <a href="https://developer.apple.com/documentation/xcode/running-your-app-in-simulator-or-on-a-device/" target="_blank" rel="noreferrer">Apple 권장 사항</a>을 따르십시오. 간단히 말해, 다음을 수행해야 합니다:</p><ol><li>케이블을 사용하여 iPhone을 연결합니다.</li><li>iPhone에서 <strong>Settings</strong> | <strong>Privacy &amp; Security</strong>에서 개발자 모드를 활성화합니다.</li><li>Xcode에서 상단 메뉴로 이동하여 <strong>Window</strong> | <strong>Devices and Simulators</strong>를 선택합니다.</li><li>더하기 기호를 클릭합니다. 연결된 iPhone을 선택하고 <strong>Add</strong>를 클릭합니다.</li><li>Apple ID로 로그인하여 기기에서 개발 기능을 활성화합니다.</li><li>페어링 프로세스를 완료하려면 화면의 지침을 따릅니다.</li></ol><p>Xcode에 iPhone을 등록한 후, IntelliJ IDEA에서 <a href="#run-on-a-new-ios-simulated-device">새 실행 구성을 생성하고</a> <strong>Execution target</strong> 목록에서 기기를 선택합니다. 해당 <code>iosApp</code> 구성을 실행합니다.</p><h2 id="다음-단계" tabindex="-1">다음 단계 <a class="header-anchor" href="#다음-단계" aria-label="Permalink to &quot;다음 단계&quot;">​</a></h2><p>튜토리얼의 다음 부분에서는 플랫폼별 라이브러리를 사용하여 UI 요소를 업데이트하는 방법을 배웁니다.</p><p><strong><a href="./multiplatform-update-ui">다음 부분으로 진행</a></strong></p><h3 id="참고-항목" tabindex="-1">참고 항목 <a class="header-anchor" href="#참고-항목" aria-label="Permalink to &quot;참고 항목&quot;">​</a></h3><ul><li>코드가 올바르게 작동하는지 확인하기 위해 <a href="./multiplatform-run-tests">멀티플랫폼 테스트를 생성하고 실행하는 방법</a>을 알아보십시오.</li><li><a href="./multiplatform-discover-project">프로젝트 구조</a>에 대해 자세히 알아보십시오.</li><li>기존 Android 프로젝트를 크로스 플랫폼 앱으로 변환하려면 <a href="./multiplatform-integrate-in-existing-app">Android 앱을 크로스 플랫폼으로 만드는 이 튜토리얼을 완료하십시오</a>.</li></ul><h2 id="도움-받기" tabindex="-1">도움 받기 <a class="header-anchor" href="#도움-받기" aria-label="Permalink to &quot;도움 받기&quot;">​</a></h2><ul><li><strong>Kotlin Slack</strong>. <a href="https://surveys.jetbrains.com/s3/kotlin-slack-sign-up" target="_blank" rel="noreferrer">초대</a>를 받고 <a href="https://kotlinlang.slack.com/archives/C3PQML5NU" target="_blank" rel="noreferrer">#multiplatform</a> 채널에 참여하십시오.</li><li><strong>Kotlin 이슈 트래커</strong>. <a href="https://youtrack.jetbrains.com/newIssue?project=KT" target="_blank" rel="noreferrer">새 이슈를 보고하십시오</a>.</li></ul>`,19))])}const G=v(P,[["render",I]]);export{V as __pageData,G as default};
