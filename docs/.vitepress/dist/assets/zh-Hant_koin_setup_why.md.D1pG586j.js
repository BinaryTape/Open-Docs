import{_ as s,c as a,o as n,ag as l}from"./chunks/framework.Bksy39di.js";const c=JSON.parse('{"title":"為何選擇 Koin？","description":"","frontmatter":{"title":"為何選擇 Koin？"},"headers":[],"relativePath":"zh-Hant/koin/setup/why.md","filePath":"zh-Hant/koin/setup/why.md","lastUpdated":1748365453000}'),t={name:"zh-Hant/koin/setup/why.md"};function e(p,i,h,o,k,r){return n(),a("div",null,i[0]||(i[0]=[l(`<h1 id="為何選擇-koin" tabindex="-1">為何選擇 Koin？ <a class="header-anchor" href="#為何選擇-koin" aria-label="Permalink to &quot;為何選擇 Koin？&quot;">​</a></h1><p>Koin 提供了一種簡便高效的方式，將依賴注入 (Dependency Injection) 整合到任何 Kotlin 應用程式中（多平台、Android、後端等）。</p><p>Koin 的目標是：</p><ul><li>透過智慧型 API 簡化您的依賴注入基礎設施</li><li>Kotlin DSL 易於閱讀、易於使用，讓您能夠編寫任何類型的應用程式</li><li>提供多種整合方式，從 Android 生態系統到 Ktor 等後端需求</li><li>支援使用註解 (annotations)</li></ul><h2 id="koin-簡而言之" tabindex="-1">Koin 簡而言之 <a class="header-anchor" href="#koin-簡而言之" aria-label="Permalink to &quot;Koin 簡而言之&quot;">​</a></h2><h3 id="讓您的-kotlin-開發變得簡單高效" tabindex="-1">讓您的 Kotlin 開發變得簡單高效 <a class="header-anchor" href="#讓您的-kotlin-開發變得簡單高效" aria-label="Permalink to &quot;讓您的 Kotlin 開發變得簡單高效&quot;">​</a></h3><p>Koin 是一個智慧型的 Kotlin 依賴注入函式庫，讓您專注於應用程式本身，而非工具。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyRepository</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyPresenter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> repository : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyRepository</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// just declare it</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myModule </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  singleOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyPresenter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  singleOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyRepository</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Koin 為您提供簡單的工具和 API，讓您能夠建構、組裝 Kotlin 相關技術到您的應用程式中，並輕鬆擴展您的業務。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Just start Koin</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  startKoin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    modules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myModule)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="為-android-做好準備" tabindex="-1">為 Android 做好準備 <a class="header-anchor" href="#為-android-做好準備" aria-label="Permalink to &quot;為 Android 做好準備&quot;">​</a></h3><p>歸功於 Kotlin 語言，Koin 擴展了 Android 平台，並作為原始平台的一部分提供了新功能。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyApplication</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onCreate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onCreate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    startKoin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      modules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myModule)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Koin 提供簡單而強大的 API，讓您只需使用 <code>by inject()</code> 或 <code>by viewModel()</code> 即可在 Android 元件中的任何位置檢索您的依賴。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyActivity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AppCompatActivity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myPresenter : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyPresenter</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> inject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="驅動-kotlin-多平台" tabindex="-1">驅動 Kotlin 多平台 <a class="header-anchor" href="#驅動-kotlin-多平台" aria-label="Permalink to &quot;驅動 Kotlin 多平台&quot;">​</a></h3><p>在行動平台之間共享程式碼是 Kotlin 多平台 (Kotlin Multiplatform) 的主要用例之一。透過 Kotlin Multiplatform Mobile，您可以建構跨平台行動應用程式，並在 Android 和 iOS 之間共享通用程式碼。</p><p>Koin 提供多平台依賴注入，並幫助您在原生行動應用程式以及網路/後端應用程式中建構您的元件。</p><h3 id="效能與生產力" tabindex="-1">效能與生產力 <a class="header-anchor" href="#效能與生產力" aria-label="Permalink to &quot;效能與生產力&quot;">​</a></h3><p>Koin 是一個純 Kotlin 框架，在使用和執行方面都設計得直接了當。它易於使用，不會影響您的編譯時間，也不需要任何額外的外掛程式配置。</p><h2 id="koin-一個依賴注入框架" tabindex="-1">Koin：一個依賴注入框架 <a class="header-anchor" href="#koin-一個依賴注入框架" aria-label="Permalink to &quot;Koin：一個依賴注入框架&quot;">​</a></h2><p>Koin 是一個受歡迎的 Kotlin 依賴注入 (DI) 框架，它提供了一個現代且輕量級的解決方案，用於管理應用程式的依賴，且只需最少的樣板程式碼。</p><h3 id="依賴注入-vs-服務定位器" tabindex="-1">依賴注入 vs. 服務定位器 <a class="header-anchor" href="#依賴注入-vs-服務定位器" aria-label="Permalink to &quot;依賴注入 vs. 服務定位器&quot;">​</a></h3><p>雖然 Koin 可能看起來與服務定位器 (Service Locator) 模式相似，但它有一些關鍵區別：</p><ul><li><p>服務定位器：服務定位器本質上是一個可用服務的註冊表，您可以在需要時請求服務的實例。它負責建立和管理這些實例，通常使用靜態的全域註冊表。</p></li><li><p>依賴注入：相反，Koin 是一個純粹的依賴注入框架。透過 Koin，您可以在模組中宣告您的依賴，Koin 則處理物件的建立和連結。它允許建立多個獨立模組，每個模組都有自己的作用域 (scopes)，從而使依賴管理更具模組化，並避免潛在的衝突。</p></li></ul><h3 id="koin-的方法-彈性與最佳實踐的結合" tabindex="-1">Koin 的方法：彈性與最佳實踐的結合 <a class="header-anchor" href="#koin-的方法-彈性與最佳實踐的結合" aria-label="Permalink to &quot;Koin 的方法：彈性與最佳實踐的結合&quot;">​</a></h3><p>Koin 支援 DI 和服務定位器模式，為開發人員提供了彈性。然而，它強烈鼓勵使用 DI，特別是建構子注入 (constructor injection)，其中依賴作為建構子參數傳遞。這種方法提升了可測試性 (testability)，並使您的程式碼更容易理解。</p><p>Koin 的設計理念以簡潔和易於設定為中心，同時在必要時允許複雜的配置。透過使用 Koin，開發人員可以有效地管理依賴，其中 DI 是大多數情境下推薦且首選的方法。</p><h3 id="透明度與設計概述" tabindex="-1">透明度與設計概述 <a class="header-anchor" href="#透明度與設計概述" aria-label="Permalink to &quot;透明度與設計概述&quot;">​</a></h3><p>Koin 被設計為一個多功能的控制反轉 (Inversion of Control, IoC) 容器，同時支援依賴注入 (DI) 和服務定位器 (SL) 模式。為了讓您清晰地理解 Koin 的運作方式並指導您有效地使用它，讓我們探討以下幾個方面：</p><h4 id="koin-如何平衡-di-和-sl" tabindex="-1">Koin 如何平衡 DI 和 SL <a class="header-anchor" href="#koin-如何平衡-di-和-sl" aria-label="Permalink to &quot;Koin 如何平衡 DI 和 SL&quot;">​</a></h4><p>Koin 結合了 DI 和 SL 的元素，這可能會影響您使用該框架的方式：</p><ol><li><p><strong>全域上下文使用：</strong> 預設情況下，Koin 提供一個全域可存取的元件，其作用類似於服務定位器。這讓您可以使用 <code>KoinComponent</code> 或 <code>inject</code> 函數從中央註冊表中檢索依賴。</p></li><li><p><strong>獨立元件：</strong> 儘管 Koin 鼓勵使用依賴注入，特別是建構子注入，但它也允許獨立元件。這種彈性意味著您可以將應用程式配置為在最有意義的地方使用 DI，同時仍可利用 SL 處理特定情境。</p></li><li><p><strong>Android 元件中的 SL：</strong> 在 Android 開發中，Koin 為了方便設定，經常在 <code>Application</code> 和 <code>Activity</code> 等元件內部使用 SL。從這一點來看，Koin 推薦使用 DI，特別是建構子注入，以更結構化的方式管理依賴。然而，這並非強制性，開發人員仍可根據需要靈活使用 SL。</p></li></ol><h4 id="這對您為何重要" tabindex="-1">這對您為何重要 <a class="header-anchor" href="#這對您為何重要" aria-label="Permalink to &quot;這對您為何重要&quot;">​</a></h4><p>理解 DI 和 SL 之間的區別有助於有效管理應用程式的依賴：</p><ul><li><p><strong>依賴注入：</strong> Koin 鼓勵使用它，因為它在可測試性和可維護性方面具有優勢。建構子注入是首選，因為它使依賴關係明確，並增強程式碼清晰度。</p></li><li><p><strong>服務定位器：</strong> 雖然 Koin 支援 SL 以提供便利性，尤其是在 Android 元件中，但僅依賴 SL 可能會導致更緊密的耦合和可測試性降低。Koin 的設計提供了一種平衡的方法，允許您在實用時使用 SL，但將 DI 推廣為最佳實踐。</p></li></ul><h4 id="充分利用-koin" tabindex="-1">充分利用 Koin <a class="header-anchor" href="#充分利用-koin" aria-label="Permalink to &quot;充分利用 Koin&quot;">​</a></h4><p>為了有效使用 Koin：</p><ul><li><p><strong>遵循最佳實踐：</strong> 在可能的情況下使用建構子注入，以符合依賴管理的最佳實踐。這種方法可以提高可測試性和可維護性。</p></li><li><p><strong>利用 Koin 的彈性：</strong> 在簡化設定的情境中利用 Koin 對 SL 的支援，但應以 DI 為核心應用程式依賴的管理方式。</p></li><li><p><strong>參考文件與範例：</strong> 查閱 Koin 的文件和範例，了解如何根據專案需求適當地配置和使用 DI 和 SL。</p></li><li><p><strong>視覺化依賴管理：</strong> 圖表和範例可以幫助闡明 Koin 如何解析依賴並在不同上下文中管理它們。這些視覺輔助工具可以提供對 Koin 內部運作方式更清晰的理解。</p></li></ul><blockquote><p>透過提供這些指導，我們旨在幫助您有效掌握 Koin 的功能和設計選擇，確保您能充分發揮其潛力，同時遵循依賴管理的最佳實踐。</p></blockquote>`,40)]))}const E=s(t,[["render",e]]);export{c as __pageData,E as default};
