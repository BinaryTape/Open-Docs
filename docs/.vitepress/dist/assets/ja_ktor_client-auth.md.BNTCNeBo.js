import{_ as E,C as a,c as y,o as b,G as s,ag as h,j as e,w as t,a as n}from"./chunks/framework.Bksy39di.js";const T=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ja/ktor/client-auth.md","filePath":"ja/ktor/client-auth.md","lastUpdated":1755457140000}'),_={name:"ja/ktor/client-auth.md"};function m(f,i,F,v,A,C){const o=a("TopicTitle"),r=a("show-structure"),k=a("primary-label"),d=a("tldr"),c=a("link-summary"),l=a("code-block"),p=a("TabItem"),u=a("Tabs"),g=a("Links");return b(),y("div",null,[s(o,{labelRef:"client-plugin",title:"Ktor Clientにおける認証と認可"}),s(r,{for:"chapter",depth:"2"}),s(k,{ref:"client-plugin"},null,512),s(d,null,{default:t(()=>i[0]||(i[0]=[e("p",null,[e("b",null,"必須の依存関係"),n(": "),e("code",null,"io.ktor:ktor-client-auth")],-1)])),_:1}),s(c,null,{default:t(()=>i[1]||(i[1]=[n(" Authプラグインは、クライアントアプリケーションにおける認証と認可を処理します。 ")])),_:1}),i[5]||(i[5]=h('<p>Ktorは、クライアントアプリケーションにおける認証と認可を処理するための<a href="https://api.ktor.io/ktor-client/ktor-client-plugins/ktor-client-auth/io.ktor.client.plugins.auth/-auth" target="_blank" rel="noreferrer">Auth</a>プラグインを提供します。典型的な使用シナリオには、ユーザーのログインや、特定のリソースへのアクセス権の取得が含まれます。</p><blockquote><p>サーバー側では、Ktorは認証と認可を処理するための<a href="./server-auth">Authentication</a>プラグインを提供しています。</p></blockquote><h2 id="supported" tabindex="-1">サポートされている認証タイプ <a class="header-anchor" href="#supported" aria-label="Permalink to &quot;サポートされている認証タイプ {id=&quot;supported&quot;}&quot;">​</a></h2><p>HTTPは、アクセス制御と認証のための<a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication" target="_blank" rel="noreferrer">一般的なフレームワーク</a>を提供しています。Ktorクライアントでは、以下のHTTP認証スキームを使用できます。</p><ul><li><a href="./client-basic-auth">Basic</a> - <code>Base64</code>エンコーディングを使用してユーザー名とパスワードを提供します。HTTPSと組み合わせて使用しない限り、一般的に推奨されません。</li><li><a href="./client-digest-auth">Digest</a> - ユーザー名とパスワードにハッシュ関数を適用することで、暗号化された形式でユーザー認証情報を通信する認証方法です。</li><li><a href="./client-bearer-auth">Bearer</a> - ベアラートークンと呼ばれるセキュリティトークンを使用する認証スキームです。例えば、OAuthフローの一部としてこのスキームを使用して、Google、Facebook、Twitterなどの外部プロバイダーを利用してアプリケーションのユーザーを認可できます。</li></ul><h2 id="add_dependencies" tabindex="-1">依存関係の追加 <a class="header-anchor" href="#add_dependencies" aria-label="Permalink to &quot;依存関係の追加 {id=&quot;add_dependencies&quot;}&quot;">​</a></h2><p>認証を有効にするには、ビルドスクリプトに<code>ktor-client-auth</code>アーティファクトを含める必要があります。</p>',7)),s(u,{group:"languages"},{default:t(()=>[s(p,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:t(()=>[s(l,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-client-auth:$ktor_version")'})]),_:1}),s(p,{title:"Gradle (Groovy)","group-key":"groovy"},{default:t(()=>[s(l,{lang:"Groovy",code:'            implementation "io.ktor:ktor-client-auth:$ktor_version"'})]),_:1}),s(p,{title:"Maven","group-key":"maven"},{default:t(()=>[s(l,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-client-auth-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),e("p",null,[i[3]||(i[3]=n(" Ktorクライアントに必要なアーティファクトの詳細については、")),s(g,{href:"/ktor/client-dependencies",summary:"既存のプロジェクトにクライアントの依存関係を追加する方法を学びます。"},{default:t(()=>i[2]||(i[2]=[n("クライアントの依存関係の追加")])),_:1}),i[4]||(i[4]=n("を参照してください。 "))]),i[6]||(i[6]=h(`<h2 id="install_plugin" tabindex="-1">Authのインストール <a class="header-anchor" href="#install_plugin" aria-label="Permalink to &quot;Authのインストール {id=&quot;install_plugin&quot;}&quot;">​</a></h2><p><code>Auth</code>プラグインをインストールするには、<a href="./client-create-and-configure#configure-client">クライアント設定ブロック</a>内で<code>install</code>関数に渡します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.engine.cio.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.plugins.auth.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Auth) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 認証を設定</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>これで、必要な認証プロバイダーを<a href="#configure_authentication">設定</a>できます。</p><h2 id="configure_authentication" tabindex="-1">認証の設定 <a class="header-anchor" href="#configure_authentication" aria-label="Permalink to &quot;認証の設定 {id=&quot;configure_authentication&quot;}&quot;">​</a></h2><h3 id="choose-provider" tabindex="-1">ステップ1：認証プロバイダーの選択 <a class="header-anchor" href="#choose-provider" aria-label="Permalink to &quot;ステップ1：認証プロバイダーの選択 {id=&quot;choose-provider&quot;}&quot;">​</a></h3><p>特定の認証プロバイダー（<a href="./client-basic-auth">basic</a>、<a href="./client-digest-auth">digest</a>、または<a href="./client-bearer-auth">bearer</a>）を使用するには、<code>install</code>ブロック内で対応する関数を呼び出す必要があります。例えば、<code>basic</code>認証を使用するには、<a href="https://api.ktor.io/ktor-client/ktor-client-plugins/ktor-client-auth/io.ktor.client.plugins.auth.providers/basic.html" target="_blank" rel="noreferrer">basic</a>関数を呼び出します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Auth) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    basic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Basic認証を設定</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>このブロック内で、このプロバイダーに固有の設定を行うことができます。</p><h3 id="realm" tabindex="-1">ステップ2：（オプション）レルムの設定 <a class="header-anchor" href="#realm" aria-label="Permalink to &quot;ステップ2：（オプション）レルムの設定 {id=&quot;realm&quot;}&quot;">​</a></h3><p>オプションとして、<code>realm</code>プロパティを使用してレルムを設定できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Auth) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    basic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        realm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Access to the &#39;/&#39; path&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>異なるリソースにアクセスするために、異なるレルムを持つ複数のプロバイダーを作成できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Auth) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    basic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        realm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Access to the &#39;/&#39; path&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    basic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        realm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Access to the &#39;/admin&#39; path&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>この場合、クライアントは<code>WWW-Authenticate</code>レスポンスヘッダー（レルムが含まれています）に基づいて必要なプロバイダーを選択します。</p><h3 id="configure-provider" tabindex="-1">ステップ3：プロバイダーの設定 <a class="header-anchor" href="#configure-provider" aria-label="Permalink to &quot;ステップ3：プロバイダーの設定 {id=&quot;configure-provider&quot;}&quot;">​</a></h3><p>特定の<a href="#supported">プロバイダー</a>の設定方法については、以下の対応するトピックを参照してください。</p><ul><li><a href="./client-basic-auth">Ktor ClientにおけるBasic認証</a></li><li><a href="./client-digest-auth">Ktor ClientにおけるDigest認証</a></li><li><a href="./client-bearer-auth">Ktor ClientにおけるBearer認証</a></li></ul>`,18))])}const B=E(_,[["render",m]]);export{T as __pageData,B as default};
