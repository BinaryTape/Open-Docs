import{_ as k,C as n,c,o as g,j as a,G as i,ag as o,a as s,w as t}from"./chunks/framework.Bksy39di.js";const C=JSON.parse('{"title":"실행","description":"","frontmatter":{},"headers":[],"relativePath":"ko/ktor/server-run.md","filePath":"ko/ktor/server-run.md","lastUpdated":1755457140000}'),u={name:"ko/ktor/server-run.md"};function E(v,e,m,y,f,b){const h=n("show-structure"),d=n("link-summary"),r=n("TabItem"),l=n("code-block"),p=n("Tabs");return g(),c("div",null,[e[4]||(e[4]=a("h1",{id:"실행",tabindex:"-1"},[s("실행 "),a("a",{class:"header-anchor",href:"#실행","aria-label":'Permalink to "실행"'},"​")],-1)),i(h,{for:"chapter",depth:"2"}),i(d,null,{default:t(()=>e[0]||(e[0]=[s(" Ktor 서버 애플리케이션을 실행하는 방법을 알아보세요. ")])),_:1}),e[5]||(e[5]=o('<p>Ktor 서버 애플리케이션을 실행할 때 다음 세부 사항을 고려해야 합니다:</p><ul><li><a href="./server-create-and-configure">서버를 생성하는</a> 방식은 <a href="#package">패키징된 Ktor 애플리케이션</a>을 실행할 때 명령줄 인수를 전달하여 서버 파라미터를 재정의할 수 있는지 여부에 영향을 미칩니다.</li><li>Gradle/Maven 빌드 스크립트는 <a href="./server-create-and-configure#engine-main">EngineMain</a>을 사용하여 서버를 시작할 때 메인 클래스 이름을 지정해야 합니다.</li><li><a href="./server-war">서블릿 컨테이너</a> 내부에서 애플리케이션을 실행하려면 특정 서블릿 구성이 필요합니다.</li></ul><p>이 토픽에서는 이러한 구성 세부 사항을 살펴보고 IntelliJ IDEA 및 패키징된 애플리케이션으로 Ktor 애플리케이션을 실행하는 방법을 보여드리겠습니다.</p><h2 id="specifics" tabindex="-1">구성 세부 사항 <a class="header-anchor" href="#specifics" aria-label="Permalink to &quot;구성 세부 사항 {id=&quot;specifics&quot;}&quot;">​</a></h2><h3 id="code-vs-config" tabindex="-1">구성: 코드 vs 구성 파일 <a class="header-anchor" href="#code-vs-config" aria-label="Permalink to &quot;구성: 코드 vs 구성 파일 {id=&quot;code-vs-config&quot;}&quot;">​</a></h3><p>Ktor 애플리케이션 실행은 <a href="./server-create-and-configure">서버를 생성하는</a> 데 사용한 방식, 즉 <code>embeddedServer</code> 또는 <code>EngineMain</code>에 따라 달라집니다.</p><ul><li><code>embeddedServer</code>의 경우, 서버 파라미터(예: 호스트 주소 및 포트)는 코드에 구성되므로 애플리케이션 실행 시 이 파라미터들을 변경할 수 없습니다.</li><li><code>EngineMain</code>의 경우, Ktor는 <code>HOCON</code> 또는 <code>YAML</code> 형식을 사용하는 외부 파일에서 구성을 로드합니다. 이 방식을 사용하면 명령줄에서 <a href="#package">패키징된 애플리케이션</a>을 실행하고 해당 <a href="./server-configuration-file#command-line">명령줄 인수</a>를 전달하여 필요한 서버 파라미터를 재정의할 수 있습니다.</li></ul><h3 id="gradle-maven" tabindex="-1">EngineMain 시작: Gradle 및 Maven 세부 사항 <a class="header-anchor" href="#gradle-maven" aria-label="Permalink to &quot;EngineMain 시작: Gradle 및 Maven 세부 사항 {id=&quot;gradle-maven&quot;}&quot;">​</a></h3><p><code>EngineMain</code>을 사용하여 서버를 생성하는 경우, 원하는 <a href="./server-engines">엔진</a>으로 서버를 시작하기 위한 <code>main</code> 함수를 지정해야 합니다. 아래 <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/engine-main" target="_blank" rel="noreferrer">예시</a>는 Netty 엔진으로 서버를 실행하는 데 사용되는 <code>main</code> 함수를 보여줍니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Unit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> io.ktor.server.netty.EngineMain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args)</span></span></code></pre></div><p><code>main</code> 함수 내에서 엔진을 구성하지 않고 Gradle/Maven을 사용하여 Ktor 서버를 실행하려면 빌드 스크립트에서 다음과 같이 메인 클래스 이름을 지정해야 합니다.</p>',11)),i(r,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:t(()=>e[1]||(e[1]=[a("div",{class:"language-kotlin vp-adaptive-theme"},[a("button",{title:"Copy Code",class:"copy"}),a("span",{class:"lang"},"kotlin"),a("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[a("code",null,[a("span",{class:"line"},[a("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"application"),a("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),a("span",{class:"line"},[a("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    mainClass."),a("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"set"),a("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),a("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"io.ktor.server.netty.EngineMain"'),a("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),s(`
`),a("span",{class:"line"},[a("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),i(r,{title:"Gradle (Groovy)","group-key":"groovy"},{default:t(()=>e[2]||(e[2]=[a("div",{class:"language-groovy vp-adaptive-theme"},[a("button",{title:"Copy Code",class:"copy"}),a("span",{class:"lang"},"groovy"),a("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[a("code",null,[a("span",{class:"line"},[a("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"mainClassName "),a("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),a("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "io.ktor.server.netty.EngineMain"')])])])],-1)])),_:1}),i(r,{title:"Maven","group-key":"maven"},{default:t(()=>e[3]||(e[3]=[a("div",{class:"language-xml vp-adaptive-theme"},[a("button",{title:"Copy Code",class:"copy"}),a("span",{class:"lang"},"xml"),a("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[a("code",null,[a("span",{class:"line"},[a("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),a("span",{style:{"--shiki-light":"#22863A","--shiki-dark":"#85E89D"}},"properties"),a("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},">")]),s(`
`),a("span",{class:"line"},[a("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    <"),a("span",{style:{"--shiki-light":"#22863A","--shiki-dark":"#85E89D"}},"main.class"),a("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},">io.ktor.server.netty.EngineMain</"),a("span",{style:{"--shiki-light":"#22863A","--shiki-dark":"#85E89D"}},"main.class"),a("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},">")]),s(`
`),a("span",{class:"line"},[a("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"</"),a("span",{style:{"--shiki-light":"#22863A","--shiki-dark":"#85E89D"}},"properties"),a("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},">")])])])],-1)])),_:1}),e[6]||(e[6]=o('<h3 id="war-세부-사항" tabindex="-1">WAR 세부 사항 <a class="header-anchor" href="#war-세부-사항" aria-label="Permalink to &quot;WAR 세부 사항&quot;">​</a></h3><p>Ktor를 사용하면 애플리케이션 내에서 원하는 엔진(예: Netty, Jetty, Tomcat)으로 <a href="./server-create-and-configure">서버를 생성하고 시작</a>할 수 있습니다. 이 경우, 애플리케이션이 엔진 설정, 연결 및 SSL 옵션을 제어합니다.</p><p>이 방식과 달리 서블릿 컨테이너는 애플리케이션 라이프사이클 및 연결 설정을 제어해야 합니다. Ktor는 애플리케이션 제어권을 서블릿 컨테이너에 위임하는 특별한 <code>ServletApplicationEngine</code> 엔진을 제공합니다. 애플리케이션을 구성하는 방법은 <a href="./server-war#configure-war">War 구성</a>에서 확인할 수 있습니다.</p><h2 id="run" tabindex="-1">애플리케이션 실행 <a class="header-anchor" href="#run" aria-label="Permalink to &quot;애플리케이션 실행 {id=&quot;run&quot;}&quot;">​</a></h2><blockquote><p>개발 중에 서버를 재시작하는 데 시간이 걸릴 수 있습니다. Ktor는 코드 변경 시 애플리케이션 클래스를 다시 로드하고 빠른 피드백 루프를 제공하는 <a href="./server-auto-reload">자동 재로드(Auto-reload)</a>를 사용하여 이러한 제한을 극복할 수 있도록 합니다.</p></blockquote><h3 id="gradle-maven-run" tabindex="-1">Gradle/Maven을 사용하여 애플리케이션 실행 <a class="header-anchor" href="#gradle-maven-run" aria-label="Permalink to &quot;Gradle/Maven을 사용하여 애플리케이션 실행 {id=&quot;gradle-maven-run&quot;}&quot;">​</a></h3><p>Gradle 또는 Maven을 사용하여 Ktor 애플리케이션을 실행하려면 해당 플러그인을 사용하세요.</p><ul><li>Gradle용 <a href="./server-packaging">Application</a> 플러그인. <a href="./server-native">네이티브 서버(Native server)</a>의 경우, <a href="https://plugins.gradle.org/plugin/org.jetbrains.kotlin.multiplatform" target="_blank" rel="noreferrer">Kotlin Multiplatform</a> 플러그인을 사용하세요.</li><li>Maven용 <a href="https://www.mojohaus.org/exec-maven-plugin/" target="_blank" rel="noreferrer">Exec</a> 플러그인.</li></ul><blockquote><p>IntelliJ IDEA에서 Ktor 애플리케이션을 실행하는 방법을 알아보려면 IntelliJ IDEA 문서의 <a href="https://www.jetbrains.com/help/idea/ktor.html#run_ktor_app" target="_blank" rel="noreferrer">Ktor 애플리케이션 실행</a> 섹션을 참조하세요.</p></blockquote><h3 id="package" tabindex="-1">패키징된 애플리케이션 실행 <a class="header-anchor" href="#package" aria-label="Permalink to &quot;패키징된 애플리케이션 실행 {id=&quot;package&quot;}&quot;">​</a></h3><p>애플리케이션을 배포하기 전에 <a href="./server-deployment#packaging">패키징</a> 섹션에 설명된 방법 중 하나로 패키징해야 합니다. 결과 패키지에서 Ktor 애플리케이션을 실행하는 것은 패키지 유형에 따라 다르며 다음과 같을 수 있습니다.</p><ul><li>구성된 포트를 재정의하여 단일 JAR(fat JAR)로 패키징된 Ktor 서버를 실행하려면 다음 명령을 실행하세요.</li></ul><div class="language-Bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">java</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -jar</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> sample-app.jar</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -port=8080</span></span></code></pre></div><ul><li>Gradle <a href="./server-packaging">Application</a> 플러그인을 사용하여 패키징된 애플리케이션을 실행하려면 해당 실행 파일을 실행하세요.</li></ul>',14)),i(p,{group:"os"},{default:t(()=>[i(r,{title:"Linux/macOS","group-key":"unix"},{default:t(()=>[i(l,{code:"./ktor-sample"})]),_:1}),i(r,{title:"Windows","group-key":"windows"},{default:t(()=>[i(l,{code:"ktor-sample.bat"})]),_:1})]),_:1}),e[7]||(e[7]=a("ul",null,[a("li",null,[s("서블릿 Ktor 애플리케이션을 실행하려면 "),a("a",{href:"./server-war#run"},"Gretty"),s(" 플러그인의 "),a("code",null,"run"),s(" 태스크를 사용하세요.")])],-1))])}const F=k(u,[["render",E]]);export{C as __pageData,F as default};
