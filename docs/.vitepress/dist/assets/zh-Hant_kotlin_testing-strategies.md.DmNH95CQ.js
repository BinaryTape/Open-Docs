import{_ as p}from"./chunks/counter-stress.dAkLADVR.js";import{_ as l,c as t,o as h,ag as i,j as s,a as n}from"./chunks/framework.Bksy39di.js";const F=JSON.parse('{"title":"壓力測試與模型檢查","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/testing-strategies.md","filePath":"zh-Hant/kotlin/testing-strategies.md","lastUpdated":1754307826000}'),e={name:"zh-Hant/kotlin/testing-strategies.md"};function k(r,a,d,c,g,E){return h(),t("div",null,a[0]||(a[0]=[i(`<h1 id="壓力測試與模型檢查" tabindex="-1">壓力測試與模型檢查 <a class="header-anchor" href="#壓力測試與模型檢查" aria-label="Permalink to &quot;壓力測試與模型檢查&quot;">​</a></h1><p>Lincheck 提供兩種測試策略：壓力測試和模型檢查。使用我們在 <a href="/zh-Hant/kotlin/introduction">上一步</a> 的 <code>BasicCounterTest.kt</code> 檔案中編寫的 <code>Counter</code>，了解這兩種方法在底層是如何運作的：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Counter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @Volatile</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> inc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ++value</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="壓力測試" tabindex="-1">壓力測試 <a class="header-anchor" href="#壓力測試" aria-label="Permalink to &quot;壓力測試&quot;">​</a></h2><h3 id="編寫壓力測試" tabindex="-1">編寫壓力測試 <a class="header-anchor" href="#編寫壓力測試" aria-label="Permalink to &quot;編寫壓力測試&quot;">​</a></h3><p>按照以下步驟，為 <code>Counter</code> 建立一個並發壓力測試：</p><ol><li>建立 <code>CounterTest</code> 類別。</li><li>在此類別中，新增 <code>Counter</code> 類型的欄位 <code>c</code>，並在建構函式中建立一個實例。</li><li>列出計數器操作並使用 <code>@Operation</code> 註解標記它們，將其實作委派給 <code>c</code>。</li><li>使用 <code>StressOptions()</code> 指定壓力測試策略。</li><li>呼叫 <code>StressOptions.check()</code> 函數以執行測試。</li></ol><p>最終程式碼將如下所示：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.lincheck.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.lincheck.datastructures.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.junit.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CounterTest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Counter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 初始狀態</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 對 Counter 的操作</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @Operation</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> inc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">inc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @Operation</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @Test</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 執行測試</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> stressTest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> StressOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">check</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,9),s("h3",{"initial-collapse-state":"collapsed",collapsible:"true",id:"壓力測試運作原理",tabindex:"-1"},[n("壓力測試運作原理 "),s("a",{class:"header-anchor",href:"#壓力測試運作原理","aria-label":'Permalink to "壓力測試運作原理 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1),i('<p>首先，Lincheck 使用標記有 <code>@Operation</code> 的操作生成一組並發情境。然後它會啟動原生執行緒，並在開始時同步它們，以確保操作同時啟動。最後，Lincheck 會在這些原生執行緒上多次執行每個情境，期望能遇到產生錯誤結果的交錯執行。</p><p>下圖顯示了 Lincheck 可能如何執行生成的情境的高階方案：</p><p><img src="'+p+`" alt="Counter 的壓力執行" width="700"></p><h2 id="模型檢查" tabindex="-1">模型檢查 <a class="header-anchor" href="#模型檢查" aria-label="Permalink to &quot;模型檢查&quot;">​</a></h2><p>關於壓力測試的主要問題是，你可能需要花費數小時來嘗試理解如何重現找到的錯誤。為了幫助你解決此問題，Lincheck 支援有界模型檢查，它會自動提供一個用於重現錯誤的交錯執行。</p><p>模型檢查測試的建構方式與壓力測試相同。只需將指定測試策略的 <code>StressOptions()</code> 替換為 <code>ModelCheckingOptions()</code> 即可。</p><h3 id="編寫模型檢查測試" tabindex="-1">編寫模型檢查測試 <a class="header-anchor" href="#編寫模型檢查測試" aria-label="Permalink to &quot;編寫模型檢查測試&quot;">​</a></h3><p>要將壓力測試策略更改為模型檢查，請在你的測試中將 <code>StressOptions()</code> 替換為 <code>ModelCheckingOptions()</code>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.lincheck.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.lincheck.datastructures.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.junit.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CounterTest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Counter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 初始狀態</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 對 Counter 的操作</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @Operation</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> inc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">inc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @Operation</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @Test</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 執行測試</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> modelCheckingTest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ModelCheckingOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">check</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,9),s("h3",{"initial-collapse-state":"collapsed",collapsible:"true",id:"模型檢查運作原理",tabindex:"-1"},[n("模型檢查運作原理 "),s("a",{class:"header-anchor",href:"#模型檢查運作原理","aria-label":'Permalink to "模型檢查運作原理 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1),i(`<p>複雜並發演算法中的大多數錯誤都可以透過經典的交錯執行來重現，即將執行從一個執行緒切換到另一個執行緒。此外，弱記憶體模型（weak memory models）的模型檢查器非常複雜，因此 Lincheck 在 <em>序列一致性記憶體模型</em> 下使用有界模型檢查。</p><p>簡而言之，Lincheck 會分析所有交錯執行，從一次上下文切換開始，然後兩次，持續這個過程直到檢查完指定數量的交錯執行。此策略允許以最少的上下文切換次數找到不正確的排程，使後續的錯誤調查更容易。</p><p>為了控制執行，Lincheck 會在測試程式碼中插入特殊的切換點 (switch points)。這些點會標識可以執行上下文切換的位置。本質上，這些是共享記憶體存取，例如 JVM 中的欄位和陣列元素讀取或更新，以及 <code>wait/notify</code> 和 <code>park/unpark</code> 呼叫。為了插入切換點，Lincheck 會使用 ASM 框架即時轉換測試程式碼，將內部函數呼叫新增到現有程式碼中。</p><p>由於模型檢查策略控制著執行，Lincheck 可以提供導致無效交錯執行的追蹤 (trace)，這在實踐中極為有用。你可以在 <a href="/zh-Hant/kotlin/introduction#trace-the-invalid-execution">使用 Lincheck 編寫你的第一個測試</a> 教學中看到 <code>Counter</code> 錯誤執行的追蹤範例。</p><h2 id="哪種測試策略更好" tabindex="-1">哪種測試策略更好？ <a class="header-anchor" href="#哪種測試策略更好" aria-label="Permalink to &quot;哪種測試策略更好？&quot;">​</a></h2><p>在序列一致性記憶體模型下，<em>模型檢查策略</em> 更適合尋找錯誤，因為它能確保更好的覆蓋率，並在發現錯誤時提供失敗的執行追蹤。</p><p>儘管 <em>壓力測試</em> 不保證任何覆蓋率，但對於檢查因低階效應（例如遺漏 <code>volatile</code> 修飾符）引入的錯誤演算法仍然很有幫助。壓力測試對於發現需要大量上下文切換才能重現的罕見錯誤也大有助益，而由於模型檢查策略的當前限制，不可能分析所有這類錯誤。</p><h2 id="設定測試策略" tabindex="-1">設定測試策略 <a class="header-anchor" href="#設定測試策略" aria-label="Permalink to &quot;設定測試策略&quot;">​</a></h2><p>若要設定測試策略，請在 <code>&lt;TestingMode&gt;Options</code> 類別中設定選項。</p><ol><li><p>為 <code>CounterTest</code> 設定情境生成和執行的選項：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.lincheck.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.lincheck.datastructures.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.junit.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CounterTest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Counter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @Operation</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> inc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">inc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @Operation</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> stressTest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> StressOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 壓力測試選項：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">actorsBefore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 並行部分之前操作的數量</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">threads</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 並行部分中的執行緒數量</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">actorsPerThread</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 並行部分中每個執行緒的操作數量</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">actorsAfter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 並行部分之後操作的數量</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">iterations</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 生成 100 個隨機並發情境</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">invocationsPerIteration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 每個生成的情境執行 1000 次</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">check</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 執行測試</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>再次執行 <code>stressTest()</code>，Lincheck 將生成類似於以下的情境：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>| ------------------- |</span></span>
<span class="line"><span>| Thread 1 | Thread 2 |</span></span>
<span class="line"><span>| ------------------- |</span></span>
<span class="line"><span>| inc()    |          |</span></span>
<span class="line"><span>| inc()    |          |</span></span>
<span class="line"><span>| ------------------- |</span></span>
<span class="line"><span>| get()    | inc()    |</span></span>
<span class="line"><span>| inc()    | get()    |</span></span>
<span class="line"><span>| ------------------- |</span></span>
<span class="line"><span>| inc()    |          |</span></span>
<span class="line"><span>| ------------------- |</span></span></code></pre></div><p>在這裡，並行部分之前有兩個操作，兩個操作各由兩個執行緒執行，之後再由一個單一操作結束。</p></li></ol><p>你可以用相同的方式設定你的模型檢查測試。</p><h2 id="情境最小化" tabindex="-1">情境最小化 <a class="header-anchor" href="#情境最小化" aria-label="Permalink to &quot;情境最小化&quot;">​</a></h2><p>你可能已經注意到，檢測到的錯誤通常以比測試配置中指定的小的情境來表示。Lincheck 會嘗試最小化錯誤，在不導致測試失敗的情況下，主動移除一個操作。</p><p>以下是上述計數器測試的最小化情境：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>= Invalid execution results =</span></span>
<span class="line"><span>| ------------------- |</span></span>
<span class="line"><span>| Thread 1 | Thread 2 |</span></span>
<span class="line"><span>| ------------------- |</span></span>
<span class="line"><span>| inc()    | inc()    |</span></span>
<span class="line"><span>| ------------------- |</span></span></code></pre></div><p>由於分析較小的情境更容易，情境最小化功能預設是啟用的。若要禁用此功能，請在 <code>[Stress, ModelChecking]Options</code> 配置中新增 <code>minimizeFailedScenario(false)</code>。</p><h2 id="記錄資料結構狀態" tabindex="-1">記錄資料結構狀態 <a class="header-anchor" href="#記錄資料結構狀態" aria-label="Permalink to &quot;記錄資料結構狀態&quot;">​</a></h2><p>另一個有用的除錯功能是 <em>狀態記錄</em>。當分析導致錯誤的交錯執行時，你通常會在紙上畫出資料結構的變化，在每個事件之後改變狀態。為了自動化此過程，你可以提供一個特殊方法，它返回資料結構的 <code>String</code> 表示，這樣 Lincheck 就會在交錯執行中修改資料結構的每個事件之後列印狀態表示。</p><p>為此，請定義一個不帶引數且標記有 <code>@StateRepresentation</code> 註解的方法。該方法應該是執行緒安全的、非阻塞的，並且永遠不會修改資料結構。</p><ol><li><p>在 <code>Counter</code> 範例中，<code>String</code> 表示只是計數器的值。因此，要在追蹤中列印計數器狀態，請將 <code>stateRepresentation()</code> 函數新增到 <code>CounterTest</code>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.lincheck.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.lincheck.datastructures.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.junit.Test</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CounterTest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Counter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @Operation</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> inc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">inc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @Operation</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @StateRepresentation</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> stateRepresentation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> modelCheckingTest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ModelCheckingOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">check</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>現在執行 <code>modelCheckingTest()</code> 並檢查在修改計數器狀態的切換點處列印的 <code>Counter</code> 狀態（它們以 <code>STATE:</code> 開頭）：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>= Invalid execution results =</span></span>
<span class="line"><span>| ------------------- |</span></span>
<span class="line"><span>| Thread 1 | Thread 2 |</span></span>
<span class="line"><span>| ------------------- |</span></span>
<span class="line"><span>| STATE: 0            |</span></span>
<span class="line"><span>| ------------------- |</span></span>
<span class="line"><span>| inc(): 1 | inc(): 1 |</span></span>
<span class="line"><span>| ------------------- |</span></span>
<span class="line"><span>| STATE: 1            |</span></span>
<span class="line"><span>| ------------------- |</span></span>
<span class="line"><span></span></span>
<span class="line"><span>The following interleaving leads to the error:</span></span>
<span class="line"><span>| -------------------------------------------------------------------- |</span></span>
<span class="line"><span>| Thread 1 |                         Thread 2                          |</span></span>
<span class="line"><span>| -------------------------------------------------------------------- |</span></span>
<span class="line"><span>|          | inc()                                                     |</span></span>
<span class="line"><span>|          |   inc(): 1 at CounterTest.inc(CounterTest.kt:10)          |</span></span>
<span class="line"><span>|          |     value.READ: 0 at Counter.inc(BasicCounterTest.kt:10)  |</span></span>
<span class="line"><span>|          |     switch                                                |</span></span>
<span class="line"><span>| inc(): 1 |                                                           |</span></span>
<span class="line"><span>| STATE: 1 |                                                           |</span></span>
<span class="line"><span>|          |     value.WRITE(1) at Counter.inc(BasicCounterTest.kt:10) |</span></span>
<span class="line"><span>|          |     STATE: 1                                              |</span></span>
<span class="line"><span>|          |     value.READ: 1 at Counter.inc(BasicCounterTest.kt:10)  |</span></span>
<span class="line"><span>|          |   result: 1                                               |</span></span>
<span class="line"><span>| -------------------------------------------------------------------- |</span></span></code></pre></div></li></ol><p>在壓力測試的情況下，Lincheck 會在情境的並行部分之前和之後，以及在結束時，列印狀態表示。</p><blockquote><ul style=""><li>取得這些範例的 <a href="https://github.com/JetBrains/lincheck/tree/master/src/jvm/test-lincheck-integration/org/jetbrains/lincheck_test/guide/CounterTest.kt" target="_blank" rel="noreferrer">完整程式碼</a></li><li>查看更多 <a href="https://github.com/JetBrains/lincheck/tree/master/src/jvm/test/org/jetbrains/lincheck_test/guide" target="_blank" rel="noreferrer">測試範例</a></li></ul></blockquote><h2 id="下一步" tabindex="-1">下一步 <a class="header-anchor" href="#下一步" aria-label="Permalink to &quot;下一步&quot;">​</a></h2><p>了解如何 <a href="/zh-Hant/kotlin/operation-arguments">設定傳遞給操作的引數</a> 以及何時可以使用它。</p>`,24)]))}const C=l(e,[["render",k]]);export{F as __pageData,C as default};
