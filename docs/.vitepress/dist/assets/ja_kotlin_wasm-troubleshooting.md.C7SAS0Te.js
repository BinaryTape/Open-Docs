import{_ as e,c as s,o as t,ag as i}from"./chunks/framework.Bksy39di.js";const d=JSON.parse('{"title":"トラブルシューティング","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/wasm-troubleshooting.md","filePath":"ja/kotlin/wasm-troubleshooting.md","lastUpdated":1754307826000}'),o={name:"ja/kotlin/wasm-troubleshooting.md"};function l(r,a,n,p,c,h){return t(),s("div",null,a[0]||(a[0]=[i(`<h1 id="トラブルシューティング" tabindex="-1">トラブルシューティング <a class="header-anchor" href="#トラブルシューティング" aria-label="Permalink to &quot;トラブルシューティング&quot;">​</a></h1><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Kotlin/Wasmは<a href="/ja/kotlin/components-stability">Alpha</a>版です。いつでも変更される可能性があります。プロダクション環境投入前のシナリオでご使用ください。 <a href="https://youtrack.jetbrains.com/issue/KT-56492" target="_blank" rel="noreferrer">YouTrack</a>でのフィードバックをお待ちしております。</p></div><p>Kotlin/Wasmは、WebAssembly内で改善と新機能を導入するために、<a href="#garbage-collection-proposal">ガベージコレクション</a>や<a href="#exception-handling-proposal">例外処理</a>のような新しい<a href="https://webassembly.org/roadmap/" target="_blank" rel="noreferrer">WebAssemblyプロポーザル</a>に依存しています。</p><p>しかし、これらの機能が適切に機能するためには、新しいプロポーザルをサポートする環境が必要です。場合によっては、プロポーザルと互換性を持たせるために環境をセットアップする必要があるかもしれません。</p><h2 id="ブラウザのバージョン" tabindex="-1">ブラウザのバージョン <a class="header-anchor" href="#ブラウザのバージョン" aria-label="Permalink to &quot;ブラウザのバージョン&quot;">​</a></h2><p>Kotlin/Wasmでビルドされたアプリケーションをブラウザで実行するには、新しい<a href="https://github.com/WebAssembly/gc" target="_blank" rel="noreferrer">WebAssemblyガベージコレクション (WasmGC) 機能</a>をサポートするブラウザバージョンが必要です。お使いのブラウザバージョンが新しいWasmGCをデフォルトでサポートしているか、または環境に変更を加える必要があるかを確認してください。</p><h3 id="chrome" tabindex="-1">Chrome <a class="header-anchor" href="#chrome" aria-label="Permalink to &quot;Chrome&quot;">​</a></h3><ul><li><p><strong>バージョン 119 以降の場合:</strong></p><p>デフォルトで動作します。</p></li><li><p><strong>以前のバージョン:</strong></p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>古いブラウザでアプリケーションを実行するには、Kotlin 1.9.20 よりも古いバージョンが必要です。</p></div><ol><li>ブラウザで、<code>chrome://flags/#enable-webassembly-garbage-collection</code> にアクセスします。</li><li><strong>WebAssembly Garbage Collection</strong> を有効にします。</li><li>ブラウザを再起動します。</li></ol></li></ul><h3 id="chromiumベース" tabindex="-1">Chromiumベース <a class="header-anchor" href="#chromiumベース" aria-label="Permalink to &quot;Chromiumベース&quot;">​</a></h3><p>Edge、Brave、Opera、Samsung Internet などのChromiumベースのブラウザが含まれます。</p><ul><li><p><strong>バージョン 119 以降の場合:</strong></p><p>デフォルトで動作します。</p></li><li><p><strong>以前のバージョン:</strong></p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>古いブラウザでアプリケーションを実行するには、Kotlin 1.9.20 よりも古いバージョンが必要です。</p></div><p>アプリケーションを <code>--js-flags=--experimental-wasm-gc</code> コマンドライン引数とともに実行します。</p></li></ul><h3 id="firefox" tabindex="-1">Firefox <a class="header-anchor" href="#firefox" aria-label="Permalink to &quot;Firefox&quot;">​</a></h3><ul><li><p><strong>バージョン 120 以降の場合:</strong></p><p>デフォルトで動作します。</p></li><li><p><strong>バージョン 119 の場合:</strong></p><ol><li>ブラウザで、<code>about:config</code> にアクセスします。</li><li><code>javascript.options.wasm_gc</code> オプションを有効にします。</li><li>ページを更新します。</li></ol></li></ul><h3 id="safari-webkit" tabindex="-1">Safari/WebKit <a class="header-anchor" href="#safari-webkit" aria-label="Permalink to &quot;Safari/WebKit&quot;">​</a></h3><ul><li><p><strong>バージョン 18.2 以降の場合:</strong></p><p>デフォルトで動作します。</p></li><li><p><strong>以前のバージョン:</strong></p><p>サポートされていません。</p></li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Safari 18.2 は、iOS 18.2、iPadOS 18.2、visionOS 2.2、macOS 15.2、macOS Sonoma、macOS Ventura で利用できます。 iOS および iPadOS では、Safari 18.2 はオペレーティングシステムにバンドルされています。入手するには、デバイスをバージョン 18.2 以降にアップデートしてください。 詳細については、<a href="https://developer.apple.com/documentation/safari-release-notes/safari-18_2-release-notes#Overview" target="_blank" rel="noreferrer">Safariリリースノート</a>を参照してください。</p></div><h2 id="wasm-プロポーザルのサポート" tabindex="-1">Wasm プロポーザルのサポート <a class="header-anchor" href="#wasm-プロポーザルのサポート" aria-label="Permalink to &quot;Wasm プロポーザルのサポート&quot;">​</a></h2><p>Kotlin/Wasmの改善は、<a href="https://webassembly.org/roadmap/" target="_blank" rel="noreferrer">WebAssemblyプロポーザル</a>に基づいています。ここでは、WebAssemblyのガベージコレクションおよび(レガシー)例外処理プロポーザルのサポートに関する詳細をご覧いただけます。</p><h3 id="ガベージコレクションプロポーザル" tabindex="-1">ガベージコレクションプロポーザル <a class="header-anchor" href="#ガベージコレクションプロポーザル" aria-label="Permalink to &quot;ガベージコレクションプロポーザル&quot;">​</a></h3><p>Kotlin 1.9.20 以降、Kotlinツールチェインは<a href="https://github.com/WebAssembly/gc" target="_blank" rel="noreferrer">Wasmガベージコレクション</a> (WasmGC) プロポーザルの最新バージョンを使用しています。</p><p>このため、Wasmプロジェクトを最新バージョンのKotlinにアップデートすることを強くお勧めします。また、Wasm環境を備えた最新バージョンのブラウザを使用することもお勧めします。</p><h3 id="例外処理プロポーザル" tabindex="-1">例外処理プロポーザル <a class="header-anchor" href="#例外処理プロポーザル" aria-label="Permalink to &quot;例外処理プロポーザル&quot;">​</a></h3><p>Kotlinツールチェインは、デフォルトで<a href="https://github.com/WebAssembly/exception-handling/blob/master/proposals/exception-handling/legacy/Exceptions.md" target="_blank" rel="noreferrer">レガシー例外処理プロポーザル</a>を使用しており、これにより生成されたWasmバイナリをより幅広い環境で実行できるようにします。</p><p>Kotlin 2.0.0 以降、Kotlin/Wasm内でWasmの<a href="https://github.com/WebAssembly/exception-handling/blob/main/proposals/exception-handling/Exceptions.md" target="_blank" rel="noreferrer">例外処理プロポーザル</a>の新しいバージョンのサポートを導入しました。</p><p>このアップデートにより、新しい例外処理プロポーザルがKotlinの要件に合致し、プロポーザルの最新バージョンのみをサポートする仮想マシン上でのKotlin/Wasmの使用を可能にします。</p><p>新しい例外処理プロポーザルは、<code>-Xwasm-use-new-exception-proposal</code> コンパイラオプションを使用してアクティブ化されます。デフォルトでは無効になっています。</p><p> </p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>プロジェクトのセットアップ、依存関係の使用、その他のタスクの詳細については、 <a href="https://github.com/Kotlin/kotlin-wasm-examples#readme" target="_blank" rel="noreferrer">Kotlin/Wasmの例</a>をご覧ください。</p></div><h2 id="デフォルトインポートの使用" tabindex="-1">デフォルトインポートの使用 <a class="header-anchor" href="#デフォルトインポートの使用" aria-label="Permalink to &quot;デフォルトインポートの使用&quot;">​</a></h2><p><a href="/ja/kotlin/wasm-js-interop">Kotlin/WasmコードのJavaScriptへのインポート</a>は、デフォルトエクスポートから名前付きエクスポートに移行しました。</p><p>引き続きデフォルトインポートを使用したい場合は、新しいJavaScriptラッパーモジュールを生成します。以下のスニペットを含む <code>.mjs</code> ファイルを作成します。</p><div class="language-Javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// メインの .mjs ファイルへのパスを指定</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> moduleExports </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;./wasm-test.mjs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { moduleExports </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span></code></pre></div><p>新しい <code>.mjs</code> ファイルをresourcesフォルダに配置すると、ビルドプロセス中にメインの <code>.mjs</code> ファイルの隣に自動的に配置されます。</p><p>また、<code>.mjs</code> ファイルをカスタムの場所に配置することもできます。この場合、メインの <code>.mjs</code> ファイルの隣に手動で移動するか、インポートステートメントのパスをその場所に合わせて調整する必要があります。</p><h2 id="kotlin-wasm-のコンパイルが遅い" tabindex="-1">Kotlin/Wasm のコンパイルが遅い <a class="header-anchor" href="#kotlin-wasm-のコンパイルが遅い" aria-label="Permalink to &quot;Kotlin/Wasm のコンパイルが遅い&quot;">​</a></h2><p>Kotlin/Wasmプロジェクトで作業していると、コンパイル時間が遅くなることがあります。これは、Kotlin/Wasmツールチェインが変更を行うたびにコードベース全体を再コンパイルするためです。</p><p>この問題を軽減するために、Kotlin/Wasmターゲットはインクリメンタルコンパイルをサポートしており、これにより最後のコンパイルからの変更に関連するファイルのみをコンパイラが再コンパイルできるようにします。</p><p>インクリメンタルコンパイルを使用すると、コンパイル時間を短縮できます。現時点では開発速度を2倍にし、今後のリリースでさらなる改善を計画しています。</p><p>現在の設定では、Wasmターゲットのインクリメンタルコンパイルはデフォルトで無効になっています。 有効にするには、プロジェクトの <code>local.properties</code> または <code>gradle.properties</code> ファイルに以下の行を追加します。</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.incremental.wasm=true</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Kotlin/Wasmのインクリメンタルコンパイルをお試しいただき、<a href="https://youtrack.jetbrains.com/issue/KT-72158/Kotlin-Wasm-incremental-compilation-feedback" target="_blank" rel="noreferrer">フィードバックを共有</a>してください。 皆様の洞察が、この機能をより早く安定させ、デフォルトで有効にするのに役立ちます。</p></div>`,41)]))}const b=e(o,[["render",l]]);export{d as __pageData,b as default};
