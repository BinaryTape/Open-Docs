import{_ as p,C as s,c as r,o,j as a,G as e,ag as t,a as h,w as k}from"./chunks/framework.Bksy39di.js";const f=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/whatsnew17.md","filePath":"ja/kotlin/whatsnew17.md","lastUpdated":1754307826000}'),d={name:"ja/kotlin/whatsnew17.md"};function c(g,i,E,u,y,b){const n=s("tldr"),l=s("YouTubeVideo");return o(),r("div",null,[i[1]||(i[1]=a("h1",{id:"kotlin-1-7-0の新機能",tabindex:"-1"},[h("Kotlin 1.7.0の新機能 "),a("a",{class:"header-anchor",href:"#kotlin-1-7-0の新機能","aria-label":'Permalink to "Kotlin 1.7.0の新機能"'},"​")],-1)),e(n,null,{default:k(()=>i[0]||(i[0]=[a("p",null,"Kotlin 1.7.0のIDEサポートは、IntelliJ IDEA 2021.2、2021.3、2022.1で利用可能です。",-1)])),_:1}),i[2]||(i[2]=t('<p><em><a href="/ja/kotlin/releases#release-details">リリース日: 2022年6月9日</a></em></p><p>Kotlin 1.7.0がリリースされました。このバージョンでは、新しいKotlin/JVM K2コンパイラのAlpha版が公開され、言語機能が安定化され、JVM、JS、Nativeプラットフォームでのパフォーマンスが向上しています。</p><p>このバージョンの主な更新点は以下の通りです。</p><ul><li><a href="#new-kotlin-k2-compiler-for-the-jvm-in-alpha">新しいKotlin K2コンパイラがAlpha版になりました</a>。大幅なパフォーマンス向上を実現します。JVMでのみ利用可能で、kaptを含むコンパイラプラグインは動作しません。</li><li><a href="#a-new-approach-to-incremental-compilation">Gradleのインクリメンタルコンパイルへの新しいアプローチ</a>。インクリメンタルコンパイルは、依存するKotlin以外のモジュール内部での変更にも対応し、Gradleと互換性があります。</li><li><a href="#stable-opt-in-requirements">オプトイン要件アノテーション</a>、<a href="#stable-definitely-non-nullable-types">null許容型でないことが保証される型</a>、<a href="#stable-builder-inference">ビルダ推論</a>が安定化されました。</li><li><a href="#underscore-operator-for-type-arguments">型引数にアンダースコア演算子が追加されました</a>。他の型が指定されている場合に、引数の型を自動的に推論するために使用できます。</li><li><a href="#allow-implementation-by-delegation-to-an-inlined-value-of-an-inline-class">このリリースでは、インラインクラスのインライン化された値へのデリゲートによる実装が可能になりました</a>。ほとんどの場合、メモリを割り当てない軽量なラッパーを作成できるようになりました。</li></ul><p>変更点の概要については、以下のビデオでもご確認いただけます。</p>',5)),e(l,{src:"https://www.youtube.com/v/54WEfLKtCGk",title:"Kotlin 1.7.0の新機能"}),i[3]||(i[3]=t(`<h2 id="jvm向け新しいkotlin-k2コンパイラのalpha版" tabindex="-1">JVM向け新しいKotlin K2コンパイラのAlpha版 <a class="header-anchor" href="#jvm向け新しいkotlin-k2コンパイラのalpha版" aria-label="Permalink to &quot;JVM向け新しいKotlin K2コンパイラのAlpha版&quot;">​</a></h2><p>このKotlinリリースでは、新しいKotlin K2コンパイラの<strong>Alpha</strong>版が導入されます。新しいコンパイラは、新しい言語機能の開発を加速し、Kotlinがサポートするすべてのプラットフォームを統一し、パフォーマンス向上をもたらし、コンパイラ拡張のためのAPIを提供することを目的としています。</p><p>新しいコンパイラとその利点については、すでに詳細な説明を公開しています。</p><ul><li><a href="https://www.youtube.com/watch?v=iTdJJq_LyoY" target="_blank" rel="noreferrer">新しいKotlinコンパイラへの道</a></li><li><a href="https://www.youtube.com/watch?v=db19VFLZqJM" target="_blank" rel="noreferrer">K2コンパイラ: トップダウンビュー</a></li></ul><p>新しいK2コンパイラのAlpha版では、主にパフォーマンス向上に注力したため、JVMプロジェクトでのみ動作することに注意してください。Kotlin/JS、Kotlin/Native、またはその他のマルチプラットフォームプロジェクトはサポートしておらず、<a href="/ja/kotlin/kapt">kapt</a>を含むどのコンパイラプラグインも動作しません。</p><p>弊社のベンチマークでは、社内プロジェクトで優れた結果が示されています。</p><table tabindex="0"><thead><tr><th>プロジェクト</th><th>現在のKotlinコンパイラのパフォーマンス</th><th>新しいK2 Kotlinコンパイラのパフォーマンス</th><th>パフォーマンス向上率</th></tr></thead><tbody><tr><td>Kotlin</td><td>2.2 KLOC/s</td><td>4.8 KLOC/s</td><td>~ x2.2</td></tr><tr><td>YouTrack</td><td>1.8 KLOC/s</td><td>4.2 KLOC/s</td><td>~ x2.3</td></tr><tr><td>IntelliJ IDEA</td><td>1.8 KLOC/s</td><td>3.9 KLOC/s</td><td>~ x2.2</td></tr><tr><td>Space</td><td>1.2 KLOC/s</td><td>2.8 KLOC/s</td><td>~ x2.3</td></tr></tbody></table><blockquote><p>KLOC/sのパフォーマンス数値は、コンパイラが1秒あたりに処理するコードの千行単位の数値を表します。</p><p style=""></p></blockquote><p>JVMプロジェクトでパフォーマンス向上を確認し、古いコンパイラのパフォーマンスと比較できます。Kotlin K2コンパイラを有効にするには、以下のコンパイラオプションを使用します。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-Xuse-k2</span></span></code></pre></div><p>また、K2コンパイラには<a href="https://youtrack.jetbrains.com/issues/KT?q=tag:%20FIR-preview-qa%20%23Resolved" target="_blank" rel="noreferrer">多数のバグ修正が含まれています</a>。このリストにある<strong>State: Open</strong> (オープン状態) の問題も、実際にはK2で修正されています。</p><p>今後のKotlinリリースでは、K2コンパイラの安定性が向上し、さらなる機能が提供される予定ですので、ご期待ください！</p><p>Kotlin K2コンパイラでパフォーマンスの問題に直面した場合は、<a href="https://kotl.in/issue" target="_blank" rel="noreferrer">課題トラッカーに報告してください</a>。</p><h2 id="言語" tabindex="-1">言語 <a class="header-anchor" href="#言語" aria-label="Permalink to &quot;言語&quot;">​</a></h2><p>Kotlin 1.7.0では、デリゲートによる実装のサポートと、型引数用の新しいアンダースコア演算子が導入されました。また、以前のリリースでプレビュー版として導入されたいくつかの言語機能が安定化されました。</p><ul><li><a href="#allow-implementation-by-delegation-to-an-inlined-value-of-an-inline-class">インラインクラスのインライン化された値へのデリゲートによる実装</a></li><li><a href="#underscore-operator-for-type-arguments">型引数にアンダースコア演算子</a></li><li><a href="#stable-builder-inference">ビルダ推論の安定化</a></li><li><a href="#stable-opt-in-requirements">オプトイン要件の安定化</a></li><li><a href="#stable-definitely-non-nullable-types">null許容型でないことが保証される型の安定化</a></li></ul><h3 id="インラインクラスのインライン化された値へのデリゲートによる実装を許可" tabindex="-1">インラインクラスのインライン化された値へのデリゲートによる実装を許可 <a class="header-anchor" href="#インラインクラスのインライン化された値へのデリゲートによる実装を許可" aria-label="Permalink to &quot;インラインクラスのインライン化された値へのデリゲートによる実装を許可&quot;">​</a></h3><p>値やクラスインスタンスの軽量なラッパーを作成したい場合、すべてのインターフェースメソッドを手動で実装する必要がありました。デリゲートによる実装はこの問題を解決しますが、1.7.0以前ではインラインクラスでは動作しませんでした。この制限が削除されたため、ほとんどの場合、メモリを割り当てない軽量なラッパーを作成できるようになりました。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;foo&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JvmInline</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BarWrapper</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bar: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Bar</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bar</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bw </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BarWrapper</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {})</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(bw.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="型引数にアンダースコア演算子" tabindex="-1">型引数にアンダースコア演算子 <a class="header-anchor" href="#型引数にアンダースコア演算子" aria-label="Permalink to &quot;型引数にアンダースコア演算子&quot;">​</a></h3><p>Kotlin 1.7.0では、型引数にアンダースコア演算子<code>_</code>が導入されました。他の型が指定されている場合に、型引数を自動的に推論するために使用できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SomeClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SomeImplementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SomeClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Test&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OtherImplementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SomeClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 42</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Runner</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    inline</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reified</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> S</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SomeClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> S::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.java.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getDeclaredConstructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">newInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // SomeImplementationがSomeClass&lt;String&gt;を継承しているため、TはStringと推論される</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Runner.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SomeImplementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    assert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // OtherImplementationがSomeClass&lt;Int&gt;を継承しているため、TはIntと推論される</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Runner.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OtherImplementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    assert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>変数リストのどの位置でもアンダースコア演算子を使用して、型引数を推論できます。</p></div><h3 id="ビルダ推論の安定化" tabindex="-1">ビルダ推論の安定化 <a class="header-anchor" href="#ビルダ推論の安定化" aria-label="Permalink to &quot;ビルダ推論の安定化&quot;">​</a></h3><p>ビルダ推論は、ジェネリックビルダ関数を呼び出す際に役立つ特殊な型の型推論です。ラムダ引数内の他の呼び出しに関する型情報を使用して、呼び出しの型引数をコンパイラが推論するのを助けます。</p><p>1.7.0以降、<code>-Xenable-builder-inference</code>コンパイラオプションを指定しなくても、通常の型推論が型に関する十分な情報を取得できない場合、ビルダ推論は自動的に有効化されます。このオプションは<a href="/ja/kotlin/whatsnew16#changes-to-builder-inference">1.6.0で導入されました</a>。</p><p><a href="/ja/kotlin/using-builders-with-builder-inference">カスタムジェネリックビルダの書き方</a>をご覧ください。</p><h3 id="オプトイン要件の安定化" tabindex="-1">オプトイン要件の安定化 <a class="header-anchor" href="#オプトイン要件の安定化" aria-label="Permalink to &quot;オプトイン要件の安定化&quot;">​</a></h3><p><a href="/ja/kotlin/opt-in-requirements">オプトイン要件</a>は<a href="/ja/kotlin/components-stability">安定版</a>となり、追加のコンパイラ設定は不要になりました。</p><p>1.7.0より前では、オプトイン機能自体が警告を回避するために<code>-opt-in=kotlin.RequiresOptIn</code>引数を必要としていました。これは不要になりましたが、引き続き<code>-opt-in</code>コンパイラ引数を使用して、他のアノテーションや<a href="/ja/kotlin/opt-in-requirements#opt-in-a-module">モジュール</a>をオプトインすることができます。</p><h3 id="null許容型でないことが保証される型の安定化" tabindex="-1">null許容型でないことが保証される型の安定化 <a class="header-anchor" href="#null許容型でないことが保証される型の安定化" aria-label="Permalink to &quot;null許容型でないことが保証される型の安定化&quot;">​</a></h3><p>Kotlin 1.7.0では、null許容型でないことが保証される型は<a href="/ja/kotlin/components-stability">安定版</a>に昇格しました。これらは、ジェネリックなJavaクラスやインターフェースを拡張する際に、より良い相互運用性を提供します。</p><p>新しい構文<code>T &amp; Any</code>を使用すると、使用箇所でジェネリック型パラメータをnull許容型でないことが保証される型としてマークできます。この構文形式は<a href="https://en.wikipedia.org/wiki/Intersection_type" target="_blank" rel="noreferrer">交差型</a>の表記法に由来しており、<code>&amp;</code>の左側にnull許容上限を持つ型パラメータ、右側にnull許容型でない<code>Any</code>がある場合に限定されます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">elvisLike</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp; Any): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp; Any </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x ?: y</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // OK</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    elvisLike</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).length</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Error: &#39;null&#39; cannot be a value of a non-null type</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    elvisLike</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).length</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // OK</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    elvisLike</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?&gt;(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).length</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Error: &#39;null&#39; cannot be a value of a non-null type</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    elvisLike</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?&gt;(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).length</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>null許容型でないことが保証される型の詳細については、<a href="https://github.com/Kotlin/KEEP/blob/master/proposals/definitely-non-nullable-types.md" target="_blank" rel="noreferrer">こちらのKEEP</a>をご覧ください。</p><h2 id="kotlin-jvm" tabindex="-1">Kotlin/JVM <a class="header-anchor" href="#kotlin-jvm" aria-label="Permalink to &quot;Kotlin/JVM&quot;">​</a></h2><p>このリリースでは、Kotlin/JVMコンパイラのパフォーマンス向上と新しいコンパイラオプションがもたらされます。さらに、関数型インターフェースのコンストラクタへの呼び出し可能参照が安定版になりました。1.7.0以降、Kotlin/JVMコンパイルのデフォルトのターゲットバージョンは<code>1.8</code>であることに注意してください。</p><ul><li><a href="#compiler-performance-optimizations">コンパイラのパフォーマンス最適化</a></li><li><a href="#new-compiler-option-xjdk-release">新しいコンパイラオプション <code>-Xjdk-release</code></a></li><li><a href="#stable-callable-references-to-functional-interface-constructors">関数型インターフェースのコンストラクタへの呼び出し可能参照の安定化</a></li><li><a href="#removed-jvm-target-version-1-6">JVMターゲットバージョン1.6の削除</a></li></ul><h3 id="コンパイラのパフォーマンス最適化" tabindex="-1">コンパイラのパフォーマンス最適化 <a class="header-anchor" href="#コンパイラのパフォーマンス最適化" aria-label="Permalink to &quot;コンパイラのパフォーマンス最適化&quot;">​</a></h3><p>Kotlin 1.7.0では、Kotlin/JVMコンパイラのパフォーマンスが向上しています。弊社のベンチマークによると、コンパイル時間はKotlin 1.6.0と比較して<a href="https://youtrack.jetbrains.com/issue/KT-48233/Switching-to-JVM-IR-backend-increases-compilation-time-by-more-t#focus=Comments-27-6114542.0-0" target="_blank" rel="noreferrer">平均10%短縮されました</a>。例えば、<a href="https://youtrack.jetbrains.com/issue/KT-51416/Compilation-of-kotlinx-html-DSL-should-still-be-faster" target="_blank" rel="noreferrer">kotlinx.htmlを使用するプロジェクト</a>のように、インライン関数の使用が多いプロジェクトでは、バイトコードの後処理の改善によりコンパイルが速くなります。</p><h3 id="新しいコンパイラオプション-xjdk-release" tabindex="-1">新しいコンパイラオプション: -Xjdk-release <a class="header-anchor" href="#新しいコンパイラオプション-xjdk-release" aria-label="Permalink to &quot;新しいコンパイラオプション: -Xjdk-release&quot;">​</a></h3><p>Kotlin 1.7.0では、新しいコンパイラオプション<code>-Xjdk-release</code>が導入されます。このオプションは<a href="http://openjdk.java.net/jeps/247" target="_blank" rel="noreferrer">javacのコマンドライン<code>--release</code>オプション</a>と似ています。<code>-Xjdk-release</code>オプションは、ターゲットバイトコードバージョンを制御し、クラスパス内のJDKのAPIを指定されたJavaバージョンに制限します。例えば、<code>kotlinc -Xjdk-release=1.8</code>を使用すると、依存関係にあるJDKがバージョン9以上であっても<code>java.lang.Module</code>を参照できなくなります。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>このオプションは、すべてのJDKディストリビューションに対して<a href="https://youtrack.jetbrains.com/issue/KT-29974" target="_blank" rel="noreferrer">有効であることが保証されていません</a>。</p></div><p><a href="https://youtrack.jetbrains.com/issue/KT-29974/Add-a-compiler-option-Xjdk-release-similar-to-javac-s-release-to" target="_blank" rel="noreferrer">こちらのYouTrackチケット</a>でフィードバックをお寄せください。</p><h3 id="関数型インターフェースのコンストラクタへの呼び出し可能参照の安定化" tabindex="-1">関数型インターフェースのコンストラクタへの呼び出し可能参照の安定化 <a class="header-anchor" href="#関数型インターフェースのコンストラクタへの呼び出し可能参照の安定化" aria-label="Permalink to &quot;関数型インターフェースのコンストラクタへの呼び出し可能参照の安定化&quot;">​</a></h3><p>関数型インターフェースのコンストラクタへの<a href="/ja/kotlin/reflection#callable-references">呼び出し可能参照</a>は<a href="/ja/kotlin/components-stability">安定版</a>になりました。<a href="/ja/kotlin/fun-interfaces#migration-from-an-interface-with-constructor-function-to-a-functional-interface">コンストラクタ関数を持つインターフェースから関数型インターフェースへ、呼び出し可能参照を使用して移行する方法</a>をご覧ください。</p><p>見つかった問題は<a href="https://youtrack.jetbrains.com/newissue?project=kt" target="_blank" rel="noreferrer">YouTrack</a>にご報告ください。</p><h3 id="jvmターゲットバージョン1-6の削除" tabindex="-1">JVMターゲットバージョン1.6の削除 <a class="header-anchor" href="#jvmターゲットバージョン1-6の削除" aria-label="Permalink to &quot;JVMターゲットバージョン1.6の削除&quot;">​</a></h3><p>Kotlin/JVMコンパイルのデフォルトのターゲットバージョンは<code>1.8</code>です。<code>1.6</code>ターゲットは削除されました。</p><p>JVMターゲット1.8以降に移行してください。JVMターゲットバージョンの更新方法については、以下をご覧ください。</p><ul><li><a href="/ja/kotlin/gradle-compiler-options#attributes-specific-to-jvm">Gradle</a></li><li><a href="/ja/kotlin/maven#attributes-specific-to-jvm">Maven</a></li><li><a href="/ja/kotlin/compiler-reference#jvm-target-version">コマンドラインコンパイラ</a></li></ul><h2 id="kotlin-native" tabindex="-1">Kotlin/Native <a class="header-anchor" href="#kotlin-native" aria-label="Permalink to &quot;Kotlin/Native&quot;">​</a></h2><p>Kotlin 1.7.0には、Objective-CおよびSwiftとの相互運用性の変更、以前のリリースで導入された機能の安定化が含まれています。また、新しいメモリマネージャーのパフォーマンス向上とその他の更新ももたらされます。</p><ul><li><a href="#performance-improvements-for-the-new-memory-manager">新しいメモリマネージャーのパフォーマンス向上</a></li><li><a href="#unified-compiler-plugin-abi-with-jvm-and-js-ir-backends">JVMおよびJS IRバックエンドとの統一されたコンパイラプラグインABI</a></li><li><a href="#support-for-standalone-android-executables">スタンドアロンAndroid実行可能ファイルのサポート</a></li><li><a href="#interop-with-swift-async-await-returning-void-instead-of-kotlinunit">Swift async/awaitとの相互運用: KotlinUnitの代わりにVoidを返す</a></li><li><a href="#prohibited-undeclared-exceptions-through-objective-c-bridges">Objective-Cブリッジを介した未宣言例外の禁止</a></li><li><a href="#improved-cocoapods-integration">CocoaPods統合の改善</a></li><li><a href="#overriding-the-kotlin-native-compiler-download-url">Kotlin/NativeコンパイラのダウンロードURLの上書き</a></li></ul><h3 id="新しいメモリマネージャーのパフォーマンス向上" tabindex="-1">新しいメモリマネージャーのパフォーマンス向上 <a class="header-anchor" href="#新しいメモリマネージャーのパフォーマンス向上" aria-label="Permalink to &quot;新しいメモリマネージャーのパフォーマンス向上&quot;">​</a></h3><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>新しいKotlin/Nativeメモリマネージャーは<a href="/ja/kotlin/components-stability">Alpha版</a>です。 将来的に非互換な変更が加えられたり、手動での移行が必要になったりする可能性があります。 <a href="https://youtrack.jetbrains.com/issue/KT-48525" target="_blank" rel="noreferrer">YouTrack</a>でのフィードバックをいただければ幸いです。</p></div><p>新しいメモリマネージャーはまだAlpha版ですが、<a href="/ja/kotlin/components-stability">安定版</a>になる途上にあります。このリリースでは、新しいメモリマネージャー、特にガベージコレクション (GC) のパフォーマンスが大幅に向上しています。特に、<a href="/ja/kotlin/whatsnew1620">1.6.20で導入された</a>スウィープフェーズの並行実装がデフォルトで有効になりました。これにより、アプリケーションがGCのために一時停止する時間を短縮できます。新しいGCスケジューラは、特に大規模なヒープにおいて、GCの頻度をより適切に選択します。</p><p>また、デバッグバイナリを特に最適化し、メモリマネージャーの実装コードで適切な最適化レベルとリンク時最適化が使用されるようにしました。これにより、弊社のベンチマークではデバッグバイナリの実行時間が約30%改善されました。</p><p>プロジェクトで新しいメモリマネージャーを試してその動作を確認し、<a href="https://youtrack.jetbrains.com/issue/KT-48525" target="_blank" rel="noreferrer">YouTrack</a>でフィードバックをお寄せください。</p><h3 id="jvmおよびjs-irバックエンドとの統一されたコンパイラプラグインabi" tabindex="-1">JVMおよびJS IRバックエンドとの統一されたコンパイラプラグインABI <a class="header-anchor" href="#jvmおよびjs-irバックエンドとの統一されたコンパイラプラグインabi" aria-label="Permalink to &quot;JVMおよびJS IRバックエンドとの統一されたコンパイラプラグインABI&quot;">​</a></h3><p>Kotlin 1.7.0以降、Kotlin Multiplatform Gradleプラグインは、Kotlin/Native用の組み込み可能なコンパイラJARをデフォルトで使用します。この<a href="/ja/kotlin/whatsnew16#unified-compiler-plugin-abi-with-jvm-and-js-ir-backends">機能は1.6.0で実験的として発表されました</a>が、現在は安定版となり、使用準備が整っています。</p><p>この改善は、コンパイラプラグイン開発体験を向上させるため、ライブラリ開発者にとって非常に便利です。このリリース以前は、Kotlin/Native用に個別のアーティファクトを提供する必要がありましたが、現在はNativeおよびその他のサポートされるプラットフォームで同じコンパイラプラグインアーティファクトを使用できます。</p><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>この機能は、プラグイン開発者が既存のプラグインに対して移行手順を踏む必要がある場合があります。 アップデートに向けてプラグインを準備する方法については、<a href="https://youtrack.jetbrains.com/issue/KT-48595" target="_blank" rel="noreferrer">こちらのYouTrack課題</a>をご覧ください。</p></div><h3 id="スタンドアロンandroid実行可能ファイルのサポート" tabindex="-1">スタンドアロンAndroid実行可能ファイルのサポート <a class="header-anchor" href="#スタンドアロンandroid実行可能ファイルのサポート" aria-label="Permalink to &quot;スタンドアロンAndroid実行可能ファイルのサポート&quot;">​</a></h3><p>Kotlin 1.7.0は、Android Nativeターゲット用の標準の実行可能ファイルを生成するための完全なサポートを提供します。これは<a href="/ja/kotlin/whatsnew1620#support-for-standalone-android-executables">1.6.20で導入されました</a>が、現在はデフォルトで有効になっています。</p><p>Kotlin/Nativeが共有ライブラリを生成していた以前の動作に戻したい場合は、以下の設定を使用します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">binaryOptions[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;androidProgramType&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;nativeActivity&quot;</span></span></code></pre></div><h3 id="swift-async-awaitとの相互運用-kotlinunitの代わりにvoidを返す" tabindex="-1">Swift async/awaitとの相互運用: KotlinUnitの代わりにVoidを返す <a class="header-anchor" href="#swift-async-awaitとの相互運用-kotlinunitの代わりにvoidを返す" aria-label="Permalink to &quot;Swift async/awaitとの相互運用: KotlinUnitの代わりにVoidを返す&quot;">​</a></h3><p>Kotlinの<code>suspend</code>関数は、Swiftで<code>KotlinUnit</code>の代わりに<code>Void</code>型を返すようになりました。これは、Swiftの<code>async</code>/<code>await</code>との相互運用性が向上した結果です。この機能は<a href="/ja/kotlin/whatsnew1620#interop-with-swift-async-await-returning-void-instead-of-kotlinunit">1.6.20で導入されました</a>が、このリリースではこの動作がデフォルトで有効になっています。</p><p>このような関数に適切な型を返すために、<code>kotlin.native.binary.unitSuspendFunctionObjCExport=proper</code>プロパティを使用する必要はなくなりました。</p><h3 id="objective-cブリッジを介した未宣言例外の禁止" tabindex="-1">Objective-Cブリッジを介した未宣言例外の禁止 <a class="header-anchor" href="#objective-cブリッジを介した未宣言例外の禁止" aria-label="Permalink to &quot;Objective-Cブリッジを介した未宣言例外の禁止&quot;">​</a></h3><p>KotlinコードをSwift/Objective-Cコードから呼び出す場合（またはその逆）、そのコードが例外をスローすると、例外が発生したコードで処理されるべきです。ただし、適切な変換（例えば、<code>@Throws</code>アノテーションの使用など）を伴う言語間で例外転送を明示的に許可している場合は別です。</p><p>以前のKotlinには、未宣言の例外が一部のケースで意図せずある言語から別の言語に「リーク」するという動作がありました。Kotlin 1.7.0ではその問題が修正され、現在はそのようなケースではプログラムが終了します。</p><p>したがって、例えばKotlinに<code>{ throw Exception() }</code>ラムダがあり、それをSwiftから呼び出す場合、Kotlin 1.7.0では例外がSwiftコードに到達するとすぐに終了します。以前のKotlinバージョンでは、そのような例外がSwiftコードにリークする可能性がありました。</p><p><code>@Throws</code>アノテーションは以前と同様に動作します。</p><h3 id="cocoapods統合の改善" tabindex="-1">CocoaPods統合の改善 <a class="header-anchor" href="#cocoapods統合の改善" aria-label="Permalink to &quot;CocoaPods統合の改善&quot;">​</a></h3><p>Kotlin 1.7.0以降、プロジェクトにCocoaPodsを統合したい場合でも、<code>cocoapods-generate</code>プラグインをインストールする必要がなくなりました。</p><p>以前は、CocoaPodsを使用するため、例えばKotlin Multiplatform Mobileプロジェクトで<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-ios-dependencies.html#with-cocoapods" target="_blank" rel="noreferrer">iOSの依存関係</a>を処理するために、CocoaPods依存関係マネージャーと<code>cocoapods-generate</code>プラグインの両方をインストールする必要がありました。</p><p>これでCocoaPods統合のセットアップが容易になり、<code>cocoapods-generate</code>がRuby 3以降にインストールできない問題も解決されました。Apple M1でより良く動作する最新のRubyバージョンもサポートされています。</p><p><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-cocoapods-overview.html#set-up-an-environment-to-work-with-cocoapods" target="_blank" rel="noreferrer">初期のCocoaPods統合</a>のセットアップ方法をご覧ください。</p><h3 id="kotlin-nativeコンパイラのダウンロードurlの上書き" tabindex="-1">Kotlin/NativeコンパイラのダウンロードURLの上書き <a class="header-anchor" href="#kotlin-nativeコンパイラのダウンロードurlの上書き" aria-label="Permalink to &quot;Kotlin/NativeコンパイラのダウンロードURLの上書き&quot;">​</a></h3><p>Kotlin 1.7.0以降、Kotlin/NativeコンパイラのダウンロードURLをカスタマイズできます。これは、CI上の外部リンクが禁止されている場合に役立ちます。</p><p>デフォルトのベースURL <code>https://download.jetbrains.com/kotlin/native/builds</code> を上書きするには、以下のGradleプロパティを使用します。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.native.distribution.baseDownloadUrl=https://example.com</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>ダウンローダーは、ネイティブバージョンとターゲットOSをこのベースURLに追加して、実際のコンパイラディストリビューションがダウンロードされるようにします。</p></div><h2 id="kotlin-js" tabindex="-1">Kotlin/JS <a class="header-anchor" href="#kotlin-js" aria-label="Permalink to &quot;Kotlin/JS&quot;">​</a></h2><p>Kotlin/JSは、<a href="/ja/kotlin/js-ir-compiler">JS IRコンパイラバックエンド</a>のさらなる改善と、開発体験を向上させるその他のアップデートを受けています。</p><ul><li><a href="#performance-improvements-for-the-new-ir-backend">新しいIRバックエンドのパフォーマンス向上</a></li><li><a href="#minification-for-member-names-when-using-ir">IR使用時のメンバー名のミニファイ</a></li><li><a href="#support-for-older-browsers-via-polyfills-in-the-ir-backend">IRバックエンドでのポリフィルによる古いブラウザのサポート</a></li><li><a href="#dynamically-load-javascript-modules-from-js-expressions">js式からのJavaScriptモジュールの動的ロード</a></li><li><a href="#specify-environment-variables-for-javascript-test-runners">JavaScriptテストランナー用の環境変数を指定</a></li></ul><h3 id="新しいirバックエンドのパフォーマンス向上" tabindex="-1">新しいIRバックエンドのパフォーマンス向上 <a class="header-anchor" href="#新しいirバックエンドのパフォーマンス向上" aria-label="Permalink to &quot;新しいIRバックエンドのパフォーマンス向上&quot;">​</a></h3><p>このリリースには、開発体験を向上させるいくつかの大きなアップデートが含まれています。</p><ul><li>Kotlin/JSのインクリメンタルコンパイルパフォーマンスが大幅に改善されました。JSプロジェクトのビルドにかかる時間が短縮されます。インクリメンタルなリビルドは、多くの場合、レガシーバックエンドとほぼ同等になりました。</li><li>Kotlin/JSの最終バンドルは、最終成果物のサイズを大幅に削減したため、必要なスペースが少なくなりました。一部の大規模プロジェクトでは、プロダクションバンドルサイズがレガシーバックエンドと比較して最大20%削減されたことを確認しています。</li><li>インターフェースの型チェックが桁違いに改善されました。</li><li>Kotlinはより高品質なJSコードを生成します。</li></ul><h3 id="ir使用時のメンバー名のミニファイ" tabindex="-1">IR使用時のメンバー名のミニファイ <a class="header-anchor" href="#ir使用時のメンバー名のミニファイ" aria-label="Permalink to &quot;IR使用時のメンバー名のミニファイ&quot;">​</a></h3><p>Kotlin/JS IRコンパイラは、Kotlinのクラスと関数の関係に関する内部情報を使用して、関数、プロパティ、クラスの名前を短縮する、より効率的なミニファイ（軽量化）を適用するようになりました。これにより、結果としてバンドルされるアプリケーションが縮小されます。</p><p>この種類のミニファイは、Kotlin/JSアプリケーションをプロダクションモードでビルドする際に自動的に適用され、デフォルトで有効になっています。メンバー名のミニファイを無効にするには、<code>-Xir-minimized-member-names</code>コンパイラフラグを使用します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(IR) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        compilations.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            compileKotlinTask.kotlinOptions.freeCompilerArgs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xir-minimized-member-names=false&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="irバックエンドでのポリフィルによる古いブラウザのサポート" tabindex="-1">IRバックエンドでのポリフィルによる古いブラウザのサポート <a class="header-anchor" href="#irバックエンドでのポリフィルによる古いブラウザのサポート" aria-label="Permalink to &quot;IRバックエンドでのポリフィルによる古いブラウザのサポート&quot;">​</a></h3><p>Kotlin/JSのIRコンパイラバックエンドには、レガシーバックエンドと同じポリフィルが含まれるようになりました。これにより、新しいコンパイラでコンパイルされたコードは、Kotlin標準ライブラリで使用されるES2015のすべてのメソッドをサポートしていない古いブラウザでも実行できるようになります。プロジェクトで実際に使用されるポリフィルのみが最終バンドルに含まれるため、バンドルサイズへの潜在的な影響を最小限に抑えます。</p><p>この機能はIRコンパイラを使用する場合にデフォルトで有効になっており、設定する必要はありません。</p><h3 id="js式からのjavascriptモジュールの動的ロード" tabindex="-1">js式からのJavaScriptモジュールの動的ロード <a class="header-anchor" href="#js式からのjavascriptモジュールの動的ロード" aria-label="Permalink to &quot;js式からのJavaScriptモジュールの動的ロード&quot;">​</a></h3><p>JavaScriptモジュールを扱うほとんどのアプリケーションは、<a href="/ja/kotlin/js-modules">JavaScriptモジュールの統合</a>でカバーされている静的インポートを使用します。しかし、Kotlin/JSには、アプリケーションでJavaScriptモジュールを実行時に動的にロードするメカニズムが不足していました。</p><p>Kotlin 1.7.0以降、JavaScriptからの<code>import</code>ステートメントが<code>js</code>ブロックでサポートされ、パッケージをアプリケーションに実行時に動的に取り込むことができるようになりました。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myPackage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;import(&#39;my-package&#39;)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="javascriptテストランナー用の環境変数を指定" tabindex="-1">JavaScriptテストランナー用の環境変数を指定 <a class="header-anchor" href="#javascriptテストランナー用の環境変数を指定" aria-label="Permalink to &quot;JavaScriptテストランナー用の環境変数を指定&quot;">​</a></h3><p>Node.jsパッケージの解決を調整したり、Node.jsテストに外部情報を渡したりするために、JavaScriptテストランナーが使用する環境変数を指定できるようになりました。環境変数を定義するには、ビルドスクリプトの<code>testTask</code>ブロック内で、キーと値のペアを指定して<code>environment()</code>関数を使用します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        nodejs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            testTask</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                environment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;key&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;value&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="gradle" tabindex="-1">Gradle <a class="header-anchor" href="#gradle" aria-label="Permalink to &quot;Gradle&quot;">​</a></h2><p>このリリースでは、新しいビルドレポート、Gradleプラグインバリアントのサポート、kaptの新しい統計情報などが導入されます。</p><ul><li><a href="#a-new-approach-to-incremental-compilation">インクリメンタルコンパイルへの新しいアプローチ</a></li><li><a href="#build-reports-for-kotlin-compiler-tasks">コンパイラのパフォーマンスを追跡するための新しいビルドレポート</a></li><li><a href="#bumping-minimum-supported-versions">GradleおよびAndroid Gradleプラグインの最小サポートバージョンの変更</a></li><li><a href="#support-for-gradle-plugin-variants">Gradleプラグインバリアントのサポート</a></li><li><a href="#updates-in-the-kotlin-gradle-plugin-api">Kotlin GradleプラグインAPIの更新</a></li><li><a href="#the-sam-with-receiver-plugin-is-available-via-the-plugins-api">plugins APIを介したsam-with-receiverプラグインの利用可能性</a></li><li><a href="#changes-in-compile-tasks">コンパイルタスクの変更</a></li><li><a href="#statistics-of-generated-files-by-each-annotation-processor-in-kapt">kaptの各アノテーションプロセッサによって生成されたファイルの新しい統計情報</a></li><li><a href="#deprecation-of-the-kotlin-compiler-execution-strategy-system-property">kotlin.compiler.execution.strategyシステムプロパティの非推奨化</a></li><li><a href="#removal-of-deprecated-options-methods-and-plugins">非推奨オプション、メソッド、プラグインの削除</a></li></ul><h3 id="インクリメンタルコンパイルへの新しいアプローチ" tabindex="-1">インクリメンタルコンパイルへの新しいアプローチ <a class="header-anchor" href="#インクリメンタルコンパイルへの新しいアプローチ" aria-label="Permalink to &quot;インクリメンタルコンパイルへの新しいアプローチ&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>インクリメンタルコンパイルへの新しいアプローチは<a href="/ja/kotlin/components-stability">実験的</a>です。これはいつでも廃止または変更される可能性があります。 オプトインが必要です（詳細については下記を参照）。評価目的でのみ使用することをお勧めします。 <a href="https://youtrack.jetbrains.com/issues/KT" target="_blank" rel="noreferrer">YouTrack</a>でのフィードバックをいただければ幸いです。</p></div><p>Kotlin 1.7.0では、クロスモジュール変更のためのインクリメンタルコンパイルを再設計しました。これで、インクリメンタルコンパイルは依存するKotlin以外のモジュール内部での変更にも対応し、<a href="https://docs.gradle.org/current/userguide/build_cache.html" target="_blank" rel="noreferrer">Gradleビルドキャッシュ</a>と互換性があります。コンパイル回避のサポートも改善されました。</p><p>ビルドキャッシュを使用する場合や、Kotlin以外のGradleモジュールで頻繁に変更を行う場合に、新しいアプローチの最も大きなメリットを実感できると期待しています。<code>kotlin-gradle-plugin</code>モジュールに関するKotlinプロジェクトのテストでは、キャッシュヒット後の変更で80%以上の改善が示されています。</p><p>この新しいアプローチを試すには、<code>gradle.properties</code>に以下のオプションを設定してください。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.incremental.useClasspathSnapshot=true</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>インクリメンタルコンパイルへの新しいアプローチは、現在GradleビルドシステムにおけるJVMバックエンドでのみ利用可能です。</p></div><p>インクリメンタルコンパイルの新しいアプローチが内部でどのように実装されているかについては、<a href="https://blog.jetbrains.com/kotlin/2022/07/a-new-approach-to-incremental-compilation-in-kotlin/" target="_blank" rel="noreferrer">こちらのブログ投稿</a>をご覧ください。</p><p>私たちはこの技術を安定させ、他のバックエンド（例えばJS）やビルドシステムへのサポートを追加する計画です。このコンパイル方式で発生する問題や奇妙な動作について、<a href="https://youtrack.jetbrains.com/issues/KT" target="_blank" rel="noreferrer">YouTrack</a>にご報告いただければ幸いです。ありがとうございます！</p><p>Kotlinチームは、<a href="https://github.com/gavra0" target="_blank" rel="noreferrer">Ivan Gavrilovic</a>氏、<a href="https://github.com/hungvietnguyen" target="_blank" rel="noreferrer">Hung Nguyen</a>氏、<a href="https://github.com/melix" target="_blank" rel="noreferrer">Cédric Champeau</a>氏、およびその他の外部貢献者の皆様のご協力に深く感謝いたします。</p><h3 id="kotlinコンパイラタスクのビルドレポート" tabindex="-1">Kotlinコンパイラタスクのビルドレポート <a class="header-anchor" href="#kotlinコンパイラタスクのビルドレポート" aria-label="Permalink to &quot;Kotlinコンパイラタスクのビルドレポート&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>Kotlinビルドレポートは<a href="/ja/kotlin/components-stability">実験的</a>です。これはいつでも廃止または変更される可能性があります。 オプトインが必要です（詳細については下記を参照）。評価目的でのみ使用してください。 <a href="https://youtrack.jetbrains.com/issues/KT" target="_blank" rel="noreferrer">YouTrack</a>でのフィードバックをいただければ幸いです。</p></div><p>Kotlin 1.7.0では、コンパイラのパフォーマンスを追跡するのに役立つビルドレポートが導入されます。レポートには、異なるコンパイルフェーズの期間と、コンパイルがインクリメンタルでなかった理由が含まれています。</p><p>ビルドレポートは、コンパイラのタスクに関する問題を調査したい場合に役立ちます。例えば：</p><ul><li>Gradleビルドに時間がかかりすぎ、パフォーマンス低下の根本原因を理解したい場合。</li><li>同じプロジェクトのコンパイル時間が異なり、数秒で終わることもあれば、数分かかることもある場合。</li></ul><p>ビルドレポートを有効にするには、<code>gradle.properties</code>でビルドレポートの出力先を宣言します。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.build.report.output=file</span></span></code></pre></div><p>以下の値（およびそれらの組み合わせ）が利用可能です。</p><ul><li><p><code>file</code>はビルドレポートをローカルファイルに保存します。</p></li><li><p><code>build_scan</code>はビルドレポートを<a href="https://scans.gradle.com/" target="_blank" rel="noreferrer">ビルドスキャン</a>の<code>custom values</code>セクションに保存します。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Gradle Enterpriseプラグインは、カスタム値の数とその長さを制限します。大規模なプロジェクトでは、一部の値が失われる可能性があります。</p></div></li><li><p><code>http</code>はHTTP(S)を使用してビルドレポートを送信します。POSTメソッドはJSON形式でメトリクスを送信します。データはバージョンごとに変更される可能性があります。送信されるデータの現在のバージョンは、<a href="https://github.com/JetBrains/kotlin/blob/master/libraries/tools/kotlin-gradle-plugin/src/common/kotlin/org/jetbrains/kotlin/gradle/report/data/GradleCompileStatisticsData.kt" target="_blank" rel="noreferrer">Kotlinリポジトリ</a>で確認できます。</p></li></ul><p>実行時間の長いコンパイルのビルドレポートを分析することで解決できる一般的なケースが2つあります。</p><ul><li>ビルドがインクリメンタルでなかった場合。原因を分析し、根本的な問題を修正してください。</li><li>ビルドはインクリメンタルだったが、時間がかかりすぎた場合。ソースファイルを再編成してみてください。大きなファイルを分割したり、個別のクラスを異なるファイルに保存したり、大きなクラスをリファクタリングしたり、トップレベル関数を異なるファイルで宣言したりするなどです。</li></ul><p>新しいビルドレポートの詳細については、<a href="https://blog.jetbrains.com/kotlin/2022/06/introducing-kotlin-build-reports/" target="_blank" rel="noreferrer">こちらのブログ投稿</a>をご覧ください。</p><p>インフラストラクチャでビルドレポートの使用を試すことを歓迎します。フィードバック、問題、改善の提案などございましたら、お気軽に<a href="https://youtrack.jetbrains.com/newIssue" target="_blank" rel="noreferrer">課題トラッカー</a>にご報告ください。よろしくお願いいたします！</p><h3 id="最小サポートバージョンの変更" tabindex="-1">最小サポートバージョンの変更 <a class="header-anchor" href="#最小サポートバージョンの変更" aria-label="Permalink to &quot;最小サポートバージョンの変更&quot;">​</a></h3><p>Kotlin 1.7.0以降、サポートされるGradleの最小バージョンは6.7.1です。<a href="#support-for-gradle-plugin-variants">Gradleプラグインバリアント</a>と新しいGradle APIをサポートするために、<a href="https://youtrack.jetbrains.com/issue/KT-49733/Bump-minimal-supported-Gradle-version-to-6-7-1" target="_blank" rel="noreferrer">バージョンを上げる必要がありました</a>。今後は、Gradleプラグインバリアント機能のおかげで、最小サポートバージョンを頻繁に上げる必要はなくなるはずです。</p><p>また、サポートされるAndroid Gradleプラグインの最小バージョンは3.6.4になりました。</p><h3 id="gradleプラグインバリアントのサポート" tabindex="-1">Gradleプラグインバリアントのサポート <a class="header-anchor" href="#gradleプラグインバリアントのサポート" aria-label="Permalink to &quot;Gradleプラグインバリアントのサポート&quot;">​</a></h3><p>Gradle 7.0では、Gradleプラグイン開発者向けの新しい機能である<a href="https://docs.gradle.org/7.0/userguide/implementing_gradle_plugins.html#plugin-with-variants" target="_blank" rel="noreferrer">バリアントを持つプラグイン</a>が導入されました。この機能により、Gradleバージョン7.1未満との互換性を維持しながら、新しいGradle機能のサポートを容易に追加できます。<a href="https://docs.gradle.org/current/userguide/variant_model.html" target="_blank" rel="noreferrer">Gradleでのバリアント選択</a>の詳細をご覧ください。</p><p>Gradleプラグインバリアントを使用すると、異なるGradleバージョン向けに異なるKotlin Gradleプラグインバリアントを出荷できます。目標は、Gradleの最も古いサポート対象バージョンに対応する<code>main</code>バリアントで、ベースとなるKotlinコンパイルをサポートすることです。各バリアントには、対応するリリースからのGradle機能の実装が含まれます。最新のバリアントは、最も幅広いGradle機能セットをサポートします。このアプローチにより、機能が制限された古いGradleバージョンへのサポートを拡張できます。</p><p>現在、Kotlin Gradleプラグインには2つのバリアントのみが存在します。</p><ul><li><code>main</code>：Gradleバージョン6.7.1～6.9.3向け</li><li><code>gradle70</code>：Gradleバージョン7.0以上向け</li></ul><p>今後のKotlinリリースでは、さらに追加される可能性があります。</p><p>ビルドがどのバリアントを使用しているかを確認するには、<a href="https://docs.gradle.org/current/userguide/logging.html#sec:choosing_a_log_level" target="_blank" rel="noreferrer"><code>--info</code>ログレベル</a>を有効にし、出力から<code>Using Kotlin Gradle plugin</code>で始まる文字列、例えば<code>Using Kotlin Gradle plugin main variant</code>を探してください。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Gradleにおけるバリアント選択の既知の問題に対する回避策は以下の通りです。 * <a href="https://github.com/gradle/gradle/issues/20545" target="_blank" rel="noreferrer">pluginManagementでのResolutionStrategyが、マルチバリアントを持つプラグインで機能しない</a> * <a href="https://github.com/gradle/gradle/issues/20847" target="_blank" rel="noreferrer">プラグインが<code>buildSrc</code>共通依存関係として追加された場合、プラグインバリアントが無視される</a></p></div><p><a href="https://youtrack.jetbrains.com/issue/KT-49227/Support-Gradle-plugins-variants" target="_blank" rel="noreferrer">こちらのYouTrackチケット</a>でフィードバックをお寄せください。</p><h3 id="kotlin-gradleプラグインapiの更新" tabindex="-1">Kotlin GradleプラグインAPIの更新 <a class="header-anchor" href="#kotlin-gradleプラグインapiの更新" aria-label="Permalink to &quot;Kotlin GradleプラグインAPIの更新&quot;">​</a></h3><p>Kotlin GradleプラグインAPIアーティファクトは、いくつかの改善が施されました。</p><ul><li><p>ユーザーが設定可能な入力を備えたKotlin/JVMおよびKotlin/kaptタスク用の新しいインターフェースが追加されました。</p></li><li><p>すべてのKotlinプラグインが継承する新しい<code>KotlinBasePlugin</code>インターフェースが追加されました。このインターフェースは、任意のKotlin Gradleプラグイン（JVM、JS、マルチプラットフォーム、Native、その他のプラットフォーム）が適用されるたびに、何らかの設定アクションをトリガーしたい場合に使用します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">project.plugins.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">org</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jetbrains</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gradle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KotlinBasePlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ここでアクションを設定</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>KotlinBasePlugin</code>に関するフィードバックは、<a href="https://youtrack.jetbrains.com/issue/KT-48008/Consider-offering-a-KotlinBasePlugin" target="_blank" rel="noreferrer">こちらのYouTrackチケット</a>にお寄せください。</p></li><li><p>Android GradleプラグインがKotlinコンパイル自体を設定するための基礎を築きました。これにより、ビルドにKotlin Android Gradleプラグインを追加する必要がなくなります。 追加されたサポートについて学び、試すには、<a href="https://developer.android.com/studio/releases/gradle-plugin" target="_blank" rel="noreferrer">Android Gradleプラグインのリリースアナウンス</a>をご覧ください！</p></li></ul><h3 id="plugins-apiを介したsam-with-receiverプラグインの利用可能性" tabindex="-1">plugins APIを介したsam-with-receiverプラグインの利用可能性 <a class="header-anchor" href="#plugins-apiを介したsam-with-receiverプラグインの利用可能性" aria-label="Permalink to &quot;plugins APIを介したsam-with-receiverプラグインの利用可能性&quot;">​</a></h3><p><a href="/ja/kotlin/sam-with-receiver-plugin">sam-with-receiverコンパイラプラグイン</a>は、<a href="https://docs.gradle.org/current/userguide/plugins.html#sec:plugins_block" target="_blank" rel="noreferrer">Gradle plugins DSL</a>を介して利用可能になりました。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.kotlin.plugin.sam.with.receiver&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) version </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$kotlin_version</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="コンパイルタスクの変更" tabindex="-1">コンパイルタスクの変更 <a class="header-anchor" href="#コンパイルタスクの変更" aria-label="Permalink to &quot;コンパイルタスクの変更&quot;">​</a></h3><p>コンパイルタスクは、このリリースで多くの変更を受けました。</p><ul><li>Kotlinコンパイルタスクは、Gradleの<code>AbstractCompile</code>タスクを継承しなくなりました。<code>DefaultTask</code>のみを継承します。</li><li><code>AbstractCompile</code>タスクには<code>sourceCompatibility</code>と<code>targetCompatibility</code>の入力があります。<code>AbstractCompile</code>タスクが継承されなくなったため、これらの入力はKotlinユーザーのスクリプトでは利用できなくなりました。</li><li><code>SourceTask.stableSources</code>入力は利用できなくなり、<code>sources</code>入力を使用する必要があります。<code>setSource(...)</code>メソッドは引き続き利用可能です。</li><li>すべてのコンパイルタスクは、コンパイルに必要なライブラリのリストとして<code>libraries</code>入力を使用するようになりました。<code>KotlinCompile</code>タスクにはまだ非推奨のKotlinプロパティ<code>classpath</code>がありますが、これは今後のリリースで削除される予定です。</li><li>コンパイルタスクは引き続き<code>PatternFilterable</code>インターフェースを実装しており、これによりKotlinソースのフィルタリングが可能です。<code>sourceFilesExtensions</code>入力は、<code>PatternFilterable</code>メソッドの使用を優先して削除されました。</li><li>非推奨の<code>Gradle destinationDir: File</code>出力は、<code>destinationDirectory: DirectoryProperty</code>出力に置き換えられました。</li><li>Kotlin/Nativeの<code>AbstractNativeCompile</code>タスクは、<code>AbstractKotlinCompileTool</code>基底クラスを継承するようになりました。これは、Kotlin/Nativeビルドツールを他のすべてのツールに統合するための最初のステップです。</li></ul><p><a href="https://youtrack.jetbrains.com/issue/KT-32805" target="_blank" rel="noreferrer">こちらのYouTrackチケット</a>でフィードバックをお寄せください。</p><h3 id="kaptの各アノテーションプロセッサによって生成されたファイルの新しい統計情報" tabindex="-1">kaptの各アノテーションプロセッサによって生成されたファイルの新しい統計情報 <a class="header-anchor" href="#kaptの各アノテーションプロセッサによって生成されたファイルの新しい統計情報" aria-label="Permalink to &quot;kaptの各アノテーションプロセッサによって生成されたファイルの新しい統計情報&quot;">​</a></h3><p><code>kotlin-kapt</code> Gradleプラグインは、すでに<a href="https://github.com/JetBrains/kotlin/pull/4280" target="_blank" rel="noreferrer">各プロセッサのパフォーマンス統計を報告しています</a>。Kotlin 1.7.0以降、各アノテーションプロセッサによって生成されたファイルの数に関する統計も報告できます。</p><p>これは、ビルドの一部として未使用のアノテーションプロセッサがあるかどうかを追跡するのに役立ちます。生成されたレポートを使用して、不要なアノテーションプロセッサをトリガーするモジュールを見つけ、それを防止するためにモジュールを更新できます。</p><p>統計を有効にするには、2つのステップが必要です。</p><ul><li><p><code>build.gradle.kts</code>で<code>showProcessorStats</code>フラグを<code>true</code>に設定します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kapt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    showProcessorStats </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><code>gradle.properties</code>で<code>kapt.verbose</code>Gradleプロパティを<code>true</code>に設定します。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kapt.verbose=true</span></span></code></pre></div></li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>コマンドラインオプション<code>verbose</code>を介して詳細出力を有効にすることもできます（<a href="/ja/kotlin/kapt#use-in-cli">kapt.md#use-in-cli</a>を参照）。</p></div><p>統計は<code>info</code>レベルでログに表示されます。<code>Annotation processor stats:</code>の行の後に各アノテーションプロセッサの実行時間に関する統計が表示されます。これらの行の後には、<code>Generated files report:</code>の行の後に各アノテーションプロセッサによって生成されたファイルの数に関する統計が表示されます。例：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[INFO] Annotation processor stats:</span></span>
<span class="line"><span>[INFO] org.mapstruct.ap.MappingProcessor: total: 290 ms, init: 1 ms, 3 round(s): 289 ms, 0 ms, 0 ms</span></span>
<span class="line"><span>[INFO] Generated files report:</span></span>
<span class="line"><span>[INFO] org.mapstruct.ap.MappingProcessor: total sources: 2, sources per round: 2, 0, 0</span></span></code></pre></div><p><a href="https://youtrack.jetbrains.com/issue/KT-51132/KAPT-Support-reporting-the-number-of-generated-files-by-each-ann" target="_blank" rel="noreferrer">こちらのYouTrackチケット</a>でフィードバックをお寄せください。</p><h3 id="kotlin-compiler-execution-strategyシステムプロパティの非推奨化" tabindex="-1">kotlin.compiler.execution.strategyシステムプロパティの非推奨化 <a class="header-anchor" href="#kotlin-compiler-execution-strategyシステムプロパティの非推奨化" aria-label="Permalink to &quot;kotlin.compiler.execution.strategyシステムプロパティの非推奨化&quot;">​</a></h3><p>Kotlin 1.6.20では<a href="/ja/kotlin/whatsnew1620#properties-for-defining-kotlin-compiler-execution-strategy">Kotlinコンパイラの実行戦略を定義するための新しいプロパティ</a>が導入されました。Kotlin 1.7.0では、古いシステムプロパティ<code>kotlin.compiler.execution.strategy</code>の非推奨サイクルが開始され、新しいプロパティが推奨されます。</p><p><code>kotlin.compiler.execution.strategy</code>システムプロパティを使用すると、警告が表示されます。このプロパティは今後のリリースで削除されます。以前の動作を保持するには、システムプロパティを同名のGradleプロパティに置き換えてください。例えば、<code>gradle.properties</code>でこれを行うことができます。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.compiler.execution.strategy=out-of-process</span></span></code></pre></div><p>コンパイルタスクプロパティ<code>compilerExecutionStrategy</code>を使用することもできます。詳細については、<a href="/ja/kotlin/gradle-compilation-and-caches#defining-kotlin-compiler-execution-strategy">Gradleページ</a>をご覧ください。</p><h3 id="非推奨オプション、メソッド、プラグインの削除" tabindex="-1">非推奨オプション、メソッド、プラグインの削除 <a class="header-anchor" href="#非推奨オプション、メソッド、プラグインの削除" aria-label="Permalink to &quot;非推奨オプション、メソッド、プラグインの削除&quot;">​</a></h3><h4 id="useexperimentalannotationメソッドの削除" tabindex="-1">useExperimentalAnnotationメソッドの削除 <a class="header-anchor" href="#useexperimentalannotationメソッドの削除" aria-label="Permalink to &quot;useExperimentalAnnotationメソッドの削除&quot;">​</a></h4><p>Kotlin 1.7.0では、<code>useExperimentalAnnotation</code> Gradleメソッドの非推奨サイクルが完了しました。モジュールでAPIの使用をオプトインするには、代わりに<code>optIn()</code>を使用してください。</p><p>例えば、Gradleモジュールがマルチプラットフォームの場合：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        languageSettings.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">optIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.mylibrary.OptInAnnotation&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Kotlinの<a href="/ja/kotlin/opt-in-requirements">オプトイン要件</a>の詳細については、こちらをご覧ください。</p><h4 id="非推奨のコンパイラオプションの削除" tabindex="-1">非推奨のコンパイラオプションの削除 <a class="header-anchor" href="#非推奨のコンパイラオプションの削除" aria-label="Permalink to &quot;非推奨のコンパイラオプションの削除&quot;">​</a></h4><p>いくつかのコンパイラオプションの非推奨サイクルを完了しました。</p><ul><li><code>kotlinOptions.jdkHome</code>コンパイラオプションは1.5.30で非推奨となり、現在のリリースで削除されました。Gradleビルドにこのオプションが含まれている場合、ビルドは失敗するようになりました。Kotlin 1.5.30以降でサポートされている<a href="/ja/kotlin/whatsnew1530#support-for-java-toolchains">Javaツールチェーン</a>の使用をお勧めします。</li><li>非推奨の<code>noStdlib</code>コンパイラオプションも削除されました。Gradleプラグインは、Kotlin標準ライブラリが存在するかどうかを制御するために<code>kotlin.stdlib.default.dependency=true</code>プロパティを使用します。</li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>コンパイラ引数<code>-jdkHome</code>と<code>-no-stdlib</code>は引き続き利用可能です。</p></div><h4 id="非推奨プラグインの削除" tabindex="-1">非推奨プラグインの削除 <a class="header-anchor" href="#非推奨プラグインの削除" aria-label="Permalink to &quot;非推奨プラグインの削除&quot;">​</a></h4><p>Kotlin 1.4.0で<code>kotlin2js</code>と<code>kotlin-dce-plugin</code>プラグインは非推奨となり、このリリースで削除されました。<code>kotlin2js</code>の代わりに、新しい<code>org.jetbrains.kotlin.js</code>プラグインを使用してください。デッドコード除去 (DCE) は、Kotlin/JS Gradleプラグインが適切に設定されている場合に動作します。</p><p>Kotlin 1.6.0では、<code>KotlinGradleSubplugin</code>クラスの非推奨レベルを<code>ERROR</code>に変更しました。開発者はこのクラスをコンパイラプラグインの記述に使用していました。このリリースでは、<a href="https://youtrack.jetbrains.com/issue/KT-48831/" target="_blank" rel="noreferrer">このクラスが削除されました</a>。代わりに<code>KotlinCompilerPluginSupportPlugin</code>クラスを使用してください。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>プロジェクト全体でKotlinプラグインのバージョン1.7.0以降を使用するのが最善の方法です。</p></div><h4 id="非推奨のコルーチンdslオプションとプロパティの削除" tabindex="-1">非推奨のコルーチンDSLオプションとプロパティの削除 <a class="header-anchor" href="#非推奨のコルーチンdslオプションとプロパティの削除" aria-label="Permalink to &quot;非推奨のコルーチンDSLオプションとプロパティの削除&quot;">​</a></h4><p>非推奨の<code>kotlin.experimental.coroutines</code> Gradle DSLオプションと、<code>gradle.properties</code>で使用されていた<code>kotlin.coroutines</code>プロパティを削除しました。今後は、<em><a href="/ja/kotlin/coroutines-basics#extract-function-refactoring">サスペンド関数</a></em> を使用するか、ビルドスクリプトに<a href="/ja/kotlin/gradle-configure-project#set-a-dependency-on-a-kotlinx-library">kotlinx.coroutinesの依存関係を追加</a>するだけで済みます。</p><p>コルーチンの詳細については、<a href="/ja/kotlin/coroutines-guide">コルーチンガイド</a>をご覧ください。</p><h4 id="ツールチェーン拡張メソッドにおける型キャストの削除" tabindex="-1">ツールチェーン拡張メソッドにおける型キャストの削除 <a class="header-anchor" href="#ツールチェーン拡張メソッドにおける型キャストの削除" aria-label="Permalink to &quot;ツールチェーン拡張メソッドにおける型キャストの削除&quot;">​</a></h4><p>Kotlin 1.7.0より前では、Kotlin DSLでGradleツールチェーンを設定する際に、<code>JavaToolchainSpec</code>クラスへの型キャストを行う必要がありました。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvmToolchain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> JavaToolchainSpec).languageVersion.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(JavaLanguageVersion.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MAJOR_JDK_VERSION</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>これで、<code>(this as JavaToolchainSpec)</code>の部分を省略できるようになりました。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvmToolchain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        languageVersion.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(JavaLanguageVersion.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MAJOR_JDK_VERSION</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="kotlin-1-7-0への移行" tabindex="-1">Kotlin 1.7.0への移行 <a class="header-anchor" href="#kotlin-1-7-0への移行" aria-label="Permalink to &quot;Kotlin 1.7.0への移行&quot;">​</a></h2><h3 id="kotlin-1-7-0のインストール" tabindex="-1">Kotlin 1.7.0のインストール <a class="header-anchor" href="#kotlin-1-7-0のインストール" aria-label="Permalink to &quot;Kotlin 1.7.0のインストール&quot;">​</a></h3><p>IntelliJ IDEA 2022.1とAndroid Studio Chipmunk (212) は、Kotlinプラグインを1.7.0に自動的に更新することを提案します。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>IntelliJ IDEA 2022.2、Android Studio Dolphin (213)、またはAndroid Studio Electric Eel (221) については、Kotlinプラグイン1.7.0は今後のIntelliJ IDEAおよびAndroid Studioのアップデートで提供されます。</p></div><p>新しいコマンドラインコンパイラは、<a href="https://github.com/JetBrains/kotlin/releases/tag/v1.7.0" target="_blank" rel="noreferrer">GitHubのリリースぺージ</a>からダウンロードできます。</p><h3 id="kotlin-1-7-0への既存プロジェクトの移行または新規プロジェクトの開始" tabindex="-1">Kotlin 1.7.0への既存プロジェクトの移行または新規プロジェクトの開始 <a class="header-anchor" href="#kotlin-1-7-0への既存プロジェクトの移行または新規プロジェクトの開始" aria-label="Permalink to &quot;Kotlin 1.7.0への既存プロジェクトの移行または新規プロジェクトの開始&quot;">​</a></h3><ul><li><p>既存のプロジェクトをKotlin 1.7.0に移行するには、Kotlinのバージョンを<code>1.7.0</code>に変更し、GradleまたはMavenプロジェクトを再インポートします。<a href="/ja/kotlin/releases#update-to-a-new-kotlin-version">Kotlin 1.7.0へのアップデート方法</a>をご覧ください。</p></li><li><p>Kotlin 1.7.0で新規プロジェクトを開始するには、Kotlinプラグインを更新し、<strong>File</strong> | <strong>New</strong> | <strong>Project</strong>からプロジェクトウィザードを実行します。</p></li></ul><h3 id="kotlin-1-7-0の互換性ガイド" tabindex="-1">Kotlin 1.7.0の互換性ガイド <a class="header-anchor" href="#kotlin-1-7-0の互換性ガイド" aria-label="Permalink to &quot;Kotlin 1.7.0の互換性ガイド&quot;">​</a></h3><p>Kotlin 1.7.0は<a href="/ja/kotlin/kotlin-evolution-principles#language-and-tooling-releases">機能リリース</a>であるため、以前の言語バージョンで記述されたコードと互換性のない変更をもたらす可能性があります。そのような変更点の詳細なリストは、<a href="/ja/kotlin/compatibility-guide-17">Kotlin 1.7.0の互換性ガイド</a>をご覧ください。</p>`,198))])}const F=p(d,[["render",c]]);export{f as __pageData,F as default};
