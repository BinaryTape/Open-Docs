import{_ as g,C as n,c as u,o as y,G as t,j as i,ag as F,w as e,a}from"./chunks/framework.Bksy39di.js";const H=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ja/ktor/server-cors.md","filePath":"ja/ktor/server-cors.md","lastUpdated":1755457140000}'),C={name:"ja/ktor/server-cors.md"};function v(m,s,b,f,B,q){const o=n("TopicTitle"),r=n("show-structure"),d=n("primary-label"),h=n("Links"),E=n("tldr"),l=n("code-block"),p=n("TabItem"),k=n("Tabs"),c=n("list");return y(),u("div",null,[t(o,{labelRef:"server-plugin",title:"CORS"}),t(r,{for:"chapter",depth:"2"}),t(d,{ref:"server-plugin"},null,512),t(E,null,{default:e(()=>[s[3]||(s[3]=i("p",null,[i("b",null,"必須の依存関係"),a(": "),i("code",null,"io.ktor:ktor-server-cors")],-1)),s[4]||(s[4]=i("p",null,[i("b",null,"コード例"),a(": "),i("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/cors"}," cors ")],-1)),i("p",null,[i("b",null,[t(h,{href:"/ktor/server-native",summary:"KtorはKotlin/Nativeをサポートしており、追加のランタイムや仮想マシンなしでサーバーを実行できます。"},{default:e(()=>s[0]||(s[0]=[a("ネイティブサーバー")])),_:1}),s[1]||(s[1]=a("のサポート"))]),s[2]||(s[2]=a(": ✅ "))])]),_:1}),s[16]||(s[16]=i("p",null,[a("サーバーが"),i("a",{href:"https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS",target:"_blank",rel:"noreferrer"},"クロスオリジンリクエスト"),a("を処理するように想定されている場合、"),i("a",{href:"https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-cors/io.ktor.server.plugins.cors.routing/-c-o-r-s.html",target:"_blank",rel:"noreferrer"},"CORS"),a(" Ktorプラグインをインストールして設定する必要があります。このプラグインを使用すると、許可されたホスト、HTTPメソッド、クライアントによって設定されたヘッダーなどを設定できます。")],-1)),s[17]||(s[17]=i("h2",{id:"add_dependencies",tabindex:"-1"},[a("依存関係の追加 "),i("a",{class:"header-anchor",href:"#add_dependencies","aria-label":'Permalink to "依存関係の追加 {id="add_dependencies"}"'},"​")],-1)),s[18]||(s[18]=i("p",null,[i("code",null,"CORS"),a("を使用するには、"),i("code",null,"ktor-server-cors"),a("アーティファクトをビルドスクリプトに含める必要があります: ")],-1)),t(k,{group:"languages"},{default:e(()=>[t(p,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:e(()=>[t(l,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-server-cors:$ktor_version")'})]),_:1}),t(p,{title:"Gradle (Groovy)","group-key":"groovy"},{default:e(()=>[t(l,{lang:"Groovy",code:'            implementation "io.ktor:ktor-server-cors:$ktor_version"'})]),_:1}),t(p,{title:"Maven","group-key":"maven"},{default:e(()=>[t(l,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-server-cors-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),s[19]||(s[19]=i("h2",{id:"install_plugin",tabindex:"-1"},[a("CORSのインストール "),i("a",{class:"header-anchor",href:"#install_plugin","aria-label":'Permalink to "CORSのインストール {id="install_plugin"}"'},"​")],-1)),i("p",null,[s[6]||(s[6]=i("code",null,"CORS",-1)),s[7]||(s[7]=a("プラグインをアプリケーションに")),s[8]||(s[8]=i("a",{href:"#install"},"インストール",-1)),s[9]||(s[9]=a("するには、指定された")),t(h,{href:"/ktor/server-modules",summary:"モジュールを使用すると、ルートをグループ化してアプリケーションを構造化できます。"},{default:e(()=>s[5]||(s[5]=[a("モジュール")])),_:1}),s[10]||(s[10]=a("内の")),s[11]||(s[11]=i("code",null,"install",-1)),s[12]||(s[12]=a("関数に渡します。以下のコードスニペットは、")),s[13]||(s[13]=i("code",null,"CORS",-1)),s[14]||(s[14]=a("をインストールする方法を示しています... "))]),t(c,null,{default:e(()=>s[15]||(s[15]=[i("li",null,[a(" ..."),i("code",null,"embeddedServer"),a("関数呼び出し内で。 ")],-1),i("li",null,[a(" ...明示的に定義された"),i("code",null,"module"),a("内（"),i("code",null,"Application"),a("クラスの拡張関数）。 ")],-1)])),_:1}),t(k,null,{default:e(()=>[t(p,{title:"embeddedServer"},{default:e(()=>[t(l,{lang:"kotlin",code:`            import io.ktor.server.engine.*
            import io.ktor.server.netty.*
            import io.ktor.server.application.*
            import io.ktor.server.plugins.cors.*

            fun main() {
                embeddedServer(Netty, port = 8080) {
                    install(CORS)
                    // ...
                }.start(wait = true)
            }`})]),_:1}),t(p,{title:"module"},{default:e(()=>[t(l,{lang:"kotlin",code:`            import io.ktor.server.application.*
            import io.ktor.server.plugins.cors.*
            // ...
            fun Application.module() {
                install(CORS)
                // ...
            }`})]),_:1})]),_:1}),s[20]||(s[20]=F(`<p><code>CORS</code>プラグインは、<a href="#install-route">特定のルートにもインストール</a>できます。これは、異なるアプリケーションリソースに対して異なる<code>CORS</code>構成が必要な場合に役立ちます。 </p><blockquote><p><code>CORS</code>プラグインを特定のルートにインストールする場合、このルートに<code>options</code> <a href="./server-routing#define_route">ハンドラー</a>を追加する必要があります。これにより、KtorはCORSプリフライトリクエストに正しく応答できます。</p></blockquote><h2 id="configure" tabindex="-1">CORSの設定 <a class="header-anchor" href="#configure" aria-label="Permalink to &quot;CORSの設定 {id=&quot;configure&quot;}&quot;">​</a></h2><p>CORS固有の設定は、<a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-cors/io.ktor.server.plugins.cors/-c-o-r-s-config/index.html" target="_blank" rel="noreferrer">CORSConfig</a>クラスによって公開されています。これらの設定を構成する方法を見てみましょう。</p><h3 id="overview" tabindex="-1">概要 <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;概要 {id=&quot;overview&quot;}&quot;">​</a></h3><p><code>8080</code>ポートでリッスンし、<code>/customer</code> <a href="./server-routing">ルート</a>が<a href="./server-serialization#send_data">JSON</a>データを応答するサーバーがあるとします。以下のコードスニペットは、別のポートで動作するクライアントからFetch APIを使用して行われたサンプルリクエストを示しており、このリクエストがクロスオリジンになるようにしています。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> saveCustomer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://0.0.0.0:8080/customer&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            headers: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &#39;Accept&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;application/json&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                &#39;Content-Type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;application/json&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            method: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;POST&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            body: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JSON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({id: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, firstName: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Jet&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, lastName: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Brains&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">response</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Success:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, data);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(data);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Error:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, error);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>バックエンド側でこのようなリクエストを許可するには、<code>CORS</code>プラグインを次のように構成する必要があります:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CORS) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    allowHost</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0.0.0.0:8081&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    allowHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpHeaders.ContentType)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>完全な例はこちらで確認できます: <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/cors" target="_blank" rel="noreferrer">cors</a>。</p><h3 id="hosts" tabindex="-1">ホスト <a class="header-anchor" href="#hosts" aria-label="Permalink to &quot;ホスト {id=&quot;hosts&quot;}&quot;">​</a></h3><p>クロスオリジンリクエストを行うことができる許可されたホストを指定するには、<code>allowHost</code>関数を使用します。ホスト名の他に、ポート番号、サブドメインのリスト、またはサポートされているHTTPスキームを指定できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CORS) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    allowHost</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;client-host&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    allowHost</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;client-host:8081&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    allowHost</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;client-host&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, subDomains </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;en&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;de&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;es&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    allowHost</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;client-host&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, schemes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>任意のホストからのクロスオリジンリクエストを許可するには、<code>anyHost</code>関数を使用します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CORS) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    anyHost</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="methods" tabindex="-1">HTTPメソッド <a class="header-anchor" href="#methods" aria-label="Permalink to &quot;HTTPメソッド {id=&quot;methods&quot;}&quot;">​</a></h3><p>デフォルトでは、<code>CORS</code>プラグインは<code>GET</code>、<code>POST</code>、<code>HEAD</code>のHTTPメソッドを許可します。追加のメソッドを追加するには、<code>allowMethod</code>関数を使用します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CORS) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    allowMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpMethod.Options)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    allowMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpMethod.Put)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    allowMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpMethod.Patch)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    allowMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpMethod.Delete)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="headers" tabindex="-1">ヘッダーの許可 <a class="header-anchor" href="#headers" aria-label="Permalink to &quot;ヘッダーの許可 {id=&quot;headers&quot;}&quot;">​</a></h3><p>デフォルトでは、<code>CORS</code>プラグインは<code>Access-Control-Allow-Headers</code>によって管理される以下のクライアントヘッダーを許可します:</p><ul><li><code>Accept</code></li><li><code>Accept-Language</code></li><li><code>Content-Language</code></li></ul><p>追加のヘッダーを許可するには、<code>allowHeader</code>関数を使用します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CORS) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    allowHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpHeaders.ContentType)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    allowHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpHeaders.Authorization)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>カスタムヘッダーを許可するには、<code>allowHeaders</code>関数または<code>allowHeadersPrefixed</code>関数を使用します。例えば、以下のコードスニペットは、<code>custom-</code>で始まるヘッダーを許可する方法を示しています。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CORS) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    allowHeadersPrefixed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;custom-&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p><code>allowHeaders</code>または<code>allowHeadersPrefixed</code>は、非単純なコンテンツタイプの場合、<a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-cors/io.ktor.server.plugins.cors/-c-o-r-s-config/allow-non-simple-content-types.html" target="_blank" rel="noreferrer">allowNonSimpleContentTypes</a>プロパティを<code>true</code>に設定する必要があることに注意してください。</p></blockquote><h3 id="expose-headers" tabindex="-1">ヘッダーの公開 <a class="header-anchor" href="#expose-headers" aria-label="Permalink to &quot;ヘッダーの公開 {id=&quot;expose-headers&quot;}&quot;">​</a></h3><p><code>Access-Control-Expose-Headers</code>ヘッダーは、ブラウザのJavaScriptがアクセスできる許可リストに指定されたヘッダーを追加します。このようなヘッダーを構成するには、<code>exposeHeader</code>関数を使用します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CORS) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    exposeHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;X-My-Custom-Header&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    exposeHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;X-Another-Custom-Header&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="credentials" tabindex="-1">認証情報 <a class="header-anchor" href="#credentials" aria-label="Permalink to &quot;認証情報 {id=&quot;credentials&quot;}&quot;">​</a></h3><p>デフォルトでは、ブラウザはクロスオリジンリクエストで認証情報（クッキーや認証情報など）を送信しません。この情報の受け渡しを許可するには、<code>allowCredentials</code>プロパティを使用して<code>Access-Control-Allow-Credentials</code>応答ヘッダーを<code>true</code>に設定します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CORS) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    allowCredentials </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="misc" tabindex="-1">その他 <a class="header-anchor" href="#misc" aria-label="Permalink to &quot;その他 {id=&quot;misc&quot;}&quot;">​</a></h3><p><code>CORS</code>プラグインは、他のCORS関連の設定も指定できます。例えば、<code>maxAgeInSeconds</code>を使用すると、プリフライトリクエストに対する応答を、別のプリフライトリクエストを送信することなくキャッシュできる期間を指定できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CORS) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    maxAgeInSeconds </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3600</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>その他の設定オプションについては、<a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-cors/io.ktor.server.plugins.cors/-c-o-r-s-config/index.html" target="_blank" rel="noreferrer">CORSConfig</a>で確認できます。</p>`,36))])}const O=g(C,[["render",v]]);export{H as __pageData,O as default};
