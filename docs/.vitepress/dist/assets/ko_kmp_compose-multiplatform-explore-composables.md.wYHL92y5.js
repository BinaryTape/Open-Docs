import{_ as k}from"./chunks/icon-1-done.B5D6C9SU.js";import{_ as o}from"./chunks/icon-2.D_3lm1kb.js";import{_ as r}from"./chunks/icon-3-todo.aEuKIG4W.js";import{_ as d}from"./chunks/icon-4-todo.DqbNYzPe.js";import{_ as E,C as l,c as g,o as c,j as i,G as n,ag as y,a,w as e}from"./chunks/framework.Bksy39di.js";const I=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kmp/compose-multiplatform-explore-composables.md","filePath":"ko/kmp/compose-multiplatform-explore-composables.md","lastUpdated":1755516278000}'),m={name:"ko/kmp/compose-multiplatform-explore-composables.md"};function u(F,s,C,b,f,A){const t=l("secondary-label"),p=l("Links"),h=l("tldr");return c(),g("div",null,[s[18]||(s[18]=i("h1",{id:"컴포저블-코드-살펴보기",tabindex:"-1"},[a("컴포저블 코드 살펴보기 "),i("a",{class:"header-anchor",href:"#컴포저블-코드-살펴보기","aria-label":'Permalink to "컴포저블 코드 살펴보기"'},"​")],-1)),n(t,{ref:"IntelliJ IDEA"},null,512),n(t,{ref:"Android Studio"},null,512),n(h,null,{default:e(()=>[s[15]||(s[15]=i("p",null,"이 튜토리얼은 IntelliJ IDEA를 사용하지만, Android Studio에서도 따라 할 수 있습니다. 두 IDE 모두 동일한 핵심 기능과 Kotlin Multiplatform 지원을 공유합니다.",-1)),s[16]||(s[16]=i("br",null,null,-1)),s[17]||(s[17]=i("p",null,[a("이 튜토리얼은 "),i("strong",null,"공유 로직 및 UI로 Compose Multiplatform 앱 만들기"),a(" 튜토리얼의 두 번째 파트입니다. 계속 진행하기 전에 이전 단계를 완료했는지 확인하세요.")],-1)),i("p",null,[s[1]||(s[1]=i("img",{src:k,width:"20",alt:"First step"},null,-1)),s[2]||(s[2]=a()),n(p,{href:"/kmp/compose-multiplatform-create-first-app",summary:"이 튜토리얼은 IntelliJ IDEA를 사용하지만, Android Studio에서도 따라 할 수 있습니다. 두 IDE는 동일한 핵심 기능과 Kotlin Multiplatform 지원을 공유합니다. 이 튜토리얼은 '공유 로직 및 UI로 Compose Multiplatform 앱 만들기' 튜토리얼의 첫 번째 파트입니다. Compose Multiplatform 앱 만들기 컴포저블 코드 살펴보기 프로젝트 수정하기 나만의 애플리케이션 만들기"},{default:e(()=>s[0]||(s[0]=[a("Compose Multiplatform 앱 만들기")])),_:1}),s[3]||(s[3]=i("br",null,null,-1)),s[4]||(s[4]=i("img",{src:o,width:"20",alt:"Second step"},null,-1)),s[5]||(s[5]=a()),s[6]||(s[6]=i("strong",null,"컴포저블 코드 살펴보기",-1)),s[7]||(s[7]=i("br",null,null,-1)),s[8]||(s[8]=i("img",{src:r,width:"20",alt:"Third step"},null,-1)),s[9]||(s[9]=a(" 프로젝트 수정하기")),s[10]||(s[10]=i("br",null,null,-1)),s[11]||(s[11]=i("br",null,null,-1)),s[12]||(s[12]=i("img",{src:d,width:"20",alt:"Fourth step"},null,-1)),s[13]||(s[13]=a(" 나만의 애플리케이션 만들기")),s[14]||(s[14]=i("br",null,null,-1))])]),_:1}),s[19]||(s[19]=y(`<p>Kotlin Multiplatform 위자드가 생성한 샘플 컴포저블을 자세히 살펴보겠습니다. 첫째, 공통 UI를 구현하고 모든 플랫폼에서 사용할 수 있는 컴포저블 <code>App()</code> 함수가 있습니다. 둘째, 각 플랫폼에서 이 UI를 실행하는 플랫폼별 코드가 있습니다.</p><h2 id="컴포저블-함수-구현하기" tabindex="-1">컴포저블 함수 구현하기 <a class="header-anchor" href="#컴포저블-함수-구현하기" aria-label="Permalink to &quot;컴포저블 함수 구현하기&quot;">​</a></h2><p><code>composeApp/src/commonMain/kotlin/App.kt</code> 파일에서 <code>App()</code> 함수를 살펴보세요.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Composable</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Preview</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  MaterialTheme</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> showContent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> remember</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mutableStateOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Column</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      modifier </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Modifier</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">safeContentPadding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fillMaxSize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      horizontalAlignment </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Alignment.CenterHorizontally,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      Button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(onClick </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { showContent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">showContent }) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Click me!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      AnimatedVisibility</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(showContent) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> greeting </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> remember</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Greeting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        Column</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Modifier.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fillMaxWidth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), horizontalAlignment </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Alignment.CenterHorizontally) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          Image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">painterResource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Res.drawable.compose_multiplatform), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Compose: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$greeting</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>App()</code> 함수는 <code>@Composable</code> 어노테이션이 지정된 일반 Kotlin 함수입니다. 이러한 종류의 함수를 <em>컴포저블 함수</em> 또는 단순히 _컴포저블_이라고 합니다. 이들은 Compose Multiplatform을 기반으로 하는 UI의 구성 요소입니다.</p><p>컴포저블 함수는 다음과 같은 일반적인 구조를 가집니다.</p><ul><li><code>MaterialTheme</code>은 애플리케이션의 모양을 설정합니다. 기본 설정은 사용자 정의할 수 있습니다. 예를 들어, 색상, 모양 및 타이포그래피를 선택할 수 있습니다.</li><li><code>Column</code> 컴포저블은 애플리케이션의 레이아웃을 제어합니다. 여기서는 <code>AnimatedVisibility</code> 컴포저블 위에 <code>Button</code>을 표시합니다.</li><li><code>Button</code>에는 일부 텍스트를 렌더링하는 <code>Text</code> 컴포저블이 포함됩니다.</li><li><code>AnimatedVisibility</code>는 애니메이션을 사용하여 <code>Image</code>를 표시하거나 숨깁니다.</li><li><code>painterResource</code>는 XML 리소스에 저장된 벡터 아이콘을 로드합니다.</li></ul><p><code>Column</code>의 <code>horizontalAlignment</code> 파라미터는 콘텐츠를 중앙에 정렬합니다. 그러나 이것이 효과를 내려면 컬럼이 컨테이너의 전체 너비를 차지해야 합니다. 이는 <code>modifier</code> 파라미터를 사용하여 달성됩니다.</p><p>수정자(Modifiers)는 Compose Multiplatform의 핵심 구성 요소입니다. 이는 UI에서 컴포저블의 모양이나 동작을 조정하는 데 사용하는 주요 메커니즘입니다. 수정자는 <code>Modifier</code> 타입의 메서드를 사용하여 생성됩니다. 이 메서드들을 체인으로 연결하면, 각 호출이 이전 호출에서 반환된 <code>Modifier</code>를 변경할 수 있으므로 순서가 중요합니다. 자세한 내용은 <a href="https://developer.android.com/jetpack/compose/modifiers" target="_blank" rel="noreferrer">JetPack Compose 문서</a>를 참조하세요.</p><h3 id="상태-관리하기" tabindex="-1">상태 관리하기 <a class="header-anchor" href="#상태-관리하기" aria-label="Permalink to &quot;상태 관리하기&quot;">​</a></h3><p>샘플 컴포저블의 마지막 측면은 상태가 관리되는 방식입니다. <code>App</code> 컴포저블의 <code>showContent</code> 속성은 <code>mutableStateOf()</code> 함수를 사용하여 빌드됩니다. 이는 관찰할 수 있는 상태 객체임을 의미합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> showContent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> remember</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mutableStateOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span></code></pre></div><p>상태 객체는 <code>remember()</code> 함수 호출로 래핑되어 한 번 빌드된 다음 프레임워크에 의해 유지됩니다. 이를 실행하면 값이 부울을 포함하는 상태 객체인 속성을 생성하게 됩니다. 프레임워크는 이 상태 객체를 캐시하여 컴포저블이 이를 관찰할 수 있도록 합니다.</p><p>상태의 값이 변경되면 이를 관찰하는 모든 컴포저블이 다시 호출됩니다. 이를 통해 생성된 위젯이 다시 그려질 수 있습니다. 이를 _리컴포지션_이라고 합니다.</p><p>애플리케이션에서 상태가 변경되는 유일한 곳은 버튼의 클릭 이벤트입니다. <code>onClick</code> 이벤트 핸들러는 <code>showContent</code> 속성의 값을 전환합니다. 결과적으로 부모 <code>AnimatedVisibility</code> 컴포저블이 <code>showContent</code>를 관찰하기 때문에 <code>Greeting().greet()</code> 호출과 함께 이미지가 표시되거나 숨겨집니다.</p><h2 id="다른-플랫폼에서-ui-실행하기" tabindex="-1">다른 플랫폼에서 UI 실행하기 <a class="header-anchor" href="#다른-플랫폼에서-ui-실행하기" aria-label="Permalink to &quot;다른 플랫폼에서 UI 실행하기&quot;">​</a></h2><p><code>App()</code> 함수 실행은 플랫폼마다 다릅니다. Android에서는 액티비티로, iOS에서는 뷰 컨트롤러로, 데스크톱에서는 창으로, 웹에서는 컨테이너로 관리됩니다. 각각을 살펴보겠습니다.</p><h3 id="android에서" tabindex="-1">Android에서 <a class="header-anchor" href="#android에서" aria-label="Permalink to &quot;Android에서&quot;">​</a></h3><p>Android의 경우, <code>composeApp/src/androidMain/kotlin</code> 파일에서 <code>MainActivity.kt</code>를 엽니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MainActivity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ComponentActivity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onCreate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(savedInstanceState: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Bundle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        enableEdgeToEdge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onCreate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(savedInstanceState)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        setContent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>이것은 <code>App</code> 컴포저블을 호출하는 <code>MainActivity</code>라는 <a href="https://developer.android.com/guide/components/activities/intro-activities" target="_blank" rel="noreferrer">Android 액티비티</a>입니다.</p><h3 id="ios에서" tabindex="-1">iOS에서 <a class="header-anchor" href="#ios에서" aria-label="Permalink to &quot;iOS에서&quot;">​</a></h3><p>iOS의 경우, <code>composeApp/src/iosMain/kotlin</code> 파일에서 <code>MainViewController.kt</code>를 엽니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MainViewController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ComposeUIViewController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span></code></pre></div><p>이것은 Android의 액티비티와 동일한 역할을 수행하는 <a href="https://developer.apple.com/documentation/uikit/view_controllers" target="_blank" rel="noreferrer">뷰 컨트롤러</a>입니다. iOS와 Android 타입 모두 단순히 <code>App</code> 컴포저블을 호출한다는 점에 유의하세요.</p><h3 id="데스크톱에서" tabindex="-1">데스크톱에서 <a class="header-anchor" href="#데스크톱에서" aria-label="Permalink to &quot;데스크톱에서&quot;">​</a></h3><p>데스크톱의 경우, <code>composeApp/src/desktopMain/kotlin</code> 파일에서 <code>main()</code> 함수를 살펴보세요.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(onCloseRequest </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exitApplication</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, title </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;ComposeDemo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>여기서 <code>application()</code> 함수는 새로운 데스크톱 애플리케이션을 실행합니다.</li><li>이 함수는 UI를 초기화하는 람다를 받습니다. 일반적으로 <code>Window</code>를 생성하고 창이 닫힐 때 프로그램이 어떻게 반응해야 하는지를 지시하는 속성과 명령을 지정합니다. 이 경우 전체 애플리케이션이 종료됩니다.</li><li>이 창 안에 콘텐츠를 배치할 수 있습니다. Android 및 iOS와 마찬가지로 유일한 콘텐츠는 <code>App()</code> 함수입니다.</li></ul><p>현재 <code>App</code> 함수는 어떤 파라미터도 선언하지 않습니다. 더 큰 애플리케이션에서는 일반적으로 플랫폼별 종속성에 파라미터를 전달합니다. 이러한 종속성은 직접 생성하거나 의존성 주입 라이브러리를 사용하여 생성할 수 있습니다.</p><h3 id="웹에서" tabindex="-1">웹에서 <a class="header-anchor" href="#웹에서" aria-label="Permalink to &quot;웹에서&quot;">​</a></h3><p><code>composeApp/src/wasmJsMain/kotlin/main.kt</code> 파일에서 <code>main()</code> 함수를 살펴보세요.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalComposeUiApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ComposeViewport</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(document.body</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><code>@OptIn(ExperimentalComposeUiApi::class)</code> 어노테이션은 실험용으로 표시되었으며 향후 릴리스에서 변경될 수 있는 API를 사용하고 있음을 컴파일러에 알립니다.</li><li><code>ComposeViewport()</code> 함수는 애플리케이션의 Compose 환경을 설정합니다.</li><li>웹 앱은 <code>ComposeViewport</code> 함수의 파라미터로 지정된 컨테이너에 삽입됩니다. 이 예제에서는 문서의 전체 본문이 컨테이너로 작동합니다.</li><li><code>App()</code> 함수는 Jetpack Compose를 사용하여 애플리케이션의 UI 컴포넌트를 빌드하는 역할을 합니다.</li></ul><h2 id="다음-단계" tabindex="-1">다음 단계 <a class="header-anchor" href="#다음-단계" aria-label="Permalink to &quot;다음 단계&quot;">​</a></h2><p>튜토리얼의 다음 부분에서는 프로젝트에 종속성을 추가하고 사용자 인터페이스를 수정할 것입니다.</p><p><strong><a href="./compose-multiplatform-modify-project">다음 파트로 진행하기</a></strong></p><h2 id="도움-받기" tabindex="-1">도움 받기 <a class="header-anchor" href="#도움-받기" aria-label="Permalink to &quot;도움 받기&quot;">​</a></h2><ul><li><strong>Kotlin Slack</strong>. <a href="https://surveys.jetbrains.com/s3/kotlin-slack-sign-up" target="_blank" rel="noreferrer">초대 받기</a> 및 <a href="https://kotlinlang.slack.com/archives/C3PQML5NU" target="_blank" rel="noreferrer">#multiplatform</a> 채널에 참여하세요.</li><li><strong>Kotlin 이슈 트래커</strong>. <a href="https://youtrack.jetbrains.com/newIssue?project=KT" target="_blank" rel="noreferrer">새 이슈 보고하기</a>.</li></ul>`,39))])}const w=E(m,[["render",u]]);export{I as __pageData,w as default};
