import{_ as t,a as e,b as l,c as n}from"./chunks/wasm-composeapp-browser.n73x6mgF.js";import{_ as p,a as r}from"./chunks/wasm-custom-formatters-firefox.C2LVO8ja.js";import{_ as o,a as h,b as k,c as d,d as c,e as g}from"./chunks/wasm-debug-scope.e8jm_6Gj.js";import{_ as m}from"./chunks/slack.7XnOPcJK.js";import{_ as E,c as u,o as b,ag as i,j as a,a as y}from"./chunks/framework.Bksy39di.js";const j=JSON.parse('{"title":"Kotlin/Wasm 코드 디버그","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kotlin/wasm-debugging.md","filePath":"ko/kotlin/wasm-debugging.md","lastUpdated":1754307826000}'),f={name:"ko/kotlin/wasm-debugging.md"};function _(v,s,F,w,C,D){return b(),u("div",null,s[0]||(s[0]=[i('<h1 id="kotlin-wasm-코드-디버그" tabindex="-1">Kotlin/Wasm 코드 디버그 <a class="header-anchor" href="#kotlin-wasm-코드-디버그" aria-label="Permalink to &quot;Kotlin/Wasm 코드 디버그&quot;">​</a></h1><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Kotlin/Wasm은 <a href="/ko/kotlin/components-stability">알파</a> 단계입니다. 언제든지 변경될 수 있습니다.</p></div><p>이 튜토리얼에서는 Kotlin/Wasm으로 빌드된 <a href="https://www.jetbrains.com/lp/compose-multiplatform/" target="_blank" rel="noreferrer">Compose Multiplatform</a> 애플리케이션을 브라우저에서 디버그하는 방법을 보여줍니다.</p><h2 id="시작하기-전에" tabindex="-1">시작하기 전에 <a class="header-anchor" href="#시작하기-전에" aria-label="Permalink to &quot;시작하기 전에&quot;">​</a></h2><p>Kotlin Multiplatform 마법사를 사용하여 프로젝트를 생성하세요:</p><ol><li><p><a href="https://kmp.jetbrains.com/#newProject" target="_blank" rel="noreferrer">Kotlin Multiplatform 마법사</a>를 엽니다.</p></li><li><p><strong>New Project</strong> 탭에서 프로젝트 이름과 ID를 원하는 대로 변경합니다. 이 튜토리얼에서는 이름을 &quot;WasmDemo&quot;로, ID를 &quot;wasm.project.demo&quot;로 설정합니다.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>이것은 프로젝트 디렉토리의 이름과 ID입니다. 그대로 두셔도 됩니다.</p></div></li><li><p><strong>Web</strong> 옵션을 선택합니다. 다른 옵션은 선택되지 않았는지 확인합니다.</p></li><li><p><strong>Download</strong> 버튼을 클릭하고 결과 아카이브의 압축을 해제합니다.</p><p><img src="'+t+'" alt="Kotlin Multiplatform wizard" width="450"></p></li></ol><h2 id="intellij-idea에서-프로젝트-열기" tabindex="-1">IntelliJ IDEA에서 프로젝트 열기 <a class="header-anchor" href="#intellij-idea에서-프로젝트-열기" aria-label="Permalink to &quot;IntelliJ IDEA에서 프로젝트 열기&quot;">​</a></h2><ol><li>최신 버전의 <a href="https://www.jetbrains.com/idea/" target="_blank" rel="noreferrer">IntelliJ IDEA</a>를 다운로드하여 설치합니다.</li><li>IntelliJ IDEA 시작 화면에서 <strong>Open</strong>을 클릭하거나 메뉴 바에서 <strong>File | Open</strong>을 선택합니다.</li><li>압축을 해제한 &quot;WasmDemo&quot; 폴더로 이동하여 <strong>Open</strong>을 클릭합니다.</li></ol><h2 id="애플리케이션-실행" tabindex="-1">애플리케이션 실행 <a class="header-anchor" href="#애플리케이션-실행" aria-label="Permalink to &quot;애플리케이션 실행&quot;">​</a></h2><ol><li><p>IntelliJ IDEA에서 <strong>View</strong> | <strong>Tool Windows</strong> | <strong>Gradle</strong>을 선택하여 <strong>Gradle</strong> 도구 창을 엽니다.</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>작업이 성공적으로 로드되려면 Gradle JVM으로 최소 Java 11이 필요합니다.</p></div></li><li><p><strong>composeApp</strong> | <strong>Tasks</strong> | <strong>kotlin browser</strong>에서 <strong>wasmJsBrowserDevelopmentRun</strong> 작업을 선택하고 실행합니다.</p><p><img src="'+e+'" alt="Run the Gradle task" width="450"></p><p>또는 <code>WasmDemo</code> 루트 디렉토리에서 터미널에 다음 명령어를 실행할 수 있습니다:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wasmJsBrowserDevelopmentRun</span></span></code></pre></div></li><li><p>애플리케이션이 시작되면 브라우저에서 다음 URL을 엽니다:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">http://localhost:8080/</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>포트 번호는 8080 포트가 사용 불가능할 수 있으므로 달라질 수 있습니다. 실제 포트 번호는 Gradle 빌드 콘솔에 출력됩니다.</p></div><p>&quot;Click me!&quot; 버튼이 보입니다. 클릭하세요:</p><p><img src="'+l+'" alt="Click me" width="550"></p><p>이제 Compose Multiplatform 로고가 보입니다:</p><p><img src="'+n+'" alt="Compose app in browser" width="550"></p></li></ol><h2 id="브라우저에서-디버그" tabindex="-1">브라우저에서 디버그 <a class="header-anchor" href="#브라우저에서-디버그" aria-label="Permalink to &quot;브라우저에서 디버그&quot;">​</a></h2><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>현재 디버깅은 브라우저에서만 가능합니다. 향후 <a href="https://youtrack.jetbrains.com/issue/KT-64683/Kotlin-Wasm-debugging-in-IntelliJ-IDEA" target="_blank" rel="noreferrer">IntelliJ IDEA</a>에서도 코드를 디버그할 수 있게 될 것입니다.</p></div><p>별도의 설정 없이 브라우저에서 이 Compose Multiplatform 애플리케이션을 즉시 디버그할 수 있습니다.</p><p>하지만 다른 프로젝트의 경우, Gradle 빌드 파일에 추가 설정을 구성해야 할 수도 있습니다. 브라우저 디버깅 구성 방법에 대한 자세한 내용은 다음 섹션을 펼쳐보세요.</p>',14),a("h3",{"initial-collapse-state":"collapsed",collapsible:"true",id:"브라우저-디버깅-구성",tabindex:"-1"},[y("브라우저 디버깅 구성 "),a("a",{class:"header-anchor",href:"#브라우저-디버깅-구성","aria-label":'Permalink to "브라우저 디버깅 구성 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1),i(`<h4 id="프로젝트-소스에-대한-접근-활성화" tabindex="-1">프로젝트 소스에 대한 접근 활성화 <a class="header-anchor" href="#프로젝트-소스에-대한-접근-활성화" aria-label="Permalink to &quot;프로젝트 소스에 대한 접근 활성화&quot;">​</a></h4><p>기본적으로 브라우저는 디버깅에 필요한 프로젝트의 일부 소스에 접근할 수 없습니다. 접근을 제공하려면 Webpack DevServer가 이러한 소스를 제공하도록 구성할 수 있습니다. <code>ComposeApp</code> 디렉토리에 있는 <code>build.gradle.kts</code> 파일에 다음 코드 스니펫을 추가하세요.</p><p>다음 import 문을 최상위 선언으로 추가합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.kotlin.gradle.targets.js.webpack.KotlinWebpackConfig</span></span></code></pre></div><p><code>kotlin{}</code> 내의 <code>wasmJs{}</code> 타겟 DSL 및 <code>browser{}</code> 플랫폼 DSL 안에 있는 <code>commonWebpackConfig{}</code> 블록 내부에 이 코드 스니펫을 추가합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">devServer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (devServer ?: KotlinWebpackConfig.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DevServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    static </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (static ?: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mutableListOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Serve sources to debug inside browser</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(project.rootDir.path)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(project.projectDir.path)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>결과적인 코드 블록은 다음과 같습니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalWasmDsl::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    wasmJs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        moduleName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;composeApp&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        browser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            commonWebpackConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                outputFileName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;composeApp.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                devServer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (devServer ?: KotlinWebpackConfig.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DevServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    static </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (static ?: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mutableListOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                        // Serve sources to debug inside browser</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                        add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(project.rootDir.path)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                        add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(project.projectDir.path)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                } </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>현재 라이브러리 소스를 디버그할 수 없습니다. <a href="https://youtrack.jetbrains.com/issue/KT-64685" target="_blank" rel="noreferrer">향후 지원될 예정입니다</a>.</p></div><h4 id="커스텀-포맷터-사용" tabindex="-1">커스텀 포맷터 사용 <a class="header-anchor" href="#커스텀-포맷터-사용" aria-label="Permalink to &quot;커스텀 포맷터 사용&quot;">​</a></h4><p>커스텀 포맷터는 Kotlin/Wasm 코드를 디버깅할 때 변수 값을 더 사용자 친화적이고 이해하기 쉽게 표시하고 찾을 수 있도록 돕습니다.</p><p>커스텀 포맷터는 개발 빌드에서 기본적으로 활성화되어 있으므로, 추가적인 Gradle 구성이 필요하지 않습니다.</p><p>이 기능은 <a href="https://firefox-source-docs.mozilla.org/devtools-user/custom_formatters/index.html" target="_blank" rel="noreferrer">커스텀 포맷터 API</a>를 사용하므로 Firefox 및 Chromium 기반 브라우저에서 지원됩니다.</p><p>이 기능을 사용하려면 브라우저의 개발자 도구에서 커스텀 포맷터가 활성화되어 있는지 확인하세요:</p><ul><li><p>Chrome DevTools에서 <strong>Settings | Preferences | Console</strong>에서 커스텀 포맷터 체크박스를 찾으세요:</p><p><img src="`+p+'" alt="Enable custom formatters in Chrome" width="400"></p></li><li><p>Firefox DevTools에서 <strong>Settings | Advanced settings</strong>에서 커스텀 포맷터 체크박스를 찾으세요:</p><p><img src="'+r+`" alt="Enable custom formatters in Firefox" width="400"></p></li></ul><p>커스텀 포맷터는 Kotlin/Wasm 개발 빌드에서 작동합니다. 프로덕션 빌드에 대한 특정 요구사항이 있는 경우, 그에 따라 Gradle 구성을 조정해야 합니다. <code>wasmJs {}</code> 블록에 다음 컴파일러 옵션을 추가하세요:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    wasmJs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            freeCompilerArgs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xwasm-debugger-custom-formatters&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>커스텀 포맷터를 활성화한 후, 디버깅 튜토리얼을 계속 진행할 수 있습니다.</p><h3 id="kotlin-wasm-애플리케이션-디버그" tabindex="-1">Kotlin/Wasm 애플리케이션 디버그 <a class="header-anchor" href="#kotlin-wasm-애플리케이션-디버그" aria-label="Permalink to &quot;Kotlin/Wasm 애플리케이션 디버그&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>이 튜토리얼은 Chrome 브라우저를 사용하지만, 다른 브라우저에서도 이 단계를 따를 수 있어야 합니다. 자세한 내용은 <a href="/ko/kotlin/wasm-troubleshooting#browser-versions">브라우저 버전</a>을 참조하세요.</p></div><ol><li><p>애플리케이션의 브라우저 창에서 마우스 오른쪽 버튼을 클릭하고 <strong>Inspect</strong> 작업을 선택하여 개발자 도구에 접근합니다. 또는 <strong>F12</strong> 단축키를 사용하거나 <strong>View | Developer | Developer Tools</strong>를 선택할 수 있습니다.</p></li><li><p><strong>Sources</strong> 탭으로 전환하여 디버그할 Kotlin 파일을 선택합니다. 이 튜토리얼에서는 <code>Greeting.kt</code> 파일을 사용할 것입니다.</p></li><li><p>줄 번호를 클릭하여 검사하려는 코드에 중단점(breakpoint)을 설정합니다. 숫자가 더 어두운 줄에만 중단점을 설정할 수 있습니다.</p><p><img src="`+o+'" alt="Set breakpoints" width="700"></p></li><li><p><strong>Click me!</strong> 버튼을 클릭하여 애플리케이션과 상호작용합니다. 이 동작은 코드 실행을 트리거하며, 실행이 중단점에 도달하면 디버거가 일시 중지됩니다.</p></li><li><p>디버깅 창에서 디버깅 제어 버튼을 사용하여 중단점에서 변수와 코드 실행을 검사합니다:</p><ul><li><img src="'+h+'" alt="Step into" width="30" type="joined"> 함수를 더 깊이 조사하려면 Step into를 사용합니다.</li><li><img src="'+k+'" alt="Step over" width="30" type="joined"> 현재 줄을 실행하고 다음 줄에서 일시 중지하려면 Step over를 사용합니다.</li><li><img src="'+d+'" alt="Step out" width="30" type="joined"> 현재 함수를 종료할 때까지 코드를 실행하려면 Step out을 사용합니다.</li></ul><p><img src="'+c+'" alt="Debug controls" width="450"></p></li><li><p><strong>Call stack</strong> 및 <strong>Scope</strong> 창을 확인하여 함수 호출 순서를 추적하고 오류의 위치를 파악합니다.</p><p><img src="'+g+'" alt="Check call stack" width="450"></p><p>변수 값의 향상된 시각화를 위해 <a href="#configure-your-browser-for-debugging">브라우저 디버깅 구성</a> 섹션 내의 _커스텀 포맷터 사용_을 참조하세요.</p></li><li><p>코드를 변경하고 <a href="#run-the-application">애플리케이션을 다시 실행</a>하여 모든 것이 예상대로 작동하는지 확인합니다.</p></li><li><p>중단점이 설정된 줄 번호를 클릭하여 중단점을 제거합니다.</p></li></ol><h2 id="피드백-남기기" tabindex="-1">피드백 남기기 <a class="header-anchor" href="#피드백-남기기" aria-label="Permalink to &quot;피드백 남기기&quot;">​</a></h2><p>디버깅 경험에 대한 피드백을 주시면 감사하겠습니다!</p><ul><li><img src="'+m+'" alt="Slack" width="25" type="joined"> Slack: <a href="https://surveys.jetbrains.com/s3/kotlin-slack-sign-up" target="_blank" rel="noreferrer">Slack 초대</a>를 받아 저희 <a href="https://kotlinlang.slack.com/archives/CDFP59223" target="_blank" rel="noreferrer">#webassembly</a> 채널에서 개발자에게 직접 피드백을 제공하세요.</li><li><a href="https://youtrack.jetbrains.com/issue/KT-56492" target="_blank" rel="noreferrer">YouTrack</a>에 피드백을 제공하세요.</li></ul><h2 id="다음-단계" tabindex="-1">다음 단계 <a class="header-anchor" href="#다음-단계" aria-label="Permalink to &quot;다음 단계&quot;">​</a></h2><ul><li>이 <a href="https://www.youtube.com/watch?v=t3FUWfJWrjU&amp;t=2703s" target="_blank" rel="noreferrer">YouTube 비디오</a>에서 Kotlin/Wasm 디버깅 실습을 확인하세요.</li><li><code>kotlin-wasm-examples</code> 저장소에서 Kotlin/Wasm 예제를 시도해보세요: <ul><li><a href="https://github.com/Kotlin/kotlin-wasm-examples/tree/main/compose-imageviewer" target="_blank" rel="noreferrer">Compose image viewer</a></li><li><a href="https://github.com/Kotlin/kotlin-wasm-examples/tree/main/compose-jetsnack" target="_blank" rel="noreferrer">Jetsnack application</a></li><li><a href="https://github.com/Kotlin/kotlin-wasm-examples/tree/main/nodejs-example" target="_blank" rel="noreferrer">Node.js example</a></li><li><a href="https://github.com/Kotlin/kotlin-wasm-examples/tree/main/wasi-example" target="_blank" rel="noreferrer">WASI example</a></li><li><a href="https://github.com/Kotlin/kotlin-wasm-examples/tree/main/compose-example" target="_blank" rel="noreferrer">Compose example</a></li></ul></li></ul>',26)]))}const T=E(f,[["render",_]]);export{j as __pageData,T as default};
