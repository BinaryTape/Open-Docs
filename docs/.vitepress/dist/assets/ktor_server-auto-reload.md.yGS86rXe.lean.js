import{_ as y,C as r,c as x,o as S,G as n,w as o,j as t,a as e}from"./chunks/framework.Bksy39di.js";const L=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ktor/server-auto-reload.md","filePath":"ktor/server-auto-reload.md","lastUpdated":1755457140000}'),A={name:"ktor/server-auto-reload.md"};function N(P,l,E,I,K,B){const f=r("tldr"),k=r("link-summary"),a=r("Links"),b=r("emphasis"),u=r("list"),p=r("chapter"),d=r("Path"),s=r("code-block"),i=r("tab"),m=r("tabs"),g=r("ui-path"),v=r("tip"),w=r("topic");return S(),x("div",null,[n(w,{"xsi:noNamespaceSchemaLocation":"https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd","xmlns:xsi":"http://www.w3.org/2001/XMLSchema-instance",title:"自动重载",id:"server-auto-reload","help-id":"Auto_reload"},{default:o(()=>[n(f,null,{default:o(()=>l[0]||(l[0]=[t("p",null,[t("b",null,"代码示例"),e(": "),t("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/autoreload-engine-main"},"autoreload-engine-main"),e(", "),t("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/autoreload-embedded-server"},"autoreload-embedded-server")],-1)])),_:1}),n(k,null,{default:o(()=>l[1]||(l[1]=[e(" 了解如何使用自动重载在代码更改时重新加载应用程序类。 ")])),_:1}),t("p",null,[n(a,{href:"/ktor/server-run",summary:"了解如何运行 Ktor 服务器应用程序。"},{default:o(()=>l[2]||(l[2]=[e("在开发过程中重启")])),_:1}),l[4]||(l[4]=e("服务器可能需要一些时间。 Ktor 允许你通过使用")),n(b,null,{default:o(()=>l[3]||(l[3]=[e("自动重载")])),_:1}),l[5]||(l[5]=e("来克服此限制，它可以在代码更改时重新加载应用程序类，并提供快速反馈循环。 要使用自动重载，请遵循以下步骤： "))]),n(u,{style:{}},{default:o(()=>l[6]||(l[6]=[t("li",null,[t("p",null,[t("a",{href:"#enable"},"启用开发模式")])],-1),t("li",null,[t("p",null,[e(" (可选) "),t("a",{href:"#watch-paths"},"配置监视路径")])],-1),t("li",null,[t("p",null,[t("a",{href:"#recompile"},"启用更改时重新编译")])],-1)])),_:1}),n(p,{title:"启用开发模式",id:"enable"},{default:o(()=>[t("p",null,[l[8]||(l[8]=e(" 要使用自动重载，你首先需要")),l[9]||(l[9]=t("a",{href:"#enable"},"启用",-1)),l[10]||(l[10]=e("开发模式。 这取决于你")),n(a,{href:"/ktor/server-create-and-configure",summary:"了解如何根据你的应用程序部署需求创建服务器。"},{default:o(()=>l[7]||(l[7]=[e("创建和运行服务器")])),_:1}),l[11]||(l[11]=e("的方式： "))]),n(u,null,{default:o(()=>l[12]||(l[12]=[t("li",null,[t("p",null,[e(" 如果你使用 "),t("code",null,"EngineMain"),e(" 运行服务器，请在"),t("a",{href:"#application-conf"},"配置文件"),e("中启用开发模式。 ")])],-1),t("li",null,[t("p",null,[e(" 如果你使用 "),t("code",null,"embeddedServer"),e(" 运行服务器，你可以使用 "),t("a",{href:"#system-property"},"io.ktor.development"),e(" 系统属性。 ")])],-1)])),_:1}),l[13]||(l[13]=t("p",null,[e(" 启用开发模式后，Ktor 将自动监视工作目录中的输出文件。 如果需要，你可以通过指定"),t("a",{href:"#watch-paths"},"监视路径"),e("来缩小监视文件夹的范围。 ")],-1))]),_:1}),n(p,{title:"配置监视路径",id:"watch-paths"},{default:o(()=>[t("p",null,[l[15]||(l[15]=e(" 当你")),l[16]||(l[16]=t("a",{href:"#enable"},"启用",-1)),l[17]||(l[17]=e("开发模式时， Ktor 会开始监视工作目录中的输出文件。 例如，对于一个使用 Gradle 构建的 ")),n(d,null,{default:o(()=>l[14]||(l[14]=[e("ktor-sample")])),_:1}),l[18]||(l[18]=e(" 项目，将监视以下文件夹： "))]),n(s,{code:`            ktor-sample/build/classes/kotlin/main/META-INF
            ktor-sample/build/classes/kotlin/main/com/example
            ktor-sample/build/classes/kotlin/main/com
            ktor-sample/build/classes/kotlin/main
            ktor-sample/build/resources/main`}),t("p",null,[l[20]||(l[20]=e(" 监视路径允许你缩小监视文件夹的范围。 为此，你可以指定监视路径的一部分。 例如，要监视 ")),n(d,null,{default:o(()=>l[19]||(l[19]=[e("ktor-sample/build/classes")])),_:1}),l[21]||(l[21]=e(" 子文件夹中的更改， 请将 ")),l[22]||(l[22]=t("code",null,"classes",-1)),l[23]||(l[23]=e(" 作为监视路径传递。 根据你运行服务器的方式，你可以通过以下方式指定监视路径： "))]),n(u,null,{default:o(()=>[t("li",null,[t("p",null,[l[26]||(l[26]=e(" 在 ")),n(d,null,{default:o(()=>l[24]||(l[24]=[e("application.conf")])),_:1}),l[27]||(l[27]=e(" 或 ")),n(d,null,{default:o(()=>l[25]||(l[25]=[e("application.yaml")])),_:1}),l[28]||(l[28]=e(" 文件中，指定 ")),l[29]||(l[29]=t("code",null,"watch",-1)),l[30]||(l[30]=e(" 选项： "))]),n(m,{group:"config"},{default:o(()=>[n(i,{title:"application.conf","group-key":"hocon"},{default:o(()=>[n(s,{code:`ktor {
    development = true
    deployment {
        watch = [ classes ]
    }
}`})]),_:1}),n(i,{title:"application.yaml","group-key":"yaml"},{default:o(()=>[n(s,{lang:"yaml",code:`ktor:
    development: true
    deployment:
        watch:
            - classes`})]),_:1})]),_:1}),l[31]||(l[31]=t("p",null," 你还可以指定多个监视路径，例如： ",-1)),n(m,{group:"config"},{default:o(()=>[n(i,{title:"application.conf","group-key":"hocon"},{default:o(()=>[n(s,{code:"                            watch = [ classes, resources ]"})]),_:1}),n(i,{title:"application.yaml","group-key":"yaml"},{default:o(()=>[n(s,{lang:"yaml",code:`                            watch:
                                - classes
                                - resources`})]),_:1})]),_:1}),l[32]||(l[32]=t("p",null,[e(" 你可以在这里找到完整示例："),t("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/autoreload-engine-main"},"autoreload-engine-main"),e("。 ")],-1))]),t("li",null,[l[33]||(l[33]=t("p",null,[e(" 如果你正在使用 "),t("code",null,"embeddedServer"),e("，请将监视路径作为 "),t("code",null,"watchPaths"),e(" 形参传递： ")],-1)),n(s,{lang:"Kotlin",code:`fun main() {
    embeddedServer(Netty, port = 8080, watchPaths = listOf("classes"), host = "0.0.0.0", module = Application::module)
        .start(wait = true)
}

fun Application.module() {
    routing {
        get("/") {
            call.respondText("Hello, world!")
        }
    }
}`}),l[34]||(l[34]=t("p",null,[e(" 有关完整示例，请参见 "),t("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/autoreload-embedded-server"}," autoreload-embedded-server "),e(" 。 ")],-1))])]),_:1})]),_:1}),n(p,{title:"更改时重新编译",id:"recompile"},{default:o(()=>[l[40]||(l[40]=t("p",null,[e(" 由于自动重载会检测输出文件中的更改， 你需要重新构建项目。 你可以在 IntelliJ IDEA 中手动执行此操作，或者使用 Gradle 中的 "),t("code",null,"-t"),e(" 命令行选项启用持续构建执行。 ")],-1)),n(u,null,{default:o(()=>[t("li",null,[t("p",null,[l[36]||(l[36]=e(" 要在 IntelliJ IDEA 中手动重新构建项目，请从主菜单中选择 ")),n(g,null,{default:o(()=>l[35]||(l[35]=[e("Build | Rebuild Project")])),_:1}),l[37]||(l[37]=e("。 "))])]),t("li",null,[l[39]||(l[39]=t("p",null,[e(" 要使用 Gradle 自动重新构建项目， 你可以在终端中运行带有 "),t("code",null,"-t"),e(" 选项的 "),t("code",null,"build"),e(" 任务： ")],-1)),n(s,{code:"                    ./gradlew -t build"}),n(v,null,{default:o(()=>[l[38]||(l[38]=t("p",null,[e(" 要在重新加载项目时跳过运行测试，你可以将 "),t("code",null,"-x"),e(" 选项传递给 "),t("code",null,"build"),e(" 任务： ")],-1)),n(s,{code:"                        ./gradlew -t build -x test -i"})]),_:1})])]),_:1})]),_:1})]),_:1})])}const $=y(A,[["render",N]]);export{L as __pageData,$ as default};
