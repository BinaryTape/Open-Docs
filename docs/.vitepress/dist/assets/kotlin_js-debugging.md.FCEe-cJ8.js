import{_ as t,a as r,b as o,c as a,d as i}from"./chunks/ide-console-output.D95j1GLN.js";import{_ as l,c as n,o as s,ag as d}from"./chunks/framework.Bksy39di.js";const j=JSON.parse('{"title":"调试 Kotlin/JS 代码","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/js-debugging.md","filePath":"kotlin/js-debugging.md","lastUpdated":1754307826000}'),p={name:"kotlin/js-debugging.md"};function c(g,e,h,u,m,b){return s(),n("div",null,e[0]||(e[0]=[d('<h1 id="调试-kotlin-js-代码" tabindex="-1">调试 Kotlin/JS 代码 <a class="header-anchor" href="#调试-kotlin-js-代码" aria-label="Permalink to &quot;调试 Kotlin/JS 代码&quot;">​</a></h1><p>JavaScript 源映射提供了打包器或压缩器生成的压缩代码与开发者实际使用的源代码之间的映射关系。通过这种方式，源映射使得在代码执行期间进行调试成为可能。</p><p>Kotlin 多平台 Gradle 插件会自动为项目构建项生成源映射，无需任何额外配置即可使用。</p><h2 id="浏览器中调试" tabindex="-1">浏览器中调试 <a class="header-anchor" href="#浏览器中调试" aria-label="Permalink to &quot;浏览器中调试&quot;">​</a></h2><p>大多数现代浏览器都提供了工具，允许探查页面内容并调试其上执行的代码。关于更多详情，请参考您的浏览器文档。</p><p>要在浏览器中调试 Kotlin/JS：</p><ol><li>通过调用一个可用的 <em>运行</em> Gradle 任务来运行项目，例如在多平台项目中运行 <code>browserDevelopmentRun</code> 或 <code>jsBrowserDevelopmentRun</code>。关于运行 Kotlin/JS，请参阅 <a href="/kotlin/running-kotlin-js#run-the-browser-target">运行 Kotlin/JS</a>。</li><li>在浏览器中导航到该页面并启动其开发者工具（例如，通过右键单击并选择 <strong>检查</strong> 操作）。了解如何在常用浏览器中 <a href="https://balsamiq.com/support/faqs/browserconsole/" target="_blank" rel="noreferrer">找到开发者工具</a>。</li><li>如果您的程序正在向控制台打印信息，请导航到 <strong>控制台</strong> 标签页查看此输出。根据您的浏览器，这些日志可以引用其来源的 Kotlin 源文件和行号：</li></ol><p><img src="'+t+'" alt="Chrome DevTools console" width="600"></p><ol start="4"><li>单击右侧的文件引用以导航到相应的代码行。另外，您可以手动切换到 <strong>源</strong> 标签页并在文件树中找到所需文件。导航到 Kotlin 文件会显示常规的 Kotlin 代码（而非压缩的 JavaScript）：</li></ol><p><img src="'+r+'" alt="Debugging in Chrome DevTools" width="600"></p><p>您现在可以开始调试程序了。通过单击其中一个行号来设置一个断点。开发者工具甚至支持在语句内部设置断点。与常规 JavaScript 代码一样，任何已设置的断点将在页面重新加载后仍然存在。这也使得调试 Kotlin 的 <code>main()</code> 方法成为可能，该方法在脚本首次加载时执行。</p><h2 id="ide-中调试" tabindex="-1">IDE 中调试 <a class="header-anchor" href="#ide-中调试" aria-label="Permalink to &quot;IDE 中调试&quot;">​</a></h2><p><a href="https://www.jetbrains.com/idea/" target="_blank" rel="noreferrer">IntelliJ IDEA Ultimate</a> 提供了一套强大的工具，用于在开发期间调试代码。</p><p>要在 IntelliJ IDEA 中调试 Kotlin/JS，您需要一个 <strong>JavaScript 调试</strong> 配置。要添加这样的调试配置：</p><ol><li>前往 <strong>Run | Edit Configurations</strong>。</li><li>单击 <strong>+</strong> 并选择 <strong>JavaScript Debug</strong>。</li><li>指定配置 <strong>名称</strong> 并提供项目运行的 <strong>URL</strong>（默认为 <code>http://localhost:8080</code>）。</li></ol><p><img src="'+o+'" alt="JavaScript debug configuration" width="700"></p><ol start="4"><li>保存配置。</li></ol><p>了解更多关于 <a href="https://www.jetbrains.com/help/idea/configuring-javascript-debugger.html" target="_blank" rel="noreferrer">设置 JavaScript 调试配置</a>。</p><p>现在您已准备好调试您的项目了！</p><ol><li>通过调用一个可用的 <em>运行</em> Gradle 任务来运行项目，例如在多平台项目中运行 <code>browserDevelopmentRun</code> 或 <code>jsBrowserDevelopmentRun</code>。关于运行 Kotlin/JS，请参阅 <a href="/kotlin/running-kotlin-js#run-the-browser-target">运行 Kotlin/JS</a>。</li><li>通过运行您之前创建的 JavaScript 调试配置来启动调试会话：</li></ol><p><img src="'+a+'" alt="JavaScript debug configuration" width="700"></p><ol start="3"><li>您可以在 IntelliJ IDEA 的 <strong>调试</strong> 窗口中看到程序的控制台输出。输出项引用了其来源的 Kotlin 源文件和行号：</li></ol><p><img src="'+i+'" alt="JavaScript debug output in the IDE" width="700"></p><ol start="4"><li>单击右侧的文件引用以导航到相应的代码行。</li></ol><p>您现在可以使用 IDE 提供的整套工具开始调试程序：断点、步进、表达式求值等等。了解更多关于 <a href="https://www.jetbrains.com/help/idea/debugging-javascript-in-chrome.html" target="_blank" rel="noreferrer">在 IntelliJ IDEA 中调试</a>。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>由于 IntelliJ IDEA 中当前 JavaScript 调试器的局限性，您可能需要重新运行 JavaScript 调试才能使执行在断点处停止。</p></div><h2 id="node-js-中调试" tabindex="-1">Node.js 中调试 <a class="header-anchor" href="#node-js-中调试" aria-label="Permalink to &quot;Node.js 中调试&quot;">​</a></h2><p>如果您的项目面向 Node.js，您可以在此运行时调试它。</p><p>要调试面向 Node.js 的 Kotlin/JS 应用程序：</p><ol><li>通过运行 <code>build</code> Gradle 任务来构建项目。</li><li>在项目目录内的 <code>build/js/packages/your-module/kotlin/</code> 目录中找到 Node.js 的 <code>.js</code> 生成文件。</li><li>按照 <a href="https://nodejs.org/en/docs/guides/debugging-getting-started/#jetbrains-webstorm-2017-1-and-other-jetbrains-ides" target="_blank" rel="noreferrer">Node.js 调试指南</a> 中的说明在 Node.js 中调试它。</li></ol><h2 id="下一步是什么" tabindex="-1">下一步是什么？ <a class="header-anchor" href="#下一步是什么" aria-label="Permalink to &quot;下一步是什么？&quot;">​</a></h2><p>既然您已经知道如何启动 Kotlin/JS 项目的调试会话，接下来请学习如何高效利用调试工具：</p><ul><li>了解如何在 <a href="https://developer.chrome.com/docs/devtools/javascript/" target="_blank" rel="noreferrer">Google Chrome 中调试 JavaScript</a></li><li>熟悉 <a href="https://www.jetbrains.com/help/idea/debugging-javascript-in-chrome.html" target="_blank" rel="noreferrer">IntelliJ IDEA JavaScript 调试器</a></li><li>了解如何 <a href="https://nodejs.org/en/docs/guides/debugging-getting-started/" target="_blank" rel="noreferrer">在 Node.js 中调试</a>。</li></ul><h2 id="如果您遇到任何问题" tabindex="-1">如果您遇到任何问题 <a class="header-anchor" href="#如果您遇到任何问题" aria-label="Permalink to &quot;如果您遇到任何问题&quot;">​</a></h2><p>如果您在调试 Kotlin/JS 时遇到任何问题，请将它们报告给我们的问题跟踪器 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a></p>',35)]))}const J=l(p,[["render",c]]);export{j as __pageData,J as default};
