import{_ as p,C as n,c as d,o as c,ag as s,j as t,a as l,G as a,w as i}from"./chunks/framework.Bksy39di.js";const _=JSON.parse('{"title":"플랫폼 라이브러리","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kotlin/native-platform-libs.md","filePath":"ko/kotlin/native-platform-libs.md","lastUpdated":1754307826000}'),u={name:"ko/kotlin/native-platform-libs.md"};function k(m,e,b,f,h,v){const o=n("tab"),r=n("tabs");return c(),d("div",null,[e[8]||(e[8]=s('<h1 id="플랫폼-라이브러리" tabindex="-1">플랫폼 라이브러리 <a class="header-anchor" href="#플랫폼-라이브러리" aria-label="Permalink to &quot;플랫폼 라이브러리&quot;">​</a></h1><p>운영 체제의 네이티브 서비스에 대한 접근을 제공하기 위해 Kotlin/Native 배포판에는 각 타겟에 특화된 미리 빌드된 라이브러리 세트가 포함되어 있습니다. 이를 <em>플랫폼 라이브러리</em>라고 합니다.</p><p>플랫폼 라이브러리의 패키지는 기본적으로 사용할 수 있습니다. 이를 사용하기 위해 추가 링크 옵션을 지정할 필요가 없습니다. Kotlin/Native 컴파일러는 어떤 플랫폼 라이브러리가 접근되는지 자동으로 감지하여 필요한 라이브러리를 링크합니다.</p><p>그러나 컴파일러 배포판의 플랫폼 라이브러리는 단순히 네이티브 라이브러리에 대한 래퍼와 바인딩입니다. 즉, 로컬 머신에 네이티브 라이브러리 자체(<code>.so</code>, <code>.a</code>, <code>.dylib</code>, <code>.dll</code> 등)를 설치해야 합니다.</p><h2 id="posix-바인딩" tabindex="-1">POSIX 바인딩 <a class="header-anchor" href="#posix-바인딩" aria-label="Permalink to &quot;POSIX 바인딩&quot;">​</a></h2><p>Kotlin은 Android 및 iOS를 포함한 모든 UNIX 및 Windows 기반 타겟에 POSIX 플랫폼 라이브러리를 제공합니다. 이 플랫폼 라이브러리에는 <a href="https://en.wikipedia.org/wiki/POSIX" target="_blank" rel="noreferrer">POSIX 표준</a>을 따르는 플랫폼 구현에 대한 바인딩이 포함되어 있습니다.</p><p>이 라이브러리를 사용하려면 프로젝트로 임포트합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> platform.posix.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p><code>platform.posix</code> 내용은 POSIX 구현의 차이로 인해 플랫폼마다 다릅니다.</p></div><p>각 지원되는 플랫폼에 대한 <code>posix.def</code> 파일의 내용을 다음에서 확인할 수 있습니다:</p><ul><li><a href="https://github.com/JetBrains/kotlin/tree/master/kotlin-native/platformLibs/src/platform/ios/posix.def" target="_blank" rel="noreferrer">iOS</a></li><li><a href="https://github.com/JetBrains/kotlin/tree/master/kotlin-native/platformLibs/src/platform/osx/posix.def" target="_blank" rel="noreferrer">macOS</a></li><li><a href="https://github.com/JetBrains/kotlin/tree/master/kotlin-native/platformLibs/src/platform/tvos/posix.def" target="_blank" rel="noreferrer">tvOS</a></li><li><a href="https://github.com/JetBrains/kotlin/tree/master/kotlin-native/platformLibs/src/platform/watchos/posix.def" target="_blank" rel="noreferrer">watchOS</a></li><li><a href="https://github.com/JetBrains/kotlin/tree/master/kotlin-native/platformLibs/src/platform/linux/posix.def" target="_blank" rel="noreferrer">Linux</a></li><li><a href="https://github.com/JetBrains/kotlin/tree/master/kotlin-native/platformLibs/src/platform/mingw/posix.def" target="_blank" rel="noreferrer">Windows (MinGW)</a></li><li><a href="https://github.com/JetBrains/kotlin/tree/master/kotlin-native/platformLibs/src/platform/android/posix.def" target="_blank" rel="noreferrer">Android</a></li></ul><p>POSIX 플랫폼 라이브러리는 <a href="/ko/kotlin/wasm-overview">WebAssembly</a> 타겟에서는 사용할 수 없습니다.</p><h2 id="인기-있는-네이티브-라이브러리" tabindex="-1">인기 있는 네이티브 라이브러리 <a class="header-anchor" href="#인기-있는-네이티브-라이브러리" aria-label="Permalink to &quot;인기 있는 네이티브 라이브러리&quot;">​</a></h2><p>Kotlin/Native는 OpenGL, zlib, Foundation과 같이 다양한 플랫폼에서 일반적으로 사용되는 다양하고 인기 있는 네이티브 라이브러리에 대한 바인딩을 제공합니다.</p><p>Apple 플랫폼에서는 <a href="/ko/kotlin/native-objc-interop">Objective-C와의 상호 운용성</a> API를 가능하게 하기 위해 <code>objc</code> 라이브러리가 포함되어 있습니다.</p><p>설정에 따라 컴파일러 배포판에서 Kotlin/Native 타겟에 사용 가능한 네이티브 라이브러리를 탐색할 수 있습니다:</p>',16)),t("ul",null,[e[7]||(e[7]=t("li",null,[t("p",null,[t("a",{href:"/ko/kotlin/native-get-started#download-and-install-the-compiler"},"독립 실행형 Kotlin/Native 컴파일러"),l("를 설치한 경우:")]),t("ol",null,[t("li",null,[l("예시로, "),t("code",null,"kotlin-native-prebuilt-macos-aarch64-2.1.0"),l("과 같이 컴파일러 배포판이 포함된 압축 해제된 아카이브로 이동합니다.")]),t("li",null,[t("code",null,"klib/platform"),l(" 디렉터리로 이동합니다.")]),t("li",null,"해당 타겟이 있는 폴더를 선택합니다.")])],-1)),t("li",null,[e[6]||(e[6]=t("p",null,"IDE에서 Kotlin 플러그인을 사용하는 경우 (IntelliJ IDEA 및 Android Studio에 번들로 제공됨):",-1)),t("ol",null,[t("li",null,[e[2]||(e[2]=t("p",null,[l("명령줄 도구에서 다음을 실행하여 "),t("code",null,".konan"),l(" 폴더로 이동합니다:")],-1)),a(r,null,{default:i(()=>[a(o,{title:"macOS 및 Linux"},{default:i(()=>e[0]||(e[0]=[t("div",{class:"language-none vp-adaptive-theme"},[t("button",{title:"Copy Code",class:"copy"}),t("span",{class:"lang"},"none"),t("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[t("code",null,[t("span",{class:"line"},[t("span",null,"~/.konan/")])])])],-1)])),_:1}),a(o,{title:"Windows"},{default:i(()=>e[1]||(e[1]=[t("div",{class:"language-none vp-adaptive-theme"},[t("button",{title:"Copy Code",class:"copy"}),t("span",{class:"lang"},"none"),t("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[t("code",null,[t("span",{class:"line"},[t("span",null,"%\\USERPROFILE%\\.konan")])])])],-1)])),_:1})]),_:1})]),e[3]||(e[3]=t("li",null,[t("p",null,[l("예시로, "),t("code",null,"kotlin-native-prebuilt-macos-aarch64-2.1.0"),l("과 같이 Kotlin/Native 컴파일러 배포판을 엽니다.")])],-1)),e[4]||(e[4]=t("li",null,[t("p",null,[t("code",null,"klib/platform"),l(" 디렉터리로 이동합니다.")])],-1)),e[5]||(e[5]=t("li",null,[t("p",null,"해당 타겟이 있는 폴더를 선택합니다.")],-1))])])]),e[9]||(e[9]=s('<div class="tip custom-block"><p class="custom-block-title">TIP</p><p>지원되는 각 플랫폼 라이브러리의 정의 파일을 탐색하려면: 컴파일러 배포 폴더에서 <code>konan/platformDef</code> 디렉터리로 이동하여 필요한 타겟을 선택하세요.</p></div><h2 id="다음-단계" tabindex="-1">다음 단계 <a class="header-anchor" href="#다음-단계" aria-label="Permalink to &quot;다음 단계&quot;">​</a></h2><p><a href="/ko/kotlin/native-objc-interop">Swift/Objective-C와의 상호 운용성에 대해 자세히 알아보기</a></p>',3))])}const x=p(u,[["render",k]]);export{_ as __pageData,x as default};
