import{_ as k,C as h,c as r,o,ag as t,j as s,G as e,w as n,a}from"./chunks/framework.Bksy39di.js";const m=JSON.parse('{"title":"Kotlin 1.4.30 の新機能","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/whatsnew1430.md","filePath":"ja/kotlin/whatsnew1430.md","lastUpdated":1754307826000}'),d={name:"ja/kotlin/whatsnew1430.md"};function c(g,i,E,y,u,b){const l=h("tab"),p=h("tabs");return o(),r("div",null,[i[4]||(i[4]=t(`<h1 id="kotlin-1-4-30-の新機能" tabindex="-1">Kotlin 1.4.30 の新機能 <a class="header-anchor" href="#kotlin-1-4-30-の新機能" aria-label="Permalink to &quot;Kotlin 1.4.30 の新機能&quot;">​</a></h1><p><em><a href="/ja/kotlin/releases#release-details">リリース日: 2021年2月3日</a></em></p><p>Kotlin 1.4.30 では、新しい言語機能のプレビュー版が提供され、Kotlin/JVM コンパイラの新しい IR バックエンドがベータ版に昇格し、さまざまなパフォーマンスと機能の改善が導入されています。</p><p>新機能については、<a href="https://blog.jetbrains.com/kotlin/2021/01/kotlin-1-4-30-released/" target="_blank" rel="noreferrer">こちらのブログ記事</a>でも詳しく説明されています。</p><h2 id="言語機能" tabindex="-1">言語機能 <a class="header-anchor" href="#言語機能" aria-label="Permalink to &quot;言語機能&quot;">​</a></h2><p>Kotlin 1.5.0 では、JVM レコードのサポート、シールドインターフェース、安定版インラインクラスといった新しい言語機能が導入される予定です。 Kotlin 1.4.30 では、これらの機能と改善点をプレビューモードで試すことができます。1.5.0 のリリース前に皆様からのフィードバックを反映できるよう、対応する YouTrack チケットでご意見をお聞かせいただけると幸いです。</p><ul><li><a href="#jvm-records-support">JVM レコードのサポート</a></li><li><a href="#sealed-interfaces">シールドインターフェース</a>と<a href="#package-wide-sealed-class-hierarchies">シールドクラスの改善</a></li><li><a href="#improved-inline-classes">インラインクラスの改善</a></li></ul><p>これらの言語機能と改善点をプレビューモードで有効にするには、特定のコンパイラオプションを追加してオプトインする必要があります。 詳細は以下のセクションを参照してください。</p><p>新機能のプレビューについては、<a href="https://blog.jetbrains.com/kotlin/2021/01/new-language-features-preview-in-kotlin-1-4-30" target="_blank" rel="noreferrer">こちらのブログ記事</a>で詳しく説明されています。</p><h3 id="jvm-レコードのサポート" tabindex="-1">JVM レコードのサポート <a class="header-anchor" href="#jvm-レコードのサポート" aria-label="Permalink to &quot;JVM レコードのサポート&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>JVM レコード機能は<a href="/ja/kotlin/components-stability">実験的 (Experimental)</a> です。この機能は、将来廃止または変更される可能性があります。 オプトインが必要です (詳細は下記を参照)。評価目的でのみ使用してください。この機能に関するフィードバックを <a href="https://youtrack.jetbrains.com/issue/KT-42430" target="_blank" rel="noreferrer">YouTrack</a> でいただけると幸いです。</p></div><p><a href="https://openjdk.java.net/projects/jdk/16/" target="_blank" rel="noreferrer">JDK 16 のリリース</a>には、<a href="https://openjdk.java.net/jeps/395" target="_blank" rel="noreferrer">レコード</a>と呼ばれる新しい Java クラス型を安定化する計画が含まれています。Kotlin のすべての利点を提供し、Java との相互運用性を維持するために、Kotlin は実験的なレコードクラスのサポートを導入しています。</p><p>Java で宣言されたレコードクラスは、Kotlin のプロパティを持つクラスと同様に利用できます。追加のステップは不要です。</p><p>1.4.30 以降、<a href="/ja/kotlin/data-classes">データクラス</a>に <code>@JvmRecord</code> アノテーションを使用することで、Kotlin でレコードクラスを宣言できるようになりました。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JvmRecord</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>JVM レコードのプレビュー版を試すには、コンパイラオプション <code>-Xjvm-enable-preview</code> と <code>-language-version 1.5</code> を追加します。</p><p>JVM レコードのサポートについては引き続き作業を進めており、<a href="https://youtrack.jetbrains.com/issue/KT-42430" target="_blank" rel="noreferrer">この YouTrack チケット</a>を使用してフィードバックをお寄せいただけると幸いです。</p><p>実装、制限、構文に関する詳細は <a href="https://github.com/Kotlin/KEEP/blob/master/proposals/jvm-records.md" target="_blank" rel="noreferrer">KEEP</a> で確認できます。</p><h3 id="シールドインターフェース" tabindex="-1">シールドインターフェース <a class="header-anchor" href="#シールドインターフェース" aria-label="Permalink to &quot;シールドインターフェース&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>シールドインターフェースは<a href="/ja/kotlin/components-stability">実験的 (Experimental)</a> です。これらは、将来廃止または変更される可能性があります。 オプトインが必要です (詳細は下記を参照)。評価目的でのみ使用してください。これらの機能に関するフィードバックを <a href="https://youtrack.jetbrains.com/issue/KT-42433" target="_blank" rel="noreferrer">YouTrack</a> でいただけると幸いです。</p></div><p>Kotlin 1.4.30 では、_シールドインターフェース_のプロトタイプが提供されます。これらはシールドクラスを補完し、より柔軟な制限されたクラス階層を構築することを可能にします。</p><p>これらは、同じモジュール外では実装できない「内部」インターフェースとして機能します。例えば、網羅的な <code>when</code> 式を記述する際に、この事実を利用できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">sealed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Polygon</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Rectangle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Polygon</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Triangle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Polygon</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// when() is exhaustive: no other polygon implementations can appear</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// after the module is compiled</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> draw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(polygon: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Polygon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> when</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (polygon) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Rectangle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Triangle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>別のユースケースとして、シールドインターフェースを使用すると、2つ以上のシールドスーパークラスからクラスを継承できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">sealed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Fillable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fill</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">sealed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Polygon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vertices: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Point</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Rectangle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vertices: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Point</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Fillable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Polygon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fill</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*...*/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>シールドインターフェースのプレビュー版を試すには、コンパイラオプション <code>-language-version 1.5</code> を追加します。このバージョンに切り替えると、インターフェースに <code>sealed</code> 修飾子を使用できるようになります。<a href="https://youtrack.jetbrains.com/issue/KT-42433" target="_blank" rel="noreferrer">この YouTrack チケット</a>を使用してフィードバックをお寄せいただけると幸いです。</p><p><a href="/ja/kotlin/sealed-classes">シールドインターフェースについて詳しくはこちら</a>。</p><h3 id="パッケージ全体のシールドクラス階層" tabindex="-1">パッケージ全体のシールドクラス階層 <a class="header-anchor" href="#パッケージ全体のシールドクラス階層" aria-label="Permalink to &quot;パッケージ全体のシールドクラス階層&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>シールドクラスのパッケージ全体の階層は<a href="/ja/kotlin/components-stability">実験的 (Experimental)</a> です。これらは、将来廃止または変更される可能性があります。 オプトインが必要です (詳細は下記を参照)。評価目的でのみ使用してください。これらの機能に関するフィードバックを <a href="https://youtrack.jetbrains.com/issue/KT-42433" target="_blank" rel="noreferrer">YouTrack</a> でいただけると幸いです。</p></div><p>シールドクラスは、より柔軟な階層を形成できるようになりました。同じコンパイル単位および同じパッケージ内のすべてのファイルにサブクラスを持つことができます。以前は、すべてのサブクラスが同じファイル内に存在する必要がありました。</p><p>直接のサブクラスは、トップレベルであるか、任意の数の他の名前付きクラス、名前付きインターフェース、または名前付きオブジェクト内にネストされている場合があります。 シールドクラスのサブクラスは、適切に修飾された名前を持たなければなりません。ローカルオブジェクトや匿名オブジェクトにすることはできません。</p><p>シールドクラスのパッケージ全体の階層を試すには、コンパイラオプション <code>-language-version 1.5</code> を追加します。<a href="https://youtrack.jetbrains.com/issue/KT-42433" target="_blank" rel="noreferrer">この YouTrack チケット</a>を使用してフィードバックをお寄せいただけると幸いです。</p><p><a href="/ja/kotlin/sealed-classes#inheritance">シールドクラスのパッケージ全体の階層について詳しくはこちら</a>。</p><h3 id="インラインクラスの改善" tabindex="-1">インラインクラスの改善 <a class="header-anchor" href="#インラインクラスの改善" aria-label="Permalink to &quot;インラインクラスの改善&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>インライン値クラスは<a href="/ja/kotlin/components-stability">ベータ版 (Beta)</a> です。ほぼ安定していますが、将来的に移行手順が必要になる場合があります。変更を最小限に抑えるよう最善を尽くします。インラインクラス機能に関するフィードバックを <a href="https://youtrack.jetbrains.com/issue/KT-42434" target="_blank" rel="noreferrer">YouTrack</a> でいただけると幸いです。</p></div><p>Kotlin 1.4.30 では、<a href="/ja/kotlin/inline-classes">インラインクラス</a>が<a href="/ja/kotlin/components-stability">ベータ版 (Beta)</a> に昇格し、以下の機能と改善がもたらされました。</p><ul><li><p>インラインクラスは<a href="https://docs.oracle.com/en/java/javase/15/docs/api/java.base/java/lang/doc-files/ValueBased.html" target="_blank" rel="noreferrer">値ベース (value-based)</a> であるため、<code>value</code> 修飾子を使用して定義できます。<code>inline</code> と <code>value</code> の修飾子は現在同等です。 将来の Kotlin バージョンでは、<code>inline</code> 修飾子を非推奨にする予定です。</p><p>今後、JVM バックエンドの場合、クラス宣言の前に <code>@JvmInline</code> アノテーションが必須となります。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">inline</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// For JVM backends</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JvmInline</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></li><li><p>インラインクラスは <code>init</code> ブロックを持つことができます。クラスがインスタンス化された直後に実行されるコードを追加できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JvmInline</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Negative</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>Java コードからインラインクラスを持つ関数を呼び出す: Kotlin 1.4.30 以前では、マングリングのため、インラインクラスを受け入れる関数を Java から呼び出すことはできませんでした。 今後は、マングリングを手動で無効にできます。Java コードからそのような関数を呼び出すには、関数宣言の前に <code>@JvmName</code> アノテーションを追加する必要があります。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">inline</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> compute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JvmName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;computeUInt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> compute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { }</span></span></code></pre></div></li><li><p>このリリースでは、不正確な動作を修正するために、関数のマングリングスキームを変更しました。これらの変更は ABI の変更につながりました。</p><p>1.4.30 以降、Kotlin コンパイラはデフォルトで新しいマングリングスキームを使用します。古い 1.4.0 のマングリングスキームを強制的に使用し、バイナリ互換性を維持するには、<code>-Xuse-14-inline-classes-mangling-scheme</code> コンパイラフラグを使用します。</p></li></ul><p>Kotlin 1.4.30 ではインラインクラスがベータ版に昇格し、将来のリリースで安定版にする予定です。<a href="https://youtrack.jetbrains.com/issue/KT-42434" target="_blank" rel="noreferrer">この YouTrack チケット</a>を使用してフィードバックをお寄せいただけると幸いです。</p><p>インラインクラスのプレビュー版を試すには、コンパイラオプション <code>-Xinline-classes</code> または <code>-language-version 1.5</code> を追加します。</p><p>マングリングアルゴリズムに関する詳細は <a href="https://github.com/Kotlin/KEEP/blob/master/proposals/inline-classes.md" target="_blank" rel="noreferrer">KEEP</a> で確認できます。</p><p><a href="/ja/kotlin/inline-classes">インラインクラスについて詳しくはこちら</a>。</p><h2 id="kotlin-jvm" tabindex="-1">Kotlin/JVM <a class="header-anchor" href="#kotlin-jvm" aria-label="Permalink to &quot;Kotlin/JVM&quot;">​</a></h2><h3 id="jvm-ir-コンパイラバックエンドがベータ版に到達" tabindex="-1">JVM IR コンパイラバックエンドがベータ版に到達 <a class="header-anchor" href="#jvm-ir-コンパイラバックエンドがベータ版に到達" aria-label="Permalink to &quot;JVM IR コンパイラバックエンドがベータ版に到達&quot;">​</a></h3><p>Kotlin/JVM 用の <a href="/ja/kotlin/whatsnew14#unified-backends-and-extensibility">IR ベースのコンパイラバックエンド</a>は、1.4.0 で<a href="/ja/kotlin/components-stability">アルファ版 (Alpha)</a> として発表されましたが、ベータ版に到達しました。これは、IR バックエンドが Kotlin/JVM コンパイラのデフォルトになる前の最後のプレ安定レベルです。</p><p>IR コンパイラによって生成されたバイナリの利用に関する制限を撤廃します。以前は、新しい JVM IR バックエンドでコンパイルされたコードは、新しいバックエンドを有効にした場合にのみ使用できました。1.4.30 以降、そのような制限はなくなり、新しいバックエンドを使用してライブラリなどのサードパーティ向けコンポーネントをビルドできます。新しいバックエンドのベータ版を試して、<a href="https://kotl.in/issue" target="_blank" rel="noreferrer">課題トラッカー</a>でフィードバックをお寄せください。</p><p>新しい JVM IR バックエンドを有効にするには、プロジェクトの設定ファイルに以下の行を追加します。</p>`,46)),s("ul",null,[s("li",null,[i[2]||(i[2]=s("p",null,"Gradle の場合:",-1)),e(p,{group:"build-script"},{default:n(()=>[e(l,{title:"Kotlin","group-key":"kotlin"},{default:n(()=>i[0]||(i[0]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withType"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(org.jetbrains.kotlin.gradle.dsl.KotlinJvmCompile::"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"class"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  kotlinOptions.useIR "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," true")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),e(l,{title:"Groovy","group-key":"groovy"},{default:n(()=>i[1]||(i[1]=[s("div",{class:"language-groovy vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"groovy"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"withType("),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"org.jetbrains.kotlin.gradle.dsl.KotlinJvmCompile"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  kotlinOptions"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"useIR "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," true")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1})]),i[3]||(i[3]=t(`<li><p>Maven の場合:</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">configuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">arg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;-Xuse-ir&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">arg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">configuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div></li>`,1))]),i[5]||(i[5]=t(`<p>JVM IR バックエンドがもたらす変更については、<a href="https://blog.jetbrains.com/kotlin/2021/01/the-jvm-backend-is-in-beta-let-s-make-it-stable-together" target="_blank" rel="noreferrer">こちらのブログ記事</a>で詳しく説明されています。</p><h2 id="kotlin-native" tabindex="-1">Kotlin/Native <a class="header-anchor" href="#kotlin-native" aria-label="Permalink to &quot;Kotlin/Native&quot;">​</a></h2><h3 id="パフォーマンスの改善" tabindex="-1">パフォーマンスの改善 <a class="header-anchor" href="#パフォーマンスの改善" aria-label="Permalink to &quot;パフォーマンスの改善&quot;">​</a></h3><p>Kotlin/Native は 1.4.30 でさまざまなパフォーマンス改善が施され、コンパイル時間の短縮が実現しました。 例えば、<a href="https://github.com/kotlin-hands-on/kmm-networking-and-data-storage/tree/final" target="_blank" rel="noreferrer">Kotlin Multiplatform Mobile を使用したネットワークとデータストレージ</a> サンプルのフレームワークをリビルドするのにかかる時間は、9.5 秒 (1.4.10) から 4.5 秒 (1.4.30) に短縮されました。</p><h3 id="apple-watchos-64ビットシミュレーターターゲット" tabindex="-1">Apple watchOS 64ビットシミュレーターターゲット <a class="header-anchor" href="#apple-watchos-64ビットシミュレーターターゲット" aria-label="Permalink to &quot;Apple watchOS 64ビットシミュレーターターゲット&quot;">​</a></h3><p>x86 シミュレーターターゲットは watchOS バージョン 7.0 以降で非推奨となりました。最新の watchOS バージョンに対応するため、Kotlin/Native は 64ビットアーキテクチャでシミュレーターを実行するための新しいターゲット <code>watchosX64</code> をサポートしました。</p><h3 id="xcode-12-2-ライブラリのサポート" tabindex="-1">Xcode 12.2 ライブラリのサポート <a class="header-anchor" href="#xcode-12-2-ライブラリのサポート" aria-label="Permalink to &quot;Xcode 12.2 ライブラリのサポート&quot;">​</a></h3><p>Xcode 12.2 に同梱されている新しいライブラリのサポートを追加しました。Kotlin コードからこれらを使用できるようになりました。</p><h2 id="kotlin-js" tabindex="-1">Kotlin/JS <a class="header-anchor" href="#kotlin-js" aria-label="Permalink to &quot;Kotlin/JS&quot;">​</a></h2><h3 id="トップレベルプロパティの遅延初期化" tabindex="-1">トップレベルプロパティの遅延初期化 <a class="header-anchor" href="#トップレベルプロパティの遅延初期化" aria-label="Permalink to &quot;トップレベルプロパティの遅延初期化&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>トップレベルプロパティの遅延初期化は<a href="/ja/kotlin/components-stability">実験的 (Experimental)</a> です。この機能は、将来廃止または変更される可能性があります。 オプトインが必要です (詳細は下記を参照)。評価目的でのみ使用してください。この機能に関するフィードバックを <a href="https://youtrack.jetbrains.com/issue/KT-44320" target="_blank" rel="noreferrer">YouTrack</a> でいただけると幸いです。</p></div><p>Kotlin/JS の <a href="/ja/kotlin/js-ir-compiler">IR バックエンド</a>では、トップレベルプロパティの遅延初期化のプロトタイプ実装が導入されています。これにより、アプリケーション起動時にすべてのトップレベルプロパティを初期化する必要が減り、アプリケーションの起動時間が大幅に改善されるはずです。</p><p>遅延初期化については引き続き作業を進めます。現在のプロトタイプをお試しいただき、<a href="https://youtrack.jetbrains.com/issue/KT-44320" target="_blank" rel="noreferrer">この YouTrack チケット</a> または公式の <a href="https://kotlinlang.slack.com" target="_blank" rel="noreferrer">Kotlin Slack</a> の <a href="https://kotlinlang.slack.com/archives/C0B8L3U69" target="_blank" rel="noreferrer"><code>#javascript</code></a> チャンネル (<a href="https://surveys.jetbrains.com/s3/kotlin-slack-sign-up" target="_blank" rel="noreferrer">こちら</a>から招待を取得) でご意見や結果を共有していただけると幸いです。</p><p>遅延初期化を使用するには、JS IR コンパイラでコードをコンパイルする際に <code>-Xir-property-lazy-initialization</code> コンパイラオプションを追加します。</p><h2 id="gradle-プロジェクトの改善" tabindex="-1">Gradle プロジェクトの改善 <a class="header-anchor" href="#gradle-プロジェクトの改善" aria-label="Permalink to &quot;Gradle プロジェクトの改善&quot;">​</a></h2><h3 id="gradle-コンフィグレーションキャッシュのサポート" tabindex="-1">Gradle コンフィグレーションキャッシュのサポート <a class="header-anchor" href="#gradle-コンフィグレーションキャッシュのサポート" aria-label="Permalink to &quot;Gradle コンフィグレーションキャッシュのサポート&quot;">​</a></h3><p>1.4.30 以降、Kotlin Gradle プラグインは<a href="https://docs.gradle.org/current/userguide/configuration_cache.html" target="_blank" rel="noreferrer">コンフィグレーションキャッシュ</a>機能をサポートします。これによりビルドプロセスが高速化されます。コマンドを実行すると、Gradle はコンフィグレーションフェーズを実行し、タスクグラフを計算します。Gradle はその結果をキャッシュし、その後のビルドで再利用します。</p><p>この機能を使用するには、<a href="https://docs.gradle.org/current/userguide/configuration_cache.html#config_cache:usage" target="_blank" rel="noreferrer">Gradle コマンドを使用</a>するか、<a href="https://docs.gradle.org/current/userguide/configuration_cache.html#config_cache:ide:intellij" target="_blank" rel="noreferrer">IntelliJ ベースの IDE を設定</a>します。</p><h2 id="標準ライブラリ" tabindex="-1">標準ライブラリ <a class="header-anchor" href="#標準ライブラリ" aria-label="Permalink to &quot;標準ライブラリ&quot;">​</a></h2><h3 id="テキストの大文字-小文字変換用ロケール非依存-api" tabindex="-1">テキストの大文字/小文字変換用ロケール非依存 API <a class="header-anchor" href="#テキストの大文字-小文字変換用ロケール非依存-api" aria-label="Permalink to &quot;テキストの大文字/小文字変換用ロケール非依存 API&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>ロケール非依存 API 機能は<a href="/ja/kotlincomponents-stability.stabilitäts">実験的 (Experimental)</a> です。この機能は、将来廃止または変更される可能性があります。 評価目的でのみ使用してください。 この機能に関するフィードバックを <a href="https://youtrack.jetbrains.com/issue/KT-42437" target="_blank" rel="noreferrer">YouTrack</a> でいただけると幸いです。</p></div><p>このリリースでは、文字列と文字のケースを変更するための実験的なロケール非依存 API を導入します。 現在の <code>toLowerCase()</code>、<code>toUpperCase()</code>、<code>capitalize()</code>、<code>decapitalize()</code> API 関数はロケールに依存しています。 これは、異なるプラットフォームのロケール設定がコードの動作に影響を与える可能性があることを意味します。例えば、トルコ語ロケールでは、文字列「kotlin」が <code>toUpperCase</code> を使用して変換されると、「KOTLIN」ではなく「KOTLİN」になります。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// current API</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Needs to be capitalized&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toUpperCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// NEEDS TO BE CAPITALIZED</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// new API</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Needs to be capitalized&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uppercase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// NEEDS TO BE CAPITALIZED</span></span></code></pre></div><p>Kotlin 1.4.30 では、以下の代替手段が提供されます。</p><ul><li><p><code>String</code> 関数用:</p><table tabindex="0"><thead><tr><th><strong>以前のバージョン</strong></th><th><strong>1.4.30 の代替</strong></th></tr></thead><tbody><tr><td><code>String.toUpperCase()</code></td><td><code>String.uppercase()</code></td></tr><tr><td><code>String.toLowerCase()</code></td><td><code>String.lowercase()</code></td></tr><tr><td><code>String.capitalize()</code></td><td><code>String.replaceFirstChar { it.uppercase() }</code></td></tr><tr><td><code>String.decapitalize()</code></td><td><code>String.replaceFirstChar { it.lowercase() }</code></td></tr></tbody></table></li><li><p><code>Char</code> 関数用:</p><table tabindex="0"><thead><tr><th><strong>以前のバージョン</strong></th><th><strong>1.4.30 の代替</strong></th></tr></thead><tbody><tr><td><code>Char.toUpperCase()</code></td><td><code>Char.uppercaseChar(): Char</code><br><code>Char.uppercase(): String</code></td></tr><tr><td><code>Char.toLowerCase()</code></td><td><code>Char.lowercaseChar(): Char</code><br><code>Char.lowercase(): String</code></td></tr><tr><td><code>Char.toTitleCase()</code></td><td><code>Char.titlecaseChar(): Char</code><br><code>Char.titlecase(): String</code></td></tr></tbody></table></li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Kotlin/JVM には、明示的な <code>Locale</code> パラメーターを持つオーバーロードされた <code>uppercase()</code>、<code>lowercase()</code>、<code>titlecase()</code> 関数もあります。</p></div><p>テキスト処理関数の変更点の完全なリストは <a href="https://github.com/Kotlin/KEEP/blob/master/proposals/stdlib/locale-agnostic-string-conversions.md" target="_blank" rel="noreferrer">KEEP</a> で確認できます。</p><h3 id="char-からコードへの変換、char-から数字への変換を明確化" tabindex="-1">Char からコードへの変換、Char から数字への変換を明確化 <a class="header-anchor" href="#char-からコードへの変換、char-から数字への変換を明確化" aria-label="Permalink to &quot;Char からコードへの変換、Char から数字への変換を明確化&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p><code>Char</code> 変換機能の明確な API は<a href="/ja/kotlin/components-stability">実験的 (Experimental)</a> です。この機能は、将来廃止または変更される可能性があります。 評価目的でのみ使用してください。 この機能に関するフィードバックを <a href="https://youtrack.jetbrains.com/issue/KT-44333" target="_blank" rel="noreferrer">YouTrack</a> でいただけると幸いです。</p></div><p>現在の <code>Char</code> から数値への変換関数は、異なる数値型で表現された UTF-16 コードを返しますが、これは文字列の数値表現を返す類似の String-to-Int 変換と混同されがちです。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;4&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// returns 4</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;4&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// returns 52</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// and there was no common function that would return the numeric value 4 for Char &#39;4&#39;</span></span></code></pre></div><p>この混同を避けるため、<code>Char</code> の変換を、以下の2つの明確に命名された関数群に分離することを決定しました。</p><ul><li><p><code>Char</code> の整数コードを取得する関数と、指定されたコードから <code>Char</code> を構築する関数:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(code: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Char</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(code: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UShort</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Char</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Char.code: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span></span></code></pre></div></li><li><p><code>Char</code> が表す数字の数値に変換する関数:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">digitToInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(radix: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">digitToIntOrNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(radix: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?</span></span></code></pre></div></li><li><p><code>Int</code> の拡張関数で、それが表す非負の1桁の数字を対応する <code>Char</code> 表現に変換します:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">digitToChar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(radix: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Char</span></span></code></pre></div></li></ul><p>詳細については <a href="https://github.com/Kotlin/KEEP/blob/master/proposals/stdlib/char-int-conversions.md" target="_blank" rel="noreferrer">KEEP</a> で確認できます。</p><h2 id="シリアライゼーションの更新" tabindex="-1">シリアライゼーションの更新 <a class="header-anchor" href="#シリアライゼーションの更新" aria-label="Permalink to &quot;シリアライゼーションの更新&quot;">​</a></h2><p>Kotlin 1.4.30 と共に、<code>kotlinx.serialization</code> の <a href="https://github.com/Kotlin/kotlinx.serialization/releases/tag/v1.1.0-RC" target="_blank" rel="noreferrer">1.1.0-RC</a> をリリースします。これにはいくつかの新機能が含まれています。</p><ul><li>インラインクラスのシリアライゼーションサポート</li><li>符号なしプリミティブ型のシリアライゼーションサポート</li></ul><h3 id="インラインクラスのシリアライゼーションサポート" tabindex="-1">インラインクラスのシリアライゼーションサポート <a class="header-anchor" href="#インラインクラスのシリアライゼーションサポート" aria-label="Permalink to &quot;インラインクラスのシリアライゼーションサポート&quot;">​</a></h3><p>Kotlin 1.4.30 以降、インラインクラスを<a href="/ja/kotlin/serialization">シリアライズ可能</a>にできます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Serializable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">inline</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rgb: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>この機能には、新しい 1.4.30 IR コンパイラが必要です。</p></div><p>シリアライゼーションフレームワークは、シリアライズ可能なインラインクラスが他のシリアライズ可能なクラスで使用される場合でも、ボックス化しません。</p><p><code>kotlinx.serialization</code> の<a href="https://github.com/Kotlin/kotlinx.serialization/blob/master/docs/inline-classes.md#serializable-inline-classes" target="_blank" rel="noreferrer">ドキュメント</a>で詳しく説明されています。</p><h3 id="符号なしプリミティブ型のシリアライゼーションサポート" tabindex="-1">符号なしプリミティブ型のシリアライゼーションサポート <a class="header-anchor" href="#符号なしプリミティブ型のシリアライゼーションサポート" aria-label="Permalink to &quot;符号なしプリミティブ型のシリアライゼーションサポート&quot;">​</a></h3><p>1.4.30 以降、<a href="https://github.com/Kotlin/kotlinx.serialization" target="_blank" rel="noreferrer">kotlinx.serialization</a> の標準 JSON シリアライザを、<code>UInt</code>、<code>ULong</code>、<code>UByte</code>、<code>UShort</code> などの符号なしプリミティブ型に使用できるようになりました。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Serializable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Counter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> counted: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UByte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> description: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> counted </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 239</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toUByte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Json.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">encodeToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Counter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(counted, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;tries&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>kotlinx.serialization</code> の<a href="https://github.com/Kotlin/kotlinx.serialization/blob/master/docs/inline-classes.md#unsigned-types-support-json-only" target="_blank" rel="noreferrer">ドキュメント</a>で詳しく説明されています。</p>`,47))])}const C=k(d,[["render",c]]);export{m as __pageData,C as default};
