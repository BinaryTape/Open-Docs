import{_ as r,a as d,b as o}from"./chunks/ktor-routing-3.BEpN3HgF.js";import{_ as E,C as n,c as g,o as u,j as s,G as t,ag as k,a as i,w as l}from"./chunks/framework.Bksy39di.js";const v=JSON.parse('{"title":"應用程式結構","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/ktor/server-application-structure.md","filePath":"zh-Hant/ktor/server-application-structure.md","lastUpdated":1755457140000}'),y={name:"zh-Hant/ktor/server-application-structure.md"};function c(F,a,m,C,b,f){const p=n("link-summary"),e=n("TabItem"),h=n("Tabs");return u(),g("div",null,[a[5]||(a[5]=s("h1",{id:"應用程式結構",tabindex:"-1"},[i("應用程式結構 "),s("a",{class:"header-anchor",href:"#應用程式結構","aria-label":'Permalink to "應用程式結構"'},"​")],-1)),t(p,null,{default:l(()=>a[0]||(a[0]=[i("了解如何組織應用程式結構，以便隨著應用程式成長保持可維護性。")])),_:1}),a[6]||(a[6]=s("p",null,[i("Ktor 的優勢之一在於它在應用程式結構化方面提供了極大的彈性。與許多其他伺服器端框架不同，它不強迫我們遵循特定模式，例如將所有內聚的路由放置在名為 "),s("code",null,"CustomerController"),i(" 的單一類別中。雖然這當然是可行的，但並非強制要求。")],-1)),a[7]||(a[7]=s("p",null,"在本節中，我們將探討組織應用程式結構的不同選項。",-1)),a[8]||(a[8]=s("h2",{id:"group_by_file",tabindex:"-1"},[i("按檔案分組 "),s("a",{class:"header-anchor",href:"#group_by_file","aria-label":'Permalink to "按檔案分組 {id="group_by_file"}"'},"​")],-1)),a[9]||(a[9]=s("p",null,[i("一種方法是將相關的路由分組到單一檔案中。例如，如果我們的應用程式處理客戶 (Customers) 和訂單 (Orders)，這意味著將會有 "),s("code",null,"CustomerRoutes.kt"),i(" 和 "),s("code",null,"OrderRoutes.kt"),i(" 兩個檔案：")],-1)),t(h,null,{default:l(()=>[t(e,{title:"CustomerRoutes.kt"},{default:l(()=>a[1]||(a[1]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"fun"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," Route"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"customerByIdRoute"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"() {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"    get"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"/customer/{id}"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {")]),i(`
`),s("span",{class:"line"}),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),i(`
`),s("span",{class:"line"}),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"fun"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," Route"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"createCustomerRoute"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"() {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    post"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"/customer"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {")]),i(`
`),s("span",{class:"line"}),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),t(e,{title:"OrderRoutes.kt"},{default:l(()=>a[2]||(a[2]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"fun"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," Route"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"getOrderRoute"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"() {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"    get"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"/order/{id}"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {")]),i(`
`),s("span",{class:"line"}),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),i(`
`),s("span",{class:"line"}),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"fun"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," Route"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"totalizeOrderRoute"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"() {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"    get"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"/order/{id}/total"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {")]),i(`
`),s("span",{class:"line"}),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),a[10]||(a[10]=k(`<p>子路由會怎麼樣？例如 <code>order/shipment</code>？這在某種程度上取決於我們對此 URL 的理解。如果我們將這些視為資源（它們確實是），那麼 <code>shipment</code> 本身就可以是一個資源，並且可以輕鬆地映射到另一個檔案 <code>ShipmentRoutes.kt</code>。</p><h2 id="group_routing_definitions" tabindex="-1">分組路由定義 <a class="header-anchor" href="#group_routing_definitions" aria-label="Permalink to &quot;分組路由定義 {id=&quot;group_routing_definitions&quot;}&quot;">​</a></h2><p>這種方法的一個優勢是，我們還可以按檔案分組路由定義，以及潛在的功能。例如，假設我們遵循上述的按檔案分組佈局。儘管路由位於不同的檔案中，我們仍需要在 Application 層級聲明它們。因此，我們的應用程式會看起來像這樣：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    customerRouting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    listOrdersRoute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    getOrderRoute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    totalizeOrderRoute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>如果我們的應用程式中有大量的路由，這可能會很快變得冗長且繁瑣。然而，既然我們已經按檔案對路由進行了分組，我們可以利用這一點，並在每個檔案中也定義路由。為此，我們可以為 <a href="https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.application/-application/index.html" target="_blank" rel="noreferrer">Application</a> 建立一個擴充功能並定義路由：</p>`,5)),t(h,null,{default:l(()=>[t(e,{title:"CustomerRoutes.kt"},{default:l(()=>a[3]||(a[3]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"fun"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," Application"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"customerRoutes"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"() {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    routing"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"        listCustomersRoute"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"        customerByIdRoute"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"        createCustomerRoute"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"        deleteCustomerRoute"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }    ")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),t(e,{title:"OrderRoutes.kt"},{default:l(()=>a[4]||(a[4]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"fun"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," Application"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"orderRoutes"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"() {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    routing"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"        listOrdersRoute"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"        getOrderRoute"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"        totalizeOrderRoute"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),a[11]||(a[11]=k(`<p>現在，在我們實際的 <code>Application.module</code> 啟動中，我們只需呼叫這些函式，無需 <code>routing</code> 區塊：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Init....</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    customerRoutes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    orderRoutes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>我們甚至可以更進一步——根據需要為每個應用程式安裝外掛程式，特別是當我們使用依賴於特定路由的 <code>Authentication</code> 外掛程式時。然而，一個重要的注意事項是，如果外掛程式被安裝了兩次，Ktor 會透過拋出 <code>DuplicateApplicationPluginException</code> 異常來偵測到。</p><h3 id="關於使用物件的說明" tabindex="-1">關於使用物件的說明 <a class="header-anchor" href="#關於使用物件的說明" aria-label="Permalink to &quot;關於使用物件的說明&quot;">​</a></h3><p>使用物件來分組路由函式不會提供任何效能或記憶體方面的優勢，因為 Ktor 中的頂層函式只會被實例化一次。雖然它可以提供某種內聚結構，以便我們可能希望共享通用功能，但如果我們擔心任何開銷，則沒有必要使用物件。</p><h2 id="group_by_folder" tabindex="-1">按資料夾分組 <a class="header-anchor" href="#group_by_folder" aria-label="Permalink to &quot;按資料夾分組 {id=&quot;group_by_folder&quot;}&quot;">​</a></h2><p>將所有內容都放在一個單一檔案中，隨著檔案的增長可能會變得有些繁瑣。我們可以做的是使用資料夾（即套件）來定義不同的區域，然後將每個路由放在其自己的檔案中。</p>`,7)),a[12]||(a[12]=s("p",null,[s("img",{src:r,alt:"按資料夾分組",width:"350","border-effect":"rounded"})],-1)),a[13]||(a[13]=s("p",null,[i("雖然這在路由和個別操作方面確實提供了良好的佈局優勢，但它肯定會導致「套件過載」，並且可能會有大量檔案名相同，使得導航變得有些困難。另一方面，正如我們在下一個範例中將看到的，我們也可以僅用區域前綴每個檔案（例如 "),s("code",null,"CustomerCreate.kt"),i("）。")],-1)),a[14]||(a[14]=s("h2",{id:"group_by_feature",tabindex:"-1"},[i("按功能分組 "),s("a",{class:"header-anchor",href:"#group_by_feature","aria-label":'Permalink to "按功能分組 {id="group_by_feature"}"'},"​")],-1)),a[15]||(a[15]=s("p",null,"諸如 ASP.NET MVC 或 Ruby on Rails 等框架，具有使用三個資料夾（Model、View 和 Controllers (Routes)）來構建應用程式的概念。",-1)),a[16]||(a[16]=s("p",null,[s("img",{src:d,alt:"模型、視圖、控制器",width:"350","border-effect":"rounded"})],-1)),a[17]||(a[17]=s("p",null,[i("這與我們上面將路由分組到其自己的套件/檔案中、Ktor 中將視圖放在 "),s("code",null,"resources"),i(" 資料夾中、以及當然，沒有什麼能阻止我們擁有一個套件模型來放置我們想要顯示或響應 HTTP 端點的任何資料的模式並無二致。")],-1)),a[18]||(a[18]=s("p",null,[i("雖然這種方法可能有效並類似於其他框架，但有些人會認為按功能分組更有意義，也就是說，不將專案按路由、模型和視圖分佈，而是按特定行為/功能（例如 "),s("code",null,"OrderProcessPayment"),i("、"),s("code",null,"CustomerAddressChange"),i(" 等）來分組。")],-1)),a[19]||(a[19]=s("p",null,[s("img",{src:o,alt:"功能分組",width:"350","border-effect":"rounded"})],-1)),a[20]||(a[20]=k(`<p>對於許多框架來說，如果不嚴重修改底層慣例，這種程式碼組織方式是不可行的。然而，對於 Ktor 來說，鑑於其靈活性，原則上這應該不是問題。但有一個例外——當我們使用 <a href="./server-templating">模板引擎</a> 時，資源可能會成為問題。但讓我們看看如何解決這個問題。</p><p>這個問題的解決方式很大程度上取決於視圖所使用的技術。如果我們的應用程式僅僅是一個 HTTP 後端，並且我們使用客戶端技術，那麼通常所有渲染都是在客戶端進行的。如果我們使用 <code>Kotlinx.HTML</code>，那麼這也不是問題，因為頁面可以從放置在任何地方的任何 Kotlin 檔案生成。</p><p>問題更多地出現在我們使用 FreeMarker 等模板引擎時。這些引擎在模板檔案的存放位置和載入方式上有些特殊。幸運的是，其中一些提供了模板載入方式的靈活性。</p><p>例如，使用 FreeMarker，我們可以使用 <code>MultiTemplateLoader</code>，然後從不同位置載入模板：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(FreeMarker) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> customerTemplates </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FileTemplateLoader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">File</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./customer/changeAddress&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> loaders </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> arrayOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TemplateLoader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(customerTemplates)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    templateLoader </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MultiTemplateLoader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(loaders)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>顯然，這段程式碼並不理想，因為它使用了相對路徑等問題，但我們不難看出如何讓它實際循環遍歷資料夾並載入模板，甚至可以有一個自定義的建構動作，在執行前將視圖複製到我們的 <code>resources</code> 資料夾中。解決這個問題的方法有很多種。</p><p>這種方法的好處是，我們可以將所有與相同功能相關的內容，按功能分組到單一位置，而不是按技術/基礎設施方面進行分組。</p>`,7))])}const A=E(y,[["render",c]]);export{v as __pageData,A as default};
