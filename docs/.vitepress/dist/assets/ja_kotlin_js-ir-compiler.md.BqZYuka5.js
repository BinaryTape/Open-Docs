import{_ as l,c as n,o as t,ag as a,j as i,a as e}from"./chunks/framework.Bksy39di.js";const g=JSON.parse('{"title":"Kotlin/JS IRコンパイラ","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/js-ir-compiler.md","filePath":"ja/kotlin/js-ir-compiler.md","lastUpdated":1754307826000}'),p={name:"ja/kotlin/js-ir-compiler.md"};function o(r,s,d,h,c,k){return t(),n("div",null,s[0]||(s[0]=[a(`<h1 id="kotlin-js-irコンパイラ" tabindex="-1">Kotlin/JS IRコンパイラ <a class="header-anchor" href="#kotlin-js-irコンパイラ" aria-label="Permalink to &quot;Kotlin/JS IRコンパイラ&quot;">​</a></h1><p>Kotlin/JS IRコンパイラバックエンドは、Kotlin/JSにおける革新の主要な焦点であり、このテクノロジーの将来への道を切り開きます。</p><p>Kotlin/JS IRコンパイラバックエンドは、KotlinのソースコードからJavaScriptコードを直接生成するのではなく、新しいアプローチを活用します。Kotlinのソースコードはまず<a href="/ja/kotlin/whatsnew14#unified-backends-and-extensibility">Kotlin中間表現 (IR)</a>に変換され、その後JavaScriptにコンパイルされます。Kotlin/JSの場合、これにより積極的な最適化が可能になり、以前のコンパイラにあった課題点、例えば生成されるコードサイズ（<a href="#dead-code-elimination">デッドコードエリミネーション</a>によるもの）やJavaScriptおよびTypeScriptエコシステムとの相互運用性といった点での改善を可能にします。</p><p>IRコンパイラバックエンドは、Kotlin 1.4.0以降、KotlinマルチプラットフォームGradleプラグインを通じて利用可能です。プロジェクトで有効にするには、Gradleビルドスクリプトの<code>js</code>関数にコンパイラタイプを渡します。</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kotlin {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    js(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">IR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// or: LEGACY, BOTH</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        binaries</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">executable() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// not applicable to BOTH, see details below</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><code>IR</code> はKotlin/JS用の新しいIRコンパイラバックエンドを使用します。</li><li><code>LEGACY</code> は古いコンパイラバックエンドを使用します。</li><li><code>BOTH</code> は、プロジェクトを新しいIRコンパイラとデフォルトのコンパイラバックエンドの両方でコンパイルします。このモードは<a href="#authoring-libraries-for-the-ir-compiler-with-backwards-compatibility">両方のバックエンドと互換性のあるライブラリを作成する</a>場合に使用します。</li></ul><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>古いコンパイラバックエンドはKotlin 1.8.0以降非推奨となりました。Kotlin 1.9.0以降では、<code>LEGACY</code>または<code>BOTH</code>のコンパイラタイプを使用するとエラーが発生します。</p></div><p>コンパイラタイプは、<code>gradle.properties</code>ファイルで<code>kotlin.js.compiler=ir</code>というキーで設定することもできます。ただし、この動作は<code>build.gradle(.kts)</code>内の設定によって上書きされます。</p><h2 id="トップレベルプロパティの遅延初期化" tabindex="-1">トップレベルプロパティの遅延初期化 <a class="header-anchor" href="#トップレベルプロパティの遅延初期化" aria-label="Permalink to &quot;トップレベルプロパティの遅延初期化&quot;">​</a></h2><p>アプリケーションの起動パフォーマンスを向上させるため、Kotlin/JS IRコンパイラはトップレベルプロパティを遅延初期化します。これにより、アプリケーションはコード内で使用されるすべてのトップレベルプロパティを初期化することなくロードされます。起動時に必要なものだけが初期化され、他のプロパティは、それらを使用するコードが実際に実行されるときに後から値を受け取ります。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // intensive computations</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    result</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// value is computed upon the first usage</span></span></code></pre></div>`,11),i("p",null,[e("何らかの理由でプロパティを即時に（アプリケーション起動時に）初期化する必要がある場合は、"),i("a",{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.js/-eager-initialization/",nullable:"true",target:"_blank",rel:"noreferrer"},[i("code",null,"@EagerInitialization")]),e("アノテーションでマークしてください。")],-1),a(`<h2 id="開発バイナリのインクリメンタルコンパイル" tabindex="-1">開発バイナリのインクリメンタルコンパイル <a class="header-anchor" href="#開発バイナリのインクリメンタルコンパイル" aria-label="Permalink to &quot;開発バイナリのインクリメンタルコンパイル&quot;">​</a></h2><p>JS IRコンパイラは、開発プロセスを高速化する_開発バイナリのインクリメンタルコンパイルモード_を提供します。このモードでは、コンパイラは<code>compileDevelopmentExecutableKotlinJs</code> Gradleタスクの結果をモジュールレベルでキャッシュします。これにより、変更されていないソースファイルに対してキャッシュされたコンパイル結果が後続のコンパイルで再利用され、特に小さな変更の場合にコンパイルが高速化されます。</p><p>インクリメンタルコンパイルはデフォルトで有効になっています。開発バイナリのインクリメンタルコンパイルを無効にするには、プロジェクトの<code>gradle.properties</code>または<code>local.properties</code>に次の行を追加します。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.incremental.js.ir=false // true by default</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>インクリメンタルコンパイルモードでのクリーンビルドは、キャッシュを作成して投入する必要があるため、通常は遅くなります。</p></div><h2 id="出力モード" tabindex="-1">出力モード <a class="header-anchor" href="#出力モード" aria-label="Permalink to &quot;出力モード&quot;">​</a></h2><p>JS IRコンパイラがプロジェクトで<code>.js</code>ファイルをどのように出力するかを選択できます。</p><ul><li><p><strong>モジュールごと</strong>。デフォルトでは、JSコンパイラはコンパイル結果としてプロジェクトの各モジュールに対して個別の<code>.js</code>ファイルを出力します。</p></li><li><p><strong>プロジェクト全体</strong>。プロジェクト全体を単一の<code>.js</code>ファイルにコンパイルするには、<code>gradle.properties</code>に次の行を追加します。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.js.ir.output.granularity=whole-program // &#39;per-module&#39; is the default</span></span></code></pre></div></li><li><p><strong>ファイルごと</strong>。より細かな出力として、Kotlinファイルごとに1つ（または、ファイルにエクスポートされた宣言が含まれる場合は2つ）のJavaScriptファイルを生成するように設定できます。ファイルごとのコンパイルモードを有効にするには：</p><ol><li><p>ECMAScriptモジュールをサポートするために、ビルドファイルに<code>useEsModules()</code>関数を追加します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(IR) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        useEsModules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Enables ES2015 modules</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        browser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>あるいは、プロジェクトでES2015機能をサポートするために<code>es2015</code> <a href="/ja/kotlin/js-project-setup#support-for-es2015-features">コンパイルターゲット</a>を使用することもできます。</p></li><li><p><code>-Xir-per-file</code>コンパイラオプションを適用するか、<code>gradle.properties</code>ファイルを更新します。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># gradle.properties</span></span>
<span class="line"><span>kotlin.js.ir.output.granularity=per-file // &#39;per-module&#39; is the default</span></span></code></pre></div></li></ol></li></ul><h2 id="プロダクションにおけるメンバー名のミニファイ化" tabindex="-1">プロダクションにおけるメンバー名のミニファイ化 <a class="header-anchor" href="#プロダクションにおけるメンバー名のミニファイ化" aria-label="Permalink to &quot;プロダクションにおけるメンバー名のミニファイ化&quot;">​</a></h2><p>Kotlin/JS IRコンパイラは、Kotlinのクラスと関数の関係に関する内部情報を使用して、関数、プロパティ、クラスの名前を短縮する、より効率的なミニファイ化を適用します。これにより、結果として生成されるバンドルされたアプリケーションのサイズが削減されます。</p><p>この種のミニファイ化は、Kotlin/JSアプリケーションを<a href="/ja/kotlin/js-project-setup#building-executables">プロダクションモード</a>でビルドする際に自動的に適用され、デフォルトで有効になっています。メンバー名のミニファイ化を無効にするには、<code>-Xir-minimized-member-names</code>コンパイラオプションを使用します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(IR) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        compilations.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            compileTaskProvider.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                compilerOptions.freeCompilerArgs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xir-minimized-member-names=false&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="デッドコードエリミネーション" tabindex="-1">デッドコードエリミネーション <a class="header-anchor" href="#デッドコードエリミネーション" aria-label="Permalink to &quot;デッドコードエリミネーション&quot;">​</a></h2><p><a href="https://wikipedia.org/wiki/Dead_code_elimination" target="_blank" rel="noreferrer">デッドコードエリミネーション</a> (DCE) は、未使用のプロパティ、関数、クラスを削除することで、結果として生成されるJavaScriptコードのサイズを削減します。</p><p>未使用の宣言は、次のような場合に発生する可能性があります。</p><ul><li>関数がインライン化され、直接呼び出されない場合（一部のケースを除いて常に発生します）。</li><li>モジュールが共有ライブラリを使用している場合。DCEがないと、使用しないライブラリの一部も結果のバンドルに含まれます。 例えば、Kotlin標準ライブラリには、リスト、配列、文字シーケンスの操作、DOM用のアダプターなどの関数が含まれています。これらの機能すべてをJavaScriptファイルとして含めると約1.3MBが必要になります。「Hello, world」のような単純なアプリケーションでは、コンソールルーチンのみが必要であり、ファイル全体でもわずか数キロバイトで済みます。</li></ul><p>Kotlin/JSコンパイラでは、DCEは自動的に処理されます。</p><ul><li><p>DCEは、以下のGradleタスクに対応する_development_バンドルタスクでは無効化されます。</p><ul><li><code>jsBrowserDevelopmentRun</code></li><li><code>jsBrowserDevelopmentWebpack</code></li><li><code>jsNodeDevelopmentRun</code></li><li><code>compileDevelopmentExecutableKotlinJs</code></li><li><code>compileDevelopmentLibraryKotlinJs</code></li><li>名前に&quot;development&quot;を含むその他のGradleタスク</li></ul></li><li><p>_production_バンドルをビルドすると、DCEが有効になります。これは以下のGradleタスクに対応します。</p><ul><li><code>jsBrowserProductionRun</code></li><li><code>jsBrowserProductionWebpack</code></li><li><code>compileProductionExecutableKotlinJs</code></li><li><code>compileProductionLibraryKotlinJs</code></li><li>名前に&quot;production&quot;を含むその他のGradleタスク</li></ul></li></ul><p><a href="/ja/kotlin/js-to-kotlin-interop#jsexport-annotation"><code>@JsExport</code></a>アノテーションを使用すると、DCEがルートとして扱う宣言を指定できます。</p><h2 id="プレビュー-typescript宣言ファイル-d-ts-の生成" tabindex="-1">プレビュー: TypeScript宣言ファイル (d.ts) の生成 <a class="header-anchor" href="#プレビュー-typescript宣言ファイル-d-ts-の生成" aria-label="Permalink to &quot;プレビュー: TypeScript宣言ファイル (d.ts) の生成&quot;">​</a></h2><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>TypeScript宣言ファイル (<code>d.ts</code>) の生成は<a href="/ja/kotlin/components-stability">実験的</a>です。これはいつでも廃止または変更される可能性があります。 オプトインが必要であり（詳細は下記参照）、評価目的でのみ使用してください。<a href="https://youtrack.jetbrains.com/issues?q=%23%7BKJS:%20d.ts%20generation%7D" target="_blank" rel="noreferrer">YouTrack</a>でフィードバックをいただけると幸いです。</p></div><p>Kotlin/JS IRコンパイラは、KotlinコードからTypeScript定義を生成できます。これらの定義は、ハイブリッドアプリで作業する際にJavaScriptツールやIDEが自動補完を提供し、静的アナライザーをサポートし、JavaScriptおよびTypeScriptプロジェクトにKotlinコードを含めることを容易にするために使用できます。</p><p>プロジェクトが実行可能ファイル (<code>binaries.executable()</code>) を生成する場合、Kotlin/JS IRコンパイラは<a href="/ja/kotlin/js-to-kotlin-interop#jsexport-annotation"><code>@JsExport</code></a>でマークされたすべてのトップレベル宣言を収集し、自動的に<code>.d.ts</code>ファイルにTypeScript定義を生成します。</p><p>TypeScript定義を生成したい場合は、Gradleビルドファイルで明示的に設定する必要があります。<a href="/ja/kotlin/js-project-setup#execution-environments"><code>js</code>セクション</a>の<code>build.gradle.kts</code>ファイルに<code>generateTypeScriptDefinitions()</code>を追加します。例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        binaries.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        browser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        generateTypeScriptDefinitions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>定義は、対応するwebpack化されていないJavaScriptコードとともに<code>build/js/packages/&lt;package_name&gt;/kotlin</code>にあります。</p><h2 id="irコンパイラの現在の制限事項" tabindex="-1">IRコンパイラの現在の制限事項 <a class="header-anchor" href="#irコンパイラの現在の制限事項" aria-label="Permalink to &quot;IRコンパイラの現在の制限事項&quot;">​</a></h2><p>新しいIRコンパイラバックエンドの大きな変更点は、デフォルトのバックエンドとの<strong>バイナリ互換性がない</strong>ことです。新しいIRコンパイラで作成されたライブラリは<a href="/ja/kotlin/native-libraries#library-format"><code>klib</code>形式</a>を使用するため、デフォルトのバックエンドからは使用できません。一方、古いコンパイラで作成されたライブラリは<code>js</code>ファイルを含む<code>jar</code>であり、IRバックエンドからは使用できません。</p><p>プロジェクトでIRコンパイラバックエンドを使用したい場合は、<strong>すべてのKotlin依存関係をこの新しいバックエンドをサポートするバージョンに更新する</strong>必要があります。Kotlin/JSをターゲットとするKotlin 1.4以降のJetBrainsから公開されているライブラリには、新しいIRコンパイラバックエンドで使用するために必要なすべてのアーティファクトがすでに含まれています。</p><p><strong>ライブラリ開発者の方</strong>で、現在のコンパイラバックエンドと新しいIRコンパイラバックエンドの両方との互換性を提供したい場合は、さらに<a href="#authoring-libraries-for-the-ir-compiler-with-backwards-compatibility">IRコンパイラ用のライブラリの作成に関するセクション</a>を確認してください。</p><p>IRコンパイラバックエンドには、デフォルトのバックエンドと比較していくつかの相違点もあります。新しいバックエンドを試す際には、これらの潜在的な落とし穴に注意することが重要です。</p><ul><li>デフォルトのバックエンドの<strong>特定の特性に依存する一部のライブラリ</strong>、例えば<code>kotlin-wrappers</code>は、いくつかの問題を示す可能性があります。<a href="https://youtrack.jetbrains.com/issue/KT-40525" target="_blank" rel="noreferrer">YouTrack</a>で調査と進捗を追うことができます。</li><li>IRバックエンドは、デフォルトではKotlinの宣言をJavaScriptから利用できるようにしません。Kotlinの宣言をJavaScriptから可視にするには、<a href="/ja/kotlin/js-to-kotlin-interop#jsexport-annotation"><code>@JsExport</code></a>で<strong>アノテーションを付ける必要があります</strong>。</li></ul><h2 id="既存プロジェクトをirコンパイラに移行する" tabindex="-1">既存プロジェクトをIRコンパイラに移行する <a class="header-anchor" href="#既存プロジェクトをirコンパイラに移行する" aria-label="Permalink to &quot;既存プロジェクトをIRコンパイラに移行する&quot;">​</a></h2><p>2つのKotlin/JSコンパイラ間には大きな違いがあるため、既存のKotlin/JSコードをIRコンパイラで動作させるには、いくつかの調整が必要になる場合があります。既存のKotlin/JSプロジェクトをIRコンパイラに移行する方法については、<a href="/ja/kotlin/js-ir-migration">Kotlin/JS IRコンパイラ移行ガイド</a>で確認してください。</p><h2 id="後方互換性を持つirコンパイラ用ライブラリの作成" tabindex="-1">後方互換性を持つIRコンパイラ用ライブラリの作成 <a class="header-anchor" href="#後方互換性を持つirコンパイラ用ライブラリの作成" aria-label="Permalink to &quot;後方互換性を持つIRコンパイラ用ライブラリの作成&quot;">​</a></h2><p>既存のコンパイラバックエンドと新しいIRコンパイラバックエンドの両方との互換性を提供したいライブラリメンテナーの場合、両方のバックエンド用のアーティファクトを作成できるコンパイラ選択の設定が利用可能です。これにより、既存のユーザーとの互換性を維持しつつ、次世代のKotlinコンパイラをサポートすることができます。このいわゆる<code>both</code>モードは、<code>gradle.properties</code>ファイルで<code>kotlin.js.compiler=both</code>設定を使用するか、<code>build.gradle(.kts)</code>ファイル内の<code>js</code>ブロック内でプロジェクト固有のオプションの1つとして設定できます。</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kotlin {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    js(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BOTH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>both</code>モードの場合、ソースからライブラリをビルドする際にIRコンパイラバックエンドとデフォルトのコンパイラバックエンドの両方が使用されます（そのため、この名前が付けられています）。これは、Kotlin IRを含む<code>klib</code>ファイルと、デフォルトコンパイラ用の<code>jar</code>ファイルの両方が生成されることを意味します。同じMaven座標で公開される場合、Gradleはユースケースに応じて適切なアーティファクト（古いコンパイラの場合は<code>js</code>、新しいコンパイラの場合は<code>klib</code>）を自動的に選択します。これにより、両方のコンパイラバックエンドを使用するプロジェクト向けにライブラリをコンパイルおよび公開することができます。</p>`,38)]))}const u=l(p,[["render",o]]);export{g as __pageData,u as default};
