import{_ as o,C as r,c as h,o as p,ag as a,j as t,G as n,w as l,a as i}from"./chunks/framework.Bksy39di.js";const m=JSON.parse('{"title":"Kotlin 1.5 호환성 가이드","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kotlin/compatibility-guide-15.md","filePath":"ko/kotlin/compatibility-guide-15.md","lastUpdated":1754307826000}'),k={name:"ko/kotlin/compatibility-guide-15.md"};function g(d,s,c,u,E,b){const e=r("tabs");return p(),h("div",null,[s[6]||(s[6]=a('<h1 id="kotlin-1-5-호환성-가이드" tabindex="-1">Kotlin 1.5 호환성 가이드 <a class="header-anchor" href="#kotlin-1-5-호환성-가이드" aria-label="Permalink to &quot;Kotlin 1.5 호환성 가이드&quot;">​</a></h1><p><em><a href="/ko/kotlin/kotlin-evolution-principles">언어 현대성 유지</a></em> 및 _<a href="/ko/kotlin/kotlin-evolution-principles">편리한 업데이트</a>_는 Kotlin 언어 설계의 기본 원칙 중 일부입니다. 전자는 언어 발전을 방해하는 구조는 제거해야 한다고 말하며, 후자는 코드 마이그레이션을 가능한 한 원활하게 하기 위해 이러한 제거는 사전에 잘 전달되어야 한다고 말합니다.</p><p>대부분의 언어 변경 사항은 업데이트 변경 로그 또는 컴파일러 경고와 같은 다른 채널을 통해 이미 발표되었지만, 이 문서는 모든 변경 사항을 요약하여 Kotlin 1.4에서 Kotlin 1.5로 마이그레이션하기 위한 완전한 참조 자료를 제공합니다.</p><h2 id="기본-용어" tabindex="-1">기본 용어 <a class="header-anchor" href="#기본-용어" aria-label="Permalink to &quot;기본 용어&quot;">​</a></h2><p>이 문서에서는 몇 가지 종류의 호환성을 소개합니다:</p><ul><li><em>소스</em>: 소스 비호환 변경은 (오류나 경고 없이) 잘 컴파일되던 코드가 더 이상 컴파일되지 않게 합니다.</li><li><em>바이너리</em>: 두 바이너리 아티팩트는 서로 교체해도 로딩 또는 링크 오류가 발생하지 않으면 바이너리 호환된다고 합니다.</li><li><em>동작</em>: 동일한 프로그램이 변경 적용 전후에 다른 동작을 보이면 동작 비호환이라고 합니다.</li></ul><p>이러한 정의는 순수 Kotlin에 대해서만 주어진다는 점을 기억하십시오. 다른 언어 관점(예: Java)에서 본 Kotlin 코드의 호환성은 이 문서의 범위를 벗어납니다.</p><h2 id="언어-및-표준-라이브러리" tabindex="-1">언어 및 표준 라이브러리 <a class="header-anchor" href="#언어-및-표준-라이브러리" aria-label="Permalink to &quot;언어 및 표준 라이브러리&quot;">​</a></h2><h3 id="스프레드-연산자를-시그니처-다형성-호출에-사용하는-것을-금지" tabindex="-1">스프레드 연산자를 시그니처 다형성 호출에 사용하는 것을 금지 <a class="header-anchor" href="#스프레드-연산자를-시그니처-다형성-호출에-사용하는-것을-금지" aria-label="Permalink to &quot;스프레드 연산자를 시그니처 다형성 호출에 사용하는 것을 금지&quot;">​</a></h3><blockquote><p><strong>이슈</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-35226" target="_blank" rel="noreferrer">KT-35226</a></p><p><strong>컴포넌트</strong>: 코어 언어</p><p><strong>호환성 변경 유형</strong>: 소스</p><p><strong>간략 요약</strong>: Kotlin 1.5부터 시그니처 다형성 호출에 스프레드 연산자(<code>*</code>)를 사용하는 것이 금지됩니다.</p><p><strong>사용 중단 주기</strong>:</p><ul><li>&lt; 1.5: 호출 지점에서 문제가 되는 연산자에 대한 경고 도입</li><li><code>&gt;= 1.5</code>: 이 경고를 오류로 격상 <code>-XXLanguage:-ProhibitSpreadOnSignaturePolymorphicCall</code>을 사용하여 일시적으로 1.5 이전 동작으로 되돌릴 수 있습니다.</li></ul></blockquote><h3 id="비추상-클래스가-해당-클래스에서-보이지-않는-추상-멤버-내부-패키지-비공개-를-포함하는-것을-금지" tabindex="-1">비추상 클래스가 해당 클래스에서 보이지 않는 추상 멤버(내부/패키지 비공개)를 포함하는 것을 금지 <a class="header-anchor" href="#비추상-클래스가-해당-클래스에서-보이지-않는-추상-멤버-내부-패키지-비공개-를-포함하는-것을-금지" aria-label="Permalink to &quot;비추상 클래스가 해당 클래스에서 보이지 않는 추상 멤버(내부/패키지 비공개)를 포함하는 것을 금지&quot;">​</a></h3><blockquote><p><strong>이슈</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-27825" target="_blank" rel="noreferrer">KT-27825</a></p><p><strong>컴포넌트</strong>: 코어 언어</p><p><strong>호환성 변경 유형</strong>: 소스</p><p><strong>간략 요약</strong>: Kotlin 1.5부터 비추상 클래스가 해당 클래스에서 보이지 않는 (내부/패키지 비공개) 추상 멤버를 포함하는 것이 금지됩니다.</p><p><strong>사용 중단 주기</strong>:</p><ul><li>&lt; 1.5: 문제가 되는 클래스에 대한 경고 도입</li><li><code>&gt;= 1.5</code>: 이 경고를 오류로 격상 <code>-XXLanguage:-ProhibitInvisibleAbstractMethodsInSuperclasses</code>를 사용하여 일시적으로 1.5 이전 동작으로 되돌릴 수 있습니다.</li></ul></blockquote><h3 id="jvm에서-실체화되지-않은-타입-파라미터-기반-배열을-실체화된-타입-인수로-사용하는-것을-금지" tabindex="-1">JVM에서 실체화되지 않은 타입 파라미터 기반 배열을 실체화된 타입 인수로 사용하는 것을 금지 <a class="header-anchor" href="#jvm에서-실체화되지-않은-타입-파라미터-기반-배열을-실체화된-타입-인수로-사용하는-것을-금지" aria-label="Permalink to &quot;JVM에서 실체화되지 않은 타입 파라미터 기반 배열을 실체화된 타입 인수로 사용하는 것을 금지&quot;">​</a></h3><blockquote><p><strong>이슈</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-31227" target="_blank" rel="noreferrer">KT-31227</a></p><p><strong>컴포넌트</strong>: 코어 언어</p><p><strong>호환성 변경 유형</strong>: 소스</p><p><strong>간략 요약</strong>: Kotlin 1.5부터 JVM에서 실체화되지 않은 타입 파라미터를 기반으로 한 배열을 실체화된 타입 인수로 사용하는 것이 금지됩니다.</p><p><strong>사용 중단 주기</strong>:</p><ul><li>&lt; 1.5: 문제가 되는 호출에 대한 경고 도입</li><li><code>&gt;= 1.5</code>: 이 경고를 오류로 격상 <code>-XXLanguage:-ProhibitNonReifiedArraysAsReifiedTypeArguments</code>를 사용하여 일시적으로 1.5 이전 동작으로 되돌릴 수 있습니다.</li></ul></blockquote><h3 id="주-생성자에-위임하지-않는-보조-enum-클래스-생성자를-금지" tabindex="-1">주 생성자에 위임하지 않는 보조 enum 클래스 생성자를 금지 <a class="header-anchor" href="#주-생성자에-위임하지-않는-보조-enum-클래스-생성자를-금지" aria-label="Permalink to &quot;주 생성자에 위임하지 않는 보조 enum 클래스 생성자를 금지&quot;">​</a></h3><blockquote><p><strong>이슈</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-35870" target="_blank" rel="noreferrer">KT-35870</a></p><p><strong>컴포넌트</strong>: 코어 언어</p><p><strong>호환성 변경 유형</strong>: 소스</p><p><strong>간략 요약</strong>: Kotlin 1.5부터 주 생성자에 위임하지 않는 보조 enum 클래스 생성자를 금지합니다.</p><p><strong>사용 중단 주기</strong>:</p><ul><li>&lt; 1.5: 문제가 되는 생성자에 대한 경고 도입</li><li><code>&gt;= 1.5</code>: 이 경고를 오류로 격상 <code>-XXLanguage:-RequiredPrimaryConstructorDelegationCallInEnums</code>를 사용하여 일시적으로 1.5 이전 동작으로 되돌릴 수 있습니다.</li></ul></blockquote><h3 id="비공개-인라인-함수에서-익명-타입을-노출하는-것을-금지" tabindex="-1">비공개 인라인 함수에서 익명 타입을 노출하는 것을 금지 <a class="header-anchor" href="#비공개-인라인-함수에서-익명-타입을-노출하는-것을-금지" aria-label="Permalink to &quot;비공개 인라인 함수에서 익명 타입을 노출하는 것을 금지&quot;">​</a></h3><blockquote><p><strong>이슈</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-33917" target="_blank" rel="noreferrer">KT-33917</a></p><p><strong>컴포넌트</strong>: 코어 언어</p><p><strong>호환성 변경 유형</strong>: 소스</p><p><strong>간략 요약</strong>: Kotlin 1.5부터 비공개 인라인 함수에서 익명 타입을 노출하는 것이 금지됩니다.</p><p><strong>사용 중단 주기</strong>:</p><ul><li>&lt; 1.5: 문제가 되는 생성자에 대한 경고 도입</li><li><code>&gt;= 1.5</code>: 이 경고를 오류로 격상 <code>-XXLanguage:-ApproximateAnonymousReturnTypesInPrivateInlineFunctions</code>를 사용하여 일시적으로 1.5 이전 동작으로 되돌릴 수 있습니다.</li></ul></blockquote><h3 id="sam-변환을-사용하는-인수-뒤에-스프레드되지-않은-배열을-전달하는-것을-금지" tabindex="-1">SAM 변환을 사용하는 인수 뒤에 스프레드되지 않은 배열을 전달하는 것을 금지 <a class="header-anchor" href="#sam-변환을-사용하는-인수-뒤에-스프레드되지-않은-배열을-전달하는-것을-금지" aria-label="Permalink to &quot;SAM 변환을 사용하는 인수 뒤에 스프레드되지 않은 배열을 전달하는 것을 금지&quot;">​</a></h3><blockquote><p><strong>이슈</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-35224" target="_blank" rel="noreferrer">KT-35224</a></p><p><strong>컴포넌트</strong>: 코어 언어</p><p><strong>호환성 변경 유형</strong>: 소스</p><p><strong>간략 요약</strong>: Kotlin 1.5부터 SAM 변환을 사용하는 인수 뒤에 스프레드되지 않은 배열을 전달하는 것을 금지합니다.</p><p><strong>사용 중단 주기</strong>:</p><ul><li>1.3.70: 문제가 되는 호출에 대한 경고 도입</li><li><code>&gt;= 1.5</code>: 이 경고를 오류로 격상 <code>-XXLanguage:-ProhibitVarargAsArrayAfterSamArgument</code>를 사용하여 일시적으로 1.5 이전 동작으로 되돌릴 수 있습니다.</li></ul></blockquote><h3 id="밑줄-이름의-catch-블록-파라미터에-대한-특수-시맨틱-지원" tabindex="-1">밑줄 이름의 catch 블록 파라미터에 대한 특수 시맨틱 지원 <a class="header-anchor" href="#밑줄-이름의-catch-블록-파라미터에-대한-특수-시맨틱-지원" aria-label="Permalink to &quot;밑줄 이름의 catch 블록 파라미터에 대한 특수 시맨틱 지원&quot;">​</a></h3><blockquote><p><strong>이슈</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-31567" target="_blank" rel="noreferrer">KT-31567</a></p><p><strong>컴포넌트</strong>: 코어 언어</p><p><strong>호환성 변경 유형</strong>: 소스</p><p><strong>간략 요약</strong>: Kotlin 1.5부터 catch 블록에서 예외의 파라미터 이름을 생략하는 데 사용되는 밑줄 기호(<code>_</code>)에 대한 참조를 금지합니다.</p><p><strong>사용 중단 주기</strong>:</p><ul><li>1.4.20: 문제가 되는 참조에 대한 경고 도입</li><li><code>&gt;= 1.5</code>: 이 경고를 오류로 격상 <code>-XXLanguage:-ForbidReferencingToUnderscoreNamedParameterOfCatchBlock</code>을 사용하여 일시적으로 1.5 이전 동작으로 되돌릴 수 있습니다.</li></ul></blockquote><h3 id="sam-변환의-구현-전략을-익명-클래스-기반에서-invokedynamic으로-변경" tabindex="-1">SAM 변환의 구현 전략을 익명 클래스 기반에서 invokedynamic으로 변경 <a class="header-anchor" href="#sam-변환의-구현-전략을-익명-클래스-기반에서-invokedynamic으로-변경" aria-label="Permalink to &quot;SAM 변환의 구현 전략을 익명 클래스 기반에서 invokedynamic으로 변경&quot;">​</a></h3><blockquote><p><strong>이슈</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-44912" target="_blank" rel="noreferrer">KT-44912</a></p><p><strong>컴포넌트</strong>: Kotlin/JVM</p><p><strong>호환성 변경 유형</strong>: 동작</p><p><strong>간략 요약</strong>: Kotlin 1.5부터 SAM(단일 추상 메서드) 변환의 구현 전략이 익명 클래스 생성 방식에서 <code>invokedynamic</code> JVM 명령어를 사용하는 방식으로 변경됩니다.</p><p><strong>사용 중단 주기</strong>:</p><ul><li>1.5: SAM 변환의 구현 전략 변경 <code>-Xsam-conversions=class</code>를 사용하여 구현 방식을 이전 방식으로 되돌릴 수 있습니다.</li></ul></blockquote><h3 id="jvm-ir-기반-백엔드의-성능-문제" tabindex="-1">JVM IR 기반 백엔드의 성능 문제 <a class="header-anchor" href="#jvm-ir-기반-백엔드의-성능-문제" aria-label="Permalink to &quot;JVM IR 기반 백엔드의 성능 문제&quot;">​</a></h3>',25)),t("blockquote",null,[s[1]||(s[1]=a('<p><strong>이슈</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-48233" target="_blank" rel="noreferrer">KT-48233</a></p><p><strong>컴포넌트</strong>: Kotlin/JVM</p><p><strong>호환성 변경 유형</strong>: 동작</p><p><strong>간략 요약</strong>: Kotlin 1.5는 Kotlin/JVM 컴파일러에 기본적으로 <a href="https://blog.jetbrains.com/kotlin/2021/02/the-jvm-backend-is-in-beta-let-s-make-it-stable-together/" target="_blank" rel="noreferrer">IR 기반 백엔드</a>를 사용합니다. 이전 버전의 언어에는 여전히 이전 백엔드가 기본적으로 사용됩니다.</p><p>Kotlin 1.5에서 새 컴파일러를 사용하면 일부 성능 저하 문제가 발생할 수 있습니다. 이러한 문제는 현재 수정 중입니다.</p><p><strong>사용 중단 주기</strong>:</p><ul><li>&lt; 1.5: 기본적으로 이전 JVM 백엔드 사용</li><li><code>&gt;= 1.5</code>: 기본적으로 IR 기반 백엔드 사용. Kotlin 1.5에서 이전 백엔드를 사용해야 하는 경우, 일시적으로 1.5 이전 동작으로 되돌리려면 다음 줄을 프로젝트 구성 파일에 추가하십시오.</li></ul><p>Gradle:</p>',8)),n(e,null,{default:l(()=>s[0]||(s[0]=[t("div",{class:"language-kotlin vp-adaptive-theme"},[t("button",{title:"Copy Code",class:"copy"}),t("span",{class:"lang"},"kotlin"),t("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[t("code",null,[t("span",{class:"line"},[t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks."),t("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withType"),t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),t("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"org"),t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),t("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"jetbrains"),t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),t("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),t("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"gradle"),t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),t("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"dsl"),t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),t("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"KotlinJvmCompile"),t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"> {")]),i(`
`),t("span",{class:"line"},[t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  kotlinOptions.useOldBackend "),t("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),t("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," true")]),i(`
`),t("span",{class:"line"},[t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1),t("div",{class:"language-groovy vp-adaptive-theme"},[t("button",{title:"Copy Code",class:"copy"}),t("span",{class:"lang"},"groovy"),t("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[t("code",null,[t("span",{class:"line"},[t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks"),t("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"withType("),t("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"org.jetbrains.kotlin.gradle.dsl.KotlinJvmCompile"),t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {")]),i(`
`),t("span",{class:"line"},[t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  kotlinOptions"),t("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"useOldBackend "),t("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),t("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," true")]),i(`
`),t("span",{class:"line"},[t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),s[2]||(s[2]=a(`<p>Maven:</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">configuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">arg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;-Xuse-old-backend&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">arg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">configuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>이 플래그에 대한 지원은 향후 릴리스에서 제거될 예정입니다.</p>`,3))]),s[7]||(s[7]=t("h3",{id:"jvm-ir-기반-백엔드의-새-필드-정렬",tabindex:"-1"},[i("JVM IR 기반 백엔드의 새 필드 정렬 "),t("a",{class:"header-anchor",href:"#jvm-ir-기반-백엔드의-새-필드-정렬","aria-label":'Permalink to "JVM IR 기반 백엔드의 새 필드 정렬"'},"​")],-1)),t("blockquote",null,[s[4]||(s[4]=a('<p><strong>이슈</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-46378" target="_blank" rel="noreferrer">KT-46378</a></p><p><strong>컴포넌트</strong>: Kotlin/JVM</p><p><strong>호환성 변경 유형</strong>: 동작</p><p><strong>간략 요약</strong>: 버전 1.5부터 Kotlin은 JVM 바이트코드를 다르게 정렬하는 <a href="https://blog.jetbrains.com/kotlin/2021/02/the-jvm-backend-is-in-beta-let-s-make-it-stable-together/" target="_blank" rel="noreferrer">IR 기반 백엔드</a>를 사용합니다. 즉, 생성자에 선언된 필드를 본문에 선언된 필드보다 먼저 생성하며, 이전 백엔드에서는 그 반대였습니다. 이 새로운 정렬 방식은 Java 직렬화와 같이 필드 순서에 의존하는 직렬화 프레임워크를 사용하는 프로그램의 동작을 변경할 수 있습니다.</p><p><strong>사용 중단 주기</strong>:</p><ul><li>&lt; 1.5: 기본적으로 이전 JVM 백엔드 사용. 생성자에 선언된 필드보다 본문에 선언된 필드를 먼저 가집니다.</li><li><code>&gt;= 1.5</code>: 기본적으로 새 IR 기반 백엔드 사용. 생성자에 선언된 필드가 본문에 선언된 필드보다 먼저 생성됩니다. 임시 해결책으로, Kotlin 1.5에서 이전 백엔드로 전환할 수 있습니다. 이를 위해 다음 줄을 프로젝트 구성 파일에 추가하십시오.</li></ul><p>Gradle:</p>',7)),n(e,null,{default:l(()=>s[3]||(s[3]=[t("div",{class:"language-kotlin vp-adaptive-theme"},[t("button",{title:"Copy Code",class:"copy"}),t("span",{class:"lang"},"kotlin"),t("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[t("code",null,[t("span",{class:"line"},[t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks."),t("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withType"),t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),t("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"org"),t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),t("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"jetbrains"),t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),t("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),t("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"gradle"),t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),t("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"dsl"),t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),t("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"KotlinJvmCompile"),t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"> {")]),i(`
`),t("span",{class:"line"},[t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  kotlinOptions.useOldBackend "),t("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),t("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," true")]),i(`
`),t("span",{class:"line"},[t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1),t("div",{class:"language-groovy vp-adaptive-theme"},[t("button",{title:"Copy Code",class:"copy"}),t("span",{class:"lang"},"groovy"),t("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[t("code",null,[t("span",{class:"line"},[t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks"),t("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"withType("),t("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"org.jetbrains.kotlin.gradle.dsl.KotlinJvmCompile"),t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {")]),i(`
`),t("span",{class:"line"},[t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  kotlinOptions"),t("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"useOldBackend "),t("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),t("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," true")]),i(`
`),t("span",{class:"line"},[t("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),s[5]||(s[5]=a(`<p>Maven:</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">configuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">arg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;-Xuse-old-backend&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">arg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">configuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>이 플래그에 대한 지원은 향후 릴리스에서 제거될 예정입니다.</p>`,3))]),s[8]||(s[8]=a(`<h3 id="위임-표현식에-제네릭-호출이-있는-위임된-프로퍼티에-대한-널-가능성-단언-생성" tabindex="-1">위임 표현식에 제네릭 호출이 있는 위임된 프로퍼티에 대한 널 가능성 단언 생성 <a class="header-anchor" href="#위임-표현식에-제네릭-호출이-있는-위임된-프로퍼티에-대한-널-가능성-단언-생성" aria-label="Permalink to &quot;위임 표현식에 제네릭 호출이 있는 위임된 프로퍼티에 대한 널 가능성 단언 생성&quot;">​</a></h3><blockquote><p><strong>이슈</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-44304" target="_blank" rel="noreferrer">KT-44304</a></p><p><strong>컴포넌트</strong>: Kotlin/JVM</p><p><strong>호환성 변경 유형</strong>: 동작</p><p><strong>간략 요약</strong>: Kotlin 1.5부터 Kotlin 컴파일러는 위임 표현식에 제네릭 호출이 있는 위임된 프로퍼티에 대해 널 가능성 단언을 발생시킵니다.</p><p><strong>사용 중단 주기</strong>:</p><ul><li>1.5: 위임된 프로퍼티에 대한 널 가능성 단언을 발생시킵니다(자세한 내용은 이슈 참고). <code>-Xuse-old-backend</code> 또는 <code>-language-version 1.4</code>를 사용하여 일시적으로 1.5 이전 동작으로 되돌릴 수 있습니다.</li></ul></blockquote><h3 id="onlyinputtypes로-주석-처리된-타입-파라미터가-있는-호출의-경고를-오류로-전환" tabindex="-1">@OnlyInputTypes로 주석 처리된 타입 파라미터가 있는 호출의 경고를 오류로 전환 <a class="header-anchor" href="#onlyinputtypes로-주석-처리된-타입-파라미터가-있는-호출의-경고를-오류로-전환" aria-label="Permalink to &quot;@OnlyInputTypes로 주석 처리된 타입 파라미터가 있는 호출의 경고를 오류로 전환&quot;">​</a></h3><blockquote><p><strong>이슈</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-45861" target="_blank" rel="noreferrer">KT-45861</a></p><p><strong>컴포넌트</strong>: 코어 언어</p><p><strong>호환성 변경 유형</strong>: 소스</p><p><strong>간략 요약</strong>: Kotlin 1.5부터는 타입 안전성을 개선하기 위해 <code>contains</code>, <code>indexOf</code>, <code>assertEquals</code>와 같은 호출에서 무의미한 인수를 사용하는 것을 금지합니다.</p><p><strong>사용 중단 주기</strong>:</p><ul><li>1.4.0: 문제가 되는 생성자에 대한 경고 도입</li><li><code>&gt;= 1.5</code>: 이 경고를 오류로 격상 <code>-XXLanguage:-StrictOnlyInputTypesChecks</code>를 사용하여 일시적으로 1.5 이전 동작으로 되돌릴 수 있습니다.</li></ul></blockquote><h3 id="이름-붙은-vararg가-있는-호출에서-인수의-올바른-실행-순서-사용" tabindex="-1">이름 붙은 vararg가 있는 호출에서 인수의 올바른 실행 순서 사용 <a class="header-anchor" href="#이름-붙은-vararg가-있는-호출에서-인수의-올바른-실행-순서-사용" aria-label="Permalink to &quot;이름 붙은 vararg가 있는 호출에서 인수의 올바른 실행 순서 사용&quot;">​</a></h3><blockquote><p><strong>이슈</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-17691" target="_blank" rel="noreferrer">KT-17691</a></p><p><strong>컴포넌트</strong>: Kotlin/JVM</p><p><strong>호환성 변경 유형</strong>: 동작</p><p><strong>간략 요약</strong>: Kotlin 1.5부터 이름 붙은 vararg가 있는 호출에서 인수 실행 순서가 변경됩니다.</p><p><strong>사용 중단 주기</strong>:</p><ul><li>&lt; 1.5: 문제가 되는 생성자에 대한 경고 도입</li><li><code>&gt;= 1.5</code>: 이 경고를 오류로 격상 <code>-XXLanguage:-UseCorrectExecutionOrderForVarargArguments</code>를 사용하여 일시적으로 1.5 이전 동작으로 되돌릴 수 있습니다.</li></ul></blockquote><h3 id="연산자-함수-호출에서-파라미터의-기본값-사용" tabindex="-1">연산자 함수 호출에서 파라미터의 기본값 사용 <a class="header-anchor" href="#연산자-함수-호출에서-파라미터의-기본값-사용" aria-label="Permalink to &quot;연산자 함수 호출에서 파라미터의 기본값 사용&quot;">​</a></h3><blockquote><p><strong>이슈</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-42064" target="_blank" rel="noreferrer">KT-42064</a></p><p><strong>컴포넌트</strong>: Kotlin/JVM</p><p><strong>호환성 변경 유형</strong>: 동작</p><p><strong>간략 요약</strong>: Kotlin 1.5부터 연산자 호출에서 파라미터의 기본값이 사용됩니다.</p><p><strong>사용 중단 주기</strong>:</p><ul><li>&lt; 1.5: 이전 동작(자세한 내용은 이슈 참고)</li><li><code>&gt;= 1.5</code>: 동작 변경됨 <code>-XXLanguage:-JvmIrEnabledByDefault</code>를 사용하여 일시적으로 1.5 이전 동작으로 되돌릴 수 있습니다.</li></ul></blockquote><h3 id="정상-프로그레션이-비어-있는-경우-for-루프에서-빈-역방향-프로그레션-생성" tabindex="-1">정상 프로그레션이 비어 있는 경우 for 루프에서 빈 역방향 프로그레션 생성 <a class="header-anchor" href="#정상-프로그레션이-비어-있는-경우-for-루프에서-빈-역방향-프로그레션-생성" aria-label="Permalink to &quot;정상 프로그레션이 비어 있는 경우 for 루프에서 빈 역방향 프로그레션 생성&quot;">​</a></h3><blockquote><p><strong>이슈</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-42533" target="_blank" rel="noreferrer">KT-42533</a></p><p><strong>컴포넌트</strong>: Kotlin/JVM</p><p><strong>호환성 변경 유형</strong>: 동작</p><p><strong>간략 요약</strong>: Kotlin 1.5부터 정상 프로그레션이 비어 있는 경우 for 루프에서 빈 역방향 프로그레션을 생성합니다.</p><p><strong>사용 중단 주기</strong>:</p><ul><li>&lt; 1.5: 이전 동작(자세한 내용은 이슈 참고)</li><li><code>&gt;= 1.5</code>: 동작 변경됨 <code>-XXLanguage:-JvmIrEnabledByDefault</code>를 사용하여 일시적으로 1.5 이전 동작으로 되돌릴 수 있습니다.</li></ul></blockquote><h3 id="char-코드-변환-및-char-숫자-변환-정리" tabindex="-1">Char-코드 변환 및 Char-숫자 변환 정리 <a class="header-anchor" href="#char-코드-변환-및-char-숫자-변환-정리" aria-label="Permalink to &quot;Char-코드 변환 및 Char-숫자 변환 정리&quot;">​</a></h3><blockquote><p><strong>이슈</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-23451" target="_blank" rel="noreferrer">KT-23451</a></p><p><strong>컴포넌트</strong>: kotlin-stdlib</p><p><strong>호환성 변경 유형</strong>: 소스</p><p><strong>간략 요약</strong>: Kotlin 1.5부터 <code>Char</code>를 숫자 타입으로 변환하는 기능이 사용 중단됩니다.</p><p><strong>사용 중단 주기</strong>:</p><ul><li>1.5: <code>Char.toInt()/toShort()/toLong()/toByte()/toDouble()/toFloat()</code> 및 <code>Long.toChar()</code>와 같은 역방향 함수를 사용 중단하고 대체 함수를 제안합니다.</li></ul></blockquote><h3 id="kotlin-text-함수에서-대소문자-구분-없는-문자-비교의-비일관성" tabindex="-1">kotlin.text 함수에서 대소문자 구분 없는 문자 비교의 비일관성 <a class="header-anchor" href="#kotlin-text-함수에서-대소문자-구분-없는-문자-비교의-비일관성" aria-label="Permalink to &quot;kotlin.text 함수에서 대소문자 구분 없는 문자 비교의 비일관성&quot;">​</a></h3><blockquote><p><strong>이슈</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-45496" target="_blank" rel="noreferrer">KT-45496</a></p><p><strong>컴포넌트</strong>: kotlin-stdlib</p><p><strong>호환성 변경 유형</strong>: 동작</p><p><strong>간략 요약</strong>: Kotlin 1.5부터 <code>Char.equals</code>는 대소문자를 구분하지 않는 비교에서 개선됩니다. 이는 먼저 문자의 대문자 변형이 같은지 비교한 다음, 해당 대문자 변형의 소문자 변형(문자 자체와 반대되는)이 같은지 비교하는 방식입니다.</p><p><strong>사용 중단 주기</strong>:</p><ul><li>&lt; 1.5: 이전 동작(자세한 내용은 이슈 참고)</li><li>1.5: <code>Char.equals</code> 함수의 동작 변경</li></ul></blockquote><h3 id="기본-로케일-민감-대소문자-변환-api-제거" tabindex="-1">기본 로케일 민감 대소문자 변환 API 제거 <a class="header-anchor" href="#기본-로케일-민감-대소문자-변환-api-제거" aria-label="Permalink to &quot;기본 로케일 민감 대소문자 변환 API 제거&quot;">​</a></h3><blockquote><p><strong>이슈</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-43023" target="_blank" rel="noreferrer">KT-43023</a></p><p><strong>컴포넌트</strong>: kotlin-stdlib</p><p><strong>호환성 변경 유형</strong>: 소스</p><p><strong>간략 요약</strong>: Kotlin 1.5부터 <code>String.toUpperCase()</code>와 같은 기본 로케일 민감 대소문자 변환 함수가 사용 중단됩니다.</p><p><strong>사용 중단 주기</strong>:</p><ul><li>1.5: 기본 로케일을 사용하는 대소문자 변환 함수를 사용 중단하고(자세한 내용은 이슈 참고) 대체 함수를 제안합니다.</li></ul></blockquote><h3 id="컬렉션-min-및-max-함수의-반환-타입을-점진적으로-널-불가능으로-변경" tabindex="-1">컬렉션 min 및 max 함수의 반환 타입을 점진적으로 널 불가능으로 변경 <a class="header-anchor" href="#컬렉션-min-및-max-함수의-반환-타입을-점진적으로-널-불가능으로-변경" aria-label="Permalink to &quot;컬렉션 min 및 max 함수의 반환 타입을 점진적으로 널 불가능으로 변경&quot;">​</a></h3><blockquote><p><strong>이슈</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-38854" target="_blank" rel="noreferrer">KT-38854</a></p><p><strong>컴포넌트</strong>: kotlin-stdlib (JVM)</p><p><strong>호환성 변경 유형</strong>: 소스</p><p><strong>간략 요약</strong>: 컬렉션 <code>min</code> 및 <code>max</code> 함수의 반환 타입은 1.6에서 널 불가능으로 변경될 예정입니다.</p><p><strong>사용 중단 주기</strong>:</p><ul><li>1.4: <code>...OrNull</code> 함수를 동의어로 도입하고 영향을 받는 API를 사용 중단합니다(자세한 내용은 이슈 참고).</li><li>1.5.0: 영향을 받는 API의 사용 중단 수준을 오류로 격상</li><li><code>&gt;= 1.6</code>: 영향을 받는 API를 널 불가능 반환 타입으로 재도입</li></ul></blockquote><h3 id="부동-소수점-타입을-short-및-byte로-변환하는-것의-사용-중단-수준-격상" tabindex="-1">부동 소수점 타입을 Short 및 Byte로 변환하는 것의 사용 중단 수준 격상 <a class="header-anchor" href="#부동-소수점-타입을-short-및-byte로-변환하는-것의-사용-중단-수준-격상" aria-label="Permalink to &quot;부동 소수점 타입을 Short 및 Byte로 변환하는 것의 사용 중단 수준 격상&quot;">​</a></h3><blockquote><p><strong>이슈</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-30360" target="_blank" rel="noreferrer">KT-30360</a></p><p><strong>컴포넌트</strong>: kotlin-stdlib (JVM)</p><p><strong>호환성 변경 유형</strong>: 소스</p><p><strong>간략 요약</strong>: Kotlin 1.4에서 <code>WARNING</code> 수준으로 사용 중단되었던 부동 소수점 타입을 <code>Short</code> 및 <code>Byte</code>로 변환하는 기능은 Kotlin 1.5.0부터 오류를 발생시킬 것입니다.</p><p><strong>사용 중단 주기</strong>:</p><ul><li>1.4: <code>Double.toShort()/toByte()</code> 및 <code>Float.toShort()/toByte()</code>를 사용 중단하고 대체 함수를 제안합니다.</li><li>1.5.0: 사용 중단 수준을 오류로 격상</li></ul></blockquote><h2 id="도구" tabindex="-1">도구 <a class="header-anchor" href="#도구" aria-label="Permalink to &quot;도구&quot;">​</a></h2><h3 id="단일-프로젝트에서-여러-jvm-버전의-kotlin-test를-혼합하지-않기" tabindex="-1">단일 프로젝트에서 여러 JVM 버전의 kotlin-test를 혼합하지 않기 <a class="header-anchor" href="#단일-프로젝트에서-여러-jvm-버전의-kotlin-test를-혼합하지-않기" aria-label="Permalink to &quot;단일 프로젝트에서 여러 JVM 버전의 kotlin-test를 혼합하지 않기&quot;">​</a></h3><blockquote><p><strong>이슈</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-40225" target="_blank" rel="noreferrer">KT-40225</a></p><p><strong>컴포넌트</strong>: Gradle</p><p><strong>호환성 변경 유형</strong>: 동작</p><p><strong>간략 요약</strong>: 서로 다른 테스트 프레임워크를 위한 여러 상호 배타적인 <code>kotlin-test</code> 변형이 전이적 의존성으로 인해 프로젝트에 존재할 수 있었습니다. 1.5.0부터 Gradle은 서로 다른 테스트 프레임워크를 위한 상호 배타적인 <code>kotlin-test</code> 변형을 허용하지 않을 것입니다.</p><p><strong>사용 중단 주기</strong>:</p><ul><li>&lt; 1.5: 서로 다른 테스트 프레임워크를 위한 여러 상호 배타적인 <code>kotlin-test</code> 변형을 허용합니다.</li><li><code>&gt;= 1.5</code>: 동작 변경됨. Gradle은 &quot;Cannot select module with conflict on capability...&quot;와 같은 예외를 발생시킵니다. 가능한 해결책: <ul><li>전이적 의존성이 가져오는 <code>kotlin-test</code> 변형 및 해당 테스트 프레임워크를 사용합니다.</li><li><code>kotlin-test</code> 변형을 전이적으로 가져오지 않는 다른 의존성 변형을 찾아, 사용하려는 테스트 프레임워크를 사용할 수 있도록 합니다.</li><li>사용하려는 테스트 프레임워크와 동일한 테스트 프레임워크를 사용하는 <code>kotlin-test</code> 변형을 전이적으로 가져오는 다른 의존성 변형을 찾습니다.</li><li>전이적으로 가져오는 테스트 프레임워크를 제외합니다. 다음 예시는 JUnit 4를 제외하는 방법입니다.<div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">configurations {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    testImplementation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">get()</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">exclude(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.kotlin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;kotlin-test-junit&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>테스트 프레임워크를 제외한 후 애플리케이션을 테스트하십시오. 작동하지 않는다면 제외 변경 사항을 롤백하고, 라이브러리와 동일한 테스트 프레임워크를 사용하며, 사용하던 테스트 프레임워크를 제외하십시오.</li></ul></li></ul></blockquote>`,23))])}const f=o(k,[["render",g]]);export{m as __pageData,f as default};
