import{_ as r}from"./chunks/direct-integration-scheme.Cw1ubqmC.js";import{_ as d}from"./chunks/xcode-run-script-phase-1.BlwrlSQM.js";import{_ as c,a as h,b as g}from"./chunks/disable-sandboxing-in-xcode-project-settings.Hr8r5yJK.js";import{_ as u,C as s,c as m,o as k,j as t,G as l,ag as e,a as o,w as a}from"./chunks/framework.Bksy39di.js";const B=JSON.parse('{"title":"직접 통합","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kmp/multiplatform-direct-integration.md","filePath":"ko/kmp/multiplatform-direct-integration.md","lastUpdated":1755516278000}'),_={name:"ko/kmp/multiplatform-direct-integration.md"};function b(S,i,C,f,F,P){const n=s("tldr"),p=s("shortcut");return k(),m("div",null,[i[9]||(i[9]=t("h1",{id:"직접-통합",tabindex:"-1"},[o("직접 통합 "),t("a",{class:"header-anchor",href:"#직접-통합","aria-label":'Permalink to "직접 통합"'},"​")],-1)),l(n,null,{default:a(()=>i[0]||(i[0]=[o(" 이는 로컬 통합 방식입니다. 다음과 같은 경우에 적합합니다:"),t("br",null,null,-1),t("ul",null,[t("li",null,"로컬 머신에 이미 iOS를 타겟팅하는 Kotlin 멀티플랫폼 프로젝트를 설정했습니다."),t("li",null,[o("Kotlin 멀티플랫폼 프로젝트에 CocoaPods 의존성이 없습니다."),t("br")])],-1),t("p",null,[t("a",{href:"./multiplatform-ios-integration-overview"},"가장 적합한 통합 방식을 선택하세요")],-1)])),_:1}),i[10]||(i[10]=e('<p>Kotlin 멀티플랫폼 프로젝트와 iOS 프로젝트 간에 코드를 공유하며 동시에 개발하고 싶다면, 특별한 스크립트를 사용하여 직접 통합을 설정할 수 있습니다.</p><p>이 스크립트는 Kotlin 프레임워크를 Xcode의 iOS 프로젝트에 연결하는 과정을 자동화합니다:</p><p><img src="'+r+'" alt="Direct integration diagram" width="700"></p><p>이 스크립트는 Xcode 환경에 맞게 특별히 설계된 <code>embedAndSignAppleFrameworkForXcode</code> Gradle 태스크를 사용합니다. 설정 과정에서, 이를 iOS 앱 빌드의 실행 스크립트 단계에 추가합니다. 그 후, iOS 앱 빌드를 실행하기 전에 Kotlin 아티팩트가 빌드되어 파생 데이터에 포함됩니다.</p><p>일반적으로 이 스크립트는:</p><ul><li>컴파일된 Kotlin 프레임워크를 iOS 프로젝트 구조 내의 올바른 디렉토리로 복사합니다.</li><li>포함된 프레임워크의 코드 서명 프로세스를 처리합니다.</li><li>Kotlin 프레임워크의 코드 변경 사항이 Xcode의 iOS 앱에 반영되도록 합니다.</li></ul><h2 id="설정-방법" tabindex="-1">설정 방법 <a class="header-anchor" href="#설정-방법" aria-label="Permalink to &quot;설정 방법&quot;">​</a></h2><p>현재 Kotlin 프레임워크를 연결하기 위해 CocoaPods 플러그인을 사용하고 있다면, 먼저 마이그레이션하세요. 프로젝트에 CocoaPods 의존성이 없다면, <a href="#connect-the-framework-to-your-project">이 단계를 건너뛰세요</a>.</p><h3 id="cocoapods-플러그인에서-마이그레이션하기" tabindex="-1">CocoaPods 플러그인에서 마이그레이션하기 <a class="header-anchor" href="#cocoapods-플러그인에서-마이그레이션하기" aria-label="Permalink to &quot;CocoaPods 플러그인에서 마이그레이션하기&quot;">​</a></h3><p>CocoaPods 플러그인에서 마이그레이션하려면:</p>',10)),t("ol",null,[t("li",null,[t("p",null,[i[2]||(i[2]=o("Xcode에서 ")),i[3]||(i[3]=t("strong",null,"Product",-1)),i[4]||(i[4]=o(" | ")),i[5]||(i[5]=t("strong",null,"Clean Build Folder",-1)),i[6]||(i[6]=o("를 사용하거나 ")),l(p,null,{default:a(()=>i[1]||(i[1]=[o("Cmd + Shift + K")])),_:1}),i[7]||(i[7]=o(" 단축키를 사용하여 빌드 디렉토리를 정리합니다."))])]),i[8]||(i[8]=e('<li><p>Podfile이 있는 디렉토리에서 다음 명령을 실행합니다:</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pod deintegrate</span></span></code></pre></div></li><li><p><code>build.gradle(.kts)</code> 파일에서 <code>cocoapods {}</code> 블록을 제거합니다.</p></li><li><p><code>.podspec</code> 파일과 Podfile을 삭제합니다.</p></li>',3))]),i[11]||(i[11]=e('<h3 id="프레임워크를-프로젝트에-연결하기" tabindex="-1">프레임워크를 프로젝트에 연결하기 <a class="header-anchor" href="#프레임워크를-프로젝트에-연결하기" aria-label="Permalink to &quot;프레임워크를 프로젝트에 연결하기&quot;">​</a></h3><p>멀티플랫폼 프로젝트에서 생성된 Kotlin 프레임워크를 Xcode 프로젝트에 연결하려면:</p><ol><li><p><code>embedAndSignAppleFrameworkForXcode</code> 태스크는 <code>binaries.framework</code> 구성 옵션이 선언되어 있을 때만 등록됩니다. Kotlin 멀티플랫폼 프로젝트의 <code>build.gradle.kts</code> 파일에서 iOS 타겟 선언을 확인하세요.</p></li><li><p>Xcode에서 프로젝트 이름을 두 번 클릭하여 iOS 프로젝트 설정을 엽니다.</p></li><li><p>왼쪽의 <strong>Targets</strong> 섹션에서 타겟을 선택한 다음, <strong>Build Phases</strong> 탭으로 이동합니다.</p></li><li><p>**+**를 클릭하고 <strong>New Run Script Phase</strong>를 선택합니다.</p><p><img src="'+d+`" alt="Add run script phase" width="700"></p></li><li><p>다음 스크립트를 조정한 후 스크립트 실행 필드에 붙여넣으세요:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&lt;Path to the root of the multiplatform project&gt;&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> :</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Shared</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> module</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:embedAndSignAppleFrameworkForXcode</span></span></code></pre></div><ul><li><code>cd</code> 명령에서 Kotlin 멀티플랫폼 프로젝트의 루트 경로를 지정하세요. 예를 들어, <code>$SRCROOT/..</code>입니다.</li><li><code>./gradlew</code> 명령에서 공유 모듈의 이름을 지정하세요. 예를 들어, <code>:shared</code> 또는 <code>:composeApp</code>입니다.</li></ul><p><img src="`+c+'" alt="Add the script" width="700"></p></li><li><p><strong>Based on dependency analysis</strong> 옵션을 비활성화합니다.</p><p>이렇게 하면 Xcode가 모든 빌드 중에 스크립트를 실행하고, 매번 누락된 출력 의존성에 대해 경고하지 않도록 보장합니다.</p></li><li><p><strong>Run Script</strong> 단계를 <strong>Compile Sources</strong> 단계보다 위로 이동시킵니다.</p><p><img src="'+h+'" alt="Drag the Run Script phase" width="700"></p></li><li><p><strong>Build Settings</strong> 탭에서 <strong>Build Options</strong> 아래의 <strong>User Script Sandboxing</strong> 옵션을 비활성화합니다:</p><p><img src="'+g+'" alt="User Script Sandboxing" width="700"></p><blockquote><p>샌드박싱을 먼저 비활성화하지 않고 iOS 프로젝트를 빌드했다면 Gradle 데몬을 다시 시작해야 할 수 있습니다. 샌드박싱되었을 수 있는 Gradle 데몬 프로세스를 중지하세요:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --stop</span></span></code></pre></div><p style=""></p></blockquote></li><li><p>Xcode에서 프로젝트를 빌드합니다. 모든 것이 올바르게 설정되었다면, 프로젝트가 성공적으로 빌드될 것입니다.</p></li></ol><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>기본 <code>Debug</code> 또는 <code>Release</code>와 다른 사용자 지정 빌드 구성이 있는 경우, <strong>Build Settings</strong> 탭의 <strong>User-Defined</strong> 아래에 <code>KOTLIN_FRAMEWORK_BUILD_TYPE</code> 설정을 추가하고 <code>Debug</code> 또는 <code>Release</code>로 설정하세요.</p></div><h2 id="다음-단계는" tabindex="-1">다음 단계는? <a class="header-anchor" href="#다음-단계는" aria-label="Permalink to &quot;다음 단계는?&quot;">​</a></h2><p>Swift 패키지 매니저와 작업할 때도 로컬 통합의 이점을 활용할 수 있습니다. <a href="./multiplatform-spm-local-integration">로컬 패키지에서 Kotlin 프레임워크에 대한 의존성을 추가하는 방법 알아보기</a>.</p>',6))])}const w=u(_,[["render",b]]);export{B as __pageData,w as default};
