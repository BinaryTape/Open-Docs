import{_ as t,c as e,o as n,ag as a}from"./chunks/framework.Bksy39di.js";const g=JSON.parse('{"title":"最小化心智複雜度概覽","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/api-guidelines-minimizing-mental-complexity.md","filePath":"zh-Hant/kotlin/api-guidelines-minimizing-mental-complexity.md","lastUpdated":1754307826000}'),l={name:"zh-Hant/kotlin/api-guidelines-minimizing-mental-complexity.md"};function o(r,i,s,p,m,d){return n(),e("div",null,i[0]||(i[0]=[a('<h1 id="最小化心智複雜度概覽" tabindex="-1">最小化心智複雜度概覽 <a class="header-anchor" href="#最小化心智複雜度概覽" aria-label="Permalink to &quot;最小化心智複雜度概覽&quot;">​</a></h1><p>使用者需要在使用你的函式庫之前，快速且準確地建立其函式和抽象的心智模型。達到此目的的最佳方式是最小化他們所遇到的複雜度。</p><p>最小化心智複雜度的策略包括：</p><ul><li><strong>簡潔性：</strong> 致力於設計一個以最少元件提供最多功能的 API，並重複使用現有的 Kotlin 類型和結構以避免冗餘。在可能的情況下，建立一小組核心抽象，並在其基礎上建構額外功能。</li><li><strong>可讀性：</strong> 以宣告式風格編寫 API，使程式碼的意圖清晰。除非絕對必要，否則應直接從問題領域中選擇抽象的名稱。將基本資料類型用於其預期用途。清楚區分核心功能和可選功能。</li><li><strong>一致性：</strong> 為你的 API 的每個設計層面維護單一、清晰的方法。使用統一的命名慣例、錯誤處理策略和模式，無論它們是物件導向的還是函數式的。</li><li><strong>可預測性：</strong> 設計你的函式庫以遵循<a href="https://en.wikipedia.org/wiki/Principle_of_least_astonishment" target="_blank" rel="noreferrer">「最小驚訝原則」</a>。確保預設設定符合最常見的用例，讓使用者能以最簡單和最短的程式碼完成任務。僅以清晰指定的方式允許擴充你的函式庫，以維護一致性和可預測性。</li><li><strong>可偵錯性：</strong> 確保你的函式庫透過促進資訊提取和導航嵌套函式呼叫來幫助使用者進行故障排除。當拋出例外時，例外的類型和內容應與底層問題相符，提供所有必要的詳細資訊以有效診斷和解決問題。應能捕獲並輸出領域物件的狀態，並查看任何中間表示。</li><li><strong>可測試性：</strong> 確保你的函式庫以及使用它的程式碼可以輕鬆測試。</li></ul><p>以下章節將提供在 Kotlin 中實施這些策略的更詳細資訊。</p><h2 id="下一步" tabindex="-1">下一步 <a class="header-anchor" href="#下一步" aria-label="Permalink to &quot;下一步&quot;">​</a></h2><p>若要開始深入探索這些策略，你可以從下一節學習簡潔性開始。</p><p><a href="/zh-Hant/kotlin/api-guidelines-simplicity">繼續下一部分</a></p>',8)]))}const c=t(l,[["render",o]]);export{g as __pageData,c as default};
