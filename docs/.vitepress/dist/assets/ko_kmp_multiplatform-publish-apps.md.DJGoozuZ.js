import{_ as e,a as i,b as a}from"./chunks/publish-your-application-on-web.Dq0Z4N4Z.js";import{_ as t,c as r,o as l,ag as p}from"./chunks/framework.Bksy39di.js";const b=JSON.parse('{"title":"애플리케이션 게시","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kmp/multiplatform-publish-apps.md","filePath":"ko/kmp/multiplatform-publish-apps.md","lastUpdated":1755516278000}'),n={name:"ko/kmp/multiplatform-publish-apps.md"};function s(d,o,c,u,h,g){return l(),r("div",null,o[0]||(o[0]=[p('<h1 id="애플리케이션-게시" tabindex="-1">애플리케이션 게시 <a class="header-anchor" href="#애플리케이션-게시" aria-label="Permalink to &quot;애플리케이션 게시&quot;">​</a></h1><p>앱의 릴리스 준비가 완료되면, 이를 게시하여 사용자에게 전달할 때입니다.</p><p>모바일 앱의 경우 각 플랫폼별로 여러 스토어를 이용할 수 있습니다. 하지만 이 문서에서는 공식 스토어인 <a href="https://play.google.com/store" target="_blank" rel="noreferrer">Google Play Store</a>와 <a href="https://www.apple.com/ios/app-store/" target="_blank" rel="noreferrer">Apple App Store</a>에 초점을 맞출 것입니다. 웹 앱의 경우, <a href="https://pages.github.com/" target="_blank" rel="noreferrer">GitHub Pages</a>를 사용할 것입니다.</p><p>Kotlin Multiplatform 애플리케이션을 게시를 위해 준비하는 방법을 알아보고, 이 과정에서 특별한 주의를 기울여야 할 부분들을 강조할 것입니다.</p><h2 id="android-앱" tabindex="-1">Android 앱 <a class="header-anchor" href="#android-앱" aria-label="Permalink to &quot;Android 앱&quot;">​</a></h2><p><a href="https://developer.android.com/kotlin" target="_blank" rel="noreferrer">Kotlin이 Android 개발의 주 언어</a>이므로, Kotlin Multiplatform은 프로젝트 컴파일 및 Android 앱 빌드에 명확한 영향을 미치지 않습니다. 공유 모듈에서 생성된 Android 라이브러리와 Android 앱 자체는 모두 일반적인 Android Gradle 모듈이며, 다른 Android 라이브러리 및 앱과 다르지 않습니다. 따라서 Kotlin Multiplatform 프로젝트에서 Android 앱을 게시하는 것은 <a href="https://developer.android.com/studio/publish" target="_blank" rel="noreferrer">Android 개발자 문서</a>에 설명된 일반적인 과정과 다르지 않습니다.</p><h2 id="ios-앱" tabindex="-1">iOS 앱 <a class="header-anchor" href="#ios-앱" aria-label="Permalink to &quot;iOS 앱&quot;">​</a></h2><p>Kotlin Multiplatform 프로젝트의 iOS 앱은 일반적인 Xcode 프로젝트에서 빌드되므로, 게시와 관련된 주요 단계는 <a href="https://developer.apple.com/ios/submit/" target="_blank" rel="noreferrer">iOS 개발자 문서</a>에 설명된 것과 동일합니다.</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Spring&#39;24 App Store 정책 변경사항으로 인해, 누락되거나 불완전한 개인 정보 처리 방식 선언(privacy manifest)은 앱에 대한 경고 또는 거절로 이어질 수 있습니다. 자세한 내용 및 해결 방법, 특히 Kotlin Multiplatform 앱의 경우 <a href="https://kotlinlang.org/docs/apple-privacy-manifest.html" target="_blank" rel="noreferrer">iOS 앱을 위한 개인 정보 처리 방식 선언</a>을 참조하세요.</p></div><p>Kotlin Multiplatform 프로젝트에 특정한 부분은 공유 Kotlin 모듈을 프레임워크로 컴파일하여 Xcode 프로젝트에 연결하는 것입니다. 일반적으로 공유 모듈과 Xcode 프로젝트 간의 통합은 <a href="https://plugins.jetbrains.com/plugin/14936-kotlin-multiplatform-mobile" target="_blank" rel="noreferrer">Android Studio용 Kotlin Multiplatform 플러그인</a>에 의해 자동으로 수행됩니다. 하지만 플러그인을 사용하지 않는 경우, Xcode에서 iOS 프로젝트를 빌드하고 번들링할 때 다음 사항을 염두에 두세요:</p><ul><li>공유 Kotlin 라이브러리는 네이티브 프레임워크로 컴파일됩니다.</li><li>특정 플랫폼용으로 컴파일된 프레임워크를 iOS 앱 프로젝트에 연결해야 합니다.</li><li>Xcode 프로젝트 설정에서 빌드 시스템이 검색할 수 있도록 프레임워크 경로를 지정합니다.</li><li>프로젝트 빌드 후, 런타임에 프레임워크와 연동할 때 문제가 없는지 확인하기 위해 앱을 실행하고 테스트해야 합니다.</li></ul><p>공유 Kotlin 모듈을 iOS 프로젝트에 연결할 수 있는 두 가지 방법이 있습니다:</p><ul><li><a href="./multiplatform-cocoapods-overview">Kotlin CocoaPods Gradle 플러그인</a>을 사용합니다. 이 플러그인을 사용하면 네이티브 타겟을 가진 멀티플랫폼 프로젝트를 iOS 프로젝트에서 CocoaPods 의존성으로 사용할 수 있습니다.</li><li>Multiplatform 프로젝트를 수동으로 구성하여 iOS 프레임워크를 생성하고, Xcode 프로젝트가 최신 버전을 가져오도록 구성합니다. Kotlin Multiplatform 마법사 또는 Android Studio용 Kotlin Multiplatform 플러그인이 일반적으로 이 구성을 수행합니다. Xcode에서 프레임워크를 직접 추가하는 방법을 알아보려면 <a href="./multiplatform-integrate-in-existing-app#configure-the-ios-project-to-use-a-kmp-framework">iOS 프로젝트에 프레임워크 연결</a>을 참조하세요.</li></ul><h3 id="ios-애플리케이션-구성" tabindex="-1">iOS 애플리케이션 구성 <a class="header-anchor" href="#ios-애플리케이션-구성" aria-label="Permalink to &quot;iOS 애플리케이션 구성&quot;">​</a></h3><p>Xcode 없이 결과 앱에 영향을 미치는 기본 속성을 구성할 수 있습니다.</p><h4 id="번들-id" tabindex="-1">번들 ID <a class="header-anchor" href="#번들-id" aria-label="Permalink to &quot;번들 ID&quot;">​</a></h4><p><a href="https://developer.apple.com/documentation/bundleresources/information_property_list/cfbundleidentifier#discussion" target="_blank" rel="noreferrer">번들 ID</a>는 운영 체제에서 앱을 고유하게 식별합니다. 변경하려면 Android Studio에서 <code>iosApp/Configuration/Config.xcconfig</code> 파일을 열고 <code>BUNDLE_ID</code>를 업데이트합니다.</p><h4 id="앱-이름" tabindex="-1">앱 이름 <a class="header-anchor" href="#앱-이름" aria-label="Permalink to &quot;앱 이름&quot;">​</a></h4><p>앱 이름은 타겟 실행 파일과 애플리케이션 번들 이름을 설정합니다. 앱 이름을 변경하려면:</p><ul><li><p>아직 Android Studio에서 프로젝트를 열지 않았다면, <code>iosApp/Configuration/Config.xcconfig</code> 파일의 <code>APP_NAME</code> 옵션을 어떤 텍스트 편집기에서든 직접 변경할 수 있습니다.</p></li><li><p>이미 Android Studio에서 프로젝트를 열었다면 다음을 수행하세요:</p><ol><li>프로젝트를 닫습니다.</li><li>어떤 텍스트 편집기에서든 <code>iosApp/Configuration/Config.xcconfig</code> 파일의 <code>APP_NAME</code> 옵션을 변경합니다.</li><li>Android Studio에서 프로젝트를 다시 엽니다.</li></ol></li></ul><p>다른 설정을 구성해야 한다면 Xcode를 사용하세요. Android Studio에서 프로젝트를 연 후, Xcode에서 <code>iosApp/iosApp.xcworkspace</code> 파일을 열고 그곳에서 변경하세요.</p><h3 id="크래시-리포트-심볼화" tabindex="-1">크래시 리포트 심볼화 <a class="header-anchor" href="#크래시-리포트-심볼화" aria-label="Permalink to &quot;크래시 리포트 심볼화&quot;">​</a></h3><p>개발자가 앱을 개선하는 데 도움을 주기 위해 iOS는 앱 크래시를 분석하는 수단을 제공합니다. 상세한 크래시 분석을 위해, 크래시 리포트의 메모리 주소를 함수나 줄 번호와 같은 소스 코드의 위치와 일치시키는 특수 디버그 심볼(<code>.dSYM</code>) 파일을 사용합니다.</p><p>기본적으로 공유 Kotlin 모듈에서 생성된 iOS 프레임워크의 릴리스 버전에는 함께 제공되는 <code>.dSYM</code> 파일이 있습니다. 이는 공유 모듈의 코드에서 발생하는 크래시를 분석하는 데 도움이 됩니다.</p><p>크래시 리포트 심볼화에 대한 자세한 정보는 <a href="https://kotlinlang.org/docs/native-debugging.html#debug-ios-applications" target="_blank" rel="noreferrer">Kotlin/Native 문서</a>를 참조하세요.</p><h2 id="웹-앱" tabindex="-1">웹 앱 <a class="header-anchor" href="#웹-앱" aria-label="Permalink to &quot;웹 앱&quot;">​</a></h2><p>웹 애플리케이션을 게시하려면 애플리케이션을 구성하는 컴파일된 파일과 리소스를 포함하는 아티팩트를 생성하세요. 이 아티팩트는 GitHub Pages와 같은 웹 호스팅 플랫폼에 애플리케이션을 배포하는 데 필요합니다.</p><h3 id="아티팩트-생성" tabindex="-1">아티팩트 생성 <a class="header-anchor" href="#아티팩트-생성" aria-label="Permalink to &quot;아티팩트 생성&quot;">​</a></h3><p><strong>wasmJsBrowserDistribution</strong> 태스크 실행을 위한 실행 구성을 생성합니다:</p><ol><li><p><strong>Run | Edit Configurations</strong> 메뉴 항목을 선택합니다.</p></li><li><p>더하기 버튼을 클릭하고 드롭다운 목록에서 <strong>Gradle</strong>을 선택합니다.</p></li><li><p><strong>Tasks and arguments</strong> 필드에 다음 명령어를 붙여넣습니다:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wasmJsBrowserDistribution</span></span></code></pre></div></li><li><p><strong>OK</strong>를 클릭합니다.</p></li></ol><p>이제 이 구성을 사용하여 태스크를 실행할 수 있습니다:</p><p><img src="'+e+'" alt="Wasm 배포 태스크 실행" width="350"></p><p>태스크가 완료되면, <code>composeApp/build/dist/wasmJs/productionExecutable</code> 디렉터리에서 생성된 아티팩트를 찾을 수 있습니다:</p><p><img src="'+i+'" alt="아티팩트 디렉터리" width="400"></p><h3 id="github-pages에-애플리케이션-게시" tabindex="-1">GitHub Pages에 애플리케이션 게시 <a class="header-anchor" href="#github-pages에-애플리케이션-게시" aria-label="Permalink to &quot;GitHub Pages에 애플리케이션 게시&quot;">​</a></h3><p>아티팩트가 준비되면 웹 호스팅 플랫폼에 애플리케이션을 배포할 수 있습니다:</p><ol><li><p><code>productionExecutable</code> 디렉터리 내용을 사이트를 생성하려는 리포지토리로 복사합니다.</p></li><li><p><a href="https://docs.github.com/en/pages/getting-started-with-github-pages/creating-a-github-pages-site#creating-your-site" target="_blank" rel="noreferrer">사이트 생성</a>에 대한 GitHub 지침을 따릅니다.</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>변경 사항을 GitHub에 푸시한 후 사이트 변경 사항이 게시되는 데 최대 10분이 소요될 수 있습니다.</p></div></li><li><p>브라우저에서 GitHub Pages 도메인으로 이동합니다.</p><p><img src="'+a+'" alt="GitHub Pages로 이동" width="650"></p></li></ol><p>축하합니다! GitHub Pages에 아티팩트를 게시했습니다.</p><h3 id="웹-애플리케이션-디버그" tabindex="-1">웹 애플리케이션 디버그 <a class="header-anchor" href="#웹-애플리케이션-디버그" aria-label="Permalink to &quot;웹 애플리케이션 디버그&quot;">​</a></h3><p>웹 애플리케이션은 추가 구성 없이 브라우저에서 바로 디버그할 수 있습니다. 브라우저에서 디버그하는 방법을 알아보려면 Kotlin 문서의 <a href="https://kotlinlang.org/docs/wasm-debugging.html#debug-in-your-browser" target="_blank" rel="noreferrer">브라우저에서 디버그</a> 가이드를 참조하세요.</p>',40)]))}const k=t(n,[["render",s]]);export{b as __pageData,k as default};
