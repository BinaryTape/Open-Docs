import{_ as t,C as i,c as l,o as p,G as a,ag as h}from"./chunks/framework.Bksy39di.js";const y=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ko/ktor/client-user-agent.md","filePath":"ko/ktor/client-user-agent.md","lastUpdated":1755457140000}'),k={name:"ko/ktor/client-user-agent.md"};function r(o,s,d,c,g,E){const e=i("TopicTitle"),n=i("primary-label");return p(),l("div",null,[a(e,{labelRef:"client-plugin",title:"사용자 에이전트"}),a(n,{ref:"client-plugin"},null,512),s[0]||(s[0]=h(`<p><a href="https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins/-user-agent" target="_blank" rel="noreferrer">UserAgent</a> 플러그인은 모든 <a href="./client-requests">요청</a>에 <code>User-Agent</code> 헤더를 추가합니다.</p><h2 id="add_dependencies" tabindex="-1">종속성 추가 <a class="header-anchor" href="#add_dependencies" aria-label="Permalink to &quot;종속성 추가 {id=&quot;add_dependencies&quot;}&quot;">​</a></h2><p><code>UserAgent</code>는 <a href="./client-dependencies">ktor-client-core</a> 아티팩트만 필요로 하며 어떤 특정 종속성도 필요하지 않습니다.</p><h2 id="install_plugin" tabindex="-1">UserAgent 설치 및 구성 <a class="header-anchor" href="#install_plugin" aria-label="Permalink to &quot;UserAgent 설치 및 구성 {id=&quot;install_plugin&quot;}&quot;">​</a></h2><p><code>UserAgent</code>를 설치하려면, <a href="./client-create-and-configure#configure-client">클라이언트 구성 블록</a> 내에서 <code>install</code> 함수에 전달하세요. 그런 다음, <code>agent</code> 프로퍼티를 사용하여 <code>User-Agent</code> 값을 지정하세요:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.engine.cio.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.plugins.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(UserAgent) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        agent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Ktor client&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Ktor는 또한 해당 함수들을 사용하여 브라우저 또는 curl과 유사한 <code>User-Agent</code> 값을 추가할 수 있도록 허용합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    BrowserUserAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ... or</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    CurlUserAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,8))])}const F=t(k,[["render",r]]);export{y as __pageData,F as default};
