import{_ as d,C as p,c as o,o as E,j as s,G as a,ag as t,a as n,w as l}from"./chunks/framework.Bksy39di.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/whatsnew1720.md","filePath":"zh-Hant/kotlin/whatsnew1720.md","lastUpdated":1754307826000}'),g={name:"zh-Hant/kotlin/whatsnew1720.md"};function c(y,i,F,u,b,C){const r=p("tldr"),e=p("YouTubeVideo"),h=p("tab"),k=p("tabs");return E(),o("div",null,[i[5]||(i[5]=s("h1",{id:"kotlin-1-7-20-有什麼新功能",tabindex:"-1"},[n("Kotlin 1.7.20 有什麼新功能 "),s("a",{class:"header-anchor",href:"#kotlin-1-7-20-有什麼新功能","aria-label":'Permalink to "Kotlin 1.7.20 有什麼新功能"'},"​")],-1)),a(r,null,{default:l(()=>i[0]||(i[0]=[s("p",null,"對 Kotlin 1.7.20 的 IDE 支援適用於 IntelliJ IDEA 2021.3、2022.1 和 2022.2。",-1)])),_:1}),i[6]||(i[6]=t('<p><em><a href="/zh-Hant/kotlin/releases#release-details">發佈日期：2022 年 9 月 29 日</a></em></p><p>Kotlin 1.7.20 版本已發佈！以下是此版本的一些重點功能：</p><ul><li><a href="#support-for-kotlin-k2-compiler-plugins">新的 Kotlin K2 編譯器支援 <code>all-open</code>、帶接收者的 SAM、Lombok 和其他編譯器外掛程式</a></li><li><a href="#preview-of-the-operator-for-creating-open-ended-ranges">我們引入了預覽版的 <code>..&lt;</code> 運算子，用於建立開放式範圍</a></li><li><a href="#the-new-kotlin-native-memory-manager-enabled-by-default">新的 Kotlin/Native 記憶體管理器現已預設啟用</a></li><li><a href="#generic-inline-classes">我們為 JVM 引入了一個新的實驗性功能：具有泛型基礎類型的內聯類別</a></li></ul><p>您也可以在此影片中找到這些變更的簡要概述：</p>',4)),a(e,{src:"https://www.youtube.com/v/OG9npowJgE8",title:"What's new in Kotlin 1.7.20"}),i[7]||(i[7]=t('<h2 id="對-kotlin-k2-編譯器外掛程式的支援" tabindex="-1">對 Kotlin K2 編譯器外掛程式的支援 <a class="header-anchor" href="#對-kotlin-k2-編譯器外掛程式的支援" aria-label="Permalink to &quot;對 Kotlin K2 編譯器外掛程式的支援&quot;">​</a></h2><p>Kotlin 團隊持續穩定 K2 編譯器。 K2 仍處於 <strong>Alpha</strong> 階段（如同在 <a href="/zh-Hant/kotlin/whatsnew17#new-kotlin-k2-compiler-for-the-jvm-in-alpha">Kotlin 1.7.0 版本</a> 中宣布的）， 但它現在支援多個編譯器外掛程式。您可以追蹤 <a href="https://youtrack.jetbrains.com/issue/KT-52604" target="_blank" rel="noreferrer">此 YouTrack 問題</a> 以取得 Kotlin 團隊關於新編譯器的更新。</p><p>從此 1.7.20 版本開始，Kotlin K2 編譯器支援以下外掛程式：</p><ul><li><a href="/zh-Hant/kotlin/all-open-plugin"><code>all-open</code></a></li><li><a href="/zh-Hant/kotlin/no-arg-plugin"><code>no-arg</code></a></li><li><a href="/zh-Hant/kotlin/sam-with-receiver-plugin">SAM with receiver</a></li><li><a href="/zh-Hant/kotlin/lombok">Lombok</a></li><li>AtomicFU</li><li><code>jvm-abi-gen</code></li></ul><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>新 K2 編譯器的 Alpha 版本僅適用於 JVM 專案。 它不支援 Kotlin/JS、Kotlin/Native 或其他多平台專案。</p></div><p>在以下影片中了解更多關於新編譯器及其優點的資訊：</p><ul><li><a href="https://www.youtube.com/watch?v=iTdJJq_LyoY" target="_blank" rel="noreferrer">The Road to the New Kotlin Compiler</a></li><li><a href="https://www.youtube.com/watch?v=db19VFLZqJM" target="_blank" rel="noreferrer">K2 Compiler: a Top-Down View</a></li></ul><h3 id="如何啟用-kotlin-k2-編譯器" tabindex="-1">如何啟用 Kotlin K2 編譯器 <a class="header-anchor" href="#如何啟用-kotlin-k2-編譯器" aria-label="Permalink to &quot;如何啟用 Kotlin K2 編譯器&quot;">​</a></h3><p>要啟用並測試 Kotlin K2 編譯器，請使用以下編譯器選項：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-Xuse-k2</span></span></code></pre></div><p>您可以在您的 <code>build.gradle(.kts)</code> 檔案中指定它：</p>',11)),a(k,{group:"build-script"},{default:l(()=>[a(h,{title:"Kotlin","group-key":"kotlin"},{default:l(()=>i[1]||(i[1]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withType"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"KotlinCompile"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"> {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    kotlinOptions.useK2 "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," true")]),n(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),a(h,{title:"Groovy","group-key":"groovy"},{default:l(()=>i[2]||(i[2]=[s("div",{class:"language-groovy vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"groovy"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"compileKotlin {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    kotlinOptions"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"useK2 "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," true")]),n(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),i[8]||(i[8]=t('<p>查看您的 JVM 專案的效能提升，並與舊編譯器的結果進行比較。</p><h3 id="留下您對新-k2-編譯器的回饋" tabindex="-1">留下您對新 K2 編譯器的回饋 <a class="header-anchor" href="#留下您對新-k2-編譯器的回饋" aria-label="Permalink to &quot;留下您對新 K2 編譯器的回饋&quot;">​</a></h3><p>我們非常感謝您以任何形式提供回饋：</p><ul><li>直接向 Kotlin Slack 中的 K2 開發人員提供您的回饋：<a href="https://surveys.jetbrains.com/s3/kotlin-slack-sign-up?_gl=1*ju6cbn*_ga*MTA3MTk5NDkzMC4xNjQ2MDY3MDU4*_ga_9J976DJZ68*MTY1ODMzNzA3OS4xMDAuMS4xNjU4MzQwODEwLjYw" target="_blank" rel="noreferrer">取得邀請</a> 並加入 <a href="https://kotlinlang.slack.com/archives/C03PK0PE257" target="_blank" rel="noreferrer">#k2-early-adopters</a> 頻道。</li><li>向 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">我們的問題追蹤器</a> 回報您在使用新 K2 編譯器時遇到的任何問題。</li><li><a href="https://www.jetbrains.com/help/idea/settings-usage-statistics.html" target="_blank" rel="noreferrer">啟用「<strong>傳送使用統計資料</strong>」選項</a> 以允許 JetBrains 收集關於 K2 使用的匿名資料。</li></ul><h2 id="語言" tabindex="-1">語言 <a class="header-anchor" href="#語言" aria-label="Permalink to &quot;語言&quot;">​</a></h2><p>Kotlin 1.7.20 引入了新語言功能的預覽版本，並對建構器型別推斷施加了限制：</p><ul><li><a href="#preview-of-the-operator-for-creating-open-ended-ranges">預覽版 <code>..&lt;</code> 運算子，用於建立開放式範圍</a></li><li><a href="#improved-string-representations-for-singletons-and-sealed-class-hierarchies-with-data-objects">新的資料物件宣告</a></li><li><a href="#new-builder-type-inference-restrictions">新的建構器型別推斷限制</a></li></ul><h3 id="預覽版-運算子-用於建立開放式範圍" tabindex="-1">預覽版 <code>..&lt;</code> 運算子，用於建立開放式範圍 <a class="header-anchor" href="#預覽版-運算子-用於建立開放式範圍" aria-label="Permalink to &quot;預覽版 `..&lt;` 運算子，用於建立開放式範圍&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>新的運算子是 <a href="/zh-Hant/kotlin/components-stability#stability-levels-explained">實驗性</a> 功能，且在 IDE 中的支援有限。</p></div><p>此版本引入了新的 <code>..&lt;</code> 運算子。Kotlin 具有 <code>..</code> 運算子來表達一個值範圍。新的 <code>..&lt;</code> 運算子作用類似於 <code>until</code> 函式，幫助您定義開放式範圍。</p>',10)),a(e,{src:"https://www.youtube.com/watch?v=v0AHdAIBnbs",title:"New operator for open-ended ranges"}),i[9]||(i[9]=t(`<p>我們的研究表明，這個新運算子更能有效地表達開放式範圍，並清楚表明上限不包含在內。</p><p>以下是 <code>when</code> 表達式中使用 <code>..&lt;</code> 運算子的範例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">when</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.25</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 第一季</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.25</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 第二季</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.75</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 第三季</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.75</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 最後一季 &lt;- 請注意此處為閉合範圍</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="標準函式庫-api-變更" tabindex="-1">標準函式庫 API 變更 <a class="header-anchor" href="#標準函式庫-api-變更" aria-label="Permalink to &quot;標準函式庫 API 變更&quot;">​</a></h4><p>以下新類型和操作將被引入通用 Kotlin 標準函式庫中的 <code>kotlin.ranges</code> 軟體包中：</p><h5 id="新的-openendrange-t-介面" tabindex="-1">新的 <code>OpenEndRange&lt;T&gt;</code> 介面 <a class="header-anchor" href="#新的-openendrange-t-介面" aria-label="Permalink to &quot;新的 \`OpenEndRange&lt;T&gt;\` 介面&quot;">​</a></h5><p>用於表示開放式範圍的新介面與現有的 <code>ClosedRange&lt;T&gt;</code> 介面非常相似：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OpenEndRange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Comparable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt; {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 下限</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> start: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 上限，不包含在範圍內</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> endExclusive: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    operator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> contains</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Boolean</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> start </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> endExclusive</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isEmpty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Boolean</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> start </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> endExclusive</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h5 id="在現有可疊代範圍中實作-openendrange" tabindex="-1">在現有可疊代範圍中實作 OpenEndRange <a class="header-anchor" href="#在現有可疊代範圍中實作-openendrange" aria-label="Permalink to &quot;在現有可疊代範圍中實作 OpenEndRange&quot;">​</a></h5><p>當開發人員需要一個不包含上限的範圍時，他們目前使用 <code>until</code> 函式來有效地產生一個具有相同值的閉合可疊代範圍。為了使這些範圍在新接受 <code>OpenEndRange&lt;T&gt;</code> 的 API 中可用，我們希望在現有的可疊代範圍中實作該介面：<code>IntRange</code>、<code>LongRange</code>、<code>CharRange</code>、<code>UIntRange</code> 和 <code>ULongRange</code>。因此它們將同時實作 <code>ClosedRange&lt;T&gt;</code> 和 <code>OpenEndRange&lt;T&gt;</code> 介面。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IntRange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IntProgression</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(...), ClosedRange</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OpenEndRange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> start: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> endInclusive: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> endExclusive: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h5 id="標準型別的-rangeuntil-運算子" tabindex="-1">標準型別的 <code>rangeUntil</code> 運算子 <a class="header-anchor" href="#標準型別的-rangeuntil-運算子" aria-label="Permalink to &quot;標準型別的 \`rangeUntil\` 運算子&quot;">​</a></h5><p><code>rangeUntil</code> 運算子將為目前由 <code>rangeTo</code> 運算子定義的相同型別和組合提供。我們將它們作為擴充函式提供，用於原型目的，但為了一致性，我們計劃在穩定開放式範圍 API 之前，稍後將它們設為成員。</p><h4 id="如何啟用-運算子" tabindex="-1">如何啟用 <code>..&lt;</code> 運算子 <a class="header-anchor" href="#如何啟用-運算子" aria-label="Permalink to &quot;如何啟用 \`..&lt;\` 運算子&quot;">​</a></h4><p>要使用 <code>..&lt;</code> 運算子或為您自己的型別實作該運算子約定，請啟用 <code>-language-version 1.8</code> 編譯器選項。</p><p>為支援標準型別的開放式範圍而引入的新 API 元素需要選擇性加入，這與實驗性標準函式庫 API 通常一樣：<code>@OptIn(ExperimentalStdlibApi::class)</code>。或者，您可以使用 <code>-opt-in=kotlin.ExperimentalStdlibApi</code> 編譯器選項。</p><p><a href="https://github.com/kotlin/KEEP/blob/open-ended-ranges/proposals/open-ended-ranges.md" target="_blank" rel="noreferrer">在此 KEEP 文件中閱讀更多關於新運算子的資訊</a>。</p><h3 id="使用資料物件改進單例與密封類別層次的字串表示" tabindex="-1">使用資料物件改進單例與密封類別層次的字串表示 <a class="header-anchor" href="#使用資料物件改進單例與密封類別層次的字串表示" aria-label="Permalink to &quot;使用資料物件改進單例與密封類別層次的字串表示&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>資料物件是 <a href="/zh-Hant/kotlin/components-stability#stability-levels-explained">實驗性</a> 功能，且目前在 IDE 中的支援有限。</p></div><p>此版本引入了一種新的 <code>object</code> 宣告型別供您使用：<code>data object</code>。<a href="https://youtrack.jetbrains.com/issue/KT-4107" target="_blank" rel="noreferrer">資料物件</a> 在概念上與常規 <code>object</code> 宣告行為相同，但預設提供簡潔的 <code>toString</code> 表示。</p>`,20)),a(e,{src:"https://www.youtube.com/v/ovAqcwFhEGc",title:"Data objects in Kotlin 1.7.20"}),i[10]||(i[10]=t(`<div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.example</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyObject</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyDataObject</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MyObject) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// org.example.MyObject@1f32e575</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MyDataObject) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// MyDataObject</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>這使得 <code>data object</code> 宣告非常適合密封類別層次結構，您可以在其中將它們與 <code>data class</code> 宣告一起使用。在此程式碼片段中，將 <code>EndOfFile</code> 宣告為 <code>data object</code> 而非普通的 <code>object</code> 意味著它將獲得一個美觀的 <code>toString</code> 而無需手動覆寫，與伴隨的 <code>data class</code> 定義保持對稱：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">sealed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ReadResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ReadResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ReadResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EndOfFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ReadResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ReadResult.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Number(value=1)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ReadResult.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Foo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Text(value=Foo)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ReadResult.EndOfFile) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// EndOfFile</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="如何啟用資料物件" tabindex="-1">如何啟用資料物件 <a class="header-anchor" href="#如何啟用資料物件" aria-label="Permalink to &quot;如何啟用資料物件&quot;">​</a></h4><p>要在您的程式碼中使用資料物件宣告，請啟用 <code>-language-version 1.9</code> 編譯器選項。在 Gradle 專案中，您可以透過在 <code>build.gradle(.kts)</code> 中新增以下內容來實現：</p>`,5)),a(k,{group:"build-script"},{default:l(()=>[a(h,{title:"Kotlin","group-key":"kotlin"},{default:l(()=>i[3]||(i[3]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withType"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"org"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"jetbrains"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"gradle"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"tasks"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"KotlinCompile"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},">()."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"configureEach"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"    // ...")]),n(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    kotlinOptions.languageVersion "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "1.9"')]),n(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),a(h,{title:"Groovy","group-key":"groovy"},{default:l(()=>i[4]||(i[4]=[s("div",{class:"language-groovy vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"groovy"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"compileKotlin {")]),n(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"    // ...")]),n(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    kotlinOptions"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"languageVersion "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," '1.9'")]),n(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),i[11]||(i[11]=t(`<p>閱讀更多關於資料物件的資訊，並就其實作在 <a href="https://github.com/Kotlin/KEEP/pull/316" target="_blank" rel="noreferrer">相關 KEEP 文件</a> 中分享您的回饋。</p><h3 id="新的建構器型別推斷限制" tabindex="-1">新的建構器型別推斷限制 <a class="header-anchor" href="#新的建構器型別推斷限制" aria-label="Permalink to &quot;新的建構器型別推斷限制&quot;">​</a></h3><p>Kotlin 1.7.20 對 <a href="/zh-Hant/kotlin/using-builders-with-builder-inference">建構器型別推斷的使用</a> 施加了一些主要限制，這可能會影響您的程式碼。這些限制適用於包含建構器 lambda 函式的程式碼，在這種情況下，若不分析 lambda 本身，則無法推導出參數。該參數被用作引數。現在，編譯器將始終為此類程式碼顯示錯誤，並要求您明確指定型別。</p><p>這是一個破壞性變更，但我們的研究表明，這些情況非常罕見，這些限制不應影響您的程式碼。如果它們確實影響了您，請考慮以下情況：</p><ul><li><p>帶有隱藏成員的擴充功能的建構器推斷。</p><p>如果您的程式碼包含一個與建構器推斷期間將使用的擴充函式同名的擴充函式，編譯器將顯示錯誤：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> doSmth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {} </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">doSmth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {} </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    buildList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">doSmth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 解析為 2 並導致錯誤</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>要修正此程式碼，您應該明確指定型別：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> doSmth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {} </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">doSmth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {} </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    buildList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 型別引數！</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">doSmth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 解析為 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>多個 lambda 的建構器推斷，且型別引數未明確指定。</p><p>如果建構器推斷中存在兩個或更多 lambda 區塊，它們會影響型別。為避免錯誤，編譯器要求您指定型別：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">buildList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    first: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MutableList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;.() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Unit, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    second: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MutableList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;.() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Unit</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> list </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mutableListOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    list.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">first</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    list.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">second</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> list </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    buildList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        first </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// this: MutableList&lt;String&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        second </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// this: MutableList&lt;Int&gt; </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>要修正此錯誤，您應該明確指定型別並修正型別不符問題：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    buildList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        first </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// this: MutableList&lt;Int&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        second </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// this: MutableList&lt;Int&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><p>如果您沒有找到上述提到的情況，請向我們的團隊 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">提交問題</a>。</p><p>有關此建構器推斷更新的更多資訊，請參閱 <a href="https://youtrack.jetbrains.com/issue/KT-53797" target="_blank" rel="noreferrer">此 YouTrack 問題</a>。</p><h2 id="kotlin-jvm" tabindex="-1">Kotlin/JVM <a class="header-anchor" href="#kotlin-jvm" aria-label="Permalink to &quot;Kotlin/JVM&quot;">​</a></h2><p>Kotlin 1.7.20 引入了泛型內聯類別，為委託屬性增加了更多位元組碼優化，並在 kapt 存根生成任務中支援 IR，使得使用 kapt 能夠支援所有最新的 Kotlin 功能：</p><ul><li><a href="#generic-inline-classes">泛型內聯類別</a></li><li><a href="#more-optimized-cases-of-delegated-properties">更多委託屬性的優化案例</a></li><li><a href="#support-for-the-jvm-ir-backend-in-kapt-stub-generating-task">Kapt 存根生成任務中對 JVM IR 後端支援</a></li></ul><h3 id="泛型內聯類別" tabindex="-1">泛型內聯類別 <a class="header-anchor" href="#泛型內聯類別" aria-label="Permalink to &quot;泛型內聯類別&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>泛型內聯類別是一個 <a href="/zh-Hant/kotlin/components-stability#stability-levels-explained">實驗性</a> 功能。 它可能隨時被移除或變更。需要選擇性加入 (詳情見下)，且您應僅將其用於評估目的。 我們歡迎您在 <a href="https://youtrack.jetbrains.com/issue/KT-52994" target="_blank" rel="noreferrer">YouTrack</a> 上提供回饋。</p></div><p>Kotlin 1.7.20 允許 JVM 內聯類別的基礎型別為型別參數。編譯器將其映射到 <code>Any?</code> 或通常是型別參數的上限。</p>`,13)),a(e,{src:"https://www.youtube.com/v/0JRPA0tt9og",title:"Generic inline classes in Kotlin 1.7.20"}),i[12]||(i[12]=t(`<p>考慮以下範例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JvmInline</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> compute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;) {} </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 編譯器產生 fun compute-&lt;hashcode&gt;(s: Any?)</span></span></code></pre></div><p>該函式接受內聯類別作為參數。該參數被映射到上限，而非型別引數。</p><p>要啟用此功能，請使用 <code>-language-version 1.8</code> 編譯器選項。</p><p>我們歡迎您在 <a href="https://youtrack.jetbrains.com/issue/KT-52994" target="_blank" rel="noreferrer">YouTrack</a> 上提供關於此功能的回饋。</p><h3 id="更多委託屬性的優化案例" tabindex="-1">更多委託屬性的優化案例 <a class="header-anchor" href="#更多委託屬性的優化案例" aria-label="Permalink to &quot;更多委託屬性的優化案例&quot;">​</a></h3><p>在 Kotlin 1.6.0 中，我們透過省略 <code>$delegate</code> 欄位並 <a href="/zh-Hant/kotlin/whatsnew16#optimize-delegated-properties-which-call-get-set-on-the-given-kproperty-instance">生成對引用屬性的直接存取</a> 來優化委託給屬性的情況。在 1.7.20 中，我們為更多情況實作了此優化。 如果委託是以下情況，現在將省略 <code>$delegate</code> 欄位：</p><ul><li><p>具名物件：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NamedObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    operator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(thisRef: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?, property: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;*&gt;): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NamedObject</span></span></code></pre></div></li><li><p>在相同模組中帶有 <a href="/zh-Hant/kotlin/properties#backing-fields">支援欄位</a> 和預設 getter 的 final <code>val</code> 屬性：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> impl: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ReadOnlyProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> impl</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>常數表達式、列舉條目、<code>this</code> 或 <code>null</code>。以下是 <code>this</code> 的一個範例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    operator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(thisRef: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?, property: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;*&gt;) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><p>了解更多關於 <a href="/zh-Hant/kotlin/delegated-properties">委託屬性</a> 的資訊。</p><p>我們歡迎您在 <a href="https://youtrack.jetbrains.com/issue/KT-23397" target="_blank" rel="noreferrer">YouTrack</a> 上提供關於此功能的回饋。</p><h3 id="kapt-存根生成任務中對-jvm-ir-後端支援" tabindex="-1">Kapt 存根生成任務中對 JVM IR 後端支援 <a class="header-anchor" href="#kapt-存根生成任務中對-jvm-ir-後端支援" aria-label="Permalink to &quot;Kapt 存根生成任務中對 JVM IR 後端支援&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>Kapt 存根生成任務中對 JVM IR 後端支援是一個 <a href="/zh-Hant/kotlin/components-stability">實驗性</a> 功能。 它可能隨時被變更。需要選擇性加入 (詳情見下)，且您應僅將其用於評估目的。</p></div><p>在 1.7.20 之前，kapt 存根生成任務使用舊後端，且 <a href="/zh-Hant/kotlin/annotations#repeatable-annotations">可重複註解</a> 不適用於 <a href="/zh-Hant/kotlin/kapt">kapt</a>。從 Kotlin 1.7.20 開始，我們在 kapt 存根生成任務中增加了對 <a href="/zh-Hant/kotlin/whatsnew15#stable-jvm-ir-backend">JVM IR 後端</a> 的支援。這使得使用 kapt 能夠支援所有最新的 Kotlin 功能，包括可重複註解。</p><p>要在 kapt 中使用 IR 後端，請將以下選項新增到您的 <code>gradle.properties</code> 檔案中：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kapt.use.jvm.ir=true</span></span></code></pre></div><p>我們歡迎您在 <a href="https://youtrack.jetbrains.com/issue/KT-49682" target="_blank" rel="noreferrer">YouTrack</a> 上提供關於此功能的回饋。</p><h2 id="kotlin-native" tabindex="-1">Kotlin/Native <a class="header-anchor" href="#kotlin-native" aria-label="Permalink to &quot;Kotlin/Native&quot;">​</a></h2><p>Kotlin 1.7.20 隨附預設啟用的新 Kotlin/Native 記憶體管理器，並提供了自訂 <code>Info.plist</code> 檔案的選項：</p><ul><li><a href="#the-new-kotlin-native-memory-manager-enabled-by-default">預設啟用的新 Kotlin/Native 記憶體管理器</a></li><li><a href="#customizing-the-info-plist-file">自訂 Info.plist 檔案</a></li></ul><h3 id="預設啟用的新-kotlin-native-記憶體管理器" tabindex="-1">預設啟用的新 Kotlin/Native 記憶體管理器 <a class="header-anchor" href="#預設啟用的新-kotlin-native-記憶體管理器" aria-label="Permalink to &quot;預設啟用的新 Kotlin/Native 記憶體管理器&quot;">​</a></h3><p>此版本為新的記憶體管理器帶來了進一步的穩定性和效能改進，使我們能夠將新的記憶體管理器提升到 <a href="/zh-Hant/kotlin/components-stability">Beta</a> 階段。</p><p>舊版記憶體管理器使編寫並行和非同步程式碼變得複雜，包括在實作 <code>kotlinx.coroutines</code> 函式庫時遇到的問題。這阻礙了 Kotlin Multiplatform Mobile 的採用，因為並行限制導致在 iOS 和 Android 平台之間共享 Kotlin 程式碼出現問題。新的記憶體管理器最終為 <a href="https://blog.jetbrains.com/kotlin/2022/05/kotlin-multiplatform-mobile-beta-roadmap-update/" target="_blank" rel="noreferrer">將 Kotlin Multiplatform Mobile 提升到 Beta 階段</a> 鋪平了道路。</p><p>新的記憶體管理器也支援編譯器快取，這使得編譯時間與之前的版本相當。有關新記憶體管理器優點的更多資訊，請參閱我們關於預覽版本的原始 <a href="https://blog.jetbrains.com/kotlin/2021/08/try-the-new-kotlin-native-memory-manager-development-preview/" target="_blank" rel="noreferrer">部落格文章</a>。您可以在 <a href="/zh-Hant/kotlin/native-memory-manager">文件</a> 中找到更多技術細節。</p><h4 id="組態與設定" tabindex="-1">組態與設定 <a class="header-anchor" href="#組態與設定" aria-label="Permalink to &quot;組態與設定&quot;">​</a></h4><p>從 Kotlin 1.7.20 開始，新的記憶體管理器是預設選項。無需太多額外設定。</p><p>如果您已經手動啟用它，您可以從 <code>gradle.properties</code> 或 <code>build.gradle(.kts)</code> 檔案中移除 <code>kotlin.native.binary.memoryModel=experimental</code> 或 <code>binaryOptions[&quot;memoryModel&quot;] = &quot;experimental&quot;</code> 選項。</p><p>如有必要，您可以使用 <code>gradle.properties</code> 中的 <code>kotlin.native.binary.memoryModel=strict</code> 選項切換回舊版記憶體管理器。然而，舊版記憶體管理器不再支援編譯器快取，因此編譯時間可能會變長。</p><h4 id="凍結" tabindex="-1">凍結 <a class="header-anchor" href="#凍結" aria-label="Permalink to &quot;凍結&quot;">​</a></h4><p>在新記憶體管理器中，凍結已棄用。請勿使用它，除非您的程式碼需要與舊版管理器配合使用（在舊版管理器中仍然需要凍結）。這對於需要維護對舊版記憶體管理器支援的函式庫作者，或希望在新記憶體管理器遇到問題時有備用方案的開發人員來說可能很有幫助。</p><p>在這種情況下，您可以暫時支援新舊兩種記憶體管理器模式下的程式碼。要忽略棄用警告，請執行以下操作之一：</p><ul><li>使用 <code>@OptIn(FreezingIsDeprecated::class)</code> 註解已棄用的 API 使用。</li><li>將 <code>languageSettings.optIn(&quot;kotlin.native.FreezingIsDeprecated&quot;)</code> 應用於 Gradle 中所有 Kotlin 原始碼集。</li><li>傳遞編譯器標誌 <code>-opt-in=kotlin.native.FreezingIsDeprecated</code>。</li></ul><h4 id="從-swift-objective-c-呼叫-kotlin-suspend-函式" tabindex="-1">從 Swift/Objective-C 呼叫 Kotlin suspend 函式 <a class="header-anchor" href="#從-swift-objective-c-呼叫-kotlin-suspend-函式" aria-label="Permalink to &quot;從 Swift/Objective-C 呼叫 Kotlin suspend 函式&quot;">​</a></h4><p>新的記憶體管理器仍然限制從 Swift 和 Objective-C 呼叫 Kotlin <code>suspend</code> 函式（僅限於主執行緒），但您可以使用新的 Gradle 選項來解除此限制。</p><p>此限制最初是在舊版記憶體管理器中引入的，因為某些情況下程式碼將一個延續分派到原始執行緒上恢復執行。如果此執行緒沒有支援的事件迴圈，任務將永遠不會執行，協程也永遠不會恢復。</p><p>在某些情況下，此限制不再是必需的，但所有必要條件的檢查無法輕易實作。因此，我們決定在新記憶體管理器中保留此功能，同時引入一個供您禁用的選項。為此，請將以下選項新增到您的 <code>gradle.properties</code> 中：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.native.binary.objcExportSuspendFunctionLaunchThreadRestriction=none</span></span></code></pre></div><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>如果您使用 <code>kotlinx.coroutines</code> 的 <code>native-mt</code> 版本或其他採用相同「分派到原始執行緒」方法的函式庫，請勿新增此選項。</p></div><p>Kotlin 團隊非常感謝 <a href="https://github.com/ahmedre" target="_blank" rel="noreferrer">Ahmed El-Helw</a> 實作此選項。</p><h4 id="留下您的回饋" tabindex="-1">留下您的回饋 <a class="header-anchor" href="#留下您的回饋" aria-label="Permalink to &quot;留下您的回饋&quot;">​</a></h4><p>這是我們生態系統的一個重大變更。我們歡迎您的回饋，以幫助我們做得更好。</p><p>請在您的專案中嘗試新的記憶體管理器，並在 <a href="https://youtrack.jetbrains.com/issue/KT-48525" target="_blank" rel="noreferrer">我們的問題追蹤器 YouTrack</a> 中分享回饋。</p><h3 id="自訂-info-plist-檔案" tabindex="-1">自訂 Info.plist 檔案 <a class="header-anchor" href="#自訂-info-plist-檔案" aria-label="Permalink to &quot;自訂 Info.plist 檔案&quot;">​</a></h3><p>產生框架時，Kotlin/Native 編譯器會生成資訊屬性清單檔案 <code>Info.plist</code>。以前，自訂其內容很麻煩。從 Kotlin 1.7.20 開始，您可以直接設定以下屬性：</p><table tabindex="0"><thead><tr><th>屬性</th><th>二進位選項</th></tr></thead><tbody><tr><td><code>CFBundleIdentifier</code></td><td><code>bundleId</code></td></tr><tr><td><code>CFBundleShortVersionString</code></td><td><code>bundleShortVersionString</code></td></tr><tr><td><code>CFBundleVersion</code></td><td><code>bundleVersion</code></td></tr></tbody></table><p>為此，請使用相應的二進位選項。傳遞 <code>-Xbinary=$option=$value</code> 編譯器標誌或為所需的框架設定 <code>binaryOption(option, value)</code> Gradle DSL。</p><p>Kotlin 團隊非常感謝 Mads Ager 實作此功能。</p><h2 id="kotlin-js" tabindex="-1">Kotlin/JS <a class="header-anchor" href="#kotlin-js" aria-label="Permalink to &quot;Kotlin/JS&quot;">​</a></h2><p>Kotlin/JS 收到了一些增強功能，提高了開發人員體驗並提升了效能：</p><ul><li>由於依賴項載入效率的提高，Klib 生成在增量和全新建置中都更快。</li><li><a href="/zh-Hant/kotlin/js-ir-compiler#incremental-compilation-for-development-binaries">開發二進位檔的增量編譯</a> 已重新設計，從而顯著改善了全新建置場景、加快了增量建置並修正了穩定性問題。</li><li>我們改進了針對巢狀物件、密封類別以及建構函式中具有預設值的參數的 <code>.d.ts</code> 生成。</li></ul><h2 id="gradle" tabindex="-1">Gradle <a class="header-anchor" href="#gradle" aria-label="Permalink to &quot;Gradle&quot;">​</a></h2><p>Kotlin Gradle 外掛程式的更新側重於與新的 Gradle 功能和最新 Gradle 版本的相容性。</p><p>Kotlin 1.7.20 包含支援 Gradle 7.1 的變更。已棄用的方法和屬性已被移除或替換，減少了 Kotlin Gradle 外掛程式產生的棄用警告數量，並解除了未來對 Gradle 8.0 的支援障礙。</p><p>然而，存在一些潛在的破壞性變更，可能需要您的關注：</p><h3 id="目標組態" tabindex="-1">目標組態 <a class="header-anchor" href="#目標組態" aria-label="Permalink to &quot;目標組態&quot;">​</a></h3><ul><li><p><code>org.jetbrains.kotlin.gradle.dsl.SingleTargetExtension</code> 現在具有一個泛型參數 <code>SingleTargetExtension&lt;T : KotlinTarget&gt;</code>。</p></li><li><p><code>kotlin.targets.fromPreset()</code> 慣例已被棄用。您仍然可以使用 <code>kotlin.targets { fromPreset() }</code>，但我們建議 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-discover-project.html#targets" target="_blank" rel="noreferrer">明確設定目標</a>。</p></li><li><p>Gradle 自動生成的目標存取器不再在 <code>kotlin.targets { }</code> 區塊內部可用。請改用 <code>findByName(&quot;targetName&quot;)</code> 方法。</p><p>請注意，此類存取器在 <code>kotlin.targets</code> 的情況下仍然可用，例如 <code>kotlin.targets.linuxX64</code>。</p></li></ul><h3 id="原始碼目錄組態" tabindex="-1">原始碼目錄組態 <a class="header-anchor" href="#原始碼目錄組態" aria-label="Permalink to &quot;原始碼目錄組態&quot;">​</a></h3><p>Kotlin Gradle 外掛程式現在將 Kotlin <code>SourceDirectorySet</code> 作為 <code>kotlin</code> 擴充功能新增到 Java 的 <code>SourceSet</code> 群組。 這使得在 <code>build.gradle.kts</code> 檔案中配置原始碼目錄成為可能，其方式與在 <a href="https://docs.gradle.org/7.1/release-notes.html#easier-source-set-configuration-in-kotlin-dsl" target="_blank" rel="noreferrer">Java、Groovy 和 Scala</a> 中配置的方式類似：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            java.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setSrcDirs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;src/java&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            kotlin.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setSrcDirs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;src/kotlin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>您不再需要使用已棄用的 Gradle 慣例並為 Kotlin 指定原始碼目錄。</p><p>請記住，您還可以使用 <code>kotlin</code> 擴充功能來存取 <code>KotlinSourceSet</code>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="jvm-工具鏈組態的新方法" tabindex="-1">JVM 工具鏈組態的新方法 <a class="header-anchor" href="#jvm-工具鏈組態的新方法" aria-label="Permalink to &quot;JVM 工具鏈組態的新方法&quot;">​</a></h3><p>此版本提供了一個新的 <code>jvmToolchain()</code> 方法，用於啟用 <a href="/zh-Hant/kotlin/gradle-configure-project#gradle-java-toolchains-support">JVM 工具鏈功能</a>。如果您不需要任何額外的 <a href="https://docs.gradle.org/current/javadoc/org/gradle/jvm/toolchain/JavaToolchainSpec.html" target="_blank" rel="noreferrer">組態欄位</a>，例如 <code>implementation</code> 或 <code>vendor</code>，您可以從 Kotlin 擴充功能中使用此方法：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvmToolchain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">17</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>這簡化了 Kotlin 專案的設定過程，無需任何額外組態。 在此版本之前，您只能透過以下方式指定 JDK 版本：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvmToolchain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        languageVersion.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(JavaLanguageVersion.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">17</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="標準函式庫" tabindex="-1">標準函式庫 <a class="header-anchor" href="#標準函式庫" aria-label="Permalink to &quot;標準函式庫&quot;">​</a></h2><p>Kotlin 1.7.20 為 <code>java.nio.file.Path</code> 類別提供了新的 <a href="/zh-Hant/kotlin/extensions#extension-functions">擴充函式</a>，這允許您遍歷檔案樹：</p><ul><li><code>walk()</code> 惰性遍歷以指定路徑為根的檔案樹。</li><li><code>fileVisitor()</code> 使得可以單獨建立 <code>FileVisitor</code>。<code>FileVisitor</code> 定義了遍歷目錄和檔案時的操作。</li><li><code>visitFileTree(fileVisitor: FileVisitor, ...)</code> 消耗一個現成的 <code>FileVisitor</code> 並在底層使用 <code>java.nio.file.Files.walkFileTree()</code>。</li><li><code>visitFileTree(..., builderAction: FileVisitorBuilder.() -&gt; Unit)</code> 使用 <code>builderAction</code> 建立一個 <code>FileVisitor</code> 並呼叫 <code>visitFileTree(fileVisitor, ...)</code> 函式。</li><li><code>FileVisitResult</code>，<code>FileVisitor</code> 的回傳型別，預設值為 <code>CONTINUE</code>，這會繼續處理檔案。</li></ul><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>針對 <code>java.nio.file.Path</code> 的新擴充函式是 <a href="/zh-Hant/kotlin/components-stability">實驗性</a> 的。 它們可能隨時被變更。需要選擇性加入 (詳情見下)，且您應僅將其用於評估目的。</p></div><p>以下是您可以使用這些新擴充函式進行的一些操作：</p><ul><li><p>明確建立一個 <code>FileVisitor</code> 然後使用：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cleanVisitor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fileVisitor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    onPreVisitDirectory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { directory, attributes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 處理目錄的一些邏輯</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        FileVisitResult.CONTINUE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    onVisitFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { file, attributes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 處理檔案的一些邏輯</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        FileVisitResult.CONTINUE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 其他邏輯可能在此處</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">projectDirectory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">visitFileTree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cleanVisitor)</span></span></code></pre></div></li><li><p>使用 <code>builderAction</code> 建立一個 <code>FileVisitor</code> 並立即使用它：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">projectDirectory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">visitFileTree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// builderAction 的定義：</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    onPreVisitDirectory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { directory, attributes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 處理目錄的一些邏輯</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        FileVisitResult.CONTINUE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    onVisitFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { file, attributes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 處理檔案的一些邏輯</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        FileVisitResult.CONTINUE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>使用 <code>walk()</code> 函式遍歷以指定路徑為根的檔案樹：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(kotlin.io.path.ExperimentalPathApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> traverseFileTree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cleanVisitor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fileVisitor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        onPreVisitDirectory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { directory, _ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (directory.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;build&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                directory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">deleteRecursively</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                FileVisitResult.SKIP_SUBTREE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                FileVisitResult.CONTINUE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        onVisitFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { file, _ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (file.extension </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;class&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                file.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">deleteExisting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            FileVisitResult.CONTINUE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rootDirectory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createTempDirectory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Project&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rootDirectory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;src&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { srcDirectory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        srcDirectory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createDirectory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        srcDirectory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;A.kt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        srcDirectory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;A.class&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rootDirectory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;build&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { buildDirectory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        buildDirectory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createDirectory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        buildDirectory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Project.jar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用 walk 函式：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> directoryStructure </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rootDirectory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">walk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(PathWalkOption.INCLUDE_DIRECTORIES)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">relativeTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rootDirectory).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sorted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    assertPrints</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(directoryStructure, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;[, build, build/Project.jar, src, src/A.class, src/A.kt]&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rootDirectory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">visitFileTree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cleanVisitor)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> directoryStructureAfterClean </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rootDirectory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">walk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(PathWalkOption.INCLUDE_DIRECTORIES)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">relativeTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rootDirectory).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sorted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    assertPrints</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(directoryStructureAfterClean, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;[, src, src/A.kt]&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><p>如同實驗性 API 的慣例，新的擴充功能需要選擇性加入：<code>@OptIn(kotlin.io.path.ExperimentalPathApi::class)</code> 或 <code>@kotlin.io.path.ExperimentalPathApi</code>。或者，您可以使用編譯器選項：<code>-opt-in=kotlin.io.path.ExperimentalPathApi</code>。</p><p>我們歡迎您在 YouTrack 上提供關於 <a href="https://youtrack.jetbrains.com/issue/KT-52909" target="_blank" rel="noreferrer"><code>walk()</code> 函式</a> 和 <a href="https://youtrack.jetbrains.com/issue/KT-52910" target="_blank" rel="noreferrer">visit 擴充函式</a> 的回饋。</p><h2 id="文件更新" tabindex="-1">文件更新 <a class="header-anchor" href="#文件更新" aria-label="Permalink to &quot;文件更新&quot;">​</a></h2><p>自上次發佈以來，Kotlin 文件收到了一些顯著變更：</p><h3 id="重新設計和改進的頁面" tabindex="-1">重新設計和改進的頁面 <a class="header-anchor" href="#重新設計和改進的頁面" aria-label="Permalink to &quot;重新設計和改進的頁面&quot;">​</a></h3><ul><li><a href="/zh-Hant/kotlin/basic-types">基本類型概述</a> – 了解 Kotlin 中使用的基本類型：數字、布林值、字元、字串、陣列和無符號整數。</li><li><a href="/zh-Hant/kotlin/kotlin-ide">Kotlin 開發的 IDE</a> – 查看支援 Kotlin 的官方 IDE 列表以及具有社群支援外掛程式的工具。</li></ul><h3 id="kotlin-多平台期刊中的新文章" tabindex="-1">Kotlin 多平台期刊中的新文章 <a class="header-anchor" href="#kotlin-多平台期刊中的新文章" aria-label="Permalink to &quot;Kotlin 多平台期刊中的新文章&quot;">​</a></h3><ul><li><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/native-and-cross-platform.html" target="_blank" rel="noreferrer">原生和跨平台應用程式開發：如何選擇？</a> – 查看我們對跨平台應用程式開發和原生方法的概述及優勢。</li><li><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/cross-platform-frameworks.html" target="_blank" rel="noreferrer">六個最佳跨平台應用程式開發框架</a> – 閱讀關於幫助您為跨平台專案選擇正確框架的關鍵方面。</li></ul><h3 id="新增和更新的教學" tabindex="-1">新增和更新的教學 <a class="header-anchor" href="#新增和更新的教學" aria-label="Permalink to &quot;新增和更新的教學&quot;">​</a></h3><ul><li><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-create-first-app.html" target="_blank" rel="noreferrer">Kotlin 多平台入門</a> – 了解使用 Kotlin 進行跨平台行動開發，並建立一個同時適用於 Android 和 iOS 的應用程式。</li><li><a href="/zh-Hant/kotlin/js-react">使用 React 和 Kotlin/JS 建置網頁應用程式</a> – 建立一個瀏覽器應用程式，探索 Kotlin 的 DSL 和典型 React 程式的特點。</li></ul><h3 id="發佈文件中的變更" tabindex="-1">發佈文件中的變更 <a class="header-anchor" href="#發佈文件中的變更" aria-label="Permalink to &quot;發佈文件中的變更&quot;">​</a></h3><p>我們不再為每個發佈版本提供推薦的 kotlinx 函式庫列表。此列表僅包含與 Kotlin 本身推薦和測試過的版本。它沒有考慮到某些函式庫彼此依賴，並需要一個特殊的 kotlinx 版本，這可能與推薦的 Kotlin 版本不同。</p><p>我們正在努力尋找一種方法，以提供函式庫如何相互關聯和依賴的資訊，以便在您升級專案中的 Kotlin 版本時，可以清楚地知道應該使用哪個 kotlinx 函式庫版本。</p><h2 id="安裝-kotlin-1-7-20" tabindex="-1">安裝 Kotlin 1.7.20 <a class="header-anchor" href="#安裝-kotlin-1-7-20" aria-label="Permalink to &quot;安裝 Kotlin 1.7.20&quot;">​</a></h2><p><a href="https://www.jetbrains.com/idea/download/" target="_blank" rel="noreferrer">IntelliJ IDEA</a> 2021.3、2022.1 和 2022.2 會自動建議將 Kotlin 外掛程式更新到 1.7.20。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>對於 Android Studio Dolphin (213)、Electric Eel (221) 和 Flamingo (222)，Kotlin 外掛程式 1.7.20 將隨即將推出的 Android Studio 更新一起提供。</p></div><p>新的命令列編譯器可在 <a href="https://github.com/JetBrains/kotlin/releases/tag/v1.7.20" target="_blank" rel="noreferrer">GitHub 發佈頁面</a> 下載。</p><h3 id="kotlin-1-7-20-相容性指南" tabindex="-1">Kotlin 1.7.20 相容性指南 <a class="header-anchor" href="#kotlin-1-7-20-相容性指南" aria-label="Permalink to &quot;Kotlin 1.7.20 相容性指南&quot;">​</a></h3><p>儘管 Kotlin 1.7.20 是一個增量發佈，但仍然有一些我們不得不做的不相容變更，以限制 Kotlin 1.7.0 中引入問題的擴散。</p><p>在 <a href="/zh-Hant/kotlin/compatibility-guide-1720">Kotlin 1.7.20 相容性指南</a> 中找到此類變更的詳細列表。</p>`,92))])}const A=d(g,[["render",c]]);export{m as __pageData,A as default};
