import{_ as n,C as t,c as e,o as l,ag as a,G as p}from"./chunks/framework.Bksy39di.js";const y=JSON.parse('{"title":"Kotlin 符号处理 API","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/ksp-overview.md","filePath":"kotlin/ksp-overview.md","lastUpdated":1754307826000}'),r={name:"kotlin/ksp-overview.md"};function h(k,s,o,d,c,E){const i=t("YouTubeVideo");return l(),e("div",null,[s[0]||(s[0]=a('<h1 id="kotlin-符号处理-api" tabindex="-1">Kotlin 符号处理 API <a class="header-anchor" href="#kotlin-符号处理-api" aria-label="Permalink to &quot;Kotlin 符号处理 API&quot;">​</a></h1><p>Kotlin 符号处理 (KSP) 是一个可用于开发轻量级编译器插件的 API。 KSP 提供了一个简化的编译器插件 API，它充分利用 Kotlin 的强大功能，同时最大限度地降低了学习曲线。与 <a href="/kotlin/kapt">kapt</a> 相比，使用 KSP 的注解处理器运行速度可快达两倍。</p><ul><li>要详细了解 KSP 与 kapt 的比较，请查阅 <a href="/kotlin/ksp-why-ksp">为何使用 KSP</a>。</li><li>要开始编写 KSP 处理器，请查看 <a href="/kotlin/ksp-quickstart">KSP 快速入门</a>。</li></ul><h2 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h2><p>KSP API 以惯用的方式处理 Kotlin 程序。KSP 理解 Kotlin 特有特性，例如扩展函数、声明处型变和局部函数。它还显式地建模类型，并提供基本的类型检测，例如等价性和赋值兼容性。</p><p>该 API 在符号层面根据 <a href="https://kotlinlang.org/docs/reference/grammar.html" target="_blank" rel="noreferrer">Kotlin 语法</a> 对 Kotlin 程序结构进行建模。当基于 KSP 的插件处理源程序时，诸如类、类成员、函数和相关参数之类的构造可供处理器访问，而诸如 <code>if</code> 代码块和 <code>for</code> 循环之类的则不可访问。</p><p>从概念上讲，KSP 与 Kotlin 反射中的 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/-k-type/" target="_blank" rel="noreferrer">KType</a> 相似。 该 API 允许处理器从类声明导航到具有特定类型实参的相应类型，反之亦然。你还可以替换类型实参、指定型变、应用星型投影并标记类型的可空性。</p><p>考虑 KSP 的另一种方式是将其视为 Kotlin 程序的预处理器框架。通过将基于 KSP 的插件视为 <em>符号处理器</em>，或简称为 <em>处理器</em>，编译过程中的数据流可以按以下步骤描述：</p><ol><li>处理器读取并分析源程序和资源。</li><li>处理器生成代码或其他形式的输出。</li><li>Kotlin 编译器将源程序与生成的代码一起编译。</li></ol><p>与功能完备的编译器插件不同，处理器不能修改代码。 改变语言语义的编译器插件有时会让人非常困惑。 KSP 通过将源程序视为只读来避免这种情况。</p><p>你还可以通过此视频了解 KSP 概览：</p>',11)),p(i,{src:"https://www.youtube.com/v/bv-VyGM3HCY",title:"Kotlin 符号处理 (KSP)"}),s[1]||(s[1]=a(`<h2 id="ksp-如何看待源文件" tabindex="-1">KSP 如何看待源文件 <a class="header-anchor" href="#ksp-如何看待源文件" aria-label="Permalink to &quot;KSP 如何看待源文件&quot;">​</a></h2><p>大多数处理器会遍历输入源代码的各种程序结构。 在深入了解 API 的用法之前，让我们看看文件从 KSP 的视角看是怎样的：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>KSFile</span></span>
<span class="line"><span>  packageName: KSName                 // 包名</span></span>
<span class="line"><span>  fileName: String                    // 文件名</span></span>
<span class="line"><span>  annotations: List&lt;KSAnnotation&gt;    // 注解 (文件注解)</span></span>
<span class="line"><span>  declarations: List&lt;KSDeclaration&gt;  // 声明</span></span>
<span class="line"><span>    KSClassDeclaration              // 类、接口、对象</span></span>
<span class="line"><span>      simpleName: KSName              // 简单名称</span></span>
<span class="line"><span>      qualifiedName: KSName           // 限定名称</span></span>
<span class="line"><span>      containingFile: String          // 所在文件</span></span>
<span class="line"><span>      typeParameters: KSTypeParameter // 类型形参</span></span>
<span class="line"><span>      parentDeclaration: KSDeclaration// 父声明</span></span>
<span class="line"><span>      classKind: ClassKind            // 类类型</span></span>
<span class="line"><span>      primaryConstructor: KSFunctionDeclaration // 主构造函数</span></span>
<span class="line"><span>      superTypes: List&lt;KSTypeReference&gt; // 父类型</span></span>
<span class="line"><span>      // 包含内部类、成员函数、属性等</span></span>
<span class="line"><span>      declarations: List&lt;KSDeclaration&gt; // 声明</span></span>
<span class="line"><span>    KSFunctionDeclaration           // 顶层函数</span></span>
<span class="line"><span>      simpleName: KSName              // 简单名称</span></span>
<span class="line"><span>      qualifiedName: KSName           // 限定名称</span></span>
<span class="line"><span>      containingFile: String          // 所在文件</span></span>
<span class="line"><span>      typeParameters: KSTypeParameter // 类型形参</span></span>
<span class="line"><span>      parentDeclaration: KSDeclaration// 父声明</span></span>
<span class="line"><span>      functionKind: FunctionKind      // 函数类型</span></span>
<span class="line"><span>      extensionReceiver: KSTypeReference? // 扩展接收者</span></span>
<span class="line"><span>      returnType: KSTypeReference     // 返回类型</span></span>
<span class="line"><span>      parameters: List&lt;KSValueParameter&gt; // 形参</span></span>
<span class="line"><span>      // 包含局部类、局部函数、局部变量等</span></span>
<span class="line"><span>      declarations: List&lt;KSDeclaration&gt; // 声明</span></span>
<span class="line"><span>    KSPropertyDeclaration           // 全局变量</span></span>
<span class="line"><span>      simpleName: KSName              // 简单名称</span></span>
<span class="line"><span>      qualifiedName: KSName           // 限定名称</span></span>
<span class="line"><span>      containingFile: String          // 所在文件</span></span>
<span class="line"><span>      typeParameters: KSTypeParameter // 类型形参</span></span>
<span class="line"><span>      parentDeclaration: KSDeclaration// 父声明</span></span>
<span class="line"><span>      extensionReceiver: KSTypeReference? // 扩展接收者</span></span>
<span class="line"><span>      type: KSTypeReference           // 类型</span></span>
<span class="line"><span>      getter: KSPropertyGetter        // getter</span></span>
<span class="line"><span>        returnType: KSTypeReference   // 返回类型</span></span>
<span class="line"><span>      setter: KSPropertySetter        // setter</span></span>
<span class="line"><span>        parameter: KSValueParameter   // 形参</span></span></code></pre></div><p>此视图列出了文件中声明的常见内容：类、函数、属性等。</p><h2 id="symbolprocessorprovider-入口点" tabindex="-1">SymbolProcessorProvider：入口点 <a class="header-anchor" href="#symbolprocessorprovider-入口点" aria-label="Permalink to &quot;SymbolProcessorProvider：入口点&quot;">​</a></h2><p>KSP 需要 <code>SymbolProcessorProvider</code> 接口的实现来实例化 <code>SymbolProcessor</code>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SymbolProcessorProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(environment: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SymbolProcessorEnvironment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SymbolProcessor</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>而 <code>SymbolProcessor</code> 的定义如下：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SymbolProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> process</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(resolver: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Resolver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KSAnnotated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 让我们关注这里</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> finish</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>Resolver</code> 为 <code>SymbolProcessor</code> 提供访问编译器详细信息（例如符号）的能力。 一个查找所有顶层函数和顶层类中非局部函数的处理器可能如下所示：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HelloFunctionFinderProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SymbolProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> functions </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mutableListOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KSClassDeclaration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> visitor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FindFunctionsVisitor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> process</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(resolver: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Resolver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        resolver.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAllFiles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">accept</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(visitor, Unit) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    inner</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FindFunctionsVisitor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KSVisitorVoid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> visitClassDeclaration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(classDeclaration: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KSClassDeclaration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            classDeclaration.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getDeclaredFunctions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">accept</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Unit) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> visitFunctionDeclaration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(function: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KSFunctionDeclaration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            functions.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(function)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> visitFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(file: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KSFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            file.declarations.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">accept</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Unit) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Provider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SymbolProcessorProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(environment: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SymbolProcessorEnvironment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SymbolProcessor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TODO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="资源" tabindex="-1">资源 <a class="header-anchor" href="#资源" aria-label="Permalink to &quot;资源&quot;">​</a></h2><ul><li><a href="/kotlin/ksp-quickstart">快速入门</a></li><li><a href="/kotlin/ksp-why-ksp">为何使用 KSP？</a></li><li><a href="/kotlin/ksp-examples">示例</a></li><li><a href="/kotlin/ksp-additional-details">KSP 如何建模 Kotlin 代码</a></li><li><a href="/kotlin/ksp-reference">面向 Java 注解处理器作者的参考资料</a></li><li><a href="/kotlin/ksp-incremental">增量处理说明</a></li><li><a href="/kotlin/ksp-multi-round">多轮处理说明</a></li><li><a href="/kotlin/ksp-multiplatform">多平台项目中的 KSP</a></li><li><a href="/kotlin/ksp-command-line">从命令行运行 KSP</a></li><li><a href="/kotlin/ksp-faq">常见问题解答</a></li></ul><h2 id="支持的库" tabindex="-1">支持的库 <a class="header-anchor" href="#支持的库" aria-label="Permalink to &quot;支持的库&quot;">​</a></h2><p>下表列出了 Android 上一些常用库及其对 KSP 的支持阶段：</p><table tabindex="0"><thead><tr><th>库</th><th>状态</th></tr></thead><tbody><tr><td>Room</td><td><a href="https://developer.android.com/jetpack/androidx/releases/room#2.3.0-beta02" target="_blank" rel="noreferrer">官方支持</a></td></tr><tr><td>Moshi</td><td><a href="https://github.com/square/moshi/" target="_blank" rel="noreferrer">官方支持</a></td></tr><tr><td>RxHttp</td><td><a href="https://github.com/liujingxing/rxhttp" target="_blank" rel="noreferrer">官方支持</a></td></tr><tr><td>Kotshi</td><td><a href="https://github.com/ansman/kotshi" target="_blank" rel="noreferrer">官方支持</a></td></tr><tr><td>Lyricist</td><td><a href="https://github.com/adrielcafe/lyricist" target="_blank" rel="noreferrer">官方支持</a></td></tr><tr><td>Lich SavedState</td><td><a href="https://github.com/line/lich/tree/master/savedstate" target="_blank" rel="noreferrer">官方支持</a></td></tr><tr><td>gRPC Dekorator</td><td><a href="https://github.com/mottljan/grpc-dekorator" target="_blank" rel="noreferrer">官方支持</a></td></tr><tr><td>EasyAdapter</td><td><a href="https://github.com/AmrDeveloper/EasyAdapter" target="_blank" rel="noreferrer">官方支持</a></td></tr><tr><td>Koin Annotations</td><td><a href="https://github.com/InsertKoinIO/koin-annotations" target="_blank" rel="noreferrer">官方支持</a></td></tr><tr><td>Glide</td><td><a href="https://github.com/bumptech/glide" target="_blank" rel="noreferrer">官方支持</a></td></tr><tr><td>Micronaut</td><td><a href="https://micronaut.io/2023/07/14/micronaut-framework-4-0-0-released/" target="_blank" rel="noreferrer">官方支持</a></td></tr><tr><td>Epoxy</td><td><a href="https://github.com/airbnb/epoxy" target="_blank" rel="noreferrer">官方支持</a></td></tr><tr><td>Paris</td><td><a href="https://github.com/airbnb/paris" target="_blank" rel="noreferrer">官方支持</a></td></tr><tr><td>Auto Dagger</td><td><a href="https://github.com/ansman/auto-dagger" target="_blank" rel="noreferrer">官方支持</a></td></tr><tr><td>SealedX</td><td><a href="https://github.com/skydoves/sealedx" target="_blank" rel="noreferrer">官方支持</a></td></tr><tr><td>Ktorfit</td><td><a href="https://github.com/Foso/Ktorfit" target="_blank" rel="noreferrer">官方支持</a></td></tr><tr><td>Mockative</td><td><a href="https://github.com/mockative/mockative" target="_blank" rel="noreferrer">官方支持</a></td></tr><tr><td>DeeplinkDispatch</td><td><a href="https://github.com/airbnb/DeepLinkDispatch/pull/323" target="_blank" rel="noreferrer">通过 airbnb/DeepLinkDispatch#323 支持</a></td></tr><tr><td>Dagger</td><td><a href="https://dagger.dev/dev-guide/ksp" target="_blank" rel="noreferrer">Alpha</a></td></tr><tr><td>Motif</td><td><a href="https://github.com/uber/motif" target="_blank" rel="noreferrer">Alpha</a></td></tr><tr><td>Hilt</td><td><a href="https://dagger.dev/dev-guide/ksp" target="_blank" rel="noreferrer">开发中</a></td></tr><tr><td>Auto Factory</td><td><a href="https://github.com/google/auto/issues/982" target="_blank" rel="noreferrer">暂不支持</a></td></tr></tbody></table>`,16))])}const F=n(r,[["render",h]]);export{y as __pageData,F as default};
