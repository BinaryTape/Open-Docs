import{_ as p,a as r,b as d,c as o,d as E,e as g,f as c,g as y,h as F,i as u,j as C}from"./chunks/migration-inspection-wn.BTS-bWVS.js";import{_ as m,C as k,c as b,o as f,ag as e,G as n,w as l,j as i,a as s}from"./chunks/framework.Bksy39di.js";const I=JSON.parse('{"title":"Kotlin 1.4.0 新功能","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/whatsnew14.md","filePath":"zh-Hant/kotlin/whatsnew14.md","lastUpdated":1754307826000}'),B={name:"zh-Hant/kotlin/whatsnew14.md"};function A(v,a,D,q,x,S){const t=k("tab"),h=k("tabs");return f(),b("div",null,[a[6]||(a[6]=e(`<h1 id="kotlin-1-4-0-新功能" tabindex="-1">Kotlin 1.4.0 新功能 <a class="header-anchor" href="#kotlin-1-4-0-新功能" aria-label="Permalink to &quot;Kotlin 1.4.0 新功能&quot;">​</a></h1><p><em><a href="/zh-Hant/kotlin/releases#release-details">發布日期：2020 年 8 月 17 日</a></em></p><p>在 Kotlin 1.4.0 中，我們對其所有組件進行了多項改進，並將<a href="https://blog.jetbrains.com/kotlin/2020/08/kotlin-1-4-released-with-a-focus-on-quality-and-performance/" target="_blank" rel="noreferrer">重點放在品質與效能上</a>。 以下是 Kotlin 1.4.0 中最重要的變更列表。</p><h2 id="語言功能與改進" tabindex="-1">語言功能與改進 <a class="header-anchor" href="#語言功能與改進" aria-label="Permalink to &quot;語言功能與改進&quot;">​</a></h2><p>Kotlin 1.4.0 帶來了各種不同的語言功能與改進，其中包括：</p><ul><li><a href="#sam-conversions-for-kotlin-interfaces">Kotlin 介面的 SAM 轉換</a></li><li><a href="#explicit-api-mode-for-library-authors">函式庫作者的顯式 API 模式</a></li><li><a href="#mixing-named-and-positional-arguments">混合命名引數與位置引數</a></li><li><a href="#trailing-comma">末尾逗號</a></li><li><a href="#callable-reference-improvements">可呼叫參考改進</a></li><li><a href="#using-break-and-continue-inside-when-expressions-included-in-loops">在迴圈中包含的 <code>when</code> 表達式內使用 <code>break</code> 與 <code>continue</code></a></li></ul><h3 id="kotlin-介面的-sam-轉換" tabindex="-1">Kotlin 介面的 SAM 轉換 <a class="header-anchor" href="#kotlin-介面的-sam-轉換" aria-label="Permalink to &quot;Kotlin 介面的 SAM 轉換&quot;">​</a></h3><p>在 Kotlin 1.4.0 之前，您只能在<a href="/zh-Hant/kotlin/java-interop#sam-conversions">使用 Java 方法與 Kotlin 中的 Java 介面</a>時應用 SAM (單一抽象方法) 轉換。從現在開始，您也可以為 Kotlin 介面使用 SAM 轉換。 為此，請使用 <code>fun</code> 修飾符將 Kotlin 介面明確標記為功能性。</p><p>如果當參數預期為只有一個單一抽象方法的介面時，您傳遞一個 lambda 作為引數，則會應用 SAM 轉換。 在此情況下，編譯器會自動將 lambda 轉換為實作抽象成員函式的類別實例。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IntPredicate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> accept</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Boolean</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isEven </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IntPredicate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Is 7 even? - \${isEven.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">accept</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="/zh-Hant/kotlin/fun-interfaces">了解更多關於 Kotlin 功能性介面與 SAM 轉換的資訊</a>。</p><h3 id="函式庫作者的顯式-api-模式" tabindex="-1">函式庫作者的顯式 API 模式 <a class="header-anchor" href="#函式庫作者的顯式-api-模式" aria-label="Permalink to &quot;函式庫作者的顯式 API 模式&quot;">​</a></h3><p>Kotlin 編譯器為函式庫作者提供了 <em>顯式 API 模式</em>。在此模式下，編譯器會執行額外檢查， 協助使函式庫的 API 更清晰、更一致。它對暴露給函式庫公共 API 的宣告新增了以下要求：</p><ul><li>如果預設可見性將宣告暴露給公共 API，則宣告需要可見性修飾符。 這有助於確保沒有宣告意外地暴露給公共 API。</li><li>暴露給公共 API 的屬性與函式需要明確的型別規範。 這保證了 API 使用者知道他們所使用 API 成員的型別。</li></ul><p>根據您的配置，這些顯式 API 可能會產生錯誤 (嚴格模式) 或警告 (警告模式)。 為了可讀性與常識，某些型別的宣告被排除在這些檢查之外：</p><ul><li>主要建構函數</li><li>資料類別的屬性</li><li>屬性 getter 與 setter</li><li><code>override</code> 方法</li></ul><p>顯式 API 模式僅分析模組的生產原始碼。</p><p>要以顯式 API 模式編譯您的模組，請將以下行新增到您的 Gradle 建置腳本中：</p>`,18)),n(h,{group:"build-script"},{default:l(()=>[n(t,{title:"Kotlin","group-key":"kotlin"},{default:l(()=>a[0]||(a[0]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {    ")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"    // for strict mode")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    explicitApi"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"() ")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"    // or")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    explicitApi "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," ExplicitApiMode.Strict")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"    // for warning mode")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    explicitApiWarning"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"    // or")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    explicitApi "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," ExplicitApiMode.Warning")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),n(t,{title:"Groovy","group-key":"groovy"},{default:l(()=>a[1]||(a[1]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"kotlin {    ")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"    // for strict mode")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    explicitApi() ")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"    // or")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    explicitApi "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," 'strict'")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"    // for warning mode")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    explicitApiWarning()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"    // or")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    explicitApi "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," 'warning'")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),a[7]||(a[7]=e(`<p>使用命令列編譯器時，請透過新增 <code>-Xexplicit-api</code> 編譯器選項並將值設為 <code>strict</code> 或 <code>warning</code> 來切換到顯式 API 模式。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-Xexplicit-api</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">strict</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">warning}</span></span></code></pre></div><p><a href="https://github.com/Kotlin/KEEP/blob/master/proposals/explicit-api-mode.md" target="_blank" rel="noreferrer">在 KEEP 中找到有關顯式 API 模式的更多詳細資訊</a>。</p><h3 id="混合命名引數與位置引數" tabindex="-1">混合命名引數與位置引數 <a class="header-anchor" href="#混合命名引數與位置引數" aria-label="Permalink to &quot;混合命名引數與位置引數&quot;">​</a></h3><p>在 Kotlin 1.3 中，當您使用<a href="/zh-Hant/kotlin/functions#named-arguments">命名引數</a>呼叫函式時，您必須將所有沒有名稱的引數 (位置引數) 放在第一個命名引數之前。例如，您可以呼叫 <code>f(1, y = 2)</code>， 但不能呼叫 <code>f(x = 1, 2)</code>。</p><p>當所有引數都位於正確位置但您想為中間的一個引數指定名稱時，這真的很煩人。 這對於明確指出布林值或 <code>null</code> 值屬於哪個屬性特別有用。</p><p>在 Kotlin 1.4 中，沒有這樣的限制 – 您現在可以為一組位置引數中間的引數指定名稱。 此外，您可以任意混合位置引數與命名引數，只要它們保持正確的順序即可。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> reformat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    str: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    uppercaseFirstLetter: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Boolean</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    wordSeparator: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39; &#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//Function call with a named argument in the middle</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reformat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;This is a String!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, uppercaseFirstLetter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> , </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;-&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="末尾逗號" tabindex="-1">末尾逗號 <a class="header-anchor" href="#末尾逗號" aria-label="Permalink to &quot;末尾逗號&quot;">​</a></h3><p>在 Kotlin 1.4 中，您現在可以在列舉中添加末尾逗號，例如引數與參數列表、<code>when</code> 條目，以及解構宣告的組件。 有了末尾逗號，您可以添加新項目並更改其順序，而無需添加或刪除逗號。</p><p>如果對參數或值使用多行語法，這特別有用。添加末尾逗號後，您可以輕鬆交換包含參數或值的行。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> reformat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    str: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    uppercaseFirstLetter: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Boolean</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    wordSeparator: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Character</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39; &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//trailing comma</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> colors </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;red&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;green&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;blue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//trailing comma</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="可呼叫參考改進" tabindex="-1">可呼叫參考改進 <a class="header-anchor" href="#可呼叫參考改進" aria-label="Permalink to &quot;可呼叫參考改進&quot;">​</a></h3><p>Kotlin 1.4 支援更多使用可呼叫參考的案例：</p><ul><li>包含帶有預設值的參數的函式參考</li><li>返回 <code>Unit</code> 的函式中的函式參考</li><li>根據函式中引數數量進行調整的參考</li><li>可呼叫參考上的 suspend 轉換</li></ul><h4 id="包含帶有預設值的參數的函式參考" tabindex="-1">包含帶有預設值的參數的函式參考 <a class="header-anchor" href="#包含帶有預設值的參數的函式參考" aria-label="Permalink to &quot;包含帶有預設值的參數的函式參考&quot;">​</a></h4><p>現在您可以將可呼叫參考用於包含帶有預設值的參數的函式。如果對函式 <code>foo</code> 的可呼叫參考不帶引數，則使用預設值 <code>0</code>。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">!&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(func: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>以前，您必須為 <code>apply</code> 或 <code>foo</code> 函式編寫額外的重載。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// some new overload</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> applyInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(func: (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) -&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h4 id="返回-unit-的函式中的函式參考" tabindex="-1">返回 Unit 的函式中的函式參考 <a class="header-anchor" href="#返回-unit-的函式中的函式參考" aria-label="Permalink to &quot;返回 Unit 的函式中的函式參考&quot;">​</a></h4><p>在 Kotlin 1.4 中，您可以在返回 <code>Unit</code> 的函式中使用對返回任何型別的函式的可呼叫參考。 在 Kotlin 1.4 之前，在此情況下您只能使用 lambda 引數。現在您可以同時使用 lambda 引數與可呼叫參考。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Unit) { }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> returnsInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 42</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">returnsInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() } </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// this was the only way to do it  before 1.4</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">returnsInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// starting from 1.4, this also works</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="根據函式中引數數量進行調整的參考" tabindex="-1">根據函式中引數數量進行調整的參考 <a class="header-anchor" href="#根據函式中引數數量進行調整的參考" aria-label="Permalink to &quot;根據函式中引數數量進行調整的參考&quot;">​</a></h4><p>現在，當傳遞可變數量引數 (<code>vararg</code>) 時，您可以調整對函式的可呼叫參考。 您可以在傳遞引數列表的末尾傳遞任意數量的相同型別參數。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">vararg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> use0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f: (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) -&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> use1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f: (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) -&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> use2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f: (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) -&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    use0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    use1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    use2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="可呼叫參考上的-suspend-轉換" tabindex="-1">可呼叫參考上的 suspend 轉換 <a class="header-anchor" href="#可呼叫參考上的-suspend-轉換" aria-label="Permalink to &quot;可呼叫參考上的 suspend 轉換&quot;">​</a></h4><p>除了 lambda 上的 suspend 轉換外，Kotlin 從 1.4.0 版本開始也支援可呼叫參考上的 suspend 轉換。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> takeSuspend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">suspend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Unit) {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    takeSuspend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() } </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// OK before 1.4</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    takeSuspend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// In Kotlin 1.4, it also works</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="在迴圈中包含的-when-表達式內使用-break-與-continue" tabindex="-1">在迴圈中包含的 <code>when</code> 表達式內使用 <code>break</code> 與 <code>continue</code> <a class="header-anchor" href="#在迴圈中包含的-when-表達式內使用-break-與-continue" aria-label="Permalink to &quot;在迴圈中包含的 \`when\` 表達式內使用 \`break\` 與 \`continue\`&quot;">​</a></h3><p>在 Kotlin 1.3 中，您不能在迴圈中包含的 <code>when</code> 表達式內使用不帶限定詞的 <code>break</code> 與 <code>continue</code>。原因是這些關鍵字保留用於 <code>when</code> 表達式中可能的 <a href="https://en.wikipedia.org/wiki/Switch_statement#Fallthrough" target="_blank" rel="noreferrer">fall-through 行為</a>。</p><p>這就是為什麼如果您想在迴圈中的 <code>when</code> 表達式內使用 <code>break</code> 與 <code>continue</code>，您必須<a href="/zh-Hant/kotlin/returns#break-and-continue-labels">標記</a>它們，這變得相當麻煩。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(xs: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    LOOP@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> xs) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        when</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> continue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@LOOP</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            17</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@LOOP</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在 Kotlin 1.4 中，您可以在迴圈中包含的 <code>when</code> 表達式內使用不帶標籤的 <code>break</code> 與 <code>continue</code>。它們會按預期終止最近的封閉迴圈或進行到其下一步。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(xs: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> xs) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        when</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> continue</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            17</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> break</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>when</code> 內部 fall-through 行為將留待未來設計。</p><h2 id="ide-中的新工具" tabindex="-1">IDE 中的新工具 <a class="header-anchor" href="#ide-中的新工具" aria-label="Permalink to &quot;IDE 中的新工具&quot;">​</a></h2><p>藉助 Kotlin 1.4，您可以使用 IntelliJ IDEA 中的新工具來簡化 Kotlin 開發：</p><ul><li><a href="#new-flexible-project-wizard">新彈性專案精靈</a></li><li><a href="#coroutine-debugger">協程除錯器</a></li></ul><h3 id="新彈性專案精靈" tabindex="-1">新彈性專案精靈 <a class="header-anchor" href="#新彈性專案精靈" aria-label="Permalink to &quot;新彈性專案精靈&quot;">​</a></h3><p>透過新的彈性 Kotlin 專案精靈，您可以輕鬆建立與配置不同型別的 Kotlin 專案，包括多平台專案，這些專案在沒有 UI 的情況下可能難以配置。</p><p><img src="`+p+'" alt="Kotlin Project Wizard – Multiplatform project"></p><p>新的 Kotlin 專案精靈既簡單又彈性：</p><ol><li><em>選擇專案範本</em>，具體取決於您要執行的操作。將來會添加更多範本。</li><li><em>選擇建置系統</em> – Gradle (Kotlin 或 Groovy DSL)、Maven 或 IntelliJ IDEA。 Kotlin 專案精靈將僅顯示所選專案範本支援的建置系統。</li><li>直接在主螢幕上<em>預覽專案結構</em>。</li></ol><p>然後您可以完成專案建立，或者可選地，在下一個螢幕上<em>配置專案</em>：</p><ol start="4"><li><em>新增/移除模組與目標</em>，這些模組與目標為此專案範本所支援。</li><li><em>配置模組與目標設定</em>，例如目標 JVM 版本、目標範本與測試框架。</li></ol><p><img src="'+r+'" alt="Kotlin Project Wizard - Configure targets"></p><p>未來，我們將透過新增更多配置選項與範本，使 Kotlin 專案精靈更具彈性。</p><p>您可以透過這些教學課程來試用新的 Kotlin 專案精靈：</p><ul><li><a href="/zh-Hant/kotlin/jvm-get-started">建立基於 Kotlin/JVM 的控制台應用程式</a></li><li><a href="/zh-Hant/kotlin/js-react">為 React 建立 Kotlin/JS 應用程式</a></li><li><a href="/zh-Hant/kotlin/native-get-started">建立 Kotlin/Native 應用程式</a></li></ul><h3 id="協程除錯器" tabindex="-1">協程除錯器 <a class="header-anchor" href="#協程除錯器" aria-label="Permalink to &quot;協程除錯器&quot;">​</a></h3><p>許多人已經使用<a href="/zh-Hant/kotlin/coroutines-guide">協程</a>進行非同步程式設計。 但在 Kotlin 1.4 之前，除錯協程可能非常痛苦。由於協程在執行緒之間跳轉， 因此很難理解特定協程在做什麼並檢查其上下文。在某些情況下，追蹤中斷點的步驟根本不起作用。結果，您必須依賴日誌記錄或心力來除錯使用協程的程式碼。</p><p>在 Kotlin 1.4 中，透過 Kotlin 外掛程式隨附的新功能，除錯協程現在方便得多。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>除錯適用於 <code>kotlinx-coroutines-core</code> 的 1.3.8 或更高版本。</p></div><p><strong>Debug Tool Window</strong> 現在包含一個新的 <strong>Coroutines</strong> 標籤頁。在此標籤頁中，您可以找到有關當前 正在運行與已暫停協程的資訊。協程按其運行所在的調度器進行分組。</p><p><img src="'+d+'" alt="Debugging coroutines"></p><p>現在您可以：</p><ul><li>輕鬆檢查每個協程的狀態。</li><li>查看運行中與已暫停協程的局部與捕獲變數值。</li><li>查看完整的協程建立堆疊，以及協程內部的呼叫堆疊。堆疊包含所有帶有 變數值的框架，即使那些在標準除錯期間會丟失的框架。</li></ul><p>如果您需要包含每個協程狀態及其堆疊的完整報告，請右鍵單擊 <strong>Coroutines</strong> 標籤頁內，然後 單擊 <strong>Get Coroutines Dump</strong>。目前，協程 dump 相當簡單，但我們將使其在未來版本的 Kotlin 中更具可讀性與幫助性。</p><p><img src="'+o+`" alt="Coroutines Dump"></p><p>在<a href="https://blog.jetbrains.com/kotlin/2020/07/kotlin-1-4-rc-debugging-coroutines/" target="_blank" rel="noreferrer">這篇部落格文章</a>與 <a href="https://www.jetbrains.com/help/idea/debug-kotlin-coroutines.html" target="_blank" rel="noreferrer">IntelliJ IDEA 文件</a>中了解更多關於除錯協程的資訊。</p><h2 id="新編譯器" tabindex="-1">新編譯器 <a class="header-anchor" href="#新編譯器" aria-label="Permalink to &quot;新編譯器&quot;">​</a></h2><p>新的 Kotlin 編譯器將會非常快；它將統一所有支援的平台並為編譯器擴展提供 API。這是一個長期專案，我們已經在 Kotlin 1.4.0 中完成了幾個步驟：</p><ul><li><a href="#new-more-powerful-type-inference-algorithm">新的、更強大的型別推斷演算法</a>預設啟用。</li><li><a href="#unified-backends-and-extensibility">新的 JVM 與 JS IR 後端</a>。一旦我們將其穩定化，它們將成為預設。</li></ul><h3 id="新的、更強大的型別推斷演算法" tabindex="-1">新的、更強大的型別推斷演算法 <a class="header-anchor" href="#新的、更強大的型別推斷演算法" aria-label="Permalink to &quot;新的、更強大的型別推斷演算法&quot;">​</a></h3><p>Kotlin 1.4 使用一種新的、更強大的型別推斷演算法。這個新演算法在 Kotlin 1.3 中已經可以透過指定編譯器選項進行嘗試，現在它已預設使用。您可以在 <a href="https://youtrack.jetbrains.com/issues/KT?q=Tag:%20fixed-in-new-inference%20" target="_blank" rel="noreferrer">YouTrack</a>中找到新演算法中修復的問題的完整列表。在這裡，您可以找到一些最顯著的改進：</p><ul><li><a href="#more-cases-where-type-is-inferred-automatically">更多自動推斷型別的案例</a></li><li><a href="#smart-casts-for-a-lambda-s-last-expression">lambda 最後一個表達式的 Smart Casts</a></li><li><a href="#smart-casts-for-callable-references">可呼叫參考的 Smart Casts</a></li><li><a href="#better-inference-for-delegated-properties">委託屬性更好的推斷</a></li><li><a href="#sam-conversion-for-java-interfaces-with-different-arguments">帶有不同引數的 Java 介面的 SAM 轉換</a></li><li><a href="#java-sam-interfaces-in-kotlin">Kotlin 中的 Java SAM 介面</a></li></ul><h4 id="更多自動推斷型別的案例" tabindex="-1">更多自動推斷型別的案例 <a class="header-anchor" href="#更多自動推斷型別的案例" aria-label="Permalink to &quot;更多自動推斷型別的案例&quot;">​</a></h4><p>新推斷演算法為許多舊演算法需要您明確指定型別的案例推斷型別。 例如，在以下範例中，lambda 參數 <code>it</code> 的型別被正確推斷為 <code>String?</code>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rulesMap: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?) -&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Boolean</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mapOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;weak&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;medium&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isNullOrBlank</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() },</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;strong&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;^[a-zA-Z0-9]+$&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toRegex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">matches</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(it) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rulesMap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;weak&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;abc!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rulesMap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;strong&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;abc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rulesMap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;strong&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;abc!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在 Kotlin 1.3 中，您需要引入一個顯式的 lambda 參數或將 <code>to</code> 替換為帶有 顯式泛型引數的 <code>Pair</code> 建構函數才能使其工作。</p><h4 id="lambda-最後一個表達式的-smart-casts" tabindex="-1">lambda 最後一個表達式的 Smart Casts <a class="header-anchor" href="#lambda-最後一個表達式的-smart-casts" aria-label="Permalink to &quot;lambda 最後一個表達式的 Smart Casts&quot;">​</a></h4><p>在 Kotlin 1.3 中，除非您指定預期型別，否則 lambda 內的最後一個表達式不會被 Smart Cast。 因此，在以下範例中，Kotlin 1.3 推斷 <code>String?</code> 作為 <code>result</code> 變數的型別：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> currentValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;test&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    str </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// the Kotlin compiler knows that str is not null here</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// The type of &#39;result&#39; is String? in Kotlin 1.3 and String in Kotlin 1.4</span></span></code></pre></div><p>在 Kotlin 1.4 中，由於新的推斷演算法，lambda 內的最後一個表達式被 Smart Cast，並且這個新的、 更精確的型別用於推斷結果 lambda 型別。因此，<code>result</code> 變數的型別變為 <code>String</code>。</p><p>在 Kotlin 1.3 中，您通常需要添加顯式 cast (無論是 <code>!!</code> 還是像 <code>as String</code> 這樣的型別 cast) 才能使此類案例工作， 而現在這些 cast 已變得不必要。</p><h4 id="可呼叫參考的-smart-casts" tabindex="-1">可呼叫參考的 Smart Casts <a class="header-anchor" href="#可呼叫參考的-smart-casts" aria-label="Permalink to &quot;可呼叫參考的 Smart Casts&quot;">​</a></h4><p>在 Kotlin 1.3 中，您無法存取 Smart Cast 型別的成員參考。現在在 Kotlin 1.4 中，您可以：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.reflect.KFunction</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">sealed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Animal</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Cat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Animal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> meow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;meow&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Dog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Animal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> woof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;woof&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> perform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(animal: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Animal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> kFunction: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;*&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> when</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (animal) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Cat </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> animal::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">meow</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Dog </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> animal::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">woof</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    kFunction.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    perform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Cat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在 <code>animal</code> 變數已 Smart Cast 為特定型別 <code>Cat</code> 與 <code>Dog</code> 後，您可以使用不同的成員參考 <code>animal::meow</code> 與 <code>animal::woof</code>。 型別檢查後，您可以存取與子型別對應的成員參考。</p><h4 id="委託屬性更好的推斷" tabindex="-1">委託屬性更好的推斷 <a class="header-anchor" href="#委託屬性更好的推斷" aria-label="Permalink to &quot;委託屬性更好的推斷&quot;">​</a></h4><p>在分析 <code>by</code> 關鍵字後面的委託表達式時，委託屬性的型別未被考慮在內。 例如，以下程式碼以前無法編譯，但現在編譯器正確推斷 <code>old</code> 與 <code>new</code> 參數的型別為 <code>String?</code>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.properties.Delegates</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> prop: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Delegates</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">observable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { p, old, new </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$old</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> → </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$new</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    prop </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;abc&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    prop </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;xyz&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="帶有不同引數的-java-介面的-sam-轉換" tabindex="-1">帶有不同引數的 Java 介面的 SAM 轉換 <a class="header-anchor" href="#帶有不同引數的-java-介面的-sam-轉換" aria-label="Permalink to &quot;帶有不同引數的 Java 介面的 SAM 轉換&quot;">​</a></h4><p>Kotlin 從一開始就支援 Java 介面的 SAM 轉換，但有一種情況不被支援， 這在使用現有 Java 函式庫時有時很煩人。如果您呼叫一個接受兩個 SAM 介面作為參數的 Java 方法， 則兩個引數都需要是 lambda 或常規物件。您不能將一個引數作為 lambda 傳遞，而另一個作為物件傳遞。</p><p>新演算法修復了這個問題，您可以在任何情況下傳遞 lambda 而不是 SAM 介面， 這正是您自然期望它的工作方式。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// FILE: A.java</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Runnable </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">r1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Runnable </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">r2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// FILE: test.kt</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(r1: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Runnable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    A.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(r1) {}  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Works in Kotlin 1.4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="kotlin-中的-java-sam-介面" tabindex="-1">Kotlin 中的 Java SAM 介面 <a class="header-anchor" href="#kotlin-中的-java-sam-介面" aria-label="Permalink to &quot;Kotlin 中的 Java SAM 介面&quot;">​</a></h4><p>在 Kotlin 1.4 中，您可以在 Kotlin 中使用 Java SAM 介面並對它們應用 SAM 轉換。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> java.lang.Runnable</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(r: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Runnable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { } </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// OK</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在 Kotlin 1.3 中，您必須在 Java 程式碼中宣告上述函式 <code>foo</code> 才能執行 SAM 轉換。</p><h3 id="統一後端與擴展性" tabindex="-1">統一後端與擴展性 <a class="header-anchor" href="#統一後端與擴展性" aria-label="Permalink to &quot;統一後端與擴展性&quot;">​</a></h3><p>在 Kotlin 中，我們有三個生成可執行檔的後端：Kotlin/JVM、Kotlin/JS 和 Kotlin/Native。Kotlin/JVM 和 Kotlin/JS 沒有太多共用程式碼，因為它們是獨立開發的。Kotlin/Native 基於圍繞 Kotlin 程式碼的中間表示 (IR) 的新基礎設施。</p><p>我們現在正在將 Kotlin/JVM 和 Kotlin/JS 遷移到相同的 IR。因此，所有三個後端 共用大量邏輯並具有統一的管道。這使我們能夠為所有平台實作大多數功能、最佳化和錯誤修復一次。 兩個新的基於 IR 的後端都處於 <a href="/zh-Hant/kotlin/components-stability">Alpha</a> 階段。</p><p>共同的後端基礎設施也為多平台編譯器擴展打開了大門。您將能夠插入管道並添加自訂處理和轉換，這些處理和轉換將自動適用於所有平台。</p><p>我們鼓勵您試用我們新的 <a href="#new-jvm-ir-backend">JVM IR</a> 與 <a href="#new-js-ir-backend">JS IR</a> 後端，它們目前處於 Alpha 階段，並與我們分享您的回饋。</p><h2 id="kotlin-jvm" tabindex="-1">Kotlin/JVM <a class="header-anchor" href="#kotlin-jvm" aria-label="Permalink to &quot;Kotlin/JVM&quot;">​</a></h2><p>Kotlin 1.4.0 包含許多 JVM 特定的改進，例如：</p><ul><li><a href="#new-jvm-ir-backend">新的 JVM IR 後端</a></li><li><a href="#new-modes-for-generating-default-methods">介面中生成預設方法的新模式</a></li><li><a href="#unified-exception-type-for-null-checks">Null 檢查的統一例外型別</a></li><li><a href="#type-annotations-in-the-jvm-bytecode">JVM 位元組碼中的型別註解</a></li></ul><h3 id="新的-jvm-ir-後端" tabindex="-1">新的 JVM IR 後端 <a class="header-anchor" href="#新的-jvm-ir-後端" aria-label="Permalink to &quot;新的 JVM IR 後端&quot;">​</a></h3><p>與 Kotlin/JS 一樣，我們正在將 Kotlin/JVM 遷移到<a href="#unified-backends-and-extensibility">統一的 IR 後端</a>， 這使我們能夠為所有平台實作大多數功能與錯誤修復一次。您還可以透過建立適用於所有平台的多平台擴展來從中受益。</p><p>Kotlin 1.4.0 尚未為此類擴展提供公共 API，但我們正在與我們的合作夥伴密切合作， 包括 <a href="https://developer.android.com/jetpack/compose" target="_blank" rel="noreferrer">Jetpack Compose</a>，他們已經在使用我們的新後端建置他們的編譯器外掛程式。</p><p>我們鼓勵您試用新的 Kotlin/JVM 後端（目前處於 Alpha 階段），並向我們的<a href="https://youtrack.jetbrains.com/issues/KT" target="_blank" rel="noreferrer">問題追蹤器</a>提交任何問題和功能請求。 這將幫助我們統一編譯器管道並更快地將 Jetpack Compose 等編譯器擴展帶到 Kotlin 社群。</p><p>要啟用新的 JVM IR 後端，請在您的 Gradle 建置腳本中指定一個額外的編譯器選項：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kotlinOptions.useIR </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>如果您<a href="https://developer.android.com/jetpack/compose/setup?hl=en" target="_blank" rel="noreferrer">啟用 Jetpack Compose</a>，您將自動 選用新的 JVM 後端，無需在 <code>kotlinOptions</code> 中指定編譯器選項。</p></div><p>使用命令列編譯器時，請添加編譯器選項 <code>-Xuse-ir</code>。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>您只能在啟用新後端的情況下使用由新 JVM IR 後端編譯的程式碼。否則，您將收到錯誤。 考慮到這一點，我們不建議函式庫作者在生產環境中切換到新後端。</p></div><h3 id="介面中生成預設方法的新模式" tabindex="-1">介面中生成預設方法的新模式 <a class="header-anchor" href="#介面中生成預設方法的新模式" aria-label="Permalink to &quot;介面中生成預設方法的新模式&quot;">​</a></h3><p>將 Kotlin 程式碼編譯到 JVM 1.8 及更高版本時，您可以將 Kotlin 介面的非抽象方法編譯成 Java 的 <code>default</code> 方法。為此，有一個機制包含用於標記此類方法的 <code>@JvmDefault</code> 註解 以及啟用此註解處理的 <code>-Xjvm-default</code> 編譯器選項。</p><p>在 1.4.0 中，我們新增了一種用於生成預設方法的新模式：<code>-Xjvm-default=all</code> 將把 Kotlin 介面中<em>所有</em>非抽象方法 編譯為 <code>default</code> Java 方法。為了與使用未編譯 <code>default</code> 介面的程式碼相容， 我們還添加了 <code>all-compatibility</code> 模式。</p><p>有關 Java 互操作中預設方法的更多資訊，請參閱<a href="/zh-Hant/kotlin/java-to-kotlin-interop#default-methods-in-interfaces">互操作性文件</a>和 <a href="https://blog.jetbrains.com/kotlin/2020/07/kotlin-1-4-m3-generating-default-methods-in-interfaces/" target="_blank" rel="noreferrer">這篇部落格文章</a>。</p><h3 id="null-檢查的統一例外型別" tabindex="-1">Null 檢查的統一例外型別 <a class="header-anchor" href="#null-檢查的統一例外型別" aria-label="Permalink to &quot;Null 檢查的統一例外型別&quot;">​</a></h3><p>從 Kotlin 1.4.0 開始，所有執行時 null 檢查都將拋出 <code>java.lang.NullPointerException</code>，而不是 <code>KotlinNullPointerException</code>、 <code>IllegalStateException</code>、<code>IllegalArgumentException</code> 和 <code>TypeCastException</code>。這適用於：<code>!!</code> 運算符、 方法前置中的參數 null 檢查、平台型別表達式 null 檢查以及帶有非 null 型別的 <code>as</code> 運算符。 這不適用於 <code>lateinit</code> null 檢查和顯式函式庫函式呼叫，例如 <code>checkNotNull</code> 或 <code>requireNotNull</code>。</p><p>此更改增加了 Kotlin 編譯器或各種類型的位元組碼處理工具（例如 Android <a href="https://developer.android.com/studio/build/shrink-code" target="_blank" rel="noreferrer">R8 優化器</a>）可以執行的 null 檢查優化數量。</p><p>請注意，從開發人員的角度來看，事情不會改變太多：Kotlin 程式碼將拋出與以前相同的錯誤訊息。 例外型別更改，但傳遞的資訊保持不變。</p><h3 id="jvm-位元組碼中的型別註解" tabindex="-1">JVM 位元組碼中的型別註解 <a class="header-anchor" href="#jvm-位元組碼中的型別註解" aria-label="Permalink to &quot;JVM 位元組碼中的型別註解&quot;">​</a></h3><p>Kotlin 現在可以在 JVM 位元組碼 (目標版本 1.8+) 中生成型別註解，以便它們在執行時透過 Java 反射可用。 要在位元組碼中發出型別註解，請遵循以下步驟：</p><ol><li>確保您宣告的註解具有適當的註解目標 (Java 的 <code>ElementType.TYPE_USE</code> 或 Kotlin 的 <code>AnnotationTarget.TYPE</code>) 和保留策略 (<code>AnnotationRetention.RUNTIME</code>)。</li><li>將註解類別宣告編譯為 JVM 位元組碼目標版本 1.8+。您可以使用 <code>-jvm-target=1.8</code> 編譯器選項指定它。</li><li>將使用註解的程式碼編譯為 JVM 位元組碼目標版本 1.8+ (<code>-jvm-target=1.8</code>) 並添加 <code>-Xemit-jvm-type-annotations</code> 編譯器選項。</li></ol><p>請注意，標準函式庫中的型別註解目前不會發出到位元組碼中，因為標準函式庫是使用目標版本 1.6 編譯的。</p><p>到目前為止，僅支援基本案例：</p><ul><li>方法參數、方法返回型別和屬性型別上的型別註解；</li><li>型別引數的不變投影，例如 <code>Smth&lt;@Ann Foo&gt;</code>、<code>Array&lt;@Ann Foo&gt;</code>。</li></ul><p>在以下範例中，<code>String</code> 型別上的 <code>@Foo</code> 註解可以發出到位元組碼中，然後由 函式庫程式碼使用：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(AnnotationTarget.TYPE)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">annotation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Foo</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;OK&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="kotlin-js" tabindex="-1">Kotlin/JS <a class="header-anchor" href="#kotlin-js" aria-label="Permalink to &quot;Kotlin/JS&quot;">​</a></h2><p>在 JS 平台上，Kotlin 1.4.0 提供了以下改進：</p><ul><li><a href="#new-gradle-dsl">新的 Gradle DSL</a></li><li><a href="#new-js-ir-backend">新的 JS IR 後端</a></li></ul><h3 id="新的-gradle-dsl" tabindex="-1">新的 Gradle DSL <a class="header-anchor" href="#新的-gradle-dsl" aria-label="Permalink to &quot;新的 Gradle DSL&quot;">​</a></h3><p><code>kotlin.js</code> Gradle 外掛程式帶有調整後的 Gradle DSL，它提供了許多新的配置選項，並且更緊密地與 <code>kotlin-multiplatform</code> 外掛程式使用的 DSL 對齊。一些最具影響力的變更包括：</p><ul><li>透過 <code>binaries.executable()</code> 明確切換建立可執行檔。在此處閱讀更多關於<a href="/zh-Hant/kotlin/js-project-setup#execution-environments">執行 Kotlin/JS 及其環境的資訊</a>。</li><li>透過 <code>cssSupport</code> 從 Gradle 配置中配置 webpack 的 CSS 和 style loaders。在此處閱讀更多關於<a href="/zh-Hant/kotlin/js-project-setup#css">使用 CSS 和 style loaders 的資訊</a>。</li><li>改進的 npm 依賴管理，強制使用版本號或 <a href="https://docs.npmjs.com/about-semantic-versioning" target="_blank" rel="noreferrer">semver</a> 版本範圍，以及使用 <code>devNpm</code>、<code>optionalNpm</code> 和 <code>peerNpm</code> 支援 <em>開發</em>、<em>peer</em> 和 <em>可選</em> npm 依賴。 <a href="/zh-Hant/kotlin/js-project-setup#npm-dependencies">在此處直接從 Gradle 閱讀更多關於 npm 套件依賴管理的資訊</a>。</li><li><a href="https://github.com/Kotlin/dukat" target="_blank" rel="noreferrer">Dukat</a> 的更強大整合，Kotlin 外部宣告的生成器。外部宣告現在可以在建置時生成，或者可以透過 Gradle 任務手動生成。</li></ul><h3 id="新的-js-ir-後端" tabindex="-1">新的 JS IR 後端 <a class="header-anchor" href="#新的-js-ir-後端" aria-label="Permalink to &quot;新的 JS IR 後端&quot;">​</a></h3><p>Kotlin/JS 的 <a href="/zh-Hant/kotlin/js-ir-compiler">IR 後端</a>目前具有 <a href="/zh-Hant/kotlin/components-stability">Alpha</a> 穩定性，它提供了一些特定於 Kotlin/JS 目標的新功能，這些功能主要集中在透過無用程式碼消除來生成程式碼大小，以及改進與 JavaScript 和 TypeScript 的互操作性等。</p><p>要啟用 Kotlin/JS IR 後端，請在您的 <code>gradle.properties</code> 中設定鍵 <code>kotlin.js.compiler=ir</code>，或者將 <code>IR</code> 編譯器型別傳遞給您的 Gradle 建置腳本的 <code>js</code> 函式：</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kotlin {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    js(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">IR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// or: LEGACY, BOTH</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    binaries</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">executable()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>有關如何配置新後端的更多詳細資訊，請參閱 <a href="/zh-Hant/kotlin/js-ir-compiler">Kotlin/JS IR 編譯器文件</a>。</p><p>藉助新的 <a href="/zh-Hant/kotlin/js-to-kotlin-interop#jsexport-annotation">@JsExport</a> 註解以及從 Kotlin 程式碼**<a href="/zh-Hant/kotlin/js-ir-compiler#preview-generation-of-typescript-declaration-files-d-ts">生成 TypeScript 定義 (d.ts)</a>** 的能力，Kotlin/JS IR 編譯器後端改進了 JavaScript 和 TypeScript 的互操作性。這也使得將 Kotlin/JS 程式碼與現有工具整合、建立<strong>混合應用程式</strong>以及利用多平台專案中的程式碼共用功能變得更加容易。</p><p><a href="/zh-Hant/kotlin/js-ir-compiler">了解更多關於 Kotlin/JS IR 編譯器後端中可用的功能</a>。</p><h2 id="kotlin-native" tabindex="-1">Kotlin/Native <a class="header-anchor" href="#kotlin-native" aria-label="Permalink to &quot;Kotlin/Native&quot;">​</a></h2><p>在 1.4.0 中，Kotlin/Native 獲得了大量新功能和改進，包括：</p><ul><li><a href="#support-for-kotlin-s-suspending-functions-in-swift-and-objective-c">Swift 和 Objective-C 中對 suspend 函式的支援</a></li><li><a href="#objective-c-generics-support-by-default">預設支援 Objective-C 泛型</a></li><li><a href="#exception-handling-in-objective-c-swift-interop">Objective-C/Swift 互操作中的例外處理</a></li><li><a href="#generate-release-dsyms-on-apple-targets-by-default">預設在 Apple 目標上生成發布版 .dSYMs</a></li><li><a href="#performance-improvements">效能改進</a></li><li><a href="#simplified-management-of-cocoapods-dependencies">簡化 CocoaPods 依賴管理</a></li></ul><h3 id="swift-和-objective-c-中對-kotlin-的-suspend-函式的支援" tabindex="-1">Swift 和 Objective-C 中對 Kotlin 的 suspend 函式的支援 <a class="header-anchor" href="#swift-和-objective-c-中對-kotlin-的-suspend-函式的支援" aria-label="Permalink to &quot;Swift 和 Objective-C 中對 Kotlin 的 suspend 函式的支援&quot;">​</a></h3><p>在 1.4.0 中，我們添加了對 Swift 和 Objective-C 中 suspend 函式的基本支援。現在，當您將 Kotlin 模組 編譯為 Apple 框架時，suspend 函式在其中作為帶有回呼的函式可用 (Swift/Objective-C 術語中的 <code>completionHandler</code>)。 當生成的框架標頭中有此類函式時，您可以從 Swift 或 Objective-C 程式碼中呼叫它們，甚至覆寫它們。</p><p>例如，如果您編寫此 Kotlin 函式：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">suspend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> queryData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(id: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span></span></code></pre></div><p>...那麼您可以從 Swift 中這樣呼叫它：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">queryData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">17</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { result, error </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> error {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">       print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ERROR: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(e)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">       print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="/zh-Hant/kotlin/native-objc-interop">了解更多關於在 Swift 和 Objective-C 中使用 suspend 函式的資訊</a>。</p><h3 id="預設支援-objective-c-泛型" tabindex="-1">預設支援 Objective-C 泛型 <a class="header-anchor" href="#預設支援-objective-c-泛型" aria-label="Permalink to &quot;預設支援 Objective-C 泛型&quot;">​</a></h3><p>Kotlin 的先前版本為 Objective-C 互操作中的泛型提供了實驗性支援。從 1.4.0 開始，Kotlin/Native 預設從 Kotlin 程式碼生成帶有泛型的 Apple 框架。在某些情況下，這可能會破壞呼叫 Kotlin 框架的現有 Objective-C 或 Swift 程式碼。要讓框架標頭在沒有泛型的情況下編寫，請添加 <code>-Xno-objc-generics</code> 編譯器選項。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    targets.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">org</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jetbrains</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gradle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mpp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KotlinNativeTarget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        binaries.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            freeCompilerArgs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;-Xno-objc-generics&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>請注意，<a href="/zh-Hant/kotlin/native-objc-interop#generics">關於與 Objective-C 互操作性的文件</a>中列出的所有細節和限制仍然有效。</p><h3 id="objective-c-swift-互操作中的例外處理" tabindex="-1">Objective-C/Swift 互操作中的例外處理 <a class="header-anchor" href="#objective-c-swift-互操作中的例外處理" aria-label="Permalink to &quot;Objective-C/Swift 互操作中的例外處理&quot;">​</a></h3><p>在 1.4.0 中，我們稍微更改了從 Kotlin 生成的 Swift API，關於例外轉換的方式。 Kotlin 和 Swift 之間在錯誤處理上存在根本差異。所有 Kotlin 例外都是 unchecked，而 Swift 只有 checked 錯誤。 因此，為了讓 Swift 程式碼感知預期例外，Kotlin 函式應使用 <code>@Throws</code> 註解標記， 並指定潛在例外類別的列表。</p><p>當編譯為 Swift 或 Objective-C 框架時，帶有或繼承 <code>@Throws</code> 註解的函式在 Objective-C 中表示為 <code>NSError*</code> 生成方法，在 Swift 中表示為 <code>throws</code> 方法。</p><p>以前，除了 <code>RuntimeException</code> 和 <code>Error</code> 之外的任何例外都會作為 <code>NSError</code> 傳播。現在此行為發生變化： 現在 <code>NSError</code> 僅針對作為 <code>@Throws</code> 註解參數指定類別 (或其子類別) 實例的例外拋出。 到達 Swift/Objective-C 的其他 Kotlin 例外被視為未處理並導致程式終止。</p><h3 id="預設在-apple-目標上生成發布版-dsyms" tabindex="-1">預設在 Apple 目標上生成發布版 .dSYMs <a class="header-anchor" href="#預設在-apple-目標上生成發布版-dsyms" aria-label="Permalink to &quot;預設在 Apple 目標上生成發布版 .dSYMs&quot;">​</a></h3><p>從 1.4.0 開始，Kotlin/Native 編譯器預設為 Darwin 平台上的發布二進位檔案生成<a href="https://developer.apple.com/documentation/xcode/building_your_app_to_include_debugging_information" target="_blank" rel="noreferrer">除錯符號檔</a> (<code>.dSYM</code>)。這可以透過 <code>-Xadd-light-debug=disable</code> 編譯器選項禁用。在其他平台上，此選項預設禁用。要在 Gradle 中切換此選項，請使用：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    targets.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">org</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jetbrains</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gradle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mpp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KotlinNativeTarget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        binaries.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            freeCompilerArgs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;-Xadd-light-debug={enable|disable}&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="/zh-Hant/kotlin/native-ios-symbolication">了解更多關於崩潰報告符號化的資訊</a>。</p><h3 id="效能改進" tabindex="-1">效能改進 <a class="header-anchor" href="#效能改進" aria-label="Permalink to &quot;效能改進&quot;">​</a></h3><p>Kotlin/Native 獲得了許多效能改進，加速了開發過程和執行。 以下是一些範例：</p><ul><li><p>為了提高物件分配的速度，我們現在提供 <a href="https://github.com/microsoft/mimalloc" target="_blank" rel="noreferrer">mimalloc</a> 記憶體分配器作為系統分配器的替代方案。mimalloc 在某些基準測試中運行速度快兩倍。 目前，在 Kotlin/Native 中使用 mimalloc 是實驗性的；您可以透過使用 <code>-Xallocator=mimalloc</code> 編譯器選項來切換到它。</p></li><li><p>我們重新設計了 C interop 函式庫的建置方式。藉助新工具，Kotlin/Native 生成 interop 函式庫的速度比以前快 4 倍， 而且工件大小是以前的 25% 到 30%。</p></li><li><p>由於 GC 的最佳化，整體執行時效能得到了提升。這種提升在具有大量長壽命物件的專案中將會特別明顯。 <code>HashMap</code> 和 <code>HashSet</code> 集合現在透過避免冗餘裝箱而工作得更快。</p></li><li><p>在 1.3.70 中，我們引入了兩個新功能來改善 Kotlin/Native 編譯的效能： <a href="https://blog.jetbrains.com/kotlin/2020/03/kotlin-1-3-70-released/#kotlin-native" target="_blank" rel="noreferrer">快取專案依賴項和從 Gradle daemon 運行編譯器</a>。 從那時起，我們已經修復了許多問題並改進了這些功能的整體穩定性。</p></li></ul><h3 id="簡化-cocoapods-依賴管理" tabindex="-1">簡化 CocoaPods 依賴管理 <a class="header-anchor" href="#簡化-cocoapods-依賴管理" aria-label="Permalink to &quot;簡化 CocoaPods 依賴管理&quot;">​</a></h3><p>以前，一旦您將專案與依賴管理工具 CocoaPods 整合，您只能在 Xcode 中建置 iOS、macOS、watchOS 或 tvOS 部分的專案， 與您的多平台專案的其他部分分開。這些其他部分可以在 IntelliJ IDEA 中建置。</p><p>此外，每當您添加對儲存在 CocoaPods (Pod 函式庫) 中的 Objective-C 函式庫的依賴時， 您都必須從 IntelliJ IDEA 切換到 Xcode，呼叫 <code>pod install</code>，並在那裡運行 Xcode 建置。</p><p>現在，您可以在 IntelliJ IDEA 中直接管理 Pod 依賴項，同時享受它為程式碼工作提供的好處， 例如程式碼高亮顯示和自動完成。您還可以使用 Gradle 建置整個 Kotlin 專案，而無需切換到 Xcode。 這意味著您只需要在需要編寫 Swift/Objective-C 程式碼或在模擬器或裝置上運行您的應用程式時才需要進入 Xcode。</p><p>現在您還可以處理本地儲存的 Pod 函式庫。</p><p>根據您的需求，您可以在以下之間添加依賴項：</p><ul><li>Kotlin 專案與遠端儲存在 CocoaPods 儲存庫或本地儲存在您機器上的 Pod 函式庫。</li><li>Kotlin Pod (用作 CocoaPods 依賴項的 Kotlin 專案) 與帶有一個或多個目標的 Xcode 專案。</li></ul><p>完成初始配置後，當您向 <code>cocoapods</code> 添加新的依賴項時，只需在 IntelliJ IDEA 中重新匯入專案即可。 新的依賴項將自動添加。無需額外步驟。</p><p><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-cocoapods-libraries.html" target="_blank" rel="noreferrer">了解如何添加依賴項</a>。</p><h2 id="kotlin-多平台" tabindex="-1">Kotlin 多平台 <a class="header-anchor" href="#kotlin-多平台" aria-label="Permalink to &quot;Kotlin 多平台&quot;">​</a></h2><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>對多平台專案的支援處於 <a href="/zh-Hant/kotlin/components-stability">Alpha</a> 階段。未來它可能會發生不相容的變更，並需要手動遷移。 我們感謝您在 <a href="https://youtrack.jetbrains.com/issues/KT" target="_blank" rel="noreferrer">YouTrack</a> 上提供回饋。</p></div><p><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/get-started.html" target="_blank" rel="noreferrer">Kotlin 多平台</a>減少了為<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-dsl-reference.html#targets" target="_blank" rel="noreferrer">不同平台</a>編寫和維護相同程式碼所花費的時間， 同時保留了原生程式設計的靈活性和優勢。我們繼續投入精力於多平台功能和改進：</p><ul><li><a href="#sharing-code-in-several-targets-with-the-hierarchical-project-structure">使用階層式專案結構在多個目標中共享程式碼</a></li><li><a href="#leveraging-native-libs-in-the-hierarchical-structure">在階層式結構中利用原生函式庫</a></li><li><a href="#specifying-dependencies-only-once">僅指定一次 kotlinx 依賴項</a></li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>多平台專案需要 Gradle 6.0 或更高版本。</p></div><h3 id="使用階層式專案結構在多個目標中共享程式碼" tabindex="-1">使用階層式專案結構在多個目標中共享程式碼 <a class="header-anchor" href="#使用階層式專案結構在多個目標中共享程式碼" aria-label="Permalink to &quot;使用階層式專案結構在多個目標中共享程式碼&quot;">​</a></h3><p>藉助新的階層式專案結構支援，您可以在<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-discover-project.html" target="_blank" rel="noreferrer">多平台專案</a>中的<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-dsl-reference.html#targets" target="_blank" rel="noreferrer">多個平台</a>之間共享程式碼。</p><p>以前，添加到多平台專案的任何程式碼都可以放置在平台特定原始碼集中，該原始碼集僅限於一個目標， 並且不能被任何其他平台重用，或者放置在通用原始碼集中，例如 <code>commonMain</code> 或 <code>commonTest</code>， 該原始碼集在專案中的所有平台之間共享。在通用原始碼集中，您只能透過使用需要平台特定 <code>actual</code> 實作的 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-expect-actual.html" target="_blank" rel="noreferrer"><code>expect</code> 宣告</a>來呼叫平台特定 API。</p><p>這使得<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-share-on-platforms.html#share-code-on-all-platforms" target="_blank" rel="noreferrer">在所有平台上共享程式碼</a>變得容易， 但<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-share-on-platforms.html#share-code-on-similar-platforms" target="_blank" rel="noreferrer">在僅部分目標之間共享</a>則不那麼容易， 尤其是那些可能重用大量通用邏輯和第三方 API 的相似目標。</p><p>例如，在一個典型的針對 iOS 的多平台專案中，有兩個與 iOS 相關的目標：一個用於 iOS ARM64 裝置， 另一個用於 x64 模擬器。它們有單獨的平台特定原始碼集，但實際上，很少需要為裝置和模擬器提供不同的程式碼， 而且它們的依賴關係非常相似。因此，iOS 特定程式碼可以在它們之間共享。</p><p>顯然，在此設定中，最好有一個<em>用於兩個 iOS 目標的共享原始碼集</em>，其中包含的 Kotlin/Native 程式碼仍然可以直接呼叫 iOS 裝置和模擬器通用的任何 API。</p><p><img src="`+E+`" alt="Code shared for iOS targets" width="300"></p><p>現在，您可以透過<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-share-on-platforms.html#share-code-on-similar-platforms" target="_blank" rel="noreferrer">階層式專案結構支援</a>來實現這一點， 該支援會根據哪些目標使用它們來推斷和調整每個原始碼集中可用的 API 和語言功能。</p><p>對於常見的目標組合，您可以使用目標捷徑建立階層式結構。 例如，使用 <code>ios()</code> 捷徑建立兩個 iOS 目標和上面所示的共享原始碼集：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ios</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// iOS device and simulator targets; iosMain and iosTest source sets</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>對於其他目標組合，請透過 <code>dependsOn</code> 關係連接原始碼集來<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-hierarchy.html#manual-configuration" target="_blank" rel="noreferrer">手動建立階層結構</a>。</p><p><img src="`+g+'" alt="Hierarchical structure"></p>',190)),n(h,{group:"build-script"},{default:l(()=>[n(t,{title:"Kotlin","group-key":"kotlin"},{default:l(()=>a[2]||(a[2]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"{")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    sourceSets"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"        val"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," desktopMain "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"by"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," creating"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"            dependsOn"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(commonMain)")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"        val"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," linuxX64Main "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"by"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," getting"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"            dependsOn"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(desktopMain)")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"        val"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," mingwX64Main "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"by"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," getting"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"            dependsOn"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(desktopMain)")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"        val"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," macosX64Main "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"by"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," getting"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"            dependsOn"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(desktopMain)")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),n(t,{title:"Groovy","group-key":"groovy"},{default:l(()=>a[3]||(a[3]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"kotlin {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    sourceSets {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        desktopMain {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            dependsOn(commonMain)")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        linuxX64Main {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            dependsOn(desktopMain)")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        mingwX64Main {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            dependsOn(desktopMain)")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        macosX64Main {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            dependsOn(desktopMain)")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),a[8]||(a[8]=e('<p>由於階層式專案結構，函式庫還可以為目標子集提供通用 API。 了解更多關於<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-share-on-platforms.html#share-code-in-libraries" target="_blank" rel="noreferrer">在函式庫中共享程式碼</a>的資訊。</p><h3 id="在階層式結構中利用原生函式庫" tabindex="-1">在階層式結構中利用原生函式庫 <a class="header-anchor" href="#在階層式結構中利用原生函式庫" aria-label="Permalink to &quot;在階層式結構中利用原生函式庫&quot;">​</a></h3><p>您可以在多個原生目標之間共享的原始碼集中使用平台相關函式庫，例如 Foundation、UIKit 和 POSIX。 這可以幫助您共享更多原生程式碼，而不受平台特定依賴項的限制。</p><p>無需額外步驟 – 一切都會自動完成。IntelliJ IDEA 將幫助您檢測可以在共享程式碼中使用的通用宣告。</p><p><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-share-on-platforms.html#connect-platform-specific-libraries" target="_blank" rel="noreferrer">了解更多關於使用平台相關函式庫的資訊</a>。</p><h3 id="僅指定一次依賴項" tabindex="-1">僅指定一次依賴項 <a class="header-anchor" href="#僅指定一次依賴項" aria-label="Permalink to &quot;僅指定一次依賴項&quot;">​</a></h3><p>從現在起，您應該只在共享原始碼集中指定一次依賴項，而不是在使用它的共享和平台特定原始碼集中指定相同函式庫的不同變體。</p>',7)),n(h,{group:"build-script"},{default:l(()=>[n(t,{title:"Kotlin","group-key":"kotlin"},{default:l(()=>a[4]||(a[4]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    sourceSets"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"        val"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," commonMain "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"by"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," getting"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"            dependencies"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"                implementation"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"org.jetbrains.kotlinx:kotlinx-coroutines-core:1.10.2"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),n(t,{title:"Groovy","group-key":"groovy"},{default:l(()=>a[5]||(a[5]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"kotlin {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    sourceSets {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        commonMain {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            dependencies {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"                implementation "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.10.2'")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),a[9]||(a[9]=e('<p>請勿使用帶有指定平台的後綴的 kotlinx 函式庫工件名稱，例如 <code>-common</code>、<code>-native</code> 或類似的名稱， 因為它們不再支援。而是使用函式庫基本工件名稱，在上面的範例中是 <code>kotlinx-coroutines-core</code>。</p><p>但是，此更改目前不影響：</p><ul><li><code>stdlib</code> 函式庫 – 從 Kotlin 1.4.0 開始，<a href="#dependency-on-the-standard-library-added-by-default">預設添加 <code>stdlib</code> 依賴項</a>。</li><li><code>kotlin.test</code> 函式庫 – 您仍然應該使用 <code>test-common</code> 和 <code>test-annotations-common</code>。這些依賴項將在以後處理。</li></ul><p>如果您只需要特定平台的依賴項，您仍然可以使用帶有 <code>-jvm</code> 或 <code>-js</code> 等後綴的標準和 kotlinx 函式庫的平台特定變體， 例如 <code>kotlinx-coroutines-core-jvm</code>。</p><p><a href="/zh-Hant/kotlin/gradle-configure-project#configure-dependencies">了解更多關於配置依賴項的資訊</a>。</p><h2 id="gradle-專案改進" tabindex="-1">Gradle 專案改進 <a class="header-anchor" href="#gradle-專案改進" aria-label="Permalink to &quot;Gradle 專案改進&quot;">​</a></h2><p>除了特定於 <a href="#kotlin-multiplatform">Kotlin 多平台</a>、<a href="#kotlin-jvm">Kotlin/JVM</a>、 <a href="#kotlin-native">Kotlin/Native</a> 和 <a href="#kotlin-js">Kotlin/JS</a> 的 Gradle 專案功能和改進之外， 還有一些適用於所有 Kotlin Gradle 專案的更改：</p><ul><li><a href="#dependency-on-the-standard-library-added-by-default">標準函式庫的依賴項現在預設添加</a></li><li><a href="#minimum-gradle-version-for-kotlin-projects">Kotlin 專案需要最新版本的 Gradle</a></li><li><a href="#improved-gradle-kts-support-in-the-ide">改進了 IDE 中對 Kotlin Gradle DSL 的支援</a></li></ul><h3 id="標準函式庫的依賴項現在預設添加" tabindex="-1">標準函式庫的依賴項現在預設添加 <a class="header-anchor" href="#標準函式庫的依賴項現在預設添加" aria-label="Permalink to &quot;標準函式庫的依賴項現在預設添加&quot;">​</a></h3><p>您不再需要在任何 Kotlin Gradle 專案（包括多平台專案）中宣告對 <code>stdlib</code> 函式庫的依賴項。 該依賴項是預設添加的。</p><p>自動添加的標準函式庫將與 Kotlin Gradle 外掛程式的版本相同，因為它們具有相同的版本控制。</p><p>對於平台特定的原始碼集，使用函式庫的相應平台特定變體，而通用標準函式庫則添加到其餘部分。 Kotlin Gradle 外掛程式將根據您的 Gradle 建置腳本的 <code>kotlinOptions.jvmTarget</code> <a href="/zh-Hant/kotlin/gradle-compiler-options">編譯器選項</a>選擇適當的 JVM 標準函式庫。</p><p><a href="/zh-Hant/kotlin/gradle-configure-project#dependency-on-the-standard-library">了解如何更改預設行為</a>。</p><h3 id="kotlin-專案的最低-gradle-版本" tabindex="-1">Kotlin 專案的最低 Gradle 版本 <a class="header-anchor" href="#kotlin-專案的最低-gradle-版本" aria-label="Permalink to &quot;Kotlin 專案的最低 Gradle 版本&quot;">​</a></h3><p>為了在您的 Kotlin 專案中享受新功能，請將 Gradle 更新到<a href="https://gradle.org/releases/" target="_blank" rel="noreferrer">最新版本</a>。 多平台專案需要 Gradle 6.0 或更高版本，而其他 Kotlin 專案適用於 Gradle 5.4 或更高版本。</p><h3 id="改進了-ide-中對-gradle-kts-的支援" tabindex="-1">改進了 IDE 中對 *.gradle.kts 的支援 <a class="header-anchor" href="#改進了-ide-中對-gradle-kts-的支援" aria-label="Permalink to &quot;改進了 IDE 中對 *.gradle.kts 的支援&quot;">​</a></h3><p>在 1.4.0 中，我們繼續改進 IDE 對 Gradle Kotlin DSL 腳本 (<code>*.gradle.kts</code> 檔案) 的支援。以下是新版本帶來的功能：</p><ul><li><p><em>顯式載入腳本配置</em> 以提高效能。以前，您對建置腳本所做的更改會自動在後台載入。 為了提高效能，我們在 1.4.0 中禁用了建置腳本配置的自動載入。現在，IDE 僅在您顯式應用更改時才載入它們。</p><p>在 Gradle 6.0 之前的版本中，您需要透過點擊編輯器中的 <strong>Load Configuration</strong> 來手動載入腳本配置。</p><p><img src="'+c+'" alt="*.gradle.kts – Load Configuration"></p><p>在 Gradle 6.0 及更高版本中，您可以透過點擊 <strong>Load Gradle Changes</strong> 或重新匯入 Gradle 專案來顯式應用更改。</p><p>我們在 IntelliJ IDEA 2020.1 中為 Gradle 6.0 及更高版本添加了另一個動作 – <strong>Load Script Configurations</strong>， 它載入腳本配置的更改，而無需更新整個專案。這比重新匯入整個專案花費的時間少得多。</p><p><img src="'+y+'" alt="*.gradle.kts – Load Script Changes and Load Gradle Changes"></p><p>對於新建立的腳本或首次使用新的 Kotlin 外掛程式開啟專案時，您也應該<strong>Load Script Configurations</strong>。</p><p>使用 Gradle 6.0 及更高版本，您現在可以一次載入所有腳本，而不是以前的單獨載入實作。 由於每個請求都需要執行 Gradle 配置階段，這對於大型 Gradle 專案來說可能資源密集。</p><p>目前，此類載入僅限於 <code>build.gradle.kts</code> 和 <code>settings.gradle.kts</code> 檔案 (請投票支持相關<a href="https://github.com/gradle/gradle/issues/12640" target="_blank" rel="noreferrer">問題</a>)。 要啟用 <code>init.gradle.kts</code> 或已應用<a href="https://docs.gradle.org/current/userguide/plugins.html#sec:script_plugins" target="_blank" rel="noreferrer">腳本外掛程式</a>的亮點顯示， 請使用舊機制 – 將它們添加到獨立腳本中。這些腳本的配置將在您需要時單獨載入。 您還可以為此類腳本啟用自動重新載入。</p><p><img src="'+F+`" alt="*.gradle.kts – Add to standalone scripts"></p></li><li><p><em>更好的錯誤報告</em>。以前，您只能在單獨的日誌檔案中查看 Gradle Daemon 的錯誤。現在， Gradle Daemon 直接返回有關錯誤的所有資訊，並將其顯示在 Build 工具視窗中。這為您節省了時間和精力。</p></li></ul><h2 id="標準函式庫" tabindex="-1">標準函式庫 <a class="header-anchor" href="#標準函式庫" aria-label="Permalink to &quot;標準函式庫&quot;">​</a></h2><p>以下是 Kotlin 1.4.0 中標準函式庫最顯著的變更列表：</p><ul><li><a href="#common-exception-processing-api">通用例外處理 API</a></li><li><a href="#new-functions-for-arrays-and-collections">陣列與集合的新函式</a></li><li><a href="#functions-for-string-manipulations">字串操作函式</a></li><li><a href="#bit-operations">位元操作</a></li><li><a href="#delegated-properties-improvements">委託屬性改進</a></li><li><a href="#converting-from-ktype-to-java-type">從 KType 轉換為 Java Type</a></li><li><a href="#proguard-configurations-for-kotlin-reflection">Kotlin 反射的 Proguard 配置</a></li><li><a href="#improving-the-existing-api">改進現有 API</a></li><li><a href="#module-info-descriptors-for-stdlib-artifacts">stdlib 工件的 module-info 描述符</a></li><li><a href="#deprecations">棄用</a></li><li><a href="#exclusion-of-the-deprecated-experimental-coroutines">棄用實驗性協程的排除</a></li></ul><h3 id="通用例外處理-api" tabindex="-1">通用例外處理 API <a class="header-anchor" href="#通用例外處理-api" aria-label="Permalink to &quot;通用例外處理 API&quot;">​</a></h3><p>以下 API 元素已移至通用函式庫：</p><ul><li><code>Throwable.stackTraceToString()</code> 擴展函式，它返回此 throwable 及其 堆疊追蹤的詳細描述，以及 <code>Throwable.printStackTrace()</code>，它將此描述列印到標準錯誤輸出。</li><li><code>Throwable.addSuppressed()</code> 函式，它讓您指定為了傳遞例外而被抑制的例外， 以及 <code>Throwable.suppressedExceptions</code> 屬性，它返回所有被抑制例外的列表。</li><li><code>@Throws</code> 註解，它列出當函式編譯為平台方法時（在 JVM 或原生平台上）將被檢查的例外型別。</li></ul><h3 id="陣列與集合的新函式" tabindex="-1">陣列與集合的新函式 <a class="header-anchor" href="#陣列與集合的新函式" aria-label="Permalink to &quot;陣列與集合的新函式&quot;">​</a></h3><h4 id="集合" tabindex="-1">集合 <a class="header-anchor" href="#集合" aria-label="Permalink to &quot;集合&quot;">​</a></h4><p>在 1.4.0 中，標準函式庫包含許多用於處理<strong>集合</strong>的有用函式：</p><ul><li><p><code>setOfNotNull()</code>，它從提供的引數中建立一個由所有非 null 項目組成的集合。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> set</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setOfNotNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>序列的 <code>shuffled()</code>。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> numbers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> until </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">asSequence</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> numbers.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">shuffled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">take</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//five random even numbers below 100</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><code>onEach()</code> 和 <code>flatMap()</code> 的 <code>*Indexed()</code> 對應函式。 它們應用於集合元素的運算具有元素索引作為參數。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;b&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;d&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onEachIndexed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        index, item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(index.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;:&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> item)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> list </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;kot&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;lin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;world&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> kotlin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> list.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">flatMapIndexed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { index, item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">              if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) item.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> emptyList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(kotlin)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><code>randomOrNull()</code>、<code>reduceOrNull()</code> 和 <code>reduceIndexedOrNull()</code> 的 <code>*OrNull()</code> 對應函式。 它們在空集合上返回 <code>null</code>。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> empty </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> emptyList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     empty.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reduceOrNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { a, b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     //empty.reduce { a, b -&gt; a + b }</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Exception: Empty collection can&#39;t be reduced.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><code>runningFold()</code>、其同義詞 <code>scan()</code> 和 <code>runningReduce()</code> 依序對集合元素應用給定操作， 類似於 <code>fold()</code> 和 <code>reduce()</code>；不同之處在於這些新函式返回中間結果的完整序列。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> numbers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mutableListOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> runningReduceSum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> numbers.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">runningReduce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { sum, item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> item }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> runningFoldSum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> numbers.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">runningFold</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { sum, item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> item }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(runningReduceSum.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(runningFoldSum.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><code>sumOf()</code> 接受一個選擇器函式並返回其在集合所有元素上的值總和。 <code>sumOf()</code> 可以產生 <code>Int</code>、<code>Long</code>、<code>Double</code>、<code>UInt</code> 和 <code>ULong</code> 型別的總和。在 JVM 上，<code>BigInteger</code> 和 <code>BigDecimal</code> 也可用。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OrderItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> price: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> count: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> order </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OrderItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        OrderItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Cake&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, price </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        OrderItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Coffee&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, price </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        OrderItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Tea&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, price </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> total </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> order.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sumOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.price </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> it.count } </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Double</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> order.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sumOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.count } </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Int</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;You&#39;ve ordered </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$count</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> items that cost </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$total</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> in total&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><code>min()</code> 和 <code>max()</code> 函式已重新命名為 <code>minOrNull()</code> 和 <code>maxOrNull()</code> 以符合 Kotlin 集合 API 中使用的命名約定。 函式名稱中的 <code>*OrNull</code> 後綴表示如果接收器集合為空，它將返回 <code>null</code>。這也適用於 <code>minBy()</code>、<code>maxBy()</code>、<code>minWith()</code>、<code>maxWith()</code> – 在 1.4 中，它們有 <code>*OrNull()</code> 同義詞。</p></li><li><p>新的 <code>minOf()</code> 和 <code>maxOf()</code> 擴展函式返回給定選擇器函式在集合項目上的最小值和最大值。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OrderItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> price </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, count: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> order </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OrderItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        OrderItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Cake&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, price </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        OrderItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Coffee&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, price </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        OrderItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Tea&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, price </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> highestPrice </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> order.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">maxOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.price }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;The most expensive item in the order costs </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$highestPrice</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>還有 <code>minOfWith()</code> 和 <code>maxOfWith()</code>，它們接受 <code>Comparator</code> 作為引數，以及所有四個函式的 <code>*OrNull()</code> 版本， 它們在空集合上返回 <code>null</code>。</p></li><li><p><code>flatMap</code> 和 <code>flatMapTo</code> 的新重載允許您使用返回型別不匹配接收器型別的轉換，即：</p><ul><li><code>Iterable</code>、<code>Array</code> 和 <code>Map</code> 上的 <code>Sequence</code> 轉換</li><li><code>Sequence</code> 上的 <code>Iterable</code> 轉換</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> list </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;kot&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;lin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lettersList </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> list.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">flatMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">asSequence</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lettersSeq </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> list.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">asSequence</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">flatMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }    </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lettersList)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lettersSeq.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><code>removeFirst()</code> 和 <code>removeLast()</code> 是用於從可變列表中刪除元素的捷徑，以及這些函式的 <code>*orNull()</code> 對應函式。</p></li></ul><h4 id="陣列" tabindex="-1">陣列 <a class="header-anchor" href="#陣列" aria-label="Permalink to &quot;陣列&quot;">​</a></h4><p>為了在使用不同容器型別時提供一致的體驗，我們還為<strong>陣列</strong>添加了新函式：</p><ul><li><code>shuffle()</code> 將陣列元素按隨機順序排列。</li><li><code>onEach()</code> 對每個陣列元素執行給定動作並返回陣列本身。</li><li><code>associateWith()</code> 和 <code>associateWithTo()</code> 以陣列元素作為鍵來建構映射。</li><li><code>reverse()</code> 用於陣列子範圍，反轉子範圍中元素的順序。</li><li><code>sortDescending()</code> 用於陣列子範圍，按降序對子範圍中的元素進行排序。</li><li><code>sort()</code> 和 <code>sortWith()</code> 用於陣列子範圍現在在通用函式庫中可用。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> language </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> letters </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> arrayOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;k&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;o&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;t&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;l&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;i&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;n&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fileExt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> letters.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { language </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> it }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filterNot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;aeuio&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">take</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">joinToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(prefix </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, separator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(language) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;kotlin&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fileExt) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;.kt&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    letters.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">shuffle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    letters.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reverse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    letters.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sortDescending</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(letters.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">contentToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [k, o, t, l, i, n]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>此外，還有用於 <code>CharArray</code>/<code>ByteArray</code> 和 <code>String</code> 之間轉換的新函式：</p><ul><li><code>ByteArray.decodeToString()</code> 和 <code>String.encodeToByteArray()</code></li><li><code>CharArray.concatToString()</code> 和 <code>String.toCharArray()</code></li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;kotlin&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> array </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toCharArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(array.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">concatToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="arraydeque" tabindex="-1">ArrayDeque <a class="header-anchor" href="#arraydeque" aria-label="Permalink to &quot;ArrayDeque&quot;">​</a></h4><p>我們還添加了 <code>ArrayDeque</code> 類別 – 一種雙端佇列的實作。 雙端佇列允許您在佇列的開頭或結尾以攤銷常數時間添加或刪除元素。 當您需要在程式碼中使用佇列或堆疊時，您可以預設使用雙端佇列。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> deque </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ArrayDeque</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    deque.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addFirst</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    deque.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addLast</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(deque) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [0, 1, 2, 3, 4]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(deque.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">first</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(deque.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">last</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 4</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    deque.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">removeFirst</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    deque.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">removeLast</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(deque) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [1, 2, 3]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>ArrayDeque</code> 實作在底層使用可調整大小的陣列：它將內容儲存在循環緩衝區（一個 <code>Array</code>）中， 並且僅在陣列滿時才調整其大小。</p><h3 id="字串操作函式" tabindex="-1">字串操作函式 <a class="header-anchor" href="#字串操作函式" aria-label="Permalink to &quot;字串操作函式&quot;">​</a></h3><p>1.4.0 中的標準函式庫包含多項字串操作 API 的改進：</p><ul><li><p><code>StringBuilder</code> 具有有用的新擴展函式：<code>set()</code>、<code>setRange()</code>、<code>deleteAt()</code>、<code>deleteRange()</code>、<code>appendRange()</code> 等等。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sb </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> StringBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Bye Kotlin 1.3.72&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        sb.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">deleteRange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        sb.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">insertRange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        sb.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">15</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;4&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        sb.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setRange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">17</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">19</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sb.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre></div></li><li><p><code>StringBuilder</code> 的一些現有函式在通用函式庫中可用。其中包括 <code>append()</code>、<code>insert()</code>、 <code>substring()</code>、<code>setLength()</code> 等。</p></li><li><p>新函式 <code>Appendable.appendLine()</code> 和 <code>StringBuilder.appendLine()</code> 已添加到通用函式庫。 它們取代了這些類別的僅限 JVM 的 <code>appendln()</code> 函式。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">buildString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        appendLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello,&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        appendLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;world&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><h3 id="位元操作" tabindex="-1">位元操作 <a class="header-anchor" href="#位元操作" aria-label="Permalink to &quot;位元操作&quot;">​</a></h3><p>新的位元操作函式：</p><ul><li><code>countOneBits()</code></li><li><code>countLeadingZeroBits()</code></li><li><code>countTrailingZeroBits()</code></li><li><code>takeHighestOneBit()</code></li><li><code>takeLowestOneBit()</code></li><li><code>rotateLeft()</code> 和 <code>rotateRight()</code> (實驗性)</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> number </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1010000&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(radix </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(number.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">countOneBits</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(number.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">countTrailingZeroBits</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(number.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">takeHighestOneBit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="委託屬性改進" tabindex="-1">委託屬性改進 <a class="header-anchor" href="#委託屬性改進" aria-label="Permalink to &quot;委託屬性改進&quot;">​</a></h3><p>在 1.4.0 中，我們新增了功能以改善您在 Kotlin 中使用委託屬性的體驗：</p><ul><li>現在屬性可以委託給另一個屬性。</li><li>新介面 <code>PropertyDelegateProvider</code> 有助於在單一宣告中建立委託提供者。</li><li><code>ReadWriteProperty</code> 現在擴展 <code>ReadOnlyProperty</code>，因此您可以同時將它們用於唯讀屬性。</li></ul><p>除了新的 API 之外，我們還進行了一些優化，以減少產生的位元組碼大小。這些優化在 <a href="https://blog.jetbrains.com/kotlin/2019/12/what-to-expect-in-kotlin-1-4-and-beyond/#delegated-properties" target="_blank" rel="noreferrer">這篇部落格文章</a>中有所描述。</p><p><a href="/zh-Hant/kotlin/delegated-properties">了解更多關於委託屬性的資訊</a>。</p><h3 id="從-ktype-轉換為-java-type" tabindex="-1">從 KType 轉換為 Java Type <a class="header-anchor" href="#從-ktype-轉換為-java-type" aria-label="Permalink to &quot;從 KType 轉換為 Java Type&quot;">​</a></h3><p>stdlib 中的新擴展屬性 <code>KType.javaType</code> (目前為實驗性) 可幫助您從 Kotlin 型別中獲取 <code>java.lang.reflect.Type</code> 而無需使用整個 <code>kotlin-reflect</code> 依賴項。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.reflect.javaType</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.reflect.typeOf</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalStdlibApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">inline</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reified</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">accessReifiedTypeArg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> kType </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> typeOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Kotlin type: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$kType</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Java type: \${kType.javaType}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalStdlibApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   accessReifiedTypeArg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // Kotlin type: kotlin.String</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // Java type: class java.lang.String</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   accessReifiedTypeArg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt;()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // Kotlin type: kotlin.collections.List&lt;kotlin.String&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // Java type: java.util.List&lt;java.lang.String&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="kotlin-反射的-proguard-配置" tabindex="-1">Kotlin 反射的 Proguard 配置 <a class="header-anchor" href="#kotlin-反射的-proguard-配置" aria-label="Permalink to &quot;Kotlin 反射的 Proguard 配置&quot;">​</a></h3><p>從 1.4.0 開始，我們已將 Kotlin 反射的 Proguard/R8 配置嵌入到 <code>kotlin-reflect.jar</code> 中。 有了這個，大多數使用 R8 或 Proguard 的 Android 專案應該都能與 kotlin-reflect 配合使用， 而無需任何額外配置。您不再需要複製貼上 kotlin-reflect 內部函式的 Proguard 規則。 但請注意，您仍然需要明確列出所有您將要反射的 API。</p><h3 id="改進現有-api" tabindex="-1">改進現有 API <a class="header-anchor" href="#改進現有-api" aria-label="Permalink to &quot;改進現有 API&quot;">​</a></h3><ul><li><p>幾個函式現在可在 null 接收器上工作，例如：</p><ul><li>字串上的 <code>toBoolean()</code></li><li>陣列上的 <code>contentEquals()</code>、<code>contentHashcode()</code>、<code>contentToString()</code></li></ul></li><li><p><code>Double</code> 和 <code>Float</code> 中的 <code>NaN</code>、<code>NEGATIVE_INFINITY</code> 和 <code>POSITIVE_INFINITY</code> 現在定義為 <code>const</code>，因此您可以將它們用作註解引數。</p></li><li><p><code>Double</code> 和 <code>Float</code> 中的新常數 <code>SIZE_BITS</code> 和 <code>SIZE_BYTES</code> 包含用於 以二進位形式表示型別實例的位元數和位元組數。</p></li><li><p><code>maxOf()</code> 和 <code>minOf()</code> 頂層函式可以接受可變數量的引數 (<code>vararg</code>)。</p></li></ul><h3 id="stdlib-工件的-module-info-描述符" tabindex="-1">stdlib 工件的 module-info 描述符 <a class="header-anchor" href="#stdlib-工件的-module-info-描述符" aria-label="Permalink to &quot;stdlib 工件的 module-info 描述符&quot;">​</a></h3><p>Kotlin 1.4.0 將 <code>module-info.java</code> 模組資訊新增到預設標準函式庫工件中。這使您可以將它們與 <a href="https://docs.oracle.com/en/java/javase/11/tools/jlink.html" target="_blank" rel="noreferrer">jlink 工具</a>一起使用， 該工具生成僅包含您的應用程式所需的平台模組的自訂 Java 執行時映像。 您已經可以使用 jlink 與 Kotlin 標準函式庫工件，但您必須使用單獨的工件來執行此操作 – 帶有「modular」分類器的那些 – 整個設定並不簡單。 在 Android 中，請確保您使用 Android Gradle 外掛程式版本 3.2 或更高版本，它可以正確處理帶有 module-info 的 jar 檔案。</p><h3 id="棄用" tabindex="-1">棄用 <a class="header-anchor" href="#棄用" aria-label="Permalink to &quot;棄用&quot;">​</a></h3><h4 id="double-和-float-的-toshort-和-tobyte" tabindex="-1">Double 和 Float 的 toShort() 和 toByte() <a class="header-anchor" href="#double-和-float-的-toshort-和-tobyte" aria-label="Permalink to &quot;Double 和 Float 的 toShort() 和 toByte()&quot;">​</a></h4><p>我們已棄用 <code>Double</code> 和 <code>Float</code> 上的 <code>toShort()</code> 和 <code>toByte()</code> 函式， 因為它們可能由於值範圍窄和變數大小較小而導致意外結果。</p><p>要將浮點數轉換為 <code>Byte</code> 或 <code>Short</code>，請使用兩步轉換：首先，將它們轉換為 <code>Int</code>，然後 再次轉換為目標型別。</p><h4 id="浮點數陣列上的-contains-、indexof-和-lastindexof" tabindex="-1">浮點數陣列上的 contains()、indexOf() 和 lastIndexOf() <a class="header-anchor" href="#浮點數陣列上的-contains-、indexof-和-lastindexof" aria-label="Permalink to &quot;浮點數陣列上的 contains()、indexOf() 和 lastIndexOf()&quot;">​</a></h4><p>我們已棄用 <code>FloatArray</code> 和 <code>DoubleArray</code> 的 <code>contains()</code>、<code>indexOf()</code> 和 <code>lastIndexOf()</code> 擴展函式， 因為它們使用 <a href="https://en.wikipedia.org/wiki/IEEE_754" target="_blank" rel="noreferrer">IEEE 754</a> 標準相等性， 這在某些邊角情況下與全序相等性相矛盾。有關詳細資訊，請參閱<a href="https://youtrack.jetbrains.com/issue/KT-28753" target="_blank" rel="noreferrer">此問題</a>。</p><h4 id="min-和-max-集合函式" tabindex="-1">min() 和 max() 集合函式 <a class="header-anchor" href="#min-和-max-集合函式" aria-label="Permalink to &quot;min() 和 max() 集合函式&quot;">​</a></h4><p>我們已棄用 <code>min()</code> 和 <code>max()</code> 集合函式，轉而使用 <code>minOrNull()</code> 和 <code>maxOrNull()</code>， 它們更恰當地反映了它們的行為 – 在空集合上返回 <code>null</code>。 有關詳細資訊，請參閱<a href="https://youtrack.jetbrains.com/issue/KT-38854" target="_blank" rel="noreferrer">此問題</a>。</p><h3 id="棄用實驗性協程的排除" tabindex="-1">棄用實驗性協程的排除 <a class="header-anchor" href="#棄用實驗性協程的排除" aria-label="Permalink to &quot;棄用實驗性協程的排除&quot;">​</a></h3><p><code>kotlin.coroutines.experimental</code> API 在 1.3.0 中已棄用，取而代之的是 kotlin.coroutines。 在 1.4.0 中，我們正在完成 <code>kotlin.coroutines.experimental</code> 的棄用週期，將其從標準函式庫中移除。 對於仍在 JVM 上使用它的用戶，我們提供了相容性工件 <code>kotlin-coroutines-experimental-compat.jar</code>， 其中包含所有實驗性協程 API。我們已將其發布到 Maven，並將其與標準函式庫一起包含在 Kotlin 發行版中。</p><h2 id="穩定-json-序列化" tabindex="-1">穩定 JSON 序列化 <a class="header-anchor" href="#穩定-json-序列化" aria-label="Permalink to &quot;穩定 JSON 序列化&quot;">​</a></h2><p>隨著 Kotlin 1.4.0 的發布，我們推出了 <a href="https://github.com/Kotlin/kotlinx.serialization" target="_blank" rel="noreferrer">kotlinx.serialization</a> 的第一個穩定版本 - 1.0.0-RC。現在我們很高興地宣告 <code>kotlinx-serialization-core</code> (以前稱為 <code>kotlinx-serialization-runtime</code>) 中的 JSON 序列化 API 穩定。其他序列化格式的函式庫仍處於實驗性階段，以及核心函式庫的一些高級部分。</p><p>我們對 JSON 序列化 API 進行了重大改進，使其更加一致且易於使用。從現在開始， 我們將繼續以向後相容的方式開發 JSON 序列化 API。 但是，如果您曾使用過以前的版本，在遷移到 1.0.0-RC 時，您將需要重寫部分程式碼。 為了幫助您完成此任務，我們還提供了 <strong><a href="https://github.com/Kotlin/kotlinx.serialization/blob/master/docs/serialization-guide.md" target="_blank" rel="noreferrer">Kotlin Serialization Guide</a></strong> – 這是 <code>kotlinx.serialization</code> 的完整文件集。它將引導您完成使用最重要的功能的過程， 並可以幫助您解決可能遇到的任何問題。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p><strong>注意</strong>：<code>kotlinx-serialization</code> 1.0.0-RC 僅適用於 Kotlin 編譯器 1.4。 較早的編譯器版本不相容。</p></div><h2 id="腳本與-repl" tabindex="-1">腳本與 REPL <a class="header-anchor" href="#腳本與-repl" aria-label="Permalink to &quot;腳本與 REPL&quot;">​</a></h2><p>在 1.4.0 中，Kotlin 中的腳本處理受益於多項功能和效能改進以及其他更新。 以下是一些關鍵變更：</p><ul><li><a href="#new-dependencies-resolution-api">新的依賴項解析 API</a></li><li><a href="#new-repl-api">新的 REPL API</a></li><li><a href="#compiled-scripts-cache">編譯腳本快取</a></li><li><a href="#artifacts-renaming">工件重新命名</a></li></ul><p>為了幫助您更熟悉 Kotlin 中的腳本編寫，我們準備了一個<a href="https://github.com/Kotlin/kotlin-script-examples" target="_blank" rel="noreferrer">範例專案</a>。 它包含標準腳本 (<code>*.main.kts</code>) 的範例以及 Kotlin Scripting API 和自定義腳本定義的使用範例。 請試用並使用我們的<a href="https://youtrack.jetbrains.com/issues/KT" target="_blank" rel="noreferrer">問題追蹤器</a>分享您的回饋。</p><h3 id="新的依賴項解析-api" tabindex="-1">新的依賴項解析 API <a class="header-anchor" href="#新的依賴項解析-api" aria-label="Permalink to &quot;新的依賴項解析 API&quot;">​</a></h3><p>在 1.4.0 中，我們引入了一個新的 API 用於解析外部依賴項 (例如 Maven 工件)，並提供了其實現。 此 API 在新工件 <code>kotlin-scripting-dependencies</code> 和 <code>kotlin-scripting-dependencies-maven</code> 中發布。 <code>kotlin-script-util</code> 函式庫中先前的依賴項解析功能現在已棄用。</p><h3 id="新的-repl-api" tabindex="-1">新的 REPL API <a class="header-anchor" href="#新的-repl-api" aria-label="Permalink to &quot;新的 REPL API&quot;">​</a></h3><p>新的實驗性 REPL API 現在是 Kotlin Scripting API 的一部分。在已發布的工件中也有其多種實作， 其中一些具有進階功能，例如程式碼補全。我們在 <a href="https://blog.jetbrains.com/kotlin/2020/05/kotlin-kernel-for-jupyter-notebook-v0-8/" target="_blank" rel="noreferrer">Kotlin Jupyter kernel</a> 中使用此 API，現在您可以在自己的自定義 shell 和 REPL 中試用它。</p><h3 id="編譯腳本快取" tabindex="-1">編譯腳本快取 <a class="header-anchor" href="#編譯腳本快取" aria-label="Permalink to &quot;編譯腳本快取&quot;">​</a></h3><p>Kotlin Scripting API 現在提供了實作編譯腳本快取的能力，顯著加速了未更改腳本的後續執行。 我們預設的進階腳本實作 <code>kotlin-main-kts</code> 已經有自己的快取。</p><h3 id="工件重新命名" tabindex="-1">工件重新命名 <a class="header-anchor" href="#工件重新命名" aria-label="Permalink to &quot;工件重新命名&quot;">​</a></h3><p>為了避免工件名稱混淆，我們已將 <code>kotlin-scripting-jsr223-embeddable</code> 和 <code>kotlin-scripting-jvm-host-embeddable</code> 重新命名為 <code>kotlin-scripting-jsr223</code> 和 <code>kotlin-scripting-jvm-host</code>。這些工件依賴於 <code>kotlin-compiler-embeddable</code> 工件，該工件遮蔽了捆綁的第三方函式庫以避免使用衝突。透過此重新命名，我們將 <code>kotlin-compiler-embeddable</code> (通常更安全) 的使用設為腳本工件的預設值。 如果由於某些原因您需要依賴未遮蔽的 <code>kotlin-compiler</code> 的工件，請使用帶有 <code>-unshaded</code> 後綴的工件版本， 例如 <code>kotlin-scripting-jsr223-unshaded</code>。請注意，此重新命名僅影響預期直接使用的腳本工件； 其他工件的名稱保持不變。</p><h2 id="遷移到-kotlin-1-4-0" tabindex="-1">遷移到 Kotlin 1.4.0 <a class="header-anchor" href="#遷移到-kotlin-1-4-0" aria-label="Permalink to &quot;遷移到 Kotlin 1.4.0&quot;">​</a></h2><p>Kotlin 外掛程式的遷移工具可幫助您將專案從早期版本的 Kotlin 遷移到 1.4.0。</p><p>只需將 Kotlin 版本更改為 <code>1.4.0</code> 並重新匯入您的 Gradle 或 Maven 專案。IDE 將隨後詢問您有關遷移的事宜。</p><p>如果您同意，它將運行遷移程式碼檢查，檢查您的程式碼並建議任何在 1.4.0 中無法運作或不建議使用的修正。</p><p><img src="`+u+'" alt="Run migration" width="300"></p><p>程式碼檢查具有不同的<a href="https://www.jetbrains.com/help/idea/configuring-inspection-severities.html" target="_blank" rel="noreferrer">嚴重性等級</a>， 以幫助您決定接受哪些建議以及忽略哪些建議。</p><p><img src="'+C+'" alt="Migration inspections"></p><p>Kotlin 1.4.0 是一個<a href="/zh-Hant/kotlin/kotlin-evolution-principles#language-and-tooling-releases">功能發布版本</a>， 因此可能會帶來語言上的不相容變更。在 <strong><a href="/zh-Hant/kotlin/compatibility-guide-14">Kotlin 1.4 相容性指南</a></strong> 中可以找到此類變更的詳細列表。</p>',94))])}const w=m(B,[["render",A]]);export{I as __pageData,w as default};
