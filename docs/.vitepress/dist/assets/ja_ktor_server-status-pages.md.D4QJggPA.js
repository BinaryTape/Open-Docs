import{_ as c,C as n,c as y,o as F,G as a,j as i,ag as m,w as e,a as t}from"./chunks/framework.Bksy39di.js";const B=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ja/ktor/server-status-pages.md","filePath":"ja/ktor/server-status-pages.md","lastUpdated":1755457140000}'),v={name:"ja/ktor/server-status-pages.md"};function b(f,s,C,S,x,P){const k=n("TopicTitle"),h=n("show-structure"),d=n("primary-label"),r=n("Links"),u=n("tldr"),g=n("link-summary"),l=n("code-block"),p=n("TabItem"),o=n("Tabs"),E=n("list");return F(),y("div",null,[a(k,{labelRef:"server-plugin",title:"ステータスページ"}),a(h,{for:"chapter",depth:"2"}),a(d,{ref:"server-plugin"},null,512),a(u,null,{default:e(()=>[s[3]||(s[3]=i("p",null,[i("b",null,"必須の依存関係"),t(": "),i("code",null,"io.ktor:ktor-server-status-pages")],-1)),s[4]||(s[4]=i("p",null,[i("b",null,"コード例"),t(": "),i("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/status-pages"}," status-pages ")],-1)),i("p",null,[i("b",null,[a(r,{href:"/ktor/server-native",summary:"KtorはKotlin/Nativeをサポートしており、追加のランタイムや仮想マシンなしでサーバーを実行できます。"},{default:e(()=>s[0]||(s[0]=[t("ネイティブサーバー")])),_:1}),s[1]||(s[1]=t("のサポート"))]),s[2]||(s[2]=t(": ✅ "))])]),_:1}),a(g,null,{default:e(()=>s[5]||(s[5]=[t(" StatusPages は、Ktorアプリケーションがスローされた例外やステータスコードに基づいて、あらゆる失敗状態に適切に応答できるようにします。 ")])),_:1}),s[18]||(s[18]=i("p",null,[i("a",{href:"https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-status-pages/io.ktor.server.plugins.statuspages/-status-pages.html",target:"_blank",rel:"noreferrer"},"StatusPages"),t("プラグインは、Ktorアプリケーションがスローされた例外やステータスコードに基づいて、あらゆる失敗状態に適切に"),i("a",{href:"./server-responses"},"応答"),t("できるようにします。")],-1)),s[19]||(s[19]=i("h2",{id:"add_dependencies",tabindex:"-1"},[t("依存関係の追加 "),i("a",{class:"header-anchor",href:"#add_dependencies","aria-label":'Permalink to "依存関係の追加 {id="add_dependencies"}"'},"​")],-1)),s[20]||(s[20]=i("p",null,[i("code",null,"StatusPages"),t("を使用するには、"),i("code",null,"ktor-server-status-pages"),t("アーティファクトをビルドスクリプトに含める必要があります。 ")],-1)),a(o,{group:"languages"},{default:e(()=>[a(p,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:e(()=>[a(l,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-server-status-pages:$ktor_version")'})]),_:1}),a(p,{title:"Gradle (Groovy)","group-key":"groovy"},{default:e(()=>[a(l,{lang:"Groovy",code:'            implementation "io.ktor:ktor-server-status-pages:$ktor_version"'})]),_:1}),a(p,{title:"Maven","group-key":"maven"},{default:e(()=>[a(l,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-server-status-pages-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),s[21]||(s[21]=i("h2",{id:"install_plugin",tabindex:"-1"},[t("StatusPagesのインストール "),i("a",{class:"header-anchor",href:"#install_plugin","aria-label":'Permalink to "StatusPagesのインストール {id="install_plugin"}"'},"​")],-1)),i("p",null,[s[7]||(s[7]=t(" アプリケーションに")),s[8]||(s[8]=i("code",null,"StatusPages",-1)),s[9]||(s[9]=t("プラグインを")),s[10]||(s[10]=i("a",{href:"#install"},"インストール",-1)),s[11]||(s[11]=t("するには、 指定された")),a(r,{href:"/ktor/server-modules",summary:"モジュールを使用すると、ルートをグループ化してアプリケーションを構造化できます。"},{default:e(()=>s[6]||(s[6]=[t("モジュール")])),_:1}),s[12]||(s[12]=t("の")),s[13]||(s[13]=i("code",null,"install",-1)),s[14]||(s[14]=t("関数に渡します。 以下のコードスニペットは、")),s[15]||(s[15]=i("code",null,"StatusPages",-1)),s[16]||(s[16]=t("をインストールする方法を示しています。 "))]),a(E,null,{default:e(()=>s[17]||(s[17]=[i("li",null,[i("code",null,"embeddedServer"),t("関数呼び出しの内部。 ")],-1),i("li",null,[i("code",null,"Application"),t("クラスの拡張関数である、明示的に定義された"),i("code",null,"module"),t("の内部。 ")],-1)])),_:1}),a(o,null,{default:e(()=>[a(p,{title:"embeddedServer"},{default:e(()=>[a(l,{lang:"kotlin",code:`            import io.ktor.server.engine.*
            import io.ktor.server.netty.*
            import io.ktor.server.application.*
            import io.ktor.server.plugins.statuspages.*

            fun main() {
                embeddedServer(Netty, port = 8080) {
                    install(StatusPages)
                    // ...
                }.start(wait = true)
            }`})]),_:1}),a(p,{title:"module"},{default:e(()=>[a(l,{lang:"kotlin",code:`            import io.ktor.server.application.*
            import io.ktor.server.plugins.statuspages.*
            // ...
            fun Application.module() {
                install(StatusPages)
                // ...
            }`})]),_:1})]),_:1}),s[22]||(s[22]=m(`<h2 id="configure" tabindex="-1">StatusPagesの設定 <a class="header-anchor" href="#configure" aria-label="Permalink to &quot;StatusPagesの設定 {id=&quot;configure&quot;}&quot;">​</a></h2><p><code>StatusPages</code>プラグインには、主に3つの設定オプションがあります。</p><ul><li><a href="#exceptions">例外</a>: マップされた例外クラスに基づいて応答を設定します</li><li><a href="#status">ステータス</a>: ステータスコード値に応答を設定します</li><li><a href="#status-file">ステータスファイル</a>: クラスパスからファイル応答を設定します</li></ul><h3 id="exceptions" tabindex="-1">例外 <a class="header-anchor" href="#exceptions" aria-label="Permalink to &quot;例外 {id=&quot;exceptions&quot;}&quot;">​</a></h3><p><code>exception</code>ハンドラーを使用すると、<code>Throwable</code>例外が発生した呼び出しを処理できます。最も基本的なケースでは、任意の例外に対して<code>500</code> HTTPステータスコードを設定できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(StatusPages) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    exception</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Throwable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; { call, cause </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;500: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$cause</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> , status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HttpStatusCode.InternalServerError)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>特定の例外をチェックし、必要なコンテンツで応答することもできます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(StatusPages) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    exception</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Throwable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; { call, cause </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cause </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AuthorizationException) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;403: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$cause</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> , status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HttpStatusCode.Forbidden)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;500: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$cause</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> , status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HttpStatusCode.InternalServerError)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="status" tabindex="-1">ステータス <a class="header-anchor" href="#status" aria-label="Permalink to &quot;ステータス {id=&quot;status&quot;}&quot;">​</a></h3><p><code>status</code>ハンドラーは、ステータスコードに基づいて特定のコンテンツで応答する機能を提供します。以下の例は、サーバーでリソースが見つからない場合（<code>404</code>ステータスコード）のリクエストに応答する方法を示しています。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(StatusPages) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpStatusCode.NotFound) { call, status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;404: Page Not Found&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> status)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="status-file" tabindex="-1">ステータスファイル <a class="header-anchor" href="#status-file" aria-label="Permalink to &quot;ステータスファイル {id=&quot;status-file&quot;}&quot;">​</a></h3><p><code>statusFile</code>ハンドラーを使用すると、ステータスコードに基づいてHTMLページを提供できます。プロジェクトの<code>resources</code>フォルダーに<code>error401.html</code>と<code>error402.html</code>というHTMLページが含まれているとします。この場合、<code>statusFile</code>を使用して<code>401</code>および<code>402</code>ステータスコードを次のように処理できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(StatusPages) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    statusFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpStatusCode.Unauthorized, HttpStatusCode.PaymentRequired, filePattern </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;error#.html&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>statusFile</code>ハンドラーは、設定されたステータスのリスト内で、<code>#</code>文字をステータスコードの値に置き換えます。</p><blockquote><p>完全な例は<a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/status-pages" target="_blank" rel="noreferrer">こちら</a>にあります: <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/status-pages" target="_blank" rel="noreferrer">status-pages</a>。</p></blockquote>`,16))])}const T=c(v,[["render",b]]);export{B as __pageData,T as default};
