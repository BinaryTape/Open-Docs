import{_ as a,a as e,b as i,c as n}from"./chunks/teamcity-idearunner.C9zA26A4.js";import{_ as l,c as r,o,ag as d}from"./chunks/framework.Bksy39di.js";const f=JSON.parse('{"title":"KotlinとTeamCityでの継続的インテグレーション","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/kotlin-and-ci.md","filePath":"ja/kotlin/kotlin-and-ci.md","lastUpdated":1754307826000}'),m={name:"ja/kotlin/kotlin-and-ci.md"};function h(s,t,p,c,_,k){return o(),r("div",null,t[0]||(t[0]=[d('<h1 id="kotlinとteamcityでの継続的インテグレーション" tabindex="-1">KotlinとTeamCityでの継続的インテグレーション <a class="header-anchor" href="#kotlinとteamcityでの継続的インテグレーション" aria-label="Permalink to &quot;KotlinとTeamCityでの継続的インテグレーション&quot;">​</a></h1><p>このページでは、Kotlinプロジェクトをビルドするために<a href="https://www.jetbrains.com/teamcity/" target="_blank" rel="noreferrer">TeamCity</a>を設定する方法を学びます。 TeamCityの詳細と基本については、インストール、基本設定などに関する情報が掲載されている<a href="https://www.jetbrains.com/teamcity/documentation/" target="_blank" rel="noreferrer">ドキュメントページ</a>をご確認ください。</p><p>Kotlinはさまざまなビルドツールで動作するため、Ant、Maven、Gradleなどの標準的なツールを使用している場合、Kotlinプロジェクトのセットアッププロセスは、これらのツールと統合される他の言語やライブラリと何ら変わりありません。 IntelliJ IDEAの内部ビルドシステムを使用する場合に、いくつかの小さな要件と違いがありますが、これはTeamCityでもサポートされています。</p><h2 id="gradle、maven、ant" tabindex="-1">Gradle、Maven、Ant <a class="header-anchor" href="#gradle、maven、ant" aria-label="Permalink to &quot;Gradle、Maven、Ant&quot;">​</a></h2><p>Ant、Maven、またはGradleを使用する場合、セットアッププロセスは簡単です。必要なのは、ビルドステップを定義することだけです。 たとえば、Gradleを使用している場合は、ステップ名やランナータイプで実行する必要があるGradleタスクなど、必要なパラメーターを定義するだけです。</p><img src="'+a+'" alt="Gradle Build Step" width="700"><p>Kotlinに必要なすべての依存関係はGradleファイルで定義されているため、Kotlinが正しく実行されるように特に他を設定する必要はありません。</p><p>AntまたはMavenを使用する場合も、同じ設定が適用されます。唯一の違いは、ランナータイプがそれぞれAntまたはMavenになることです。</p><h2 id="intellij-ideaビルドシステム" tabindex="-1">IntelliJ IDEAビルドシステム <a class="header-anchor" href="#intellij-ideaビルドシステム" aria-label="Permalink to &quot;IntelliJ IDEAビルドシステム&quot;">​</a></h2><p>IntelliJ IDEAビルドシステムをTeamCityで使用する場合は、IntelliJ IDEAが使用しているKotlinのバージョンが、TeamCityが実行しているバージョンと同じであることを確認してください。特定のバージョンのKotlinプラグインをダウンロードしてTeamCityにインストールする必要がある場合があります。</p><p>幸いなことに、ほとんどの手作業を処理するメタランナーがすでに利用可能です。TeamCityのメタランナーの概念に慣れていない場合は、<a href="https://www.jetbrains.com/help/teamcity/working-with-meta-runner.html" target="_blank" rel="noreferrer">ドキュメント</a>をご確認ください。これらは、プラグインを記述することなく、カスタムランナーを導入するための非常に簡単で強力な方法です。</p><h3 id="メタランナーをダウンロードしてインストールする" tabindex="-1">メタランナーをダウンロードしてインストールする <a class="header-anchor" href="#メタランナーをダウンロードしてインストールする" aria-label="Permalink to &quot;メタランナーをダウンロードしてインストールする&quot;">​</a></h3><p>Kotlin用メタランナーは<a href="https://github.com/jonnyzzz/Kotlin.TeamCity" target="_blank" rel="noreferrer">GitHub</a>で利用可能です。 そのメタランナーをダウンロードし、TeamCityのユーザーインターフェースからインポートします。</p><img src="'+e+'" alt="Meta-runner" width="700"><h3 id="kotlinコンパイラのフェッチステップを設定する" tabindex="-1">Kotlinコンパイラのフェッチステップを設定する <a class="header-anchor" href="#kotlinコンパイラのフェッチステップを設定する" aria-label="Permalink to &quot;Kotlinコンパイラのフェッチステップを設定する&quot;">​</a></h3><p>基本的に、このステップはステップ名と必要なKotlinのバージョンを定義することに限定されます。タグを使用できます。</p><img src="'+i+'" alt="Setup Kotlin Compiler" width="700"><p>ランナーは、IntelliJ IDEAプロジェクトからのパス設定に基づいて、プロパティ<code>system.path.macro.KOTLIN.BUNDLED</code>の値を正しいものに設定します。ただし、この値はTeamCityで定義する必要があり（任意の値に設定できます）、そのためシステム変数として定義する必要があります。</p><h3 id="kotlinコンパイルステップを設定する" tabindex="-1">Kotlinコンパイルステップを設定する <a class="header-anchor" href="#kotlinコンパイルステップを設定する" aria-label="Permalink to &quot;Kotlinコンパイルステップを設定する&quot;">​</a></h3><p>最後のステップは、標準のIntelliJ IDEAランナータイプを使用する、プロジェクトの実際のコンパイルを定義することです。</p><img src="'+n+'" alt="IntelliJ IDEA Runner" width="700"><p>これにより、プロジェクトはビルドされ、対応する成果物が生成されるはずです。</p><h2 id="その他のciサーバー" tabindex="-1">その他のCIサーバー <a class="header-anchor" href="#その他のciサーバー" aria-label="Permalink to &quot;その他のCIサーバー&quot;">​</a></h2><p>TeamCityとは異なる継続的インテグレーションツールを使用している場合でも、いずれかのビルドツール、またはコマンドラインツールの呼び出しをサポートしている限り、KotlinのコンパイルとCIプロセスの一部としての自動化は可能であるはずです。</p>',24)]))}const I=l(m,[["render",h]]);export{f as __pageData,I as default};
