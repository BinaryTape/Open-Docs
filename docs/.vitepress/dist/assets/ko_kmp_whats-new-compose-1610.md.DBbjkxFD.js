import{_ as a}from"./chunks/compose-1610-ios-magnifier.YMZtwDpq.js";import{_ as o,c as i,o as r,ag as l}from"./chunks/framework.Bksy39di.js";const f=JSON.parse('{"title":"Compose Multiplatform 1.6.10의 새로운 기능","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kmp/whats-new-compose-1610.md","filePath":"ko/kmp/whats-new-compose-1610.md","lastUpdated":1755516278000}'),t={name:"ko/kmp/whats-new-compose-1610.md"};function s(n,e,p,c,d,h){return r(),i("div",null,e[0]||(e[0]=[l('<h1 id="compose-multiplatform-1-6-10의-새로운-기능" tabindex="-1">Compose Multiplatform 1.6.10의 새로운 기능 <a class="header-anchor" href="#compose-multiplatform-1-6-10의-새로운-기능" aria-label="Permalink to &quot;Compose Multiplatform 1.6.10의 새로운 기능&quot;">​</a></h1><p>이번 기능 릴리스의 주요 내용은 다음과 같습니다.</p><ul><li><a href="#breaking-change-new-compose-compiler-gradle-plugin">호환성 변경: 새 Compose 컴파일러 Gradle 플러그인</a></li><li><a href="#support-for-multimodule-projects-with-compose-multiplatform-resources">Compose Multiplatform 리소스가 포함된 멀티모듈 프로젝트 지원</a></li><li><a href="#experimental-navigation-library">실험적 내비게이션 라이브러리</a></li><li><a href="#lifecycle-library">실험적 공통 ViewModel을 포함한 생명주기 라이브러리</a></li><li><a href="#known-issue-missingresourceexception">알려진 문제: MissingResourceException</a></li></ul><p>이 릴리스의 전체 변경 목록은 <a href="./https://github.com/JetBrains/compose-multiplatform/blob/master/CHANGELOG#1610-may-2024">GitHub에서 확인하세요</a>.</p><h2 id="의존성" tabindex="-1">의존성 <a class="header-anchor" href="#의존성" aria-label="Permalink to &quot;의존성&quot;">​</a></h2><ul><li>Gradle 플러그인 <code>org.jetbrains.compose</code>, 버전 1.6.10. Jetpack Compose 라이브러리 기반: <ul><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-compiler#1.5.14" target="_blank" rel="noreferrer">Compiler 1.5.14</a></li><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-runtime#1.6.7" target="_blank" rel="noreferrer">Runtime 1.6.7</a></li><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-ui#1.6.7" target="_blank" rel="noreferrer">UI 1.6.7</a></li><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-foundation#1.6.7" target="_blank" rel="noreferrer">Foundation 1.6.7</a></li><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-material#1.6.7" target="_blank" rel="noreferrer">Material 1.6.7</a></li><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-material3#1.2.1" target="_blank" rel="noreferrer">Material3 1.2.1</a></li></ul></li><li>Lifecycle 라이브러리 <code>org.jetbrains.androidx.lifecycle:lifecycle-*:2.8.0</code>. <a href="https://developer.android.com/jetpack/androidx/releases/lifecycle#2.8.0" target="_blank" rel="noreferrer">Jetpack Lifecycle 2.8.0</a> 기반.</li><li>Navigation 라이브러리 <code>org.jetbrains.androidx.navigation:navigation-*:2.7.0-alpha07</code>. <a href="https://developer.android.com/jetpack/androidx/releases/navigation#2.7.7" target="_blank" rel="noreferrer">Jetpack Navigation 2.7.7</a> 기반.</li></ul><h2 id="호환성-변경-새-compose-컴파일러-gradle-플러그인" tabindex="-1">호환성 변경: 새 Compose 컴파일러 Gradle 플러그인 <a class="header-anchor" href="#호환성-변경-새-compose-컴파일러-gradle-플러그인" aria-label="Permalink to &quot;호환성 변경: 새 Compose 컴파일러 Gradle 플러그인&quot;">​</a></h2><p>Kotlin 2.0.0부터 Compose Multiplatform은 새 Compose 컴파일러 Gradle 플러그인을 필요로 합니다. 자세한 내용은 <a href="./compose-compiler#migrating-a-compose-multiplatform-project">마이그레이션 가이드</a>를 참조하세요.</p><h2 id="모든-플랫폼" tabindex="-1">모든 플랫폼 <a class="header-anchor" href="#모든-플랫폼" aria-label="Permalink to &quot;모든 플랫폼&quot;">​</a></h2><h3 id="리소스" tabindex="-1">리소스 <a class="header-anchor" href="#리소스" aria-label="Permalink to &quot;리소스&quot;">​</a></h3><h4 id="안정적인-리소스-라이브러리" tabindex="-1">안정적인 리소스 라이브러리 <a class="header-anchor" href="#안정적인-리소스-라이브러리" aria-label="Permalink to &quot;안정적인 리소스 라이브러리&quot;">​</a></h4><p><a href="./compose-multiplatform-resources">리소스 라이브러리 API</a>의 대부분은 이제 안정적이라고 간주됩니다.</p><h4 id="compose-multiplatform-리소스가-포함된-멀티모듈-프로젝트-지원" tabindex="-1">Compose Multiplatform 리소스가 포함된 멀티모듈 프로젝트 지원 <a class="header-anchor" href="#compose-multiplatform-리소스가-포함된-멀티모듈-프로젝트-지원" aria-label="Permalink to &quot;Compose Multiplatform 리소스가 포함된 멀티모듈 프로젝트 지원&quot;">​</a></h4><p>Compose Multiplatform 1.6.10부터 어떤 Gradle 모듈과 어떤 소스 세트에도 리소스를 저장할 수 있으며, 리소스를 포함한 프로젝트와 라이브러리를 게시할 수 있습니다.</p><p>멀티모듈 지원을 활성화하려면 프로젝트를 Kotlin 2.0.0 이상 버전과 Gradle 7.6 이상 버전으로 업데이트하세요.</p><h4 id="멀티플랫폼-리소스에-대한-구성-dsl" tabindex="-1">멀티플랫폼 리소스에 대한 구성 DSL <a class="header-anchor" href="#멀티플랫폼-리소스에-대한-구성-dsl" aria-label="Permalink to &quot;멀티플랫폼 리소스에 대한 구성 DSL&quot;">​</a></h4><p>이제 프로젝트에서 <code>Res</code> 클래스 생성을 미세 조정할 수 있습니다: 클래스의 모달리티와 할당된 패키지를 변경하고, 항상, 절대 또는 리소스 라이브러리에 대한 명시적 의존성이 있을 때만 생성할지 여부와 같은 생성 조건을 선택할 수 있습니다.</p><p>자세한 내용은 <a href="./compose-multiplatform-resources-usage#customizing-accessor-class-generation">문서 섹션</a>을 참조하세요.</p><h4 id="리소스-uri-생성을-위한-공개-함수" tabindex="-1">리소스 URI 생성을 위한 공개 함수 <a class="header-anchor" href="#리소스-uri-생성을-위한-공개-함수" aria-label="Permalink to &quot;리소스 URI 생성을 위한 공개 함수&quot;">​</a></h4><p>새 <code>getUri()</code> 함수를 사용하면 플랫폼 종속적인 리소스 URI를 외부 라이브러리에 전달하여 파일에 직접 액세스할 수 있도록 합니다. 자세한 내용은 <a href="./compose-multiplatform-resources-usage#accessing-multiplatform-resources-from-external-libraries">문서</a>를 참조하세요.</p><h4 id="문자열-리소스-복수형" tabindex="-1">문자열 리소스 복수형 <a class="header-anchor" href="#문자열-리소스-복수형" aria-label="Permalink to &quot;문자열 리소스 복수형&quot;">​</a></h4><p>이제 다른 멀티플랫폼 문자열 리소스와 함께 복수형(수량 문자열)을 정의할 수 있습니다. 자세한 내용은 <a href="./compose-multiplatform-resources-usage#plurals">문서</a>를 참조하세요.</p><h4 id="세-글자-로케일-지원" tabindex="-1">세 글자 로케일 지원 <a class="header-anchor" href="#세-글자-로케일-지원" aria-label="Permalink to &quot;세 글자 로케일 지원&quot;">​</a></h4><p><a href="./compose-multiplatform-resources-setup#language-and-regional-qualifiers">언어 한정자</a>는 이제 로케일에 대해 알파-3 (ISO 639-2) 코드를 지원합니다.</p><h4 id="이미지-및-폰트를-위한-실험적-바이트-배열-함수" tabindex="-1">이미지 및 폰트를 위한 실험적 바이트 배열 함수 <a class="header-anchor" href="#이미지-및-폰트를-위한-실험적-바이트-배열-함수" aria-label="Permalink to &quot;이미지 및 폰트를 위한 실험적 바이트 배열 함수&quot;">​</a></h4><p>폰트와 이미지를 바이트 배열로 가져오는 두 가지 함수를 시험해 볼 수 있습니다: <code>getDrawableResourceBytes()</code> 및 <code>getFontResourceBytes()</code>. 이 함수들은 서드파티 라이브러리에서 멀티플랫폼 리소스에 액세스하는 데 도움이 되도록 고안되었습니다.</p><p>자세한 내용은 <a href="https://github.com/JetBrains/compose-multiplatform/pull/4651" target="_blank" rel="noreferrer">풀 리퀘스트</a>를 참조하세요.</p><h3 id="실험적-내비게이션-라이브러리" tabindex="-1">실험적 내비게이션 라이브러리 <a class="header-anchor" href="#실험적-내비게이션-라이브러리" aria-label="Permalink to &quot;실험적 내비게이션 라이브러리&quot;">​</a></h3><p>Jetpack Compose 기반의 공통 내비게이션 라이브러리가 이제 사용할 수 있습니다. 자세한 내용은 <a href="./compose-navigation-routing">문서</a>를 참조하세요.</p><p>이 버전의 주요 제한 사항:</p><ul><li><a href="https://developer.android.com/guide/navigation/design/deep-link" target="_blank" rel="noreferrer">딥 링크</a>(처리 또는 추적)는 아직 지원되지 않습니다.</li><li><a href="https://developer.android.com/develop/ui/compose/libraries#handling_the_system_back_button" target="_blank" rel="noreferrer"><code>BackHandler</code> 함수</a> 및 <a href="https://developer.android.com/guide/navigation/custom-back/predictive-back-gesture" target="_blank" rel="noreferrer">예측형 뒤로가기 제스처</a>는 Android에서만 지원됩니다.</li></ul><h3 id="생명주기-라이브러리" tabindex="-1">생명주기 라이브러리 <a class="header-anchor" href="#생명주기-라이브러리" aria-label="Permalink to &quot;생명주기 라이브러리&quot;">​</a></h3><p>Jetpack Lifecycle 기반의 공통 생명주기 라이브러리가 이제 사용할 수 있습니다. 자세한 내용은 <a href="./compose-lifecycle">문서</a>를 참조하세요.</p><p>이 라이브러리는 주로 공통 내비게이션 기능을 지원하기 위해 도입되었지만, 실험적인 크로스 플랫폼 <code>ViewModel</code> 구현도 제공하며, 프로젝트에 구현할 수 있는 공통 <code>LifecycleOwner</code> 인터페이스도 포함합니다.</p><p>Compose Multiplatform은 또한 일반적인 <code>ViewModelStoreOwner</code> 구현도 제공합니다.</p><h3 id="kotlin-2-0-0-지원" tabindex="-1">Kotlin 2.0.0 지원 <a class="header-anchor" href="#kotlin-2-0-0-지원" aria-label="Permalink to &quot;Kotlin 2.0.0 지원&quot;">​</a></h3><p>Kotlin 2.0.0은 Compose 컴파일러의 새 Gradle 플러그인과 함께 출시되었습니다. 최신 컴파일러 버전과 함께 Compose Multiplatform을 사용하려면 프로젝트의 모듈에 플러그인을 적용하세요 (자세한 내용은 <a href="./compose-compiler#migrating-a-compose-multiplatform-project">마이그레이션 가이드</a>를 참조하세요).</p><h2 id="데스크톱" tabindex="-1">데스크톱 <a class="header-anchor" href="#데스크톱" aria-label="Permalink to &quot;데스크톱&quot;">​</a></h2><h3 id="basictextfield2의-기본-지원" tabindex="-1">BasicTextField2의 기본 지원 <a class="header-anchor" href="#basictextfield2의-기본-지원" aria-label="Permalink to &quot;BasicTextField2의 기본 지원&quot;">​</a></h3><p><code>BasicTextField2</code> Compose 컴포넌트는 이제 데스크톱 대상에 대해 기본 수준에서 지원됩니다. 프로젝트에서 반드시 필요하거나 테스트를 위해 사용하되, 발견되지 않은 예외 상황이 있을 수 있다는 점을 명심하세요. 예를 들어, <code>BasicTextField2</code>는 현재 IME 이벤트를 지원하지 않으므로, 중국어, 일본어, 한국어에 대한 가상 키보드를 사용할 수 없습니다.</p><p>컴포넌트에 대한 전체 지원 및 다른 플랫폼 지원은 Compose Multiplatform 1.7.0 릴리스에 예정되어 있습니다.</p><h3 id="dialogwindow에-대한-alwaysontop-플래그" tabindex="-1">DialogWindow에 대한 alwaysOnTop 플래그 <a class="header-anchor" href="#dialogwindow에-대한-alwaysontop-플래그" aria-label="Permalink to &quot;DialogWindow에 대한 alwaysOnTop 플래그&quot;">​</a></h3><p>대화창이 덮어쓰여지는 것을 방지하기 위해 이제 <code>DialogWindow</code> 컴포저블에 <code>alwaysOnTop</code> 플래그를 사용할 수 있습니다.</p><p>자세한 내용은 <a href="https://github.com/JetBrains/compose-multiplatform-core/pull/1120" target="_blank" rel="noreferrer">풀 리퀘스트</a>를 참조하세요.</p><h2 id="ios" tabindex="-1">iOS <a class="header-anchor" href="#ios" aria-label="Permalink to &quot;iOS&quot;">​</a></h2><h3 id="접근성-지원-개선-사항" tabindex="-1">접근성 지원 개선 사항 <a class="header-anchor" href="#접근성-지원-개선-사항" aria-label="Permalink to &quot;접근성 지원 개선 사항&quot;">​</a></h3><p>이번 릴리스에서:</p><ul><li>다이얼로그 및 팝업이 접근성 기능과 제대로 통합되었습니다.</li><li><code>UIKitView</code> 및 <code>UIKitViewController</code>를 사용하여 생성된 상호 운용 뷰는 이제 접근성 서비스에서 접근 가능합니다.</li><li><code>LiveRegion</code> 시맨틱이 접근성 API에서 지원됩니다.</li><li><a href="https://github.com/JetBrains/compose-multiplatform-core/pull/1169" target="_blank" rel="noreferrer">접근성 스크롤링</a>이 지원됩니다.</li><li><code>HapticFeedback</code>이 지원됩니다.</li></ul><h3 id="ios-17-이상을-위한-선택-컨테이너-돋보기" tabindex="-1">iOS 17 이상을 위한 선택 컨테이너 돋보기 <a class="header-anchor" href="#ios-17-이상을-위한-선택-컨테이너-돋보기" aria-label="Permalink to &quot;iOS 17 이상을 위한 선택 컨테이너 돋보기&quot;">​</a></h3><p>iOS의 Compose Multiplatform 선택 컨테이너는 이제 네이티브 돋보기 도구를 에뮬레이트합니다.</p><p><img src="'+a+`" alt="텍스트 돋보기가 활성화된 iPhone 채팅 앱 스크린샷" width="390"></p><h3 id="다이얼로그-중앙-정렬을-위한-소프트웨어-키보드-인셋" tabindex="-1">다이얼로그 중앙 정렬을 위한 소프트웨어 키보드 인셋 <a class="header-anchor" href="#다이얼로그-중앙-정렬을-위한-소프트웨어-키보드-인셋" aria-label="Permalink to &quot;다이얼로그 중앙 정렬을 위한 소프트웨어 키보드 인셋&quot;">​</a></h3><p><code>Dialog</code> 컴포저블의 동작이 이제 Android와 정렬됩니다: 소프트웨어 키보드가 화면에 나타날 때, 애플리케이션 창의 유효 높이를 고려하여 다이얼로그가 중앙에 정렬됩니다. <code>DialogProperties.useSoftwareKeyboardInset</code> 속성을 사용하여 이 기능을 비활성화하는 옵션이 있습니다.</p><h2 id="웹" tabindex="-1">웹 <a class="header-anchor" href="#웹" aria-label="Permalink to &quot;웹&quot;">​</a></h2><h3 id="kotlin-wasm-알파-지원" tabindex="-1">Kotlin/Wasm 알파 지원 <a class="header-anchor" href="#kotlin-wasm-알파-지원" aria-label="Permalink to &quot;Kotlin/Wasm 알파 지원&quot;">​</a></h3><p>웹용 실험적 Compose Multiplatform은 이제 알파 버전입니다:</p><ul><li>대부분의 웹 기능은 데스크톱용 Compose Multiplatform을 미러링합니다.</li><li>팀은 웹 플랫폼을 릴리스하는 데 전념하고 있습니다.</li><li>다음 단계는 대부분의 컴포넌트에 대한 철저한 브라우저 적응입니다.</li></ul><p><a href="./quickstart">첫 번째 앱 튜토리얼</a>을 따라 공유 UI 코드로 웹 앱을 설정하고 실행하는 방법을 확인하세요.</p><h3 id="기본-ime-키보드-지원" tabindex="-1">기본 IME 키보드 지원 <a class="header-anchor" href="#기본-ime-키보드-지원" aria-label="Permalink to &quot;기본 IME 키보드 지원&quot;">​</a></h3><p>Compose Multiplatform의 웹 대상은 이제 가상 (IME) 키보드에 대한 기본 지원을 제공합니다.</p><h2 id="gradle-플러그인" tabindex="-1">Gradle 플러그인 <a class="header-anchor" href="#gradle-플러그인" aria-label="Permalink to &quot;Gradle 플러그인&quot;">​</a></h2><h3 id="macos-최소-버전-수정-가능성" tabindex="-1">macOS 최소 버전 수정 가능성 <a class="header-anchor" href="#macos-최소-버전-수정-가능성" aria-label="Permalink to &quot;macOS 최소 버전 수정 가능성&quot;">​</a></h3><p>이전 버전에서는 Intel 버전을 포함하지 않고는 macOS 앱을 App Store에 업로드할 수 없었습니다. 이제 플랫폼별 Compose Multiplatform 옵션 중에서 앱의 최소 macOS 버전을 설정할 수 있습니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compose.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">desktop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        nativeDistributions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            macOS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                minimumSystemVersion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;12.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>자세한 내용은 <a href="https://github.com/JetBrains/compose-multiplatform/pull/4271" target="_blank" rel="noreferrer">풀 리퀘스트</a>를 참조하세요.</p><h3 id="proguard-지원을-통한-uber-jar-생성-옵션" tabindex="-1">Proguard 지원을 통한 Uber JAR 생성 옵션 <a class="header-anchor" href="#proguard-지원을-통한-uber-jar-생성-옵션" aria-label="Permalink to &quot;Proguard 지원을 통한 Uber JAR 생성 옵션&quot;">​</a></h3><p>이제 ProGuard Gradle 태스크를 사용하여 Uber JAR (애플리케이션 및 모든 의존성의 JAR를 포함하는 복합 패키지)을 생성할 수 있습니다.</p><p>자세한 내용은 <a href="./compose-native-distribution#minification-and-obfuscation">축소 및 난독화</a> 가이드를 참조하세요.</p><h3 id="알려진-문제-missingresourceexception" tabindex="-1">알려진 문제: MissingResourceException <a class="header-anchor" href="#알려진-문제-missingresourceexception" aria-label="Permalink to &quot;알려진 문제: MissingResourceException&quot;">​</a></h3><p>Kotlin 1.9.x에서 2.0.0으로 (또는 그 반대로) 전환한 후 <code>org.jetbrains.compose.resources.MissingResourceException: Missing resource with path: ...</code> 오류가 발생할 수 있습니다. 이를 해결하려면 프로젝트의 모든 <code>build</code> 디렉터리를 삭제하세요. 여기에는 프로젝트의 루트 및 모듈 디렉터리에 있는 디렉터리가 포함됩니다.</p>`,70)]))}const k=o(t,[["render",s]]);export{f as __pageData,k as default};
