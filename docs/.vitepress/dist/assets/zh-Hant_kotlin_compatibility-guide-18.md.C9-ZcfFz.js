import{_ as e,c as t,o as r,ag as n}from"./chunks/framework.Bksy39di.js";const d=JSON.parse('{"title":"Kotlin 1.8 相容性指南","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/compatibility-guide-18.md","filePath":"zh-Hant/kotlin/compatibility-guide-18.md","lastUpdated":1754307826000}'),a={name:"zh-Hant/kotlin/compatibility-guide-18.md"};function l(s,o,i,c,p,g){return r(),t("div",null,o[0]||(o[0]=[n('<h1 id="kotlin-1-8-相容性指南" tabindex="-1">Kotlin 1.8 相容性指南 <a class="header-anchor" href="#kotlin-1-8-相容性指南" aria-label="Permalink to &quot;Kotlin 1.8 相容性指南&quot;">​</a></h1><p><em><a href="/zh-Hant/kotlin/kotlin-evolution-principles">保持語言現代化</a></em> 和 <em><a href="/zh-Hant/kotlin/kotlin-evolution-principles">舒適的更新</a></em> 是 Kotlin 語言設計中的基本原則。前者指出，阻礙語言演進的結構應被移除，而後者則說明，此移除應事先充分溝通，以使程式碼遷移盡可能順暢。</p><p>儘管大多數語言變更已透過其他管道（例如更新變更日誌或編譯器警告）宣布，但本文總結了所有變更，為從 Kotlin 1.7 遷移到 Kotlin 1.8 提供了完整的參考。</p><h2 id="基本術語" tabindex="-1">基本術語 <a class="header-anchor" href="#基本術語" aria-label="Permalink to &quot;基本術語&quot;">​</a></h2><p>本文中我們介紹了幾種相容性：</p><ul><li><em>原始碼</em>：原始碼不相容變更會使過去正常編譯（沒有錯誤或警告）的程式碼不再能夠編譯</li><li><em>二進位</em>：如果互換兩個二進位成品不會導致載入或連結錯誤，則稱其為二進位相容</li><li><em>行為</em>：如果相同的程式在應用變更前後表現出不同的行為，則稱該變更為行為不相容</li></ul><p>請記住，這些定義僅針對純 Kotlin 程式碼。從其他語言（例如 Java）的角度來看 Kotlin 程式碼的相容性不在本文的範圍之內。</p><h2 id="語言" tabindex="-1">語言 <a class="header-anchor" href="#語言" aria-label="Permalink to &quot;語言&quot;">​</a></h2><h3 id="禁止將父類別呼叫委派給抽象父類別成員" tabindex="-1">禁止將父類別呼叫委派給抽象父類別成員 <a class="header-anchor" href="#禁止將父類別呼叫委派給抽象父類別成員" aria-label="Permalink to &quot;禁止將父類別呼叫委派給抽象父類別成員&quot;">​</a></h3><blockquote><p><strong>Issues</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-45508" target="_blank" rel="noreferrer">KT-45508</a>, <a href="https://youtrack.jetbrains.com/issue/KT-49017" target="_blank" rel="noreferrer">KT-49017</a>, <a href="https://youtrack.jetbrains.com/issue/KT-38078" target="_blank" rel="noreferrer">KT-38078</a></p><p><strong>Component</strong>: 核心語言</p><p><strong>Incompatible change type</strong>: 原始碼</p><p><strong>Short summary</strong>: Kotlin 將會報告編譯錯誤，當明確或隱式的父類別呼叫被委派給父類別的 <em>抽象</em> 成員時，即使父介面中有預設實作</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.5.20: 當使用未覆寫所有抽象成員的非抽象類別時，報告警告</li><li>1.7.0: 如果父類別呼叫實際上存取了父類別中的抽象成員，則報告警告</li><li>1.7.0: 如果啟用 <code>-Xjvm-default=all</code> 或 <code>-Xjvm-default=all-compatibility</code> 相容模式，則在所有受影響的情況下報告錯誤；在漸進模式下報告錯誤</li><li>1.8.0: 在宣告一個具體類別，其中包含來自父類別的未覆寫抽象方法，以及 <code>Any</code> 方法的父類別呼叫在父類別中被覆寫為抽象的情況下報告錯誤</li><li>1.9.0: 在所有受影響的情況下報告錯誤，包括明確的父類別呼叫一個來自父類別的抽象方法</li></ul></blockquote><h3 id="在-when-帶主題的語句中棄用令人困惑的語法" tabindex="-1">在 when 帶主題的語句中棄用令人困惑的語法 <a class="header-anchor" href="#在-when-帶主題的語句中棄用令人困惑的語法" aria-label="Permalink to &quot;在 when 帶主題的語句中棄用令人困惑的語法&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.com/issue/KT-48385" target="_blank" rel="noreferrer">KT-48385</a></p><p><strong>Component</strong>: 核心語言</p><p><strong>Incompatible change type</strong>: 原始碼</p><p><strong>Short summary</strong>: Kotlin 1.6 棄用了一些在 <code>when</code> 條件表達式中令人困惑的語法結構</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.6.20: 對受影響的表達式引入棄用警告</li><li>1.8.0: 將此警告提升為錯誤，可使用 <code>-XXLanguage:-ProhibitConfusingSyntaxInWhenBranches</code> 暫時恢復到 1.8 之前的行為</li><li>&gt;= 1.9: 將一些棄用的結構重新用於新的語言功能</li></ul></blockquote><h3 id="防止不同數值型別之間的隱式強制轉換" tabindex="-1">防止不同數值型別之間的隱式強制轉換 <a class="header-anchor" href="#防止不同數值型別之間的隱式強制轉換" aria-label="Permalink to &quot;防止不同數值型別之間的隱式強制轉換&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.com/issue/KT-48645" target="_blank" rel="noreferrer">KT-48645</a></p><p><strong>Component</strong>: Kotlin/JVM</p><p><strong>Incompatible change type</strong>: 行為</p><p><strong>Short summary</strong>: Kotlin 將避免自動將數值轉換為基本數值型別，在語義上只需要將其向下轉換為該型別的情況</p><p><strong>Deprecation cycle</strong>:</p><ul><li>&lt; 1.5.30: 在所有受影響的情況下採用舊行為</li><li>1.5.30: 修復生成屬性委派存取器中的向下轉換行為，可使用 <code>-Xuse-old-backend</code> 暫時恢復到 1.5.30 之前的修復行為</li><li>&gt;= 1.9: 在其他受影響的情況下修復向下轉換行為</li></ul></blockquote><h3 id="讓密封類別的私有建構子真正私有化" tabindex="-1">讓密封類別的私有建構子真正私有化 <a class="header-anchor" href="#讓密封類別的私有建構子真正私有化" aria-label="Permalink to &quot;讓密封類別的私有建構子真正私有化&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.com/issue/KT-44866" target="_blank" rel="noreferrer">KT-44866</a></p><p><strong>Component</strong>: 核心語言</p><p><strong>Incompatible change type</strong>: 原始碼</p><p><strong>Short summary</strong>: 在放寬密封類別的繼承者在專案結構中宣告位置的限制後，密封類別建構子的預設可見性變為 protected。然而，直到 1.8 版本，Kotlin 仍然允許在這些類別的範圍之外呼叫明確宣告的密封類別私有建構子</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.6.20: 當密封類別的私有建構子在該類別外部被呼叫時，報告警告（或在漸進模式下報告錯誤）</li><li>1.8.0: 對私有建構子使用預設可見性規則（對私有建構子的呼叫只能在對應的類別內部解析），可透過指定 <code>-XXLanguage:-UseConsistentRulesForPrivateConstructorsOfSealedClasses</code> 編譯器參數暫時恢復舊行為</li></ul></blockquote><h3 id="在建構器推斷上下文中使用操作符-於不相容數值型別上時禁止" tabindex="-1">在建構器推斷上下文中使用操作符 == 於不相容數值型別上時禁止 <a class="header-anchor" href="#在建構器推斷上下文中使用操作符-於不相容數值型別上時禁止" aria-label="Permalink to &quot;在建構器推斷上下文中使用操作符 == 於不相容數值型別上時禁止&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.com/issue/KT-45508" target="_blank" rel="noreferrer">KT-45508</a></p><p><strong>Component</strong>: 核心語言</p><p><strong>Incompatible change type</strong>: 原始碼</p><p><strong>Short summary</strong>: Kotlin 1.8 將禁止在建構器推斷 lambda 函式的範圍內，對不相容的數值型別（例如 <code>Int</code> 和 <code>Long</code>）使用操作符 <code>==</code>，這與其目前在其他上下文中的處理方式相同</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.6.20: 當操作符 <code>==</code> 用於不相容數值型別時，報告警告（或在漸進模式下報告錯誤）</li><li>1.8.0: 將此警告提升為錯誤，可使用 <code>-XXLanguage:-ProperEqualityChecksInBuilderInferenceCalls</code> 暫時恢復到 1.8 之前的行為</li></ul></blockquote><h3 id="禁止在-elvis-操作符右側使用沒有-else-的-if-和非窮盡的-when" tabindex="-1">禁止在 Elvis 操作符右側使用沒有 else 的 if 和非窮盡的 when <a class="header-anchor" href="#禁止在-elvis-操作符右側使用沒有-else-的-if-和非窮盡的-when" aria-label="Permalink to &quot;禁止在 Elvis 操作符右側使用沒有 else 的 if 和非窮盡的 when&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.com/issue/KT-44705" target="_blank" rel="noreferrer">KT-44705</a></p><p><strong>Component</strong>: 核心語言</p><p><strong>Incompatible change type</strong>: 原始碼</p><p><strong>Short summary</strong>: Kotlin 1.8 將禁止在 Elvis 操作符（<code>?:</code>）的右側使用非窮盡的 <code>when</code> 或沒有 <code>else</code> 分支的 <code>if</code> 表達式。以前，如果 Elvis 操作符的結果未用作表達式，則允許這樣做</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.6.20: 對於此類非窮盡的 if 和 when 表達式報告警告（或在漸進模式下報告錯誤）</li><li>1.8.0: 將此警告提升為錯誤，可使用 <code>-XXLanguage:-ProhibitNonExhaustiveIfInRhsOfElvis</code> 暫時恢復到 1.8 之前的行為</li></ul></blockquote><h3 id="禁止泛型型別別名使用中違反上限-一個型別參數用於別名型別的多個型別引數中" tabindex="-1">禁止泛型型別別名使用中違反上限（一個型別參數用於別名型別的多個型別引數中） <a class="header-anchor" href="#禁止泛型型別別名使用中違反上限-一個型別參數用於別名型別的多個型別引數中" aria-label="Permalink to &quot;禁止泛型型別別名使用中違反上限（一個型別參數用於別名型別的多個型別引數中）&quot;">​</a></h3><blockquote><p><strong>Issues</strong>: <a href="https://youtrack.com/issue/KT-29168" target="_blank" rel="noreferrer">KT-29168</a></p><p><strong>Component</strong>: 核心語言</p><p><strong>Incompatible change type</strong>: 原始碼</p><p><strong>Short summary</strong>: Kotlin 1.8 將禁止使用帶有型別引數的型別別名，這些型別引數違反了別名型別的相應型別參數的上限限制，其情況是一個型別別名型別參數在別名型別的多個型別引數中使用，例如 <code>typealias Alias&lt;T&gt; = Base&lt;T, T&gt;</code></p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.7.0: 對於使用帶有型別引數的型別別名，且這些型別引數違反了別名型別的相應型別參數的上限限制時，報告警告（或在漸進模式下報告錯誤）</li><li>1.8.0: 將此警告提升為錯誤，可使用 <code>-XXLanguage:-ReportMissingUpperBoundsViolatedErrorOnAbbreviationAtSupertypes</code> 暫時恢復到 1.8 之前的行為</li></ul></blockquote><h3 id="禁止泛型型別別名使用中違反上限-型別參數用於別名型別的型別引數的泛型型別引數中" tabindex="-1">禁止泛型型別別名使用中違反上限（型別參數用於別名型別的型別引數的泛型型別引數中） <a class="header-anchor" href="#禁止泛型型別別名使用中違反上限-型別參數用於別名型別的型別引數的泛型型別引數中" aria-label="Permalink to &quot;禁止泛型型別別名使用中違反上限（型別參數用於別名型別的型別引數的泛型型別引數中）&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.com/issue/KT-54066" target="_blank" rel="noreferrer">KT-54066</a></p><p><strong>Component</strong>: 核心語言</p><p><strong>Incompatible change type</strong>: 原始碼</p><p><strong>Short summary</strong>: Kotlin 將禁止使用帶有型別引數的型別別名，這些型別引數違反了別名型別的相應型別參數的上限限制，其情況是型別別名型別參數用作別名型別的型別引數的泛型型別引數，例如 <code>typealias Alias&lt;T&gt; = Base&lt;List&lt;T&gt;&gt;</code></p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.8.0: 當泛型型別別名使用中，其型別引數違反了別名型別的相應型別參數的上限限制時，報告警告</li><li>&gt;=1.10: 將警告提升為錯誤</li></ul></blockquote><h3 id="禁止在委託內部使用為擴展屬性宣告的型別參數" tabindex="-1">禁止在委託內部使用為擴展屬性宣告的型別參數 <a class="header-anchor" href="#禁止在委託內部使用為擴展屬性宣告的型別參數" aria-label="Permalink to &quot;禁止在委託內部使用為擴展屬性宣告的型別參數&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.com/issue/KT-24643" target="_blank" rel="noreferrer">KT-24643</a></p><p><strong>Component</strong>: 核心語言</p><p><strong>Incompatible change type</strong>: 原始碼</p><p><strong>Short summary</strong>: Kotlin 1.8 將禁止在泛型型別上將擴展屬性不安全地委託給使用接收者型別參數的泛型型別</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.6.0: 當將擴展屬性委託給以特定方式使用從委託屬性的型別引數推斷出的型別參數的型別時，報告警告（或在漸進模式下報告錯誤）</li><li>1.8.0: 將此警告提升為錯誤，可使用 <code>-XXLanguage:-ForbidUsingExtensionPropertyTypeParameterInDelegate</code> 暫時恢復到 1.8 之前的行為</li></ul></blockquote><h3 id="禁止在-suspend-函式上使用-synchronized-註解" tabindex="-1">禁止在 suspend 函式上使用 @Synchronized 註解 <a class="header-anchor" href="#禁止在-suspend-函式上使用-synchronized-註解" aria-label="Permalink to &quot;禁止在 suspend 函式上使用 @Synchronized 註解&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.com/issue/KT-48516" target="_blank" rel="noreferrer">KT-48516</a></p><p><strong>Component</strong>: 核心語言</p><p><strong>Incompatible change type</strong>: 原始碼</p><p><strong>Short summary</strong>: Kotlin 1.8 將禁止在 suspend 函式上放置 <code>@Synchronized</code> 註解，因為不應允許在同步區塊內部發生 suspend 呼叫</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.6.0: 對於帶有 <code>@Synchronized</code> 註解的 suspend 函式報告警告，在漸進模式下將警告報告為錯誤</li><li>1.8.0: 將此警告提升為錯誤，可使用 <code>-XXLanguage:-SynchronizedSuspendError</code> 暫時恢復到 1.8 之前的行為</li></ul></blockquote><h3 id="禁止使用展開運算符將參數傳遞給非可變引數-non-vararg-參數" tabindex="-1">禁止使用展開運算符將參數傳遞給非可變引數（non-vararg）參數 <a class="header-anchor" href="#禁止使用展開運算符將參數傳遞給非可變引數-non-vararg-參數" aria-label="Permalink to &quot;禁止使用展開運算符將參數傳遞給非可變引數（non-vararg）參數&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.com/issue/KT-48162" target="_blank" rel="noreferrer">KT-48162</a></p><p><strong>Component</strong>: 核心語言</p><p><strong>Incompatible change type</strong>: 原始碼</p><p><strong>Short summary</strong>: Kotlin 曾經允許在某些條件下使用展開運算符（<code>*</code>）將陣列傳遞給非可變引數陣列參數。從 Kotlin 1.8 開始，這將被禁止</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.6.0: 當預期為非可變引數陣列參數時，使用展開運算符報告警告（或在漸進模式下報告錯誤）</li><li>1.8.0: 將此警告提升為錯誤，可使用 <code>-XXLanguage:-ReportNonVarargSpreadOnGenericCalls</code> 暫時恢復到 1.8 之前的行為</li></ul></blockquote><h3 id="禁止在傳遞給透過-lambda-回傳型別重載的函式的-lambda-中違反-null-安全性" tabindex="-1">禁止在傳遞給透過 lambda 回傳型別重載的函式的 lambda 中違反 null 安全性 <a class="header-anchor" href="#禁止在傳遞給透過-lambda-回傳型別重載的函式的-lambda-中違反-null-安全性" aria-label="Permalink to &quot;禁止在傳遞給透過 lambda 回傳型別重載的函式的 lambda 中違反 null 安全性&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.com/issue/KT-49658" target="_blank" rel="noreferrer">KT-49658</a></p><p><strong>Component</strong>: 核心語言</p><p><strong>Incompatible change type</strong>: 原始碼</p><p><strong>Short summary</strong>: Kotlin 1.8 將禁止從傳遞給透過 lambda 回傳型別重載的函式的 lambda 中回傳 <code>null</code>，如果重載不允許可空的回傳型別。以前，當從 <code>when</code> 運算符的一個分支回傳 <code>null</code> 時，這是允許的</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.6.20: 報告型別不匹配警告（或在漸進模式下報告錯誤）</li><li>1.8.0: 將此警告提升為錯誤，可使用 <code>-XXLanguage:-DontLoseDiagnosticsDuringOverloadResolutionByReturnType</code> 暫時恢復到 1.8 之前的行為</li></ul></blockquote><h3 id="在公開簽名中近似本地型別時保留可空性" tabindex="-1">在公開簽名中近似本地型別時保留可空性 <a class="header-anchor" href="#在公開簽名中近似本地型別時保留可空性" aria-label="Permalink to &quot;在公開簽名中近似本地型別時保留可空性&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.com/issue/KT-53982" target="_blank" rel="noreferrer">KT-53982</a></p><p><strong>Component</strong>: 核心語言</p><p><strong>Incompatible change type</strong>: 原始碼, 二進位</p><p><strong>Short summary</strong>: 當本地或匿名型別從沒有明確指定回傳型別的表達式主體函式中回傳時，Kotlin 編譯器會使用該型別的已知超型別推斷（或近似）回傳型別。在此過程中，編譯器可能會推斷出非可空型別，而實際上可能會回傳 <code>null</code> 值</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.8.0: 透過彈性超型別近似彈性型別</li><li>1.8.0: 當推斷出的宣告具有非可空型別而實際上應該是可空型別時，報告警告，提示使用者明確指定型別</li><li>1.9.0: 透過可空超型別近似可空型別，可使用 <code>-XXLanguage:-KeepNullabilityWhenApproximatingLocalType</code> 暫時恢復到 1.9 之前的行為</li></ul></blockquote><h3 id="不透過覆寫傳播棄用" tabindex="-1">不透過覆寫傳播棄用 <a class="header-anchor" href="#不透過覆寫傳播棄用" aria-label="Permalink to &quot;不透過覆寫傳播棄用&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.com/issue/KT-47902" target="_blank" rel="noreferrer">KT-47902</a></p><p><strong>Component</strong>: 核心語言</p><p><strong>Incompatible change type</strong>: 原始碼</p><p><strong>Short summary</strong>: Kotlin 1.9 將不再將棄用從父類別中的已棄用成員傳播到子類別中覆寫該成員的成員，從而提供一種明確的機制，用於棄用父類別的成員，同時在子類別中保留其非棄用狀態</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.6.20: 報告警告，其中包含未來行為變更的訊息，並提示使用者抑制此警告或在已棄用成員的覆寫上明確寫入 <code>@Deprecated</code> 註解</li><li>1.9.0: 停止將棄用狀態傳播到被覆寫的成員。此變更在漸進模式下也立即生效</li></ul></blockquote><h3 id="禁止在建構器推斷上下文中的上限中隱式推斷型別變數" tabindex="-1">禁止在建構器推斷上下文中的上限中隱式推斷型別變數 <a class="header-anchor" href="#禁止在建構器推斷上下文中的上限中隱式推斷型別變數" aria-label="Permalink to &quot;禁止在建構器推斷上下文中的上限中隱式推斷型別變數&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.com/issue/KT-47986" target="_blank" rel="noreferrer">KT-47986</a></p><p><strong>Component</strong>: 核心語言</p><p><strong>Incompatible change type</strong>: 原始碼</p><p><strong>Short summary</strong>: Kotlin 1.9 將禁止在建構器推斷 lambda 函式的範圍內，在沒有任何使用現場型別資訊的情況下，將型別變數推斷為相應型別參數的上限，這與其目前在其他上下文中的處理方式相同</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.7.20: 在沒有使用現場型別資訊的情況下，當型別參數被推斷為宣告的上限時，報告警告（或在漸進模式下報告錯誤）</li><li>1.9.0: 將此警告提升為錯誤，可使用 <code>-XXLanguage:-ForbidInferringPostponedTypeVariableIntoDeclaredUpperBound</code> 暫時恢復到 1.9 之前的行為</li></ul></blockquote><h3 id="禁止在註解類別中除參數宣告以外的任何地方使用集合字面值" tabindex="-1">禁止在註解類別中除參數宣告以外的任何地方使用集合字面值 <a class="header-anchor" href="#禁止在註解類別中除參數宣告以外的任何地方使用集合字面值" aria-label="Permalink to &quot;禁止在註解類別中除參數宣告以外的任何地方使用集合字面值&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.com/issue/KT-39041" target="_blank" rel="noreferrer">KT-39041</a></p><p><strong>Component</strong>: 核心語言</p><p><strong>Incompatible change type</strong>: 原始碼</p><p><strong>Short summary</strong>: Kotlin 允許以受限制的方式使用集合字面值——用於將陣列傳遞給註解類別的參數或為這些參數指定預設值。然而除此之外，Kotlin 允許在註解類別中的任何其他地方使用集合字面值，例如在其巢狀物件中。Kotlin 1.9 將禁止在註解類別中除參數的預設值以外的任何地方使用集合字面值。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.7.0: 對於註解類別中巢狀物件中的陣列字面值報告警告（或在漸進模式下報告錯誤）</li><li>1.9.0: 將警告提升為錯誤</li></ul></blockquote><h3 id="禁止在預設值表達式中向前引用帶有預設值的參數" tabindex="-1">禁止在預設值表達式中向前引用帶有預設值的參數 <a class="header-anchor" href="#禁止在預設值表達式中向前引用帶有預設值的參數" aria-label="Permalink to &quot;禁止在預設值表達式中向前引用帶有預設值的參數&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.com/issue/KT-25694" target="_blank" rel="noreferrer">KT-25694</a></p><p><strong>Component</strong>: 核心語言</p><p><strong>Incompatible change type</strong>: 原始碼</p><p><strong>Short summary</strong>: Kotlin 1.9 將禁止在其他參數的預設值表達式中向前引用帶有預設值的參數。這確保了在預設值表達式中存取參數時，它將已經具有傳遞給函式的值或由其自身的預設值表達式初始化的值</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.7.0: 當帶有預設值的參數在位於其之前的另一個參數的預設值中被引用時，報告警告（或在漸進模式下報告錯誤）</li><li>1.9.0: 將此警告提升為錯誤，可使用 <code>-XXLanguage:-ProhibitIllegalValueParameterUsageInDefaultArguments</code> 暫時恢復到 1.9 之前的行為</li></ul></blockquote><h3 id="禁止在-inline-函式參數上進行擴展呼叫" tabindex="-1">禁止在 inline 函式參數上進行擴展呼叫 <a class="header-anchor" href="#禁止在-inline-函式參數上進行擴展呼叫" aria-label="Permalink to &quot;禁止在 inline 函式參數上進行擴展呼叫&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.com/issue/KT-52502" target="_blank" rel="noreferrer">KT-52502</a></p><p><strong>Component</strong>: 核心語言</p><p><strong>Incompatible change type</strong>: 原始碼</p><p><strong>Short summary</strong>: 雖然 Kotlin 允許將 inline 函式參數作為接收者傳遞給另一個 inline 函式，但在編譯此類程式碼時總是會導致編譯器異常。Kotlin 1.9 將禁止這樣做，從而報告錯誤而不是使編譯器崩潰</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.7.20: 對於在 inline 函式參數上的 inline 擴展呼叫報告警告（或在漸進模式下報告錯誤）</li><li>1.9.0: 將此警告提升為錯誤</li></ul></blockquote><h3 id="禁止呼叫以匿名函式引數命名的-infix-函式-suspend" tabindex="-1">禁止呼叫以匿名函式引數命名的 infix 函式 suspend <a class="header-anchor" href="#禁止呼叫以匿名函式引數命名的-infix-函式-suspend" aria-label="Permalink to &quot;禁止呼叫以匿名函式引數命名的 infix 函式 suspend&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.com/issue/KT-49264" target="_blank" rel="noreferrer">KT-49264</a></p><p><strong>Component</strong>: 核心語言</p><p><strong>Incompatible change type</strong>: 原始碼</p><p><strong>Short summary</strong>: Kotlin 1.9 將不再允許呼叫名稱為 <code>suspend</code> 且帶有單個函式型別引數作為匿名函式字面值的 infix 函式</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.7.20: 對於帶有匿名函式字面值的 suspend infix 呼叫報告警告</li><li>1.9.0: 將此警告提升為錯誤，可使用 <code>-XXLanguage:-ModifierNonBuiltinSuspendFunError</code> 暫時恢復到 1.9 之前的行為</li><li>&gt;=1.10: 變更解析器對 <code>suspend fun</code> 詞元序列的解釋方式</li></ul></blockquote><h3 id="禁止在內部類別中使用捕獲的型別參數-違反其型變" tabindex="-1">禁止在內部類別中使用捕獲的型別參數，違反其型變 <a class="header-anchor" href="#禁止在內部類別中使用捕獲的型別參數-違反其型變" aria-label="Permalink to &quot;禁止在內部類別中使用捕獲的型別參數，違反其型變&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.com/issue/KT-50947" target="_blank" rel="noreferrer">KT-50947</a></p><p><strong>Component</strong>: 核心語言</p><p><strong>Incompatible change type</strong>: 原始碼</p><p><strong>Short summary</strong>: Kotlin 1.9 將禁止在外部類別的內部類別中，在違反該型別參數宣告型變的位置上使用帶有 <code>in</code> 或 <code>out</code> 型變的外部類別的型別參數</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.7.0: 當外部類別的型別參數使用位置違反該參數的型變規則時，報告警告（或在漸進模式下報告錯誤）</li><li>1.9.0: 將此警告提升為錯誤，可使用 <code>-XXLanguage:-ReportTypeVarianceConflictOnQualifierArguments</code> 暫時恢復到 1.9 之前的行為</li></ul></blockquote><h3 id="禁止在複合賦值運算符中遞迴呼叫沒有明確回傳型別的函式" tabindex="-1">禁止在複合賦值運算符中遞迴呼叫沒有明確回傳型別的函式 <a class="header-anchor" href="#禁止在複合賦值運算符中遞迴呼叫沒有明確回傳型別的函式" aria-label="Permalink to &quot;禁止在複合賦值運算符中遞迴呼叫沒有明確回傳型別的函式&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.com/issue/KT-48546" target="_blank" rel="noreferrer">KT-48546</a></p><p><strong>Component</strong>: 核心語言</p><p><strong>Incompatible change type</strong>: 原始碼</p><p><strong>Short summary</strong>: Kotlin 1.9 將禁止在函式體內部，複合賦值運算符的引數中呼叫沒有明確指定回傳型別的函式，這與其目前在該函式體內部的其他表達式中的處理方式相同</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.7.0: 當沒有明確指定回傳型別的函式在其函式體內部的複合賦值運算符引數中被遞迴呼叫時，報告警告（或在漸進模式下報告錯誤）</li><li>1.9.0: 將此警告提升為錯誤</li></ul></blockquote><h3 id="禁止對預期為-notnull-t-而給定帶有可空邊界的-kotlin-泛型參數進行不健全的呼叫" tabindex="-1">禁止對預期為 @NotNull T 而給定帶有可空邊界的 Kotlin 泛型參數進行不健全的呼叫 <a class="header-anchor" href="#禁止對預期為-notnull-t-而給定帶有可空邊界的-kotlin-泛型參數進行不健全的呼叫" aria-label="Permalink to &quot;禁止對預期為 @NotNull T 而給定帶有可空邊界的 Kotlin 泛型參數進行不健全的呼叫&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.com/issue/KT-36770" target="_blank" rel="noreferrer">KT-36770</a></p><p><strong>Component</strong>: Kotlin/JVM</p><p><strong>Incompatible change type</strong>: 原始碼</p><p><strong>Short summary</strong>: Kotlin 1.9 將禁止方法呼叫，其中將潛在可空泛型型別的值傳遞給 Java 方法的 <code>@NotNull</code> 註解參數</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.5.20: 當在預期非空型別的位置傳遞未受約束的泛型型別參數時，報告警告</li><li>1.9.0: 報告型別不匹配錯誤而非上述警告，可使用 <code>-XXLanguage:-ProhibitUsingNullableTypeParameterAgainstNotNullAnnotated</code> 暫時恢復到 1.8 之前的行為</li></ul></blockquote><h3 id="禁止從列舉的條目初始化器中存取列舉類別伴侶的成員" tabindex="-1">禁止從列舉的條目初始化器中存取列舉類別伴侶的成員 <a class="header-anchor" href="#禁止從列舉的條目初始化器中存取列舉類別伴侶的成員" aria-label="Permalink to &quot;禁止從列舉的條目初始化器中存取列舉類別伴侶的成員&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.com/issue/KT-49110" target="_blank" rel="noreferrer">KT-49110</a></p><p><strong>Component</strong>: 核心語言</p><p><strong>Incompatible change type</strong>: 原始碼</p><p><strong>Short summary</strong>: Kotlin 1.9 將禁止從列舉條目初始化器中對列舉的伴侶物件進行所有形式的存取</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.6.20: 對於此類伴侶成員存取報告警告（或在漸進模式下報告錯誤）</li><li>1.9.0: 將此警告提升為錯誤，可使用 <code>-XXLanguage:-ProhibitAccessToEnumCompanionMembersInEnumConstructorCall</code> 暫時恢復到 1.8 之前的行為</li></ul></blockquote><h3 id="棄用並移除-enum-declaringclass-合成屬性" tabindex="-1">棄用並移除 Enum.declaringClass 合成屬性 <a class="header-anchor" href="#棄用並移除-enum-declaringclass-合成屬性" aria-label="Permalink to &quot;棄用並移除 Enum.declaringClass 合成屬性&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.com/issue/KT-49653" target="_blank" rel="noreferrer">KT-49653</a></p><p><strong>Component</strong>: Kotlin/JVM</p><p><strong>Incompatible change type</strong>: 原始碼</p><p><strong>Short summary</strong>: Kotlin 曾經允許在從底層 Java 類別 <code>java.lang.Enum</code> 的 <code>getDeclaringClass()</code> 方法產生的 <code>Enum</code> 值上使用合成屬性 <code>declaringClass</code>，儘管此方法對 Kotlin 的 <code>Enum</code> 型別不可用。Kotlin 1.9 將禁止使用此屬性，建議改用擴展屬性 <code>declaringJavaClass</code></p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.7.0: 對於 <code>declaringClass</code> 屬性使用報告警告（或在漸進模式下報告錯誤），建議遷移到 <code>declaringJavaClass</code> 擴展</li><li>1.9.0: 將此警告提升為錯誤，可使用 <code>-XXLanguage:-ProhibitEnumDeclaringClass</code> 暫時恢復到 1.9 之前的行為</li><li>&gt;=1.10: 移除 <code>declaringClass</code> 合成屬性</li></ul></blockquote><h3 id="棄用編譯器選項-xjvm-default-的啟用和相容性模式" tabindex="-1">棄用編譯器選項 -Xjvm-default 的啟用和相容性模式 <a class="header-anchor" href="#棄用編譯器選項-xjvm-default-的啟用和相容性模式" aria-label="Permalink to &quot;棄用編譯器選項 -Xjvm-default 的啟用和相容性模式&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.com/issue/KT-46329" target="_blank" rel="noreferrer">KT-46329</a></p><p><strong>Component</strong>: Kotlin/JVM</p><p><strong>Incompatible change type</strong>: 原始碼</p><p><strong>Short summary</strong>: Kotlin 1.6.20 針對使用 <code>-Xjvm-default</code> 編譯器選項的 <code>enable</code> 和 <code>compatibility</code> 模式發出警告</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.6.20: 對於 <code>-Xjvm-default</code> 編譯器選項的 <code>enable</code> 和 <code>compatibility</code> 模式引入警告</li><li>&gt;= 1.9: 將此警告提升為錯誤</li></ul></blockquote><h2 id="標準函式庫" tabindex="-1">標準函式庫 <a class="header-anchor" href="#標準函式庫" aria-label="Permalink to &quot;標準函式庫&quot;">​</a></h2><h3 id="當-range-progression-開始實作-collection-時-警告潛在的重載解析變更" tabindex="-1">當 Range/Progression 開始實作 Collection 時，警告潛在的重載解析變更 <a class="header-anchor" href="#當-range-progression-開始實作-collection-時-警告潛在的重載解析變更" aria-label="Permalink to &quot;當 Range/Progression 開始實作 Collection 時，警告潛在的重載解析變更&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.com/issue/KT-49276" target="_blank" rel="noreferrer">KT-49276</a></p><p><strong>Component</strong>: 核心語言 / kotlin-stdlib</p><p><strong>Incompatible change type</strong>: 原始碼</p><p><strong>Short summary</strong>: 計劃在 Kotlin 1.9 中讓標準進程和從它們繼承的具體範圍實作 <code>Collection</code> 介面。如果某個方法有兩個重載，一個接受元素而另一個接受集合，這可能會導致不同的重載被選中進行重載解析。當此類重載方法與範圍或進程引數一起呼叫時，Kotlin 將透過報告警告或錯誤來使這種情況可見</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.6.20: 當重載方法以標準進程或其範圍繼承者作為引數呼叫時，如果此進程/範圍實作 <code>Collection</code> 介面將來會導致在這次呼叫中選擇另一個重載，則報告警告</li><li>1.8.0: 將此警告提升為錯誤</li><li>1.9.0: 停止報告錯誤，在進程中實作 <code>Collection</code> 介面，從而改變受影響情況下的重載解析結果</li></ul></blockquote><h3 id="將宣告從-kotlin-dom-和-kotlin-browser-套件遷移到-kotlinx" tabindex="-1">將宣告從 kotlin.dom 和 kotlin.browser 套件遷移到 kotlinx.* <a class="header-anchor" href="#將宣告從-kotlin-dom-和-kotlin-browser-套件遷移到-kotlinx" aria-label="Permalink to &quot;將宣告從 kotlin.dom 和 kotlin.browser 套件遷移到 kotlinx.*&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.com/issue/KT-39330" target="_blank" rel="noreferrer">KT-39330</a></p><p><strong>Component</strong>: kotlin-stdlib (JS)</p><p><strong>Incompatible change type</strong>: 原始碼</p><p><strong>Short summary</strong>: 為了從 stdlib 中提取它們，<code>kotlin.dom</code> 和 <code>kotlin.browser</code> 套件中的宣告已移至相應的 <code>kotlinx.*</code> 套件</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.4.0: 在 <code>kotlinx.dom</code> 和 <code>kotlinx.browser</code> 套件中引入替代 API</li><li>1.4.0: 棄用 <code>kotlin.dom</code> 和 <code>kotlin.browser</code> 套件中的 API，並建議上述新 API 作為替代</li><li>1.6.0: 將棄用級別提升為錯誤</li><li>1.8.20: 從 stdlib 中為 JS-IR 目標移除已棄用的函式</li><li>&gt;= 1.9: 將 kotlinx.* 套件中的 API 移至單獨的函式庫</li></ul></blockquote><h3 id="棄用部分僅適用於-js-的-api" tabindex="-1">棄用部分僅適用於 JS 的 API <a class="header-anchor" href="#棄用部分僅適用於-js-的-api" aria-label="Permalink to &quot;棄用部分僅適用於 JS 的 API&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.com/issue/KT-48587" target="_blank" rel="noreferrer">KT-48587</a></p><p><strong>Component</strong>: kotlin-stdlib (JS)</p><p><strong>Incompatible change type</strong>: 原始碼</p><p><strong>Short summary</strong>: stdlib 中的一些僅適用於 JS 的函式已被棄用並將被移除。它們包括：<code>String.concat(String)</code>、<code>String.match(regex: String)</code>、<code>String.matches(regex: String)</code>，以及陣列中接受比較函式的 <code>sort</code> 函式，例如 <code>Array&lt;out T&gt;.sort(comparison: (a: T, b: T) -&gt; Int)</code></p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.6.0: 帶有警告地棄用受影響的函式</li><li>1.9.0: 將棄用級別提升為錯誤</li><li>&gt;=1.10.0: 從公共 API 中移除已棄用的函式</li></ul></blockquote><h2 id="工具" tabindex="-1">工具 <a class="header-anchor" href="#工具" aria-label="Permalink to &quot;工具&quot;">​</a></h2><h3 id="提升-kotlincompile-任務的-classpath-屬性的棄用級別" tabindex="-1">提升 KotlinCompile 任務的 classpath 屬性的棄用級別 <a class="header-anchor" href="#提升-kotlincompile-任務的-classpath-屬性的棄用級別" aria-label="Permalink to &quot;提升 KotlinCompile 任務的 classpath 屬性的棄用級別&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.com/issue/KT-51679" target="_blank" rel="noreferrer">KT-51679</a></p><p><strong>Component</strong>: Gradle</p><p><strong>Incompatible change type</strong>: 原始碼</p><p><strong>Short summary</strong>: <code>KotlinCompile</code> 任務的 <code>classpath</code> 屬性已棄用</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.7.0: <code>classpath</code> 屬性已棄用</li><li>1.8.0: 將棄用級別提升為錯誤</li><li>&gt;=1.9.0: 從公共 API 中移除已棄用的函式</li></ul></blockquote><h3 id="移除-kapt-use-worker-api-gradle-屬性" tabindex="-1">移除 kapt.use.worker.api Gradle 屬性 <a class="header-anchor" href="#移除-kapt-use-worker-api-gradle-屬性" aria-label="Permalink to &quot;移除 kapt.use.worker.api Gradle 屬性&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.com/issue/KT-48827" target="_blank" rel="noreferrer">KT-48827</a></p><p><strong>Component</strong>: Gradle</p><p><strong>Incompatible change type</strong>: 行為</p><p><strong>Short summary</strong>: 移除允許透過 Gradle Workers API 執行 kapt 的 <code>kapt.use.worker.api</code> 屬性（預設：true）</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.6.20: 將棄用級別提升為警告</li><li>1.8.0: 移除此屬性</li></ul></blockquote><h3 id="移除-kotlin-compiler-execution-strategy-系統屬性" tabindex="-1">移除 kotlin.compiler.execution.strategy 系統屬性 <a class="header-anchor" href="#移除-kotlin-compiler-execution-strategy-系統屬性" aria-label="Permalink to &quot;移除 kotlin.compiler.execution.strategy 系統屬性&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.com/issue/KT-51831" target="_blank" rel="noreferrer">KT-51831</a></p><p><strong>Component</strong>: Gradle</p><p><strong>Incompatible change type</strong>: 行為</p><p><strong>Short summary</strong>: 移除用於選擇編譯器執行策略的 <code>kotlin.compiler.execution.strategy</code> 系統屬性。請改用 Gradle 屬性 <code>kotlin.compiler.execution.strategy</code> 或編譯任務屬性 <code>compilerExecutionStrategy</code></p><p><strong>Deprecation cycle:</strong></p><ul><li>1.7.0: 將棄用級別提升為警告</li><li>1.8.0: 移除此屬性</li></ul></blockquote><h3 id="編譯器選項的變更" tabindex="-1">編譯器選項的變更 <a class="header-anchor" href="#編譯器選項的變更" aria-label="Permalink to &quot;編譯器選項的變更&quot;">​</a></h3><blockquote><p><strong>Issues</strong>: <a href="https://youtrack.com/issue/KT-27301" target="_blank" rel="noreferrer">KT-27301</a>, <a href="https://youtrack.com/issue/KT-48532" target="_blank" rel="noreferrer">KT-48532</a></p><p><strong>Component</strong>: Gradle</p><p><strong>Incompatible change type</strong>: 原始碼, 二進位</p><p><strong>Short summary</strong>: 此變更可能會影響 Gradle 外掛程式作者。在 <code>kotlin-gradle-plugin</code> 中，一些內部型別有額外的泛型參數（您應該添加泛型型別或 <code>*</code>）。 <code>KotlinNativeLink</code> 任務不再繼承 <code>AbstractKotlinNativeCompile</code> 任務。 <code>KotlinJsCompilerOptions.outputFile</code> 和相關的 <code>KotlinJsOptions.outputFile</code> 選項已棄用。請改用 <code>Kotlin2JsCompile.outputFileProperty</code> 任務輸入。<code>kotlinOptions</code> 任務輸入和 <code>kotlinOptions{...}</code> 任務 DSL 處於支援模式，並將在即將發布的版本中棄用。<code>compilerOptions</code> 和 <code>kotlinOptions</code> 無法在任務執行階段更改（請參閱 <a href="/zh-Hant/kotlin/whatsnew18#limitations">What&#39;s new in Kotlin 1.8</a> 中的一個例外）。<code>freeCompilerArgs</code> 回傳一個不可變的 <code>List&lt;String&gt;</code> – <code>kotlinOptions.freeCompilerArgs.remove(&quot;something&quot;)</code> 將會失敗。允許使用舊版 JVM 後端的 <code>useOldBackend</code> 屬性已移除</p><p><strong>Deprecation cycle:</strong></p><ul><li>1.8.0: <code>KotlinNativeLink</code> 任務不再繼承 <code>AbstractKotlinNativeCompile</code>。<code>KotlinJsCompilerOptions.outputFile</code> 和相關的 <code>KotlinJsOptions.outputFile</code> 選項已棄用。允許使用舊版 JVM 後端的 <code>useOldBackend</code> 屬性已移除。</li></ul></blockquote><h3 id="棄用-kotlin-internal-single-build-metrics-file-屬性" tabindex="-1">棄用 kotlin.internal.single.build.metrics.file 屬性 <a class="header-anchor" href="#棄用-kotlin-internal-single-build-metrics-file-屬性" aria-label="Permalink to &quot;棄用 kotlin.internal.single.build.metrics.file 屬性&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.com/issue/KT-53357" target="_blank" rel="noreferrer">KT-53357</a></p><p><strong>Component</strong>: Gradle</p><p><strong>Incompatible change type</strong>: 原始碼</p><p><strong>Short summary</strong>: 棄用用於定義單一檔案用於建置報告的 <code>kotlin.internal.single.build.metrics.file</code> 屬性。請改用 <code>kotlin.build.report.single_file</code> 屬性與 <code>kotlin.build.report.output=single_file</code></p><p><strong>Deprecation cycle:</strong></p><ul><li>1.8.0: 將棄用級別提升為警告 &gt;= 1.9: 刪除此屬性</li></ul></blockquote>',76)]))}const h=e(a,[["render",l]]);export{d as __pageData,h as default};
