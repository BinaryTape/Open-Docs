import{_ as e,c as s,o as a,ag as o}from"./chunks/framework.Bksy39di.js";const r=JSON.parse('{"title":"版本與 API 升級指南","description":"","frontmatter":{"title":"版本與 API 升級指南","custom_edit_url":null},"headers":[],"relativePath":"zh-Hant/koin/support/releases.md","filePath":"zh-Hant/koin/support/releases.md","lastUpdated":1750001831000}'),l={name:"zh-Hant/koin/support/releases.md"};function n(d,i,t,p,c,k){return a(),s("div",null,i[0]||(i[0]=[o(`<h1 id="版本與-api-升級指南" tabindex="-1">版本與 API 升級指南 <a class="header-anchor" href="#版本與-api-升級指南" aria-label="Permalink to &quot;版本與 API 升級指南&quot;">​</a></h1><div class="info custom-block"><p class="custom-block-title">INFO</p><p>本頁提供 Koin 各主要版本的全面概覽，詳述我們框架的演進，以協助您規劃升級並維持相容性。</p></div><p>對於每個版本，文件皆依循以下章節結構編排：</p><ul><li><code>Kotlin</code>：指定該版本使用的 Kotlin 版本，確保語言相容性清晰明瞭，並讓您能夠利用最新的 Kotlin 功能。</li><li><code>New</code>：強調新引入的功能和改進，以提升功能性與開發者體驗。</li><li><code>Experimental</code>：列出標記為實驗性的 API 和功能。這些功能正積極開發中，並可能依據社群回饋進行變更。</li><li><code>Deprecated</code>：識別已標記為棄用的 API 和功能，並提供建議的替代方案指南，協助您為未來的移除做好準備。</li><li><code>Breaking</code>：詳細說明任何可能破壞向後相容性的變更，確保您在遷移期間知悉必要的調整。</li></ul><p>這種結構化的方法不僅闡明了每個版本中的增量變更，也強化了我們對 Koin 專案透明度、穩定性及持續改進的承諾。</p><p>更多細節請參閱 <a href="/zh-Hant/koinapi-stability">Api 穩定性契約</a>。</p><h2 id="_4-1-1" tabindex="-1">4.1.1 <a class="header-anchor" href="#_4-1-1" aria-label="Permalink to &quot;4.1.1&quot;">​</a></h2><h3 id="新功能-🎉" tabindex="-1">新功能 🎉 <a class="header-anchor" href="#新功能-🎉" aria-label="Permalink to &quot;新功能 🎉&quot;">​</a></h3><p><code>koin-ktor</code></p><ul><li>整合 – 提供 <code>KtorDIExtension</code> 以整合 Ktor 3.2 預設的 DI 引擎</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setupDatabase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(config: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DbConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        provide</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Database</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; { database }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CustomerRepositoryImpl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> database: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Database</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CustomerRepository</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">customerDataModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    koinModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        singleOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CustomerRepositoryImpl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) bind CustomerRepository::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="_4-1-0" tabindex="-1">4.1.0 <a class="header-anchor" href="#_4-1-0" aria-label="Permalink to &quot;4.1.0&quot;">​</a></h2><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>使用 Kotlin <code>2.1.20</code></p></div><h3 id="新功能-🎉-1" tabindex="-1">新功能 🎉 <a class="header-anchor" href="#新功能-🎉-1" aria-label="Permalink to &quot;新功能 🎉&quot;">​</a></h3><p><code>koin-core</code></p><ul><li>配置 – <code>KoinConfiguration</code> API 協助封裝配置。</li><li>作用域 – 引入新的 <em>作用域原型 (Scope Archetype)</em>，即為作用域類別引入專用的作用域類型限定符。實例解析現在可以根據作用域類別（亦稱為原型）進行。</li><li>功能選項 – 「功能選項」可協助為 Koin 內部的新功能行為設定功能標記。您可以在 Koin 配置中使用 <code>options</code> 區塊來啟用選項：</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startKoin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // activate a new feature</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        viewModelScopeFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>核心 – 引入新的 <code>CoreResolver</code>，允許 <code>ResolutionExtension</code> 協助 Koin 在外部系統或資源中進行解析（用於協助連接 Ktor DI）。</li></ul><p><code>koin-android</code></p><ul><li>升級後的函式庫（<code>androidx.appcompat:appcompat:1.7.0</code>、<code>androidx.activity:activity-ktx:1.10.1</code>）要求將最低 SDK 等級從 14 提高到 21。</li><li>DSL – 新增 Koin 模組 DSL 擴充功能 <code>activityScope</code>、<code>activityRetainedScope</code> 和 <code>fragmentScope</code>，以在 Activity/Fragment 中宣告作用域。</li><li>作用域函數 – <code>activityScope()</code>、<code>activityRetainedScope()</code> 和 <code>fragmentScope()</code> API 函數現在也會觸發作用域原型。</li></ul><p><code>koin-androidx-compose</code></p><ul><li>與 Koin Compose 多平台及所有 Compose 1.8 和 Lifecycle 2.9 對齊。</li></ul><p><code>koin-compose</code></p><ul><li>與 Compose 1.8 和 Lifecycle 2.9 對齊。</li><li>新函數 – <code>KoinApplicationPreview</code> 可協助在 Android Studio 和 IntelliJ 中渲染平行預覽。</li></ul><p><code>koin-compose-viewmodel</code></p><ul><li>新增 <code>koinActivityViewModel</code>，以允許將父級 Activity 設定為主機。</li></ul><p><code>koin-ktor</code></p><ul><li>多平台 – 該模組現在以 Kotlin KMP 格式編譯。您可以從多平台專案中指向 <code>koin-ktor</code>。</li><li>合併 – 先前的 <code>koin-ktor3</code> 模組已合併到 <code>koin-ktor</code> 中。</li><li>擴充功能 – 引入 <code>Application.koinModule { }</code> 和 <code>Application.koinModules()</code>，讓您可以直接將 Koin 模組宣告與 Ktor 模組連接。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">customerDataModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    koinModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        singleOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CustomerRepositoryImpl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) bind CustomerRepository::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>作用域 – <code>Module.requestScope</code> – 允許在 Ktor 請求作用域內宣告定義（避免手動宣告 <code>scope&lt;RequestScope&gt;</code>）。 注入的作用域也允許在建構函式中注入 <code>ApplicationCall</code>。</li></ul><p><code>koin-core-coroutines</code></p><ul><li>模組 DSL – 引入新的 <code>ModuleConfiguration</code>，協助將模組配置匯集到一個結構中，以便稍後更好地驗證。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    single</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Simple.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ComponentA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lm1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lazyModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    single</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Simple.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ComponentB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> conf </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> moduleConfiguration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    modules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(m1)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    lazyModules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lm1)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>配置 DSL – Koin 配置現在可以使用 <code>ModuleConfiguration</code> 來載入模組：</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startKoin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    moduleConfiguration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        modules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(m1)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        lazyModules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lm1)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// or even</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> conf </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> moduleConfiguration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    modules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(m1)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    lazyModules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lm1)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startKoin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    moduleConfiguration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(conf)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>koin-test-coroutines</code></p><ul><li>新增 <code>koin-test-coroutines</code> Koin 模組，以引入與協程相關的新測試 API。</li><li>擴充功能 – 擴展 Verify API，讓您可以透過 <code>moduleConfiguration</code> 檢查 Koin 配置，然後驗證模組/惰性模組的混合配置：</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> conf </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> moduleConfiguration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    modules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(m1)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    lazyModules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lm1)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">conf.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">verify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// if you want Android types (koin-android-test)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">conf.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">verify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(extraTypes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> androidTypes)</span></span></code></pre></div><p><code>koin-core-annotations</code></p><ul><li>註解 – <code>@InjectedParam</code> 或 <code>@Provided</code> 用於標記一個屬性，使其被視為注入參數或動態提供。目前用於 <code>Verify</code> API，但未來可能用於協助更輕量的 DSL 宣告。</li></ul><h3 id="實驗性功能-🚧" tabindex="-1">實驗性功能 🚧 <a class="header-anchor" href="#實驗性功能-🚧" aria-label="Permalink to &quot;實驗性功能 🚧&quot;">​</a></h3><p><code>koin-core</code></p><ul><li>Wasm – 使用 Kotlin 2.1.20 UUID 生成。</li></ul><p><code>koin-core-viewmodel</code></p><ul><li>DSL – 新增模組 DSL 擴充功能 <code>viewModelScope</code>，以宣告作用域限定為 ViewModel 作用域原型的組件。</li><li>作用域函數 – 新增函數 <code>viewModelScope()</code>，用於為 ViewModel 建立作用域（綁定到 ViewModel 類別）。此 API 現在使用 <code>ViewModelScopeAutoCloseable</code> 以利用 <code>AutoCloseable</code> API 協助宣告和關閉作用域，不再需要手動關閉 ViewModel 作用域。</li><li>類別 – 更新了 <code>ScopeViewModel</code> 類別，以支援一個即用型 ViewModel 作用域類別（處理作用域的建立和關閉）。</li><li>功能選項 – 使用 ViewModel 作用域進行建構函式 ViewModel 注入，需要啟用 Koin 選項 <code>viewModelScopeFactory</code>：</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startKoin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // activate a new ViewModel scope creation</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        viewModelScopeFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// will inject Session from MyScopeViewModel&#39;s scope</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyScopeViewModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> session: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Session</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ViewModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    viewModelOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyScopeViewModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    viewModelScope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        scopedOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Session</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>koin-compose</code></p><ul><li>Compose 函數 – 新增函數 <code>KoinMultiplatformApplication</code>，嘗試提出一個多平台 Compose 入口點。</li></ul><p><code>koin-core-viewmodel-navigation</code></p><ul><li>導航擴充功能 – 新增 <code>sharedViewModel</code> 以從導航的 NavbackEntry 重用 ViewModel 實例。</li></ul><p><code>koin-test</code></p><ul><li>註解 – Koin 配置驗證 API <code>Verify</code> 現在可協助您檢查可空、惰性及列表參數。只需使用 <code>@InjectedParam</code> 或 <code>@Provided</code> 標記一個屬性，使其被視為注入參數或動態提供。這避免了 Verify API 中複雜的宣告。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// now detected in Verify</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ComponentB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ComponentA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ComponentBParam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@InjectedParam</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ComponentA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ComponentBProvided</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Provided</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ComponentA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="棄用-⚠️" tabindex="-1">棄用 ⚠️ <a class="header-anchor" href="#棄用-⚠️" aria-label="Permalink to &quot;棄用 ⚠️&quot;">​</a></h3><p><code>koin-android</code></p><ul><li><code>ScopeViewModel</code> 現已棄用，應改用 <code>koin-core-viewmodel</code> 的 <code>ScopeViewModel</code> 類別。</li></ul><p><code>koin-compose</code></p><ul><li>Compose context API 不再需要，因為 Koin context 已在當前預設 context 上正確準備。以下已棄用並可移除：<code>KoinContext</code>。</li></ul><p><code>koin-androidx-compose</code></p><ul><li>Jetpack Compose context API 不再需要，因為 Koin context 已在當前預設 context 上正確準備。以下已棄用並可移除：<code>KoinAndroidContext</code>。</li></ul><p><code>koin-androidx-compose-navigation</code></p><ul><li>由於 lifecycle 函式庫更新，函數 <code>koinNavViewModel</code> 不再需要，可替換為 <code>koinViewModel</code>。</li></ul><p><code>koin-core-viewmodel-navigation</code></p><ul><li>由於 lifecycle 函式庫更新，函數 <code>koinNavViewModel</code> 不再需要，可替換為 <code>koinViewModel</code>。</li></ul><p><code>koin-ktor</code></p><ul><li>擴充功能 – <code>Application.koin</code> 現已棄用，應改用 <code>Application.koinModules</code> 和 <code>Application.koinModule</code>。</li></ul><h3 id="破壞性變更-💥" tabindex="-1">破壞性變更 💥 <a class="header-anchor" href="#破壞性變更-💥" aria-label="Permalink to &quot;破壞性變更 💥&quot;">​</a></h3><p><code>koin-android</code></p><ul><li>所有舊的狀態 ViewModel API 現已移除： <ul><li><code>stateViewModel()</code>、<code>getStateViewModel()</code>，請改用 <code>viewModel()</code></li><li><code>getSharedStateViewModel()</code>、<code>sharedStateViewModel()</code>，請改用 <code>viewModel()</code> 或 <code>activityViewModel()</code> 來取得共享實例</li></ul></li></ul><p><code>koin-compose</code></p><ul><li>舊的 Compose API 函數已移除： <ul><li>函數 <code>inject()</code> 已移除，轉而使用 <code>koinInject()</code></li><li>函數 <code>getViewModel()</code> 已移除，轉而使用 <code>koinViewModel()</code></li><li>函數 <code>rememberKoinInject()</code> 已移入 <code>koinInject()</code>，</li></ul></li><li>函數 <code>rememberKoinApplication</code> 已標記為 <code>@KoinInternalAPI</code></li></ul><h2 id="_4-0-4" tabindex="-1">4.0.4 <a class="header-anchor" href="#_4-0-4" aria-label="Permalink to &quot;4.0.4&quot;">​</a></h2><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>使用 Kotlin <code>2.0.21</code></p></div><p>所有使用的函式庫版本都位於 <a href="https://github.com/InsertKoinIO/koin/blob/main/projects/gradle/libs.versions.toml" target="_blank" rel="noreferrer">libs.versions.toml</a> 中</p><h3 id="新功能-🎉-2" tabindex="-1">新功能 🎉 <a class="header-anchor" href="#新功能-🎉-2" aria-label="Permalink to &quot;新功能 🎉&quot;">​</a></h3><p><code>koin-core</code></p><ul><li><code>KoinPlatformTools.generateId()</code> - 隨著 Kotlin 的新版本，我們受益於新的 <code>kotlin.uuid.uuid</code> API。<code>KoinPlatformTools.generateId()</code> Koin 函數現在使用這個新 API，以跨平台生成真實的 UUID。</li></ul><p><code>koin-viewmodel</code></p><ul><li>Koin 4.0 引入了新的 ViewModel DSL 和 API，這些共同利用了 Google/Jetbrains KMP API。為了避免程式碼庫中的重複，ViewModel API 現在位於 <code>koin-core-viewmodel</code> 和 <code>koin-core-viewmodel-navigation</code> 專案中。</li><li>ViewModel DSL 的導入是 <code>org.koin.core.module.dsl.*</code></li></ul><p>以下專案中的 API 現已穩定。</p><p><code>koin-core-coroutines</code> - 所有 API 現已穩定</p><ul><li>所有 <code>lazyModules</code></li><li><code>awaitAllStartJobs</code>、<code>onKoinStarted</code>、<code>isAllStartedJobsDone</code></li><li><code>waitAllStartJobs</code>、<code>runOnKoinStarted</code></li><li><code>KoinApplication.coroutinesEngine</code></li><li><code>Module.includes(lazy)</code></li><li><code>lazyModule()</code></li><li><code>KoinPlatformCoroutinesTools</code></li></ul><h3 id="實驗性功能-🚧-1" tabindex="-1">實驗性功能 🚧 <a class="header-anchor" href="#實驗性功能-🚧-1" aria-label="Permalink to &quot;實驗性功能 🚧&quot;">​</a></h3><p><code>koin-test</code></p><ul><li><code>ParameterTypeInjection</code> - 協助為 <code>Verify</code> API 設計動態參數注入的新 API</li></ul><p><code>koin-androidx-startup</code></p><ul><li><code>koin-androidx-startup</code> - 能夠使用 <code>AndroidX Startup</code> 啟動 Koin 的新功能，利用 <code>androidx.startup.Initializer</code> API。<code>koin-androidx-startup</code> 內的所有 API 均為實驗性。</li></ul><p><code>koin-compose</code></p><ul><li><code>rememberKoinModules</code> - 載入/卸載給定 @Composable 組件的 Koin 模組</li><li><code>rememberKoinScope</code> - 載入/卸載給定 @Composable 組件的 Koin Scope</li><li><code>KoinScope</code> - 為所有底層 Composable 子項載入 Koin scope</li></ul><h3 id="棄用-⚠️-1" tabindex="-1">棄用 ⚠️ <a class="header-anchor" href="#棄用-⚠️-1" aria-label="Permalink to &quot;棄用 ⚠️&quot;">​</a></h3><p>以下 API 已被棄用，不應再使用：</p><ul><li><p><code>koin-test</code></p><ul><li><code>checkModules</code> 的所有 API。請遷移至 <code>Verify</code> API。</li></ul></li><li><p><code>koin-android</code></p><ul><li>ViewModel DSL，轉而使用 koin-core 中新的集中式 DSL</li><li>所有狀態 ViewModel API 均已在錯誤級別棄用： <ul><li><code>stateViewModel()</code>、<code>getStateViewModel()</code>，請改用 <code>viewModel()</code></li><li><code>getSharedStateViewModel()</code>、<code>sharedStateViewModel()</code>，請改用 <code>viewModel()</code> 或 <code>activityViewModel()</code> 來取得共享實例</li></ul></li></ul></li></ul><p><code>koin-compose</code></p><ul><li><p>舊的 Compose API 函數已在錯誤級別棄用：</p><ul><li>函數 <code>inject()</code> 已棄用（錯誤級別），轉而使用 <code>koinInject()</code></li><li>函數 <code>getViewModel()</code> 已棄用（錯誤級別），轉而使用 <code>koinViewModel()</code></li><li>函數 <code>rememberKoinInject()</code> 已棄用（錯誤級別），轉而使用 <code>koinInject()</code>，</li></ul></li><li><p><code>koin-compose-viewmodel</code></p><ul><li>ViewModel DSL，轉而使用 koin-core 中新的集中式 DSL</li><li>函數 <code>koinNavViewModel</code> 現已棄用，轉而使用 <code>koinViewModel</code></li></ul></li></ul><h3 id="破壞性變更-💥-1" tabindex="-1">破壞性變更 💥 <a class="header-anchor" href="#破壞性變更-💥-1" aria-label="Permalink to &quot;破壞性變更 💥&quot;">​</a></h3><p>以下 API 已被移除，原因是上一里程碑中的棄用：</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>所有標記為 <code>@KoinReflectAPI</code> 的 API 都已移除</p></div><p><code>koin-core</code></p><ul><li><code>ApplicationAlreadyStartedException</code> 已更名為 <code>KoinApplicationAlreadyStartedException</code></li><li><code>KoinScopeComponent.closeScope()</code> 已移除，因其在內部不再使用</li><li>內部 <code>ResolutionContext</code> 已移入，以取代 <code>InstanceContext</code></li><li><code>KoinPlatformTimeTools</code>、<code>Timer</code>、<code>measureDuration</code> 已移除，轉而使用 Kotlin Time API</li><li><code>KoinContextHandler</code> 已移除，轉而使用 <code>GlobalContext</code></li></ul><p><code>koin-android</code></p><ul><li>函數 <code>fun Fragment.createScope()</code> 已移除</li><li>所有關於 ViewModel 工廠的 API (主要為內部) 已針對新的內部結構進行重寫</li></ul><p><code>koin-compose</code></p><ul><li>移除 <code>StableParametersDefinition</code>，因其在內部不再使用</li><li>移除所有 Lazy ViewModel API - 舊的 <code>viewModel()</code></li><li>移除 <code>rememberStableParametersDefinition()</code>，因其在內部不再使用</li></ul><h2 id="_3-5-6" tabindex="-1">3.5.6 <a class="header-anchor" href="#_3-5-6" aria-label="Permalink to &quot;3.5.6&quot;">​</a></h2><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>使用 Kotlin <code>1.9.22</code></p></div><p>所有使用的函式庫版本都位於 <a href="https://github.com/InsertKoinIO/koin/blob/3.5.6/projects/gradle/libs.versions.toml" target="_blank" rel="noreferrer">libs.versions.toml</a> 中</p><h3 id="新功能-🎉-3" tabindex="-1">新功能 🎉 <a class="header-anchor" href="#新功能-🎉-3" aria-label="Permalink to &quot;新功能 🎉&quot;">​</a></h3><p><code>koin-core</code></p><ul><li><code>KoinContext</code> 現在包含以下內容： <ul><li><code>fun loadKoinModules(module: Module, createEagerInstances: Boolean = false)</code></li><li><code>fun loadKoinModules(modules: List&lt;Module&gt;, createEagerInstances: Boolean = false)</code></li></ul></li><li><code>koinApplication()</code> 函數現在支援多種格式： <ul><li><code>koinApplication(createEagerInstances: Boolean = true, appDeclaration: KoinAppDeclaration? = null)</code></li><li><code>koinApplication(appDeclaration: KoinAppDeclaration?)</code></li><li><code>koinApplication(createEagerInstances: Boolean)</code></li></ul></li><li><code>KoinAppDeclaration</code> 以協助開啟聲明風格</li><li><code>KoinPlatformTimeTools</code> 用於 JS 的時間 API</li><li>iOS - <code>synchronized</code> API 用於 Touchlab Lockable API</li></ul><p><code>koin-androidx-compose</code></p><ul><li>新的 <code>KoinAndroidContext</code> 用於從 Android 環境綁定到當前的 Koin context</li></ul><p><code>koin-compose</code></p><ul><li>新的 <code>KoinContext</code> context 啟動器，帶有當前預設的 context</li></ul><p><code>koin-ktor</code></p><ul><li>現在為 Ktor 實例使用獨立的 context (使用 <code>Application.getKoin()</code> 而非預設 context)</li><li>Koin 插件引入了新的監控功能</li><li><code>RequestScope</code> 允許 scope 實例綁定到 Ktor 請求</li></ul><h3 id="實驗性功能-🚧-2" tabindex="-1">實驗性功能 🚧 <a class="header-anchor" href="#實驗性功能-🚧-2" aria-label="Permalink to &quot;實驗性功能 🚧&quot;">​</a></h3><p><code>koin-android</code></p><ul><li><code>ViewModelScope</code> 引入了用於 ViewModel scope 的實驗性 API</li></ul><p><code>koin-core-coroutines</code> - 引入新 API 以在背景載入模組</p><h3 id="棄用-⚠️-2" tabindex="-1">棄用 ⚠️ <a class="header-anchor" href="#棄用-⚠️-2" aria-label="Permalink to &quot;棄用 ⚠️&quot;">​</a></h3><p><code>koin-android</code></p><ul><li><code>getLazyViewModelForClass()</code> API 極為複雜，且呼叫預設的全域 context。建議堅持使用 Android/Fragment API</li><li><code>resolveViewModelCompat()</code> 已棄用，轉而使用 <code>resolveViewModel()</code></li></ul><p><code>koin-compose</code></p><ul><li>函數 <code>get()</code> 和 <code>inject()</code> 已棄用，轉而使用 <code>koinInject()</code></li><li>函數 <code>getViewModel()</code> 已棄用，轉而使用 <code>koinViewModel()</code></li><li>函數 <code>rememberKoinInject()</code> 已棄用，轉而使用 <code>koinInject()</code></li></ul><h3 id="破壞性變更-💥-2" tabindex="-1">破壞性變更 💥 <a class="header-anchor" href="#破壞性變更-💥-2" aria-label="Permalink to &quot;破壞性變更 💥&quot;">​</a></h3><p><code>koin-core</code></p><ul><li><code>Koin.loadModules(modules: List&lt;Module&gt;, allowOverride: Boolean = true, createEagerInstances : Boolean = false)</code> 取代了 <code>Koin.loadModules(modules: List&lt;Module&gt;, allowOverride: Boolean = true)</code></li><li>已將屬性 <code>KoinExtension.koin</code> 移至函數 <code>KoinExtension.onRegister()</code></li><li>iOS - <code>internal fun globalContextByMemoryModel(): KoinContext</code> 用於 <code>MutableGlobalContext</code></li></ul><p><code>koin-compose</code></p><ul><li>函數 <code>KoinApplication(moduleList: () -&gt; List&lt;Module&gt;, content: @Composable () -&gt; Unit)</code> 已移除，轉而使用 <code>KoinContext</code> 和 <code>KoinAndroidContext</code></li></ul><h2 id="_3-4-3" tabindex="-1">3.4.3 <a class="header-anchor" href="#_3-4-3" aria-label="Permalink to &quot;3.4.3&quot;">​</a></h2><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>使用 Kotlin <code>1.8.21</code></p></div><h3 id="新功能-🎉-4" tabindex="-1">新功能 🎉 <a class="header-anchor" href="#新功能-🎉-4" aria-label="Permalink to &quot;新功能 🎉&quot;">​</a></h3><p><code>koin-core</code></p><ul><li>新的 ExtensionManager API，用於協助為 Koin 編寫擴充引擎 - <code>ExtensionManager</code> + <code>KoinExtension</code></li><li>Parameters API 更新，包含 <code>parameterArrayOf</code> 及 <code>parameterSetOf</code></li></ul><p><code>koin-test</code></p><ul><li><code>Verification</code> API - 協助在模組上執行 <code>verify</code>。</li></ul><p><code>koin-android</code></p><ul><li>ViewModel 注入的內部機制</li><li>新增 <code>AndroidScopeComponent.onCloseScope()</code> 函數回呼</li></ul><p><code>koin-android-test</code></p><ul><li><code>Verification</code> API - 協助在模組上執行 <code>androidVerify()</code>。</li></ul><p><code>koin-androidx-compose</code></p><ul><li>新增 <code>get()</code></li><li>新增 <code>getViewModel()</code></li><li>新的 Scopes <code>KoinActivityScope</code>、<code>KoinFragmentScope</code></li></ul><p><code>koin-androidx-compose-navigation</code> - 用於導航的新模組</p><ul><li>新增 <code>koinNavViewModel()</code></li></ul><p><code>koin-compose</code> - 用於 Compose 的新多平台 API</p><ul><li><code>koinInject</code>、<code>rememberKoinInject</code></li><li><code>KoinApplication</code></li></ul><h3 id="實驗性功能-🚧-3" tabindex="-1">實驗性功能 🚧 <a class="header-anchor" href="#實驗性功能-🚧-3" aria-label="Permalink to &quot;實驗性功能 🚧&quot;">​</a></h3><p><code>koin-compose</code> - 用於 Compose 的新實驗性多平台 API</p><ul><li><code>rememberKoinModules</code></li><li><code>KoinScope</code>、<code>rememberKoinScope</code></li></ul><h3 id="棄用-⚠️-3" tabindex="-1">棄用 ⚠️ <a class="header-anchor" href="#棄用-⚠️-3" aria-label="Permalink to &quot;棄用 ⚠️&quot;">​</a></h3><p><code>koin-compose</code></p><ul><li>函數 <code>get()</code> 取代 <code>inject()</code> 的使用，避免了 Lazy 函數</li><li>函數 <code>getViewModel()</code> 取代 <code>viewModel()</code> 函數，使用時避免了 Lazy 函數</li></ul><h3 id="破壞性變更-💥-3" tabindex="-1">破壞性變更 💥 <a class="header-anchor" href="#破壞性變更-💥-3" aria-label="Permalink to &quot;破壞性變更 💥&quot;">​</a></h3><p><code>koin-android</code></p><ul><li><code>LifecycleScopeDelegate</code> 現已移除</li></ul><p><code>koin-androidx-compose</code></p><ul><li>移除 <code>getStateViewModel</code>，轉而使用 <code>koinViewModel</code></li></ul>`,157)]))}const E=e(l,[["render",n]]);export{r as __pageData,E as default};
