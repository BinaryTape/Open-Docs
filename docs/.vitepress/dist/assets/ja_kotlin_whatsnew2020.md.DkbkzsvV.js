import{_ as k}from"./chunks/accessing-sourse-sets.FkWDOZ3N.js";import{_ as r,C as p,c as d,o,ag as h,G as n,j as s,w as t,a}from"./chunks/framework.Bksy39di.js";const C=JSON.parse('{"title":"Kotlin 2.0.20 の新機能","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/whatsnew2020.md","filePath":"ja/kotlin/whatsnew2020.md","lastUpdated":1754307826000}'),c={name:"ja/kotlin/whatsnew2020.md"};function E(g,i,y,u,F,m){const e=p("tab"),l=p("tabs");return o(),d("div",null,[i[4]||(i[4]=h(`<h1 id="kotlin-2-0-20-の新機能" tabindex="-1">Kotlin 2.0.20 の新機能 <a class="header-anchor" href="#kotlin-2-0-20-の新機能" aria-label="Permalink to &quot;Kotlin 2.0.20 の新機能&quot;">​</a></h1><p><em><a href="/ja/kotlin/releases#release-details">リリース日: 2024年8月22日</a></em></p><p>Kotlin 2.0.20 がリリースされました！ このバージョンには、Kotlin K2 コンパイラが Stable になった Kotlin 2.0.0 のパフォーマンス改善とバグ修正が含まれています。このリリースにおけるその他の主なハイライトは以下のとおりです。</p><ul><li><a href="#data-class-copy-function-to-have-the-same-visibility-as-constructor">データクラスの <code>copy</code> 関数がコンストラクタと同じ可視性を持つように</a></li><li><a href="#static-accessors-for-source-sets-from-the-default-target-hierarchy">マルチプラットフォームプロジェクトで、デフォルトのターゲット階層からのソースセットに対する静的アクセサーが利用可能に</a></li><li><a href="#concurrent-marking-in-garbage-collector">Kotlin/Native のガベージコレクターで並行マーキングが可能に</a></li><li><a href="#new-location-of-experimentalwasmdsl-annotation">Kotlin/Wasm の <code>@ExperimentalWasmDsl</code> アノテーションの新しい場所</a></li><li><a href="#gradle">Gradle 8.6～8.8 バージョンのサポートが追加された</a></li><li><a href="#option-to-share-jvm-artifacts-between-projects-as-class-files">クラスファイルとして Gradle プロジェクト間で JVM アーティファクトを共有する新しいオプション</a></li><li><a href="#compose-compiler">Compose コンパイラが更新された</a></li><li><a href="#support-for-uuids-in-the-common-kotlin-standard-library">共通 Kotlin 標準ライブラリに UUID のサポートが追加された</a></li></ul><h2 id="ide-サポート" tabindex="-1">IDE サポート <a class="header-anchor" href="#ide-サポート" aria-label="Permalink to &quot;IDE サポート&quot;">​</a></h2><p>2.0.20 をサポートする Kotlin プラグインは、最新の IntelliJ IDEA および Android Studio にバンドルされています。 IDE の Kotlin プラグインを更新する必要はありません。 ビルドスクリプトで Kotlin のバージョンを 2.0.20 に変更するだけです。</p><p>詳細については、<a href="/ja/kotlin/releases#update-to-a-new-kotlin-version">新しいリリースへの更新</a>を参照してください。</p><h2 id="言語" tabindex="-1">言語 <a class="header-anchor" href="#言語" aria-label="Permalink to &quot;言語&quot;">​</a></h2><p>Kotlin 2.0.20 では、データクラスの一貫性を改善し、実験的なコンテキストレシーバー機能を置き換えるための変更が導入され始めます。</p><h3 id="データクラスの-copy-関数がコンストラクタと同じ可視性を持つように" tabindex="-1">データクラスの <code>copy</code> 関数がコンストラクタと同じ可視性を持つように <a class="header-anchor" href="#データクラスの-copy-関数がコンストラクタと同じ可視性を持つように" aria-label="Permalink to &quot;データクラスの \`copy\` 関数がコンストラクタと同じ可視性を持つように&quot;">​</a></h3><p>現在、<code>private</code> コンストラクタを使用してデータクラスを作成すると、自動生成される <code>copy()</code> 関数は同じ可視性を持ちません。これは、コードの後で問題を引き起こす可能性があります。将来の Kotlin リリースでは、<code>copy()</code> 関数のデフォルトの可視性がコンストラクタと同じになるようにする動作を導入します。この変更は、コードのスムーズな移行を支援するために段階的に導入されます。</p><p>Kotlin 2.0.20 から移行計画を開始し、将来的に可視性が変更されるコードに警告を発行します。例:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Triggers a warning in 2.0.20</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PositiveInteger</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> private</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> number: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    companion</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(number: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PositiveInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (number </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PositiveInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(number) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> positiveNumber </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PositiveInteger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) ?: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Triggers a warning in 2.0.20</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> negativeNumber </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> positiveNumber.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">copy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(number </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Warning: Non-public primary constructor is exposed via the generated &#39;copy()&#39; method of the &#39;data&#39; class.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // The generated &#39;copy()&#39; will change its visibility in future releases.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>移行計画に関する最新情報については、<a href="https://youtrack.jetbrains.com/issue/KT-11914" target="_blank" rel="noreferrer">YouTrack</a> の対応する課題を参照してください。</p><p>この動作をより詳細に制御できるように、Kotlin 2.0.20 では 2 つのアノテーションを導入しました。</p><ul><li><code>@ConsistentCopyVisibility</code>: 後続のリリースでデフォルトになる前に、現在の動作をオプトインします。</li><li><code>@ExposedCopyVisibility</code>: 動作をオプトアウトし、宣言箇所での警告を抑制します。 このアノテーションを使用しても、<code>copy()</code> 関数が呼び出されたときにコンパイラは警告を報告します。</li></ul><p>個々のクラスではなくモジュール全体で 2.0.20 ですでに新しい動作をオプトインしたい場合は、<code>-Xconsistent-data-class-copy-visibility</code> コンパイラオプションを使用できます。 このオプションは、モジュール内のすべてのデータクラスに <code>@ConsistentCopyVisibility</code> アノテーションを追加するのと同じ効果があります。</p><h3 id="コンテキストレシーバーからコンテキストパラメータへの段階的な置き換え" tabindex="-1">コンテキストレシーバーからコンテキストパラメータへの段階的な置き換え <a class="header-anchor" href="#コンテキストレシーバーからコンテキストパラメータへの段階的な置き換え" aria-label="Permalink to &quot;コンテキストレシーバーからコンテキストパラメータへの段階的な置き換え&quot;">​</a></h3><p>Kotlin 1.6.20 で、<a href="/ja/kotlin/whatsnew1620#prototype-of-context-receivers-for-kotlin-jvm">コンテキストレシーバー</a>を<a href="/ja/kotlin/components-stability#stability-levels-explained">実験的</a>機能として導入しました。コミュニティからのフィードバックを受けて、このアプローチは継続せず、異なる方向性で進めることにしました。</p><p>将来の Kotlin リリースでは、コンテキストレシーバーはコンテキストパラメータに置き換えられます。コンテキストパラメータはまだ設計フェーズにあり、提案は <a href="https://github.com/Kotlin/KEEP/blob/context-parameters/proposals/context-parameters.md" target="_blank" rel="noreferrer">KEEP</a> で確認できます。</p><p>コンテキストパラメータの実装にはコンパイラに大幅な変更が必要なため、コンテキストレシーバーとコンテキストパラメータを同時にサポートしないことにしました。この決定により、実装が大幅に簡素化され、不安定な動作のリスクが最小限に抑えられます。</p><p>コンテキストレシーバーがすでに多くの開発者によって使用されていることは理解しています。したがって、コンテキストレシーバーのサポートを段階的に削除し始めます。Kotlin 2.0.20 から移行計画を開始し、<code>-Xcontext-receivers</code> コンパイラオプションとともにコンテキストレシーバーが使用されているコードに警告が発行されます。例:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyContext</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MyContext)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Warning: Experimental context receivers are deprecated and will be superseded by context parameters. </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Please don&#39;t use context receivers. You can either pass parameters explicitly or use members with extensions.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> someFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>この警告は、将来の Kotlin リリースでエラーになります。</p><p>コードでコンテキストレシーバーを使用している場合は、コードを以下のいずれかに移行することをお勧めします。</p><ul><li><p>明示的なパラメータ。</p><table><tr><td>Before</td><td>After</td></tr><tr><td><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ContextReceiverType)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> someFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    contextReceiverMember</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></td><td><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> someFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(explicitContext: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ContextReceiverType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    explicitContext.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">contextReceiverMember</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></td></tr></table></li><li><p>拡張メンバー関数 (可能な場合)。</p><table><tr><td>Before</td><td>After</td></tr><tr><td><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ContextReceiverType)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> contextReceiverMember</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TODO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ContextReceiverType)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> someFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    contextReceiverMember</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></td><td><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ContextReceiverType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> contextReceiverMember</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TODO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ContextReceiverType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">someFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    contextReceiverMember</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></td></tr></table></li></ul><p>または、コンテキストパラメータがコンパイラでサポートされる Kotlin リリースまで待つこともできます。コンテキストパラメータは、最初は実験的な機能として導入されることに注意してください。</p><h2 id="kotlin-multiplatform" tabindex="-1">Kotlin Multiplatform <a class="header-anchor" href="#kotlin-multiplatform" aria-label="Permalink to &quot;Kotlin Multiplatform&quot;">​</a></h2><p>Kotlin 2.0.20 では、マルチプラットフォームプロジェクトにおけるソースセット管理の改善と、Gradle の最近の変更による一部の Gradle Java プラグインとの互換性の非推奨化が行われています。</p><h3 id="デフォルトのターゲット階層からのソースセットに対する静的アクセサー" tabindex="-1">デフォルトのターゲット階層からのソースセットに対する静的アクセサー <a class="header-anchor" href="#デフォルトのターゲット階層からのソースセットに対する静的アクセサー" aria-label="Permalink to &quot;デフォルトのターゲット階層からのソースセットに対する静的アクセサー&quot;">​</a></h3><p>Kotlin 1.9.20 以降、<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-hierarchy.html#default-hierarchy-template" target="_blank" rel="noreferrer">デフォルト階層テンプレート</a>がすべての Kotlin Multiplatform プロジェクトに自動的に適用されます。 そして、デフォルト階層テンプレートのすべてのソースセットに対して、Kotlin Gradle プラグインはタイプセーフなアクセサーを提供しました。 これにより、<code>by getting</code> や <code>by creating</code> のような構文を使用せずに、指定されたすべてのターゲットのソースセットにアクセスできるようになりました。</p><p>Kotlin 2.0.20 は、IDE 体験をさらに向上させることを目指しています。デフォルト階層テンプレートのすべてのソースセットに対して、<code>sourceSets {}</code> ブロックで静的アクセサーを提供するようになりました。 この変更により、名前によるソースセットへのアクセスがより簡単で予測可能になると考えられます。</p><p>各ソースセットには、サンプルを含む詳細な KDoc コメントと、対応するターゲットを最初に宣言せずにソースセットにアクセスしようとした場合の警告を含む診断メッセージが表示されるようになりました。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    linuxX64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    linuxArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    mingwX64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        commonMain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">languageSettings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            progressiveMode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        jvmMain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        linuxX64Main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        linuxArm64Main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Warning: accessing source set without registering the target</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        iosX64Main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><img src="`+k+`" alt="ソースセットを名前でアクセスする" width="700"></p><p><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-hierarchy.html" target="_blank" rel="noreferrer">Kotlin Multiplatform の階層型プロジェクト構造</a>について詳しく学ぶ。</p><h3 id="kotlin-multiplatform-gradle-プラグインと-gradle-java-プラグインとの互換性の非推奨化" tabindex="-1">Kotlin Multiplatform Gradle プラグインと Gradle Java プラグインとの互換性の非推奨化 <a class="header-anchor" href="#kotlin-multiplatform-gradle-プラグインと-gradle-java-プラグインとの互換性の非推奨化" aria-label="Permalink to &quot;Kotlin Multiplatform Gradle プラグインと Gradle Java プラグインとの互換性の非推奨化&quot;">​</a></h3><p>Kotlin 2.0.20 では、Kotlin Multiplatform Gradle プラグインと以下の Gradle Java プラグインのいずれかを同じプロジェクトに適用した場合に、非推奨の警告を導入します。それらのプラグインは、<a href="https://docs.gradle.org/current/userguide/java_plugin.html" target="_blank" rel="noreferrer">Java</a>、<a href="https://docs.gradle.org/current/userguide/java_library_plugin.html" target="_blank" rel="noreferrer">Java Library</a>、および <a href="https://docs.gradle.org/current/userguide/application_plugin.html" target="_blank" rel="noreferrer">Application</a> です。 警告は、マルチプラットフォームプロジェクト内の別の Gradle プラグインが Gradle Java プラグインを適用する場合にも表示されます。 たとえば、<a href="https://docs.spring.io/spring-boot/gradle-plugin/index.html" target="_blank" rel="noreferrer">Spring Boot Gradle プラグイン</a>は Application プラグインを自動的に適用します。</p><p>この非推奨の警告は、Kotlin Multiplatform のプロジェクトモデルと Gradle の Java エコシステムプラグインとの間の根本的な互換性の問題のために追加しました。Gradle の Java エコシステムプラグインは現在、他のプラグインが以下のことを考慮していません。</p><ul><li>Java エコシステムプラグインとは異なる方法で JVM ターゲットを公開またはコンパイルする可能性がある。</li><li>同じプロジェクトに JVM と Android のように 2 つの異なる JVM ターゲットを持つ可能性がある。</li><li>潜在的に複数の非 JVM ターゲットを持つ複雑なマルチプラットフォームプロジェクト構造を持つ可能性がある。</li></ul><p>残念ながら、Gradle は現在これらの問題に対処するための API を提供していません。</p><p>以前、Kotlin Multiplatform では Java エコシステムプラグインとの統合を支援するためにいくつかの回避策を使用していました。 しかし、これらの回避策は互換性の問題を真に解決することはなく、Gradle 8.8 のリリース以降、これらの回避策はもはや不可能になりました。詳細については、<a href="https://youtrack.jetbrains.com/issue/KT-66542/Gradle-JVM-target-with-withJava-produces-a-deprecation-warning" target="_blank" rel="noreferrer">YouTrack の課題</a>を参照してください。</p><p>この互換性問題をどのように解決するかはまだ明確ではありませんが、Kotlin Multiplatform プロジェクトでの Java ソースコンパイルのサポートを継続することを約束します。少なくとも、Java ソースのコンパイルと、マルチプラットフォームプロジェクト内での Gradle の <a href="https://docs.gradle.org/current/javadoc/org/gradle/api/plugins/JavaBasePlugin.html" target="_blank" rel="noreferrer"><code>java-base</code></a> プラグインの使用をサポートします。</p><p>その間、マルチプラットフォームプロジェクトでこの非推奨の警告が表示された場合は、以下のことをお勧めします。</p><ol><li>プロジェクトで実際に Gradle Java プラグインが必要かどうかを判断します。必要ない場合は、削除を検討してください。</li><li>Gradle Java プラグインが単一のタスクにのみ使用されているかどうかを確認します。その場合、それほど労力をかけずにプラグインを削除できる可能性があります。たとえば、タスクが Gradle Java プラグインを使用して Javadoc JAR ファイルを作成する場合、代わりに Javadoc タスクを手動で定義できます。</li></ol><p>それ以外の場合、マルチプラットフォームプロジェクトで Kotlin Multiplatform Gradle プラグインとこれらの Gradle Java プラグインの両方を使用したい場合は、以下のことをお勧めします。</p><ol><li>マルチプラットフォームプロジェクトに別のサブプロジェクトを作成します。</li><li>その別のサブプロジェクトで、Java 用の Gradle プラグインを適用します。</li><li>その別のサブプロジェクトで、親マルチプラットフォームプロジェクトへの依存関係を追加します。</li></ol><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>その個別のサブプロジェクトはマルチプラットフォームプロジェクトであってはならず、マルチプラットフォームプロジェクトへの依存関係を設定するためにのみ使用してください。</p></div><p>たとえば、<code>my-main-project</code> というマルチプラットフォームプロジェクトがあり、<a href="https://docs.gradle.org/current/userguide/application_plugin.html" target="_blank" rel="noreferrer">Application</a> Gradle プラグインを使用して JVM アプリケーションを実行したいとします。</p><p>サブプロジェクト（<code>subproject-A</code> とします）を作成すると、親プロジェクトの構造は次のようになります。</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>.</span></span>
<span class="line"><span>├── build.gradle.kts</span></span>
<span class="line"><span>├── settings.gradle</span></span>
<span class="line"><span>├── subproject-A</span></span>
<span class="line"><span>    └── build.gradle.kts</span></span>
<span class="line"><span>    └── src</span></span>
<span class="line"><span>        └── Main.java</span></span></code></pre></div><p>サブプロジェクトの <code>build.gradle.kts</code> ファイルで、<code>plugins {}</code> ブロックに Application プラグインを適用します。</p>`,52)),n(l,{group:"build-script"},{default:t(()=>[n(e,{title:"Kotlin","group-key":"kotlin"},{default:t(()=>i[0]||(i[0]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"plugins"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    id"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"application"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),n(e,{title:"Groovy","group-key":"groovy"},{default:t(()=>i[1]||(i[1]=[s("div",{class:"language-groovy vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"groovy"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"plugins {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    id("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'application'"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),i[5]||(i[5]=s("p",null,[a("サブプロジェクトの "),s("code",null,"build.gradle.kts"),a(" ファイルで、親マルチプラットフォームプロジェクトへの依存関係を追加します。")],-1)),n(l,{group:"build-script"},{default:t(()=>[n(e,{title:"Kotlin","group-key":"kotlin"},{default:t(()=>i[2]||(i[2]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"dependencies"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    implementation"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"project"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'":my-main-project"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")) "),s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// The name of your parent multiplatform project")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),n(e,{title:"Groovy","group-key":"groovy"},{default:t(()=>i[3]||(i[3]=[s("div",{class:"language-groovy vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"groovy"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"dependencies {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    implementation project("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"':my-main-project'"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") "),s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// The name of your parent multiplatform project")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),i[6]||(i[6]=h(`<p>これで、親プロジェクトは両方のプラグインで動作するように設定されました。</p><h2 id="kotlin-native" tabindex="-1">Kotlin/Native <a class="header-anchor" href="#kotlin-native" aria-label="Permalink to &quot;Kotlin/Native&quot;">​</a></h2><p>Kotlin/Native では、ガベージコレクターの改善と、Swift/Objective-C から Kotlin の中断関数を呼び出すための改善が行われています。</p><h3 id="ガベージコレクターにおける並行マーキング" tabindex="-1">ガベージコレクターにおける並行マーキング <a class="header-anchor" href="#ガベージコレクターにおける並行マーキング" aria-label="Permalink to &quot;ガベージコレクターにおける並行マーキング&quot;">​</a></h3><p>Kotlin 2.0.20 では、JetBrains チームは Kotlin/Native のランタイムパフォーマンスを向上させるための新たな一歩を踏み出します。 ガベージコレクター (GC) における並行マーキングの実験的サポートを追加しました。</p><p>デフォルトでは、GC がヒープ内のオブジェクトをマーキングしている間、アプリケーションスレッドを一時停止する必要があります。これは、Compose Multiplatform で構築された UI アプリケーションなど、レイテンシーが重要なアプリケーションのパフォーマンスにとって重要な GC ポーズ時間の長さに大きく影響します。</p><p>これで、ガベージコレクションのマーキングフェーズをアプリケーションスレッドと同時に実行できるようになりました。 これにより、GC のポーズ時間が大幅に短縮され、アプリの応答性の向上に役立つはずです。</p><h4 id="有効にする方法" tabindex="-1">有効にする方法 <a class="header-anchor" href="#有効にする方法" aria-label="Permalink to &quot;有効にする方法&quot;">​</a></h4><p>この機能は現在<a href="/ja/kotlin/components-stability#stability-levels-explained">実験的</a>です。 有効にするには、<code>gradle.properties</code> ファイルに次のオプションを設定します。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.native.binary.gc=cms</span></span></code></pre></div><p>問題が見つかった場合は、課題トラッカー <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a> まで報告してください。</p><h3 id="ビットコード埋め込みのサポートが削除されました" tabindex="-1">ビットコード埋め込みのサポートが削除されました <a class="header-anchor" href="#ビットコード埋め込みのサポートが削除されました" aria-label="Permalink to &quot;ビットコード埋め込みのサポートが削除されました&quot;">​</a></h3><p>Kotlin 2.0.20 以降、Kotlin/Native コンパイラはビットコード埋め込みをサポートしなくなりました。 ビットコード埋め込みは Xcode 14 で非推奨になり、Xcode 15 で Apple のすべてのターゲットから削除されました。</p><p>現在、フレームワーク設定の <code>embedBitcode</code> パラメータ、および <code>-Xembed-bitcode</code> と <code>-Xembed-bitcode-marker</code> コマンドライン引数は非推奨です。</p><p>以前のバージョンの Xcode をまだ使用しているが Kotlin 2.0.20 にアップグレードしたい場合は、Xcode プロジェクトでビットコード埋め込みを無効にしてください。</p><h3 id="signpost-を使用した-gc-パフォーマンス監視の変更点" tabindex="-1">Signpost を使用した GC パフォーマンス監視の変更点 <a class="header-anchor" href="#signpost-を使用した-gc-パフォーマンス監視の変更点" aria-label="Permalink to &quot;Signpost を使用した GC パフォーマンス監視の変更点&quot;">​</a></h3><p>Kotlin 2.0.0 では、Xcode Instruments を介して Kotlin/Native ガベージコレクター (GC) のパフォーマンスを監視できるようになりました。Instruments には Signpost ツールが含まれており、GC の一時停止をイベントとして表示できます。 これは、iOS アプリでの GC 関連のフリーズをチェックする際に役立ちます。</p><p>この機能はデフォルトで有効になっていましたが、残念ながら、アプリケーションが Xcode Instruments と同時に実行されると、クラッシュにつながることがありました。 Kotlin 2.0.20 以降、次のコンパイラオプションを使用して明示的なオプトインが必要です。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>-Xbinary=enableSafepointSignposts=true</span></span></code></pre></div><p>GC パフォーマンス分析の詳細については、<a href="/ja/kotlin/native-memory-manager#monitor-gc-performance">ドキュメント</a>を参照してください。</p><h3 id="swift-objective-c-からメインスレッド以外で-kotlin-の中断関数を呼び出す機能" tabindex="-1">Swift/Objective-C からメインスレッド以外で Kotlin の中断関数を呼び出す機能 <a class="header-anchor" href="#swift-objective-c-からメインスレッド以外で-kotlin-の中断関数を呼び出す機能" aria-label="Permalink to &quot;Swift/Objective-C からメインスレッド以外で Kotlin の中断関数を呼び出す機能&quot;">​</a></h3><p>以前は、Kotlin/Native にはデフォルトの制限があり、Swift および Objective-C から Kotlin の中断関数を呼び出すことができるのはメインスレッドのみに限定されていました。Kotlin 2.0.20 ではその制限が解除され、Swift/Objective-C からあらゆるスレッドで Kotlin の <code>suspend</code> 関数を実行できるようになりました。</p><p>以前、メインスレッド以外でのデフォルトの動作を <code>kotlin.native.binary.objcExportSuspendFunctionLaunchThreadRestriction=none</code> バイナリオプションで切り替えていた場合は、<code>gradle.properties</code> ファイルから削除できるようになりました。</p><h2 id="kotlin-wasm" tabindex="-1">Kotlin/Wasm <a class="header-anchor" href="#kotlin-wasm" aria-label="Permalink to &quot;Kotlin/Wasm&quot;">​</a></h2><p>Kotlin 2.0.20 では、Kotlin/Wasm は名前付きエクスポートへの移行を継続し、<code>@ExperimentalWasmDsl</code> アノテーションを再配置します。</p><h3 id="デフォルトエクスポート使用時のエラー" tabindex="-1">デフォルトエクスポート使用時のエラー <a class="header-anchor" href="#デフォルトエクスポート使用時のエラー" aria-label="Permalink to &quot;デフォルトエクスポート使用時のエラー&quot;">​</a></h3><p>名前付きエクスポートへの移行の一環として、Kotlin/Wasm エクスポートの JavaScript でデフォルトインポートを使用すると、以前は警告メッセージがコンソールに出力されていました。</p><p>名前付きエクスポートを完全にサポートするために、この警告はエラーに昇格されました。デフォルトインポートを使用すると、次のエラーメッセージが表示されます。</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Do not use default import. Use the corresponding named import instead.</span></span></code></pre></div><p>この変更は、名前付きエクスポートへの移行のための非推奨化サイクルの一部です。各フェーズで予想される内容は次のとおりです。</p><ul><li><strong>バージョン 2.0.0</strong>: デフォルトエクスポートを介したエンティティのエクスポートが非推奨であることを説明する警告メッセージがコンソールに出力されます。</li><li><strong>バージョン 2.0.20</strong>: 対応する名前付きインポートの使用を要求するエラーが発生します。</li><li><strong>バージョン 2.1.0</strong>: デフォルトインポートの使用は完全に削除されます。</li></ul><h3 id="experimentalwasmdsl-アノテーションの新しい場所" tabindex="-1">ExperimentalWasmDsl アノテーションの新しい場所 <a class="header-anchor" href="#experimentalwasmdsl-アノテーションの新しい場所" aria-label="Permalink to &quot;ExperimentalWasmDsl アノテーションの新しい場所&quot;">​</a></h3><p>以前、WebAssembly (Wasm) 機能の <code>@ExperimentalWasmDsl</code> アノテーションは、Kotlin Gradle プラグイン内の次の場所に配置されていました。</p><div class="language-Kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.jetbrains.kotlin.gradle.targets.js.dsl.ExperimentalWasmDsl</span></span></code></pre></div><p>2.0.20 では、<code>@ExperimentalWasmDsl</code> アノテーションは次の場所に再配置されました。</p><div class="language-Kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.jetbrains.kotlin.gradle.ExperimentalWasmDsl</span></span></code></pre></div><p>以前の場所は非推奨となり、未解決の参照によるビルド失敗につながる可能性があります。</p><p><code>@ExperimentalWasmDsl</code> アノテーションの新しい場所を反映するために、Gradle ビルドスクリプトの import ステートメントを更新してください。 新しい <code>@ExperimentalWasmDsl</code> の場所に対して明示的な import を使用します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.kotlin.gradle.ExperimentalWasmDsl</span></span></code></pre></div><p>または、古いパッケージからのスターインポートステートメントを削除します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.kotlin.gradle.targets.js.dsl.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span></code></pre></div><h2 id="kotlin-js" tabindex="-1">Kotlin/JS <a class="header-anchor" href="#kotlin-js" aria-label="Permalink to &quot;Kotlin/JS&quot;">​</a></h2><p>Kotlin/JS では、JavaScript で静的メンバーをサポートし、JavaScript から Kotlin コレクションを作成するための実験的な機能がいくつか導入されています。</p><h3 id="javascript-で-kotlin-の静的メンバーを使用するサポート" tabindex="-1">JavaScript で Kotlin の静的メンバーを使用するサポート <a class="header-anchor" href="#javascript-で-kotlin-の静的メンバーを使用するサポート" aria-label="Permalink to &quot;JavaScript で Kotlin の静的メンバーを使用するサポート&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>この機能は<a href="/ja/kotlin/components-stability#stability-levels-explained">実験的</a>です。いつでも削除または変更される可能性があります。 評価目的でのみ使用してください。<a href="https://youtrack.jetbrains.com/issue/KT-18891/JS-provide-a-way-to-declare-static-members-JsStatic" target="_blank" rel="noreferrer">YouTrack</a> でフィードバックをお待ちしております。</p></div><p>Kotlin 2.0.20 以降、<code>@JsStatic</code> アノテーションを使用できるようになりました。これは <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.jvm/-jvm-static/" target="_blank" rel="noreferrer">@JvmStatic</a> と同様に機能し、コンパイラに追加の静的メソッドをターゲット宣言に対して生成するよう指示します。これにより、Kotlin コードの静的メンバーを JavaScript で直接使用できるようになります。</p><p><code>@JsStatic</code> アノテーションは、名前付きオブジェクトで定義された関数、およびクラスやインターフェース内に宣言されたコンパニオンオブジェクトで使用できます。コンパイラは、オブジェクトの静的メソッドと、オブジェクト自体のインスタンスメソッドの両方を生成します。例:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> C</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    companion</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        @JsStatic</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> callStatic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> callNonStatic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>これで、<code>callStatic()</code> は JavaScript で静的になりますが、<code>callNonStatic()</code> は静的ではありません。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">C</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">callStatic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();              </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Works, accessing the static function</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">C</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">callNonStatic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();           </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Error, not a static function in the generated JavaScript</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">C</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.Companion.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">callStatic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Instance method remains</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">C</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.Companion.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">callNonStatic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// The only way it works</span></span></code></pre></div><p><code>@JsStatic</code> アノテーションは、オブジェクトまたはコンパニオンオブジェクトのプロパティにも適用でき、その getter および setter メソッドをそのオブジェクトまたはコンパニオンオブジェクトを含むクラスの静的メンバーにします。</p><h3 id="javascript-から-kotlin-コレクションを作成する機能" tabindex="-1">JavaScript から Kotlin コレクションを作成する機能 <a class="header-anchor" href="#javascript-から-kotlin-コレクションを作成する機能" aria-label="Permalink to &quot;JavaScript から Kotlin コレクションを作成する機能&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>この機能は<a href="/ja/kotlin/components-stability#stability-levels-explained">実験的</a>です。いつでも削除または変更される可能性があります。 評価目的でのみ使用してください。<a href="https://youtrack.jetbrains.com/issue/KT-69133/Kotlin-JS-Add-support-for-collection-instantiation-in-JavaScript" target="_blank" rel="noreferrer">YouTrack</a> でフィードバックをお待ちしております。</p></div><p>Kotlin 2.0.0 では、Kotlin コレクションを JavaScript (および TypeScript) にエクスポートする機能が導入されました。今回、JetBrains チームはコレクションの相互運用性を改善するためにもう一歩踏み出します。Kotlin 2.0.20 以降、JavaScript/TypeScript 側から Kotlin コレクションを直接作成できるようになりました。</p><p>JavaScript から Kotlin コレクションを作成し、それらをエクスポートされたコンストラクタまたは関数への引数として渡すことができます。 エクスポートされた宣言内でコレクションに言及するとすぐに、Kotlin は JavaScript/TypeScript で利用可能なコレクションのファクトリを生成します。</p><p>次のエクスポートされた関数を見てください。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Kotlin</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JsExport</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> consumeMutableMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(map: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MutableMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;)</span></span></code></pre></div><p><code>MutableMap</code> コレクションに言及されているため、Kotlin は JavaScript/TypeScript から利用可能なファクトリメソッドを持つオブジェクトを生成します。 このファクトリメソッドは、JavaScript の <code>Map</code> から <code>MutableMap</code> を作成します。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// JavaScript</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { consumeMutableMap } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;an-awesome-kotlin-module&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { KtMutableMap } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;an-awesome-kotlin-module/kotlin-kotlin-stdlib&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">consumeMutableMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    KtMutableMap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fromJsMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;First&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Second&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]]))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>この機能は、<code>Set</code>、<code>Map</code>、<code>List</code> の Kotlin コレクション型と、それらのミュータブルな対応物で利用できます。</p><h2 id="gradle" tabindex="-1">Gradle <a class="header-anchor" href="#gradle" aria-label="Permalink to &quot;Gradle&quot;">​</a></h2><p>Kotlin 2.0.20 は Gradle 6.8.3 から 8.6 まで完全に互換性があります。Gradle 8.7 および 8.8 もサポートされていますが、1 つだけ例外があります。Kotlin Multiplatform Gradle プラグインを使用している場合、JVM ターゲットで <code>withJava()</code> 関数を呼び出すマルチプラットフォームプロジェクトで非推奨の警告が表示されることがあります。この問題はできるだけ早く修正する予定です。</p><p>詳細については、<a href="https://youtrack.jetbrains.com/issue/KT-66542/Gradle-JVM-target-with-withJava-produces-a-deprecation-warning" target="_blank" rel="noreferrer">YouTrack</a> の課題を参照してください。</p><p>また、最新の Gradle リリースまでの Gradle バージョンを使用することもできますが、その場合、非推奨の警告が表示されたり、一部の新しい Gradle 機能が動作しない可能性があることに注意してください。</p><p>このバージョンでは、JVM 履歴ファイルに基づく古いインクリメンタルコンパイルアプローチの非推奨化プロセス開始や、プロジェクト間で JVM アーティファクトを共有する新しい方法などの変更が加えられています。</p><h3 id="jvm-履歴ファイルに基づくインクリメンタルコンパイルの非推奨化" tabindex="-1">JVM 履歴ファイルに基づくインクリメンタルコンパイルの非推奨化 <a class="header-anchor" href="#jvm-履歴ファイルに基づくインクリメンタルコンパイルの非推奨化" aria-label="Permalink to &quot;JVM 履歴ファイルに基づくインクリメンタルコンパイルの非推奨化&quot;">​</a></h3><p>Kotlin 2.0.20 では、JVM 履歴ファイルに基づくインクリメンタルコンパイルのアプローチが非推奨となり、Kotlin 1.8.20 以降デフォルトで有効になっている新しいインクリメンタルコンパイルのアプローチが推奨されます。</p><p>JVM 履歴ファイルに基づくインクリメンタルコンパイルのアプローチは、<a href="https://docs.gradle.org/current/userguide/build_cache.html" target="_blank" rel="noreferrer">Gradle のビルドキャッシュ</a>で動作しない、コンパイル回避をサポートしないなどの制限がありました。 対照的に、新しいインクリメンタルコンパイルのアプローチはこれらの制限を克服し、導入以来良好なパフォーマンスを示しています。</p><p>新しいインクリメンタルコンパイルのアプローチが過去 2 回の主要な Kotlin リリースでデフォルトで使用されていることを踏まえ、Kotlin 2.0.20 では <code>kotlin.incremental.useClasspathSnapshot</code> Gradle プロパティが非推奨となりました。 したがって、これをオプトアウトに使用すると、非推奨の警告が表示されます。</p><h3 id="クラスファイルとしてプロジェクト間で-jvm-アーティファクトを共有するオプション" tabindex="-1">クラスファイルとしてプロジェクト間で JVM アーティファクトを共有するオプション <a class="header-anchor" href="#クラスファイルとしてプロジェクト間で-jvm-アーティファクトを共有するオプション" aria-label="Permalink to &quot;クラスファイルとしてプロジェクト間で JVM アーティファクトを共有するオプション&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>この機能は<a href="/ja/kotlin/components-stability#stability-levels-explained">実験的</a>です。 いつでも削除または変更される可能性があります。評価目的でのみ使用してください。 <a href="https://youtrack.jetbrains.com/issue/KT-61861/Gradle-Kotlin-compilations-depend-on-packed-artifacts" target="_blank" rel="noreferrer">YouTrack</a> でフィードバックをお待ちしております。 オプトインが必要です（詳細は下記参照）。</p></div><p>Kotlin 2.0.20 では、JAR ファイルなど、Kotlin/JVM コンパイルの出力がプロジェクト間で共有される方法を変更する新しいアプローチを導入します。このアプローチでは、Gradle の <code>apiElements</code> 設定に、コンパイル済み <code>.class</code> ファイルを含むディレクトリへのアクセスを提供するセカンダリバリアントが追加されます。設定すると、プロジェクトはコンパイル中に圧縮された JAR アーティファクトを要求する代わりに、このディレクトリを使用します。これにより、特にインクリメンタルビルドの場合、JAR ファイルが圧縮および解凍される回数が減ります。</p><p>私たちのテストでは、この新しいアプローチが Linux および macOS ホストでビルドパフォーマンスの改善をもたらす可能性があることが示されています。 ただし、Windows ホストでは、Windows がファイル操作時に I/O 処理をどのように扱うかにより、パフォーマンスの低下が見られました。</p><p>この新しいアプローチを試すには、<code>gradle.properties</code> ファイルに次のプロパティを追加します。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.jvm.addClassesVariant=true</span></span></code></pre></div><p>デフォルトでは、このプロパティは <code>false</code> に設定されており、Gradle の <code>apiElements</code> バリアントは圧縮された JAR アーティファクトを要求します。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Gradle には、Java のみのプロジェクトでコンパイル中に、コンパイル済み <code>.class</code> ファイルを含むディレクトリ<strong>の代わりに</strong>圧縮された JAR アーティファクトのみを公開するために使用できる関連プロパティがあります。 <code>none org.gradle.java.compile-classpath-packaging=true </code> このプロパティとその目的の詳細については、Gradle の<a href="https://docs.gradle.org/current/userguide/java_library_plugin.html#sub:java_library_known_issues_windows_performance" target="_blank" rel="noreferrer">「巨大なマルチプロジェクトにおける Windows での著しいビルドパフォーマンスの低下」</a>に関するドキュメントを参照してください。</p></div><p>この新しいアプローチに関するフィードバックをお待ちしております。これを使用してパフォーマンスの改善に気づきましたか？ <a href="https://youtrack.jetbrains.com/issue/KT-61861/Gradle-Kotlin-compilations-depend-on-packed-artifacts" target="_blank" rel="noreferrer">YouTrack</a> にコメントを追加してお知らせください。</p><h3 id="kotlin-gradle-プラグインの依存関係の動作を-java-test-fixtures-プラグインと一致させる" tabindex="-1">Kotlin Gradle プラグインの依存関係の動作を <code>java-test-fixtures</code> プラグインと一致させる <a class="header-anchor" href="#kotlin-gradle-プラグインの依存関係の動作を-java-test-fixtures-プラグインと一致させる" aria-label="Permalink to &quot;Kotlin Gradle プラグインの依存関係の動作を \`java-test-fixtures\` プラグインと一致させる&quot;">​</a></h3><p>Kotlin 2.0.20 以前は、プロジェクトで <a href="https://docs.gradle.org/current/userguide/java_testing.html#sec:java_test_fixtures" target="_blank" rel="noreferrer"><code>java-test-fixtures</code> プラグイン</a>を使用している場合、Gradle と Kotlin Gradle プラグインの間で依存関係の伝播方法に違いがありました。</p><p>Kotlin Gradle プラグインは依存関係を次のように伝播しました。</p><ul><li><code>java-test-fixtures</code> プラグインの <code>implementation</code> および <code>api</code> 依存関係タイプから <code>test</code> ソースセットのコンパイルクラスパスへ。</li><li>メインソースセットの <code>implementation</code> および <code>api</code> 依存関係タイプから <code>java-test-fixtures</code> プラグインのソースセットのコンパイルクラスパスへ。</li></ul><p>しかし、Gradle は <code>api</code> 依存関係タイプのみを伝播しました。</p><p>この動作の違いにより、一部のプロジェクトではリソースファイルがクラスパスに複数回見つかるという問題が発生していました。</p><p>Kotlin 2.0.20 以降、Kotlin Gradle プラグインの動作は Gradle の <code>java-test-fixtures</code> プラグインと一致するように調整されたため、この問題や他の Gradle プラグインに関する問題は発生しなくなりました。</p><p>この変更の結果、<code>test</code> および <code>testFixtures</code> ソースセットの一部の依存関係にアクセスできなくなる可能性があります。 これが発生した場合は、依存関係宣言タイプを <code>implementation</code> から <code>api</code> に変更するか、影響を受けるソースセットに新しい依存関係宣言を追加してください。</p><h3 id="コンパイルタスクがアーティファクトへのタスク依存関係を欠く稀なケースにタスク依存関係を追加" tabindex="-1">コンパイルタスクがアーティファクトへのタスク依存関係を欠く稀なケースにタスク依存関係を追加 <a class="header-anchor" href="#コンパイルタスクがアーティファクトへのタスク依存関係を欠く稀なケースにタスク依存関係を追加" aria-label="Permalink to &quot;コンパイルタスクがアーティファクトへのタスク依存関係を欠く稀なケースにタスク依存関係を追加&quot;">​</a></h3><p>2.0.20 以前では、コンパイルタスクがそのアーティファクト入力の 1 つに対するタスク依存関係を欠くシナリオがあることがわかりました。これは、依存するコンパイルタスクの結果が不安定であることを意味し、アーティファクトが時間内に生成される場合と、生成されない場合がありました。</p><p>この問題を修正するため、Kotlin Gradle プラグインはこれらのシナリオで必要なタスク依存関係を自動的に追加するようになりました。</p><p>非常に稀なケースですが、この新しい動作が循環依存関係エラーを引き起こすことがわかりました。 たとえば、複数のコンパイルがあり、1 つのコンパイルが他のすべての内部宣言を参照でき、生成されたアーティファクトが両方のコンパイルタスクの出力に依存する場合、次のようなエラーが表示される可能性があります。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>FAILURE: Build failed with an exception.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>What went wrong:</span></span>
<span class="line"><span>Circular dependency between the following tasks:</span></span>
<span class="line"><span>:lib:compileKotlinJvm</span></span>
<span class="line"><span>--- :lib:jvmJar</span></span>
<span class="line"><span>     \\--- :lib:compileKotlinJvm (*)</span></span>
<span class="line"><span>(*) - details omitted (listed previously)</span></span></code></pre></div><p>この循環依存関係エラーを修正するため、<code>archivesTaskOutputAsFriendModule</code> という Gradle プロパティを追加しました。</p><p>デフォルトでは、このプロパティは <code>true</code> に設定されており、タスク依存関係を追跡します。アーティファクトのコンパイルタスクでの使用を無効にし、タスク依存関係が不要にするには、<code>gradle.properties</code> ファイルに以下を追加します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kotlin.build.archivesTaskOutputAsFriendModule</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span></code></pre></div><p>詳細については、<a href="https://youtrack.jetbrains.com/issue/KT-69330" target="_blank" rel="noreferrer">YouTrack</a> の課題を参照してください。</p><h2 id="compose-コンパイラ" tabindex="-1">Compose コンパイラ <a class="header-anchor" href="#compose-コンパイラ" aria-label="Permalink to &quot;Compose コンパイラ&quot;">​</a></h2><p>Kotlin 2.0.20 では、Compose コンパイラにいくつかの改善が加えられました。</p><h3 id="_2-0-0-で導入された不要な再コンポジションの問題の修正" tabindex="-1">2.0.0 で導入された不要な再コンポジションの問題の修正 <a class="header-anchor" href="#_2-0-0-で導入された不要な再コンポジションの問題の修正" aria-label="Permalink to &quot;2.0.0 で導入された不要な再コンポジションの問題の修正&quot;">​</a></h3><p>Compose コンパイラ 2.0.0 には、非 JVM ターゲットを持つマルチプラットフォームプロジェクトで型の安定性を誤って推論することがあり、不要な (あるいは無限の) 再コンポジションにつながるという問題があります。Kotlin 2.0.0 で作成された Compose アプリをバージョン 2.0.10 以降に更新することを強くお勧めします。</p><p>アプリが Compose コンパイラ 2.0.10 以降でビルドされているものの、バージョン 2.0.0 でビルドされた依存関係を使用している場合、これらの古い依存関係が再コンポジションの問題を引き起こす可能性があります。 これを防ぐには、依存関係をアプリと同じ Compose コンパイラでビルドされたバージョンに更新してください。</p><h3 id="コンパイラオプションの新しい設定方法" tabindex="-1">コンパイラオプションの新しい設定方法 <a class="header-anchor" href="#コンパイラオプションの新しい設定方法" aria-label="Permalink to &quot;コンパイラオプションの新しい設定方法&quot;">​</a></h3><p>トップレベルパラメータの頻繁な変更を避けるため、新しいオプション設定メカニズムを導入しました。 <code>composeCompiler {}</code> ブロックのトップレベルエントリを作成または削除することで、Compose コンパイラチームがテストを行うのは難しくなります。 そのため、強力なスキッピングモードや非スキッピンググループ最適化などのオプションは、<code>featureFlags</code> プロパティを介して有効にするようになりました。 このプロパティは、最終的にデフォルトになる新しい Compose コンパイラオプションをテストするために使用されます。</p><p>この変更は Compose コンパイラ Gradle プラグインにも適用されています。今後 feature flag を設定するには、次の構文を使用します (このコードはすべてのデフォルト値を反転させます)。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">composeCompiler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    featureFlags </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ComposeFeatureFlag.IntrinsicRemember.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">disabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ComposeFeatureFlag.OptimizeNonSkippingGroups,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ComposeFeatureFlag.StrongSkipping.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">disabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>または、Compose コンパイラを直接設定する場合は、次の構文を使用します。</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>-P plugin:androidx.compose.compiler.plugins.kotlin:featureFlag=IntrinsicRemember</span></span></code></pre></div><p><code>enableIntrinsicRemember</code>、<code>enableNonSkippingGroupOptimization</code>、<code>enableStrongSkippingMode</code> プロパティは非推奨になりました。</p><p>この新しいアプローチに関するフィードバックを <a href="https://youtrack.jetbrains.com/issue/KT-68651/Compose-provide-a-single-place-in-extension-to-configure-all-compose-flags" target="_blank" rel="noreferrer">YouTrack</a> でお寄せいただければ幸いです。</p><h3 id="強力なスキッピングモードがデフォルトで有効に" tabindex="-1">強力なスキッピングモードがデフォルトで有効に <a class="header-anchor" href="#強力なスキッピングモードがデフォルトで有効に" aria-label="Permalink to &quot;強力なスキッピングモードがデフォルトで有効に&quot;">​</a></h3><p>Compose コンパイラの強力なスキッピングモードがデフォルトで有効になりました。</p><p>強力なスキッピングモードは、スキップできるコンポーザブル関数のルールを変更する Compose コンパイラの設定オプションです。 強力なスキッピングモードが有効になっている場合、不安定なパラメータを持つコンポーザブル関数もスキップできるようになります。 また、強力なスキッピングモードは、コンポーザブル関数で使用されるラムダを自動的に記憶するため、再コンポジションを避けるためにラムダを <code>remember</code> でラップする必要がなくなります。</p><p>詳細については、<a href="https://developer.android.com/develop/ui/compose/performance/stability/strongskipping" target="_blank" rel="noreferrer">強力なスキッピングモードのドキュメント</a>を参照してください。</p><h3 id="コンポジショントレースマーカーがデフォルトで有効に" tabindex="-1">コンポジショントレースマーカーがデフォルトで有効に <a class="header-anchor" href="#コンポジショントレースマーカーがデフォルトで有効に" aria-label="Permalink to &quot;コンポジショントレースマーカーがデフォルトで有効に&quot;">​</a></h3><p><code>includeTraceMarkers</code> オプションは、コンパイラプラグインのデフォルト値と一致するように、Compose コンパイラ Gradle プラグインでデフォルトで <code>true</code> に設定されるようになりました。これにより、Android Studio のシステムトレースプロファイラーでコンポーザブル関数を確認できます。コンポジションのトレースに関する詳細については、この <a href="https://medium.com/androiddevelopers/jetpack-compose-composition-tracing-9ec2b3aea535" target="_blank" rel="noreferrer">Android Developers ブログ投稿</a>を参照してください。</p><h3 id="非スキップグループの最適化" tabindex="-1">非スキップグループの最適化 <a class="header-anchor" href="#非スキップグループの最適化" aria-label="Permalink to &quot;非スキップグループの最適化&quot;">​</a></h3><p>このリリースには、新しいコンパイラオプションが含まれています。これを有効にすると、スキップ不可および再起動不可のコンポーザブル関数は、コンポーザブル関数のボディの周りにグループを生成しなくなります。これにより、アロケーションが減少し、パフォーマンスが向上します。 このオプションは実験的でデフォルトでは無効ですが、<a href="#new-way-to-configure-compiler-options">上記</a>に示すように <code>OptimizeNonSkippingGroups</code> feature flag を使用して有効にできます。</p><p>この feature flag は現在、より広範なテストの準備が整っています。機能を有効にした際に発見された問題は、<a href="https://goo.gle/compose-feedback" target="_blank" rel="noreferrer">Google 課題トラッカー</a>に報告してください。</p><h3 id="抽象的なコンポーザブル関数におけるデフォルトパラメータのサポート" tabindex="-1">抽象的なコンポーザブル関数におけるデフォルトパラメータのサポート <a class="header-anchor" href="#抽象的なコンポーザブル関数におけるデフォルトパラメータのサポート" aria-label="Permalink to &quot;抽象的なコンポーザブル関数におけるデフォルトパラメータのサポート&quot;">​</a></h3><p>抽象的なコンポーザブル関数にデフォルトパラメータを追加できるようになりました。</p><p>以前は、Compose コンパイラは、これが有効な Kotlin コードであるにもかかわらず、これを行おうとするとエラーを報告していました。 今回、Compose コンパイラでこれをサポートするようになり、制限が削除されました。 これは、デフォルトの <code>Modifier</code> 値を含める場合に特に役立ちます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Composables</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @Composable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Composable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(modifier: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Modifier</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Modifier)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>オープンなコンポーザブル関数のデフォルトパラメータは、2.0.20 ではまだ制限されています。この制限は将来のリリースで対処される予定です。</p><h2 id="標準ライブラリ" tabindex="-1">標準ライブラリ <a class="header-anchor" href="#標準ライブラリ" aria-label="Permalink to &quot;標準ライブラリ&quot;">​</a></h2><p>標準ライブラリは、実験的機能として UUID (普遍的に一意な識別子) をサポートし、Base64 デコードにいくつかの変更が含まれています。</p><h3 id="共通-kotlin-標準ライブラリにおける-uuid-のサポート" tabindex="-1">共通 Kotlin 標準ライブラリにおける UUID のサポート <a class="header-anchor" href="#共通-kotlin-標準ライブラリにおける-uuid-のサポート" aria-label="Permalink to &quot;共通 Kotlin 標準ライブラリにおける UUID のサポート&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>この機能は<a href="/ja/kotlin/components-stability#stability-levels-explained">実験的</a>です。 オプトインするには、<code>@ExperimentalUuidApi</code> アノテーションまたはコンパイラオプション <code>-opt-in=kotlin.uuid.ExperimentalUuidApi</code> を使用してください。</p></div><p>Kotlin 2.0.20 では、アイテムを一意に識別するという課題に対処するため、共通 Kotlin 標準ライブラリに <a href="https://en.wikipedia.org/wiki/Universally_unique_identifier" target="_blank" rel="noreferrer">UUID (普遍的に一意な識別子)</a> を表すクラスを導入します。</p><p>さらに、この機能は以下の UUID 関連操作のための API を提供します。</p><ul><li>UUID の生成。</li><li>UUID を文字列形式から解析したり、文字列形式にフォーマットしたりする。</li><li>指定された 128 ビット値から UUID を作成する。</li><li>UUID の 128 ビットにアクセスする。</li></ul><p>次のコード例は、これらの操作を示しています。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Constructs a byte array for UUID creation</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> byteArray </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> byteArrayOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    0x55</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x0E</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x84</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toByte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x00</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0xE2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toByte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x9B</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toByte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x41</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0xD4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toByte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    0xA7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toByte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x44</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x66</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x55</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x44</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x00</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x00</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uuid1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Uuid.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fromByteArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(byteArray)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uuid2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Uuid.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fromULongs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x550E8400E29B41D4u</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">L, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0xA716446655440000u</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">L)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uuid3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Uuid.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;550e8400-e29b-41d4-a716-446655440000&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(uuid1)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 550e8400-e29b-41d4-a716-446655440000</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(uuid1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uuid2)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(uuid2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uuid3)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Accesses UUID bits</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> version </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uuid1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toLongs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { mostSignificantBits, _ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ((mostSignificantBits shr </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) and </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0xF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(version)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 4</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Generates a random UUID</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> randomUuid </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Uuid.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">random</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(uuid1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> randomUuid)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// false</span></span></code></pre></div><p><code>java.util.UUID</code> を使用する API との互換性を維持するため、Kotlin/JVM には <code>java.util.UUID</code> と <code>kotlin.uuid.Uuid</code> 間で変換するための 2 つの拡張関数、<code>.toJavaUuid()</code> と <code>.toKotlinUuid()</code> があります。例:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> kotlinUuid </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Uuid.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parseHex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;550e8400e29b41d4a716446655440000&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Converts Kotlin UUID to java.util.UUID</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> javaUuid </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> kotlinUuid.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toJavaUuid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> javaUuid </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.util.UUID.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fromString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;550e8400-e29b-41d4-a716-446655440000&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Converts Java UUID to kotlin.uuid.Uuid</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> kotlinUuid </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> javaUuid.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toKotlinUuid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>この機能と提供される API は、複数のプラットフォーム間でコードを共有できるようにすることで、マルチプラットフォームソフトウェア開発を簡素化します。UUID は、一意の識別子を生成することが困難な環境でも理想的です。</p><p>UUID を使用する一般的なユースケースの例としては、次のようなものがあります。</p><ul><li>データベースレコードに一意の ID を割り当てる。</li><li>ウェブセッション識別子を生成する。</li><li>一意の識別または追跡を必要とするあらゆるシナリオ。</li></ul><h3 id="hexformat-における-minlength-のサポート" tabindex="-1">HexFormat における <code>minLength</code> のサポート <a class="header-anchor" href="#hexformat-における-minlength-のサポート" aria-label="Permalink to &quot;HexFormat における \`minLength\` のサポート&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/-hex-format/" target="_blank" rel="noreferrer"><code>HexFormat</code></a> クラスとそのプロパティは <a href="/ja/kotlin/components-stability#stability-levels-explained">実験的</a>です。 オプトインするには、<code>@OptIn(ExperimentalStdlibApi::class)</code> アノテーションまたはコンパイラ オプション <code>-opt-in=kotlin.ExperimentalStdlibApi</code> を使用してください。</p></div><p>Kotlin 2.0.20 では、<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/-hex-format/-number-hex-format/" target="_blank" rel="noreferrer"><code>NumberHexFormat</code></a> クラスに新しい <code>minLength</code> プロパティが追加され、<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/-hex-format/number.html" target="_blank" rel="noreferrer"><code>HexFormat.number</code></a> を介してアクセスできます。 このプロパティを使用すると、数値の 16 進数表現における最小桁数を指定でき、必要な長さに合わせてゼロ埋めを有効にできます。さらに、<code>removeLeadingZeros</code> プロパティを使用して、先頭のゼロをトリムすることもできます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">93</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toHexString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HexFormat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        number.minLength </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        number.removeLeadingZeros </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // &quot;005d&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>minLength</code> プロパティは解析には影響しません。ただし、解析では、追加の先頭桁がゼロである場合、型の幅よりも多くの桁を持つ 16 進数文字列が許可されるようになりました。</p><h3 id="base64-デコーダーの動作変更" tabindex="-1">Base64 デコーダーの動作変更 <a class="header-anchor" href="#base64-デコーダーの動作変更" aria-label="Permalink to &quot;Base64 デコーダーの動作変更&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.io.encoding/-base64/" target="_blank" rel="noreferrer"><code>Base64</code> クラス</a> とその 関連機能は<a href="/ja/kotlin/components-stability#stability-levels-explained">実験的</a>です。 オプトインするには、<code>@OptIn(ExperimentalEncodingApi::class)</code> アノテーションまたはコンパイラオプション <code>-opt-in=kotlin.io.encoding.ExperimentalEncodingApi</code> を使用してください。</p></div><p>Kotlin 2.0.20 では、Base64 デコーダーの動作に 2 つの変更が導入されました。</p><ul><li><a href="#the-base64-decoder-now-requires-padding">Base64 デコーダーでパディングが必須に</a></li><li><a href="#withpadding-function-for-padding-configuration">パディング設定のための <code>withPadding</code> 関数が追加された</a></li></ul><h4 id="base64-デコーダーでパディングが必須に" tabindex="-1">Base64 デコーダーでパディングが必須に <a class="header-anchor" href="#base64-デコーダーでパディングが必須に" aria-label="Permalink to &quot;Base64 デコーダーでパディングが必須に&quot;">​</a></h4><p>Base64 エンコーダーはデフォルトでパディングを追加するようになり、デコーダーはデコード時にパディングを要求し、非ゼロのパディングビットを禁止するようになりました。</p><h4 id="パディング設定のための-withpadding-関数" tabindex="-1">パディング設定のための <code>withPadding</code> 関数 <a class="header-anchor" href="#パディング設定のための-withpadding-関数" aria-label="Permalink to &quot;パディング設定のための \`withPadding\` 関数&quot;">​</a></h4><p>Base64 エンコードおよびデコードのパディング動作をユーザーが制御できるように、新しい <code>.withPadding()</code> 関数が導入されました。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> base64 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Base64.UrlSafe.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withPadding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Base64.PaddingOption.ABSENT_OPTIONAL)</span></span></code></pre></div><p>この関数により、異なるパディングオプションを持つ <code>Base64</code> インスタンスを作成できます。</p><table tabindex="0"><thead><tr><th><code>PaddingOption</code></th><th>エンコード時</th><th>デコード時</th></tr></thead><tbody><tr><td><code>PRESENT</code></td><td>パディングを追加</td><td>パディングが必須</td></tr><tr><td><code>ABSENT</code></td><td>パディングを省略</td><td>パディングは許可されない</td></tr><tr><td><code>PRESENT_OPTIONAL</code></td><td>パディングを追加</td><td>パディングはオプション</td></tr><tr><td><code>ABSENT_OPTIONAL</code></td><td>パディングを省略</td><td>パディングはオプション</td></tr></tbody></table><p>異なるパディングオプションを持つ <code>Base64</code> インスタンスを作成し、それらを使用してデータをエンコードおよびデコードできます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.io.encoding.Base64</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.io.encoding.ExperimentalEncodingApi</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalEncodingApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Example data to encode</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;fooba&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toByteArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Creates a Base64 instance with URL-safe alphabet and PRESENT padding</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> base64Present </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Base64.UrlSafe.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withPadding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Base64.PaddingOption.PRESENT)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> encodedDataPresent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> base64Present.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">encode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Encoded data with PRESENT padding: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$encodedDataPresent</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Encoded data with PRESENT padding: Zm9vYmE=</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Creates a Base64 instance with URL-safe alphabet and ABSENT padding</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> base64Absent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Base64.UrlSafe.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withPadding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Base64.PaddingOption.ABSENT)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> encodedDataAbsent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> base64Absent.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">encode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Encoded data with ABSENT padding: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$encodedDataAbsent</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Encoded data with ABSENT padding: Zm9vYmE</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Decodes the data back</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> decodedDataPresent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> base64Present.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">decode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(encodedDataPresent)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Decoded data with PRESENT padding: \${</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(decodedDataPresent)}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Decoded data with PRESENT padding: fooba</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> decodedDataAbsent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> base64Absent.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">decode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(encodedDataAbsent)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Decoded data with ABSENT padding: \${</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(decodedDataAbsent)}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Decoded data with ABSENT padding: fooba</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="ドキュメントの更新" tabindex="-1">ドキュメントの更新 <a class="header-anchor" href="#ドキュメントの更新" aria-label="Permalink to &quot;ドキュメントの更新&quot;">​</a></h2><p>Kotlin ドキュメントはいくつかの注目すべき変更を受けました。</p><ul><li><a href="/ja/kotlin/standard-input">標準入力ページ</a>の改善 - Java Scanner と <code>readln()</code> の使用方法について学習します。</li><li><a href="/ja/kotlin/k2-compiler-migration-guide">K2 コンパイラ移行ガイド</a>の改善 - パフォーマンスの改善、Kotlin ライブラリとの互換性、カスタムコンパイラプラグインの対処方法について学習します。</li><li><a href="/ja/kotlin/exceptions">例外ページ</a>の改善 - 例外、それらのスローとキャッチの方法について学習します。</li><li><a href="/ja/kotlin/jvm-test-using-junit">JVM で JUnit を使用してコードをテストするチュートリアル</a>の改善 - JUnit を使用してテストを作成する方法について学習します。</li><li><a href="/ja/kotlin/native-objc-interop">Swift/Objective-C との相互運用性ページ</a>の改善 - Swift/Objective-C コードにおける Kotlin 宣言の使用方法、および Kotlin コードにおける Objective-C 宣言の使用方法について学習します。</li><li><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-spm-export.html" target="_blank" rel="noreferrer">Swift パッケージエクスポートセットアップページ</a>の改善 - Swift パッケージマネージャの依存関係によって使用できる Kotlin/Native 出力を設定する方法について学習します。</li></ul><h2 id="kotlin-2-0-20-のインストール" tabindex="-1">Kotlin 2.0.20 のインストール <a class="header-anchor" href="#kotlin-2-0-20-のインストール" aria-label="Permalink to &quot;Kotlin 2.0.20 のインストール&quot;">​</a></h2><p>IntelliJ IDEA 2023.3 および Android Studio Iguana (2023.2.1) Canary 15 以降、Kotlin プラグインは IDE にバンドルされたプラグインとして配布されます。これは、JetBrains Marketplace からプラグインをインストールできなくなったことを意味します。</p><p>新しい Kotlin バージョンに更新するには、ビルドスクリプトで <a href="/ja/kotlin/releases#update-to-a-new-kotlin-version">Kotlin のバージョンを 2.0.20 に変更</a>します。</p>`,160))])}const f=r(c,[["render",E]]);export{C as __pageData,f as default};
