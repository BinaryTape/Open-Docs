import{_ as r,C as p,c,o as u,j as i,G as e,ag as n,a,w as t}from"./chunks/framework.Bksy39di.js";const B=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/ktor/rsa-keys-generation.md","filePath":"zh-Hant/ktor/rsa-keys-generation.md","lastUpdated":1755457140000}'),g={name:"zh-Hant/ktor/rsa-keys-generation.md"};function F(y,s,b,C,E,_){const k=p("show-structure"),h=p("tldr"),o=p("warning"),l=p("code-block"),d=p("note");return u(),c("div",null,[s[6]||(s[6]=i("h1",{id:"rsa-密鑰生成",tabindex:"-1"},[a("RSA 密鑰生成 "),i("a",{class:"header-anchor",href:"#rsa-密鑰生成","aria-label":'Permalink to "RSA 密鑰生成"'},"​")],-1)),e(k,{for:"chapter",depth:"2"}),e(h,null,{default:t(()=>s[0]||(s[0]=[i("p",null,[i("b",null,"程式碼範例"),a(": "),i("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/auth-jwt-rs256"}," auth-jwt-rs256 ")],-1)])),_:1}),s[7]||(s[7]=i("p",null,[i("a",{href:"https://en.wikipedia.org/wiki/RSA_(cryptosystem)",target:"_blank",rel:"noreferrer"},"RSA (Rivest–Shamir–Adleman)"),a(" 是一種廣泛使用的公鑰密碼系統，能夠實現安全的資料傳輸、數位簽章和密鑰交換。")],-1)),s[8]||(s[8]=i("p",null,"RS256 作為 RSA 加密演算法的一部分，利用 SHA-256 進行雜湊處理，並使用一個密鑰（通常是 2048 位元、4096 位元或更高）來保護數位通訊。",-1)),s[9]||(s[9]=i("p",null,[a("在 "),i("a",{href:"https://jwt.io/",target:"_blank",rel:"noreferrer"},"JSON Web Token"),a(" 認證領域，RS256 扮演著關鍵角色，因為 JWT 的完整性和真實性可以透過簽章機制（例如 RS256）來驗證，其中採用了公/私鑰對。這確保了令牌中包含的資訊保持防篡改和可信賴。")],-1)),s[10]||(s[10]=i("p",null,[a("在本節中，您將學習如何生成此類密鑰並與 Ktor 提供的 "),i("a",{href:"./server-jwt"},"Authentication JWT"),a(" 外掛程式一同使用。")],-1)),e(o,null,{default:t(()=>s[1]||(s[1]=[i("p",null,[a(" 對於生產環境使用，建議您選擇更現代的替代方案，例如基於比 RSA 更高效、更安全的密碼學的 "),i("a",{href:"https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm"},"ES256"),a("。 ")],-1)])),_:1}),s[11]||(s[11]=i("h2",{id:"生成-rsa-私鑰",tabindex:"-1"},[a("生成 RSA 私鑰 "),i("a",{class:"header-anchor",href:"#生成-rsa-私鑰","aria-label":'Permalink to "生成 RSA 私鑰"'},"​")],-1)),s[12]||(s[12]=i("p",null,[a("要生成私鑰，您可以使用 OpenSSL、"),i("code",null,"ssh-keygen"),a(" 或其他您選擇的工具來建立認證密鑰對。為了示範目的，這裡將使用 OpenSSL。")],-1)),s[13]||(s[13]=i("p",null,"在新的終端機視窗中，執行以下命令：",-1)),e(l,{lang:"shell",code:"openssl genpkey -algorithm rsa -pkeyopt rsa_keygen_bits:2048 &gt; ktor.pk8"}),s[14]||(s[14]=n('<p><a href="https://www.openssl.org/docs/man3.0/man1/openssl-genpkey.html" target="_blank" rel="noreferrer"><code>openssl genpkey</code></a> 命令使用 RSA 演算法生成一個 2048 位元的私鑰，並將其儲存到指定檔案中，這裡是 <code>ktor.pk8</code>。檔案內容為 <a href="https://en.wikipedia.org/wiki/Base64" target="_blank" rel="noreferrer">Base64</a> 編碼，因此在推導出公鑰之前需要進行解碼。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>要使用 <a href="https://github.com/ktorio/ktor-documentation/blob/3.2.3/codeSnippets/snippets/auth-jwt-rs256/" target="_blank" rel="noreferrer">程式碼範例</a> 中的私鑰，請導航到 <code>src/main/resources</code> 中的 <code>application.conf</code> 檔案，並將私鑰提取到一個新的 <code>.pk8</code> 檔案中。</p></div><h2 id="second-step" tabindex="-1">推導公鑰 <a class="header-anchor" href="#second-step" aria-label="Permalink to &quot;推導公鑰 {id=&quot;second-step&quot;}&quot;">​</a></h2><p>為了從您先前生成的私鑰中推導出公鑰，您需要執行以下步驟：</p><ol><li>解碼私鑰。</li><li>提取公鑰。</li><li>將公鑰儲存為 PEM 格式。</li></ol><p>要使用 OpenSSL 執行此操作，請執行以下命令：</p>',6)),e(l,{lang:"shell",code:"openssl rsa -in ktor.pk8 -pubout | tee ktor.spki"}),s[15]||(s[15]=n('<ul><li><code>openssl rsa</code>: 這是 OpenSSL 用於處理 RSA 密鑰的命令。在此情境下，它用於執行與 RSA 密鑰相關的操作。</li><li><code>-in ktor.pk8</code>: 此選項指定 OpenSSL 應從中讀取 RSA 私鑰的輸入檔案 (<code>ktor.pk8</code>)。</li><li><code>-pubout</code>: 此選項指示 OpenSSL 輸出輸入檔案中提供的私鑰所對應的公鑰。</li><li><code>|</code>: 管道符號 (|) 用於將前一個命令（由 <code>openssl rsa</code> 生成的公鑰）的輸出重定向到 <code>tee</code> 命令。</li><li><code>tee ktor.spki</code>: <code>tee</code> 是一個命令列工具程式，它從標準輸入讀取並寫入到標準輸出和一個或多個檔案。命令的這部分指示 <code>tee</code> 將接收到的輸入寫入名為 <code>ktor.spki</code> 的檔案中。因此，公鑰將同時顯示在終端機上並儲存到 <code>ktor.spki</code> 檔案中。</li></ul><p>有了公鑰，您現在可以推導出它的指數（exponent）和模數（modulus）值。</p><h2 id="提取模數與指數屬性" tabindex="-1">提取模數與指數屬性 <a class="header-anchor" href="#提取模數與指數屬性" aria-label="Permalink to &quot;提取模數與指數屬性&quot;">​</a></h2><p>現在您擁有了密鑰對，您需要提取公鑰的 <code>e</code>（指數）和 <code>n</code>（模數）屬性，以便在您的 <code>jwks.json</code> 檔案中使用它們。這需要以下步驟：</p><ol><li>從您建立的 <code>.spki</code> 檔案中讀取公鑰。</li><li>以人類可讀的格式顯示關於密鑰的資訊。</li></ol><p>要使用 OpenSSL 執行此操作，請執行以下命令：</p>',6)),e(l,{lang:"shell",code:"openssl pkey -in ktor.spki -pubin -noout -text"}),s[16]||(s[16]=n(`<ul><li><code>pkey</code>: 這是 OpenSSL 的命令列工具程式，用於處理私鑰和公鑰。</li><li><code>-in ktor.spki</code>: 指定包含 PEM 格式公鑰的輸入檔案。在此情況下，輸入檔案為 <code>ktor.spki</code>。</li><li><code>-pubin</code>: 表示輸入檔案包含一個公鑰。如果沒有此選項，OpenSSL 會假定輸入檔案包含私鑰。</li><li><code>-noout</code>: 此選項阻止 OpenSSL 輸出編碼的公鑰。該命令將只顯示公鑰的資訊，而實際的密鑰不會被列印到控制台。</li><li><code>-text</code>: 請求 OpenSSL 顯示密鑰的文字表示。這包括密鑰類型、大小以及以人類可讀形式的實際密鑰資料等詳細資訊。</li></ul><p>預期的輸出如下所示：</p><div class="language-Shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> openssl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pkey</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ktor.spki</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -pubin</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -noout</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -text</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RSA</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Public-Key:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (512 </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">bit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Modulus:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    00:b5:f2:5a:2e:bc:d7:20:b5:20:d5:4d:cd:d4:a5:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    7c:c8:9a:fd:d8:61:e7:e4:eb:58:65:1e:ea:5a:4d:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    4c:73:87:32:e0:91:a3:92:56:2e:a7:bc:1e:32:30:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    43:f5:fd:db:05:5a:08:b2:25:15:5f:ac:4d:71:82:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    2b:d0:87:b4:01</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Exponent:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 65537</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (0x10001)</span></span></code></pre></div>`,3)),e(o,null,{default:t(()=>s[2]||(s[2]=[i("p",null," 請注意，在此範例中，公鑰使用 512 位元，這不夠安全。理想情況下，您應該選擇 2048 位元或 4096 位元的密鑰。 ",-1)])),_:1}),s[17]||(s[17]=n('<h2 id="轉換和編碼模數和指數屬性" tabindex="-1">轉換和編碼模數和指數屬性 <a class="header-anchor" href="#轉換和編碼模數和指數屬性" aria-label="Permalink to &quot;轉換和編碼模數和指數屬性&quot;">​</a></h2><p>在上一步驟中，您提取了 <code>jwks.json</code> 檔案所需的 <code>n</code> 和 <code>e</code> 屬性。然而，它們是十六進位格式。您現在需要將指數和模數的十六進位表示轉換為各自的 <a href="https://en.wikipedia.org/wiki/Base64#URL_applications" target="_blank" rel="noreferrer">Base64URL</a> 編碼。</p><h3 id="指數" tabindex="-1">指數 <a class="header-anchor" href="#指數" aria-label="Permalink to &quot;指數&quot;">​</a></h3><p>指數屬性的十六進位值為 <code>0x10001</code>。要將此值轉換為 Base64URL，請使用以下命令：</p>',4)),e(l,{lang:"shell",code:"echo 010001 | xxd -p -r | base64 "}),s[18]||(s[18]=n("<ul><li><code>echo 010001</code>: 命令的這部分使用 <code>echo</code> 命令將字串 &quot;010001&quot; 輸出到標準輸出，該字串代表 RSA 密鑰的公有指數（e）。</li><li><code>|</code>: <code>|</code> 字元是一個管道，它將前一個命令的輸出作為輸入傳遞給後續命令。</li><li><code>xxd -p -r</code>: 此命令用於將十六進位轉換為二進位。它接收十六進位輸入並產生對應的二進位輸出。</li><li><code>| base64</code>: 命令的這部分接收上一步驟的二進位輸出，並使用 <code>base64</code> 命令將其編碼為 Base64 格式。</li></ul>",1)),e(d,null,{default:t(()=>s[3]||(s[3]=[i("p",null," 請注意，透過在左側添加額外的 `0`，使用了偶數個十六進位數字。 ",-1)])),_:1}),s[19]||(s[19]=n(`<p>以下是上述指數值的預期輸出：</p><div class="language-Shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> echo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 010001</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> xxd</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> base64</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AQAB</span></span></code></pre></div><p>指數的 Base64URL 編碼值是 <code>AQAB</code>，對於此情況不需要進一步處理。在其他情況下，您可能需要使用下一個步驟中所示的 <code>tr</code> 命令。</p><h3 id="模數" tabindex="-1">模數 <a class="header-anchor" href="#模數" aria-label="Permalink to &quot;模數&quot;">​</a></h3><p>對於 <code>n</code> 屬性，您將使用 <code>tr</code> 工具程式來進一步處理模數的十六進位表示。</p>`,5)),e(l,{lang:"shell",code:`echo "b5:f2:5a:2e:bc:d7:20:b5:20:d5:4d:cd:d4:a5:
    7c:c8:9a:fd:d8:61:e7:e4:eb:58:65:1e:ea:5a:4d:
    4c:73:87:32:e0:91:a3:92:56:2e:a7:bc:1e:32:30:
    43:f5:fd:db:05:5a:08:b2:25:15:5f:ac:4d:71:82:
    2b:d0:87:b4:01" | tr -d ": 
" | xxd -p -r | base64 | tr +/ -_ | tr -d "=
"`}),e(d,null,{default:t(()=>s[4]||(s[4]=[i("p",null," 請注意，開頭的 `00` 位元組已被省略。模數中開頭的 `00` 位元組與 RSA 公鑰的 ASN.1 編碼有關。在整數的 ASN.1 DER 編碼中，如果整數的最高有效位元為 `0`，則會移除開頭的零位元組。這是 ASN.1 編碼規則的標準部分。在 RSA 公鑰的上下文中，模數是一個大端序整數，當以 DER 編碼表示時，它遵循這些規則。移除開頭的零位元組是為了確保整數根據 DER 規則正確解釋。 ",-1)])),_:1}),s[20]||(s[20]=n(`<ul><li><code>echo &quot;b5:f2:5a:2e:bc:d7:20:b5:20:d5:4d:cd:d4:a5: \\ ... &quot;</code>: 命令的這部分回顯了一個多行十六進位字串，表示一系列位元組。每行末尾的反斜線表示行續接。</li><li><code>tr -d &quot;: &quot;</code>: <code>tr</code> 命令用於刪除參數列表指定的字元。在這裡，它從十六進位字串中刪除冒號、空格和換行符，使其成為連續的十六進位數字字串。</li><li><code>xxd -p -r</code>: <code>xxd</code> 是一個工具程式，用於建立二進位檔案的十六進位傾印，或將十六進位傾印轉換回二進位。<code>-p</code> 選項指定純十六進位傾印，不帶行號或 ASCII 字元列。<code>-r</code> 選項反轉操作，將十六進位轉換回二進位。</li><li><code>base64</code>: 將上一步驟的二進位輸出編碼為 Base64 格式。</li><li><code>tr +/ -_</code>: 將 Base64 輸出中的 <code>+</code> 和 <code>/</code> 字元分別轉換為 <code>-</code> 和 <code>_</code>。這是 URL 安全 Base64 編碼的常見修改。</li><li><code>tr -d &quot;= &quot;</code>: 從最終的 Base64 編碼字串中移除任何等號 (=) 和換行符。</li></ul><p>上述命令的輸出為：</p><div class="language-Shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> echo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;b5:f2:5a:2e:bc:d7:20:b5:20:d5:4d:cd:d4:a5:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    7c:c8:9a:fd:d8:61:e7:e4:eb:58:65:1e:ea:5a:4d:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    4c:73:87:32:e0:91:a3:92:56:2e:a7:bc:1e:32:30:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    43:f5:fd:db:05:5a:08:b2:25:15:5f:ac:4d:71:82:</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    2b:d0:87:b4:01&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> tr</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;: </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> xxd</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> base64</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> tr</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -_</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> tr</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;=</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tfJaLrzXILUg1U3N1KV8yJr92GHn5OtYZR7qWk1Mc4cy4JGjklYup7weMjBD9f3bBVoIsiUVX6xNcYIr0Ie0AQ</span></span></code></pre></div><p>透過適當地利用 <code>tr</code> 命令，模數字段已被編碼為 Base64URL 字串，您可以在 <code>jwks.json</code> 檔案中使用它。</p><h2 id="填充-jwks-json-檔案" tabindex="-1">填充 jwks.json 檔案 <a class="header-anchor" href="#填充-jwks-json-檔案" aria-label="Permalink to &quot;填充 jwks.json 檔案&quot;">​</a></h2><p>在先前的步驟中，您收集了以下必要資訊：</p><ol><li>一對 RSA 密鑰。</li><li>Base64URL 格式的 RSA 公鑰模數。</li><li>Base64URL 格式的 RSA 公鑰指數。</li></ol><p>有了這些，您現在可以使用以下屬性填充 Ktor 專案的 <a href="https://auth0.com/docs/secure/tokens/json-web-tokens/json-web-key-sets" target="_blank" rel="noreferrer">jwks.json</a> 檔案：</p><ul><li><code>e</code> 和 <code>n</code> 值，使用您在先前步驟中生成的 Base64URL 編碼值。</li><li>密鑰 ID（在此情況下，<code>kid</code> 是從範例專案中推導出來的）。</li><li><code>kty</code> 屬性為 <code>RSA</code>。</li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;keys&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;kty&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;RSA&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;e&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;AQAB&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;kid&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;6f8856ed-9189-488f-9011-0ff4b6c08edc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;n&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;tfJaLrzXILUg1U3N1KV8yJr92GHn5OtYZR7qWk1Mc4cy4JGjklYup7weMjBD9f3bBVoIsiUVX6xNcYIr0Ie0AQ&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>唯一剩下的步驟是指定您的私鑰，以便您的 Ktor 專案可以使用它進行認證。</p><h2 id="定義私鑰" tabindex="-1">定義私鑰 <a class="header-anchor" href="#定義私鑰" aria-label="Permalink to &quot;定義私鑰&quot;">​</a></h2><p>在您的公鑰資訊設定完成後，最後一步是讓您的 Ktor 專案能夠存取您的私鑰。</p><p>假設您已將私鑰（您在一開始在 <code>.pk8</code> 檔案中生成）提取到您系統上的環境變數中，在此情況下稱為 <code>jwt_pk</code>，那麼您 <code>resources/application.conf</code> 檔案的 <code>jwt</code> 部分應類似於：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>jwt {</span></span>
<span class="line"><span>  privateKey = \${jwt_pk}</span></span>
<span class="line"><span>  issuer = &quot;http://0.0.0.0:8080/&quot;</span></span>
<span class="line"><span>  audience = &quot;http://0.0.0.0:8080/login&quot;</span></span>
<span class="line"><span>  realm = &quot;MyProject&quot;</span></span>
<span class="line"><span>}</span></span></code></pre></div>`,15)),e(o,null,{default:t(()=>s[5]||(s[5]=[i("p",null,[a(" 您的私鑰被視為敏感資訊，不應直接儲存在程式碼中。考慮使用環境變數或 "),i("a",{href:"https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html"},"秘密儲存庫"),a(" 來儲存敏感資料。 ")],-1)])),_:1})])}const f=r(g,[["render",F]]);export{B as __pageData,f as default};
