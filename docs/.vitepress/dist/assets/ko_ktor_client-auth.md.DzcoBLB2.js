import{_ as E,C as a,c as y,o as b,G as s,ag as o,j as e,w as t,a as n}from"./chunks/framework.Bksy39di.js";const T=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ko/ktor/client-auth.md","filePath":"ko/ktor/client-auth.md","lastUpdated":1755457140000}'),m={name:"ko/ktor/client-auth.md"};function _(f,i,F,v,A,C){const h=a("TopicTitle"),r=a("show-structure"),k=a("primary-label"),d=a("tldr"),c=a("link-summary"),l=a("code-block"),p=a("TabItem"),u=a("Tabs"),g=a("Links");return b(),y("div",null,[s(h,{labelRef:"client-plugin",title:"Ktor 클라이언트에서의 인증 및 권한 부여"}),s(r,{for:"chapter",depth:"2"}),s(k,{ref:"client-plugin"},null,512),s(d,null,{default:t(()=>i[0]||(i[0]=[e("p",null,[e("b",null,"필수 의존성"),n(": "),e("code",null,"io.ktor:ktor-client-auth")],-1)])),_:1}),s(c,null,{default:t(()=>i[1]||(i[1]=[n(" Auth 플러그인은 클라이언트 애플리케이션에서 인증 및 권한 부여를 처리합니다. ")])),_:1}),i[5]||(i[5]=o('<p>Ktor는 클라이언트 애플리케이션에서 인증 및 권한 부여를 처리하기 위한 <a href="https://api.ktor.io/ktor-client/ktor-client-plugins/ktor-client-auth/io.ktor.client.plugins.auth/-auth" target="_blank" rel="noreferrer">Auth</a> 플러그인을 제공합니다. 일반적인 사용 시나리오에는 사용자 로그인 및 특정 리소스에 대한 액세스 권한 획득이 포함됩니다.</p><blockquote><p>서버에서는 Ktor가 인증 및 권한 부여를 처리하기 위한 <a href="./server-auth">Authentication</a> 플러그인을 제공합니다.</p></blockquote><h2 id="supported" tabindex="-1">지원되는 인증 유형 <a class="header-anchor" href="#supported" aria-label="Permalink to &quot;지원되는 인증 유형 {id=&quot;supported&quot;}&quot;">​</a></h2><p>HTTP는 액세스 제어 및 인증을 위한 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication" target="_blank" rel="noreferrer">일반적인 프레임워크</a>를 제공합니다. Ktor 클라이언트는 다음 HTTP 인증 스키마를 사용할 수 있도록 합니다:</p><ul><li><a href="./client-basic-auth">Basic</a> - 사용자 이름과 비밀번호를 제공하기 위해 <code>Base64</code> 인코딩을 사용합니다. 일반적으로 HTTPS와 함께 사용되지 않는다면 권장되지 않습니다.</li><li><a href="./client-digest-auth">Digest</a> - 사용자 이름과 비밀번호에 해시 함수를 적용하여 암호화된 형태로 사용자 자격 증명을 통신하는 인증 방식입니다.</li><li><a href="./client-bearer-auth">Bearer</a> - 베어러 토큰(bearer tokens)이라고 불리는 보안 토큰을 포함하는 인증 스키마입니다. 예를 들어, 이 스키마를 OAuth 흐름의 일부로 사용하여 Google, Facebook, Twitter 등과 같은 외부 공급자를 통해 애플리케이션 사용자에게 권한을 부여할 수 있습니다.</li></ul><h2 id="add_dependencies" tabindex="-1">의존성 추가 <a class="header-anchor" href="#add_dependencies" aria-label="Permalink to &quot;의존성 추가 {id=&quot;add_dependencies&quot;}&quot;">​</a></h2><p>인증을 활성화하려면 빌드 스크립트에 <code>ktor-client-auth</code> 아티팩트를 포함해야 합니다:</p>',7)),s(u,{group:"languages"},{default:t(()=>[s(p,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:t(()=>[s(l,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-client-auth:$ktor_version")'})]),_:1}),s(p,{title:"Gradle (Groovy)","group-key":"groovy"},{default:t(()=>[s(l,{lang:"Groovy",code:'            implementation "io.ktor:ktor-client-auth:$ktor_version"'})]),_:1}),s(p,{title:"Maven","group-key":"maven"},{default:t(()=>[s(l,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-client-auth-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),e("p",null,[i[3]||(i[3]=n(" Ktor 클라이언트가 요구하는 아티팩트에 대한 자세한 내용은 ")),s(g,{href:"/ktor/client-dependencies",summary:"기존 프로젝트에 클라이언트 의존성을 추가하는 방법을 알아보세요."},{default:t(()=>i[2]||(i[2]=[n("클라이언트 의존성 추가")])),_:1}),i[4]||(i[4]=n("에서 확인할 수 있습니다. "))]),i[6]||(i[6]=o(`<h2 id="install_plugin" tabindex="-1">Auth 설치 <a class="header-anchor" href="#install_plugin" aria-label="Permalink to &quot;Auth 설치 {id=&quot;install_plugin&quot;}&quot;">​</a></h2><p><code>Auth</code> 플러그인을 설치하려면, <a href="./client-create-and-configure#configure-client">클라이언트 구성 블록</a> 내의 <code>install</code> 함수에 전달하세요:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.engine.cio.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.plugins.auth.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Auth) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Configure authentication</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>이제 필요한 인증 제공자를 <a href="#configure_authentication">구성</a>할 수 있습니다.</p><h2 id="configure_authentication" tabindex="-1">인증 구성 <a class="header-anchor" href="#configure_authentication" aria-label="Permalink to &quot;인증 구성 {id=&quot;configure_authentication&quot;}&quot;">​</a></h2><h3 id="choose-provider" tabindex="-1">단계 1: 인증 제공자 선택 <a class="header-anchor" href="#choose-provider" aria-label="Permalink to &quot;단계 1: 인증 제공자 선택 {id=&quot;choose-provider&quot;}&quot;">​</a></h3><p>특정 인증 제공자(<a href="./client-basic-auth">basic</a>, <a href="./client-digest-auth">digest</a> 또는 <a href="./client-bearer-auth">bearer</a>)를 사용하려면 <code>install</code> 블록 내에서 해당 함수를 호출해야 합니다. 예를 들어, <code>basic</code> 인증을 사용하려면 <a href="https://api.ktor.io/ktor-client/ktor-client-plugins/ktor-client-auth/io.ktor.client.plugins.auth.providers/basic.html" target="_blank" rel="noreferrer">basic</a> 함수를 호출하세요:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Auth) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    basic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Configure basic authentication</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>해당 블록 안에서 이 제공자에 특화된 설정을 구성할 수 있습니다.</p><h3 id="realm" tabindex="-1">단계 2: (선택 사항) Realm 구성 <a class="header-anchor" href="#realm" aria-label="Permalink to &quot;단계 2: (선택 사항) Realm 구성 {id=&quot;realm&quot;}&quot;">​</a></h3><p>선택적으로 <code>realm</code> 속성을 사용하여 realm을 구성할 수 있습니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Auth) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    basic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        realm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Access to the &#39;/&#39; path&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>다른 리소스에 접근하기 위해 여러 realm을 가진 여러 제공자를 생성할 수 있습니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Auth) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    basic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        realm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Access to the &#39;/&#39; path&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    basic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        realm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Access to the &#39;/admin&#39; path&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>이 경우 클라이언트는 realm을 포함하는 <code>WWW-Authenticate</code> 응답 헤더를 기반으로 필요한 제공자를 선택합니다.</p><h3 id="configure-provider" tabindex="-1">단계 3: 제공자 구성 <a class="header-anchor" href="#configure-provider" aria-label="Permalink to &quot;단계 3: 제공자 구성 {id=&quot;configure-provider&quot;}&quot;">​</a></h3><p>특정 <a href="#supported">제공자</a>에 대한 설정을 구성하는 방법을 알아보려면 해당 주제를 참조하세요:</p><ul><li>Ktor 클라이언트의 <a href="./client-basic-auth">Basic 인증</a></li><li>Ktor 클라이언트의 <a href="./client-digest-auth">Digest 인증</a></li><li>Ktor 클라이언트의 <a href="./client-bearer-auth">Bearer 인증</a></li></ul>`,18))])}const B=E(m,[["render",_]]);export{T as __pageData,B as default};
