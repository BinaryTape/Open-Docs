import{_ as e,c as t,o as r,ag as a}from"./chunks/framework.Bksy39di.js";const u=JSON.parse('{"title":"Kotlin 2.2 互換性ガイド","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/compatibility-guide-22.md","filePath":"ja/kotlin/compatibility-guide-22.md","lastUpdated":1754307826000}'),n={name:"ja/kotlin/compatibility-guide-22.md"};function l(i,o,s,c,p,d){return r(),t("div",null,o[0]||(o[0]=[a('<h1 id="kotlin-2-2-互換性ガイド" tabindex="-1">Kotlin 2.2 互換性ガイド <a class="header-anchor" href="#kotlin-2-2-互換性ガイド" aria-label="Permalink to &quot;Kotlin 2.2 互換性ガイド&quot;">​</a></h1><p><em><a href="/ja/kotlin/kotlin-evolution-principles">言語の現代性を保つ</a></em> および <em><a href="/ja/kotlin/kotlin-evolution-principles">快適なアップデート</a></em> は、Kotlin言語設計における基本原則です。前者は、言語の進化を妨げる構成要素を削除すべきであると述べ、後者は、コードの移行を可能な限り円滑にするため、この削除が事前に十分に伝達されるべきであると述べています。</p><p>言語の変更点のほとんどは、更新の変更履歴やコンパイラの警告など、他のチャネルを通じて既に発表されていますが、このドキュメントではそれらすべてをまとめ、Kotlin 2.1 から Kotlin 2.2 への移行のための完全なリファレンスを提供します。</p><h2 id="基本的な用語" tabindex="-1">基本的な用語 <a class="header-anchor" href="#基本的な用語" aria-label="Permalink to &quot;基本的な用語&quot;">​</a></h2><p>このドキュメントでは、いくつかの種類の互換性について説明します。</p><ul><li><em>ソース互換性</em>: ソース非互換の変更は、以前は（エラーや警告なしで）問題なくコンパイルされていたコードが、それ以降コンパイルできなくなる変更です。</li><li><em>バイナリ互換性</em>: 2つのバイナリアーティファクトは、それらを交換してもロードエラーやリンクエラーが発生しない場合に、バイナリ互換性があると言われます。</li><li><em>動作互換性</em>: 変更が適用される前と後で、同じプログラムが異なる動作を示す場合、その変更は動作非互換であると言われます。</li></ul><p>これらの定義は純粋な Kotlin についてのみ適用されることに注意してください。他の言語の観点（例えば Java から見た場合）での Kotlin コードの互換性については、このドキュメントの範囲外です。</p><h2 id="言語" tabindex="-1">言語 <a class="header-anchor" href="#言語" aria-label="Permalink to &quot;言語&quot;">​</a></h2><h3 id="アノテーション付きラムダに対する-invokedynamic-のデフォルト有効化" tabindex="-1">アノテーション付きラムダに対する invokedynamic のデフォルト有効化 <a class="header-anchor" href="#アノテーション付きラムダに対する-invokedynamic-のデフォルト有効化" aria-label="Permalink to &quot;アノテーション付きラムダに対する invokedynamic のデフォルト有効化&quot;">​</a></h3><blockquote><p><strong>イシュー</strong>: <a href="https://youtrack.jetbrains.com/issue/KTLC-278" target="_blank" rel="noreferrer">KTLC-278</a></p><p><strong>コンポーネント</strong>: コア言語</p><p><strong>非互換変更の種類</strong>: 動作</p><p><strong>概要</strong>: アノテーション付きラムダは、<code>LambdaMetafactory</code> を介してデフォルトで <code>invokedynamic</code> を使用するようになり、その動作が Java のラムダと整合するようになりました。これは、生成されたラムダクラスからアノテーションを取得することに依存していたリフレクションベースのコードに影響します。以前の動作に戻すには、<code>-Xindy-allow-annotated-lambdas=false</code> コンパイラオプションを使用してください。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>2.2.0: アノテーション付きラムダに対して <code>invokedynamic</code> をデフォルトで有効化</li></ul></blockquote><h3 id="k2における、展開型で分散を持つ型エイリアスでのコンストラクタ呼び出しと継承の禁止" tabindex="-1">K2における、展開型で分散を持つ型エイリアスでのコンストラクタ呼び出しと継承の禁止 <a class="header-anchor" href="#k2における、展開型で分散を持つ型エイリアスでのコンストラクタ呼び出しと継承の禁止" aria-label="Permalink to &quot;K2における、展開型で分散を持つ型エイリアスでのコンストラクタ呼び出しと継承の禁止&quot;">​</a></h3><blockquote><p><strong>イシュー</strong>: <a href="https://youtrack.jetbrains.com/issue/KTLC-4" target="_blank" rel="noreferrer">KTLC-4</a></p><p><strong>コンポーネント</strong>: コア言語</p><p><strong>非互換変更の種類</strong>: ソース</p><p><strong>概要</strong>: <code>out</code> などの分散修飾子を使用する型に展開される型エイリアスを使用したコンストラクタ呼び出しおよび継承は、K2コンパイラではサポートされなくなりました。これにより、元の型の使用は許可されていないが、型エイリアスを介した同じ使用は許可されていた矛盾が解消されます。移行するには、必要に応じて元の型を明示的に使用してください。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>2.0.0: 分散修飾子を持つ型に展開される型エイリアスでのコンストラクタ呼び出しまたはスーパークラス使用に対して警告を報告</li><li>2.2.0: 警告をエラーに昇格</li></ul></blockquote><h3 id="kotlinゲッターからの合成プロパティの禁止" tabindex="-1">Kotlinゲッターからの合成プロパティの禁止 <a class="header-anchor" href="#kotlinゲッターからの合成プロパティの禁止" aria-label="Permalink to &quot;Kotlinゲッターからの合成プロパティの禁止&quot;">​</a></h3><blockquote><p><strong>イシュー</strong>: <a href="https://youtrack.jetbrains.com/issue/KTLC-272" target="_blank" rel="noreferrer">KTLC-272</a></p><p><strong>コンポーネント</strong>: コア言語</p><p><strong>非互換変更の種類</strong>: ソース</p><p><strong>概要</strong>: Kotlinで定義されたゲッターに対して合成プロパティは許可されなくなりました。これは、JavaクラスがKotlinクラスを継承する場合や、<code>java.util.LinkedHashSet</code>のようなマップされた型を扱う場合に影響します。移行するには、プロパティアクセスを対応するゲッター関数への直接呼び出しに置き換えてください。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>2.0.0: Kotlinゲッターから作成された合成プロパティへのアクセスに対して警告を報告</li><li>2.2.0: 警告をエラーに昇格</li></ul></blockquote><h3 id="jvm上のインターフェース関数に対するデフォルトメソッド生成の変更" tabindex="-1">JVM上のインターフェース関数に対するデフォルトメソッド生成の変更 <a class="header-anchor" href="#jvm上のインターフェース関数に対するデフォルトメソッド生成の変更" aria-label="Permalink to &quot;JVM上のインターフェース関数に対するデフォルトメソッド生成の変更&quot;">​</a></h3><blockquote><p><strong>イシュー</strong>: <a href="https://youtrack.jetbrains.com/issue/KTLC-269" target="_blank" rel="noreferrer">KTLC-269</a></p><p><strong>コンポーネント</strong>: コア言語</p><p><strong>非互換変更の種類</strong>: バイナリ</p><p><strong>概要</strong>: インターフェースで宣言された関数は、別途設定しない限り、JVMのデフォルトメソッドにコンパイルされるようになりました。これにより、関連しないスーパークラスが競合する実装を定義する場合、Javaコードでコンパイルエラーを引き起こす可能性があります。この動作は、現在非推奨の <code>-Xjvm-default</code> オプションを置き換える安定版の <code>-jvm-default</code> コンパイラオプションによって制御されます。デフォルト実装が <code>DefaultImpls</code> クラスとサブクラスでのみ生成される以前の動作を復元するには、<code>-jvm-default=disable</code> を使用してください。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>2.2.0: <code>-jvm-default</code> コンパイラオプションがデフォルトで <code>enable</code> に設定される</li></ul></blockquote><h3 id="アノテーションプロパティに対するフィールドターゲットアノテーションの禁止" tabindex="-1">アノテーションプロパティに対するフィールドターゲットアノテーションの禁止 <a class="header-anchor" href="#アノテーションプロパティに対するフィールドターゲットアノテーションの禁止" aria-label="Permalink to &quot;アノテーションプロパティに対するフィールドターゲットアノテーションの禁止&quot;">​</a></h3><blockquote><p><strong>イシュー</strong>: <a href="https://youtrack.jetbrains.com/issue/KTLC-7" target="_blank" rel="noreferrer">KTLC-7</a></p><p><strong>コンポーネント</strong>: コア言語</p><p><strong>非互換変更の種類</strong>: ソース</p><p><strong>概要</strong>: フィールドをターゲットとするアノテーションは、アノテーションプロパティでは許可されなくなりました。これらのアノテーションは目に見える効果はありませんでしたが、この変更はそれらに依存していたカスタムIRプラグインに影響を与える可能性があります。移行するには、プロパティからフィールドをターゲットとするアノテーションを削除してください。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>2.1.0: <code>@JvmField</code> アノテーションがアノテーションプロパティで警告付きで非推奨となる</li><li>2.1.20: アノテーションプロパティ上のすべてのフィールドをターゲットとするアノテーションに対して警告を報告</li><li>2.2.0: 警告をエラーに昇格</li></ul></blockquote><h3 id="型エイリアスにおける具象化型パラメータの禁止" tabindex="-1">型エイリアスにおける具象化型パラメータの禁止 <a class="header-anchor" href="#型エイリアスにおける具象化型パラメータの禁止" aria-label="Permalink to &quot;型エイリアスにおける具象化型パラメータの禁止&quot;">​</a></h3><blockquote><p><strong>イシュー</strong>: <a href="https://youtrack.jetbrains.com/issue/KTLC-5" target="_blank" rel="noreferrer">KTLC-5</a></p><p><strong>コンポーネント</strong>: コア言語</p><p><strong>非互換変更の種類</strong>: ソース</p><p><strong>概要</strong>: 型エイリアス内の型パラメータに <code>reified</code> 修飾子を使用することは許可されなくなりました。具象化型パラメータはインライン関数でのみ有効であるため、型エイリアスで使用しても効果がありませんでした。移行するには、<code>typealias</code> 宣言から <code>reified</code> 修飾子を削除してください。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>2.1.0: 型エイリアス内の具象化型パラメータに対して警告を報告</li><li>2.2.0: 警告をエラーに昇格</li></ul></blockquote><h3 id="number-と-comparable-のインライン値クラスに対する型チェックの修正" tabindex="-1"><code>Number</code> と <code>Comparable</code> のインライン値クラスに対する型チェックの修正 <a class="header-anchor" href="#number-と-comparable-のインライン値クラスに対する型チェックの修正" aria-label="Permalink to &quot;`Number` と `Comparable` のインライン値クラスに対する型チェックの修正&quot;">​</a></h3><blockquote><p><strong>イシュー</strong>: <a href="https://youtrack.jetbrains.com/issue/KTLC-21" target="_blank" rel="noreferrer">KTLC-21</a></p><p><strong>コンポーネント</strong>: Kotlin/JVM</p><p><strong>非互換変更の種類</strong>: 動作</p><p><strong>概要</strong>: インライン値クラスは、<code>is</code> および <code>as</code> チェックにおいて、<code>java.lang.Number</code> または <code>java.lang.Comparable</code> の実装者として扱われなくなりました。これらのチェックは以前は、ボックス化されたインラインクラスに適用すると誤った結果を返していました。最適化はプリミティブ型とそのラッパーにのみ適用されるようになりました。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>2.2.0: 新しい動作を有効化</li></ul></blockquote><h3 id="間接的な依存関係からのアクセス不能なジェネリック型の禁止" tabindex="-1">間接的な依存関係からのアクセス不能なジェネリック型の禁止 <a class="header-anchor" href="#間接的な依存関係からのアクセス不能なジェネリック型の禁止" aria-label="Permalink to &quot;間接的な依存関係からのアクセス不能なジェネリック型の禁止&quot;">​</a></h3><blockquote><p><strong>イシュー</strong>: <a href="https://youtrack.jetbrains.com/issue/KTLC-3" target="_blank" rel="noreferrer">KTLC-3</a></p><p><strong>コンポーネント</strong>: コア言語</p><p><strong>非互換変更の種類</strong>: ソース</p><p><strong>概要</strong>: K2コンパイラは、コンパイラから見えない間接的な依存関係からの型を使用する際にエラーを報告するようになりました。これは、ラムダパラメータやジェネリック型引数のように、参照されている型が依存関係の欠如により利用できない場合に影響します。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>2.0.0: ラムダ内のアクセス不能なジェネリック型およびアクセス不能なジェネリック型引数の選択された使用に対してエラーを報告。ラムダ内のアクセス不能な非ジェネリック型および式とスーパークラスの型におけるアクセス不能な型引数に対して警告を報告</li><li>2.1.0: ラムダ内のアクセス不能な非ジェネリック型に対する警告をエラーに昇格</li><li>2.2.0: 式の型におけるアクセス不能な型引数に対する警告をエラーに昇格</li></ul></blockquote><h3 id="型パラメータ境界に対する可視性チェックの強制" tabindex="-1">型パラメータ境界に対する可視性チェックの強制 <a class="header-anchor" href="#型パラメータ境界に対する可視性チェックの強制" aria-label="Permalink to &quot;型パラメータ境界に対する可視性チェックの強制&quot;">​</a></h3><blockquote><p><strong>イシュー</strong>: <a href="https://youtrack.jetbrains.com/issue/KTLC-274" target="_blank" rel="noreferrer">KTLC-274</a></p><p><strong>コンポーネント</strong>: コア言語</p><p><strong>非互換変更の種類</strong>: ソース</p><p><strong>概要</strong>: 関数とプロパティは、宣言自体よりも制限的な可視性を持つ型パラメータ境界を使用できなくなりました。これにより、アクセス不能な型を間接的に公開することを防ぎます。これは以前はエラーなしでコンパイルされましたが、場合によっては実行時エラーやIR検証エラーにつながっていました。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>2.1.0: 型パラメータが宣言の可視性スコープから見えない境界を持っている場合に警告を報告</li><li>2.2.0: 警告をエラーに昇格</li></ul></blockquote><h3 id="非プライベートインライン関数でプライベート型を公開する際のエラー報告" tabindex="-1">非プライベートインライン関数でプライベート型を公開する際のエラー報告 <a class="header-anchor" href="#非プライベートインライン関数でプライベート型を公開する際のエラー報告" aria-label="Permalink to &quot;非プライベートインライン関数でプライベート型を公開する際のエラー報告&quot;">​</a></h3><blockquote><p><strong>イシュー</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-70916" target="_blank" rel="noreferrer">KT-70916</a></p><p><strong>コンポーネント</strong>: コア言語</p><p><strong>非互換変更の種類</strong>: ソース</p><p><strong>概要</strong>: 非プライベートインライン関数からプライベート型、関数、またはプロパティにアクセスすることは許可されなくなりました。移行するには、プライベートなエンティティを参照しないか、関数をプライベートにするか、<code>inline</code> 修飾子を削除してください。<code>inline</code> を削除するとバイナリ互換性が損なわれることに注意してください。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>2.2.0: 非プライベートインライン関数からプライベート型またはメンバーにアクセスする際にエラーを報告</li></ul></blockquote><h3 id="パラメータのデフォルト値として使用されるラムダにおける非ローカルリターンの禁止" tabindex="-1">パラメータのデフォルト値として使用されるラムダにおける非ローカルリターンの禁止 <a class="header-anchor" href="#パラメータのデフォルト値として使用されるラムダにおける非ローカルリターンの禁止" aria-label="Permalink to &quot;パラメータのデフォルト値として使用されるラムダにおける非ローカルリターンの禁止&quot;">​</a></h3><blockquote><p><strong>イシュー</strong>: <a href="https://youtrack.jetbrains.com/issue/KTLC-286" target="_blank" rel="noreferrer">KTLC-286</a></p><p><strong>コンポーネント</strong>: コア言語</p><p><strong>非互換変更の種類</strong>: ソース</p><p><strong>概要</strong>: パラメータのデフォルト値として使用されるラムダ内で、非ローカルのreturn文は許可されなくなりました。このパターンは以前はコンパイルできましたが、実行時クラッシュを引き起こしました。移行するには、ラムダを書き換えて非ローカルリターンを避けるか、ロジックをデフォルト値の外に移動してください。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>2.2.0: パラメータのデフォルト値として使用されるラムダにおける非ローカルリターンに対してエラーを報告</li></ul></blockquote><h2 id="標準ライブラリ" tabindex="-1">標準ライブラリ <a class="header-anchor" href="#標準ライブラリ" aria-label="Permalink to &quot;標準ライブラリ&quot;">​</a></h2><h3 id="kotlin-native-throws-の非推奨化" tabindex="-1"><code>kotlin.native.Throws</code> の非推奨化 <a class="header-anchor" href="#kotlin-native-throws-の非推奨化" aria-label="Permalink to &quot;`kotlin.native.Throws` の非推奨化&quot;">​</a></h3><blockquote><p><strong>イシュー</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-72137" target="_blank" rel="noreferrer">KT-72137</a></p><p><strong>コンポーネント</strong>: Kotlin/Native</p><p><strong>非互換変更の種類</strong>: ソース</p><p><strong>概要</strong>: <code>kotlin.native.Throws</code> は非推奨になりました。代わりに共通の <a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin/-throws/" target="_blank" rel="noreferrer"><code>kotlin.Throws</code></a> アノテーションを使用してください。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.9.0: <code>kotlin.native.Throws</code> を使用する際に警告を報告</li><li>2.2.0: 警告をエラーに昇格</li></ul></blockquote><h3 id="abstractdoubletimesource-の非推奨化" tabindex="-1"><code>AbstractDoubleTimeSource</code> の非推奨化 <a class="header-anchor" href="#abstractdoubletimesource-の非推奨化" aria-label="Permalink to &quot;`AbstractDoubleTimeSource` の非推奨化&quot;">​</a></h3><blockquote><p><strong>イシュー</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-72137" target="_blank" rel="noreferrer">KT-72137</a></p><p><strong>コンポーネント</strong>: kotlin-stdlib</p><p><strong>非互換変更の種類</strong>: ソース</p><p><strong>概要</strong>: <code>AbstractDoubleTimeSource</code> は非推奨になりました。代わりに <a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin.time/-abstract-long-time-source/" target="_blank" rel="noreferrer"><code>AbstractLongTimeSource</code></a> を使用してください。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.8.20: <code>AbstractDoubleTimeSource</code> を使用する際に警告を報告</li><li>2.2.0: 警告をエラーに昇格</li></ul></blockquote><h2 id="ツール" tabindex="-1">ツール <a class="header-anchor" href="#ツール" aria-label="Permalink to &quot;ツール&quot;">​</a></h2><h3 id="kotlincompiletool-の-setsource-関数がソースを置き換えるように修正" tabindex="-1"><code>KotlinCompileTool</code> の <code>setSource()</code> 関数がソースを置き換えるように修正 <a class="header-anchor" href="#kotlincompiletool-の-setsource-関数がソースを置き換えるように修正" aria-label="Permalink to &quot;`KotlinCompileTool` の `setSource()` 関数がソースを置き換えるように修正&quot;">​</a></h3><blockquote><p><strong>イシュー</strong>: <a href="https://youtrack.com/issue/KT-59632" target="_blank" rel="noreferrer">KT-59632</a></p><p><strong>コンポーネント</strong>: Gradle</p><p><strong>非互換変更の種類</strong>: 動作</p><p><strong>概要</strong>: <a href="https://kotlinlang.org/api/kotlin-gradle-plugin/kotlin-gradle-plugin-api/org.jetbrains.kotlin.gradle.tasks/-kotlin-compile-tool/#" target="_blank" rel="noreferrer"><code>KotlinCompileTool</code></a> インターフェースの <a href="https://kotlinlang.org/api/kotlin-gradle-plugin/kotlin-gradle-plugin-api/org.jetbrains.kotlin.gradle.tasks/-kotlin-compile-tool/set-source.html#" target="_blank" rel="noreferrer"><code>setSource()</code></a> 関数は、設定されたソースに追加するのではなく、置き換えるようになりました。既存のソースを置き換えずにソースを追加したい場合は、<a href="https://kotlinlang.org/api/kotlin-gradle-plugin/kotlin-gradle-plugin-api/org.jetbrains.kotlin.gradle.tasks/-kotlin-compile-tool/source.html#" target="_blank" rel="noreferrer"><code>source()</code></a> 関数を使用してください。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>2.2.0: 新しい動作を有効化</li></ul></blockquote><h3 id="kotlincompilationoutput-resourcesdirprovider-プロパティの非推奨化" tabindex="-1"><code>KotlinCompilationOutput#resourcesDirProvider</code> プロパティの非推奨化 <a class="header-anchor" href="#kotlincompilationoutput-resourcesdirprovider-プロパティの非推奨化" aria-label="Permalink to &quot;`KotlinCompilationOutput#resourcesDirProvider` プロパティの非推奨化&quot;">​</a></h3><blockquote><p><strong>イシュー</strong>: <a href="https://youtrack.com/issue/KT-70620" target="_blank" rel="noreferrer">KT-70620</a></p><p><strong>コンポーネント</strong>: Gradle</p><p><strong>非互換変更の種類</strong>: ソース</p><p><strong>概要</strong>: <code>KotlinCompilationOutput#resourcesDirProvider</code> プロパティは非推奨になりました。追加のリソースディレクトリを追加するには、Gradleビルドスクリプトで代わりに <a href="https://kotlinlang.org/api/kotlin-gradle-plugin/kotlin-gradle-plugin-api/org.jetbrains.kotlin.gradle.plugin/-kotlin-source-set/resources.html" target="_blank" rel="noreferrer"><code>KotlinSourceSet.resources</code></a> を使用してください。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>2.1.0: <code>KotlinCompilationOutput#resourcesDirProvider</code> は警告付きで非推奨</li><li>2.2.0: 警告をエラーに昇格</li></ul></blockquote><h3 id="basekapt-annotationprocessoroptionproviders-プロパティの非推奨化" tabindex="-1"><code>BaseKapt.annotationProcessorOptionProviders</code> プロパティの非推奨化 <a class="header-anchor" href="#basekapt-annotationprocessoroptionproviders-プロパティの非推奨化" aria-label="Permalink to &quot;`BaseKapt.annotationProcessorOptionProviders` プロパティの非推奨化&quot;">​</a></h3><blockquote><p><strong>イシュー</strong>: <a href="https://youtrack.com/issue/KT-58009" target="_blank" rel="noreferrer">KT-58009</a></p><p><strong>コンポーネント</strong>: Gradle</p><p><strong>非互換変更の種類</strong>: ソース</p><p><strong>概要</strong>: <a href="https://kotlinlang.org/api/kotlin-gradle-plugin/kotlin-gradle-plugin-api/org.jetbrains.kotlin.gradle.tasks/-base-kapt/annotation-processor-option-providers.html#" target="_blank" rel="noreferrer"><code>BaseKapt.annotationProcessorOptionProviders</code></a> プロパティは非推奨になりました。<code>MutableList&lt;Any&gt;</code> の代わりに <code>ListProperty&lt;CommandLineArgumentProvider&gt;</code> を受け入れる <code>BaseKapt.annotationProcessorOptionsProviders</code> が推奨されます。これにより、期待される要素タイプが明確に定義され、誤った要素（ネストされたリストなど）の追加による実行時エラーを防ぎます。現在のコードがリストを単一の要素として追加している場合、<code>add()</code> 関数を <code>addAll()</code> 関数に置き換えてください。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>2.2.0: APIで新しい型を強制</li></ul></blockquote><h3 id="kotlin-android-extensions-プラグインの非推奨化" tabindex="-1"><code>kotlin-android-extensions</code> プラグインの非推奨化 <a class="header-anchor" href="#kotlin-android-extensions-プラグインの非推奨化" aria-label="Permalink to &quot;`kotlin-android-extensions` プラグインの非推奨化&quot;">​</a></h3><blockquote><p><strong>イシュー</strong>: <a href="https://youtrack.com/issue/KT-72341/" target="_blank" rel="noreferrer">KT-72341</a></p><p><strong>コンポーネント</strong>: Gradle</p><p><strong>非互換変更の種類</strong>: ソース</p><p><strong>概要</strong>: <code>kotlin-android-extensions</code> プラグインは非推奨になりました。<code>Parcelable</code> 実装ジェネレーターには <a href="https://plugins.gradle.org/plugin/org.jetbrains.kotlin.plugin.parcelize" target="_blank" rel="noreferrer"><code>kotlin-parcelize</code></a> という別のプラグインを、合成ビューには Android Jetpack の <a href="https://developer.android.com/topic/libraries/view-binding" target="_blank" rel="noreferrer">ビューバインディング</a> を代わりに使用してください。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.4.20: プラグインが非推奨となる</li><li>2.1.20: 設定エラーが導入され、プラグインコードは実行されない</li><li>2.2.0: プラグインコードが削除される</li></ul></blockquote><h3 id="kotlinoptions-dslの非推奨化" tabindex="-1"><code>kotlinOptions</code> DSLの非推奨化 <a class="header-anchor" href="#kotlinoptions-dslの非推奨化" aria-label="Permalink to &quot;`kotlinOptions` DSLの非推奨化&quot;">​</a></h3><blockquote><p><strong>イシュー</strong>: <a href="https://youtrack.com/issue/KT-54110" target="_blank" rel="noreferrer">KT-54110</a></p><p><strong>コンポーネント</strong>: Gradle</p><p><strong>非互換変更の種類</strong>: ソース</p><p><strong>概要</strong>: <code>kotlinOptions</code> DSLと関連する <code>KotlinCompile&lt;KotlinOptions&gt;</code> タスクインターフェースを介してコンパイラオプションを設定する機能は、新しい <code>compilerOptions</code> DSLを優先して非推奨になりました。この非推奨化の一環として、<code>kotlinOptions</code> インターフェースのすべてのプロパティも個別に非推奨としてマークされています。移行するには、<code>compilerOptions</code> DSLを使用してコンパイラオプションを設定してください。移行に関するガイダンスについては、「<a href="/ja/kotlin/gradle-compiler-options#migrate-from-kotlinoptions-to-compileroptions"><code>kotlinOptions {}</code> から <code>compilerOptions {}</code> への移行</a>」を参照してください。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>2.0.0: <code>kotlinOptions</code> DSLに対して警告を報告</li><li>2.2.0: 警告をエラーに昇格し、<code>kotlinOptions</code> のすべてのプロパティを非推奨化</li></ul></blockquote><h3 id="kotlin-incremental-useclasspathsnapshot-プロパティの削除" tabindex="-1"><code>kotlin.incremental.useClasspathSnapshot</code> プロパティの削除 <a class="header-anchor" href="#kotlin-incremental-useclasspathsnapshot-プロパティの削除" aria-label="Permalink to &quot;`kotlin.incremental.useClasspathSnapshot` プロパティの削除&quot;">​</a></h3><blockquote><p><strong>イシュー</strong>: <a href="https://youtrack.com/issue/KT-62963" target="_blank" rel="noreferrer">KT-62963</a></p><p><strong>コンポーネント</strong>: Gradle</p><p><strong>非互換変更の種類</strong>: ソース</p><p><strong>概要</strong>: <code>kotlin.incremental.useClasspathSnapshot</code> Gradleプロパティは削除されました。このプロパティは、非推奨のJVM履歴ベースのインクリメンタルコンパイルモードを制御していました。このモードは、Kotlin 1.8.20以降デフォルトで有効になっているクラスパスベースのアプローチに置き換えられました。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>2.0.20: <code>kotlin.incremental.useClasspathSnapshot</code> プロパティを警告付きで非推奨とする</li><li>2.2.0: プロパティを削除</li></ul></blockquote><h3 id="kotlinスクリプト機能の非推奨化" tabindex="-1">Kotlinスクリプト機能の非推奨化 <a class="header-anchor" href="#kotlinスクリプト機能の非推奨化" aria-label="Permalink to &quot;Kotlinスクリプト機能の非推奨化&quot;">​</a></h3><blockquote><p><strong>イシュー</strong>: <a href="https://youtrack.com/issue/KT-71685" target="_blank" rel="noreferrer">KT-71685</a>、<a href="https://youtrack.com/issue/KT-75632/" target="_blank" rel="noreferrer">KT-75632</a>、<a href="https://youtrack.com/issue/KT-76196/" target="_blank" rel="noreferrer">KT-76196</a>。</p><p><strong>コンポーネント</strong>: スクリプト</p><p><strong>非互換変更の種類</strong>: ソース</p><p><strong>概要</strong>: Kotlin 2.2.0 では、以下のサポートが非推奨になります。</p><ul><li>REPL: <code>kotlinc</code> を介してREPLを継続して使用するには、<code>-Xrepl</code> コンパイラオプションでオプトインしてください。</li><li>JSR-223: <a href="https://jcp.org/en/jsr/detail?id=223" target="_blank" rel="noreferrer">JSR</a> が <strong>Withdrawn (撤回済み)</strong> の状態にあるためです。JSR-223の実装は言語バージョン1.9では引き続き動作しますが、将来的にK2コンパイラへの移行計画はありません。</li><li><code>KotlinScriptMojo</code> Mavenプラグイン。引き続き使用するとコンパイラ警告が表示されます。</li></ul><p>詳細については、当社の<a href="https://blog.jetbrains.com/kotlin/2024/11/state-of-kotlin-scripting-2024/" target="_blank" rel="noreferrer">ブログ記事</a>を参照してください。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>2.1.0: <code>kotlinc</code> におけるREPLの使用を警告付きで非推奨とする</li><li>2.2.0: <code>kotlinc</code> を介してREPLを使用するには、<code>-Xrepl</code> コンパイラオプションでオプトインする。JSR-223を非推奨とする（言語バージョン1.9に切り替えることでサポートを復元可能）。<code>KotlinScriptMojo</code> Mavenプラグインを非推奨とする。</li></ul></blockquote><h3 id="曖昧さ解消分類子プロパティの非推奨化" tabindex="-1">曖昧さ解消分類子プロパティの非推奨化 <a class="header-anchor" href="#曖昧さ解消分類子プロパティの非推奨化" aria-label="Permalink to &quot;曖昧さ解消分類子プロパティの非推奨化&quot;">​</a></h3><blockquote><p><strong>イシュー</strong>: <a href="https://youtrack.com/issue/KT-58231" target="_blank" rel="noreferrer">KT-58231</a></p><p><strong>コンポーネント</strong>: Gradle</p><p><strong>非互換変更の種類</strong>: ソース</p><p><strong>概要</strong>: Kotlin Gradleプラグインがソースセット名とIDEインポートの曖昧さを解消する方法を制御するために使用されていたオプションは、廃止されました。したがって、<code>KotlinTarget</code> インターフェースの以下のプロパティは非推奨になりました。</p><ul><li><code>useDisambiguationClassifierAsSourceSetNamePrefix</code></li><li><code>overrideDisambiguationClassifierOnIdeImport</code></li></ul><p><strong>非推奨サイクル</strong>:</p><ul><li>2.0.0: Gradleプロパティが使用された場合に警告を報告</li><li>2.1.0: この警告をエラーに昇格</li><li>2.2.0: Gradleプロパティを削除</li></ul></blockquote><h3 id="共通化パラメータの非推奨化" tabindex="-1">共通化パラメータの非推奨化 <a class="header-anchor" href="#共通化パラメータの非推奨化" aria-label="Permalink to &quot;共通化パラメータの非推奨化&quot;">​</a></h3><blockquote><p><strong>イシュー</strong>: <a href="https://youtrack.com/issue/KT-75161" target="_blank" rel="noreferrer">KT-75161</a></p><p><strong>コンポーネント</strong>: Gradle</p><p><strong>非互換変更の種類</strong>: ソース</p><p><strong>概要</strong>: 実験的な共通化モードのパラメータは、Kotlin Gradleプラグインで非推奨になりました。これらのパラメータは、無効なコンパイルアーティファクトを生成し、それがキャッシュされる可能性があります。影響を受けるアーティファクトを削除するには：</p><ol><li><code>gradle.properties</code> ファイルから以下のオプションを削除します。</li></ol><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.mpp.enableOptimisticNumberCommonization</span></span>\n<span class="line"><span>kotlin.mpp.enablePlatformIntegerCommonization</span></span></code></pre></div><ol start="2"><li><code>~/.konan/*/klib/commonized</code> ディレクトリ内の共通化キャッシュをクリアするか、次のコマンドを実行します。</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cleanNativeDistributionCommonization</span></span></code></pre></div><p><strong>非推奨サイクル</strong>:</p><ul><li>2.2.0: 共通化パラメータをエラー付きで非推奨とする</li><li>2.2.20: 共通化パラメータを削除</li></ul></blockquote><h3 id="レガシーメタデータコンパイルのサポートの非推奨化" tabindex="-1">レガシーメタデータコンパイルのサポートの非推奨化 <a class="header-anchor" href="#レガシーメタデータコンパイルのサポートの非推奨化" aria-label="Permalink to &quot;レガシーメタデータコンパイルのサポートの非推奨化&quot;">​</a></h3><blockquote><p><strong>イシュー</strong>: <a href="https://youtrack.com/issue/KT-61817" target="_blank" rel="noreferrer">KT-61817</a></p><p><strong>コンポーネント</strong>: Gradle</p><p><strong>非互換変更の種類</strong>: ソース</p><p><strong>概要</strong>: 共通ソースセットと中間ソースセットの間に階層構造を設定し、中間ソースセットを作成するために使用されていたオプションは廃止されました。以下のコンパイラオプションは削除されます。</p><ul><li><code>isCompatibilityMetadataVariantEnabled</code></li><li><code>withGranularMetadata</code></li><li><code>isKotlinGranularMetadataEnabled</code></li></ul><p><strong>非推奨サイクル</strong>:</p><ul><li>2.2.0: Kotlin Gradleプラグインからコンパイラオプションを削除</li></ul></blockquote><h3 id="kotlincompilation-source-apiの非推奨化" tabindex="-1"><code>KotlinCompilation.source</code> APIの非推奨化 <a class="header-anchor" href="#kotlincompilation-source-apiの非推奨化" aria-label="Permalink to &quot;`KotlinCompilation.source` APIの非推奨化&quot;">​</a></h3><blockquote><p><strong>イシュー</strong>: <a href="https://youtrack.com/issue/KT-64991" target="_blank" rel="noreferrer">KT-64991</a></p><p><strong>コンポーネント</strong>: Gradle</p><p><strong>非互換変更の種類</strong>: ソース</p><p><strong>概要</strong>: KotlinソースセットをKotlinコンパイルに直接追加することを許可していた <code>KotlinCompilation.source</code> APIへのアクセスは非推奨になりました。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.9.0: <code>KotlinCompilation.source</code> が使用された場合に警告を報告</li><li>1.9.20: この警告をエラーに昇格</li><li>2.2.0: Kotlin Gradleプラグインから <code>KotlinCompilation.source</code> を削除。それを使用しようとすると、ビルドスクリプトのコンパイル中に「unresolved reference」エラーが発生する</li></ul></blockquote><h3 id="ターゲットプリセットapiの非推奨化" tabindex="-1">ターゲットプリセットAPIの非推奨化 <a class="header-anchor" href="#ターゲットプリセットapiの非推奨化" aria-label="Permalink to &quot;ターゲットプリセットAPIの非推奨化&quot;">​</a></h3><blockquote><p><strong>イシュー</strong>: <a href="https://youtrack.com/issue/KT-71698" target="_blank" rel="noreferrer">KT-71698</a></p><p><strong>コンポーネント</strong>: Gradle</p><p><strong>非互換変更の種類</strong>: ソース</p><p><strong>概要</strong>: Kotlin Multiplatformターゲットのターゲットプリセットは廃止されました。<code>jvm()</code> や <code>iosSimulatorArm64()</code> のようなターゲットDSL関数が同じユースケースをカバーするようになりました。プリセット関連のAPIはすべて非推奨になりました。</p><ul><li><code>org.jetbrains.kotlin.gradle.dsl.KotlinMultiplatformExtension</code> の <code>presets</code> プロパティ</li><li><code>org.jetbrains.kotlin.gradle.plugin.KotlinTargetPreset</code> インターフェースとそのすべての継承者</li><li><code>fromPreset</code> のオーバーロード</li></ul><p><strong>非推奨サイクル</strong>:</p><ul><li>1.9.20: プリセット関連APIのすべての使用に対して警告を報告</li><li>2.0.0: この警告をエラーに昇格</li><li>2.2.0: Kotlin Gradleプラグインの公開APIからプリセット関連APIを削除。引き続きそれを使用するソースは「unresolved reference」エラーで失敗し、バイナリ（例えばGradleプラグイン）は、Kotlin Gradleプラグインの最新バージョンに対して再コンパイルされない限り、リンクエラーで失敗する可能性があります</li></ul></blockquote><h3 id="appleターゲットショートカットの非推奨化" tabindex="-1">Appleターゲットショートカットの非推奨化 <a class="header-anchor" href="#appleターゲットショートカットの非推奨化" aria-label="Permalink to &quot;Appleターゲットショートカットの非推奨化&quot;">​</a></h3><blockquote><p><strong>イシュー</strong>: <a href="https://youtrack.com/issue/KT-70615" target="_blank" rel="noreferrer">KT-70615</a></p><p><strong>コンポーネント</strong>: Gradle</p><p><strong>非互換変更の種類</strong>: ソース</p><p><strong>概要</strong>: <code>ios()</code>、<code>watchos()</code>、<code>tvos()</code> のターゲットショートカットは、Kotlin Multiplatform DSLで非推奨になりました。ショートカットは、Appleターゲットのソースセット階層を部分的に作成するために設計されました。Kotlin Multiplatform Gradleプラグインは、組み込みの階層テンプレートを提供するようになりました。ショートカットの代わりに、ターゲットのリストを指定すると、プラグインがそれらの中間ソースセットを自動的に設定します。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.9.20: ターゲットショートカットが使用された場合に警告を報告。代わりにデフォルトでデフォルトの階層テンプレートが有効になる</li><li>2.1.0: ターゲットショートカットが使用された場合にエラーを報告</li><li>2.2.0: Kotlin Multiplatform GradleプラグインからターゲットショートカットDSLを削除</li></ul></blockquote><h3 id="publishalllibraryvariants-関数の非推奨化" tabindex="-1"><code>publishAllLibraryVariants()</code> 関数の非推奨化 <a class="header-anchor" href="#publishalllibraryvariants-関数の非推奨化" aria-label="Permalink to &quot;`publishAllLibraryVariants()` 関数の非推奨化&quot;">​</a></h3><blockquote><p><strong>イシュー</strong>: <a href="https://youtrack.com/issue/KT-60623" target="_blank" rel="noreferrer">KT-60623</a></p><p><strong>コンポーネント</strong>: Gradle</p><p><strong>非互換変更の種類</strong>: ソース</p><p><strong>概要</strong>: <code>publishAllLibraryVariants()</code> 関数は非推奨になりました。これはAndroidターゲットのすべてのビルドバリアントを公開するように設計されていました。特に複数のフレーバーとビルドタイプが使用されている場合、バリアント解決に問題を引き起こす可能性があるため、現在は推奨されません。代わりにビルドバリアントを指定する <code>publishLibraryVariants()</code> 関数を使用してください。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>2.2.0: <code>publishAllLibraryVariants()</code> は非推奨となる</li></ul></blockquote><h3 id="android-ターゲットの非推奨化" tabindex="-1"><code>android</code> ターゲットの非推奨化 <a class="header-anchor" href="#android-ターゲットの非推奨化" aria-label="Permalink to &quot;`android` ターゲットの非推奨化&quot;">​</a></h3><blockquote><p><strong>イシュー</strong>: <a href="https://youtrack.com/issue/KT-71608" target="_blank" rel="noreferrer">KT-71608</a></p><p><strong>コンポーネント</strong>: Gradle</p><p><strong>非互換変更の種類</strong>: ソース</p><p><strong>概要</strong>: 現在のKotlin DSLでは <code>android</code> ターゲット名が非推奨になりました。代わりに <code>androidTarget</code> を使用してください。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>1.9.0: Kotlin Multiplatformプロジェクトで <code>android</code> 名が使用された場合に非推奨警告を導入</li><li>2.1.0: この警告をエラーに昇格</li><li>2.2.0: Kotlin Multiplatform Gradleプラグインから <code>android</code> ターゲットDSLを削除</li></ul></blockquote><h3 id="cinteropprocess-の-konanversion-の非推奨化" tabindex="-1"><code>CInteropProcess</code> の <code>konanVersion</code> の非推奨化 <a class="header-anchor" href="#cinteropprocess-の-konanversion-の非推奨化" aria-label="Permalink to &quot;`CInteropProcess` の `konanVersion` の非推奨化&quot;">​</a></h3><blockquote><p><strong>イシュー</strong>: <a href="https://youtrack.com/issue/KT-71069" target="_blank" rel="noreferrer">KT-71069</a></p><p><strong>コンポーネント</strong>: Gradle</p><p><strong>非互換変更の種類</strong>: ソース</p><p><strong>概要</strong>: <code>CInteropProcess</code> タスクの <code>konanVersion</code> プロパティは非推奨になりました。代わりに <code>CInteropProcess.kotlinNativeVersion</code> を使用してください。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>2.1.0: <code>konanVersion</code> プロパティが使用された場合に警告を報告</li><li>2.2.0: この警告をエラーに昇格</li><li>2.3.0: Kotlin Gradleプラグインから <code>konanVersion</code> プロパティを削除</li></ul></blockquote><h3 id="cinteropprocess-の-destinationdir-の非推奨化" tabindex="-1"><code>CInteropProcess</code> の <code>destinationDir</code> の非推奨化 <a class="header-anchor" href="#cinteropprocess-の-destinationdir-の非推奨化" aria-label="Permalink to &quot;`CInteropProcess` の `destinationDir` の非推奨化&quot;">​</a></h3><blockquote><p><strong>イシュー</strong>: <a href="https://youtrack.com/issue/KT-71068" target="_blank" rel="noreferrer">KT-71068</a></p><p><strong>コンポーネント</strong>: Gradle</p><p><strong>非互換変更の種類</strong>: ソース</p><p><strong>概要</strong>: <code>CInteropProcess</code> タスクの <code>destinationDir</code> プロパティは非推奨になりました。代わりに <code>CInteropProcess.destinationDirectory.set()</code> 関数を使用してください。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>2.1.0: <code>destinationDir</code> プロパティが使用された場合に警告を報告</li><li>2.2.0: この警告をエラーに昇格</li><li>2.3.0: Kotlin Gradleプラグインから <code>destinationDir</code> プロパティを削除</li></ul></blockquote><h3 id="kotlinartifacts-apiの非推奨化" tabindex="-1"><code>kotlinArtifacts</code> APIの非推奨化 <a class="header-anchor" href="#kotlinartifacts-apiの非推奨化" aria-label="Permalink to &quot;`kotlinArtifacts` APIの非推奨化&quot;">​</a></h3><blockquote><p><strong>イシュー</strong>: <a href="https://youtrack.com/issue/KT-74953" target="_blank" rel="noreferrer">KT-74953</a></p><p><strong>コンポーネント</strong>: Gradle</p><p><strong>非互換変更の種類</strong>: ソース</p><p><strong>概要</strong>: 実験的な <code>kotlinArtifacts</code> APIは非推奨になりました。最終的なネイティブバイナリをビルドするには、Kotlin Gradleプラグインで利用可能な現在のDSLを使用してください。移行に十分でない場合は、<a href="https://youtrack.jetbrains.com/issue/KT-74953" target="_blank" rel="noreferrer">こちらのYouTrackイシュー</a>にコメントを残してください。</p><p><strong>非推奨サイクル</strong>:</p><ul><li>2.2.0: <code>kotlinArtifacts</code> APIが使用された場合に警告を報告</li><li>2.3.0: この警告をエラーに昇格</li></ul></blockquote>',72)]))}const h=e(n,[["render",l]]);export{u as __pageData,h as default};
