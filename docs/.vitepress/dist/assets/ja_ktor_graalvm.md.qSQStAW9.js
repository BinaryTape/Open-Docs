import{_ as d,C as r,c as g,o as p,j as t,G as l,ag as u,a as e,w as o}from"./chunks/framework.Bksy39di.js";const G=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ja/ktor/graalvm.md","filePath":"ja/ktor/graalvm.md","lastUpdated":1755457140000}'),f={name:"ja/ktor/graalvm.md"};function h(c,a,v,b,_,k){const n=r("control"),i=r("tldr"),s=r("web-summary"),m=r("link-summary");return p(),g("div",null,[a[5]||(a[5]=t("h1",{id:"graalvm",tabindex:"-1"},[e("GraalVM "),t("a",{class:"header-anchor",href:"#graalvm","aria-label":'Permalink to "GraalVM"'},"​")],-1)),l(i,null,{default:o(()=>[t("p",null,[l(n,null,{default:o(()=>a[0]||(a[0]=[e("サンプルプロジェクト")])),_:1}),a[1]||(a[1]=e(": ")),a[2]||(a[2]=t("a",{href:"https://github.com/ktorio/ktor-samples/tree/main/graalvm"},"graalvm",-1))])]),_:1}),l(s,null,{default:o(()=>a[3]||(a[3]=[e(" Ktorサーバーアプリケーションは、異なるプラットフォーム向けのネイティブイメージを作成するためにGraalVMを利用できます。 ")])),_:1}),l(m,null,{default:o(()=>a[4]||(a[4]=[e(" 異なるプラットフォームでネイティブイメージのためにGraalVMを使用する方法を学びましょう。 ")])),_:1}),a[6]||(a[6]=u('<p>Ktorサーバーアプリケーションは、異なるプラットフォーム向けのネイティブイメージを作成するために<a href="https://graalvm.org" target="_blank" rel="noreferrer">GraalVM</a>を利用でき、もちろん、GraalVMが提供する高速な起動時間やその他の利点を活用できます。</p><p>現在、GraalVMを活用したいKtorサーバーアプリケーションは、<a href="./server-engines">アプリケーションエンジン</a>としてCIOを使用する必要があります。</p><h2 id="graalvmの準備" tabindex="-1">GraalVMの準備 <a class="header-anchor" href="#graalvmの準備" aria-label="Permalink to &quot;GraalVMの準備&quot;">​</a></h2><p>GraalVMをインストールし、システムパスにそのインストールディレクトリを含めることに加えて、すべての依存関係がバンドルされるようにアプリケーションを準備する必要があります。つまり、fat JARを作成する必要があります。</p><h3 id="リフレクションの設定" tabindex="-1">リフレクションの設定 <a class="header-anchor" href="#リフレクションの設定" aria-label="Permalink to &quot;リフレクションの設定&quot;">​</a></h3><p>GraalVMは、リフレクションを使用するアプリケーション（Ktorの場合もこれに該当します）に関して<a href="https://www.graalvm.org/22.1/reference-manual/native-image/Reflection/" target="_blank" rel="noreferrer">いくつかの要件</a>を持っています。特定の型情報を含む<a href="https://github.com/ktorio/ktor-samples/blob/main/graalvm/src/main/resources/META-INF/native-image/reflect-config.json" target="_blank" rel="noreferrer">JSONファイル</a>を提供する必要があり、この設定ファイルは<code>native-image</code>ツールに引数として渡されます。</p><h2 id="native-imageツールの実行" tabindex="-1"><code>native-image</code>ツールの実行 <a class="header-anchor" href="#native-imageツールの実行" aria-label="Permalink to &quot;`native-image`ツールの実行&quot;">​</a></h2><p>fat JARの準備ができたら、必要な唯一のステップは<code>native-image</code> CLIツールを使用してネイティブイメージを作成することです。これは<a href="https://graalvm.github.io/native-build-tools/0.9.8/gradle-plugin.html" target="_blank" rel="noreferrer">Gradleプラグイン</a>によっても実行できます。<code>build.gradle.kts</code>ファイルの例は<a href="https://github.com/ktorio/ktor-samples/blob/main/graalvm/build.gradle.kts" target="_blank" rel="noreferrer">こちら</a>で確認できます。ただし、使用されている依存関係やプロジェクトのパッケージ名などによって、いくつかのオプションが異なる場合があることにご注意ください。</p><h2 id="結果のバイナリを実行する" tabindex="-1">結果のバイナリを実行する <a class="header-anchor" href="#結果のバイナリを実行する" aria-label="Permalink to &quot;結果のバイナリを実行する&quot;">​</a></h2><p>シェルスクリプトがエラーなしで実行された場合、ネイティブアプリケーションが生成されます。サンプルの場合は<code>graal-server</code>という名前です。これを実行するとKtorサーバーが起動し、<code>https://0.0.0.0:8080</code>で応答します。</p>',10))])}const M=d(f,[["render",h]]);export{G as __pageData,M as default};
