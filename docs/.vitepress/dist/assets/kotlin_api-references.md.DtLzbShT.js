import{_ as i}from"./chunks/github.BrA_NiFJ.js";import{_ as p,C as o,c as u,o as h,G as e,w as r,j as t,a as l}from"./chunks/framework.Bksy39di.js";const w=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/api-references.md","filePath":"kotlin/api-references.md","lastUpdated":1754307826000}'),c={name:"kotlin/api-references.md"};function b(m,n,k,d,g,f){const a=o("list"),s=o("topic");return h(),u("div",null,[e(s,{"xmlns:xsi":"http://www.w3.org/2001/XMLSchema-instance","xsi:noNamespaceSchemaLocation":"https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd",id:"api-references",title:"API 参考"},{default:r(()=>[n[1]||(n[1]=t("p",null,"欢迎来到 Kotlin API 参考页面。您可以在这里找到官方 Kotlin 库和工具的 API 文档链接。",-1)),e(a,{columns:"2"},{default:r(()=>n[0]||(n[0]=[t("li",null,[t("a",{href:"https://kotlinlang.org/api/core/kotlin-stdlib/"},[t("b",null,"Standard library (stdlib)")]),t("br"),t("p",null,"Kotlin 标准库为 Kotlin 编程提供核心功能，包括集合、文本和字符串处理、区间、序列等基本 API。它扩展了平台特有的 API，并提供了 Kotlin 优先的 API 来使用它们。"),t("img",{src:i,width:"18",alt:"GitHub"}),l(),t("a",{href:"https://github.com/JetBrains/kotlin"},"kotlin"),t("br")],-1),t("li",null,[t("a",{href:"https://kotlinlang.org/api/core/kotlin-test/"},[t("b",null,"Test library (kotlin.test)")]),t("br"),t("p",null,"一个多平台测试库，提供常用的测试注解和实用函数。它支持与每个平台上的流行测试框架集成，并在整个 Kotlin 生态系统中提供统一的测试体验。"),t("img",{src:i,width:"18",alt:"GitHub"}),l(),t("a",{href:"https://github.com/JetBrains/kotlin"},"kotlin"),t("br")],-1),t("li",null,[t("a",{href:"https://kotlinlang.org/api/kotlinx.coroutines/"},[t("b",null,"Coroutines (kotlinx.coroutines)")]),t("br"),t("p",null,"一个用于使用 Kotlin 协程进行异步编程的强大库。它提供工具来支持结构化并发、异步流、互斥锁和信号量等同步原语、测试等。"),t("img",{src:i,width:"18",alt:"GitHub"}),l(),t("a",{href:"https://github.com/Kotlin/kotlinx.coroutines"},"kotlinx.coroutines"),t("br")],-1),t("li",null,[t("a",{href:"https://kotlinlang.org/api/kotlinx.serialization/"},[t("b",null,"Serialization (kotlinx.serialization)")]),t("br"),t("p",null,"一个多平台序列化库。它提供了一种类型安全、编译期机制，用于在 Kotlin 对象与多种格式（如 JSON、CBOR 和 Protocol Buffers）之间进行转换。"),t("img",{src:i,width:"18",alt:"GitHub"}),l(),t("a",{href:"https://github.com/Kotlin/kotlinx.serialization"},"kotlinx.serialization"),t("br")],-1),t("li",null,[t("a",{href:"https://kotlinlang.org/api/kotlinx-io/"},[t("b",null,"Kotlin I/O library (kotlinx-io)")]),t("br"),t("p",null,"一个用于底层 I/O 操作的多平台库。它定义了用于读写二进制流和缓冲区的抽象，旨在跨所有 Kotlin 平台实现高效和可移植。"),t("img",{src:i,width:"18",alt:"GitHub"}),l(),t("a",{href:"https://github.com/Kotlin/kotlinx-io"},"kotlinx-io"),t("br")],-1),t("li",null,[t("a",{href:"https://kotlinlang.org/api/kotlinx-datetime/"},[t("b",null,"Date and time (kotlinx-datetime)")]),t("br"),t("p",null,"一个用于基于日历计算的多平台库。它提供日期值的表示，并支持时区特有的操作。"),t("img",{src:i,width:"18",alt:"GitHub"}),l(),t("a",{href:"https://github.com/Kotlin/kotlinx-datetime"},"kotlinx-datetime"),t("br")],-1),t("li",null,[t("a",{href:"https://kotlinlang.org/api/kotlinx-metadata-jvm/"},[t("b",null,"JVM Metadata (kotlin-metadata-jvm)")]),t("br"),t("p",null,"一个用于读写存储在 JVM 类文件中的 Kotlin 元数据的库。它主要由注解处理器、静态分析器和编译器插件等工具使用。"),t("img",{src:i,width:"18",alt:"GitHub"}),l(),t("a",{href:"https://github.com/JetBrains/kotlin/tree/master/libraries/kotlinx-metadata"},"kotlinx-metadata"),t("br")],-1),t("li",null,[t("a",{href:"https://kotlinlang.org/api/kotlin-gradle-plugin/"},[t("b",null,"Kotlin Gradle plugins (kotlin-gradle-plugin)")]),t("br"),t("p",null,"用于编译、测试和打包 Kotlin 代码的 Kotlin Gradle 插件。这些插件简化了 JVM 和多平台构建，管理依赖项，并与 IDE 和 CI 系统集成。"),t("img",{src:i,width:"18",alt:"GitHub"}),l(),t("a",{href:"https://github.com/JetBrains/kotlin/tree/master/libraries/tools/kotlin-gradle-plugin"},"kotlin-gradle-plugin"),t("br")],-1),t("li",null,[t("a",{href:"https://api.ktor.io/"},[t("b",null,"Ktor")]),t("br"),t("p",null,"一个用于使用 Kotlin 在互联系统中构建异步客户端和服务器的框架。Ktor 旨在实现可伸缩性和灵活性，并与协程深度集成，以实现非阻塞 I/O 和结构化并发。"),t("img",{src:i,width:"18",alt:"GitHub"}),l(),t("a",{href:"https://github.com/ktorio/ktor"},"ktor"),t("br")],-1)])),_:1})]),_:1})])}const _=p(c,[["render",b]]);export{w as __pageData,_ as default};
