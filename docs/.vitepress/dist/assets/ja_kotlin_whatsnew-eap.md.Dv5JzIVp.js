import{_ as t}from"./chunks/xcode-swift-export-run-script-phase.CN5rl4tW.js";import{_ as l}from"./chunks/default-hierarchy-example-with-web.De_8QTGQ.js";import{_ as e,C as p,c as h,o as k,ag as i,G as n}from"./chunks/framework.Bksy39di.js";const m=JSON.parse('{"title":"Kotlin 2.2.20-Beta2 の新機能","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/whatsnew-eap.md","filePath":"ja/kotlin/whatsnew-eap.md","lastUpdated":1754307826000}'),r={name:"ja/kotlin/whatsnew-eap.md"};function o(d,s,c,E,g,y){const a=p("TopicTitle");return k(),h("div",null,[s[0]||(s[0]=i(`<h1 id="kotlin-2-2-20-beta2-の新機能" tabindex="-1">Kotlin 2.2.20-Beta2 の新機能 <a class="header-anchor" href="#kotlin-2-2-20-beta2-の新機能" aria-label="Permalink to &quot;Kotlin 2.2.20-Beta2 の新機能&quot;">​</a></h1><p><em><a href="/ja/kotlin/eap#build-details">リリース日: July 29, 2025</a></em></p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>このドキュメントは早期アクセスプレビュー (EAP) リリースのすべての機能を網羅しているわけではありませんが、 主要な改善点に焦点を当てています。 変更点の全リストは<a href="https://github.com/JetBrains/kotlin/releases/tag/v2.2.20-Beta2" target="_blank" rel="noreferrer">GitHub changelog</a>を参照してください。</p></div><p>Kotlin 2.2.20-Beta2 がリリースされました！ このEAPリリースの詳細の一部を以下に示します。</p><ul><li>Kotlin Multiplatform: <a href="#swift-export-available-by-default">Swiftエクスポートがデフォルトで利用可能に</a>、<a href="#shared-source-set-for-js-and-wasmjs-targets"><code>js</code> および <code>wasmJs</code> ターゲットの共有ソースセット</a>、<a href="#stable-cross-platform-compilation-for-kotlin-libraries">Kotlinライブラリの安定したクロスプラットフォームコンパイル</a>、および<a href="#new-approach-for-declaring-common-dependencies">共通依存関係を宣言する新しいアプローチ</a>。</li><li>言語: <a href="#improved-overload-resolution-for-lambdas-with-suspend-function-types">中断関数型を持つオーバーロードにラムダを渡す際のオーバーロード解決の改善</a>。</li><li>Kotlin/Native: <a href="#support-for-stack-canaries-in-binaries">バイナリでのスタックカナリアのサポート</a>と<a href="#smaller-binary-size-for-ios-targets">iOSターゲットのバイナリサイズの縮小</a>。</li><li>Kotlin/Wasm: <a href="#improved-exception-handling-in-kotlin-wasm-and-javascript-interop">Kotlin/WasmとJavaScript相互運用における例外処理の改善</a>。</li><li>Kotlin/JS: <a href="#usage-of-bigint-type-to-represent-kotlin-s-long-type"><code>Long</code> 値がJavaScript <code>BigInt</code> にコンパイルされるように</a>。</li></ul><h2 id="ideのサポート" tabindex="-1">IDEのサポート <a class="header-anchor" href="#ideのサポート" aria-label="Permalink to &quot;IDEのサポート&quot;">​</a></h2><p>Kotlin 2.2.20-Beta2 をサポートするKotlinプラグインは、IntelliJ IDEAおよびAndroid Studioの最新バージョンにバンドルされています。 IDEのKotlinプラグインを更新する必要はありません。 必要なのは、ビルドスクリプトでKotlinのバージョンを<a href="/ja/kotlin/configure-build-for-eap"> 2.2.20-Beta2 に変更</a>することだけです。</p><p>詳細については、<a href="/ja/kotlin/releases#update-to-a-new-kotlin-version">新しいリリースへの更新</a>を参照してください。</p><h2 id="言語" tabindex="-1">言語 <a class="header-anchor" href="#言語" aria-label="Permalink to &quot;言語&quot;">​</a></h2><p>Kotlin 2.2.20-Beta2 では、Kotlin 2.3.0 で予定されている今後の言語機能を試すことができます。これには、<a href="#improved-overload-resolution-for-lambdas-with-suspend-function-types">中断関数型を持つオーバーロードにラムダを渡す際のオーバーロード解決の改善</a>と、<a href="#support-for-return-statements-in-expression-bodies-with-explicit-return-types">明示的な戻り値型を持つ式本体での <code>return</code> ステートメントのサポート</a>が含まれます。</p><h3 id="中断関数型を持つラムダのオーバーロード解決の改善" tabindex="-1">中断関数型を持つラムダのオーバーロード解決の改善 <a class="header-anchor" href="#中断関数型を持つラムダのオーバーロード解決の改善" aria-label="Permalink to &quot;中断関数型を持つラムダのオーバーロード解決の改善&quot;">​</a></h3><p>これまで、通常関数型と <code>suspend</code> 関数型の両方で関数をオーバーロードすると、ラムダを渡す際に曖昧さエラーが発生していました。このエラーは明示的な型キャストで回避できましたが、コンパイラは誤って <code>No cast needed</code> 警告を報告していました。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 2つのオーバーロードを定義</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(block: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Int) {}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(block: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">suspend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Int) {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // オーバーロード解決の曖昧さで失敗</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 明示的なキャストを使用するが、コンパイラは誤って「キャスト不要」警告を報告</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Int)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>この変更により、通常関数型と <code>suspend</code> 関数型の両方のオーバーロードを定義した場合、キャストなしのラムダは通常のオーバーロードに解決されます。明示的に中断オーバーロードに解決するには、<code>suspend</code> キーワードを使用します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// transform(() -&gt; Int) に解決</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// transform(suspend () -&gt; Int) に解決</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">suspend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span></code></pre></div><p>この動作はKotlin 2.3.0でデフォルトで有効になります。今すぐテストするには、以下のコンパイラオプションを使用して言語バージョンを <code>2.3</code> に設定してください。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">language</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">version </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.3</span></span></code></pre></div><p>または、<code>build.gradle(.kts)</code> ファイルで設定します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        languageVersion.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_2_3)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>課題トラッカーの<a href="https://youtrack.jetbrains.com/issue/KT-23610" target="_blank" rel="noreferrer">YouTrack</a>にてフィードバックをいただけると幸いです。</p><h3 id="明示的な戻り値型を持つ式本体での-return-ステートメントのサポート" tabindex="-1">明示的な戻り値型を持つ式本体での <code>return</code> ステートメントのサポート <a class="header-anchor" href="#明示的な戻り値型を持つ式本体での-return-ステートメントのサポート" aria-label="Permalink to &quot;明示的な戻り値型を持つ式本体での \`return\` ステートメントのサポート&quot;">​</a></h3><p>これまで、式本体で <code>return</code> を使用すると、関数の戻り値型が <code>Nothing</code> と推論される可能性があるため、コンパイラエラーが発生していました。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> example</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 42</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// エラー: 式本体を持つ関数ではreturnは禁止されています</span></span></code></pre></div><p>この変更により、戻り値型が明示的に記述されている限り、式本体で <code>return</code> を使用できるようになりました。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 戻り値型を明示的に指定</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getDisplayNameOrDefault</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(userId: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getDisplayName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(userId ?: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;default&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 戻り値型を明示的に指定しないため失敗</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getDisplayNameOrDefault</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(userId: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getDisplayName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(userId ?: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;default&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>同様に、式本体を持つ関数のラムダ内およびネストされた式内の <code>return</code> ステートメントは、意図せずコンパイルされていました。Kotlinは、戻り値型が明示的に指定されている限り、これらのケースをサポートするようになりました。明示的な戻り値型を持たないケースはKotlin 2.3.0で非推奨になります。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 戻り値型が明示的に指定されておらず、returnステートメントがラムダ内にあり、非推奨になる</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> returnInsideLambda</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 戻り値型が明示的に指定されておらず、returnステートメントがローカル変数の初期化子内にあり、非推奨になる</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> returnInsideIf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> when</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">someCondition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> else</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;value&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        result</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>この動作はKotlin 2.3.0でデフォルトで有効になります。今すぐテストするには、以下のコンパイラオプションを使用して言語バージョンを <code>2.3</code> に設定してください。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">language</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">version </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.3</span></span></code></pre></div><p>または、<code>build.gradle(.kts)</code> ファイルで設定します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        languageVersion.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_2_3)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>課題トラッカーの<a href="https://youtrack.jetbrains.com/issue/KT-76926" target="_blank" rel="noreferrer">YouTrack</a>にてフィードバックをいただけると幸いです。</p>`,32)),n(a,{id:"kotlin-jvm-when式での-invokedynamic-のサポート",level:"2",title:"Kotlin/JVM: when式での invokedynamic のサポート",labelRef:"experimental-opt-in"}),s[1]||(s[1]=i(`<p>Kotlin 2.2.20-Beta2 では、<code>when</code> 式を <code>invokedynamic</code> でコンパイルできるようになりました。 以前は、複数の型チェックを含む <code>when</code> 式は、バイトコードで長い <code>instanceof</code> チェックのチェーンにコンパイルされていました。</p><p>以下の条件が満たされた場合、<code>when</code> 式で <code>invokedynamic</code> を使用して、Javaの <code>switch</code> ステートメントによって生成されるバイトコードと同様に、より小さなバイトコードを生成できるようになりました。</p><ul><li><code>else</code> を除くすべての条件が <code>is</code> または <code>null</code> チェックである。</li><li>式に<a href="/ja/kotlin/control-flow#guard-conditions-in-when-expressions">ガード条件 (<code>if</code>)</a>が含まれていない。</li><li>条件に、可変Kotlinコレクション (<code>MutableList</code>) や関数型 (<code>kotlin.Function1</code>、<code>kotlin.Function2</code> など) のように直接型チェックできない型が含まれていない。</li><li><code>else</code> 以外に少なくとも2つの条件がある。</li><li>すべてのブランチが <code>when</code> 式の同じ対象をチェックしている。</li></ul><p>例:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">open</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Example</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Example</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> B</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Example</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> C</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Example</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Example</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> when</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (e) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // invokedynamic を SwitchBootstraps.typeSwitch と共に使用</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> A </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> B </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> C </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>新しい機能を有効にすると、この例の <code>when</code> 式は、複数の <code>instanceof</code> チェックではなく、単一の <code>invokedynamic</code> 型スイッチにコンパイルされます。</p><p>この機能を有効にするには、KotlinコードをJVMターゲット21以上でコンパイルし、以下のコンパイラオプションを追加します。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-Xwhen-expressions</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">indy</span></span></code></pre></div><p>または、<code>build.gradle(.kts)</code> ファイルの <code>compilerOptions {}</code> ブロックに追加します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        freeCompilerArgs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xwhen-expressions=indy&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>この機能は<a href="/ja/kotlin/components-stability#stability-levels-explained">試験的</a>です。フィードバックや質問がある場合は、<a href="https://youtrack.jetbrains.com/issue/KT-65688" target="_blank" rel="noreferrer">YouTrack</a>で共有してください。</p><h2 id="kotlin-multiplatform" tabindex="-1">Kotlin Multiplatform <a class="header-anchor" href="#kotlin-multiplatform" aria-label="Permalink to &quot;Kotlin Multiplatform&quot;">​</a></h2><p>Kotlin 2.2.20-Beta2 は、Kotlin Multiplatformに大きな変更をもたらします。Swiftエクスポートがデフォルトで利用可能になり、新しい共有ソースセットが追加され、共通依存関係を管理する新しいアプローチを試すことができます。</p>`,13)),n(a,{id:"swiftエクスポートがデフォルトで利用可能に",level:"3",title:"Swiftエクスポートがデフォルトで利用可能に",labelRef:"experimental-general"}),s[2]||(s[2]=i('<p>Kotlin 2.2.20-Beta2 は、Swiftエクスポートの試験的サポートを導入します。これにより、Kotlinソースを直接エクスポートし、SwiftからKotlinコードを慣用的に呼び出すことができ、Objective-Cヘッダーは不要になります。</p><p>これは、Appleターゲットのマルチプラットフォーム開発を大幅に改善するはずです。たとえば、トップレベル関数を持つKotlinモジュールがある場合、Swiftエクスポートにより、クリーンなモジュール固有のインポートが可能になり、紛らわしいObjective-Cのアンダースコアやマングルされた名前が排除されます。</p><p>主な機能は次のとおりです。</p><ul><li><strong>マルチモジュールサポート</strong>。各Kotlinモジュールは個別のSwiftモジュールとしてエクスポートされ、関数呼び出しを簡素化します。</li><li><strong>パッケージサポート</strong>。Kotlinパッケージはエクスポート時に明示的に保持され、生成されたSwiftコードでの名前の競合を回避します。</li><li><strong>型エイリアス</strong>。Kotlinの型エイリアスはエクスポートされ、Swiftで保持されるため、可読性が向上します。</li><li><strong>プリミティブのnull許容性強化</strong>。<code>Int?</code> のような型を null許容性を保持するために <code>KotlinInt</code> のようなラッパークラスにボックス化する必要があったObjective-C相互運用とは異なり、Swiftエクスポートは null許容性情報を直接変換します。</li><li><strong>オーバーロード</strong>。Kotlinのオーバーロードされた関数をSwiftで曖昧さなく呼び出すことができます。</li><li><strong>フラット化されたパッケージ構造</strong>。KotlinパッケージをSwift enumに変換し、生成されたSwiftコードからパッケージプレフィックスを削除できます。</li><li><strong>モジュール名のカスタマイズ</strong>。KotlinプロジェクトのGradle設定で、結果のSwiftモジュール名をカスタマイズできます。</li></ul><h4 id="swiftエクスポートを有効にする方法" tabindex="-1">Swiftエクスポートを有効にする方法 <a class="header-anchor" href="#swiftエクスポートを有効にする方法" aria-label="Permalink to &quot;Swiftエクスポートを有効にする方法&quot;">​</a></h4><p>この機能は現在<a href="/ja/kotlin/components-stability#stability-levels-explained">試験的</a>であり、iOSフレームワークをXcodeプロジェクトに接続するために<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-direct-integration.html" target="_blank" rel="noreferrer">直接統合</a>を使用するプロジェクトでのみ機能します。これは、IntelliJ IDEAのKotlin Multiplatformプラグインまたは<a href="https://kmp.jetbrains.com/" target="_blank" rel="noreferrer">Webウィザード</a>で作成されたKotlin Multiplatformプロジェクトの標準構成です。</p><p>Swiftエクスポートを試すには、Xcodeプロジェクトを設定します。</p><ol><li>Xcodeで、プロジェクト設定を開きます。</li><li><strong>Build Phases</strong>タブで、<code>embedAndSignAppleFrameworkForXcode</code> タスクを含む<strong>Run Script</strong>フェーズを見つけます。</li><li>スクリプトを調整して、スクリプト実行フェーズで <code>embedSwiftExportForXcode</code> タスクを使用するようにします。</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> :</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Shared</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> module</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:embedSwiftExportForXcode</span></span></code></pre></div><p><img src="'+t+`" alt="Swiftエクスポートスクリプトの追加" width="700"></p><ol start="4"><li>プロジェクトをビルドします。Swiftモジュールはビルド出力ディレクトリに生成されます。</li></ol><p>この機能はデフォルトで利用可能です。以前のリリースですでに有効にしていた場合は、<code>kotlin.experimental.swift-export.enabled</code> を <code>gradle.properties</code> ファイルから削除できます。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>時間を節約するには、Swiftエクスポートが既にセットアップされている<a href="https://github.com/Kotlin/swift-export-sample" target="_blank" rel="noreferrer">公開サンプル</a>をクローンしてください。</p></div><p>Swiftエクスポートの詳細については、<a href="https://github.com/JetBrains/kotlin/tree/master/docs/swift-export#readme" target="_blank" rel="noreferrer">README</a>を参照してください。</p><h4 id="フィードバックを残す" tabindex="-1">フィードバックを残す <a class="header-anchor" href="#フィードバックを残す" aria-label="Permalink to &quot;フィードバックを残す&quot;">​</a></h4><p>今後のKotlinリリースでは、Swiftエクスポートのサポートを拡大し、徐々に安定させる予定です。 Kotlin 2.2.20以降、特にコルーチンとフロー周辺のKotlinとSwift間の相互運用性の改善に注力します。</p><p>Swiftエクスポートのサポートは、Kotlin Multiplatformにとって重要な変更です。皆様からのフィードバックをいただけると幸いです。</p><ul><li>Kotlin Slackで開発チームに直接連絡する – <a href="https://surveys.jetbrains.com/s3/kotlin-slack-sign-up?_gl=1*ju6cbn*_ga*MTA3MTk5NDkzMC4xNjQ2MDY3MDU4*_ga_9J976DJZ68*MTY1ODMzNzA3OS4xMDAuMS4xNjU4MzQwODEwLjYw" target="_blank" rel="noreferrer">招待を受ける</a>と<a href="https://kotlinlang.slack.com/archives/C073GUW6WN9" target="_blank" rel="noreferrer">#swift-export</a>チャンネルに参加できます。</li><li>Swiftエクスポートに関する問題は<a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a>に報告してください。</li></ul><h3 id="js-および-wasmjs-ターゲットの共有ソースセット" tabindex="-1">js および wasmJs ターゲットの共有ソースセット <a class="header-anchor" href="#js-および-wasmjs-ターゲットの共有ソースセット" aria-label="Permalink to &quot;js および wasmJs ターゲットの共有ソースセット&quot;">​</a></h3><p>これまで、Kotlin MultiplatformにはJavaScript (<code>js</code>) およびWebAssembly (<code>wasmJs</code>) Webターゲットの共有ソースセットがデフォルトで含まれていませんでした。 <code>js</code> と <code>wasmJs</code> の間でコードを共有するには、カスタムソースセットを手動で設定するか、<code>js</code> 用と <code>wasmJs</code> 用に2つの場所でコードを記述する必要がありました。例:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// commonMain</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">suspend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> readCopiedText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// jsMain</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">external</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Navigator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clipboard: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Clipboard</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// JSとWasmで異なる相互運用</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">external</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Clipboard</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> readText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; } </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">external</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> navigator: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Navigator</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">suspend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> readCopiedText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // JSとWasmで異なる相互運用</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> navigator.clipboard.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// wasmJsMain</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">external</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Navigator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clipboard: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Clipboard</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">external</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Clipboard</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> readText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">JsString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">external</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> navigator: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Navigator</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">suspend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> readCopiedText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> navigator.clipboard.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>このリリースから、Kotlin Gradleプラグインは、デフォルトの階層テンプレートを使用する際、Web用の新しい共有ソースセット (<code>webMain</code> と <code>webTest</code> で構成) を追加します。</p><p>この変更により、<code>web</code> ソースセットが <code>js</code> および <code>wasmJs</code> の両方のソースセットの親になります。更新されたソースセット階層は次のようになります。</p><p><img src="`+l+`" alt="Webを使用したデフォルト階層テンプレートの例"></p><p>新しいソースセットを使用すると、<code>js</code> と <code>wasmJs</code> の両方のターゲットに1つのコードを記述できます。 共有コードを <code>webMain</code> に配置すると、両方のターゲットで自動的に機能します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// commonMain</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">suspend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> readCopiedText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// webMain</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">external</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Navigator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clipboard: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Clipboard</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">external</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Clipboard</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> readText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">JsString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">external</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> navigator: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Navigator</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">suspend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> readCopiedText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> navigator.clipboard.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>この更新により、<code>js</code> と <code>wasmJs</code> ターゲット間でのコード共有が簡素化されます。これは、特に次の2つのケースで役立ちます。</p><ul><li>コードを重複させることなく、<code>js</code> と <code>wasmJs</code> の両方のターゲットをサポートしたいライブラリ作成者向け。</li><li>WebをターゲットとするCompose Multiplatformアプリケーションを構築する開発者向け。これにより、より広範なブラウザ互換性のために、<code>js</code> と <code>wasmJs</code> の両方のターゲットへのクロスコンパイルが可能になります。このフォールバックモードを考慮すると、Webサイトを作成するとき、すべてのブラウザでそのまま動作します。最新のブラウザは <code>wasmJs</code> を使用し、古いブラウザは <code>js</code> を使用します。</li></ul><p>この機能を試すには、<code>build.gradle(.kts)</code> ファイルの <code>kotlin {}</code> ブロックで<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-hierarchy.html#default-hierarchy-template" target="_blank" rel="noreferrer">デフォルトの階層テンプレート</a>を使用してください。</p><p>デフォルトの階層を使用する前に、カスタム共有ソースセットを持つプロジェクトがある場合や、<code>js(&quot;web&quot;)</code> ターゲットの名前を変更した場合の潜在的な競合を慎重に検討してください。これらの競合を解決するには、競合するソースセットまたはターゲットの名前を変更するか、デフォルトの階層を使用しないでください。</p><h3 id="kotlinライブラリの安定したクロスプラットフォームコンパイル" tabindex="-1">Kotlinライブラリの安定したクロスプラットフォームコンパイル <a class="header-anchor" href="#kotlinライブラリの安定したクロスプラットフォームコンパイル" aria-label="Permalink to &quot;Kotlinライブラリの安定したクロスプラットフォームコンパイル&quot;">​</a></h3><p>Kotlin 2.2.20-Beta2 は、Kotlinライブラリのクロスプラットフォームコンパイルを安定させる重要な<a href="https://youtrack.jetbrains.com/issue/KT-71290" target="_blank" rel="noreferrer">ロードマップ項目</a>を完了します。</p><p>Kotlinライブラリを公開するための <code>.klib</code> アーティファクトを生成するために、任意のホストを使用できるようになりました。これにより、特に以前はMacマシンが必要だったAppleターゲットの公開プロセスが大幅に効率化されます。</p><p>この機能はデフォルトで利用可能です。<code>kotlin.native.enableKlibsCrossCompilation=true</code> でクロスコンパイルをすでに有効にしていた場合は、<code>gradle.properties</code> ファイルから削除できるようになりました。</p><p>残念ながら、いくつかの制限がまだ残っています。以下の場合には、依然としてMacマシンを使用する必要があります。</p><ul><li>ライブラリに<a href="/ja/kotlin/native-c-interop">cinterop依存関係</a>がある場合。</li><li>プロジェクトに<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-cocoapods-overview.html" target="_blank" rel="noreferrer">CocoaPods統合</a>が設定されている場合。</li><li>Appleターゲットの<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-build-native-binaries.html" target="_blank" rel="noreferrer">最終バイナリ</a>をビルドまたはテストする必要がある場合。</li></ul><p>マルチプラットフォームライブラリの公開に関する詳細については、<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-publish-lib-setup.html" target="_blank" rel="noreferrer">ドキュメント</a>を参照してください。</p>`,37)),n(a,{id:"共通依存関係を宣言する新しいアプローチ",level:"3",title:"共通依存関係を宣言する新しいアプローチ",labelRef:"experimental-opt-in"}),s[3]||(s[3]=i(`<p>Gradleを使用したマルチプラットフォームプロジェクトのセットアップを簡素化するために、Kotlin 2.2.20-Beta2 では、トップレベルの <code>dependencies {}</code> ブロックを使用して <code>kotlin {}</code> ブロック内で共通依存関係を宣言できるようになりました。これらの依存関係は、<code>commonMain</code> ソースセットで宣言されたかのように動作します。この機能は、Kotlin/JVMおよびAndroid専用プロジェクトで使用するdependenciesブロックと同様に機能し、Kotlin Multiplatformでは現在<a href="/ja/kotlin/components-stability#stability-levels-explained">試験的</a>です。プロジェクトレベルで共通依存関係を宣言することで、ソースセット間での繰り返しの設定が減り、ビルド設定の合理化に役立ちます。必要に応じて、各ソースセットにプラットフォーム固有の依存関係を追加することは引き続き可能です。</p><p>この機能を試すには、トップレベルの <code>dependencies {}</code> ブロックの前に <code>@OptIn(ExperimentalKotlinGradlePluginApi::class)</code> アノテーションを追加してオプトインしてください。例:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalKotlinGradlePluginApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.kotlinx:kotlinx-coroutines-core:1.10.2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>この機能に関するフィードバックは<a href="https://youtrack.jetbrains.com/issue/KT-76446" target="_blank" rel="noreferrer">YouTrack</a>でいただけると幸いです。</p><h2 id="kotlin-native" tabindex="-1">Kotlin/Native <a class="header-anchor" href="#kotlin-native" aria-label="Permalink to &quot;Kotlin/Native&quot;">​</a></h2><p>Kotlin 2.2.20-Beta2 は、Kotlin/Nativeバイナリとデバッグの改善をもたらします。</p><h3 id="バイナリでのスタックカナリアのサポート" tabindex="-1">バイナリでのスタックカナリアのサポート <a class="header-anchor" href="#バイナリでのスタックカナリアのサポート" aria-label="Permalink to &quot;バイナリでのスタックカナリアのサポート&quot;">​</a></h3><p>2.2.20-Beta2 から、Kotlinは結果のKotlin/Nativeバイナリでスタックカナリアのサポートを追加します。スタック保護の一部として、このセキュリティ機能はスタック破壊を防ぎ、一般的なアプリケーションの脆弱性を緩和します。SwiftおよびObjective-Cですでに利用可能でしたが、Kotlinでもサポートされるようになりました。</p><h4 id="スタックカナリアを有効にする方法" tabindex="-1">スタックカナリアを有効にする方法 <a class="header-anchor" href="#スタックカナリアを有効にする方法" aria-label="Permalink to &quot;スタックカナリアを有効にする方法&quot;">​</a></h4><p>Kotlin/Nativeでのスタック保護の実装は、<a href="https://clang.llvm.org/docs/ClangCommandLineReference.html#cmdoption-clang-fstack-protector" target="_blank" rel="noreferrer">Clang</a>のスタックプロテクターの動作に準拠しています。</p><p>スタックカナリアを有効にするには、<code>gradle.properties</code> ファイルに以下のプロパティを追加します。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.native.binary.stackProtector=yes</span></span></code></pre></div><p>このプロパティは、スタック破壊に対して脆弱なすべてのKotlin関数に対して機能を有効にします。代替モードは次のとおりです。</p><ul><li><code>kotlin.native.binary.stackProtector=strong</code>: スタック破壊に対して脆弱な関数に対してより強力なヒューリスティックを使用します。</li><li><code>kotlin.native.binary.stackProtector=all</code>: すべての関数に対してスタックプロテクターを有効にします。</li></ul><p>場合によっては、スタック保護がパフォーマンスコストを伴う可能性があることに注意してください。</p>`,15)),n(a,{id:"iosターゲットのバイナリサイズの縮小",level:"3",title:"iOSターゲットのバイナリサイズの縮小",labelRef:"experimental-general"}),s[4]||(s[4]=i(`<p>Kotlin 2.2.20-Beta2 では、iOSターゲットのバイナリサイズを削減できる <code>smallBinary</code> オプションが導入されました。 この新しいオプションは、LLVMコンパイルフェーズ中のコンパイラのデフォルト最適化引数として <code>-Oz</code> を効果的に設定します。</p><p><code>smallBinary</code> オプションを有効にすると、リリースバイナリを小さくし、ビルド時間を改善できます。ただし、場合によってはランタイムパフォーマンスに影響を与える可能性があります。</p><h4 id="バイナリサイズを縮小する方法" tabindex="-1">バイナリサイズを縮小する方法 <a class="header-anchor" href="#バイナリサイズを縮小する方法" aria-label="Permalink to &quot;バイナリサイズを縮小する方法&quot;">​</a></h4><p>新しい機能は現在<a href="/ja/kotlin/components-stability#stability-levels-explained">試験的</a>です。プロジェクトで試すには、<code>-Xbinary=smallBinary=true</code> コンパイラオプションを使用するか、<code>gradle.properties</code> ファイルを次のように更新します。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.native.binary.smallBinary=true</span></span></code></pre></div><p>特定のバイナリの場合、<code>build.gradle(.kts)</code> ファイルで <code>binaryOption(&quot;smallBinary&quot;, &quot;true&quot;)</code> を設定します。例:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        iosX64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        iosArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        iosSimulatorArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        it.binaries.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">framework</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            binaryOption</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;smallBinary&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;true&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>この機能の実装にご協力いただいた<a href="https://github.com/troelsbjerre" target="_blank" rel="noreferrer">Troels Lund</a>氏にKotlinチームは感謝します。</p><h3 id="デバッガオブジェクトの概要の改善" tabindex="-1">デバッガオブジェクトの概要の改善 <a class="header-anchor" href="#デバッガオブジェクトの概要の改善" aria-label="Permalink to &quot;デバッガオブジェクトの概要の改善&quot;">​</a></h3><p>Kotlin/Nativeは、LLDBやGDBなどのデバッガツールに対して、より明確なオブジェクトの概要を生成するようになりました。これにより、生成されるデバッグ情報の可読性が向上し、デバッグエクスペリエンスが合理化されます。</p><p>以前は、次のようなオブジェクトを検査した場合：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Point</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> point </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Point</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>メモリアドレスへのポインタを含む限られた情報しか表示されませんでした。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>(lldb) v point</span></span>
<span class="line"><span>(ObjHeader *) point = [x: ..., y: ...]</span></span>
<span class="line"><span>(lldb) v point-&gt;x</span></span>
<span class="line"><span>(int32_t *) x = 0x0000000100274048</span></span></code></pre></div><p>Kotlin 2.2.20-Beta2 では、デバッガは実際の値を含むより豊富な詳細を表示します。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>(lldb) v point</span></span>
<span class="line"><span>(ObjHeader *) point = Point(x=1, y=2)</span></span>
<span class="line"><span>(lldb) v point-&gt;x</span></span>
<span class="line"><span>(int32_t) point-&gt;x = 1</span></span></code></pre></div><p>この機能の実装にご協力いただいた<a href="https://github.com/nikita-nazarov" target="_blank" rel="noreferrer">Nikita Nazarov</a>氏にKotlinチームは感謝します。</p><p>Kotlin/Nativeでのデバッグの詳細については、<a href="/ja/kotlin/native-debugging">ドキュメント</a>を参照してください。</p><h2 id="kotlin-wasm" tabindex="-1">Kotlin/Wasm <a class="header-anchor" href="#kotlin-wasm" aria-label="Permalink to &quot;Kotlin/Wasm&quot;">​</a></h2><p>Kotlin/Wasmには、npm依存関係の分離やJavaScript相互運用における例外処理の改善など、いくつかの品質向上 (QoL改善) がもたらされます。</p><h3 id="分離された-npm-依存関係" tabindex="-1">分離された npm 依存関係 <a class="header-anchor" href="#分離された-npm-依存関係" aria-label="Permalink to &quot;分離された npm 依存関係&quot;">​</a></h3><p>以前は、Kotlin/Wasmプロジェクトでは、すべての<a href="https://www.npmjs.com/" target="_blank" rel="noreferrer">npm</a>依存関係がプロジェクトフォルダにまとめてインストールされていました。これには、独自の依存関係とKotlinツールの依存関係の両方が含まれていました。これらの依存関係は、プロジェクトのロックファイル (<code>package-lock.json</code> または <code>yarn.lock</code>) にもまとめて記録されていました。</p><p>結果として、Kotlinツールの依存関係が更新されるたびに、何も追加または変更していなくても、ロックファイルを更新する必要がありました。</p><p>Kotlin 2.2.20-Beta2 から、Kotlinツールのnpm依存関係はプロジェクトの外にインストールされるようになりました。これにより、ツールとユーザーの依存関係が別々のディレクトリを持つようになります。</p><ul><li><strong>ツール依存関係のディレクトリ:</strong></li></ul><p><code>&lt;kotlin-user-home&gt;/kotlin-npm-tooling/&lt;yarn|npm&gt;/hash/node_modules</code></p><ul><li><strong>ユーザー依存関係のディレクトリ:</strong></li></ul><p><code>build/wasm/node_modules</code></p><p>また、プロジェクトディレクトリ内のロックファイルには、ユーザー定義の依存関係のみが含まれます。</p><p>この改善により、ロックファイルは独自の依存関係のみに焦点を絞られ、プロジェクトをよりクリーンに保ち、ファイルへの不必要な変更を減らすことができます。</p><p>この変更は、<code>wasm-js</code> ターゲットではデフォルトで有効になっています。<code>js</code> ターゲットにはまだ実装されていません。今後のリリースで実装する計画はありますが、Kotlin 2.2.20-Beta2 では <code>js</code> ターゲットのnpm依存関係の動作は変更ありません。</p><h3 id="kotlin-wasmとjavascript相互運用における例外処理の改善" tabindex="-1">Kotlin/WasmとJavaScript相互運用における例外処理の改善 <a class="header-anchor" href="#kotlin-wasmとjavascript相互運用における例外処理の改善" aria-label="Permalink to &quot;Kotlin/WasmとJavaScript相互運用における例外処理の改善&quot;">​</a></h3><p>これまで、KotlinはJavaScript (JS) でスローされ、Kotlin/Wasmコードに伝播する例外 (エラー) を理解するのが困難でした。</p><p>場合によっては、WebAssemblyコードからJSに例外がスローまたは渡され、詳細なしで <code>WebAssembly.Exception</code> にラップされるという逆方向でも問題が発生しました。これらのKotlinの例外処理の問題は、デバッグを困難にしていました。</p><p>Kotlin 2.2.20-Beta2 から、例外に関する開発者のエクスペリエンスが両方向で改善されます。</p><ul><li>JavaScriptから例外がスローされた場合: Kotlin側でより多くの情報を確認できます。 このような例外がKotlinを介してJSに伝播する場合、WebAssemblyにラップされなくなります。</li><li>Kotlinから例外がスローされた場合: JSエラーとしてJavaScript側でキャッチできるようになりました。</li></ul><p>新しい例外処理は、<a href="https://webassembly.github.io/exception-handling/js-api/#dom-webassembly-jstag" target="_blank" rel="noreferrer"><code>WebAssembly.JSTag</code></a>機能をサポートするモダンブラウザで自動的に機能します。</p><ul><li>Chrome 115+</li><li>Firefox 129+</li><li>Safari 18.4+</li></ul><p>古いブラウザでは、例外処理の動作は変更ありません。</p><h2 id="kotlin-js" tabindex="-1">Kotlin/JS <a class="header-anchor" href="#kotlin-js" aria-label="Permalink to &quot;Kotlin/JS&quot;">​</a></h2><p>Kotlin 2.2.20-Beta2 は、Kotlinの <code>Long</code> 型を表す <code>BigInt</code> 型の使用をサポートし、エクスポートされた宣言で <code>Long</code> を有効にします。さらに、このリリースではNode.js引数をクリーンアップするためのDSL関数が追加されました。</p>`,41)),n(a,{id:"kotlinのlong型を表すbigint型の使用",level:"3",title:"KotlinのLong型を表すBigInt型の使用",labelRef:"experimental-opt-in"}),s[5]||(s[5]=i(`<p>ES2020標準以前、JavaScript (JS) は53ビットより大きい正確な整数のプリミティブ型をサポートしていませんでした。</p><p>このため、Kotlin/JSは <code>Long</code> 値 (64ビット幅) を、2つの <code>number</code> プロパティを含むJavaScriptオブジェクトとして表現していました。このカスタム実装により、KotlinとJavaScript間の相互運用性がより複雑になっていました。</p><p>Kotlin 2.2.20-Beta2 から、Kotlin/JSは、最新のJavaScript (ES2020) にコンパイルする際、Kotlinの <code>Long</code> 値を表すためにJavaScriptの組み込み <code>BigInt</code> 型を使用するようになりました。</p><p>この変更により、<a href="#usage-of-long-in-exported-declarations"><code>Long</code> 型をJavaScriptにエクスポートする</a>機能も有効になり、KotlinとJavaScript間の相互運用性が簡素化されます。</p><p>有効にするには、<code>build.gradle(.kts)</code> ファイルに以下のコンパイラオプションを追加します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        ..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            freeCompilerArgs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xes-long-as-bigint&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>この機能はまだ<a href="/ja/kotlin/components-stability#stability-levels-explained">試験的</a>です。問題がある場合は、課題トラッカーの<a href="https://youtrack.jetbrains.com/issue/KT-57128" target="_blank" rel="noreferrer">YouTrack</a>に報告してください。</p><h4 id="エクスポートされた宣言でのlongの使用" tabindex="-1">エクスポートされた宣言でのLongの使用 <a class="header-anchor" href="#エクスポートされた宣言でのlongの使用" aria-label="Permalink to &quot;エクスポートされた宣言でのLongの使用&quot;">​</a></h4><p>Kotlin/JSはカスタムの <code>Long</code> 表現を使用していたため、JavaScriptからKotlinの <code>Long</code> と直接やり取りする簡単な方法を提供するのは困難でした。結果として、<code>Long</code> 型を使用するKotlinコードをJavaScriptにエクスポートすることはできませんでした。 この問題は、関数パラメーター、クラスプロパティ、コンストラクタなど、<code>Long</code> を使用するすべてのコードに影響を与えました。</p><p>Kotlinの <code>Long</code> 型がJavaScriptの <code>BigInt</code> 型にコンパイルできるようになったため、Kotlin/JSは <code>Long</code> 値をJavaScriptにエクスポートするのをサポートし、KotlinとJavaScriptコード間の相互運用性を簡素化します。</p><p>この機能を有効にするには：</p><ol><li><p>Kotlin/JSで <code>Long</code> のエクスポートを許可します。<code>build.gradle(.kts)</code> ファイルの <code>freeCompilerArgs</code> 属性に以下のコンパイラ引数を追加します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        ..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {                   </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            freeCompilerArgs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-XXLanguage:+JsAllowLongInExportedDeclarations&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><code>BigInt</code> 型を有効にします。<a href="#usage-of-bigint-type-to-represent-kotlin-s-long-type">Kotlinの <code>Long</code> 型を表す <code>BigInt</code> 型の使用</a>で有効にする方法を参照してください。</p></li></ol><h3 id="よりクリーンな引数用の新しいdsl関数" tabindex="-1">よりクリーンな引数用の新しいDSL関数 <a class="header-anchor" href="#よりクリーンな引数用の新しいdsl関数" aria-label="Permalink to &quot;よりクリーンな引数用の新しいDSL関数&quot;">​</a></h3><p>Node.jsでKotlin/JSアプリケーションを実行する場合、プログラムに渡される引数 (<code>args</code>) には、次のものが含まれていました。</p><ul><li>実行可能ファイル <code>Node</code> へのパス。</li><li>スクリプトへのパス。</li><li>提供した実際のコマンドライン引数。</li></ul><p>しかし、<code>args</code> の期待される動作はコマンドライン引数のみを含むことでした。これを実現するには、<code>build.gradle(.kts)</code> ファイルまたはKotlinコード内で <code>drop()</code> 関数を使用して最初の2つの引数を手動でスキップする必要がありました。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">drop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">joinToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;, &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>この回避策は繰り返しの作業でエラーが発生しやすく、プラットフォーム間でコードを共有する際にはうまく機能しませんでした。</p><p>この問題を修正するため、Kotlin 2.2.20-Beta2 では <code>passCliArgumentsToMainFunction()</code> という新しいDSL関数が導入されました。</p><p>この関数を使用すると、引数にはコマンドライン引数のみが含まれ、<code>Node</code> とスクリプトのパスは除外されます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // drop()は不要で、カスタム引数のみが含まれる</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">joinToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;, &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>この変更により、ボイラープレートコードが削減され、手動で引数を削除することによる間違いが回避され、クロスプラットフォーム互換性が向上します。</p><p>この機能を有効にするには、<code>build.gradle(.kts)</code> ファイル内に以下のDSL関数を追加します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        nodejs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            passCliArgumentsToMainFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="gradle-kotlin-nativeタスクのビルドレポートにおける新しいコンパイラパフォーマンス指標" tabindex="-1">Gradle: Kotlin/Nativeタスクのビルドレポートにおける新しいコンパイラパフォーマンス指標 <a class="header-anchor" href="#gradle-kotlin-nativeタスクのビルドレポートにおける新しいコンパイラパフォーマンス指標" aria-label="Permalink to &quot;Gradle: Kotlin/Nativeタスクのビルドレポートにおける新しいコンパイラパフォーマンス指標&quot;">​</a></h2><p>Kotlin 1.7.0では、コンパイラのパフォーマンス追跡を支援するために<a href="/ja/kotlin/gradle-compilation-and-caches#build-reports">ビルドレポート</a>を導入しました。それ以来、パフォーマンス問題の調査にさらに詳細で役立つように、より多くの指標を追加してきました。</p><p>Kotlin 2.2.20-Beta2 では、ビルドレポートにKotlin/Nativeタスクのコンパイラパフォーマンス指標が含まれるようになりました。</p><p>ビルドレポートとそれらを構成する方法の詳細については、<a href="/ja/kotlin/gradle-compilation-and-caches#enabling-build-reports">ビルドレポートの有効化</a>を参照してください。</p><h2 id="maven-kotlin-maven-pluginにおけるkotlinデーモンのサポート" tabindex="-1">Maven: kotlin-maven-pluginにおけるKotlinデーモンのサポート <a class="header-anchor" href="#maven-kotlin-maven-pluginにおけるkotlinデーモンのサポート" aria-label="Permalink to &quot;Maven: kotlin-maven-pluginにおけるKotlinデーモンのサポート&quot;">​</a></h2><p><a href="/ja/kotlin/whatsnew22#new-experimental-build-tools-api">Kotlin 2.2.0でのビルドツールAPIの導入</a>により、Kotlin 2.2.20-Beta2 は、<code>kotlin-maven-plugin</code> でKotlinデーモンのサポートを追加することで、さらに一歩踏み込みました。Kotlinデーモンを使用すると、Kotlinコンパイラは別の隔離されたプロセスで実行され、他のMavenプラグインがシステムプロパティを上書きするのを防ぎます。この<a href="https://youtrack.jetbrains.com/issue/KT-43894/Maven-Windows-error-RuntimeException-Could-not-find-installation-home-path" target="_blank" rel="noreferrer">YouTrack課題</a>で例を確認できます。</p><p>Kotlin 2.2.20-Beta2 から、Kotlinデーモンがデフォルトで使用されるようになりました。これにより、<a href="/ja/kotlin/maven#enable-incremental-compilation">インクリメンタルコンパイル</a>の追加の利点が得られ、ビルド時間を短縮するのに役立ちます。以前の動作に戻したい場合は、<code>pom.xml</code> ファイルで次のプロパティを <code>false</code> に設定してオプトアウトしてください。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">properties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">kotlin.compiler.daemon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;false&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">kotlin.compiler.daemon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">properties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>Kotlin 2.2.20-Beta2 はまた、新しい <code>jvmArgs</code> プロパティを導入しました。これを使用して、KotlinデーモンのデフォルトのJVM引数をカスタマイズできます。たとえば、<code>-Xmx</code> および <code>-Xms</code> オプションをオーバーライドするには、<code>pom.xml</code> ファイルに以下を追加します。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">properties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">kotlin.compiler.daemon.jvmArgs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Xmx1500m,Xms500m&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">kotlin.compiler.daemon.jvmArgs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">properties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div>`,34)),n(a,{id:"標準ライブラリ-kotlin-jsにおけるリフレクションによるインターフェース型識別のサポート",level:"2",title:"標準ライブラリ: Kotlin/JSにおけるリフレクションによるインターフェース型識別のサポート",labelRef:"experimental-opt-in"}),s[6]||(s[6]=i(`<p>Kotlin 2.2.20-Beta2 は、Kotlin/JS標準ライブラリに試験的な <code>KClass.isInterface</code> プロパティを追加します。</p><p>このプロパティを使用すると、クラス参照がKotlinインターフェースを表しているかどうかをチェックできるようになりました。これにより、<code>KClass.java.isInterface</code> を使用してクラスがインターフェースを表しているかどうかをチェックできるKotlin/JVMとのパリティがKotlin/JSで近づきました。</p><p>オプトインするには、<code>@OptIn(ExperimentalStdlibApi::class)</code> アノテーションを使用します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalStdlibApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> inspect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(klass: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;*&gt;) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // インターフェースの場合はtrueを出力</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(klass.isInterface)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>課題トラッカーの<a href="https://youtrack.jetbrains.com/issue/KT-78581" target="_blank" rel="noreferrer">YouTrack</a>にてフィードバックをいただけると幸いです。</p>`,5))])}const v=e(r,[["render",o]]);export{m as __pageData,v as default};
