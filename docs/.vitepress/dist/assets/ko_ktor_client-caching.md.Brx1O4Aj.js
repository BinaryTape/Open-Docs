import{_ as k,C as s,c as o,o as c,G as a,ag as d,w as t,j as e,a as n}from"./chunks/framework.Bksy39di.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ko/ktor/client-caching.md","filePath":"ko/ktor/client-caching.md","lastUpdated":1755457140000}'),g={name:"ko/ktor/client-caching.md"};function E(u,i,y,F,m,C){const l=s("TopicTitle"),p=s("primary-label"),h=s("tldr"),r=s("link-summary");return c(),o("div",null,[a(l,{labelRef:"client-plugin",title:"캐싱"}),a(p,{ref:"client-plugin"},null,512),a(h,null,{default:t(()=>i[0]||(i[0]=[e("p",null,[e("b",null,"코드 예시"),n(": "),e("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/client-caching"}," client-caching ")],-1)])),_:1}),a(r,null,{default:t(()=>i[1]||(i[1]=[n(" HttpCache 플러그인을 사용하면 이전에 가져온 리소스를 인메모리 또는 영구 캐시에 저장할 수 있습니다. ")])),_:1}),i[2]||(i[2]=d(`<p>Ktor 클라이언트는 이전에 가져온 리소스를 인메모리 또는 영구 캐시에 저장할 수 있도록 해주는 <a href="https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins.cache/-http-cache/index.html" target="_blank" rel="noreferrer">HttpCache</a> 플러그인을 제공합니다.</p><h2 id="add_dependencies" tabindex="-1">의존성 추가 <a class="header-anchor" href="#add_dependencies" aria-label="Permalink to &quot;의존성 추가 {id=&quot;add_dependencies&quot;}&quot;">​</a></h2><p><code>HttpCache</code>는 <a href="./client-dependencies">ktor-client-core</a> 아티팩트만 필요하며 별도의 의존성은 필요하지 않습니다.</p><h2 id="memory_cache" tabindex="-1">인메모리 캐시 <a class="header-anchor" href="#memory_cache" aria-label="Permalink to &quot;인메모리 캐시 {id=&quot;memory_cache&quot;}&quot;">​</a></h2><p><code>HttpCache</code>를 설치하려면 <a href="./client-create-and-configure#configure-client">클라이언트 구성 블록</a> 내의 <code>install</code> 함수에 전달하세요:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.engine.cio.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.plugins.cache.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpCache)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>이것만으로도 클라이언트가 이전에 가져온 리소스를 인메모리 캐시에 저장할 수 있도록 활성화하기에 충분합니다. 예를 들어, 구성된 <code>Cache-Control</code> 헤더를 가진 리소스에 두 번 연속으로 <a href="./client-requests">요청</a>을 보낸다면, 클라이언트는 첫 번째 요청만 실행하고 데이터가 이미 캐시에 저장되어 있기 때문에 두 번째 요청은 건너뜁니다.</p><h2 id="persistent_cache" tabindex="-1">영구 캐시 <a class="header-anchor" href="#persistent_cache" aria-label="Permalink to &quot;영구 캐시 {id=&quot;persistent_cache&quot;}&quot;">​</a></h2><p>Ktor를 사용하면 <a href="https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins.cache.storage/-cache-storage/index.html" target="_blank" rel="noreferrer">CacheStorage</a> 인터페이스를 구현하여 영구 캐시를 생성할 수 있습니다. JVM에서는 <a href="https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins.cache.storage/-file-storage.html" target="_blank" rel="noreferrer">FileStorage</a> 함수를 호출하여 파일 스토리지를 생성할 수 있습니다.</p><p>파일 캐시 스토리지를 생성하려면 <code>File</code> 인스턴스를 <code>FileStorage</code> 함수에 전달하세요. 그런 다음, 해당 스토리지가 공유 캐시로 사용될지 비공개 캐시로 사용될지에 따라 생성된 스토리지를 <code>publicStorage</code> 또는 <code>privateStorage</code> 함수에 전달하세요.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpCache) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cacheFile </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Files.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createDirectories</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Paths.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;build/cache&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        publicStorage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FileStorage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cacheFile))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p>전체 예시는 다음에서 확인할 수 있습니다: <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/client-caching" target="_blank" rel="noreferrer">client-caching</a>.</p></blockquote>`,12))])}const f=k(g,[["render",E]]);export{b as __pageData,f as default};
