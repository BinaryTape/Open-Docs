import{_ as e,c as a,o as l,ag as i}from"./chunks/framework.Bksy39di.js";const k=JSON.parse('{"title":"基本类型","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/basic-types.md","filePath":"kotlin/basic-types.md","lastUpdated":1754307826000}'),o={name:"kotlin/basic-types.md"};function n(r,t,s,c,p,d){return l(),a("div",null,t[0]||(t[0]=[i('<h1 id="基本类型" tabindex="-1">基本类型 <a class="header-anchor" href="#基本类型" aria-label="Permalink to &quot;基本类型&quot;">​</a></h1><p>在 Kotlin 中，一切皆对象，这意味着你可以在任何变量上调用成员函数和属性。尽管某些类型在运行时具有优化的内部表示（作为原始值，例如数字、字符、布尔值等），但它们对你而言，看起来并行为起来就像普通的类。</p><p>本节描述了 Kotlin 中使用的基本类型：</p><ul><li><a href="/kotlin/numbers">数字</a> 及其 <a href="/kotlin/unsigned-integer-types">无符号对应项</a></li><li><a href="/kotlin/booleans">布尔值</a></li><li><a href="/kotlin/characters">字符</a></li><li><a href="/kotlin/strings">字符串</a></li><li><a href="/kotlin/arrays">数组</a></li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><a href="/kotlin/typecasts">了解如何在 Kotlin 中执行类型检测和类型转换</a>。</p></div><p>要了解其他 Kotlin 类型，例如 <code>Nothing</code>、<code>Any</code> 和 <code>Unit</code>，请查阅 Kotlin API 参考：</p><ul><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/" target="_blank" rel="noreferrer"><code>Any</code></a></li><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-nothing.html" target="_blank" rel="noreferrer"><code>Nothing</code></a></li><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/" target="_blank" rel="noreferrer"><code>Unit</code></a></li></ul>',7)]))}const _=e(o,[["render",n]]);export{k as __pageData,_ as default};
