import{_ as r,C as i,c as k,o,j as a,G as n,ag as d,a as e,w as t}from"./chunks/framework.Bksy39di.js";const C=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ktor/server-serving-spa.md","filePath":"ktor/server-serving-spa.md","lastUpdated":1755457140000}'),c={name:"ktor/server-serving-spa.md"};function g(u,s,E,F,y,m){const p=i("show-structure"),l=i("tldr"),h=i("link-summary");return o(),k("div",null,[s[2]||(s[2]=a("h1",{id:"服务单页应用程序",tabindex:"-1"},[e("服务单页应用程序 "),a("a",{class:"header-anchor",href:"#服务单页应用程序","aria-label":'Permalink to "服务单页应用程序"'},"​")],-1)),n(p,{for:"chapter",depth:"2"}),n(l,null,{default:t(()=>s[0]||(s[0]=[a("p",null,[a("b",null,"代码示例"),e(": "),a("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/single-page-application"}," single-page-application ")],-1)])),_:1}),n(h,null,{default:t(()=>s[1]||(s[1]=[e(" Ktor 提供了服务单页应用程序（包括 React、Angular、Vue 等）的能力。 ")])),_:1}),s[3]||(s[3]=d(`<p>Ktor 提供了服务单页应用程序（包括 React、Angular 或 Vue）的能力。</p><h2 id="add_dependencies" tabindex="-1">添加依赖项 <a class="header-anchor" href="#add_dependencies" aria-label="Permalink to &quot;添加依赖项 {id=&quot;add_dependencies&quot;}&quot;">​</a></h2><p>要服务单页应用程序，你只需要 <a href="./server-dependencies#add-ktor-dependencies">ktor-server-core</a> 依赖项。不需要任何特定依赖项。</p><h2 id="configure" tabindex="-1">服务应用程序 <a class="header-anchor" href="#configure" aria-label="Permalink to &quot;服务应用程序 {id=&quot;configure&quot;}&quot;">​</a></h2><p>要服务单页应用程序，你需要定义内容的来源：本地文件系统或类路径。你至少需要指定一个包含单页应用程序的文件夹/资源包。</p><h3 id="serve-framework" tabindex="-1">服务特定框架的应用程序 <a class="header-anchor" href="#serve-framework" aria-label="Permalink to &quot;服务特定框架的应用程序 {id=&quot;serve-framework&quot;}&quot;">​</a></h3><p>你可以服务使用特定框架（例如 React、Angular、Vue 等）创建的单页应用程序的构建项。假设我们在项目根目录中有一个 <code>react-app</code> 文件夹，其中包含一个 React 应用程序。该应用程序具有以下结构，并以 <code>index.html</code> 文件作为主页：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>react-app</span></span>
<span class="line"><span>├── index.html</span></span>
<span class="line"><span>├── ...</span></span>
<span class="line"><span>└── static</span></span>
<span class="line"><span>    └── ...</span></span></code></pre></div><p>要服务此应用程序，请在 <a href="./server-routing">routing</a> 代码块内调用 <a href="https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.http.content/single-page-application.html" target="_blank" rel="noreferrer">singlePageApplication</a>，并将文件夹名称传入 <code>react</code> 函数：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.application.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.http.content.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.routing.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        singlePageApplication</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            react</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;react-app&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Ktor 会自动查找 <code>index.html</code>。关于如何自定义默认页面，请参见<a href="#serve-customize">自定义服务设置</a>。</p><blockquote><p>对于其他框架，请使用对应的函数，例如 <code>angular</code>、<code>vue</code>、<code>ember</code> 等。</p></blockquote><h3 id="serve-customize" tabindex="-1">自定义服务设置 <a class="header-anchor" href="#serve-customize" aria-label="Permalink to &quot;自定义服务设置 {id=&quot;serve-customize&quot;}&quot;">​</a></h3><p>为了演示如何从资源服务单页应用程序，假设我们的应用程序放置在 <code>sample-web-app</code> 资源包中，其结构如下：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>sample-web-app</span></span>
<span class="line"><span>├── main.html</span></span>
<span class="line"><span>├── ktor_logo.png</span></span>
<span class="line"><span>├── css</span></span>
<span class="line"><span>│   └──styles.css</span></span>
<span class="line"><span>└── js</span></span>
<span class="line"><span>    └── script.js</span></span></code></pre></div><p>要服务此应用程序，可使用以下配置：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.application.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.http.content.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.routing.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        singlePageApplication</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            useResources </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            filesPath </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;sample-web-app&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            defaultPage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;main.html&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            ignoreFiles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">endsWith</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><code>useResources</code>: 启用从资源包服务应用程序。</li><li><code>filesPath</code>: 指定应用程序所在的路径。</li><li><code>defaultPage</code>: 指定 <code>main.html</code> 作为默认要服务的资源。</li><li><code>ignoreFiles</code>: 忽略以 <code>.txt</code> 结尾的路径。</li></ul><p>你可以在这里找到完整示例：<a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/single-page-application" target="_blank" rel="noreferrer">single-page-application</a>。</p>`,19))])}const b=r(c,[["render",g]]);export{C as __pageData,b as default};
