import{_ as a,c as e,o as i,ag as o}from"./chunks/framework.Bksy39di.js";const d=JSON.parse('{"title":"Composeコンパイラの更新","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kmp/compose-compiler.md","filePath":"ja/kmp/compose-compiler.md","lastUpdated":1755516278000}'),p={name:"ja/kmp/compose-compiler.md"};function n(l,s,t,r,c,h){return i(),e("div",null,s[0]||(s[0]=[o(`<h1 id="composeコンパイラの更新" tabindex="-1">Composeコンパイラの更新 <a class="header-anchor" href="#composeコンパイラの更新" aria-label="Permalink to &quot;Composeコンパイラの更新&quot;">​</a></h1><p>ComposeコンパイラはGradleプラグインによって補完され、セットアップを簡素化し、コンパイラオプションへのアクセスを容易にします。 Android Gradleプラグイン (AGP) と一緒に適用すると、このComposeコンパイラプラグインは、AGPによって自動的に提供されるComposeコンパイラの座標を上書きします。</p><p>Composeコンパイラは、Kotlin 2.0.0以降、Kotlinリポジトリにマージされました。 これにより、ComposeコンパイラがKotlinと同時に出荷され、常に同じバージョンのKotlinと互換性があるため、プロジェクトのKotlin 2.0.0以降への移行がスムーズになります。</p><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>Kotlin 2.0.0で作成されたCompose Multiplatformアプリをバージョン2.0.10以降に更新することを強くお勧めします。Compose コンパイラ2.0.0には、非JVMターゲットを持つマルチプラットフォームプロジェクトで型の安定性を誤って推論する場合があり、これが不必要な（あるいは無限の）再コンポジションにつながる可能性があります。 アプリがComposeコンパイラ2.0.10以降でビルドされている場合でも、Composeコンパイラ2.0.0でビルドされた依存関係を使用している場合、これらの古い依存関係が再コンポジションの問題を引き起こす可能性があります。 これを防ぐには、依存関係をアプリと同じComposeコンパイラでビルドされたバージョンに更新してください。</p></div><p>プロジェクトで新しいComposeコンパイラプラグインを使用するには、Composeを使用する各モジュールに適用します。 <a href="#migrating-a-compose-multiplatform-project">Compose Multiplatformプロジェクトの移行</a>の詳細については、引き続きお読みください。Jetpack Composeプロジェクトについては、<a href="https://kotlinlang.org/docs/compose-compiler-migration-guide.html#migrating-a-jetpack-compose-project" target="_blank" rel="noreferrer">移行ガイド</a>を参照してください。</p><h2 id="compose-multiplatformプロジェクトの移行" tabindex="-1">Compose Multiplatformプロジェクトの移行 <a class="header-anchor" href="#compose-multiplatformプロジェクトの移行" aria-label="Permalink to &quot;Compose Multiplatformプロジェクトの移行&quot;">​</a></h2><p>Compose Multiplatform 1.6.10以降では、<code>org.jetbrains.compose</code>プラグインを使用する各モジュールに<code>org.jetbrains.kotlin.plugin.compose</code> Gradleプラグインを適用する必要があります。</p><ol><li><p>ComposeコンパイラGradleプラグインを<a href="https://docs.gradle.org/current/userguide/platforms.html#sub:conventional-dependencies-toml" target="_blank" rel="noreferrer">Gradleバージョンカタログ</a>に追加します。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[versions]</span></span>
<span class="line"><span># ...</span></span>
<span class="line"><span>kotlin = &quot;2.2.0&quot;</span></span>
<span class="line"><span>compose-plugin = &quot;1.8.2&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[plugins]</span></span>
<span class="line"><span># ...</span></span>
<span class="line"><span>jetbrainsCompose = { id = &quot;org.jetbrains.compose&quot;, version.ref = &quot;compose-plugin&quot; }</span></span>
<span class="line"><span>kotlinMultiplatform = { id = &quot;org.jetbrains.kotlin.multiplatform&quot;, version.ref = &quot;kotlin&quot; }</span></span>
<span class="line"><span>compose-compiler = { id = &quot;org.jetbrains.kotlin.plugin.compose&quot;, version.ref = &quot;kotlin&quot; }</span></span></code></pre></div></li><li><p>ルートの<code>build.gradle.kts</code>ファイルにGradleプラグインを追加します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> alias</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(libs.plugins.jetbrainsCompose) apply </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> alias</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(libs.plugins.compose.compiler) apply </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>Compose Multiplatformを使用するすべてのモジュールにプラグインを適用します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    alias</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(libs.plugins.jetbrainsCompose)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    alias</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(libs.plugins.compose.compiler)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>Jetpack Composeコンパイラ用のコンパイラオプションを使用している場合は、<code>composeCompiler {}</code>ブロックで設定します。 詳細については、<a href="https://kotlinlang.org/docs/compose-compiler-options.html" target="_blank" rel="noreferrer">ComposeコンパイラオプションDSL</a>を参照してください。</p></li></ol><h4 id="可能性のある問題-「missing-resource-with-path」" tabindex="-1">可能性のある問題：「Missing resource with path」 <a class="header-anchor" href="#可能性のある問題-「missing-resource-with-path」" aria-label="Permalink to &quot;可能性のある問題：「Missing resource with path」&quot;">​</a></h4><p>Kotlin 1.9.0から2.0.0へ、または2.0.0から1.9.0へ切り替える際に、以下のエラーに遭遇する可能性があります。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>org.jetbrains.compose.resources.MissingResourceException: Missing resource with path: ...</span></span></code></pre></div><p>これを解決するには、プロジェクトのルートおよび各モジュール内のすべての<code>build</code>ディレクトリを削除します。</p><h2 id="次のステップ" tabindex="-1">次のステップ <a class="header-anchor" href="#次のステップ" aria-label="Permalink to &quot;次のステップ&quot;">​</a></h2><ul><li>ComposeコンパイラがKotlinリポジトリに移行することについての<a href="https://android-developers.googleblog.com/2024/04/jetpack-compose-compiler-moving-to-kotlin-repository.html" target="_blank" rel="noreferrer">Googleの発表</a>を参照してください。</li><li>詳細については、<a href="https://kotlinlang.org/docs/compose-compiler-options.html" target="_blank" rel="noreferrer">ComposeコンパイラオプションDSL</a>を参照してください。</li><li>Jetpack Composeアプリを移行するには、<a href="https://kotlinlang.org/docs/compose-compiler-migration-guide.html" target="_blank" rel="noreferrer">Composeコンパイラのドキュメント</a>を確認してください。</li></ul>`,14)]))}const k=a(p,[["render",n]]);export{d as __pageData,k as default};
