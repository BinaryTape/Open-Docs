import{_ as r,c as o,o as t,ag as a}from"./chunks/framework.Bksy39di.js";const c=JSON.parse('{"title":"Google Summer of Code with Kotlin 2024","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/gsoc-2024.md","filePath":"ja/kotlin/gsoc-2024.md","lastUpdated":1754307826000}'),l={name:"ja/kotlin/gsoc-2024.md"};function n(i,e,s,p,d,h){return t(),o("div",null,e[0]||(e[0]=[a('<h1 id="google-summer-of-code-with-kotlin-2024" tabindex="-1">Google Summer of Code with Kotlin 2024 <a class="header-anchor" href="#google-summer-of-code-with-kotlin-2024" aria-label="Permalink to &quot;Google Summer of Code with Kotlin 2024&quot;">​</a></h1><p>この記事には、Google Summer of Code with Kotlin 2024 の<a href="#project-ideas">プロジェクトアイデアのリスト</a>と、<a href="#kotlin-contributor-guidelines-for-google-summer-of-code-gsoc">コントリビューター向けガイドライン</a>が含まれています。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Kotlin リソース: * <a href="https://github.com/jetbrains/kotlin" target="_blank" rel="noreferrer">Kotlin GitHub リポジトリ</a> * <a href="https://surveys.jetbrains.com/s3/kotlin-slack-sign-up" target="_blank" rel="noreferrer">Kotlin Slack</a>と <a href="https://slack-chats.kotlinlang.org/c/gsoc" target="_blank" rel="noreferrer">#gsoc</a> Slack チャンネル ご質問がございましたら、gsoc@kotlinfoundation.org まで<a href="mailto:gsoc@kotlinfoundation.org" target="_blank" rel="noreferrer">お問い合わせください</a>。</p></div><h2 id="google-summer-of-code-gsoc-向け-kotlin-コントリビューターガイドライン" tabindex="-1">Google Summer of Code (GSoC) 向け Kotlin コントリビューターガイドライン <a class="header-anchor" href="#google-summer-of-code-gsoc-向け-kotlin-コントリビューターガイドライン" aria-label="Permalink to &quot;Google Summer of Code (GSoC) 向け Kotlin コントリビューターガイドライン&quot;">​</a></h2><h3 id="はじめに" tabindex="-1">はじめに <a class="header-anchor" href="#はじめに" aria-label="Permalink to &quot;はじめに&quot;">​</a></h3><ol><li><p><a href="https://developers.google.com/open-source/gsoc/faq" target="_blank" rel="noreferrer">GSoC FAQ</a>と<a href="https://summerofcode.withgoogle.com/" target="_blank" rel="noreferrer">プログラムのお知らせ</a>をご確認ください。</p></li><li><p>Kotlin 言語に慣れましょう:</p><ul><li>公式<a href="https://kotlinlang.org/" target="_blank" rel="noreferrer">Kotlin ウェブサイト</a>は、始めるのに最適な場所です。</li><li>言語をより深く理解するために、公式<a href="/ja/kotlin/getting-started">ドキュメント</a>を読んでください。</li><li><a href="https://lp.jetbrains.com/academy/learn-kotlin/" target="_blank" rel="noreferrer">JetBrains Academy</a>の Kotlin コース、または Android チームの<a href="https://developer.android.com/courses/" target="_blank" rel="noreferrer">トレーニングオプション</a>をご覧ください。</li><li>最新のニュースや開発状況を把握するために、<a href="https://twitter.com/kotlin" target="_blank" rel="noreferrer">Kotlin X</a>または<a href="https://bsky.app/profile/kotlinlang.org" target="_blank" rel="noreferrer">Kotlin Bluesky</a>のアカウントをフォローしてください。</li><li>チュートリアル、ヒント、最新情報については、<a href="https://www.youtube.com/@Kotlin" target="_blank" rel="noreferrer">Kotlin YouTube チャンネル</a>をご覧ください。</li></ul></li><li><p>Kotlin オープンソースコミュニティを知る:</p><ul><li>一般的な<a href="/ja/kotlin/contribute">Kotlin 貢献ガイドライン</a>をご確認ください。</li><li>他の開発者とつながり、質問のヘルプを得るために<a href="https://surveys.jetbrains.com/s3/kotlin-slack-sign-up" target="_blank" rel="noreferrer">Kotlin Slack チャンネルに参加してください</a>。</li><li>質問したり、GSoC チームからサポートを得るために<a href="https://slack-chats.kotlinlang.org/c/gsoc" target="_blank" rel="noreferrer">#gsoc チャンネルに参加してください</a>。</li></ul></li></ol><h3 id="応募方法" tabindex="-1">応募方法 <a class="header-anchor" href="#応募方法" aria-label="Permalink to &quot;応募方法&quot;">​</a></h3><ol><li><a href="#project-ideas">プロジェクトアイデア</a>を確認し、取り組みたいものを選択してください。</li><li>Kotlin に慣れていない場合は、<a href="/ja/kotlin/getting-started">Kotlin ウェブサイトの入門情報</a>を読んでください。</li><li><a href="https://google.github.io/gsocguides/student/writing-a-proposal" target="_blank" rel="noreferrer">GSoC コントリビューター向けガイドライン</a>を参照してください。</li><li><a href="https://summerofcode.withgoogle.com/" target="_blank" rel="noreferrer">GSoC ウェブサイト</a>から応募してください。 <ul><li>提案されたプロジェクトに関連する動作するコードサンプルを作成することをお勧めします。また、特に誇りに思っているコードサンプルがあれば、それを見せていただくことも可能です。</li><li>Kotlin に興味を持った理由と、これまでの経験を説明してください。</li><li>オープンソースプロジェクトに参加している場合は、貢献履歴を参照してください。</li><li>GitHub、X (旧 Twitter) アカウント、ブログ、または技術的・科学的出版物のポートフォリオをお持ちの場合は、それらも参照してください。</li><li>試験や休暇など、他のコミットメントによる GSoC のタイムラインとの競合があれば開示してください。</li></ul></li></ol><p>ありがとうございます！皆様からのご応募をお待ちしております！</p><h2 id="プロジェクトアイデア" tabindex="-1">プロジェクトアイデア <a class="header-anchor" href="#プロジェクトアイデア" aria-label="Permalink to &quot;プロジェクトアイデア&quot;">​</a></h2><h3 id="kotlin-to-webassembly-コンパイラ向けインクリメンタルコンパイル-難易度-高-350-時間" tabindex="-1">Kotlin-to-WebAssembly コンパイラ向けインクリメンタルコンパイル [難易度: 高, 350 時間] <a class="header-anchor" href="#kotlin-to-webassembly-コンパイラ向けインクリメンタルコンパイル-難易度-高-350-時間" aria-label="Permalink to &quot;Kotlin-to-WebAssembly コンパイラ向けインクリメンタルコンパイル [難易度: 高, 350 時間]&quot;">​</a></h3><p>インクリメンタルコンパイルは、プログラム全体を再コンパイルする(クリーンビルドの実行としても知られています)のではなく、変更されたファイルのみを再コンパイルすることで、コンパイル速度を向上させる技術です。Kotlin-to-Wasm コンパイラは現在、クリーンビルドのみをサポートしていますが、このプロジェクトではインクリメンタルコンパイルもサポートするように拡張します。</p><p><strong>期待される成果</strong></p><p>Kotlin-to-WebAssembly コンパイラにおけるインクリメンタルコンパイル機能の実装。これにより、開発ワークフローの高速化に貢献します。</p><p><strong>必要なスキル (推奨)</strong></p><p>Kotlin</p><p><strong>メンター候補</strong></p><p>Artem Kobzar, JetBrains</p><h3 id="skia-用-node-js-ネイティブバインディングによる-compose-multiplatform-難易度-高-350-時間" tabindex="-1">Skia 用 Node.js ネイティブバインディングによる Compose Multiplatform [難易度: 高, 350 時間] <a class="header-anchor" href="#skia-用-node-js-ネイティブバインディングによる-compose-multiplatform-難易度-高-350-時間" aria-label="Permalink to &quot;Skia 用 Node.js ネイティブバインディングによる Compose Multiplatform [難易度: 高, 350 時間]&quot;">​</a></h3><p><a href="https://github.com/JetBrains/compose-multiplatform" target="_blank" rel="noreferrer">Compose Multiplatform</a>は、Kotlin で構築された UI を複数のプラットフォーム間で共有するための宣言型フレームワークです。デスクトップアプリケーションのレンダリングにおける現在のアプローチでは、JVM をプラットフォームとして使用していますが、Web 用 Compose Multiplatform を使用し、Skia のネイティブバインディングでブラウザ外でアプリケーションを実行しようとした場合はどうでしょうか？これにより、デスクトップアプリケーションのパフォーマンスとメモリ消費は改善されるでしょうか？それとも、その逆の結果になるでしょうか？このプロジェクトで明らかにします！</p><p><strong>期待される成果</strong></p><p>Skia バインディングと Compose Multiplatform の統合、およびデスクトップアプリケーションへのパフォーマンス影響の評価。</p><p><strong>必要なスキル (推奨)</strong></p><p>Kotlin, Node.js, C++, または Rust</p><p><strong>メンター候補</strong></p><p>Artem Kobzar, JetBrains</p><h3 id="compose-multiplatform-コンポーネントギャラリージェネレーター-難易度-中-350-時間" tabindex="-1">Compose Multiplatform コンポーネントギャラリージェネレーター [難易度: 中, 350 時間] <a class="header-anchor" href="#compose-multiplatform-コンポーネントギャラリージェネレーター-難易度-中-350-時間" aria-label="Permalink to &quot;Compose Multiplatform コンポーネントギャラリージェネレーター [難易度: 中, 350 時間]&quot;">​</a></h3><p><a href="https://github.com/JetBrains/compose-multiplatform" target="_blank" rel="noreferrer">Compose Multiplatform</a>は、Kotlin で構築された UI を複数のプラットフォーム間で共有するための宣言型フレームワークです。Web 開発の React 時代の始まりに Storybook が作成され、コンポーネントの状態を記述し、UI ライブラリ全体のギャラリーを生成するという Storybook の提案するアプローチは、Web 開発におけるドキュメント作成の重要なアプローチの一つであり続けています。同様のことを Compose Multiplatform でも行い、Web UI 要素のギャラリーだけでなく、モバイルおよびデスクトップ用のギャラリーも生成できるでしょうか？このプロジェクトで試してみましょう。</p><p><strong>期待される成果</strong></p><p>Compose Multiplatform を使用して、Web、モバイル、デスクトッププラットフォーム向けの UI コンポーネントギャラリーを生成するツールの作成。</p><p><strong>必要なスキル (推奨)</strong></p><p>Kotlin, Jetpack Compose, UI/UX デザイン</p><p><strong>メンター候補</strong></p><p>Artem Kobzar, JetBrains</p><h3 id="宣言型-gradle-向け-kotlin-dsl-の改善-難易度-中-175-時間" tabindex="-1">宣言型 Gradle 向け Kotlin DSL の改善 [難易度: 中, 175 時間] <a class="header-anchor" href="#宣言型-gradle-向け-kotlin-dsl-の改善-難易度-中-175-時間" aria-label="Permalink to &quot;宣言型 Gradle 向け Kotlin DSL の改善 [難易度: 中, 175 時間]&quot;">​</a></h3><p>昨年11月、Gradle チームは<a href="https://blog.gradle.org/declarative-gradle" target="_blank" rel="noreferrer">新しい Declarative Gradle プロジェクトを発表し</a>、プロジェクトに高レベルの Kotlin DSL を導入しました。GSoC コントリビューターの皆様には、この新しい DSL の開発者体験を改善する作業にご参加いただきたいと考えております。特に、Gradle プラグインに拡張性を実装し、静的解析、Kotest などのテストフレームワークといった最も一般的な Kotlin および Java プロジェクトの統合をサポートすることを目的としています。</p><p><strong>期待される成果</strong></p><p>Gradle 用 Kotlin DSL における拡張機能の実装と、一般的なプロジェクト統合のサポート改善。</p><p><strong>必要なスキル (推奨)</strong></p><p>Kotlin, Gradle, Java, 静的解析</p><p><strong>メンター候補</strong></p><p>Oleg Nenashev, Gradle</p><p><a href="https://gradle.github.io/community/events/gsoc/" target="_blank" rel="noreferrer">Gradle ガイドライン</a></p><h3 id="kotlin-dsl-ドキュメントサンプルテストフレームワーク-難易度-低または中-90-時間または-175-時間" tabindex="-1">Kotlin DSL ドキュメントサンプルテストフレームワーク [難易度: 低または中, 90 時間または 175 時間] <a class="header-anchor" href="#kotlin-dsl-ドキュメントサンプルテストフレームワーク-難易度-低または中-90-時間または-175-時間" aria-label="Permalink to &quot;Kotlin DSL ドキュメントサンプルテストフレームワーク [難易度: 低または中, 90 時間または 175 時間]&quot;">​</a></h3><p>Gradle を含む多くのプロジェクトには、多数の Kotlin DSL サンプルとコードスニペットがあります (例については<a href="https://docs.gradle.org/current/userguide/userguide.html" target="_blank" rel="noreferrer">Gradle Docs</a>を参照してください)。複数のバージョンに対してこれらをテストすることは、スニペットが簡潔さのために不完全なコードを表すことが多いため、特定の課題を提起します。GitHub Actions および Teamcity 上で、単体テストフレームワーク (Kotest または JUnit 5) 内でこれらのサンプルの検証を簡素化するテストフレームワークを構築したいと考えています。</p><p><strong>期待される成果</strong></p><p>Kotlin DSL サンプル向けの基本的なテストフレームワークの実装と、継続的テストのための GitHub Actions との統合。</p><p><strong>必要なスキル (推奨)</strong></p><p>Kotlin, テストフレームワーク, CI/CD</p><p><strong>メンター候補</strong></p><p>Oleg Nenashev, Gradle</p><p><a href="https://gradle.github.io/community/events/gsoc/" target="_blank" rel="noreferrer">Gradle ガイドライン</a></p><h3 id="gradle-ビルドサーバー-–-android-プロジェクトのサポート-難易度-中または高-175-時間または-350-時間" tabindex="-1">Gradle ビルドサーバー – Android プロジェクトのサポート [難易度: 中または高, 175 時間または 350 時間] <a class="header-anchor" href="#gradle-ビルドサーバー-–-android-プロジェクトのサポート-難易度-中または高-175-時間または-350-時間" aria-label="Permalink to &quot;Gradle ビルドサーバー – Android プロジェクトのサポート [難易度: 中または高, 175 時間または 350 時間]&quot;">​</a></h3><p>Kotlin と Gradle は、Android プロジェクトを構築するためのデフォルトの選択肢です。2023年11月、Microsoft チームは<a href="https://devblogs.microsoft.com/java/announcing-the-build-server-for-gradle-open-source-repository/" target="_blank" rel="noreferrer">Gradle Build Server プロジェクトを発表しました</a>。これは、<a href="https://build-server-protocol.github.io/" target="_blank" rel="noreferrer">Build Server Protocol (BSP)</a>の Gradle 固有の実装です。そこに Android ビルドの完全なサポートを導入できれば素晴らしいでしょう。小規模なプロジェクトの場合、Gradle Build Server で Gradle タスクの自動検出とキャンセルを実装することが可能です。</p><p><strong>期待される成果</strong></p><p>Gradle Build Server における Android プロジェクトのサポートの実装 (自動検出とタスクキャンセルを含む)。</p><p><strong>必要なスキル (推奨)</strong></p><p>Kotlin, Gradle, Android 開発, Visual Studio Code</p><p><strong>メンター候補</strong></p><p>Oleg Nenashev, Gradle</p><p><a href="https://gradle.github.io/community/events/gsoc/" target="_blank" rel="noreferrer">Gradle ガイドライン</a></p><h3 id="kotlin-native-ベンチマーク向けメモリ使用量プロファイリングの実装-難易度-中-175-時間" tabindex="-1">Kotlin/Native ベンチマーク向けメモリ使用量プロファイリングの実装 [難易度: 中, 175 時間] <a class="header-anchor" href="#kotlin-native-ベンチマーク向けメモリ使用量プロファイリングの実装-難易度-中-175-時間" aria-label="Permalink to &quot;Kotlin/Native ベンチマーク向けメモリ使用量プロファイリングの実装 [難易度: 中, 175 時間]&quot;">​</a></h3><p>オープンソースツールキットである<a href="https://github.com/Kotlin/kotlinx-benchmark" target="_blank" rel="noreferrer">kotlinx-benchmark ライブラリ</a>は、様々なプラットフォームでの Kotlin コードのベンチマークを容易にします。現在、JVM 向けには GC プロファイリング機能があり、各ベンチマークメソッドの割り当てレートを詳細に示しています。このプロジェクトは、同様のプロファイリング機能を Kotlin/Native に拡張し、プラットフォーム全体で統一されたベンチマーキング機能の実現を目指します。コントリビューターは、Kotlin/Native メモリマネージャーから割り当てデータにアクセスするための API を作成するため、Kotlin/Native チームと密接に協力します。目的は、JVM フォーマットに合致するレポートを生成し、プラットフォーム間でのデータ表示の一貫性を確保することです。さらに、このプロジェクトには、他のライブラリ機能のレポート形式における不一致を特定し修正すること、それによって包括的なクロスプラットフォーム分析のためにベンチマーキング出力を標準化することが含まれます。</p><p><strong>期待される成果</strong></p><p>Kotlin/Native 向け kotlinx-benchmark におけるメモリ使用量プロファイリングの実装と、標準化されたベンチマーキング出力。</p><p><strong>必要なスキル (推奨)</strong></p><p>Kotlin, Kotlin/Native, ベンチマーキング, メモリプロファイリング</p><p><strong>メンター候補</strong></p><p>Abduqodiri Qurbonzoda, JetBrains<br> Alexander Shabalin, JetBrains</p><h3 id="kotlinx-benchmark-における-android-ターゲットのサポート-難易度-中-175-時間" tabindex="-1">kotlinx-benchmark における Android ターゲットのサポート [難易度: 中, 175 時間] <a class="header-anchor" href="#kotlinx-benchmark-における-android-ターゲットのサポート-難易度-中-175-時間" aria-label="Permalink to &quot;kotlinx-benchmark における Android ターゲットのサポート [難易度: 中, 175 時間]&quot;">​</a></h3><p><a href="https://github.com/Kotlin/kotlinx-benchmark" target="_blank" rel="noreferrer">kotlinx-benchmark ライブラリ</a>は、JVM、JS、WasmJs、Native を含む複数のプラットフォームで Kotlin コードのベンチマークを行うために設計されたオープンソースツールです。幅広い互換性があるにもかかわらず、このライブラリは現在 Android でのベンチマーキングをサポートしていません。このプロジェクトは、そのギャップを埋めることを目的としています。計画としては、androidx.benchmark のような既存の Android ライブラリを内部的に利用してこの機能を統合することです。プロジェクトの重要な側面は、現在他のプラットフォームで利用可能なすべての機能が Android でもサポートされるようにし、ライブラリのマルチプラットフォームユーティリティを維持することです。</p><p><strong>期待される成果</strong></p><p>kotlinx-benchmark における Android プラットフォーム向けのベンチマーキングサポートの統合 (他のプラットフォームとの機能パリティを確保)。</p><p><strong>必要なスキル (推奨)</strong></p><p>Kotlin, Android 開発, ベンチマーキング</p><p><strong>メンター候補</strong></p><p>Abduqodiri Qurbonzoda, JetBrains<br> Rahul Ravikumar, Google</p><h3 id="intellij-idea-における-kotlinx-benchmark-ベンチマーク向けクリックして実行する機能の有効化-難易度-中-175-時間" tabindex="-1">IntelliJ IDEA における kotlinx-benchmark ベンチマーク向けクリックして実行する機能の有効化 [難易度: 中, 175 時間] <a class="header-anchor" href="#intellij-idea-における-kotlinx-benchmark-ベンチマーク向けクリックして実行する機能の有効化-難易度-中-175-時間" aria-label="Permalink to &quot;IntelliJ IDEA における kotlinx-benchmark ベンチマーク向けクリックして実行する機能の有効化 [難易度: 中, 175 時間]&quot;">​</a></h3><p><a href="https://github.com/Kotlin/kotlinx-benchmark" target="_blank" rel="noreferrer">kotlinx-benchmark</a>は、Kotlin で書かれたマルチプラットフォームコードのベンチマーキングを行うためのオープンソースライブラリです。これには Gradle プラグインが含まれており、適用するとベンチマークを実行するためのタスクを提供します。しかし、これらのタスクを実行するには、IDE の Gradle パネルに移動するか、ターミナルを使用する必要があります。さらに、特定のベンチマークを実行するには、追加の手順が必要となり、複雑さが増します。この不便さを軽減し、プロセスを効率化するため、このプロジェクトは、単体テストで提供される利便性を反映し、IntelliJ IDEA インターフェースから個別のベンチマークまたはスイート全体を直接実行できるようにすることを目指しています。この目標を達成するには、IntelliJ IDEA チームとの協力、および/または IntelliJ プロジェクトへの直接の貢献が必要となる場合があります。</p><p><strong>期待される成果</strong></p><p>IntelliJ IDEA における kotlinx-benchmark ベンチマーク向けクリックして実行する機能の統合と、ユーザー体験の向上。</p><p><strong>必要なスキル (推奨)</strong></p><p>Kotlin, IntelliJ IDEA プラグイン開発, ベンチマーキング</p><p><strong>メンター候補</strong></p><p>Abduqodiri Qurbonzoda, JetBrains</p>',85)]))}const m=r(l,[["render",n]]);export{c as __pageData,m as default};
