import{_ as r}from"./chunks/default-hierarchy-example.DgJqkpuk.js";import{_ as o,a as d}from"./chunks/comparison-of-full-and-precise-backups.BbJYXOYw.js";import{_ as E,C as p,c,o as g,ag as e,G as l,j as s,w as t,a as i}from"./chunks/framework.Bksy39di.js";const K=JSON.parse('{"title":"Kotlin 1.8.20 有什麼新功能","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/whatsnew1820.md","filePath":"zh-Hant/kotlin/whatsnew1820.md","lastUpdated":1754307826000}'),y={name:"zh-Hant/kotlin/whatsnew1820.md"};function u(F,a,b,m,C,v){const k=p("YouTubeVideo"),n=p("tab"),h=p("tabs");return g(),c("div",null,[a[13]||(a[13]=e('<h1 id="kotlin-1-8-20-有什麼新功能" tabindex="-1">Kotlin 1.8.20 有什麼新功能 <a class="header-anchor" href="#kotlin-1-8-20-有什麼新功能" aria-label="Permalink to &quot;Kotlin 1.8.20 有什麼新功能&quot;">​</a></h1><p><em>發布日期：2023 年 4 月 25 日](releases.md#release-details)</em></p><p>Kotlin 1.8.20 版本已發布，以下是其一些重要亮點：</p><ul><li><a href="#new-kotlin-k2-compiler-updates">Kotlin K2 編譯器新功能更新</a></li><li><a href="#new-kotlin-wasm-target">全新實驗性 Kotlin/Wasm 目標</a></li><li><a href="#new-jvm-incremental-compilation-by-default-in-gradle">Gradle 中 JVM 增量編譯預設開啟</a></li><li><a href="#update-for-kotlin-native-targets">Kotlin/Native 目標更新</a></li><li><a href="#preview-of-gradle-composite-builds-support-in-kotlin-multiplatform">Kotlin Multiplatform 中 Gradle 複合建構預覽</a></li><li><a href="#improved-output-for-gradle-errors-in-xcode">Xcode 中 Gradle 錯誤輸出改進</a></li><li><a href="#support-for-the-autocloseable-interface">標準函式庫中 AutoCloseable 介面實驗性支援</a></li><li><a href="#support-for-base64-encoding">標準函式庫中 Base64 編碼實驗性支援</a></li></ul><p>您也可以在此影片中找到變更的簡要概述：</p>',5)),l(k,{src:"https://www.youtube.com/v/R1JpkpPzyBU",title:"Kotlin 1.8.20 有什麼新功能"}),a[14]||(a[14]=e(`<h2 id="ide-支援" tabindex="-1">IDE 支援 <a class="header-anchor" href="#ide-支援" aria-label="Permalink to &quot;IDE 支援&quot;">​</a></h2><p>支援 1.8.20 的 Kotlin 外掛程式適用於：</p><table tabindex="0"><thead><tr><th>IDE</th><th>支援版本</th></tr></thead><tbody><tr><td>IntelliJ IDEA</td><td>2022.2.x, 2022.3.x, 2023.1.x</td></tr><tr><td>Android Studio</td><td>Flamingo (222)</td></tr></tbody></table><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>為了正確下載 Kotlin 構件 (artifacts) 和依賴項，請<a href="#configure-gradle-settings">配置 Gradle 設定</a> 以使用 Maven Central 儲存庫。</p></div><h2 id="kotlin-k2-編譯器新功能更新" tabindex="-1">Kotlin K2 編譯器新功能更新 <a class="header-anchor" href="#kotlin-k2-編譯器新功能更新" aria-label="Permalink to &quot;Kotlin K2 編譯器新功能更新&quot;">​</a></h2><p>Kotlin 團隊持續穩定 K2 編譯器。正如<a href="/zh-Hant/kotlin/whatsnew17#new-kotlin-k2-compiler-for-the-jvm-in-alpha">Kotlin 1.7.0 公告</a>中所述，它仍處於 <strong>Alpha</strong> 階段。此版本為通往 <a href="https://youtrack.jetbrains.com/issue/KT-52604" target="_blank" rel="noreferrer">K2 Beta</a> 之路引入了更多改進。</p><p>從 1.8.20 版本開始，Kotlin K2 編譯器：</p><ul><li>具備序列化外掛程式的預覽版本。</li><li>提供 <a href="/zh-Hant/kotlin/js-ir-compiler">JS IR 編譯器</a>的 Alpha 支援。</li><li>引入了<a href="https://blog.jetbrains.com/kotlin/2023/02/k2-kotlin-2-0/" target="_blank" rel="noreferrer">新語言版本 Kotlin 2.0</a>的未來發布。</li></ul><p>透過以下影片了解更多關於新編譯器及其優勢：</p><ul><li><a href="https://www.youtube.com/watch?v=iTdJJq_LyoY" target="_blank" rel="noreferrer">每個人都必須了解的全新 Kotlin K2 編譯器</a></li><li><a href="https://www.youtube.com/watch?v=db19VFLZqJM" target="_blank" rel="noreferrer">新 Kotlin K2 編譯器：專家評論</a></li></ul><h3 id="如何啟用-kotlin-k2-編譯器" tabindex="-1">如何啟用 Kotlin K2 編譯器 <a class="header-anchor" href="#如何啟用-kotlin-k2-編譯器" aria-label="Permalink to &quot;如何啟用 Kotlin K2 編譯器&quot;">​</a></h3><p>若要啟用和測試 Kotlin K2 編譯器，請使用以下編譯器選項搭配新的語言版本：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-language-version</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2.0</span></span></code></pre></div><p>您可以在您的 <code>build.gradle(.kts)</code> 檔案中指定它：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   sourceSets.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">       languageSettings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           languageVersion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;2.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>先前的 <code>-Xuse-k2</code> 編譯器選項已棄用。</p><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>新 K2 編譯器的 Alpha 版本僅適用於 JVM 和 JS IR 專案。 它尚不支援 Kotlin/Native 或任何多平台專案。</p></div><h3 id="提供您對新-k2-編譯器的意見回饋" tabindex="-1">提供您對新 K2 編譯器的意見回饋 <a class="header-anchor" href="#提供您對新-k2-編譯器的意見回饋" aria-label="Permalink to &quot;提供您對新 K2 編譯器的意見回饋&quot;">​</a></h3><p>我們非常感謝您的任何意見回饋！</p><ul><li>直接向 Kotlin Slack 上的 K2 開發人員提供您的意見回饋 – <a href="https://surveys.jetbrains.com/s3/kotlin-slack-sign-up?_gl=1*ju6cbn*_ga*MTA3MTk5NDkzMC4xNjQ2MDY3MDU4*_ga_9J976DJZ68*MTY1ODMzNzA3OS4xMDAuMS4xNjU4MzQwODEwLjYw" target="_blank" rel="noreferrer">獲取邀請</a>並加入 <a href="https://kotlinlang.slack.com/archives/C03PK0PE257" target="_blank" rel="noreferrer">#k2-early-adopters</a> 頻道。</li><li>在<a href="https://kotl.in/issue" target="_blank" rel="noreferrer">我們的問題追蹤器</a>上報告您在使用新 K2 編譯器時遇到的任何問題。</li><li><a href="https://www.jetbrains.com/help/idea/settings-usage-statistics.html" target="_blank" rel="noreferrer">啟用 <strong>Send usage statistics</strong> 選項</a>，允許 JetBrains 收集關於 K2 使用情況的匿名數據。</li></ul><h2 id="語言" tabindex="-1">語言 <a class="header-anchor" href="#語言" aria-label="Permalink to &quot;語言&quot;">​</a></h2><p>隨著 Kotlin 持續發展，我們在 1.8.20 版本中引入了新語言功能的預覽版本：</p><ul><li><a href="#a-modern-and-performant-replacement-of-the-enum-class-values-function">Enum 類別 values 函式的現代化高效能替代方案</a></li><li><a href="#preview-of-data-objects-for-symmetry-with-data-classes">用於與 data class 對稱的 data objects 預覽</a></li><li><a href="#preview-of-lifting-restriction-on-secondary-constructors-with-bodies-in-inline-classes">解除 inline classes 中帶有函式主體的次級建構函式限制預覽</a></li></ul><h3 id="enum-類別-values-函式的現代化高效能替代方案" tabindex="-1">Enum 類別 values 函式的現代化高效能替代方案 <a class="header-anchor" href="#enum-類別-values-函式的現代化高效能替代方案" aria-label="Permalink to &quot;Enum 類別 values 函式的現代化高效能替代方案&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>此功能為<a href="/zh-Hant/kotlin/components-stability#stability-levels-explained">實驗性</a>。 它可能隨時被移除或更改。需要選擇啟用（詳情請見下文）。僅用於評估目的。 我們非常感謝您在 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a> 上提供相關意見回饋。</p></div><p>Enum 類別具有一個合成 (synthetic) 的 <code>values()</code> 函式，它會返回一個定義好的列舉常數陣列。然而，在 Kotlin 和 Java 中，使用陣列可能導致<a href="https://github.com/Kotlin/KEEP/blob/master/proposals/enum-entries.md#examples-of-performance-issues" target="_blank" rel="noreferrer">隱藏的效能問題</a>。此外，大多數 API 使用集合 (collections)，這需要最終轉換。為了解決這些問題，我們為 Enum 類別引入了 <code>entries</code> 屬性，它應該取代 <code>values()</code> 函式使用。當呼叫時，<code>entries</code> 屬性會返回一個預先分配好的不可變 (immutable) 列舉常數列表。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>values()</code> 函式仍然受支援，但我們建議您改用 <code>entries</code> 屬性。</p></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">enum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> colorName: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rgb: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    RED</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Red&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#FF0000&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ORANGE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Orange&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#FF7F00&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    YELLOW</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Yellow&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#FFFF00&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalStdlibApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> findByRgb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rgb: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Color.entries.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">find</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.rgb </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rgb }</span></span></code></pre></div><h4 id="如何啟用-entries-屬性" tabindex="-1">如何啟用 entries 屬性 <a class="header-anchor" href="#如何啟用-entries-屬性" aria-label="Permalink to &quot;如何啟用 entries 屬性&quot;">​</a></h4><p>若要試用此功能，請使用 <code>@OptIn(ExperimentalStdlibApi)</code> 選擇啟用，並啟用 <code>-language-version 1.9</code> 編譯器選項。在 Gradle 專案中，您可以透過將以下內容添加到 <code>build.gradle(.kts)</code> 檔案中來實現：</p>`,30)),l(h,{group:"build-script"},{default:t(()=>[l(n,{title:"Kotlin","group-key":"kotlin"},{default:t(()=>a[0]||(a[0]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withType"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"org"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"jetbrains"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"gradle"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"tasks"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"KotlinCompilationTask"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<*>>()")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"configureEach"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        compilerOptions")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            .languageVersion")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            ."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"set"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"                org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_1_9")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            )")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")])])])],-1)])),_:1}),l(n,{title:"Groovy","group-key":"groovy"},{default:t(()=>a[1]||(a[1]=[s("div",{class:"language-groovy vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"groovy"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    .withType("),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask."),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"class)")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    .configureEach {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        compilerOptions"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"languageVersion "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"=")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"            org.jetbrains.kotlin.gradle.dsl.KotlinVersion."),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"KOTLIN_1_9")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")])])])],-1)])),_:1})]),_:1}),a[15]||(a[15]=e(`<div class="tip custom-block"><p class="custom-block-title">TIP</p><p>從 IntelliJ IDEA 2023.1 開始，如果您已選擇啟用此功能，則相應的 IDE 檢查將通知您將 <code>values()</code> 轉換為 <code>entries</code> 並提供快速修復。</p></div><p>有關該提案的更多資訊，請參閱 <a href="https://github.com/Kotlin/KEEP/blob/master/proposals/enum-entries.md" target="_blank" rel="noreferrer">KEEP 說明</a>。</p><h3 id="用於與-data-class-對稱的-data-objects-預覽" tabindex="-1">用於與 data class 對稱的 data objects 預覽 <a class="header-anchor" href="#用於與-data-class-對稱的-data-objects-預覽" aria-label="Permalink to &quot;用於與 data class 對稱的 data objects 預覽&quot;">​</a></h3><p>Data objects 允許您宣告具有單例 (singleton) 語義和簡潔 <code>toString()</code> 表示的物件。在此程式碼片段中，您可以看到如何透過在物件宣告中添加 <code>data</code> 關鍵字來提高其 <code>toString()</code> 輸出的可讀性：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.example</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyObject</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyDataObject</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MyObject) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// org.example.MyObject@1f32e575</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MyDataObject) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// MyDataObject</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>特別對於 <code>sealed</code> 繼承層級 (例如 <code>sealed class</code> 或 <code>sealed interface</code> 繼承層級)，<code>data objects</code> 是絕佳的選擇，因為它們可以方便地與 <code>data class</code> 宣告一起使用。在此程式碼片段中，將 <code>EndOfFile</code> 宣告為 <code>data object</code> 而不是普通的 <code>object</code> 意味著它將獲得一個漂亮的 <code>toString</code>，而無需手動覆寫。這保持了與附帶的 data class 定義的對稱性。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">sealed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ReadResult</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> number: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ReadResult</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> text: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ReadResult</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EndOfFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ReadResult</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Number(number=7)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(EndOfFile) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// EndOfFile</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="data-objects-的語義" tabindex="-1">data objects 的語義 <a class="header-anchor" href="#data-objects-的語義" aria-label="Permalink to &quot;data objects 的語義&quot;">​</a></h4><p>自從在 <a href="/zh-Hant/kotlin/whatsnew1720#improved-string-representations-for-singletons-and-sealed-class-hierarchies-with-data-objects">Kotlin 1.7.20</a> 中首次預覽以來，data objects 的語義已得到完善。編譯器現在會自動為它們生成許多便利函式：</p><h5 id="tostring" tabindex="-1">toString <a class="header-anchor" href="#tostring" aria-label="Permalink to &quot;toString&quot;">​</a></h5><p>data object 的 <code>toString()</code> 函式會返回物件的簡單名稱：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyDataObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MyDataObject) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// MyDataObject</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h5 id="equals-和-hashcode" tabindex="-1">equals 和 hashCode <a class="header-anchor" href="#equals-和-hashcode" aria-label="Permalink to &quot;equals 和 hashCode&quot;">​</a></h5><p>data object 的 <code>equals()</code> 函式確保所有與您的 <code>data object</code> 具有相同類型的物件都被視為相等。在大多數情況下，您在執行時只會有一個資料物件實例 (畢竟，<code>data object</code> 宣告了一個單例)。然而，在執行時產生另一個相同類型的物件的邊緣情況下 (例如，透過 <code>java.lang.reflect</code> 的平台反射，或使用在底層使用此 API 的 JVM 序列化函式庫)，這可以確保這些物件被視為相等。</p><p>請務必僅以結構方式 (使用 <code>==</code> 運算子) 比較 <code>data objects</code>，切勿以引用方式 (使用 <code>===</code> 運算子)。這有助於避免在執行時存在多個 data object 實例時的陷阱。以下程式碼片段說明了此特定邊緣情況：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> java.lang.reflect.Constructor</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MySingleton</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> evilTwin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createInstanceViaReflection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MySingleton) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// MySingleton</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(evilTwin) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// MySingleton</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Even when a library forcefully creates a second instance of MySingleton, its \`equals\` method returns true:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MySingleton </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> evilTwin) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Do not compare data objects via ===.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MySingleton </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> evilTwin) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createInstanceViaReflection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MySingleton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Kotlin reflection does not permit the instantiation of data objects.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // This creates a new MySingleton instance &quot;by force&quot; (i.e., Java platform reflection)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Don&#39;t do this yourself!</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (MySingleton.javaClass.declaredConstructors[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { isAccessible </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Constructor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MySingleton</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">newInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>生成的 <code>hashCode()</code> 函式的行為與 <code>equals()</code> 函式一致，因此 data object 的所有執行時實例都具有相同的雜湊碼 (hash code)。</p><h5 id="data-objects-沒有-copy-和-componentn-函式" tabindex="-1">data objects 沒有 copy 和 componentN 函式 <a class="header-anchor" href="#data-objects-沒有-copy-和-componentn-函式" aria-label="Permalink to &quot;data objects 沒有 copy 和 componentN 函式&quot;">​</a></h5><p>雖然 <code>data object</code> 和 <code>data class</code> 宣告經常一起使用並有一些相似之處，但有些函式不會為 <code>data object</code> 生成：</p><p>由於 <code>data object</code> 宣告旨在用作單例物件，因此不會生成 <code>copy()</code> 函式。單例模式限制了類別的實例化為單一實例，允許創建實例的副本將違反該限制。</p><p>此外，與 <code>data class</code> 不同，<code>data object</code> 沒有任何資料屬性。由於嘗試解構此類物件沒有意義，因此不會生成 <code>componentN()</code> 函式。</p><p>我們非常感謝您在 <a href="https://youtrack.jetbrains.com/issue/KT-4107" target="_blank" rel="noreferrer">YouTrack</a> 上提供有關此功能的意見回饋。</p><h4 id="如何啟用-data-objects-預覽" tabindex="-1">如何啟用 data objects 預覽 <a class="header-anchor" href="#如何啟用-data-objects-預覽" aria-label="Permalink to &quot;如何啟用 data objects 預覽&quot;">​</a></h4><p>若要試用此功能，請啟用 <code>-language-version 1.9</code> 編譯器選項。在 Gradle 專案中，您可以透過將以下內容添加到 <code>build.gradle(.kts)</code> 檔案中來實現：</p>`,24)),l(h,{group:"build-script"},{default:t(()=>[l(n,{title:"Kotlin","group-key":"kotlin"},{default:t(()=>a[2]||(a[2]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withType"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"org"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"jetbrains"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"gradle"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"tasks"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"KotlinCompilationTask"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<*>>()")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"configureEach"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        compilerOptions")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            .languageVersion")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            ."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"set"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"                org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_1_9")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            )")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")])])])],-1)])),_:1}),l(n,{title:"Groovy","group-key":"groovy"},{default:t(()=>a[3]||(a[3]=[s("div",{class:"language-groovy vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"groovy"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    .withType("),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask."),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"class)")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    .configureEach {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        compilerOptions"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"languageVersion "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"=")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"            org.jetbrains.kotlin.gradle.dsl.KotlinVersion."),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"KOTLIN_1_9")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")])])])],-1)])),_:1})]),_:1}),a[16]||(a[16]=e(`<h3 id="解除-inline-classes-中帶有函式主體的次級建構函式限制預覽" tabindex="-1">解除 inline classes 中帶有函式主體的次級建構函式限制預覽 <a class="header-anchor" href="#解除-inline-classes-中帶有函式主體的次級建構函式限制預覽" aria-label="Permalink to &quot;解除 inline classes 中帶有函式主體的次級建構函式限制預覽&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>此功能為<a href="/zh-Hant/kotlin/components-stability#stability-levels-explained">實驗性</a>。它可能隨時被移除或更改。 需要選擇啟用（詳情請見下文）。僅用於評估目的。我們非常感謝您在 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a> 上提供相關意見回饋。</p></div><p>Kotlin 1.8.20 解除了<a href="/zh-Hant/kotlin/inline-classes">內聯類別 (inline classes)</a> 中使用帶有函式主體的次級建構函式的限制。</p><p>內聯類別過去只允許公開的主建構函式，不能帶有 <code>init</code> 區塊或次級建構函式，以便具有清晰的初始化語義。因此，不可能封裝底層值或創建表示某些受限值的內聯類別。</p><p>當 Kotlin 1.4.30 解除 <code>init</code> 區塊的限制時，這些問題得到了解決。現在，我們更進一步，在預覽模式下允許帶有函式主體的次級建構函式：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JvmInline</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fullName: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Allowed since Kotlin 1.4.30:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        check</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fullName.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isNotBlank</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;Full name shouldn&#39;t be empty&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Preview available since Kotlin 1.8.20:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, lastName: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$name</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> $lastName</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        check</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lastName.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isNotBlank</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">            &quot;Last name shouldn&#39;t be empty&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="如何啟用帶有函式主體的次級建構函式" tabindex="-1">如何啟用帶有函式主體的次級建構函式 <a class="header-anchor" href="#如何啟用帶有函式主體的次級建構函式" aria-label="Permalink to &quot;如何啟用帶有函式主體的次級建構函式&quot;">​</a></h4><p>若要試用此功能，請啟用 <code>-language-version 1.9</code> 編譯器選項。在 Gradle 專案中，您可以透過將以下內容添加到您的 <code>build.gradle(.kts)</code> 中來實現：</p>`,8)),l(h,{group:"build-script"},{default:t(()=>[l(n,{title:"Kotlin","group-key":"kotlin"},{default:t(()=>a[4]||(a[4]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withType"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"org"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"jetbrains"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"gradle"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"tasks"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"KotlinCompilationTask"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<*>>()")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"configureEach"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        compilerOptions")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            .languageVersion")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            ."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"set"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"                org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_1_9")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            )")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")])])])],-1)])),_:1}),l(n,{title:"Groovy","group-key":"groovy"},{default:t(()=>a[5]||(a[5]=[s("div",{class:"language-groovy vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"groovy"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    .withType("),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask."),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"class)")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    .configureEach {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        compilerOptions"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"languageVersion "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"=")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"            org.jetbrains.kotlin.gradle.dsl.KotlinVersion."),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"KOTLIN_1_9")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")])])])],-1)])),_:1})]),_:1}),a[17]||(a[17]=e(`<p>我們鼓勵您試用此功能，並在 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a> 中提交所有報告，以幫助我們在 Kotlin 1.9.0 中使其成為預設設定。</p><p>在 <a href="https://github.com/Kotlin/KEEP/blob/master/proposals/inline-classes.md" target="_blank" rel="noreferrer">此 KEEP</a> 中了解更多關於 Kotlin 內聯類別的開發。</p><h2 id="全新-kotlin-wasm-目標" tabindex="-1">全新 Kotlin/Wasm 目標 <a class="header-anchor" href="#全新-kotlin-wasm-目標" aria-label="Permalink to &quot;全新 Kotlin/Wasm 目標&quot;">​</a></h2><p>Kotlin/Wasm (Kotlin WebAssembly) 在此版本中進入<a href="/zh-Hant/kotlin/components-stability#stability-levels-explained">實驗性</a>階段。Kotlin 團隊認為 <a href="https://webassembly.org/" target="_blank" rel="noreferrer">WebAssembly</a> 是一項很有前途的技術，並希望找到更好的方法讓您使用它並獲得 Kotlin 的所有優勢。</p><p>WebAssembly 二進位格式獨立於平台，因為它使用自己的虛擬機器運行。幾乎所有現代瀏覽器都已支援 WebAssembly 1.0。若要設定運行 WebAssembly 的環境，您只需啟用 Kotlin/Wasm 目標的實驗性垃圾收集模式。您可以在此處找到詳細說明：<a href="#how-to-enable-kotlin-wasm">如何啟用 Kotlin/Wasm</a>。</p><p>我們想強調全新 Kotlin/Wasm 目標的以下優勢：</p><ul><li>與 <code>wasm32</code> Kotlin/Native 目標相比，編譯速度更快，因為 Kotlin/Wasm 不需要使用 LLVM。</li><li>相較於 <code>wasm32</code> 目標，與 JS 的互通性以及與瀏覽器的整合更為容易，這歸功於 <a href="https://github.com/WebAssembly/gc" target="_blank" rel="noreferrer">Wasm 垃圾收集</a>。</li><li>與 Kotlin/JS 和 JavaScript 相比，應用程式啟動速度潛在更快，因為 Wasm 具有緊湊且易於解析的位元組碼。</li><li>與 Kotlin/JS 和 JavaScript 相比，應用程式執行時效能更高，因為 Wasm 是一種靜態型別語言。</li></ul><p>從 1.8.20 版本開始，您可以在實驗性專案中使用 Kotlin/Wasm。我們為 Kotlin/Wasm 開箱即用提供了 Kotlin 標準函式庫 (<code>stdlib</code>) 和測試函式庫 (<code>kotlin.test</code>)。IDE 支援將在未來版本中添加。</p><p><a href="https://www.youtube.com/watch?v=-pqz9sKXatw" target="_blank" rel="noreferrer">在此 YouTube 影片中了解更多關於 Kotlin/Wasm 的資訊</a>。</p><h3 id="如何啟用-kotlin-wasm" tabindex="-1">如何啟用 Kotlin/Wasm <a class="header-anchor" href="#如何啟用-kotlin-wasm" aria-label="Permalink to &quot;如何啟用 Kotlin/Wasm&quot;">​</a></h3><p>若要啟用和測試 Kotlin/Wasm，請更新您的 <code>build.gradle.kts</code> 檔案：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;multiplatform&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) version </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.8.20&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    wasm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        binaries.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        browser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> commonMain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> getting</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> commonTest </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wasmMain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> getting</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wasmTest </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> getting</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>查看<a href="https://github.com/Kotlin/kotlin-wasm-examples" target="_blank" rel="noreferrer">包含 Kotlin/Wasm 範例的 GitHub 儲存庫</a>。</p></div><p>若要運行 Kotlin/Wasm 專案，您需要更新目標環境的設定：</p>`,14)),l(h,null,{default:t(()=>[l(n,{title:"Chrome"},{default:t(()=>a[6]||(a[6]=[s("ul",null,[s("li",null,[s("p",null,"對於版本 109："),s("p",null,[i("使用 "),s("code",null,"--js-flags=--experimental-wasm-gc"),i(" 命令列參數運行應用程式。")])]),s("li",null,[s("p",null,"對於版本 110 或更高版本："),s("ol",null,[s("li",null,[i("在瀏覽器中前往 "),s("code",null,"chrome://flags/#enable-webassembly-garbage-collection"),i("。")]),s("li",null,[i("啟用 "),s("strong",null,"WebAssembly Garbage Collection"),i("。")]),s("li",null,"重新啟動瀏覽器。")])])],-1)])),_:1}),l(n,{title:"Firefox"},{default:t(()=>a[7]||(a[7]=[s("p",null,"對於版本 109 或更高版本：",-1),s("ol",null,[s("li",null,[i("在瀏覽器中前往 "),s("code",null,"about:config"),i("。")]),s("li",null,[i("啟用 "),s("code",null,"javascript.options.wasm_function_references"),i(" 和 "),s("code",null,"javascript.options.wasm_gc"),i(" 選項。")]),s("li",null,"重新啟動瀏覽器。")],-1)])),_:1}),l(n,{title:"Edge"},{default:t(()=>a[8]||(a[8]=[s("p",null,"對於版本 109 或更高版本：",-1),s("p",null,[i("使用 "),s("code",null,"--js-flags=--experimental-wasm-gc"),i(" 命令列參數運行應用程式。")],-1)])),_:1})]),_:1}),a[18]||(a[18]=e(`<h3 id="提供您對-kotlin-wasm-的意見回饋" tabindex="-1">提供您對 Kotlin/Wasm 的意見回饋 <a class="header-anchor" href="#提供您對-kotlin-wasm-的意見回饋" aria-label="Permalink to &quot;提供您對 Kotlin/Wasm 的意見回饋&quot;">​</a></h3><p>我們非常感謝您的任何意見回饋！</p><ul><li>直接向 Kotlin Slack 的開發人員提供您的意見回饋 – <a href="https://surveys.jetbrains.com/s3/kotlin-slack-sign-up?_gl=1*ju6cbn*_ga*MTA3MTk5NDkzMC4xNjQ2MDY3MDU4*_ga_9J976DJZ68*MTY1ODMzNzA3OS4xMDAuMS4xNjU4MzQwODEwLjYw" target="_blank" rel="noreferrer">獲取邀請</a>並加入 <a href="https://kotlinlang.slack.com/archives/CDFP59223" target="_blank" rel="noreferrer">#webassembly</a> 頻道。</li><li>在<a href="https://youtrack.jetbrains.com/issue/KT-56492" target="_blank" rel="noreferrer">這個 YouTrack 問題</a>上報告您在使用 Kotlin/Wasm 時遇到的任何問題。</li></ul><h2 id="kotlin-jvm" tabindex="-1">Kotlin/JVM <a class="header-anchor" href="#kotlin-jvm" aria-label="Permalink to &quot;Kotlin/JVM&quot;">​</a></h2><p>Kotlin 1.8.20 引入了 <a href="#preview-of-java-synthetic-property-references">Java 合成屬性參考預覽</a>以及<a href="#support-for-the-jvm-ir-backend-in-kapt-stub-generating-task-by-default">預設支援 kapt 存根 (stub) 生成任務中的 JVM IR 後端</a>。</p><h3 id="java-合成屬性參考預覽" tabindex="-1">Java 合成屬性參考預覽 <a class="header-anchor" href="#java-合成屬性參考預覽" aria-label="Permalink to &quot;Java 合成屬性參考預覽&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>此功能為<a href="/zh-Hant/kotlin/components-stability#stability-levels-explained">實驗性</a>。 它可能隨時被移除或更改。僅用於評估目的。 我們非常感謝您在 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a> 上提供相關意見回饋。</p></div><p>Kotlin 1.8.20 引入了建立 Java 合成屬性參考的功能，例如，對於以下 Java 程式碼：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String name;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> age</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getAge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Kotlin 一直允許您編寫 <code>person.age</code>，其中 <code>age</code> 是一個合成屬性。現在，您還可以創建對 <code>Person::age</code> 和 <code>person::age</code> 的參考。對於 <code>name</code> 也同樣適用。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> persons </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Jack&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">11</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Sofie&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Peter&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">11</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    persons</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Call a reference to Java synthetic property:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sortedBy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Person::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">age</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Call Java getter via the Kotlin property syntax:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { person </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(person.name) }</span></span></code></pre></div><h4 id="如何啟用-java-合成屬性參考" tabindex="-1">如何啟用 Java 合成屬性參考 <a class="header-anchor" href="#如何啟用-java-合成屬性參考" aria-label="Permalink to &quot;如何啟用 Java 合成屬性參考&quot;">​</a></h4><p>若要試用此功能，請啟用 <code>-language-version 1.9</code> 編譯器選項。在 Gradle 專案中，您可以透過將以下內容添加到您的 <code>build.gradle(.kts)</code> 中來實現：</p>`,13)),l(h,{group:"build-script"},{default:t(()=>[l(n,{title:"Kotlin","group-key":"kotlin"},{default:t(()=>a[9]||(a[9]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withType"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"org"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"jetbrains"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"gradle"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"tasks"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"KotlinCompilationTask"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<*>>()")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"configureEach"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        compilerOptions")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            .languageVersion")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            ."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"set"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"                org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_1_9")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            )")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")])])])],-1)])),_:1}),l(n,{title:"Groovy","group-key":"groovy"},{default:t(()=>a[10]||(a[10]=[s("div",{class:"language-groovy vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"groovy"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    .withType("),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask."),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"class)")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    .configureEach {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        compilerOptions"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"languageVersion "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"=")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"            org.jetbrains.kotlin.gradle.dsl.KotlinVersion."),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"KOTLIN_1_9")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")])])])],-1)])),_:1})]),_:1}),a[19]||(a[19]=e(`<h3 id="預設支援-kapt-存根生成任務中的-jvm-ir-後端" tabindex="-1">預設支援 kapt 存根生成任務中的 JVM IR 後端 <a class="header-anchor" href="#預設支援-kapt-存根生成任務中的-jvm-ir-後端" aria-label="Permalink to &quot;預設支援 kapt 存根生成任務中的 JVM IR 後端&quot;">​</a></h3><p>在 Kotlin 1.7.20 中，我們引入了<a href="/zh-Hant/kotlin/whatsnew1720#support-for-the-jvm-ir-backend-in-kapt-stub-generating-task">對 kapt 存根生成任務中 JVM IR 後端的支援</a>。從此版本開始，此支援預設啟用。您不再需要在 <code>gradle.properties</code> 中指定 <code>kapt.use.jvm.ir=true</code> 來啟用它。我們非常感謝您在 <a href="https://youtrack.jetbrains.com/issue/KT-49682" target="_blank" rel="noreferrer">YouTrack</a> 上提供有關此功能的意見回饋。</p><h2 id="kotlin-native" tabindex="-1">Kotlin/Native <a class="header-anchor" href="#kotlin-native" aria-label="Permalink to &quot;Kotlin/Native&quot;">​</a></h2><p>Kotlin 1.8.20 包含了對支援的 Kotlin/Native 目標、與 Objective-C 的互通性以及 CocoaPods Gradle 外掛程式改進等方面的變更：</p><ul><li><a href="#update-for-kotlin-native-targets">Kotlin/Native 目標更新</a></li><li><a href="#deprecation-of-the-legacy-memory-manager">舊有記憶體管理器棄用</a></li><li><a href="#support-for-objective-c-headers-with-import-directives">支援帶有 @import 指令的 Objective-C 標頭</a></li><li><a href="#support-for-the-link-only-mode-in-cocoapods-gradle-plugin">CocoaPods Gradle 外掛程式支援僅連結模式</a></li><li><a href="#import-objective-c-extensions-as-class-members-in-uikit">在 UIKit 中將 Objective-C 擴充功能作為類別成員匯入</a></li><li><a href="#reimplementation-of-compiler-cache-management-in-the-compiler">編譯器中編譯器快取管理重新實作</a></li><li><a href="#deprecation-of-uselibraries-in-cocoapods-gradle-plugin">Cocoapods Gradle 外掛程式中 <code>useLibraries()</code> 棄用</a></li></ul><h3 id="kotlin-native-目標更新" tabindex="-1">Kotlin/Native 目標更新 <a class="header-anchor" href="#kotlin-native-目標更新" aria-label="Permalink to &quot;Kotlin/Native 目標更新&quot;">​</a></h3><p>Kotlin 團隊決定重新審視 Kotlin/Native 支援的目標列表，將它們分為多個層級，並從 Kotlin 1.8.20 開始棄用其中一些目標。有關支援和已棄用目標的完整列表，請參閱 <a href="/zh-Hant/kotlin/native-target-support">Kotlin/Native 目標支援</a>部分。</p><p>以下目標已在 Kotlin 1.8.20 中棄用，並將在 1.9.20 中移除：</p><ul><li><code>iosArm32</code></li><li><code>watchosX86</code></li><li><code>wasm32</code></li><li><code>mingwX86</code></li><li><code>linuxArm32Hfp</code></li><li><code>linuxMips32</code></li><li><code>linuxMipsel32</code></li></ul><p>至於其餘目標，現在有三種支援層級，取決於 Kotlin/Native 編譯器中目標的支援和測試情況。目標可以移動到不同的層級。例如，我們將盡力在未來為 <code>iosArm64</code> 提供全面支援，因為它對 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/get-started.html" target="_blank" rel="noreferrer">Kotlin Multiplatform</a> 至關重要。</p><p>如果您是函式庫作者，這些目標層級可以幫助您決定在 CI 工具上測試哪些目標以及跳過哪些目標。Kotlin 團隊在開發官方 Kotlin 函式庫時將採用相同的方法，例如 <a href="/zh-Hant/kotlin/coroutines-guide">kotlinx.coroutines</a>。</p><p>查看我們的<a href="https://blog.jetbrains.com/kotlin/2023/02/update-regarding-kotlin-native-targets/" target="_blank" rel="noreferrer">部落格文章</a>以了解這些變更的原因。</p><h3 id="舊有記憶體管理器棄用" tabindex="-1">舊有記憶體管理器棄用 <a class="header-anchor" href="#舊有記憶體管理器棄用" aria-label="Permalink to &quot;舊有記憶體管理器棄用&quot;">​</a></h3><p>從 1.8.20 開始，舊有記憶體管理器已被棄用，並將在 1.9.20 中移除。<a href="/zh-Hant/kotlin/native-memory-manager">新記憶體管理器</a>已在 1.7.20 中預設啟用，並持續獲得穩定性更新和效能改進。</p><p>如果您仍在使用舊有記憶體管理器，請從 <code>gradle.properties</code> 中移除 <code>kotlin.native.binary.memoryModel=strict</code> 選項，並遵循我們的<a href="/zh-Hant/kotlin/native-migration-guide">遷移指南</a>進行必要的變更。</p><p>新記憶體管理器不支援 <code>wasm32</code> 目標。該目標也<a href="#update-for-kotlin-native-targets">從此版本開始棄用</a>，並將在 1.9.20 中移除。</p><h3 id="支援帶有-import-指令的-objective-c-標頭" tabindex="-1">支援帶有 @import 指令的 Objective-C 標頭 <a class="header-anchor" href="#支援帶有-import-指令的-objective-c-標頭" aria-label="Permalink to &quot;支援帶有 @import 指令的 Objective-C 標頭&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>此功能為<a href="/zh-Hant/kotlin/components-stability#stability-levels-explained">實驗性</a>。 它可能隨時被移除或更改。需要選擇啟用（詳情請見下文）。僅用於評估目的。 我們非常感謝您在 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a> 上提供相關意見回饋。</p></div><p>Kotlin/Native 現在可以匯入帶有 <code>@import</code> 指令的 Objective-C 標頭。此功能對於使用具有自動生成 Objective-C 標頭的 Swift 函式庫或用 Swift 編寫的 CocoaPods 依賴項的類別很有用。</p><p>以前，cinterop 工具無法分析透過 <code>@import</code> 指令依賴於 Objective-C 模組的標頭。原因是它缺乏對 <code>-fmodules</code> 選項的支援。</p><p>從 Kotlin 1.8.20 開始，您可以將 Objective-C 標頭與 <code>@import</code> 一起使用。為此，請在定義檔案中將 <code>-fmodules</code> 選項作為 <code>compilerOpts</code> 傳遞給編譯器。如果您使用 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-cocoapods-overview.html" target="_blank" rel="noreferrer">CocoaPods 整合</a>，請在 <code>pod()</code> 函式的配置區塊中指定 cinterop 選項，如下所示：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ios</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    cocoapods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        summary </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;CocoaPods test library&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        homepage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://github.com/JetBrains/kotlin&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ios.deploymentTarget </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;13.5&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        pod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;PodName&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            extraOpts </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-compiler-option&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-fmodules&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>這是一個<a href="https://youtrack.jetbrains.com/issue/KT-39120" target="_blank" rel="noreferrer">備受期待的功能</a>，我們歡迎您在 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a> 上提供相關意見回饋，以幫助我們在未來版本中將其設為預設。</p><h3 id="cocoapods-gradle-外掛程式支援僅連結模式" tabindex="-1">CocoaPods Gradle 外掛程式支援僅連結模式 <a class="header-anchor" href="#cocoapods-gradle-外掛程式支援僅連結模式" aria-label="Permalink to &quot;CocoaPods Gradle 外掛程式支援僅連結模式&quot;">​</a></h3><p>藉由 Kotlin 1.8.20，您可以將 Pod 依賴項與動態框架僅用於連結，而無需生成 cinterop 綁定。當 cinterop 綁定已生成時，這會非常方便。</p><p>考慮一個包含 2 個模組的專案：一個函式庫和一個應用程式。該函式庫依賴於一個 Pod，但不產生框架，只產生 <code>.klib</code>。該應用程式依賴於該函式庫並產生一個動態框架。在這種情況下，您需要將此框架與函式庫所依賴的 Pod 連結起來，但您不需要 cinterop 綁定，因為它們已經為函式庫生成了。</p><p>若要啟用此功能，請在添加對 Pod 的依賴項時使用 <code>linkOnly</code> 選項或建構器 (builder) 屬性：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cocoapods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    summary </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;CocoaPods test library&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    homepage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://github.com/JetBrains/kotlin&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    pod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Alamofire&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, linkOnly </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        version </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;5.7.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>如果您將此選項與靜態框架一起使用，它將完全移除 Pod 依賴項，因為 Pod 不用於靜態框架連結。</p></div><h3 id="在-uikit-中將-objective-c-擴充功能作為類別成員匯入" tabindex="-1">在 UIKit 中將 Objective-C 擴充功能作為類別成員匯入 <a class="header-anchor" href="#在-uikit-中將-objective-c-擴充功能作為類別成員匯入" aria-label="Permalink to &quot;在 UIKit 中將 Objective-C 擴充功能作為類別成員匯入&quot;">​</a></h3><p>自 Xcode 14.1 以來，Objective-C 類別中的一些方法已移至類別成員。這導致生成了不同的 Kotlin API，並且這些方法被匯入為 Kotlin 擴充功能而不是方法。</p><p>您在使用 UIKit 覆寫方法時可能遇到因此產生的問題。例如，在 Kotlin 中對 UIView 進行子類化時，不可能覆寫 <code>drawRect()</code> 或 <code>layoutSubviews()</code> 方法。</p><p>自 1.8.20 起，在與 NSView 和 UIView 類別相同的標頭中宣告的類別成員會作為這些類別的成員匯入。這意味著從 NSView 和 UIView 繼承的方法可以像任何其他方法一樣輕鬆覆寫。</p><p>如果一切順利，我們計劃預設為所有 Objective-C 類別啟用此行為。</p><h3 id="編譯器中編譯器快取管理重新實作" tabindex="-1">編譯器中編譯器快取管理重新實作 <a class="header-anchor" href="#編譯器中編譯器快取管理重新實作" aria-label="Permalink to &quot;編譯器中編譯器快取管理重新實作&quot;">​</a></h3><p>為了加速編譯器快取的演進，我們已將編譯器快取管理從 Kotlin Gradle 外掛程式移至 Kotlin/Native 編譯器。這解鎖了幾項重要改進的工作，包括與編譯時間和編譯器快取靈活性相關的改進。</p><p>如果您遇到問題需要恢復舊有行為，請使用 <code>kotlin.native.cacheOrchestration=gradle</code> Gradle 屬性。</p><p>我們非常感謝您在 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a> 上提供相關意見回饋。</p><h3 id="cocoapods-gradle-外掛程式中-uselibraries-棄用" tabindex="-1">Cocoapods Gradle 外掛程式中 <code>useLibraries()</code> 棄用 <a class="header-anchor" href="#cocoapods-gradle-外掛程式中-uselibraries-棄用" aria-label="Permalink to &quot;Cocoapods Gradle 外掛程式中 \`useLibraries()\` 棄用&quot;">​</a></h3><p>Kotlin 1.8.20 開始了 <code>useLibraries()</code> 函式的棄用週期，該函式用於靜態函式庫的 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-cocoapods-overview.html" target="_blank" rel="noreferrer">CocoaPods 整合</a>。</p><p>我們引入 <code>useLibraries()</code> 函式以允許依賴包含靜態函式庫的 Pod。隨著時間的推移，這種情況變得非常罕見。大多數 Pod 透過原始碼分發，而 Objective-C 框架或 XCFrameworks 是二進位分發的常見選擇。</p><p>由於此函式不受歡迎，並且它造成了複雜化 Kotlin CocoaPods Gradle 外掛程式開發的問題，我們決定將其棄用。</p><p>有關框架和 XCFrameworks 的更多資訊，請參閱 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-build-native-binaries.html" target="_blank" rel="noreferrer">建構最終原生二進位檔</a>。</p><h2 id="kotlin-多平台" tabindex="-1">Kotlin 多平台 <a class="header-anchor" href="#kotlin-多平台" aria-label="Permalink to &quot;Kotlin 多平台&quot;">​</a></h2><p>Kotlin 1.8.20 致力於透過對 Kotlin 多平台進行以下更新來改善開發人員體驗：</p><ul><li><a href="#new-approach-to-source-set-hierarchy">設定原始碼集層級的新方法</a></li><li><a href="#preview-of-gradle-composite-builds-support-in-kotlin-multiplatform">Kotlin 多平台中 Gradle 複合建構支援的預覽</a></li><li><a href="#improved-output-for-gradle-errors-in-xcode">Xcode 中 Gradle 錯誤輸出改進</a></li></ul><h3 id="設定原始碼集層級的新方法" tabindex="-1">設定原始碼集層級的新方法 <a class="header-anchor" href="#設定原始碼集層級的新方法" aria-label="Permalink to &quot;設定原始碼集層級的新方法&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>原始碼集層級的新方法為<a href="/zh-Hant/kotlin/components-stability#stability-levels-explained">實驗性</a>。 它可能在未來的 Kotlin 版本中未經事先通知而更改。需要選擇啟用（詳情請見下文）。 我們非常感謝您在 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a> 上提供相關意見回饋。</p></div><p>Kotlin 1.8.20 提供了一種在多平台專案中設定原始碼集層級的新方法 − 預設目標層級。新方法旨在取代像 <code>ios</code> 這樣的目標捷徑，這些捷徑有其<a href="#why-replace-shortcuts">設計缺陷</a>。</p><p>預設目標層級背後的理念很簡單：您明確宣告專案編譯到的所有目標，Kotlin Gradle 外掛程式會根據指定的目標自動創建共享原始碼集。</p><h4 id="設定您的專案" tabindex="-1">設定您的專案 <a class="header-anchor" href="#設定您的專案" aria-label="Permalink to &quot;設定您的專案&quot;">​</a></h4><p>考慮這個簡單的多平台行動應用程式範例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalKotlinGradlePluginApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Enable the default target hierarchy:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    targetHierarchy.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    android</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosSimulatorArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>您可以將預設目標層級視為所有可能目標及其共享原始碼集的範本。當您在程式碼中宣告最終目標 <code>android</code>、<code>iosArm64</code> 和 <code>iosSimulatorArm64</code> 時，Kotlin Gradle 外掛程式會從範本中找到合適的共享原始碼集並為您創建它們。結果層級如下所示：</p>`,54)),a[20]||(a[20]=s("p",null,[s("img",{src:r,alt:"使用預設目標層級的範例",thumbnail:"true",width:"350","thumbnail-same-file":"true"})],-1)),a[21]||(a[21]=e('<p>綠色原始碼集實際上已在專案中創建並存在，而預設範本中的灰色原始碼集則被忽略。正如您所見，Kotlin Gradle 外掛程式並未創建 <code>watchos</code> 原始碼集，例如，因為專案中沒有 watchOS 目標。</p><p>如果您添加一個 watchOS 目標，例如 <code>watchosArm64</code>，則會創建 <code>watchos</code> 原始碼集，並且來自 <code>apple</code>、<code>native</code> 和 <code>common</code> 原始碼集的程式碼也將編譯到 <code>watchosArm64</code>。</p><p>您可以在<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-hierarchy.html#default-hierarchy-template" target="_blank" rel="noreferrer">文件</a>中找到預設目標層級的完整方案。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>在此範例中，<code>apple</code> 和 <code>native</code> 原始碼集僅編譯到 <code>iosArm64</code> 和 <code>iosSimulatorArm64</code> 目標。 因此，儘管它們的名字如此，它們仍然可以存取完整的 iOS API。 這對於像 <code>native</code> 這樣的原始碼集可能違反直覺，因為您可能期望只有在所有原生目標上可用的 API 才能在此原始碼集中存取。此行為未來可能會改變。</p></div>',4)),a[22]||(a[22]=s("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"為何取代捷徑",tabindex:"-1"},[i("為何取代捷徑 "),s("a",{class:"header-anchor",href:"#為何取代捷徑","aria-label":'Permalink to "為何取代捷徑 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),a[23]||(a[23]=e('<p>創建原始碼集層級可能很冗長、容易出錯，並且對初學者不友好。我們之前的解決方案是引入像 <code>ios</code> 這樣的捷徑，為您創建層級的一部分。然而，事實證明使用捷徑存在一個很大的設計缺陷：它們難以更改。</p><p>以 <code>ios</code> 捷徑為例。它只創建 <code>iosArm64</code> 和 <code>iosX64</code> 目標，這可能會令人困惑，並且在使用需要 <code>iosSimulatorArm64</code> 目標的 M1 主機上可能導致問題。然而，添加 <code>iosSimulatorArm64</code> 目標對於使用者專案來說可能是一個非常破壞性的改變：</p><ul><li><code>iosMain</code> 原始碼集中使用的所有依賴項都必須支援 <code>iosSimulatorArm64</code> 目標；否則，依賴項解析將失敗。</li><li>在添加新目標時，<code>iosMain</code> 中使用的一些原生 API 可能會消失 (儘管在 <code>iosSimulatorArm64</code> 的情況下不太可能發生)。</li><li>在某些情況下，例如當您在基於 Intel 的 MacBook 上編寫一個小型個人專案時，您甚至可能不需要此更改。</li></ul><p>很明顯，捷徑未能解決配置層級的問題，這就是我們在某個時候停止添加新捷徑的原因。</p><p>預設目標層級乍看之下可能與捷徑相似，但它們有一個關鍵區別：<strong>使用者必須明確指定目標集</strong>。此集定義了您的專案如何編譯和發布，以及它如何參與依賴項解析。由於此集是固定的，因此 Kotlin Gradle 外掛程式的預設配置更改應會顯著減少生態系統中的困擾，並且提供工具輔助遷移將變得更加容易。</p><h4 id="如何啟用預設層級" tabindex="-1">如何啟用預設層級 <a class="header-anchor" href="#如何啟用預設層級" aria-label="Permalink to &quot;如何啟用預設層級&quot;">​</a></h4><p>這項新功能是<a href="/zh-Hant/kotlin/components-stability#stability-levels-explained">實驗性</a>。對於 Kotlin Gradle 建構腳本，您需要使用 <code>@OptIn(ExperimentalKotlinGradlePluginApi::class)</code> 選擇啟用。</p><p>有關更多資訊，請參閱<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-hierarchy.html#default-hierarchy-template" target="_blank" rel="noreferrer">層級專案結構</a>。</p><h4 id="留下意見回饋" tabindex="-1">留下意見回饋 <a class="header-anchor" href="#留下意見回饋" aria-label="Permalink to &quot;留下意見回饋&quot;">​</a></h4><p>這對多平台專案來說是一個重大變革。我們非常感謝您的<a href="https://kotl.in/issue" target="_blank" rel="noreferrer">意見回饋</a>，以幫助使其更加完善。</p><h3 id="kotlin-多平台中-gradle-複合建構支援的預覽" tabindex="-1">Kotlin 多平台中 Gradle 複合建構支援的預覽 <a class="header-anchor" href="#kotlin-多平台中-gradle-複合建構支援的預覽" aria-label="Permalink to &quot;Kotlin 多平台中 Gradle 複合建構支援的預覽&quot;">​</a></h3><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>此功能自 Kotlin Gradle 外掛程式 1.8.20 起已在 Gradle 建構中支援。對於 IDE 支援，請使用 IntelliJ IDEA 2023.1 Beta 2 (231.8109.2) 或更高版本，以及帶有任何 Kotlin IDE 外掛程式的 Kotlin Gradle 外掛程式 1.8.20。</p></div><p>從 1.8.20 開始，Kotlin 多平台支援 <a href="https://docs.gradle.org/current/userguide/composite_builds.html" target="_blank" rel="noreferrer">Gradle 複合建構 (composite builds)</a>。複合建構允許您將單獨專案或同一專案部分中的建構包含到單一建構中。</p><p>由於一些技術挑戰，Kotlin 多平台與 Gradle 複合建構的搭配使用僅得到部分支援。Kotlin 1.8.20 包含了改進支援的預覽，該支援應該適用於更多種類的專案。若要試用它，請將以下選項添加到您的 <code>gradle.properties</code> 中：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.mpp.import.enableKgpDependencyResolution=true</span></span></code></pre></div><p>此選項啟用新匯入模式的預覽。除了支援複合建構外，它還提供了多平台專案中更流暢的匯入體驗，因為我們已包含主要的錯誤修復和改進，以使匯入更穩定。</p><h4 id="已知問題" tabindex="-1">已知問題 <a class="header-anchor" href="#已知問題" aria-label="Permalink to &quot;已知問題&quot;">​</a></h4><p>它仍是一個需要進一步穩定的預覽版本，您可能會在匯入過程中遇到一些問題。以下是我們計劃在 Kotlin 1.8.20 正式發布前修復的一些已知問題：</p><ul><li>IntelliJ IDEA 2023.1 EAP 尚無可用的 Kotlin 1.8.20 外掛程式。儘管如此，您仍然可以將 Kotlin Gradle 外掛程式版本設定為 1.8.20，並在此 IDE 中試用複合建構。</li><li>如果您的專案包含指定了 <code>rootProject.name</code> 的建構，複合建構可能無法解析 Kotlin 中繼資料 (metadata)。有關解決方案和詳細資訊，請參閱<a href="https://youtrack.jetbrains.com/issue/KT-56536" target="_blank" rel="noreferrer">此 YouTrack 問題</a>。</li></ul><p>我們鼓勵您試用此功能，並在 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a> 上提交所有報告，以幫助我們在 Kotlin 1.9.0 中使其成為預設設定。</p><h3 id="xcode-中-gradle-錯誤輸出改進" tabindex="-1">Xcode 中 Gradle 錯誤輸出改進 <a class="header-anchor" href="#xcode-中-gradle-錯誤輸出改進" aria-label="Permalink to &quot;Xcode 中 Gradle 錯誤輸出改進&quot;">​</a></h3><p>如果您在 Xcode 中建構多平台專案時遇到問題，您可能會遇到「Command PhaseScriptExecution failed with a nonzero exit code」錯誤。此訊息表示 Gradle 呼叫失敗，但對於嘗試偵測問題並不是很有幫助。</p><p>從 Kotlin 1.8.20 開始，Xcode 可以解析 Kotlin/Native 編譯器的輸出。此外，如果 Gradle 建構失敗，您將在 Xcode 中看到來自根本原因例外情況的額外錯誤訊息。在大多數情況下，這將有助於識別根本問題。</p><p><img src="'+o+`" alt="Xcode 中 Gradle 錯誤輸出改進" width="700"></p><p>對於 Xcode 整合的標準 Gradle 任務，例如可將多平台專案中的 iOS 框架連接到 Xcode 中的 iOS 應用程式的 <code>embedAndSignAppleFrameworkForXcode</code>，此新行為預設啟用。它也可以透過 <code>kotlin.native.useXcodeMessageStyle</code> Gradle 屬性啟用（或停用）。</p><h2 id="kotlin-javascript" tabindex="-1">Kotlin/JavaScript <a class="header-anchor" href="#kotlin-javascript" aria-label="Permalink to &quot;Kotlin/JavaScript&quot;">​</a></h2><p>Kotlin 1.8.20 改變了 TypeScript 定義的生成方式。它還包含一項旨在改善您的偵錯體驗：</p><ul><li><a href="#removal-of-dukat-integration-from-gradle-plugin">從 Gradle 外掛程式中移除 Dukat 整合</a></li><li><a href="#kotlin-variable-and-function-names-in-source-maps">原始碼映射中 Kotlin 變數和函式名稱</a></li><li><a href="#opt-in-for-generation-of-typescript-definition-files">選擇啟用 TypeScript 定義檔生成</a></li></ul><h3 id="從-gradle-外掛程式中移除-dukat-整合" tabindex="-1">從 Gradle 外掛程式中移除 Dukat 整合 <a class="header-anchor" href="#從-gradle-外掛程式中移除-dukat-整合" aria-label="Permalink to &quot;從 Gradle 外掛程式中移除 Dukat 整合&quot;">​</a></h3><p>在 Kotlin 1.8.20 中，我們已從 Kotlin/JavaScript Gradle 外掛程式中移除了我們的<a href="/zh-Hant/kotlin/components-stability#stability-levels-explained">實驗性</a> Dukat 整合。Dukat 整合支援將 TypeScript 宣告檔案 (<code>.d.ts</code>) 自動轉換為 Kotlin 外部宣告。</p><p>您仍然可以透過使用我們的 <a href="https://github.com/Kotlin/dukat" target="_blank" rel="noreferrer">Dukat 工具</a>將 TypeScript 宣告檔案 (<code>.d.ts</code>) 轉換為 Kotlin 外部宣告。</p><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>Dukat 工具為<a href="/zh-Hant/kotlin/components-stability#stability-levels-explained">實驗性</a>。 它可能隨時被移除或更改。</p></div><h3 id="原始碼映射中-kotlin-變數和函式名稱" tabindex="-1">原始碼映射中 Kotlin 變數和函式名稱 <a class="header-anchor" href="#原始碼映射中-kotlin-變數和函式名稱" aria-label="Permalink to &quot;原始碼映射中 Kotlin 變數和函式名稱&quot;">​</a></h3><p>為了幫助偵錯，我們引入了將您在 Kotlin 程式碼中宣告的變數和函式名稱添加到原始碼映射 (source maps) 中的功能。在 1.8.20 之前，這些名稱在原始碼映射中不可用，因此在偵錯器中，您總是看到生成 JavaScript 的變數和函式名稱。</p><p>您可以透過在 Gradle 檔案 <code>build.gradle.kts</code> 中使用 <code>sourceMapNamesPolicy</code> 或 <code>-source-map-names-policy</code> 編譯器選項來配置添加的內容。下表列出了可能的設定：</p><table tabindex="0"><thead><tr><th>設定</th><th>描述</th><th>範例輸出</th></tr></thead><tbody><tr><td><code>simple-names</code></td><td>添加變數名稱和簡單函式名稱。（預設）</td><td><code>main</code></td></tr><tr><td><code>fully-qualified-names</code></td><td>添加變數名稱和完全限定函式名稱。</td><td><code>com.example.kjs.playground.main</code></td></tr><tr><td><code>no</code></td><td>不添加任何變數或函式名稱。</td><td>N/A</td></tr></tbody></table><p>以下是 <code>build.gradle.kts</code> 檔案中的配置範例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tasks.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">org</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jetbrains</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gradle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tasks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Kotlin2JsCompile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configureEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    compilercompileOptions.sourceMapNamesPolicy.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(org.jetbrains.kotlin.gradle.dsl.JsSourceMapNamesPolicy.SOURCE_MAP_NAMES_POLICY_FQ_NAMES) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// or SOURCE_MAP_NAMES_POLICY_NO, or SOURCE_MAP_NAMES_POLICY_SIMPLE_NAMES</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>像基於 Chromium 的瀏覽器中提供的偵錯工具可以從您的原始碼映射中獲取原始 Kotlin 名稱，以提高堆疊追蹤 (stack trace) 的可讀性。祝您偵錯愉快！</p><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>變數和函式名稱在原始碼映射中的添加為<a href="/zh-Hant/kotlin/components-stability#stability-levels-explained">實驗性</a>。 它可能隨時被移除或更改。</p></div><h3 id="選擇啟用-typescript-定義檔生成" tabindex="-1">選擇啟用 TypeScript 定義檔生成 <a class="header-anchor" href="#選擇啟用-typescript-定義檔生成" aria-label="Permalink to &quot;選擇啟用 TypeScript 定義檔生成&quot;">​</a></h3><p>以前，如果您有一個產生可執行檔 (<code>binaries.executable()</code>) 的專案，Kotlin/JS IR 編譯器會收集任何標記有 <code>@JsExport</code> 的頂層宣告，並自動在 <code>.d.ts</code> 檔案中生成 TypeScript 定義。</p><p>由於這並非對每個專案都有用，我們在 Kotlin 1.8.20 中更改了此行為。如果您想要生成 TypeScript 定義，您必須在 Gradle 建構檔案中明確配置此功能。將 <code>generateTypeScriptDefinitions()</code> 添加到您的 <code>build.gradle.kts.file</code> 的 <a href="/zh-Hant/kotlin/js-project-setup#execution-environments"><code>js</code> 部分</a>中。例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        binaries.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        browser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        generateTypeScriptDefinitions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>TypeScript 定義 (<code>d.ts</code>) 的生成為<a href="/zh-Hant/kotlin/components-stability#stability-levels-explained">實驗性</a>。它可能隨時被移除或更改。</p></div><h2 id="gradle" tabindex="-1">Gradle <a class="header-anchor" href="#gradle" aria-label="Permalink to &quot;Gradle&quot;">​</a></h2><p>Kotlin 1.8.20 完全兼容 Gradle 6.8 到 7.6，除了<a href="https://youtrack.jetbrains.com/issue/KT-55751" target="_blank" rel="noreferrer">多平台外掛程式中的一些特殊情況</a>。您也可以使用直到最新 Gradle 版本的 Gradle 版本，但如果您這樣做，請記住您可能會遇到棄用警告或某些新的 Gradle 功能可能無法正常運作。</p><p>此版本帶來了以下變更：</p><ul><li><a href="#new-gradle-plugins-versions-alignment">Gradle 外掛程式版本新對齊方式</a></li><li><a href="#new-jvm-incremental-compilation-by-default-in-gradle">Gradle 中 JVM 增量編譯預設開啟</a></li><li><a href="#precise-backup-of-compilation-tasks-outputs">編譯任務輸出精確備份</a></li><li><a href="#lazy-kotlin-jvm-tasks-creation-for-all-gradle-versions">所有 Gradle 版本 Kotlin/JVM 任務惰性創建</a></li><li><a href="#non-default-location-of-compile-tasks-destinationdirectory">編譯任務 destinationDirectory 的非預設位置</a></li><li><a href="#ability-to-opt-out-from-reporting-compiler-arguments-to-an-http-statistics-service">選擇不向 HTTP 統計服務報告編譯器參數的能力</a></li></ul><h3 id="gradle-外掛程式版本新對齊方式" tabindex="-1">Gradle 外掛程式版本新對齊方式 <a class="header-anchor" href="#gradle-外掛程式版本新對齊方式" aria-label="Permalink to &quot;Gradle 外掛程式版本新對齊方式&quot;">​</a></h3><p>Gradle 提供了一種方法來確保必須協同工作的依賴項在版本上始終<a href="https://docs.gradle.org/current/userguide/dependency_version_alignment.html#aligning_versions_natively_with_gradle" target="_blank" rel="noreferrer">保持一致</a>。Kotlin 1.8.20 也採用了這種方法。它預設啟用，因此您無需更改或更新配置即可啟用它。此外，您不再需要採用<a href="/zh-Hant/kotlin/whatsnew18#resolution-of-kotlin-gradle-plugins-transitive-dependencies">此解決方法來解析 Kotlin Gradle 外掛程式的傳遞依賴項</a>。</p><p>我們非常感謝您在 <a href="https://youtrack.jetbrains.com/issue/KT-54691" target="_blank" rel="noreferrer">YouTrack</a> 上提供有關此功能的意見回饋。</p><h3 id="gradle-中-jvm-增量編譯預設開啟" tabindex="-1">Gradle 中 JVM 增量編譯預設開啟 <a class="header-anchor" href="#gradle-中-jvm-增量編譯預設開啟" aria-label="Permalink to &quot;Gradle 中 JVM 增量編譯預設開啟&quot;">​</a></h3><p><a href="/zh-Hant/kotlin/whatsnew17#a-new-approach-to-incremental-compilation">自 Kotlin 1.7.0 起可用的增量編譯新方法</a>現在預設啟用。您不再需要在 <code>gradle.properties</code> 中指定 <code>kotlin.incremental.useClasspathSnapshot=true</code> 來啟用它。</p><p>我們非常感謝您對此提供意見回饋。您可以在 YouTrack 中<a href="https://kotl.in/issue" target="_blank" rel="noreferrer">提交問題</a>。</p><h3 id="編譯任務輸出精確備份" tabindex="-1">編譯任務輸出精確備份 <a class="header-anchor" href="#編譯任務輸出精確備份" aria-label="Permalink to &quot;編譯任務輸出精確備份&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>編譯任務輸出精確備份為<a href="/zh-Hant/kotlin/components-stability#stability-levels-explained">實驗性</a>。 若要使用它，請將 <code>kotlin.compiler.preciseCompilationResultsBackup=true</code> 添加到 <code>gradle.properties</code>。 我們非常感謝您在 <a href="https://kotl.in/issue/experimental-ic-optimizations" target="_blank" rel="noreferrer">YouTrack</a> 上提供相關意見回饋。</p></div><p>從 Kotlin 1.8.20 開始，您可以啟用精確備份，只有 Kotlin 在<a href="/zh-Hant/kotlin/gradle-compilation-and-caches#incremental-compilation">增量編譯</a>中重新編譯的類別才會被備份。完整備份和精確備份都有助於在編譯錯誤後再次增量運行建構。精確備份還比完整備份節省建構時間。在大型專案中，或者如果許多任務正在進行備份，特別是當專案位於緩慢的 HDD 上時，完整備份可能會花費<strong>明顯的</strong>建構時間。</p><p>此最佳化是實驗性的。您可以透過將 <code>kotlin.compiler.preciseCompilationResultsBackup</code> Gradle 屬性添加到 <code>gradle.properties</code> 檔案中來啟用它：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.compiler.preciseCompilationResultsBackup=true</span></span></code></pre></div>`,60)),a[24]||(a[24]=s("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"jetbrains-中精確備份使用範例",tabindex:"-1"},[i("JetBrains 中精確備份使用範例 "),s("a",{class:"header-anchor",href:"#jetbrains-中精確備份使用範例","aria-label":'Permalink to "JetBrains 中精確備份使用範例 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),a[25]||(a[25]=e('<p>在以下圖表中，您可以看到與完整備份相比使用精確備份的範例：</p><p><img src="'+d+'" alt="完整備份與精確備份的比較" width="700"></p><p>第一和第二張圖表顯示了 Kotlin 專案中精確備份如何影響 Kotlin Gradle 外掛程式的建構：</p><ol><li>在對許多模組所依賴的模組進行小的 <a href="https://en.wikipedia.org/wiki/Application_binary_interface" target="_blank" rel="noreferrer">ABI</a> 變更後 – 添加一個新的公共方法。</li><li>在對沒有其他模組依賴的模組進行小的非 ABI 變更後 – 添加一個私有函式。</li></ol><p>第三張圖表顯示了 <a href="https://www.jetbrains.com/space/" target="_blank" rel="noreferrer">Space</a> 專案中的精確備份如何影響在對許多模組所依賴的 Kotlin/JS 模組進行小的非 ABI 變更後 – 添加一個私有函式 – 建構網頁前端。</p><p>這些測量是在配備 Apple M1 Max CPU 的電腦上進行的；不同電腦會產生略有不同的結果。影響效能的因素包括但不限於：</p><ul><li><a href="/zh-Hant/kotlin/gradle-compilation-and-caches#the-kotlin-daemon-and-how-to-use-it-with-gradle">Kotlin 守護程序 (daemon)</a> 和 <a href="https://docs.gradle.org/current/userguide/gradle_daemon.html" target="_blank" rel="noreferrer">Gradle 守護程序</a> 的熱度。</li><li>磁碟的速度快慢。</li><li>CPU 型號及其忙碌程度。</li><li>哪些模組受到變更影響以及這些模組的大小。</li><li>變更是 ABI 還是非 ABI。</li></ul>',7)),a[26]||(a[26]=s("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"使用建構報告評估最佳化",tabindex:"-1"},[i("使用建構報告評估最佳化 "),s("a",{class:"header-anchor",href:"#使用建構報告評估最佳化","aria-label":'Permalink to "使用建構報告評估最佳化 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),a[27]||(a[27]=e(`<p>為了估計最佳化對您的專案和場景在您的電腦上的影響，您可以使用 <a href="/zh-Hant/kotlin/gradle-compilation-and-caches#build-reports">Kotlin 建構報告</a>。透過將以下屬性添加到您的 <code>gradle.properties</code> 檔案中來啟用文字檔案格式的報告：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.build.report.output=file</span></span></code></pre></div><p>以下是啟用精確備份之前報告相關部分的範例：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Task &#39;:kotlin-gradle-plugin:compileCommonKotlin&#39; finished in 0.59 s</span></span>
<span class="line"><span>&lt;...&gt;</span></span>
<span class="line"><span>Time metrics:</span></span>
<span class="line"><span> Total Gradle task time: 0.59 s</span></span>
<span class="line"><span> Task action before worker execution: 0.24 s</span></span>
<span class="line"><span>  Backup output: 0.22 s // 請注意這個數字 </span></span>
<span class="line"><span>&lt;...&gt;</span></span></code></pre></div><p>以下是啟用精確備份之後報告相關部分的範例：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Task &#39;:kotlin-gradle-plugin:compileCommonKotlin&#39; finished in 0.46 s</span></span>
<span class="line"><span>&lt;...&gt;</span></span>
<span class="line"><span>Time metrics:</span></span>
<span class="line"><span> Total Gradle task time: 0.46 s</span></span>
<span class="line"><span> Task action before worker execution: 0.07 s</span></span>
<span class="line"><span>  Backup output: 0.05 s // 時間已減少</span></span>
<span class="line"><span> Run compilation in Gradle worker: 0.32 s</span></span>
<span class="line"><span>  Clear jar cache: 0.00 s</span></span>
<span class="line"><span>  Precise backup output: 0.00 s // 與精確備份相關</span></span>
<span class="line"><span>  Cleaning up the backup stash: 0.00 s // 與精確備份相關</span></span>
<span class="line"><span>&lt;...&gt;</span></span></code></pre></div><h3 id="所有-gradle-版本-kotlin-jvm-任務惰性創建" tabindex="-1">所有 Gradle 版本 Kotlin/JVM 任務惰性創建 <a class="header-anchor" href="#所有-gradle-版本-kotlin-jvm-任務惰性創建" aria-label="Permalink to &quot;所有 Gradle 版本 Kotlin/JVM 任務惰性創建&quot;">​</a></h3><p>對於在 Gradle 7.3+ 上使用 <code>org.jetbrains.kotlin.gradle.jvm</code> 外掛程式的專案，Kotlin Gradle 外掛程式不再急切地創建和配置任務 <code>compileKotlin</code>。在較低的 Gradle 版本上，它只是簡單地註冊所有任務，並且在試運行時不配置它們。現在在使用 Gradle 7.3+ 時，也採用相同的行為。</p><h3 id="編譯任務-destinationdirectory-的非預設位置" tabindex="-1">編譯任務 destinationDirectory 的非預設位置 <a class="header-anchor" href="#編譯任務-destinationdirectory-的非預設位置" aria-label="Permalink to &quot;編譯任務 destinationDirectory 的非預設位置&quot;">​</a></h3><p>如果您執行以下任一操作，請使用一些額外程式碼更新您的建構腳本：</p><ul><li>覆寫 Kotlin/JVM <code>KotlinJvmCompile</code>/<code>KotlinCompile</code> 任務的 <code>destinationDirectory</code> 位置。</li><li>使用已棄用的 Kotlin/JS/非 IR <a href="/zh-Hant/kotlin/gradle-plugin-variants">變體</a>並覆寫 <code>Kotlin2JsCompile</code> 任務的 <code>destinationDirectory</code>。</li></ul><p>您需要在 JAR 檔案中明確將 <code>sourceSets.main.kotlin.classesDirectories</code> 添加到 <code>sourceSets.main.outputs</code>：</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tasks</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">jar(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Jar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    from sourceSets</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">main</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">outputs</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    from sourceSets</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">main</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kotlin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">classesDirectories</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="選擇不向-http-統計服務報告編譯器參數的能力" tabindex="-1">選擇不向 HTTP 統計服務報告編譯器參數的能力 <a class="header-anchor" href="#選擇不向-http-統計服務報告編譯器參數的能力" aria-label="Permalink to &quot;選擇不向 HTTP 統計服務報告編譯器參數的能力&quot;">​</a></h3><p>您現在可以控制 Kotlin Gradle 外掛程式是否應在 HTTP <a href="/zh-Hant/kotlin/gradle-compilation-and-caches#build-reports">建構報告</a>中包含編譯器參數。有時，您可能不需要外掛程式報告這些參數。如果專案包含許多模組，其報告中的編譯器參數可能非常龐大且不那麼有用。現在有一種方法可以禁用它，從而節省記憶體。在您的 <code>gradle.properties</code> 或 <code>local.properties</code> 中，使用 <code>kotlin.build.report.include_compiler_arguments=(true|false)</code> 屬性。</p><p>我們非常感謝您在 <a href="https://youtrack.jetbrains.com/issue/KT-55323/" target="_blank" rel="noreferrer">YouTrack</a> 上提供有關此功能的意見回饋。</p><h2 id="標準函式庫" tabindex="-1">標準函式庫 <a class="header-anchor" href="#標準函式庫" aria-label="Permalink to &quot;標準函式庫&quot;">​</a></h2><p>Kotlin 1.8.20 添加了各種新功能，其中一些對於 Kotlin/Native 開發特別有用：</p><ul><li><a href="#support-for-the-autocloseable-interface">AutoCloseable 介面支援</a></li><li><a href="#support-for-base64-encoding">Base64 編碼和解碼支援</a></li><li><a href="#support-for-volatile-in-kotlin-native">Kotlin/Native 中 @Volatile 支援</a></li><li><a href="#bug-fix-for-stack-overflow-when-using-regex-in-kotlin-native">Kotlin/Native 中使用正規表達式時堆疊溢位錯誤修復</a></li></ul><h3 id="autocloseable-介面支援" tabindex="-1">AutoCloseable 介面支援 <a class="header-anchor" href="#autocloseable-介面支援" aria-label="Permalink to &quot;AutoCloseable 介面支援&quot;">​</a></h3><blockquote><p>新的 <code>AutoCloseable</code> 介面為<a href="/zh-Hant/kotlin/components-stability#stability-levels-explained">實驗性</a>，若要使用它，您需要使用 <code>@OptIn(ExperimentalStdlibApi::class)</code> 或編譯器參數 <code>-opt-in=kotlin.ExperimentalStdlibApi</code> 選擇啟用。</p></blockquote><p style=""></p><p><code>AutoCloseable</code> 介面已添加到通用標準函式庫中，以便您可以為所有函式庫使用一個通用介面來關閉資源。在 Kotlin/JVM 中，<code>AutoCloseable</code> 介面是 <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/AutoCloseable.html" target="_blank" rel="noreferrer"><code>java.lang.AutoClosable</code></a> 的別名。</p><p>此外，現在包含了擴充函式 <code>use()</code>，它在選定的資源上執行給定的區塊函式，然後正確關閉它，無論是否拋出例外。</p><p>通用標準函式庫中沒有任何實作 <code>AutoCloseable</code> 介面的公共類別。在下面的範例中，我們定義了 <code>XMLWriter</code> 介面，並假設存在一個實作它的資源。例如，此資源可能是一個打開檔案、寫入 XML 內容然後關閉它的類別。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> XMLWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AutoCloseable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> document</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(encoding: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, version: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, content: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">XMLWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Unit)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, content: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">XMLWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Unit)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> attribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> writeBooksTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(writer: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">XMLWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    writer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { xml </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        xml.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">document</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(encoding </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;UTF-8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, version </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;bookstore&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;book&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    attribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;category&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;fiction&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;title&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Harry Potter and the Prisoner of Azkaban&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;author&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;J. K. Rowling&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;year&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1999&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;price&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;29.99&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;book&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    attribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;category&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;programming&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;title&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Kotlin in Action&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;author&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Dmitry Jemerov&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;author&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Svetlana Isakova&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;year&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2017&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;price&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;25.19&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="base64-編碼支援" tabindex="-1">Base64 編碼支援 <a class="header-anchor" href="#base64-編碼支援" aria-label="Permalink to &quot;Base64 編碼支援&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>新的編碼和解碼功能為<a href="/zh-Hant/kotlin/components-stability#stability-levels-explained">實驗性</a>， 若要使用它，您需要使用 <code>@OptIn(ExperimentalEncodingApi::class)</code> 或 編譯器參數 <code>-opt-in=kotlin.io.encoding.ExperimentalEncodingApi</code> 選擇啟用。</p></div><p>我們添加了對 Base64 編碼和解碼的支援。我們提供了 3 個類別實例，每個實例使用不同的編碼方案並顯示不同的行為。對於標準的 <a href="https://www.rfc-editor.org/rfc/rfc4648#section-4" target="_blank" rel="noreferrer">Base64 編碼方案</a>，請使用 <code>Base64.Default</code> 實例。</p><p>對於「URL 和檔案名安全」(<a href="https://www.rfc-editor.org/rfc/rfc4648#section-5" target="_blank" rel="noreferrer">URL and Filename safe</a>) 編碼方案，請使用 <code>Base64.UrlSafe</code> 實例。</p><p>對於 <a href="https://www.rfc-editor.org/rfc/rfc2045#section-6.8" target="_blank" rel="noreferrer">MIME</a> 編碼方案，請使用 <code>Base64.Mime</code> 實例。當您使用 <code>Base64.Mime</code> 實例時，所有編碼函式每 76 個字元會插入一個換行符。在解碼情況下，任何非法字元都會被跳過，並且不會拋出例外。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>Base64.Default</code> 實例是 <code>Base64</code> 類別的伴隨物件。因此，您可以透過 <code>Base64.encode()</code> 和 <code>Base64.decode()</code> 呼叫其函式，而不是 <code>Base64.Default.encode()</code> 和 <code>Base64.Default.decode()</code>。</p></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foBytes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;fo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.code.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toByte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toByteArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base64.Default.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">encode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(foBytes) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;Zm8=&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Alternatively:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Base64.encode(foBytes)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foobarBytes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;foobar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.code.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toByte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toByteArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base64.UrlSafe.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">encode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(foobarBytes) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;Zm9vYmFy&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base64.Default.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">decode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Zm8=&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// foBytes</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Alternatively:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Base64.decode(&quot;Zm8=&quot;)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base64.UrlSafe.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">decode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Zm9vYmFy&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// foobarBytes</span></span></code></pre></div><p>您可以使用額外的函式將位元組編碼或解碼到現有緩衝區中，以及將編碼結果附加到提供的 <code>Appendable</code> 型別物件。</p><p>在 Kotlin/JVM 中，我們還添加了擴充函式 <code>encodingWith()</code> 和 <code>decodingWith()</code>，以使您能夠使用輸入和輸出流執行 Base64 編碼和解碼。</p><h3 id="kotlin-native-中-volatile-支援" tabindex="-1">Kotlin/Native 中 @Volatile 支援 <a class="header-anchor" href="#kotlin-native-中-volatile-支援" aria-label="Permalink to &quot;Kotlin/Native 中 @Volatile 支援&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p><code>@Volatile</code> 在 Kotlin/Native 中為<a href="/zh-Hant/kotlin/components-stability#stability-levels-explained">實驗性</a>。 它可能隨時被移除或更改。需要選擇啟用（詳情請見下文）。 僅用於評估目的。我們非常感謝您在 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a> 上提供相關意見回饋。</p></div><p>如果您使用 <code>@Volatile</code> 標註 <code>var</code> 屬性，則支援欄位會被標記，以便對該欄位的任何讀取或寫入都是原子性的，並且寫入始終對其他執行緒可見。</p><p>在 1.8.20 之前，<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.jvm/-volatile/" target="_blank" rel="noreferrer"><code>kotlin.jvm.Volatile</code> 標註</a>在通用標準函式庫中可用。然而，此標註僅在 JVM 中有效。如果您在 Kotlin/Native 中使用它，它將被忽略，這可能導致錯誤。</p><p>在 1.8.20 中，我們引入了一個通用標註 <code>kotlin.concurrent.Volatile</code>，您可以在 JVM 和 Kotlin/Native 中使用它。</p><h4 id="如何啟用" tabindex="-1">如何啟用 <a class="header-anchor" href="#如何啟用" aria-label="Permalink to &quot;如何啟用&quot;">​</a></h4><p>若要試用此功能，請使用 <code>@OptIn(ExperimentalStdlibApi)</code> 選擇啟用，並啟用 <code>-language-version 1.9</code> 編譯器選項。在 Gradle 專案中，您可以透過將以下內容添加到 <code>build.gradle(.kts)</code> 檔案中來實現：</p>`,42)),l(h,{group:"build-script"},{default:t(()=>[l(n,{title:"Kotlin","group-key":"kotlin"},{default:t(()=>a[11]||(a[11]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withType"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"org"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"jetbrains"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"gradle"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"tasks"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"KotlinCompilationTask"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<*>>()")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"configureEach"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        compilerOptions")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            .languageVersion")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            ."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"set"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"                org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_1_9")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            )")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")])])])],-1)])),_:1}),l(n,{title:"Groovy","group-key":"groovy"},{default:t(()=>a[12]||(a[12]=[s("div",{class:"language-groovy vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"groovy"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    .withType("),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask."),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"class)")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    .configureEach {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        compilerOptions"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"languageVersion "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"=")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"            org.jetbrains.kotlin.gradle.dsl.KotlinVersion."),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"KOTLIN_1_9")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")])])])],-1)])),_:1})]),_:1}),a[28]||(a[28]=e(`<h3 id="kotlin-native-中使用正規表達式時堆疊溢位錯誤修復" tabindex="-1">Kotlin/Native 中使用正規表達式時堆疊溢位錯誤修復 <a class="header-anchor" href="#kotlin-native-中使用正規表達式時堆疊溢位錯誤修復" aria-label="Permalink to &quot;Kotlin/Native 中使用正規表達式時堆疊溢位錯誤修復&quot;">​</a></h3><p>在 Kotlin 的先前版本中，如果您的正規表達式輸入包含大量字元，即使正規表達式模式非常簡單，也可能發生崩潰。在 1.8.20 中，此問題已解決。有關更多資訊，請參閱 <a href="https://youtrack.jetbrains.com/issue/KT-46211" target="_blank" rel="noreferrer">KT-46211</a>。</p><h2 id="序列化更新" tabindex="-1">序列化更新 <a class="header-anchor" href="#序列化更新" aria-label="Permalink to &quot;序列化更新&quot;">​</a></h2><p>Kotlin 1.8.20 提供了<a href="#prototype-serialization-compiler-plugin-for-kotlin-k2-compiler">對 Kotlin K2 編譯器的 Alpha 支援</a>並<a href="#prohibit-implicit-serializer-customization-via-companion-object">禁止透過伴隨物件進行序列化器自訂</a>。</p><h3 id="kotlin-k2-編譯器序列化器外掛程式原型" tabindex="-1">Kotlin K2 編譯器序列化器外掛程式原型 <a class="header-anchor" href="#kotlin-k2-編譯器序列化器外掛程式原型" aria-label="Permalink to &quot;Kotlin K2 編譯器序列化器外掛程式原型&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>序列化編譯器外掛程式對 K2 的支援處於 <a href="/zh-Hant/kotlin/components-stability#stability-levels-explained">Alpha</a> 階段。若要使用它， 請<a href="#how-to-enable-the-kotlin-k2-compiler">啟用 Kotlin K2 編譯器</a>。</p></div><p>從 1.8.20 開始，序列化編譯器外掛程式與 Kotlin K2 編譯器協同工作。請試用並<a href="#leave-your-feedback-on-the-new-k2-compiler">與我們分享您的意見回饋</a>！</p><h3 id="禁止透過伴隨物件隱式自訂序列化器" tabindex="-1">禁止透過伴隨物件隱式自訂序列化器 <a class="header-anchor" href="#禁止透過伴隨物件隱式自訂序列化器" aria-label="Permalink to &quot;禁止透過伴隨物件隱式自訂序列化器&quot;">​</a></h3><p>目前，可以透過 <code>@Serializable</code> 標註將類別宣告為可序列化，同時在伴隨物件上透過 <code>@Serializer</code> 標註宣告自訂序列化器。</p><p>例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.serialization.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Serializable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @Serializer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Foo::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    companion</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Custom implementation of KSerializer&lt;Foo&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在這種情況下，從 <code>@Serializable</code> 標註中不清楚使用了哪個序列化器。實際上，<code>Foo</code> 類別具有一個自訂序列化器。</p><p>為防止此類混淆，在 Kotlin 1.8.20 中，我們針對檢測到此情境時引入了編譯器警告。該警告包含解決此問題的可能遷移路徑。</p><p>如果您在程式碼中使用此類建構，我們建議您更新為以下形式：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.serialization.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Serializable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Foo.Companion::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Doesn&#39;t matter if you use @Serializer(Foo::class) or not</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    companion</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KSerializer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Custom implementation of KSerializer&lt;Foo&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>透過這種方法，很清楚 <code>Foo</code> 類別使用伴隨物件中宣告的自訂序列化器。有關更多資訊，請參閱我們的 <a href="https://youtrack.jetbrains.com/issue/KT-54441" target="_blank" rel="noreferrer">YouTrack 票證</a>。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>在 Kotlin 2.0 中，我們計劃將此編譯警告升級為編譯錯誤。我們建議 如果您看到此警告，請遷移您的程式碼。</p></div><h2 id="文件更新" tabindex="-1">文件更新 <a class="header-anchor" href="#文件更新" aria-label="Permalink to &quot;文件更新&quot;">​</a></h2><p>Kotlin 文件已獲得一些值得注意的變更：</p><ul><li><a href="/zh-Hant/kotlin/jvm-get-started-spring-boot">Spring Boot 和 Kotlin 入門</a> – 建立一個帶有資料庫的簡單應用程式，並了解更多關於 Spring Boot 和 Kotlin 的功能。</li><li><a href="/zh-Hant/kotlin/scope-functions">作用域函式</a> – 學習如何使用標準函式庫中有用的作用域函式來簡化您的程式碼。</li><li><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-cocoapods-overview.html" target="_blank" rel="noreferrer">CocoaPods 整合</a> – 設定與 CocoaPods 協同工作的環境。</li></ul><h2 id="安裝-kotlin-1-8-20" tabindex="-1">安裝 Kotlin 1.8.20 <a class="header-anchor" href="#安裝-kotlin-1-8-20" aria-label="Permalink to &quot;安裝 Kotlin 1.8.20&quot;">​</a></h2><h3 id="檢查-ide-版本" tabindex="-1">檢查 IDE 版本 <a class="header-anchor" href="#檢查-ide-版本" aria-label="Permalink to &quot;檢查 IDE 版本&quot;">​</a></h3><p><a href="https://www.jetbrains.com/idea/download/" target="_blank" rel="noreferrer">IntelliJ IDEA</a> 2022.2 和 2022.3 會自動建議將 Kotlin 外掛程式更新到版本 1.8.20。IntelliJ IDEA 2023.1 內建 Kotlin 外掛程式 1.8.20。</p><p>Android Studio Flamingo (222) 和 Giraffe (223) 將在下一個版本中支援 Kotlin 1.8.20。</p><p>新的命令列編譯器可在 <a href="https://github.com/JetBrains/kotlin/releases/tag/v1.8.20" target="_blank" rel="noreferrer">GitHub 發布頁面</a> 下載。</p><h3 id="配置-gradle-設定" tabindex="-1">配置 Gradle 設定 <a class="header-anchor" href="#配置-gradle-設定" aria-label="Permalink to &quot;配置 Gradle 設定&quot;">​</a></h3><p>為了正確下載 Kotlin 構件和依賴項，請更新您的 <code>settings.gradle(.kts)</code> 檔案以使用 Maven Central 儲存庫：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pluginManagement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    repositories</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        mavenCentral</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        gradlePluginPortal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>如果未指定儲存庫，Gradle 將使用已停用的 JCenter 儲存庫，這可能導致 Kotlin 構件相關問題。</p>`,29))])}const D=E(y,[["render",u]]);export{K as __pageData,D as default};
