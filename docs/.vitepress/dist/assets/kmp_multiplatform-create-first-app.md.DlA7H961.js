import{_ as o,a as r,d as h,e as d,b as k,c}from"./chunks/ios-new-configuration.DNF7jnri.js";import{_ as g}from"./chunks/icon-3-todo.aEuKIG4W.js";import{_ as m}from"./chunks/icon-4-todo.DqbNYzPe.js";import{_ as u}from"./chunks/icon-5-todo.DJgVODZv.js";import{_ as E,a as y,b as F,c as f,d as b,e as A}from"./chunks/first-multiplatform-project-on-ios-1.Baa1gGHA.js";import{_ as v,C as e,c as C,o as D,j as i,G as l,ag as t,a,w as _}from"./chunks/framework.Bksy39di.js";const N=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"kmp/multiplatform-create-first-app.md","filePath":"kmp/multiplatform-create-first-app.md","lastUpdated":1755516278000}'),P={name:"kmp/multiplatform-create-first-app.md"};function I(S,s,B,x,K,M){const n=e("secondary-label"),p=e("tldr");return D(),C("div",null,[s[1]||(s[1]=i("h1",{id:"创建你的-kotlin-multiplatform-应用程序",tabindex:"-1"},[a("创建你的 Kotlin Multiplatform 应用程序 "),i("a",{class:"header-anchor",href:"#创建你的-kotlin-multiplatform-应用程序","aria-label":'Permalink to "创建你的 Kotlin Multiplatform 应用程序"'},"​")],-1)),l(n,{ref:"IntelliJ IDEA"},null,512),l(n,{ref:"Android Studio"},null,512),l(p,null,{default:_(()=>s[0]||(s[0]=[i("p",null,"本教程使用 IntelliJ IDEA，但你也可以在 Android Studio 中跟随操作——这两个 IDE 都共享相同的核心功能和 Kotlin Multiplatform 支持。",-1),i("br",null,null,-1),i("p",null,[a("这是“"),i("strong",null,"使用共享逻辑和原生 UI 创建 Kotlin Multiplatform 应用"),a("”教程的第一部分。")],-1),i("p",null,[i("img",{src:o,width:"20",alt:"第一步"}),a(),i("strong",null,"创建你的 Kotlin Multiplatform 应用程序"),i("br"),i("img",{src:r,width:"20",alt:"第二步"}),a(" 更新用户界面"),i("br"),i("img",{src:g,width:"20",alt:"第三步"}),a(" 添加依赖项"),i("br"),i("br"),i("img",{src:m,width:"20",alt:"第四步"}),a(" 共享更多逻辑"),i("br"),i("img",{src:u,width:"20",alt:"第五步"}),a(" 总结你的项目"),i("br")],-1)])),_:1}),s[2]||(s[2]=t('<p>在这里，你将学习如何使用 IntelliJ IDEA 创建并运行你的第一个 Kotlin Multiplatform 应用程序。</p><p>Kotlin Multiplatform 技术简化了跨平台项目的开发。Kotlin Multiplatform 应用程序可以在多种平台上运行，例如 iOS、Android、macOS、Windows、Linux、Web 等。</p><p>Kotlin Multiplatform 的主要用例之一是在移动平台之间共享代码。你可以在 iOS 和 Android 应用之间共享应用程序逻辑，并且只在需要实现原生 UI 或使用平台 API 时才编写平台特有的代码。</p><h2 id="创建项目" tabindex="-1">创建项目 <a class="header-anchor" href="#创建项目" aria-label="Permalink to &quot;创建项目&quot;">​</a></h2><ol><li><p>在<a href="./quickstart">快速入门</a>中，完成<a href="./quickstart#set-up-the-environment">设置 Kotlin Multiplatform 开发环境</a>的说明。</p></li><li><p>在 IntelliJ IDEA 中，选择 <strong>File</strong> | <strong>New</strong> | <strong>Project</strong>。</p></li><li><p>在左侧面板中，选择 <strong>Kotlin Multiplatform</strong>。</p></li><li><p>在<strong>新建项目</strong>窗口中指定以下字段：</p><ul><li><strong>名称</strong>：GreetingKMP</li><li><strong>组</strong>：com.jetbrains.greeting</li><li><strong>Artifact</strong>：greetingkmp</li></ul><p><img src="'+E+'" alt="创建 Compose Multiplatform 项目" width="800"></p></li><li><p>选择 <strong>Android</strong> 和 <strong>iOS</strong> 目标平台。</p></li><li><p>对于 iOS，选择<strong>不共享 UI</strong> 选项以保持 UI 原生。</p></li><li><p>指定所有字段和目标平台后，点击 <strong>Create</strong>。</p></li></ol><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>IntelliJ IDEA 可能会自动建议将项目中的 Android Gradle 插件升级到最新版本。 我们不建议升级，因为 Kotlin Multiplatform 与最新的 AGP 版本不兼容 (关于兼容性，请参见<a href="https://kotlinlang.org/docs/multiplatform-compatibility-guide.html#version-compatibility" target="_blank" rel="noreferrer">兼容性表</a>)。</p></div><h2 id="检查项目结构" tabindex="-1">检查项目结构 <a class="header-anchor" href="#检查项目结构" aria-label="Permalink to &quot;检查项目结构&quot;">​</a></h2><p>在 IntelliJ IDEA 中，展开 <code>GreetingKMP</code> 文件夹。</p><p>这个 Kotlin Multiplatform 项目包含三个模块：</p><ul><li><em>shared</em> 是一个 Kotlin 模块，包含 Android 和 iOS 应用程序共用的逻辑——你可以在平台之间共享的代码。它使用 <a href="https://kotlinlang.org/docs/gradle.html" target="_blank" rel="noreferrer">Gradle</a> 作为构建系统来帮助自动化你的构建过程。</li><li><em>composeApp</em> 是一个 Kotlin 模块，可构建为一个 Android 应用程序。它使用 Gradle 作为构建系统。composeApp 模块依赖于 shared 模块并将其作为常规 Android 库使用。</li><li><em>iosApp</em> 是一个 Xcode 项目，可构建为一个 iOS 应用程序。它依赖于 shared 模块并将其作为 iOS framework 使用。shared 模块可以作为常规 framework 或 <a href="./multiplatform-cocoapods-overview">CocoaPods 依赖项</a>使用。默认情况下，在 IntelliJ IDEA 中创建的 Kotlin Multiplatform 项目使用常规 framework 依赖项。</li></ul><p><img src="'+y+'" alt="基本 Multiplatform 项目结构" width="700"></p><p>shared 模块包含三个源代码集：<code>androidMain</code>、<code>commonMain</code> 和 <code>iosMain</code>。_源代码集_是 Gradle 的一个概念，指一组逻辑上组合在一起的文件，每组都有自己的依赖项。在 Kotlin Multiplatform 中，shared 模块中的不同源代码集可以面向不同的平台。</p><p>common 源代码集包含共享的 Kotlin 代码，平台源代码集则使用每个目标平台特有的 Kotlin 代码。<code>androidMain</code> 使用 Kotlin/JVM，<code>iosMain</code> 使用 Kotlin/Native：</p><p><img src="'+F+'" alt="源代码集和模块结构" width="350"></p><p>当 shared 模块构建为一个 Android 库时，common Kotlin 代码被视为 Kotlin/JVM。当它构建为一个 iOS framework 时，common Kotlin 被视为 Kotlin/Native：</p><p><img src="'+f+`" alt="Common Kotlin、Kotlin/JVM 和 Kotlin/Native"></p><h3 id="编写通用声明" tabindex="-1">编写通用声明 <a class="header-anchor" href="#编写通用声明" aria-label="Permalink to &quot;编写通用声明&quot;">​</a></h3><p>common 源代码集包含可在多个目标平台使用的共享代码。它旨在包含平台无关的代码。如果你尝试在 common 源代码集中使用平台特有的 API，IDE 将显示警告：</p><ol><li><p>打开 <code>shared/src/commonMain/kotlin/com/jetbrains/greeting/greetingkmp/Greeting.kt</code> 文件，你可以在其中找到自动生成的 <code>Greeting</code> 类以及 <code>greet()</code> 函数：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Greeting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> platform </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello, \${platform.name}!&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>为问候语增加一些变化。从 Kotlin 标准库导入 <code>kotlin.random.Random</code>。这是一个可在所有平台上工作并自动作为依赖项包含的多平台库。</p></li><li><p>使用 Kotlin 标准库中的 <code>reversed()</code> 调用更新共享代码以反转文本：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.random.Random</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Greeting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> platform: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> firstWord </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Random.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nextBoolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hi!&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> else</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello!&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$firstWord</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Guess what this is! &gt; \${platform.name.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reversed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">()}!&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ol><p>仅在 common Kotlin 中编写代码具有明显的局限性，因为它无法使用任何平台特有的功能。使用接口和 <a href="./multiplatform-connect-to-apis">expect/actual</a> 机制可以解决此问题。</p><h3 id="查看平台特有实现" tabindex="-1">查看平台特有实现 <a class="header-anchor" href="#查看平台特有实现" aria-label="Permalink to &quot;查看平台特有实现&quot;">​</a></h3><p>common 源代码集可以定义预期声明（接口、类等）。然后，每个平台源代码集，在此示例中是 <code>androidMain</code> 和 <code>iosMain</code>，都必须为预期声明提供实际的平台特有实现。</p><p>在为特定平台生成代码时，Kotlin 编译器会合并预期声明和实际声明，并生成一个带有实际实现的单一声明。</p><ol><li><p>使用 IntelliJ IDEA 创建 Kotlin Multiplatform 项目时，你会在 <code>commonMain</code> 模块中得到一个包含 <code>Platform.kt</code> 文件的模板：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Platform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这是一个通用 <code>Platform</code> 接口，包含有关平台的信息。</p></li><li><p>在 <code>androidMain</code> 和 <code>iosMain</code> 模块之间切换。你会看到它们为 Android 和 iOS 源代码集提供了相同功能的不同实现：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Platform.android.kt in the androidMain module:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> android.os.Build</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AndroidPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Android \${Build.VERSION.SDK_INT}&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Platform.ios.kt in the iosMain module:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> platform.UIKit.UIDevice</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IOSPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        UIDevice.currentDevice.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot; &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UIDevice.currentDevice.systemVersion</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><code>AndroidPlatform</code> 中的 <code>name</code> 属性实现使用了 Android 特有的代码，即 <code>android.os.Build</code> 依赖项。这段代码是用 Kotlin/JVM 编写的。如果你尝试在此处访问 JVM 特有的类（例如 <code>java.util.Random</code>），这段代码将编译。</li><li><code>IOSPlatform</code> 中的 <code>name</code> 属性实现使用了 iOS 特有的代码，即 <code>platform.UIKit.UIDevice</code> 依赖项。它用 Kotlin/Native 编写，这意味着你可以用 Kotlin 编写 iOS 代码。这段代码成为 iOS framework 的一部分，你稍后将在 iOS 应用程序中从 Swift 调用它。</li></ul></li><li><p>检查不同源代码集中的 <code>getPlatform()</code> 函数。它的预期声明没有函数体，实际实现是在平台代码中提供的：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Platform.kt in the commonMain source set</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Platform.android.kt in the androidMain source set</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AndroidPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Platform.ios.kt in the iosMain source set</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Platform</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IOSPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div></li></ol><p>在这里，common 源代码集定义了一个预期 <code>getPlatform()</code> 函数，并在平台源代码集中为 Android 应用提供了 <code>AndroidPlatform()</code> 实际实现，为 iOS 应用提供了 <code>IOSPlatform()</code> 实际实现。</p><p>在为特定平台生成代码时，Kotlin 编译器会将预期声明和实际声明合并为一个带有实际实现的 <code>getPlatform()</code> 函数。</p><p>这就是为什么预期声明和实际声明应该在同一个包中定义——它们在生成的平台代码中合并为一个声明。在生成的平台代码中对预期 <code>getPlatform()</code> 函数的任何调用都会调用正确的实际实现。</p><p>现在你可以运行这些应用程序，并查看这一切的实际效果。</p>`,28)),s[3]||(s[3]=i("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"探索-expect-actual-机制-可选",tabindex:"-1"},[a("探索 expect/actual 机制（可选） "),i("a",{class:"header-anchor",href:"#探索-expect-actual-机制-可选","aria-label":'Permalink to "探索 expect/actual 机制（可选） {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),s[4]||(s[4]=t(`<p>模板项目对函数使用了 expect/actual 机制，但它也适用于大多数 Kotlin 声明，例如属性和类。我们来尝试实现一个预期属性：</p><ol><li><p>打开 <code>commonMain</code> 模块中的 <code>Platform.kt</code>，并在文件末尾添加以下内容：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span></span></code></pre></div><p>Kotlin 编译器会报错说此属性在平台模块中没有对应的实际声明。</p></li><li><p>尝试立即提供实现：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 42</span></span></code></pre></div><p>你会收到一个错误，提示预期声明不得有函数体，在此示例中是初始化器。实现必须在实际平台模块中提供。移除初始化器。</p></li><li><p>将鼠标悬停在 <code>num</code> 属性上并点击 <strong>Create missed actuals...</strong>。选择 <code>androidMain</code> 源代码集。然后你可以在 <code>androidMain/Platform.android.kt</code> 中完成实现：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span></code></pre></div></li><li><p>现在为 <code>iosMain</code> 模块提供实现。将以下内容添加到 <code>iosMain/Platform.ios.kt</code>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span></code></pre></div></li><li><p>在 <code>commonMain/Greeting.kt</code> 文件中，将 <code>num</code> 属性添加到 <code>greet()</code> 函数中以查看差异：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> firstWord </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Random.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nextBoolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hi!&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> else</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello!&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$firstWord</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$num</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">] Guess what this is! &gt; \${platform.name.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reversed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">()}!&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ol><h2 id="运行你的应用程序" tabindex="-1">运行你的应用程序 <a class="header-anchor" href="#运行你的应用程序" aria-label="Permalink to &quot;运行你的应用程序&quot;">​</a></h2><p>你可以从 IntelliJ IDEA 运行你的多平台应用程序，支持 <a href="#run-your-application-on-android">Android</a> 或 <a href="#run-your-application-on-ios">iOS</a>。</p><p>如果你之前探索了 expect/actual 机制，你会看到 Android 的问候语中添加了“[1]”，iOS 的问候语中添加了“[2]”。</p><h3 id="在-android-上运行你的应用程序" tabindex="-1">在 Android 上运行你的应用程序 <a class="header-anchor" href="#在-android-上运行你的应用程序" aria-label="Permalink to &quot;在 Android 上运行你的应用程序&quot;">​</a></h3><ol><li><p>在运行配置列表中，选择 <strong>composeApp</strong>。</p></li><li><p>在配置列表旁边选择一个 Android 虚拟设备，然后点击 <strong>Run</strong>。</p><p>如果列表中没有设备，请创建<a href="https://developer.android.com/studio/run/managing-avds#createavd" target="_blank" rel="noreferrer">一个新的 Android 虚拟设备</a>。</p><p><img src="`+h+'" alt="在 Android 上运行多平台应用程序" width="350"></p><p><img src="'+b+'" alt="Android 上的第一个移动多平台应用程序" width="300"></p></li></ol>',7)),s[5]||(s[5]=i("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"在不同的-android-模拟设备上运行",tabindex:"-1"},[a("在不同的 Android 模拟设备上运行 "),i("a",{class:"header-anchor",href:"#在不同的-android-模拟设备上运行","aria-label":'Permalink to "在不同的 Android 模拟设备上运行 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),s[6]||(s[6]=i("p",null,[a("了解如何"),i("a",{href:"https://developer.android.com/studio/run/emulator#runningapp",target:"_blank",rel:"noreferrer"},"配置 Android 模拟器并在不同的模拟设备上运行你的应用程序"),a("。")],-1)),s[7]||(s[7]=i("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"在真实的-android-设备上运行",tabindex:"-1"},[a("在真实的 Android 设备上运行 "),i("a",{class:"header-anchor",href:"#在真实的-android-设备上运行","aria-label":'Permalink to "在真实的 Android 设备上运行 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),s[8]||(s[8]=t('<p>了解如何<a href="https://developer.android.com/studio/run/device" target="_blank" rel="noreferrer">配置并连接硬件设备并在其上运行你的应用程序</a>。</p><h3 id="在-ios-上运行你的应用程序" tabindex="-1">在 iOS 上运行你的应用程序 <a class="header-anchor" href="#在-ios-上运行你的应用程序" aria-label="Permalink to &quot;在 iOS 上运行你的应用程序&quot;">​</a></h3><p>如果你尚未在初始设置中启动 Xcode，请在运行 iOS 应用之前执行此操作。</p><p>在 IntelliJ IDEA 中，在运行配置列表中选择 <strong>iosApp</strong>，在运行配置旁边选择一个模拟设备，然后点击 <strong>Run</strong>。</p><p>如果列表中没有可用的 iOS 配置，请添加<a href="#run-on-a-new-ios-simulated-device">一个新的运行配置</a>。</p><p><img src="'+d+'" alt="在 iOS 上运行多平台应用程序" width="350"></p><p><img src="'+A+'" alt="iOS 上的第一个移动多平台应用程序" width="300"></p>',7)),s[9]||(s[9]=i("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"在新的-ios-模拟设备上运行",tabindex:"-1"},[a("在新的 iOS 模拟设备上运行 "),i("a",{class:"header-anchor",href:"#在新的-ios-模拟设备上运行","aria-label":'Permalink to "在新的 iOS 模拟设备上运行 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),s[10]||(s[10]=t('<p>如果你想在模拟设备上运行你的应用程序，你可以添加一个新的运行配置。</p><ol><li><p>在运行配置列表中，点击 <strong>Edit Configurations</strong>。</p><p><img src="'+k+'" alt="编辑运行配置" width="450"></p></li><li><p>点击配置列表上方的 <strong>+</strong> 按钮，然后选择 <strong>Xcode Application</strong>。</p><p><img src="'+c+'" alt="iOS 应用程序的新运行配置"></p></li><li><p>命名你的配置。</p></li><li><p>选择<strong>工作目录</strong>。为此，导航到你的项目，例如 <strong>KotlinMultiplatformSandbox</strong>，在 <code>iosApp</code> 文件夹中。</p></li><li><p>点击 <strong>Run</strong> 在新的模拟设备上运行你的应用程序。</p></li></ol>',2)),s[11]||(s[11]=i("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"在真实的-ios-设备上运行",tabindex:"-1"},[a("在真实的 iOS 设备上运行 "),i("a",{class:"header-anchor",href:"#在真实的-ios-设备上运行","aria-label":'Permalink to "在真实的 iOS 设备上运行 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),s[12]||(s[12]=t(`<p>你可以在真实的 iOS 设备上运行你的多平台应用程序。在开始之前，你需要设置与你的 <a href="https://support.apple.com/en-us/HT204316" target="_blank" rel="noreferrer">Apple ID</a> 相关联的团队 ID。</p><h5 id="设置你的团队-id" tabindex="-1">设置你的团队 ID <a class="header-anchor" href="#设置你的团队-id" aria-label="Permalink to &quot;设置你的团队 ID&quot;">​</a></h5><p>要在你的项目中设置团队 ID，你可以使用 IntelliJ IDEA 中的 KDoctor 工具，或者在 Xcode 中选择你的团队。</p><p>对于 KDoctor：</p><ol><li><p>在 IntelliJ IDEA 中，在终端中运行以下命令：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kdoctor --team-ids</span></span></code></pre></div><p>KDoctor 将列出当前在你的系统上配置的所有团队 ID，例如：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>3ABC246XYZ (Max Sample)</span></span>
<span class="line"><span>ZABCW6SXYZ (SampleTech Inc.)</span></span></code></pre></div></li><li><p>在 IntelliJ IDEA 中，打开 <code>iosApp/Configuration/Config.xcconfig</code> 并指定你的团队 ID。</p></li></ol><p>或者，在 Xcode 中选择团队：</p><ol><li><p>转到 Xcode 并选择 <strong>Open a project or file</strong>。</p></li><li><p>导航到你项目中的 <code>iosApp/iosApp.xcworkspace</code> 文件。</p></li><li><p>在左侧菜单中，选择 <code>iosApp</code>。</p></li><li><p>导航到 <strong>Signing &amp; Capabilities</strong>。</p></li><li><p>在<strong>团队</strong>列表中，选择你的团队。</p><p>如果你尚未设置你的团队，请在<strong>团队</strong>列表中使用<strong>添加账户</strong>选项并遵循 Xcode 说明。</p></li><li><p>确保 Bundle Identifier 是唯一的，并且 Signing Certificate 已成功分配。</p></li></ol><h5 id="运行应用程序" tabindex="-1">运行应用程序 <a class="header-anchor" href="#运行应用程序" aria-label="Permalink to &quot;运行应用程序&quot;">​</a></h5><p>用数据线连接你的 iPhone。如果你已在 Xcode 中注册该设备，IntelliJ IDEA 应该会在运行配置列表中显示它。运行对应的 <code>iosApp</code> 配置。</p><p>如果你尚未在 Xcode 中注册你的 iPhone，请遵循 <a href="https://developer.apple.com/documentation/xcode/running-your-app-in-simulator-or-on-a-device/" target="_blank" rel="noreferrer">Apple 建议</a>。简而言之，你应该：</p><ol><li>用数据线连接你的 iPhone。</li><li>在你的 iPhone 上，在 <strong>Settings</strong> | <strong>Privacy &amp; Security</strong> 中启用开发者模式。</li><li>在 Xcode 中，转到顶部菜单并选择 <strong>Window</strong> | <strong>Devices and Simulators</strong>。</li><li>点击加号。选择你连接的 iPhone 并点击 <strong>Add</strong>。</li><li>使用你的 Apple ID 登录以在设备上启用开发能力。</li><li>遵循屏幕上的说明以完成配对过程。</li></ol><p>一旦你在 Xcode 中注册了你的 iPhone，在 IntelliJ IDEA 中<a href="#run-on-a-new-ios-simulated-device">创建一个新的运行配置</a>并在<strong>执行目标</strong>列表中选择你的设备。运行对应的 <code>iosApp</code> 配置。</p><h2 id="下一步" tabindex="-1">下一步 <a class="header-anchor" href="#下一步" aria-label="Permalink to &quot;下一步&quot;">​</a></h2><p>在教程的下一部分中，你将学习如何使用平台特有的库更新 UI 元素。</p><p><strong><a href="./multiplatform-update-ui">继续到下一部分</a></strong></p><h3 id="另请参见" tabindex="-1">另请参见 <a class="header-anchor" href="#另请参见" aria-label="Permalink to &quot;另请参见&quot;">​</a></h3><ul><li>了解如何<a href="./multiplatform-run-tests">创建并运行多平台测试</a>以检测代码是否正常工作。</li><li>了解更多关于<a href="./multiplatform-discover-project">项目结构</a>的信息。</li><li>如果你想将你现有的 Android 项目转换为跨平台应用程序，请<a href="./multiplatform-integrate-in-existing-app">完成本教程以使你的 Android 应用跨平台</a>。</li></ul><h2 id="获取帮助" tabindex="-1">获取帮助 <a class="header-anchor" href="#获取帮助" aria-label="Permalink to &quot;获取帮助&quot;">​</a></h2><ul><li><strong>Kotlin Slack</strong>。获取<a href="https://surveys.jetbrains.com/s3/kotlin-slack-sign-up" target="_blank" rel="noreferrer">邀请</a>并加入 <a href="https://kotlinlang.slack.com/archives/C3PQML5NU" target="_blank" rel="noreferrer">#multiplatform</a> 频道。</li><li><strong>Kotlin 问题跟踪器</strong>。<a href="https://youtrack.jetbrains.com/newIssue?project=KT" target="_blank" rel="noreferrer">报告新问题</a>。</li></ul>`,19))])}const G=v(P,[["render",I]]);export{N as __pageData,G as default};
