import{_ as i,a,b as t}from"./chunks/browser-console-output.ORKOEfuB.js";import{_ as n,c as l,o as e,ag as p}from"./chunks/framework.Bksy39di.js";const u=JSON.parse('{"title":"執行 Kotlin/JS","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/running-kotlin-js.md","filePath":"zh-Hant/kotlin/running-kotlin-js.md","lastUpdated":1754307826000}'),h={name:"zh-Hant/kotlin/running-kotlin-js.md"};function k(o,s,d,r,E,g){return e(),l("div",null,s[0]||(s[0]=[p(`<h1 id="執行-kotlin-js" tabindex="-1">執行 Kotlin/JS <a class="header-anchor" href="#執行-kotlin-js" aria-label="Permalink to &quot;執行 Kotlin/JS&quot;">​</a></h1><p>由於 Kotlin/JS 專案是透過 Kotlin Multiplatform Gradle 插件管理的，因此您可以使用適當的任務來執行您的專案。如果您是從空白專案開始，請確保您有一些可執行的範例程式碼。請建立 <code>src/jsMain/kotlin/App.kt</code> 檔案，並填入一段小型的「Hello, World」類型程式碼片段：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, Kotlin/JS!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>根據目標平台的選擇，首次執行程式碼可能需要一些平台特定的額外設定。</p><h2 id="執行-node-js-目標" tabindex="-1">執行 Node.js 目標 <a class="header-anchor" href="#執行-node-js-目標" aria-label="Permalink to &quot;執行 Node.js 目標&quot;">​</a></h2><p>當 Kotlin/JS 以 Node.js 為目標時，您只需執行 <code>jsNodeDevelopmentRun</code> Gradle 任務即可。例如，您可以使用 Gradle 包裝器透過命令列來執行此操作：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jsNodeDevelopmentRun</span></span></code></pre></div><p>如果您使用 IntelliJ IDEA，您可以在 Gradle 工具視窗中找到 <code>jsNodeDevelopmentRun</code> 動作：</p><p><img src="`+i+'" alt="Gradle Run task in IntelliJ IDEA" width="700"></p><p>首次啟動時，<code>kotlin.multiplatform</code> Gradle 插件將下載所有必需的依賴項，以使您能夠順利啟動。建置完成後，程式將被執行，您可以在終端機中看到日誌輸出：</p><p><img src="'+a+`" alt="Executing the JS target in a Kotlin Multiplatform project in IntelliJ IDEA" width="700"></p><h2 id="執行瀏覽器目標" tabindex="-1">執行瀏覽器目標 <a class="header-anchor" href="#執行瀏覽器目標" aria-label="Permalink to &quot;執行瀏覽器目標&quot;">​</a></h2><p>當以瀏覽器為目標時，您的專案需要有一個 HTML 頁面。當您開發應用程式時，此頁面將由開發伺服器提供服務，並應嵌入您編譯後的 Kotlin/JS 檔案。請建立並填寫 HTML 檔案 <code>/src/jsMain/resources/index.html</code>：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;!</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">DOCTYPE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;en&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> charset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;UTF-8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;JS Client&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;js-tutorial.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>預設情況下，您的專案所產生的構件（透過 webpack 建立）需要引用的名稱就是您的專案名稱（在此範例中為 <code>js-tutorial</code>）。如果您將專案命名為 <code>followAlong</code>，請務必嵌入 <code>followAlong.js</code> 而不是 <code>js-tutorial.js</code>。</p><p>完成這些調整後，請啟動整合式開發伺服器。您可以透過 Gradle 包裝器從命令列執行此操作：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jsBrowserDevelopmentRun</span></span></code></pre></div><p>從 IntelliJ IDEA 操作時，您可以在 Gradle 工具視窗中找到 <code>jsBrowserDevelopmentRun</code> 動作。</p><p>專案建置完成後，內嵌的 <code>webpack-dev-server</code> 將開始運行，並會開啟一個（看似空白的）瀏覽器視窗，指向您先前指定的 HTML 檔案。為驗證您的程式是否正確運行，請開啟瀏覽器的開發者工具（例如，透過右鍵點擊並選擇「<em>檢查</em>」動作）。在開發者工具內部，導覽至主控台，您可以在其中看到執行 JavaScript 程式碼的結果：</p><p><img src="`+t+'" alt="Console output in browser developer tools" width="700"></p><p>透過此設定，您可以在每次程式碼變更後重新編譯專案以查看您的變更。Kotlin/JS 也支援一種更方便的方式，可以在您開發應用程式時自動重新建置。要了解如何設定此 <em>持續模式</em>，請查閱 <a href="/zh-Hant/kotlin/dev-server-continuous-compilation">相關教學課程</a>。</p>',21)]))}const m=n(h,[["render",k]]);export{u as __pageData,m as default};
