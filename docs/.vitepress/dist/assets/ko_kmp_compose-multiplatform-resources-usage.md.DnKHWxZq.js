import{_ as E}from"./chunks/compose-resources-android-webview.1cP4Ejca.js";import{_ as d,C as k,c as o,o as g,j as s,G as n,ag as h,a,w as t}from"./chunks/framework.Bksy39di.js";const D=JSON.parse('{"title":"앱에서 멀티플랫폼 리소스 사용하기","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kmp/compose-multiplatform-resources-usage.md","filePath":"ko/kmp/compose-multiplatform-resources-usage.md","lastUpdated":1755516278000}'),y={name:"ko/kmp/compose-multiplatform-resources-usage.md"};function c(F,i,u,m,C,B){const p=k("show-structure"),l=k("TabItem"),e=k("Tabs"),r=k("secondary-label");return g(),o("div",null,[i[8]||(i[8]=s("h1",{id:"앱에서-멀티플랫폼-리소스-사용하기",tabindex:"-1"},[a("앱에서 멀티플랫폼 리소스 사용하기 "),s("a",{class:"header-anchor",href:"#앱에서-멀티플랫폼-리소스-사용하기","aria-label":'Permalink to "앱에서 멀티플랫폼 리소스 사용하기"'},"​")],-1)),n(p,{depth:"2"}),i[9]||(i[9]=h(`<p><a href="./compose-multiplatform-resources-setup">프로젝트에 리소스를 설정</a>한 후, 프로젝트를 빌드하여 리소스에 접근하는 데 사용되는 특별한 <code>Res</code> 클래스를 생성합니다. <code>Res</code> 클래스와 모든 리소스 접근자를 재생성하려면 프로젝트를 다시 빌드하거나 IDE에서 프로젝트를 다시 임포트하세요.</p><p>그 후, 생성된 클래스를 사용하여 코드 또는 외부 라이브러리에서 구성된 멀티플랫폼 리소스에 접근할 수 있습니다.</p><h2 id="생성된-클래스-임포트하기" tabindex="-1">생성된 클래스 임포트하기 <a class="header-anchor" href="#생성된-클래스-임포트하기" aria-label="Permalink to &quot;생성된 클래스 임포트하기&quot;">​</a></h2><p>준비된 리소스를 사용하려면 생성된 클래스를 임포트합니다. 예를 들면 다음과 같습니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> project.composeapp.generated.resources.Res</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> project.composeapp.generated.resources.example_image</span></span></code></pre></div><p>여기서:</p><ul><li><code>project</code>는 프로젝트 이름입니다.</li><li><code>composeapp</code>은 리소스 디렉터리를 배치한 모듈입니다.</li><li><code>Res</code>는 생성된 클래스의 기본 이름입니다.</li><li><code>example_image</code>는 <code>composeResources/drawable</code> 디렉터리에 있는 이미지 파일의 이름입니다(예: <code>example_image.png</code>).</li></ul><h2 id="접근자-클래스-생성-사용자-지정" tabindex="-1">접근자 클래스 생성 사용자 지정 <a class="header-anchor" href="#접근자-클래스-생성-사용자-지정" aria-label="Permalink to &quot;접근자 클래스 생성 사용자 지정&quot;">​</a></h2><p>Gradle 설정을 사용하여 필요에 맞게 생성된 <code>Res</code> 클래스를 사용자 지정할 수 있습니다.</p><p><code>build.gradle.kts</code> 파일의 <code>compose.resources {}</code> 블록에서 프로젝트의 <code>Res</code> 클래스 생성 방식에 영향을 미치는 여러 설정을 지정할 수 있습니다. 다음은 구성 예시입니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compose.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resources</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    publicResClass </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    packageOfResClass </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;me.sample.library.resources&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    generateResClass </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> auto</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><code>publicResClass</code>를 <code>true</code>로 설정하면 생성된 <code>Res</code> 클래스가 public이 됩니다. 기본적으로 생성된 클래스는 <a href="https://kotlinlang.org/docs/visibility-modifiers.html" target="_blank" rel="noreferrer">internal</a>(내부)입니다.</li><li><code>packageOfResClass</code>를 사용하면 생성된 <code>Res</code> 클래스를 특정 패키지에 할당할 수 있습니다 (코드 내 접근 및 최종 아티팩트 내 격리를 위해). 기본적으로 Compose Multiplatform은 <code>{group name}.{module name}.generated.resources</code> 패키지를 클래스에 할당합니다.</li><li><code>generateResClass</code>를 <code>always</code>로 설정하면 프로젝트가 무조건 <code>Res</code> 클래스를 생성합니다. 이는 리소스 라이브러리가 전이적으로만 사용 가능할 때 유용할 수 있습니다. 기본적으로 Compose Multiplatform은 <code>auto</code> 값을 사용하여 현재 프로젝트에 리소스 라이브러리에 대한 명시적인 <code>implementation</code> 또는 <code>api</code> 종속성이 있는 경우에만 <code>Res</code> 클래스를 생성합니다.</li></ul><h2 id="리소스-사용" tabindex="-1">리소스 사용 <a class="header-anchor" href="#리소스-사용" aria-label="Permalink to &quot;리소스 사용&quot;">​</a></h2><h3 id="이미지" tabindex="-1">이미지 <a class="header-anchor" href="#이미지" aria-label="Permalink to &quot;이미지&quot;">​</a></h3><p>드로어블 리소스는 간단한 이미지, 래스터화된 이미지 또는 XML 벡터로 접근할 수 있습니다. SVG 이미지는 Android를 <strong>제외한</strong> 모든 플랫폼에서 지원됩니다.</p><ul><li>드로어블 리소스를 <code>Painter</code> 이미지로 접근하려면 <code>painterResource()</code> 함수를 사용하세요:</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Composable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> painterResource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(resource: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DrawableResource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Painter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.}</span></span></code></pre></div><p><code>painterResource()</code> 함수는 리소스 경로를 취하고 <code>Painter</code> 값을 반환합니다. 이 함수는 웹을 제외한 모든 타겟에서 동기적으로 작동합니다. 웹 타겟의 경우, 첫 번째 리컴포지션에서는 빈 <code>Painter</code>를 반환하며, 이후의 리컴포지션에서 로드된 이미지로 대체됩니다.</p><ul><li><p><code>painterResource()</code>는 <code>.png</code>, <code>.jpg</code>, <code>.bmp</code>, <code>.webp</code>와 같은 래스터화된 이미지 형식의 경우 <code>BitmapPainter</code>를 로드하거나, Android XML 벡터 드로어블 형식의 경우 <code>VectorPainter</code>를 로드합니다.</p></li><li><p>XML 벡터 드로어블은 <a href="https://developer.android.com/reference/android/graphics/drawable/VectorDrawable" target="_blank" rel="noreferrer">Android</a>와 동일한 형식을 가지지만, Android 리소스에 대한 외부 참조는 지원하지 않습니다.</p></li><li><p>드로어블 리소스를 <code>ImageBitmap</code> 래스터화된 이미지로 접근하려면 <code>imageResource()</code> 함수를 사용하세요:</p></li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Composable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> imageResource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(resource: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DrawableResource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ImageBitmap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.}</span></span></code></pre></div><ul><li>드로어블 리소스를 <code>ImageVector</code> XML 벡터로 접근하려면 <code>vectorResource()</code> 함수를 사용하세요:</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Composable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> vectorResource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(resource: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DrawableResource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ImageVector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.}</span></span></code></pre></div><p>다음은 Compose Multiplatform 코드에서 이미지에 접근하는 방법의 예시입니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    painter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> painterResource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Res.drawable.my_icon),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    contentDescription </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="문자열" tabindex="-1">문자열 <a class="header-anchor" href="#문자열" aria-label="Permalink to &quot;문자열&quot;">​</a></h3><p>모든 문자열 리소스를 <code>composeResources/values</code> 디렉터리의 XML 파일에 저장하세요. 각 파일의 각 항목에 대해 정적 접근자가 생성됩니다.</p><p>다른 로케일에 대한 문자열을 지역화하는 방법에 대한 자세한 내용은 <a href="./compose-localize-strings">문자열 지역화 가이드</a>를 참조하세요.</p><h4 id="단순-문자열" tabindex="-1">단순 문자열 <a class="header-anchor" href="#단순-문자열" aria-label="Permalink to &quot;단순 문자열&quot;">​</a></h4><p>단순 문자열을 저장하려면 XML에 <code>&lt;string&gt;</code> 요소를 추가하세요:</p><div class="language-XML vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">XML</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">resources</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;app_name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;My awesome app&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;title&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Some title&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">resources</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>문자열 리소스를 <code>String</code>으로 가져오려면 다음 코드를 사용하세요:</p>`,31)),n(e,null,{default:t(()=>[n(l,{title:"컴포저블 코드에서"},{default:t(()=>i[0]||(i[0]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"@Composable")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"fun"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," stringResource"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(resource: "),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"StringResource"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"): "),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"String"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},".."),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},".}")]),a(`
`),s("span",{class:"line"}),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"@Composable")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"fun"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," stringResource"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(resource: "),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"StringResource"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"vararg"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," formatArgs: "),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"Any"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"): "),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"String"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},".."),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},".}")])])])],-1),s("p",null,"예를 들어:",-1),s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"Text"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"stringResource"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(Res.string.app_name))")])])])],-1)])),_:1}),n(l,{title:"비컴포저블 코드에서"},{default:t(()=>i[1]||(i[1]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"suspend"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," fun"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," getString"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(resource: "),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"StringResource"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"): "),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"String")]),a(`
`),s("span",{class:"line"}),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"suspend"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," fun"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," getString"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(resource: "),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"StringResource"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"vararg"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," formatArgs: "),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"Any"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"): "),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"String")])])])],-1),s("p",null,"예를 들어:",-1),s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"coroutineScope."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"launch"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"    val"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," appName "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," getString"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(Res.string.app_name)")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),i[10]||(i[10]=h(`<p>문자열 리소스에 특수 기호를 사용할 수 있습니다:</p><ul><li><code></code> – 새 줄</li><li><code>\\t</code> – 탭 기호</li><li><code>\\uXXXX</code> – 특정 유니코드 문자</li></ul><p><a href="https://developer.android.com/guide/topics/resources/string-resource#escaping_quotes" target="_blank" rel="noreferrer">Android 문자열</a>에서처럼 &quot;@&quot; 또는 &quot;?&quot;와 같은 특수 XML 문자를 이스케이프할 필요가 없습니다.</p><h4 id="문자열-템플릿" tabindex="-1">문자열 템플릿 <a class="header-anchor" href="#문자열-템플릿" aria-label="Permalink to &quot;문자열 템플릿&quot;">​</a></h4><p>현재 인수는 문자열 리소스에 대한 기본 지원을 제공합니다. 템플릿을 생성할 때, <code>%&lt;number&gt;</code> 형식을 사용하여 문자열 내에 인수를 배치하고 <code>$d</code> 또는 <code>$s</code> 접미사를 포함하여 변수 플레이스홀더이며 단순 텍스트가 아님을 나타내세요. 예를 들면:</p><div class="language-XML vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">XML</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">resources</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;str_template&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Hello, %2$s! You have %1$d new messages.&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">resources</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>문자열 템플릿 리소스를 생성하고 임포트한 후, 플레이스홀더에 대한 인수를 올바른 순서로 전달하면서 참조할 수 있습니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringResource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Res.string.str_template, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;User_name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><p><code>$s</code>와 <code>$d</code> 접미사 사이에는 차이가 없으며 다른 접미사는 지원되지 않습니다. 리소스 문자열에 <code>%1$s</code> 플레이스홀더를 넣고 이를 사용하여 예를 들어 소수점을 표시할 수 있습니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringResource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Res.string.str_template, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;User_name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100.1f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><h4 id="문자열-배열" tabindex="-1">문자열 배열 <a class="header-anchor" href="#문자열-배열" aria-label="Permalink to &quot;문자열 배열&quot;">​</a></h4><p>관련 문자열을 배열로 그룹화하고 <code>List&lt;String&gt;</code> 객체로 자동 접근할 수 있습니다:</p><div class="language-XML vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">XML</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">resources</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;app_name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;My awesome app&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;title&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Some title&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">string-array</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;str_arr&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;item \\u2605&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;item \\u2318&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;item \\u00BD&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">string-array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">resources</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>해당 목록을 얻으려면 다음 코드를 사용하세요:</p>`,14)),n(e,null,{default:t(()=>[n(l,{title:"컴포저블 코드에서"},{default:t(()=>i[2]||(i[2]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"@Composable")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"fun"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," stringArrayResource"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(resource: "),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"StringArrayResource"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"): "),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"List"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"String"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"> {"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},".."),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},".}")])])])],-1),s("p",null,"예를 들어:",-1),s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"val"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," arr "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," stringArrayResource"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(Res.array.str_arr)")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"if"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," (arr."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"isNotEmpty"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()) "),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"Text"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(arr["),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"0"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"])")])])])],-1)])),_:1}),n(l,{title:"비컴포저블 코드에서"},{default:t(()=>i[3]||(i[3]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"suspend"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," fun"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," getStringArray"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(resource: "),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"StringArrayResource"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"): "),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"List"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"String"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},">")])])])],-1),s("p",null,"예를 들어:",-1),s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"coroutineScope."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"launch"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"    val"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," appName "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," getStringArray"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(Res.array.str_arr)")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),i[11]||(i[11]=h(`<h4 id="복수형" tabindex="-1">복수형 <a class="header-anchor" href="#복수형" aria-label="Permalink to &quot;복수형&quot;">​</a></h4><p>UI가 어떤 것의 수량을 표시할 때, 동일한 것의 다른 수(하나의 <em>책</em>, 많은 <em>책</em> 등)에 대한 문법적 일치를 프로그램적으로 관련 없는 문자열을 만들지 않고 지원하고 싶을 수 있습니다.</p><p>Compose Multiplatform의 개념과 기본 구현은 Android의 수량 문자열과 동일합니다. 프로젝트에서 복수형을 사용하는 모범 사례 및 뉘앙스에 대한 자세한 내용은 <a href="https://developer.android.com/guide/topics/resources/string-resource#Plurals" target="_blank" rel="noreferrer">Android 문서</a>를 참조하세요.</p><ul><li>지원되는 변형은 <code>zero</code>, <code>one</code>, <code>two</code>, <code>few</code>, <code>many</code>, <code>other</code>입니다. 모든 언어에서 모든 변형이 고려되는 것은 아닙니다. 예를 들어, 영어에서는 <code>zero</code>가 1을 제외한 다른 복수형과 같기 때문에 무시됩니다. 언어가 실제로 주장하는 구별을 알기 위해 언어 전문가에게 의존하세요.</li><li>&quot;Books: 1&quot;과 같이 수량 중립적인 표현을 사용함으로써 수량 문자열을 피할 수 있는 경우가 많습니다. 이것이 사용자 경험을 악화시키지 않는다면,</li></ul><p>복수형을 정의하려면 <code>composeResources/values</code> 디렉터리의 모든 <code>.xml</code> 파일에 <code>&lt;plurals&gt;</code> 요소를 추가하세요. <code>plurals</code> 컬렉션은 name 속성을 사용하여 참조되는 단순 리소스입니다 (XML 파일의 이름이 아님). 따라서 <code>plurals</code> 리소스를 <code>&lt;resources&gt;</code> 요소 아래의 하나의 XML 파일에 다른 단순 리소스와 결합할 수 있습니다:</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">resources</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;app_name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;My awesome app&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;title&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Some title&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">plurals</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;new_message&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">item</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> quantity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;one&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;%1$d new message&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">item</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> quantity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;other&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;%1$d new messages&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">item</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">plurals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">resources</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>복수형을 <code>String</code>으로 접근하려면 다음 코드를 사용하세요:</p>`,7)),n(e,null,{default:t(()=>[n(l,{title:"컴포저블 코드에서"},{default:t(()=>i[4]||(i[4]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"@Composable")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"fun"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," pluralStringResource"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(resource: "),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"PluralStringResource"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", quantity: "),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"Int"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"): "),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"String"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},".."),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},".}")]),a(`
`),s("span",{class:"line"}),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"@Composable")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"fun"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," pluralStringResource"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(resource: "),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"PluralStringResource"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", quantity: "),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"Int"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"vararg"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," formatArgs: "),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"Any"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"): "),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"String"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},".."),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},".}")])])])],-1),s("p",null,"예를 들어:",-1),s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"Text"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"pluralStringResource"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(Res.plurals.new_message, "),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"1"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"1"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"))")])])])],-1)])),_:1}),n(l,{title:"비컴포저블 코드에서"},{default:t(()=>i[5]||(i[5]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"suspend"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," fun"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," getPluralString"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(resource: "),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"PluralStringResource"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", quantity: "),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"Int"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"): "),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"String")]),a(`
`),s("span",{class:"line"}),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"suspend"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," fun"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," getPluralString"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(resource: "),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"PluralStringResource"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", quantity: "),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"Int"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"vararg"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," formatArgs: "),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"Any"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"): "),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"String")])])])],-1),s("p",null,"예를 들어:",-1),s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"coroutineScope."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"launch"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"    val"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," appName "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," getPluralString"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(Res.plurals.new_message, "),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"1"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"1"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),i[12]||(i[12]=h(`<h3 id="글꼴" tabindex="-1">글꼴 <a class="header-anchor" href="#글꼴" aria-label="Permalink to &quot;글꼴&quot;">​</a></h3><p>사용자 지정 글꼴은 <code>composeResources/font</code> 디렉터리에 <code>*.ttf</code> 또는 <code>*.otf</code> 파일로 저장하세요.</p><p>글꼴을 <code>Font</code> 타입으로 로드하려면 <code>Font()</code> 컴포저블 함수를 사용하세요:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Composable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Font</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    resource: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FontResource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    weight: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FontWeight</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FontWeight.Normal,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    style: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FontStyle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FontStyle.Normal</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Font</span></span></code></pre></div><p>예를 들어:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Composable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> InterTypography</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Typography</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> interFont </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FontFamily</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        Font</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Res.font.Inter_24pt_Regular, FontWeight.Normal),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        Font</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Res.font.Inter_24pt_SemiBold, FontWeight.Bold),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MaterialTheme.typography) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        copy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            displayLarge </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> displayLarge.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">copy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fontFamily </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> interFont, fontWeight </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FontWeight.Bold),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            displayMedium </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> displayMedium.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">copy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fontFamily </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> interFont, fontWeight </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FontWeight.Bold),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            displaySmall </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> displaySmall.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">copy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fontFamily </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> interFont, fontWeight </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FontWeight.Bold),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            headlineLarge </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> headlineLarge.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">copy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fontFamily </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> interFont, fontWeight </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FontWeight.Bold),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            headlineMedium </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> headlineMedium.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">copy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fontFamily </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> interFont, fontWeight </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FontWeight.Bold),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            headlineSmall </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> headlineSmall.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">copy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fontFamily </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> interFont, fontWeight </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FontWeight.Bold),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            titleLarge </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> titleLarge.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">copy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fontFamily </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> interFont, fontWeight </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FontWeight.Bold),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            titleMedium </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> titleMedium.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">copy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fontFamily </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> interFont, fontWeight </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FontWeight.Bold),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            titleSmall </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> titleSmall.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">copy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fontFamily </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> interFont, fontWeight </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FontWeight.Bold),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            labelLarge </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> labelLarge.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">copy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fontFamily </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> interFont, fontWeight </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FontWeight.Normal),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            labelMedium </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> labelMedium.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">copy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fontFamily </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> interFont, fontWeight </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FontWeight.Normal),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            labelSmall </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> labelSmall.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">copy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fontFamily </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> interFont, fontWeight </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FontWeight.Normal),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            bodyLarge </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bodyLarge.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">copy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fontFamily </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> interFont, fontWeight </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FontWeight.Normal),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            bodyMedium </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bodyMedium.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">copy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fontFamily </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> interFont, fontWeight </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FontWeight.Normal),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            bodySmall </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bodySmall.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">copy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fontFamily </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> interFont, fontWeight </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FontWeight.Normal),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p><code>Font</code>가 컴포저블일 때, <code>TextStyle</code> 및 <code>Typography</code>와 같은 종속 컴포넌트도 컴포저블인지 확인하세요.</p></div><p>웹 타겟에서 이모티콘이나 아랍어 스크립트와 같은 특수 문자를 지원하려면 해당 글꼴을 리소스에 추가하고 <a href="#preload-resources-using-the-compose-multiplatform-preload-api">Compose Multiplatform preload API를 사용하여 리소스 사전 로드</a>해야 합니다.</p><h3 id="원시-파일" tabindex="-1">원시 파일 <a class="header-anchor" href="#원시-파일" aria-label="Permalink to &quot;원시 파일&quot;">​</a></h3><p>모든 원시 파일을 바이트 배열로 로드하려면 <code>Res.readBytes(path)</code> 함수를 사용하세요:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">suspend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> readBytes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(path: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ByteArray</span></span></code></pre></div><p>원시 파일을 <code>composeResources/files</code> 디렉터리에 배치하고 그 안에 어떤 계층 구조라도 만들 수 있습니다.</p><p>예를 들어, 원시 파일에 접근하려면 다음 코드를 사용하세요:</p>`,13)),n(e,null,{default:t(()=>[n(l,{title:"컴포저블 코드에서"},{default:t(()=>i[6]||(i[6]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"var"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," bytes "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"by"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," remember"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    mutableStateOf"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"ByteArray"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"0"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"))")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"LaunchedEffect"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(Unit) {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    bytes "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," Res."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"readBytes"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"files/myDir/someFile.bin"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"Text"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(bytes."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"decodeToString"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"())")])])])],-1)])),_:1}),n(l,{title:"비컴포저블 코드에서"},{default:t(()=>i[7]||(i[7]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"coroutineScope."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"launch"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"    val"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," bytes "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," Res."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"readBytes"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"files/myDir/someFile.bin"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),i[13]||(i[13]=h(`<h4 id="바이트-배열을-이미지로-변환하기" tabindex="-1">바이트 배열을 이미지로 변환하기 <a class="header-anchor" href="#바이트-배열을-이미지로-변환하기" aria-label="Permalink to &quot;바이트 배열을 이미지로 변환하기&quot;">​</a></h4><p>읽고 있는 파일이 비트맵(JPEG, PNG, BMP, WEBP) 또는 XML 벡터 이미지인 경우, 다음 함수를 사용하여 <code>Image()</code> 컴포저블에 적합한 <code>ImageBitmap</code> 또는 <code>ImageVector</code> 객체로 변환할 수 있습니다.</p><p><a href="#raw-files">원시 파일</a> 섹션에 표시된 대로 원시 파일에 접근한 다음, 결과를 컴포저블에 전달합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// bytes = Res.readBytes(&quot;files/example.png&quot;)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(bytes.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">decodeToImageBitmap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// bytes = Res.readBytes(&quot;files/example.xml&quot;)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(bytes.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">decodeToImageVector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(LocalDensity.current), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Android를 제외한 모든 플랫폼에서는 SVG 파일을 <code>Painter</code> 객체로 변환할 수도 있습니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// bytes = Res.readBytes(&quot;files/example.svg&quot;)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(bytes.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">decodeToSvgPainter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(LocalDensity.current), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="리소스-및-문자열-id를-위한-생성된-맵" tabindex="-1">리소스 및 문자열 ID를 위한 생성된 맵 <a class="header-anchor" href="#리소스-및-문자열-id를-위한-생성된-맵" aria-label="Permalink to &quot;리소스 및 문자열 ID를 위한 생성된 맵&quot;">​</a></h3><p>쉽게 접근할 수 있도록 Compose Multiplatform은 문자열 ID를 사용하여 리소스도 매핑합니다. 파일 이름을 키로 사용하여 접근할 수 있습니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Res.allDrawableResources: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DrawableResource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Res.allStringResources: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">StringResource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Res.allStringArrayResources: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">StringArrayResource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Res.allPluralStringResources: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PluralStringResource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Res.allFontResources: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FontResource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>매핑된 리소스를 컴포저블에 전달하는 예시:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">painterResource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Res.allDrawableResources[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;compose_multiplatform&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="android-애셋으로서의-compose-multiplatform-리소스" tabindex="-1">Android 애셋으로서의 Compose Multiplatform 리소스 <a class="header-anchor" href="#android-애셋으로서의-compose-multiplatform-리소스" aria-label="Permalink to &quot;Android 애셋으로서의 Compose Multiplatform 리소스&quot;">​</a></h3><p>Compose Multiplatform 1.7.0부터 모든 멀티플랫폼 리소스는 Android 애셋으로 패키징됩니다. 이를 통해 Android Studio는 Android 소스 세트의 Compose Multiplatform 컴포저블에 대한 미리보기를 생성할 수 있습니다.</p><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>Android Studio 미리보기는 Android 소스 세트의 컴포저블에만 사용할 수 있습니다. 또한 최신 AGP 버전 중 하나가 필요합니다: 8.5.2, 8.6.0-rc01 또는 8.7.0-alpha04.</p></div><p>멀티플랫폼 리소스를 Android 애셋으로 사용하면 Android의 WebView 및 미디어 플레이어 컴포넌트에서 직접 접근할 수 있습니다. 리소스는 <code>Res.getUri(&quot;files/index.html&quot;)</code>와 같은 간단한 경로로 접근할 수 있기 때문입니다.</p><p>링크된 리소스 이미지가 포함된 리소스 HTML 페이지를 표시하는 Android 컴포저블의 예시:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// androidMain/kotlin/com/example/webview/App.kt</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalResourceApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Composable</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Preview</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    MaterialTheme</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uri </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getUri</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;files/webview/index.html&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Adding a WebView inside AndroidView with layout as full screen.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        AndroidView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(factory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            WebView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(it).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                layoutParams </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ViewGroup.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LayoutParams</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    ViewGroup.LayoutParams.MATCH_PARENT,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    ViewGroup.LayoutParams.MATCH_PARENT</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }, update </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">loadUrl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(uri)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>이 예시는 다음 단순 HTML 파일과 함께 작동합니다:</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">header</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Cat Resource</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">header</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">img</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cat.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>이 예시의 두 리소스 파일은 모두 <code>commonMain</code> 소스 세트에 있습니다:</p><p><img src="`+E+'" alt="composeResources 디렉터리의 파일 구조" width="230"></p><h2 id="웹-타겟용-리소스-사전-로드" tabindex="-1">웹 타겟용 리소스 사전 로드 <a class="header-anchor" href="#웹-타겟용-리소스-사전-로드" aria-label="Permalink to &quot;웹 타겟용 리소스 사전 로드&quot;">​</a></h2><p>글꼴 및 이미지와 같은 웹 리소스는 <code>fetch</code> API를 사용하여 비동기적으로 로드됩니다. 초기 로드 중 또는 느린 네트워크 연결 시 리소스 페치(가져오기)로 인해 <a href="https://fonts.google.com/knowledge/glossary/fout" target="_blank" rel="noreferrer">FOUT</a>와 같은 시각적 결함이 발생하거나 이미지 대신 플레이스홀더가 표시될 수 있습니다.</p><p>이 문제의 전형적인 예시는 <code>Text()</code> 컴포넌트에 사용자 지정 글꼴로 텍스트가 포함되어 있지만, 필요한 글리프(glyph)가 포함된 글꼴이 아직 로드 중일 때입니다. 이 경우 사용자는 기본 글꼴로 텍스트를 일시적으로 보거나 문자 대신 빈 상자 또는 물음표를 볼 수도 있습니다. 마찬가지로 이미지 또는 드로어블의 경우, 리소스가 완전히 로드될 때까지 빈 상자 또는 검은색 상자와 같은 플레이스홀더를 관찰할 수 있습니다.</p><p>시각적 결함을 방지하려면 브라우저의 내장된 사전 로드 기능, Compose Multiplatform 사전 로드 API 또는 이 둘의 조합을 사용할 수 있습니다.</p><h3 id="브라우저-기능을-사용하여-리소스-사전-로드" tabindex="-1">브라우저 기능을 사용하여 리소스 사전 로드 <a class="header-anchor" href="#브라우저-기능을-사용하여-리소스-사전-로드" aria-label="Permalink to &quot;브라우저 기능을 사용하여 리소스 사전 로드&quot;">​</a></h3><p>최신 브라우저에서는 <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/rel/preload" target="_blank" rel="noreferrer"><code>rel=&quot;preload&quot;</code> 속성</a>이 있는 <code>&lt;link&gt;</code> 태그를 사용하여 리소스를 사전 로드할 수 있습니다. 이 속성은 애플리케이션이 시작하기 전에 글꼴 및 이미지와 같은 리소스를 우선적으로 다운로드하고 캐싱하도록 브라우저에 지시하여 이러한 리소스를 조기에 사용할 수 있도록 합니다.</p><p>예를 들어, 브라우저 내에서 글꼴을 사전 로드하는 것을 활성화하려면:</p><ol><li>애플리케이션의 웹 배포를 빌드합니다:</li></ol><div class="language-console vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">console</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">   ./gradlew :composeApp:wasmJsBrowserDistribution</span></span></code></pre></div><ol start="2"><li>생성된 <code>dist</code> 디렉터리에서 필요한 리소스를 찾아 경로를 저장합니다.</li><li><code>wasmJsMain/resources/index.html</code> 파일을 열고 <code>&lt;head&gt;</code> 요소 내에 <code>&lt;link&gt;</code> 태그를 추가합니다.</li><li><code>href</code> 속성을 리소스 경로로 설정합니다:</li></ol><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;preload&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./composeResources/username.composeapp.generated.resources/font/FiraMono-Regular.ttf&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;fetch&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;font/ttf&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> crossorigin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/&gt;</span></span></code></pre></div><h3 id="compose-multiplatform-사전-로드-api를-사용하여-리소스-사전-로드" tabindex="-1">Compose Multiplatform 사전 로드 API를 사용하여 리소스 사전 로드 <a class="header-anchor" href="#compose-multiplatform-사전-로드-api를-사용하여-리소스-사전-로드" aria-label="Permalink to &quot;Compose Multiplatform 사전 로드 API를 사용하여 리소스 사전 로드&quot;">​</a></h3>',33)),n(r,{ref:"Experimental"},null,512),i[14]||(i[14]=h(`<p>브라우저에서 리소스를 사전 로드하더라도, 리소스는 렌더링에 적합한 형식인 <code>FontResource</code> 및 <code>DrawableResource</code>로 변환되어야 하는 원시 바이트로 캐시됩니다. 애플리케이션이 리소스를 처음 요청할 때 변환이 비동기적으로 수행되어 다시 깜박임이 발생할 수 있습니다. 경험을 더욱 최적화하기 위해 Compose Multiplatform 리소스는 리소스의 상위 수준 표현을 위한 자체 내부 캐시를 가지며, 이 캐시도 사전 로드될 수 있습니다.</p><p>Compose Multiplatform 1.8.0은 웹 타겟에서 글꼴 및 이미지 리소스를 사전 로드하기 위한 실험적 API를 도입했습니다: <code>preloadFont()</code>, <code>preloadImageBitmap()</code>, <code>preloadImageVector()</code>.</p><p>또한 이모티콘과 같은 특수 문자가 필요한 경우 기본 번들 옵션과 다른 대체 글꼴을 설정할 수 있습니다. 대체 글꼴을 지정하려면 <code>FontFamily.Resolver.preload()</code> 메서드를 사용하세요.</p><p>다음 예시는 사전 로드 및 대체 글꼴 사용 방법을 보여줍니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> androidx.compose.foundation.background</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> androidx.compose.foundation.clickable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> androidx.compose.foundation.layout.Box</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> androidx.compose.foundation.layout.fillMaxSize</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> androidx.compose.material3.CircularProgressIndicator</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> androidx.compose.runtime.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> androidx.compose.ui.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> androidx.compose.ui.graphics.Color</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> androidx.compose.ui.platform.LocalFontFamilyResolver</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> androidx.compose.ui.text.font.FontFamily</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> androidx.compose.ui.text.font.FontStyle</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> androidx.compose.ui.text.font.FontWeight</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> androidx.compose.ui.window.CanvasBasedWindow</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> components.resources.demo.shared.generated.resources.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> components.resources.demo.shared.generated.resources.NotoColorEmoji</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> components.resources.demo.shared.generated.resources.Res</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> components.resources.demo.shared.generated.resources.Workbench_Regular</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> components.resources.demo.shared.generated.resources.font_awesome</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.compose.resources.ExperimentalResourceApi</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.compose.resources.configureWebResources</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.compose.resources.demo.shared.UseResources</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.compose.resources.preloadFont</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalComposeUiApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ExperimentalResourceApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, InternalComposeUiApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    configureWebResources</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Overrides the resource location</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        resourcePathMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;./</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$path</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    CanvasBasedWindow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Resources + K/Wasm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> font1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> preloadFont</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Res.font.Workbench_Regular)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> font2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> preloadFont</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Res.font.font_awesome, FontWeight.Normal, FontStyle.Normal)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> emojiFont </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> preloadFont</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Res.font.NotoColorEmoji).</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fontsFallbackInitialized </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> remember</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mutableStateOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Uses the preloaded resource for the app&#39;s content</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        UseResources</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (font1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> font2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> emojiFont </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fontsFallbackInitialized) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Fonts are ready&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // Displays the progress indicator to address a FOUT or the app being temporarily non-functional during loading</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            Box</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(modifier </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Modifier.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fillMaxSize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Color.White.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">copy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(alpha </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.8f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clickable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {  }) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                CircularProgressIndicator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(modifier </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Modifier.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">align</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Alignment.Center))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Fonts are not ready yet&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fontFamilyResolver </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LocalFontFamilyResolver.current</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        LaunchedEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fontFamilyResolver, emojiFont) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (emojiFont </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // Preloads a fallback font with emojis to render missing glyphs that are not supported by the bundled font</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                fontFamilyResolver.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">preload</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FontFamily</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(emojiFont)))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                fontsFallbackInitialized </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="다른-라이브러리-및-리소스와의-상호-작용" tabindex="-1">다른 라이브러리 및 리소스와의 상호 작용 <a class="header-anchor" href="#다른-라이브러리-및-리소스와의-상호-작용" aria-label="Permalink to &quot;다른 라이브러리 및 리소스와의 상호 작용&quot;">​</a></h2><h3 id="외부-라이브러리에서-멀티플랫폼-리소스-접근" tabindex="-1">외부 라이브러리에서 멀티플랫폼 리소스 접근 <a class="header-anchor" href="#외부-라이브러리에서-멀티플랫폼-리소스-접근" aria-label="Permalink to &quot;외부 라이브러리에서 멀티플랫폼 리소스 접근&quot;">​</a></h3><p>프로젝트에 포함된 다른 라이브러리를 사용하여 멀티플랫폼 리소스를 처리하려면 플랫폼별 파일 경로를 해당 API에 전달할 수 있습니다. 플랫폼별 경로를 얻으려면 <code>Res.getUri()</code> 함수를 리소스에 대한 프로젝트 경로와 함께 호출하세요:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uri </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getUri</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;files/my_video.mp4&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>이제 <code>uri</code> 변수에 파일의 절대 경로가 포함되므로, 모든 외부 라이브러리는 해당 경로를 사용하여 자신에게 적합한 방식으로 파일에 접근할 수 있습니다.</p><p>Android에 특화된 사용을 위해 멀티플랫폼 리소스는 <a href="#compose-multiplatform-resources-as-android-assets">Android 애셋으로도 패키징됩니다</a>.</p><h3 id="원격-파일" tabindex="-1">원격 파일 <a class="header-anchor" href="#원격-파일" aria-label="Permalink to &quot;원격 파일&quot;">​</a></h3><p>리소스 라이브러리의 맥락에서 애플리케이션의 일부인 파일만 리소스로 간주됩니다.</p><p>특수 라이브러리를 사용하여 인터넷에서 URL을 통해 원격 파일을 로드할 수 있습니다:</p><ul><li><a href="https://github.com/qdsfdhvh/compose-imageloader" target="_blank" rel="noreferrer">Compose ImageLoader</a></li><li><a href="https://github.com/Kamel-Media/Kamel" target="_blank" rel="noreferrer">Kamel</a></li><li><a href="https://ktor.io/" target="_blank" rel="noreferrer">Ktor client</a></li></ul><h3 id="java-리소스-사용" tabindex="-1">Java 리소스 사용 <a class="header-anchor" href="#java-리소스-사용" aria-label="Permalink to &quot;Java 리소스 사용&quot;">​</a></h3><p>Compose Multiplatform에서 Java 리소스를 사용할 수 있지만, 프레임워크에서 제공하는 확장 기능(생성된 접근자, 멀티모듈 지원, 지역화 등)의 이점을 얻을 수 없습니다. 해당 잠재력을 최대한 활용하려면 멀티플랫폼 리소스 라이브러리로 완전히 전환하는 것을 고려하세요.</p><p>Compose Multiplatform 1.7.0부터 <code>compose.ui</code> 패키지에서 사용할 수 있는 리소스 API는 더 이상 사용되지 않습니다. 여전히 Java 리소스로 작업해야 하는 경우, Compose Multiplatform 1.7.0 이상으로 업그레이드한 후에도 코드가 작동하도록 다음 구현을 프로젝트에 복사하세요:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Composable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">internal</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> painterResource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    resourcePath: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Painter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> when</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (resourcePath.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">substringAfterLast</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;svg&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rememberSvgResource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(resourcePath)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;xml&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rememberVectorXmlResource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(resourcePath)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rememberBitmapResource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(resourcePath)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Composable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">internal</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rememberBitmapResource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(path: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Painter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> remember</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(path) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BitmapPainter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readResourceBytes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(path).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">decodeToImageBitmap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Composable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">internal</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rememberVectorXmlResource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(path: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Painter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> density </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LocalDensity.current</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> imageVector </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> remember</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(density, path) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readResourceBytes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(path).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">decodeToImageVector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(density) }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rememberVectorPainter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(imageVector)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Composable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">internal</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rememberSvgResource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(path: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Painter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> density </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LocalDensity.current</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> remember</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(density, path) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readResourceBytes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(path).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">decodeToSvgPainter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(density) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ResourceLoader</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> readResourceBytes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(resourcePath: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ResourceLoader.javaClass.classLoader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getResourceAsStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(resourcePath).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readAllBytes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><h2 id="다음-단계는" tabindex="-1">다음 단계는? <a class="header-anchor" href="#다음-단계는" aria-label="Permalink to &quot;다음 단계는?&quot;">​</a></h2><ul><li>iOS, Android 및 데스크톱을 타겟팅하는 Compose Multiplatform 프로젝트에서 리소스를 처리하는 방법을 보여주는 공식 <a href="https://github.com/JetBrains/compose-multiplatform/tree/master/components/resources/demo" target="_blank" rel="noreferrer">데모 프로젝트</a>를 확인하세요.</li><li>앱 내 테마 및 언어와 같은 애플리케이션의 <a href="./compose-resource-environment">리소스 환경</a>을 관리하는 방법을 알아보세요.</li></ul>`,21))])}const v=d(y,[["render",c]]);export{D as __pageData,v as default};
