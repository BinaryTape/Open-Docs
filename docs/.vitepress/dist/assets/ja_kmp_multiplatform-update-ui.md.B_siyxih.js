import{_ as h}from"./chunks/icon-1-done.B5D6C9SU.js";import{_ as k}from"./chunks/icon-2.D_3lm1kb.js";import{_ as d}from"./chunks/icon-3-todo.aEuKIG4W.js";import{_ as o}from"./chunks/icon-4-todo.DqbNYzPe.js";import{_ as E}from"./chunks/icon-5-todo.DJgVODZv.js";import{_ as g,a as y}from"./chunks/first-multiplatform-project-on-ios-2.CLUQ81d4.js";import{_ as c,C as t,c as u,o as m,j as i,G as n,ag as F,a,w as e}from"./chunks/framework.Bksy39di.js";const U=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kmp/multiplatform-update-ui.md","filePath":"ja/kmp/multiplatform-update-ui.md","lastUpdated":1755516278000}'),f={name:"ja/kmp/multiplatform-update-ui.md"};function C(b,s,A,B,v,S){const l=t("secondary-label"),p=t("Links"),r=t("tldr");return m(),u("div",null,[s[21]||(s[21]=i("h1",{id:"ユーザーインターフェースを更新する",tabindex:"-1"},[a("ユーザーインターフェースを更新する "),i("a",{class:"header-anchor",href:"#ユーザーインターフェースを更新する","aria-label":'Permalink to "ユーザーインターフェースを更新する"'},"​")],-1)),n(l,{ref:"IntelliJ IDEA"},null,512),n(l,{ref:"Android Studio"},null,512),n(r,null,{default:e(()=>[s[18]||(s[18]=i("p",null,"このチュートリアルではIntelliJ IDEAを使用しますが、Android Studioでも同様に進めることができます。どちらのIDEもコア機能とKotlin Multiplatformのサポートを共有しています。",-1)),s[19]||(s[19]=i("br",null,null,-1)),s[20]||(s[20]=i("p",null,[a("これは「"),i("strong",null,"共有ロジックとネイティブUIを持つKotlin Multiplatformアプリを作成する"),a("」チュートリアルの第2部です。次に進む前に、前の手順を完了していることを確認してください。")],-1)),i("p",null,[s[1]||(s[1]=i("img",{src:h,width:"20",alt:"First step"},null,-1)),s[2]||(s[2]=a()),n(p,{href:"/kmp/multiplatform-create-first-app",summary:"このチュートリアルではIntelliJ IDEAを使用しますが、Android Studioでも同様に進めることができます。どちらのIDEもコア機能とKotlin Multiplatformのサポートを共有しています。これは「共有ロジックとネイティブUIを持つKotlin Multiplatformアプリを作成する」チュートリアルの第1部です。Kotlin Multiplatformアプリを作成する ユーザーインターフェースを更新する 依存関係を追加する ロジックをさらに共有する プロジェクトをまとめる"},{default:e(()=>s[0]||(s[0]=[a("Kotlin Multiplatformアプリを作成する")])),_:1}),s[3]||(s[3]=i("br",null,null,-1)),s[4]||(s[4]=i("img",{src:k,width:"20",alt:"Second step"},null,-1)),s[5]||(s[5]=a()),s[6]||(s[6]=i("strong",null,"ユーザーインターフェースを更新する",-1)),s[7]||(s[7]=i("br",null,null,-1)),s[8]||(s[8]=i("img",{src:d,width:"20",alt:"Third step"},null,-1)),s[9]||(s[9]=a(" 依存関係を追加する")),s[10]||(s[10]=i("br",null,null,-1)),s[11]||(s[11]=i("br",null,null,-1)),s[12]||(s[12]=i("img",{src:o,width:"20",alt:"Fourth step"},null,-1)),s[13]||(s[13]=a(" ロジックをさらに共有する")),s[14]||(s[14]=i("br",null,null,-1)),s[15]||(s[15]=i("img",{src:E,width:"20",alt:"Fifth step"},null,-1)),s[16]||(s[16]=a(" プロジェクトをまとめる")),s[17]||(s[17]=i("br",null,null,-1))])]),_:1}),s[22]||(s[22]=F(`<p>ユーザーインターフェースを構築するには、プロジェクトのAndroid部分には<a href="https://www.jetbrains.com/lp/compose-multiplatform/" target="_blank" rel="noreferrer">Compose Multiplatform</a>ツールキットを、iOS部分には<a href="https://developer.apple.com/xcode/swiftui/" target="_blank" rel="noreferrer">SwiftUI</a>を使用します。これらはどちらも宣言型UIフレームワークであり、UIの実装に類似点が見られます。どちらの場合も、データを<code>phrases</code>変数に格納し、後でそれを反復処理して<code>Text</code>アイテムのリストを生成します。</p><h2 id="android部分を更新する" tabindex="-1">Android部分を更新する <a class="header-anchor" href="#android部分を更新する" aria-label="Permalink to &quot;Android部分を更新する&quot;">​</a></h2><p><code>composeApp</code>モジュールにはAndroidアプリケーションが含まれており、そのメインアクティビティとUIビューを定義し、<code>shared</code>モジュールを通常のAndroidライブラリとして使用します。アプリケーションのUIはCompose Multiplatformフレームワークを使用しています。</p><p>いくつかの変更を加えて、それらがUIにどのように反映されるかを確認してください。</p><ol><li><p><code>composeApp/src/androidMain/kotlin</code>にある<code>App.kt</code>ファイルに移動します。</p></li><li><p><code>Greeting</code>クラスの呼び出しを見つけます。<code>greet()</code>関数を選択して右クリックし、<strong>Go To</strong> | <strong>Declaration or Usages</strong>を選択します。これは、前の手順で編集した<code>shared</code>モジュールと同じクラスであることがわかります。</p></li><li><p><code>Greeting.kt</code>ファイルで、<code>greet()</code>関数を更新します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.random.Random</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> buildList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Random.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nextBoolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hi!&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> else</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Guess what this is! &gt; \${platform.name.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reversed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">()}!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>これで文字列のリストを返します。</p></li><li><p><code>App.kt</code>ファイルに戻り、<code>App()</code>の実装を更新します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Composable</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Preview</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    MaterialTheme</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> greeting </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> remember</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Greeting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        Column</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            modifier </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Modifier</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">padding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(all </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.dp)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">safeContentPadding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fillMaxSize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            verticalArrangement </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Arrangement.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">spacedBy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.dp),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            greeting.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { greeting </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(greeting)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                HorizontalDivider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>ここでは、<code>Column</code>コンポーザブルが<code>Text</code>アイテムのそれぞれを表示し、それらの周りにパディングを、それらの間にスペースを追加します。</p></li><li><p>IntelliJ IDEAの提案に従って、不足している依存関係をインポートします。</p></li><li><p>これでAndroidアプリを実行して、文字列のリストがどのように表示されるかを確認できます。</p><p><img src="`+g+`" alt="Android Multiplatformアプリの更新されたUI" width="300"></p></li></ol><h2 id="iosモジュールを操作する" tabindex="-1">iOSモジュールを操作する <a class="header-anchor" href="#iosモジュールを操作する" aria-label="Permalink to &quot;iOSモジュールを操作する&quot;">​</a></h2><p><code>iosApp</code>ディレクトリはiOSアプリケーションとしてビルドされます。これは<code>shared</code>モジュールに依存し、それをiOSフレームワークとして使用します。アプリのUIはSwiftで記述されています。</p><p>Androidアプリと同様の変更を実装します。</p><ol><li><p>IntelliJ IDEAで、<strong>Project</strong>ツールウィンドウでプロジェクトのルートにある<code>iosApp</code>フォルダーを見つけます。</p></li><li><p><code>ContentView.swift</code>ファイルを開き、<code>Greeting().greet()</code>呼び出しを右クリックし、<strong>Go To</strong> | <strong>Definition</strong>を選択します。</p><p><code>shared</code>モジュールで定義されたKotlin関数のObjective-C宣言が表示されます。Kotlinの型は、Objective-C/Swiftから使用されるときにObjective-Cの型として表現されます。ここでは、<code>greet()</code>関数はKotlinでは<code>List&lt;String&gt;</code>を返し、Swiftからは<code>NSArray&lt;NSString&gt;</code>を返すものとして見なされます。型マッピングの詳細については、<a href="https://kotlinlang.org/docs/native-objc-interop.html" target="_blank" rel="noreferrer">Swift/Objective-Cとの相互運用</a>を参照してください。</p></li><li><p>Androidアプリと同様の方法でアイテムのリストを表示するようにSwiftUIコードを更新します。</p><div class="language-Swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ContentView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> phrases </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Greeting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">       List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(phrases, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: \\.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">           Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><code>greet()</code>呼び出しの結果は<code>phrases</code>変数に格納されます（Swiftの<code>let</code>はKotlinの<code>val</code>に似ています）。</li><li><code>List</code>関数は<code>Text</code>アイテムのリストを生成します。</li></ul></li><li><p>変更を確認するためにiOS実行構成を開始します。</p><p><img src="`+y+'" alt="iOS Multiplatformアプリの更新されたUI" width="300"></p></li></ol><h2 id="発生しうる問題と解決策" tabindex="-1">発生しうる問題と解決策 <a class="header-anchor" href="#発生しうる問題と解決策" aria-label="Permalink to &quot;発生しうる問題と解決策&quot;">​</a></h2><h3 id="共有フレームワークを呼び出すコードでxcodeがエラーを報告する場合" tabindex="-1">共有フレームワークを呼び出すコードでXcodeがエラーを報告する場合 <a class="header-anchor" href="#共有フレームワークを呼び出すコードでxcodeがエラーを報告する場合" aria-label="Permalink to &quot;共有フレームワークを呼び出すコードでXcodeがエラーを報告する場合&quot;">​</a></h3><p>Xcodeを使用している場合、Xcodeプロジェクトがまだ古いバージョンのフレームワークを使用している可能性があります。これを解決するには、IntelliJ IDEAに戻りプロジェクトを再ビルドするか、iOS実行構成を開始してください。</p><h3 id="共有フレームワークをインポートする際にxcodeがエラーを報告する場合" tabindex="-1">共有フレームワークをインポートする際にXcodeがエラーを報告する場合 <a class="header-anchor" href="#共有フレームワークをインポートする際にxcodeがエラーを報告する場合" aria-label="Permalink to &quot;共有フレームワークをインポートする際にXcodeがエラーを報告する場合&quot;">​</a></h3><p>Xcodeを使用している場合、キャッシュされたバイナリをクリアする必要があるかもしれません。メインメニューで<strong>Product | Clean Build Folder</strong>を選択して環境をリセットしてみてください。</p><h2 id="次のステップ" tabindex="-1">次のステップ <a class="header-anchor" href="#次のステップ" aria-label="Permalink to &quot;次のステップ&quot;">​</a></h2><p>チュートリアルの次のパートでは、依存関係について学び、サードパーティライブラリを追加してプロジェクトの機能を拡張します。</p><p><strong><a href="./multiplatform-dependencies">次のパートに進む</a></strong></p><h2 id="ヘルプ" tabindex="-1">ヘルプ <a class="header-anchor" href="#ヘルプ" aria-label="Permalink to &quot;ヘルプ&quot;">​</a></h2><ul><li><strong>Kotlin Slack</strong>。 <a href="https://surveys.jetbrains.com/s3/kotlin-slack-sign-up" target="_blank" rel="noreferrer">招待状を取得</a>して、<a href="https://kotlinlang.slack.com/archives/C3PQML5NU" target="_blank" rel="noreferrer">#multiplatform</a>チャンネルに参加してください。</li><li><strong>Kotlinイシュートラッカー</strong>。<a href="https://youtrack.jetbrains.com/newIssue?project=KT" target="_blank" rel="noreferrer">新しいイシューを報告する</a>。</li></ul>',19))])}const M=c(f,[["render",C]]);export{U as __pageData,M as default};
