import{_ as a,c as t,o,ag as l}from"./chunks/framework.Bksy39di.js";const m=JSON.parse('{"title":"Kotlin 適用於 AI 驅動的應用程式開發","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/kotlin-ai-apps-development-overview.md","filePath":"zh-Hant/kotlin/kotlin-ai-apps-development-overview.md","lastUpdated":1754307826000}'),r={name:"zh-Hant/kotlin/kotlin-ai-apps-development-overview.md"};function i(n,e,p,s,h,c){return o(),t("div",null,e[0]||(e[0]=[l('<h1 id="kotlin-適用於-ai-驅動的應用程式開發" tabindex="-1">Kotlin 適用於 AI 驅動的應用程式開發 <a class="header-anchor" href="#kotlin-適用於-ai-驅動的應用程式開發" aria-label="Permalink to &quot;Kotlin 適用於 AI 驅動的應用程式開發&quot;">​</a></h1><p>Kotlin 為建構 AI 驅動的應用程式提供了現代且務實的基礎。它可跨平台使用，與既有的 AI 框架良好整合，並支援常見的 AI 開發模式。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>本頁介紹了 Kotlin 如何應用於實際的 AI 情境，並附有來自 <a href="https://github.com/Kotlin/Kotlin-AI-Examples" target="_blank" rel="noreferrer">Kotlin-AI-Examples</a> 儲存庫的實作範例。</p></div><h2 id="kotlin-ai-代理式框架-–-koog" tabindex="-1">Kotlin AI 代理式框架 – Koog <a class="header-anchor" href="#kotlin-ai-代理式框架-–-koog" aria-label="Permalink to &quot;Kotlin AI 代理式框架 – Koog&quot;">​</a></h2><p><a href="https://koog.ai" target="_blank" rel="noreferrer">Koog</a> 是一個基於 Kotlin 的框架，用於在本地建立及執行 AI 代理程式，無需外部服務。Koog 是 JetBrains 創新、開源的代理式框架，讓開發者能夠在 JVM 生態系統中建構 AI 代理程式。它提供了純粹的 Kotlin 實作，用於建構可與工具互動、處理複雜工作流程並與使用者溝通的智慧代理程式。</p><h2 id="更多應用情境" tabindex="-1">更多應用情境 <a class="header-anchor" href="#更多應用情境" aria-label="Permalink to &quot;更多應用情境&quot;">​</a></h2><p>Kotlin 在 AI 開發方面還有許多其他應用情境。從將語言模型整合到後端服務，到建構 AI 驅動的使用者介面，這些範例都展示了 Kotlin 在各種 AI 應用程式中的多功能性。</p><h3 id="檢索增強生成" tabindex="-1">檢索增強生成 <a class="header-anchor" href="#檢索增強生成" aria-label="Permalink to &quot;檢索增強生成&quot;">​</a></h3><p>使用 Kotlin 建構檢索增強生成 (RAG) 管道，將語言模型連接到文件、向量儲存或 API 等外部來源。例如：</p><ul><li><a href="https://github.com/Kotlin/Kotlin-AI-Examples/tree/master/projects/spring-ai/springAI-demo" target="_blank" rel="noreferrer"><code>springAI-demo</code></a>: 一個 Spring Boot 應用程式，它將 Kotlin 標準函式庫文件載入到向量儲存中，並支援基於文件的問答。</li><li><a href="https://github.com/Kotlin/Kotlin-AI-Examples/tree/master/projects/langchain4j/langchain4j-spring-boot" target="_blank" rel="noreferrer"><code>langchain4j-spring-boot</code></a>: 一個使用 LangChain4j 的極簡 RAG 範例。</li></ul><h3 id="基於代理程式的應用程式" tabindex="-1">基於代理程式的應用程式 <a class="header-anchor" href="#基於代理程式的應用程式" aria-label="Permalink to &quot;基於代理程式的應用程式&quot;">​</a></h3><p>使用 Kotlin 建構 AI 代理程式，它們使用語言模型和工具進行推理、規劃和行動。例如：</p><ul><li><a href="https://github.com/JetBrains/koog" target="_blank" rel="noreferrer"><code>koog</code></a>: 展示了如何使用 Kotlin 代理式框架 Koog 建構 AI 代理程式。</li><li><a href="https://github.com/Kotlin/Kotlin-AI-Examples/tree/master/projects/langchain4j/langchain4j-spring-boot" target="_blank" rel="noreferrer"><code>langchain4j-spring-boot</code></a>: 包含一個使用 LangChain4j 建構的簡單工具使用代理程式。</li></ul><h3 id="思維鏈提示" tabindex="-1">思維鏈提示 <a class="header-anchor" href="#思維鏈提示" aria-label="Permalink to &quot;思維鏈提示&quot;">​</a></h3><p>實作結構化提示技術，引導語言模型進行多步驟推理。例如：</p><ul><li><a href="https://github.com/Kotlin/Kotlin-AI-Examples/blob/master/notebooks/langchain4j/LangChain4j_Overview.ipynb" target="_blank" rel="noreferrer"><code>LangChain4j_Overview.ipynb</code></a>: 一個 Kotlin 筆記本，展示了思維鏈和結構化輸出。</li></ul><h3 id="後端服務中的-llm" tabindex="-1">後端服務中的 LLM <a class="header-anchor" href="#後端服務中的-llm" aria-label="Permalink to &quot;後端服務中的 LLM&quot;">​</a></h3><p>使用 Kotlin 和 Spring 將 LLM 整合到業務邏輯或 REST API 中。例如：</p><ul><li><a href="https://github.com/Kotlin/Kotlin-AI-Examples/tree/master/projects/spring-ai/spring-ai-examples" target="_blank" rel="noreferrer"><code>spring-ai-examples</code></a>: 包含分類、聊天和摘要範例。</li><li><a href="https://github.com/Kotlin/Kotlin-AI-Examples/tree/master/projects/spring-ai/springAI-demo" target="_blank" rel="noreferrer"><code>springAI-demo</code></a>: 展示了 LLM 回應與應用程式邏輯的完整整合。</li></ul><h3 id="具備-ai-功能的多平台使用者介面" tabindex="-1">具備 AI 功能的多平台使用者介面 <a class="header-anchor" href="#具備-ai-功能的多平台使用者介面" aria-label="Permalink to &quot;具備 AI 功能的多平台使用者介面&quot;">​</a></h3><p>使用 Compose Multiplatform 以 Kotlin 建構互動式 AI 驅動的使用者介面。例如：</p><ul><li><a href="https://github.com/Kotlin/Kotlin-AI-Examples/tree/master/projects/mcp/mcp-demo" target="_blank" rel="noreferrer"><code>mcp-demo</code></a>: 一個連接到 Claude 和 OpenAI，並使用 Compose Multiplatform 呈現回應的桌面使用者介面。</li></ul><h2 id="探索範例" tabindex="-1">探索範例 <a class="header-anchor" href="#探索範例" aria-label="Permalink to &quot;探索範例&quot;">​</a></h2><p>您可以探索並執行來自 <a href="https://github.com/Kotlin/Kotlin-AI-Examples" target="_blank" rel="noreferrer">Kotlin-AI-Examples</a> 儲存庫的範例。每個專案都是獨立的。您可以將每個專案用作建構基於 Kotlin 的 AI 應用程式的參考或範本。</p><h2 id="接下來" tabindex="-1">接下來 <a class="header-anchor" href="#接下來" aria-label="Permalink to &quot;接下來&quot;">​</a></h2><ul><li>完成 <a href="/zh-Hant/kotlin/spring-ai-guide">建構一個 Kotlin 應用程式，它使用 Spring AI 回答基於儲存在 Qdrant 中的文件問題</a> 教學課程，以了解如何在 IntelliJ IDEA 中使用 Spring AI 與 Kotlin。</li><li>加入 <a href="https://kotlinlang.org/community/" target="_blank" rel="noreferrer">Kotlin 社群</a>，與其他使用 Kotlin 建構 AI 應用程式的開發者交流。</li></ul>',26)]))}const g=a(r,[["render",i]]);export{m as __pageData,g as default};
