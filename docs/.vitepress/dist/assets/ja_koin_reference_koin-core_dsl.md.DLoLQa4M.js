import{_ as a,c as e,o as s,ag as n}from"./chunks/framework.Bksy39di.js";const k=JSON.parse('{"title":"Koin DSL","description":"","frontmatter":{"title":"Koin DSL"},"headers":[],"relativePath":"ja/koin/reference/koin-core/dsl.md","filePath":"ja/koin/reference/koin-core/dsl.md","lastUpdated":1748365453000}'),o={name:"ja/koin/reference/koin-core/dsl.md"};function l(t,i,d,p,c,h){return s(),e("div",null,i[0]||(i[0]=[n(`<h1 id="koin-dsl" tabindex="-1">Koin DSL <a class="header-anchor" href="#koin-dsl" aria-label="Permalink to &quot;Koin DSL&quot;">​</a></h1><p>Kotlin言語の力のおかげで、Koinはアノテーションを付けたりコードを生成したりする代わりに、アプリを記述するのに役立つDSLを提供します。そのKotlin DSLにより、Koinは依存性注入の準備を実現するためのスマートな関数型APIを提供します。</p><h2 id="アプリケーション-モジュールdsl" tabindex="-1">アプリケーション &amp; モジュールDSL <a class="header-anchor" href="#アプリケーション-モジュールdsl" aria-label="Permalink to &quot;アプリケーション &amp; モジュールDSL&quot;">​</a></h2><p>Koinは、Koinアプリケーションの要素を記述するためのいくつかのキーワードを提供します。</p><ul><li>アプリケーションDSL：Koinコンテナの設定を記述します</li><li>モジュールDSL：注入する必要があるコンポーネントを記述します</li></ul><h2 id="アプリケーションdsl" tabindex="-1">アプリケーションDSL <a class="header-anchor" href="#アプリケーションdsl" aria-label="Permalink to &quot;アプリケーションDSL&quot;">​</a></h2><p><code>KoinApplication</code> インスタンスは、Koinコンテナインスタンスの設定です。これにより、ロギング、プロパティのロード、モジュールを設定できます。</p><p>新しい <code>KoinApplication</code> を構築するには、以下の関数を使用します。</p><ul><li><code>koinApplication { }</code> - <code>KoinApplication</code> コンテナ設定を作成します</li><li><code>startKoin { }</code> - <code>KoinApplication</code> コンテナ設定を作成し、<code>GlobalContext</code> に登録してGlobalContext APIの使用を可能にします</li></ul><p><code>KoinApplication</code> インスタンスを設定するには、以下のいずれかの関数を使用できます。</p><ul><li><code>logger( )</code> - 使用するレベルとLogger実装を記述します（デフォルトでは<code>EmptyLogger</code>を使用）</li><li><code>modules( )</code> - コンテナにロードするKoinモジュールのリストを設定します（リストまたは可変長引数リスト）</li><li><code>properties()</code> - <code>HashMap</code> のプロパティをKoinコンテナにロードします</li><li><code>fileProperties( )</code> - 指定されたファイルからプロパティをKoinコンテナにロードします</li><li><code>environmentProperties( )</code> - OS環境からプロパティをKoinコンテナにロードします</li><li><code>createEagerInstances()</code> - eagerインスタンス（<code>createdAtStart</code>とマークされた<code>Single</code>定義）を作成します</li></ul><h2 id="koinapplicationインスタンス-グローバル-vs-ローカル" tabindex="-1">KoinApplicationインスタンス：グローバル vs ローカル <a class="header-anchor" href="#koinapplicationインスタンス-グローバル-vs-ローカル" aria-label="Permalink to &quot;KoinApplicationインスタンス：グローバル vs ローカル&quot;">​</a></h2><p>上記のように、Koinコンテナ設定は<code>koinApplication</code>または<code>startKoin</code>関数の2つの方法で記述できます。</p><ul><li><code>koinApplication</code> はKoinコンテナインスタンスを記述します</li><li><code>startKoin</code> はKoinコンテナインスタンスを記述し、Koinの<code>GlobalContext</code>に登録します</li></ul><p>コンテナ設定を<code>GlobalContext</code>に登録することで、グローバルAPIはそれを直接使用できます。任意の<code>KoinComponent</code>は<code>Koin</code>インスタンスを参照します。デフォルトでは、<code>GlobalContext</code>からのインスタンスを使用します。</p><p>詳細については、カスタムKoinインスタンスに関する章を参照してください。</p><h2 id="koinの開始" tabindex="-1">Koinの開始 <a class="header-anchor" href="#koinの開始" aria-label="Permalink to &quot;Koinの開始&quot;">​</a></h2><p>Koinを開始するということは、<code>KoinApplication</code>インスタンスを<code>GlobalContext</code>で実行することを意味します。</p><p>モジュールを使用してKoinコンテナを開始するには、<code>startKoin</code>関数を次のように使用するだけです。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// KoinApplicationをグローバルコンテキストで開始</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startKoin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 使用するロガーを宣言</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    logger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 使用するモジュールを宣言</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    modules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(coffeeAppModule)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="モジュールdsl" tabindex="-1">モジュールDSL <a class="header-anchor" href="#モジュールdsl" aria-label="Permalink to &quot;モジュールDSL&quot;">​</a></h2><p>Koinモジュールは、アプリケーションに注入/結合する定義を収集します。新しいモジュールを作成するには、以下の関数を使用するだけです。</p><ul><li><code>module { // module content }</code> - Koinモジュールを作成します</li></ul><p>モジュール内でコンテンツを記述するには、以下の関数を使用できます。</p><ul><li><code>factory { //definition }</code> - ファクトリbean定義を提供します</li><li><code>single { //definition }</code> - シングルトンbean定義を提供します（<code>bean</code>としてもエイリアスされます）</li><li><code>get()</code> - コンポーネントの依存関係を解決します（名前、スコープ、またはパラメータも使用可能）</li><li><code>bind()</code> - 指定されたbean定義にバインドする型を追加します</li><li><code>binds()</code> - 指定されたbean定義に型の配列を追加します</li><li><code>scope { // scope group }</code> - <code>scoped</code>定義の論理グループを定義します</li><li><code>scoped { //definition }</code>- スコープ内でのみ存在するbean定義を提供します</li></ul><p>注: <code>named()</code> 関数を使用すると、文字列、Enum、または型によって修飾子を付与できます。これは定義に名前を付けるために使用されます。</p><h3 id="モジュールの作成" tabindex="-1">モジュールの作成 <a class="header-anchor" href="#モジュールの作成" aria-label="Permalink to &quot;モジュールの作成&quot;">​</a></h3><p>Koinモジュールは、<em>すべてのコンポーネントを宣言する場所</em>です。<code>module</code>関数を使用してKoinモジュールを宣言します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myModule </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // ここに依存関係を記述</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>このモジュールでは、以下に示すようにコンポーネントを宣言できます。</p><h3 id="withoptions-dslオプション-バージョン3-2以降" tabindex="-1">withOptions - DSLオプション (バージョン3.2以降) <a class="header-anchor" href="#withoptions-dslオプション-バージョン3-2以降" aria-label="Permalink to &quot;withOptions - DSLオプション (バージョン3.2以降)&quot;">​</a></h3><p>新しい<a href="/ja/koin/reference/koin-core/dsl-update">Constructor DSL</a>定義と同様に、<code>withOptions</code>オペレーターを使用して「通常の」定義に定義オプションを指定できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    single</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ClassA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) } </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        named</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;qualifier&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        createdAtStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>このオプションラムダ内で、以下のオプションを指定できます。</p><ul><li><code>named(&quot;a_qualifier&quot;)</code> - 定義に文字列修飾子を付与します</li><li><code>named&lt;MyType&gt;()</code> - 定義に型修飾子を付与します</li><li><code>bind&lt;MyInterface&gt;()</code> - 指定されたbean定義にバインドする型を追加します</li><li><code>binds(arrayOf(...))</code> - 指定されたbean定義に型の配列を追加します</li><li><code>createdAtStart()</code> - Koin開始時にシングルインスタンスを作成します</li></ul>`,35)]))}const E=a(o,[["render",l]]);export{k as __pageData,E as default};
