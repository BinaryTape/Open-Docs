import{_ as l}from"./chunks/gradle-console-rich-output.BeIOO7Zd.js";import{_ as p,C as e,c as h,o as k,ag as i,G as a,j as o}from"./chunks/framework.Bksy39di.js";const b=JSON.parse('{"title":"Kotlin 2.2.0 新特性","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/whatsnew22.md","filePath":"kotlin/whatsnew22.md","lastUpdated":1754307826000}'),r={name:"kotlin/whatsnew22.md"};function d(c,s,g,E,y,u){const t=e("YouTubeVideo"),n=e("TopicTitle");return k(),h("div",null,[s[0]||(s[0]=i('<h1 id="kotlin-2-2-0-新特性" tabindex="-1">Kotlin 2.2.0 新特性 <a class="header-anchor" href="#kotlin-2-2-0-新特性" aria-label="Permalink to &quot;Kotlin 2.2.0 新特性&quot;">​</a></h1><p><em><a href="/kotlin/releases#release-details">发布时间：2025 年 6 月 23 日</a></em></p><p>Kotlin 2.2.0 版本现已发布！以下是主要亮点：</p><ul><li><strong>语言</strong>：新增预览版语言特性，包括<a href="#preview-of-context-parameters">上下文形参</a>。一些<a href="#stable-features-guard-conditions-non-local-break-and-continue-and-multi-dollar-interpolation">之前为实验性的特性现在已稳定</a>，例如守卫条件、非局部 <code>break</code> 和 <code>continue</code> 以及多美元符号内插。</li><li><strong>Kotlin 编译器</strong>：<a href="#kotlin-compiler-unified-management-of-compiler-warnings">编译器警告的统一管理</a>。</li><li><strong>Kotlin/JVM</strong>：<a href="#changes-to-default-method-generation-for-interface-functions">接口函数默认方法生成的变化</a>。</li><li><strong>Kotlin/Native</strong>：<a href="#kotlin-native">LLVM 19 以及用于跟踪和调整内存消耗的新特性</a>。</li><li><strong>Kotlin/Wasm</strong>：<a href="#build-infrastructure-for-wasm-target-separated-from-javascript-target">Wasm 目标平台的构建基础设施已与 JavaScript 目标平台分离</a>，并且能够<a href="#per-project-binaryen-configuration">按项目配置 Binaryen</a>。</li><li><strong>Kotlin/JS</strong>：<a href="#fix-for-copy-in-jsplainobject-interfaces">修复了 <code>@JsPlainObject</code> 接口生成的 <code>copy()</code> 方法</a>。</li><li><strong>Gradle</strong>：<a href="#binary-compatibility-validation-included-in-kotlin-gradle-plugin">Kotlin Gradle 插件中包含了二进制兼容性验证</a>。</li><li><strong>标准库</strong>：<a href="#stable-base64-encoding-and-decoding">Base64 和 HexFormat API 已稳定</a>。</li><li><strong>文档</strong>：我们的<a href="https://surveys.jetbrains.com/s3/Kotlin-Docs-2025" target="_blank" rel="noreferrer">文档调查已开放</a>，并且<a href="#documentation-updates">Kotlin 文档已进行了显著改进</a>。</li></ul><p>你还可以观看 Kotlin 语言演进团队讨论新特性和回答问题的视频：</p>',5)),a(t,{src:"https://www.youtube.com/watch?v=jne3923lWtw",title:"What's new in Kotlin 2.2.0"}),s[1]||(s[1]=i('<h2 id="ide-支持" tabindex="-1">IDE 支持 <a class="header-anchor" href="#ide-支持" aria-label="Permalink to &quot;IDE 支持&quot;">​</a></h2><p>支持 2.2.0 的 Kotlin 插件已捆绑在最新版本的 IntelliJ IDEA 和 Android Studio 中。 你无需在 IDE 中更新 Kotlin 插件。 你只需在构建脚本中<a href="/kotlin/configure-build-for-eap#adjust-the-kotlin-version">将 Kotlin 版本更改</a>为 2.2.0。</p><p>关于详细信息，请参见<a href="/kotlin/releases#update-to-a-new-kotlin-version">更新到新版本</a>。</p><h2 id="语言" tabindex="-1">语言 <a class="header-anchor" href="#语言" aria-label="Permalink to &quot;语言&quot;">​</a></h2><p>此版本将<a href="#stable-features-guard-conditions-non-local-break-and-continue-and-multi-dollar-interpolation">守卫条件</a>、非局部 <code>break</code> 和 <code>continue</code> 以及多美元符号内插<a href="/kotlin/components-stability#stability-levels-explained">提升为稳定特性</a>。 此外，一些特性（例如<a href="#preview-of-context-parameters">上下文形参</a>和<a href="#preview-of-context-sensitive-resolution">上下文敏感解析</a>）已作为预览版引入。</p>',5)),a(n,{id:"上下文形参预览",level:"3",title:"上下文形参预览",labelRef:"experimental-general"}),s[2]||(s[2]=i(` <p>上下文形参允许函数和属性声明在周围上下文中隐式可用的依赖项。</p><p>通过上下文形参，你无需手动传递那些在多组函数调用中共享且很少更改的值（例如服务或依赖项）。</p><p>上下文形参取代了之前名为上下文接收者的实验性特性。要从上下文接收者迁移到上下文形参，你可以使用 IntelliJ IDEA 中的辅助支持，如<a href="https://blog.jetbrains.com/kotlin/2025/04/update-on-context-parameters/" target="_blank" rel="noreferrer">博文</a>中所述。</p><p>主要区别在于，上下文形参并非作为接收者引入函数体。因此，你需要使用上下文形参的名称来访问其成员，这与上下文接收者不同，后者上下文是隐式可用的。</p><p>Kotlin 中的上下文形参通过简化依赖注入、改进 DSL 设计和作用域操作，显著改善了依赖管理。更多信息，请参见此特性的 <a href="https://github.com/Kotlin/KEEP/blob/context-parameters/proposals/context-parameters.md" target="_blank" rel="noreferrer">KEEP</a>。</p><h4 id="如何声明上下文形参" tabindex="-1">如何声明上下文形参 <a class="header-anchor" href="#如何声明上下文形参" aria-label="Permalink to &quot;如何声明上下文形参&quot;">​</a></h4><p>你可以使用 <code>context</code> 关键字后跟参数列表（每个参数的形式为 <code>name: Type</code>）来为属性和函数声明上下文形参。以下是依赖于 <code>UserService</code> 接口的示例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// UserService 定义了上下文中所需的依赖项</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(message: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> findUserById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(id: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 声明一个带有上下文形参的函数</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(users: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> outputMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(message: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 使用来自上下文的 log</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    users.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Log: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$message</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 声明一个带有上下文形参的属性</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(users: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> firstUser: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 使用来自上下文的 findUserById    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> users.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">findUserById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>你可以使用 <code>_</code> 作为上下文形参名称。在这种情况下，形参的值可用于解析，但在代码块内部不能通过名称访问：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用 &quot;_&quot; 作为上下文形参名称</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(_: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> logWelcome</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 从 UserService 中找到适当的 log 函数</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    outputMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Welcome!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="如何启用上下文形参" tabindex="-1">如何启用上下文形参 <a class="header-anchor" href="#如何启用上下文形参" aria-label="Permalink to &quot;如何启用上下文形参&quot;">​</a></h4><p>要在你的项目中启用上下文形参，请在命令行中使用以下编译器选项：</p><div class="language-Bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-Xcontext-parameters</span></span></code></pre></div><p>或将其添加到 Gradle 构建文件的 <code>compilerOptions {}</code> 代码块中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        freeCompilerArgs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xcontext-parameters&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>同时指定 <code>-Xcontext-receivers</code> 和 <code>-Xcontext-parameters</code> 编译器选项会导致错误。</p></div><h4 id="留下你的反馈" tabindex="-1">留下你的反馈 <a class="header-anchor" href="#留下你的反馈" aria-label="Permalink to &quot;留下你的反馈&quot;">​</a></h4><p>此特性计划在未来的 Kotlin 版本中稳定并改进。 我们非常感谢你在我们的问题跟踪器 <a href="https://youtrack.jetbrains.com/issue/KT-10468/Context-Parameters-expanding-extension-receivers-to-work-with-scopes" target="_blank" rel="noreferrer">YouTrack</a> 上提供反馈。</p>`,19)),a(n,{id:"上下文敏感解析预览",level:"3",title:"上下文敏感解析预览",labelRef:"experimental-general"}),s[3]||(s[3]=i(` <p>Kotlin 2.2.0 引入了上下文敏感解析的预览实现。</p><p>以前，你必须编写枚举条目或密封类成员的完整名称，即使类型可以从上下文中推断出来。 例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">enum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Problem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    CONNECTION, AUTHENTICATION, DATABASE, UNKNOWN</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(problem: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Problem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> when</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (problem) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Problem.CONNECTION </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;connection&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Problem.AUTHENTICATION </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;authentication&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Problem.DATABASE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;database&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Problem.UNKNOWN </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;unknown&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>现在，通过上下文敏感解析，你可以在已知预期类型的上下文中省略类型名称：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">enum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Problem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    CONNECTION, AUTHENTICATION, DATABASE, UNKNOWN</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 根据已知的问题类型解析枚举条目</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(problem: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Problem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> when</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (problem) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    CONNECTION </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;connection&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    AUTHENTICATION </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;authentication&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    DATABASE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;database&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    UNKNOWN </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;unknown&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>编译器使用此上下文类型信息来解析正确的成员。此信息包括（但不限于）：</p><ul><li><code>when</code> 表达式的主体</li><li>显式返回类型</li><li>声明的变量类型</li><li>类型检测 (<code>is</code>) 和类型转换 (<code>as</code>)</li><li>密封类层级的已知类型</li><li>声明的形参类型</li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>上下文敏感解析不适用于函数、带有形参的属性或带有接收者的扩展属性。</p></div><p>要在你的项目中尝试上下文敏感解析，请在命令行中使用以下编译器选项：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-Xcontext-sensitive-resolution</span></span></code></pre></div><p>或将其添加到 Gradle 构建文件的 <code>compilerOptions {}</code> 代码块中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        freeCompilerArgs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xcontext-sensitive-resolution&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>我们计划在未来的 Kotlin 版本中稳定并改进此特性，并非常感谢你在我们的问题跟踪器 <a href="https://youtrack.jetbrains.com/issue/KT-16768/Context-sensitive-resolution" target="_blank" rel="noreferrer">YouTrack</a> 上提供反馈。</p>`,14)),a(n,{id:"注解使用点目标特性预览",level:"3",title:"注解使用点目标特性预览",labelRef:"experimental-general"}),s[4]||(s[4]=o("p",null,"Kotlin 2.2.0 引入了一些特性，使处理注解使用点目标更加方便。",-1)),a(n,{id:"all-属性元目标",level:"4",title:"`@all` 属性元目标",labelRef:"experimental-general"}),s[5]||(s[5]=i(`<p>Kotlin 允许你将注解附加到声明的特定部分，这称为<a href="/kotlin/annotations#annotation-use-site-targets">使用点目标</a>。 然而，单独注解每个目标既复杂又容易出错：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> username: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @param</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Email</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      // </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">构造函数形参</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @field</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Email</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      // </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">幕后字段</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Email</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        // </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getter</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> 方法</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @property</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Email</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   // </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Kotlin</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> 属性引用</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> email: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @field</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Email</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Email</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @property</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Email</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> secondaryEmail: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>为简化此过程，Kotlin 引入了新的 <code>@all</code> 属性元目标。 此特性告诉编译器将注解应用于属性的所有相关部分。当你使用它时， <code>@all</code> 会尝试将注解应用于：</p><ul><li><p><strong><code>param</code></strong>：构造函数形参，如果在主构造函数中声明。</p></li><li><p><strong><code>property</code></strong>：Kotlin 属性本身。</p></li><li><p><strong><code>field</code></strong>：幕后字段，如果存在。</p></li><li><p><strong><code>get</code></strong>：getter 方法。</p></li><li><p><strong><code>set_param</code></strong>：setter 方法的形参，如果属性定义为 <code>var</code>。</p></li><li><p><strong><code>RECORD_COMPONENT</code></strong>：如果类是 <code>@JvmRecord</code>，则注解应用于 <a href="#improved-support-for-annotating-jvm-records">Java 记录组件</a>。此行为模仿了 Java 处理记录组件注解的方式。</p></li></ul><p>编译器仅将注解应用于给定属性的目标。</p><p>在下面的示例中，<code>@Email</code> 注解应用于每个属性的所有相关目标：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> username: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 将 @Email 应用于 param、property、field、</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // get 和 set_param (如果为 var)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Email</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> val</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> email</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 将 @Email 应用于 property、field 和 getter </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // (没有 param，因为它不在构造函数中)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Email</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> val</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> secondaryEmail</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? = </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>你可以在主构造函数内部和外部的任何属性上使用 <code>@all</code> 元目标。但是， 你不能将 <code>@all</code> 元目标与<a href="https://kotlinlang.org/spec/syntax-and-grammar.html#grammar-rule-annotation" target="_blank" rel="noreferrer">多个注解</a>一起使用。</p><p>这项新特性简化了语法，确保了一致性，并改进了与 Java records 的互操作性。</p><p>要在你的项目中启用 <code>@all</code> 元目标，请在命令行中使用以下编译器选项：</p><div class="language-Bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-Xannotation-target-all</span></span></code></pre></div><p>或将其添加到 Gradle 构建文件的 <code>compilerOptions {}</code> 代码块中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        freeCompilerArgs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xannotation-target-all&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>此特性处于预览阶段。请将任何问题报告到我们的问题跟踪器 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a>。 有关 <code>@all</code> 元目标的更多信息，请阅读此 <a href="https://github.com/Kotlin/KEEP/blob/master/proposals/annotation-target-in-properties.md" target="_blank" rel="noreferrer">KEEP</a> 提案。</p>`,14)),a(n,{id:"使用点注解目标的新默认规则",level:"4",title:"使用点注解目标的新默认规则",labelRef:"experimental-general"}),s[6]||(s[6]=i(`<p>Kotlin 2.2.0 引入了将注解传播到形参、字段和属性的新默认规则。 以前，注解默认仅应用于 <code>param</code>、<code>property</code> 或 <code>field</code> 中的一个，现在默认值更符合注解的预期。</p><p>如果存在多个适用的目标，则按如下方式选择一个或多个：</p><ul><li>如果构造函数形参目标 (<code>param</code>) 适用，则使用它。</li><li>如果属性目标 (<code>property</code>) 适用，则使用它。</li><li>如果字段目标 (<code>field</code>) 适用而 <code>property</code> 不适用，则使用 <code>field</code>。</li></ul><p>如果存在多个目标，并且 <code>param</code>、<code>property</code> 或 <code>field</code> 都不适用，则注解会导致错误。</p><p>要启用此特性，请将其添加到 Gradle 构建文件的 <code>compilerOptions {}</code> 代码块中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        freeCompilerArgs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xannotation-default-target=param-property&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>或使用编译器的命令行实参：</p><div class="language-Bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-Xannotation-default-target</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">param-property</span></span></code></pre></div><p>如果你想使用旧行为，可以：</p><ul><li><p>在特定情况下，显式定义所需的目标，例如，使用 <code>@param:Annotation</code> 而不是 <code>@Annotation</code>。</p></li><li><p>对于整个项目，在 Gradle 构建文件中使用此标志：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        freeCompilerArgs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xannotation-default-target=first-only&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><p>此特性处于预览阶段。请将任何问题报告到我们的问题跟踪器 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a>。 有关注解使用点目标新默认规则的更多信息，请阅读此 <a href="https://github.com/Kotlin/KEEP/blob/master/proposals/annotation-target-in-properties.md" target="_blank" rel="noreferrer">KEEP</a> 提案。</p>`,11)),a(n,{id:"支持嵌套类型别名",level:"3",title:"支持嵌套类型别名",labelRef:"beta"}),s[7]||(s[7]=i(`<p>以前，你只能在 Kotlin 文件的顶层声明<a href="/kotlin/type-aliases">类型别名</a>。这意味着 即使是内部或领域特定的类型别名也必须存在于它们所使用的类之外。</p><p>从 2.2.0 开始，你可以在其他声明内部定义类型别名，只要它们 不捕获来自其外部类的类型形参：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Dijkstra</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    typealias</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> VisitedNodes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Set</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Node</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> step</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(visited: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">VisitedNodes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>嵌套类型别名有一些额外的约束，例如不能提及类型形参。请查看<a href="/kotlin/type-aliases#nested-type-aliases">文档</a>以了解完整的规则集。</p><p>嵌套类型别名通过改进封装、减少包级别混乱和简化内部实现，使得代码更简洁、更易于维护。</p><h4 id="如何启用嵌套类型别名" tabindex="-1">如何启用嵌套类型别名 <a class="header-anchor" href="#如何启用嵌套类型别名" aria-label="Permalink to &quot;如何启用嵌套类型别名&quot;">​</a></h4><p>要在你的项目中启用嵌套类型别名，请在命令行中使用以下编译器选项：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-Xnested-type-aliases</span></span></code></pre></div><p>或将其添加到 Gradle 构建文件的 <code>compilerOptions {}</code> 代码块中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        freeCompilerArgs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xnested-type-aliases&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="分享你的反馈" tabindex="-1">分享你的反馈 <a class="header-anchor" href="#分享你的反馈" aria-label="Permalink to &quot;分享你的反馈&quot;">​</a></h4><p>嵌套类型别名目前处于 <a href="/kotlin/components-stability#stability-levels-explained">Beta</a> 阶段。请将任何问题报告到我们的问题跟踪器 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a>。有关此特性的更多信息，请阅读此 <a href="https://github.com/Kotlin/KEEP/blob/master/proposals/nested-typealias.md" target="_blank" rel="noreferrer">KEEP</a> 提案。</p><h3 id="稳定特性-守卫条件、非局部-break-和-continue-以及多美元符号内插" tabindex="-1">稳定特性：守卫条件、非局部 <code>break</code> 和 <code>continue</code> 以及多美元符号内插 <a class="header-anchor" href="#稳定特性-守卫条件、非局部-break-和-continue-以及多美元符号内插" aria-label="Permalink to &quot;稳定特性：守卫条件、非局部 \`break\` 和 \`continue\` 以及多美元符号内插&quot;">​</a></h3><p>在 Kotlin 2.1.0 中，引入了几个新的语言特性作为预览版。 我们很高兴地宣布，以下语言特性在此版本中已<a href="/kotlin/components-stability#stability-levels-explained">稳定</a>：</p><ul><li><a href="/kotlin/whatsnew21#guard-conditions-in-when-with-a-subject"><code>when</code> 表达式中带有主体的守卫条件</a></li><li><a href="/kotlin/whatsnew21#non-local-break-and-continue">非局部 <code>break</code> 和 <code>continue</code></a></li><li><a href="/kotlin/whatsnew21#multi-dollar-string-interpolation">多美元符号内插：改进了字符串字面值中 <code>$var</code> 表达式的处理</a></li></ul><p><a href="/kotlin/kotlin-language-features-and-proposals">请参见 Kotlin 语言设计特性和提案的完整列表</a>。</p>`,16)),a(n,{id:"kotlin-编译器-统一管理编译器警告",level:"2",title:"Kotlin 编译器：统一管理编译器警告",labelRef:"experimental-general"}),s[8]||(s[8]=i(`<p>Kotlin 2.2.0 引入了一个新的编译器选项 <code>-Xwarning-level</code>。它旨在提供一种统一管理 Kotlin 项目中编译器警告的方式。</p><p>以前，你只能应用通用的模块级规则，例如使用 <code>-nowarn</code> 禁用所有警告，使用 <code>-Werror</code> 将所有警告转换为编译错误，或者使用 <code>-Wextra</code> 启用额外的编译器检测。唯一可以针对特定警告进行调整的选项是 <code>-Xsuppress-warning</code>。</p><p>有了新的解决方案，你可以覆盖通用规则，并以一致的方式排除特定诊断信息。</p><h3 id="如何应用" tabindex="-1">如何应用 <a class="header-anchor" href="#如何应用" aria-label="Permalink to &quot;如何应用&quot;">​</a></h3><p>新的编译器选项具有以下语法：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-Xwarning-level</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">DIAGNOSTIC_NAME:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">warning</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">disabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><ul><li><code>error</code>：将指定的警告提升为错误。</li><li><code>warning</code>：发出警告，默认启用。</li><li><code>disabled</code>：完全抑制指定警告在模块范围内。</li></ul><p>请记住，你只能使用新的编译器选项配置<strong>警告</strong>的严重级别。</p><h3 id="用例" tabindex="-1">用例 <a class="header-anchor" href="#用例" aria-label="Permalink to &quot;用例&quot;">​</a></h3><p>通过新的解决方案，你可以通过将通用规则与特定规则相结合，更好地微调项目中的警告报告。 选择你的用例：</p><h4 id="抑制警告" tabindex="-1">抑制警告 <a class="header-anchor" href="#抑制警告" aria-label="Permalink to &quot;抑制警告&quot;">​</a></h4><table tabindex="0"><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><a href="/kotlin/compiler-reference#nowarn"><code>-nowarn</code></a></td><td>编译期间抑制所有警告。</td></tr><tr><td><code>-Xwarning-level=DIAGNOSTIC_NAME:disabled</code></td><td>仅抑制指定警告。</td></tr><tr><td><code>-nowarn -Xwarning-level=DIAGNOSTIC_NAME:warning</code></td><td>抑制所有警告，除了指定的警告。</td></tr></tbody></table><h4 id="将警告提升为错误" tabindex="-1">将警告提升为错误 <a class="header-anchor" href="#将警告提升为错误" aria-label="Permalink to &quot;将警告提升为错误&quot;">​</a></h4><table tabindex="0"><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><a href="/kotlin/compiler-reference#werror"><code>-Werror</code></a></td><td>将所有警告提升为编译错误。</td></tr><tr><td><code>-Xwarning-level=DIAGNOSTIC_NAME:error</code></td><td>仅将指定警告提升为错误。</td></tr><tr><td><code>-Werror -Xwarning-level=DIAGNOSTIC_NAME:warning</code></td><td>将所有警告提升为错误，除了指定的警告。</td></tr></tbody></table><h4 id="启用额外的编译器警告" tabindex="-1">启用额外的编译器警告 <a class="header-anchor" href="#启用额外的编译器警告" aria-label="Permalink to &quot;启用额外的编译器警告&quot;">​</a></h4><table tabindex="0"><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><a href="/kotlin/compiler-reference#wextra"><code>-Wextra</code></a></td><td>启用所有额外的声明、表达式和类型编译器检测，如果为 true 则发出警告。</td></tr><tr><td><code>-Xwarning-level=DIAGNOSTIC_NAME:warning</code></td><td>仅启用指定的额外编译器检测。</td></tr><tr><td><code>-Wextra -Xwarning-level=DIAGNOSTIC_NAME:disabled</code></td><td>启用所有额外检测，除了指定的检测。</td></tr></tbody></table><h4 id="警告列表" tabindex="-1">警告列表 <a class="header-anchor" href="#警告列表" aria-label="Permalink to &quot;警告列表&quot;">​</a></h4><p>如果你有许多警告要从通用规则中排除，可以通过 <a href="/kotlin/compiler-reference#argfile"><code>@argfile</code></a> 将它们列在一个单独的文件中。</p><h3 id="留下反馈" tabindex="-1">留下反馈 <a class="header-anchor" href="#留下反馈" aria-label="Permalink to &quot;留下反馈&quot;">​</a></h3><p>新的编译器选项仍处于<a href="/kotlin/components-stability#stability-levels-explained">实验性</a>阶段。请 将任何问题报告到我们的问题跟踪器 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a>。</p><h2 id="kotlin-jvm" tabindex="-1">Kotlin/JVM <a class="header-anchor" href="#kotlin-jvm" aria-label="Permalink to &quot;Kotlin/JVM&quot;">​</a></h2><p>Kotlin 2.2.0 为 JVM 带来了许多更新。编译器现在支持 Java 24 字节码，并引入了接口函数默认方法生成的更改。此版本还简化了 Kotlin 元数据中注解的处理，改进了与内联值类的 Java 互操作性，并包含了对注解 JVM records 的更好支持。</p><h3 id="接口函数默认方法生成的更改" tabindex="-1">接口函数默认方法生成的更改 <a class="header-anchor" href="#接口函数默认方法生成的更改" aria-label="Permalink to &quot;接口函数默认方法生成的更改&quot;">​</a></h3><p>从 Kotlin 2.2.0 开始，除非另行配置，否则接口中声明的函数将编译为 JVM 默认方法。 此更改影响 Kotlin 接口中带有实现的函数如何编译为字节码。</p><p>此行为由新的稳定编译器选项 <code>-jvm-default</code> 控制，它取代了已弃用的 <code>-Xjvm-default</code> 选项。</p><p>你可以使用以下值控制 <code>-jvm-default</code> 选项的行为：</p><ul><li><code>enable</code>（默认）：在接口中生成默认实现，并在子类和 <code>DefaultImpls</code> 类中包含桥接函数。使用此模式可以与旧版 Kotlin 保持二进制兼容性。</li><li><code>no-compatibility</code>：仅在接口中生成默认实现。此模式跳过兼容性桥接和 <code>DefaultImpls</code> 类，适用于新代码。</li><li><code>disable</code>：禁用接口中的默认实现。仅生成桥接函数和 <code>DefaultImpls</code> 类，与 Kotlin 2.2.0 之前的行为匹配。</li></ul><p>要配置 <code>-jvm-default</code> 编译器选项，请在 Gradle Kotlin DSL 中设置 <code>jvmDefault</code> 属性：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        jvmDefault </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> JvmDefaultMode.NO_COMPATIBILITY</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,29)),a(n,{id:"支持读取和写入-kotlin-元数据中的注解",level:"3",title:"支持读取和写入 Kotlin 元数据中的注解",labelRef:"experimental-general"}),s[9]||(s[9]=i(`<p>以前，你必须使用反射或字节码分析从已编译的 JVM 类文件中读取注解，并根据签名手动将它们与元数据条目匹配。 此过程容易出错，特别是对于重载函数。</p><p>现在，在 Kotlin 2.2.0 中，<a href="/kotlin/metadata-jvm"></a> 引入了对读取存储在 Kotlin 元数据中的注解的支持。</p><p>要使注解在已编译文件的元数据中可用，请添加以下编译器选项：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Xannotations</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-in-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">metadata</span></span></code></pre></div><p>或者，将其添加到 Gradle 构建文件的 <code>compilerOptions {}</code> 代码块中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        freeCompilerArgs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xannotations-in-metadata&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>启用此选项后，Kotlin 编译器会将注解与 JVM 字节码一起写入元数据中，使 <code>kotlin-metadata-jvm</code> 库可以访问它们。</p><p>该库提供了以下用于访问注解的 API：</p><ul><li><code>KmClass.annotations</code></li><li><code>KmFunction.annotations</code></li><li><code>KmProperty.annotations</code></li><li><code>KmConstructor.annotations</code></li><li><code>KmPropertyAccessorAttributes.annotations</code></li><li><code>KmValueParameter.annotations</code></li><li><code>KmFunction.extensionReceiverAnnotations</code></li><li><code>KmProperty.extensionReceiverAnnotations</code></li><li><code>KmProperty.backingFieldAnnotations</code></li><li><code>KmProperty.delegateFieldAnnotations</code></li><li><code>KmEnumEntry.annotations</code></li></ul><p>这些 API 是<a href="/kotlin/components-stability#stability-levels-explained">实验性的</a>。 要选择启用，请使用 <code>@OptIn(ExperimentalAnnotationsInMetadata::class)</code> 注解。</p><p>以下是从 Kotlin 元数据读取注解的示例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ExperimentalAnnotationsInMetadata</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.metadata.ExperimentalAnnotationsInMetadata</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.metadata.jvm.KotlinClassMetadata</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">annotation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Label</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Label</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Message class&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Message</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> metadata </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Message::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.java.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAnnotation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Metadata::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.java)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> kmClass </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (KotlinClassMetadata.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readStrict</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(metadata) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> KotlinClassMetadata.Class).kmClass</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(kmClass.annotations)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // [@Label(value = StringValue(&quot;Message class&quot;))]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>如果你在项目中使用 <code>kotlin-metadata-jvm</code> 库，我们建议测试和更新你的代码以支持注解。 否则，当元数据中的注解在未来的 Kotlin 版本中<a href="https://youtrack.jetbrains.com/issue/KT-75736" target="_blank" rel="noreferrer">默认启用</a>时，你的项目可能会 产生无效或不完整的元数据。 如果你遇到任何问题，请在我们的<a href="https://youtrack.jetbrains.com/issue/KT-31857" target="_blank" rel="noreferrer">问题跟踪器</a>中报告。</p></div>`,13)),a(n,{id:"改进了与内联值类的-java-互操作性",level:"3",title:"改进了与内联值类的 Java 互操作性",labelRef:"experimental-general"}),s[10]||(s[10]=i(`<p>Kotlin 2.2.0 引入了一个新的实验性注解：<a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin.jvm/-jvm-expose-boxed/" target="_blank" rel="noreferrer"><code>@JvmExposeBoxed</code></a>。此注解使得从 Java 中使用<a href="/kotlin/inline-classes">内联值类</a>变得更容易。</p><p>默认情况下，Kotlin 将内联值类编译为使用<strong>未装箱表示</strong>，这更具性能，但通常 很难甚至不可能从 Java 中使用。例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JvmInline</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PositiveInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> number: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(number </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在这种情况下，因为该类是未装箱的，所以 Java 没有可调用的构造函数。Java 也没有办法触发 <code>init</code> 代码块来确保 <code>number</code> 是正数。</p><p>当你使用 <code>@JvmExposeBoxed</code> 注解该类时，Kotlin 会生成一个公共构造函数，Java 可以直接调用它， 确保 <code>init</code> 代码块也运行。</p><p>你可以将 <code>@JvmExposeBoxed</code> 注解应用于类、构造函数或函数级别，以获得对哪些内容暴露给 Java 的细粒度控制。</p><p>例如，在以下代码中，扩展函数 <code>.timesTwoBoxed()</code> <strong>无法</strong>从 Java 中访问：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JvmInline</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">timesTwoBoxed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyInt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>为了能够创建 <code>MyInt</code> 类的实例并从 Java 代码中调用 <code>.timesTwoBoxed()</code> 函数， 请将 <code>@JvmExposeBoxed</code> 注解同时添加到类和函数中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JvmExposeBoxed</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JvmInline</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JvmExposeBoxed</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">timesTwoBoxed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyInt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>使用这些注解，Kotlin 编译器会为 <code>MyInt</code> 类生成一个 Java 可访问的构造函数。它还会为使用值类的装箱形式的扩展函数生成一个重载。因此，以下 Java 代码可以成功运行：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MyInt input </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MyInt output </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ExampleKt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">timesTwoBoxed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(input);</span></span></code></pre></div><p>如果你不想注解你想要暴露的内联值类的每个部分，你可以将注解有效地应用于整个模块。要将此行为应用于模块，请使用 <code>-Xjvm-expose-boxed</code> 选项编译它。使用此选项进行编译的效果与模块中的每个声明都具有 <code>@JvmExposeBoxed</code> 注解相同。</p><p>这项新注解不会改变 Kotlin 在内部编译或使用值类的方式，所有现有编译代码仍然有效。它只是增加了新的功能以改进 Java 互操作性。使用值类的 Kotlin 代码的性能不受影响。</p><p><code>@JvmExposeBoxed</code> 注解对于希望暴露成员函数的装箱变体并接收装箱返回类型的库作者很有用。它消除了在内联值类（高效但仅限 Kotlin）和数据类（Java 兼容但始终装箱）之间进行选择的需要。</p><p>有关 <code>@JvmExposedBoxed</code> 注解如何工作以及它解决了哪些问题的更详细解释， 请参见此 <a href="https://github.com/Kotlin/KEEP/blob/jvm-expose-boxed/proposals/jvm-expose-boxed.md" target="_blank" rel="noreferrer">KEEP</a> 提案。</p><h3 id="改进了对注解-jvm-records-的支持" tabindex="-1">改进了对注解 JVM records 的支持 <a class="header-anchor" href="#改进了对注解-jvm-records-的支持" aria-label="Permalink to &quot;改进了对注解 JVM records 的支持&quot;">​</a></h3><p>Kotlin 自 Kotlin 1.5.0 起就支持 <a href="/kotlin/jvm-records">JVM records</a>。现在，Kotlin 2.2.0 改进了 Kotlin 处理 record 组件上的注解的方式，特别是与 Java 的 <a href="https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/lang/annotation/ElementType.html#RECORD_COMPONENT" target="_blank" rel="noreferrer"><code>RECORD_COMPONENT</code></a> 目标相关的部分。</p><p>首先，如果你想将 <code>RECORD_COMPONENT</code> 用作注解目标，你需要手动为 Kotlin (<code>@Target</code>) 和 Java 添加注解。这是因为 Kotlin 的 <code>@Target</code> 注解不支持 <code>RECORD_COMPONENT</code>。例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(AnnotationTarget.CLASS, AnnotationTarget.PROPERTY)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@java.lang.annotation.Target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ElementType.CLASS, ElementType.RECORD_COMPONENT)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">annotation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> exampleClass</span></span></code></pre></div><p>手动维护这两个列表容易出错，因此 Kotlin 2.2.0 引入了如果 Kotlin 和 Java 目标不匹配时的编译器警告。例如，如果你在 Java 目标列表中省略 <code>ElementType.CLASS</code>，编译器会报告：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Incompatible annotation targets: Java target &#39;CLASS&#39; missing, corresponding to Kotlin targets &#39;CLASS&#39;.</span></span></code></pre></div><p>其次，Kotlin 在 record 中传播注解的行为与 Java 不同。在 Java 中，record 组件上的注解会自动应用于幕后字段、getter 和构造函数形参。Kotlin 默认不这样做，但你现在可以使用 <a href="#all-meta-target-for-properties"><code>@all:</code> 使用点目标</a>来复制此行为。</p><p>例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JvmRecord</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Positive</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> val</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> age</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>当你将 <code>@JvmRecord</code> 与 <code>@all:</code> 一起使用时，Kotlin 现在会：</p><ul><li>将注解传播到属性、幕后字段、构造函数形参和 getter。</li><li>如果注解支持 Java 的 <code>RECORD_COMPONENT</code>，也会将其应用于 record 组件。</li></ul><h2 id="kotlin-native" tabindex="-1">Kotlin/Native <a class="header-anchor" href="#kotlin-native" aria-label="Permalink to &quot;Kotlin/Native&quot;">​</a></h2><p>从 2.2.0 开始，Kotlin/Native 使用 LLVM 19。此版本还带来了几个实验性特性，旨在跟踪和调整内存消耗。</p>`,29)),a(n,{id:"每对象内存分配",level:"3",title:"每对象内存分配",labelRef:"experimental-opt-in"}),s[11]||(s[11]=i('<p>Kotlin/Native 的<a href="https://github.com/JetBrains/kotlin/blob/master/kotlin-native/runtime/src/alloc/custom/README.md" target="_blank" rel="noreferrer">内存分配器</a>现在可以按对象预留内存。在某些情况下，这可以帮助你满足严格的内存限制或减少应用程序启动时的内存消耗。</p><p>这项新特性旨在取代 <code>-Xallocator=std</code> 编译器选项，该选项启用了系统内存分配器而不是默认的内存分配器。现在，你可以在不切换内存分配器的情况下禁用缓冲（分配分页）。</p><p>此特性目前处于<a href="/kotlin/components-stability#stability-levels-explained">实验性</a>阶段。 要启用它，请在你的 <code>gradle.properties</code> 文件中设置以下选项：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.native.binary.pagedAllocator=false</span></span></code></pre></div><p>请将任何问题报告到我们的问题跟踪器 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a>。</p>',5)),a(n,{id:"运行时支持-latin-1-编码字符串",level:"3",title:"运行时支持 Latin-1 编码字符串",labelRef:"experimental-opt-in"}),s[12]||(s[12]=i(`<p>Kotlin 现在支持 Latin-1 编码字符串，类似于 <a href="https://openjdk.org/jeps/254" target="_blank" rel="noreferrer">JVM</a>。这应该有助于 减小应用程序的二进制大小并调整内存消耗。</p><p>默认情况下，Kotlin 中的字符串使用 UTF-16 编码存储，其中每个字符由两个字节表示。 在某些情况下，这会导致字符串在二进制文件中占用的空间是源代码的两倍，并且 从简单的 ASCII 文件读取数据可能占用磁盘存储文件的两倍内存。</p><p>而 <a href="https://en.wikipedia.org/wiki/ISO/IEC_8859-1" target="_blank" rel="noreferrer">Latin-1 (ISO 8859-1)</a> 编码则用一个字节表示前 256 个 Unicode 字符中的每个字符。启用 Latin-1 支持后，只要所有字符都在其范围内，字符串就以 Latin-1 编码存储。否则，将使用默认的 UTF-16 编码。</p><h4 id="如何启用-latin-1-支持" tabindex="-1">如何启用 Latin-1 支持 <a class="header-anchor" href="#如何启用-latin-1-支持" aria-label="Permalink to &quot;如何启用 Latin-1 支持&quot;">​</a></h4><p>此特性目前处于<a href="/kotlin/components-stability#stability-levels-explained">实验性</a>阶段。 要启用它，请在你的 <code>gradle.properties</code> 文件中设置以下选项：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.native.binary.latin1Strings=true</span></span></code></pre></div><h4 id="已知问题" tabindex="-1">已知问题 <a class="header-anchor" href="#已知问题" aria-label="Permalink to &quot;已知问题&quot;">​</a></h4><p>只要此特性处于实验性阶段，cinterop 扩展函数 <a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlinx.cinterop/pin.html" target="_blank" rel="noreferrer"><code>String.pin</code></a>、<a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlinx.cinterop/use-pinned.html" target="_blank" rel="noreferrer"><code>String.usePinned</code></a> 和 <a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlinx.cinterop/ref-to.html" target="_blank" rel="noreferrer"><code>String.refTo</code></a> 的效率就会降低。每次调用它们都可能触发字符串自动转换为 UTF-16。</p><p>Kotlin 团队非常感谢 Google 的同事，特别是 <a href="https://github.com/pyos" target="_blank" rel="noreferrer">Sonya Valchuk</a> 实现了这项特性。</p><p>有关 Kotlin 中内存消耗的更多信息，请参见<a href="/kotlin/native-memory-manager#memory-consumption">文档</a>。</p><h3 id="改进了-apple-平台上的内存消耗跟踪" tabindex="-1">改进了 Apple 平台上的内存消耗跟踪 <a class="header-anchor" href="#改进了-apple-平台上的内存消耗跟踪" aria-label="Permalink to &quot;改进了 Apple 平台上的内存消耗跟踪&quot;">​</a></h3><p>从 Kotlin 2.2.0 开始，Kotlin 代码分配的内存现在会被标记。这可以帮助你调试 Apple 平台上的内存问题。</p><p>当你检查应用程序的高内存使用情况时，你现在可以识别 Kotlin 代码保留了多少内存。 Kotlin 的份额会被一个标识符标记，并可以通过 Xcode Instruments 中的 VM Tracker 等工具进行跟踪。</p><p>此特性默认启用，但仅在 Kotlin/Native 默认内存分配器满足<strong>所有</strong>以下条件时才可用：</p><ul><li><p><strong>标记已启用</strong>。内存应标记为有效的标识符。Apple 建议使用 240 到 255 之间的数字；默认值为 246。</p><p>如果你设置了 <code>kotlin.native.binary.mmapTag=0</code> Gradle 属性，则禁用标记。</p></li><li><p><strong>使用 mmap 分配</strong>。分配器应使用 <code>mmap</code> 系统调用将文件映射到内存中。</p><p>如果你设置了 <code>kotlin.native.binary.disableMmap=true</code> Gradle 属性，则默认分配器使用 <code>malloc</code> 而不是 <code>mmap</code>。</p></li><li><p><strong>分页已启用</strong>。分配的分页（缓冲）应启用。</p><p>如果你设置了 <a href="#per-object-memory-allocation"><code>kotlin.native.binary.pagedAllocator=false</code></a> Gradle 属性，则内存将按对象预留。</p></li></ul><p>有关 Kotlin 中内存消耗的更多信息，请参见<a href="/kotlin/native-memory-manager#memory-consumption">文档</a>。</p><h3 id="llvm-从-16-更新到-19" tabindex="-1">LLVM 从 16 更新到 19 <a class="header-anchor" href="#llvm-从-16-更新到-19" aria-label="Permalink to &quot;LLVM 从 16 更新到 19&quot;">​</a></h3><p>在 Kotlin 2.2.0 中，我们将 LLVM 从版本 16 更新到了 19。 新版本包括性能改进、错误修复和安全更新。</p><p>此更新不应影响你的代码，但如果你遇到任何问题，请将其报告到我们的<a href="http://kotl.in/issue" target="_blank" rel="noreferrer">问题跟踪器</a>。</p><h3 id="windows-7-目标平台已弃用" tabindex="-1">Windows 7 目标平台已弃用 <a class="header-anchor" href="#windows-7-目标平台已弃用" aria-label="Permalink to &quot;Windows 7 目标平台已弃用&quot;">​</a></h3><p>从 Kotlin 2.2.0 开始，支持的最低 Windows 版本已从 Windows 7 提升到 Windows 10。由于 Microsoft 已于 2025 年 1 月终止对 Windows 7 的支持，我们也决定弃用此旧目标平台。</p><p>更多信息，请参见<a href="/kotlin/native-target-support"></a>。</p><h2 id="kotlin-wasm" tabindex="-1">Kotlin/Wasm <a class="header-anchor" href="#kotlin-wasm" aria-label="Permalink to &quot;Kotlin/Wasm&quot;">​</a></h2><p>在此版本中，<a href="#build-infrastructure-for-wasm-target-separated-from-javascript-target">Wasm 目标平台的构建基础设施已与 JavaScript 目标平台分离</a>。此外，你现在可以<a href="#per-project-binaryen-configuration">按项目或模块配置 Binaryen 工具</a>。</p><h3 id="wasm-目标平台的构建基础设施已与-javascript-目标平台分离" tabindex="-1">Wasm 目标平台的构建基础设施已与 JavaScript 目标平台分离 <a class="header-anchor" href="#wasm-目标平台的构建基础设施已与-javascript-目标平台分离" aria-label="Permalink to &quot;Wasm 目标平台的构建基础设施已与 JavaScript 目标平台分离&quot;">​</a></h3><p>以前，<code>wasmJs</code> 目标平台与 <code>js</code> 目标平台共享相同的基础设施。因此，两个目标平台都托管在相同的 目录 (<code>build/js</code>) 中，并使用相同的 NPM 任务和配置。</p><p>现在，<code>wasmJs</code> 目标平台拥有自己独立于 <code>js</code> 目标平台的基础设施。这使得 Wasm 任务和类型与 JavaScript 任务和类型区分开来，从而可以独立配置。</p><p>此外，Wasm 相关项目文件和 NPM 依赖项现在存储在单独的 <code>build/wasm</code> 目录中。</p><p>已为 Wasm 引入了新的 NPM 相关任务，而现有 JavaScript 任务现在仅专用于 JavaScript：</p><table tabindex="0"><thead><tr><th><strong>Wasm 任务</strong></th><th><strong>JavaScript 任务</strong></th></tr></thead><tbody><tr><td><code>kotlinWasmNpmInstall</code></td><td><code>kotlinNpmInstall</code></td></tr><tr><td><code>wasmRootPackageJson</code></td><td><code>rootPackageJson</code></td></tr></tbody></table><p>类似地，已添加了新的 Wasm 特定声明：</p><table tabindex="0"><thead><tr><th><strong>Wasm 声明</strong></th><th><strong>JavaScript 声明</strong></th></tr></thead><tbody><tr><td><code>WasmNodeJsRootPlugin</code></td><td><code>NodeJsRootPlugin</code></td></tr><tr><td><code>WasmNodeJsPlugin</code></td><td><code>NodeJsPlugin</code></td></tr><tr><td><code>WasmYarnPlugin</code></td><td><code>YarnPlugin</code></td></tr><tr><td><code>WasmNodeJsRootExtension</code></td><td><code>NodeJsRootExtension</code></td></tr><tr><td><code>WasmNodeJsEnvSpec</code></td><td><code>NodeJsEnvSpec</code></td></tr><tr><td><code>WasmYarnRootEnvSpec</code></td><td><code>YarnRootEnvSpec</code></td></tr></tbody></table><p>你现在可以独立于 JavaScript 目标平台处理 Wasm 目标平台，这简化了配置过程。</p><p>此更改默认启用，无需额外设置。</p><h3 id="每项目-binaryen-配置" tabindex="-1">每项目 Binaryen 配置 <a class="header-anchor" href="#每项目-binaryen-配置" aria-label="Permalink to &quot;每项目 Binaryen 配置&quot;">​</a></h3><p>Binaryen 工具用于 Kotlin/Wasm <a href="/kotlin/whatsnew20#optimized-production-builds-by-default-using-binaryen">默认优化生产构建</a>， 以前只能在根项目中配置一次。</p><p>现在，你可以按项目或模块配置 Binaryen 工具。此更改与 Gradle 的最佳实践保持一致，并 确保更好地支持<a href="https://docs.gradle.org/current/userguide/isolated_projects.html" target="_blank" rel="noreferrer">项目隔离</a>等特性， 从而提高复杂构建的构建性能和可靠性。</p><p>此外，如果需要，你现在可以为不同的模块配置不同版本的 Binaryen。</p><p>此特性默认启用。但是，如果你有自定义的 Binaryen 配置， 你现在需要按项目应用它，而不是仅在根项目中应用。</p><h2 id="kotlin-js" tabindex="-1">Kotlin/JS <a class="header-anchor" href="#kotlin-js" aria-label="Permalink to &quot;Kotlin/JS&quot;">​</a></h2><p>此版本改进了 <a href="#fix-for-copy-in-jsplainobject-interfaces"><code>@JsPlainObject</code> 接口中的 <code>copy()</code> 函数</a>、 <a href="#support-for-type-aliases-in-files-with-jsmodule-annotation">带有 <code>@JsModule</code> 注解的文件中的类型别名</a>以及其他 Kotlin/JS 特性。</p><h3 id="修复了-jsplainobject-接口中的-copy" tabindex="-1">修复了 <code>@JsPlainObject</code> 接口中的 <code>copy()</code> <a class="header-anchor" href="#修复了-jsplainobject-接口中的-copy" aria-label="Permalink to &quot;修复了 \`@JsPlainObject\` 接口中的 \`copy()\`&quot;">​</a></h3><p>Kotlin/JS 有一个实验性插件 <code>js-plain-objects</code>，它为用 <code>@JsPlainObject</code> 注解的接口引入了 <code>copy()</code> 函数。 你可以使用 <code>copy()</code> 函数来操作对象。</p><p>然而，<code>copy()</code> 的初始实现与继承不兼容，这在 <code>@JsPlainObject</code> 接口扩展其他接口时导致了问题。</p><p>为了避免对普通对象的限制，<code>copy()</code> 函数已从对象本身移动到其伴生对象：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JsPlainObject</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">external</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;SomeUser&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 21</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 此语法不再有效</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> copy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">copy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 35</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)      </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 这是正确的语法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> copy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> User.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">copy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(user, age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 35</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>此更改解决了继承层级中的冲突并消除了歧义。 从 Kotlin 2.2.0 开始，此更改默认启用。</p><h3 id="支持带有-jsmodule-注解的文件中的类型别名" tabindex="-1">支持带有 <code>@JsModule</code> 注解的文件中的类型别名 <a class="header-anchor" href="#支持带有-jsmodule-注解的文件中的类型别名" aria-label="Permalink to &quot;支持带有 \`@JsModule\` 注解的文件中的类型别名&quot;">​</a></h3><p>以前，用 <code>@JsModule</code> 注解来从 JavaScript 模块导入声明的文件 仅限于外部声明。这意味着你无法在此类文件中声明 <code>typealias</code>。</p><p>从 Kotlin 2.2.0 开始，你可以在标记为 <code>@JsModule</code> 的文件中声明类型别名：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">JsModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">somepackage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&quot;)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> somepackage</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typealias</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SomeClass</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Any</span></span></code></pre></div><p>此更改减少了 Kotlin/JS 互操作性限制的一个方面，并且计划在未来的版本中进行更多改进。</p><p>带有 <code>@JsModule</code> 的文件中的类型别名支持默认启用。</p><h3 id="支持在多平台-expect-声明中使用-jsexport" tabindex="-1">支持在多平台 <code>expect</code> 声明中使用 <code>@JsExport</code> <a class="header-anchor" href="#支持在多平台-expect-声明中使用-jsexport" aria-label="Permalink to &quot;支持在多平台 \`expect\` 声明中使用 \`@JsExport\`&quot;">​</a></h3><p>在 Kotlin 多平台项目中处理 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-expect-actual.html" target="_blank" rel="noreferrer"><code>expect/actual</code> 机制</a>时， 无法在公共代码中的 <code>expect</code> 声明中使用 <code>@JsExport</code> 注解。</p><p>从此版本开始，你可以直接将 <code>@JsExport</code> 应用于 <code>expect</code> 声明：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// commonMain</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 以前会报错，但现在可以正常工作</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JsExport</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WindowManager</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JsExport</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> acceptWindowManager</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(manager: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WindowManager</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    ..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// jsMain</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JsExport</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WindowManager</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>你还必须在 JavaScript 源代码集中使用 <code>@JsExport</code> 注解相应的 <code>actual</code> 实现， 并且它必须只使用可导出类型。</p><p>此修复允许 <code>commonMain</code> 中定义的共享代码正确导出到 JavaScript。你现在可以 将你的多平台代码暴露给 JavaScript 使用者，而无需使用手动变通方法。</p><p>此更改默认启用。</p><h3 id="能够将-jsexport-与-promise-unit-类型一起使用" tabindex="-1">能够将 <code>@JsExport</code> 与 <code>Promise&lt;Unit&gt;</code> 类型一起使用 <a class="header-anchor" href="#能够将-jsexport-与-promise-unit-类型一起使用" aria-label="Permalink to &quot;能够将 \`@JsExport\` 与 \`Promise&lt;Unit&gt;\` 类型一起使用&quot;">​</a></h3><p>以前，当你尝试使用 <code>@JsExport</code> 注解导出返回 <code>Promise&lt;Unit&gt;</code> 类型的函数时， Kotlin 编译器会产生错误。</p><p>虽然像 <code>Promise&lt;Int&gt;</code> 这样的返回类型可以正常工作，但使用 <code>Promise&lt;Unit&gt;</code> 会触发“不可导出类型”警告， 即使它在 TypeScript 中正确映射到 <code>Promise&lt;void&gt;</code>。</p><p>此限制已删除。现在，以下代码可以编译成功，没有错误：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 以前可以正常工作</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JsExport</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fooInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GlobalScope.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    delay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@promise </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">42</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 以前会报错，但现在可以正常工作</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JsExport</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fooUnit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GlobalScope.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    delay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>此更改消除了 Kotlin/JS 互操作模型中不必要的限制。此修复默认启用。</p><h2 id="gradle" tabindex="-1">Gradle <a class="header-anchor" href="#gradle" aria-label="Permalink to &quot;Gradle&quot;">​</a></h2><p>Kotlin 2.2.0 完全兼容 Gradle 7.6.3 到 8.14。你也可以使用最新版本的 Gradle。 但是，请注意，这样做可能会导致弃用警告，并且一些新的 Gradle 特性可能无法工作。</p><p>在此版本中，Kotlin Gradle 插件对其诊断功能进行了一些改进。 它还引入了<a href="#binary-compatibility-validation-included-in-kotlin-gradle-plugin">二进制兼容性验证</a>的实验性集成，使得使用库变得更加容易。</p>`,69)),a(n,{id:"kotlin-gradle-插件中包含二进制兼容性验证",level:"3",title:"Kotlin Gradle 插件中包含二进制兼容性验证",labelRef:"experimental-general"}),s[13]||(s[13]=i(`<p>为了更容易检查库版本之间的二进制兼容性，我们正在尝试将 <a href="https://github.com/Kotlin/binary-compatibility-validator" target="_blank" rel="noreferrer">binary compatibility validator</a> 的功能集成到 Kotlin Gradle 插件 (KGP) 中。 你可以在玩具项目中尝试，但我们暂时不建议在生产环境中使用。</p><p>原始的 <a href="https://github.com/Kotlin/binary-compatibility-validator" target="_blank" rel="noreferrer">binary compatibility validator</a> 在此实验阶段将继续维护。</p><p>Kotlin 库可以使用两种二进制格式之一：JVM class files 或 <code>klib</code>。由于这些格式不兼容， KGP 分别处理它们。</p><p>要启用二进制兼容性验证特性集，请在 <code>build.gradle.kts</code> 文件中的 <code>kotlin{}</code> 代码块中添加以下内容：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(org.jetbrains.kotlin.gradle.dsl.abi.ExperimentalAbiValidation::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    abiValidation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 使用 set() 函数以确保与旧版 Gradle 兼容</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        enabled.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>如果你的项目有多个模块需要检查二进制兼容性，请在每个模块中单独配置此特性。 每个模块都可以有自己的自定义配置。</p><p>启用后，运行 <code>checkLegacyAbi</code> Gradle 任务以检查二进制兼容性问题。你可以在 IntelliJ IDEA 中或在项目目录中的命令行中运行此任务：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gradlew checkLegacyAbi</span></span></code></pre></div><p>此任务从当前代码生成应用程序二进制接口 (ABI) 转储，作为 UTF-8 文本文件。 然后，该任务将新转储与先前版本的转储进行比较。如果任务发现任何差异， 它将报告为错误。在审阅错误后，如果你认为更改可以接受，你可以通过运行 <code>updateLegacyAbi</code> Gradle 任务来更新引用 ABI 转储。</p><h4 id="过滤类" tabindex="-1">过滤类 <a class="header-anchor" href="#过滤类" aria-label="Permalink to &quot;过滤类&quot;">​</a></h4><p>此特性允许你在 ABI 转储中过滤类。你可以通过名称或部分名称，或通过标记它们的注解（或注解名称的一部分）显式包含或排除类。</p><p>例如，此示例排除了 <code>com.company</code> 包中的所有类：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(org.jetbrains.kotlin.gradle.dsl.abi.ExperimentalAbiValidation::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    abiValidation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        filters.excluded.byNames.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;com.company.**&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>探索 <a href="https://kotlinlang.org/api/kotlin-gradle-plugin/kotlin-gradle-plugin-api/org.jetbrains.kotlin.gradle.dsl.abi/" target="_blank" rel="noreferrer">KGP API 参考</a>以了解有关配置二进制兼容性验证器的更多信息。</p><h4 id="多平台限制" tabindex="-1">多平台限制 <a class="header-anchor" href="#多平台限制" aria-label="Permalink to &quot;多平台限制&quot;">​</a></h4><p>在多平台项目中，如果你的宿主机不支持所有目标平台的交叉编译，KGP 会尝试通过检查其他目标平台的 ABI 转储来推断不支持目标平台的 ABI 更改。这种方法有助于避免在你稍后切换到<strong>可以</strong>编译所有目标平台的宿主机时出现错误的验证失败。</p><p>你可以更改此默认行为，以便 KGP 不推断不支持目标平台的 ABI 更改，方法是将以下内容添加到你的 <code>build.gradle.kts</code> 文件中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(org.jetbrains.kotlin.gradle.dsl.abi.ExperimentalAbiValidation::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    abiValidation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        klib</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            keepUnsupportedTargets </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>但是，如果你的项目中有一个不支持的目标平台，运行 <code>checkLegacyAbi</code> 任务将失败，因为该任务无法创建 ABI 转储。如果你认为检查失败比因为从其他目标平台推断出的 ABI 更改而错过不兼容的更改更重要，那么这种行为可能是可取的。</p><h3 id="支持-kotlin-gradle-插件在控制台中输出富文本" tabindex="-1">支持 Kotlin Gradle 插件在控制台中输出富文本 <a class="header-anchor" href="#支持-kotlin-gradle-插件在控制台中输出富文本" aria-label="Permalink to &quot;支持 Kotlin Gradle 插件在控制台中输出富文本&quot;">​</a></h3><p>在 Kotlin 2.2.0 中，我们支持 Gradle 构建过程中在控制台中输出颜色和其他富文本，从而 更容易阅读和理解报告的诊断信息。</p><p>富文本输出可在 Linux 和 macOS 上支持的终端模拟器中使用，我们正在努力为 Windows 添加支持。</p><p><img src="`+l+'" alt="Gradle console" width="600"></p><p>此特性默认启用，但如果你想覆盖它，请将以下 Gradle 属性添加到你的 <code>gradle.properties</code> 文件中：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>org.gradle.console=plain</span></span></code></pre></div><p>有关此属性及其选项的更多信息，请参见 Gradle 文档中关于<a href="https://docs.gradle.org/current/userguide/command_line_interface.html#sec:command_line_customizing_log_format" target="_blank" rel="noreferrer">自定义日志格式</a>的部分。</p><h3 id="problems-api-与-kgp-诊断功能的集成" tabindex="-1">Problems API 与 KGP 诊断功能的集成 <a class="header-anchor" href="#problems-api-与-kgp-诊断功能的集成" aria-label="Permalink to &quot;Problems API 与 KGP 诊断功能的集成&quot;">​</a></h3><p>以前，Kotlin Gradle 插件 (KGP) 只能将警告和错误等诊断信息作为纯文本输出到控制台或日志。</p><p>从 2.2.0 开始，KGP 引入了一种额外的报告机制：它现在使用 <a href="https://docs.gradle.org/current/kotlin-dsl/gradle/org.gradle.api.problems/index.html" target="_blank" rel="noreferrer">Gradle 的 Problems API</a>， 这是一种在构建过程中报告丰富、结构化问题信息的标准化方式。</p><p>KGP 诊断信息现在更易于阅读，并且在不同的界面（例如 Gradle CLI 和 IntelliJ IDEA）中显示更一致。</p><p>此集成从 Gradle 8.6 或更高版本开始默认启用。 由于 API 仍在不断发展，请使用最新的 Gradle 版本以受益于最新的改进。</p><h3 id="kgp-与-warning-mode-的兼容性" tabindex="-1">KGP 与 <code>--warning-mode</code> 的兼容性 <a class="header-anchor" href="#kgp-与-warning-mode-的兼容性" aria-label="Permalink to &quot;KGP 与 `--warning-mode` 的兼容性&quot;">​</a></h3><p>Kotlin Gradle 插件 (KGP) 诊断功能以前使用固定的严重级别报告问题， 这意味着 Gradle 的 <a href="https://docs.gradle.org/current/userguide/command_line_interface.html#sec:command_line_warnings" target="_blank" rel="noreferrer"><code>--warning-mode</code> 命令行选项</a>对 KGP 显示错误的方式没有影响。</p><p>现在，KGP 诊断功能与 <code>--warning-mode</code> 选项兼容，提供了更大的灵活性。例如， 你可以将所有警告转换为错误或完全禁用警告。</p><p>通过此更改，KGP 诊断功能会根据选择的警告模式调整输出：</p><ul><li>当你设置 <code>--warning-mode=fail</code> 时，严重级别为 <code>Severity.Warning</code> 的诊断信息现在会升级为 <code>Severity.Error</code>。</li><li>当你设置 <code>--warning-mode=none</code> 时，严重级别为 <code>Severity.Warning</code> 的诊断信息不会被记录。</li></ul><p>此行为从 2.2.0 开始默认启用。</p><p>要忽略 <code>--warning-mode</code> 选项，请在你的 <code>gradle.properties</code> 文件中设置以下 Gradle 属性：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.internal.diagnostics.ignoreWarningMode=true</span></span></code></pre></div>',39)),a(n,{id:"新的实验性构建工具-api",level:"2",title:"新的实验性构建工具 API",labelRef:"experimental-general"}),s[14]||(s[14]=i(`<p>你可以将 Kotlin 与各种构建系统（例如 Gradle、Maven、Amper 等）一起使用。然而，将 Kotlin 集成到每个系统中以支持完整的功能集（例如增量编译以及与 Kotlin 编译器插件、守护进程和 Kotlin Multiplatform 的兼容性）需要付出巨大的努力。</p><p>为了简化此过程，Kotlin 2.2.0 引入了一个新的实验性构建工具 API (BTA)。BTA 是一个通用 API，充当构建系统和 Kotlin 编译器生态系统之间的抽象层。通过这种方法，每个构建系统只需支持一个 BTA 入口点。</p><p>目前，BTA 仅支持 Kotlin/JVM。JetBrains 的 Kotlin 团队已在 Kotlin Gradle 插件 (KGP) 和 <code>kotlin-maven-plugin</code> 中使用它。你可以通过这些插件尝试 BTA，但 API 本身尚未准备好用于你自己的构建工具集成。如果你对 BTA 提案感到好奇或想分享你的反馈，请参见此 <a href="https://github.com/Kotlin/KEEP/issues/421" target="_blank" rel="noreferrer">KEEP</a> 提案。</p><p>要尝试 BTA：</p><ul><li>在 KGP 中，将以下属性添加到你的 <code>gradle.properties</code> 文件中：</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kotlin.compiler.runViaBuildToolsApi</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span></code></pre></div><ul><li>在 Maven 中，你无需执行任何操作。它默认启用。</li></ul><p>BTA 目前对 Maven 插件没有直接好处，但它为更快地交付新特性奠定了坚实的基础，例如<a href="https://youtrack.jetbrains.com/issue/KT-77587/Maven-Introduce-Kotlin-daemon-support-and-make-it-enabled-by-default" target="_blank" rel="noreferrer">支持 Kotlin 守护进程</a>和<a href="https://youtrack.jetbrains.com/issue/KT-77086/Stabilize-incremental-compilation-in-Maven" target="_blank" rel="noreferrer">增量编译的稳定化</a>。</p><p>对于 KGP，使用 BTA 已经有以下好处：</p><ul><li><a href="#improved-in-process-compiler-execution-strategy">改进的“进程内”编译器执行策略</a></li><li><a href="#flexibility-to-configure-different-compiler-versions-from-kotlin">更灵活地从 Kotlin 配置不同的编译器版本</a></li></ul><h3 id="改进的-进程内-编译器执行策略" tabindex="-1">改进的“进程内”编译器执行策略 <a class="header-anchor" href="#改进的-进程内-编译器执行策略" aria-label="Permalink to &quot;改进的“进程内”编译器执行策略&quot;">​</a></h3><p>KGP 支持三种 <a href="/kotlin/gradle-compilation-and-caches#defining-kotlin-compiler-execution-strategy">Kotlin 编译器执行策略</a>。 以前，“进程内”策略（在 Gradle 守护进程中运行编译器）不支持增量编译。</p><p>现在，使用 BTA，“进程内”策略<strong>确实</strong>支持增量编译。要使用它，请将以下 属性添加到你的 <code>gradle.properties</code> 文件中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kotlin.compiler.execution.strategy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=in-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process</span></span></code></pre></div><h3 id="灵活地从-kotlin-配置不同的编译器版本" tabindex="-1">灵活地从 Kotlin 配置不同的编译器版本 <a class="header-anchor" href="#灵活地从-kotlin-配置不同的编译器版本" aria-label="Permalink to &quot;灵活地从 Kotlin 配置不同的编译器版本&quot;">​</a></h3><p>有时你可能希望在代码中使用较新的 Kotlin 编译器版本，同时将 KGP 保持在较旧的版本上——例如，在处理构建脚本弃用时尝试新的语言特性。或者你可能希望更新 KGP 的版本但保留较旧的 Kotlin 编译器版本。</p><p>BTA 使这成为可能。以下是你在 <code>build.gradle.kts</code> 文件中配置它的方法：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.kotlin.buildtools.api.ExperimentalBuildToolsApi</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.kotlin.gradle.ExperimentalKotlinGradlePluginApi</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jvm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) version </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2.2.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">group </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;org.jetbrains.example&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">version </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1.0-SNAPSHOT&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">repositories</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    mavenCentral</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvmToolchain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalBuildToolsApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ExperimentalKotlinGradlePluginApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    compilerVersion.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2.1.21&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 与 2.2.0 版本不同</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>BTA 支持配置 KGP 和 Kotlin 编译器版本，支持前三个主要版本和一个后续主要版本。因此，在 KGP 2.2.0 中，支持 Kotlin 编译器版本 2.1.x、2.0.x 和 1.9.25。KGP 2.2.0 也兼容未来的 Kotlin 编译器版本 2.2.x 和 2.3.x。</p><p>但是，请记住，将不同的编译器版本与编译器插件一起使用可能会导致 Kotlin 编译器异常。Kotlin 团队计划在未来的版本中解决此类问题。</p><p>通过这些插件尝试 BTA，并在<a href="https://youtrack.jetbrains.com/issue/KT-56574" target="_blank" rel="noreferrer">KGP</a> 和 <a href="https://youtrack.jetbrains.com/issue/KT-73012" target="_blank" rel="noreferrer">Maven 插件</a>的 YouTrack 专用工单中向我们发送你的反馈。</p><h2 id="kotlin-标准库" tabindex="-1">Kotlin 标准库 <a class="header-anchor" href="#kotlin-标准库" aria-label="Permalink to &quot;Kotlin 标准库&quot;">​</a></h2><p>在 Kotlin 2.2.0 中，<a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin.io.encoding/-base64/" target="_blank" rel="noreferrer"><code>Base64</code> API</a> 和 <a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin.text/-hex-format/" target="_blank" rel="noreferrer"><code>HexFormat</code> API</a> 现在已<a href="/kotlin/components-stability#stability-levels-explained">稳定</a>。</p><h3 id="稳定的-base64-编码和解码" tabindex="-1">稳定的 Base64 编码和解码 <a class="header-anchor" href="#稳定的-base64-编码和解码" aria-label="Permalink to &quot;稳定的 Base64 编码和解码&quot;">​</a></h3><p>Kotlin 1.8.20 引入了 <a href="/kotlin/whatsnew1820#support-for-base64-encoding">Base64 编码和解码的实验性支持</a>。 在 Kotlin 2.2.0 中，<a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin.io.encoding/-base64/" target="_blank" rel="noreferrer">Base64 API</a> 现在已<a href="/kotlin/components-stability#stability-levels-explained">稳定</a>，并 包含四种编码方案，此版本新增了 <code>Base64.Pem</code>：</p><ul><li><p><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin.io.encoding/-base64/-default/" target="_blank" rel="noreferrer"><code>Base64.Default</code></a> 使用标准 <a href="https://www.rfc-editor.org/rfc/rfc4648#section-4" target="_blank" rel="noreferrer">Base64 编码方案</a>。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>Base64.Default</code> 是 <code>Base64</code> 类的伴生对象。 因此，你可以使用 <code>Base64.encode()</code> 和 <code>Base64.decode()</code> 而不是 <code>Base64.Default.encode()</code> 和 <code>Base64.Default.decode()</code> 来调用其函数。</p></div></li><li><p><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin.io.encoding/-base64/-default/-url-safe.html" target="_blank" rel="noreferrer"><code>Base64.UrlSafe</code></a> 使用“URL 和文件名安全”编码方案。</p></li><li><p><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin.io.encoding/-base64/-default/-mime.html" target="_blank" rel="noreferrer"><code>Base64.Mime</code></a> 使用 <a href="https://www.rfc-editor.org/rfc/rfc2045#section-6.8" target="_blank" rel="noreferrer">MIME</a> 编码方案，在编码期间每 76 个字符插入一个行分隔符，并在解码期间跳过非法字符。</p></li><li><p><code>Base64.Pem</code> 以与 <code>Base64.Mime</code> 类似的方式编码数据，但将行长度限制为 64 个字符。</p></li></ul><p>你可以使用 Base64 API 将二进制数据编码为 Base64 字符串，并将其解码回字节。</p><p>以下是一个示例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foBytes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;fo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.code.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toByte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toByteArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base64.Default.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">encode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(foBytes) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;Zm8=&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 另一种方法：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Base64.encode(foBytes)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foobarBytes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;foobar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.code.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toByte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toByteArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base64.UrlSafe.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">encode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(foobarBytes) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;Zm9vYmFy&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base64.Default.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">decode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Zm8=&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// foBytes</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 另一种方法：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Base64.decode(&quot;Zm8=&quot;)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Base64.UrlSafe.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">decode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Zm9vYmFy&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// foobarBytes</span></span></code></pre></div><p>在 JVM 上，使用 <code>.encodingWith()</code> 和 <code>.decodingWith()</code> 扩展函数通过输入和输出流进行 Base64 编码和解码：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.io.encoding.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> java.io.ByteArrayOutputStream</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> output </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ByteArrayOutputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> base64Output </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> output.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">encodingWith</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Base64.Default)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    base64Output.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { stream </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        stream.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello World!!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">encodeToByteArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(output.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // SGVsbG8gV29ybGQhIQ==</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="使用-hexformat-api-进行稳定的十六进制解析和格式化" tabindex="-1">使用 <code>HexFormat</code> API 进行稳定的十六进制解析和格式化 <a class="header-anchor" href="#使用-hexformat-api-进行稳定的十六进制解析和格式化" aria-label="Permalink to &quot;使用 \`HexFormat\` API 进行稳定的十六进制解析和格式化&quot;">​</a></h3><p>在 <a href="/kotlin/whatsnew19#new-hexformat-class-to-format-and-parse-hexadecimals">Kotlin 1.9.0</a> 中引入的 <a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin.text/-hex-format/" target="_blank" rel="noreferrer"><code>HexFormat</code> API</a> 现在已<a href="/kotlin/components-stability#stability-levels-explained">稳定</a>。 你可以使用它在数值和十六进制字符串之间进行转换。</p><p>例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">93</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toHexString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>更多信息，请参见<a href="/kotlin/whatsnew19#new-hexformat-class-to-format-and-parse-hexadecimals">新的 HexFormat 类用于格式化和解析十六进制数</a>。</p><h2 id="compose-编译器" tabindex="-1">Compose 编译器 <a class="header-anchor" href="#compose-编译器" aria-label="Permalink to &quot;Compose 编译器&quot;">​</a></h2><p>在此版本中，Compose 编译器引入了对可组合函数引用的支持，并更改了几个特性标志的默认值。</p><h3 id="支持-composable-函数引用" tabindex="-1">支持 <code>@Composable</code> 函数引用 <a class="header-anchor" href="#支持-composable-函数引用" aria-label="Permalink to &quot;支持 \`@Composable\` 函数引用&quot;">​</a></h3><p>从 Kotlin 2.2.0 版本开始，Compose 编译器支持声明和使用可组合函数引用：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> content: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Composable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (String) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Unit </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Text</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Composable</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;My App&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>可组合函数引用在运行时与可组合 lambda 对象略有不同。特别是，可组合 lambda 允许通过扩展 <code>ComposableLambda</code> 类进行更细粒度的跳过控制。函数引用预计实现 <code>KCallable</code> 接口，因此相同的优化无法应用于它们。</p><h3 id="pausablecomposition-特性标志默认启用" tabindex="-1"><code>PausableComposition</code> 特性标志默认启用 <a class="header-anchor" href="#pausablecomposition-特性标志默认启用" aria-label="Permalink to &quot;\`PausableComposition\` 特性标志默认启用&quot;">​</a></h3><p>从 Kotlin 2.2.0 开始，<code>PausableComposition</code> 特性标志默认启用。此标志调整了 可重启函数的 Compose 编译器输出，允许运行时强制跳过行为，从而有效地 通过跳过每个函数来暂停组合。这允许在帧之间拆分繁重的组合，这将在未来的版本中用于预取。</p><p>要禁用此特性标志，请将以下内容添加到你的 Gradle 配置中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">composeCompiler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    featureFlag </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ComposeFeatureFlag.PausableComposition.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">disabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="optimizenonskippinggroups-特性标志默认启用" tabindex="-1"><code>OptimizeNonSkippingGroups</code> 特性标志默认启用 <a class="header-anchor" href="#optimizenonskippinggroups-特性标志默认启用" aria-label="Permalink to &quot;\`OptimizeNonSkippingGroups\` 特性标志默认启用&quot;">​</a></h3><p>从 Kotlin 2.2.0 开始，<code>OptimizeNonSkippingGroups</code> 特性标志默认启用。此优化 通过删除为不可跳过的可组合函数生成的组调用来提高运行时性能。 它不应导致运行时出现任何可观察到的行为更改。</p><p>如果你遇到任何问题，可以通过禁用此特性标志来验证此更改是否导致了问题。 请将任何问题报告到 <a href="https://issuetracker.google.com/issues/new?component=610764&amp;template=1424126" target="_blank" rel="noreferrer">Jetpack Compose 问题跟踪器</a>。</p><p>要禁用 <code>OptimizeNonSkippingGroups</code> 标志，请将以下内容添加到你的 Gradle 配置中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">composeCompiler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    featureFlag </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ComposeFeatureFlag.OptimizeNonSkippingGroups.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">disabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="已弃用的特性标志" tabindex="-1">已弃用的特性标志 <a class="header-anchor" href="#已弃用的特性标志" aria-label="Permalink to &quot;已弃用的特性标志&quot;">​</a></h3><p><code>StrongSkipping</code> 和 <code>IntrinsicRemember</code> 特性标志现在已弃用，并将在未来的版本中删除。 如果你遇到任何导致你禁用这些特性标志的问题，请将其报告到 <a href="https://issuetracker.google.com/issues/new?component=610764&amp;template=1424126" target="_blank" rel="noreferrer">Jetpack Compose 问题跟踪器</a>。</p><h2 id="破坏性变更与弃用" tabindex="-1">破坏性变更与弃用 <a class="header-anchor" href="#破坏性变更与弃用" aria-label="Permalink to &quot;破坏性变更与弃用&quot;">​</a></h2><p>本节重点介绍了值得注意的重大破坏性变更和弃用。有关此版本中所有破坏性变更和弃用的完整概述，请参见我们的<a href="/kotlin/compatibility-guide-22">兼容性指南</a>。</p><ul><li><p>从 Kotlin 2.2.0 开始，对 <a href="/kotlin/ant"></a> 构建系统的支持已弃用。Kotlin 对 Ant 的支持已长时间未进行活跃开发，并且由于其用户群相对较小，目前没有进一步维护的计划。</p><p>我们计划在 2.3.0 中移除 Ant 支持。但是，Kotlin 仍然<a href="/kotlin/contribute">欢迎贡献</a>。如果你 有兴趣成为 Ant 的外部维护者，请在此 <a href="https://youtrack.jetbrains.com/issue/KT-75875/" target="_blank" rel="noreferrer">YouTrack 问题</a>中留下评论，并将可见性设置为“jetbrains-team”。</p></li><li><p>Kotlin 2.2.0 将 <a href="/kotlin/compatibility-guide-22#deprecate-kotlinoptions-dsl"><code>kotlinOptions{}</code> Gradle 代码块的弃用级别提升为错误</a>。 请改用 <code>compilerOptions{}</code> 代码块。有关更新构建脚本的指导，请参见<a href="/kotlin/gradle-compiler-options#migrate-from-kotlinoptions-to-compileroptions">从 <code>kotlinOptions{}</code> 迁移到 <code>compilerOptions{}</code></a>。</p></li><li><p>Kotlin 脚本仍然是 Kotlin 生态系统的重要组成部分，但我们正在专注于特定的用例，例如 自定义脚本以及 <code>gradle.kts</code> 和 <code>main.kts</code> 脚本，以提供更好的体验。 要了解更多信息，请参见我们更新的<a href="https://blog.jetbrains.com/kotlin/2024/11/state-of-kotlin-scripting-2024/" target="_blank" rel="noreferrer">博文</a>。因此，Kotlin 2.2.0 弃用对以下功能的支持：</p><ul><li>REPL：要继续通过 <code>kotlinc</code> 使用 REPL，请使用 <code>-Xrepl</code> 编译器选项选择启用。</li><li>JSR-223：由于此 <a href="https://jcp.org/en/jsr/detail?id=223" target="_blank" rel="noreferrer">JSR</a> 处于 <strong>Withdrawn</strong> 状态，JSR-223 实现将继续与语言版本 1.9 配合使用，但将来不会迁移到使用 K2 编译器。</li><li><code>KotlinScriptMojo</code> Maven 插件：我们认为此插件没有足够的吸引力。如果你继续使用它，你将看到编译器警告。</li></ul></li><li></li><li><p>在 Kotlin 2.2.0 中，<a href="https://kotlinlang.org/api/kotlin-gradle-plugin/kotlin-gradle-plugin-api/org.jetbrains.kotlin.gradle.tasks/-kotlin-compile-tool/#" target="_blank" rel="noreferrer"><code>KotlinCompileTool</code></a> 中的 <a href="https://kotlinlang.org/api/kotlin-gradle-plugin/kotlin-gradle-plugin-api/org.jetbrains.kotlin.gradle.tasks/-kotlin-compile-tool/set-source.html#" target="_blank" rel="noreferrer"><code>setSource()</code></a> 函数现在<a href="/kotlin/compatibility-guide-22#correct-setsource-function-in-kotlincompiletool-to-replace-sources">替换已配置的源而不是添加</a>。 如果你想添加源而不替换现有源，请使用 <a href="https://kotlinlang.org/api/kotlin-gradle-plugin/kotlin-gradle-plugin-api/org.jetbrains.kotlin.gradle.tasks/-kotlin-compile-tool/source.html#" target="_blank" rel="noreferrer"><code>source()</code></a> 函数。</p></li><li><p><code>BaseKapt</code> 中 <a href="https://kotlinlang.org/api/kotlin-gradle-plugin/kotlin-gradle-plugin-api/org.jetbrains.kotlin.gradle.tasks/-base-kapt/annotation-processor-option-providers.html#" target="_blank" rel="noreferrer"><code>annotationProcessorOptionProviders</code></a> 的类型已从 <code>MutableList&lt;Any&gt;</code> <a href="/kotlin/compatibility-guide-22#deprecate-basekapt-annotationprocessoroptionproviders-property">更改为 <code>MutableList&lt;CommandLineArgumentProvider&gt;</code></a>。如果你的代码当前将列表作为单个元素添加，请使用 <code>addAll()</code> 函数而不是 <code>add()</code> 函数。</p></li><li><p>继传统 Kotlin/JS 后端中使用的无用代码消除 (DCE) 工具弃用之后， 与 DCE 相关的其余 DSL 已从 Kotlin Gradle 插件中移除：</p><ul><li><code>org.jetbrains.kotlin.gradle.dsl.KotlinJsDce</code> 接口</li><li><code>org.jetbrains.kotlin.gradle.targets.js.dsl.KotlinJsBrowserDsl.dceTask(body: Action&lt;KotlinJsDce&gt;)</code> 函数</li><li><code>org.jetbrains.kotlin.gradle.dsl.KotlinJsDceCompilerToolOptions</code> 接口</li><li><code>org.jetbrains.kotlin.gradle.dsl.KotlinJsDceOptions</code> 接口</li></ul><p>当前的 <a href="/kotlin/js-ir-compiler">JS IR 编译器</a>开箱即用支持 DCE，并且 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.js/-js-export/" target="_blank" rel="noreferrer"><code>@JsExport</code></a> 注解允许指定在 DCE 期间保留哪些 Kotlin 函数和类。</p></li><li><p>已弃用的 <code>kotlin-android-extensions</code> 插件<a href="/kotlin/compatibility-guide-22#deprecate-kotlin-android-extensions-plugin">已在 Kotlin 2.2.0 中移除</a>。 请使用 <code>kotlin-parcelize</code> 插件用于 <code>Parcelable</code> 实现生成器，并使用 Android Jetpack 的<a href="https://developer.android.com/topic/libraries/view-binding" target="_blank" rel="noreferrer">视图绑定</a>用于合成视图。</p></li><li><p>实验性的 <code>kotlinArtifacts</code> API <a href="/kotlin/compatibility-guide-22#deprecate-kotlinartifacts-api">已在 Kotlin 2.2.0 中弃用</a>。 请使用 Kotlin Gradle 插件中现有的 DSL 来<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-build-native-binaries.html" target="_blank" rel="noreferrer">构建最终的原生二进制文件</a>。如果不足以进行迁移，请在此 <a href="https://youtrack.jetbrains.com/issue/KT-74953" target="_blank" rel="noreferrer">YT 问题</a>中留下评论。</p></li><li><p><code>KotlinCompilation.source</code>，在 Kotlin 1.9.0 中已弃用，现在已<a href="/kotlin/compatibility-guide-22#deprecate-kotlincompilation-source-api">从 Kotlin Gradle 插件中移除</a>。</p></li><li><p>实验性通用化模式的参数<a href="/kotlin/compatibility-guide-22#deprecate-commonization-parameters">已在 Kotlin 2.2.0 中弃用</a>。 清除通用化缓存以删除无效的编译构件。</p></li><li><p>已弃用的 <code>konanVersion</code> 属性现在已<a href="/kotlin/compatibility-guide-22#deprecate-konanversion-in-cinteropprocess">从 <code>CInteropProcess</code> 任务中移除</a>。 请改用 <code>CInteropProcess.kotlinNativeVersion</code>。</p></li><li><p>使用已弃用的 <code>destinationDir</code> 属性现在将<a href="/kotlin/compatibility-guide-22#deprecate-destinationdir-in-cinteropprocess">导致错误</a>。 请改用 <code>CInteropProcess.destinationDirectory.set()</code>。</p></li></ul><h2 id="文档更新" tabindex="-1">文档更新 <a class="header-anchor" href="#文档更新" aria-label="Permalink to &quot;文档更新&quot;">​</a></h2><p>此版本带来了显著的文档更改，包括将 Kotlin Multiplatform 文档迁移到 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/get-started.html" target="_blank" rel="noreferrer">KMP 门户</a>。</p><p>此外，我们启动了一项文档调查，创建了新页面和教程，并改进了现有页面。</p><h3 id="kotlin-的文档调查" tabindex="-1">Kotlin 的文档调查 <a class="header-anchor" href="#kotlin-的文档调查" aria-label="Permalink to &quot;Kotlin 的文档调查&quot;">​</a></h3><p>我们正在寻求真实的反馈，以改进 Kotlin 文档。</p><p>调查大约需要 15 分钟才能完成，你的意见将有助于塑造 Kotlin 文档的未来。</p><p><a href="https://surveys.jetbrains.com/s3/Kotlin-Docs-2025" target="_blank" rel="noreferrer">在此处参与调查</a>。</p><h3 id="新的和改进的教程" tabindex="-1">新的和改进的教程 <a class="header-anchor" href="#新的和改进的教程" aria-label="Permalink to &quot;新的和改进的教程&quot;">​</a></h3><ul><li><a href="/kotlin/kotlin-tour-welcome">Kotlin 中级教程</a> – 将你对 Kotlin 的理解提升到新的水平。了解何时使用扩展函数、接口、类等。</li><li><a href="/kotlin/spring-ai-guide">构建使用 Spring AI 的 Kotlin 应用程序</a> – 学习如何创建一个使用 OpenAI 和向量数据库回答问题的 Kotlin 应用程序。</li><li><a href="/kotlin/jvm-create-project-with-spring-boot"></a> – 学习如何使用 IntelliJ IDEA 的 <strong>New Project</strong> 向导通过 Gradle 创建 Spring Boot 项目。</li><li><a href="/kotlin/mapping-primitive-data-types-from-c">Kotlin 和 C 映射教程系列</a> – 了解不同类型和构造在 Kotlin 和 C 之间如何映射。</li><li><a href="/kotlin/native-app-with-c-and-libcurl">使用 C 互操作和 libcurl 创建应用程序</a> – 创建一个可以使用 libcurl C 库原生运行的简单 HTTP 客户端。</li><li><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/create-kotlin-multiplatform-library.html" target="_blank" rel="noreferrer">创建你的 Kotlin Multiplatform 库</a> – 学习如何使用 IntelliJ IDEA 创建和发布多平台库。</li><li><a href="https://ktor.io/docs/full-stack-development-with-kotlin-multiplatform.html" target="_blank" rel="noreferrer">使用 Ktor 和 Kotlin Multiplatform 构建全栈应用程序</a> – 此教程现在使用 IntelliJ IDEA 而不是 Fleet，以及 Material 3 和最新版本的 Ktor 和 Kotlin。</li><li><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/compose-resource-environment.html" target="_blank" rel="noreferrer">在你的 Compose Multiplatform 应用程序中管理本地资源环境</a> – 学习如何管理应用程序的资源环境，例如应用内主题和语言。</li></ul><h3 id="新的和改进的页面" tabindex="-1">新的和改进的页面 <a class="header-anchor" href="#新的和改进的页面" aria-label="Permalink to &quot;新的和改进的页面&quot;">​</a></h3><ul><li><a href="/kotlin/kotlin-ai-apps-development-overview">Kotlin 用于 AI 概述</a> – 探索 Kotlin 在构建 AI 驱动应用程序方面的能力。</li><li><a href="https://kotlinlang.org/docs/dokka-migration.html" target="_blank" rel="noreferrer">Dokka 迁移指南</a> – 学习如何迁移到 Dokka Gradle 插件的 v2。</li><li><a href="/kotlin/metadata-jvm"></a> – 探索有关为 JVM 编译的 Kotlin 类读取、修改和生成元数据的指南。</li><li><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-cocoapods-overview.html" target="_blank" rel="noreferrer">CocoaPods 集成</a> – 通过教程和示例项目了解如何设置环境、添加 Pod 依赖项或将 Kotlin 项目用作 CocoaPod 依赖项。</li><li>Compose Multiplatform 的新页面，以支持 iOS 稳定版本： <ul><li>特别是<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/compose-navigation.html" target="_blank" rel="noreferrer">导航</a>和<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/compose-navigation-deep-links.html" target="_blank" rel="noreferrer">深层链接</a>。</li><li><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/compose-layout.html" target="_blank" rel="noreferrer">在 Compose 中实现布局</a>。</li><li><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/compose-localize-strings.html" target="_blank" rel="noreferrer">字符串本地化</a>和其他国际化页面，例如对 RTL 语言的支持。</li></ul></li><li><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/compose-hot-reload.html" target="_blank" rel="noreferrer">Compose 热重载</a> – 学习如何将 Compose 热重载与桌面目标一起使用，以及如何将其添加到现有项目中。</li><li><a href="https://www.jetbrains.com/help/exposed/migrations.html" target="_blank" rel="noreferrer">Exposed 迁移</a> – 了解 Exposed 为管理数据库模式更改提供的工具。</li></ul><h2 id="如何更新到-kotlin-2-2-0" tabindex="-1">如何更新到 Kotlin 2.2.0 <a class="header-anchor" href="#如何更新到-kotlin-2-2-0" aria-label="Permalink to &quot;如何更新到 Kotlin 2.2.0&quot;">​</a></h2><p>Kotlin 插件作为捆绑插件分发在 IntelliJ IDEA 和 Android Studio 中。</p><p>要更新到新的 Kotlin 版本，请在构建脚本中<a href="/kotlin/releases#update-to-a-new-kotlin-version">将 Kotlin 版本</a>更改 为 2.2.0。</p>`,70))])}const C=p(r,[["render",d]]);export{b as __pageData,C as default};
