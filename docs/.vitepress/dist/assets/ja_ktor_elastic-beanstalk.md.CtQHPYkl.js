import{_ as c,C as t,c as u,o as g,j as s,G as e,ag as p,a as i,w as n}from"./chunks/framework.Bksy39di.js";const q=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ja/ktor/elastic-beanstalk.md","filePath":"ja/ktor/elastic-beanstalk.md","lastUpdated":1755457140000}'),b={name:"ja/ktor/elastic-beanstalk.md"};function m(E,a,f,y,v,_){const d=t("show-structure"),l=t("control"),h=t("tldr"),o=t("code-block"),r=t("TabItem"),k=t("Tabs");return g(),u("div",null,[a[8]||(a[8]=s("h1",{id:"aws-elastic-beanstalk",tabindex:"-1"},[i("AWS Elastic Beanstalk "),s("a",{class:"header-anchor",href:"#aws-elastic-beanstalk","aria-label":'Permalink to "AWS Elastic Beanstalk"'},"​")],-1)),e(d,{for:"chapter",depth:"2"}),e(h,null,{default:n(()=>[s("p",null,[e(l,null,{default:n(()=>a[0]||(a[0]=[i("初期プロジェクト")])),_:1}),a[1]||(a[1]=i(": ")),a[2]||(a[2]=s("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/embedded-server"},"embedded-server",-1)),a[3]||(a[3]=i(" または ")),a[4]||(a[4]=s("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/engine-main"},"engine-main",-1))]),s("p",null,[e(l,null,{default:n(()=>a[5]||(a[5]=[i("最終プロジェクト")])),_:1}),a[6]||(a[6]=i(": ")),a[7]||(a[7]=s("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/aws-elastic-beanstalk"},"aws-elastic-beanstalk",-1))])]),_:1}),a[9]||(a[9]=p(`<p>このチュートリアルでは、Ktorアプリケーションを準備し、AWS Elastic Beanstalkにデプロイする方法を示します。<a href="./server-create-and-configure">Ktorサーバーを作成する</a>方法に応じて、以下のいずれかの初期プロジェクトを使用できます。</p><ul><li><a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/embedded-server" target="_blank" rel="noreferrer">embedded-server</a></li><li><a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/engine-main" target="_blank" rel="noreferrer">engine-main</a></li></ul><blockquote><p>Javaアプリケーションのデプロイに関する詳細については、<a href="https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/create_deploy_Java.html" target="_blank" rel="noreferrer">Elastic Beanstalkのドキュメント</a>を参照してください。</p></blockquote><h2 id="prerequisites" tabindex="-1">前提条件 <a class="header-anchor" href="#prerequisites" aria-label="Permalink to &quot;前提条件 {id=&quot;prerequisites&quot;}&quot;">​</a></h2><p>このチュートリアルを開始する前に、AWSアカウントを作成する必要があります。</p><h2 id="clone" tabindex="-1">サンプルアプリケーションのクローン <a class="header-anchor" href="#clone" aria-label="Permalink to &quot;サンプルアプリケーションのクローン {id=&quot;clone&quot;}&quot;">​</a></h2><p>サンプルアプリケーションを開くには、以下の手順に従ってください。</p><ol><li>Ktorドキュメントリポジトリをクローンし、<a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets" target="_blank" rel="noreferrer">codeSnippets</a>プロジェクトを開きます。</li><li><a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/embedded-server" target="_blank" rel="noreferrer">embedded-server</a>または<a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/engine-main" target="_blank" rel="noreferrer">engine-main</a>サンプルを開きます。これらのサンプルは、<a href="./server-create-and-configure">Ktorサーバーの作成と設定</a>に対する異なるアプローチを示しています。コードで、または設定ファイルを使用して行います。これらのプロジェクトをデプロイする唯一の違いは、受信リクエストをリッスンするために使用する<a href="#port">ポートを指定する</a>方法です。</li></ol><h2 id="prepare-app" tabindex="-1">アプリケーションの準備 <a class="header-anchor" href="#prepare-app" aria-label="Permalink to &quot;アプリケーションの準備 {id=&quot;prepare-app&quot;}&quot;">​</a></h2><h3 id="port" tabindex="-1">ステップ1: ポートの設定 <a class="header-anchor" href="#port" aria-label="Permalink to &quot;ステップ1: ポートの設定 {id=&quot;port&quot;}&quot;">​</a></h3><p>まず、受信リクエストをリッスンするために使用するポートを指定する必要があります。Elastic Beanstalkは、ポート5000であなたのアプリケーションにリクエストを転送します。オプションで、<code>PORT</code>環境変数を設定することにより、デフォルトのポートを上書きできます。<a href="./server-create-and-configure">Ktorサーバーを設定する</a>方法に応じて、以下のいずれかの方法でポートを設定できます。</p><ul><li><p>サーバー設定がコードで指定されている<a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/embedded-server" target="_blank" rel="noreferrer">embedded-server</a>サンプルを選択した場合、<code>System.getenv</code>を使用して環境変数の値を取得するか、環境変数が指定されていない場合はデフォルトの_5000_値を使用できます。<code>src/main/kotlin/com/example</code>フォルダーにある<code>Application.kt</code>ファイルを開き、<code>embeddedServer</code>関数の<code>port</code>パラメーター値を以下に示すように変更します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   embeddedServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Netty, port </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getenv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;PORT&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)?:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;5000&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(wait </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>サーバー設定が<code>application.conf</code>ファイルで指定されている<a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/engine-main" target="_blank" rel="noreferrer">engine-main</a>サンプルを選択した場合、<code>\${ENV}</code>構文を使用して、環境変数を<code>port</code>パラメーターに割り当てることができます。<code>src/main/resources</code>にある<code>application.conf</code>ファイルを開き、以下に示すように更新します。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ktor {</span></span>
<span class="line"><span>    deployment {</span></span>
<span class="line"><span>        port = 5000</span></span>
<span class="line"><span>        port = \${?PORT}</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div></li></ul><h3 id="configure-ktor-plugin" tabindex="-1">ステップ2: Ktorプラグインの適用 <a class="header-anchor" href="#configure-ktor-plugin" aria-label="Permalink to &quot;ステップ2: Ktorプラグインの適用 {id=&quot;configure-ktor-plugin&quot;}&quot;">​</a></h3><p>このチュートリアルでは、<a href="./server-fatjar">fat JAR</a>を使用してアプリケーションをElastic Beanstalkにデプロイする方法を示します。fat JARを生成するには、Ktorプラグインを適用する必要があります。<code>build.gradle.kts</code>ファイルを開き、<code>plugins</code>ブロックにプラグインを追加します。</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">plugins {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    id(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;io.ktor.plugin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) version </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;3.2.3&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>次に、<a href="./server-dependencies#create-entry-point">メインアプリケーションクラス</a>が設定されていることを確認してください。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    mainClass.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;io.ktor.server.netty.EngineMain&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="build" tabindex="-1">Fat JARのビルド <a class="header-anchor" href="#build" aria-label="Permalink to &quot;Fat JARのビルド {id=&quot;build&quot;}&quot;">​</a></h2><p>Fat JARをビルドするには、ターミナルを開き、<a href="#configure-ktor-plugin">Ktorプラグイン</a>によって提供される<code>buildFatJar</code>タスクを実行します。</p>`,19)),e(k,{group:"os"},{default:n(()=>[e(r,{title:"Linux/macOS","group-key":"unix"},{default:n(()=>[e(o,{code:"./gradlew :aws-elastic-beanstalk:buildFatJar"})]),_:1}),e(r,{title:"Windows","group-key":"windows"},{default:n(()=>[e(o,{code:"gradlew.bat :aws-elastic-beanstalk:buildFatJar"})]),_:1})]),_:1}),a[10]||(a[10]=p(`<p>このビルドが完了すると、<code>build/libs</code>ディレクトリに<code>aws-elastic-beanstalk-all.jar</code>ファイルが表示されるはずです。</p><h2 id="deploy-app" tabindex="-1">アプリケーションのデプロイ <a class="header-anchor" href="#deploy-app" aria-label="Permalink to &quot;アプリケーションのデプロイ {id=&quot;deploy-app&quot;}&quot;">​</a></h2><p>アプリケーションをデプロイするには、<a href="https://aws.amazon.com/console/" target="_blank" rel="noreferrer">AWSマネジメントコンソール</a>にサインインし、以下の手順に従ってください。</p><ol><li><strong>AWSサービス</strong>グループで<strong>Elastic Beanstalk</strong>サービスを開きます。</li><li>開いたページで、<strong>アプリケーションの作成</strong>をクリックします。</li><li>以下のアプリケーション設定を指定します。 <ul><li><strong>アプリケーション名</strong>: アプリケーション名を指定します（例：<em>Sample Ktor app</em>）。</li><li><strong>プラットフォーム</strong>: リストから_Java_を選択します。</li><li><strong>プラットフォームブランチ</strong>: _64bit Amazon Linux 2で実行されるCorretto 11_を選択します。</li><li><strong>アプリケーションコード</strong>: _コードのアップロード_を選択します。</li><li><strong>ソースコードのオリジン</strong>: _ローカルファイル_を選択します。次に、<strong>ファイルの選択</strong>ボタンをクリックし、<a href="#build">前の手順</a>で生成されたFat JARを選択します。ファイルがアップロードされるまで待ちます。</li></ul></li><li><strong>アプリケーションの作成</strong>ボタンをクリックし、Beanstalkが環境を作成しアプリケーションを公開するまで数分間待ちます。<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>INFO    Instance deployment completed successfully.</span></span>
<span class="line"><span>INFO    Application available at Samplektorapp-env.eba-bnye2kpu.us-east-2.elasticbeanstalk.com.</span></span>
<span class="line"><span>INFO    Successfully launched environment: Samplektorapp-env</span></span></code></pre></div></li></ol>`,4))])}const S=c(b,[["render",m]]);export{q as __pageData,S as default};
