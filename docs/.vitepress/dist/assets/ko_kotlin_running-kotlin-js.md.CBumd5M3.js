import{_ as i,a,b as t}from"./chunks/browser-console-output.ORKOEfuB.js";import{_ as n,c as l,o as e,ag as p}from"./chunks/framework.Bksy39di.js";const u=JSON.parse('{"title":"Kotlin/JS 실행하기","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kotlin/running-kotlin-js.md","filePath":"ko/kotlin/running-kotlin-js.md","lastUpdated":1754307826000}'),h={name:"ko/kotlin/running-kotlin-js.md"};function k(o,s,d,r,E,g){return e(),l("div",null,s[0]||(s[0]=[p(`<h1 id="kotlin-js-실행하기" tabindex="-1">Kotlin/JS 실행하기 <a class="header-anchor" href="#kotlin-js-실행하기" aria-label="Permalink to &quot;Kotlin/JS 실행하기&quot;">​</a></h1><p>Kotlin/JS 프로젝트는 Kotlin Multiplatform Gradle 플러그인으로 관리되므로, 적절한 태스크를 사용하여 프로젝트를 실행할 수 있습니다. 빈 프로젝트에서 시작하는 경우, 실행할 샘플 코드가 있는지 확인하세요. <code>src/jsMain/kotlin/App.kt</code> 파일을 생성하고 작은 &quot;Hello, World&quot; 유형의 코드 스니펫으로 채우세요:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, Kotlin/JS!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>대상 플랫폼에 따라 코드를 처음 실행하기 위해 일부 플랫폼별 추가 설정이 필요할 수 있습니다.</p><h2 id="node-js-타겟-실행하기" tabindex="-1">Node.js 타겟 실행하기 <a class="header-anchor" href="#node-js-타겟-실행하기" aria-label="Permalink to &quot;Node.js 타겟 실행하기&quot;">​</a></h2><p>Kotlin/JS로 Node.js를 타겟팅할 때, 단순히 <code>jsNodeDevelopmentRun</code> Gradle 태스크를 실행하면 됩니다. 예를 들어, Gradle 래퍼를 사용하여 명령줄을 통해 이를 수행할 수 있습니다:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jsNodeDevelopmentRun</span></span></code></pre></div><p>IntelliJ IDEA를 사용하는 경우, <code>jsNodeDevelopmentRun</code> 액션을 Gradle 도구 창에서 찾을 수 있습니다:</p><p><img src="`+i+'" alt="Gradle Run task in IntelliJ IDEA" width="700"></p><p>첫 실행 시, <code>kotlin.multiplatform</code> Gradle 플러그인이 프로젝트를 실행하는 데 필요한 모든 종속성(dependencies)을 다운로드합니다. 빌드가 완료되면 프로그램이 실행되고, 터미널에서 로깅 출력을 확인할 수 있습니다:</p><p><img src="'+a+`" alt="Executing the JS target in a Kotlin Multiplatform project in IntelliJ IDEA" width="700"></p><h2 id="브라우저-타겟-실행하기" tabindex="-1">브라우저 타겟 실행하기 <a class="header-anchor" href="#브라우저-타겟-실행하기" aria-label="Permalink to &quot;브라우저 타겟 실행하기&quot;">​</a></h2><p>브라우저를 타겟팅할 때, 프로젝트에는 HTML 페이지가 있어야 합니다. 이 페이지는 애플리케이션 작업 중 개발 서버에서 제공(serve)되며, 컴파일된 Kotlin/JS 파일을 포함해야 합니다. <code>/src/jsMain/resources/index.html</code> HTML 파일을 생성하고 채우세요:</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;!</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">DOCTYPE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;en&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> charset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;UTF-8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;JS Client&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;js-tutorial.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>기본적으로 참조되어야 하는 프로젝트의 생성된 아티팩트(webpack을 통해 생성됨)의 이름은 프로젝트 이름입니다 (이 경우, <code>js-tutorial</code>). 프로젝트 이름을 <code>followAlong</code>으로 지정했다면, <code>js-tutorial.js</code> 대신 <code>followAlong.js</code>를 포함해야 합니다.</p><p>이러한 조정을 마친 후, 통합 개발 서버를 시작하세요. Gradle 래퍼를 통해 명령줄에서 이를 수행할 수 있습니다:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jsBrowserDevelopmentRun</span></span></code></pre></div><p>IntelliJ IDEA에서 작업하는 경우, <code>jsBrowserDevelopmentRun</code> 액션을 Gradle 도구 창에서 찾을 수 있습니다.</p><p>프로젝트가 빌드되면, 내장된 <code>webpack-dev-server</code>가 실행을 시작하고, 이전에 지정한 HTML 파일을 가리키는 (겉보기에는 빈) 브라우저 창을 엽니다. 프로그램이 올바르게 실행되는지 확인하려면, 브라우저의 개발자 도구 (예를 들어, 마우스 오른쪽 버튼을 클릭하고 <em>검사</em> 액션을 선택)를 여세요. 개발자 도구 내부에서 콘솔로 이동하면 실행된 JavaScript 코드의 결과를 볼 수 있습니다:</p><p><img src="`+t+'" alt="Console output in browser developer tools" width="700"></p><p>이 설정을 통해 코드 변경 후 프로젝트를 다시 컴파일하여 변경 사항을 확인할 수 있습니다. Kotlin/JS는 또한 개발 중에 애플리케이션을 자동으로 재빌드하는 더 편리한 방법도 지원합니다. 이 _연속 모드_를 설정하는 방법을 알아보려면 <a href="/ko/kotlin/dev-server-continuous-compilation">해당 튜토리얼</a>을 확인하세요.</p>',21)]))}const m=n(h,[["render",k]]);export{u as __pageData,m as default};
