import{_ as h}from"./chunks/ios-hierarchy-example.OtFev01v.js";import{_ as k,C as r,c as d,o as c,j as i,G as t,ag as l,a,w as e}from"./chunks/framework.Bksy39di.js";const C=JSON.parse('{"title":"Kotlin 1.6.20 有什麼新功能","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/whatsnew1620.md","filePath":"zh-Hant/kotlin/whatsnew1620.md","lastUpdated":1754307826000}'),g={name:"zh-Hant/kotlin/whatsnew1620.md"};function E(u,s,y,b,m,f){const o=r("YouTubeVideo"),n=r("tab"),p=r("tabs");return c(),d("div",null,[s[8]||(s[8]=i("h1",{id:"kotlin-1-6-20-有什麼新功能",tabindex:"-1"},[a("Kotlin 1.6.20 有什麼新功能 "),i("a",{class:"header-anchor",href:"#kotlin-1-6-20-有什麼新功能","aria-label":'Permalink to "Kotlin 1.6.20 有什麼新功能"'},"​")],-1)),s[9]||(s[9]=i("p",null,[i("a",{href:"/zh-Hant/kotlin/releases#release-details"},"發佈日期：2022 年 4 月 4 日")],-1)),s[10]||(s[10]=i("p",null,"Kotlin 1.6.20 揭示了未來語言功能的預覽，將階層式結構設定為多平台專案的預設值，並為其他元件帶來了演進式改進。",-1)),s[11]||(s[11]=i("p",null,"您也可以在這段影片中找到變更的簡要概述：",-1)),t(o,{src:"https://www.youtube.com/v/8F19ds109-o",title:"What's new in Kotlin 1.6.20"}),s[12]||(s[12]=l(`<h2 id="語言" tabindex="-1">語言 <a class="header-anchor" href="#語言" aria-label="Permalink to &quot;語言&quot;">​</a></h2><p>在 Kotlin 1.6.20 中，您可以嘗試兩項新的語言功能：</p><ul><li><a href="#prototype-of-context-receivers-for-kotlin-jvm">Kotlin/JVM 的情境接收器原型</a></li><li><a href="#definitely-non-nullable-types">明確非空值型別</a></li></ul><h3 id="kotlin-jvm-的情境接收器原型" tabindex="-1">Kotlin/JVM 的情境接收器原型 <a class="header-anchor" href="#kotlin-jvm-的情境接收器原型" aria-label="Permalink to &quot;Kotlin/JVM 的情境接收器原型&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>此功能為原型，僅適用於 Kotlin/JVM。啟用 <code>-Xcontext-receivers</code> 後， 編譯器將產生無法用於正式環境程式碼的預發行二進位檔。 僅在您的練習專案中使用情境接收器。 我們感謝您在 <a href="https://youtrack.jetbrains.com/issues/KT" target="_blank" rel="noreferrer">YouTrack</a> 中提供的意見回饋。</p></div><p>有了 Kotlin 1.6.20，您不再僅限於擁有一個接收器。如果您需要更多，可以透過在宣告中新增情境接收器，使函數、屬性和類別依情境而定（或_情境相關_）。情境宣告會執行以下操作：</p><ul><li>它要求所有宣告的情境接收器都必須作為隱式接收器存在於呼叫者的作用域中。</li><li>它將宣告的情境接收器作為隱式接收器帶入其主體作用域。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LoggingContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> log: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Logger</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // This context provides a reference to a logger </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(LoggingContext)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> startBusinessOperation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // You can access the log property since LoggingContext is an implicit receiver</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Operation has started&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(loggingContext: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LoggingContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(loggingContext) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // You need to have LoggingContext in a scope as an implicit receiver</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // to call startBusinessOperation()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        startBusinessOperation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>若要在您的專案中啟用情境接收器，請使用 <code>-Xcontext-receivers</code> 編譯器選項。 您可以在 <a href="https://github.com/Kotlin/KEEP/blob/master/proposals/context-receivers.md#detailed-design" target="_blank" rel="noreferrer">KEEP</a> 中找到此功能的詳細說明及其語法。</p><p>請注意，此實作是原型：</p><ul><li>啟用 <code>-Xcontext-receivers</code> 後，編譯器將產生無法用於正式環境程式碼的預發行二進位檔</li><li>目前對情境接收器的 IDE 支援最少</li></ul><p>請在您的練習專案中試用此功能，並在此 <a href="https://youtrack.jetbrains.com/issue/KT-42435" target="_blank" rel="noreferrer">YouTrack 問題</a> 中與我們分享您的想法和經驗。 如果您遇到任何問題，請<a href="https://kotl.in/issue" target="_blank" rel="noreferrer">提交新問題</a>。</p><h3 id="明確非空值型別" tabindex="-1">明確非空值型別 <a class="header-anchor" href="#明確非空值型別" aria-label="Permalink to &quot;明確非空值型別&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>明確非空值型別處於 <a href="/zh-Hant/kotlin/components-stability">Beta 測試版</a>階段。它們幾乎穩定， 但未來可能需要遷移步驟。 我們將盡力減少您必須進行的任何變更。</p></div><p>為了在擴充泛型 Java 類別和介面時提供更好的互通性，Kotlin 1.6.20 允許您使用新語法 <code>T &amp; Any</code> 在使用站點上將泛型型別參數標記為明確非空值。 此語法形式來自<a href="https://en.wikipedia.org/wiki/Intersection_type" target="_blank" rel="noreferrer">交集型別</a>的表示法，目前僅限於 <code>&amp;</code> 左側帶有可空值上限且右側帶有非空值 <code>Any</code> 的型別參數：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">elvisLike</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp; Any): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp; Any </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x ?: y</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // OK</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    elvisLike</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).length</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Error: &#39;null&#39; cannot be a value of a non-null type</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    elvisLike</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).length</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // OK</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    elvisLike</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?&gt;(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).length</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Error: &#39;null&#39; cannot be a value of a non-null type</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    elvisLike</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?&gt;(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).length</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>將語言版本設定為 <code>1.7</code> 以啟用此功能：</p>`,17)),t(p,{group:"build-script"},{default:e(()=>[t(n,{title:"Kotlin","group-key":"kotlin"},{default:e(()=>s[0]||(s[0]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    sourceSets."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"all"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        languageSettings."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"apply"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            languageVersion "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "1.7"')]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),t(n,{title:"Groovy","group-key":"groovy"},{default:e(()=>s[1]||(s[1]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"kotlin {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    sourceSets"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"all {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        languageSettings {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            languageVersion "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," '1.7'")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),s[13]||(s[13]=l(`<p>在 <a href="https://github.com/Kotlin/KEEP/blob/master/proposals/definitely-non-nullable-types.md" target="_blank" rel="noreferrer">KEEP</a> 中了解有關明確非空值型別的更多資訊。</p><h2 id="kotlin-jvm" tabindex="-1">Kotlin/JVM <a class="header-anchor" href="#kotlin-jvm" aria-label="Permalink to &quot;Kotlin/JVM&quot;">​</a></h2><p>Kotlin 1.6.20 引入了：</p><ul><li>JVM 介面中預設方法的相容性改進：<a href="#new-jvmdefaultwithcompatibility-annotation-for-interfaces">介面的新 <code>@JvmDefaultWithCompatibility</code> 註解</a>和 <a href="#compatibility-changes-in-the-xjvm-default-modes"><code>-Xjvm-default</code> 模式中的相容性變更</a></li><li><a href="#support-for-parallel-compilation-of-a-single-module-in-the-jvm-backend">支援 JVM 後端中單一模組的平行編譯</a></li><li><a href="#support-for-callable-references-to-functional-interface-constructors">支援對函數介面建構子的可呼叫引用</a></li></ul><h3 id="介面的新-jvmdefaultwithcompatibility-註解" tabindex="-1">介面的新 @JvmDefaultWithCompatibility 註解 <a class="header-anchor" href="#介面的新-jvmdefaultwithcompatibility-註解" aria-label="Permalink to &quot;介面的新 @JvmDefaultWithCompatibility 註解&quot;">​</a></h3><p>Kotlin 1.6.20 引入了新註解 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.jvm/-jvm-default-with-compatibility/" target="_blank" rel="noreferrer"><code>@JvmDefaultWithCompatibility</code></a>：將其與 <code>-Xjvm-default=all</code> 編譯器選項一起使用，<a href="/zh-Hant/kotlin/java-to-kotlin-interop#default-methods-in-interfaces">為 JVM 介面中的任何 Kotlin 介面中的任何非抽象成員建立預設方法</a>。</p><p>如果有一些客戶端使用您的 Kotlin 介面，且這些介面是在沒有 <code>-Xjvm-default=all</code> 選項的情況下編譯的，那麼它們可能與使用此選項編譯的程式碼二進位不相容。 在 Kotlin 1.6.20 之前，為避免此相容性問題，<a href="https://blog.jetbrains.com/kotlin/2020/07/kotlin-1-4-m3-generating-default-methods-in-interfaces/#JvmDefaultWithoutCompatibility" target="_blank" rel="noreferrer">建議的方法</a>是使用 <code>-Xjvm-default=all-compatibility</code> 模式，並為不需要此類相容性的介面使用 <code>@JvmDefaultWithoutCompatibility</code> 註解。</p><p>此方法有一些缺點：</p><ul><li>新增新介面時，您可能會輕易忘記新增註解。</li><li>通常非公開部分比公共應用程式介面有更多介面，因此您最終會在程式碼中許多地方使用此註解。</li></ul><p>現在，您可以使用 <code>-Xjvm-default=all</code> 模式並使用 <code>@JvmDefaultWithCompatibility</code> 註解標記介面。 這允許您一次將此註解新增到公共應用程式介面中的所有介面，並且您無需為新的非公開程式碼使用任何註解。</p><p>請在此 <a href="https://youtrack.jetbrains.com/issue/KT-48217" target="_blank" rel="noreferrer">YouTrack 問題</a>中留下您對此新註解的意見回饋。</p><h3 id="xjvm-default-模式中的相容性變更" tabindex="-1">-Xjvm-default 模式中的相容性變更 <a class="header-anchor" href="#xjvm-default-模式中的相容性變更" aria-label="Permalink to &quot;-Xjvm-default 模式中的相容性變更&quot;">​</a></h3><p>Kotlin 1.6.20 增加了將預設模式（<code>-Xjvm-default=disable</code> 編譯器選項）中的模組與使用 <code>-Xjvm-default=all</code> 或 <code>-Xjvm-default=all-compatibility</code> 模式編譯的模組進行編譯的選項。 一如既往，如果所有模組都使用 <code>-Xjvm-default=all</code> 或 <code>-Xjvm-default=all-compatibility</code> 模式，編譯也會成功。 您可以在此 <a href="https://youtrack.jetbrains.com/issue/KT-47000" target="_blank" rel="noreferrer">YouTrack 問題</a>中留下您的意見回饋。</p><p>Kotlin 1.6.20 棄用了編譯器選項 <code>-Xjvm-default</code> 的 <code>compatibility</code> 和 <code>enable</code> 模式。 其他模式的描述中關於相容性的變更，但整體邏輯保持不變。 您可以查閱<a href="/zh-Hant/kotlin/java-to-kotlin-interop#compatibility-modes-for-default-methods">更新的描述</a>。</p><p>有關 Java 互通性中預設方法的更多資訊，請參閱<a href="/zh-Hant/kotlin/java-to-kotlin-interop#default-methods-in-interfaces">互通性文件</a>和 <a href="https://blog.jetbrains.com/kotlin/2020/07/kotlin-1-4-m3-generating-default-methods-in-interfaces/" target="_blank" rel="noreferrer">此部落格文章</a>。</p><h3 id="支援-jvm-後端中單一模組的平行編譯" tabindex="-1">支援 JVM 後端中單一模組的平行編譯 <a class="header-anchor" href="#支援-jvm-後端中單一模組的平行編譯" aria-label="Permalink to &quot;支援 JVM 後端中單一模組的平行編譯&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>支援 JVM 後端中單一模組的平行編譯是 <a href="/zh-Hant/kotlin/components-stability">實驗性</a>的。 它可能隨時被移除或變更。需要選擇啟用（詳情見下），您應該僅將其用於評估目的。 我們非常感謝您在 <a href="https://youtrack.jetbrains.com/issue/KT-46085" target="_blank" rel="noreferrer">YouTrack</a> 中提供意見回饋。</p></div><p>我們正在繼續努力<a href="https://youtrack.jetbrains.com/issue/KT-46768" target="_blank" rel="noreferrer">改進新的 JVM IR 後端編譯時間</a>。 在 Kotlin 1.6.20 中，我們新增了實驗性 JVM IR 後端模式，以平行編譯模組中的所有檔案。 平行編譯可以將總編譯時間縮短多達 15%。</p><p>使用<a href="/zh-Hant/kotlin/compiler-reference#compiler-options">編譯器選項</a> <code>-Xbackend-threads</code> 啟用實驗性平行後端模式。 此選項請使用以下引數：</p><ul><li><code>N</code> 是您要使用的執行緒數量。它不應大於您的 CPU 核心數量；否則，由於執行緒間的內容切換，平行化將停止有效</li><li><code>0</code> 為每個 CPU 核心使用單獨的執行緒</li></ul><p><a href="/zh-Hant/kotlin/gradle">Gradle</a> 可以平行執行任務，但這種平行化在專案（或專案的主要部分）在 Gradle 看來只是一個大任務時，並沒有太大幫助。 如果您有一個非常大的單一巨型模組，請使用平行編譯以更快地編譯。 如果您的專案由許多小型模組組成，並且建置由 Gradle 平行化，那麼增加另一層平行化可能會由於內容切換而損害效能。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>平行編譯有一些限制： * 它不適用於 <a href="/zh-Hant/kotlin/kapt">kapt</a>，因為 kapt 會停用 IR 後端 * 根據設計，它需要更多的 JVM 堆積記憶體。堆積記憶體量與執行緒數量成正比</p></div><h3 id="支援對函數介面建構子的可呼叫引用" tabindex="-1">支援對函數介面建構子的可呼叫引用 <a class="header-anchor" href="#支援對函數介面建構子的可呼叫引用" aria-label="Permalink to &quot;支援對函數介面建構子的可呼叫引用&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>支援對函數介面建構子的可呼叫引用是 <a href="/zh-Hant/kotlin/components-stability">實驗性</a>的。 它可能隨時被移除或變更。需要選擇啟用（詳情見下），您應該僅將其用於評估目的。 我們非常感謝您在 <a href="https://youtrack.jetbrains.com/issue/KT-47939" target="_blank" rel="noreferrer">YouTrack</a> 中提供意見回饋。</p></div><p>支援對<a href="/zh-Hant/kotlin/reflection#callable-references">可呼叫引用</a>到函數介面建構子的功能，提供了一種原始碼相容的方式，可以從具有建構子函數的介面遷移到<a href="/zh-Hant/kotlin/fun-interfaces">函數介面</a>。</p><p>考慮以下程式碼：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Printer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Printer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(block: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Unit): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Printer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Printer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> block</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span></code></pre></div><p>啟用對函數介面建構子的可呼叫引用後，此程式碼可以替換為僅一個函數介面宣告：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Printer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>它的建構子將被隱式建立，任何使用 <code>::Printer</code> 函數引用的程式碼都將編譯。例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">documentsStorage.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addPrinter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Printer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>透過使用 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-deprecated/" target="_blank" rel="noreferrer"><code>@Deprecated</code></a> 註解和 <code>DeprecationLevel.HIDDEN</code> 標記舊版函數 <code>Printer</code> 來保留二進位相容性：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Deprecated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Your message about the deprecation&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, level </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DeprecationLevel.HIDDEN)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Printer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.) {</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.}</span></span></code></pre></div><p>使用編譯器選項 <code>-XXLanguage:+KotlinFunInterfaceConstructorReference</code> 啟用此功能。</p><h2 id="kotlin-native" tabindex="-1">Kotlin/Native <a class="header-anchor" href="#kotlin-native" aria-label="Permalink to &quot;Kotlin/Native&quot;">​</a></h2><p>Kotlin/Native 1.6.20 標誌著其新元件的持續發展。我們在與 Kotlin 在其他平台上的體驗一致性方面又邁出了一步：</p><ul><li><a href="#an-update-on-the-new-memory-manager">新記憶體管理器的更新</a></li><li><a href="#concurrent-implementation-for-the-sweep-phase-in-new-memory-manager">新記憶體管理器中清理階段的併發實作</a></li><li><a href="#instantiation-of-annotation-classes">註解類別的實例化</a></li><li><a href="#interop-with-swift-async-await-returning-void-instead-of-kotlinunit">與 Swift async/await 的互通性：返回 Swift 的 Void 而非 KotlinUnit</a></li><li><a href="#better-stack-traces-with-libbacktrace">透過 libbacktrace 改善堆疊追蹤</a></li><li><a href="#support-for-standalone-android-executables">支援獨立 Android 可執行檔</a></li><li><a href="#performance-improvements">效能改進</a></li><li><a href="#improved-error-handling-during-cinterop-modules-import">cinterop 模組匯入期間的錯誤處理改進</a></li><li><a href="#support-for-xcode-13-libraries">支援 Xcode 13 函式庫</a></li></ul><h3 id="新記憶體管理器的更新" tabindex="-1">新記憶體管理器的更新 <a class="header-anchor" href="#新記憶體管理器的更新" aria-label="Permalink to &quot;新記憶體管理器的更新&quot;">​</a></h3><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>新的 Kotlin/Native 記憶體管理器處於 <a href="/zh-Hant/kotlin/components-stability">Alpha 測試版</a>階段。 它可能在未來不相容地變更並需要手動遷移。 我們非常感謝您在 <a href="https://youtrack.jetbrains.com/issue/KT-48525" target="_blank" rel="noreferrer">YouTrack</a> 中提供意見回饋。</p></div><p>透過 Kotlin 1.6.20，您可以嘗試新 Kotlin/Native 記憶體管理器的 Alpha 版本。 它消除了 JVM 和 Native 平台之間的差異，以在多平台專案中提供一致的開發者體驗。 例如，您將更容易建立可在 Android 和 iOS 上運作的新跨平台行動應用程式。</p><p>新的 Kotlin/Native 記憶體管理器取消了執行緒間物件共享的限制。 它還提供了無記憶體洩漏的併發程式設計原語，這些原語安全且不需要任何特殊管理或註解。</p><p>新的記憶體管理器將在未來版本中成為預設值，因此我們鼓勵您現在就嘗試。 查閱我們的<a href="https://blog.jetbrains.com/kotlin/2021/08/try-the-new-kotlin-native-memory-manager-development-preview/" target="_blank" rel="noreferrer">部落格文章</a>以了解有關新記憶體管理器的更多資訊並探索示範專案，或直接跳至<a href="https://github.com/JetBrains/kotlin/blob/master/kotlin-native/NEW_MM.md" target="_blank" rel="noreferrer">遷移說明</a>親自嘗試。</p><p>請嘗試在您的專案上使用新記憶體管理器，看看它是如何運作的，並在我們的問題追蹤器 <a href="https://youtrack.jetbrains.com/issue/KT-48525" target="_blank" rel="noreferrer">YouTrack</a> 中分享意見回饋。</p><h3 id="新記憶體管理器中清理階段的併發實作" tabindex="-1">新記憶體管理器中清理階段的併發實作 <a class="header-anchor" href="#新記憶體管理器中清理階段的併發實作" aria-label="Permalink to &quot;新記憶體管理器中清理階段的併發實作&quot;">​</a></h3><p>如果您已切換到我們在 <a href="/zh-Hant/kotlin/whatsnew16#preview-of-the-new-memory-manager">Kotlin 1.6 中宣布</a>的新記憶體管理器，您可能會注意到執行時間有了巨大的改進：我們的基準測試顯示平均提高了 35%。 從 1.6.20 開始，新記憶體管理器的清理階段也提供了併發實作。 這也應能改善效能並縮短垃圾收集器暫停的持續時間。</p><p>若要為新的 Kotlin/Native 記憶體管理器啟用此功能，請傳遞以下編譯器選項：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-Xgc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">cms</span></span></code></pre></div><p>請隨時在此 <a href="https://youtrack.jetbrains.com/issue/KT-48526" target="_blank" rel="noreferrer">YouTrack 問題</a>中分享您對新記憶體管理器效能的意見回饋。</p><h3 id="註解類別的實例化" tabindex="-1">註解類別的實例化 <a class="header-anchor" href="#註解類別的實例化" aria-label="Permalink to &quot;註解類別的實例化&quot;">​</a></h3><p>在 Kotlin 1.6.0 中，註解類別的實例化對於 Kotlin/JVM 和 Kotlin/JS 成為了<a href="/zh-Hant/kotlin/components-stability">穩定</a>功能。 1.6.20 版本提供了對 Kotlin/Native 的支援。</p><p>了解有關<a href="/zh-Hant/kotlin/annotations#instantiation">註解類別實例化</a>的更多資訊。</p><h3 id="與-swift-async-await-的互通性-返回-void-而非-kotlinunit" tabindex="-1">與 Swift async/await 的互通性：返回 Void 而非 KotlinUnit <a class="header-anchor" href="#與-swift-async-await-的互通性-返回-void-而非-kotlinunit" aria-label="Permalink to &quot;與 Swift async/await 的互通性：返回 Void 而非 KotlinUnit&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>與 Swift async/await 的併發互通性是 <a href="/zh-Hant/kotlin/components-stability">實驗性</a>的。它可能隨時被移除或變更。 您應該僅將其用於評估目的。我們非常感謝您在 <a href="https://youtrack.jetbrains.com/issue/KT-47610" target="_blank" rel="noreferrer">YouTrack</a> 中提供意見回饋。</p></div><p>我們持續致力於<a href="/zh-Hant/kotlin/whatsnew1530#experimental-interoperability-with-swift-5-5-async-await">與 Swift 的 async/await 的實驗性互通性</a>（Swift 5.5 後可用）。 Kotlin 1.6.20 在處理 <code>Unit</code> 回傳型別的 <code>suspend</code> 函數方面與先前版本不同。</p><p>以前，此類函數在 Swift 中呈現為返回 <code>KotlinUnit</code> 的 <code>async</code> 函數。然而，它們的正確回傳型別應為 <code>Void</code>，類似於非暫停函數。</p><p>為了避免破壞現有程式碼，我們引入了一個 Gradle 屬性，該屬性使編譯器將返回 <code>Unit</code> 的 <code>suspend</code> 函數轉換為返回 <code>Void</code> 的 <code>async</code> Swift 函數：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># gradle.properties</span></span>
<span class="line"><span>kotlin.native.binary.unitSuspendFunctionObjCExport=proper</span></span></code></pre></div><p>我們計劃在未來的 Kotlin 版本中將此行為設為預設。</p><h3 id="透過-libbacktrace-改善堆疊追蹤" tabindex="-1">透過 libbacktrace 改善堆疊追蹤 <a class="header-anchor" href="#透過-libbacktrace-改善堆疊追蹤" aria-label="Permalink to &quot;透過 libbacktrace 改善堆疊追蹤&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>使用 libbacktrace 解析原始碼位置是 <a href="/zh-Hant/kotlin/components-stability">實驗性</a>的。它可能隨時被移除或變更。 您應該僅將其用於評估目的。我們非常感謝您在 <a href="https://youtrack.jetbrains.com/issue/KT-48424" target="_blank" rel="noreferrer">YouTrack</a> 中提供意見回饋。</p></div><p>Kotlin/Native 現在能夠產生包含檔案位置和行號的詳細堆疊追蹤， 以便更好地除錯 <code>linux*</code>（<code>linuxMips32</code> 和 <code>linuxMipsel32</code> 除外）和 <code>androidNative*</code> 目標。</p><p>此功能在底層使用了 <a href="https://github.com/ianlancetaylor/libbacktrace" target="_blank" rel="noreferrer"><code>libbacktrace</code></a> 函式庫。 請看以下程式碼，了解差異範例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> baz</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">inline</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> baz</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><strong>1.6.20 之前：</strong></li></ul><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Uncaught Kotlin exception: kotlin.IllegalStateException:</span></span>
<span class="line"><span>   at 0   example.kexe        0x227190       kfun:kotlin.Throwable#&lt;init&gt;(kotlin.String?){} + 96</span></span>
<span class="line"><span>   at 1   example.kexe        0x221e4c       kfun:kotlin.Exception#&lt;init&gt;(kotlin.String?){} + 92</span></span>
<span class="line"><span>   at 2   example.kexe        0x221f4c       kfun:kotlin.RuntimeException#&lt;init&gt;(kotlin.String?){} + 92</span></span>
<span class="line"><span>   at 3   example.kexe        0x22234c       kfun:kotlin.IllegalStateException#&lt;init&gt;(kotlin.String?){} + 92</span></span>
<span class="line"><span>   at 4   example.kexe        0x25d708       kfun:#bar(){} + 104</span></span>
<span class="line"><span>   at 5   example.kexe        0x25d68c       kfun:#main(){} + 12</span></span></code></pre></div><ul><li><strong>1.6.20 搭配 libbacktrace：</strong></li></ul><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Uncaught Kotlin exception: kotlin.IllegalStateException:</span></span>
<span class="line"><span>   at 0   example.kexe        0x229550    kfun:kotlin.Throwable#&lt;init&gt;(kotlin.String?){} + 96 (/opt/buildAgent/work/c3a91df21e46e2c8/kotlin/kotlin-native/runtime/src/main/kotlin/kotlin/Throwable.kt:24:37)</span></span>
<span class="line"><span>   at 1   example.kexe        0x22420c    kfun:kotlin.Exception#&lt;init&gt;(kotlin.String?){} + 92 (/opt/buildAgent/work/c3a91df21e46e2c8/kotlin/kotlin-native/runtime/src/main/kotlin/kotlin/Exceptions.kt:23:44)</span></span>
<span class="line"><span>   at 2   example.kexe        0x22430c    kfun:kotlin.RuntimeException#&lt;init&gt;(kotlin.String?){} + 92 (/opt/buildAgent/work/c3a91df21e46e2c8/kotlin/kotlin-native/runtime/src/main/kotlin/kotlin/Exceptions.kt:34:44)</span></span>
<span class="line"><span>   at 3   example.kexe        0x22470c    kfun:kotlin.IllegalStateException#&lt;init&gt;(kotlin.String?){} + 92 (/opt/buildAgent/work/c3a91df21e46e2c8/kotlin/kotlin-native/runtime/src/main/kotlin/kotlin/Exceptions.kt:70:44)</span></span>
<span class="line"><span>   at 4   example.kexe        0x25fac8    kfun:#bar(){} + 104 [inlined] (/opt/buildAgent/work/c3a91df21e46e2c8/kotlin/libraries/stdlib/src/kotlin/util/Preconditions.kt:143:56)</span></span>
<span class="line"><span>   at 5   example.kexe        0x25fac8    kfun:#bar(){} + 104 [inlined] (/private/tmp/backtrace/src/commonMain/kotlin/app.kt:4:5)</span></span>
<span class="line"><span>   at 6   example.kexe        0x25fac8    kfun:#bar(){} + 104 (/private/tmp/backtrace/src/commonMain/kotlin/app.kt:2:13)</span></span>
<span class="line"><span>   at 7   example.kexe        0x25fa4c    kfun:#main(){} + 12 (/private/tmp/backtrace/src/commonMain/kotlin/app.kt:1:14)</span></span></code></pre></div><p>在 Apple 目標上，這些目標已經在堆疊追蹤中包含檔案位置和行號，libbacktrace 為內聯函數呼叫提供了更多詳細資訊：</p><ul><li><strong>1.6.20 之前：</strong></li></ul><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Uncaught Kotlin exception: kotlin.IllegalStateException:</span></span>
<span class="line"><span>   at 0   example.kexe    0x10a85a8f8    kfun:kotlin.Throwable#&lt;init&gt;(kotlin.String?){} + 88 (/opt/buildAgent/work/c3a91df21e46e2c8/kotlin/kotlin-native/runtime/src/main/kotlin/kotlin/Throwable.kt:24:37)</span></span>
<span class="line"><span>   at 1   example.kexe    0x10a855846    kfun:kotlin.Exception#&lt;init&gt;(kotlin.String?){} + 86 (/opt/buildAgent/work/c3a91df21e46e2c8/kotlin/kotlin-native/runtime/src/main/kotlin/kotlin/Exceptions.kt:23:44)</span></span>
<span class="line"><span>   at 2   example.kexe    0x10a855936    kfun:kotlin.RuntimeException#&lt;init&gt;(kotlin.String?){} + 86 (/opt/buildAgent/work/c3a91df21e46e2c8/kotlin/kotlin-native/runtime/src/main/kotlin/kotlin/Exceptions.kt:34:44)</span></span>
<span class="line"><span>   at 3   example.kexe    0x10a855c86    kfun:kotlin.IllegalStateException#&lt;init&gt;(kotlin.String?){} + 86 (/opt/buildAgent/work/c3a91df21e46e2c8/kotlin/kotlin-native/runtime/src/main/kotlin/kotlin/Exceptions.kt:70:44)</span></span>
<span class="line"><span>   at 4   example.kexe    0x10a8489a5    kfun:#bar(){} + 117 (/private/tmp/backtrace/src/commonMain/kotlin/app.kt:2:1)</span></span>
<span class="line"><span>   at 5   example.kexe    0x10a84891c    kfun:#main(){} + 12 (/private/tmp/backtrace/src/commonMain/kotlin/app.kt:1:14)</span></span>
<span class="line"><span>...</span></span></code></pre></div><ul><li><strong>1.6.20 搭配 libbacktrace：</strong></li></ul><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Uncaught Kotlin exception: kotlin.IllegalStateException:</span></span>
<span class="line"><span>   at 0   example.kexe    0x10669bc88    kfun:kotlin.Throwable#&lt;init&gt;(kotlin.String?){} + 88 (/opt/buildAgent/work/c3a91df21e46e2c8/kotlin/kotlin-native/runtime/src/main/kotlin/kotlin/Throwable.kt:24:37)</span></span>
<span class="line"><span>   at 1   example.kexe    0x106696bd6    kfun:kotlin.Exception#&lt;init&gt;(kotlin.String?){} + 86 (/opt/buildAgent/work/c3a91df21e46e2c8/kotlin/kotlin-native/runtime/src/main/kotlin/kotlin/Exceptions.kt:23:44)</span></span>
<span class="line"><span>   at 2   example.kexe    0x106696cc6    kfun:kotlin.RuntimeException#&lt;init&gt;(kotlin.String?){} + 86 (/opt/buildAgent/work/c3a91df21e46e2c8/kotlin/kotlin-native/runtime/src/main/kotlin/kotlin/Exceptions.kt:34:44)</span></span>
<span class="line"><span>   at 3   example.kexe    0x106697016    kfun:kotlin.IllegalStateException#&lt;init&gt;(kotlin.String?){} + 86 (/opt/buildAgent/work/c3a91df21e46e2c8/kotlin/kotlin-native/runtime/src/main/kotlin/kotlin/Exceptions.kt:70:44)</span></span>
<span class="line"><span>   at 4   example.kexe    0x106689d35    kfun:#bar(){} + 117 [inlined] (/opt/buildAgent/work/c3a91df21e46e2c8/kotlin/libraries/stdlib/src/kotlin/util/Preconditions.kt:143:56)</span></span>
<span class="line"><span>&gt;&gt;  at 5   example.kexe    0x106689d35    kfun:#bar(){} + 117 [inlined] (/private/tmp/backtrace/src/commonMain/kotlin/app.kt:4:5)</span></span>
<span class="line"><span>   at 6   example.kexe    0x106689d35    kfun:#bar(){} + 117 (/private/tmp/backtrace/src/commonMain/kotlin/app.kt:2:13)</span></span>
<span class="line"><span>   at 7   example.kexe    0x106689cac    kfun:#main(){} + 12 (/private/tmp/backtrace/src/commonMain/kotlin/app.kt:1:14)</span></span>
<span class="line"><span>...</span></span></code></pre></div><p>若要透過 libbacktrace 產生更好的堆疊追蹤，請將以下行新增到 <code>gradle.properties</code>：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># gradle.properties</span></span>
<span class="line"><span>kotlin.native.binary.sourceInfoType=libbacktrace</span></span></code></pre></div><p>請在<a href="https://youtrack.jetbrains.com/issue/KT-48424" target="_blank" rel="noreferrer">此 YouTrack 問題</a>中告訴我們您使用 libbacktrace 除錯 Kotlin/Native 的體驗。</p><h3 id="支援獨立-android-可執行檔" tabindex="-1">支援獨立 Android 可執行檔 <a class="header-anchor" href="#支援獨立-android-可執行檔" aria-label="Permalink to &quot;支援獨立 Android 可執行檔&quot;">​</a></h3><p>以前，Kotlin/Native 中的 Android 原生可執行檔實際上不是可執行檔，而是您可以作為 NativeActivity 使用的共享函式庫。現在有一個選項可以為 Android 原生目標生成標準可執行檔。</p><p>為此，在您的專案的 <code>build.gradle(.kts)</code> 部分中，配置您的 <code>androidNative</code> 目標的可執行檔區塊。 新增以下二進位選項：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    androidNativeX64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;android&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        binaries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                binaryOptions[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;androidProgramType&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;standalone&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>請注意，此功能將在 Kotlin 1.7.0 中成為預設值。 如果您想保留目前的行為，請使用以下設定：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">binaryOptions[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;androidProgramType&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;nativeActivity&quot;</span></span></code></pre></div><p>感謝 Mattia Iavarone 的<a href="https://github.com/jetbrains/kotlin/pull/4624" target="_blank" rel="noreferrer">實作</a>！</p><h3 id="效能改進" tabindex="-1">效能改進 <a class="header-anchor" href="#效能改進" aria-label="Permalink to &quot;效能改進&quot;">​</a></h3><p>我們正在努力改進 Kotlin/Native，以<a href="https://youtrack.jetbrains.com/issue/KT-42294" target="_blank" rel="noreferrer">加速編譯過程</a>並提升您的開發體驗。</p><p>Kotlin 1.6.20 帶來了一些效能更新和錯誤修正，這些變更影響了 Kotlin 生成的 LLVM IR。 根據我們內部專案的基準測試，我們平均達到了以下效能提升：</p><ul><li>執行時間減少 15%</li><li>發佈和除錯二進位檔的程式碼大小減少 20%</li><li>發佈二進位檔的編譯時間減少 26%</li></ul><p>這些變更還使大型內部專案的除錯二進位檔編譯時間減少了 10%。</p><p>為此，我們為一些編譯器生成的合成物件實作了靜態初始化，改進了為每個函數建立 LLVM IR 結構的方式，並優化了編譯器快取。</p><h3 id="cinterop-模組匯入期間的錯誤處理改進" tabindex="-1">cinterop 模組匯入期間的錯誤處理改進 <a class="header-anchor" href="#cinterop-模組匯入期間的錯誤處理改進" aria-label="Permalink to &quot;cinterop 模組匯入期間的錯誤處理改進&quot;">​</a></h3><p>此版本改進了在您使用 <code>cinterop</code> 工具匯入 Objective-C 模組（例如 CocoaPods pods 通常這樣做）時的錯誤處理。 以前，如果您在嘗試使用 Objective-C 模組時遇到錯誤（例如，處理標頭中的編譯錯誤時），您會收到一條資訊不足的錯誤訊息，例如 <code>fatal error: could not build module $name</code>。 我們擴展了 <code>cinterop</code> 工具的這部分，因此您將收到包含擴展說明的錯誤訊息。</p><h3 id="支援-xcode-13-函式庫" tabindex="-1">支援 Xcode 13 函式庫 <a class="header-anchor" href="#支援-xcode-13-函式庫" aria-label="Permalink to &quot;支援 Xcode 13 函式庫&quot;">​</a></h3><p>此版本中完全支援 Xcode 13 隨附的函式庫。 請隨時從您的 Kotlin 程式碼中的任何位置存取它們。</p><h2 id="kotlin-multiplatform" tabindex="-1">Kotlin Multiplatform <a class="header-anchor" href="#kotlin-multiplatform" aria-label="Permalink to &quot;Kotlin Multiplatform&quot;">​</a></h2><p>1.6.20 為 Kotlin Multiplatform 帶來了以下值得注意的更新：</p><ul><li><a href="#hierarchical-structure-support-for-multiplatform-projects">多平台專案的階層式結構支援現在是預設選項</a></li><li><a href="#kotlin-cocoapods-gradle-plugin">Kotlin CocoaPods Gradle 外掛程式收到了幾個有用的 CocoaPods 整合功能</a></li></ul><h3 id="多平台專案的階層式結構支援" tabindex="-1">多平台專案的階層式結構支援 <a class="header-anchor" href="#多平台專案的階層式結構支援" aria-label="Permalink to &quot;多平台專案的階層式結構支援&quot;">​</a></h3><p>Kotlin 1.6.20 預設啟用階層式結構支援。 自從在 <a href="/zh-Hant/kotlin/whatsnew14#sharing-code-in-several-targets-with-the-hierarchical-project-structure">Kotlin 1.4.0 中引入</a>以來，我們大幅改進了前端並使 IDE 匯入穩定。</p><p>以前，在多平台專案中新增程式碼有兩種方式。第一種是將其插入平台特定原始碼集，該原始碼集僅限於一個目標，無法被其他平台重複使用。 第二種是使用跨所有 Kotlin 目前支援的平台共享的通用原始碼集。</p><p>現在您可以在<a href="#better-code-sharing-in-your-project">專案中更好地共享程式碼</a>，在幾個類似的原生目標之間共享原始碼，這些目標重複使用大量通用邏輯和第三方應用程式介面。 此技術將提供正確的預設依賴項，並找到共享程式碼中可用的精確應用程式介面。 這消除了複雜的建置設定和必須使用變通方法才能獲得對原生目標之間共享原始碼集的 IDE 支援。 它還有助於防止針對不同目標的不安全應用程式介面使用。</p><p>此技術對於<a href="#more-opportunities-for-library-authors">函式庫作者</a>也將很有用，因為階層式專案結構允許他們發佈和使用針對目標子集的通用應用程式介面的函式庫。</p><p>預設情況下，使用階層式專案結構發佈的函式庫僅與階層式結構專案相容。</p><h4 id="專案中更好的程式碼共享" tabindex="-1">專案中更好的程式碼共享 <a class="header-anchor" href="#專案中更好的程式碼共享" aria-label="Permalink to &quot;專案中更好的程式碼共享&quot;">​</a></h4><p>在沒有階層式結構支援的情況下，無法直接地在<strong>某些</strong>而非<strong>所有</strong> <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-dsl-reference.html#targets" target="_blank" rel="noreferrer">Kotlin 目標</a>之間共享程式碼。 一個常見的例子是在所有 iOS 目標之間共享程式碼，並存取 iOS 特定的<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-share-on-platforms.html#connect-platform-specific-libraries" target="_blank" rel="noreferrer">依賴項</a>，例如 Foundation。</p><p>多虧了階層式專案結構支援，您現在可以開箱即用地實現這一點。 在新結構中，原始碼集形成階層。 您可以針對給定原始碼集編譯到的每個目標，使用平台特定的語言功能和可用的依賴項。</p><p>例如，考慮一個典型的多平台專案，它有兩個目標 — <code>iosArm64</code> 和 <code>iosX64</code> 分別用於 iOS 裝置和模擬器。 Kotlin 工具鏈理解這兩個目標具有相同的功能，並允許您從中間原始碼集 <code>iosMain</code> 存取該功能。</p><p><img src="`+h+`" alt="iOS hierarchy example" width="700"></p><p>Kotlin 工具鏈提供正確的預設依賴項，例如 Kotlin/Native 標準函式庫或原生函式庫。 此外，Kotlin 工具鏈將盡力找出共享程式碼中可用的精確應用程式介面範圍。 這可以防止例如在為 Windows 共享的程式碼中使用 macOS 特定函數等情況。</p><h4 id="為函式庫作者帶來更多機會" tabindex="-1">為函式庫作者帶來更多機會 <a class="header-anchor" href="#為函式庫作者帶來更多機會" aria-label="Permalink to &quot;為函式庫作者帶來更多機會&quot;">​</a></h4><p>當多平台函式庫發佈時，其中間原始碼集的應用程式介面現在已正確地與其一同發佈，供消費者使用。 同樣，Kotlin 工具鏈將自動找出消費者原始碼集中可用的應用程式介面，同時仔細防範不安全的使用方式，例如在 JS 程式碼中使用適用於 JVM 的應用程式介面。 了解有關<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-share-on-platforms.html#share-code-in-libraries" target="_blank" rel="noreferrer">在函式庫中共享程式碼</a>的更多資訊。</p><h4 id="配置和設定" tabindex="-1">配置和設定 <a class="header-anchor" href="#配置和設定" aria-label="Permalink to &quot;配置和設定&quot;">​</a></h4><p>從 Kotlin 1.6.20 開始，所有新建立的多平台專案都將採用階層式專案結構。無需額外設定。</p><ul><li><p>如果您已<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-share-on-platforms.html#share-code-on-similar-platforms" target="_blank" rel="noreferrer">手動開啟</a>它，您可以從 <code>gradle.properties</code> 中移除已棄用的選項：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># gradle.properties</span></span>
<span class="line"><span>kotlin.mpp.enableGranularSourceSetsMetadata=true</span></span>
<span class="line"><span>kotlin.native.enableDependencyPropagation=false // or &#39;true&#39;, depending on your previous setup</span></span></code></pre></div></li><li><p>對於 Kotlin 1.6.20，我們建議使用 <a href="https://developer.android.com/studio" target="_blank" rel="noreferrer">Android Studio 2021.1.1</a> (Bumblebee) 或更高版本以獲得最佳體驗。</p></li><li><p>您也可以選擇退出。若要停用階層式結構支援，請在 <code>gradle.properties</code> 中設定以下選項：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># gradle.properties</span></span>
<span class="line"><span>kotlin.mpp.hierarchicalStructureSupport=false</span></span></code></pre></div></li></ul><h4 id="留下您的意見回饋" tabindex="-1">留下您的意見回饋 <a class="header-anchor" href="#留下您的意見回饋" aria-label="Permalink to &quot;留下您的意見回饋&quot;">​</a></h4><p>這是對整個生態系統的重大變革。我們非常感謝您的意見回饋，以幫助使其更臻完善。</p><p>現在就試試看，並向我們的<a href="https://kotl.in/issue" target="_blank" rel="noreferrer">問題追蹤器</a>報告您遇到的任何困難。</p><h3 id="kotlin-cocoapods-gradle-外掛程式" tabindex="-1">Kotlin CocoaPods Gradle 外掛程式 <a class="header-anchor" href="#kotlin-cocoapods-gradle-外掛程式" aria-label="Permalink to &quot;Kotlin CocoaPods Gradle 外掛程式&quot;">​</a></h3><p>為簡化 CocoaPods 整合，Kotlin 1.6.20 提供了以下功能：</p><ul><li><p>CocoaPods 外掛程式現在具有建置 XCFrameworks 並包含所有註冊目標以及生成 Podspec 檔案的任務。當您不想直接與 Xcode 整合，但想要建置產物並將其部署到本地 CocoaPods 儲存庫時，這會很有用。</p><p>了解更多關於<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-build-native-binaries.html#build-xcframeworks" target="_blank" rel="noreferrer">建置 XCFrameworks</a> 的資訊。</p></li><li><p>如果您在專案中使用 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-cocoapods-overview.html" target="_blank" rel="noreferrer">CocoaPods 整合</a>，您習慣於為整個 Gradle 專案指定所需的 Pod 版本。現在您有更多選項：</p><ul><li>直接在 <code>cocoapods</code> 區塊中指定 Pod 版本</li><li>繼續使用 Gradle 專案版本</li></ul><p>如果這些屬性都沒有配置，您將會收到錯誤。</p></li><li><p>您現在可以在 <code>cocoapods</code> 區塊中配置 CocoaPod 名稱，而無需更改整個 Gradle 專案的名稱。</p></li><li><p>CocoaPods 外掛程式引入了一個新的 <code>extraSpecAttributes</code> 屬性，您可以使用它來配置 Podspec 檔案中以前硬編碼的屬性，例如 <code>libraries</code> 或 <code>vendored_frameworks</code>。</p></li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    cocoapods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        version </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;MyCocoaPod&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        extraSpecAttributes[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;social_media_url&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;https://twitter.com/kotlin&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        extraSpecAttributes[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vendored_frameworks&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;CustomFramework.xcframework&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        extraSpecAttributes[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;libraries&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;xml&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>請參閱完整的 Kotlin CocoaPods Gradle 外掛程式 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-cocoapods-dsl-reference.html" target="_blank" rel="noreferrer">DSL 參考</a>。</p><h2 id="kotlin-js" tabindex="-1">Kotlin/JS <a class="header-anchor" href="#kotlin-js" aria-label="Permalink to &quot;Kotlin/JS&quot;">​</a></h2><p>Kotlin/JS 1.6.20 中的改進主要影響 IR 編譯器：</p><ul><li><a href="#incremental-compilation-for-development-binaries-with-ir-compiler">開發二進位檔的增量編譯 (IR)</a></li><li><a href="#lazy-initialization-of-top-level-properties-by-default-with-ir-compiler">預設情況下頂層屬性的惰性初始化 (IR)</a></li><li><a href="#separate-js-files-for-project-modules-by-default-with-ir-compiler">預設情況下為專案模組單獨生成 JS 檔案 (IR)</a></li><li><a href="#char-class-optimization">Char 類別優化 (IR)</a></li><li><a href="#improvements-to-export-and-typescript-declaration-generation">匯出改進（IR 和舊版後端皆有）</a></li><li><a href="#aftertest-guarantees-for-asynchronous-tests">異步測試的 <code>@AfterTest</code> 保證</a></li></ul><h3 id="開發二進位檔的增量編譯-ir-編譯器" tabindex="-1">開發二進位檔的增量編譯 (IR 編譯器) <a class="header-anchor" href="#開發二進位檔的增量編譯-ir-編譯器" aria-label="Permalink to &quot;開發二進位檔的增量編譯 (IR 編譯器)&quot;">​</a></h3><p>為使使用 IR 編譯器的 Kotlin/JS 開發更有效率，我們引入了一種新的_增量編譯_模式。</p><p>在此模式下，當使用 <code>compileDevelopmentExecutableKotlinJs</code> Gradle 任務建置<strong>開發二進位檔</strong>時，編譯器會在模組層級快取先前編譯的結果。 它在後續編譯期間會使用未更改原始檔的快取編譯結果，從而使編譯更快完成，尤其是在進行小改動時。 請注意，此改進專門針對開發過程（縮短編輯-建置-除錯循環），不影響正式環境產物的建置。</p><p>若要啟用開發二進位檔的增量編譯，請將以下行新增到專案的 <code>gradle.properties</code>：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># gradle.properties</span></span>
<span class="line"><span>kotlin.incremental.js.ir=true // false by default</span></span></code></pre></div><p>在我們的測試專案中，新模式使增量編譯速度提高了 30%。然而，在此模式下進行清理建置會變慢，因為需要建立和填充快取。</p><p>請在此 <a href="https://youtrack.jetbrains.com/issue/KT-50203" target="_blank" rel="noreferrer">YouTrack 問題</a>中告訴我們您使用增量編譯與您的 Kotlin/JS 專案的體驗。</p><h3 id="預設情況下頂層屬性的惰性初始化-ir-編譯器" tabindex="-1">預設情況下頂層屬性的惰性初始化 (IR 編譯器) <a class="header-anchor" href="#預設情況下頂層屬性的惰性初始化-ir-編譯器" aria-label="Permalink to &quot;預設情況下頂層屬性的惰性初始化 (IR 編譯器)&quot;">​</a></h3><p>在 Kotlin 1.4.30 中，我們展示了 JS IR 編譯器中<a href="/zh-Hant/kotlin/whatsnew1430#lazy-initialization-of-top-level-properties">頂層屬性惰性初始化</a>的原型。 透過消除在應用程式啟動時初始化所有屬性的需要，惰性初始化減少了啟動時間。 我們的測量顯示，在實際的 Kotlin/JS 應用程式上，速度約提高了 10%。</p><p>現在，經過完善和適當測試此機制，我們將惰性初始化設為 IR 編譯器中頂層屬性的預設值。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// lazy initialization</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // intensive computations</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    result</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// run is executed upon the first usage of the variable</span></span></code></pre></div><p>如果由於某種原因您需要急切地初始化屬性（在應用程式啟動時），請使用 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.native/-eager-initialization/" target="_blank" rel="noreferrer"><code>@EagerInitialization</code></a> 註解標記它。</p><h3 id="預設情況下為專案模組單獨生成-js-檔案-ir-編譯器" tabindex="-1">預設情況下為專案模組單獨生成 JS 檔案 (IR 編譯器) <a class="header-anchor" href="#預設情況下為專案模組單獨生成-js-檔案-ir-編譯器" aria-label="Permalink to &quot;預設情況下為專案模組單獨生成 JS 檔案 (IR 編譯器)&quot;">​</a></h3><p>以前，JS IR 編譯器提供了<a href="https://youtrack.jetbrains.com/issue/KT-44319" target="_blank" rel="noreferrer">為專案模組生成單獨的 <code>.js</code> 檔案</a>的能力。 這是預設選項的替代方案——為整個專案生成一個單一的 <code>.js</code> 檔案。 該檔案可能過大且不方便使用，因為每當您想從專案中使用一個函數時，都必須將整個 JS 檔案作為依賴項包含進來。 擁有多個檔案增加了靈活性並減少了此類依賴項的大小。此功能可透過 <code>-Xir-per-module</code> 編譯器選項使用。</p><p>從 1.6.20 開始，JS IR 編譯器預設為專案模組生成單獨的 <code>.js</code> 檔案。</p><p>現在可以透過以下 Gradle 屬性將專案編譯為單一 <code>.js</code> 檔案：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># gradle.properties</span></span>
<span class="line"><span>kotlin.js.ir.output.granularity=whole-program // \`per-module\` is the default</span></span></code></pre></div><p>在以前的版本中，實驗性的每模組模式（透過 <code>-Xir-per-module=true</code> 旗標可用）會呼叫每個模組中的 <code>main()</code> 函數。這與常規的單一 <code>.js</code> 模式不一致。從 1.6.20 開始，<code>main()</code> 函數將僅在主模組中呼叫，無論是哪種情況。如果您確實需要在載入模組時執行某些程式碼，您可以使用帶有 <code>@EagerInitialization</code> 註解的頂層屬性。請參閱<a href="#lazy-initialization-of-top-level-properties-by-default-with-ir-compiler">預設情況下頂層屬性的惰性初始化 (IR)</a>。</p><h3 id="char-類別優化" tabindex="-1">Char 類別優化 <a class="header-anchor" href="#char-類別優化" aria-label="Permalink to &quot;Char 類別優化&quot;">​</a></h3><p><code>Char</code> 類別現在由 Kotlin/JS 編譯器處理，而無需引入裝箱（類似於<a href="/zh-Hant/kotlin/inline-classes">內聯類別</a>）。 這加速了 Kotlin/JS 程式碼中對字元的運算。</p><p>除了效能改進之外，這還改變了 <code>Char</code> 匯出到 JavaScript 的方式：它現在被轉換為 <code>Number</code>。</p><h3 id="匯出和-typescript-宣告產生改進" tabindex="-1">匯出和 TypeScript 宣告產生改進 <a class="header-anchor" href="#匯出和-typescript-宣告產生改進" aria-label="Permalink to &quot;匯出和 TypeScript 宣告產生改進&quot;">​</a></h3><p>Kotlin 1.6.20 為匯出機制（<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.js/-js-export/" target="_blank" rel="noreferrer"><code>@JsExport</code></a> 註解）帶來了多個修正和改進，包括 <a href="/zh-Hant/kotlin/js-ir-compiler#preview-generation-of-typescript-declaration-files-d-ts">TypeScript 宣告檔（<code>.d.ts</code>）的產生</a>。 我們新增了匯出介面和列舉的能力，並修正了先前向我們報告的一些邊緣情況下的匯出行為。 有關更多詳細資訊，請參閱 <a href="https://youtrack.jetbrains.com/issues?q=Project:%20Kotlin%20issue%20id:%20KT-45434,%20KT-44494,%20KT-37916,%20KT-43191,%20KT-46961,%20KT-40236" target="_blank" rel="noreferrer">YouTrack 中匯出改進的清單</a>。</p><p>了解有關<a href="/zh-Hant/kotlin/js-to-kotlin-interop">從 JavaScript 使用 Kotlin 程式碼</a>的更多資訊。</p><h3 id="異步測試的-aftertest-保證" tabindex="-1">異步測試的 @AfterTest 保證 <a class="header-anchor" href="#異步測試的-aftertest-保證" aria-label="Permalink to &quot;異步測試的 @AfterTest 保證&quot;">​</a></h3><p>Kotlin 1.6.20 使 <a href="https://kotlinlang.org/api/latest/kotlin.test/kotlin.test/-after-test/" target="_blank" rel="noreferrer"><code>@AfterTest</code></a> 函數在 Kotlin/JS 上的異步測試中正常工作。 如果測試函數的回傳型別靜態解析為 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.js/-promise/" target="_blank" rel="noreferrer"><code>Promise</code></a>，編譯器現在會將 <code>@AfterTest</code> 函數的執行排程到相應的 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.js/-promise/then.html" target="_blank" rel="noreferrer"><code>then()</code></a> 回呼函數。</p><h2 id="安全性" tabindex="-1">安全性 <a class="header-anchor" href="#安全性" aria-label="Permalink to &quot;安全性&quot;">​</a></h2><p>Kotlin 1.6.20 引入了幾項功能來改善您程式碼的安全性：</p><ul><li><a href="#using-relative-paths-in-klibs">在 klibs 中使用相對路徑</a></li><li><a href="#persisting-yarn-lock-for-kotlin-js-gradle-projects">為 Kotlin/JS Gradle 專案持久化 <code>yarn.lock</code> 檔案</a></li><li><a href="#installation-of-npm-dependencies-with-ignore-scripts-by-default">預設情況下使用 <code>--ignore-scripts</code> 安裝 npm 依賴項</a></li></ul><h3 id="在-klibs-中使用相對路徑" tabindex="-1">在 klibs 中使用相對路徑 <a class="header-anchor" href="#在-klibs-中使用相對路徑" aria-label="Permalink to &quot;在 klibs 中使用相對路徑&quot;">​</a></h3><p><code>klib</code> 格式的函式庫<a href="/zh-Hant/kotlin/native-libraries#library-format">包含</a>原始檔的序列化 IR 表示，其中也包含它們的路徑，用於生成正確的除錯資訊。 在 Kotlin 1.6.20 之前，儲存的檔案路徑是絕對的。由於函式庫作者可能不想共享絕對路徑，因此 1.6.20 版本提供了一個替代選項。</p><p>如果您正在發佈 <code>klib</code> 並希望在產物中僅使用原始檔的相對路徑，您現在可以傳遞 <code>-Xklib-relative-path-base</code> 編譯器選項，並帶有一個或多個原始檔的基本路徑：</p>`,155)),t(p,{group:"build-script"},{default:e(()=>[t(n,{title:"Kotlin","group-key":"kotlin"},{default:e(()=>s[2]||(s[2]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withType"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(org.jetbrains.kotlin.gradle.dsl.KotlinCompile::"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"class"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"configureEach"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"    // $base is a base path of source files")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    kotlinOptions.freeCompilerArgs "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"+="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "-Xklib-relative-path-base='),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"$base"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"')]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),t(n,{title:"Groovy","group-key":"groovy"},{default:e(()=>s[3]||(s[3]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"withType("),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"org.jetbrains.kotlin.gradle.dsl.KotlinCompile"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"configureEach {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    kotlinOptions {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"        // $base is a base path of source files")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        freeCompilerArgs "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"+="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "-Xklib-relative-path-base='),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"$base"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"')]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),s[14]||(s[14]=l('<h3 id="為-kotlin-js-gradle-專案持久化-yarn-lock-檔案" tabindex="-1">為 Kotlin/JS Gradle 專案持久化 <code>yarn.lock</code> 檔案 <a class="header-anchor" href="#為-kotlin-js-gradle-專案持久化-yarn-lock-檔案" aria-label="Permalink to &quot;為 Kotlin/JS Gradle 專案持久化 `yarn.lock` 檔案&quot;">​</a></h3><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>此功能已回溯移植到 Kotlin 1.6.10。</p></div><p>Kotlin/JS Gradle 外掛程式現在提供了持久化 <code>yarn.lock</code> 檔案的功能，使得鎖定專案的 npm 依賴項版本成為可能，無需額外的 Gradle 配置。 此功能透過在專案根目錄中新增自動生成的 <code>kotlin-js-store</code> 目錄，改變了預設專案結構。 該目錄內部包含 <code>yarn.lock</code> 檔案。</p><p>我們強烈建議將 <code>kotlin-js-store</code> 目錄及其內容提交到您的版本控制系統。 將鎖定檔案提交到您的版本控制系統是一種<a href="https://classic.yarnpkg.com/blog/2016/11/24/lockfiles-for-all/" target="_blank" rel="noreferrer">推薦的做法</a>，因為它確保您的應用程式在所有機器上都使用完全相同的依賴樹進行建置，無論這些機器是其他機器上的開發環境還是 CI/CD 服務。 鎖定檔案還可以防止您的 npm 依賴項在專案在新機器上被檢出時自動更新，這是一個安全疑慮。</p><p><a href="https://github.com/dependabot" target="_blank" rel="noreferrer">Dependabot</a> 等工具也可以解析您的 Kotlin/JS 專案的 <code>yarn.lock</code> 檔案，並在您依賴的任何 npm 套件受到危害時向您提供警告。</p><p>如果需要，您可以在建置腳本中更改目錄和鎖定檔案名稱：</p>',6)),t(p,{group:"build-script"},{default:e(()=>[t(n,{title:"Kotlin","group-key":"kotlin"},{default:e(()=>s[4]||(s[4]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"rootProject.plugins."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withType"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"org"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"jetbrains"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"gradle"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"targets"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"js"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"yarn"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"YarnPlugin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"> {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    rootProject."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"the"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"org"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"jetbrains"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"gradle"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"targets"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"js"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"yarn"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"YarnRootExtension"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},">().lockFileDirectory "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"=")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        project.rootDir."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"resolve"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"my-kotlin-js-store"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    rootProject."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"the"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"org"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"jetbrains"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"gradle"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"targets"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"js"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"yarn"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"YarnRootExtension"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},">().lockFileName "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "my-yarn.lock"')]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),t(n,{title:"Groovy","group-key":"groovy"},{default:e(()=>s[5]||(s[5]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"rootProject"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"plugins"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"withType("),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"org.jetbrains.kotlin.gradle.targets.js.yarn.YarnPlugin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    rootProject"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"extensions"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"getByType("),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"org.jetbrains.kotlin.gradle.targets.js.yarn.YarnRootExtension"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"lockFileDirectory "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"=")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        file("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"my-kotlin-js-store"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    rootProject"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"extensions"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"getByType("),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"org.jetbrains.kotlin.gradle.targets.js.yarn.YarnRootExtension"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"lockFileName "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," 'my-yarn.lock'")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),s[15]||(s[15]=l('<div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>更改鎖定檔案的名稱可能會導致依賴項檢查工具無法再識別該檔案。</p></div><h3 id="預設情況下使用-ignore-scripts-安裝-npm-依賴項" tabindex="-1">預設情況下使用 --ignore-scripts 安裝 npm 依賴項 <a class="header-anchor" href="#預設情況下使用-ignore-scripts-安裝-npm-依賴項" aria-label="Permalink to &quot;預設情況下使用 --ignore-scripts 安裝 npm 依賴項&quot;">​</a></h3><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>此功能已回溯移植到 Kotlin 1.6.10。</p></div><p>Kotlin/JS Gradle 外掛程式現在預設阻止在安裝 npm 依賴項期間執行<a href="https://docs.npmjs.com/cli/v8/using-npm/scripts#life-cycle-scripts" target="_blank" rel="noreferrer">生命週期腳本</a>。 此變更旨在降低執行來自受損 npm 套件的惡意程式碼的可能性。</p><p>若要回滾到舊配置，您可以透過在 <code>build.gradle(.kts)</code> 中新增以下行來明確啟用生命週期腳本執行：</p>',5)),t(p,{group:"build-script"},{default:e(()=>[t(n,{title:"Kotlin","group-key":"kotlin"},{default:e(()=>s[6]||(s[6]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"rootProject.plugins."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withType"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"org"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"jetbrains"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"gradle"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"targets"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"js"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"yarn"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"YarnPlugin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"> {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    rootProject."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"the"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"org"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"jetbrains"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"gradle"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"targets"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"js"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"yarn"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"YarnRootExtension"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},">().ignoreScripts "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," false")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),t(n,{title:"Groovy","group-key":"groovy"},{default:e(()=>s[7]||(s[7]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"rootProject"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"plugins"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"withType("),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"org.jetbrains.kotlin.gradle.targets.js.yarn.YarnPlugin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    rootProject"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"extensions"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"getByType("),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"org.jetbrains.kotlin.gradle.targets.js.yarn.YarnRootExtension"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"ignoreScripts "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," false")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),s[16]||(s[16]=l(`<p>了解有關 <a href="/zh-Hant/kotlin/js-project-setup#npm-dependencies">Kotlin/JS Gradle 專案的 npm 依賴項</a>的更多資訊。</p><h2 id="gradle" tabindex="-1">Gradle <a class="header-anchor" href="#gradle" aria-label="Permalink to &quot;Gradle&quot;">​</a></h2><p>Kotlin 1.6.20 為 Kotlin Gradle 外掛程式帶來了以下變更：</p><ul><li>用於定義 Kotlin 編譯器執行策略的新<a href="#properties-for-defining-kotlin-compiler-execution-strategy">屬性 <code>kotlin.compiler.execution.strategy</code> 和 <code>compilerExecutionStrategy</code></a></li><li><a href="#deprecation-of-build-options-for-kapt-and-coroutines">棄用選項 <code>kapt.use.worker.api</code>、<code>kotlin.experimental.coroutines</code> 和 <code>kotlin.coroutines</code></a></li><li><a href="#removal-of-the-kotlin-parallel-tasks-in-project-build-option">移除 <code>kotlin.parallel.tasks.in.project</code> 建置選項</a></li></ul><h3 id="用於定義-kotlin-編譯器執行策略的屬性" tabindex="-1">用於定義 Kotlin 編譯器執行策略的屬性 <a class="header-anchor" href="#用於定義-kotlin-編譯器執行策略的屬性" aria-label="Permalink to &quot;用於定義 Kotlin 編譯器執行策略的屬性&quot;">​</a></h3><p>在 Kotlin 1.6.20 之前，您使用系統屬性 <code>-Dkotlin.compiler.execution.strategy</code> 來定義 Kotlin 編譯器執行策略。 此屬性在某些情況下可能不方便。 Kotlin 1.6.20 引入了一個同名的 Gradle 屬性 <code>kotlin.compiler.execution.strategy</code> 和編譯任務屬性 <code>compilerExecutionStrategy</code>。</p><p>系統屬性仍然有效，但將在未來版本中移除。</p><p>目前屬性的優先順序如下：</p><ul><li>任務屬性 <code>compilerExecutionStrategy</code> 優先於系統屬性和 Gradle 屬性 <code>kotlin.compiler.execution.strategy</code>。</li><li>Gradle 屬性優先於系統屬性。</li></ul><p>有三種編譯器執行策略可以分配給這些屬性：</p><table tabindex="0"><thead><tr><th>策略</th><th>Kotlin 編譯器執行位置</th><th>增量編譯</th><th>其他特性</th></tr></thead><tbody><tr><td>守護行程 (Daemon)</td><td>在其自身的守護行程程序內部</td><td>是</td><td><em>預設策略</em>。可在不同的 Gradle 守護行程之間共享</td></tr><tr><td>進程內 (In process)</td><td>在 Gradle 守護行程程序內部</td><td>否</td><td>可能與 Gradle 守護行程共享堆積記憶體</td></tr><tr><td>進程外 (Out of process)</td><td>每次呼叫都在單獨的程序中</td><td>否</td><td>—</td></tr></tbody></table><p>因此，<code>kotlin.compiler.execution.strategy</code> 屬性（包括系統屬性和 Gradle 屬性）的可用值為：</p><ol><li><code>daemon</code> (預設)</li><li><code>in-process</code></li><li><code>out-of-process</code></li></ol><p>在 <code>gradle.properties</code> 中使用 Gradle 屬性 <code>kotlin.compiler.execution.strategy</code>：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># gradle.properties</span></span>
<span class="line"><span>kotlin.compiler.execution.strategy=out-of-process</span></span></code></pre></div><p><code>compilerExecutionStrategy</code> 任務屬性的可用值為：</p><ol><li><code>org.jetbrains.kotlin.gradle.tasks.KotlinCompilerExecutionStrategy.DAEMON</code> (預設)</li><li><code>org.jetbrains.kotlin.gradle.tasks.KotlinCompilerExecutionStrategy.IN_PROCESS</code></li><li><code>org.jetbrains.kotlin.gradle.tasks.KotlinCompilerExecutionStrategy.OUT_OF_PROCESS</code></li></ol><p>在 <code>build.gradle.kts</code> 建置腳本中使用 <code>compilerExecutionStrategy</code> 任務屬性：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.kotlin.gradle.dsl.KotlinCompile</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.kotlin.gradle.tasks.KotlinCompilerExecutionStrategy</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tasks.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KotlinCompile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configureEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    compilerExecutionStrategy.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(KotlinCompilerExecutionStrategy.IN_PROCESS)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>請在此 <a href="https://youtrack.jetbrains.com/issue/KT-49299" target="_blank" rel="noreferrer">YouTrack 任務</a>中留下您的意見回饋。</p><h3 id="棄用-kapt-和協程的建置選項" tabindex="-1">棄用 kapt 和協程的建置選項 <a class="header-anchor" href="#棄用-kapt-和協程的建置選項" aria-label="Permalink to &quot;棄用 kapt 和協程的建置選項&quot;">​</a></h3><p>在 Kotlin 1.6.20 中，我們更改了屬性的棄用級別：</p><ul><li><p>我們棄用了透過 Kotlin 守護行程執行 <a href="/zh-Hant/kotlin/kapt">kapt</a> 的能力，使用 <code>kapt.use.worker.api</code> – 現在它會在 Gradle 的輸出中產生警告。 預設情況下，自 1.3.70 版本發佈以來，<a href="/zh-Hant/kotlin/kapt#run-kapt-tasks-in-parallel">kapt 已使用 Gradle 工作程序</a>，我們建議堅持此方法。</p><p>我們將在未來版本中移除選項 <code>kapt.use.worker.api</code>。</p></li><li><p>我們棄用了 <code>kotlin.experimental.coroutines</code> Gradle DSL 選項以及在 <code>gradle.properties</code> 中使用的 <code>kotlin.coroutines</code> 屬性。 只需使用_暫停函數_或<a href="/zh-Hant/kotlin/gradle-configure-project#set-a-dependency-on-a-kotlinx-library">將 <code>kotlinx.coroutines</code> 依賴項新增到您的 <code>build.gradle(.kts)</code> 檔案中</a>。</p><p>在<a href="/zh-Hant/kotlin/coroutines-guide">協程指南</a>中了解有關協程的更多資訊。</p></li></ul><h3 id="移除-kotlin-parallel-tasks-in-project-建置選項" tabindex="-1">移除 kotlin.parallel.tasks.in.project 建置選項 <a class="header-anchor" href="#移除-kotlin-parallel-tasks-in-project-建置選項" aria-label="Permalink to &quot;移除 kotlin.parallel.tasks.in.project 建置選項&quot;">​</a></h3><p>在 Kotlin 1.5.20 中，我們<a href="/zh-Hant/kotlin/whatsnew1520#deprecation-of-the-kotlin-parallel-tasks-in-project-build-property">宣布棄用建置選項 <code>kotlin.parallel.tasks.in.project</code></a>。 此選項已在 Kotlin 1.6.20 中移除。</p><p>根據專案的不同，Kotlin 守護行程中的平行編譯可能需要更多記憶體。 為減少記憶體消耗，請<a href="/zh-Hant/kotlin/gradle-compilation-and-caches#setting-kotlin-daemon-s-jvm-arguments">增加 Kotlin 守護行程的 JVM 堆積大小</a>。</p><p>了解有關 Kotlin Gradle 外掛程式中<a href="/zh-Hant/kotlin/gradle-compiler-options">目前支援的編譯器選項</a>的更多資訊。</p>`,27))])}const x=k(g,[["render",E]]);export{C as __pageData,x as default};
