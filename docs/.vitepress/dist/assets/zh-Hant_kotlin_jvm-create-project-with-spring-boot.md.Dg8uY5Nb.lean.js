import{_ as d}from"./chunks/icon-1.K8qzZaho.js";import{_ as g}from"./chunks/icon-2-todo.CF_tKCD9.js";import{_ as E}from"./chunks/icon-3-todo.Gx4op1du.js";import{_ as c}from"./chunks/icon-4-todo.GaeEmerm.js";import{_ as u,a as m,b as y,c as F,d as b}from"./chunks/spring-application-response.CubByq9P.js";import{_ as C,C as p,c as B,o as f,j as s,G as a,ag as e,a as i,w as t}from"./chunks/framework.Bksy39di.js";const J=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/jvm-create-project-with-spring-boot.md","filePath":"zh-Hant/kotlin/jvm-create-project-with-spring-boot.md","lastUpdated":1755514048000}'),S={name:"zh-Hant/kotlin/jvm-create-project-with-spring-boot.md"};function A(_,n,q,v,D,w){const r=p("web-summary"),k=p("tldr"),l=p("def"),o=p("deflist"),h=p("code-block");return f(),B("div",null,[n[14]||(n[14]=s("h1",{id:"使用-kotlin-建立-spring-boot-專案",tabindex:"-1"},[i("使用 Kotlin 建立 Spring Boot 專案 "),s("a",{class:"header-anchor",href:"#使用-kotlin-建立-spring-boot-專案","aria-label":'Permalink to "使用 Kotlin 建立 Spring Boot 專案"'},"​")],-1)),a(r,null,{default:t(()=>n[0]||(n[0]=[i("使用 IntelliJ IDEA 搭配 Kotlin 建立 Spring Boot 應用程式。")])),_:1}),a(k,null,{default:t(()=>n[1]||(n[1]=[s("p",null,[i("這是「"),s("strong",null,"Spring Boot 與 Kotlin 入門"),i("」教學的第一部分：")],-1),s("br",null,null,-1),s("p",null,[s("img",{src:d,width:"20",alt:"First step"}),i(),s("strong",null,"使用 Kotlin 建立 Spring Boot 專案"),s("br"),s("img",{src:g,width:"20",alt:"Second step"}),i(" 在 Spring Boot 專案中新增資料類別"),s("br"),s("img",{src:E,width:"20",alt:"Third step"}),i(" 為 Spring Boot 專案新增資料庫支援"),s("br"),s("img",{src:c,width:"20",alt:"Fourth step"}),i(" 使用 Spring Data CrudRepository 進行資料庫存取"),s("br")],-1)])),_:1}),n[15]||(n[15]=e("",8)),n[16]||(n[16]=s("h2",{"initial-collapse-state":"collapsed",collapsible:"true",id:"探索專案的-gradle-建構檔",tabindex:"-1"},[i("探索專案的 Gradle 建構檔 "),s("a",{class:"header-anchor",href:"#探索專案的-gradle-建構檔","aria-label":'Permalink to "探索專案的 Gradle 建構檔 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),n[17]||(n[17]=e("",10)),a(o,{collapsible:"true"},{default:t(()=>[a(l,{title:"宣告類別 – class DemoApplication"},{default:t(()=>n[2]||(n[2]=[s("p",null,[i("在套件宣告和匯入 (import) 語句之後，您會看到第一個類別宣告，"),s("code",null,"class DemoApplication"),i("。")],-1),s("p",null,[i("在 Kotlin 中，如果一個類別不包含任何成員（屬性或函數），您可以省略類別主體（"),s("code",null,"{}"),i("），以求簡潔。")],-1)])),_:1}),a(l,{title:"@SpringBootApplication 註解"},{default:t(()=>n[3]||(n[3]=[s("p",null,[s("a",{href:"https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#using.using-the-springbootapplication-annotation"},[s("code",null,"@SpringBootApplication 註解")]),i(" 是 Spring Boot 應用程式中的一個便利註解。 它啟用了 Spring Boot 的 "),s("a",{href:"https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#using.auto-configuration"},"自動組態 (auto-configuration)"),i("、"),s("a",{href:"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/ComponentScan.html"},"元件掃描 (component scan)"),i("，並且能夠在「應用程式類別」上定義額外組態。 ")],-1)])),_:1}),a(l,{title:"程式進入點 – main()"},{default:t(()=>n[4]||(n[4]=[s("p",null,[s("a",{href:"/zh-Hant/kotlin/basic-syntax#program-entry-point"},[s("code",null,"main()")]),i(" 函數是應用程式的進入點。")],-1),s("p",null,[i("它被宣告為 "),s("code",null,"DemoApplication"),i(" 類別之外的"),s("a",{href:"/zh-Hant/kotlin/functions#function-scope"},"頂層函數 (top-level function)"),i("。"),s("code",null,"main()"),i(" 函數呼叫 Spring 的 "),s("code",null,"runApplication(*args)"),i(" 函數，以啟動 Spring Framework 應用程式。")],-1)])),_:1}),a(l,{title:"可變引數 – args: Array<String>"},{default:t(()=>n[5]||(n[5]=[s("p",null,[i("如果您檢查 "),s("code",null,"runApplication()"),i(" 函數的宣告，您會看到函數的參數被標記為 "),s("a",{href:"/zh-Hant/kotlin/functions#variable-number-of-arguments-varargs"},[s("code",null,"vararg"),i(" 修飾符")]),i("："),s("code",null,"vararg args: String"),i("。 這意味著您可以向函數傳遞可變數量的 String 引數。 ")],-1)])),_:1}),a(l,{title:"展開運算子 – (*args)"},{default:t(()=>n[6]||(n[6]=[s("p",null,[s("code",null,"args"),i(" 是 "),s("code",null,"main()"),i(" 函數的一個參數，宣告為 String 陣列。 由於這是一個 String 陣列，並且您想將其內容傳遞給函數，因此請使用展開運算子 (spread operator)（在陣列前加上星號 "),s("code",null,"*"),i("）。 ")],-1)])),_:1})]),_:1}),n[18]||(n[18]=e("",4)),a(o,{collapsible:"true"},{default:t(()=>[a(l,{title:"@RestController 註解"},{default:t(()=>n[7]||(n[7]=[s("p",null,[i("您需要告訴 Spring "),s("code",null,"MessageController"),i(" 是一個 REST 控制器 (REST Controller)，因此您應該用 "),s("code",null,"@RestController"),i(" 註解來標記它。")],-1),s("p",null,[i("這個註解表示這個類別將會被元件掃描 (component scan) 所識別，因為它與我們的 "),s("code",null,"DemoApplication"),i(" 類別位於同一個套件中。")],-1)])),_:1}),a(l,{title:"@GetMapping 註解"},{default:t(()=>[n[9]||(n[9]=s("p",null,[s("code",null,"@GetMapping"),i(" 標記了 REST 控制器中實作對應 HTTP GET 呼叫端點 (endpoints) 的函數：")],-1)),a(h,{lang:"kotlin"},{default:t(()=>n[8]||(n[8]=[i(' @GetMapping("/") fun index(@RequestParam("name") name: String) = "Hello, $name!" ')])),_:1})]),_:1}),a(l,{title:"@RequestParam 註解"},{default:t(()=>n[10]||(n[10]=[s("p",null,[i("函數參數 "),s("code",null,"name"),i(" 被標記為 "),s("code",null,"@RequestParam"),i(" 註解。這個註解表示方法參數應該綁定到網頁請求參數。")],-1),s("p",null,[i("因此，如果您在根目錄存取應用程式並提供一個名為「name」的請求參數，例如 "),s("code",null,"/?name=<your-value>"),i("，該參數值將被用作呼叫 "),s("code",null,"index()"),i(" 函數的引數。")],-1)])),_:1}),a(l,{title:"單一表達式函數 – index()"},{default:t(()=>n[11]||(n[11]=[s("p",null,[i("由於 "),s("code",null,"index()"),i(" 函數只包含一個語句，您可以將其宣告為"),s("a",{href:"/zh-Hant/kotlin/functions#single-expression-functions"},"單一表達式函數 (single-expression function)"),i("。")],-1),s("p",null,[i("這表示可以省略花括號 (curly braces)，並且函數主體在等號 "),s("code",null,"="),i(" 後面指定。")],-1)])),_:1}),a(l,{title:"函數回傳型別的型別推斷"},{default:t(()=>n[12]||(n[12]=[s("p",null,[s("code",null,"index()"),i(" 函數沒有明確宣告回傳型別。相反地，編譯器透過查看等號 "),s("code",null,"="),i(" 右側語句的結果來推斷回傳型別。")],-1),s("p",null,[i("表達式 "),s("code",null,"Hello, $name!"),i(" 的型別是 "),s("code",null,"String"),i("，因此函數的回傳型別也是 "),s("code",null,"String"),i("。")],-1)])),_:1}),a(l,{title:"字串模板 – $name"},{default:t(()=>n[13]||(n[13]=[s("p",null,[s("code",null,"Hello, $name!"),i(" 表達式在 Kotlin 中稱為"),s("a",{href:"/zh-Hant/kotlin/strings#string-templates"},[s("em",null,"字串模板 (String template)")]),i("。")],-1),s("p",null,"字串模板是包含嵌入式表達式的字串文字 (String literals)。",-1),s("p",null,"這是字串串聯 (String concatenation) 操作的便捷替代方案。",-1)])),_:1})]),_:1}),n[19]||(n[19]=e("",6))])}const R=C(S,[["render",A]]);export{J as __pageData,R as default};
