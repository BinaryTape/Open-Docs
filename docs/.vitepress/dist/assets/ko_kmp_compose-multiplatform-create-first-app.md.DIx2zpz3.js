import{_ as h,a as d,b as k,c,d as u,e as m}from"./chunks/ios-new-configuration.DNF7jnri.js";import{_ as g}from"./chunks/icon-3-todo.aEuKIG4W.js";import{_ as E}from"./chunks/icon-4-todo.DqbNYzPe.js";import{_ as f,a as b,b as _,c as y,d as C,e as A,f as F,g as I,h as S}from"./chunks/first-compose-project-on-web.B8aVrJBG.js";import{_ as v,C as t,c as M,o as D,j as i,G as a,ag as n,a as s,w as e}from"./chunks/framework.Bksy39di.js";const X=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kmp/compose-multiplatform-create-first-app.md","filePath":"ko/kmp/compose-multiplatform-create-first-app.md","lastUpdated":1755516278000}'),w={name:"ko/kmp/compose-multiplatform-create-first-app.md"};function P(x,l,q,B,T,O){const o=t("secondary-label"),r=t("tldr"),p=t("snippet");return D(),M("div",null,[l[3]||(l[3]=i("h1",{id:"compose-multiplatform-앱-생성하기",tabindex:"-1"},[s("Compose Multiplatform 앱 생성하기 "),i("a",{class:"header-anchor",href:"#compose-multiplatform-앱-생성하기","aria-label":'Permalink to "Compose Multiplatform 앱 생성하기"'},"​")],-1)),a(o,{ref:"IntelliJ IDEA"},null,512),a(o,{ref:"Android Studio"},null,512),a(r,null,{default:e(()=>l[0]||(l[0]=[i("p",null,"이 튜토리얼은 IntelliJ IDEA를 사용하지만, Android Studio에서도 따라 할 수 있습니다. 두 IDE 모두 동일한 핵심 기능과 Kotlin Multiplatform 지원을 공유합니다.",-1),i("br",null,null,-1),i("p",null,[s("이 튜토리얼은 "),i("strong",null,"공유 로직과 UI를 사용하는 Compose Multiplatform 앱 생성하기"),s(" 튜토리얼의 첫 번째 파트입니다.")],-1),i("p",null,[i("img",{src:h,width:"20",alt:"First step"}),s(),i("strong",null,"Compose Multiplatform 앱 생성하기"),i("br"),i("img",{src:d,width:"20",alt:"Second step"}),s(" 컴포저블 코드 탐색하기 "),i("br"),i("img",{src:g,width:"20",alt:"Third step"}),s(" 프로젝트 수정하기 "),i("br"),i("br"),i("img",{src:E,width:"20",alt:"Fourth step"}),s(" 나만의 애플리케이션 생성하기 "),i("br")],-1)])),_:1}),l[4]||(l[4]=n('<p>여기서는 IntelliJ IDEA를 사용하여 첫 번째 Compose Multiplatform 애플리케이션을 생성하고 실행하는 방법을 배웁니다.</p><p><a href="https://www.jetbrains.com/lp/compose-multiplatform/" target="_blank" rel="noreferrer">Compose Multiplatform</a> UI 프레임워크를 사용하면 Kotlin Multiplatform의 코드 공유 기능을 애플리케이션 로직을 넘어 확장할 수 있습니다. 사용자 인터페이스를 한 번 구현한 다음 Compose Multiplatform에서 지원하는 모든 플랫폼에 사용할 수 있습니다.</p><p>이 튜토리얼에서는 Android, iOS, 데스크톱, 웹에서 실행되는 샘플 애플리케이션을 빌드합니다. 사용자 인터페이스를 생성하기 위해 Compose Multiplatform 프레임워크를 사용하고, 컴포저블 함수, 테마, 레이아웃, 이벤트, 수정자(modifier) 등 기본 사항을 배웁니다.</p><p>이 튜토리얼에서 유의할 점:</p><ul><li>Compose Multiplatform, Android 또는 iOS에 대한 이전 경험은 필요하지 않습니다. 시작하기 전에 <a href="https://kotlinlang.org/docs/getting-started.html" target="_blank" rel="noreferrer">Kotlin의 기본</a>을 숙지하는 것을 권장합니다.</li><li>이 튜토리얼을 완료하려면 IntelliJ IDEA만 있으면 됩니다. 이를 통해 Android 및 데스크톱에서 멀티플랫폼 개발을 시도할 수 있습니다. iOS의 경우 Xcode가 설치된 macOS 기기가 필요합니다. 이는 iOS 개발의 일반적인 제한 사항입니다.</li><li>원하는 경우 관심 있는 특정 플랫폼으로 선택을 제한하고 다른 플랫폼은 생략할 수 있습니다.</li></ul><h2 id="프로젝트-생성하기" tabindex="-1">프로젝트 생성하기 <a class="header-anchor" href="#프로젝트-생성하기" aria-label="Permalink to &quot;프로젝트 생성하기&quot;">​</a></h2><ol><li><p><a href="./quickstart">퀵스타트</a>에서 <a href="./quickstart#set-up-the-environment">Kotlin Multiplatform 개발 환경 설정</a> 지침을 완료하세요.</p></li><li><p>IntelliJ IDEA에서 <strong>File</strong> | <strong>New</strong> | <strong>Project</strong>를 선택합니다.</p></li><li><p>왼쪽 패널에서 <strong>Kotlin Multiplatform</strong>을 선택합니다.</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Kotlin Multiplatform IDE 플러그인을 사용하지 않는 경우, <a href="https://kmp.jetbrains.com/?android=true&amp;ios=true&amp;iosui=compose&amp;desktop=true&amp;web=true&amp;includeTests=true" target="_blank" rel="noreferrer">KMP 웹 위자드</a>를 사용하여 동일한 프로젝트를 생성할 수 있습니다.</p></div></li><li><p><strong>New Project</strong> 창에서 다음 필드를 지정합니다:</p><ul><li><strong>Name</strong>: ComposeDemo</li><li><strong>Group</strong>: compose.project</li><li><strong>Artifact</strong>: demo</li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>웹 위자드를 사용하는 경우, &quot;ComposeDemo&quot;를 <strong>Project Name</strong>으로, &quot;compose.project.demo&quot;를 <strong>Project ID</strong>로 지정합니다.</p></div></li><li><p><strong>Android</strong>, <strong>iOS</strong>, <strong>Desktop</strong>, <strong>Web</strong> 타겟을 선택합니다. iOS에 대해 <strong>Share UI</strong> 옵션이 선택되어 있는지 확인합니다.</p></li><li><p>모든 필드와 타겟을 지정했으면 <strong>Create</strong>를 클릭합니다 (웹 위자드에서는 <strong>Download</strong>).</p></li></ol><p><img src="'+f+'" alt="Create Compose Multiplatform project" width="800"></p><h2 id="프로젝트-구조-살펴보기" tabindex="-1">프로젝트 구조 살펴보기 <a class="header-anchor" href="#프로젝트-구조-살펴보기" aria-label="Permalink to &quot;프로젝트 구조 살펴보기&quot;">​</a></h2><p>IntelliJ IDEA에서 &quot;ComposeDemo&quot; 폴더로 이동합니다. 위자드에서 iOS를 선택하지 않았다면, &quot;ios&quot; 또는 &quot;apple&quot;로 시작하는 폴더가 없을 것입니다.</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>IntelliJ IDEA가 프로젝트의 Android Gradle 플러그인을 최신 버전으로 업그레이드하도록 자동으로 제안할 수 있습니다. Kotlin Multiplatform은 최신 AGP 버전과 호환되지 않으므로 업그레이드하지 않는 것을 권장합니다 (<a href="https://kotlinlang.org/docs/multiplatform-compatibility-guide.html#version-compatibility" target="_blank" rel="noreferrer">호환성 표</a> 참조).</p></div><p>프로젝트에는 두 개의 모듈이 포함되어 있습니다:</p><ul><li>_composeApp_은 Android, 데스크톱, iOS, 웹 애플리케이션 간에 공유되는 로직(모든 플랫폼에 사용하는 코드)을 포함하는 Kotlin 모듈입니다. 빌드 프로세스를 자동화하는 데 도움이 되는 <a href="https://kotlinlang.org/docs/gradle.html" target="_blank" rel="noreferrer">Gradle</a>을 빌드 시스템으로 사용합니다.</li><li>_iosApp_은 iOS 애플리케이션으로 빌드되는 Xcode 프로젝트입니다. 공유 모듈에 의존하며 이를 iOS 프레임워크로 사용합니다.</li></ul><p><img src="'+b+'" alt="Compose Multiplatform project structure" width="350"></p><p><strong>composeApp</strong> 모듈은 다음 소스 세트로 구성됩니다: <code>androidMain</code>, <code>commonMain</code>, <code>desktopMain</code>, <code>iosMain</code>, <code>wasmJsMain</code>. _소스 세트_는 논리적으로 함께 그룹화된 파일들의 집합에 대한 Gradle 개념으로, 각 그룹은 자체 종속성을 가집니다. Kotlin Multiplatform에서 서로 다른 소스 세트는 다른 플랫폼을 타겟팅할 수 있습니다.</p><p><code>commonMain</code> 소스 세트는 공통 Kotlin 코드를 사용하고, 플랫폼 소스 세트는 각 타겟에 특정한 Kotlin 코드를 사용합니다. <code>androidMain</code> 및 <code>desktopMain</code>에는 Kotlin/JVM이 사용됩니다. <code>iosMain</code>에는 Kotlin/Native가 사용됩니다. 반면 <code>wasmJsMain</code>에는 Kotlin/Wasm이 사용됩니다.</p><p>공유 모듈이 Android 라이브러리로 빌드될 때, 공통 Kotlin 코드는 Kotlin/JVM으로 처리됩니다. iOS 프레임워크로 빌드될 때, 공통 Kotlin 코드는 Kotlin/Native로 처리됩니다. 공유 모듈이 웹 앱으로 빌드될 때, 공통 Kotlin 코드는 Kotlin/Wasm으로 처리됩니다.</p><p><img src="'+_+`" alt="Common Kotlin, Kotlin/JVM, and Kotlin/Native" width="700"></p><p>일반적으로 플랫폼별 소스 세트에서 기능을 중복하는 대신, 가능하면 구현을 공통 코드로 작성하세요.</p><p><code>composeApp/src/commonMain/kotlin</code> 디렉터리에서 <code>App.kt</code> 파일을 엽니다. 이 파일에는 최소한이지만 완전한 Compose Multiplatform UI를 구현하는 <code>App()</code> 함수가 포함되어 있습니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Composable</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Preview</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    MaterialTheme</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> showContent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> remember</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mutableStateOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        Column</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            modifier </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Modifier</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">safeContentPadding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fillMaxSize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            horizontalAlignment </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Alignment.CenterHorizontally,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            Button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(onClick </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { showContent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">showContent }) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Click me!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            AnimatedVisibility</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(showContent) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> greeting </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> remember</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Greeting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                Column</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Modifier.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fillMaxWidth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), horizontalAlignment </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Alignment.CenterHorizontally) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    Image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">painterResource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Res.drawable.compose_multiplatform), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Compose: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$greeting</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>지원되는 모든 플랫폼에서 애플리케이션을 실행해 봅시다.</p><h2 id="애플리케이션-실행하기" tabindex="-1">애플리케이션 실행하기 <a class="header-anchor" href="#애플리케이션-실행하기" aria-label="Permalink to &quot;애플리케이션 실행하기&quot;">​</a></h2><p>애플리케이션을 Android, iOS, 데스크톱, 웹에서 실행할 수 있습니다. 특정 순서로 애플리케이션을 실행할 필요는 없으므로 가장 익숙한 플랫폼부터 시작하세요.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Gradle 빌드 작업을 사용할 필요는 없습니다. 멀티플랫폼 애플리케이션에서는 모든 지원되는 타겟의 디버그 및 릴리스 버전을 빌드합니다. Multiplatform 위자드에서 선택한 플랫폼에 따라 시간이 걸릴 수 있습니다. 실행 구성(run configuration)을 사용하면 훨씬 빠릅니다. 이 경우 선택된 타겟만 빌드됩니다.</p></div><h3 id="android에서-애플리케이션-실행하기" tabindex="-1">Android에서 애플리케이션 실행하기 <a class="header-anchor" href="#android에서-애플리케이션-실행하기" aria-label="Permalink to &quot;Android에서 애플리케이션 실행하기&quot;">​</a></h3><ol><li>실행 구성 목록에서 <strong>composeApp</strong>을 선택합니다.</li><li>Android 가상 기기를 선택한 다음 <strong>Run</strong>을 클릭합니다: IDE가 선택된 가상 기기가 꺼져 있다면 시작하고, 앱을 실행합니다.</li></ol><p><img src="`+u+'" alt="Run the Compose Multiplatform app on Android" width="350"></p><p><img src="'+y+'" alt="First Compose Multiplatform app on Android" width="300"></p>',29)),a(p,{id:"run_android_other_devices"},{default:e(()=>l[1]||(l[1]=[i("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"다른-android-시뮬레이션-기기에서-실행",tabindex:"-1"},[s("다른 Android 시뮬레이션 기기에서 실행 "),i("a",{class:"header-anchor",href:"#다른-android-시뮬레이션-기기에서-실행","aria-label":'Permalink to "다른 Android 시뮬레이션 기기에서 실행 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1),i("p",null,[i("a",{href:"https://developer.android.com/studio/run/emulator#runningapp",target:"_blank",rel:"noreferrer"},"Android Emulator를 구성하고 다른 시뮬레이션 기기에서 애플리케이션을 실행하는 방법"),s("을 알아보세요.")],-1),i("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"실제-android-기기에서-실행",tabindex:"-1"},[s("실제 Android 기기에서 실행 "),i("a",{class:"header-anchor",href:"#실제-android-기기에서-실행","aria-label":'Permalink to "실제 Android 기기에서 실행 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1),i("p",null,[i("a",{href:"https://developer.android.com/studio/run/device",target:"_blank",rel:"noreferrer"},"하드웨어 기기를 구성하고 연결하여 애플리케이션을 실행하는 방법"),s("을 알아보세요.")],-1)])),_:1}),l[5]||(l[5]=n('<h3 id="ios에서-애플리케이션-실행하기" tabindex="-1">iOS에서 애플리케이션 실행하기 <a class="header-anchor" href="#ios에서-애플리케이션-실행하기" aria-label="Permalink to &quot;iOS에서 애플리케이션 실행하기&quot;">​</a></h3><p>초기 설정의 일부로 Xcode를 실행하지 않았다면, iOS 앱을 실행하기 전에 Xcode를 실행하세요.</p><p>IntelliJ IDEA에서 실행 구성 목록에서 <strong>iosApp</strong>을 선택하고, 실행 구성 옆에 있는 시뮬레이션 기기를 선택한 후 <strong>Run</strong>을 클릭합니다. 목록에 사용 가능한 iOS 구성이 없다면, <a href="#run-on-a-new-ios-simulated-device">새 실행 구성</a>을 추가하세요.</p><p><img src="'+m+'" alt="Run the Compose Multiplatform app on iOS" width="350"></p><p><img src="'+C+'" alt="First Compose Multiplatform app on iOS" width="300"></p>',5)),a(p,{id:"run_ios_other_devices"},{default:e(()=>l[2]||(l[2]=[i("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"새-ios-시뮬레이션-기기에서-실행",tabindex:"-1"},[s("새 iOS 시뮬레이션 기기에서 실행 "),i("a",{class:"header-anchor",href:"#새-ios-시뮬레이션-기기에서-실행","aria-label":'Permalink to "새 iOS 시뮬레이션 기기에서 실행 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1),i("p",null,"시뮬레이션 기기에서 애플리케이션을 실행하려면 새 실행 구성을 추가할 수 있습니다.",-1),i("ol",null,[i("li",null,[s("실행 구성 목록에서 "),i("strong",null,"Edit Configurations"),s("를 클릭합니다.")])],-1),i("p",null,[i("img",{src:k,alt:"Edit run configurations",width:"450"})],-1),i("ol",{start:"2"},[i("li",null,[s("구성 목록 위에 있는 "),i("strong",null,"+"),s(" 버튼을 클릭한 다음 "),i("strong",null,"Xcode Application"),s("을 선택합니다.")])],-1),i("p",null,[i("img",{src:c,alt:"New run configuration for iOS application"})],-1),i("ol",{start:"3"},[i("li",null,[i("p",null,"구성 이름을 지정합니다.")]),i("li",null,[i("p",null,[i("strong",null,"Working directory"),s("를 선택합니다. 이를 위해 프로젝트(예: "),i("strong",null,"KotlinMultiplatformSandbox"),s(")의 "),i("code",null,"iosApp"),s(" 폴더로 이동합니다.")])]),i("li",null,[i("p",null,[s("새 시뮬레이션 기기에서 애플리케이션을 실행하려면 "),i("strong",null,"Run"),s("을 클릭합니다.")])])],-1),i("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"실제-ios-기기에서-실행",tabindex:"-1"},[s("실제 iOS 기기에서 실행 "),i("a",{class:"header-anchor",href:"#실제-ios-기기에서-실행","aria-label":'Permalink to "실제 iOS 기기에서 실행 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1),i("p",null,[s("멀티플랫폼 애플리케이션을 실제 iOS 기기에서 실행할 수 있습니다. 시작하기 전에 "),i("a",{href:"https://support.apple.com/en-us/HT204316",target:"_blank",rel:"noreferrer"},"Apple ID"),s("와 연결된 팀 ID를 설정해야 합니다.")],-1),i("h5",{id:"팀-id-설정하기",tabindex:"-1"},[s("팀 ID 설정하기 "),i("a",{class:"header-anchor",href:"#팀-id-설정하기","aria-label":'Permalink to "팀 ID 설정하기"'},"​")],-1),i("p",null,"프로젝트에 팀 ID를 설정하려면 IntelliJ IDEA의 KDoctor 도구를 사용하거나 Xcode에서 팀을 선택할 수 있습니다.",-1),i("p",null,"KDoctor 사용 시:",-1),i("ol",null,[i("li",null,"IntelliJ IDEA에서 터미널에 다음 명령어를 실행합니다:")],-1),i("div",{class:"language-none vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"none"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",null,"kdoctor --team-ids")])])])],-1),i("p",null,"KDoctor가 현재 시스템에 구성된 모든 팀 ID를 다음과 같이 나열합니다:",-1),i("div",{class:"language-text vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"text"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",null,"3ABC246XYZ (Max Sample)")]),s(`
`),i("span",{class:"line"},[i("span",null,"ZABCW6SXYZ (SampleTech Inc.)")])])])],-1),i("ol",{start:"2"},[i("li",null,[s("IntelliJ IDEA에서 "),i("code",null,"iosApp/Configuration/Config.xcconfig"),s(" 파일을 열고 팀 ID를 지정합니다.")])],-1),i("p",null,"또는 Xcode에서 팀 선택하기:",-1),i("ol",null,[i("li",null,[s("Xcode로 이동하여 "),i("strong",null,"Open a project or file"),s("을 선택합니다.")]),i("li",null,[s("프로젝트의 "),i("code",null,"iosApp/iosApp.xcworkspace"),s(" 파일로 이동합니다.")]),i("li",null,[s("왼쪽 메뉴에서 "),i("code",null,"iosApp"),s("을 선택합니다.")]),i("li",null,[i("strong",null,"Signing & Capabilities"),s("로 이동합니다.")]),i("li",null,[i("strong",null,"Team"),s(" 목록에서 팀을 선택합니다.")])],-1),i("p",null,[s("아직 팀을 설정하지 않았다면 "),i("strong",null,"Team"),s(" 목록에서 "),i("strong",null,"Add an Account"),s(" 옵션을 사용하고 Xcode 지침을 따르세요.")],-1),i("ol",{start:"6"},[i("li",null,"번들 식별자(Bundle Identifier)가 고유하고 서명 인증서(Signing Certificate)가 성공적으로 할당되었는지 확인합니다.")],-1),i("h5",{id:"앱-실행하기",tabindex:"-1"},[s("앱 실행하기 "),i("a",{class:"header-anchor",href:"#앱-실행하기","aria-label":'Permalink to "앱 실행하기"'},"​")],-1),i("p",null,[s("iPhone을 케이블로 연결합니다. 이미 Xcode에 기기가 등록되어 있다면, IntelliJ IDEA에서 실행 구성 목록에 해당 기기가 표시될 것입니다. 해당 "),i("code",null,"iosApp"),s(" 구성을 실행합니다.")],-1),i("p",null,[s("아직 Xcode에 iPhone을 등록하지 않았다면, "),i("a",{href:"https://developer.apple.com/documentation/xcode/running-your-app-in-simulator-or-on-a-device/",target:"_blank",rel:"noreferrer"},"Apple 권장 사항"),s("을 따르세요. 간단히 말해, 다음을 수행해야 합니다:")],-1),i("ol",null,[i("li",null,"iPhone을 케이블로 연결합니다."),i("li",null,[s("iPhone에서 "),i("strong",null,"Settings"),s(" | "),i("strong",null,"Privacy & Security"),s("에서 개발자 모드를 활성화합니다.")]),i("li",null,[s("Xcode에서 상단 메뉴로 이동하여 "),i("strong",null,"Window"),s(" | "),i("strong",null,"Devices and Simulators"),s("를 선택합니다.")]),i("li",null,[s("더하기 기호를 클릭합니다. 연결된 iPhone을 선택하고 "),i("strong",null,"Add"),s("를 클릭합니다.")]),i("li",null,"Apple ID로 로그인하여 기기에서 개발 기능을 활성화합니다."),i("li",null,"화면의 지침에 따라 페어링 프로세스를 완료합니다.")],-1),i("p",null,[s("Xcode에 iPhone을 등록했다면, IntelliJ IDEA에서 "),i("a",{href:"#run-on-a-new-ios-simulated-device"},"새 실행 구성"),s("을 생성하고 "),i("strong",null,"Execution target"),s(" 목록에서 기기를 선택하세요. 해당 "),i("code",null,"iosApp"),s(" 구성을 실행합니다.")],-1)])),_:1}),l[6]||(l[6]=n('<h3 id="데스크톱에서-애플리케이션-실행하기" tabindex="-1">데스크톱에서 애플리케이션 실행하기 <a class="header-anchor" href="#데스크톱에서-애플리케이션-실행하기" aria-label="Permalink to &quot;데스크톱에서 애플리케이션 실행하기&quot;">​</a></h3><p>실행 구성 목록에서 **composeApp [desktop]**을 선택하고 <strong>Run</strong>을 클릭합니다. 기본적으로 실행 구성은 데스크톱 앱을 자체 OS 창에서 시작합니다:</p><p><img src="'+A+'" alt="Run the Compose Multiplatform app on desktop" width="350"></p><p><img src="'+F+'" alt="First Compose Multiplatform app on desktop" width="500"></p><h3 id="웹-애플리케이션-실행하기" tabindex="-1">웹 애플리케이션 실행하기 <a class="header-anchor" href="#웹-애플리케이션-실행하기" aria-label="Permalink to &quot;웹 애플리케이션 실행하기&quot;">​</a></h3><p>실행 구성 목록에서 **composeApp [wasmJs]**을 선택하고 <strong>Run</strong>을 클릭합니다.</p><p><img src="'+I+'" alt="Run the Compose Multiplatform app on web" width="350"></p><p>웹 애플리케이션이 브라우저에서 자동으로 열립니다. 또는 실행이 완료되면 브라우저에 다음 URL을 입력할 수 있습니다:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   http://localhost:8080/</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>8080 포트를 사용할 수 없을 수 있으므로 포트 번호가 다를 수 있습니다. 실제 포트 번호는 Gradle 빌드 콘솔에서 찾을 수 있습니다.</p></div><p><img src="'+S+'" alt="Compose web application" width="550"></p><h2 id="다음-단계" tabindex="-1">다음 단계 <a class="header-anchor" href="#다음-단계" aria-label="Permalink to &quot;다음 단계&quot;">​</a></h2><p>튜토리얼의 다음 파트에서는 컴포저블 함수를 구현하고 각 플랫폼에서 애플리케이션을 실행하는 방법을 배웁니다.</p><p><strong><a href="./compose-multiplatform-explore-composables">다음 파트로 진행하기</a></strong></p><h2 id="도움-받기" tabindex="-1">도움 받기 <a class="header-anchor" href="#도움-받기" aria-label="Permalink to &quot;도움 받기&quot;">​</a></h2><ul><li><strong>Kotlin Slack</strong>. <a href="https://surveys.jetbrains.com/s3/kotlin-slack-sign-up" target="_blank" rel="noreferrer">초대</a>를 받아 <a href="https://kotlinlang.slack.com/archives/C3PQML5NU" target="_blank" rel="noreferrer">#multiplatform</a> 채널에 참여하세요.</li><li><strong>Kotlin 이슈 트래커</strong>. <a href="https://youtrack.jetbrains.com/newIssue?project=KT" target="_blank" rel="noreferrer">새로운 이슈 보고</a>.</li></ul>',16))])}const V=v(w,[["render",P]]);export{X as __pageData,V as default};
