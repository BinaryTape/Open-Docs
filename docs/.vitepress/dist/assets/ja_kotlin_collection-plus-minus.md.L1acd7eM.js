import{_ as i,c as a,o as t,ag as n}from"./chunks/framework.Bksy39di.js";const c=JSON.parse('{"title":"plus および minus 演算子","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/collection-plus-minus.md","filePath":"ja/kotlin/collection-plus-minus.md","lastUpdated":1754307826000}'),l={name:"ja/kotlin/collection-plus-minus.md"};function e(p,s,h,k,o,r){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="plus-および-minus-演算子" tabindex="-1">plus および minus 演算子 <a class="header-anchor" href="#plus-および-minus-演算子" aria-label="Permalink to &quot;plus および minus 演算子&quot;">​</a></h1><p>Kotlinでは、<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/plus.html" target="_blank" rel="noreferrer"><code>plus</code></a> (<code>+</code>) および <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/minus.html" target="_blank" rel="noreferrer"><code>minus</code></a> (<code>-</code>) 演算子がコレクションに対して定義されています。これらは最初のオペランドとしてコレクションを取り、2番目のオペランドは要素または別のコレクションのいずれかになります。返される値は新しい読み取り専用コレクションです。</p><ul><li><code>plus</code> の結果には、元のコレクションの要素 <em>と</em> 2番目のオペランドの要素が含まれます。</li><li><code>minus</code> の結果には、元のコレクションの要素のうち、2番目のオペランドの要素 <em>を除いたもの</em> が含まれます。それが要素の場合、<code>minus</code> はその <em>最初の</em> 出現箇所を削除します。それがコレクションの場合、その要素の <em>すべての</em> 出現箇所が削除されます。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> numbers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;one&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;two&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;three&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;four&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> plusList </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> numbers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;five&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> minusList </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> numbers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;three&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;four&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(plusList)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(minusList)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>マップに対する <code>plus</code> および <code>minus</code> 演算子の詳細については、<a href="/ja/kotlin/map-operations">マップ固有の操作</a>を参照してください。<a href="/ja/kotlin/operator-overloading#augmented-assignments">複合代入演算子</a>である<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/plus-assign.html" target="_blank" rel="noreferrer"><code>plusAssign</code></a> (<code>+=</code>) および <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/minus-assign.html" target="_blank" rel="noreferrer"><code>minusAssign</code></a> (<code>-=</code>) もコレクションに対して定義されています。しかし、読み取り専用コレクションの場合、これらは実際には <code>plus</code> または <code>minus</code> 演算子を使用し、その結果を同じ変数に代入しようとします。したがって、これらは <code>var</code> 読み取り専用コレクションでのみ利用可能です。可変コレクションの場合、それが <code>val</code> であればコレクションを変更します。詳細については、<a href="/ja/kotlin/collection-write">コレクションの書き込み操作</a>を参照してください。</p>`,5)]))}const E=i(l,[["render",e]]);export{c as __pageData,E as default};
