import{_ as a,c as i,o as n,ag as e}from"./chunks/framework.Bksy39di.js";const o=JSON.parse('{"title":"Agent 事件","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/koog/agent-events.md","filePath":"zh-Hant/koog/agent-events.md","lastUpdated":1755146406000}'),t={name:"zh-Hant/koog/agent-events.md"};function l(h,s,p,k,r,d){return n(),i("div",null,s[0]||(s[0]=[e(`<h1 id="agent-事件" tabindex="-1">Agent 事件 <a class="header-anchor" href="#agent-事件" aria-label="Permalink to &quot;Agent 事件&quot;">​</a></h1><p>Agent 事件是在 agent 工作流程中發生動作或互動。其包含：</p><ul><li>Agent 生命週期事件</li><li>策略事件</li><li>節點事件</li><li>LLM 呼叫事件</li><li>工具呼叫事件</li></ul><h2 id="事件處理器" tabindex="-1">事件處理器 <a class="header-anchor" href="#事件處理器" aria-label="Permalink to &quot;事件處理器&quot;">​</a></h2><p>您可以在 agent 工作流程期間，透過使用事件處理器來監控並回應特定事件，以用於日誌記錄、測試、除錯以及擴展 agent 行為。</p><p><code>EventHandler</code> 功能讓您掛鉤至各種 agent 事件。其作為一個事件委派機制，用於：</p><ul><li>管理 AI agent 操作的生命週期。</li><li>提供用於監控和回應工作流程不同階段的掛鉤。</li><li>啟用錯誤處理和復原。</li><li>促進工具呼叫追蹤和結果處理。</li></ul><h3 id="安裝與組態" tabindex="-1">安裝與組態 <a class="header-anchor" href="#安裝與組態" aria-label="Permalink to &quot;安裝與組態&quot;">​</a></h3><p><code>EventHandler</code> 功能透過 <code>EventHandler</code> 類別整合至 agent 工作流程中，該類別提供一種方式來註冊不同 agent 事件的回呼，並且可以作為一項功能安裝在 agent 組態中。詳細資訊請參閱 [API reference](<a href="https://api.koog" target="_blank" rel="noreferrer">https://api.koog</a>. ai/agents/agents-features/agents-features-event-handler/ai.koog.agents.local.features.eventHandler.feature/-event-handler/index.html)。</p><p>若要為 agent 安裝此功能並設定事件處理器，請執行以下操作：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">handleEvents</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Handle tool calls</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    onToolCall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { eventContext </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Tool called: \${eventContext.tool} with args \${eventContext.toolArgs}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Handle event triggered when the agent completes its execution</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    onAgentFinished</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { eventContext </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Agent finished with result: \${eventContext.result}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Other event handlers</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>關於事件處理器組態的更多詳細資訊，請參閱 <a href="https://api.koog.ai/agents/agents-features/agents-features-event-handler/ai.koog.agents.local.features.eventHandler.feature/-event-handler-config/index.html" target="_blank" rel="noreferrer">API reference</a>。</p><p>您也可以在建立 agent 時，使用 <code>handleEvents</code> 擴展函數來設定事件處理器。此函數也會安裝事件處理器功能，並為 agent 設定事件處理器。這是一個範例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> agent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AIAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    executor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> simpleOllamaAIExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    llmModel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> OllamaModels.Meta.LLAMA_3_2,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    handleEvents</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Handle tool calls</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        onToolCall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { eventContext </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Tool called: \${eventContext.tool} with args \${eventContext.toolArgs}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Handle event triggered when the agent completes its execution</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        onAgentFinished</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { eventContext </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Agent finished with result: \${eventContext.result}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Other event handlers</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,14)]))}const E=a(t,[["render",l]]);export{o as __pageData,E as default};
