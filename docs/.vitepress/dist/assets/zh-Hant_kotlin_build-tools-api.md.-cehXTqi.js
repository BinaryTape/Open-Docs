import{_ as e,C as s,c as p,o as r,G as a,ag as h,w as o,a as k}from"./chunks/framework.Bksy39di.js";const F=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/build-tools-api.md","filePath":"zh-Hant/kotlin/build-tools-api.md","lastUpdated":1754307826000}'),d={name:"zh-Hant/kotlin/build-tools-api.md"};function c(E,i,g,u,y,m){const l=s("TopicTitle"),n=s("primary-label"),t=s("tldr");return r(),p("div",null,[a(l,{labelRef:"experimental-general",title:"建置工具 API"}),a(n,{ref:"experimental-general"},null,512),a(t,null,{default:o(()=>i[0]||(i[0]=[k("目前，BTA 僅支援 Kotlin/JVM。")])),_:1}),i[1]||(i[1]=h(`<p>Kotlin 2.2.0 引入了實驗性的建置工具 API (Build Tools API, BTA)，簡化了建置系統與 Kotlin 編譯器整合的方式。</p><p>以前，在建置系統中加入完整的 Kotlin 支援（例如增量編譯、Kotlin 編譯器外掛、守護行程和 Kotlin 多平台）需要付出巨大的努力。BTA 旨在透過提供建置系統和 Kotlin 編譯器生態系之間的統一 API 來降低這種複雜性。</p><p>BTA 定義了一個建置系統可以實作的單一進入點。這消除了深度整合內部編譯器細節的需求。</p><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>BTA 本身尚未公開可用，無法直接在您自己的建置工具整合中使用。 如果您對此提案感興趣或想分享回饋，請參閱 <a href="https://github.com/Kotlin/KEEP/issues/421" target="_blank" rel="noreferrer">KEEP</a>。 請在 <a href="https://youtrack.jetbrains.com/issue/KT-76255" target="_blank" rel="noreferrer">YouTrack</a> 中追蹤其實作狀態。</p></div><h2 id="與-gradle-整合" tabindex="-1">與 Gradle 整合 <a class="header-anchor" href="#與-gradle-整合" aria-label="Permalink to &quot;與 Gradle 整合&quot;">​</a></h2><p>Kotlin Gradle 外掛 (KGP) 對 BTA 具有實驗性支援，您需要選擇啟用才能使用它。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>我們很感謝您在 <a href="https://youtrack.jetbrains.com/issue/KT-56574" target="_blank" rel="noreferrer">YouTrack</a> 中分享您使用 KGP 的體驗回饋。</p></div><h3 id="如何啟用" tabindex="-1">如何啟用 <a class="header-anchor" href="#如何啟用" aria-label="Permalink to &quot;如何啟用&quot;">​</a></h3><p>將以下屬性加入到您的 <code>gradle.properties</code> 檔案中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kotlin.compiler.runViaBuildToolsApi</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span></code></pre></div><h3 id="設定不同的編譯器版本" tabindex="-1">設定不同的編譯器版本 <a class="header-anchor" href="#設定不同的編譯器版本" aria-label="Permalink to &quot;設定不同的編譯器版本&quot;">​</a></h3><p>透過 BTA，您現在可以使用與 KGP 使用的版本不同的 Kotlin 編譯器版本。這在以下情況很有用：</p><ul><li>您想嘗試新的 Kotlin 功能，但尚未更新您的建置指令碼。</li><li>您需要最新的外掛修正，但目前想保留在舊的編譯器版本上。</li></ul><p>以下是如何在您的 <code>build.gradle.kts</code> 檔案中設定此項的範例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.kotlin.buildtools.api.ExperimentalBuildToolsApi</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.kotlin.gradle.ExperimentalKotlinGradlePluginApi</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jvm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) version </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2.2.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">group </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;org.jetbrains.example&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">version </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1.0-SNAPSHOT&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">repositories</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	mavenCentral</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	jvmToolchain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalBuildToolsApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ExperimentalKotlinGradlePluginApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	compilerVersion.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2.1.21&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &lt;-- different version than 2.2.0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="相容的-kotlin-編譯器和-kgp-版本" tabindex="-1">相容的 Kotlin 編譯器和 KGP 版本 <a class="header-anchor" href="#相容的-kotlin-編譯器和-kgp-版本" aria-label="Permalink to &quot;相容的 Kotlin 編譯器和 KGP 版本&quot;">​</a></h4><p>BTA 支援：</p><ul><li>之前三個主要的 Kotlin 編譯器版本。</li><li>向前一個主要版本。</li></ul><p>例如，在 KGP 2.2.0 中，支援的 Kotlin 編譯器版本為：</p><ul><li>1.9.25</li><li>2.0.x</li><li>2.1.x</li><li>2.2.x</li><li>2.3.x</li></ul><h4 id="限制" tabindex="-1">限制 <a class="header-anchor" href="#限制" aria-label="Permalink to &quot;限制&quot;">​</a></h4><p>將不同的編譯器版本與編譯器外掛一起使用可能會導致 Kotlin 編譯器例外。Kotlin 團隊計畫在未來的 Kotlin 版本中解決此問題。</p><h3 id="啟用「in-process」策略的增量編譯" tabindex="-1">啟用「in process」策略的增量編譯 <a class="header-anchor" href="#啟用「in-process」策略的增量編譯" aria-label="Permalink to &quot;啟用「in process」策略的增量編譯&quot;">​</a></h3><p>KGP 支援三種<a href="/zh-Hant/kotlin/gradle-compilation-and-caches#defining-kotlin-compiler-execution-strategy">編譯器執行策略</a>。通常，「in-process」策略（它在 Gradle 守護行程中執行編譯器）不支援增量編譯。</p><p>透過 BTA，「in-process」策略現在支援增量編譯。若要啟用它，請將以下屬性加入到您的 <code>gradle.properties</code> 檔案中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kotlin.compiler.execution.strategy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=in-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process</span></span></code></pre></div><h2 id="與-maven-整合" tabindex="-1">與 Maven 整合 <a class="header-anchor" href="#與-maven-整合" aria-label="Permalink to &quot;與 Maven 整合&quot;">​</a></h2><p>從 Kotlin 2.2.0 開始，BTA 在 <a href="/zh-Hant/kotlin/maven"><code>kotlin-maven-plugin</code></a> 中預設啟用。</p><p>儘管 BTA 尚未為 Maven 用戶提供直接好處，但它為開發以下功能提供了堅實的基礎：</p><ul><li><a href="https://youtrack.jetbrains.com/issue/KT-77587" target="_blank" rel="noreferrer">Kotlin 守護行程支援</a></li><li><a href="https://youtrack.jetbrains.com/issue/KT-77086" target="_blank" rel="noreferrer">增量編譯穩定化</a></li></ul>`,30))])}const B=e(d,[["render",c]]);export{F as __pageData,B as default};
