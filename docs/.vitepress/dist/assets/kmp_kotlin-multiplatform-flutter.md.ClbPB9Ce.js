import{_ as p}from"./chunks/kmp-logic-and-ui.C5b8DY7I.js";import{_ as s}from"./chunks/discover-kmp.BprQjN3-.js";import{_ as m}from"./chunks/explore-compose.CnswIadv.js";import{_ as f}from"./chunks/kmp-use-cases-1.D7ku5ORt.js";import{_ as d,C as n,c as b,o as h,j as t,G as e,ag as i,a as o,w as r}from"./chunks/framework.Bksy39di.js";const I=JSON.parse('{"title":"Kotlin Multiplatform 和 Flutter：跨平台开发解决方案","description":"","frontmatter":{},"headers":[],"relativePath":"kmp/kotlin-multiplatform-flutter.md","filePath":"kmp/kotlin-multiplatform-flutter.md","lastUpdated":1755516278000}'),k={name:"kmp/kotlin-multiplatform-flutter.md"},w={style:{}};function g(M,l,v,K,F,P){const u=n("web-summary"),a=n("Links");return h(),b("div",null,[l[26]||(l[26]=t("h1",{id:"kotlin-multiplatform-和-flutter-跨平台开发解决方案",tabindex:"-1"},[o("Kotlin Multiplatform 和 Flutter：跨平台开发解决方案 "),t("a",{class:"header-anchor",href:"#kotlin-multiplatform-和-flutter-跨平台开发解决方案","aria-label":'Permalink to "Kotlin Multiplatform 和 Flutter：跨平台开发解决方案"'},"​")],-1)),e(u,null,{default:r(()=>l[0]||(l[0]=[o("本文探讨了 Kotlin Multiplatform 和 Flutter，旨在帮助您了解它们的能力，并为您的跨平台项目选择最适合的方案。")])),_:1}),l[27]||(l[27]=i(' <p>在技术飞速发展的世界中，开发者们不断寻求高效的框架和工具，以帮助他们构建高质量的应用程序。然而，在可用的选项中进行选择时，重要的是避免过分强调寻找所谓的“最佳”方案，因为这种方法不一定总能带来最合适的选择。</p><p>每个项目都是独一无二的，并有其特定要求。本文旨在帮助您权衡选择，更好地理解哪种技术（例如 Kotlin Multiplatform 或 Flutter）最适合您的项目，从而做出明智的决策。</p><h2 id="跨平台开发-现代应用程序构建的统一方法" tabindex="-1">跨平台开发：现代应用程序构建的统一方法 <a class="header-anchor" href="#跨平台开发-现代应用程序构建的统一方法" aria-label="Permalink to &quot;跨平台开发：现代应用程序构建的统一方法&quot;">​</a></h2><p>跨平台开发提供了一种使用单一代码库构建可在多个平台运行的应用程序的方式，从而无需为每个系统重复编写相同的功能性。虽然通常与<a href="./cross-platform-mobile-development">移动开发</a>相关联——面向 Android 和 iOS——但这种方法远超移动领域，涵盖了 Web、桌面甚至服务端环境。</p><p>其核心思想是最大限度地复用代码，同时确保在必要时仍能实现平台特有的特性，从而简化开发流程并减少维护工作。团队可以加快开发周期、降低成本，并确保跨平台的一致性，使得跨平台开发在当今日益多样化的应用程序生态中成为一个明智的选择。</p><h2 id="kotlin-multiplatform-和-flutter-简化跨平台开发" tabindex="-1">Kotlin Multiplatform 和 Flutter：简化跨平台开发 <a class="header-anchor" href="#kotlin-multiplatform-和-flutter-简化跨平台开发" aria-label="Permalink to &quot;Kotlin Multiplatform 和 Flutter：简化跨平台开发&quot;">​</a></h2><p>Flutter 和 Kotlin Multiplatform 是两种流行的跨平台技术，它们简化了跨不同平台的应用程序开发。</p><h3 id="flutter" tabindex="-1">Flutter <a class="header-anchor" href="#flutter" aria-label="Permalink to &quot;Flutter&quot;">​</a></h3><p><a href="https://flutter.dev/" target="_blank" rel="noreferrer">Flutter</a> 是一个开源框架，用于从单一代码库构建原生编译的多平台应用程序。它允许您通过一个共享的应用代码库，在 Android、iOS、Web、桌面（Windows、macOS、Linux）和嵌入式系统上创建丰富的应用体验。Flutter 应用使用 Dart 编程语言编写。Flutter 受到 Google 的支持和使用。</p><p>Flutter 于 2014 年以 Sky 的名称首次推出，<a href="https://developers.googleblog.com/en/flutter-10-googles-portable-ui-toolkit/" target="_blank" rel="noreferrer">Flutter 1.0</a> 则在 2018 年 12 月的 Flutter Live 期间正式发布。</p><p>Flutter 开发者社区庞大且高度活跃，提供持续的改进和支持。Flutter 允许使用 Flutter 和 Dart 生态系统内开发者贡献的共享软件包。</p><h3 id="kotlin-multiplatform" tabindex="-1">Kotlin Multiplatform <a class="header-anchor" href="#kotlin-multiplatform" aria-label="Permalink to &quot;Kotlin Multiplatform&quot;">​</a></h3><p><a href="https://www.jetbrains.com/kotlin-multiplatform/" target="_blank" rel="noreferrer">Kotlin Multiplatform</a> (KMP) 是由 JetBrains 构建的一项开源技术，它允许开发者为 Android、iOS、Web、桌面（Windows、macOS、Linux）和服务器端创建应用程序，使他们能够高效地在这些平台之间复用 Kotlin 代码，同时保留原生编程的优势。</p><p>使用 Kotlin Multiplatform，您有多种选择：您可以共享除应用程序入口点之外的所有代码，共享单一逻辑（例如网络或数据库模块），或者共享业务逻辑同时保持 UI 原生。</p><p><img src="'+p+'" alt="Kotlin Multiplatform 是一种可以复用高达 100% 代码的技术" width="700"></p><p>Kotlin Multiplatform 于 2017 年作为 Kotlin 1.2 的一部分首次推出。2023 年 11 月，Kotlin Multiplatform 达到<a href="https://blog.jetbrains.com/kotlin/2023/11/kotlin-multiplatform-stable/" target="_blank" rel="noreferrer">稳定</a>版本。在 Google I/O 2024 期间，Google 宣布其<a href="https://android-developers.googleblog.com/2024/05/android-support-for-kotlin-multiplatform-to-share-business-logic-across-mobile-web-server-desktop.html" target="_blank" rel="noreferrer">支持 Kotlin Multiplatform</a> 在 Android 上共享 Android 和 iOS 之间的业务逻辑。</p><p><a href="https://www.jetbrains.com/kotlin-multiplatform/" target="_blank" rel="noreferrer"><img src="'+s+'" alt="探索 Kotlin Multiplatform" width="500"></a></p><h4 id="compose-multiplatform" tabindex="-1">Compose Multiplatform <a class="header-anchor" href="#compose-multiplatform" aria-label="Permalink to &quot;Compose Multiplatform&quot;">​</a></h4><p>您可以使用 <a href="https://www.jetbrains.com/compose-multiplatform/" target="_blank" rel="noreferrer">Compose Multiplatform</a> 在多个平台之间编写共享 UI 代码，它是 JetBrains 基于 Kotlin Multiplatform 和 Google 的 Jetpack Compose 构建的现代声明式框架。</p><p>Compose Multiplatform 目前在 <a href="https://blog.jetbrains.com/kotlin/2025/05/compose-multiplatform-1-8-0-released-compose-multiplatform-for-ios-is-stable-and-production-ready/" target="_blank" rel="noreferrer">iOS</a>、Android 和桌面端已稳定，在 Web 端处于 Alpha 阶段。</p><p><a href="https://www.jetbrains.com/compose-multiplatform/" target="_blank" rel="noreferrer"><img src="'+m+'" alt="探索 Compose Multiplatform" width="500"></a></p><p>我们的专门文章概述了 <a href="./compose-multiplatform-and-jetpack-compose">Compose Multiplatform 和 Jetpack Compose</a> 之间的关系，强调了主要区别。</p><h3 id="kotlin-multiplatform-和-flutter-概述" tabindex="-1">Kotlin Multiplatform 和 Flutter：概述 <a class="header-anchor" href="#kotlin-multiplatform-和-flutter-概述" aria-label="Permalink to &quot;Kotlin Multiplatform 和 Flutter：概述&quot;">​</a></h3>',24)),t("table",w,[l[17]||(l[17]=t("tr",null,[t("td"),t("td",null,[t("b",null,"Kotlin Multiplatform")]),t("td",null,[t("b",null,"Flutter")])],-1)),l[18]||(l[18]=t("tr",null,[t("td",null,[t("b",null,"创建者")]),t("td",null,"JetBrains"),t("td",null,"Google")],-1)),l[19]||(l[19]=t("tr",null,[t("td",null,[t("b",null,"语言")]),t("td",null,"Kotlin"),t("td",null,"Dart")],-1)),l[20]||(l[20]=t("tr",null,[t("td",null,[t("b",null,"灵活性和代码复用")]),t("td",null,"您可以共享代码库的任何部分，包括业务逻辑和/或 UI，从 1% 到 100%。"),t("td",null,"控制应用程序的每个像素，以创建定制和自适应设计，并在所有平台之间实现 100% 的代码共享。")],-1)),l[21]||(l[21]=t("tr",null,[t("td",null,[t("b",null,"软件包、依赖项和生态系统")]),t("td",null,[o("软件包可从 "),t("a",{href:"https://central.sonatype.com/"},"Maven Central"),o(" 和其他版本库获取，包括 "),t("p",null,[t("a",{href:"http://klibs.io"},"klibs.io"),o(" (Alpha 版本)，它旨在简化 KMP 库的搜索。")]),t("p",null,[o("此"),t("a",{href:"https://github.com/terrakok/kmp-awesome"},"列表"),o("包含一些最流行的 KMP 库和工具。")])]),t("td",null,[o("软件包可从 "),t("a",{href:"https://pub.dev/"},"Pub.dev"),o(" 获取。")])],-1)),l[22]||(l[22]=t("tr",null,[t("td",null,[t("b",null,"构建工具")]),t("td",null,"Gradle（加上 Xcode 用于面向 Apple 设备的应用程序）。"),t("td",null,"Flutter 命令行工具（底层使用 Gradle 和 Xcode）。")],-1)),l[23]||(l[23]=t("tr",null,[t("td",null,[t("b",null,"代码共享")]),t("td",null,"Android、iOS、Web、桌面和服务器端。"),t("td",null,"Android、iOS、Web、桌面和嵌入式设备。")],-1)),l[24]||(l[24]=t("tr",null,[t("td",null,[t("b",null,"编译")]),t("td",null,"编译为桌面和 Android 的 JVM 字节码，Web 上的 JavaScript 或 Wasm，以及原生平台的平台特有二进制文件。"),t("td",null,[o("调试构建在虚拟机中运行 Dart 代码。 "),t("p",null,"发布构建输出原生平台的平台特有二进制文件，以及 Web 的 JavaScript/Wasm。")])],-1)),t("tr",null,[l[4]||(l[4]=t("td",null,[t("b",null,"与原生 API 通信")],-1)),t("td",null,[l[2]||(l[2]=o("原生 API 可使用 ")),e(a,{href:"/kmp/multiplatform-expect-actual",summary:"undefined"},{default:r(()=>l[1]||(l[1]=[o("expect/actual 声明")])),_:1}),l[3]||(l[3]=o(" 直接从 Kotlin 代码访问。"))]),l[5]||(l[5]=t("td",null,[o("可以使用"),t("a",{href:"https://docs.flutter.dev/platform-integration/platform-channels"},"平台通道"),o("与主机平台进行通信。")],-1))]),l[25]||(l[25]=t("tr",null,[t("td",null,[t("b",null,"UI 渲染")]),t("td",null,[t("a",{href:"https://www.jetbrains.com/compose-multiplatform/"},"Compose Multiplatform"),o(" 可用于跨平台共享 UI，它基于 Google 的 Jetpack Compose，使用兼容 OpenGL、ANGLE（将 OpenGL ES 2 或 3 调用转换为原生 API）、Vulkan 和 Metal 的 Skia 引擎。")]),t("td",null,[o("Flutter 部件使用自定义的 "),t("a",{href:"https://docs.flutter.dev/perf/impeller"},"Impeller 引擎"),o("在屏幕上渲染，该引擎根据平台和设备，使用 Metal、Vulkan 或 OpenGL 直接与 GPU 通信。")])],-1)),t("tr",null,[l[10]||(l[10]=t("td",null,[t("b",null,"UI 开发迭代")],-1)),t("td",null,[l[9]||(l[9]=o("UI 预览甚至可从公共代码中获取。 ")),t("p",null,[l[7]||(l[7]=o("借助 ")),e(a,{href:"/kmp/compose-hot-reload",summary:"undefined"},{default:r(()=>l[6]||(l[6]=[o("Compose 热重载")])),_:1}),l[8]||(l[8]=o("，您可以即时查看 UI 更改，而无需重启应用或丢失其状态。"))])]),l[11]||(l[11]=t("td",null,"VS Code 和 Android Studio 均提供 IDE 插件。",-1))]),t("tr",null,[l[15]||(l[15]=t("td",null,[t("b",null,"使用该技术的公司")],-1)),t("td",null,[l[13]||(l[13]=i('<a href="https://www.forbes.com/sites/forbes-engineering/2023/11/13/forbes-mobile-app-shifts-to-kotlin-multiplatform/">Forbes</a>、<a href="https://www.youtube.com/watch?v=z-o9MqN86eE">Todoist</a>、<a href="https://medium.com/mcdonalds-technical-blog/mobile-multiplatform-development-at-mcdonalds-3b72c8d44ebc">McDonald’s</a>、<a href="https://www.youtube.com/watch?v=5sOXv-X43vc">Google Workspace</a>、<a href="https://www.youtube.com/watch?v=hZPL8QqiLi8">Philips</a>、<a href="https://raymondctc.medium.com/adopting-kotlin-multiplatform-mobile-kmm-on-9gag-app-dfe526d9ce04">9gag</a>、<a href="https://kotlinlang.org/lp/multiplatform/case-studies/baidu">Baidu</a>、<a href="https://kotlinlang.org/lp/multiplatform/case-studies/autodesk/">Autodesk</a>、<a href="https://touchlab.co/">TouchLab</a>、<a href="https://www.youtube.com/watch?v=YsQ-2lQYQ8M">Instabee</a>，更多内容请参见我们的 ',20)),e(a,{href:"/kmp/case-studies",summary:"undefined"},{default:r(()=>l[12]||(l[12]=[o("KMP 案例研究")])),_:1}),l[14]||(l[14]=o("。"))]),l[16]||(l[16]=t("td",null,[t("a",{href:"https://flutter.dev/showcase/xiaomi"},"Xiaomi"),o("、"),t("a",{href:"https://flutter.dev/showcase/wolt"},"Wolt"),o("、"),t("a",{href:"https://flutter.dev/showcase/universal-studios"},"Universal Studios"),o("、"),t("a",{href:"https://flutter.dev/showcase/alibaba-group"},"Alibaba Group"),o("、"),t("a",{href:"https://flutter.dev/showcase/bytedance"},"ByteDance"),o("、"),t("a",{href:"https://www.geico.com/techblog/flutter-as-the-multi-channel-ux-framework/"},"Geico"),o("、"),t("a",{href:"https://flutter.dev/showcase/ebay"},"eBay Motors"),o("、"),t("a",{href:"https://flutter.dev/showcase/google-pay"},"Google Pay"),o("、"),t("a",{href:"https://flutter.dev/showcase/so-vegan"},"So Vegan"),o("，更多内容请参见 [Flutter 展示页面](https://flutter.dev/showcase)。")],-1))])]),l[28]||(l[28]=t("p",null,[t("a",{href:"https://www.jetbrains.com/help/kotlin-multiplatform-dev/case-studies.html",target:"_blank",rel:"noreferrer"},[t("img",{src:f,alt:"探索全球公司利用 Kotlin Multiplatform 进行跨平台开发的真实用例。",width:"500"})])],-1)),l[29]||(l[29]=t("p",null,[o("您还可以查看 Google 的博客文章"),t("a",{href:"https://developers.googleblog.com/en/making-development-across-platforms-easier-for-developers/",target:"_blank",rel:"noreferrer"},"《让开发者更轻松地进行跨平台开发》"),o("，其中提供了关于为您的项目选择正确技栈的指导。")],-1)),l[30]||(l[30]=t("p",null,[o("如果您正在寻找 Kotlin Multiplatform 和 Flutter 之间的额外比较，您还可以观看 Philipp Lackner 的"),t("a",{href:"https://www.youtube.com/watch?v=dzog64ENKG0",target:"_blank",rel:"noreferrer"},"《KMP vs. Flutter》视频"),o("。在该视频中，他就代码共享、UI 渲染、性能以及这两种技术的未来等方面分享了一些有趣的见解。")],-1)),l[31]||(l[31]=t("p",null,"通过仔细评估您的特定业务需求、目标和任务，您可以确定最符合您要求的跨平台解决方案。",-1))])}const x=d(k,[["render",g]]);export{I as __pageData,x as default};
