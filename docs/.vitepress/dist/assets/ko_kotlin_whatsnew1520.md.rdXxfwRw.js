import{_ as k,C as e,c as o,o as d,j as i,G as t,ag as h,a as s,w as n}from"./chunks/framework.Bksy39di.js";const f=JSON.parse('{"title":"Kotlin 1.5.20의 새로운 기능","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kotlin/whatsnew1520.md","filePath":"ko/kotlin/whatsnew1520.md","lastUpdated":1754307826000}'),c={name:"ko/kotlin/whatsnew1520.md"};function g(E,a,y,u,b,m){const p=e("YouTubeVideo"),l=e("tab"),r=e("tabs");return d(),o("div",null,[a[2]||(a[2]=i("h1",{id:"kotlin-1-5-20의-새로운-기능",tabindex:"-1"},[s("Kotlin 1.5.20의 새로운 기능 "),i("a",{class:"header-anchor",href:"#kotlin-1-5-20의-새로운-기능","aria-label":'Permalink to "Kotlin 1.5.20의 새로운 기능"'},"​")],-1)),a[3]||(a[3]=i("p",null,[i("em",null,[i("a",{href:"/ko/kotlin/releases#release-details"},"출시일: 2021년 6월 24일")])],-1)),a[4]||(a[4]=i("p",null,"Kotlin 1.5.20에는 1.5.0의 새로운 기능에서 발견된 문제에 대한 수정 사항과 다양한 툴링 개선 사항이 포함되어 있습니다.",-1)),a[5]||(a[5]=i("p",null,[s("변경 사항에 대한 개요는 "),i("a",{href:"https://blog.jetbrains.com/kotlin/2021/06/kotlin-1-5-20-released/",target:"_blank",rel:"noreferrer"},"릴리스 블로그 게시물"),s("과 다음 비디오에서 확인할 수 있습니다:")],-1)),t(p,{src:"https://www.youtube.com/v/SV8CgSXQe44",title:"Kotlin 1.5.20"}),a[6]||(a[6]=h(`<h2 id="kotlin-jvm" tabindex="-1">Kotlin/JVM <a class="header-anchor" href="#kotlin-jvm" aria-label="Permalink to &quot;Kotlin/JVM&quot;">​</a></h2><p>Kotlin 1.5.20은 JVM 플랫폼에서 다음 업데이트를 제공합니다:</p><ul><li><a href="#string-concatenation-via-invokedynamic">invokedynamic을 통한 문자열 연결</a></li><li><a href="#support-for-jspecify-nullness-annotations">JSpecify 널 가능성(nullness) 어노테이션 지원</a></li><li><a href="#support-for-calling-java-s-lombok-generated-methods-within-modules-that-have-kotlin-and-java-code">Kotlin 및 Java 코드가 있는 모듈 내에서 Java의 Lombok 생성 메서드 호출 지원</a></li></ul><h3 id="invokedynamic을-통한-문자열-연결" tabindex="-1">invokedynamic을 통한 문자열 연결 <a class="header-anchor" href="#invokedynamic을-통한-문자열-연결" aria-label="Permalink to &quot;invokedynamic을 통한 문자열 연결&quot;">​</a></h3><p>Kotlin 1.5.20은 JVM 9 이상 대상에서 문자열 연결을 <a href="https://docs.oracle.com/javase/7/docs/technotes/guides/vm/multiple-language-support.html#invokedynamic" target="_blank" rel="noreferrer">동적 호출</a>(<code>invokedynamic</code>)로 컴파일하여 최신 Java 버전과 보조를 맞춥니다. 더 정확히 말하면, 문자열 연결을 위해 <a href="https://docs.oracle.com/javase/9/docs/api/java/lang/invoke/StringConcatFactory.html#makeConcatWithConstants-java.lang.invoke.MethodHandles.Lookup-java.lang.String-java.lang.invoke.MethodType-java.lang.String-java.lang.Object...-" target="_blank" rel="noreferrer"><code>StringConcatFactory.makeConcatWithConstants()</code></a>를 사용합니다.</p><p>이전 버전에서 사용된 <a href="https://docs.oracle.com/javase/9/docs/api/java/lang/StringBuilder.html#append-java.lang.String-" target="_blank" rel="noreferrer"><code>StringBuilder.append()</code></a>를 통한 연결로 되돌아가려면, 컴파일러 옵션 <code>-Xstring-concat=inline</code>을 추가하세요.</p><p><a href="/ko/kotlin/gradle-compiler-options">Gradle</a>, <a href="/ko/kotlin/maven#specify-compiler-options">Maven</a>, 및 <a href="/ko/kotlin/compiler-reference#compiler-options">명령줄 컴파일러</a>에서 컴파일러 옵션을 추가하는 방법을 알아보세요.</p><h3 id="jspecify-널-가능성-nullness-어노테이션-지원" tabindex="-1">JSpecify 널 가능성(nullness) 어노테이션 지원 <a class="header-anchor" href="#jspecify-널-가능성-nullness-어노테이션-지원" aria-label="Permalink to &quot;JSpecify 널 가능성(nullness) 어노테이션 지원&quot;">​</a></h3><p>Kotlin 컴파일러는 Java에서 Kotlin으로 널 가능성 정보를 전달하기 위해 다양한 종류의 <a href="/ko/kotlin/java-interop#nullability-annotations">널 가능성 어노테이션</a>을 읽을 수 있습니다. 버전 1.5.20은 Java 널 가능성 어노테이션의 표준 통합 세트를 포함하는 <a href="https://jspecify.dev/" target="_blank" rel="noreferrer">JSpecify 프로젝트</a>에 대한 지원을 도입합니다.</p><p>JSpecify를 사용하면 Kotlin이 Java와 널 안전성(null-safety)을 상호 운용하도록 돕기 위해 더 자세한 널 가능성 정보를 제공할 수 있습니다. 선언, 패키지 또는 모듈 범위에 대한 기본 널 가능성을 설정하고, 매개변수 널 가능성을 지정하는 등 더 많은 작업을 수행할 수 있습니다. 이에 대한 자세한 내용은 <a href="https://jspecify.dev/docs/user-guide" target="_blank" rel="noreferrer">JSpecify 사용자 가이드</a>에서 찾을 수 있습니다.</p><p>Kotlin이 JSpecify 어노테이션을 어떻게 처리하는지에 대한 예시입니다:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// JavaClass.java</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> org.jspecify.nullness.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">NullMarked</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> JavaClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">notNullableString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @Nullable String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nullableString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Test.kt</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinFun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">JavaClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  notNullableString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().length </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// OK</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  nullableString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().length    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Warning: receiver nullability mismatch</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>1.5.20에서는 JSpecify에서 제공하는 널 가능성 정보에 따른 모든 널 가능성 불일치가 경고로 보고됩니다. JSpecify와 함께 작업할 때 엄격 모드(오류 보고 포함)를 활성화하려면 <code>-Xjspecify-annotations=strict</code> 및 <code>-Xtype-enhancement-improvements-strict-mode</code> 컴파일러 옵션을 사용하세요. JSpecify 프로젝트는 활발하게 개발 중이므로, API와 구현이 언제든지 크게 변경될 수 있다는 점에 유의하세요.</p><p><a href="/ko/kotlin/java-interop#null-safety-and-platform-types">널 안전성(null-safety) 및 플랫폼 타입(platform types)에 대해 자세히 알아보세요</a>.</p><h3 id="kotlin-및-java-코드가-있는-모듈-내에서-java의-lombok-생성-메서드-호출-지원" tabindex="-1">Kotlin 및 Java 코드가 있는 모듈 내에서 Java의 Lombok 생성 메서드 호출 지원 <a class="header-anchor" href="#kotlin-및-java-코드가-있는-모듈-내에서-java의-lombok-생성-메서드-호출-지원" aria-label="Permalink to &quot;Kotlin 및 Java 코드가 있는 모듈 내에서 Java의 Lombok 생성 메서드 호출 지원&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>Lombok 컴파일러 플러그인은 <a href="/ko/kotlin/components-stability">실험적</a>입니다. 언제든지 중단되거나 변경될 수 있습니다. 평가 목적으로만 사용하세요. <a href="https://youtrack.jetbrains.com/issue/KT-7112" target="_blank" rel="noreferrer">YouTrack</a>에 대한 피드백을 주시면 감사하겠습니다.</p></div><p>Kotlin 1.5.20은 실험적인 <a href="/ko/kotlin/lombok">Lombok 컴파일러 플러그인</a>을 도입합니다. 이 플러그인을 사용하면 Kotlin 및 Java 코드가 있는 모듈 내에서 Java의 <a href="https://projectlombok.org/" target="_blank" rel="noreferrer">Lombok</a> 선언을 생성하고 사용할 수 있습니다. Lombok 어노테이션은 Java 소스에서만 작동하며, Kotlin 코드에서 사용하면 무시됩니다.</p><p>이 플러그인은 다음 어노테이션을 지원합니다:</p><ul><li><code>@Getter</code>, <code>@Setter</code></li><li><code>@NoArgsConstructor</code>, <code>@RequiredArgsConstructor</code>, and <code>@AllArgsConstructor</code></li><li><code>@Data</code></li><li><code>@With</code></li><li><code>@Value</code></li></ul><p>저희는 이 플러그인에 대한 작업을 계속하고 있습니다. 자세한 현재 상태를 확인하려면 <a href="https://github.com/JetBrains/kotlin/tree/master/plugins/lombok" target="_blank" rel="noreferrer">Lombok 컴파일러 플러그인의 README</a>를 방문하세요.</p><p>현재 <code>@Builder</code> 어노테이션을 지원할 계획은 없습니다. 하지만 <a href="https://youtrack.jetbrains.com/issue/KT-46959" target="_blank" rel="noreferrer">YouTrack</a>에서 <code>@Builder</code>에 투표하시면 이 기능을 고려할 수 있습니다.</p><p><a href="/ko/kotlin/lombok#gradle">Lombok 컴파일러 플러그인을 구성하는 방법을 알아보세요</a>.</p><h2 id="kotlin-native" tabindex="-1">Kotlin/Native <a class="header-anchor" href="#kotlin-native" aria-label="Permalink to &quot;Kotlin/Native&quot;">​</a></h2><p>Kotlin/Native 1.5.20은 새로운 기능의 미리 보기와 툴링 개선 사항을 제공합니다:</p><ul><li><a href="#opt-in-export-of-kdoc-comments-to-generated-objective-c-headers">생성된 Objective-C 헤더로 KDoc 주석 옵트인(opt-in) 내보내기</a></li><li><a href="#compiler-bug-fixes">컴파일러 버그 수정</a></li><li><a href="#improved-performance-of-array-copyinto-inside-one-array">단일 배열 내에서 <code>Array.copyInto()</code>의 성능 향상</a></li></ul><h3 id="생성된-objective-c-헤더로-kdoc-주석-옵트인-opt-in-내보내기" tabindex="-1">생성된 Objective-C 헤더로 KDoc 주석 옵트인(opt-in) 내보내기 <a class="header-anchor" href="#생성된-objective-c-헤더로-kdoc-주석-옵트인-opt-in-내보내기" aria-label="Permalink to &quot;생성된 Objective-C 헤더로 KDoc 주석 옵트인(opt-in) 내보내기&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>생성된 Objective-C 헤더로 KDoc 주석을 내보내는 기능은 <a href="/ko/kotlin/components-stability">실험적</a>입니다. 언제든지 중단되거나 변경될 수 있습니다. 옵트인(opt-in)이 필요하며(자세한 내용은 아래 참조), 평가 목적으로만 사용해야 합니다. <a href="https://youtrack.jetbrains.com/issue/KT-38600" target="_blank" rel="noreferrer">YouTrack</a>에 대한 피드백을 주시면 감사하겠습니다.</p></div><p>이제 Kotlin/Native 컴파일러가 Kotlin 코드의 <a href="/ko/kotlin/kotlin-doc">문서 주석(KDoc)</a>을 해당 코드로 생성된 Objective-C 프레임워크로 내보내도록 설정하여, 프레임워크 사용자에게 표시되도록 할 수 있습니다.</p><p>예를 들어, KDoc이 포함된 다음 Kotlin 코드:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * Prints the sum of the arguments.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * Properly handles the case when the sum doesn&#39;t fit in 32-bit integer.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> printSum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, b: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toLong</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b)</span></span></code></pre></div><p>는 다음 Objective-C 헤더를 생성합니다:</p><div class="language-objc vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">objc</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * Prints the sum of the arguments.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * Properly handles the case when the sum doesn&#39;t fit in 32-bit integer.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)printSumA:(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int32_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)a b:(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int32_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)b </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">__attribute__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">swift_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;printSum(a:b:)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)));</span></span></code></pre></div><p>이 기능은 Swift에서도 잘 작동합니다.</p><p>Objective-C 헤더로 KDoc 주석을 내보내는 이 기능을 시험해 보려면 <code>-Xexport-kdoc</code> 컴파일러 옵션을 사용하세요. 주석을 내보내려는 Gradle 프로젝트의 <code>build.gradle(.kts)</code> 파일에 다음 줄을 추가하세요:</p>`,35)),t(r,{group:"build-script"},{default:n(()=>[t(l,{title:"Kotlin","group-key":"kotlin"},{default:n(()=>a[0]||(a[0]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    targets."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withType"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"org"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"jetbrains"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"gradle"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"plugin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"mpp"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"KotlinNativeTarget"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"> {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        compilations."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"get"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"main"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},").kotlinOptions.freeCompilerArgs "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"+="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "-Xexport-kdoc"')]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),t(l,{title:"Groovy","group-key":"groovy"},{default:n(()=>a[1]||(a[1]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"kotlin {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    targets"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"withType("),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"org.jetbrains.kotlin.gradle.plugin.mpp.KotlinNativeTarget"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        compilations"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"get("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"main"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"kotlinOptions"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"freeCompilerArgs "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"+="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "-Xexport-kdoc"')]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),a[7]||(a[7]=h(`<p>이 <a href="https://youtrack.jetbrains.com/issue/KT-38600" target="_blank" rel="noreferrer">YouTrack 티켓</a>을 사용하여 피드백을 공유해주시면 매우 감사하겠습니다.</p><h3 id="컴파일러-버그-수정" tabindex="-1">컴파일러 버그 수정 <a class="header-anchor" href="#컴파일러-버그-수정" aria-label="Permalink to &quot;컴파일러 버그 수정&quot;">​</a></h3><p>Kotlin/Native 컴파일러에 1.5.20에서 여러 버그 수정이 적용되었습니다. 전체 목록은 <a href="https://github.com/JetBrains/kotlin/releases/tag/v1.5.20" target="_blank" rel="noreferrer">변경 로그</a>에서 찾을 수 있습니다.</p><p>호환성에 영향을 미치는 중요한 버그 수정이 있습니다. 이전 버전에서는 잘못된 UTF <a href="https://en.wikipedia.org/wiki/Universal_Character_Set_characters#Surrogates" target="_blank" rel="noreferrer">서로게이트 쌍</a>을 포함하는 문자열 상수가 컴파일 중에 값을 잃었습니다. 이제 이러한 값은 보존됩니다. 애플리케이션 개발자는 1.5.20으로 안전하게 업데이트할 수 있으며, 아무것도 손상되지 않습니다. 하지만 1.5.20으로 컴파일된 라이브러리는 이전 컴파일러 버전과 호환되지 않습니다. 자세한 내용은 <a href="https://youtrack.jetbrains.com/issue/KT-33175" target="_blank" rel="noreferrer">이 YouTrack 이슈</a>를 참조하세요.</p><h3 id="단일-배열-내에서-array-copyinto-의-성능-향상" tabindex="-1">단일 배열 내에서 Array.copyInto()의 성능 향상 <a class="header-anchor" href="#단일-배열-내에서-array-copyinto-의-성능-향상" aria-label="Permalink to &quot;단일 배열 내에서 Array.copyInto()의 성능 향상&quot;">​</a></h3><p>소스와 대상이 동일한 배열일 때 <code>Array.copyInto()</code>가 작동하는 방식을 개선했습니다. 이제 이러한 작업은 이 사용 사례에 대한 메모리 관리 최적화 덕분에 최대 20배 더 빠르게 완료됩니다(복사되는 객체의 수에 따라 다름).</p><h2 id="kotlin-js" tabindex="-1">Kotlin/JS <a class="header-anchor" href="#kotlin-js" aria-label="Permalink to &quot;Kotlin/JS&quot;">​</a></h2><p>1.5.20과 함께 Kotlin/JS를 위한 새로운 <a href="/ko/kotlin/js-ir-compiler">IR 기반 백엔드</a>로 프로젝트를 마이그레이션하는 데 도움이 되는 가이드를 게시합니다.</p><h3 id="js-ir-백엔드를-위한-마이그레이션-가이드" tabindex="-1">JS IR 백엔드를 위한 마이그레이션 가이드 <a class="header-anchor" href="#js-ir-백엔드를-위한-마이그레이션-가이드" aria-label="Permalink to &quot;JS IR 백엔드를 위한 마이그레이션 가이드&quot;">​</a></h3><p>새로운 <a href="/ko/kotlin/js-ir-migration">JS IR 백엔드를 위한 마이그레이션 가이드</a>는 마이그레이션 중에 발생할 수 있는 문제를 식별하고 이에 대한 해결책을 제공합니다. 가이드에 포함되지 않은 문제가 발견되면 저희 <a href="http://kotl.in/issue" target="_blank" rel="noreferrer">이슈 트래커</a>로 보고해 주세요.</p><h2 id="gradle" tabindex="-1">Gradle <a class="header-anchor" href="#gradle" aria-label="Permalink to &quot;Gradle&quot;">​</a></h2><p>Kotlin 1.5.20은 Gradle 경험을 개선할 수 있는 다음 기능을 도입합니다:</p><ul><li><a href="#caching-for-annotation-processors-classloaders-in-kapt">kapt에서 어노테이션 프로세서 클래스로더 캐싱</a></li><li><a href="#deprecation-of-the-kotlin-parallel-tasks-in-project-build-property"><code>kotlin.parallel.tasks.in.project</code> 빌드 속성 사용 중단</a></li></ul><h3 id="kapt에서-어노테이션-프로세서-클래스로더-캐싱" tabindex="-1">kapt에서 어노테이션 프로세서 클래스로더 캐싱 <a class="header-anchor" href="#kapt에서-어노테이션-프로세서-클래스로더-캐싱" aria-label="Permalink to &quot;kapt에서 어노테이션 프로세서 클래스로더 캐싱&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>kapt에서 어노테이션 프로세서 클래스로더 캐싱은 <a href="/ko/kotlin/components-stability">실험적</a>입니다. 언제든지 중단되거나 변경될 수 있습니다. 평가 목적으로만 사용하세요. <a href="https://youtrack.jetbrains.com/issue/KT-28901" target="_blank" rel="noreferrer">YouTrack</a>에 대한 피드백을 주시면 감사하겠습니다.</p></div><p>이제 <a href="/ko/kotlin/kapt">kapt</a>에서 어노테이션 프로세서의 클래스로더를 캐시할 수 있도록 하는 새로운 실험적 기능이 있습니다. 이 기능은 연속적인 Gradle 실행에서 kapt의 속도를 높일 수 있습니다.</p><p>이 기능을 활성화하려면 <code>gradle.properties</code> 파일에 다음 속성을 사용하세요:</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># positive value will enable caching</span></span>
<span class="line"><span># use the same value as the number of modules that use kapt</span></span>
<span class="line"><span>kapt.classloaders.cache.size=5</span></span>
<span class="line"><span></span></span>
<span class="line"><span># disable for caching to work</span></span>
<span class="line"><span>kapt.include.compile.classpath=false</span></span></code></pre></div><p><a href="/ko/kotlin/kapt">kapt</a>에 대해 자세히 알아보세요.</p><h3 id="kotlin-parallel-tasks-in-project-빌드-속성-사용-중단" tabindex="-1">kotlin.parallel.tasks.in.project 빌드 속성 사용 중단 <a class="header-anchor" href="#kotlin-parallel-tasks-in-project-빌드-속성-사용-중단" aria-label="Permalink to &quot;kotlin.parallel.tasks.in.project 빌드 속성 사용 중단&quot;">​</a></h3><p>이 릴리스부터 Kotlin 병렬 컴파일은 <a href="https://docs.gradle.org/current/userguide/performance.html#parallel_execution" target="_blank" rel="noreferrer">Gradle 병렬 실행 플래그 <code>--parallel</code></a>에 의해 제어됩니다. 이 플래그를 사용하면 Gradle이 작업을 동시에 실행하여 컴파일 작업 속도를 높이고 리소스를 더 효율적으로 활용합니다.</p><p>더 이상 <code>kotlin.parallel.tasks.in.project</code> 속성을 사용할 필요가 없습니다. 이 속성은 사용 중단되었으며 다음 주요 릴리스에서 제거될 예정입니다.</p><h2 id="표준-라이브러리" tabindex="-1">표준 라이브러리 <a class="header-anchor" href="#표준-라이브러리" aria-label="Permalink to &quot;표준 라이브러리&quot;">​</a></h2><p>Kotlin 1.5.20은 문자와 함께 작동하는 여러 함수의 플랫폼별 구현을 변경하여, 그 결과 플랫폼 전반에 걸쳐 통합을 가져옵니다:</p><ul><li><a href="#support-for-all-unicode-digits-in-char-digittoint-in-kotlin-native-and-kotlin-js">Kotlin/Native 및 Kotlin/JS에서 <code>Char.digitToInt()</code>의 모든 유니코드 숫자 지원</a>.</li><li><a href="#unification-of-char-islowercase-isuppercase-implementations-across-platforms">플랫폼 전반에 걸쳐 <code>Char.isLowerCase()/isUpperCase()</code> 구현 통합</a>.</li></ul><h3 id="kotlin-native-및-kotlin-js에서-char-digittoint-의-모든-유니코드-숫자-지원" tabindex="-1">Kotlin/Native 및 Kotlin/JS에서 Char.digitToInt()의 모든 유니코드 숫자 지원 <a class="header-anchor" href="#kotlin-native-및-kotlin-js에서-char-digittoint-의-모든-유니코드-숫자-지원" aria-label="Permalink to &quot;Kotlin/Native 및 Kotlin/JS에서 Char.digitToInt()의 모든 유니코드 숫자 지원&quot;">​</a></h3><p><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/digit-to-int.html" target="_blank" rel="noreferrer"><code>Char.digitToInt()</code></a>는 문자가 나타내는 십진 숫자의 숫자 값을 반환합니다. 1.5.20 이전에는 이 함수는 Kotlin/JVM에서만 모든 유니코드 숫자 문자를 지원했으며, Native 및 JS 플랫폼의 구현은 ASCII 숫자만 지원했습니다.</p><p>이제부터 Kotlin/Native 및 Kotlin/JS 모두에서 모든 유니코드 숫자 문자에서 <code>Char.digitToInt()</code>를 호출하여 해당 숫자 표현을 얻을 수 있습니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ten </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">0661&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">digitToInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">0039&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">digitToInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ARABIC-INDIC DIGIT ONE + DIGIT NINE</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ten)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="플랫폼-전반에-걸쳐-char-islowercase-isuppercase-구현-통합" tabindex="-1">플랫폼 전반에 걸쳐 Char.isLowerCase()/isUpperCase() 구현 통합 <a class="header-anchor" href="#플랫폼-전반에-걸쳐-char-islowercase-isuppercase-구현-통합" aria-label="Permalink to &quot;플랫폼 전반에 걸쳐 Char.isLowerCase()/isUpperCase() 구현 통합&quot;">​</a></h3><p><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/is-upper-case.html" target="_blank" rel="noreferrer"><code>Char.isUpperCase()</code></a> 및 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/is-lower-case.html" target="_blank" rel="noreferrer"><code>Char.isLowerCase()</code></a> 함수는 문자의 대소문자에 따라 불리언(boolean) 값을 반환합니다. Kotlin/JVM의 경우 구현은 <code>General_Category</code>와 <code>Other_Uppercase</code>/<code>Other_Lowercase</code> <a href="https://en.wikipedia.org/wiki/Unicode_character_property" target="_blank" rel="noreferrer">유니코드 속성</a>을 모두 확인합니다.</p><p>1.5.20 이전에는 다른 플랫폼의 구현은 다르게 작동했으며 일반 범주만 고려했습니다. 1.5.20에서는 구현이 플랫폼 전반에 걸쳐 통합되었으며, 두 속성을 모두 사용하여 문자 대소문자를 결정합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> latinCapitalA </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;A&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // has &quot;Lu&quot; general category</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> circledLatinCapitalA </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Ⓐ&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // has &quot;Other_Uppercase&quot; property</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(latinCapitalA.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isUpperCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> circledLatinCapitalA.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isUpperCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,33))])}const F=k(c,[["render",g]]);export{f as __pageData,F as default};
