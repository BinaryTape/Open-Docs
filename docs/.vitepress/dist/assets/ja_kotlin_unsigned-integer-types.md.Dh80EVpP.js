import{_ as i,c as a,o as t,ag as e}from"./chunks/framework.Bksy39di.js";const c=JSON.parse('{"title":"符号なし整数型","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/unsigned-integer-types.md","filePath":"ja/kotlin/unsigned-integer-types.md","lastUpdated":1754307826000}'),n={name:"ja/kotlin/unsigned-integer-types.md"};function l(p,s,h,d,k,o){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="符号なし整数型" tabindex="-1">符号なし整数型 <a class="header-anchor" href="#符号なし整数型" aria-label="Permalink to &quot;符号なし整数型&quot;">​</a></h1><p><a href="/ja/kotlin/numbers#integer-types">整数型</a>に加えて、Kotlin は符号なし整数値のために以下の型を提供します。</p><table tabindex="0"><thead><tr><th>型</th><th>サイズ (ビット)</th><th>最小値</th><th>最大値</th></tr></thead><tbody><tr><td><code>UByte</code></td><td>8</td><td>0</td><td>255</td></tr><tr><td><code>UShort</code></td><td>16</td><td>0</td><td>65,535</td></tr><tr><td><code>UInt</code></td><td>32</td><td>0</td><td>4,294,967,295 (2<sup>32</sup> - 1)</td></tr><tr><td><code>ULong</code></td><td>64</td><td>0</td><td>18,446,744,073,709,551,615 (2<sup>64</sup> - 1)</td></tr></tbody></table><p>符号なし型は、対応する符号あり型のほとんどの操作をサポートしています。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>符号なし数は、<a href="/ja/kotlin/inline-classes">インラインクラス</a>として実装されており、同じ幅の対応する符号あり型を含む単一のストレージプロパティを持っています。符号なし整数型と符号あり整数型の間で変換したい場合は、関数呼び出しと操作が新しい型をサポートするようにコードを更新してください。</p></div><h2 id="符号なし配列と範囲" tabindex="-1">符号なし配列と範囲 <a class="header-anchor" href="#符号なし配列と範囲" aria-label="Permalink to &quot;符号なし配列と範囲&quot;">​</a></h2><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>符号なし配列とその操作は<a href="/ja/kotlin/components-stability">ベータ版</a>です。これらはいつでも互換性のない変更が行われる可能性があります。オプトインが必要です (詳細は下記参照)。</p></div><p>プリミティブと同様に、各符号なし型には、その型の配列を表す対応する型があります。</p><ul><li><code>UByteArray</code>: 符号なしバイトの配列。</li><li><code>UShortArray</code>: 符号なしショートの配列。</li><li><code>UIntArray</code>: 符号なしイントの配列。</li><li><code>ULongArray</code>: 符号なしロングの配列。</li></ul><p>符号あり整数配列と同様に、ボクシングのオーバーヘッドなしで<code>Array</code>クラスと似たAPIを提供します。</p><p>符号なし配列を使用すると、この機能がまだ安定していないことを示す警告が表示されます。警告を解消するには、<code>@ExperimentalUnsignedTypes</code>アノテーションでオプトインします。クライアントがAPIの使用に明示的にオプトインする必要があるかどうかは、あなたの判断に委ねられますが、符号なし配列は安定した機能ではないため、それらを使用するAPIは言語の変更によって壊れる可能性があることに留意してください。<a href="/ja/kotlin/opt-in-requirements">オプトイン要件について詳しくはこちら</a>。</p><p><a href="/ja/kotlin/ranges">範囲とプログレッション</a>は、<code>UInt</code>および<code>ULong</code>について、<code>UIntRange</code>、<code>UIntProgression</code>、<code>ULongRange</code>、<code>ULongProgression</code>クラスによってサポートされています。これらのクラスは、符号なし整数型とともに安定しています。</p><h2 id="符号なし整数リテラル" tabindex="-1">符号なし整数リテラル <a class="header-anchor" href="#符号なし整数リテラル" aria-label="Permalink to &quot;符号なし整数リテラル&quot;">​</a></h2><p>符号なし整数を使いやすくするために、特定の符号なし型を示すサフィックスを整数リテラルに追加できます (例えば、<code>Float</code>の<code>F</code>や<code>Long</code>の<code>L</code>と同様に)：</p><ul><li><p><code>u</code>と<code>U</code>の文字は、厳密な型を指定せずに符号なしリテラルを示します。期待される型が提供されない場合、コンパイラはリテラルのサイズに応じて<code>UInt</code>または<code>ULong</code>を使用します：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UByte</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1u</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // UByte, expected type provided</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UShort</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1u</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // UShort, expected type provided</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> l: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ULong</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1u</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ULong, expected type provided</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 42u</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // UInt: no expected type provided, constant fits in UInt</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0xFFFF_FFFF_FFFFu</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // ULong: no expected type provided, constant doesn&#39;t fit in UInt</span></span></code></pre></div></li><li><p><code>uL</code>と<code>UL</code>は、リテラルが符号なしロングであることを明示的に指定します：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1UL</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // ULong, even though no expected type provided and the constant fits into UInt</span></span></code></pre></div></li></ul><h2 id="ユースケース" tabindex="-1">ユースケース <a class="header-anchor" href="#ユースケース" aria-label="Permalink to &quot;ユースケース&quot;">​</a></h2><p>符号なし数の主なユースケースは、整数の全ビット範囲を利用して正の値を表現することです。例えば、32ビット<code>AARRGGBB</code>形式の色のような、符号あり型に収まらない16進定数を表現する場合などです。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> representation: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> yellow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0xFFCC00CCu</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>明示的な<code>toByte()</code>リテラルキャストなしでバイト配列を初期化するために、符号なし数を使用できます：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> byteOrderMarkUtf8 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ubyteArrayOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0xEFu</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0xBBu</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0xBFu</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>もう1つのユースケースは、ネイティブAPIとの相互運用性です。Kotlinは、シグネチャに符号なし型を含むネイティブ宣言を表現することを可能にします。このマッピングは、意味論を変えることなく符号なし整数を符号あり整数に置換することはありません。</p><h3 id="非目標" tabindex="-1">非目標 <a class="header-anchor" href="#非目標" aria-label="Permalink to &quot;非目標&quot;">​</a></h3><p>符号なし整数は正の数とゼロのみを表現できますが、アプリケーションドメインが非負整数を要求する場所でそれらを使用することは目標ではありません。例えば、コレクションのサイズやコレクションのインデックス値の型としてなどです。</p><p>理由はいくつかあります：</p><ul><li>符号あり整数を使用すると、偶発的なオーバーフローを検出し、エラー状態を通知するのに役立ちます。例えば、空のリストの<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/last-index.html" target="_blank" rel="noreferrer"><code>List.lastIndex</code></a>が-1になるなどです。</li><li>符号なし整数は、その値の範囲が符号あり整数の範囲のサブセットではないため、符号あり整数の範囲制限されたバージョンとして扱うことはできません。符号あり整数も符号なし整数も、互いのサブタイプではありません。</li></ul>`,25)]))}const g=i(n,[["render",l]]);export{c as __pageData,g as default};
