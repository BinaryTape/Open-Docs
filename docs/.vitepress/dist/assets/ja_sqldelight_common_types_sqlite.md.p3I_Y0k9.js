import{_ as i,c as a,o as t,ag as e}from"./chunks/framework.Bksy39di.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ja/sqldelight/common/types_sqlite.md","filePath":"ja/sqldelight/common/types_sqlite.md","lastUpdated":1748435462000}'),l={name:"ja/sqldelight/common/types_sqlite.md"};function n(p,s,h,o,d,k){return t(),a("div",null,s[0]||(s[0]=[e(`<h2 id="sqliteの型" tabindex="-1">SQLiteの型 <a class="header-anchor" href="#sqliteの型" aria-label="Permalink to &quot;SQLiteの型&quot;">​</a></h2><p>SQLDelightの列定義は標準的なSQLiteの列定義と同一ですが、生成されるインターフェースにおける列のKotlin型を指定する<a href="#custom-column-types">追加の列制約</a>をサポートしています。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TABLE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> some_types</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  some_long </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INTEGER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,           </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- DBにはINTEGERとして保存され、Longとして取得されます</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  some_double </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">REAL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,            </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- DBにはREALとして保存され、Doubleとして取得されます</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  some_string </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">TEXT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,            </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- DBにはTEXTとして保存され、Stringとして取得されます</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  some_blob BLOB               </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- DBにはBLOBとして保存され、ByteArrayとして取得されます</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="プリミティブ型" tabindex="-1">プリミティブ型 <a class="header-anchor" href="#プリミティブ型" aria-label="Permalink to &quot;プリミティブ型&quot;">​</a></h2><p>便宜のためにプリミティブ型を適応させる補助モジュールです。</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-Dk2N8" id="tab-2tMG03w" checked><label data-title="Kotlin" for="tab-2tMG03w">Kotlin</label><input type="radio" name="group-Dk2N8" id="tab-pbiZqTa"><label data-title="Groovy" for="tab-pbiZqTa">Groovy</label></div><div class="blocks"><div class="language-kotlin vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;app.cash.sqldelight:primitive-adapters:2.1.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dependencies {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  implementation </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;app.cash.sqldelight:primitive-adapters:2.1.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></div></div><p>以下のAdapterが存在します:</p><ul><li><code>FloatColumnAdapter</code> — <code>kotlin.Double</code>として暗黙的に保存されているSQL型に対して<code>kotlin.Float</code>を取得します</li><li><code>IntColumnAdapter</code> — <code>kotlin.Long</code>として暗黙的に保存されているSQL型に対して<code>kotlin.Int</code>を取得します</li><li><code>ShortColumnAdapter</code> — <code>kotlin.Long</code>として暗黙的に保存されているSQL型に対して<code>kotlin.Short</code>を取得します</li></ul>`,8)]))}const E=i(l,[["render",n]]);export{c as __pageData,E as default};
