import{_ as a,c as i,o as n,ag as l}from"./chunks/framework.Bksy39di.js";const g=JSON.parse('{"title":"概要","description":"","frontmatter":{},"headers":[],"relativePath":"ja/koog/index.md","filePath":"ja/koog/index.md","lastUpdated":1755146406000}'),e={name:"ja/koog/index.md"};function t(p,s,o,h,r,k){return n(),i("div",null,s[0]||(s[0]=[l(`<h1 id="概要" tabindex="-1">概要 <a class="header-anchor" href="#概要" aria-label="Permalink to &quot;概要&quot;">​</a></h1><p>Koogは、AIエージェントを完全にKotlinのイディオムに沿って構築および実行するために設計された、Kotlinベースのフレームワークです。これにより、ツールと対話し、複雑なワークフローを処理し、ユーザーと通信できるエージェントを作成できます。</p><p>このフレームワークは、以下の種類のエージェントをサポートしています。</p><ul><li>最小限の設定で単一の入力を処理し、応答を提供するシングルランエージェント。 このタイプのエージェントは、タスクを完了して応答を提供するために、ツール呼び出しの単一サイクル内で動作します。</li><li>カスタム戦略と構成をサポートする高度な機能を備えた複雑なワークフローエージェント。</li></ul><h2 id="主な機能" tabindex="-1">主な機能 <a class="header-anchor" href="#主な機能" aria-label="Permalink to &quot;主な機能&quot;">​</a></h2><p>Koogの主な機能は以下のとおりです。</p><ul><li><strong>純粋なKotlin実装</strong>: 自然でイディオムに沿ったKotlinでAIエージェントを完全に構築します。</li><li><strong>MCP統合</strong>: モデル制御プロトコルに接続し、強化されたモデル管理を実現します。</li><li><strong>埋め込み機能</strong>: ベクトル埋め込みを使用して、セマンティック検索と知識検索を行います。</li><li><strong>カスタムツール作成</strong>: 外部システムやAPIにアクセスするツールでエージェントを拡張します。</li><li><strong>すぐに使えるコンポーネント</strong>: 一般的なAIエンジニアリングの課題に対する事前構築されたソリューションで開発を加速します。</li><li><strong>インテリジェントな履歴圧縮</strong>: さまざまな事前構築された戦略を使用して、会話のコンテキストを維持しながらトークン使用量を最適化します。</li><li><strong>強力なストリーミングAPI</strong>: ストリーミングサポートと並行ツール呼び出しにより、リアルタイムで応答を処理します。</li><li><strong>永続的なエージェントメモリ</strong>: セッション間、さらには異なるエージェント間でも知識の保持を可能にします。</li><li><strong>包括的なトレース</strong>: 詳細で構成可能なトレースを使用して、エージェントの実行をデバッグおよび監視します。</li><li><strong>柔軟なグラフワークフロー</strong>: 直感的なグラフベースのワークフローを使用して、複雑なエージェントの動作を設計します。</li><li><strong>モジュラー機能システム</strong>: コンポーザブルなアーキテクチャを通じてエージェントの機能をカスタマイズします。</li><li><strong>スケーラブルなアーキテクチャ</strong>: シンプルなチャットボットからエンタープライズアプリケーションまで、あらゆるワークロードを処理します。</li><li><strong>マルチプラットフォーム</strong>: Kotlin Multiplatformを使用して、JVM、JS、WasmJSターゲットでエージェントを実行します。</li></ul><h1 id="利用可能なllmプロバイダーとプラットフォーム" tabindex="-1">利用可能なLLMプロバイダーとプラットフォーム <a class="header-anchor" href="#利用可能なllmプロバイダーとプラットフォーム" aria-label="Permalink to &quot;利用可能なLLMプロバイダーとプラットフォーム&quot;">​</a></h1><p>エージェントの機能を強化するために使用できるLLMプロバイダーとプラットフォームは次のとおりです。</p><ul><li>Google</li><li>OpenAI</li><li>Anthropic</li><li>OpenRouter</li><li>Ollama</li></ul><h1 id="インストール" tabindex="-1">インストール <a class="header-anchor" href="#インストール" aria-label="Permalink to &quot;インストール&quot;">​</a></h1><p>Koogを使用するには、ビルド構成に必要なすべての依存関係を含める必要があります。</p><h2 id="gradle" tabindex="-1">Gradle <a class="header-anchor" href="#gradle" aria-label="Permalink to &quot;Gradle&quot;">​</a></h2><h3 id="gradle-kotlin-dsl" tabindex="-1">Gradle (Kotlin DSL) <a class="header-anchor" href="#gradle-kotlin-dsl" aria-label="Permalink to &quot;Gradle (Kotlin DSL)&quot;">​</a></h3><ol><li><p><code>build.gradle.kts</code>ファイルに依存関係を追加します。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>dependencies {</span></span>
<span class="line"><span>    implementation(&quot;ai.koog:koog-agents:LATEST_VERSION&quot;)</span></span>
<span class="line"><span>}</span></span></code></pre></div></li><li><p><code>mavenCentral()</code>がリポジトリのリストに含まれていることを確認してください。</p></li></ol><h3 id="gradle-groovy" tabindex="-1">Gradle (Groovy) <a class="header-anchor" href="#gradle-groovy" aria-label="Permalink to &quot;Gradle (Groovy)&quot;">​</a></h3><ol><li><p><code>build.gradle</code>ファイルに依存関係を追加します。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>dependencies {</span></span>
<span class="line"><span>    implementation &#39;ai.koog:koog-agents:LATEST_VERSION&#39;</span></span>
<span class="line"><span>}</span></span></code></pre></div></li><li><p><code>mavenCentral()</code>がリポジトリのリストに含まれていることを確認してください。</p></li></ol><h2 id="maven" tabindex="-1">Maven <a class="header-anchor" href="#maven" aria-label="Permalink to &quot;Maven&quot;">​</a></h2><ol><li><p><code>pom.xml</code>ファイルに依存関係を追加します。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;dependency&gt;</span></span>
<span class="line"><span>    &lt;groupId&gt;ai.koog&lt;/groupId&gt;</span></span>
<span class="line"><span>    &lt;artifactId&gt;koog-agents&lt;/artifactId&gt;</span></span>
<span class="line"><span>    &lt;version&gt;LATEST_VERSION&lt;/version&gt;</span></span>
<span class="line"><span>&lt;/dependency&gt;</span></span></code></pre></div></li><li><p><code>mavenCentral</code>がリポジトリのリストに含まれていることを確認してください。</p></li></ol><h1 id="クイックスタートの例" tabindex="-1">クイックスタートの例 <a class="header-anchor" href="#クイックスタートの例" aria-label="Permalink to &quot;クイックスタートの例&quot;">​</a></h1><p>AIエージェントの利用を始めるのに役立つよう、シングルランエージェントの簡単な例を以下に示します。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>例を実行する前に、対応するAPIキーを環境変数として割り当ててください。詳細については、<a href="./single-run-agents">はじめに</a>を参照してください。</p></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    runBlocking</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> apiKey </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getenv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;OPENAI_API_KEY&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// or Anthropic, Google, OpenRouter, etc.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> agent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AIAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            executor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> simpleOpenAIExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(apiKey), </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// or Anthropic, Google, OpenRouter, etc.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            systemPrompt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;You are a helpful assistant. Answer user questions concisely.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            llmModel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> OpenAIModels.Chat.GPT4o</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        )</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> agent.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello! How can you help me?&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>詳細については、<a href="./single-run-agents">はじめに</a>を参照してください。</p>`,24)]))}const c=a(e,[["render",t]]);export{g as __pageData,c as default};
