import{_ as t}from"./chunks/gradle-sync.DiZmeJUl.js";import{_ as a,c as i,o,ag as l}from"./chunks/framework.Bksy39di.js";const b=JSON.parse('{"title":"定義ファイル","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/native-definition-file.md","filePath":"ja/kotlin/native-definition-file.md","lastUpdated":1754307826000}'),n={name:"ja/kotlin/native-definition-file.md"};function s(d,e,c,r,p,h){return o(),i("div",null,e[0]||(e[0]=[l(`<h1 id="定義ファイル" tabindex="-1">定義ファイル <a class="header-anchor" href="#定義ファイル" aria-label="Permalink to &quot;定義ファイル&quot;">​</a></h1><p>Kotlin/Nativeを使用すると、CおよびObjective-Cライブラリを利用して、その機能をKotlinで使用できます。cinteropと呼ばれる特別なツールは、CまたはObjective-Cライブラリを受け取り、対応するKotlinバインディングを生成するため、ライブラリのメソッドを通常通りKotlinコードで使用できます。</p><p>これらのバインディングを生成するには、各ライブラリに定義ファイルが必要です。これは通常、ライブラリと同じ名前を持ちます。これは、ライブラリがどのように利用されるべきかを正確に記述するプロパティファイルです。利用可能なプロパティの全リストについては、<a href="#properties">プロパティ</a>を参照してください。</p><p>プロジェクトで作業する際の一般的なワークフローを以下に示します。</p><ol><li>バインディングに何を含めるかを記述する<code>.def</code>ファイルを作成します。</li><li>生成されたバインディングをKotlinコードで使用します。</li><li>Kotlin/Nativeコンパイラを実行して最終的な実行可能ファイルを生成します。</li></ol><h2 id="定義ファイルの作成と設定" tabindex="-1">定義ファイルの作成と設定 <a class="header-anchor" href="#定義ファイルの作成と設定" aria-label="Permalink to &quot;定義ファイルの作成と設定&quot;">​</a></h2><p>Cライブラリの定義ファイルを作成し、バインディングを生成しましょう。</p><ol><li><p>IDEで<code>src</code>フォルダーを選択し、<strong>ファイル | 新規 | ディレクトリ</strong>で新しいディレクトリを作成します。</p></li><li><p>新しいディレクトリに<code>nativeInterop/cinterop</code>という名前を付けます。</p><p>これは<code>.def</code>ファイルの場所に関するデフォルトの慣例ですが、異なる場所を使用する場合は<code>build.gradle.kts</code>ファイルで上書きできます。</p></li><li><p>新しいサブフォルダーを選択し、<strong>ファイル | 新規 | ファイル</strong>で<code>png.def</code>ファイルを作成します。</p></li><li><p>必要なプロパティを追加します。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>headers = png.h</span></span>
<span class="line"><span>headerFilter = png.h</span></span>
<span class="line"><span>package = png</span></span>
<span class="line"><span></span></span>
<span class="line"><span>compilerOpts.linux = -I/usr/include -I/usr/include/x86_64-linux-gnu</span></span>
<span class="line"><span>linkerOpts.osx = -L/opt/local/lib -L/usr/local/opt/png/lib -lpng</span></span>
<span class="line"><span>linkerOpts.linux = -L/usr/lib/x86_64-linux-gnu -lpng</span></span></code></pre></div><ul><li><p><code>headers</code>は、Kotlinスタブを生成するヘッダーファイルのリストです。このエントリには複数のファイルを追加でき、それぞれをスペースで区切ります。この場合、<code>png.h</code>のみです。参照されるファイルは、指定されたパス（この場合は<code>/usr/include/png</code>）で利用可能である必要があります。</p></li><li><p><code>headerFilter</code>は、具体的に何が含まれるかを示します。Cでは、あるファイルが別のファイルを<code>#include</code>ディレクティブで参照すると、すべてのヘッダーも含まれます。時にはこれは不要な場合があり、<a href="https://en.wikipedia.org/wiki/Glob_(programming)" target="_blank" rel="noreferrer">globパターンを使用して</a>このパラメータを追加することで調整できます。</p><p><code>headerFilter</code>は、外部依存関係（システム<code>stdint.h</code>ヘッダーなど）をinteropライブラリに取り込みたくない場合に使用できます。また、ライブラリサイズの最適化や、システムと提供されるKotlin/Nativeコンパイル環境間の潜在的な競合を修正するのに役立つ場合があります。</p></li><li><p>特定のプラットフォームの動作を変更する必要がある場合、<code>compilerOpts.osx</code>や<code>compilerOpts.linux</code>のような形式を使用して、プラットフォーム固有の値をオプションに提供できます。この場合、それらはmacOS（<code>.osx</code>サフィックス）とLinux（<code>.linux</code>サフィックス）です。サフィックスなしのパラメータ（例: <code>linkerOpts=</code>）も可能で、すべてのプラットフォームに適用されます。</p></li></ul></li><li><p>バインディングを生成するには、通知で<strong>Sync Now</strong>をクリックしてGradleファイルを同期します。</p><p><img src="`+t+`" alt="Synchronize the Gradle files"></p></li></ol><p>バインディング生成後、IDEはそれらをネイティブライブラリのプロキシビューとして使用できます。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>コマンドラインで<a href="#generate-bindings-using-command-line">cinteropツール</a>を使用してバインディングの生成を設定することもできます。</p></div><h2 id="プロパティ" tabindex="-1">プロパティ <a class="header-anchor" href="#プロパティ" aria-label="Permalink to &quot;プロパティ&quot;">​</a></h2><p>以下は、生成されるバイナリの内容を調整するために定義ファイルで使用できるプロパティの全リストです。詳細については、以下の対応するセクションを参照してください。</p><table tabindex="0"><thead><tr><th style="text-align:left;"><strong>Property</strong></th><th style="text-align:left;"><strong>Description</strong></th></tr></thead><tbody><tr><td style="text-align:left;"><a href="#import-headers"><code>headers</code></a></td><td style="text-align:left;">バインディングに含めるライブラリのヘッダーのリスト。</td></tr><tr><td style="text-align:left;"><a href="#import-modules"><code>modules</code></a></td><td style="text-align:left;">バインディングに含めるObjective-CライブラリのClangモジュールのリスト。</td></tr><tr><td style="text-align:left;"><code>language</code></td><td style="text-align:left;">言語を指定します。デフォルトではCが使用されます。必要に応じて<code>Objective-C</code>に変更します。</td></tr><tr><td style="text-align:left;"><a href="#pass-compiler-and-linker-options"><code>compilerOpts</code></a></td><td style="text-align:left;">cinteropツールがCコンパイラに渡すコンパイラオプション。</td></tr><tr><td style="text-align:left;"><a href="#pass-compiler-and-linker-options"><code>linkerOpts</code></a></td><td style="text-align:left;">cinteropツールがリンカーに渡すリンカーオプション。</td></tr><tr><td style="text-align:left;"><a href="#ignore-specific-functions"><code>excludedFunctions</code></a></td><td style="text-align:left;">無視すべき関数名のスペース区切りリスト。</td></tr><tr><td style="text-align:left;"><a href="#include-a-static-library"><code>staticLibraries</code></a></td><td style="text-align:left;"><a href="/ja/kotlin/components-stability#stability-levels-explained">実験的</a>。スタティックライブラリを<code>.klib</code>に含めます。</td></tr><tr><td style="text-align:left;"><a href="#include-a-static-library"><code>libraryPaths</code></a></td><td style="text-align:left;"><a href="/ja/kotlin/components-stability#stability-levels-explained">実験的</a>。cinteropツールが<code>.klib</code>に含めるライブラリを検索するディレクトリのスペース区切りリスト。</td></tr><tr><td style="text-align:left;"><code>packageName</code></td><td style="text-align:left;">生成されるKotlin APIのパッケージプレフィックス。</td></tr><tr><td style="text-align:left;"><a href="#filter-headers-by-globs"><code>headerFilter</code></a></td><td style="text-align:left;">ライブラリをインポートする際に、globでヘッダーをフィルタリングし、それらのみを含めます。</td></tr><tr><td style="text-align:left;"><a href="#exclude-headers"><code>excludeFilter</code></a></td><td style="text-align:left;">ライブラリをインポートする際に特定のヘッダーを除外し、<code>headerFilter</code>よりも優先されます。</td></tr><tr><td style="text-align:left;"><a href="#configure-enums-generation"><code>strictEnums</code></a></td><td style="text-align:left;"><a href="/ja/kotlin/enum-classes">Kotlin enum</a>として生成すべきenumのスペース区切りリスト。</td></tr><tr><td style="text-align:left;"><a href="#configure-enums-generation"><code>nonStrictEnums</code></a></td><td style="text-align:left;">整数値として生成すべきenumのスペース区切りリスト。</td></tr><tr><td style="text-align:left;"><a href="#set-up-string-conversion"><code>noStringConversion</code></a></td><td style="text-align:left;"><code>const char*</code>パラメータがKotlin <code>String</code>に自動変換されるべきではない関数のスペース区切りリスト。</td></tr><tr><td style="text-align:left;"><code>allowedOverloadsForCFunctions</code></td><td style="text-align:left;">デフォルトでは、C関数は一意の名前を持つと仮定されます。複数の関数が同じ名前を持つ場合、1つだけが選択されます。ただし、<code>allowedOverloadsForCFunctions</code>でこれらの関数を指定することで、これを変更できます。</td></tr><tr><td style="text-align:left;"><a href="#allow-calling-a-non-designated-initializer"><code>disableDesignatedInitializerChecks</code></a></td><td style="text-align:left;">非指定Objective-Cイニシャライザを<code>super()</code>コンストラクタとして呼び出すことを許可しないコンパイラチェックを無効にします。</td></tr><tr><td style="text-align:left;"><a href="#handle-objective-c-exceptions"><code>foreignExceptionMode</code></a></td><td style="text-align:left;">Objective-Cコードからの例外を<code>ForeignException</code>型のKotlin例外にラップします。</td></tr><tr><td style="text-align:left;"><a href="#help-resolve-linker-errors"><code>userSetupHint</code></a></td><td style="text-align:left;">たとえば、ユーザーがリンカーエラーを解決するのに役立つカスタムメッセージを追加します。</td></tr></tbody></table><p>プロパティのリストに加えて、定義ファイルに<a href="#add-custom-declarations">カスタム宣言</a>を含めることができます。</p><h3 id="ヘッダーのインポート" tabindex="-1">ヘッダーのインポート <a class="header-anchor" href="#ヘッダーのインポート" aria-label="Permalink to &quot;ヘッダーのインポート&quot;">​</a></h3><p>CライブラリがClangモジュールを持たず、代わりにヘッダーのセットで構成されている場合、<code>headers</code>プロパティを使用してインポートすべきヘッダーを指定します。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>headers = curl/curl.h</span></span></code></pre></div><h4 id="globによるヘッダーのフィルタリング" tabindex="-1">globによるヘッダーのフィルタリング <a class="header-anchor" href="#globによるヘッダーのフィルタリング" aria-label="Permalink to &quot;globによるヘッダーのフィルタリング&quot;">​</a></h4><p><code>.def</code>ファイルのフィルタープロパティを使用して、globでヘッダーをフィルタリングできます。ヘッダーからの宣言を含めるには、<code>headerFilter</code>プロパティを使用します。ヘッダーがいずれかのglobに一致する場合、その宣言はバインディングに含まれます。</p><p>globは、適切なインクルードパス要素に対する相対的なヘッダーパス（例: <code>time.h</code>や<code>curl/curl.h</code>）に適用されます。したがって、ライブラリが通常<code>#include &lt;SomeLibrary/Header.h&gt;</code>でインクルードされる場合、おそらく以下のフィルターでヘッダーをフィルタリングできます。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>headerFilter = SomeLibrary/**</span></span></code></pre></div><p><code>headerFilter</code>が指定されていない場合、すべてのヘッダーが含まれます。ただし、<code>headerFilter</code>を使用し、globをできるだけ正確に指定することをお勧めします。この場合、生成されたライブラリには必要な宣言のみが含まれます。これは、Kotlinや開発環境のツールをアップグレードする際に発生する様々な問題を回避するのに役立ちます。</p><h4 id="ヘッダーの除外" tabindex="-1">ヘッダーの除外 <a class="header-anchor" href="#ヘッダーの除外" aria-label="Permalink to &quot;ヘッダーの除外&quot;">​</a></h4><p>特定のヘッダーを除外するには、<code>excludeFilter</code>プロパティを使用します。これは、不要なヘッダーや問題のあるヘッダーを削除し、コンパイルを最適化するのに役立ちます。指定されたヘッダーからの宣言はバインディングに含まれないためです。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>excludeFilter = SomeLibrary/time.h</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>同じヘッダーが<code>headerFilter</code>で含まれ、かつ<code>excludeFilter</code>で除外された場合、その指定されたヘッダーはバインディングに含まれません。</p></div><h3 id="モジュールのインポート" tabindex="-1">モジュールのインポート <a class="header-anchor" href="#モジュールのインポート" aria-label="Permalink to &quot;モジュールのインポート&quot;">​</a></h3><p>Objective-CライブラリがClangモジュールを持っている場合、<code>modules</code>プロパティを使用して、インポートするモジュールを指定します。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>modules = UIKit</span></span></code></pre></div><h3 id="コンパイラおよびリンカーオプションの受け渡し" tabindex="-1">コンパイラおよびリンカーオプションの受け渡し <a class="header-anchor" href="#コンパイラおよびリンカーオプションの受け渡し" aria-label="Permalink to &quot;コンパイラおよびリンカーオプションの受け渡し&quot;">​</a></h3><p><code>compilerOpts</code>プロパティを使用して、内部でヘッダーを分析するために使用されるCコンパイラにオプションを渡します。最終的な実行可能ファイルをリンクするために使用されるリンカーにオプションを渡すには、<code>linkerOpts</code>を使用します。例：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>compilerOpts = -DFOO=bar</span></span>
<span class="line"><span>linkerOpts = -lpng</span></span></code></pre></div><p>特定のターゲットにのみ適用されるターゲット固有のオプションも指定できます。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>compilerOpts = -DBAR=bar</span></span>
<span class="line"><span>compilerOpts.linux_x64 = -DFOO=foo1</span></span>
<span class="line"><span>compilerOpts.macos_x64 = -DFOO=foo2</span></span></code></pre></div><p>この設定では、ヘッダーはLinuxで<code>-DBAR=bar -DFOO=foo1</code>を使用し、macOSで<code>-DBAR=bar -DFOO=foo2</code>を使用して分析されます。定義ファイルオプションは、共通部分とプラットフォーム固有部分の両方を持つことができることに注意してください。</p><h3 id="特定の関数を無視する" tabindex="-1">特定の関数を無視する <a class="header-anchor" href="#特定の関数を無視する" aria-label="Permalink to &quot;特定の関数を無視する&quot;">​</a></h3><p><code>excludedFunctions</code>プロパティを使用して、無視すべき関数名のリストを指定します。これは、ヘッダーで宣言された関数が呼び出し可能であることが保証されておらず、これを自動的に判断するのが困難または不可能な場合に役立ちます。このプロパティを、interop自体のバグを回避するためにも使用できます。</p><h3 id="スタティックライブラリを含める" tabindex="-1">スタティックライブラリを含める <a class="header-anchor" href="#スタティックライブラリを含める" aria-label="Permalink to &quot;スタティックライブラリを含める&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>この機能は<a href="/ja/kotlin/components-stability#stability-levels-explained">実験的</a>です。いつでも廃止または変更される可能性があります。評価目的のみに使用してください。</p></div><p>ユーザーの環境で利用可能であると仮定するよりも、製品にスタティックライブラリを同梱する方が便利な場合があります。スタティックライブラリを<code>.klib</code>に含めるには、<code>staticLibraries</code>と<code>libraryPaths</code>プロパティを使用します。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>headers = foo.h</span></span>
<span class="line"><span>staticLibraries = libfoo.a</span></span>
<span class="line"><span>libraryPaths = /opt/local/lib /usr/local/opt/curl/lib</span></span></code></pre></div><p>上記のスニペットが与えられると、cinteropツールは<code>/opt/local/lib</code>と<code>/usr/local/opt/curl/lib</code>で<code>libfoo.a</code>を検索し、見つかった場合、ライブラリバイナリを<code>klib</code>に含めます。</p><p>プログラムでこのように<code>klib</code>を使用すると、ライブラリは自動的にリンクされます。</p><h3 id="enumの生成を設定する" tabindex="-1">enumの生成を設定する <a class="header-anchor" href="#enumの生成を設定する" aria-label="Permalink to &quot;enumの生成を設定する&quot;">​</a></h3><p><code>strictEnums</code>プロパティを使用してenumをKotlin enumとして生成するか、<code>nonStrictEnums</code>を使用して整数値として生成します。いずれのリストにもenumが含まれていない場合、ヒューリスティックに基づいて生成されます。</p><h3 id="文字列変換の設定" tabindex="-1">文字列変換の設定 <a class="header-anchor" href="#文字列変換の設定" aria-label="Permalink to &quot;文字列変換の設定&quot;">​</a></h3><p><code>noStringConversion</code>プロパティを使用して、<code>const char*</code>関数パラメータのKotlin <code>String</code>への自動変換を無効にします。</p><h3 id="非指定イニシャライザの呼び出しを許可する" tabindex="-1">非指定イニシャライザの呼び出しを許可する <a class="header-anchor" href="#非指定イニシャライザの呼び出しを許可する" aria-label="Permalink to &quot;非指定イニシャライザの呼び出しを許可する&quot;">​</a></h3><p>デフォルトでは、Kotlin/Nativeコンパイラは非指定Objective-Cイニシャライザを<code>super()</code>コンストラクタとして呼び出すことを許可しません。この動作は、指定されたObjective-Cイニシャライザがライブラリ内で適切にマークされていない場合に不便になる可能性があります。これらのコンパイラチェックを無効にするには、<code>disableDesignatedInitializerChecks</code>プロパティを使用します。</p><h3 id="objective-c例外の処理" tabindex="-1">Objective-C例外の処理 <a class="header-anchor" href="#objective-c例外の処理" aria-label="Permalink to &quot;Objective-C例外の処理&quot;">​</a></h3><p>デフォルトでは、Objective-C例外がObjective-CからKotlinへのinterop境界に到達し、Kotlinコードに渡された場合、プログラムはクラッシュします。</p><p>Objective-C例外をKotlinに伝播するには、<code>foreignExceptionMode = objc-wrap</code>プロパティでラッピングを有効にします。この場合、Objective-C例外は<code>ForeignException</code>型を持つKotlin例外に変換されます。</p><h3 id="リンカーエラーの解決を支援する" tabindex="-1">リンカーエラーの解決を支援する <a class="header-anchor" href="#リンカーエラーの解決を支援する" aria-label="Permalink to &quot;リンカーエラーの解決を支援する&quot;">​</a></h3><p>KotlinライブラリがCまたはObjective-Cライブラリに依存している場合、たとえば<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-cocoapods-overview.html" target="_blank" rel="noreferrer">CocoaPods連携</a>を使用している場合、リンカーエラーが発生する可能性があります。依存ライブラリがマシンにローカルでインストールされていないか、プロジェクトのビルドスクリプトで明示的に設定されていない場合、「Framework not found」エラーが発生します。</p><p>ライブラリの作者である場合、カスタムメッセージでユーザーがリンカーエラーを解決するのを支援できます。これを行うには、<code>.def</code>ファイルに<code>userSetupHint=message</code>プロパティを追加するか、<code>-Xuser-setup-hint</code>コンパイラオプションを<code>cinterop</code>に渡します。</p><h3 id="カスタム宣言の追加" tabindex="-1">カスタム宣言の追加 <a class="header-anchor" href="#カスタム宣言の追加" aria-label="Permalink to &quot;カスタム宣言の追加&quot;">​</a></h3><p>バインディングを生成する前に、カスタムC宣言をライブラリに追加する必要がある場合があります（たとえば、<a href="/ja/kotlin/native-c-interop#macros">マクロ</a>の場合など）。これらの宣言を含む追加のヘッダーファイルを作成する代わりに、区切り行（区切りシーケンス<code>---</code>のみを含む行）の後に、<code>.def</code>ファイルの末尾に直接含めることができます。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>headers = errno.h</span></span>
<span class="line"><span>---</span></span>
<span class="line"><span></span></span>
<span class="line"><span>static inline int getErrno() {</span></span>
<span class="line"><span>    return errno;</span></span>
<span class="line"><span>}</span></span></code></pre></div><p><code>.def</code>ファイルのこの部分はヘッダーファイルの一部として扱われるため、本体を持つ関数は<code>static</code>として宣言する必要があることに注意してください。宣言は<code>headers</code>リストからのファイルが含まれた後にパースされます。</p><h2 id="コマンドラインを使用したバインディングの生成" tabindex="-1">コマンドラインを使用したバインディングの生成 <a class="header-anchor" href="#コマンドラインを使用したバインディングの生成" aria-label="Permalink to &quot;コマンドラインを使用したバインディングの生成&quot;">​</a></h2><p>定義ファイルに加えて、<code>cinterop</code>呼び出しで対応するプロパティをオプションとして渡すことで、バインディングに何を含めるかを指定できます。</p><p><code>png.klib</code>コンパイル済みライブラリを生成するコマンドの例を以下に示します。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cinterop</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -def</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> png.def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -compiler-option</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -I/usr/local/include</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> png</span></span></code></pre></div><p>生成されたバインディングは一般的にプラットフォーム固有であるため、複数のターゲット向けに開発している場合、バインディングを再生成する必要があることに注意してください。</p><ul><li>sysroot検索パスに含まれていないホストライブラリの場合、ヘッダーが必要になる場合があります。</li><li>設定スクリプトを持つ一般的なUNIXライブラリの場合、<code>compilerOpts</code>には、<code>--cflags</code>オプションを持つ設定スクリプトの出力（正確なパスなしで）が含まれる可能性が高いです。</li><li><code>--libs</code>を持つ設定スクリプトの出力は、<code>linkerOpts</code>プロパティに渡すことができます。</li></ul><h2 id="次のステップ" tabindex="-1">次のステップ <a class="header-anchor" href="#次のステップ" aria-label="Permalink to &quot;次のステップ&quot;">​</a></h2><ul><li><a href="/ja/kotlin/native-c-interop#bindings">C相互運用性向けのバインディング</a></li><li><a href="/ja/kotlin/native-objc-interop">Swift/Objective-Cとの相互運用性</a></li></ul>`,67)]))}const f=a(n,[["render",s]]);export{b as __pageData,f as default};
