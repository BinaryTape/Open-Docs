import{_ as v,C as l,c as f,o as g,G as n,ag as c,j as t,w as r,a as o}from"./chunks/framework.Bksy39di.js";const w=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ko/ktor/server-partial-content.md","filePath":"ko/ktor/server-partial-content.md","lastUpdated":1755457140000}'),b={name:"ko/ktor/server-partial-content.md"};function T(P,e,_,C,y,S){const p=l("TopicTitle"),u=l("primary-label"),d=l("Links"),m=l("tldr"),i=l("code-block"),a=l("TabItem"),s=l("Tabs"),k=l("list");return g(),f("div",null,[n(p,{labelRef:"server-plugin",title:"부분 콘텐츠"}),n(u,{ref:"server-plugin"},null,512),n(m,null,{default:r(()=>[e[3]||(e[3]=t("p",null,[t("b",null,"필수 의존성"),o(": "),t("code",null,"io.ktor:ktor-server-partial-content")],-1)),e[4]||(e[4]=t("p",null,[t("b",null,"서버 예제"),o(": "),t("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/download-file"},"download-file"),o(", "),t("b",null,"클라이언트 예제"),o(": "),t("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/client-download-file-range"},"client-download-file-range")],-1)),t("p",null,[t("b",null,[n(d,{href:"/ktor/server-native",summary:"모듈을 사용하면 경로를 그룹화하여 애플리케이션을 구조화할 수 있습니다."},{default:r(()=>e[0]||(e[0]=[o("Native 서버")])),_:1}),e[1]||(e[1]=o(" 지원"))]),e[2]||(e[2]=o(": ✅ "))])]),_:1}),e[17]||(e[17]=c('<p><a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-partial-content/io.ktor.server.plugins.partialcontent/-partial-content.html" target="_blank" rel="noreferrer">PartialContent</a> 플러그인은 클라이언트에 HTTP 메시지의 일부만 다시 보내는 데 사용되는 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Range_requests" target="_blank" rel="noreferrer">HTTP 범위 요청</a> 처리를 지원합니다. 이 플러그인은 콘텐츠 스트리밍 또는 부분 다운로드 재개에 유용합니다.</p><p><code>PartialContent</code>에는 다음과 같은 제한 사항이 있습니다:</p><ul><li><code>HEAD</code> 및 <code>GET</code> 요청에서만 작동하며, 클라이언트가 다른 메서드와 함께 <code>Range</code> 헤더를 사용하려고 하면 <code>405 Method Not Allowed</code>를 반환합니다.</li><li><code>Content-Length</code> 헤더가 정의된 응답에서만 작동합니다.</li><li>범위를 서비스할 때 <a href="./server-compression">Compression</a>을 비활성화합니다.</li></ul><h2 id="add_dependencies" tabindex="-1">의존성 추가 <a class="header-anchor" href="#add_dependencies" aria-label="Permalink to &quot;의존성 추가 {id=&quot;add_dependencies&quot;}&quot;">​</a></h2><p><code>PartialContent</code>을(를) 사용하려면 빌드 스크립트에 <code>ktor-server-partial-content</code> 아티팩트를 포함해야 합니다: </p>',5)),n(s,{group:"languages"},{default:r(()=>[n(a,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:r(()=>[n(i,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-server-partial-content:$ktor_version")'})]),_:1}),n(a,{title:"Gradle (Groovy)","group-key":"groovy"},{default:r(()=>[n(i,{lang:"Groovy",code:'            implementation "io.ktor:ktor-server-partial-content:$ktor_version"'})]),_:1}),n(a,{title:"Maven","group-key":"maven"},{default:r(()=>[n(i,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-server-partial-content-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),e[18]||(e[18]=t("h2",{id:"install_plugin",tabindex:"-1"},[o("PartialContent 설치 "),t("a",{class:"header-anchor",href:"#install_plugin","aria-label":'Permalink to "PartialContent 설치 {id="install_plugin"}"'},"​")],-1)),t("p",null,[e[6]||(e[6]=o(" 애플리케이션에 ")),e[7]||(e[7]=t("code",null,"PartialContent",-1)),e[8]||(e[8]=o(" 플러그인을 ")),e[9]||(e[9]=t("a",{href:"#install"},"설치",-1)),e[10]||(e[10]=o("하려면, 지정된 ")),n(d,{href:"/ktor/server-modules",summary:"모듈을 사용하면 경로를 그룹화하여 애플리케이션을 구조화할 수 있습니다."},{default:r(()=>e[5]||(e[5]=[o("모듈")])),_:1}),e[11]||(e[11]=o("의 ")),e[12]||(e[12]=t("code",null,"install",-1)),e[13]||(e[13]=o(" 함수에 전달하면 됩니다. 아래 코드 스니펫은 ")),e[14]||(e[14]=t("code",null,"PartialContent",-1)),e[15]||(e[15]=o("을(를) 설치하는 방법을 보여줍니다... "))]),n(k,null,{default:r(()=>e[16]||(e[16]=[t("li",null,[o(" ... "),t("code",null,"embeddedServer"),o(" 함수 호출 내에서. ")],-1),t("li",null,[o(" ... 명시적으로 정의된 "),t("code",null,"module"),o(" 내에서 (이는 "),t("code",null,"Application"),o(" 클래스의 확장 함수입니다). ")],-1)])),_:1}),n(s,null,{default:r(()=>[n(a,{title:"embeddedServer"},{default:r(()=>[n(i,{lang:"kotlin",code:`            import io.ktor.server.engine.*
            import io.ktor.server.netty.*
            import io.ktor.server.application.*
            import io.ktor.server.plugins.partialcontent.*

            fun main() {
                embeddedServer(Netty, port = 8080) {
                    install(PartialContent)
                    // ...
                }.start(wait = true)
            }`})]),_:1}),n(a,{title:"module"},{default:r(()=>[n(i,{lang:"kotlin",code:`            import io.ktor.server.application.*
            import io.ktor.server.plugins.partialcontent.*
            // ...
            fun Application.module() {
                install(PartialContent)
                // ...
            }`})]),_:1})]),_:1}),e[19]||(e[19]=t("p",null,[t("code",null,"PartialContent"),o(" 플러그인은 "),t("a",{href:"#install-route"},"특정 경로에"),o(" 설치할 수도 있습니다. 이는 다른 애플리케이션 리소스에 대해 다른 "),t("code",null,"PartialContent"),o(" 구성이 필요한 경우 유용할 수 있습니다. ")],-1)),e[20]||(e[20]=t("p",null,[t("code",null,"PartialContent"),o("을(를) 사용하여 HTTP 범위 요청으로 파일을 서비스하는 방법을 알아보려면 "),t("a",{href:"./server-responses#file"},"File"),o(" 섹션을 참조하십시오.")],-1))])}const I=v(b,[["render",T]]);export{w as __pageData,I as default};
