import{_ as i,c as a,o as n,ag as l}from"./chunks/framework.Bksy39di.js";const c=JSON.parse('{"title":"불리언","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kotlin/booleans.md","filePath":"ko/kotlin/booleans.md","lastUpdated":1754307826000}'),e={name:"ko/kotlin/booleans.md"};function p(t,s,k,h,o,d){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="불리언" tabindex="-1">불리언 <a class="header-anchor" href="#불리언" aria-label="Permalink to &quot;불리언&quot;">​</a></h1><p><code>Boolean</code> 타입은 <code>true</code>와 <code>false</code> 두 가지 값을 가질 수 있는 불리언 객체를 나타냅니다. <code>Boolean</code>에는 <code>Boolean?</code>으로 선언되는 <a href="/ko/kotlin/null-safety">널 허용</a> counterpart가 있습니다.</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>JVM에서, 원시 <code>boolean</code> 타입으로 저장되는 불리언은 일반적으로 8비트를 사용합니다.</p></div><p>불리언에 대한 내장 연산은 다음과 같습니다:</p><ul><li><code>||</code> – 논리합 (논리적 <em>OR</em>)</li><li><code>&amp;&amp;</code> – 논리곱 (논리적 <em>AND</em>)</li><li><code>!</code> – 부정 (논리적 <em>NOT</em>)</li></ul><p>예시:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myTrue: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Boolean</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myFalse: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Boolean</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> boolNull: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myTrue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myFalse)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // true</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myTrue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myFalse)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // false</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">myTrue)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // false</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(boolNull)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>||</code> 및 <code>&amp;&amp;</code> 연산자는 지연 평가 방식으로 작동하며, 이는 다음을 의미합니다:</p><ul><li>첫 번째 피연산자가 <code>true</code>인 경우, <code>||</code> 연산자는 두 번째 피연산자를 평가하지 않습니다.</li><li>첫 번째 피연산자가 <code>false</code>인 경우, <code>&amp;&amp;</code> 연산자는 두 번째 피연산자를 평가하지 않습니다.</li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>JVM에서, 불리언 객체에 대한 널 허용 참조는 <a href="/ko/kotlin/numbers#boxing-and-caching-numbers-on-the-java-virtual-machine">숫자</a>와 마찬가지로 Java 클래스에 박싱됩니다.</p></div>`,10)]))}const E=i(e,[["render",p]]);export{c as __pageData,E as default};
