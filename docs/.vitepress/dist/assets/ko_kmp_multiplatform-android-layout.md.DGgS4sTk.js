import{_ as d,c as a,o as i,ag as e}from"./chunks/framework.Bksy39di.js";const k=JSON.parse('{"title":"Android 소스 세트 레이아웃","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kmp/multiplatform-android-layout.md","filePath":"ko/kmp/multiplatform-android-layout.md","lastUpdated":1755516278000}'),n={name:"ko/kmp/multiplatform-android-layout.md"};function s(o,t,r,l,h,c){return i(),a("div",null,t[0]||(t[0]=[e(`<h1 id="android-소스-세트-레이아웃" tabindex="-1">Android 소스 세트 레이아웃 <a class="header-anchor" href="#android-소스-세트-레이아웃" aria-label="Permalink to &quot;Android 소스 세트 레이아웃&quot;">​</a></h1><p>새로운 Android 소스 세트 레이아웃은 Kotlin 1.8.0에서 도입되었으며 1.9.0부터 기본값이 되었습니다. 이 가이드를 따라 더 이상 사용되지 않는 레이아웃과 새로운 레이아웃 간의 주요 차이점, 그리고 프로젝트를 마이그레이션하는 방법을 알아보세요.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>모든 제안을 구현할 필요는 없으며, 특정 프로젝트에 적용 가능한 것들만 구현하면 됩니다.</p></div><h2 id="호환성-확인" tabindex="-1">호환성 확인 <a class="header-anchor" href="#호환성-확인" aria-label="Permalink to &quot;호환성 확인&quot;">​</a></h2><p>새로운 레이아웃은 Android Gradle 플러그인 7.0 이상을 필요로 하며, Android Studio 2022.3 이상에서 지원됩니다. Android Gradle 플러그인 버전을 확인하고 필요한 경우 업그레이드하세요.</p><h2 id="kotlin-소스-세트-이름-변경" tabindex="-1">Kotlin 소스 세트 이름 변경 <a class="header-anchor" href="#kotlin-소스-세트-이름-변경" aria-label="Permalink to &quot;Kotlin 소스 세트 이름 변경&quot;">​</a></h2><p>해당하는 경우, 다음 패턴에 따라 프로젝트의 소스 세트 이름을 변경하세요:</p><table tabindex="0"><thead><tr><th>이전 소스 세트 레이아웃</th><th>새로운 소스 세트 레이아웃</th></tr></thead><tbody><tr><td><code>targetName</code> + <code>AndroidSourceSet.name</code></td><td><code>targetName</code> + <code>AndroidVariantType</code></td></tr></tbody></table><p><code>{AndroidSourceSet.name}</code>는 <code>{KotlinSourceSet.name}</code>에 다음과 같이 매핑됩니다:</p><table tabindex="0"><thead><tr><th></th><th>이전 소스 세트 레이아웃</th><th>새로운 소스 세트 레이아웃</th></tr></thead><tbody><tr><td>main</td><td>androidMain</td><td>androidMain</td></tr><tr><td>test</td><td>androidTest</td><td>android<b>Unit</b>Test</td></tr><tr><td>androidTest</td><td>android<b>Android</b>Test</td><td>android<b>Instrumented</b>Test</td></tr></tbody></table><h2 id="소스-파일-이동" tabindex="-1">소스 파일 이동 <a class="header-anchor" href="#소스-파일-이동" aria-label="Permalink to &quot;소스 파일 이동&quot;">​</a></h2><p>해당하는 경우, 다음 패턴에 따라 소스 파일을 새로운 디렉터리로 이동하세요:</p><table tabindex="0"><thead><tr><th>이전 소스 세트 레이아웃</th><th>새로운 소스 세트 레이아웃</th></tr></thead><tbody><tr><td>The layout had additional <code>/kotlin</code> SourceDirectories</td><td><code>src/{KotlinSourceSet.name}/kotlin</code></td></tr></tbody></table><p><code>{AndroidSourceSet.name}</code>는 포함된 <code>{SourceDirectories}</code>에 다음과 같이 매핑됩니다:</p><table tabindex="0"><thead><tr><th></th><th>이전 소스 세트 레이아웃</th><th>새로운 소스 세트 레이아웃</th></tr></thead><tbody><tr><td>main</td><td>src/androidMain/kotlin<br>src/main/kotlin<br>src/main/java</td><td>src/androidMain/kotlin<br>src/main/kotlin<br>src/main/java</td></tr><tr><td>test</td><td>src/androidTest/kotlin<br>src/test/kotlin<br>src/test/java</td><td>src/android<b>Unit</b>Test/kotlin<br>src/test/kotlin<br>src/test/java</td></tr><tr><td>androidTest</td><td>src/android<b>Android</b>Test/kotlin<br>src/androidTest/java</td><td>src/android<b>Instrumented</b>Test/kotlin<br>src/androidTest/java, <b>src/androidTest/kotlin</b></td></tr></tbody></table><h2 id="androidmanifest-xml-파일-이동" tabindex="-1">AndroidManifest.xml 파일 이동 <a class="header-anchor" href="#androidmanifest-xml-파일-이동" aria-label="Permalink to &quot;AndroidManifest.xml 파일 이동&quot;">​</a></h2><p>프로젝트에 <code>AndroidManifest.xml</code> 파일이 있다면, 다음 패턴에 따라 새 디렉터리로 이동하세요:</p><table tabindex="0"><thead><tr><th>이전 소스 세트 레이아웃</th><th>새로운 소스 세트 레이아웃</th></tr></thead><tbody><tr><td>src/{<b>Android</b>SourceSet.name}/AndroidManifest.xml</td><td>src/{<b>Kotlin</b>SourceSet.name}/AndroidManifest.xml</td></tr></tbody></table><p><code>{AndroidSourceSet.name}</code>는 <code>{AndroidManifest.xml location}</code>에 다음과 같이 매핑됩니다:</p><table tabindex="0"><thead><tr><th></th><th>이전 소스 세트 레이아웃</th><th>새로운 소스 세트 레이아웃</th></tr></thead><tbody><tr><td>main</td><td>src/main/AndroidManifest.xml</td><td>src/<b>android</b>Main/AndroidManifest.xml</td></tr><tr><td>debug</td><td>src/debug/AndroidManifest.xml</td><td>src/<b>android</b>Debug/AndroidManifest.xml</td></tr></tbody></table><h2 id="android-및-공통-테스트-간의-관계-확인" tabindex="-1">Android 및 공통 테스트 간의 관계 확인 <a class="header-anchor" href="#android-및-공통-테스트-간의-관계-확인" aria-label="Permalink to &quot;Android 및 공통 테스트 간의 관계 확인&quot;">​</a></h2><p>새로운 Android 소스 세트 레이아웃은 Android 계측 테스트(새로운 레이아웃에서 <code>androidInstrumentedTest</code>로 이름이 변경됨)와 공통 테스트 간의 관계를 변경합니다.</p><p>이전에는 <code>androidAndroidTest</code>와 <code>commonTest</code> 간의 <code>dependsOn</code> 관계가 기본값이었습니다. 이는 다음을 의미했습니다:</p><ul><li><code>commonTest</code>의 코드는 <code>androidAndroidTest</code>에서 사용할 수 있었습니다.</li><li><code>commonTest</code>의 <code>expect</code> 선언은 <code>androidAndroidTest</code>에 해당 <code>actual</code> 구현을 가지고 있어야 했습니다.</li><li><code>commonTest</code>에 선언된 테스트는 Android 계측 테스트로도 실행되었습니다.</li></ul><p>새로운 Android 소스 세트 레이아웃에서는 <code>dependsOn</code> 관계가 기본적으로 추가되지 않습니다. 이전 동작을 선호하는 경우, <code>build.gradle.kts</code> 파일에 다음 관계를 수동으로 선언하세요:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> commonTest </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> getting</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> androidInstrumentedTest </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependsOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(commonTest)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="android-플레이버-구현-조정" tabindex="-1">Android 플레이버 구현 조정 <a class="header-anchor" href="#android-플레이버-구현-조정" aria-label="Permalink to &quot;Android 플레이버 구현 조정&quot;">​</a></h2><p>이전에는 Kotlin Gradle 플러그인이 <code>debug</code> 및 <code>release</code> 빌드 유형 또는 <code>demo</code> 및 <code>full</code>과 같은 사용자 정의 플레이버를 포함하는 Android 소스 세트에 해당하는 소스 세트를 즉시 생성했습니다. 이는 <code>val androidDebug by getting { ... }</code>와 같은 표현식을 사용하여 소스 세트에 접근할 수 있도록 했습니다.</p><p>새로운 Android 소스 세트 레이아웃은 Android의 <a href="https://developer.android.com/reference/tools/gradle-api/8.0/com/android/build/api/variant/AndroidComponentsExtension#onVariants(com.android.build.api.variant.VariantSelector,kotlin.Function1)" target="_blank" rel="noreferrer"><code>onVariants</code></a>를 활용하여 소스 세트를 생성합니다. 이는 이러한 표현식을 유효하지 않게 만들며, <code>org.gradle.api.UnknownDomainObjectException: KotlinSourceSet with name &#39;androidDebug&#39; not found</code>와 같은 오류를 발생시킵니다.</p><p>이를 해결하려면 <code>build.gradle.kts</code> 파일에서 새로운 <code>invokeWhenCreated()</code> API를 사용하세요:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalKotlinGradlePluginApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sourceSets.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">invokeWhenCreated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;androidFreeDebug&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,31)]))}const b=d(n,[["render",s]]);export{k as __pageData,b as default};
