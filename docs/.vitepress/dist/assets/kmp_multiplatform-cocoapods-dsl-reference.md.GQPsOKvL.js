import{_ as h,C as t,c as k,o as r,j as s,G as n,ag as l,a,w as e}from"./chunks/framework.Bksy39di.js";const q=JSON.parse('{"title":"CocoaPods Gradle 插件 DSL 参考","description":"","frontmatter":{},"headers":[],"relativePath":"kmp/multiplatform-cocoapods-dsl-reference.md","filePath":"kmp/multiplatform-cocoapods-dsl-reference.md","lastUpdated":1755516278000}'),c={name:"kmp/multiplatform-cocoapods-dsl-reference.md"},E={tabindex:"0"};function g(u,i,y,F,m,C){const o=t("tldr"),d=t("list"),p=t("code-block");return r(),k("div",null,[i[12]||(i[12]=s("h1",{id:"cocoapods-gradle-插件-dsl-参考",tabindex:"-1"},[a("CocoaPods Gradle 插件 DSL 参考 "),s("a",{class:"header-anchor",href:"#cocoapods-gradle-插件-dsl-参考","aria-label":'Permalink to "CocoaPods Gradle 插件 DSL 参考"'},"​")],-1)),n(o,null,{default:e(()=>i[0]||(i[0]=[s("ul",null,[s("li",null,[a("在添加 Pod 依赖项之前，请"),s("a",{href:"./multiplatform-cocoapods-overview#set-up-an-environment-to-work-with-cocoapods"},"完成初始配置"),a("。")]),s("li",null,[a("关于"),s("a",{href:"https://github.com/Kotlin/kmp-with-cocoapods-multitarget-xcode-sample",target:"_blank",rel:"noreferrer"},"在 Kotlin 项目中设置不同 Pod 依赖项"),a("的示例项目，请参见。")]),s("li",null,[a("关于"),s("a",{href:"https://github.com/Kotlin/kmp-with-cocoapods-multitarget-xcode-sample",target:"_blank",rel:"noreferrer"},"包含多个 target 的 Xcode 项目如何依赖 Kotlin 库"),a("的示例项目，请查看。")])],-1)])),_:1}),i[13]||(i[13]=l(`<p>Kotlin CocoaPods Gradle 插件是一个用于创建 Podspec 文件的工具。这些文件是将你的 Kotlin 项目与 <a href="https://cocoapods.org/" target="_blank" rel="noreferrer">CocoaPods 依赖项管理器</a>集成所必需的。</p><p>本 DSL 参考列出了 Kotlin CocoaPods Gradle 插件中的主要块、函数和属性，你可以在设置 CocoaPods 集成时使用它们。</p><h2 id="启用插件" tabindex="-1">启用插件 <a class="header-anchor" href="#启用插件" aria-label="Permalink to &quot;启用插件&quot;">​</a></h2><p>要应用 CocoaPods 插件，请将以下行添加到 <code>build.gradle(.kts)</code> 文件中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;multiplatform&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) version </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2.2.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;native.cocoapods&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) version </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2.2.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>插件版本与 <a href="https://kotlinlang.org/docs/releases.html" target="_blank" rel="noreferrer">Kotlin 发布版本</a>匹配。最新稳定版本为 2.2.0。</p><h2 id="cocoapods-块" tabindex="-1"><code>cocoapods {}</code> 块 <a class="header-anchor" href="#cocoapods-块" aria-label="Permalink to &quot;\`cocoapods {}\` 块&quot;">​</a></h2><p><code>cocoapods {}</code> 块是 CocoaPods 配置的顶层块。它包含有关 Pod 的通用信息，包括必需信息（例如 Pod 版本、摘要和主页）以及可选特性。</p><p>你可以在其中使用以下块、函数和属性：</p><table tabindex="0"><thead><tr><th><strong>名称</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><code>version</code></td><td>Pod 的版本。如果未指定此项，将使用 Gradle 项目版本。如果未配置这些属性中的任何一个，将收到错误。</td></tr><tr><td><code>summary</code></td><td>从此项目构建的 Pod 的必需描述。</td></tr><tr><td><code>homepage</code></td><td>从此项目构建的 Pod 的主页的必需链接。</td></tr><tr><td><code>authors</code></td><td>指定从此项目构建的 Pod 的作者。</td></tr><tr><td><code>podfile</code></td><td>配置现有的 Podfile。</td></tr><tr><td><code>noPodspec()</code></td><td>配置插件不生成用于 <code>cocoapods</code> 部分的 Podspec 文件。</td></tr><tr><td><code>name</code></td><td>从此项目构建的 Pod 的名称。如果未提供，则使用项目名称。</td></tr><tr><td><code>license</code></td><td>从此项目构建的 Pod 的许可证、其类型和文本。</td></tr><tr><td><code>framework</code></td><td><code>framework</code> 块配置了由插件生成的框架。</td></tr><tr><td><code>source</code></td><td>从此项目构建的 Pod 的位置。</td></tr><tr><td><code>extraSpecAttributes</code></td><td>配置其他 Podspec 属性，例如 <code>libraries</code> 或 <code>vendored_frameworks</code>。</td></tr><tr><td><code>xcodeConfigurationToNativeBuildType</code></td><td>将自定义 Xcode 配置映射到 NativeBuildType：将 &quot;Debug&quot; 映射到 <code>NativeBuildType.DEBUG</code>，将 &quot;Release&quot; 映射到 <code>NativeBuildType.RELEASE</code>。</td></tr><tr><td><code>publishDir</code></td><td>配置 Pod 发布到输出目录。</td></tr><tr><td><code>pods</code></td><td>返回 Pod 依赖项的列表。</td></tr><tr><td><code>pod()</code></td><td>添加 CocoaPods 依赖项到从此项目构建的 Pod。</td></tr><tr><td><code>specRepos</code></td><td>使用 <code>url()</code> 添加规范版本库。当私有 Pod 用作依赖项时，此项是必需的。关于更多信息，请参见 <a href="https://guides.cocoapods.org/making/private-cocoapods.html" target="_blank" rel="noreferrer">CocoaPods 文档</a>。</td></tr></tbody></table><h3 id="目标" tabindex="-1">目标 <a class="header-anchor" href="#目标" aria-label="Permalink to &quot;目标&quot;">​</a></h3><table tabindex="0"><thead><tr><th>iOS</th><th>macOS</th><th>tvOS</th><th>watchOS</th></tr></thead><tbody><tr><td><code>iosArm64</code></td><td><code>macosArm64</code></td><td><code>tvosArm64</code></td><td><code>watchosArm64</code></td></tr><tr><td><code>iosX64</code></td><td><code>macosX64</code></td><td><code>tvosX64</code></td><td><code>watchosX64</code></td></tr><tr><td><code>iosSimulatorArm64</code></td><td></td><td><code>tvosSimulatorArm64</code></td><td><code>watchosSimulatorArm64</code></td></tr><tr><td></td><td></td><td></td><td><code>watchosArm32</code></td></tr><tr><td></td><td></td><td></td><td><code>watchosDeviceArm64</code></td></tr></tbody></table><p>对于每个目标，使用 <code>deploymentTarget</code> 属性指定 Pod 库的最低目标版本。</p><p>应用后，CocoaPods 会为所有目标添加 <code>debug</code> 和 <code>release</code> 框架作为输出二进制文件。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    cocoapods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        version </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;2.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;MyCocoaPod&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        summary </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;CocoaPods test library&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        homepage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://github.com/JetBrains/kotlin&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        extraSpecAttributes[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vendored_frameworks&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;CustomFramework.xcframework&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        license </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;{ :type =&gt; &#39;MIT&#39;, :text =&gt; &#39;License text&#39;}&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        source </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;{ :git =&gt; &#39;git@github.com:vkormushkin/kmmpodlibrary.git&#39;, :tag =&gt; &#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$version</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39; }&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        authors </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Kotlin Dev&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        specRepos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            url</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://github.com/Kotlin/kotlin-cocoapods-spec.git&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        pod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;example&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        xcodeConfigurationToNativeBuildType[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;CUSTOM_RELEASE&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NativeBuildType.RELEASE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="framework-块" tabindex="-1"><code>framework {}</code> 块 <a class="header-anchor" href="#framework-块" aria-label="Permalink to &quot;\`framework {}\` 块&quot;">​</a></h3><p><code>framework {}</code> 块嵌套在 <code>cocoapods</code> 内部，配置了从项目构建的 Pod 的框架属性。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>请注意 <code>baseName</code> 是一个必需字段。</p></div><table tabindex="0"><thead><tr><th><strong>名称</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><code>baseName</code></td><td>必需的框架名称。请使用此属性代替已弃用的 <code>frameworkName</code>。</td></tr><tr><td><code>isStatic</code></td><td>定义框架链接类型。默认情况下是动态的。</td></tr><tr><td><code>transitiveExport</code></td><td>启用依赖项导出。</td></tr></tbody></table><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    cocoapods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        version </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;2.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        framework</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            baseName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;MyFramework&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            isStatic </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">project</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;:anotherKMMModule&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            transitiveExport </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="pod-函数" tabindex="-1"><code>pod()</code> 函数 <a class="header-anchor" href="#pod-函数" aria-label="Permalink to &quot;\`pod()\` 函数&quot;">​</a></h2><p><code>pod()</code> 函数调用会添加 CocoaPods 依赖项到从此项目构建的 Pod。每个依赖项都需要单独的函数调用。</p><p>你可以在函数形参中指定 Pod 库的名称，并在其配置块中指定附加形参值，例如库的 <code>version</code> 和 <code>source</code>：</p>`,23)),s("table",E,[i[11]||(i[11]=s("thead",null,[s("tr",null,[s("th",null,[s("strong",null,"名称")]),s("th",null,[s("strong",null,"描述")])])],-1)),s("tbody",null,[i[6]||(i[6]=s("tr",null,[s("td",null,[s("code",null,"version")]),s("td",null,"库版本。要使用库的最新版本，请省略形参。")],-1)),s("tr",null,[i[3]||(i[3]=s("td",null,[s("code",null,"source")],-1)),s("td",null,[i[2]||(i[2]=a("配置 Pod 的来源：")),n(d,null,{default:e(()=>i[1]||(i[1]=[s("li",null,[a("使用 "),s("code",null,"git()"),a(" 的 Git 版本库。在 "),s("code",null,"git()"),a(" 之后的块中，你可以指定 "),s("code",null,"commit"),a(" 以使用特定提交、"),s("code",null,"tag"),a(" 以使用特定标签，以及 "),s("code",null,"branch"),a(" 以使用版本库中的特定分支")],-1),s("li",null,[a("使用 "),s("code",null,"path()"),a(" 的本地版本库")],-1)])),_:1})])]),i[7]||(i[7]=s("tr",null,[s("td",null,[s("code",null,"packageName")]),s("td",null,"指定包名称。")],-1)),s("tr",null,[i[5]||(i[5]=s("td",null,[s("code",null,"extraOpts")],-1)),s("td",null,[i[4]||(i[4]=a("指定 Pod 库的选项的列表。例如，特定标志：")),n(p,{lang:"Kotlin",code:'extraOpts = listOf("-compiler-option")'})])]),i[8]||(i[8]=s("tr",null,[s("td",null,[s("code",null,"linkOnly")]),s("td",null,"指示 CocoaPods 插件使用动态框架的 Pod 依赖项，而不生成 cinterop 绑定。如果与静态框架一起使用，该选项将完全移除 Pod 依赖项。")],-1)),i[9]||(i[9]=s("tr",null,[s("td",null,[s("code",null,"interopBindingDependencies")]),s("td",null,"包含其他 Pod 的依赖项列表。当为新 Pod 构建 Kotlin 绑定时，将使用此列表。")],-1)),i[10]||(i[10]=s("tr",null,[s("td",null,[s("code",null,"useInteropBindingFrom()")]),s("td",null,"指定用作依赖项的现有 Pod 的名称。此 Pod 应在函数执行前声明。该函数指示 CocoaPods 插件在为新 Pod 构建绑定时使用现有 Pod 的 Kotlin 绑定。")],-1))])]),i[14]||(i[14]=l(`<div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    cocoapods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        version </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;2.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        summary </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;CocoaPods test library&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        homepage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://github.com/JetBrains/kotlin&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ios.deploymentTarget </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;16.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        pod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;pod_dependency&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            version </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            extraOpts </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-compiler-option&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            linkOnly </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            source </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(project.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;../pod_dependency&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="接下来" tabindex="-1">接下来 <a class="header-anchor" href="#接下来" aria-label="Permalink to &quot;接下来&quot;">​</a></h2><ul><li>关于 Kotlin DSL 的完整语法，请参见 <a href="https://github.com/JetBrains/kotlin/blob/master/libraries/tools/kotlin-gradle-plugin/src/common/kotlin/org/jetbrains/kotlin/gradle/targets/native/cocoapods/CocoapodsExtension.kt" target="_blank" rel="noreferrer">Kotlin Gradle 插件版本库</a></li><li><a href="./multiplatform-cocoapods-libraries">在你的 Kotlin 项目中添加对 Pod 库的依赖项</a></li><li><a href="./multiplatform-cocoapods-xcode">设置 Kotlin 项目和 Xcode 项目之间的依赖项</a></li></ul>`,3))])}const B=h(c,[["render",g]]);export{q as __pageData,B as default};
