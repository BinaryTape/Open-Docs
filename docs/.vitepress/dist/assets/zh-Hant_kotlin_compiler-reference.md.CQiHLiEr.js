import{_ as l,C as r,c as s,o as d,ag as e,G as i,j as o,a as n}from"./chunks/framework.Bksy39di.js";const f=JSON.parse('{"title":"Kotlin 編譯器選項","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/compiler-reference.md","filePath":"zh-Hant/kotlin/compiler-reference.md","lastUpdated":1754307826000}'),h={name:"zh-Hant/kotlin/compiler-reference.md"};function p(c,a,m,u,b,k){const t=r("TopicTitle");return d(),s("div",null,[a[0]||(a[0]=e('<h1 id="kotlin-編譯器選項" tabindex="-1">Kotlin 編譯器選項 <a class="header-anchor" href="#kotlin-編譯器選項" aria-label="Permalink to &quot;Kotlin 編譯器選項&quot;">​</a></h1><p>每個 Kotlin 版本都包含針對其支援目標的編譯器：JVM、JavaScript，以及針對 <a href="/zh-Hant/kotlin/native-overview#target-platforms">支援平台</a> 的原生二進位檔。</p><p>這些編譯器由以下工具使用：</p><ul><li>IDE，當您點擊 Kotlin 專案的 <strong>編譯</strong> 或 <strong>執行</strong> 按鈕時。</li><li>Gradle，當您在命令列或 IDE 中呼叫 <code>gradle build</code> 時。</li><li>Maven，當您在命令列或 IDE 中呼叫 <code>mvn compile</code> 或 <code>mvn test-compile</code> 時。</li></ul><p>您也可以從命令列手動執行 Kotlin 編譯器，詳情請參閱 <a href="/zh-Hant/kotlin/command-line">使用命令列編譯器</a> 教學。</p><h2 id="編譯器選項" tabindex="-1">編譯器選項 <a class="header-anchor" href="#編譯器選項" aria-label="Permalink to &quot;編譯器選項&quot;">​</a></h2><p>Kotlin 編譯器有許多選項可用於客製化編譯過程。本頁面列出了針對不同目標的編譯器選項及其說明。</p><p>有幾種方法可以設定編譯器選項及其值（<em>編譯器引數</em>）：</p><ul><li><p>在 IntelliJ IDEA 中，於 <strong>設定/偏好設定</strong> | <strong>建置、執行、部署</strong> | <strong>編譯器</strong> | <strong>Kotlin 編譯器</strong> 中的 <strong>額外命令列參數</strong> 文字方塊中輸入編譯器引數。</p></li><li><p>如果您使用 Gradle，請在 Kotlin 編譯任務的 <code>compilerOptions</code> 屬性中指定編譯器引數。詳情請參閱 <a href="/zh-Hant/kotlin/gradle-compiler-options#how-to-define-options">Gradle 編譯器選項</a>。</p></li><li><p>如果您使用 Maven，請在 Maven 插件節點的 <code>&lt;configuration&gt;</code> 元素中指定編譯器引數。詳情請參閱 <a href="/zh-Hant/kotlin/maven#specify-compiler-options">Maven</a>。</p></li><li><p>如果您執行命令列編譯器，請直接將編譯器引數新增到公用程式呼叫中，或將它們寫入 <a href="#argfile">argfile</a>。</p><p>例如：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kotlinc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.kt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -include-runtime</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.jar</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>在 Windows 上，當您傳遞包含分隔字元（空白、<code>=</code>、<code>;</code>、<code>,</code>）的編譯器引數時，請使用雙引號 (<code>&quot;</code>) 將這些引數括起來。 <code>$ kotlinc.bat hello.kt -include-runtime -d &quot;My Folder\\hello.jar&quot;</code></p></div></li></ul><h2 id="共用選項" tabindex="-1">共用選項 <a class="header-anchor" href="#共用選項" aria-label="Permalink to &quot;共用選項&quot;">​</a></h2><p>以下選項適用於所有 Kotlin 編譯器。</p><h3 id="version" tabindex="-1">-version <a class="header-anchor" href="#version" aria-label="Permalink to &quot;-version&quot;">​</a></h3><p>顯示編譯器版本。</p><h3 id="verbose" tabindex="-1">-verbose <a class="header-anchor" href="#verbose" aria-label="Permalink to &quot;-verbose&quot;">​</a></h3><p>啟用詳細記錄輸出，其中包含編譯過程的詳細資訊。</p><h3 id="script" tabindex="-1">-script <a class="header-anchor" href="#script" aria-label="Permalink to &quot;-script&quot;">​</a></h3><p>評估 Kotlin 腳本檔案。當使用此選項呼叫時，編譯器會執行所給引數中第一個 Kotlin 腳本 (<code>*.kts</code>) 檔案。</p><h3 id="help-h" tabindex="-1">-help (-h) <a class="header-anchor" href="#help-h" aria-label="Permalink to &quot;-help (-h)&quot;">​</a></h3><p>顯示使用資訊並退出。僅顯示標準選項。若要顯示進階選項，請使用 <code>-X</code>。</p>',19)),i(t,{id:"x",level:"3",title:"-X",labelRef:"experimental-general"}),a[1]||(a[1]=e('<p>顯示有關進階選項的資訊並退出。這些選項目前不穩定：其名稱和行為可能會在不另行通知的情況下更改。</p><h3 id="kotlin-home-path" tabindex="-1">-kotlin-home <em>path</em> <a class="header-anchor" href="#kotlin-home-path" aria-label="Permalink to &quot;-kotlin-home _path_&quot;">​</a></h3><p>指定 Kotlin 編譯器的自訂路徑，用於尋找執行期函式庫。</p><h3 id="p-plugin-pluginid-optionname-value" tabindex="-1">-P plugin:pluginId:optionName=value <a class="header-anchor" href="#p-plugin-pluginid-optionname-value" aria-label="Permalink to &quot;-P plugin:pluginId:optionName=value&quot;">​</a></h3><p>將選項傳遞給 Kotlin 編譯器插件。核心插件及其選項列於文件中 <a href="/zh-Hant/kotlin/components-stability#core-compiler-plugins">核心編譯器插件</a> 章節。</p><h3 id="language-version-version" tabindex="-1">-language-version <em>version</em> <a class="header-anchor" href="#language-version-version" aria-label="Permalink to &quot;-language-version _version_&quot;">​</a></h3><p>提供與指定 Kotlin 版本的原始碼相容性。</p><h3 id="api-version-version" tabindex="-1">-api-version <em>version</em> <a class="header-anchor" href="#api-version-version" aria-label="Permalink to &quot;-api-version _version_&quot;">​</a></h3><p>僅允許使用來自指定版本 Kotlin 綁定函式庫的宣告。</p><h3 id="progressive" tabindex="-1">-progressive <a class="header-anchor" href="#progressive" aria-label="Permalink to &quot;-progressive&quot;">​</a></h3><p>為編譯器啟用 <a href="/zh-Hant/kotlin/whatsnew13#progressive-mode">漸進模式</a>。</p><p>在漸進模式下，不穩定程式碼的棄用和錯誤修復會立即生效，而無需經歷平穩的遷移週期。以漸進模式編寫的程式碼向後相容；然而，以非漸進模式編寫的程式碼可能會在漸進模式下導致編譯錯誤。</p><h3 id="argfile" tabindex="-1">@argfile <a class="header-anchor" href="#argfile" aria-label="Permalink to &quot;@argfile&quot;">​</a></h3><p>從指定檔案讀取編譯器選項。此類檔案可以包含帶有值和原始碼路徑的編譯器選項。選項和路徑應以空白字元分隔。例如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>-include-runtime -d hello.jar hello.kt</span></span></code></pre></div><p>若要傳遞包含空白字元的值，請使用單引號 (<strong>&#39;</strong>) 或雙引號 (<strong>&quot;</strong>) 將其括起來。如果值中包含引號，請使用反斜線 (<strong>\\</strong>) 對其進行跳脫。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>-include-runtime -d &#39;My folder&#39;</span></span></code></pre></div><p>您也可以傳遞多個引數檔案，例如，將編譯器選項與原始碼檔案分開。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kotlinc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @compiler.options</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @classes</span></span></code></pre></div><p>如果檔案位於與當前目錄不同的位置，請使用相對路徑。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kotlinc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @options/compiler.options</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.kt</span></span></code></pre></div><h3 id="opt-in-annotation" tabindex="-1">-opt-in <em>annotation</em> <a class="header-anchor" href="#opt-in-annotation" aria-label="Permalink to &quot;-opt-in _annotation_&quot;">​</a></h3><p>啟用對 <a href="/zh-Hant/kotlin/opt-in-requirements">需要選擇啟用</a> 的 API 的使用，並使用指定完整限定名稱的要求註解。</p>',23)),i(t,{id:"xrepl",level:"3",title:"-Xrepl",labelRef:"experimental-general"}),a[2]||(a[2]=e('<p>啟用 Kotlin REPL。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlinc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Xrepl</span></span></code></pre></div>',2)),i(t,{id:"xannotation-target-all",level:"3",title:"-Xannotation-target-all",labelRef:"experimental-general"}),a[3]||(a[3]=e('<p>啟用實驗性 <a href="/zh-Hant/kotlin/annotations#all-meta-target"><code>all</code> 註解使用點目標</a>：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlinc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Xannotation-target-all</span></span></code></pre></div>',2)),i(t,{id:"xannotation-default-target-param-property",level:"3",title:"-Xannotation-default-target=param-property",labelRef:"experimental-general"}),a[4]||(a[4]=e('<p>啟用新的實驗性 <a href="/zh-Hant/kotlin/annotations#defaults-when-no-use-site-targets-are-specified">註解使用點目標預設規則</a>：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlinc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Xannotation-default-target=param-property</span></span></code></pre></div><h3 id="警告管理" tabindex="-1">警告管理 <a class="header-anchor" href="#警告管理" aria-label="Permalink to &quot;警告管理&quot;">​</a></h3><h4 id="nowarn" tabindex="-1">-nowarn <a class="header-anchor" href="#nowarn" aria-label="Permalink to &quot;-nowarn&quot;">​</a></h4><p>在編譯期間抑制所有警告。</p><h4 id="werror" tabindex="-1">-Werror <a class="header-anchor" href="#werror" aria-label="Permalink to &quot;-Werror&quot;">​</a></h4><p>將所有警告視為編譯錯誤。</p><h4 id="wextra" tabindex="-1">-Wextra <a class="header-anchor" href="#wextra" aria-label="Permalink to &quot;-Wextra&quot;">​</a></h4><p>啟用 <a href="/zh-Hant/kotlin/whatsnew21#extra-compiler-checks">額外的宣告、表達式和型別編譯器檢查</a>，若為真則發出警告。</p>',9)),i(t,{id:"xwarning-level",level:"4",title:"-Xwarning-level",labelRef:"experimental-general"}),a[5]||(a[5]=e('<p>設定特定編譯器警告的嚴重程度：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlinc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Xwarning-level=DIAGNOSTIC_NAME:(error</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">warning</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">disabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><ul><li><code>error</code>: 僅將指定的警告提升為錯誤。</li><li><code>warning</code>: 對於指定的診斷發出警告，並預設啟用。</li><li><code>disabled</code>: 僅在模組範圍內抑制指定的警告。</li></ul><p>您可以透過將模組範圍規則與特定規則結合來調整專案中的警告報告：</p><table tabindex="0"><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>-nowarn -Xwarning-level=DIAGNOSTIC_NAME:warning</code></td><td>抑制所有警告，但指定的警告除外。</td></tr><tr><td><code>-Werror -Xwarning-level=DIAGNOSTIC_NAME:warning</code></td><td>將所有警告提升為錯誤，但指定的警告除外。</td></tr><tr><td><code>-Wextra -Xwarning-level=DIAGNOSTIC_NAME:disabled</code></td><td>啟用所有額外檢查，但指定的檢查除外。</td></tr></tbody></table><p>如果您有許多警告要從一般規則中排除，您可以使用 <a href="#argfile"><code>@argfile</code></a> 將它們列在單獨的檔案中。</p><h2 id="kotlin-jvm-編譯器選項" tabindex="-1">Kotlin/JVM 編譯器選項 <a class="header-anchor" href="#kotlin-jvm-編譯器選項" aria-label="Permalink to &quot;Kotlin/JVM 編譯器選項&quot;">​</a></h2><p>用於 JVM 的 Kotlin 編譯器將 Kotlin 原始碼檔案編譯為 Java 類別檔案。用於 Kotlin 到 JVM 編譯的命令列工具是 <code>kotlinc</code> 和 <code>kotlinc-jvm</code>。您也可以使用它們來執行 Kotlin 腳本檔案。</p><p>除了 <a href="#common-options">共用選項</a> 之外，Kotlin/JVM 編譯器還有以下選項。</p><h3 id="classpath-path-cp-path" tabindex="-1">-classpath <em>path</em> (-cp <em>path</em>) <a class="header-anchor" href="#classpath-path-cp-path" aria-label="Permalink to &quot;-classpath _path_ (-cp _path_)&quot;">​</a></h3><p>在指定路徑中搜尋類別檔案。使用系統路徑分隔符（Windows 上為 <strong>;</strong>，macOS/Linux 上為 <strong>:</strong>）分隔類別路徑的元素。類別路徑可以包含檔案和目錄路徑、ZIP 或 JAR 檔案。</p><h3 id="d-path" tabindex="-1">-d <em>path</em> <a class="header-anchor" href="#d-path" aria-label="Permalink to &quot;-d _path_&quot;">​</a></h3><p>將生成的類別檔案放置到指定位置。該位置可以是目錄、ZIP 或 JAR 檔案。</p><h3 id="include-runtime" tabindex="-1">-include-runtime <a class="header-anchor" href="#include-runtime" aria-label="Permalink to &quot;-include-runtime&quot;">​</a></h3><p>將 Kotlin 執行期包含在生成的 JAR 檔案中。使生成的歸檔檔案可在任何啟用 Java 的環境中運行。</p><h3 id="jdk-home-path" tabindex="-1">-jdk-home <em>path</em> <a class="header-anchor" href="#jdk-home-path" aria-label="Permalink to &quot;-jdk-home _path_&quot;">​</a></h3><p>如果與預設的 <code>JAVA_HOME</code> 不同，則使用自訂的 JDK 主目錄包含到類別路徑中。</p>',17)),i(t,{id:"xjdk-release-version",level:"3",title:"-Xjdk-release=version",labelRef:"experimental-general"}),a[6]||(a[6]=e('<p>指定生成的 JVM 位元組碼的目標版本。將類別路徑中 JDK 的 API 限制為指定的 Java 版本。自動設定 <a href="#jvm-target-version"><code>-jvm-target version</code></a>。可能的值為 <code>1.8</code>、<code>9</code>、<code>10</code>、...、<code>24</code>。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>此選項 <a href="https://youtrack.jetbrains.com/issue/KT-29974" target="_blank" rel="noreferrer">不保證</a> 對每個 JDK 發行版都有效。</p></div><h3 id="jvm-target-version" tabindex="-1">-jvm-target <em>version</em> <a class="header-anchor" href="#jvm-target-version" aria-label="Permalink to &quot;-jvm-target _version_&quot;">​</a></h3><p>指定生成的 JVM 位元組碼的目標版本。可能的值為 <code>1.8</code>、<code>9</code>、<code>10</code>、...、<code>24</code>。預設值為 <code>1.8</code>。</p><h3 id="java-parameters" tabindex="-1">-java-parameters <a class="header-anchor" href="#java-parameters" aria-label="Permalink to &quot;-java-parameters&quot;">​</a></h3><p>為 Java 1.8 方法參數上的反射生成中繼資料。</p><h3 id="module-name-name-jvm" tabindex="-1">-module-name <em>name</em> (JVM) <a class="header-anchor" href="#module-name-name-jvm" aria-label="Permalink to &quot;-module-name _name_ (JVM)&quot;">​</a></h3><p>為生成的 <code>.kotlin_module</code> 檔案設定自訂名稱。</p><h3 id="no-jdk" tabindex="-1">-no-jdk <a class="header-anchor" href="#no-jdk" aria-label="Permalink to &quot;-no-jdk&quot;">​</a></h3><p>不要自動將 Java 執行期包含在類別路徑中。</p><h3 id="no-reflect" tabindex="-1">-no-reflect <a class="header-anchor" href="#no-reflect" aria-label="Permalink to &quot;-no-reflect&quot;">​</a></h3><p>不要自動將 Kotlin 反射 (<code>kotlin-reflect.jar</code>) 包含在類別路徑中。</p><h3 id="no-stdlib-jvm" tabindex="-1">-no-stdlib (JVM) <a class="header-anchor" href="#no-stdlib-jvm" aria-label="Permalink to &quot;-no-stdlib (JVM)&quot;">​</a></h3><p>不要自動將 Kotlin/JVM 標準函式庫 (<code>kotlin-stdlib.jar</code>) 和 Kotlin 反射 (<code>kotlin-reflect.jar</code>) 包含在類別路徑中。</p><h3 id="script-templates-classnames" tabindex="-1">-script-templates _classnames[,] _ <a class="header-anchor" href="#script-templates-classnames" aria-label="Permalink to &quot;-script-templates _classnames[,] _&quot;">​</a></h3><p>腳本定義範本類別。使用完整限定類別名稱並以逗號 (<strong>,</strong>) 分隔。</p>',16)),i(t,{id:"xjvm-expose-boxed",level:"3",title:"-Xjvm-expose-boxed",labelRef:"experimental-general"}),a[7]||(a[7]=e('<p>生成模組中所有內聯值類別的裝箱版本，以及使用它們的函式的裝箱變體，使兩者都可以從 Java 存取。更多資訊請參閱《從 Java 呼叫 Kotlin 指南》中的 <a href="/zh-Hant/kotlin/java-to-kotlin-interop#inline-value-classes">內聯值類別</a>。</p><h3 id="jvm-default-mode" tabindex="-1">-jvm-default <em>mode</em> <a class="header-anchor" href="#jvm-default-mode" aria-label="Permalink to &quot;-jvm-default _mode_&quot;">​</a></h3><p>控制介面中宣告的函式如何在 JVM 上編譯為預設方法。</p><table tabindex="0"><thead><tr><th>模式</th><th>描述</th></tr></thead><tbody><tr><td><code>enable</code></td><td>在介面中生成預設實作，並在子類別和 <code>DefaultImpls</code> 類別中包含橋接函式。（預設）</td></tr><tr><td><code>no-compatibility</code></td><td>僅在介面中生成預設實作，跳過相容性橋接和 <code>DefaultImpls</code> 類別。</td></tr><tr><td><code>disable</code></td><td>僅生成相容性橋接和 <code>DefaultImpls</code> 類別，跳過預設方法。</td></tr></tbody></table><h2 id="kotlin-js-編譯器選項" tabindex="-1">Kotlin/JS 編譯器選項 <a class="header-anchor" href="#kotlin-js-編譯器選項" aria-label="Permalink to &quot;Kotlin/JS 編譯器選項&quot;">​</a></h2><p>用於 JS 的 Kotlin 編譯器將 Kotlin 原始碼檔案編譯為 JavaScript 程式碼。用於 Kotlin 到 JS 編譯的命令列工具是 <code>kotlinc-js</code>。</p><p>除了 <a href="#common-options">共用選項</a> 之外，Kotlin/JS 編譯器還有以下選項。</p>',7)),a[8]||(a[8]=o("h3",{"es5|es2015":"",id:"target",tabindex:"-1"},[n("-target "),o("a",{class:"header-anchor",href:"#target","aria-label":'Permalink to "-target {es5|es2015}"'},"​")],-1)),a[9]||(a[9]=e('<p>為指定的 ECMA 版本生成 JS 檔案。</p><h3 id="libraries-path" tabindex="-1">-libraries <em>path</em> <a class="header-anchor" href="#libraries-path" aria-label="Permalink to &quot;-libraries _path_&quot;">​</a></h3><p>包含 <code>.meta.js</code> 和 <code>.kjsm</code> 檔案的 Kotlin 函式庫路徑，以系統路徑分隔符分隔。</p><h3 id="main-call-nocall" tabindex="-1">-main <em>{call|noCall}</em> <a class="header-anchor" href="#main-call-nocall" aria-label="Permalink to &quot;-main _{call|noCall}_&quot;">​</a></h3><p>定義 <code>main</code> 函式是否應在執行時被呼叫。</p><h3 id="meta-info" tabindex="-1">-meta-info <a class="header-anchor" href="#meta-info" aria-label="Permalink to &quot;-meta-info&quot;">​</a></h3><p>生成帶有中繼資料的 <code>.meta.js</code> 和 <code>.kjsm</code> 檔案。在建立 JS 函式庫時使用此選項。</p>',7)),a[10]||(a[10]=o("h3",{"umd|commonjs|amd|plain":"",id:"module-kind",tabindex:"-1"},[n("-module-kind "),o("a",{class:"header-anchor",href:"#module-kind","aria-label":'Permalink to "-module-kind {umd|commonjs|amd|plain}"'},"​")],-1)),a[11]||(a[11]=e('<p>編譯器生成的 JS 模組類型：</p><ul><li><code>umd</code> - <a href="https://github.com/umdjs/umd" target="_blank" rel="noreferrer">通用模組定義</a> 模組</li><li><code>commonjs</code> - <a href="http://www.commonjs.org/" target="_blank" rel="noreferrer">CommonJS</a> 模組</li><li><code>amd</code> - <a href="https://en.wikipedia.org/wiki/Asynchronous_module_definition" target="_blank" rel="noreferrer">非同步模組定義</a> 模組</li><li><code>plain</code> - 純 JS 模組</li></ul><p>若要了解更多有關不同類型 JS 模組及其區別的資訊，請參閱 <a href="https://www.davidbcalhoun.com/2014/what-is-amd-commonjs-and-umd/" target="_blank" rel="noreferrer">這篇</a> 文章。</p><h3 id="no-stdlib-js" tabindex="-1">-no-stdlib (JS) <a class="header-anchor" href="#no-stdlib-js" aria-label="Permalink to &quot;-no-stdlib (JS)&quot;">​</a></h3><p>不要自動將預設的 Kotlin/JS 標準函式庫包含到編譯依賴項中。</p><h3 id="output-filepath" tabindex="-1">-output <em>filepath</em> <a class="header-anchor" href="#output-filepath" aria-label="Permalink to &quot;-output _filepath_&quot;">​</a></h3><p>設定編譯結果的目標檔案。該值必須是包含其名稱的 <code>.js</code> 檔案路徑。</p><h3 id="output-postfix-filepath" tabindex="-1">-output-postfix <em>filepath</em> <a class="header-anchor" href="#output-postfix-filepath" aria-label="Permalink to &quot;-output-postfix _filepath_&quot;">​</a></h3><p>將指定檔案的內容新增到輸出檔案的末尾。</p><h3 id="output-prefix-filepath" tabindex="-1">-output-prefix <em>filepath</em> <a class="header-anchor" href="#output-prefix-filepath" aria-label="Permalink to &quot;-output-prefix _filepath_&quot;">​</a></h3><p>將指定檔案的內容新增到輸出檔案的開頭。</p><h3 id="source-map" tabindex="-1">-source-map <a class="header-anchor" href="#source-map" aria-label="Permalink to &quot;-source-map&quot;">​</a></h3><p>生成原始碼對應 (source map)。</p><h3 id="source-map-base-dirs-path" tabindex="-1">-source-map-base-dirs <em>path</em> <a class="header-anchor" href="#source-map-base-dirs-path" aria-label="Permalink to &quot;-source-map-base-dirs _path_&quot;">​</a></h3><p>使用指定路徑作為基礎目錄。基礎目錄用於計算原始碼對應中的相對路徑。</p><h3 id="source-map-embed-sources-always-never-inlining" tabindex="-1">-source-map-embed-sources <em>{always|never|inlining}</em> <a class="header-anchor" href="#source-map-embed-sources-always-never-inlining" aria-label="Permalink to &quot;-source-map-embed-sources _{always|never|inlining}_&quot;">​</a></h3><p>將原始碼檔案嵌入到原始碼對應中。</p><h3 id="source-map-names-policy-simple-names-fully-qualified-names-no" tabindex="-1">-source-map-names-policy <em>{simple-names|fully-qualified-names|no}</em> <a class="header-anchor" href="#source-map-names-policy-simple-names-fully-qualified-names-no" aria-label="Permalink to &quot;-source-map-names-policy _{simple-names|fully-qualified-names|no}_&quot;">​</a></h3><p>將您在 Kotlin 程式碼中宣告的變數和函式名稱新增到原始碼對應中。</p><table tabindex="0"><thead><tr><th>設定</th><th>描述</th><th>範例輸出</th></tr></thead><tbody><tr><td><code>simple-names</code></td><td>新增變數名稱和簡單函式名稱。（預設）</td><td><code>main</code></td></tr><tr><td><code>fully-qualified-names</code></td><td>新增變數名稱和完整限定函式名稱。</td><td><code>com.example.kjs.playground.main</code></td></tr><tr><td><code>no</code></td><td>不新增變數或函式名稱。</td><td>N/A</td></tr></tbody></table><h3 id="source-map-prefix" tabindex="-1">-source-map-prefix <a class="header-anchor" href="#source-map-prefix" aria-label="Permalink to &quot;-source-map-prefix&quot;">​</a></h3><p>將指定的字首新增到原始碼對應中的路徑。</p><h2 id="kotlin-native-編譯器選項" tabindex="-1">Kotlin/Native 編譯器選項 <a class="header-anchor" href="#kotlin-native-編譯器選項" aria-label="Permalink to &quot;Kotlin/Native 編譯器選項&quot;">​</a></h2><p>Kotlin/Native 編譯器將 Kotlin 原始碼檔案編譯為針對 <a href="/zh-Hant/kotlin/native-overview#target-platforms">支援平台</a> 的原生二進位檔。用於 Kotlin/Native 編譯的命令列工具是 <code>kotlinc-native</code>。</p><p>除了 <a href="#common-options">共用選項</a> 之外，Kotlin/Native 編譯器還有以下選項。</p><h3 id="enable-assertions-ea" tabindex="-1">-enable-assertions (-ea) <a class="header-anchor" href="#enable-assertions-ea" aria-label="Permalink to &quot;-enable-assertions (-ea)&quot;">​</a></h3><p>在生成的程式碼中啟用執行期斷言。</p><h3 id="g" tabindex="-1">-g <a class="header-anchor" href="#g" aria-label="Permalink to &quot;-g&quot;">​</a></h3><p>啟用發出偵錯資訊。此選項會降低最佳化級別，不應與 <a href="#opt"><code>-opt</code></a> 選項結合使用。</p><h3 id="generate-test-runner-tr" tabindex="-1">-generate-test-runner (-tr) <a class="header-anchor" href="#generate-test-runner-tr" aria-label="Permalink to &quot;-generate-test-runner (-tr)&quot;">​</a></h3><p>生成用於從專案運行單元測試的應用程式。</p><h3 id="generate-no-exit-test-runner-trn" tabindex="-1">-generate-no-exit-test-runner (-trn) <a class="header-anchor" href="#generate-no-exit-test-runner-trn" aria-label="Permalink to &quot;-generate-no-exit-test-runner (-trn)&quot;">​</a></h3><p>生成用於運行單元測試而無需顯式程序退出的應用程式。</p><h3 id="include-binary-path-ib-path" tabindex="-1">-include-binary <em>path</em> (-ib <em>path</em>) <a class="header-anchor" href="#include-binary-path-ib-path" aria-label="Permalink to &quot;-include-binary _path_ (-ib _path_)&quot;">​</a></h3><p>將外部二進位檔打包到生成的 klib 檔案中。</p><h3 id="library-path-l-path" tabindex="-1">-library <em>path</em> (-l <em>path</em>) <a class="header-anchor" href="#library-path-l-path" aria-label="Permalink to &quot;-library _path_ (-l _path_)&quot;">​</a></h3><p>與函式庫連結。若要了解如何在 Kotlin/native 專案中使用函式庫，請參閱 <a href="/zh-Hant/kotlin/native-libraries">Kotlin/Native 函式庫</a>。</p><h3 id="library-version-version-lv-version" tabindex="-1">-library-version <em>version</em> (-lv <em>version</em>) <a class="header-anchor" href="#library-version-version-lv-version" aria-label="Permalink to &quot;-library-version _version_ (-lv _version_)&quot;">​</a></h3><p>設定函式庫版本。</p><h3 id="list-targets" tabindex="-1">-list-targets <a class="header-anchor" href="#list-targets" aria-label="Permalink to &quot;-list-targets&quot;">​</a></h3><p>列出可用的硬體目標。</p><h3 id="manifest-path" tabindex="-1">-manifest <em>path</em> <a class="header-anchor" href="#manifest-path" aria-label="Permalink to &quot;-manifest _path_&quot;">​</a></h3><p>提供一個清單附加檔案。</p><h3 id="module-name-name-native" tabindex="-1">-module-name <em>name</em> (Native) <a class="header-anchor" href="#module-name-name-native" aria-label="Permalink to &quot;-module-name _name_ (Native)&quot;">​</a></h3><p>指定編譯模組的名稱。此選項也可用於指定匯出到 Objective-C 的宣告的名稱字首：<a href="/zh-Hant/kotlin/native-faq#how-do-i-specify-a-custom-objective-c-prefix-name-for-my-kotlin-framework">如何為我的 Kotlin 框架指定自訂 Objective-C 字首/名稱？</a></p><h3 id="native-library-path-nl-path" tabindex="-1">-native-library <em>path</em> (-nl <em>path</em>) <a class="header-anchor" href="#native-library-path-nl-path" aria-label="Permalink to &quot;-native-library _path_ (-nl _path_)&quot;">​</a></h3><p>包含原生位元碼函式庫。</p><h3 id="no-default-libs" tabindex="-1">-no-default-libs <a class="header-anchor" href="#no-default-libs" aria-label="Permalink to &quot;-no-default-libs&quot;">​</a></h3><p>禁用使用者程式碼與編譯器分發的預建 <a href="/zh-Hant/kotlin/native-platform-libs">平台函式庫</a> 的連結。</p><h3 id="nomain" tabindex="-1">-nomain <a class="header-anchor" href="#nomain" aria-label="Permalink to &quot;-nomain&quot;">​</a></h3><p>假定 <code>main</code> 進入點由外部函式庫提供。</p><h3 id="nopack" tabindex="-1">-nopack <a class="header-anchor" href="#nopack" aria-label="Permalink to &quot;-nopack&quot;">​</a></h3><p>不要將函式庫打包成 klib 檔案。</p><h3 id="linker-option" tabindex="-1">-linker-option <a class="header-anchor" href="#linker-option" aria-label="Permalink to &quot;-linker-option&quot;">​</a></h3><p>在二進位建置期間向連結器傳遞一個引數。這可用於連結某些原生函式庫。</p><h3 id="linker-options-args" tabindex="-1">-linker-options <em>args</em> <a class="header-anchor" href="#linker-options-args" aria-label="Permalink to &quot;-linker-options _args_&quot;">​</a></h3><p>在二進位建置期間向連結器傳遞多個引數。以空白字元分隔引數。</p><h3 id="nostdlib" tabindex="-1">-nostdlib <a class="header-anchor" href="#nostdlib" aria-label="Permalink to &quot;-nostdlib&quot;">​</a></h3><p>不連結標準函式庫 (stdlib)。</p><h3 id="opt" tabindex="-1">-opt <a class="header-anchor" href="#opt" aria-label="Permalink to &quot;-opt&quot;">​</a></h3><p>啟用編譯最佳化並生成具有更好執行期效能的二進位檔。不建議將其與降低最佳化級別的 <a href="#g"><code>-g</code></a> 選項結合使用。</p><h3 id="output-name-o-name" tabindex="-1">-output <em>name</em> (-o <em>name</em>) <a class="header-anchor" href="#output-name-o-name" aria-label="Permalink to &quot;-output _name_ (-o _name_)&quot;">​</a></h3><p>設定輸出檔案的名稱。</p><h3 id="entry-name-e-name" tabindex="-1">-entry <em>name</em> (-e <em>name</em>) <a class="header-anchor" href="#entry-name-e-name" aria-label="Permalink to &quot;-entry _name_ (-e _name_)&quot;">​</a></h3><p>指定完整限定的進入點名稱。</p><h3 id="produce-output-p-output" tabindex="-1">-produce <em>output</em> (-p <em>output</em>) <a class="header-anchor" href="#produce-output-p-output" aria-label="Permalink to &quot;-produce _output_ (-p _output_)&quot;">​</a></h3><p>指定輸出檔案類型：</p><ul><li><code>program</code></li><li><code>static</code></li><li><code>dynamic</code></li><li><code>framework</code></li><li><code>library</code></li><li><code>bitcode</code></li></ul><h3 id="repo-path-r-path" tabindex="-1">-repo <em>path</em> (-r <em>path</em>) <a class="header-anchor" href="#repo-path-r-path" aria-label="Permalink to &quot;-repo _path_ (-r _path_)&quot;">​</a></h3><p>函式庫搜尋路徑。更多資訊請參閱 <a href="/zh-Hant/kotlin/native-libraries#library-search-sequence">函式庫搜尋順序</a>。</p><h3 id="target-target" tabindex="-1">-target <em>target</em> <a class="header-anchor" href="#target-target" aria-label="Permalink to &quot;-target _target_&quot;">​</a></h3><p>設定硬體目標。若要查看可用目標列表，請使用 <a href="#list-targets"><code>-list-targets</code></a> 選項。</p>',72))])}const _=l(h,[["render",p]]);export{f as __pageData,_ as default};
