import{_ as i,c as a,o as e,ag as t}from"./chunks/framework.Bksy39di.js";const o=JSON.parse('{"title":"Java互換性","description":"","frontmatter":{},"headers":[],"relativePath":"ja/coil/java_compatibility.md","filePath":"ja/coil/java_compatibility.md","lastUpdated":1753369988000}'),n={name:"ja/coil/java_compatibility.md"};function l(h,s,p,k,r,E){return e(),a("div",null,s[0]||(s[0]=[t(`<h1 id="java互換性" tabindex="-1">Java互換性 <a class="header-anchor" href="#java互換性" aria-label="Permalink to &quot;Java互換性&quot;">​</a></h1><p>CoilのAPIはKotlinファーストで設計されています。Kotlinのインラインラムダ、レシーバーパラメータ、デフォルト引数、拡張関数といったJavaでは利用できない言語機能を活用しています。</p><p>重要な点として、サスペンド関数はJavaでは実装できません。これは、カスタムの<a href="https://coil-kt.github.io/coil/api/coil-core/coil3.transform/-transformation" target="_blank" rel="noreferrer">Transformations</a>、<a href="https://coil-kt.github.io/coil/api/coil-core/coil3.size/-size-resolver" target="_blank" rel="noreferrer">Size Resolvers</a>、<a href="./image_pipeline#fetchers">Fetchers</a>、および<a href="./image_pipeline#decoders">Decoders</a>がKotlinで<strong>のみ</strong>実装可能であることを意味します。</p><p>これらの制限があるにもかかわらず、CoilのAPIのほとんどはJavaと互換性があります。シングルトン<code>ImageLoader</code>は次のようにして取得できます。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ImageLoader imageLoader </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SingletonImageLoader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context);</span></span></code></pre></div><p><code>ImageRequest</code>をエンキューする構文は、JavaとKotlinでほとんど同じです。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ImageRequest request </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ImageRequest.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://example.com/image.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">crossfade</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ImageViewTarget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(imageView))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">imageLoader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">enqueue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(request);</span></span></code></pre></div><p>::: Note <code>ImageView.load</code>はJavaからは使用できません。代わりに<code>ImageRequest.Builder</code> APIを使用してください。</p><p>::: <code>suspend</code>関数はJavaから簡単に呼び出すことはできません。したがって、画像を同期的に取得するには、Javaから次のように呼び出せる<code>ImageLoader.executeBlocking</code>拡張関数を使用する必要があります。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ImageRequest request </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ImageRequest.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://example.com/image.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1080</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1920</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Drawable drawable </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ImageLoaders.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">executeBlocking</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(imageLoader, request).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getImage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">asDrawable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context.resources);</span></span></code></pre></div><p>::: Note <code>ImageLoaders.executeBlocking</code>は、サスペンドする代わりに現在のスレッドをブロックします。これをメインスレッドから呼び出さないでください。 :::</p>`,11)]))}const g=i(n,[["render",l]]);export{o as __pageData,g as default};
