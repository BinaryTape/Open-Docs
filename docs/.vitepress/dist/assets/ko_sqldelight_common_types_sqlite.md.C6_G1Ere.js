import{_ as i,c as a,o as e,ag as t}from"./chunks/framework.Bksy39di.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ko/sqldelight/common/types_sqlite.md","filePath":"ko/sqldelight/common/types_sqlite.md","lastUpdated":1748435462000}'),l={name:"ko/sqldelight/common/types_sqlite.md"};function n(p,s,o,d,h,k){return e(),a("div",null,s[0]||(s[0]=[t(`<h2 id="sqlite-타입" tabindex="-1">SQLite 타입 <a class="header-anchor" href="#sqlite-타입" aria-label="Permalink to &quot;SQLite 타입&quot;">​</a></h2><p>SQLDelight 컬럼 정의는 일반적인 SQLite 컬럼 정의와 동일하지만, 생성된 인터페이스에서 컬럼의 Kotlin 타입을 지정하는 <a href="#custom-column-types">추가 컬럼 제약 조건</a>을 지원합니다.</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TABLE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> some_types</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  some_long </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INTEGER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,           </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- Stored as INTEGER in db, retrieved as Long</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  some_double </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">REAL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,            </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- Stored as REAL in db, retrieved as Double</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  some_string </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">TEXT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,            </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- Stored as TEXT in db, retrieved as String</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  some_blob BLOB               </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- Stored as BLOB in db, retrieved as ByteArray</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="기본-타입" tabindex="-1">기본 타입 <a class="header-anchor" href="#기본-타입" aria-label="Permalink to &quot;기본 타입&quot;">​</a></h2><p>사용자의 편의를 위해 기본 타입(primitives)을 어댑팅하는 관련 모듈입니다.</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-2YJrB" id="tab-mMPQWOl" checked><label data-title="Kotlin" for="tab-mMPQWOl">Kotlin</label><input type="radio" name="group-2YJrB" id="tab-6m0pmiT"><label data-title="Groovy" for="tab-6m0pmiT">Groovy</label></div><div class="blocks"><div class="language-kotlin vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;app.cash.sqldelight:primitive-adapters:2.1.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dependencies {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  implementation </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;app.cash.sqldelight:primitive-adapters:2.1.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></div></div><p>다음 어댑터들이 존재합니다:</p><ul><li><code>FloatColumnAdapter</code> — 암시적으로 <code>kotlin.Double</code>로 저장되는 SQL 타입에 대해 <code>kotlin.Float</code>를 가져옵니다.</li><li><code>IntColumnAdapter</code> — 암시적으로 <code>kotlin.Long</code>으로 저장되는 SQL 타입에 대해 <code>kotlin.Int</code>를 가져옵니다.</li><li><code>ShortColumnAdapter</code> — 암시적으로 <code>kotlin.Long</code>으로 저장되는 SQL 타입에 대해 <code>kotlin.Short</code>를 가져옵니다.</li></ul>`,8)]))}const E=i(l,[["render",n]]);export{c as __pageData,E as default};
