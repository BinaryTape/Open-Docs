import{_ as t}from"./chunks/lifecycle-states.Kfhu0FKr.js";import{_ as d,c as o,o as i,ag as a}from"./chunks/framework.Bksy39di.js";const m=JSON.parse('{"title":"생명 주기","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kmp/compose-lifecycle.md","filePath":"ko/kmp/compose-lifecycle.md","lastUpdated":1755516278000}'),c={name:"ko/kmp/compose-lifecycle.md"};function s(r,e,l,n,p,h){return i(),o("div",null,e[0]||(e[0]=[a(`<h1 id="생명-주기" tabindex="-1">생명 주기 <a class="header-anchor" href="#생명-주기" aria-label="Permalink to &quot;생명 주기&quot;">​</a></h1><p>컴포즈 멀티플랫폼(Compose Multiplatform) 컴포넌트의 생명 주기는 Jetpack Compose의 <a href="https://developer.android.com/topic/libraries/architecture/lifecycle" target="_blank" rel="noreferrer">생명 주기</a> 개념에서 채택되었습니다. 생명 주기를 인식하는 컴포넌트는 다른 컴포넌트의 생명 주기 상태 변화에 반응할 수 있으며, 더 잘 정리되고 종종 더 가벼우며 유지보수하기 쉬운 코드를 만드는 데 도움을 줍니다.</p><p>컴포즈 멀티플랫폼은 원본 Jetpack Compose 기능을 다른 플랫폼으로 확장하고 공통 코드에서 생명 주기 상태를 관찰하는 데 도움을 주는 공통 <code>LifecycleOwner</code> 구현체를 제공합니다.</p><p>멀티플랫폼 <code>Lifecycle</code> 구현을 사용하려면 <code>commonMain</code> 소스 세트에 다음 종속성을 추가하십시오:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        commonMain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.androidx.lifecycle:lifecycle-runtime-compose:2.9.2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>멀티플랫폼 생명 주기 구현체의 변경 사항은 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/whats-new-compose.html" target="_blank" rel="noreferrer">새로운 소식</a>에서 확인하거나 <a href="./https://github.com/JetBrains/compose-multiplatform/blob/master/CHANGELOG">컴포즈 멀티플랫폼 변경 로그</a>에서 특정 EAP 릴리스를 추적할 수 있습니다.</p></div><h2 id="상태-및-이벤트" tabindex="-1">상태 및 이벤트 <a class="header-anchor" href="#상태-및-이벤트" aria-label="Permalink to &quot;상태 및 이벤트&quot;">​</a></h2><p>생명 주기 상태 및 이벤트의 흐름(Jetpack 생명 주기와 동일합니다):</p><p><img src="`+t+'" alt="Lifecycle diagram" width="700"></p><h2 id="생명-주기-구현" tabindex="-1">생명 주기 구현 <a class="header-anchor" href="#생명-주기-구현" aria-label="Permalink to &quot;생명 주기 구현&quot;">​</a></h2><p>컴포저블은 일반적으로 고유한 생명 주기를 필요로 하지 않습니다. 공통 <code>LifecycleOwner</code>가 모든 상호 연결된 엔티티에 생명 주기를 제공합니다. 기본적으로 컴포즈 멀티플랫폼으로 생성된 모든 컴포저블은 동일한 생명 주기를 공유하며, 해당 이벤트에 구독하고, 생명 주기 상태를 참조하는 등의 작업을 수행할 수 있습니다.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>LifecycleOwner</code> 객체는 <a href="https://developer.android.com/reference/kotlin/androidx/compose/runtime/CompositionLocal" target="_blank" rel="noreferrer">CompositionLocal</a>로 제공됩니다. 특정 컴포저블 서브트리에 대해 생명 주기를 개별적으로 관리하고 싶다면, 자신만의 <code>LifecycleOwner</code> 구현체를 <a href="https://developer.android.com/topic/libraries/architecture/lifecycle#implementing-lco" target="_blank" rel="noreferrer">생성할 수 있습니다</a>.</p></div><p>멀티플랫폼 생명 주기에서 코루틴을 사용할 때, <code>Lifecycle.coroutineScope</code> 값이 <code>Dispatchers.Main.immediate</code> 값에 연결되어 있음을 기억하십시오. 이 값은 기본적으로 데스크톱 타겟에서는 사용하지 못할 수 있습니다. 컴포즈 멀티플랫폼에서 생명 주기 내의 코루틴과 플로우가 올바르게 작동하도록 하려면, 프로젝트에 <code>kotlinx-coroutines-swing</code> 종속성을 추가하십시오. 자세한 내용은 <a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-main.html" target="_blank" rel="noreferrer"><code>Dispatchers.Main</code> 문서</a>를 참조하십시오.</p><ul><li><a href="./compose-navigation-routing">탐색 및 라우팅</a>에서 탐색 컴포넌트의 생명 주기가 어떻게 작동하는지 알아보십시오.</li><li><a href="./compose-viewmodel">공통 ViewModel</a> 페이지에서 멀티플랫폼 ViewModel 구현에 대해 자세히 알아보십시오.</li></ul><h2 id="android-생명-주기를-다른-플랫폼에-매핑하기" tabindex="-1">Android 생명 주기를 다른 플랫폼에 매핑하기 <a class="header-anchor" href="#android-생명-주기를-다른-플랫폼에-매핑하기" aria-label="Permalink to &quot;Android 생명 주기를 다른 플랫폼에 매핑하기&quot;">​</a></h2><h3 id="ios" tabindex="-1">iOS <a class="header-anchor" href="#ios" aria-label="Permalink to &quot;iOS&quot;">​</a></h3><table tabindex="0"><thead><tr><th>네이티브 이벤트 및 알림</th><th>생명 주기 이벤트</th><th>생명 주기 상태 변경</th></tr></thead><tbody><tr><td><code>viewDidDisappear</code></td><td><code>ON_STOP</code></td><td><code>STARTED</code> → <code>CREATED</code></td></tr><tr><td><code>viewWillAppear</code></td><td><code>ON_START</code></td><td><code>CREATED</code> → <code>STARTED</code></td></tr><tr><td><code>willResignActive</code></td><td><code>ON_PAUSE</code></td><td><code>RESUMED</code> → <code>STARTED</code></td></tr><tr><td><code>didBecomeActive</code></td><td><code>ON_RESUME</code></td><td><code>STARTED</code> → <code>RESUMED</code></td></tr><tr><td><code>didEnterBackground</code></td><td><code>ON_STOP</code></td><td><code>STARTED</code> → <code>CREATED</code></td></tr><tr><td><code>willEnterForeground</code></td><td><code>ON_START</code></td><td><code>CREATED</code> → <code>STARTED</code></td></tr><tr><td><code>viewControllerDidLeaveWindowHierarchy</code></td><td><code>ON_DESTROY</code></td><td><code>CREATED</code> → <code>DESTROYED</code></td></tr></tbody></table><h3 id="웹" tabindex="-1">웹 <a class="header-anchor" href="#웹" aria-label="Permalink to &quot;웹&quot;">​</a></h3><p>Wasm 타겟의 제약 사항으로 인해, 생명 주기는 다음과 같습니다:</p><ul><li>애플리케이션이 항상 페이지에 연결되어 있으므로 <code>CREATED</code> 상태를 건너뜁니다.</li><li>웹 페이지는 일반적으로 사용자가 탭을 닫을 때만 종료되므로 <code>DESTROYED</code> 상태에 도달하지 않습니다.</li></ul><table tabindex="0"><thead><tr><th>네이티브 이벤트</th><th>생명 주기 이벤트</th><th>생명 주기 상태 변경</th></tr></thead><tbody><tr><td><code>blur</code></td><td><code>ON_PAUSE</code></td><td><code>RESUMED</code> → <code>STARTED</code></td></tr><tr><td><code>focus</code></td><td><code>ON_RESUME</code></td><td><code>STARTED</code> → <code>RESUMED</code></td></tr></tbody></table><h3 id="데스크톱" tabindex="-1">데스크톱 <a class="header-anchor" href="#데스크톱" aria-label="Permalink to &quot;데스크톱&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Swing 리스너 콜백</th><th>생명 주기 이벤트</th><th>생명 주기 상태 변경</th></tr></thead><tbody><tr><td><code>windowIconified</code></td><td><code>ON_STOP</code></td><td><code>STARTED</code> → <code>CREATED</code></td></tr><tr><td><code>windowDeiconified</code></td><td><code>ON_START</code></td><td><code>CREATED</code> → <code>STARTED</code></td></tr><tr><td><code>windowLostFocus</code></td><td><code>ON_PAUSE</code></td><td><code>RESUMED</code> → <code>STARTED</code></td></tr><tr><td><code>windowGainedFocus</code></td><td><code>ON_RESUME</code></td><td><code>STARTED</code> → <code>RESUMED</code></td></tr><tr><td><code>dispose</code></td><td><code>ON_DESTROY</code></td><td><code>CREATED</code> → <code>DESTROYED</code></td></tr></tbody></table>',23)]))}const u=d(c,[["render",s]]);export{m as __pageData,u as default};
