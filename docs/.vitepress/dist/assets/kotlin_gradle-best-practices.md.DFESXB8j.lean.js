import{_ as i,C as n,c as o,o as p,ag as r,G as l,j as e,a as s}from"./chunks/framework.Bksy39di.js";const _=JSON.parse('{"title":"Gradle 最佳实践","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/gradle-best-practices.md","filePath":"kotlin/gradle-best-practices.md","lastUpdated":1754307826000}'),d={name:"kotlin/gradle-best-practices.md"};function h(c,a,k,g,u,b){const t=n("TopicTitle");return p(),o("div",null,[a[0]||(a[0]=r("",15)),l(t,{id:"使用约定插件",level:"3",title:"使用约定插件",labelRef:"advanced"}),a[1]||(a[1]=r("",20)),l(t,{id:"使用模块化",level:"3",title:"使用模块化",labelRef:"advanced"}),a[2]||(a[2]=r("",4)),l(t,{id:"设置-ci-cd",level:"3",title:"设置 CI/CD",labelRef:"advanced"}),a[3]||(a[3]=e("p",null,[s("设置 CI/CD 流程可显著减少构建时间，方法是使用增量构建和缓存依赖项。添加持久化存储或使用远程构建缓存即可获得这些优势。此过程不必耗时，因为像 "),e("a",{href:"https://github.com/features/actions",target:"_blank",rel:"noreferrer"},"GitHub"),s(" 这样的某些提供商几乎提供开箱即用的此项服务。")],-1)),a[4]||(a[4]=e("p",null,[s("请查阅 Gradle 社区手册中关于 "),e("a",{href:"https://cookbook.gradle.org/ci/",target:"_blank",rel:"noreferrer"},"将 Gradle 与持续集成系统结合使用"),s(" 的内容。")],-1)),l(t,{id:"使用远程构建缓存",level:"3",title:"使用远程构建缓存",labelRef:"advanced"}),a[5]||(a[5]=e("p",null,[s("与 "),e("a",{href:"#use-local-build-cache"},"本地构建缓存"),s(" 类似，远程构建缓存通过重用其他构建的输出帮助你节省时间。它不仅可以从上次运行的构建中检索任务输出，还可以从任何人已运行过的任何早期构建中检索。")],-1)),a[6]||(a[6]=e("p",null,"远程构建缓存使用缓存服务器在构建之间共享任务输出。例如，在包含 CI/CD 服务器的开发环境中，服务器上的所有构建都会填充远程缓存。当你检出主分支以开始新特性开发时，可以立即访问增量构建。",-1)),a[7]||(a[7]=e("p",null,"请记住，缓慢的互联网连接可能会导致传输缓存结果比在本地运行任务更慢。",-1)),a[8]||(a[8]=e("p",null,[s("关于 "),e("a",{href:"https://docs.gradle.org/current/userguide/build_cache.html",target:"_blank",rel:"noreferrer"},"构建缓存"),s("，请参阅 Gradle 的文档。")],-1))])}const m=i(d,[["render",h]]);export{_ as __pageData,m as default};
