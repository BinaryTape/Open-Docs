import{_ as k}from"./chunks/accessing-sourse-sets.FkWDOZ3N.js";import{_ as r,C as p,c as d,o,ag as h,G as t,j as s,w as n,a}from"./chunks/framework.Bksy39di.js";const C=JSON.parse('{"title":"Kotlin 2.0.20 的新特性","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/whatsnew2020.md","filePath":"kotlin/whatsnew2020.md","lastUpdated":1754307826000}'),c={name:"kotlin/whatsnew2020.md"};function E(g,i,y,u,m,b){const e=p("tab"),l=p("tabs");return o(),d("div",null,[i[4]||(i[4]=h(`<h1 id="kotlin-2-0-20-的新特性" tabindex="-1">Kotlin 2.0.20 的新特性 <a class="header-anchor" href="#kotlin-2-0-20-的新特性" aria-label="Permalink to &quot;Kotlin 2.0.20 的新特性&quot;">​</a></h1><p><em><a href="/kotlin/releases#release-details">发布时间：2024 年 8 月 22 日</a></em></p><p>Kotlin 2.0.20 版本已发布！此版本包含 Kotlin 2.0.0 的性能改进和错误修复，在 2.0.0 中我们 宣布 Kotlin K2 编译器已稳定。以下是此版本的一些额外亮点：</p><ul><li><a href="#data-class-copy-function-to-have-the-same-visibility-as-constructor">数据类 copy 函数与构造函数保持相同可见性</a></li><li><a href="#static-accessors-for-source-sets-from-the-default-target-hierarchy">默认目标层级结构中源代码集的静态访问器现已在多平台项目中可用</a></li><li><a href="#concurrent-marking-in-garbage-collector">Kotlin/Native 的垃圾回收器中已支持并发标记</a></li><li><a href="#new-location-of-experimentalwasmdsl-annotation">Kotlin/Wasm 中的 <code>@ExperimentalWasmDsl</code> 注解有了新的位置</a></li><li><a href="#gradle">已添加对 Gradle 8.6–8.8 版本的支持</a></li><li><a href="#option-to-share-jvm-artifacts-between-projects-as-class-files">一个新选项允许在 Gradle 项目之间以类文件的形式共享 JVM artifact</a></li><li><a href="#compose-compiler">Compose 编译器已更新</a></li><li><a href="#support-for-uuids-in-the-common-kotlin-standard-library">公共 Kotlin 标准库中已添加对 UUID 的支持</a></li></ul><h2 id="ide-支持" tabindex="-1">IDE 支持 <a class="header-anchor" href="#ide-支持" aria-label="Permalink to &quot;IDE 支持&quot;">​</a></h2><p>支持 2.0.20 的 Kotlin 插件已捆绑在最新的 IntelliJ IDEA 和 Android Studio 中。 您无需在 IDE 中更新 Kotlin 插件。 您只需在构建脚本中将 Kotlin 版本更改为 2.0.20。</p><p>关于 <a href="/kotlin/releases#update-to-a-new-kotlin-version">更新到新版本</a> 请参见详细信息。</p><h2 id="语言" tabindex="-1">语言 <a class="header-anchor" href="#语言" aria-label="Permalink to &quot;语言&quot;">​</a></h2><p>Kotlin 2.0.20 开始引入更改，以改进数据类的一致性并替换实验性的 context receiver 特性。</p><h3 id="数据类-copy-函数与构造函数保持相同可见性" tabindex="-1">数据类 copy 函数与构造函数保持相同可见性 <a class="header-anchor" href="#数据类-copy-函数与构造函数保持相同可见性" aria-label="Permalink to &quot;数据类 copy 函数与构造函数保持相同可见性&quot;">​</a></h3><p>目前，如果您使用 <code>private</code> 构造函数创建数据类，自动生成的 <code>copy()</code> 函数不会 具有相同的可见性。这可能会在您的代码中导致问题。在未来的 Kotlin 版本中，我们将引入 <code>copy()</code> 函数的默认可见性与构造函数相同的行为。此更改将 逐步引入，以帮助您尽可能顺利地迁移代码。</p><p>我们的迁移计划从 Kotlin 2.0.20 开始，它会在您的代码中发出警告，指出可见性将在 未来发生变化。例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Triggers a warning in 2.0.20</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PositiveInteger</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> private</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> number: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    companion</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(number: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PositiveInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (number </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PositiveInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(number) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> positiveNumber </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PositiveInteger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) ?: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Triggers a warning in 2.0.20</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> negativeNumber </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> positiveNumber.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">copy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(number </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Warning: Non-public primary constructor is exposed via the generated &#39;copy()&#39; method of the &#39;data&#39; class.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // The generated &#39;copy()&#39; will change its visibility in future releases.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>关于我们迁移计划的最新信息，请参见 <a href="https://youtrack.jetbrains.com/issue/KT-11914" target="_blank" rel="noreferrer">YouTrack</a> 中的相应问题。</p><p>为了让您对此行为有更多控制，在 Kotlin 2.0.20 中我们引入了两个注解：</p><ul><li><code>@ConsistentCopyVisibility</code>：用于现在选择此行为，以便在后续版本中将其设为默认值。</li><li><code>@ExposedCopyVisibility</code>：用于选择退出此行为并抑制声明站点的警告。 请注意，即使有此注解，当调用 <code>copy()</code> 函数时，编译器仍会报告警告。</li></ul><p>如果您想在 2.0.20 中为整个模块而非单个类选择启用新行为， 您可以使用 <code>-Xconsistent-data-class-copy-visibility</code> 编译器选项。 此选项的效果与向模块中的所有数据类添加 <code>@ConsistentCopyVisibility</code> 注解相同。</p><h3 id="context-receiver-逐步替换为-context-parameter" tabindex="-1">context receiver 逐步替换为 context parameter <a class="header-anchor" href="#context-receiver-逐步替换为-context-parameter" aria-label="Permalink to &quot;context receiver 逐步替换为 context parameter&quot;">​</a></h3><p>在 Kotlin 1.6.20 中，我们引入了 <a href="/kotlin/whatsnew1620#prototype-of-context-receivers-for-kotlin-jvm">context receiver</a> 作为一项 <a href="/kotlin/components-stability#stability-levels-explained">实验性</a> 特性。在听取社区反馈后，我们决定 不继续采用此方法，并将采取不同的方向。</p><p>在未来的 Kotlin 版本中，context receiver 将被 context parameter 替换。Context parameter 仍处于 设计阶段，您可以在 <a href="https://github.com/Kotlin/KEEP/blob/context-parameters/proposals/context-parameters.md" target="_blank" rel="noreferrer">KEEP</a> 中找到该提案。</p><p>由于 context parameter 的实现需要对编译器进行重大更改，我们决定不同时支持 context receiver 和 context parameter。这一决定大大简化了实现并最大程度地减少了 不稳定行为的风险。</p><p>我们理解 context receiver 已被大量开发者使用。因此，我们将开始 逐步移除对 context receiver 的支持。我们的迁移计划从 Kotlin 2.0.20 开始，在使用 <code>-Xcontext-receivers</code> 编译器选项时，您的代码中会发出有关使用 context receiver 的警告。例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyContext</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MyContext)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Warning: Experimental context receivers are deprecated and will be superseded by context parameters. </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Please don&#39;t use context receivers. You can either pass parameters explicitly or use members with extensions.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> someFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>此警告将在未来的 Kotlin 版本中变为错误。</p><p>如果您在代码中使用 context receiver，我们建议您将代码迁移为使用以下任一方式：</p><ul><li><p>显式形参（Explicit parameters）。</p><table><tr><td>之前</td><td>之后</td></tr><tr><td><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ContextReceiverType)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> someFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    contextReceiverMember</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></td><td><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> someFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(explicitContext: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ContextReceiverType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    explicitContext.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">contextReceiverMember</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></td></tr></table></li><li><p>扩展成员函数（如果可能）。</p><table><tr><td>之前</td><td>之后</td></tr><tr><td><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ContextReceiverType)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> contextReceiverMember</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TODO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ContextReceiverType)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> someFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    contextReceiverMember</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></td><td><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ContextReceiverType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> contextReceiverMember</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TODO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ContextReceiverType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">someFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    contextReceiverMember</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></td></tr></table></li></ul><p>或者，您可以等到编译器支持 context parameter 的 Kotlin 版本。请注意， context parameter 最初将作为一项实验性特性引入。</p><h2 id="kotlin-multiplatform" tabindex="-1">Kotlin Multiplatform <a class="header-anchor" href="#kotlin-multiplatform" aria-label="Permalink to &quot;Kotlin Multiplatform&quot;">​</a></h2><p>Kotlin 2.0.20 改进了多平台项目中的源代码集管理，并由于 Gradle 的最新更改，弃用了与某些 Gradle Java 插件的兼容性。</p><h3 id="默认目标层级结构中源代码集的静态访问器" tabindex="-1">默认目标层级结构中源代码集的静态访问器 <a class="header-anchor" href="#默认目标层级结构中源代码集的静态访问器" aria-label="Permalink to &quot;默认目标层级结构中源代码集的静态访问器&quot;">​</a></h3><p>自 Kotlin 1.9.20 起，<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-hierarchy.html#default-hierarchy-template" target="_blank" rel="noreferrer">默认层级结构模板</a> 会自动应用于所有 Kotlin Multiplatform 项目。 对于默认层级结构模板中的所有源代码集，Kotlin Gradle 插件提供了类型安全的访问器。 这样，您最终可以访问所有指定目标的源代码集，而无需使用 <code>by getting</code> 或 <code>by creating</code> 构造。</p><p>Kotlin 2.0.20 旨在进一步改善您的 IDE 体验。它现在在 <code>sourceSets {}</code> 代码块中为默认层级结构模板中的所有源代码集提供了静态访问器。 我们相信此更改将使按名称访问源代码集更容易且更可预测。</p><p>每个此类源代码集现在都有详细的 KDoc 注释，其中包含示例和诊断消息，并在您尝试 在未首先声明相应目标的情况下访问源代码集时发出警告：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    linuxX64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    linuxArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    mingwX64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        commonMain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">languageSettings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            progressiveMode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        jvmMain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        linuxX64Main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        linuxArm64Main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Warning: accessing source set without registering the target</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        iosX64Main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><img src="`+k+`" alt="Accessing the source sets by name" width="700"></p><p>关于 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-hierarchy.html" target="_blank" rel="noreferrer">Kotlin Multiplatform 中的层级项目结构</a> 请了解更多信息。</p><h3 id="弃用-kotlin-multiplatform-gradle-插件与-gradle-java-插件的兼容性" tabindex="-1">弃用 Kotlin Multiplatform Gradle 插件与 Gradle Java 插件的兼容性 <a class="header-anchor" href="#弃用-kotlin-multiplatform-gradle-插件与-gradle-java-插件的兼容性" aria-label="Permalink to &quot;弃用 Kotlin Multiplatform Gradle 插件与 Gradle Java 插件的兼容性&quot;">​</a></h3><p>在 Kotlin 2.0.20 中，当您将 Kotlin Multiplatform Gradle 插件和 以下任何 Gradle Java 插件应用于同一项目时，我们会引入弃用警告：<a href="https://docs.gradle.org/current/userguide/java_plugin.html" target="_blank" rel="noreferrer">Java</a>、 <a href="https://docs.gradle.org/current/userguide/java_library_plugin.html" target="_blank" rel="noreferrer">Java Library</a> 和 <a href="https://docs.gradle.org/current/userguide/application_plugin.html" target="_blank" rel="noreferrer">Application</a>。 当您的多平台项目中的另一个 Gradle 插件应用 Gradle Java 插件时，也会出现此警告。 例如，<a href="https://docs.spring.io/spring-boot/gradle-plugin/index.html" target="_blank" rel="noreferrer">Spring Boot Gradle Plugin</a> 会自动 应用 Application 插件。</p><p>我们添加此弃用警告是由于 Kotlin Multiplatform 的项目模型 与 Gradle 的 Java 生态系统插件之间存在根本性的兼容性问题。Gradle 的 Java 生态系统插件目前没有考虑到其他插件可能：</p><ul><li>也以与 Java 生态系统插件不同的方式为 JVM 目标发布或编译。</li><li>在同一项目中有两个不同的 JVM 目标，例如 JVM 和 Android。</li><li>具有复杂的多平台项目结构，可能包含多个非 JVM 目标。</li></ul><p>不幸的是，Gradle 目前没有提供任何 API 来解决这些问题。</p><p>我们之前在 Kotlin Multiplatform 中使用了一些变通方法来帮助集成 Java 生态系统插件。 然而，这些变通方法从未真正解决兼容性问题，并且自 Gradle 8.8 发布以来，这些变通方法 已不再可能。关于更多信息，请参见我们的 <a href="https://youtrack.jetbrains.com/issue/KT-66542/Gradle-JVM-target-with-withJava-produces-a-deprecation-warning" target="_blank" rel="noreferrer">YouTrack 问题</a>。</p><p>虽然我们尚不清楚如何确切地解决此兼容性问题，但我们致力于继续支持 您的 Kotlin Multiplatform 项目中的某种形式的 Java 源代码编译。最低限度，我们将支持 Java 源代码的编译以及在您的多平台项目中使用 Gradle 的 <a href="https://docs.gradle.org/current/javadoc/org/gradle/api/plugins/JavaBasePlugin.html" target="_blank" rel="noreferrer"><code>java-base</code></a> 插件。</p><p>在此期间，如果您在多平台项目中看到此弃用警告，我们建议您：</p><ol><li>确定您是否确实需要在项目中使用 Gradle Java 插件。如果不需要，请考虑将其删除。</li><li>检查 Gradle Java 插件是否仅用于单个任务。如果是，您可能无需 太多努力即可删除该插件。例如，如果任务使用 Gradle Java 插件来创建 Javadoc JAR 文件，您可以改为手动定义 Javadoc 任务。</li></ol><p>否则，如果您想在多平台项目中使用 Kotlin Multiplatform Gradle 插件和这些 Gradle Java 插件，我们建议您：</p><ol><li>在您的多平台项目中创建一个单独的子项目。</li><li>在单独的子项目中，应用 Gradle Java 插件。</li><li>在单独的子项目中，添加对父多平台项目的依赖项。</li></ol><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>单独的子项目<strong>不得</strong>是多平台项目，并且您只能使用它来设置对多平台项目的依赖项。</p></div><p>例如，您有一个名为 <code>my-main-project</code> 的多平台项目，并且您想 使用 <a href="https://docs.gradle.org/current/userguide/application_plugin.html" target="_blank" rel="noreferrer">Application</a> Gradle 插件来运行 JVM 应用程序。</p><p>一旦您创建了一个子项目，我们称之为 <code>subproject-A</code>，您的父项目结构应如下所示：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>.</span></span>
<span class="line"><span>├── build.gradle.kts</span></span>
<span class="line"><span>├── settings.gradle</span></span>
<span class="line"><span>├── subproject-A</span></span>
<span class="line"><span>    └── build.gradle.kts</span></span>
<span class="line"><span>    └── src</span></span>
<span class="line"><span>        └── Main.java</span></span></code></pre></div><p>在您的子项目的 <code>build.gradle.kts</code> 文件中，在 <code>plugins {}</code> 代码块中应用 Application 插件：</p>`,52)),t(l,{group:"build-script"},{default:n(()=>[t(e,{title:"Kotlin","group-key":"kotlin"},{default:n(()=>i[0]||(i[0]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"plugins"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    id"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"application"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),t(e,{title:"Groovy","group-key":"groovy"},{default:n(()=>i[1]||(i[1]=[s("div",{class:"language-groovy vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"groovy"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"plugins {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    id("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'application'"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),i[5]||(i[5]=s("p",null,[a("在您的子项目的 "),s("code",null,"build.gradle.kts"),a(" 文件中，添加对父多平台项目的依赖项：")],-1)),t(l,{group:"build-script"},{default:n(()=>[t(e,{title:"Kotlin","group-key":"kotlin"},{default:n(()=>i[2]||(i[2]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"dependencies"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    implementation"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"project"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'":my-main-project"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")) "),s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// The name of your parent multiplatform project")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),t(e,{title:"Groovy","group-key":"groovy"},{default:n(()=>i[3]||(i[3]=[s("div",{class:"language-groovy vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"groovy"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"dependencies {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    implementation project("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"':my-main-project'"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") "),s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// The name of your parent multiplatform project")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),i[6]||(i[6]=h(`<p>您的父项目现在已设置为与这两个插件协同工作。</p><h2 id="kotlin-native" tabindex="-1">Kotlin/Native <a class="header-anchor" href="#kotlin-native" aria-label="Permalink to &quot;Kotlin/Native&quot;">​</a></h2><p>Kotlin/Native 在垃圾回收器以及从 Swift/Objective-C 调用 Kotlin 挂起函数方面获得了改进。</p><h3 id="垃圾回收器中的并发标记" tabindex="-1">垃圾回收器中的并发标记 <a class="header-anchor" href="#垃圾回收器中的并发标记" aria-label="Permalink to &quot;垃圾回收器中的并发标记&quot;">​</a></h3><p>在 Kotlin 2.0.20 中，JetBrains 团队朝着提高 Kotlin/Native 运行时性能又迈进了一步。 我们为垃圾回收器 (GC) 中的并发标记添加了实验性支持。</p><p>默认情况下，当 GC 标记堆中的对象时，应用程序线程必须暂停。这极大地影响了 GC 暂停的持续时间， 这对于延迟敏感型应用程序（例如使用 Compose Multiplatform 构建的 UI 应用程序）的性能至关重要。</p><p>现在，垃圾回收的标记阶段可以与应用程序线程同时运行。 这应该会显著缩短 GC 暂停时间，并有助于提高应用程序的响应性。</p><h4 id="如何启用" tabindex="-1">如何启用 <a class="header-anchor" href="#如何启用" aria-label="Permalink to &quot;如何启用&quot;">​</a></h4><p>此特性目前为 <a href="/kotlin/components-stability#stability-levels-explained">实验性的</a>。 要启用它，请在您的 <code>gradle.properties</code> 文件中设置以下选项：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.native.binary.gc=cms</span></span></code></pre></div><p>请向我们的问题跟踪器 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a> 报告任何问题。</p><h3 id="移除对-bitcode-嵌入的支持" tabindex="-1">移除对 bitcode 嵌入的支持 <a class="header-anchor" href="#移除对-bitcode-嵌入的支持" aria-label="Permalink to &quot;移除对 bitcode 嵌入的支持&quot;">​</a></h3><p>从 Kotlin 2.0.20 开始，Kotlin/Native 编译器不再支持 bitcode 嵌入。 Bitcode 嵌入在 Xcode 14 中被弃用，并在 Xcode 15 中为所有 Apple 目标移除。</p><p>现在，用于 framework 配置的 <code>embedBitcode</code> 形参，以及 <code>-Xembed-bitcode</code> 和 <code>-Xembed-bitcode-marker</code> 命令行实参均已弃用。</p><p>如果您仍在使用早期版本的 Xcode 但想升级到 Kotlin 2.0.20， 请在您的 Xcode 项目中禁用 bitcode 嵌入。</p><h3 id="通过-signpost-更改-gc-性能监控" tabindex="-1">通过 signpost 更改 GC 性能监控 <a class="header-anchor" href="#通过-signpost-更改-gc-性能监控" aria-label="Permalink to &quot;通过 signpost 更改 GC 性能监控&quot;">​</a></h3><p>Kotlin 2.0.0 使得通过 Xcode Instruments 监控 Kotlin/Native 垃圾回收器 (GC) 的性能成为可能。 Instruments 包含 signposts 工具，可以显示 GC 暂停作为事件。 这在检查 iOS 应用中与 GC 相关的冻结时非常方便。</p><p>此特性默认启用，但不幸的是， 有时当应用程序与 Xcode Instruments 同时运行时会导致崩溃。 从 Kotlin 2.0.20 开始，它需要使用以下编译器选项显式选择启用：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>-Xbinary=enableSafepointSignposts=true</span></span></code></pre></div><p>关于 GC 性能分析，请在 <a href="/kotlin/native-memory-manager#monitor-gc-performance">文档</a> 中了解更多信息。</p><h3 id="能够在非主线程上从-swift-objective-c-调用-kotlin-挂起函数" tabindex="-1">能够在非主线程上从 Swift/Objective-C 调用 Kotlin 挂起函数 <a class="header-anchor" href="#能够在非主线程上从-swift-objective-c-调用-kotlin-挂起函数" aria-label="Permalink to &quot;能够在非主线程上从 Swift/Objective-C 调用 Kotlin 挂起函数&quot;">​</a></h3><p>以前，Kotlin/Native 默认有限制，将从 Swift 和 Objective-C 调用 Kotlin 挂起函数的能力限制在主线程。Kotlin 2.0.20 解除了这一限制， 允许您在任何线程上从 Swift/Objective-C 运行 Kotlin <code>suspend</code> 函数。</p><p>如果您之前已使用 <code>kotlin.native.binary.objcExportSuspendFunctionLaunchThreadRestriction=none</code> 二进制选项切换了非主线程的默认行为，您现在可以从 <code>gradle.properties</code> 文件中将其删除。</p><h2 id="kotlin-wasm" tabindex="-1">Kotlin/Wasm <a class="header-anchor" href="#kotlin-wasm" aria-label="Permalink to &quot;Kotlin/Wasm&quot;">​</a></h2><p>在 Kotlin 2.0.20 中，Kotlin/Wasm 继续向命名导出迁移，并重新定位了 <code>@ExperimentalWasmDsl</code> 注解。</p><h3 id="默认导出用法中的错误" tabindex="-1">默认导出用法中的错误 <a class="header-anchor" href="#默认导出用法中的错误" aria-label="Permalink to &quot;默认导出用法中的错误&quot;">​</a></h3><p>作为向命名导出迁移的一部分，在使用 JavaScript 中的 Kotlin/Wasm 导出的默认导入时，之前会向控制台打印警告消息。</p><p>为了完全支持命名导出，此警告现已升级为错误。如果您使用默认导入，您会遇到 以下错误消息：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Do not use default import. Use the corresponding named import instead.</span></span></code></pre></div><p>此更改是向命名导出迁移的弃用周期的一部分。以下是您在每个阶段可以期待的内容：</p><ul><li><strong>在 2.0.0 版本中</strong>：控制台会打印警告消息，解释通过默认导出实体已被弃用。</li><li><strong>在 2.0.20 版本中</strong>：发生错误，要求使用相应的命名导入。</li><li><strong>在 2.1.0 版本中</strong>：默认导入的使用被完全移除。</li></ul><h3 id="experimentalwasmdsl-注解的新位置" tabindex="-1">ExperimentalWasmDsl 注解的新位置 <a class="header-anchor" href="#experimentalwasmdsl-注解的新位置" aria-label="Permalink to &quot;ExperimentalWasmDsl 注解的新位置&quot;">​</a></h3><p>以前，WebAssembly (Wasm) 特性的 <code>@ExperimentalWasmDsl</code> 注解位于 Kotlin Gradle 插件中的此位置：</p><div class="language-Kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.jetbrains.kotlin.gradle.targets.js.dsl.ExperimentalWasmDsl</span></span></code></pre></div><p>在 2.0.20 中，<code>@ExperimentalWasmDsl</code> 注解已重新定位到：</p><div class="language-Kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.jetbrains.kotlin.gradle.ExperimentalWasmDsl</span></span></code></pre></div><p>旧位置现已弃用，并可能导致因未解析的引用而构建失败。</p><p>为了反映 <code>@ExperimentalWasmDsl</code> 注解的新位置，请更新您的 Gradle 构建脚本中的导入语句。 为新的 <code>@ExperimentalWasmDsl</code> 位置使用显式导入：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.kotlin.gradle.ExperimentalWasmDsl</span></span></code></pre></div><p>或者，从旧包中删除此星号导入语句：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.kotlin.gradle.targets.js.dsl.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span></code></pre></div><h2 id="kotlin-js" tabindex="-1">Kotlin/JS <a class="header-anchor" href="#kotlin-js" aria-label="Permalink to &quot;Kotlin/JS&quot;">​</a></h2><p>Kotlin/JS 引入了一些实验性特性，以支持 JavaScript 中的静态成员以及从 JavaScript 创建 Kotlin 集合。</p><h3 id="支持在-javascript-中使用-kotlin-静态成员" tabindex="-1">支持在 JavaScript 中使用 Kotlin 静态成员 <a class="header-anchor" href="#支持在-javascript-中使用-kotlin-静态成员" aria-label="Permalink to &quot;支持在 JavaScript 中使用 Kotlin 静态成员&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>此特性为 <a href="/kotlin/components-stability#stability-levels-explained">实验性的</a>。它可能随时被移除或更改。 仅用于求值目的。我们非常感谢您在 <a href="https://youtrack.jetbrains.com/issue/KT-18891/JS-provide-a-way-to-declare-static-members-JsStatic" target="_blank" rel="noreferrer">YouTrack</a> 上提供的反馈。</p></div><p>从 Kotlin 2.0.20 开始，您可以使用 <code>@JsStatic</code> 注解。它的工作方式与 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.jvm/-jvm-static/" target="_blank" rel="noreferrer">@JvmStatic</a> 类似， 并指示编译器为目标声明生成额外的静态方法。这有助于您直接在 JavaScript 中使用 Kotlin 代码中的静态成员。</p><p>您可以将 <code>@JsStatic</code> 注解用于命名对象以及类和接口中声明的伴生对象中的函数。 编译器会同时生成对象的静态方法和对象本身的实例方法。例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> C</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    companion</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        @JsStatic</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> callStatic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> callNonStatic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>现在，<code>callStatic()</code> 在 JavaScript 中是静态的，而 <code>callNonStatic()</code> 则不是：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">C</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">callStatic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();              </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Works, accessing the static function</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">C</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">callNonStatic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();           </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Error, not a static function in the generated JavaScript</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">C</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.Companion.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">callStatic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Instance method remains</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">C</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.Companion.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">callNonStatic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// The only way it works</span></span></code></pre></div><p>也可以将 <code>@JsStatic</code> 注解应用于对象或伴生对象的属性，使其 getter 和 setter 方法成为该对象或包含伴生对象的类中的静态成员。</p><h3 id="能够从-javascript-创建-kotlin-集合" tabindex="-1">能够从 JavaScript 创建 Kotlin 集合 <a class="header-anchor" href="#能够从-javascript-创建-kotlin-集合" aria-label="Permalink to &quot;能够从 JavaScript 创建 Kotlin 集合&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>此特性为 <a href="/kotlin/components-stability#stability-levels-explained">实验性的</a>。它可能随时被移除或更改。 仅用于求值目的。我们非常感谢您在 <a href="https://youtrack.jetbrains.com/issue/KT-69133/Kotlin-JS-Add-support-for-collection-instantiation-in-JavaScript" target="_blank" rel="noreferrer">YouTrack</a> 上提供的反馈。</p></div><p>Kotlin 2.0.0 引入了将 Kotlin 集合导出到 JavaScript（和 TypeScript）的能力。现在，JetBrains 团队 正在采取另一步骤来改进集合互操作。从 Kotlin 2.0.20 开始，可以 直接从 JavaScript/TypeScript 端创建 Kotlin 集合。</p><p>您可以从 JavaScript 创建 Kotlin 集合并将它们作为实参传递给导出的构造函数或函数。 一旦您在导出的声明中提及集合，Kotlin 就会为该集合生成一个工厂，该工厂在 JavaScript/TypeScript 中可用。</p><p>请看以下导出的函数：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Kotlin</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JsExport</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> consumeMutableMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(map: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MutableMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;)</span></span></code></pre></div><p>由于提到了 <code>MutableMap</code> 集合，Kotlin 会生成一个对象，其中包含一个可从 JavaScript/TypeScript 访问的工厂方法。 此工厂方法随后会从 JavaScript <code>Map</code> 创建一个 <code>MutableMap</code>：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// JavaScript</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { consumeMutableMap } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;an-awesome-kotlin-module&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { KtMutableMap } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;an-awesome-kotlin-module/kotlin-kotlin-stdlib&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">consumeMutableMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    KtMutableMap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fromJsMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;First&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Second&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]]))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>此特性适用于 <code>Set</code>、<code>Map</code> 和 <code>List</code> Kotlin 集合类型及其可变对应项。</p><h2 id="gradle" tabindex="-1">Gradle <a class="header-anchor" href="#gradle" aria-label="Permalink to &quot;Gradle&quot;">​</a></h2><p>Kotlin 2.0.20 完全兼容 Gradle 6.8.3 到 8.6。Gradle 8.7 和 8.8 也受支持，只有一个 例外：如果您使用 Kotlin Multiplatform Gradle 插件，您可能会在调用 JVM 目标中的 <code>withJava()</code> 函数的多平台项目中看到弃用警告。我们计划尽快修复此问题。</p><p>关于更多信息，请参见 <a href="https://youtrack.jetbrains.com/issue/KT-66542/Gradle-JVM-target-with-withJava-produces-a-deprecation-warning" target="_blank" rel="noreferrer">YouTrack</a> 中的问题。</p><p>您还可以使用直至最新 Gradle 版本的 Gradle 版本，但如果您这样做，请记住您可能会遇到 弃用警告或某些新的 Gradle 特性可能无法正常工作。</p><p>此版本带来了更改，例如开始弃用基于 JVM 历史文件的旧增量编译方法，以及一种在项目之间共享 JVM artifact 的新方法。</p><h3 id="弃用基于-jvm-历史文件的增量编译" tabindex="-1">弃用基于 JVM 历史文件的增量编译 <a class="header-anchor" href="#弃用基于-jvm-历史文件的增量编译" aria-label="Permalink to &quot;弃用基于 JVM 历史文件的增量编译&quot;">​</a></h3><p>在 Kotlin 2.0.20 中，基于 JVM 历史文件的增量编译方法被弃用，转而采用 自 Kotlin 1.8.20 起默认启用的新增量编译方法。</p><p>基于 JVM 历史文件的增量编译方法存在局限性， 例如不与 <a href="https://docs.gradle.org/current/userguide/build_cache.html" target="_blank" rel="noreferrer">Gradle 的构建缓存</a> 协同工作 以及不支持编译避免。 相比之下，新的增量编译方法克服了这些局限性，并且自推出以来表现良好。</p><p>鉴于新的增量编译方法已在过去两个主要 Kotlin 版本中默认使用， <code>kotlin.incremental.useClasspathSnapshot</code> Gradle 属性在 Kotlin 2.0.20 中被弃用。 因此，如果您使用它来选择退出，您将看到弃用警告。</p><h3 id="允许在项目之间以类文件的形式共享-jvm-artifact-的选项" tabindex="-1">允许在项目之间以类文件的形式共享 JVM artifact 的选项 <a class="header-anchor" href="#允许在项目之间以类文件的形式共享-jvm-artifact-的选项" aria-label="Permalink to &quot;允许在项目之间以类文件的形式共享 JVM artifact 的选项&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>此特性为 <a href="/kotlin/components-stability#stability-levels-explained">实验性的</a>。 它可能随时被移除或更改。仅用于求值目的。 我们非常感谢您在 <a href="https://youtrack.jetbrains.com/issue/KT-61861/Gradle-Kotlin-compilations-depend-on-packed-artifacts" target="_blank" rel="noreferrer">YouTrack</a> 上提供的反馈。 需要选择启用（参见下方详细信息）。</p></div><p>在 Kotlin 2.0.20 中，我们引入了一种新方法，它改变了 Kotlin/JVM 编译的输出（例如 JAR 文件） 在项目之间共享的方式。通过这种方法，Gradle 的 <code>apiElements</code> 配置现在有一个次要 变体，提供对包含编译后的 <code>.class</code> 文件的目录的访问。配置后，您的项目将在编译期间使用此 目录，而不是请求压缩的 JAR artifact。这减少了 JAR 文件 被压缩和解压缩的次数，尤其是对于增量构建。</p><p>我们的测试表明，这种新方法可以为 Linux 和 macOS 主机提供构建性能改进。 然而，在 Windows 主机上，我们发现性能下降，原因是 Windows 在处理文件时的 I/O 操作方式。</p><p>要尝试此新方法，请将以下属性添加到您的 <code>gradle.properties</code> 文件中：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.jvm.addClassesVariant=true</span></span></code></pre></div><p>默认情况下，此属性设置为 <code>false</code>，Gradle 中的 <code>apiElements</code> 变体请求压缩的 JAR artifact。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Gradle 有一个相关属性，您可以在纯 Java 项目中使用它，以便仅在编译期间公开压缩的 JAR artifact， <strong>而不是</strong>包含编译后的 <code>.class</code> 文件的目录： <code>none org.gradle.java.compile-classpath-packaging=true </code> 关于此属性及其目的的更多信息，请参见 Gradle 文档中关于 <a href="https://docs.gradle.org/current/userguide/java_library_plugin.html#sub:java_library_known_issues_windows_performance" target="_blank" rel="noreferrer">Windows 上巨型多项目构建性能显著下降</a> 的部分。</p></div><p>我们非常感谢您对此新方法的反馈。您在使用它时是否注意到任何性能改进？ 请在 <a href="https://youtrack.jetbrains.com/issue/KT-61861/Gradle-Kotlin-compilations-depend-on-packed-artifacts" target="_blank" rel="noreferrer">YouTrack</a> 中添加评论，让我们知道。</p><h3 id="kotlin-gradle-插件与-java-test-fixtures-插件的依赖行为对齐" tabindex="-1">Kotlin Gradle 插件与 java-test-fixtures 插件的依赖行为对齐 <a class="header-anchor" href="#kotlin-gradle-插件与-java-test-fixtures-插件的依赖行为对齐" aria-label="Permalink to &quot;Kotlin Gradle 插件与 java-test-fixtures 插件的依赖行为对齐&quot;">​</a></h3><p>在 Kotlin 2.0.20 之前，如果您在项目中使用 <a href="https://docs.gradle.org/current/userguide/java_testing.html#sec:java_test_fixtures" target="_blank" rel="noreferrer"><code>java-test-fixtures</code> 插件</a>， Gradle 和 Kotlin Gradle 插件在依赖项传播方面存在差异。</p><p>Kotlin Gradle 插件传播依赖项：</p><ul><li>从 <code>java-test-fixtures</code> 插件的 <code>implementation</code> 和 <code>api</code> 依赖类型到 <code>test</code> 源代码集编译类路径。</li><li>从主源代码集的 <code>implementation</code> 和 <code>api</code> 依赖类型到 <code>java-test-fixtures</code> 插件的源代码集编译类路径。</li></ul><p>然而，Gradle 只传播 <code>api</code> 依赖类型中的依赖项。</p><p>这种行为差异导致某些项目在类路径中多次找到资源文件。</p><p>从 Kotlin 2.0.20 开始，Kotlin Gradle 插件的行为与 Gradle 的 <code>java-test-fixtures</code> 插件保持一致，因此 此问题不再发生于此插件或其他 Gradle 插件。</p><p>由于此更改，<code>test</code> 和 <code>testFixtures</code> 源代码集中的某些依赖项可能不再可访问。 如果发生这种情况，请将依赖声明类型从 <code>implementation</code> 更改为 <code>api</code>，或者 在受影响的源代码集上添加新的依赖声明。</p><h3 id="为编译任务缺少-artifact-输入的极少数情况添加任务依赖项" tabindex="-1">为编译任务缺少 artifact 输入的极少数情况添加任务依赖项 <a class="header-anchor" href="#为编译任务缺少-artifact-输入的极少数情况添加任务依赖项" aria-label="Permalink to &quot;为编译任务缺少 artifact 输入的极少数情况添加任务依赖项&quot;">​</a></h3><p>在 2.0.20 之前，我们发现有些情况下，编译任务缺少对其某个 artifact 输入的任务依赖项。 这意味着依赖编译任务的结果不稳定，因为有时 artifact 及时生成了，但有时没有。</p><p>为了解决此问题，Kotlin Gradle 插件现在会自动在这些情况下添加所需的任务依赖项。</p><p>在极少数情况下，我们发现这种新行为可能导致循环依赖错误。 例如，如果您有多个编译，其中一个编译可以看到另一个编译的所有内部声明， 并且生成的 artifact 依赖于两个编译任务的输出，您可能会看到如下错误：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>FAILURE: Build failed with an exception.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>What went wrong:</span></span>
<span class="line"><span>Circular dependency between the following tasks:</span></span>
<span class="line"><span>:lib:compileKotlinJvm</span></span>
<span class="line"><span>--- :lib:jvmJar</span></span>
<span class="line"><span>     \\--- :lib:compileKotlinJvm (*)</span></span>
<span class="line"><span>(*) - details omitted (listed previously)</span></span></code></pre></div><p>为了解决此循环依赖错误，我们添加了一个 Gradle 属性：<code>archivesTaskOutputAsFriendModule</code>。</p><p>默认情况下，此属性设置为 <code>true</code> 以跟踪任务依赖项。要禁用在编译任务中使用 artifact， 从而不需要任务依赖项，请在您的 <code>gradle.properties</code> 文件中添加以下内容：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kotlin.build.archivesTaskOutputAsFriendModule</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span></code></pre></div><p>关于更多信息，请参见 <a href="https://youtrack.jetbrains.com/issue/KT-69330" target="_blank" rel="noreferrer">YouTrack</a> 中的问题。</p><h2 id="compose-编译器" tabindex="-1">Compose 编译器 <a class="header-anchor" href="#compose-编译器" aria-label="Permalink to &quot;Compose 编译器&quot;">​</a></h2><p>在 Kotlin 2.0.20 中，Compose 编译器获得了一些改进。</p><h3 id="修复-2-0-0-中引入的不必要-recomposition-问题" tabindex="-1">修复 2.0.0 中引入的不必要 recomposition 问题 <a class="header-anchor" href="#修复-2-0-0-中引入的不必要-recomposition-问题" aria-label="Permalink to &quot;修复 2.0.0 中引入的不必要 recomposition 问题&quot;">​</a></h3><p>Compose 编译器 2.0.0 存在一个问题，它有时会错误地推断非 JVM 目标的多平台项目中的类型稳定性。 这可能导致不必要（甚至无限）的 recomposition。我们强烈建议将为 Kotlin 2.0.0 构建的 Compose 应用程序 更新到 2.0.10 或更高版本。</p><p>如果您的应用程序使用 Compose 编译器 2.0.10 或更高版本构建，但使用了 2.0.0 版本构建的依赖项， 这些旧依赖项仍可能导致 recomposition 问题。 为防止这种情况，请将您的依赖项更新到与您的应用程序使用相同 Compose 编译器构建的版本。</p><h3 id="配置编译器选项的新方法" tabindex="-1">配置编译器选项的新方法 <a class="header-anchor" href="#配置编译器选项的新方法" aria-label="Permalink to &quot;配置编译器选项的新方法&quot;">​</a></h3><p>我们引入了一种新的选项配置机制，以避免顶层形参的频繁更改。 Compose 编译器团队很难通过为 <code>composeCompiler {}</code> 代码块创建或删除顶层条目来测试功能。 因此，强跳过模式和非跳过组优化等选项现在通过 <code>featureFlags</code> 属性启用。 此属性将用于测试新的 Compose 编译器选项，这些选项最终将成为默认选项。</p><p>此更改也已应用于 Compose 编译器 Gradle 插件。要继续配置特性标记， 请使用以下语法（此代码将翻转所有默认值）：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">composeCompiler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    featureFlags </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ComposeFeatureFlag.IntrinsicRemember.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">disabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ComposeFeatureFlag.OptimizeNonSkippingGroups,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ComposeFeatureFlag.StrongSkipping.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">disabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>或者，如果您直接配置 Compose 编译器，请使用以下语法：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>-P plugin:androidx.compose.compiler.plugins.kotlin:featureFlag=IntrinsicRemember</span></span></code></pre></div><p><code>enableIntrinsicRemember</code>、<code>enableNonSkippingGroupOptimization</code> 和 <code>enableStrongSkippingMode</code> 属性因此已被弃用。</p><p>我们非常感谢您对这种新方法的任何反馈，请在 <a href="https://youtrack.jetbrains.com/issue/KT-68651/Compose-provide-a-single-place-in-extension-to-configure-all-compose-flags" target="_blank" rel="noreferrer">YouTrack</a> 中提出。</p><h3 id="强跳过模式默认启用" tabindex="-1">强跳过模式默认启用 <a class="header-anchor" href="#强跳过模式默认启用" aria-label="Permalink to &quot;强跳过模式默认启用&quot;">​</a></h3><p>Compose 编译器的强跳过模式现在默认启用。</p><p>强跳过模式是 Compose 编译器的一种配置选项，它改变了哪些可组合项可以被跳过的规则。 启用强跳过模式后，带有不稳定形参的可组合项现在也可以被跳过。 强跳过模式还会自动记住可组合函数中使用的 lambda 表达式， 因此您不再需要将 lambda 表达式包装在 <code>remember</code> 中以避免 recomposition。</p><p>关于更多细节，请参见 <a href="https://developer.android.com/develop/ui/compose/performance/stability/strongskipping" target="_blank" rel="noreferrer">强跳过模式文档</a>。</p><h3 id="组合跟踪标记默认启用" tabindex="-1">组合跟踪标记默认启用 <a class="header-anchor" href="#组合跟踪标记默认启用" aria-label="Permalink to &quot;组合跟踪标记默认启用&quot;">​</a></h3><p><code>includeTraceMarkers</code> 选项现在在 Compose 编译器 Gradle 插件中默认设置为 <code>true</code>，以匹配 编译器插件中的默认值。这允许您在 Android Studio 系统跟踪分析器中查看可组合函数。关于 组合跟踪的详细信息，请参见这篇 <a href="https://medium.com/androiddevelopers/jetpack-compose-composition-tracing-9ec2b3aea535" target="_blank" rel="noreferrer">Android Developers 博客文章</a>。</p><h3 id="非跳过组优化" tabindex="-1">非跳过组优化 <a class="header-anchor" href="#非跳过组优化" aria-label="Permalink to &quot;非跳过组优化&quot;">​</a></h3><p>此版本包含一个新的编译器选项：启用后，不可跳过且不可重启的可组合函数将不再在可组合项的主体周围生成一个组。 这会导致更少的内存分配，从而提高性能。此选项是实验性的，默认禁用，但可以通过特性标记 <code>OptimizeNonSkippingGroups</code> 启用，如 <a href="#new-way-to-configure-compiler-options">上文</a> 所示。</p><p>此特性标记现在已准备好进行更广泛的测试。启用该特性时发现的任何问题都可以在 <a href="https://goo.gle/compose-feedback" target="_blank" rel="noreferrer">Google 问题跟踪器</a> 上提交。</p><h3 id="支持抽象可组合函数中的默认形参" tabindex="-1">支持抽象可组合函数中的默认形参 <a class="header-anchor" href="#支持抽象可组合函数中的默认形参" aria-label="Permalink to &quot;支持抽象可组合函数中的默认形参&quot;">​</a></h3><p>您现在可以为抽象可组合函数添加默认形参。</p><p>以前，Compose 编译器在尝试这样做时会报告错误，即使这是有效的 Kotlin 代码。 我们现在已经在 Compose 编译器中添加了对此的支持，并且限制已被移除。 这对于包含默认 <code>Modifier</code> 值特别有用：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Composables</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @Composable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Composable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(modifier: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Modifier</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Modifier)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>开放可组合函数中的默认形参在 2.0.20 中仍然受限制。此限制将在 未来版本中解决。</p><h2 id="标准库" tabindex="-1">标准库 <a class="header-anchor" href="#标准库" aria-label="Permalink to &quot;标准库&quot;">​</a></h2><p>标准库现在支持全局唯一标识符作为实验性特性，并包含 Base64 解码的一些更改。</p><h3 id="公共-kotlin-标准库中对-uuid-的支持" tabindex="-1">公共 Kotlin 标准库中对 UUID 的支持 <a class="header-anchor" href="#公共-kotlin-标准库中对-uuid-的支持" aria-label="Permalink to &quot;公共 Kotlin 标准库中对 UUID 的支持&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>此特性为 <a href="/kotlin/components-stability#stability-levels-explained">实验性的</a>。 要选择启用，请使用 <code>@ExperimentalUuidApi</code> 注解或编译器选项 <code>-opt-in=kotlin.uuid.ExperimentalUuidApi</code>。</p></div><p>Kotlin 2.0.20 在公共 Kotlin 标准库中引入了一个表示 <a href="https://en.wikipedia.org/wiki/Universally_unique_identifier" target="_blank" rel="noreferrer">UUID（全局唯一标识符）</a> 的类， 以解决唯一标识项的挑战。</p><p>此外，此特性还提供了用于以下 UUID 相关操作的 API：</p><ul><li>生成 UUID。</li><li>从其字符串表示中解析 UUID 并将其格式化为字符串。</li><li>从指定的 128 位值创建 UUID。</li><li>访问 UUID 的 128 位。</li></ul><p>以下代码示例演示了这些操作：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Constructs a byte array for UUID creation</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> byteArray </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> byteArrayOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    0x55</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x0E</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x84</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toByte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x00</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0xE2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toByte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x9B</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toByte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x41</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0xD4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toByte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    0xA7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toByte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x44</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x66</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x55</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x44</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x00</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x00</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uuid1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Uuid.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fromByteArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(byteArray)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uuid2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Uuid.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fromULongs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x550E8400E29B41D4u</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">L, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0xA716446655440000u</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">L)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uuid3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Uuid.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;550e8400-e29b-41d4-a716-446655440000&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(uuid1)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 550e8400-e29b-41d4-a716-446655440000</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(uuid1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uuid2)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(uuid2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uuid3)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Accesses UUID bits</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> version </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uuid1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toLongs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { mostSignificantBits, _ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ((mostSignificantBits shr </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) and </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0xF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(version)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 4</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Generates a random UUID</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> randomUuid </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Uuid.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">random</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(uuid1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> randomUuid)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// false</span></span></code></pre></div><p>为了保持与使用 <code>java.util.UUID</code> 的 API 的兼容性，Kotlin/JVM 中有两个扩展函数用于在 <code>java.util.UUID</code> 和 <code>kotlin.uuid.Uuid</code> 之间进行转换：<code>.toJavaUuid()</code> 和 <code>.toKotlinUuid()</code>。例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> kotlinUuid </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Uuid.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parseHex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;550e8400e29b41d4a716446655440000&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Converts Kotlin UUID to java.util.UUID</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> javaUuid </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> kotlinUuid.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toJavaUuid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> javaUuid </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.util.UUID.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fromString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;550e8400-e29b-41d4-a716-446655440000&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Converts Java UUID to kotlin.uuid.Uuid</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> kotlinUuid </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> javaUuid.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toKotlinUuid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>此特性和所提供的 API 通过允许在多个平台之间共享代码来简化多平台软件开发。 UUID 在生成唯一标识符困难的环境中也很有用。</p><p>涉及 UUID 的一些用例包括：</p><ul><li>为数据库记录分配唯一 ID。</li><li>生成 Web 会话标识符。</li><li>任何需要唯一标识或跟踪的场景。</li></ul><h3 id="hexformat-中对-minlength-的支持" tabindex="-1">HexFormat 中对 minLength 的支持 <a class="header-anchor" href="#hexformat-中对-minlength-的支持" aria-label="Permalink to &quot;HexFormat 中对 minLength 的支持&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/-hex-format/" target="_blank" rel="noreferrer"><code>HexFormat</code> 类</a> 及其属性为 <a href="/kotlin/components-stability#stability-levels-explained">实验性的</a>。 要选择启用，请使用 <code>@OptIn(ExperimentalStdlibApi::class)</code> 注解或编译器 选项 <code>-opt-in=kotlin.ExperimentalStdlibApi</code>。</p></div><p>Kotlin 2.0.20 向 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/-hex-format/-number-hex-format/" target="_blank" rel="noreferrer"><code>NumberHexFormat</code> 类</a> 添加了一个新的 <code>minLength</code> 属性， 通过 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/-hex-format/number.html" target="_blank" rel="noreferrer"><code>HexFormat.number</code></a> 访问。 此属性允许您指定数值的十六进制表示中的最小位数，从而能够用零进行填充以满足所需的长度。 此外，可以使用 <code>removeLeadingZeros</code> 属性去除前导零：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">93</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toHexString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HexFormat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        number.minLength </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        number.removeLeadingZeros </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // &quot;005d&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>minLength</code> 属性不影响解析。然而，解析现在允许十六进制字符串的位数多于类型宽度， 如果多余的前导位数是零的话。</p><h3 id="base64-解码器行为的更改" tabindex="-1">Base64 解码器行为的更改 <a class="header-anchor" href="#base64-解码器行为的更改" aria-label="Permalink to &quot;Base64 解码器行为的更改&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.io.encoding/-base64/" target="_blank" rel="noreferrer"><code>Base64</code> 类</a> 及其 相关特性为 <a href="/kotlin/components-stability#stability-levels-explained">实验性的</a>。 要选择启用，请使用 <code>@OptIn(ExperimentalEncodingApi::class)</code> 注解或编译器选项 <code>-opt-in=kotlin.io.encoding.ExperimentalEncodingApi</code>。</p></div><p>Kotlin 2.0.20 中对 Base64 解码器的行为进行了两项更改：</p><ul><li><a href="#the-base64-decoder-now-requires-padding">Base64 解码器现在要求填充</a></li><li><a href="#withpadding-function-for-padding-configuration">已添加 <code>withPadding</code> 函数用于填充配置</a></li></ul><h4 id="base64-解码器现在要求填充" tabindex="-1">Base64 解码器现在要求填充 <a class="header-anchor" href="#base64-解码器现在要求填充" aria-label="Permalink to &quot;Base64 解码器现在要求填充&quot;">​</a></h4><p>Base64 编码器现在默认添加填充，并且解码器在解码时要求填充并禁止非零填充位。</p><h4 id="withpadding-函数用于填充配置" tabindex="-1">withPadding 函数用于填充配置 <a class="header-anchor" href="#withpadding-函数用于填充配置" aria-label="Permalink to &quot;withPadding 函数用于填充配置&quot;">​</a></h4><p>引入了一个新的 <code>.withPadding()</code> 函数，以使用户能够控制 Base64 编码和解码的填充行为：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> base64 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Base64.UrlSafe.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withPadding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Base64.PaddingOption.ABSENT_OPTIONAL)</span></span></code></pre></div><p>此函数允许创建具有不同填充选项的 <code>Base64</code> 实例：</p><table tabindex="0"><thead><tr><th><code>PaddingOption</code></th><th>编码时</th><th>解码时</th></tr></thead><tbody><tr><td><code>PRESENT</code></td><td>添加填充</td><td>要求填充</td></tr><tr><td><code>ABSENT</code></td><td>省略填充</td><td>不允许填充</td></tr><tr><td><code>PRESENT_OPTIONAL</code></td><td>添加填充</td><td>填充可选</td></tr><tr><td><code>ABSENT_OPTIONAL</code></td><td>省略填充</td><td>填充可选</td></tr></tbody></table><p>您可以创建具有不同填充选项的 <code>Base64</code> 实例，并使用它们来编码和解码数据：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.io.encoding.Base64</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.io.encoding.ExperimentalEncodingApi</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalEncodingApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Example data to encode</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;fooba&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toByteArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Creates a Base64 instance with URL-safe alphabet and PRESENT padding</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> base64Present </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Base64.UrlSafe.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withPadding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Base64.PaddingOption.PRESENT)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> encodedDataPresent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> base64Present.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">encode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Encoded data with PRESENT padding: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$encodedDataPresent</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Encoded data with PRESENT padding: Zm9vYmE=</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Creates a Base64 instance with URL-safe alphabet and ABSENT padding</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> base64Absent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Base64.UrlSafe.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withPadding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Base64.PaddingOption.ABSENT)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> encodedDataAbsent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> base64Absent.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">encode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Encoded data with ABSENT padding: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$encodedDataAbsent</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Encoded data with ABSENT padding: Zm9vYmE</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Decodes the data back</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> decodedDataPresent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> base64Present.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">decode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(encodedDataPresent)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Decoded data with PRESENT padding: \${</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(decodedDataPresent)}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Decoded data with PRESENT padding: fooba</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> decodedDataAbsent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> base64Absent.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">decode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(encodedDataAbsent)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Decoded data with ABSENT padding: \${</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(decodedDataAbsent)}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Decoded data with ABSENT padding: fooba</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="文档更新" tabindex="-1">文档更新 <a class="header-anchor" href="#文档更新" aria-label="Permalink to &quot;文档更新&quot;">​</a></h2><p>Kotlin 文档收到了一些值得注意的更改：</p><ul><li>改进的 <a href="/kotlin/standard-input">标准输入页面</a> - 了解如何使用 Java Scanner 和 <code>readln()</code>。</li><li>改进的 <a href="/kotlin/k2-compiler-migration-guide">K2 编译器迁移指南</a> - 了解性能改进、与 Kotlin 库的兼容性以及如何处理自定义编译器插件。</li><li>改进的 <a href="/kotlin/exceptions">异常页面</a> - 了解异常以及如何抛出和捕获它们。</li><li>改进的 <a href="/kotlin/jvm-test-using-junit">在 JVM 中使用 JUnit 测试代码 - 教程</a> - 了解如何使用 JUnit 创建测试。</li><li>改进的 <a href="/kotlin/native-objc-interop">与 Swift/Objective-C 互操作页面</a> - 了解如何在 Swift/Objective-C 代码中使用 Kotlin 声明以及如何在 Kotlin 代码中使用 Objective-C 声明。</li><li>改进的 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-spm-export.html" target="_blank" rel="noreferrer">Swift 包导出设置页面</a> - 了解如何设置可由 Swift 包管理器依赖项使用的 Kotlin/Native 输出。</li></ul><h2 id="安装-kotlin-2-0-20" tabindex="-1">安装 Kotlin 2.0.20 <a class="header-anchor" href="#安装-kotlin-2-0-20" aria-label="Permalink to &quot;安装 Kotlin 2.0.20&quot;">​</a></h2><p>从 IntelliJ IDEA 2023.3 和 Android Studio Iguana (2023.2.1) Canary 15 开始，Kotlin 插件作为 捆绑插件包含在您的 IDE 中分发。这意味着您无法再从 JetBrains Marketplace 安装该插件。</p><p>要更新到新的 Kotlin 版本，请在您的构建脚本中 <a href="/kotlin/releases#update-to-a-new-kotlin-version">更改 Kotlin 版本</a> 为 2.0.20。</p>`,160))])}const f=r(c,[["render",E]]);export{C as __pageData,f as default};
