import{_ as s}from"./chunks/discover-kmp.BprQjN3-.js";import{_ as a}from"./chunks/kmp-use-cases-1.D7ku5ORt.js";import{_ as g}from"./chunks/crossplatform-native-mobile-dev-trends.Ccmj8AK3.js";import{_ as e}from"./chunks/see-kmp-in-action.2_yDT2_6.js";import{_ as l,C as i,c as d,o as p,j as r,G as h,ag as m,a as o,w as f}from"./chunks/framework.Bksy39di.js";const O=JSON.parse('{"title":"跨平台与原生应用开发：如何选择？","description":"","frontmatter":{},"headers":[],"relativePath":"kmp/native-and-cross-platform.md","filePath":"kmp/native-and-cross-platform.md","lastUpdated":1755516278000}'),c={name:"kmp/native-and-cross-platform.md"};function u(b,t,_,k,q,S){const n=i("web-summary");return p(),d("div",null,[t[1]||(t[1]=r("h1",{id:"跨平台与原生应用开发-如何选择",tabindex:"-1"},[o("跨平台与原生应用开发：如何选择？ "),r("a",{class:"header-anchor",href:"#跨平台与原生应用开发-如何选择","aria-label":'Permalink to "跨平台与原生应用开发：如何选择？"'},"​")],-1)),h(n,null,{default:f(()=>t[0]||(t[0]=[o("在选择跨平台与原生应用开发时，请考虑以下六个关键点，为您的下一个应用挑选最佳方案。")])),_:1}),t[2]||(t[2]=m('<p>2023 年，人们使用移动<strong>应用程序</strong>的时间接近 <a href="https://www.statista.com/statistics/1446684/cumulative-time-spent-on-apps/" target="_blank" rel="noreferrer">160 亿小时</a>，这表明对应用的需求持续旺盛。</p><p>移动<strong>应用</strong>开发不断演进，每年都有新的技术和<strong>框架</strong>涌现。市场上有多种解决方案，常常难以抉择。您可能听说过长期以来关于“跨平台与<strong>原生</strong>应用开发”的争论。</p><p>在<strong>构建****应用</strong>之前，有许多因素需要考虑，例如开发成本、时间以及<strong>应用</strong>的<strong>功能性</strong>。如果您想<strong>面向</strong> Android 和 iOS 两类受众，这一点尤为重要。决定哪种移动开发方法最适合您的特定<strong>项目</strong>可能会很有挑战性。为了帮助您在跨平台与<strong>原生</strong>应用开发之间做出选择，我们列出了六个必须牢记的关键事项。</p><h2 id="什么是原生移动应用开发" tabindex="-1">什么是<strong>原生</strong>移动<strong>应用</strong>开发？ <a class="header-anchor" href="#什么是原生移动应用开发" aria-label="Permalink to &quot;什么是**原生**移动**应用**开发？&quot;">​</a></h2><p><strong>原生</strong>移动开发意味着您为特定的移动操作系统（大多数情况下是 Android 或 iOS）<strong>构建****应用程序</strong>。在开发<strong>原生应用</strong>时，开发者会使用特定的编程语言和工具。<strong>例如</strong>，您可以使用 Kotlin 或 Java <strong>创建</strong>一个<strong>原生</strong> Android <strong>应用程序</strong>，或者使用 Objective-C 或 Swift <strong>构建</strong>一个适用于 iOS 的<strong>应用</strong>。</p><p>以下是核心优势和局限：</p><table tabindex="0"><thead><tr><th><strong>优势</strong></th><th><strong>局限</strong></th></tr></thead><tbody><tr><td><strong>高性能。</strong> 用于<strong>构建原生应用</strong>的核心编程语言和 API 使其快速且响应灵敏。</td><td><strong>高成本。****原生应用开发</strong>需要两支具备不同技能的独立团队，这增加了开发过程的时间和成本。</td></tr><tr><td><strong>直观的用户体验。</strong> 移动工程师使用<strong>原生 SDK</strong> 开发<strong>原生应用</strong>，这使得用户界面看起来一致。<strong>原生应用</strong>的界面旨在与特定平台良好协作，这使得它们感觉像是设备不可或缺的一部分，并提供更直观的用户体验。</td><td><strong>庞大的开发团队。</strong> 管理由多个专业人员组成的大型团队可能具有挑战性。在一个<strong>项目</strong>上工作的人越多，沟通和协作所需的精力就越大。</td></tr><tr><td><strong>访问特定设备的全部</strong>特性<strong>集。</strong> 为特定操作系统<strong>构建</strong>的<strong>原生应用</strong>可以直接访问设备的硬件，例如摄像头、麦克风和 GPS 定位支持。</td><td><strong>代码中更多错误。</strong> 更多的代码行可能会留下更多出错的空间。</td></tr><tr><td></td><td><strong>Android 和 iOS 应用逻辑不同的风险。</strong> 借助<strong>原生应用开发</strong>，为某个移动平台编写的代码无法适用于另一个平台。<strong>例如</strong>，Android 和 iOS 应用可能会因为折扣计算方式的错误而显示同一商品的<strong>不同</strong>价格。</td></tr></tbody></table><h2 id="什么是跨平台应用开发" tabindex="-1">什么是跨平台<strong>应用</strong>开发？ <a class="header-anchor" href="#什么是跨平台应用开发" aria-label="Permalink to &quot;什么是跨平台**应用**开发？&quot;">​</a></h2><p>跨平台<strong>应用</strong>开发，也称为多平台开发，是<strong>构建</strong>可兼容多个操作系统的移动<strong>应用</strong>的流程。移动工程师无需为 iOS 和 Android <strong>分别创建</strong>单独的<strong>应用程序</strong>，而是可以在多个平台之间共享部分或全部源代码。这样，<strong>应用程序</strong>将在 iOS 和 Android 上以相同方式运行。</p><p>如今，有多种开源的<a href="./cross-platform-frameworks">跨平台移动<strong>应用</strong>开发<strong>框架</strong></a>可用。其中一些最受欢迎的是 Flutter、React Native 和 Kotlin Multiplatform。以下是一些主要的优缺点：</p><table tabindex="0"><thead><tr><th><strong>优势</strong></th><th><strong>局限</strong></th></tr></thead><tbody><tr><td><strong>可共享代码。</strong> 开发者创建单个代码库，无需为每个操作系统编写新代码。</td><td><strong>性能问题。</strong> 一些开发者认为多平台<strong>应用程序</strong>的性能低于<strong>原生应用</strong>。</td></tr><tr><td><strong>更快的开发速度。</strong> 您不需要编写或测试那么多代码，这有助于加快开发过程。</td><td><strong>难以访问移动设备的</strong>原生特性**。**<strong>构建<strong>需要访问</strong>平台特有的 API</strong> 的跨平台<strong>应用</strong>需要付出更多努力。</td></tr><tr><td><strong>成本效益。</strong> 跨平台解决方案对于初创公司和预算较小的公司来说是一个不错的选择，因为它可以帮助他们降低开发成本。</td><td><strong>有限的用户界面一致性。</strong> 借助于允许共享用户界面的跨平台开发<strong>框架</strong>，<strong>应用程序</strong>可能看起来和感觉不那么<strong>原生</strong>。</td></tr><tr><td><strong>新的工作机会。</strong> 您可以使用<strong>产品</strong>的技术栈中的现代跨平台技术吸引新人才加入您的团队。许多开发者希望在工作中应对新的挑战，这也是为什么新技术和<strong>任务</strong>往往会提高开发者工作时的积极性和乐趣的原因。</td><td><strong>具有挑战性的招聘流程。</strong> 与<strong>原生应用</strong>开发者相比，更难找到能够<strong>构建</strong>多平台<strong>应用</strong>的专业人才。<strong>例如</strong>，在 Glassdoor 上，我们发现美国有 457 个 Android 开发者职位，而 Flutter 开发者职位空缺仅 58 个。然而，借助 <a href="https://www.jetbrains.com/kotlin-multiplatform/" target="_blank" rel="noreferrer">Kotlin Multiplatform</a> 等现代技术，这一劣势变得容易管理。您可以招聘一位能够迅速适应跨平台开发的 Android 开发者，考虑到这全部都是 Kotlin。</td></tr><tr><td><strong>灵活的代码共享。</strong> 现代跨平台技术允许开发者在多个平台之间重用代码，同时保留<strong>原生编程</strong>的优势。</td><td></td></tr><tr><td></td><td></td></tr></tbody></table><p><a href="https://www.jetbrains.com/kotlin-multiplatform/" target="_blank" rel="noreferrer"><img src="'+s+'" alt="探索 Kotlin Multiplatform" width="700"></a></p><p>这些只是跨平台<strong>应用</strong>开发的一些关键优势。您可以在我们关于<a href="./cross-platform-mobile-development">跨平台移动开发</a>的文章中，了解更多来自全球公司的其优势和用例。至于该方法的挑战，我们将在下一节中讨论。</p><h3 id="揭示关于跨平台应用开发的一些常见误解" tabindex="-1">揭示关于跨平台<strong>应用</strong>开发的一些常见误解 <a class="header-anchor" href="#揭示关于跨平台应用开发的一些常见误解" aria-label="Permalink to &quot;揭示关于跨平台**应用**开发的一些常见误解&quot;">​</a></h3><p>多平台技术不断发展。一些跨平台开发<strong>框架</strong>，例如 <a href="https://kotlinlang.org/lp/multiplatform/" target="_blank" rel="noreferrer">Kotlin Multiplatform</a>，提供了<strong>构建</strong>跨平台和<strong>原生应用</strong>的优势，并消除了通常与此方法相关的局限性。</p><h4 id="_1-跨平台应用的性能不如原生应用。" tabindex="-1">1. 跨平台<strong>应用</strong>的性能不如<strong>原生应用</strong>。 <a class="header-anchor" href="#_1-跨平台应用的性能不如原生应用。" aria-label="Permalink to &quot;1. 跨平台**应用**的性能不如**原生应用**。&quot;">​</a></h4><p>长期以来，性能不佳一直被认为是多平台<strong>应用程序</strong>的主要劣势之一。然而，您的<strong>产品</strong>的性能和质量很大程度上取决于您用于<strong>构建****应用</strong>的工具。最新的跨平台<strong>框架</strong>提供了开发具有<strong>原生</strong>用户体验<strong>所需</strong>的所有工具。</p><p>通过使用不同的编译器后端，<a href="./multiplatform-share-on-platforms">Kotlin</a> 被编译为平台格式——Android 的 JVM 字节码和 iOS 的<strong>原生</strong>二进制文件。因此，您的共享代码的性能与<strong>原生</strong>编写的性能相同。</p><h4 id="_2-跨平台框架不安全。" tabindex="-1">2. 跨平台<strong>框架</strong>不安全。 <a class="header-anchor" href="#_2-跨平台框架不安全。" aria-label="Permalink to &quot;2. 跨平台**框架**不安全。&quot;">​</a></h4><p>人们普遍误认为<strong>原生应用</strong>更安全可靠。然而，现代跨平台开发工具允许开发者<strong>构建</strong>安全的<strong>应用</strong>，从而保证可靠的数据保护。移动工程师只需<a href="https://appstronauts.co/blog/are-cross-platform-apps-as-fast-and-secure-as-native-apps/#:~:text=Unsecurity%20of%20cross%2Dplatform%20apps,a%20cross%2Dplatform%20app%27s%20code." target="_blank" rel="noreferrer">采取额外措施来确保其<strong>应用</strong>的安全</a>。</p><h4 id="_3-跨平台应用无法访问移动设备的所有原生函数。" tabindex="-1">3. 跨平台<strong>应用</strong>无法访问移动设备的所有<strong>原生函数</strong>。 <a class="header-anchor" href="#_3-跨平台应用无法访问移动设备的所有原生函数。" aria-label="Permalink to &quot;3. 跨平台**应用**无法访问移动设备的所有**原生函数**。&quot;">​</a></h4><p>确实并非所有跨平台<strong>框架</strong>都允许您<strong>构建</strong>可完全访问设备<strong>特性</strong>的<strong>应用</strong>。然而，一些现代多平台技术可以帮助您克服这一挑战。<strong>例如</strong>，Kotlin Multiplatform 提供了对 Android 和 iOS SDK 的便捷访问。它提供了一种<a href="./multiplatform-connect-to-apis"> Kotlin 预期与实际<strong>声明</strong>机制</a>来帮助您访问设备的<strong>功能</strong>和<strong>特性</strong>。</p><h4 id="_4-管理跨平台项目常常很困难。" tabindex="-1">4. 管理跨平台<strong>项目</strong>常常很困难。 <a class="header-anchor" href="#_4-管理跨平台项目常常很困难。" aria-label="Permalink to &quot;4. 管理跨平台**项目**常常很困难。&quot;">​</a></h4><p>事实上，情况恰恰相反。跨平台解决方案有助于您更有效地管理资源。您的开发团队可以学习如何编写和重用共享代码。Android 和 iOS 开发者可以通过<strong>交互</strong>和知识共享来实现高效率和透明度。</p><h2 id="在选择跨平台与原生-应用开发时需要考虑的-6-个关键方面" tabindex="-1">在选择跨平台与<strong>原生****应用</strong>开发时需要考虑的 6 个关键方面 <a class="header-anchor" href="#在选择跨平台与原生-应用开发时需要考虑的-6-个关键方面" aria-label="Permalink to &quot;在选择跨平台与**原生****应用**开发时需要考虑的 6 个关键方面&quot;">​</a></h2><p>现在，让我们来看看在选择<strong>原生</strong>和跨平台移动<strong>应用</strong>开发解决方案时需要考虑的重要因素。</p><h4 id="_1-未来应用的类型和目的" tabindex="-1">1. 未来<strong>应用</strong>的类型和目的 <a class="header-anchor" href="#_1-未来应用的类型和目的" aria-label="Permalink to &quot;1. 未来**应用**的类型和目的&quot;">​</a></h4><p>首要步骤之一是了解您将<strong>构建</strong>什么<strong>应用</strong>，包括其<strong>特性</strong>和目的。一个具有许多<strong>特性</strong>的复杂<strong>应用程序</strong>将需要大量的编程工作，尤其是如果它是没有任何现有模板的新事物。</p><p>您的<strong>应用</strong>的用户界面有多关键？您是追求出色的视觉效果，还是用户界面不那么重要？它是否需要任何<strong>特有的硬件功能</strong>以及对摄像头和 GPS 定位支持的访问？您需要确保所选择的移动开发方法提供了<strong>构建</strong>您所需<strong>应用</strong>并提供出色用户体验的必要工具。</p><h4 id="_2-您的团队在编程语言和工具方面的经验" tabindex="-1">2. 您的团队在编程语言和工具方面的经验 <a class="header-anchor" href="#_2-您的团队在编程语言和工具方面的经验" aria-label="Permalink to &quot;2. 您的团队在编程语言和工具方面的经验&quot;">​</a></h4><p>您团队的开发者应该具备足够的经验和专业知识来使用特定的<strong>框架</strong>。请密切关注开发工具所需的编程技能和语言。</p><p><strong>例如</strong>，开发者需要了解 Objective-C 或 Swift 来为 iOS <strong>创建****原生应用</strong>，需要了解 Kotlin 或 Java 来开发 Android 应用。跨平台<strong>框架</strong> Flutter 需要了解 Dart。如果您使用 Kotlin Multiplatform，Kotlin 语法对 iOS 开发者来说很容易学习，因为它遵循与 Swift 相似的概念。</p><h4 id="_3-长期可行性" tabindex="-1">3. 长期可行性 <a class="header-anchor" href="#_3-长期可行性" aria-label="Permalink to &quot;3. 长期可行性&quot;">​</a></h4><p>在不同方法和<strong>框架</strong>之间进行选择时，您需要确信平台供应商将在长期内持续提供支持。您可以深入了解提供商的详细信息、其社区规模以及全球公司的<strong>采用</strong>情况。<strong>例如</strong>，Kotlin Multiplatform 由 JetBrains 开发，Flutter 由 Google 开发，React Native 由 Facebook 开发。</p><p><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/case-studies.html" target="_blank" rel="noreferrer"><img src="'+a+'" alt="探索 Kotlin Multiplatform 实际用例" width="700"></a></p><h4 id="_4-开发成本和预算" tabindex="-1">4. 开发成本和预算 <a class="header-anchor" href="#_4-开发成本和预算" aria-label="Permalink to &quot;4. 开发成本和预算&quot;">​</a></h4><p>如上所述，不同的移动开发解决方案和工具会产生不同的费用。根据您的预算灵活性，您可以为您的<strong>项目</strong>选择正确的解决方案。</p><h4 id="_5-行业采用情况" tabindex="-1">5. 行业<strong>采用</strong>情况 <a class="header-anchor" href="#_5-行业采用情况" aria-label="Permalink to &quot;5. 行业**采用**情况&quot;">​</a></h4><p>您总能了解技术社区中的其他专家对不同方法的看法。Reddit、StackOverflow 和 Google Trends 都是不错的资源。只需查看以下两个术语的搜索趋势：“<strong>原生</strong>移动开发”与“跨平台移动开发”。根据 Google Trends，许多人仍然对学习<strong>原生应用开发</strong>感兴趣，但跨平台方法也正在获得关注。</p><p><img src="'+g+'" alt="Cross-platform and native mobile development in Google Trends" width="700"></p><p>如果一项技术被专业人士广泛使用，它就会拥有强大的生态系统、众多库以及来自技术社区的最佳实践，这使得开发速度更快。</p><h4 id="_6-可见性和学习资源" tabindex="-1">6. 可见性和学习资源 <a class="header-anchor" href="#_6-可见性和学习资源" aria-label="Permalink to &quot;6. 可见性和学习资源&quot;">​</a></h4><p>如果您正在考虑尝试跨平台<strong>应用</strong>开发，您应该考虑的因素之一是查找不同多平台<strong>框架</strong>的学习材料有多容易。<strong>检测</strong>它们的官方文档、书籍和课程。请确保它们提供具有长期计划的<a href="https://blog.jetbrains.com/kotlin/2024/10/kotlin-multiplatform-development-roadmap-for-2025/" target="_blank" rel="noreferrer">产品路线图</a>。</p><h2 id="何时应该选择跨平台应用开发" tabindex="-1">何时应该选择跨平台<strong>应用</strong>开发？ <a class="header-anchor" href="#何时应该选择跨平台应用开发" aria-label="Permalink to &quot;何时应该选择跨平台**应用**开发？&quot;">​</a></h2><p>适用于移动<strong>应用</strong>开发的跨平台解决方案将在为 Android 和 iOS <strong>构建应用程序</strong>时为您节省时间和精力。</p><p>简而言之，如果您符合以下条件，则应该选择跨平台解决方案：</p><ul><li>您需要为 Android 和 iOS <strong>构建****应用</strong>。</li><li>您希望优化开发时间。</li><li>您希望拥有一个用于<strong>应用逻辑</strong>的单一代码库，同时保持对 UI 元素的完全控制。并非所有跨平台<strong>框架</strong>都允许您这样做，但有些<strong>框架</strong>，例如 Kotlin Multiplatform，使您能够<a href="./multiplatform-connect-to-apis">共享逻辑并保持 UI <strong>原生</strong></a>。</li><li>您渴望拥抱持续发展的现代技术。</li></ul><p>在组织中实施新技术和工具可能具有挑战性。这就是我们<strong>创建</strong>了一本名为<a href="./multiplatform-introduce-your-team">“如何向您的团队引入多平台移动开发”</a>的指南的原因，您将在其中找到一系列行动要点和最佳实践，以帮助尽可能顺利地过渡到多平台。</p><p><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/get-started.html" target="_blank" rel="noreferrer"><img src="'+e+'" alt="查看 Kotlin Multiplatform 实际应用" width="700"></a></p><h2 id="何时应该选择原生-应用开发" tabindex="-1">何时应该选择<strong>原生****应用</strong>开发？ <a class="header-anchor" href="#何时应该选择原生-应用开发" aria-label="Permalink to &quot;何时应该选择**原生****应用**开发？&quot;">​</a></h2><p>在某些<strong>特定情况</strong>下，选择<strong>原生</strong>移动开发是有意义的。您应该在以下情况下选择此方法：</p><ul><li>您的<strong>应用</strong>仅<strong>面向</strong>一个<strong>特定受众</strong>——无论是 Android 还是 iOS。</li><li>用户界面对您未来的<strong>应用程序</strong>至关重要。然而，即使在这种情况下，您也可以使用多平台解决方案在平台之间共享逻辑，同时选择保持 UI <strong>原生</strong>。</li><li>您的团队配备了高技能的 Android 和 iOS 开发者，但您没有时间引入新技术。</li></ul><h3 id="要点总结" tabindex="-1">要点总结 <a class="header-anchor" href="#要点总结" aria-label="Permalink to &quot;要点总结&quot;">​</a></h3><p>请记住上述所有方面、您的<strong>项目</strong>目标和最终用户。无论您选择<strong>原生</strong>开发还是跨平台开发，都取决于您的独特需求。每种解决方案都有其优缺点。</p><p>尽管如此，请密切关注社区中发生的一切。了解最新的移动开发趋势将帮助您为您的<strong>项目</strong>做出最佳选择。</p>',55))])}const K=l(c,[["render",u]]);export{O as __pageData,K as default};
