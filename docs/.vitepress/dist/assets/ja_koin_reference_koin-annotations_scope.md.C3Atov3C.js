import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.Bksy39di.js";const r=JSON.parse('{"title":"Koinアノテーションにおけるスコープ","description":"","frontmatter":{"title":"Koinアノテーションにおけるスコープ"},"headers":[],"relativePath":"ja/koin/reference/koin-annotations/scope.md","filePath":"ja/koin/reference/koin-annotations/scope.md","lastUpdated":1748365453000}'),p={name:"ja/koin/reference/koin-annotations/scope.md"};function t(l,s,h,k,o,d){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="koinアノテーションにおけるスコープ" tabindex="-1">Koinアノテーションにおけるスコープ <a class="header-anchor" href="#koinアノテーションにおけるスコープ" aria-label="Permalink to &quot;Koinアノテーションにおけるスコープ&quot;">​</a></h1><p>定義やモジュールを使用する際、特定の空間と時間の解決のためにスコープを定義する必要があるかもしれません。</p><h2 id="scopeでスコープを定義する" tabindex="-1">@Scopeでスコープを定義する <a class="header-anchor" href="#scopeでスコープを定義する" aria-label="Permalink to &quot;@Scopeでスコープを定義する&quot;">​</a></h2><p>Koinはスコープの使用を許可しています。基本的な詳細については、<a href="/ja/koin/reference/koin-core/scopes">Koin Scopes</a>セクションを参照してください。</p><p>アノテーションでスコープを宣言するには、次のようにクラスに<code>@Scope</code>アノテーションを使用します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Scope</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyScopeClass</span></span></code></pre></div><blockquote><p>これは以下のスコープセクションと同等になります：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyScopeClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></blockquote><p>そうでなく、型よりもスコープ名が必要な場合は、<code>name</code>パラメータを使用して<code>@Scope(name = )</code>アノテーションでクラスにタグ付けする必要があります。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;my_scope_name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyScopeClass</span></span></code></pre></div><blockquote><p>これは以下と同等になります：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">named</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">my_scope_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&quot;)&gt; {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></blockquote><h2 id="scopedでスコープ内に定義を追加する" tabindex="-1">@Scopedでスコープ内に定義を追加する <a class="header-anchor" href="#scopedでスコープ内に定義を追加する" aria-label="Permalink to &quot;@Scopedでスコープ内に定義を追加する&quot;">​</a></h2><p>スコープ内（アノテーションで定義されているか否かに関わらず）に定義を宣言するには、<code>@Scope</code>と<code>@Scoped</code>アノテーションでクラスにタグ付けするだけです。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;my_scope_name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Scoped</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyScopedComponent</span></span></code></pre></div><p>これにより、スコープセクション内に適切な定義が生成されます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">named</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">my_scope_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&quot;)&gt; {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  scoped</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyScopedComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>スコープ空間（<code>@Scope</code>を使用）と定義するコンポーネントの種類（<code>@Scoped</code>を使用）を示すために、両方のアノテーションが必要です。</p></div><h2 id="スコープからの依存関係の解決" tabindex="-1">スコープからの依存関係の解決 <a class="header-anchor" href="#スコープからの依存関係の解決" aria-label="Permalink to &quot;スコープからの依存関係の解決&quot;">​</a></h2><p>スコープ化された定義からは、内部スコープと親スコープからの任意の定義を解決できます。</p><p>例えば、次のケースは機能します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Single</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MySingle</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;my_scope_name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Scoped</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyScopedComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mySingle : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MySingle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myOtherScopedComponent :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyOtherScopedComponent</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;my_scope_name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Scoped</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyOtherScopedComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mySingle : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MySingle</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><code>MySingle</code>コンポーネントはルートでシングルトン定義として定義されています。<code>MyScopedComponent</code>と<code>MyOtherScopedComponent</code>は&quot;my_scope_name&quot;スコープで定義されています。 <code>MyScopedComponent</code>からの依存関係の解決は、<code>MySingle</code>インスタンスでKoinのルートにアクセスし、現在の&quot;my_scope_name&quot;スコープから<code>MyOtherScopedComponent</code>スコープインスタンスにアクセスします。</p><h2 id="scopeidを用いたスコープ外からの解決-バージョン1-3-0以降" tabindex="-1">@ScopeIdを用いたスコープ外からの解決 (バージョン1.3.0以降) <a class="header-anchor" href="#scopeidを用いたスコープ外からの解決-バージョン1-3-0以降" aria-label="Permalink to &quot;@ScopeIdを用いたスコープ外からの解決 (バージョン1.3.0以降)&quot;">​</a></h2><p>別のスコープから、自身のスコープから直接アクセスできないコンポーネントを解決する必要があるかもしれません。そのためには、依存関係に<code>@ScopeId</code>アノテーションを付加し、Koinに指定されたスコープIDのスコープ内でこの依存関係を見つけるように指示する必要があります。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Factory</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  @ScopeId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my_scope_id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myScopedComponent :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyScopedComponent</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>上記のコードは、生成されたものと同等です。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">factory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Myfactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getScope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my_scope_id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) }</span></span></code></pre></div><p>この例は、<code>MyFactory</code>コンポーネントが<code>my_scope_id</code>というIDを持つスコープインスタンスから<code>MyScopedComponent</code>コンポーネントを解決することを示しています。<code>my_scope_id</code>というIDで作成されたこのスコープは、適切なスコープ定義で作成される必要があります。</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p><code>MyScopedComponent</code>コンポーネントはスコープセクション内で定義されている必要があり、スコープインスタンスは&quot;my_scope_id&quot;というIDで作成されている必要があります。</p></div>`,28)]))}const g=i(p,[["render",t]]);export{r as __pageData,g as default};
