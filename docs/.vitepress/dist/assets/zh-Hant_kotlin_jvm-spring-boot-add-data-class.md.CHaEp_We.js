import{_ as g}from"./chunks/icon-1-done.ZX9lW-aj.js";import{_ as c}from"./chunks/icon-2.DCnUydpf.js";import{_ as u}from"./chunks/icon-3-todo.Gx4op1du.js";import{_ as E}from"./chunks/icon-4-todo.GaeEmerm.js";import{_ as y}from"./chunks/messages-in-json-format.6v4MkOOj.js";import{_ as m,C as l,c as F,o as b,j as s,G as a,ag as p,a as i,w as n}from"./chunks/framework.Bksy39di.js";const j=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/jvm-spring-boot-add-data-class.md","filePath":"zh-Hant/kotlin/jvm-spring-boot-add-data-class.md","lastUpdated":1754307826000}'),C={name:"zh-Hant/kotlin/jvm-spring-boot-add-data-class.md"};function f(q,t,B,v,A,_){const o=l("web-summary"),k=l("tldr"),e=l("def"),h=l("list"),r=l("code-block"),d=l("deflist");return b(),F("div",null,[t[9]||(t[9]=s("h1",{id:"將數據類新增至-spring-boot-專案",tabindex:"-1"},[i("將數據類新增至 Spring Boot 專案 "),s("a",{class:"header-anchor",href:"#將數據類新增至-spring-boot-專案","aria-label":'Permalink to "將數據類新增至 Spring Boot 專案"'},"​")],-1)),a(o,null,{default:n(()=>t[0]||(t[0]=[i("將 Kotlin 數據類新增至 Spring Boot 專案。")])),_:1}),a(k,null,{default:n(()=>t[1]||(t[1]=[s("p",null,[i("這是 "),s("strong",null,"Spring Boot 與 Kotlin 入門"),i(" 教學課程的第二部分。在繼續之前，請確保您已完成先前的步驟：")],-1),s("br",null,null,-1),s("p",null,[s("img",{src:g,width:"20",alt:"First step"}),i(),s("a",{href:"/zh-Hant/kotlin/jvm-create-project-with-spring-boot"},"使用 Kotlin 建立 Spring Boot 專案"),s("br"),s("img",{src:c,width:"20",alt:"Second step"}),i(),s("strong",null,"將數據類新增至 Spring Boot 專案"),s("br"),s("img",{src:u,width:"20",alt:"Third step"}),i(" 為 Spring Boot 專案新增資料庫支援"),s("br"),s("img",{src:E,width:"20",alt:"Fourth step"}),i(" 使用 Spring Data CrudRepository 進行資料庫存取")],-1)])),_:1}),t[10]||(t[10]=p(`<p>在本教學課程的這部分中，您將為應用程式新增更多功能，並探索更多 Kotlin 語言功能，例如數據類。這需要變更 <code>MessageController</code> 類別，使其回應包含序列化物件集合的 JSON 文件。</p><h2 id="更新您的應用程式" tabindex="-1">更新您的應用程式 <a class="header-anchor" href="#更新您的應用程式" aria-label="Permalink to &quot;更新您的應用程式&quot;">​</a></h2><ol><li><p>在與 <code>DemoApplication.kt</code> 檔案相同的套件中，建立一個 <code>Message.kt</code> 檔案。</p></li><li><p>在 <code>Message.kt</code> 檔案中，建立一個具有兩個屬性：<code>id</code> 和 <code>text</code> 的數據類：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Message.kt</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> com.example.demo</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> text: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></li></ol><p><code>Message</code> 類別將用於資料傳輸：序列化的 <code>Message</code> 物件列表將構成控制器回應瀏覽器請求的 JSON 文件。</p>`,4)),a(d,{collapsible:"true"},{default:n(()=>[a(e,{title:"數據類 – data class Message"},{default:n(()=>t[2]||(t[2]=[s("p",null,[i("Kotlin 中 "),s("a",{href:"/zh-Hant/kotlin/data-classes"},"數據類"),i(" 的主要目的是儲存資料。這類別會以 "),s("code",null,"data"),i(" 關鍵字標記，並且一些標準功能和一些公用程式函數通常可以從類別結構中機械地衍生出來。")],-1),s("p",null,[i("在這個範例中，您將 "),s("code",null,"Message"),i(" 宣告為數據類，因為其主要目的是儲存資料。")],-1)])),_:1}),a(e,{title:"val 和 var 屬性"},{default:n(()=>[t[4]||(t[4]=s("p",null,[i("Kotlin 類別中的 "),s("a",{href:"/zh-Hant/kotlin/properties"},"屬性"),i(" 可以宣告為：")],-1)),a(h,null,{default:n(()=>t[3]||(t[3]=[s("li",null,[s("i",null,"可變的"),i("，使用 "),s("code",null,"var"),i(" 關鍵字")],-1),s("li",null,[s("i",null,"唯讀的"),i("，使用 "),s("code",null,"val"),i(" 關鍵字")],-1)])),_:1}),t[5]||(t[5]=s("p",null,[s("code",null,"Message"),i(" 類別使用 "),s("code",null,"val"),i(" 關鍵字宣告了兩個屬性："),s("code",null,"id"),i(" 和 "),s("code",null,"text"),i("。編譯器將自動為這兩個屬性產生 getter。在建立 "),s("code",null,"Message"),i(" 類別的實例後，將無法重新指派這些屬性的值。")],-1))]),_:1}),a(e,{title:"可空類型 – String?"},{default:n(()=>[t[7]||(t[7]=s("p",null,[i("Kotlin 提供 "),s("a",{href:"/zh-Hant/kotlin/null-safety#nullable-types-and-non-nullable-types"},"內建的可空類型支援"),i("。在 Kotlin 中，型別系統區分可以容納 "),s("code",null,"null"),i(" 的引用（"),s("i",null,"可空引用"),i("）和不能容納 "),s("code",null,"null"),i(" 的引用（"),s("i",null,"非空引用"),i("）。"),s("br"),i(" 例如，型別為 "),s("code",null,"String"),i(" 的常規變數不能容納 "),s("code",null,"null"),i("。為了允許 null，您可以將變數宣告為可空字串，寫作 "),s("code",null,"String?"),i("。")],-1)),t[8]||(t[8]=s("p",null,[s("code",null,"id"),i(" 屬性這次被宣告為可空類型。因此，可以透過傳遞 "),s("code",null,"null"),i(" 作為 "),s("code",null,"id"),i(" 的值來建立 "),s("code",null,"Message"),i(" 類別的實例：")],-1)),a(r,{lang:"kotlin"},{default:n(()=>t[6]||(t[6]=[i(' Message(null, "Hello!") ')])),_:1})]),_:1})]),_:1}),t[11]||(t[11]=p(`<pre><code>\`\`\`kotlin
// MessageController.kt
package com.example.demo

import org.springframework.web.bind.annotation.GetMapping
import org.springframework.web.bind.annotation.RequestMapping
import org.springframework.web.bind.annotation.RestController

@RestController
@RequestMapping(&quot;/&quot;)
class MessageController {
    @GetMapping
    fun listMessages() = listOf(
        Message(&quot;1&quot;, &quot;Hello!&quot;),
        Message(&quot;2&quot;, &quot;Bonjour!&quot;),
        Message(&quot;3&quot;, &quot;Privet!&quot;),
    )
}
\`\`\`

&lt;deflist collapsible=&quot;true&quot;&gt;
   &lt;def title=&quot;集合 – listOf()&quot;&gt;
      &lt;p&gt;Kotlin 標準函式庫為基本集合類型（：集、列表和映射）提供實作。&lt;br/&gt;
      每種集合類型都可以是 &lt;i&gt;唯讀&lt;/i&gt; 或 &lt;i&gt;可變&lt;/i&gt; 的：&lt;/p&gt;
      &lt;list&gt;
          &lt;li&gt;&lt;i&gt;唯讀&lt;/i&gt; 集合提供用於存取集合元素的操作。&lt;/li&gt;
          &lt;li&gt;&lt;i&gt;可變&lt;/i&gt; 集合也提供用於新增、移除和更新其元素的寫入操作。&lt;/li&gt;
      &lt;/list&gt;
      &lt;p&gt;Kotlin 標準函式庫也提供了對應的工廠函數來建立這類集合的實例。&lt;/p&gt;
      &lt;p&gt;在本教學課程中，您使用 &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/list-of.html&quot;&gt;&lt;code&gt;listOf()&lt;/code&gt;&lt;/a&gt; 函數來建立 &lt;code&gt;Message&lt;/code&gt; 物件的列表。這是建立物件 &lt;i&gt;唯讀&lt;/i&gt; 列表的工廠函數：您無法從列表中新增或移除元素。&lt;br/&gt;
      如果需要對列表執行寫入操作，請呼叫 &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/mutable-list-of.html&quot;&gt;&lt;code&gt;mutableListOf()&lt;/code&gt;&lt;/a&gt; 函數來建立可變列表實例。&lt;/p&gt;
   &lt;/def&gt;
   &lt;def title=&quot;尾隨逗號&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;coding-conventions.md#trailing-commas&quot;&gt;尾隨逗號&lt;/a&gt; 是位於一系列元素中 **最後一項** 之後的逗號符號：&lt;/p&gt;
        &lt;code-block lang=&quot;kotlin&quot;&gt;
        Message(&quot;3&quot;, &quot;Privet!&quot;),
        &lt;/code-block&gt;
      &lt;p&gt;這是 Kotlin 語法的一個方便功能，完全是可選的 – 即使沒有它們，您的程式碼也能正常運作。&lt;/p&gt;
      &lt;p&gt;在上面的範例中，建立 \`Message\` 物件列表時，在最後一個 \`listOf()\` 函數參數之後包含了尾隨逗號。&lt;/p&gt;
&lt;/deflist&gt;
</code></pre><p>現在，<code>MessageController</code> 的回應將是一個包含 <code>Message</code> 物件集合的 JSON 文件。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>任何 Spring 應用程式中的控制器，如果 Jackson 函式庫位於類別路徑 (classpath) 上，預設會呈現 JSON 回應。由於您 <a href="/zh-Hant/kotlin/jvm-create-project-with-spring-boot#explore-the-project-gradle-build-file">在 <code>build.gradle.kts</code> 檔案中指定了 <code>spring-boot-starter-web</code> 依賴</a>，因此您會收到 Jackson 作為 <em>傳遞性</em> 依賴。因此，如果端點傳回可序列化為 JSON 的資料結構，應用程式將以 JSON 文件回應。</p></div><p>以下是 <code>DemoApplication.kt</code>、<code>MessageController.kt</code> 和 <code>Message.kt</code> 檔案的完整程式碼：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// DemoApplication.kt</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> com.example.demo</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.springframework.boot.autoconfigure.SpringBootApplication</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.springframework.boot.runApplication</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@SpringBootApplication</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DemoApplication</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    runApplication</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DemoApplication</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">args)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// MessageController.kt</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> com.example.demo</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.springframework.web.bind.annotation.GetMapping</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.springframework.web.bind.annotation.RequestMapping</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.springframework.web.bind.annotation.RestController</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@RestController</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@RequestMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MessageController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @GetMapping</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listMessages</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        Message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        Message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Bonjour!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        Message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Privet!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Message.kt</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> com.example.demo</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> text: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="執行應用程式" tabindex="-1">執行應用程式 <a class="header-anchor" href="#執行應用程式" aria-label="Permalink to &quot;執行應用程式&quot;">​</a></h2><p>Spring 應用程式已準備好執行：</p><ol><li><p>再次執行應用程式。</p></li><li><p>應用程式啟動後，開啟以下 URL：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>http://localhost:8080</span></span></code></pre></div><p>您將看到一個頁面，其中包含 JSON 格式的訊息集合：</p><p><img src="`+y+'" alt="Run the application" width="800"></p></li></ol><h2 id="下一步" tabindex="-1">下一步 <a class="header-anchor" href="#下一步" aria-label="Permalink to &quot;下一步&quot;">​</a></h2><p>在本教學課程的下一部分中，您將為專案新增並設定資料庫，並發出 HTTP 請求。</p><p><strong><a href="/zh-Hant/kotlin/jvm-spring-boot-add-db-support">前往下一章</a></strong></p>',13))])}const N=m(C,[["render",f]]);export{j as __pageData,N as default};
