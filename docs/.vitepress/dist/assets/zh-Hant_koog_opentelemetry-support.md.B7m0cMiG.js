import{_ as a,c as i,o as e,ag as t}from"./chunks/framework.Bksy39di.js";const E=JSON.parse('{"title":"OpenTelemetry 支援","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/koog/opentelemetry-support.md","filePath":"zh-Hant/koog/opentelemetry-support.md","lastUpdated":1755146406000}'),n={name:"zh-Hant/koog/opentelemetry-support.md"};function l(p,s,h,r,d,k){return e(),i("div",null,s[0]||(s[0]=[t(`<h1 id="opentelemetry-支援" tabindex="-1">OpenTelemetry 支援 <a class="header-anchor" href="#opentelemetry-支援" aria-label="Permalink to &quot;OpenTelemetry 支援&quot;">​</a></h1><p>本頁詳細介紹了 Koog 代理框架對 OpenTelemetry 的支援，用於追蹤和監控您的 AI 代理。</p><h2 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h2><p>OpenTelemetry 是一個可觀測性框架，提供工具用於從您的應用程式產生、收集和匯出遙測資料 (追蹤)。Koog 的 OpenTelemetry 功能允許您為您的 AI 代理加入檢測，以收集遙測資料，這可以幫助您：</p><ul><li>監控代理效能與行為</li><li>調試複雜代理工作流程中的問題</li><li>可視化代理的執行流程</li><li>追蹤大型語言模型 (LLM) 呼叫和工具使用</li><li>分析代理行為模式</li></ul><h2 id="opentelemetry-關鍵概念" tabindex="-1">OpenTelemetry 關鍵概念 <a class="header-anchor" href="#opentelemetry-關鍵概念" aria-label="Permalink to &quot;OpenTelemetry 關鍵概念&quot;">​</a></h2><ul><li><strong>Spans</strong>: Span 代表分散式追蹤中的獨立工作單元或操作。它們指示應用程式中特定活動的開始與結束，例如代理執行、函數呼叫、大型語言模型 (LLM) 呼叫或工具呼叫。</li><li><strong>Attributes</strong>: Attribute 提供關於遙測相關項目（例如 Span）的元資料。Attribute 以鍵值對的形式表示。</li><li><strong>Events</strong>: Event 是 Span 生命週期中在特定時間點發生的事件，代表了可能值得注意的事情。</li><li><strong>Exporters</strong>: Exporter 是負責將已收集的遙測資料發送到各種後端或目的地的元件。</li><li><strong>Collectors</strong>: Collector 接收、處理和匯出遙測資料。它們在您的應用程式和您的可觀測性後端之間充當中介者。</li><li><strong>Samplers</strong>: Sampler 根據採樣策略決定是否應記錄追蹤。它們用於管理遙測資料的量。</li><li><strong>Resources</strong>: Resource 代表產生遙測資料的實體。它們由資源屬性識別，資源屬性是提供關於資源資訊的鍵值對。</li></ul><p>Koog 中的 OpenTelemetry 功能會自動為各種代理事件建立 Span，包括：</p><ul><li>代理執行開始與結束</li><li>節點執行</li><li>大型語言模型 (LLM) 呼叫</li><li>工具呼叫</li></ul><h2 id="安裝" tabindex="-1">安裝 <a class="header-anchor" href="#安裝" aria-label="Permalink to &quot;安裝&quot;">​</a></h2><p>若要在 Koog 中使用 OpenTelemetry，請將 OpenTelemetry 功能添加到您的代理中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> agent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AIAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    executor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> simpleOpenAIExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(apiKey),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    llmModel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> OpenAIModels.Chat.GPT4o,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    systemPrompt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;You are a helpful assistant.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    installFeatures </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(OpenTelemetry) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // Configuration options go here</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="配置" tabindex="-1">配置 <a class="header-anchor" href="#配置" aria-label="Permalink to &quot;配置&quot;">​</a></h2><h3 id="基本配置" tabindex="-1">基本配置 <a class="header-anchor" href="#基本配置" aria-label="Permalink to &quot;基本配置&quot;">​</a></h3><p>以下是為代理配置 OpenTelemetry 功能時可設定的可用屬性完整列表：</p><table tabindex="0"><thead><tr><th>名稱</th><th>資料型別</th><th>預設值</th><th>描述</th></tr></thead><tbody><tr><td><code>serviceName</code></td><td><code>String</code></td><td><code>ai.koog</code></td><td>被檢測服務的名稱。</td></tr><tr><td><code>serviceVersion</code></td><td><code>String</code></td><td>目前的 Koog 函式庫版本</td><td>被檢測服務的版本。</td></tr><tr><td><code>isVerbose</code></td><td><code>Boolean</code></td><td><code>false</code></td><td>是否啟用詳細日誌記錄以調試 OpenTelemetry 配置。</td></tr><tr><td><code>sdk</code></td><td><code>OpenTelemetrySdk</code></td><td></td><td>用於遙測資料收集的 OpenTelemetry SDK 實例。</td></tr><tr><td><code>tracer</code></td><td><code>Tracer</code></td><td></td><td>用於建立 Span 的 OpenTelemetry Tracer 實例。</td></tr></tbody></table><div class="note custom-block"><p class="custom-block-title">NOTE</p><p><code>sdk</code> 和 <code>tracer</code> 屬性是您可以存取的公共屬性，但您只能使用下方列出的公共方法來設定它們。</p></div><p>OpenTelemetryConfig 類別還包含代表與不同配置項目相關動作的方法。以下是使用一組基本配置項目安裝 OpenTelemetry 功能的範例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(OpenTelemetry) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Set your service configuration</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    setServiceInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my-agent-service&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.0.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Add the Logging exporter</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    addSpanExporter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(LoggingSpanExporter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>有關可用方法的參考，請參閱以下章節。</p><h4 id="setserviceinfo" tabindex="-1">setServiceInfo <a class="header-anchor" href="#setserviceinfo" aria-label="Permalink to &quot;setServiceInfo&quot;">​</a></h4><p>設定服務資訊，包括名稱和版本。接受以下引數：</p><table tabindex="0"><thead><tr><th>名稱</th><th>資料型別</th><th>必需</th><th>預設值</th><th>描述</th></tr></thead><tbody><tr><td><code>serviceName</code></td><td>String</td><td>是</td><td></td><td>被檢測服務的名稱。</td></tr><tr><td><code>serviceVersion</code></td><td>String</td><td>是</td><td></td><td>被檢測服務的版本。</td></tr></tbody></table><h4 id="addspanexporter" tabindex="-1">addSpanExporter <a class="header-anchor" href="#addspanexporter" aria-label="Permalink to &quot;addSpanExporter&quot;">​</a></h4><p>添加一個 Span 匯出器，用於將遙測資料發送到外部系統。接受以下引數：</p><table tabindex="0"><thead><tr><th>名稱</th><th>資料型別</th><th>必需</th><th>預設值</th><th>描述</th></tr></thead><tbody><tr><td><code>exporter</code></td><td><code>SpanExporter</code></td><td>是</td><td></td><td>要添加到自訂 Span 匯出器列表中的 <code>SpanExporter</code> 實例。</td></tr></tbody></table><h4 id="addspanprocessor" tabindex="-1">addSpanProcessor <a class="header-anchor" href="#addspanprocessor" aria-label="Permalink to &quot;addSpanProcessor&quot;">​</a></h4><p>添加一個 Span 處理器，用於在匯出 Span 之前處理它們。接受以下引數：</p><table tabindex="0"><thead><tr><th>名稱</th><th>資料型別</th><th>必需</th><th>預設值</th><th>描述</th></tr></thead><tbody><tr><td><code>processor</code></td><td><code>SpanProcessor</code></td><td>是</td><td></td><td>包含自訂邏輯的 Span 處理器，用於在匯出前處理遙測資料。</td></tr></tbody></table><h4 id="addresourceattributes" tabindex="-1">addResourceAttributes <a class="header-anchor" href="#addresourceattributes" aria-label="Permalink to &quot;addResourceAttributes&quot;">​</a></h4><p>添加資源屬性以提供關於服務的額外上下文。接受以下引數：</p><table tabindex="0"><thead><tr><th>名稱</th><th>資料型別</th><th>必需</th><th>預設值</th><th>描述</th></tr></thead><tbody><tr><td><code>attributes</code></td><td><code>Map&lt;AttributeKey&lt;T&gt;, T&gt;</code></td><td>是</td><td></td><td>提供關於服務額外細節的鍵值對。</td></tr></tbody></table><h4 id="setsampler" tabindex="-1">setSampler <a class="header-anchor" href="#setsampler" aria-label="Permalink to &quot;setSampler&quot;">​</a></h4><p>設定採樣策略以控制哪些 Span 被收集。接受以下引數：</p><table tabindex="0"><thead><tr><th>名稱</th><th>資料型別</th><th>必需</th><th>預設值</th><th>描述</th></tr></thead><tbody><tr><td><code>sampler</code></td><td><code>Sampler</code></td><td>是</td><td></td><td>要為 OpenTelemetry 配置設定的採樣器實例。</td></tr></tbody></table><h4 id="setverbose" tabindex="-1">setVerbose <a class="header-anchor" href="#setverbose" aria-label="Permalink to &quot;setVerbose&quot;">​</a></h4><p>啟用或禁用詳細日誌記錄，用於調試 OpenTelemetry 配置。接受以下引數：</p><table tabindex="0"><thead><tr><th>名稱</th><th>資料型別</th><th>必需</th><th>預設值</th><th>描述</th></tr></thead><tbody><tr><td><code>verbose</code></td><td><code>Boolean</code></td><td>是</td><td><code>false</code></td><td>如果為 true，應用程式會收集更詳細的遙測資料。</td></tr></tbody></table><h3 id="進階配置" tabindex="-1">進階配置 <a class="header-anchor" href="#進階配置" aria-label="Permalink to &quot;進階配置&quot;">​</a></h3><p>對於更進階的配置，您還可以自訂以下配置選項：</p><ul><li>Sampler (採樣器): 配置採樣策略以調整收集資料的頻率和數量。</li><li>Resource attributes (資源屬性): 添加更多關於產生遙測資料的程序的資訊。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(OpenTelemetry) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Set your service configuration</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    setServiceInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my-agent-service&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.0.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Add the Logging exporter</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    addSpanExporter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(LoggingSpanExporter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Set the sampler </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    setSampler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Sampler.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">traceIdRatioBased</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Add resource attributes</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    addResourceAttributes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mapOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        AttributeKey.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;custom.attribute&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) to </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;custom-value&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="sampler" tabindex="-1">Sampler <a class="header-anchor" href="#sampler" aria-label="Permalink to &quot;Sampler&quot;">​</a></h4><p>若要定義採樣器，請使用 <code>opentelemetry-java</code> SDK 中 <code>Sampler</code> 類別 (<code>io.opentelemetry.sdk.trace.samplers.Sampler</code>) 的對應方法，該方法代表您想要使用的採樣策略。</p><p>預設採樣策略如下：</p><ul><li><code>Sampler.alwaysOn()</code>: 預設採樣策略，其中每個 Span (追蹤) 都會被採樣。</li></ul><p>有關可用採樣器和採樣策略的更多資訊，請參閱 OpenTelemetry <a href="https://opentelemetry.io/docs/languages/java/sdk/#sampler" target="_blank" rel="noreferrer">Sampler</a> 文件。</p><h4 id="resource-attributes" tabindex="-1">Resource attributes <a class="header-anchor" href="#resource-attributes" aria-label="Permalink to &quot;Resource attributes&quot;">​</a></h4><p>資源屬性代表關於產生遙測資料的程序的額外資訊。Koog 包含一組預設設定的資源屬性：</p><ul><li><code>service.name</code></li><li><code>service.version</code></li><li><code>service.instance.time</code></li><li><code>os.type</code></li><li><code>os.version</code></li><li><code>os.arch</code></li></ul><p><code>service.name</code> 屬性的預設值為 <code>ai.koog</code>，而 <code>service.version</code> 的預設值為目前使用的 Koog 函式庫版本。</p><p>除了預設的資源屬性外，您還可以添加自訂屬性。要在 Koog 的 OpenTelemetry 配置中添加自訂屬性，請使用 OpenTelemetry 配置中的 <code>addResourceAttributes()</code> 方法，該方法接受一個鍵和一個值作為其引數。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addResourceAttributes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mapOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    AttributeKey.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;custom.attribute&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) to </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;custom-value&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="span-類型和屬性" tabindex="-1">Span 類型和屬性 <a class="header-anchor" href="#span-類型和屬性" aria-label="Permalink to &quot;Span 類型和屬性&quot;">​</a></h2><p>OpenTelemetry 功能會自動建立不同類型的 Span，以追蹤代理中的各種操作：</p><ul><li><strong>CreateAgentSpan</strong>: 在您運行代理時建立，在代理關閉或程序終止時關閉。</li><li><strong>InvokeAgentSpan</strong>: 代理的調用。</li><li><strong>NodeExecuteSpan</strong>: 代理策略中節點的執行。這是一個自訂的、Koog 特定的 Span。</li><li><strong>InferenceSpan</strong>: 大型語言模型 (LLM) 呼叫。</li><li><strong>ExecuteToolSpan</strong>: 工具呼叫。</li></ul><p>Span 以巢狀的、階層式的結構組織。以下是一個 Span 結構的範例：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CreateAgentSpan</span></span>
<span class="line"><span>    InvokeAgentSpan</span></span>
<span class="line"><span>        NodeExecuteSpan</span></span>
<span class="line"><span>            InferenceSpan</span></span>
<span class="line"><span>        NodeExecuteSpan</span></span>
<span class="line"><span>            ExecuteToolSpan</span></span>
<span class="line"><span>        NodeExecuteSpan</span></span>
<span class="line"><span>            InferenceSpan</span></span></code></pre></div><h3 id="span-屬性" tabindex="-1">Span 屬性 <a class="header-anchor" href="#span-屬性" aria-label="Permalink to &quot;Span 屬性&quot;">​</a></h3><p>Span 屬性提供與 Span 相關的元資料。每個 Span 都有其自己的一組屬性，而某些 Span 也可以重複屬性。</p><p>Koog 支援一組預定義的屬性，這些屬性遵循 OpenTelemetry 的 <a href="https://opentelemetry.io/docs/specs/semconv/gen-ai/gen-ai-spans/" target="_blank" rel="noreferrer">生成式 AI 事件語義約定</a>。例如，約定定義了一個名為 <code>gen_ai.conversation.id</code> 的屬性，這通常是 Span 的必需屬性。在 Koog 中，此屬性的值是代理運行 (run) 的唯一識別碼，在您呼叫 <code>agent.run()</code> 方法時自動設定。</p><p>此外，Koog 還包含自訂的、Koog 特定的屬性。您可以透過 <code>koog.</code> 前綴識別這些屬性中的大多數。以下是可用的自訂屬性：</p><ul><li><code>koog.agent.strategy.name</code>: 代理策略的名稱。策略是一個與 Koog 相關的實體，描述代理的目的。用於 <code>InvokeAgentSpan</code> Span。</li><li><code>koog.node.name</code>: 正在運行的節點名稱。用於 <code>NodeExecuteSpan</code> Span。</li></ul><h3 id="事件" tabindex="-1">事件 <a class="header-anchor" href="#事件" aria-label="Permalink to &quot;事件&quot;">​</a></h3><p>Span 還可以有一個附加到其上的「事件」。事件描述了在特定時間點發生的相關事情。例如，當大型語言模型 (LLM) 呼叫開始或完成時。事件也具有屬性，並且還包含事件「主體欄位」。</p><p>以下事件類型遵循 OpenTelemetry 的 <a href="https://opentelemetry.io/docs/specs/semconv/gen-ai/gen-ai-events/" target="_blank" rel="noreferrer">生成式 AI 事件語義約定</a> 獲得支援：</p><ul><li><strong>SystemMessageEvent</strong>: 傳遞給模型的系統指令。</li><li><strong>UserMessageEvent</strong>: 傳遞給模型的使用者訊息。</li><li><strong>AssistantMessageEvent</strong>: 傳遞給模型的助手訊息。</li><li><strong>ToolMessageEvent</strong>: 傳遞給模型的來自工具或函數呼叫的回應。</li><li><strong>ChoiceEvent</strong>: 來自模型的回應訊息。</li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p><code>opentelemetry-java</code> SDK 在添加事件時不支援事件主體欄位參數。因此，在 Koog 的 OpenTelemetry 支援中，事件主體欄位是一個單獨的屬性，其鍵為 <code>body</code>，值類型為字串。該字串包含事件主體欄位的內容或負載，通常是一個類似 JSON 的物件。有關事件主體欄位的範例，請參閱 <a href="https://opentelemetry.io/docs/specs/semconv/gen-ai/gen-ai-events/#examples" target="_blank" rel="noreferrer">OpenTelemetry 文件</a>。有關 <code>opentelemetry-java</code> 中事件主體欄位支援狀態，請參閱相關的 <a href="https://github.com/open-telemetry/semantic-conventions/issues/1870" target="_blank" rel="noreferrer">GitHub issue</a>。</p></div><h2 id="匯出器" tabindex="-1">匯出器 <a class="header-anchor" href="#匯出器" aria-label="Permalink to &quot;匯出器&quot;">​</a></h2><p>匯出器將收集到的遙測資料發送到 OpenTelemetry Collector 或其他類型的目的地或後端實作。若要添加匯出器，請在安裝 OpenTelemetry 功能時使用 <code>addSpanExporter()</code> 方法。該方法接受以下引數：</p><table tabindex="0"><thead><tr><th>名稱</th><th>資料型別</th><th>必需</th><th>預設值</th><th>描述</th></tr></thead><tbody><tr><td><code>exporter</code></td><td>SpanExporter</td><td>是</td><td></td><td>要添加到自訂 Span 匯出器列表中的 <code>SpanExporter</code> 實例。</td></tr></tbody></table><p>以下章節提供了關於 <code>opentelemetry-java</code> SDK 中一些最常用匯出器的資訊。</p><h3 id="日誌匯出器" tabindex="-1">日誌匯出器 <a class="header-anchor" href="#日誌匯出器" aria-label="Permalink to &quot;日誌匯出器&quot;">​</a></h3><p>將追蹤資訊輸出到控制台的日誌匯出器。<code>LoggingSpanExporter</code> (<code>io.opentelemetry.exporter.logging.LoggingSpanExporter</code>) 是 <code>opentelemetry-java</code> SDK 的一部分。</p><p>這種匯出類型對於開發和調試目的非常有用。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(OpenTelemetry) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Add the logging exporter</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    addSpanExporter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(LoggingSpanExporter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Add more exporters as needed</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="opentelemetry-http-匯出器" tabindex="-1">OpenTelemetry HTTP 匯出器 <a class="header-anchor" href="#opentelemetry-http-匯出器" aria-label="Permalink to &quot;OpenTelemetry HTTP 匯出器&quot;">​</a></h3><p>OpenTelemetry HTTP 匯出器 (<code>OtlpHttpSpanExporter</code>) 是 <code>opentelemetry-java</code> SDK (<code>io.opentelemetry.exporter.otlp.http.trace.OtlpHttpSpanExporter</code>) 的一部分，透過 HTTP 將 Span 資料發送到後端。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(OpenTelemetry) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // Add OpenTelemetry HTTP exporter </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   addSpanExporter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      OtlpHttpSpanExporter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         // Set the maximum time to wait for the collector to process an exported batch of spans </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, TimeUnit.SECONDS)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         // Set the OpenTelemetry endpoint to connect to</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setEndpoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://localhost:3000/api/public/otel/v1/traces&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         // Add the authorization header</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Authorization&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Basic </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$AUTH_STRING</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="opentelemetry-grpc-匯出器" tabindex="-1">OpenTelemetry gRPC 匯出器 <a class="header-anchor" href="#opentelemetry-grpc-匯出器" aria-label="Permalink to &quot;OpenTelemetry gRPC 匯出器&quot;">​</a></h3><p>OpenTelemetry gRPC 匯出器 (<code>OtlpGrpcSpanExporter</code>) 是 <code>opentelemetry-java</code> SDK (<code>io.opentelemetry.exporter.otlp.trace.OtlpGrpcSpanExporter</code>) 的一部分。它透過 gRPC 將遙測資料匯出到後端，並允許您定義接收資料的後端、收集器或端點的主機和連接埠。預設連接埠為 <code>4317</code>。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(OpenTelemetry) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // Add OpenTelemetry gRPC exporter </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   addSpanExporter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      OtlpGrpcSpanExporter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // Set the host and the port</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setEndpoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://localhost:4317&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="與-jaeger-整合" tabindex="-1">與 Jaeger 整合 <a class="header-anchor" href="#與-jaeger-整合" aria-label="Permalink to &quot;與 Jaeger 整合&quot;">​</a></h2><p>Jaeger 是一個流行的分散式追蹤系統，可與 OpenTelemetry 協同工作。Koog 儲存庫中 <code>examples</code> 目錄下的 <code>opentelemetry</code> 目錄包含一個將 OpenTelemetry 與 Jaeger 和 Koog 代理一起使用的範例。</p><h3 id="先決條件" tabindex="-1">先決條件 <a class="header-anchor" href="#先決條件" aria-label="Permalink to &quot;先決條件&quot;">​</a></h3><p>若要測試 OpenTelemetry 與 Koog 和 Jaeger 的整合，請使用提供的 <code>docker-compose.yaml</code> 檔案，執行以下命令來啟動 Jaeger OpenTelemetry 一體化程序：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> up</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span></span></code></pre></div><p>提供的 Docker Compose YAML 檔案包含以下內容：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># docker-compose.yaml</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">services</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  jaeger-all-in-one</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">jaegertracing/all-in-one:1.39</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    container_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">jaeger-all-in-one</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    environment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">COLLECTOR_OTLP_ENABLED=true</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    ports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;4317:4317&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;16686:16686&quot;</span></span></code></pre></div><p>若要存取 Jaeger UI 並查看您的追蹤，請開啟 <code>http://localhost:16686</code>。</p><h3 id="範例" tabindex="-1">範例 <a class="header-anchor" href="#範例" aria-label="Permalink to &quot;範例&quot;">​</a></h3><p>若要匯出遙測資料以在 Jaeger 中使用，此範例使用 <code>opentelemetry-java</code> SDK 中的 <code>LoggingSpanExporter</code> (<code>io.opentelemetry.exporter.logging.LoggingSpanExporter</code>) 和 <code>OtlpGrpcSpanExporter</code> (<code>io.opentelemetry.exporter.otlp.trace.OtlpGrpcSpanExporter</code>)。</p><p>以下是完整的程式碼範例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    runBlocking</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> agent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AIAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            executor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> simpleOpenAIExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(openAIApiKey),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            llmModel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> OpenAIModels.Reasoning.GPT4oMini,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            systemPrompt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;You are a code assistant. Provide concise code examples.&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(OpenTelemetry) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // Add a console logger for local debugging</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                addSpanExporter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(LoggingSpanExporter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // Send traces to OpenTelemetry collector</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                addSpanExporter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    OtlpGrpcSpanExporter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setEndpoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://localhost:4317&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        agent.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { agent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Running the agent with OpenTelemetry tracing...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> agent.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Tell me a joke about programming&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Agent run completed with result: &#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$result</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;.&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                    &quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Check Jaeger UI at http://localhost:16686 to view traces&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="疑難排解" tabindex="-1">疑難排解 <a class="header-anchor" href="#疑難排解" aria-label="Permalink to &quot;疑難排解&quot;">​</a></h2><h3 id="常見問題" tabindex="-1">常見問題 <a class="header-anchor" href="#常見問題" aria-label="Permalink to &quot;常見問題&quot;">​</a></h3><ol><li><p><strong>Jaeger 或 Langfuse 中沒有出現追蹤</strong></p><ul><li>確保服務正在運行，並且 OpenTelemetry 連接埠 (4317) 可存取。</li><li>檢查 OpenTelemetry 匯出器是否配置了正確的端點。</li><li>確保在代理執行後等待幾秒鐘，以便追蹤匯出。</li></ul></li><li><p><strong>Span 缺失或追蹤不完整</strong></p><ul><li>驗證代理執行是否成功完成。</li><li>確保您沒有在代理執行後過快關閉應用程式。</li><li>在代理執行後添加延遲，以便為 Span 匯出留出時間。</li></ul></li><li><p><strong>過多的 Span 數量</strong></p><ul><li>考慮透過配置 <code>sampler</code> 屬性來使用不同的採樣策略。</li><li>例如，使用 <code>Sampler.traceIdRatioBased(0.1)</code> 來僅採樣 10% 的追蹤。</li></ul></li></ol>`,97)]))}const c=a(n,[["render",l]]);export{E as __pageData,c as default};
