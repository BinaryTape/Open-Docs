import{_ as y,C as n,c as m,o as c,G as e,ag as k,j as i,w as a,a as t}from"./chunks/framework.Bksy39di.js";const A=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ktor/server-jte.md","filePath":"ktor/server-jte.md","lastUpdated":1755457140000}'),v={name:"ktor/server-jte.md"};function F(f,s,C,b,_,q){const h=n("TopicTitle"),d=n("show-structure"),E=n("primary-label"),r=n("Links"),g=n("tldr"),l=n("code-block"),p=n("TabItem"),o=n("Tabs"),u=n("list");return c(),m("div",null,[e(h,{labelRef:"server-plugin",title:"JTE"}),e(d,{for:"chapter",depth:"2"}),e(E,{ref:"server-plugin"},null,512),e(g,null,{default:a(()=>[s[3]||(s[3]=i("p",null,[i("b",null,"所需依赖项"),t(": "),i("code",null,"io.ktor:ktor-server-jte")],-1)),s[4]||(s[4]=i("p",null,[i("b",null,"代码示例"),t(": "),i("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/jte"}," jte ")],-1)),i("p",null,[i("b",null,[e(r,{href:"/ktor/server-native",summary:"模块允许你通过分组路由来组织应用程序。"},{default:a(()=>s[0]||(s[0]=[t("原生服务器")])),_:1}),s[1]||(s[1]=t("支持"))]),s[2]||(s[2]=t(": ✖️ "))])]),_:1}),s[17]||(s[17]=k('<p>Ktor 允许你通过安装 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-jte/io.ktor.server.jte/-jte.html" target="_blank" rel="noreferrer">Jte</a> 插件，在应用程序中使用 <a href="https://github.com/casid/jte" target="_blank" rel="noreferrer">JTE 模板</a> 作为视图。</p><h2 id="add_dependencies" tabindex="-1">添加依赖项 <a class="header-anchor" href="#add_dependencies" aria-label="Permalink to &quot;添加依赖项 {id=&quot;add_dependencies&quot;}&quot;">​</a></h2><p> 要使用 <code>Jte</code>，你需要在构建脚本中包含 <code>ktor-server-jte</code> artifact： </p>',3)),e(o,{group:"languages"},{default:a(()=>[e(p,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:a(()=>[e(l,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-server-jte:$ktor_version")'})]),_:1}),e(p,{title:"Gradle (Groovy)","group-key":"groovy"},{default:a(()=>[e(l,{lang:"Groovy",code:'            implementation "io.ktor:ktor-server-jte:$ktor_version"'})]),_:1}),e(p,{title:"Maven","group-key":"maven"},{default:a(()=>[e(l,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-server-jte-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),s[18]||(s[18]=i("blockquote",null,[i("p",null,[t("要处理 "),i("code",null,".kte"),t(" 文件，你需要将 "),i("code",null,"gg.jte:jte-kotlin"),t(" artifact 添加到你的项目中。")])],-1)),s[19]||(s[19]=i("h2",{id:"install_plugin",tabindex:"-1"},[t("安装 Jte "),i("a",{class:"header-anchor",href:"#install_plugin","aria-label":'Permalink to "安装 Jte {id="install_plugin"}"'},"​")],-1)),i("p",null,[s[6]||(s[6]=t(" 要将 ")),s[7]||(s[7]=i("code",null,"Jte",-1)),s[8]||(s[8]=t(" 插件")),s[9]||(s[9]=i("a",{href:"#install"},"安装",-1)),s[10]||(s[10]=t("到应用程序， 请将其传递给指定 ")),e(r,{href:"/ktor/server-modules",summary:"模块允许你通过分组路由来组织应用程序。"},{default:a(()=>s[5]||(s[5]=[t("模块")])),_:1}),s[11]||(s[11]=t(" 中的 ")),s[12]||(s[12]=i("code",null,"install",-1)),s[13]||(s[13]=t(" 函数。 下面的代码片段展示了如何安装 ")),s[14]||(s[14]=i("code",null,"Jte",-1)),s[15]||(s[15]=t(" ... "))]),e(u,null,{default:a(()=>s[16]||(s[16]=[i("li",null,[t(" ... 在 "),i("code",null,"embeddedServer"),t(" 函数调用内部。 ")],-1),i("li",null,[t(" ... 在显式定义的 "),i("code",null,"module"),t(" 内部，它是一个 "),i("code",null,"Application"),t(" 类的扩展函数。 ")],-1)])),_:1}),e(o,null,{default:a(()=>[e(p,{title:"embeddedServer"},{default:a(()=>[e(l,{lang:"kotlin",code:`            import io.ktor.server.engine.*
            import io.ktor.server.netty.*
            import io.ktor.server.application.*
            import io.ktor.server.jte.*

            fun main() {
                embeddedServer(Netty, port = 8080) {
                    install(Jte)
                    // ...
                }.start(wait = true)
            }`})]),_:1}),e(p,{title:"module"},{default:a(()=>[e(l,{lang:"kotlin",code:`            import io.ktor.server.application.*
            import io.ktor.server.jte.*
            // ...
            fun Application.module() {
                install(Jte)
                // ...
            }`})]),_:1})]),_:1}),s[20]||(s[20]=k(`<p>在 <code>install</code> 代码块内部，你可以<a href="#configure">配置</a>如何加载 JTE 模板。</p><h2 id="configure" tabindex="-1">配置 Jte <a class="header-anchor" href="#configure" aria-label="Permalink to &quot;配置 Jte {id=&quot;configure&quot;}&quot;">​</a></h2><h3 id="template_loading" tabindex="-1">配置模板加载 <a class="header-anchor" href="#template_loading" aria-label="Permalink to &quot;配置模板加载 {id=&quot;template_loading&quot;}&quot;">​</a></h3><p>要加载 JTE 模板，你需要：</p><ol><li>创建一个 <code>CodeResolver</code> 用于解析模板代码。例如，你可以配置 <code>DirectoryCodeResolver</code> 从给定目录加载模板，或者配置 <code>ResourceCodeResolver</code> 从应用程序资源加载模板。</li><li>使用 <code>templateEngine</code> 属性指定模板引擎，它使用已创建的 <code>CodeResolver</code> 将模板转换为原生 Java/Kotlin 代码。</li></ol><p>例如，下面的代码片段使 Ktor 能够在 <code>templates</code> 目录中查找 JTE 模板：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> gg.jte.TemplateEngine</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> gg.jte.resolve.DirectoryCodeResolver</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.application.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.jte.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> java.nio.file.Path</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Jte) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> resolver </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DirectoryCodeResolver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;templates&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        templateEngine </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TemplateEngine.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(resolver, gg.jte.ContentType.Html)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="use_template" tabindex="-1">在响应中发送模板 <a class="header-anchor" href="#use_template" aria-label="Permalink to &quot;在响应中发送模板 {id=&quot;use_template&quot;}&quot;">​</a></h3><p>假设你在 <code>templates</code> 目录中有 <code>index.kte</code> 模板：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@param id: Int</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@param name: String</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Hello, \${name}!&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>要将模板用于指定的路由，请按照以下方式将 <code>JteContent</code> 传递给 <code>call.respond</code> 方法：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> params </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mapOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> to </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> to </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;John&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respond</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">JteContent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;index.kte&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, params))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,12))])}const B=y(v,[["render",F]]);export{A as __pageData,B as default};
