import{_ as o,C as i,c as s,o as n,j as a,G as r,ag as l,a as c}from"./chunks/framework.Bksy39di.js";const q=JSON.parse('{"title":"2.0.xから2.2.xへの移行","description":"","frontmatter":{},"headers":[],"relativePath":"ja/ktor/migration-to-22x.md","filePath":"ja/ktor/migration-to-22x.md","lastUpdated":1755457140000}'),d={name:"ja/ktor/migration-to-22x.md"};function h(p,e,u,k,g,m){const t=i("show-structure");return n(),s("div",null,[e[0]||(e[0]=a("h1",{id:"_2-0-xから2-2-xへの移行",tabindex:"-1"},[c("2.0.xから2.2.xへの移行 "),a("a",{class:"header-anchor",href:"#_2-0-xから2-2-xへの移行","aria-label":'Permalink to "2.0.xから2.2.xへの移行"'},"​")],-1)),r(t,{for:"chapter",depth:"2"}),e[1]||(e[1]=l(`<p>このガイドでは、Ktorアプリケーションを2.0.xバージョンから2.2.xに移行する手順を説明します。</p><blockquote><p><code>WARNING</code>非推奨レベルでマークされたAPIは、3.0.0リリースまで引き続き動作します。 非推奨レベルの詳細については、<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-deprecated/" target="_blank" rel="noreferrer">Deprecated</a>を参照してください。</p></blockquote><h2 id="server" tabindex="-1">Ktorサーバー <a class="header-anchor" href="#server" aria-label="Permalink to &quot;Ktorサーバー {id=&quot;server&quot;}&quot;">​</a></h2><h3 id="cookies" tabindex="-1">Cookie <a class="header-anchor" href="#cookies" aria-label="Permalink to &quot;Cookie {id=&quot;cookies&quot;}&quot;">​</a></h3><p>v2.2.0では、<a href="./server-responses#cookies">応答Cookie</a>の設定に関連する以下のAPIメンバーが変更されました。</p><ul><li><code>append</code>関数に渡される<code>maxAge</code>パラメーターの型が<code>Int</code>から<code>Long</code>に変更されました。</li><li><code>appendExpired</code>関数は非推奨になりました。代わりに<code>expires</code>パラメーターを指定して<code>append</code>関数を使用してください。</li></ul><h3 id="request-address-info" tabindex="-1">リクエストアドレス情報 <a class="header-anchor" href="#request-address-info" aria-label="Permalink to &quot;リクエストアドレス情報 {id=&quot;request-address-info&quot;}&quot;">​</a></h3><p>2.2.0バージョンから、リクエストが行われた先のホスト名/ポートを取得するために使用されていた<code>RequestConnectionPoint.host</code>および<code>RequestConnectionPoint.port</code>プロパティは非推奨になりました。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> originHost </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> call.request.origin.host</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> originPort </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> call.request.origin.port</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>代わりに<code>RequestConnectionPoint.serverHost</code>と<code>RequestConnectionPoint.serverPort</code>を使用してください。 また、リクエストが受信されたホスト名/ポートを返す<code>localHost</code>/<code>localPort</code>プロパティも追加しました。 詳細については、<a href="./server-forward-headers#original-request-information">元のリクエスト情報</a>を参照してください。</p><h3 id="merge-configs" tabindex="-1">設定のマージ <a class="header-anchor" href="#merge-configs" aria-label="Permalink to &quot;設定のマージ {id=&quot;merge-configs&quot;}&quot;">​</a></h3><p>v2.2.0より前は、<code>List&lt;ApplicationConfig&gt;.merge()</code>関数がアプリケーション設定をマージするために使用されていました。 両方の設定が同じキーを持っている場合、結果の設定は最初のものから値を取得します。 このリリースでは、この動作を改善するために以下のAPIが導入されました。</p><ul><li><code>public fun ApplicationConfig.withFallback(other: ApplicationConfig): ApplicationConfig</code>: この関数は<code>merge()</code>と同じように動作し、最初の設定から値を取得します。</li><li><code>public fun ApplicationConfig.mergeWith(other: ApplicationConfig): ApplicationConfig</code>: 結果の設定は2番目のものから値を取得します。</li></ul><h2 id="client" tabindex="-1">Ktorクライアント <a class="header-anchor" href="#client" aria-label="Permalink to &quot;Ktorクライアント {id=&quot;client&quot;}&quot;">​</a></h2><h3 id="persistent-storage" tabindex="-1">キャッシュ: 永続ストレージ <a class="header-anchor" href="#persistent-storage" aria-label="Permalink to &quot;キャッシュ: 永続ストレージ {id=&quot;persistent-storage&quot;}&quot;">​</a></h3><p>v2.2.0では、応答<a href="./client-caching">キャッシュ</a>に関連する以下のAPIが非推奨になりました。</p><ul><li><code>HttpCacheStorage</code>クラスは<code>CacheStorage</code>インターフェースに置き換えられました。これは、必要なプラットフォーム向けに永続ストレージを実装するために使用できます。</li><li><code>publicStorage</code>/<code>privateStorage</code>プロパティは、<code>CacheStorage</code>インスタンスを受け入れる対応する関数に置き換えられました。</li></ul><h3 id="custom-plugins" tabindex="-1">カスタムプラグイン <a class="header-anchor" href="#custom-plugins" aria-label="Permalink to &quot;カスタムプラグイン {id=&quot;custom-plugins&quot;}&quot;">​</a></h3><p>2.2.0リリースから、Ktorはカスタムクライアントプラグインを作成するための新しいAPIを提供します。 詳細については、<a href="./client-custom-plugins">カスタムクライアントプラグイン</a>を参照してください。</p><h2 id="new-mm" tabindex="-1">新しいメモリモデル <a class="header-anchor" href="#new-mm" aria-label="Permalink to &quot;新しいメモリモデル {id=&quot;new-mm&quot;}&quot;">​</a></h2><p>v2.2.0では、KtorはKotlinの1.7.20バージョンを使用しており、新しいKotlin/Nativeメモリモデルが<a href="https://kotlinlang.org/docs/whatsnew1720.html#the-new-kotlin-native-memory-manager-enabled-by-default" target="_blank" rel="noreferrer">デフォルトで有効になっています</a>。 これは、<a href="./server-native">Nativeサーバー</a>または<a href="./client-engines#native">Kotlin/Native</a>をターゲットとするクライアントエンジンに対して、明示的に有効にする必要がないことを意味します。</p>`,21))])}const b=o(d,[["render",h]]);export{q as __pageData,b as default};
