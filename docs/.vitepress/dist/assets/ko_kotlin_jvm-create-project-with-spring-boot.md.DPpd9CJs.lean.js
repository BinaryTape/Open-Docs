import{_ as d}from"./chunks/icon-1.K8qzZaho.js";import{_ as g}from"./chunks/icon-2-todo.CF_tKCD9.js";import{_ as E}from"./chunks/icon-3-todo.Gx4op1du.js";import{_ as c}from"./chunks/icon-4-todo.GaeEmerm.js";import{_ as u,a as m,b as y,c as F,d as b}from"./chunks/spring-application-response.CubByq9P.js";import{_ as C,C as p,c as B,o as f,j as s,G as a,ag as e,a as i,w as t}from"./chunks/framework.Bksy39di.js";const J=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kotlin/jvm-create-project-with-spring-boot.md","filePath":"ko/kotlin/jvm-create-project-with-spring-boot.md","lastUpdated":1754307826000}'),A={name:"ko/kotlin/jvm-create-project-with-spring-boot.md"};function S(_,n,q,v,D,w){const r=p("web-summary"),k=p("tldr"),l=p("def"),o=p("deflist"),h=p("code-block");return f(),B("div",null,[n[14]||(n[14]=s("h1",{id:"kotlin으로-spring-boot-프로젝트-생성하기",tabindex:"-1"},[i("Kotlin으로 Spring Boot 프로젝트 생성하기 "),s("a",{class:"header-anchor",href:"#kotlin으로-spring-boot-프로젝트-생성하기","aria-label":'Permalink to "Kotlin으로 Spring Boot 프로젝트 생성하기"'},"​")],-1)),a(r,null,{default:t(()=>n[0]||(n[0]=[i("IntelliJ IDEA를 사용하여 Kotlin으로 Spring Boot 애플리케이션을 생성합니다.")])),_:1}),a(k,null,{default:t(()=>n[1]||(n[1]=[s("p",null,[i("이것은 "),s("strong",null,"Spring Boot와 Kotlin 시작하기"),i(" 튜토리얼의 첫 번째 부분입니다:")],-1),s("br",null,null,-1),s("p",null,[s("img",{src:d,width:"20",alt:"First step"}),i(),s("strong",null,"Kotlin으로 Spring Boot 프로젝트 생성하기"),s("br"),s("img",{src:g,width:"20",alt:"Second step"}),i(" Spring Boot 프로젝트에 데이터 클래스 추가하기"),s("br"),s("img",{src:E,width:"20",alt:"Third step"}),i(" Spring Boot 프로젝트에 데이터베이스 지원 추가하기"),s("br"),s("img",{src:c,width:"20",alt:"Fourth step"}),i(" Spring Data CrudRepository를 사용하여 데이터베이스 액세스하기"),s("br")],-1)])),_:1}),n[15]||(n[15]=e("",8)),n[16]||(n[16]=s("h2",{"initial-collapse-state":"collapsed",collapsible:"true",id:"프로젝트-gradle-빌드-파일-살펴보기",tabindex:"-1"},[i("프로젝트 Gradle 빌드 파일 살펴보기 "),s("a",{class:"header-anchor",href:"#프로젝트-gradle-빌드-파일-살펴보기","aria-label":'Permalink to "프로젝트 Gradle 빌드 파일 살펴보기 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),n[17]||(n[17]=e("",10)),a(o,{collapsible:"true"},{default:t(()=>[a(l,{title:"클래스 선언하기 – class DemoApplication"},{default:t(()=>n[2]||(n[2]=[s("p",null,[i("패키지 선언과 임포트 문 바로 뒤에 첫 번째 클래스 선언인 "),s("code",null,"class DemoApplication"),i("을 볼 수 있습니다.")],-1),s("p",null,[i("Kotlin에서 클래스에 멤버(프로퍼티 또는 함수)가 포함되지 않으면 클래스 본문("),s("code",null,"{}"),i(")을 완전히 생략할 수 있습니다.")],-1)])),_:1}),a(l,{title:"@SpringBootApplication 애노테이션"},{default:t(()=>n[3]||(n[3]=[s("p",null,[s("a",{href:"https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#using.using-the-springbootapplication-annotation"},[s("code",null,"@SpringBootApplication"),i(" 애노테이션")]),i("은 Spring Boot 애플리케이션의 편의 애노테이션입니다. 이 애노테이션은 Spring Boot의 "),s("a",{href:"https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#using.auto-configuration"},"자동 구성"),i(", "),s("a",{href:"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/ComponentScan.html"},"컴포넌트 스캔"),i('을 활성화하고 "애플리케이션 클래스"에 추가 구성을 정의할 수 있도록 합니다. ')],-1)])),_:1}),a(l,{title:"프로그램 진입점 – main()"},{default:t(()=>n[4]||(n[4]=[s("p",null,[i("["),s("a",{href:"/ko/kotlin/basic-syntax#program-entry-point"},[s("code",null,"main()")]),i("] 함수는 애플리케이션의 진입점입니다.")],-1),s("p",null,[s("code",null,"DemoApplication"),i(" 클래스 외부에 ["),s("a",{href:"/ko/kotlin/functions#function-scope"},"최상위 함수"),i("]로 선언됩니다. "),s("code",null,"main()"),i(" 함수는 Spring Framework를 사용하여 애플리케이션을 시작하기 위해 Spring의 "),s("code",null,"runApplication(*args)"),i(" 함수를 호출합니다.")],-1)])),_:1}),a(l,{title:"가변 인자 – args: Array<String>"},{default:t(()=>n[5]||(n[5]=[s("p",null,[s("code",null,"runApplication()"),i(" 함수의 선언을 확인하면, 함수의 매개변수가 ["),s("a",{href:"/ko/kotlin/functions#variable-number-of-arguments-varargs"},[s("code",null,"vararg"),i(" 수정자")]),i("]로 표시되어 있는 것을 볼 수 있습니다: "),s("code",null,"vararg args: String"),i(". 이는 함수에 가변 개수의 String 인자를 전달할 수 있음을 의미합니다. ")],-1)])),_:1}),a(l,{title:"스프레드 연산자 – (*args)"},{default:t(()=>n[6]||(n[6]=[s("p",null,[s("code",null,"args"),i("는 String 배열로 선언된 "),s("code",null,"main()"),i(" 함수의 매개변수입니다. String 배열이 있고 그 내용을 함수에 전달하고자 할 때, 스프레드 연산자(배열 앞에 별표 기호 "),s("code",null,"*"),i("를 붙입니다)를 사용하세요. ")],-1)])),_:1})]),_:1}),n[18]||(n[18]=e("",4)),a(o,{collapsible:"true"},{default:t(()=>[a(l,{title:"@RestController 애노테이션"},{default:t(()=>n[7]||(n[7]=[s("p",null,[i("Spring에게 "),s("code",null,"MessageController"),i("가 REST 컨트롤러임을 알려야 하므로, "),s("code",null,"@RestController"),i(" 애노테이션으로 표시해야 합니다.")],-1),s("p",null,[i("이 애노테이션은 "),s("code",null,"DemoApplication"),i(" 클래스와 동일한 패키지에 있기 때문에 이 클래스가 컴포넌트 스캔에 의해 감지될 것임을 의미합니다.")],-1)])),_:1}),a(l,{title:"@GetMapping 애노테이션"},{default:t(()=>[n[9]||(n[9]=s("p",null,[s("code",null,"@GetMapping"),i("은 HTTP GET 호출에 해당하는 엔드포인트를 구현하는 REST 컨트롤러의 함수를 표시합니다:")],-1)),a(h,{lang:"kotlin"},{default:t(()=>n[8]||(n[8]=[i(' @GetMapping("/") fun index(@RequestParam("name") name: String) = "Hello, $name!" ')])),_:1})]),_:1}),a(l,{title:"@RequestParam 애노테이션"},{default:t(()=>n[10]||(n[10]=[s("p",null,[i("함수 매개변수 "),s("code",null,"name"),i("은 "),s("code",null,"@RequestParam"),i(" 애노테이션으로 표시됩니다. 이 애노테이션은 메서드 매개변수가 웹 요청 매개변수에 바인딩되어야 함을 나타냅니다.")],-1),s("p",null,[i("따라서 루트에서 애플리케이션에 접근하고 "),s("code",null,"/?name=<your-value>"),i('와 같이 "name"이라는 요청 매개변수를 제공하면, 해당 매개변수 값이 '),s("code",null,"index()"),i(" 함수를 호출하는 인자로 사용됩니다.")],-1)])),_:1}),a(l,{title:"단일 표현식 함수 – index()"},{default:t(()=>n[11]||(n[11]=[s("p",null,[s("code",null,"index()"),i(" 함수는 하나의 문장만 포함하므로, ["),s("a",{href:"/ko/kotlin/functions#single-expression-functions"},"단일 표현식 함수"),i("]로 선언할 수 있습니다.")],-1),s("p",null,[i("이는 중괄호를 생략하고 등호("),s("code",null,"="),i(") 뒤에 본문을 지정할 수 있음을 의미합니다.")],-1)])),_:1}),a(l,{title:"함수 반환 타입에 대한 타입 추론"},{default:t(()=>n[12]||(n[12]=[s("p",null,[s("code",null,"index()"),i(" 함수는 반환 타입을 명시적으로 선언하지 않습니다. 대신, 컴파일러는 등호("),s("code",null,"="),i(")의 오른쪽에 있는 문장의 결과를 보고 반환 타입을 추론합니다.")],-1),s("p",null,[s("code",null,"Hello, $name!"),i(" 표현식의 타입은 "),s("code",null,"String"),i("이며, 따라서 함수의 반환 타입도 "),s("code",null,"String"),i("입니다.")],-1)])),_:1}),a(l,{title:"문자열 템플릿 – $name"},{default:t(()=>n[13]||(n[13]=[s("p",null,[s("code",null,"Hello, $name!"),i(" 표현식은 Kotlin에서 ["),s("a",{href:"/ko/kotlin/strings#string-templates"},[s("i",null,"문자열 템플릿")]),i("]이라고 불립니다.")],-1),s("p",null,"문자열 템플릿은 포함된 표현식을 포함하는 문자열 리터럴입니다.",-1),s("p",null,"이는 문자열 연결 연산을 편리하게 대체할 수 있습니다.",-1)])),_:1})]),_:1}),n[19]||(n[19]=e("",6))])}const R=C(A,[["render",S]]);export{J as __pageData,R as default};
