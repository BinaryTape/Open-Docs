import{_ as h,C as o,c,o as g,j as i,G as e,ag as p,a,w as t}from"./chunks/framework.Bksy39di.js";const C=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ja/ktor/client-multiplatform.md","filePath":"ja/ktor/client-multiplatform.md","lastUpdated":1755457140000}'),m={name:"ja/ktor/client-multiplatform.md"};function u(y,n,E,_,f,v){const d=o("tldr"),k=o("link-summary"),s=o("code-block"),l=o("TabItem"),r=o("Tabs");return g(),c("div",null,[n[6]||(n[6]=i("h1",{id:"マルチプラットフォーム",tabindex:"-1"},[a("マルチプラットフォーム "),i("a",{class:"header-anchor",href:"#マルチプラットフォーム","aria-label":'Permalink to "マルチプラットフォーム"'},"​")],-1)),e(d,null,{default:t(()=>n[0]||(n[0]=[i("p",null,[a(" コード例: "),i("a",{href:"https://github.com/ktorio/ktor-samples/tree/main/client-mpp"},"client-mpp")],-1)])),_:1}),e(k,null,{default:t(()=>n[1]||(n[1]=[a(" Ktorクライアントはマルチプラットフォームプロジェクトで使用でき、Android、JavaScript、およびNativeプラットフォームをサポートしています。 ")])),_:1}),n[7]||(n[7]=p('<p><a href="./client-create-and-configure">Ktor HTTPクライアント</a>は<a href="https://kotlinlang.org/docs/multiplatform.html" target="_blank" rel="noreferrer">マルチプラットフォームプロジェクト</a>で使用でき、以下のプラットフォームをサポートしています:</p><ul><li>JVM</li><li><a href="https://kotlinlang.org/docs/android-overview.html" target="_blank" rel="noreferrer">Android</a></li><li><a href="https://kotlinlang.org/docs/js-overview.html" target="_blank" rel="noreferrer">JavaScript</a></li><li><a href="https://kotlinlang.org/docs/native-overview.html" target="_blank" rel="noreferrer">Native</a></li></ul><h2 id="add-dependencies" tabindex="-1">依存関係の追加 <a class="header-anchor" href="#add-dependencies" aria-label="Permalink to &quot;依存関係の追加 {id=&quot;add-dependencies&quot;}&quot;">​</a></h2><p>プロジェクトでKtor HTTPクライアントを使用するには、少なくとも2つの依存関係、つまりクライアントの依存関係と<a href="./client-engines">エンジン</a>の依存関係を追加する必要があります。マルチプラットフォームプロジェクトの場合、これらの依存関係は次のように追加します。</p>',4)),i("ol",null,[i("li",null,[n[2]||(n[2]=i("p",null,[i("code",null,"commonMain"),a(" ソースセットの "),i("code",null,"build.gradle"),a(" または "),i("code",null,"build.gradle.kts"),a(" ファイルに "),i("code",null,"ktor-client-core"),a(" への依存関係を追加して、共通コードでKtorクライアントを使用します。")],-1)),e(r,{group:"languages"},{default:t(()=>[e(l,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:t(()=>[e(s,{lang:"Kotlin",code:`               val commonMain by getting {
                   dependencies {
                       implementation("io.ktor:ktor-client-core:$ktor_version")
                   }
               }`})]),_:1}),e(l,{title:"Gradle (Groovy)","group-key":"groovy"},{default:t(()=>[e(s,{lang:"Groovy",code:`               commonMain {
                   dependencies {
                       implementation "io.ktor:ktor-client-core:$ktor_version"
                   }
               }`})]),_:1})]),_:1})]),i("li",null,[n[3]||(n[3]=i("p",null,[a("必要なプラットフォーム用の"),i("a",{href:"./client-engines#dependencies"},"エンジン依存関係"),a("を対応するソースセットに追加します。Androidの場合、"),i("code",null,"androidMain"),a(" ソースセットに"),i("a",{href:"./client-engines#android"},"Android"),a("エンジンの依存関係を追加できます。")],-1)),e(r,{group:"languages"},{default:t(()=>[e(l,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:t(()=>[e(s,{lang:"Kotlin",code:`               val androidMain by getting {
                   dependencies {
                       implementation("io.ktor:ktor-client-android:$ktor_version")
                   }
               }`})]),_:1}),e(l,{title:"Gradle (Groovy)","group-key":"groovy"},{default:t(()=>[e(s,{lang:"Groovy",code:`               androidMain {
                   dependencies {
                       implementation "io.ktor:ktor-client-android:$ktor_version"
                   }
               }`})]),_:1})]),_:1}),n[4]||(n[4]=i("p",null,[a("iOSの場合、"),i("code",null,"iosMain"),a("に"),i("a",{href:"./client-engines#darwin"},"Darwin"),a("エンジンの依存関係を追加する必要があります。")],-1)),e(r,{group:"languages"},{default:t(()=>[e(l,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:t(()=>[e(s,{lang:"Kotlin",code:`               val iosMain by getting {
                   dependencies {
                       implementation("io.ktor:ktor-client-darwin:$ktor_version")
                   }
               }`})]),_:1}),e(l,{title:"Gradle (Groovy)","group-key":"groovy"},{default:t(()=>[e(s,{lang:"Groovy",code:`               iosMain {
                   dependencies {
                       implementation "io.ktor:ktor-client-darwin:$ktor_version"
                   }
               }`})]),_:1})]),_:1}),n[5]||(n[5]=i("p",null,[a("各プラットフォームでサポートされているエンジンを確認するには、"),i("a",{href:"./client-engines#dependencies"},"エンジン依存関係の追加"),a("を参照してください。")],-1))])]),n[8]||(n[8]=p(`<h2 id="create-client" tabindex="-1">クライアントの作成 <a class="header-anchor" href="#create-client" aria-label="Permalink to &quot;クライアントの作成 {id=&quot;create-client&quot;}&quot;">​</a></h2><p>マルチプラットフォームプロジェクトでクライアントを作成するには、プロジェクトの<a href="https://kotlinlang.org/docs/mpp-discover-project.html#source-sets" target="_blank" rel="noreferrer">共通コード</a>で<a href="https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client/-http-client/index.html" target="_blank" rel="noreferrer">HttpClient</a>コンストラクタを呼び出します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>このコードスニペットでは、<code>HttpClient</code>コンストラクタはエンジンをパラメータとして受け取りません。クライアントは、<a href="#add-dependencies">ビルドスクリプトで追加された</a>アーティファクトに応じて、必要なプラットフォームのエンジンを選択します。</p><p>特定のプラットフォームのエンジン設定を調整する必要がある場合は、対応するエンジンクラスを<code>HttpClient</code>コンストラクタへの引数として渡し、<code>engine</code>メソッドを使用してエンジンを設定します。例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.engine.android.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> java.net.Proxy</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> java.net.InetSocketAddress</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Android) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    engine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // this: AndroidEngineConfig</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        connectTimeout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100_000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        socketTimeout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100_000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        proxy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Proxy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Proxy.Type.HTTP, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">InetSocketAddress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;localhost&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8080</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>すべてのエンジンタイプを設定する方法については、<a href="./client-engines">クライアントエンジン</a>を参照してください。</p><h2 id="code-example" tabindex="-1">コード例 <a class="header-anchor" href="#code-example" aria-label="Permalink to &quot;コード例 {id=&quot;code-example&quot;}&quot;">​</a></h2><p><a href="https://github.com/ktorio/ktor-samples/tree/main/client-mpp" target="_blank" rel="noreferrer">mpp/client-mpp</a>プロジェクトは、マルチプラットフォームアプリケーションでKtorクライアントを使用する方法を示しています。このアプリケーションは、<code>Android</code>、<code>iOS</code>、<code>JavaScript</code>、および<code>macosX64</code>の各プラットフォームで動作します。</p>`,9))])}const b=h(m,[["render",u]]);export{C as __pageData,b as default};
