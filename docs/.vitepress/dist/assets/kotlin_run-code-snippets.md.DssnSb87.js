import{_ as o,a as r,b as s,c as n,d as g,e,f as a,g as l,h as i,i as d,j as h,k as p}from"./chunks/ki-shell-dependency.DOxXXxVC.js";import{_ as c}from"./chunks/ki-shell-load.DC1M6lEB.js";import{_ as u,c as m,o as k,ag as b}from"./chunks/framework.Bksy39di.js";const I=JSON.parse('{"title":"运行代码片段","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/run-code-snippets.md","filePath":"kotlin/run-code-snippets.md","lastUpdated":1754307826000}'),_={name:"kotlin/run-code-snippets.md"};function f(P,t,q,y,w,x){return k(),m("div",null,t[0]||(t[0]=[b('<h1 id="运行代码片段" tabindex="-1">运行代码片段 <a class="header-anchor" href="#运行代码片段" aria-label="Permalink to &quot;运行代码片段&quot;">​</a></h1><p>Kotlin 代码通常组织在<strong>项目</strong>中，您可以在 IDE、文本编辑器或其他工具中处理这些<strong>项目</strong>。然而，如果您想快速了解<strong>函数</strong>的工作方式或查找表达式的值，则无需创建新的<strong>项目</strong>并<strong>构建</strong>它。请<strong>查看</strong>以下三种便捷的方式，可在不同环境中即时运行 Kotlin 代码：</p><ul><li><a href="#ide-scratches-and-worksheets">IDE 中的暂存文件和工作表</a>。</li><li><a href="#browser-kotlin-playground">浏览器中的 Kotlin Playground</a>。</li><li><a href="#command-line-ki-shell">命令行中的 ki shell</a>。</li></ul><h2 id="ide-暂存和工作表" tabindex="-1">IDE：暂存和工作表 <a class="header-anchor" href="#ide-暂存和工作表" aria-label="Permalink to &quot;IDE：暂存和工作表&quot;">​</a></h2><p>IntelliJ IDEA 和 Android Studio 支持 Kotlin <a href="https://www.jetbrains.com/help/idea/kotlin-repl.html#efb8fb32" target="_blank" rel="noreferrer">暂存文件和工作表</a>。</p><ul><li><p><strong>暂存文件</strong>（或简称<strong>暂存</strong>）允许您在与<strong>项目</strong>相同的 IDE 窗口中创建代码草稿并即时运行它们。暂存不<strong>与项目绑定</strong>；您可以从<strong>操作系统</strong>上的任何 IntelliJ IDEA 窗口中<strong>访问和运行</strong>所有暂存。</p><p>要创建 Kotlin 暂存，请点击 <strong>File</strong> | <strong>New</strong> | <strong>Scratch File</strong> 并选择 <strong>Kotlin</strong> 类型。</p></li><li><p><strong>工作表</strong>是<strong>项目文件</strong>：它们存储在<strong>项目目录</strong>中并<strong>与项目模块绑定</strong>。工作表适用于编写不构成<strong>软件单元</strong>，但仍应<strong>一起存储在项目</strong>中的代码片段，例如<strong>教学或演示材料</strong>。</p><p>要在<strong>项目目录</strong>中创建 Kotlin 工作表，请在<strong>项目树</strong>中<strong>右键点击</strong>该目录并选择 <strong>New</strong> | <strong>Kotlin Class/File</strong> | <strong>Kotlin Worksheet</strong>。</p><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>Kotlin 工作表在 <a href="https://blog.jetbrains.com/idea/2024/11/k2-mode-becomes-stable/" target="_blank" rel="noreferrer">K2 模式</a>中不受<strong>支持</strong>。我们<strong>正在努力提供</strong>具有<strong>类似功能</strong>的<strong>替代方案</strong>。</p></div></li></ul><p><strong>语法高亮</strong>、<strong>自动补全</strong>以及其他 IntelliJ IDEA <strong>代码编辑特性</strong>在暂存和工作表中均<strong>受支持</strong>。无需<strong>声明</strong> <code>main()</code> <strong>函数</strong>——您编写的所有代码都<strong>如同在 <code>main()</code> 的函数体中执行</strong>。</p><p>在暂存或工作表中<strong>完成编写</strong>代码后，点击 <strong>Run</strong>。<strong>执行结果</strong>将<strong>显示在您代码的对应行中</strong>。</p><p><img src="'+o+'" alt="Run scratch" width="700"></p><h3 id="交互模式" tabindex="-1">交互模式 <a class="header-anchor" href="#交互模式" aria-label="Permalink to &quot;交互模式&quot;">​</a></h3><p>IDE 可以<strong>自动</strong>运行暂存和工作表中的代码。为了<strong>在您停止输入后立即获取执行结果</strong>，请<strong>开启</strong> <strong>Interactive mode</strong>（<strong>交互模式</strong>）。</p><p><img src="'+r+'" alt="Scratch interactive mode" width="700"></p><h3 id="使用模块" tabindex="-1">使用模块 <a class="header-anchor" href="#使用模块" aria-label="Permalink to &quot;使用模块&quot;">​</a></h3><p>您可以在暂存和工作表中使用 Kotlin <strong>项目</strong>中的<strong>类或函数</strong>。</p><p>工作表<strong>自动访问</strong>其<strong>所在模块</strong>中的类和函数。</p><p>要在暂存中使用<strong>项目</strong>中的类或函数，请<strong>照常</strong>使用 <code>import</code> <strong>语句将它们导入暂存文件</strong>。然后编写您的代码，并在 <strong>Use classpath of module</strong> 列表中<strong>选中相应模块</strong>后运行它。</p><p>暂存和工作表都使用<strong>连接模块</strong>的<strong>编译版本</strong>。因此，如果您<strong>修改模块的源文件</strong>，当您<strong>重新构建模块</strong>时，这些更改将<strong>传播到</strong>暂存和工作表。要在每次运行暂存或工作表之前<strong>自动重新构建模块</strong>，请选择 <strong>Make module before Run</strong>。</p><p><img src="'+s+'" alt="Scratch select module" width="700"></p><h3 id="以-repl-模式运行" tabindex="-1">以 REPL 模式运行 <a class="header-anchor" href="#以-repl-模式运行" aria-label="Permalink to &quot;以 REPL 模式运行&quot;">​</a></h3><p>要对暂存或工作表中的每个<strong>特定表达式求值</strong>，请<strong>选中 Use REPL 选项后运行</strong>。代码行将<strong>顺序地</strong>运行，<strong>提供每个调用的结果</strong>。您可以稍后通过<strong>引用其自动生成的 <code>res*</code> 名称</strong>（它们<strong>显示在相应行中</strong>）在同一文件中使用这些结果。</p><p><img src="'+n+'" alt="Scratch REPL" width="700"></p><h2 id="浏览器-kotlin-playground" tabindex="-1">浏览器：Kotlin Playground <a class="header-anchor" href="#浏览器-kotlin-playground" aria-label="Permalink to &quot;浏览器：Kotlin Playground&quot;">​</a></h2><p><a href="https://play.kotlinlang.org/" target="_blank" rel="noreferrer">Kotlin Playground</a> 是一款用于在浏览器中<strong>编写、运行和共享</strong> Kotlin 代码的在线<strong>应用程序</strong>。</p><h3 id="编写和编辑代码" tabindex="-1">编写和编辑代码 <a class="header-anchor" href="#编写和编辑代码" aria-label="Permalink to &quot;编写和编辑代码&quot;">​</a></h3><p>在 Playground 的<strong>编辑器区域</strong>，您可以像在<strong>源文件</strong>中一样编写代码：</p><ul><li>以任意顺序添加您自己的类、函数和<strong>顶层声明</strong>。</li><li>在 <code>main()</code> <strong>函数体</strong>中编写<strong>可执行部分</strong>。</li></ul><p>与<strong>典型 Kotlin 项目</strong>中一样，Playground 中的 <code>main()</code> <strong>函数</strong>可以有 <code>args</code> <strong>形参</strong>或<strong>没有任何形参</strong>。要在执行时<strong>传递程序实参</strong>，请将它们写入 <strong>Program arguments</strong> 字段。</p><p><img src="'+g+'" alt="Playground: code completion" width="700"></p><p>Playground 会<strong>高亮代码</strong>并在您输入时<strong>显示代码补全选项</strong>。它<strong>自动导入</strong>来自<strong>标准库</strong>和 <a href="/kotlin/coroutines-overview"><code>kotlinx.coroutines</code></a> 的<strong>声明</strong>。</p><h3 id="选择执行环境" tabindex="-1">选择执行环境 <a class="header-anchor" href="#选择执行环境" aria-label="Permalink to &quot;选择执行环境&quot;">​</a></h3><p>Playground 提供了<strong>自定义执行环境</strong>的方式：</p><ul><li>多个 Kotlin 版本，包括<strong>可用的未来版本抢先体验预览</strong>。</li><li>多个<strong>后端</strong>用于运行代码：JVM、JS（<strong>旧版</strong>或 <a href="/kotlin/js-ir-compiler">IR compiler</a>，或 Canvas），或 JUnit。</li></ul><p><img src="'+e+'" alt="Playground: environment setup" width="700"></p><p>对于 JS 后端，您还可以查看<strong>生成的 JS 代码</strong>。</p><p><img src="'+a+'" alt="Playground: generated JS" width="700"></p><h3 id="在线共享代码" tabindex="-1">在线共享代码 <a class="header-anchor" href="#在线共享代码" aria-label="Permalink to &quot;在线共享代码&quot;">​</a></h3><p>使用 Playground <strong>与他人共享代码</strong>——点击 <strong>Copy link</strong> 并<strong>将其发送给您想展示代码的任何人</strong>。</p><p>您还可以将 Playground 中的<strong>代码片段嵌入</strong>到其他网站中，甚至<strong>使它们可运行</strong>。点击 <strong>Share code</strong> 将您的<strong>示例嵌入</strong>到任何<strong>网页</strong>或 <a href="https://medium.com/" target="_blank" rel="noreferrer">Medium</a> <strong>文章</strong>中。</p><p><img src="'+l+'" alt="Playground: share code" width="700"></p><h2 id="命令行-ki-shell" tabindex="-1">命令行：ki shell <a class="header-anchor" href="#命令行-ki-shell" aria-label="Permalink to &quot;命令行：ki shell&quot;">​</a></h2><p><a href="https://github.com/Kotlin/kotlin-interactive-shell" target="_blank" rel="noreferrer">ki shell</a>（<strong>Kotlin Interactive Shell</strong>）是用于<strong>在终端中运行</strong> Kotlin 代码的<strong>命令行工具</strong>。它<strong>适用于</strong> Linux、macOS 和 Windows。</p><p>ki shell 提供了<strong>基本的代码求值能力</strong>，以及以下<strong>高级特性</strong>：</p><ul><li>代码补全</li><li><strong>类型检测</strong></li><li><strong>外部依赖项</strong></li><li><strong>代码片段</strong>的<strong>粘贴模式</strong></li><li>脚本支持</li></ul><p>关于 <a href="https://github.com/Kotlin/kotlin-interactive-shell" target="_blank" rel="noreferrer">ki shell GitHub <strong>版本库</strong></a>的<strong>更多详情</strong>。</p><h3 id="安装并运行-ki-shell" tabindex="-1">安装并运行 ki shell <a class="header-anchor" href="#安装并运行-ki-shell" aria-label="Permalink to &quot;安装并运行 ki shell&quot;">​</a></h3><p>要<strong>安装</strong> ki shell，请从 <a href="https://github.com/Kotlin/kotlin-interactive-shell" target="_blank" rel="noreferrer">GitHub</a> <strong>下载最新版本</strong>并将其<strong>解压</strong>到<strong>您选择的目录</strong>。</p><p>在 macOS 上，您还可以<strong>通过运行以下命令</strong>使用 Homebrew <strong>安装</strong> ki shell：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">brew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ki</span></span></code></pre></div><p>要<strong>启动</strong> ki shell，请在 Linux 和 macOS 上运行 <code>bin/ki.sh</code>（如果 ki shell 是<strong>通过 Homebrew 安装</strong>的，则只需运行 <code>ki</code>），或在 Windows 上运行 <code>bin\\ki.bat</code>。</p><p>shell 运行后，您可以<strong>立即开始编写</strong> Kotlin 代码。键入 <code>:help</code>（或 <code>:h</code>）以查看 ki shell 中<strong>可用</strong>的命令。</p><h3 id="代码补全和高亮" tabindex="-1">代码补全和高亮 <a class="header-anchor" href="#代码补全和高亮" aria-label="Permalink to &quot;代码补全和高亮&quot;">​</a></h3><p>当您按下 <strong>Tab</strong> 键时，ki shell 会<strong>显示代码补全选项</strong>。它还在您输入时<strong>提供语法高亮</strong>。您可以<strong>通过输入</strong> <code>:syntax off</code> <strong>禁用此特性</strong>。</p><p><img src="'+i+'" alt="ki shell highlighting and completion" width="700"></p><p>当您按下 <strong>Enter</strong> 键时，ki shell 会<strong>对输入的行求值</strong>并<strong>打印结果</strong>。<strong>表达式的值作为</strong>具有<strong>自动生成名称</strong>（例如 <code>res*</code>）的<strong>变量打印</strong>。您稍后可以在<strong>您运行的代码中使用这些变量</strong>。如果<strong>输入的构造不完整</strong>（<strong>例如</strong>，带有条件但<strong>没有主体</strong>的 <code>if</code> 语句），shell 会打印三个点并<strong>等待剩余部分</strong>。</p><p><img src="'+d+'" alt="ki shell results" width="700"></p><h3 id="检测表达式类型" tabindex="-1">检测表达式类型 <a class="header-anchor" href="#检测表达式类型" aria-label="Permalink to &quot;检测表达式类型&quot;">​</a></h3><p>对于<strong>复杂表达式</strong>或您<strong>不熟悉的 API</strong>，ki shell <strong>提供</strong>了 <code>:type</code>（或 <code>:t</code>）命令，它会<strong>显示表达式的类型</strong>：</p><p><img src="'+h+'" alt="ki shell type" width="700"></p><h3 id="加载代码" tabindex="-1">加载代码 <a class="header-anchor" href="#加载代码" aria-label="Permalink to &quot;加载代码&quot;">​</a></h3><p>如果您需要的代码<strong>存储在其他地方</strong>，则有<strong>两种加载和使用它</strong>的方式：</p><ul><li>使用 <code>:load</code>（或 <code>:l</code>）命令加载<strong>源文件</strong>。</li><li>使用 <code>:paste</code>（或 <code>:p</code>）命令在<strong>粘贴模式</strong>下复制并粘贴<strong>代码片段</strong>。</li></ul><p><img src="'+c+'" alt="ki shell load file" width="700"></p><p><code>ls</code> 命令<strong>显示可用符号</strong>（<strong>变量和函数</strong>）。</p><h3 id="添加外部依赖项" tabindex="-1">添加外部依赖项 <a class="header-anchor" href="#添加外部依赖项" aria-label="Permalink to &quot;添加外部依赖项&quot;">​</a></h3><p>除了<strong>标准库</strong>之外，ki shell 还<strong>支持外部依赖项</strong>。这使您可以在其中<strong>尝试第三方库</strong>，<strong>而无需创建整个项目</strong>。</p><p>要在 ki shell 中<strong>添加第三方库</strong>，请使用 <code>:dependsOn</code> 命令。<strong>默认情况下</strong>，ki shell <strong>与 Maven Central 协作</strong>，但如果您<strong>通过</strong> <code>:repository</code> 命令<strong>连接</strong>其他<strong>仓库</strong>，则也可以使用它们：</p><p><img src="'+p+'" alt="ki shell external dependency" width="700"></p>',67)]))}const E=u(_,[["render",f]]);export{I as __pageData,E as default};
