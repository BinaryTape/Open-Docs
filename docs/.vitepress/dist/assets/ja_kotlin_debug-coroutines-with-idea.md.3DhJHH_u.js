import{_ as p,a as k,b as h}from"./chunks/variable-optimised-out.gsL8I0ER.js";import{_ as d,a as g,b as c,c as E}from"./chunks/coroutine-debug-3.D_74SQPz.js";import{_ as u,C as o,c as y,o as m,ag as a,j as i,a as t,G as n,w as l}from"./chunks/framework.Bksy39di.js";const I=JSON.parse('{"title":"IntelliJ IDEA でコルーチンをデバッグする – チュートリアル","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/debug-coroutines-with-idea.md","filePath":"ja/kotlin/debug-coroutines-with-idea.md","lastUpdated":1754307826000}'),F={name:"ja/kotlin/debug-coroutines-with-idea.md"};function b(_,s,C,f,B,x){const e=o("tab"),r=o("tabs");return m(),y("div",null,[s[6]||(s[6]=a('<h1 id="intellij-idea-でコルーチンをデバッグする-–-チュートリアル" tabindex="-1">IntelliJ IDEA でコルーチンをデバッグする – チュートリアル <a class="header-anchor" href="#intellij-idea-でコルーチンをデバッグする-–-チュートリアル" aria-label="Permalink to &quot;IntelliJ IDEA でコルーチンをデバッグする – チュートリアル&quot;">​</a></h1><p>このチュートリアルでは、Kotlinコルーチンの作成方法と、IntelliJ IDEA を使用したデバッグ方法を説明します。</p><p>このチュートリアルは、<a href="/ja/kotlin/coroutines-guide">コルーチン</a>の概念について事前に知識があることを前提としています。</p><h2 id="コルーチンの作成" tabindex="-1">コルーチンの作成 <a class="header-anchor" href="#コルーチンの作成" aria-label="Permalink to &quot;コルーチンの作成&quot;">​</a></h2>',4)),i("ol",null,[s[4]||(s[4]=i("li",null,[i("p",null,[t("IntelliJ IDEA で Kotlin プロジェクトを開きます。プロジェクトがない場合は、"),i("a",{href:"/ja/kotlin/jvm-get-started#create-a-project"},"作成してください"),t("。")])],-1)),i("li",null,[s[2]||(s[2]=i("p",null,[t("Gradle プロジェクトで "),i("code",null,"kotlinx.coroutines"),t(" ライブラリを使用するには、"),i("code",null,"build.gradle(.kts)"),t(" に次の依存関係を追加します。")],-1)),n(r,{group:"build-script"},{default:l(()=>[n(e,{title:"Kotlin","group-key":"kotlin"},{default:l(()=>s[0]||(s[0]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"dependencies"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),t(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    implementation"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"org.jetbrains.kotlinx:kotlinx-coroutines-core:1.10.2"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),t(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),n(e,{title:"Groovy","group-key":"groovy"},{default:l(()=>s[1]||(s[1]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"dependencies {")]),t(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    implementation "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.10.2'")]),t(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),s[3]||(s[3]=i("p",null,[t("その他のビルドシステムについては、"),i("a",{href:"https://github.com/Kotlin/kotlinx.coroutines#using-in-your-projects",target:"_blank",rel:"noreferrer"},[i("code",null,"kotlinx.coroutines"),t(" README")]),t(" の手順を参照してください。")],-1))]),s[5]||(s[5]=a(`<li><p><code>src/main/kotlin</code> 内の <code>Main.kt</code> ファイルを開きます。</p><p><code>src</code> ディレクトリには Kotlin ソースファイルとリソースが含まれています。<code>Main.kt</code> ファイルには、<code>Hello World!</code> を出力するサンプルコードが含まれています。</p></li><li><p><code>main()</code> 関数のコードを変更します。</p><ul><li>コルーチンをラップするために、<a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/run-blocking.html" target="_blank" rel="noreferrer"><code>runBlocking()</code></a> ブロックを使用します。</li><li>遅延値 <code>a</code> と <code>b</code> を計算するコルーチンを作成するために、<a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/async.html" target="_blank" rel="noreferrer"><code>async()</code></a> 関数を使用します。</li><li>計算結果を待機するために、<a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-deferred/await.html" target="_blank" rel="noreferrer"><code>await()</code></a> 関数を使用します。</li><li>計算ステータスと乗算結果を出力に表示するために、<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.io/println.html" target="_blank" rel="noreferrer"><code>println()</code></a> 関数を使用します。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.coroutines.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> runBlocking</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;I&#39;m computing part of the answer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        6</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;I&#39;m computing another part of the answer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        7</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;The answer is \${a.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">await</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> b.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">await</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">()}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>Build Project</strong> をクリックしてコードをビルドします。</p><p><img src="`+p+'" alt="アプリケーションをビルドする"></p></li>',3))]),s[7]||(s[7]=a('<h2 id="コルーチンのデバッグ" tabindex="-1">コルーチンのデバッグ <a class="header-anchor" href="#コルーチンのデバッグ" aria-label="Permalink to &quot;コルーチンのデバッグ&quot;">​</a></h2><ol><li><p><code>println()</code> 関数呼び出しのある行にブレークポイントを設定します。</p><p><img src="'+d+'" alt="コンソールアプリケーションをビルドする"></p></li><li><p>画面上部の実行構成の横にある <strong>Debug</strong> をクリックして、デバッグモードでコードを実行します。</p><p><img src="'+k+'" alt="コンソールアプリケーションをビルドする"></p><p><strong>Debug</strong> ツールウィンドウが表示されます。</p><ul><li><strong>Frames</strong> タブには、コールスタックが含まれています。</li><li><strong>Variables</strong> タブには、現在のコンテキストの変数が含まれています。</li><li><strong>Coroutines</strong> タブには、実行中または中断中のコルーチンに関する情報が含まれています。ここには3つのコルーチンが表示されています。 最初のコルーチンは <strong>RUNNING</strong> ステータスで、他の2つは <strong>CREATED</strong> ステータスです。</li></ul><p><img src="'+g+'" alt="コルーチンをデバッグする"></p></li><li><p><strong>Debug</strong> ツールウィンドウで <strong>Resume Program</strong> をクリックしてデバッガーセッションを再開します。</p><p><img src="'+c+'" alt="コルーチンをデバッグする"></p><p>現在、<strong>Coroutines</strong> タブには次のように表示されます。</p><ul><li>最初のコルーチンは <strong>SUSPENDED</strong> ステータスです – 値を乗算するために待機しています。</li><li>2番目のコルーチンは <code>a</code> の値を計算しており、<strong>RUNNING</strong> ステータスです。</li><li>3番目のコルーチンは <strong>CREATED</strong> ステータスで、<code>b</code> の値は計算していません。</li></ul></li><li><p><strong>Debug</strong> ツールウィンドウで <strong>Resume Program</strong> をクリックしてデバッガーセッションを再開します。</p><p><img src="'+E+'" alt="コンソールアプリケーションをビルドする"></p><p>現在、<strong>Coroutines</strong> タブには次のように表示されます。</p><ul><li>最初のコルーチンは <strong>SUSPENDED</strong> ステータスです – 値を乗算するために待機しています。</li><li>2番目のコルーチンは値を計算し終え、表示されなくなりました。</li><li>3番目のコルーチンは <code>b</code> の値を計算しており、<strong>RUNNING</strong> ステータスです。</li></ul></li></ol><p>IntelliJ IDEA デバッガーを使用すると、各コルーチンを深く掘り下げてコードをデバッグできます。</p><h3 id="最適化によって除外された変数" tabindex="-1">最適化によって除外された変数 <a class="header-anchor" href="#最適化によって除外された変数" aria-label="Permalink to &quot;最適化によって除外された変数&quot;">​</a></h3><p><code>suspend</code> 関数を使用している場合、デバッガーで変数の名前の横に「was optimized out」というテキストが表示されることがあります。</p><p><img src="'+h+'" alt="変数 &quot;a&quot; は最適化により除外されました" width="480"></p><p>このテキストは、変数の寿命が短縮され、変数がもはや存在しないことを意味します。 最適化された変数を含むコードは、その値が見えないためデバッグが困難です。 この動作は、<code>-Xdebug</code> コンパイラオプションで無効にできます。</p><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p><strong>本番環境でこのフラグを絶対に使用しないでください</strong>: <code>-Xdebug</code> は<a href="https://youtrack.jetbrains.com/issue/KT-48678/Coroutine-debugger-disable-was-optimised-out-compiler-feature#focus=Comments-27-6015585.0-0" target="_blank" rel="noreferrer">メモリリークを引き起こす可能性があります</a>。</p></div>',8))])}const T=u(F,[["render",b]]);export{I as __pageData,T as default};
