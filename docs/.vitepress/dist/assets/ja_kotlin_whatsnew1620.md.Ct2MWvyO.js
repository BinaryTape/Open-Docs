import{_ as k}from"./chunks/ios-hierarchy-example.OtFev01v.js";import{_ as h,C as r,c as d,o as c,j as i,G as t,ag as n,a,w as e}from"./chunks/framework.Bksy39di.js";const C=JSON.parse('{"title":"Kotlin 1.6.20 の新機能","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/whatsnew1620.md","filePath":"ja/kotlin/whatsnew1620.md","lastUpdated":1754307826000}'),g={name:"ja/kotlin/whatsnew1620.md"};function E(u,s,y,b,m,f){const o=r("YouTubeVideo"),l=r("tab"),p=r("tabs");return c(),d("div",null,[s[8]||(s[8]=i("h1",{id:"kotlin-1-6-20-の新機能",tabindex:"-1"},[a("Kotlin 1.6.20 の新機能 "),i("a",{class:"header-anchor",href:"#kotlin-1-6-20-の新機能","aria-label":'Permalink to "Kotlin 1.6.20 の新機能"'},"​")],-1)),s[9]||(s[9]=i("p",null,[i("em",null,[i("a",{href:"/ja/kotlin/releases#release-details"},"リリース日: 2022年4月4日")])],-1)),s[10]||(s[10]=i("p",null,"Kotlin 1.6.20 では、将来の言語機能のプレビューが公開され、マルチプラットフォームプロジェクトの階層構造がデフォルトとなり、その他のコンポーネントにも進化的な改善がもたらされます。",-1)),s[11]||(s[11]=i("p",null,"変更点の概要をまとめた短い動画もご覧いただけます。",-1)),t(o,{src:"https://www.youtube.com/v/8F19ds109-o",title:"What's new in Kotlin 1.6.20"}),s[12]||(s[12]=n(`<h2 id="言語" tabindex="-1">言語 <a class="header-anchor" href="#言語" aria-label="Permalink to &quot;言語&quot;">​</a></h2><p>Kotlin 1.6.20 では、2つの新しい言語機能を試すことができます。</p><ul><li><a href="#prototype-of-context-receivers-for-kotlin-jvm">Kotlin/JVM のコンテキストレシーバのプロトタイプ</a></li><li><a href="#definitely-non-nullable-types">Definitely non-nullable types</a></li></ul><h3 id="kotlin-jvm-のコンテキストレシーバのプロトタイプ" tabindex="-1">Kotlin/JVM のコンテキストレシーバのプロトタイプ <a class="header-anchor" href="#kotlin-jvm-のコンテキストレシーバのプロトタイプ" aria-label="Permalink to &quot;Kotlin/JVM のコンテキストレシーバのプロトタイプ&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>この機能はKotlin/JVMのみで利用可能なプロトタイプです。<code>-Xcontext-receivers</code>を有効にすると、 コンパイラはプレリリースバイナリを生成し、これらは製品コードでは使用できません。 コンテキストレシーバは個人プロジェクトでのみ使用してください。 フィードバックは<a href="https://youtrack.jetbrains.com/issues/KT" target="_blank" rel="noreferrer">YouTrack</a>でお待ちしています。</p></div><p>Kotlin 1.6.20 では、レシーバを1つに限定する必要がなくなりました。より多くのレシーバが必要な場合は、関数、プロパティ、クラスの宣言にコンテキストレシーバを追加することで、それらをコンテキスト依存 (または <em>コンテキスト的</em>) にすることができます。コンテキスト宣言では、以下の処理が行われます。</p><ul><li>宣言されたすべてのコンテキストレシーバが、呼び出し元のスコープに暗黙のレシーバとして存在する必要があります。</li><li>宣言されたコンテキストレシーバを、自身の本体スコープに暗黙のレシーバとして取り込みます。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LoggingContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> log: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Logger</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // このコンテキストはロガーへの参照を提供します</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(LoggingContext)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> startBusinessOperation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // LoggingContextは暗黙のレシーバであるため、logプロパティにアクセスできます</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    log.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">info</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Operation has started&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(loggingContext: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LoggingContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(loggingContext) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // startBusinessOperation() を呼び出すには、スコープ内にLoggingContextを暗黙のレシーバとして持つ必要があります</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        startBusinessOperation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>プロジェクトでコンテキストレシーバを有効にするには、<code>-Xcontext-receivers</code>コンパイラオプションを使用します。 この機能とその構文の詳細な説明は、<a href="https://github.com/Kotlin/KEEP/blob/master/proposals/context-receivers.md#detailed-design" target="_blank" rel="noreferrer">KEEP</a>で確認できます。</p><p>この実装はプロトタイプであることに注意してください。</p><ul><li><code>-Xcontext-receivers</code>を有効にすると、コンパイラは製品コードでは使用できないプレリリースバイナリを生成します。</li><li>コンテキストレシーバのIDEサポートは現状最小限です。</li></ul><p>この機能を個人プロジェクトで試して、<a href="https://youtrack.jetbrains.com/issue/KT-42435" target="_blank" rel="noreferrer">このYouTrack課題</a>で感想や体験を共有してください。 問題が発生した場合は、<a href="https://kotl.in/issue" target="_blank" rel="noreferrer">新しい課題を提出</a>してください。</p><h3 id="definitely-non-nullable-types" tabindex="-1">Definitely non-nullable types <a class="header-anchor" href="#definitely-non-nullable-types" aria-label="Permalink to &quot;Definitely non-nullable types&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>Definitely non-nullable typesは<a href="/ja/kotlin/components-stability">ベータ版</a>です。ほぼ安定していますが、 将来的に移行手順が必要になる場合があります。 変更を最小限に抑えるよう最善を尽くします。</p></div><p>ジェネリックJavaクラスやインターフェースを拡張する際により良い相互運用性を提供するために、Kotlin 1.6.20では、新しい構文<code>T &amp; Any</code>を使用することで、利用箇所でジェネリック型パラメータを「Definitely non-nullable」としてマークできるようになりました。 この構文形式は<a href="https://en.wikipedia.org/wiki/Intersection_type" target="_blank" rel="noreferrer">Intersection types</a>の表記法に由来しており、現在は<code>&amp;</code>の左側にnullableな上限を持つ型パラメータ、右側にnon-nullableな<code>Any</code>を持つ型パラメータに限定されています。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">elvisLike</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp; Any): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp; Any </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x ?: y</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // OK</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    elvisLike</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).length</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // エラー: &#39;null&#39; は非null型 の値にはできません</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    elvisLike</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).length</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // OK</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    elvisLike</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?&gt;(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).length</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // エラー: &#39;null&#39; は非null型 の値にはできません</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    elvisLike</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?&gt;(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).length</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>この機能を有効にするには、言語バージョンを<code>1.7</code>に設定してください。</p>`,17)),t(p,{group:"build-script"},{default:e(()=>[t(l,{title:"Kotlin","group-key":"kotlin"},{default:e(()=>s[0]||(s[0]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    sourceSets."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"all"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        languageSettings."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"apply"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            languageVersion "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "1.7"')]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),t(l,{title:"Groovy","group-key":"groovy"},{default:e(()=>s[1]||(s[1]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"kotlin {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    sourceSets"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"all {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        languageSettings {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            languageVersion "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," '1.7'")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),s[13]||(s[13]=n(`<p>Definitely non-nullable typesの詳細については、<a href="https://github.com/Kotlin/KEEP/blob/master/proposals/definitely-non-nullable-types.md" target="_blank" rel="noreferrer">KEEP</a>を参照してください。</p><h2 id="kotlin-jvm" tabindex="-1">Kotlin/JVM <a class="header-anchor" href="#kotlin-jvm" aria-label="Permalink to &quot;Kotlin/JVM&quot;">​</a></h2><p>Kotlin 1.6.20 で導入される機能:</p><ul><li>JVMインターフェースにおけるデフォルトメソッドの互換性改善: <a href="#new-jvmdefaultwithcompatibility-annotation-for-interfaces">インターフェースのための新しい<code>@JvmDefaultWithCompatibility</code>アノテーション</a>と<a href="#compatibility-changes-in-the-xjvm-default-modes"><code>-Xjvm-default</code>モードにおける互換性の変更</a></li><li><a href="#support-for-parallel-compilation-of-a-single-module-in-the-jvm-backend">JVMバックエンドにおける単一モジュールの並列コンパイルのサポート</a></li><li><a href="#support-for-callable-references-to-functional-interface-constructors">関数型インターフェースのコンストラクタへの呼び出し可能な参照のサポート</a></li></ul><h3 id="インターフェースのための新しい-jvmdefaultwithcompatibility-アノテーション" tabindex="-1">インターフェースのための新しい @JvmDefaultWithCompatibility アノテーション <a class="header-anchor" href="#インターフェースのための新しい-jvmdefaultwithcompatibility-アノテーション" aria-label="Permalink to &quot;インターフェースのための新しい @JvmDefaultWithCompatibility アノテーション&quot;">​</a></h3><p>Kotlin 1.6.20 では、新しいアノテーション<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.jvm/-jvm-default-with-compatibility/" target="_blank" rel="noreferrer"><code>@JvmDefaultWithCompatibility</code></a>が導入されます。このアノテーションを<code>-Xjvm-default=all</code>コンパイラオプションと組み合わせて使用すると、任意のKotlinインターフェース内の非抽象メンバに対して<a href="/ja/kotlin/java-to-kotlin-interop#default-methods-in-interfaces">JVMインターフェースのデフォルトメソッドが作成されます</a>。</p><p>もしあなたのKotlinインターフェースを<code>-Xjvm-default=all</code>オプションなしでコンパイルされたクライアントが使用している場合、このオプションでコンパイルされたコードとバイナリ互換性がない可能性があります。 Kotlin 1.6.20 より前では、この互換性の問題を回避するために、<a href="https://blog.jetbrains.com/kotlin/2020/07/kotlin-1-4-m3-generating-default-methods-in-interfaces/#JvmDefaultWithoutCompatibility" target="_blank" rel="noreferrer">推奨されるアプローチ</a>は<code>-Xjvm-default=all-compatibility</code>モードを使用し、この種の互換性を必要としないインターフェースには<code>@JvmDefaultWithoutCompatibility</code>アノテーションも使用することでした。</p><p>このアプローチにはいくつかの欠点がありました。</p><ul><li>新しいインターフェースが追加されたときにアノテーションを追加し忘れる可能性がありました。</li><li>通常、公開API以外の部分にはより多くのインターフェースがあるため、コードの多くの場所にこのアノテーションが存在することになります。</li></ul><p>現在、<code>-Xjvm-default=all</code>モードを使用し、インターフェースに<code>@JvmDefaultWithCompatibility</code>アノテーションを付けることができます。 これにより、公開APIのすべてのインターフェースに一度だけこのアノテーションを追加でき、新しい非公開コードにはアノテーションを使用する必要がなくなります。</p><p>この新しいアノテーションに関するフィードバックは、<a href="https://youtrack.jetbrains.com/issue/KT-48217" target="_blank" rel="noreferrer">このYouTrackチケット</a>にご記入ください。</p><h3 id="xjvm-default-モードにおける互換性の変更" tabindex="-1">-Xjvm-default モードにおける互換性の変更 <a class="header-anchor" href="#xjvm-default-モードにおける互換性の変更" aria-label="Permalink to &quot;-Xjvm-default モードにおける互換性の変更&quot;">​</a></h3><p>Kotlin 1.6.20 では、デフォルトモード (<code>-Xjvm-default=disable</code> コンパイラオプション) のモジュールを、<code>-Xjvm-default=all</code> または <code>-Xjvm-default=all-compatibility</code> モードでコンパイルされたモジュールに対してコンパイルするオプションが追加されました。 従来通り、すべてのモジュールが<code>-Xjvm-default=all</code>または<code>-Xjvm-default=all-compatibility</code>モードである場合もコンパイルは成功します。 フィードバックは<a href="https://youtrack.jetbrains.com/issue/KT-47000" target="_blank" rel="noreferrer">このYouTrack課題</a>にご記入いただけます。</p><p>Kotlin 1.6.20 では、コンパイラオプション<code>-Xjvm-default</code>の<code>compatibility</code>モードと<code>enable</code>モードが非推奨になりました。 他のモードの説明にも互換性に関する変更がありますが、全体的なロジックは同じです。 <a href="/ja/kotlin/java-to-kotlin-interop#compatibility-modes-for-default-methods">更新された説明</a>を確認できます。</p><p>Javaとの相互運用におけるデフォルトメソッドの詳細については、<a href="/ja/kotlin/java-to-kotlin-interop#default-methods-in-interfaces">相互運用ドキュメント</a>と <a href="https://blog.jetbrains.com/kotlin/2020/07/kotlin-1-4-m3-generating-default-methods-in-interfaces/" target="_blank" rel="noreferrer">このブログ記事</a>を参照してください。</p><h3 id="jvmバックエンドにおける単一モジュールの並列コンパイルのサポート" tabindex="-1">JVMバックエンドにおける単一モジュールの並列コンパイルのサポート <a class="header-anchor" href="#jvmバックエンドにおける単一モジュールの並列コンパイルのサポート" aria-label="Permalink to &quot;JVMバックエンドにおける単一モジュールの並列コンパイルのサポート&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>JVMバックエンドにおける単一モジュールの並列コンパイルのサポートは<a href="/ja/kotlin/components-stability">実験的</a>です。 いつでも削除または変更される可能性があります。オプトインが必要です（詳細は下記参照）。評価目的でのみ使用してください。 フィードバックは<a href="https://youtrack.jetbrains.com/issue/KT-46085" target="_blank" rel="noreferrer">YouTrack</a>でお待ちしています。</p></div><p><a href="https://youtrack.jetbrains.com/issue/KT-46768" target="_blank" rel="noreferrer">新しいJVM IRバックエンドのコンパイル時間を改善する</a>ための作業を継続しています。 Kotlin 1.6.20 では、モジュール内のすべてのファイルを並列でコンパイルする実験的なJVM IRバックエンドモードを追加しました。 並列コンパイルにより、全体のコンパイル時間を最大15%短縮できます。</p><p>実験的な並列バックエンドモードを有効にするには、<a href="/ja/kotlin/compiler-reference#compiler-options">コンパイラオプション</a><code>-Xbackend-threads</code>を使用します。 このオプションには以下の引数を指定します。</p><ul><li><code>N</code>は使用したいスレッド数です。CPUコア数よりも大きくしてはいけません。そうしないと、スレッド間のコンテキスト切り替えにより並列化が効果を発揮しなくなります。</li><li><code>0</code>は各CPUコアに独立したスレッドを使用します。</li></ul><p><a href="/ja/kotlin/gradle">Gradle</a>はタスクを並列で実行できますが、プロジェクト（またはプロジェクトの主要部分）がGradleの観点から見て一つの大きなタスクである場合、この種の並列化はあまり役に立ちません。 非常に大きなモノリシックモジュールがある場合は、並列コンパイルを使用してより速くコンパイルしてください。 プロジェクトが多数の小さなモジュールで構成されており、Gradleによってビルドが並列化されている場合、コンテキスト切り替えのために別の並列化レイヤーを追加すると、パフォーマンスが低下する可能性があります。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>並列コンパイルにはいくつかの制約があります。 * <a href="/ja/kotlin/kapt">kapt</a>はIRバックエンドを無効にするため、kaptとは動作しません。 * 設計上、より多くのJVMヒープが必要です。ヒープ量はスレッド数に比例します。</p></div><h3 id="関数型インターフェースのコンストラクタへの呼び出し可能な参照のサポート" tabindex="-1">関数型インターフェースのコンストラクタへの呼び出し可能な参照のサポート <a class="header-anchor" href="#関数型インターフェースのコンストラクタへの呼び出し可能な参照のサポート" aria-label="Permalink to &quot;関数型インターフェースのコンストラクタへの呼び出し可能な参照のサポート&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>関数型インターフェースのコンストラクタへの呼び出し可能な参照のサポートは<a href="/ja/kotlin/components-stability">実験的</a>です。 いつでも削除または変更される可能性があります。オプトインが必要です（詳細は下記参照）。評価目的でのみ使用してください。 フィードバックは<a href="https://youtrack.jetbrains.com/issue/KT-47939" target="_blank" rel="noreferrer">YouTrack</a>でお待ちしています。</p></div><p>関数型インターフェースのコンストラクタへの<a href="/ja/kotlin/reflection#callable-references">呼び出し可能な参照</a>のサポートにより、コンストラクタ関数を持つインターフェースから<a href="/ja/kotlin/fun-interfaces">関数型インターフェース</a>への移行を、ソース互換性のある方法で実現できます。</p><p>次のコードを検討してください。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Printer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Printer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(block: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Unit): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Printer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Printer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> block</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span></code></pre></div><p>関数型インターフェースのコンストラクタへの呼び出し可能な参照が有効になっている場合、このコードは単に関数型インターフェースの宣言に置き換えることができます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Printer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>そのコンストラクタは暗黙的に作成され、<code>::Printer</code>関数参照を使用するすべてのコードはコンパイルされます。例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">documentsStorage.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addPrinter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Printer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>バイナリ互換性を維持するには、従来の関数<code>Printer</code>を<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-deprecated/" target="_blank" rel="noreferrer"><code>@Deprecated</code></a>アノテーションと<code>DeprecationLevel.HIDDEN</code>でマークします。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Deprecated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Your message about the deprecation&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, level </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DeprecationLevel.HIDDEN)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Printer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.) {</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.}</span></span></code></pre></div><p>この機能を有効にするには、コンパイラオプション<code>-XXLanguage:+KotlinFunInterfaceConstructorReference</code>を使用します。</p><h2 id="kotlin-native" tabindex="-1">Kotlin/Native <a class="header-anchor" href="#kotlin-native" aria-label="Permalink to &quot;Kotlin/Native&quot;">​</a></h2><p>Kotlin/Native 1.6.20 は、新しいコンポーネントの開発が継続していることを示しています。Kotlin を他のプラットフォームで一貫したエクスペリエンスで利用できるように、さらに一歩踏み出しました。</p><ul><li><a href="#an-update-on-the-new-memory-manager">新しいメモリマネージャーのアップデート</a></li><li><a href="#concurrent-implementation-for-the-sweep-phase-in-new-memory-manager">新しいメモリマネージャーにおけるスイープフェーズの並行実装</a></li><li><a href="#instantiation-of-annotation-classes">アノテーションクラスのインスタンス化</a></li><li><a href="#interop-with-swift-async-await-returning-void-instead-of-kotlinunit">Swift async/await との相互運用: KotlinUnit の代わりに Swift の Void を返す</a></li><li><a href="#better-stack-traces-with-libbacktrace">libbacktrace によるより良いスタックトレース</a></li><li><a href="#support-for-standalone-android-executables">スタンドアロンAndroid実行可能ファイルのサポート</a></li><li><a href="#performance-improvements">パフォーマンスの改善</a></li><li><a href="#improved-error-handling-during-cinterop-modules-import">cinteropモジュールのインポート時のエラー処理の改善</a></li><li><a href="#support-for-xcode-13-libraries">Xcode 13 ライブラリのサポート</a></li></ul><h3 id="新しいメモリマネージャーのアップデート" tabindex="-1">新しいメモリマネージャーのアップデート <a class="header-anchor" href="#新しいメモリマネージャーのアップデート" aria-label="Permalink to &quot;新しいメモリマネージャーのアップデート&quot;">​</a></h3><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>新しいKotlin/Nativeメモリマネージャーは<a href="/ja/kotlin/components-stability">アルファ版</a>です。 将来的に互換性のない変更があり、手動での移行が必要になる場合があります。 フィードバックは<a href="https://youtrack.jetbrains.com/issue/KT-48525" target="_blank" rel="noreferrer">YouTrack</a>でお待ちしています。</p></div><p>Kotlin 1.6.20では、新しいKotlin/Nativeメモリマネージャーのアルファ版を試すことができます。 これにより、JVMとNativeプラットフォーム間の差異が解消され、マルチプラットフォームプロジェクトで一貫した開発者体験が提供されます。 たとえば、AndroidとiOSの両方で動作する新しいクロスプラットフォームモバイルアプリケーションをはるかに簡単に作成できるようになります。</p><p>新しいKotlin/Nativeメモリマネージャーは、スレッド間のオブジェクト共有の制限を解除します。 また、安全で特別な管理やアノテーションを必要としない、リークフリーな並行プログラミングプリミティブも提供します。</p><p>新しいメモリマネージャーは将来のバージョンでデフォルトになる予定ですので、今すぐ試すことをお勧めします。 新しいメモリマネージャーの詳細とデモプロジェクトについては、<a href="https://blog.jetbrains.com/kotlin/2021/08/try-the-new-kotlin-native-memory-manager-development-preview/" target="_blank" rel="noreferrer">ブログ記事</a>を確認するか、すぐに<a href="https://github.com/JetBrains/kotlin/blob/master/kotlin-native/NEW_MM.md" target="_blank" rel="noreferrer">移行手順</a>にジャンプして自分で試してください。</p><p>プロジェクトで新しいメモリマネージャーを使用して、その動作を確認し、<a href="https://youtrack.jetbrains.com/issue/KT-48525" target="_blank" rel="noreferrer">YouTrack</a>の課題トラッカーでフィードバックを共有してください。</p><h3 id="新しいメモリマネージャーにおけるスイープフェーズの並行実装" tabindex="-1">新しいメモリマネージャーにおけるスイープフェーズの並行実装 <a class="header-anchor" href="#新しいメモリマネージャーにおけるスイープフェーズの並行実装" aria-label="Permalink to &quot;新しいメモリマネージャーにおけるスイープフェーズの並行実装&quot;">​</a></h3><p><a href="/ja/kotlin/whatsnew16#preview-of-the-new-memory-manager">Kotlin 1.6 で発表された</a>新しいメモリマネージャーにすでに切り替えている場合、実行時間の大幅な改善に気づくかもしれません。当社のベンチマークでは平均で35%の改善が示されています。 1.6.20 からは、新しいメモリマネージャーでスイープフェーズの並行実装も利用できるようになりました。 これにより、パフォーマンスがさらに向上し、ガベージコレクタの一時停止時間が短縮されるはずです。</p><p>新しい Kotlin/Native メモリマネージャーでこの機能を有効にするには、以下のコンパイラオプションを渡します。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-Xgc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">cms</span></span></code></pre></div><p>新しいメモリマネージャーのパフォーマンスに関するフィードバックは、<a href="https://youtrack.jetbrains.com/issue/KT-48526" target="_blank" rel="noreferrer">このYouTrack課題</a>にぜひお寄せください。</p><h3 id="アノテーションクラスのインスタンス化" tabindex="-1">アノテーションクラスのインスタンス化 <a class="header-anchor" href="#アノテーションクラスのインスタンス化" aria-label="Permalink to &quot;アノテーションクラスのインスタンス化&quot;">​</a></h3><p>Kotlin 1.6.0 では、アノテーションクラスのインスタンス化が Kotlin/JVM および Kotlin/JS で<a href="/ja/kotlin/components-stability">安定版</a>になりました。 1.6.20 バージョンでは、Kotlin/Native のサポートが提供されます。</p><p><a href="/ja/kotlin/annotations#instantiation">アノテーションクラスのインスタンス化</a>について詳しくはこちらをご覧ください。</p><h3 id="swift-async-await-との相互運用-kotlinunit-の代わりに-swift-の-void-を返す" tabindex="-1">Swift async/await との相互運用: KotlinUnit の代わりに Swift の Void を返す <a class="header-anchor" href="#swift-async-await-との相互運用-kotlinunit-の代わりに-swift-の-void-を返す" aria-label="Permalink to &quot;Swift async/await との相互運用: KotlinUnit の代わりに Swift の Void を返す&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>Swift async/await との並行処理の相互運用性は<a href="/ja/kotlin/components-stability">実験的</a>です。いつでも削除または変更される可能性があります。 評価目的でのみ使用してください。フィードバックは<a href="https://youtrack.jetbrains.com/issue/KT-47610" target="_blank" rel="noreferrer">YouTrack</a>でお待ちしています。</p></div><p><a href="/ja/kotlin/whatsnew1530#experimental-interoperability-with-swift-5-5-async-await">Swift 5.5 以降で利用可能な Swift の async/await との実験的な相互運用</a>に関する作業を継続してきました。 Kotlin 1.6.20 は、<code>Unit</code>戻り型を持つ<code>suspend</code>関数の動作方法において、以前のバージョンとは異なります。</p><p>以前は、そのような関数はSwiftで<code>KotlinUnit</code>を返す<code>async</code>関数として表現されていました。しかし、それらの適切な戻り型は、非中断関数と同様に<code>Void</code>です。</p><p>既存のコードを壊さないように、コンパイラが<code>Unit</code>を返す<code>suspend</code>関数を<code>Void</code>戻り型を持つ<code>async</code> Swiftに変換するGradleプロパティを導入します。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># gradle.properties</span></span>
<span class="line"><span>kotlin.native.binary.unitSuspendFunctionObjCExport=proper</span></span></code></pre></div><p>今後のKotlinリリースでは、この動作をデフォルトにする予定です。</p><h3 id="libbacktrace-によるより良いスタックトレース" tabindex="-1">libbacktrace によるより良いスタックトレース <a class="header-anchor" href="#libbacktrace-によるより良いスタックトレース" aria-label="Permalink to &quot;libbacktrace によるより良いスタックトレース&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>ソース位置解決にlibbacktraceを使用することは<a href="/ja/kotlin/components-stability">実験的</a>です。いつでも削除または変更される可能性があります。 評価目的でのみ使用してください。フィードバックは<a href="https://youtrack.jetbrains.com/issue/KT-48424" target="_blank" rel="noreferrer">YouTrack</a>でお待ちしています。</p></div><p>Kotlin/Native は現在、<code>linux*</code> (ただし<code>linuxMips32</code>と<code>linuxMipsel32</code>を除く) および<code>androidNative*</code>ターゲットのデバッグを改善するために、ファイルの位置と行番号を含む詳細なスタックトレースを生成できるようになりました。</p><p>この機能は、内部で<a href="https://github.com/ianlancetaylor/libbacktrace" target="_blank" rel="noreferrer">libbacktrace</a>ライブラリを使用しています。 次のコードで違いの例を確認してください。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> baz</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">inline</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> baz</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><strong>1.6.20 より前:</strong></li></ul><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Uncaught Kotlin exception: kotlin.IllegalStateException:</span></span>
<span class="line"><span>   at 0   example.kexe        0x227190       kfun:kotlin.Throwable#&lt;init&gt;(kotlin.String?){} + 96</span></span>
<span class="line"><span>   at 1   example.kexe        0x221e4c       kfun:kotlin.Exception#&lt;init&gt;(kotlin.String?){} + 92</span></span>
<span class="line"><span>   at 2   example.kexe        0x221f4c       kfun:kotlin.RuntimeException#&lt;init&gt;(kotlin.String?){} + 92</span></span>
<span class="line"><span>   at 3   example.kexe        0x22234c       kfun:kotlin.IllegalStateException#&lt;init&gt;(kotlin.String?){} + 92</span></span>
<span class="line"><span>   at 4   example.kexe        0x25d708       kfun:#bar(){} + 104</span></span>
<span class="line"><span>   at 5   example.kexe        0x25d68c       kfun:#main(){} + 12</span></span></code></pre></div><ul><li><strong>1.6.20 と libbacktrace:</strong></li></ul><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Uncaught Kotlin exception: kotlin.IllegalStateException:</span></span>
<span class="line"><span>   at 0   example.kexe        0x229550    kfun:kotlin.Throwable#&lt;init&gt;(kotlin.String?){} + 96 (/opt/buildAgent/work/c3a91df21e46e2c8/kotlin/kotlin-native/runtime/src/main/kotlin/kotlin/Throwable.kt:24:37)</span></span>
<span class="line"><span>   at 1   example.kexe        0x22420c    kfun:kotlin.Exception#&lt;init&gt;(kotlin.String?){} + 92 (/opt/buildAgent/work/c3a91df21e46e2c8/kotlin/kotlin-native/runtime/src/main/kotlin/kotlin/Exceptions.kt:23:44)</span></span>
<span class="line"><span>   at 2   example.kexe        0x22430c    kfun:kotlin.RuntimeException#&lt;init&gt;(kotlin.String?){} + 92 (/opt/buildAgent/work/c3a91df21e46e2c8/kotlin/kotlin-native/runtime/src/main/kotlin/kotlin/Exceptions.kt:34:44)</span></span>
<span class="line"><span>   at 3   example.kexe        0x22470c    kfun:kotlin.IllegalStateException#&lt;init&gt;(kotlin.String?){} + 92 (/opt/buildAgent/work/c3a91df21e46e2c8/kotlin/kotlin-native/runtime/src/main/kotlin/kotlin/Exceptions.kt:70:44)</span></span>
<span class="line"><span>   at 4   example.kexe        0x25fac8    kfun:#bar(){} + 104 [inlined] (/opt/buildAgent/work/c3a91df21e46e2c8/kotlin/libraries/stdlib/src/kotlin/util/Preconditions.kt:143:56)</span></span>
<span class="line"><span>   at 5   example.kexe        0x25fac8    kfun:#bar(){} + 104 [inlined] (/private/tmp/backtrace/src/commonMain/kotlin/app.kt:4:5)</span></span>
<span class="line"><span>   at 6   example.kexe        0x25fac8    kfun:#bar(){} + 104 (/private/tmp/backtrace/src/commonMain/kotlin/app.kt:2:13)</span></span>
<span class="line"><span>   at 7   example.kexe        0x25fa4c    kfun:#main(){} + 12 (/private/tmp/backtrace/src/commonMain/kotlin/app.kt:1:14)</span></span></code></pre></div><p>Apple ターゲットでは、すでにスタックトレースにファイル位置と行番号が含まれていましたが、libbacktrace はインライン関数呼び出しについてより詳細な情報を提供します。</p><ul><li><strong>1.6.20 より前:</strong></li></ul><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Uncaught Kotlin exception: kotlin.IllegalStateException:</span></span>
<span class="line"><span>   at 0   example.kexe    0x10a85a8f8    kfun:kotlin.Throwable#&lt;init&gt;(kotlin.String?){} + 88 (/opt/buildAgent/work/c3a91df21e46e2c8/kotlin/kotlin-native/runtime/src/main/kotlin/kotlin/Throwable.kt:24:37)</span></span>
<span class="line"><span>   at 1   example.kexe    0x10a855846    kfun:kotlin.Exception#&lt;init&gt;(kotlin.String?){} + 86 (/opt/buildAgent/work/c3a91df21e46e2c8/kotlin/kotlin-native/runtime/src/main/kotlin/kotlin/Exceptions.kt:23:44)</span></span>
<span class="line"><span>   at 2   example.kexe    0x10a855936    kfun:kotlin.RuntimeException#&lt;init&gt;(kotlin.String?){} + 86 (/opt/buildAgent/work/c3a91df21e46e2c8/kotlin/kotlin-native/runtime/src/main/kotlin/kotlin/Exceptions.kt:34:44)</span></span>
<span class="line"><span>   at 3   example.kexe    0x10a855c86    kfun:kotlin.IllegalStateException#&lt;init&gt;(kotlin.String?){} + 86 (/opt/buildAgent/work/c3a91df21e46e2c8/kotlin/kotlin-native/runtime/src/main/kotlin/kotlin/Exceptions.kt:70:44)</span></span>
<span class="line"><span>   at 4   example.kexe    0x10a8489a5    kfun:#bar(){} + 117 (/private/tmp/backtrace/src/commonMain/kotlin/app.kt:2:1)</span></span>
<span class="line"><span>   at 5   example.kexe    0x10a84891c    kfun:#main(){} + 12 (/private/tmp/backtrace/src/commonMain/kotlin/app.kt:1:14)</span></span>
<span class="line"><span>...</span></span></code></pre></div><ul><li><strong>1.6.20 と libbacktrace:</strong></li></ul><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Uncaught Kotlin exception: kotlin.IllegalStateException:</span></span>
<span class="line"><span>   at 0   example.kexe    0x10669bc88    kfun:kotlin.Throwable#&lt;init&gt;(kotlin.String?){} + 88 (/opt/buildAgent/work/c3a91df21e46e2c8/kotlin/kotlin-native/runtime/src/main/kotlin/kotlin/Throwable.kt:24:37)</span></span>
<span class="line"><span>   at 1   example.kexe    0x106696bd6    kfun:kotlin.Exception#&lt;init&gt;(kotlin.String?){} + 86 (/opt/buildAgent/work/c3a91df21e46e2c8/kotlin/kotlin-native/runtime/src/main/kotlin/kotlin/Exceptions.kt:23:44)</span></span>
<span class="line"><span>   at 2   example.kexe    0x106696cc6    kfun:kotlin.RuntimeException#&lt;init&gt;(kotlin.String?){} + 86 (/opt/buildAgent/work/c3a91df21e46e2c8/kotlin/kotlin-native/runtime/src/main/kotlin/kotlin/Exceptions.kt:34:44)</span></span>
<span class="line"><span>   at 3   example.kexe    0x106697016    kfun:kotlin.IllegalStateException#&lt;init&gt;(kotlin.String?){} + 86 (/opt/buildAgent/work/c3a91df21e46e2c8/kotlin/kotlin-native/runtime/src/main/kotlin/kotlin/Exceptions.kt:70:44)</span></span>
<span class="line"><span>   at 4   example.kexe    0x106689d35    kfun:#bar(){} + 117 [inlined] (/opt/buildAgent/work/c3a91df21e46e2c8/kotlin/libraries/stdlib/src/kotlin/util/Preconditions.kt:143:56)</span></span>
<span class="line"><span>&gt;&gt;  at 5   example.kexe    0x106689d35    kfun:#bar(){} + 117 [inlined] (/private/tmp/backtrace/src/commonMain/kotlin/app.kt:4:5)</span></span>
<span class="line"><span>   at 6   example.kexe    0x106689d35    kfun:#bar(){} + 117 (/private/tmp/backtrace/src/commonMain/kotlin/app.kt:2:13)</span></span>
<span class="line"><span>   at 7   example.kexe    0x106689cac    kfun:#main(){} + 12 (/private/tmp/backtrace/src/commonMain/kotlin/app.kt:1:14)</span></span>
<span class="line"><span>...</span></span></code></pre></div><p>libbacktrace を使用してより良いスタックトレースを生成するには、<code>gradle.properties</code>に次の行を追加します。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># gradle.properties</span></span>
<span class="line"><span>kotlin.native.binary.sourceInfoType=libbacktrace</span></span></code></pre></div><p>libbacktrace を使用した Kotlin/Native のデバッグがどのように機能するか、<a href="https://youtrack.jetbrains.com/issue/KT-48424" target="_blank" rel="noreferrer">このYouTrack課題</a>でぜひフィードバックをお寄せください。</p><h3 id="スタンドアロンandroid実行可能ファイルのサポート" tabindex="-1">スタンドアロンAndroid実行可能ファイルのサポート <a class="header-anchor" href="#スタンドアロンandroid実行可能ファイルのサポート" aria-label="Permalink to &quot;スタンドアロンAndroid実行可能ファイルのサポート&quot;">​</a></h3><p>これまで、Kotlin/NativeのAndroid Native実行可能ファイルは、実際には実行可能ファイルではなく、NativeActivityとして使用できる共有ライブラリでした。現在は、Android Nativeターゲット用の標準実行可能ファイルを生成するオプションがあります。</p><p>これを行うには、プロジェクトの<code>build.gradle(.kts)</code>部分で、<code>androidNative</code>ターゲットの実行可能ブロックを設定します。 以下のバイナリオプションを追加してください。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    androidNativeX64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;android&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        binaries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                binaryOptions[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;androidProgramType&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;standalone&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>この機能はKotlin 1.7.0でデフォルトになる予定です。 現在の動作を維持したい場合は、以下の設定を使用してください。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">binaryOptions[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;androidProgramType&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;nativeActivity&quot;</span></span></code></pre></div><p>Mattia Iavarone氏の実装に感謝いたします。</p><h3 id="パフォーマンスの改善" tabindex="-1">パフォーマンスの改善 <a class="header-anchor" href="#パフォーマンスの改善" aria-label="Permalink to &quot;パフォーマンスの改善&quot;">​</a></h3><p>Kotlin/Nativeでは、<a href="https://youtrack.jetbrains.com/issue/KT-42294" target="_blank" rel="noreferrer">コンパイルプロセスの高速化</a>と開発体験の向上に力を入れています。</p><p>Kotlin 1.6.20 では、Kotlin が生成する LLVM IR に影響するいくつかのパフォーマンス更新とバグ修正が含まれています。 内部プロジェクトでのベンチマークによると、平均して以下のパフォーマンス向上が達成されました。</p><ul><li>実行時間 15%削減</li><li>リリースおよびデバッグバイナリのコードサイズ 20%削減</li><li>リリースバイナリのコンパイル時間 26%削減</li></ul><p>これらの変更により、大規模な内部プロジェクトでのデバッグバイナリのコンパイル時間も10%削減されました。</p><p>これを達成するために、コンパイラによって生成される一部の合成オブジェクトに対する静的初期化を実装し、すべての関数に対するLLVM IRの構造化方法を改善し、コンパイラキャッシュを最適化しました。</p><h3 id="cinteropモジュールのインポート時のエラー処理の改善" tabindex="-1">cinteropモジュールのインポート時のエラー処理の改善 <a class="header-anchor" href="#cinteropモジュールのインポート時のエラー処理の改善" aria-label="Permalink to &quot;cinteropモジュールのインポート時のエラー処理の改善&quot;">​</a></h3><p>このリリースでは、<code>cinterop</code>ツールを使用してObjective-Cモジュールをインポートする際（CocoaPodsのpodで典型的なケース）のエラー処理が改善されました。 これまで、Objective-Cモジュールを扱おうとした際（例えば、ヘッダーのコンパイルエラーなど）にエラーが発生すると、<code>fatal error: could not build module $name</code>のような、情報が不足したエラーメッセージが表示されていました。 今回、<code>cinterop</code>ツールのこの部分が拡張され、より詳細な説明を含むエラーメッセージが表示されるようになりました。</p><h3 id="xcode-13-ライブラリのサポート" tabindex="-1">Xcode 13 ライブラリのサポート <a class="header-anchor" href="#xcode-13-ライブラリのサポート" aria-label="Permalink to &quot;Xcode 13 ライブラリのサポート&quot;">​</a></h3><p>Xcode 13 と共に提供されるライブラリは、このリリースから完全にサポートされます。 Kotlin コードのどこからでも自由にアクセスできます。</p><h2 id="kotlin-multiplatform" tabindex="-1">Kotlin Multiplatform <a class="header-anchor" href="#kotlin-multiplatform" aria-label="Permalink to &quot;Kotlin Multiplatform&quot;">​</a></h2><p>1.6.20では、Kotlin Multiplatformに対する以下の注目すべきアップデートが行われました。</p><ul><li><a href="#hierarchical-structure-support-for-multiplatform-projects">すべての新しいマルチプラットフォームプロジェクトで階層構造のサポートがデフォルトに</a></li><li><a href="#kotlin-cocoapods-gradle-plugin">Kotlin CocoaPods GradleプラグインがCocoaPods統合のためのいくつかの便利な機能を受け取りました</a></li></ul><h3 id="マルチプラットフォームプロジェクトにおける階層構造のサポート" tabindex="-1">マルチプラットフォームプロジェクトにおける階層構造のサポート <a class="header-anchor" href="#マルチプラットフォームプロジェクトにおける階層構造のサポート" aria-label="Permalink to &quot;マルチプラットフォームプロジェクトにおける階層構造のサポート&quot;">​</a></h3><p>Kotlin 1.6.20 では、階層構造のサポートがデフォルトで有効になっています。 <a href="/ja/kotlin/whatsnew14#sharing-code-in-several-targets-with-the-hierarchical-project-structure">Kotlin 1.4.0 で導入されて以来</a>、フロントエンドが大幅に改善され、IDE のインポートが安定しました。</p><p>以前は、マルチプラットフォームプロジェクトにコードを追加する方法が2つありました。1つ目は、プラットフォーム固有のソースセットに挿入する方法で、これは1つのターゲットに限定され、他のプラットフォームで再利用できませんでした。 2つ目は、Kotlinが現在サポートしているすべてのプラットフォームで共有される共通ソースセットを使用する方法です。</p><p>これで、共通ロジックやサードパーティAPIを多く再利用する、いくつかの類似するネイティブターゲット間で<a href="#better-code-sharing-in-your-project">ソースコードを共有</a>できるようになりました。 このテクノロジーは、正しいデフォルトの依存関係を提供し、共有コードで利用可能な正確なAPIを見つけます。 これにより、複雑なビルド設定や、ネイティブターゲット間でソースセットを共有するためのIDEサポートを得るための回避策が不要になります。 また、異なるターゲット向けに意図された安全でないAPIの使用を防ぐのにも役立ちます。</p><p>このテクノロジーは、階層型プロジェクト構造により、ライブラリの作者がターゲットのサブセットに対して共通APIを持つライブラリを公開・利用できるようになるため、<a href="#more-opportunities-for-library-authors">ライブラリの作者</a>にとっても役立ちます。</p><p>デフォルトでは、階層型プロジェクト構造で公開されたライブラリは、階層型構造のプロジェクトとのみ互換性があります。</p><h4 id="プロジェクト内でのコード共有の改善" tabindex="-1">プロジェクト内でのコード共有の改善 <a class="header-anchor" href="#プロジェクト内でのコード共有の改善" aria-label="Permalink to &quot;プロジェクト内でのコード共有の改善&quot;">​</a></h4><p>階層構造のサポートがなければ、<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-dsl-reference.html#targets" target="_blank" rel="noreferrer">Kotlinターゲット</a>の_すべてではなく一部_でコードを共有する直接的な方法はありません。 一般的な例の1つは、すべてのiOSターゲット間でコードを共有し、FoundationのようなiOS固有の<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-share-on-platforms.html#connect-platform-specific-libraries" target="_blank" rel="noreferrer">依存関係</a>にアクセスすることです。</p><p>階層型プロジェクト構造のサポートのおかげで、この機能をすぐに利用できるようになりました。 新しい構造では、ソースセットが階層を形成します。 与えられたソースセットがコンパイルされる各ターゲットで利用可能なプラットフォーム固有の言語機能と依存関係を使用できます。</p><p>たとえば、iOS デバイスとシミュレーター用の <code>iosArm64</code> と <code>iosX64</code> という 2 つのターゲットを持つ典型的なマルチプラットフォームプロジェクトを考えてみましょう。 Kotlin ツールは、両方のターゲットが同じ関数を持っていることを理解し、中間ソースセット <code>iosMain</code> からその関数にアクセスすることを許可します。</p><p><img src="`+k+`" alt="iOS hierarchy example" width="700"></p><p>Kotlin ツールチェーンは、Kotlin/Native stdlib やネイティブライブラリなどの適切なデフォルトの依存関係を提供します。 さらに、Kotlin ツールは、共有コードで利用可能な正確なAPIサーフェスを見つけるために最善を尽くします。 これにより、たとえばmacOS固有の関数をWindows向けに共有されたコードで使用するなどのケースを防ぐことができます。</p><h4 id="ライブラリ作者にとってのより多くの機会" tabindex="-1">ライブラリ作者にとってのより多くの機会 <a class="header-anchor" href="#ライブラリ作者にとってのより多くの機会" aria-label="Permalink to &quot;ライブラリ作者にとってのより多くの機会&quot;">​</a></h4><p>マルチプラットフォームライブラリが公開されると、その中間ソースセットのAPIが適切に公開され、利用者が利用できるようになります。 ここでも、Kotlinツールチェーンは、JVM向けに意図されたAPIをJSコードで使用するなどの安全でない使用法に注意深く目を光らせながら、利用側のソースセットで利用可能なAPIを自動的に特定します。 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-share-on-platforms.html#share-code-in-libraries" target="_blank" rel="noreferrer">ライブラリでのコード共有</a>について詳しくはこちらをご覧ください。</p><h4 id="設定とセットアップ" tabindex="-1">設定とセットアップ <a class="header-anchor" href="#設定とセットアップ" aria-label="Permalink to &quot;設定とセットアップ&quot;">​</a></h4><p>Kotlin 1.6.20 から、すべての新しいマルチプラットフォームプロジェクトで階層型プロジェクト構造が適用されます。追加の設定は不要です。</p><ul><li><p>すでに<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-share-on-platforms.html#share-code-on-similar-platforms" target="_blank" rel="noreferrer">手動でオンにしている場合</a>は、<code>gradle.properties</code>から非推奨のオプションを削除できます。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># gradle.properties</span></span>
<span class="line"><span>kotlin.mpp.enableGranularSourceSetsMetadata=true</span></span>
<span class="line"><span>kotlin.native.enableDependencyPropagation=false // or &#39;true&#39;, depending on your previous setup</span></span></code></pre></div></li><li><p>Kotlin 1.6.20 の場合、最高の体験を得るために<a href="https://developer.android.com/studio" target="_blank" rel="noreferrer">Android Studio 2021.1.1</a> (Bumblebee) 以降を使用することをお勧めします。</p></li><li><p>オプトアウトすることも可能です。階層構造のサポートを無効にするには、<code>gradle.properties</code>で以下のオプションを設定します。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># gradle.properties</span></span>
<span class="line"><span>kotlin.mpp.hierarchicalStructureSupport=false</span></span></code></pre></div></li></ul><h4 id="フィードバックをお寄せください" tabindex="-1">フィードバックをお寄せください <a class="header-anchor" href="#フィードバックをお寄せください" aria-label="Permalink to &quot;フィードバックをお寄せください&quot;">​</a></h4><p>これはエコシステム全体にとって重要な変更です。より良いものにするために、皆様からのフィードバックをお待ちしております。</p><p>今すぐ試してみて、遭遇した問題があれば<a href="https://kotl.in/issue" target="_blank" rel="noreferrer">課題トラッカー</a>に報告してください。</p><h3 id="kotlin-cocoapods-gradle-プラグイン" tabindex="-1">Kotlin CocoaPods Gradle プラグイン <a class="header-anchor" href="#kotlin-cocoapods-gradle-プラグイン" aria-label="Permalink to &quot;Kotlin CocoaPods Gradle プラグイン&quot;">​</a></h3><p>CocoaPods統合を簡素化するために、Kotlin 1.6.20 では以下の機能が提供されます。</p><ul><li><p>CocoaPods プラグインには、登録されているすべてのターゲットで XCFramework をビルドし、Podspec ファイルを生成するタスクが追加されました。これは、Xcode と直接統合したくないが、成果物をビルドしてローカルの CocoaPods リポジトリにデプロイしたい場合に役立ちます。</p><p><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-build-native-binaries.html#build-xcframeworks" target="_blank" rel="noreferrer">XCFramework のビルド</a>について詳しくはこちらをご覧ください。</p></li><li><p>プロジェクトで<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-cocoapods-overview.html" target="_blank" rel="noreferrer">CocoaPods統合</a>を使用している場合、Gradleプロジェクト全体に必要なPodバージョンを指定するのが一般的でした。これで、さらに選択肢が増えました。</p><ul><li><code>cocoapods</code>ブロックでPodバージョンを直接指定する</li><li>引き続きGradleプロジェクトバージョンを使用する</li></ul><p>これらのプロパティのいずれも設定されていない場合、エラーが発生します。</p></li><li><p><code>cocoapods</code>ブロックでCocoaPod名を構成できるようになり、Gradleプロジェクト全体の名前を変更する必要がなくなりました。</p></li><li><p>CocoaPodsプラグインに新しい<code>extraSpecAttributes</code>プロパティが導入されました。これにより、以前はハードコードされていた<code>libraries</code>や<code>vendored_frameworks</code>などのPodspecファイルのプロパティを構成できます。</p></li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    cocoapods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        version </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;MyCocoaPod&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        extraSpecAttributes[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;social_media_url&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;https://twitter.com/kotlin&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        extraSpecAttributes[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;vendored_frameworks&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;CustomFramework.xcframework&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        extraSpecAttributes[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;libraries&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;xml&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Kotlin CocoaPods Gradleプラグインの完全な<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-cocoapods-dsl-reference.html" target="_blank" rel="noreferrer">DSLリファレンス</a>を参照してください。</p><h2 id="kotlin-js" tabindex="-1">Kotlin/JS <a class="header-anchor" href="#kotlin-js" aria-label="Permalink to &quot;Kotlin/JS&quot;">​</a></h2><p>Kotlin/JS の 1.6.20 における改善点は、主に IR コンパイラに影響を与えます。</p><ul><li><a href="#incremental-compilation-for-development-binaries-with-ir-compiler">開発用バイナリのインクリメンタルコンパイル (IR)</a></li><li><a href="#lazy-initialization-of-top-level-properties-by-default-with-ir-compiler">トップレベルプロパティの遅延初期化がデフォルトに (IR)</a></li><li><a href="#separate-js-files-for-project-modules-by-default-with-ir-compiler">プロジェクトモジュールのJSファイルがデフォルトで分離される (IR)</a></li><li><a href="#char-class-optimization">Char クラスの最適化 (IR)</a></li><li><a href="#improvements-to-export-and-typescript-declaration-generation">エクスポートの改善 (IR とレガシーバックエンドの両方)</a></li><li><a href="#aftertest-guarantees-for-asynchronous-tests">非同期テストに対する@AfterTest の保証</a></li></ul><h3 id="ir-コンパイラによる開発用バイナリのインクリメンタルコンパイル" tabindex="-1">IR コンパイラによる開発用バイナリのインクリメンタルコンパイル <a class="header-anchor" href="#ir-コンパイラによる開発用バイナリのインクリメンタルコンパイル" aria-label="Permalink to &quot;IR コンパイラによる開発用バイナリのインクリメンタルコンパイル&quot;">​</a></h3><p>IR コンパイラを使用した Kotlin/JS 開発をより効率的にするために、新しい <em>インクリメンタルコンパイル</em> モードを導入します。</p><p>このモードで<code>compileDevelopmentExecutableKotlinJs</code> Gradle タスクを使用して<strong>開発用バイナリ</strong>をビルドすると、コンパイラは以前のコンパイル結果をモジュールレベルでキャッシュします。 これにより、変更されていないソースファイルに対してキャッシュされたコンパイル結果が後続のコンパイル中に使用されるため、特に小さな変更の場合に、コンパイルがより迅速に完了します。 この改善は開発プロセス (編集-ビルド-デバッグサイクルの短縮) のみを対象としており、製品アーティファクトのビルドには影響しないことに注意してください。</p><p>開発用バイナリのインクリメンタルコンパイルを有効にするには、プロジェクトの<code>gradle.properties</code>に次の行を追加します。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># gradle.properties</span></span>
<span class="line"><span>kotlin.incremental.js.ir=true // false by default</span></span></code></pre></div><p>当社のテストプロジェクトでは、新しいモードによりインクリメンタルコンパイルが最大30%高速化されました。ただし、このモードでのクリーンビルドは、キャッシュを作成および設定する必要があるため、遅くなりました。</p><p>Kotlin/JS プロジェクトでインクリメンタルコンパイルを使用することについてのご意見は、<a href="https://youtrack.jetbrains.com/issue/KT-50203" target="_blank" rel="noreferrer">この YouTrack 課題</a>までお寄せください。</p><h3 id="ir-コンパイラでトップレベルプロパティの遅延初期化がデフォルトに" tabindex="-1">IR コンパイラでトップレベルプロパティの遅延初期化がデフォルトに <a class="header-anchor" href="#ir-コンパイラでトップレベルプロパティの遅延初期化がデフォルトに" aria-label="Permalink to &quot;IR コンパイラでトップレベルプロパティの遅延初期化がデフォルトに&quot;">​</a></h3><p>Kotlin 1.4.30 では、JS IR コンパイラで<a href="/ja/kotlin/whatsnew1430#lazy-initialization-of-top-level-properties">トップレベルプロパティの遅延初期化</a>のプロトタイプを提示しました。 アプリケーション起動時にすべてのプロパティを初期化する必要をなくすことで、遅延初期化は起動時間を短縮します。 当社の測定では、実際のKotlin/JSアプリケーションで約10%の高速化が示されました。</p><p>今回、このメカニズムを洗練させ、適切にテストした結果、IR コンパイラにおいてトップレベルプロパティの遅延初期化をデフォルトにすることにしました。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// lazy initialization (遅延初期化)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // intensive computations (集中的な計算)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    result</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// run は変数が最初に利用されたときに実行されます</span></span></code></pre></div><p>何らかの理由でプロパティを eager (アプリケーション起動時) に初期化する必要がある場合は、<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.native/-eager-initialization/" target="_blank" rel="noreferrer"><code>@EagerInitialization</code></a>アノテーションでマークしてください。</p><h3 id="ir-コンパイラでプロジェクトモジュールのjsファイルがデフォルトで分離される" tabindex="-1">IR コンパイラでプロジェクトモジュールのJSファイルがデフォルトで分離される <a class="header-anchor" href="#ir-コンパイラでプロジェクトモジュールのjsファイルがデフォルトで分離される" aria-label="Permalink to &quot;IR コンパイラでプロジェクトモジュールのJSファイルがデフォルトで分離される&quot;">​</a></h3><p>以前は、JS IR コンパイラはプロジェクトモジュールごとに<a href="https://youtrack.jetbrains.com/issue/KT-44319" target="_blank" rel="noreferrer">個別の<code>.js</code>ファイルを生成する機能</a>を提供していました。 これは、プロジェクト全体に対して1つの<code>.js</code>ファイルを出力するというデフォルトオプションの代替手段でした。 プロジェクト内の関数を使用するたびに、JSファイル全体を依存関係として含める必要があるため、このファイルは大きすぎて不便な場合があります。 複数のファイルにすることで、柔軟性が増し、そのような依存関係のサイズが減少します。この機能は<code>-Xir-per-module</code>コンパイラオプションで利用可能でした。</p><p>1.6.20 から、JS IR コンパイラはプロジェクトモジュールごとに個別の<code>.js</code>ファイルをデフォルトで生成します。</p><p>プロジェクトを単一の<code>.js</code>ファイルにコンパイルする機能は、以下のGradleプロパティで利用できます。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># gradle.properties</span></span>
<span class="line"><span>kotlin.js.ir.output.granularity=whole-program // \`per-module\`がデフォルトです</span></span></code></pre></div><p>以前のリリースでは、実験的なモジュールごとのモード（<code>-Xir-per-module=true</code>フラグで利用可能）では、各モジュールで<code>main()</code>関数が呼び出されました。これは通常の単一<code>.js</code>モードとは整合性がありません。1.6.20以降、どちらの場合でも<code>main()</code>関数はメインモジュールでのみ呼び出されます。モジュールがロードされたときに何らかのコードを実行する必要がある場合は、<code>@EagerInitialization</code>アノテーションが付けられたトップレベルプロパティを使用できます。<a href="#lazy-initialization-of-top-level-properties-by-default-with-ir-compiler">IRコンパイラでトップレベルプロパティの遅延初期化がデフォルトに</a>を参照してください。</p><h3 id="char-クラスの最適化" tabindex="-1">Char クラスの最適化 <a class="header-anchor" href="#char-クラスの最適化" aria-label="Permalink to &quot;Char クラスの最適化&quot;">​</a></h3><p><code>Char</code>クラスは、Kotlin/JSコンパイラによって（<a href="/ja/kotlin/inline-classes">インラインクラス</a>と同様に）ボクシングを導入せずに処理されるようになりました。 これにより、Kotlin/JSコードにおける文字操作が高速化されます。</p><p>パフォーマンスの向上に加えて、これにより<code>Char</code>がJavaScriptにエクスポートされる方法が変更され、<code>Number</code>に変換されるようになりました。</p><h3 id="エクスポートとtypescript宣言生成の改善" tabindex="-1">エクスポートとTypeScript宣言生成の改善 <a class="header-anchor" href="#エクスポートとtypescript宣言生成の改善" aria-label="Permalink to &quot;エクスポートとTypeScript宣言生成の改善&quot;">​</a></h3><p>Kotlin 1.6.20 では、エクスポートメカニズム (<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.js/-js-export/" target="_blank" rel="noreferrer"><code>@JsExport</code></a>アノテーション) に関する複数の修正と改善がもたらされており、これには<a href="/ja/kotlin/js-ir-compiler#preview-generation-of-typescript-declaration-files-d-ts">TypeScript 宣言 (<code>.d.ts</code>) の生成</a>も含まれます。 インターフェースとEnumをエクスポートする機能が追加され、以前報告された一部の特殊なケースでのエクスポート動作が修正されました。 詳細については、<a href="https://youtrack.jetbrains.com/issues?q=Project:%20Kotlin%20issue%20id:%20KT-45434,%20KT-44494,%20KT-37916,%20KT-43191,%20KT-46961,%20KT-40236" target="_blank" rel="noreferrer">YouTrack のエクスポート改善リスト</a>を参照してください。</p><p><a href="/ja/kotlin/js-to-kotlin-interop">JavaScript から Kotlin コードを使用する</a>方法について詳しくはこちらをご覧ください。</p><h3 id="非同期テストに対する-aftertest-の保証" tabindex="-1">非同期テストに対する @AfterTest の保証 <a class="header-anchor" href="#非同期テストに対する-aftertest-の保証" aria-label="Permalink to &quot;非同期テストに対する @AfterTest の保証&quot;">​</a></h3><p>Kotlin 1.6.20 では、Kotlin/JS 上での非同期テストにおいて<a href="https://kotlinlang.org/api/latest/kotlin.test/kotlin.test/-after-test/" target="_blank" rel="noreferrer"><code>@AfterTest</code></a>関数が適切に動作するようになりました。 テスト関数の戻り型が静的に<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.js/-promise/" target="_blank" rel="noreferrer"><code>Promise</code></a>として解決される場合、コンパイラは<code>@AfterTest</code>関数の実行を対応する<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.js/-promise/then.html" target="_blank" rel="noreferrer"><code>then()</code></a>コールバックにスケジュールするようになりました。</p><h2 id="セキュリティ" tabindex="-1">セキュリティ <a class="header-anchor" href="#セキュリティ" aria-label="Permalink to &quot;セキュリティ&quot;">​</a></h2><p>Kotlin 1.6.20 では、コードのセキュリティを向上させるためのいくつかの機能が導入されます。</p><ul><li><a href="#using-relative-paths-in-klibs">klib における相対パスの使用</a></li><li><a href="#persisting-yarn-lock-for-kotlin-js-gradle-projects">Kotlin/JS Gradle プロジェクトの yarn.lock の永続化</a></li><li><a href="#installation-of-npm-dependencies-with-ignore-scripts-by-default">npm 依存関係の <code>--ignore-scripts</code> によるデフォルトインストール</a></li></ul><h3 id="klib-における相対パスの使用" tabindex="-1">klib における相対パスの使用 <a class="header-anchor" href="#klib-における相対パスの使用" aria-label="Permalink to &quot;klib における相対パスの使用&quot;">​</a></h3><p><code>klib</code>形式のライブラリには、適切なデバッグ情報を生成するためのソースファイルのパスを含む、シリアライズされたIR表現が含まれています。 Kotlin 1.6.20 より前では、保存されるファイルパスは絶対パスでした。ライブラリの作者が絶対パスを共有したくない場合があるため、1.6.20 バージョンでは代替オプションが提供されます。</p><p><code>klib</code>を公開し、アーティファクトでソースファイルの相対パスのみを使用したい場合は、<code>-Xklib-relative-path-base</code>コンパイラオプションを1つ以上のソースファイルのベースパスと共に渡すことができます。</p>`,155)),t(p,{group:"build-script"},{default:e(()=>[t(l,{title:"Kotlin","group-key":"kotlin"},{default:e(()=>s[2]||(s[2]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withType"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(org.jetbrains.kotlin.gradle.dsl.KotlinCompile::"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"class"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"configureEach"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"    // $base はソースファイルのベースパスです")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    kotlinOptions.freeCompilerArgs "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"+="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "-Xklib-relative-path-base='),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"$base"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"')]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),t(l,{title:"Groovy","group-key":"groovy"},{default:e(()=>s[3]||(s[3]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"withType("),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"org.jetbrains.kotlin.gradle.dsl.KotlinCompile"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"configureEach {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    kotlinOptions {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"        // $base はソースファイルのベースパスです")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        freeCompilerArgs "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"+="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "-Xklib-relative-path-base='),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"$base"),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"')]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),s[14]||(s[14]=n('<h3 id="kotlin-js-gradle-プロジェクトの-yarn-lock-の永続化" tabindex="-1">Kotlin/JS Gradle プロジェクトの yarn.lock の永続化 <a class="header-anchor" href="#kotlin-js-gradle-プロジェクトの-yarn-lock-の永続化" aria-label="Permalink to &quot;Kotlin/JS Gradle プロジェクトの yarn.lock の永続化&quot;">​</a></h3><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>この機能は Kotlin 1.6.10 にバックポートされました。</p></div><p>Kotlin/JS Gradle プラグインは、<code>yarn.lock</code> ファイルを永続化する機能を提供するようになりました。これにより、追加の Gradle 設定なしでプロジェクトの npm 依存関係のバージョンをロックすることができます。 この機能は、プロジェクトのルートに自動生成された <code>kotlin-js-store</code> ディレクトリを追加することで、デフォルトのプロジェクト構造に変更をもたらします。 このディレクトリ内に <code>yarn.lock</code> ファイルが保持されます。</p><p><code>kotlin-js-store</code> ディレクトリとその内容をバージョン管理システムにコミットすることを強くお勧めします。 ロックファイルをバージョン管理システムにコミットすることは<a href="https://classic.yarnpkg.com/blog/2016/11/24/lockfiles-for-all/" target="_blank" rel="noreferrer">推奨されるプラクティス</a>です。これは、開発環境やCI/CDサービスなどのすべてのマシンで、アプリケーションがまったく同じ依存関係ツリーでビルドされることを保証するためです。 ロックファイルは、プロジェクトが新しいマシンでチェックアウトされたときに npm 依存関係がサイレントに更新されるのを防ぐことにもなり、これはセキュリティ上の懸念事項です。</p><p><a href="https://github.com/dependabot" target="_blank" rel="noreferrer">Dependabot</a> のようなツールも、Kotlin/JS プロジェクトの <code>yarn.lock</code> ファイルを解析し、依存している npm パッケージが侵害された場合に警告を提供できます。</p><p>必要に応じて、ビルドスクリプトでディレクトリ名とロックファイル名の両方を変更できます。</p>',6)),t(p,{group:"build-script"},{default:e(()=>[t(l,{title:"Kotlin","group-key":"kotlin"},{default:e(()=>s[4]||(s[4]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"rootProject.plugins."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withType"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"org"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"jetbrains"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"gradle"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"targets"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"js"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"yarn"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"YarnPlugin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"> {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    rootProject."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"the"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"org"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"jetbrains"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"gradle"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"targets"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"js"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"yarn"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"YarnRootExtension"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},">().lockFileDirectory "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"=")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        project.rootDir."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"resolve"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"my-kotlin-js-store"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    rootProject."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"the"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"org"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"jetbrains"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"gradle"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"targets"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"js"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"yarn"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"YarnRootExtension"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},">().lockFileName "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "my-yarn.lock"')]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),t(l,{title:"Groovy","group-key":"groovy"},{default:e(()=>s[5]||(s[5]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"rootProject"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"plugins"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"withType("),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"org.jetbrains.kotlin.gradle.targets.js.yarn.YarnPlugin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    rootProject"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"extensions"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"getByType("),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"org.jetbrains.kotlin.gradle.targets.js.yarn.YarnRootExtension"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"lockFileDirectory "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"=")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        file("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"my-kotlin-js-store"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    rootProject"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"extensions"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"getByType("),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"org.jetbrains.kotlin.gradle.targets.js.yarn.YarnRootExtension"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"lockFileName "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," 'my-yarn.lock'")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),s[15]||(s[15]=n('<div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>ロックファイルの名前を変更すると、依存関係検査ツールがファイルを認識しなくなる可能性があります。</p></div><h3 id="npm-依存関係の-ignore-scripts-によるデフォルトインストール" tabindex="-1">npm 依存関係の --ignore-scripts によるデフォルトインストール <a class="header-anchor" href="#npm-依存関係の-ignore-scripts-によるデフォルトインストール" aria-label="Permalink to &quot;npm 依存関係の --ignore-scripts によるデフォルトインストール&quot;">​</a></h3><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>この機能は Kotlin 1.6.10 にバックポートされました。</p></div><p>Kotlin/JS Gradle プラグインは、デフォルトで npm 依存関係のインストール中に<a href="https://docs.npmjs.com/cli/v8/using-npm/scripts#life-cycle-scripts" target="_blank" rel="noreferrer">ライフサイクルスクリプト</a>の実行を防止するようになりました。 この変更は、侵害された npm パッケージからの悪意のあるコードの実行の可能性を減らすことを目的としています。</p><p>以前の設定に戻すには、<code>build.gradle(.kts)</code>に以下の行を追加してライフサイクルスクリプトの実行を明示的に有効にすることができます。</p>',5)),t(p,{group:"build-script"},{default:e(()=>[t(l,{title:"Kotlin","group-key":"kotlin"},{default:e(()=>s[6]||(s[6]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"rootProject.plugins."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withType"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"org"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"jetbrains"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"gradle"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"targets"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"js"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"yarn"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"YarnPlugin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"> {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    rootProject."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"the"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"org"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"jetbrains"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"gradle"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"targets"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"js"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"yarn"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"YarnRootExtension"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},">().ignoreScripts "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," false")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),t(l,{title:"Groovy","group-key":"groovy"},{default:e(()=>s[7]||(s[7]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"rootProject"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"plugins"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"withType("),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"org.jetbrains.kotlin.gradle.targets.js.yarn.YarnPlugin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    rootProject"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"extensions"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"getByType("),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"org.jetbrains.kotlin.gradle.targets.js.yarn.YarnRootExtension"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"ignoreScripts "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," false")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),s[16]||(s[16]=n(`<p><a href="/ja/kotlin/js-project-setup#npm-dependencies">Kotlin/JS Gradle プロジェクトの npm 依存関係</a>について詳しくはこちらをご覧ください。</p><h2 id="gradle" tabindex="-1">Gradle <a class="header-anchor" href="#gradle" aria-label="Permalink to &quot;Gradle&quot;">​</a></h2><p>Kotlin 1.6.20 では、Kotlin Gradle プラグインに以下の変更が加えられました。</p><ul><li>Kotlin コンパイラの実行戦略を定義する新しい<a href="#properties-for-defining-kotlin-compiler-execution-strategy">プロパティ<code>kotlin.compiler.execution.strategy</code>および<code>compilerExecutionStrategy</code></a></li><li><a href="#deprecation-of-build-options-for-kapt-and-coroutines"><code>kapt.use.worker.api</code>、<code>kotlin.experimental.coroutines</code>、および<code>kotlin.coroutines</code>ビルドオプションの非推奨化</a></li><li><a href="#removal-of-the-kotlin-parallel-tasks-in-project-build-option"><code>kotlin.parallel.tasks.in.project</code>ビルドオプションの削除</a></li></ul><h3 id="kotlin-コンパイラの実行戦略を定義するためのプロパティ" tabindex="-1">Kotlin コンパイラの実行戦略を定義するためのプロパティ <a class="header-anchor" href="#kotlin-コンパイラの実行戦略を定義するためのプロパティ" aria-label="Permalink to &quot;Kotlin コンパイラの実行戦略を定義するためのプロパティ&quot;">​</a></h3><p>Kotlin 1.6.20 より前では、Kotlin コンパイラの実行戦略を定義するためにシステムプロパティ<code>-Dkotlin.compiler.execution.strategy</code>を使用していました。 このプロパティは場合によっては不便なことがありました。 Kotlin 1.6.20 では、同じ名前のGradleプロパティ<code>kotlin.compiler.execution.strategy</code>とコンパイルタスクプロパティ<code>compilerExecutionStrategy</code>が導入されました。</p><p>システムプロパティは引き続き動作しますが、将来のリリースで削除される予定です。</p><p>現在のプロパティの優先順位は次のとおりです。</p><ul><li>タスクプロパティ<code>compilerExecutionStrategy</code>は、システムプロパティおよびGradleプロパティ<code>kotlin.compiler.execution.strategy</code>よりも優先されます。</li><li>Gradleプロパティはシステムプロパティよりも優先されます。</li></ul><p>これらのプロパティに割り当てることができるコンパイラ実行戦略は3つあります。</p><table tabindex="0"><thead><tr><th>戦略</th><th>Kotlin コンパイラが実行される場所</th><th>インクリメンタルコンパイル</th><th>その他の特性</th></tr></thead><tbody><tr><td>Daemon</td><td>独自のデーモンプロセス内</td><td>はい</td><td><em>デフォルト戦略</em>。異なるGradleデーモン間で共有可能</td></tr><tr><td>In process</td><td>Gradle デーモンプロセス内</td><td>いいえ</td><td>Gradle デーモンとヒープを共有する可能性あり</td></tr><tr><td>Out of process</td><td>各呼び出しで別プロセス</td><td>いいえ</td><td>—</td></tr></tbody></table><p>したがって、<code>kotlin.compiler.execution.strategy</code>プロパティ（システムとGradleの両方）で利用可能な値は次のとおりです。</p><ol><li><code>daemon</code>（デフォルト）</li><li><code>in-process</code></li><li><code>out-of-process</code></li></ol><p><code>gradle.properties</code>でGradleプロパティ<code>kotlin.compiler.execution.strategy</code>を使用します。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># gradle.properties</span></span>
<span class="line"><span>kotlin.compiler.execution.strategy=out-of-process</span></span></code></pre></div><p><code>compilerExecutionStrategy</code>タスクプロパティに利用可能な値は次のとおりです。</p><ol><li><code>org.jetbrains.kotlin.gradle.tasks.KotlinCompilerExecutionStrategy.DAEMON</code> (デフォルト)</li><li><code>org.jetbrains.kotlin.gradle.tasks.KotlinCompilerExecutionStrategy.IN_PROCESS</code></li><li><code>org.jetbrains.kotlin.gradle.tasks.KotlinCompilerExecutionStrategy.OUT_OF_PROCESS</code></li></ol><p><code>build.gradle.kts</code>ビルドスクリプトでタスクプロパティ<code>compilerExecutionStrategy</code>を使用します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.kotlin.gradle.dsl.KotlinCompile</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.kotlin.gradle.tasks.KotlinCompilerExecutionStrategy</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tasks.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KotlinCompile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configureEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    compilerExecutionStrategy.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(KotlinCompilerExecutionStrategy.IN_PROCESS)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://youtrack.jetbrains.com/issue/KT-49299" target="_blank" rel="noreferrer">この YouTrack タスク</a>にご意見をお寄せください。</p><h3 id="kapt-とコルーチンのビルドオプションの非推奨化" tabindex="-1">kapt とコルーチンのビルドオプションの非推奨化 <a class="header-anchor" href="#kapt-とコルーチンのビルドオプションの非推奨化" aria-label="Permalink to &quot;kapt とコルーチンのビルドオプションの非推奨化&quot;">​</a></h3><p>Kotlin 1.6.20 では、プロパティの非推奨レベルを変更しました。</p><ul><li><p><code>kapt.use.worker.api</code>によるKotlinデーモン経由での<a href="/ja/kotlin/kapt">kapt</a>の実行機能は非推奨になりました。これはGradleの出力に警告を生成します。 デフォルトでは、<a href="/ja/kotlin/kapt#run-kapt-tasks-in-parallel">kapt は 1.3.70 リリース以降 Gradle worker を使用しており</a>、この方法に固執することをお勧めします。</p><p>今後、<code>kapt.use.worker.api</code>オプションは削除される予定です。</p></li><li><p><code>kotlin.experimental.coroutines</code> Gradle DSL オプションと<code>gradle.properties</code>で使用される<code>kotlin.coroutines</code>プロパティは非推奨になりました。 _中断関数_を使用するか、<code>build.gradle(.kts)</code>ファイルに<a href="/ja/kotlin/gradle-configure-project#set-a-dependency-on-a-kotlinx-library"><code>kotlinx.coroutines</code>依存関係を追加</a>するだけです。</p><p>コルーチンの詳細については、<a href="/ja/kotlin/coroutines-guide">コルーチンガイド</a>を参照してください。</p></li></ul><h3 id="kotlin-parallel-tasks-in-project-ビルドオプションの削除" tabindex="-1">kotlin.parallel.tasks.in.project ビルドオプションの削除 <a class="header-anchor" href="#kotlin-parallel-tasks-in-project-ビルドオプションの削除" aria-label="Permalink to &quot;kotlin.parallel.tasks.in.project ビルドオプションの削除&quot;">​</a></h3><p>Kotlin 1.5.20 では、<a href="/ja/kotlin/whatsnew1520#deprecation-of-the-kotlin-parallel-tasks-in-project-build-property">ビルドオプション<code>kotlin.parallel.tasks.in.project</code>の非推奨化</a>を発表しました。 このオプションは Kotlin 1.6.20 で削除されました。</p><p>プロジェクトによっては、Kotlin デーモンでの並列コンパイルにはより多くのメモリが必要になる場合があります。 メモリ消費を削減するには、<a href="/ja/kotlin/gradle-compilation-and-caches#setting-kotlin-daemon-s-jvm-arguments">Kotlin デーモンの JVM ヒープサイズを増やしてください</a>。</p><p>Kotlin Gradle プラグインで<a href="/ja/kotlin/gradle-compiler-options">現在サポートされているコンパイラオプション</a>の詳細はこちらをご覧ください。</p>`,27))])}const x=h(g,[["render",E]]);export{C as __pageData,x as default};
