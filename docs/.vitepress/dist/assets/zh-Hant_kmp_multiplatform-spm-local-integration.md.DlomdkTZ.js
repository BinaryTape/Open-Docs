import{_ as r}from"./chunks/direct-integration-scheme.Cw1ubqmC.js";import{_ as d,a as k,b as h,c as g}from"./chunks/xcode-spm-usage.Dn1odtN3.js";import{_ as c,C as p,c as u,o as E,j as s,G as l,ag as t,a,w as n}from"./chunks/framework.Bksy39di.js";const B=JSON.parse('{"title":"在本地 Swift 套件中使用 Kotlin","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kmp/multiplatform-spm-local-integration.md","filePath":"zh-Hant/kmp/multiplatform-spm-local-integration.md","lastUpdated":1755516278000}'),m={name:"zh-Hant/kmp/multiplatform-spm-local-integration.md"};function F(y,i,f,C,b,S){const o=p("tldr"),e=p("shortcut");return E(),u("div",null,[i[17]||(i[17]=s("h1",{id:"在本地-swift-套件中使用-kotlin",tabindex:"-1"},[a("在本地 Swift 套件中使用 Kotlin "),s("a",{class:"header-anchor",href:"#在本地-swift-套件中使用-kotlin","aria-label":'Permalink to "在本地 Swift 套件中使用 Kotlin"'},"​")],-1)),l(o,null,{default:n(()=>i[0]||(i[0]=[a(" 這是一種本地整合方法。如果符合以下條件，它可能對您有用："),s("br",null,null,-1),s("ul",null,[s("li",null,"您有一個帶有本地 SPM 模組的 iOS 應用程式。"),s("li",null,"您已經在本地機器上設定了一個針對 iOS 的 Kotlin Multiplatform 專案。"),s("li",null,[a("您現有的 iOS 專案具有靜態連結類型。"),s("br")])],-1),s("p",null,[s("a",{href:"./multiplatform-ios-integration-overview"},"選擇最適合您的整合方法")],-1)])),_:1}),i[18]||(i[18]=t('<p>在本教學中，您將學習如何使用 Swift package manager (SPM) 將 Kotlin Multiplatform 專案中的 Kotlin 框架整合到本地套件中。</p><p><img src="'+r+'" alt="Direct integration diagram" width="700"></p><p>為了設定整合，您將添加一個特殊腳本，該腳本使用 <code>embedAndSignAppleFrameworkForXcode</code> Gradle 任務作為專案建構設定中的預執行動作 (pre-action)。要查看在通用程式碼中所做的更改反映在您的 Xcode 專案中，您只需要重新建構 Kotlin Multiplatform 專案。</p><p>這樣，與將腳本添加到建構階段並需要同時重新建構 Kotlin Multiplatform 專案和 iOS 專案才能獲取通用程式碼更改的常規直接整合方法相比，您可以輕鬆地在本地 Swift 套件中使用 Kotlin 程式碼。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>如果您不熟悉 Kotlin Multiplatform，請先學習如何<a href="./quickstart">設定環境</a>以及<a href="./compose-multiplatform-create-first-app">從頭開始建立跨平台應用程式</a>。</p></div><h2 id="設定專案" tabindex="-1">設定專案 <a class="header-anchor" href="#設定專案" aria-label="Permalink to &quot;設定專案&quot;">​</a></h2><p>該功能從 Kotlin 2.0.0 開始提供。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>若要檢查 Kotlin 版本，請導航到您的 Kotlin Multiplatform 專案根目錄中的 <code>build.gradle(.kts)</code> 文件。您將在文件頂部的 <code>plugins {}</code> 區塊中看到當前版本。 或者，檢查 <code>gradle/libs.versions.toml</code> 文件中的版本目錄。</p></div><p>本教學假設您的專案使用<a href="./multiplatform-direct-integration">直接整合</a>方法，並在專案的建構階段使用 <code>embedAndSignAppleFrameworkForXcode</code> 任務。如果您透過 CocoaPods 插件或透過帶有 <code>binaryTarget</code> 的 Swift 套件連接 Kotlin 框架，請先進行遷移。</p>',9)),i[19]||(i[19]=s("h3",{"initial-collapse-state":"collapsed",collapsible:"true",id:"從-spm-binarytarget-整合遷移",tabindex:"-1"},[a("從 SPM binaryTarget 整合遷移 "),s("a",{class:"header-anchor",href:"#從-spm-binarytarget-整合遷移","aria-label":'Permalink to "從 SPM binaryTarget 整合遷移 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),i[20]||(i[20]=s("p",null,[a("若要從帶有 "),s("code",null,"binaryTarget"),a(" 的 SPM 整合遷移：")],-1)),s("ol",null,[s("li",null,[i[2]||(i[2]=a("在 Xcode 中，使用 ")),i[3]||(i[3]=s("strong",null,"Product",-1)),i[4]||(i[4]=a(" | ")),i[5]||(i[5]=s("strong",null,"Clean Build Folder",-1)),i[6]||(i[6]=a(" 或 ")),l(e,null,{default:n(()=>i[1]||(i[1]=[a("Cmd + Shift + K")])),_:1}),i[7]||(i[7]=a(" 快捷鍵清理建構目錄。"))]),i[8]||(i[8]=s("li",null,[a("在每個 "),s("code",null,"Package.swift"),a(" 文件中，移除對內部包含 Kotlin 框架的套件的依賴，以及對產品的目標依賴。")],-1))]),i[21]||(i[21]=s("h3",{"initial-collapse-state":"collapsed",collapsible:"true",id:"從-cocoapods-插件遷移",tabindex:"-1"},[a("從 CocoaPods 插件遷移 "),s("a",{class:"header-anchor",href:"#從-cocoapods-插件遷移","aria-label":'Permalink to "從 CocoaPods 插件遷移 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),i[22]||(i[22]=s("div",{class:"danger custom-block"},[s("p",{class:"custom-block-title"},"WARNING"),s("p",null,[a("如果您在 "),s("code",null,"cocoapods {}"),a(" 區塊中有對其他 Pod 的依賴，則必須採用 CocoaPods 整合方法。目前，在多模式 SPM 專案中同時擁有對 Pod 和 Kotlin 框架的依賴是不可能的。")])],-1)),i[23]||(i[23]=s("p",null,"若要從 CocoaPods 插件遷移：",-1)),s("ol",null,[s("li",null,[s("p",null,[i[10]||(i[10]=a("在 Xcode 中，使用 ")),i[11]||(i[11]=s("strong",null,"Product",-1)),i[12]||(i[12]=a(" | ")),i[13]||(i[13]=s("strong",null,"Clean Build Folder",-1)),i[14]||(i[14]=a(" 或 ")),l(e,null,{default:n(()=>i[9]||(i[9]=[a("Cmd + Shift + K")])),_:1}),i[15]||(i[15]=a(" 快捷鍵清理建構目錄。"))])]),i[16]||(i[16]=t('<li><p>在包含 Podfile 的目錄中，執行以下命令：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pod deintegrate</span></span></code></pre></div></li><li><p>從您的 <code>build.gradle(.kts)</code> 文件中移除 <code>cocoapods {}</code> 區塊。</p></li><li><p>刪除 <code>.podspec</code> 文件和 Podfile。</p></li>',3))]),i[24]||(i[24]=t('<h2 id="將框架連接到您的專案" tabindex="-1">將框架連接到您的專案 <a class="header-anchor" href="#將框架連接到您的專案" aria-label="Permalink to &quot;將框架連接到您的專案&quot;">​</a></h2><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>目前不支援整合到 <code>swift build</code> 中。</p></div><p>為了能夠在本地 Swift 套件中使用 Kotlin 程式碼，請將從 Multiplatform 專案生成的 Kotlin 框架連接到您的 Xcode 專案：</p><ol><li><p>在 Xcode 中，前往 <strong>Product</strong> | <strong>Scheme</strong> | <strong>Edit scheme</strong> 或點擊頂部欄中的 scheme 圖標並選擇 <strong>Edit scheme</strong>：</p><p><img src="'+d+'" alt="Edit scheme" width="700"></p></li><li><p>選擇 <strong>Build</strong> | <strong>Pre-actions</strong> 項目，然後點擊 <strong>+</strong> | <strong>New Run Script Action</strong>：</p><p><img src="'+k+`" alt="New run script action" width="700"></p></li><li><p>調整以下腳本並將其作為動作添加：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&lt;Path to the root of the multiplatform project&gt;&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> :</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Shared</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> module</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:embedAndSignAppleFrameworkForXcode</span></span></code></pre></div><ul><li>在 <code>cd</code> 命令中，指定您的 Kotlin Multiplatform 專案的根路徑，例如 <code>$SRCROOT/..</code>。</li><li>在 <code>./gradlew</code> 命令中，指定共享模組的名稱，例如 <code>:shared</code> 或 <code>:composeApp</code>。</li></ul></li><li><p>在 <strong>Provide build settings from</strong> 部分中選擇您的應用程式目標：</p><p><img src="`+h+`" alt="Filled run script action" width="700"></p></li><li><p>您現在可以將共享模組導入到您的本地 Swift 套件中並使用 Kotlin 程式碼。</p><p>在 Xcode 中，導航到您的本地 Swift 套件並定義一個帶有模組導入的函數，例如：</p><div class="language-Swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Shared</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> greetingsFromSpmLocalPackage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Greeting.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><img src="`+g+`" alt="SPM usage" width="700"></p></li><li><p>在您的 iOS 專案的 <code>ContentView.swift</code> 文件中，您現在可以通過導入本地套件來使用此函數：</p><div class="language-Swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SwiftUI</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SpmLocalPackage</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ContentView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        Vstack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            Image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">systemName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;globe&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">imageScale</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.large)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">foregroundStyle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.tint)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">greetingsFromSpmLocalPackage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">padding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#Preview</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    ContentView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>在 Xcode 中建構專案。如果一切設定正確，專案建構將會成功。</p></li></ol><p>還有幾個值得考慮的因素：</p><ul><li>如果您有不同於預設 <code>Debug</code> 或 <code>Release</code> 的自訂建構配置，請在 <strong>Build Settings</strong> 標籤下，在 <strong>User-Defined</strong> 中添加 <code>KOTLIN_FRAMEWORK_BUILD_TYPE</code> 設定並將其設定為 <code>Debug</code> 或 <code>Release</code>。</li><li>如果您遇到腳本沙盒錯誤，請雙擊專案名稱打開 iOS 專案設定，然後在 <strong>Build Settings</strong> 標籤下，在 <strong>Build Options</strong> 中禁用 <strong>User Script Sandboxing</strong>。</li></ul><h2 id="接下來" tabindex="-1">接下來 <a class="header-anchor" href="#接下來" aria-label="Permalink to &quot;接下來&quot;">​</a></h2><ul><li><a href="./multiplatform-ios-integration-overview">選擇您的整合方法</a></li><li><a href="./multiplatform-spm-export">了解如何設定 Swift 套件匯出</a></li></ul>`,8))])}const A=c(m,[["render",F]]);export{B as __pageData,A as default};
