import{_ as r}from"./chunks/k2-mode.BqpKbQZk.js";import{_ as o}from"./chunks/compiler-options-levels.DqXOqvYF.js";import{_ as d,C as h,c as E,o as c,ag as e,G as n,w as l,j as s,a as i}from"./chunks/framework.Bksy39di.js";const D=JSON.parse('{"title":"Kotlin 2.0.0 中的新特性","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/whatsnew20.md","filePath":"kotlin/whatsnew20.md","lastUpdated":1754307826000}'),g={name:"kotlin/whatsnew20.md"};function y(u,a,F,m,b,C){const k=h("YouTubeVideo"),t=h("tab"),p=h("tabs");return c(),E("div",null,[a[6]||(a[6]=e('<h1 id="kotlin-2-0-0-中的新特性" tabindex="-1">Kotlin 2.0.0 中的新特性 <a class="header-anchor" href="#kotlin-2-0-0-中的新特性" aria-label="Permalink to &quot;Kotlin 2.0.0 中的新特性&quot;">​</a></h1><p><em><a href="/kotlin/releases#release-details">发布日期：2024 年 5 月 21 日</a></em></p><p>Kotlin 2.0.0 版本已发布，并且<a href="#kotlin-k2-compiler">新的 Kotlin K2 编译器</a>已稳定！此外，以下是一些其他亮点：</p><ul><li><a href="#new-compose-compiler-gradle-plugin">新的 Compose 编译器 Gradle 插件</a></li><li><a href="#generation-of-lambda-functions-using-invokedynamic">使用 invokedynamic 生成 lambda 函数</a></li><li><a href="#the-kotlinx-metadata-jvm-library-is-stable">kotlinx-metadata-jvm 库现已稳定</a></li><li><a href="#monitoring-gc-performance-with-signposts-on-apple-platforms">使用 signpost 在 Apple 平台上监控 Kotlin/Native 的 GC 性能</a></li><li><a href="#resolving-conflicts-with-objective-c-methods">解决 Kotlin/Native 中与 Objective-C 方法的冲突</a></li><li><a href="#support-for-named-export">支持 Kotlin/Wasm 中的命名导出</a></li><li><a href="#support-for-unsigned-primitive-types-in-functions-with-jsexport">支持 Kotlin/Wasm 中带 @JsExport 的函数中使用无符号原始类型</a></li><li><a href="#optimized-production-builds-by-default-using-binaryen">默认使用 Binaryen 优化生产构建</a></li><li><a href="#new-gradle-dsl-for-compiler-options-in-multiplatform-projects">多平台项目中编译器选项的新 Gradle DSL</a></li><li><a href="#stable-replacement-of-the-enum-class-values-generic-function">enum class values 泛型函数的稳定替代</a></li><li><a href="#stable-autocloseable-interface">稳定的 AutoCloseable 接口</a></li></ul><p>Kotlin 2.0 是 JetBrains 团队的一个重要里程碑。此次发布是 KotlinConf 2024 的核心。请观看开幕主题演讲，我们在其中宣布了激动人心的更新，并介绍了 Kotlin 语言的最新工作：</p>',5)),n(k,{src:"https://www.youtube.com/v/Ar73Axsz2YA",title:"KotlinConf'24 - 主题演讲"}),a[7]||(a[7]=e('<h2 id="ide-支持" tabindex="-1">IDE 支持 <a class="header-anchor" href="#ide-支持" aria-label="Permalink to &quot;IDE 支持&quot;">​</a></h2><p>支持 Kotlin 2.0.0 的 Kotlin 插件已捆绑在最新的 IntelliJ IDEA 和 Android Studio 中。 您无需更新 IDE 中的 Kotlin 插件。 您只需在构建脚本中将 <a href="/kotlin/releases#update-to-a-new-kotlin-version">Kotlin 版本</a>更改为 Kotlin 2.0.0。</p><ul><li>有关 IntelliJ IDEA 对 Kotlin K2 编译器支持的详细信息，请参见 <a href="#support-in-ides">IDE 支持</a>。</li><li>有关 IntelliJ IDEA 对 Kotlin 支持的更多详细信息，请参见 <a href="/kotlin/releases#ide-support">Kotlin 版本发布</a>。</li></ul><h2 id="kotlin-k2-编译器" tabindex="-1">Kotlin K2 编译器 <a class="header-anchor" href="#kotlin-k2-编译器" aria-label="Permalink to &quot;Kotlin K2 编译器&quot;">​</a></h2><p>通往 K2 编译器的道路漫长，但现在 JetBrains 团队终于准备好宣布其稳定版发布。 在 Kotlin 2.0.0 中，新的 Kotlin K2 编译器已默认使用，并且对于所有<a href="/kotlin/components-stability">目标</a>平台——JVM、Native、Wasm 和 JS——都是稳定的。新编译器带来了显著的性能提升，加速了新语言特性开发，统一了 Kotlin 支持的所有平台，并为多平台项目提供了更好的架构。</p><p>JetBrains 团队通过成功编译选定的用户和内部项目中的 1000 万行代码，确保了新编译器的质量。18,000 名开发人员参与了稳定化过程，在总计 80,000 个项目中测试了新的 K2 编译器，并报告了他们发现的任何问题。</p><p>为了帮助 K2 编译器的迁移过程尽可能顺利，我们创建了 <a href="/kotlin/k2-compiler-migration-guide">K2 编译器迁移指南</a>。 本指南解释了编译器的诸多优点，强调了您可能遇到的任何变化，并描述了在必要时如何回滚到上一个版本。</p><p>在<a href="https://blog.jetbrains.com/kotlin/2024/04/k2-compiler-performance-benchmarks-and-how-to-measure-them-on-your-projects/" target="_blank" rel="noreferrer">一篇博客文章</a>中，我们探讨了 K2 编译器在不同项目中的性能。如果您想查看 K2 编译器性能的真实数据，并了解如何从您自己的项目中收集性能基准，请查阅该文章。</p><p>您还可以观看 Michail Zarečenskij（首席语言设计者）在 KotlinConf 2024 上进行的此次演讲，他讨论了 Kotlin 中的特性演进和 K2 编译器：</p>',9)),n(k,{src:"https://www.youtube.com/v/tAGJ5zJXJ7w",title:"Kotlin 2.0 及更高版本的语言特性"}),a[8]||(a[8]=e(`<h3 id="当前-k2-编译器限制" tabindex="-1">当前 K2 编译器限制 <a class="header-anchor" href="#当前-k2-编译器限制" aria-label="Permalink to &quot;当前 K2 编译器限制&quot;">​</a></h3><p>在您的 Gradle 项目中启用 K2 会有一些限制，这些限制可能会影响使用 Gradle 8.3 以下版本的项目，包括以下情况：</p><ul><li>从 <code>buildSrc</code> 编译源代码。</li><li>在 included build 中编译 Gradle 插件。</li><li>如果在 Gradle 8.3 以下版本项目中使用其他 Gradle 插件，则会编译这些插件。</li><li>构建 Gradle 插件依赖项。</li></ul><p>如果您遇到上述任何问题，可以采取以下步骤来解决：</p><ul><li><p>为 <code>buildSrc</code>、任何 Gradle 插件及其依赖项设置语言版本：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        languageVersion.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_1_9)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        apiVersion.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(org.jetbrains.kotlin.gradle.dsl.KotlinVersion.KOTLIN_1_9)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>如果您为特定任务配置语言和 API 版本，则这些值将覆盖 <code>compilerOptions</code> 扩展设置的值。在这种情况下，语言和 API 版本不应高于 1.9。</p></div></li><li><p>将您项目中的 Gradle 版本更新到 8.3 或更高版本。</p></li></ul><h3 id="智能转换改进" tabindex="-1">智能转换改进 <a class="header-anchor" href="#智能转换改进" aria-label="Permalink to &quot;智能转换改进&quot;">​</a></h3><p>Kotlin 编译器可以在特定情况下自动将对象转换为某种类型，省去了您手动进行显式转换的麻烦。这被称为<a href="/kotlin/typecasts#smart-casts">智能转换</a>。 Kotlin K2 编译器现在在比以前更多的场景下执行智能转换。</p><p>在 Kotlin 2.0.0 中，我们改进了以下方面的智能转换：</p><ul><li><a href="#local-variables-and-further-scopes">局部变量及更广阔的作用域</a></li><li><a href="#type-checks-with-logical-or-operator">使用逻辑或操作符进行类型检测</a></li><li><a href="#inline-functions">内联函数</a></li><li><a href="#properties-with-function-types">函数类型的属性</a></li><li><a href="#exception-handling">异常处理</a></li><li><a href="#increment-and-decrement-operators">递增和递减操作符</a></li></ul><h4 id="局部变量及更广阔的作用域" tabindex="-1">局部变量及更广阔的作用域 <a class="header-anchor" href="#局部变量及更广阔的作用域" aria-label="Permalink to &quot;局部变量及更广阔的作用域&quot;">​</a></h4><p>此前，如果一个变量在 <code>if</code> 条件内求值结果为非 <code>null</code>，该变量会被智能转换。有关此变量的信息随后会在 <code>if</code> 代码块的作用域内进一步共享。</p><p>然而，如果您在 <code>if</code> 条件<strong>之外</strong>声明变量，则在 <code>if</code> 条件内将没有关于该变量的信息可用，因此无法进行智能转换。<code>when</code> 表达式和 <code>while</code> 循环也存在这种行为。</p><p>从 Kotlin 2.0.0 开始，如果您在使用 <code>if</code>、<code>when</code> 或 <code>while</code> 条件之前声明变量，那么编译器收集到的关于该变量的任何信息都将在相应的代码块中可访问，以便进行智能转换。</p><p>当您想将布尔条件提取到变量中时，这会很有用。然后，您可以为变量提供有意义的名称，这将提高代码可读性，并使其能够在代码中重复使用。例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Cat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> purr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Purr purr&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> petAnimal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(animal: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isCat </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> animal </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Cat</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (isCat) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 在 Kotlin 2.0.0 中，编译器可以访问</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 有关 isCat 的信息，因此它知道</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // animal 被智能转换为 Cat 类型。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 因此，可以调用 purr() 函数。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 在 Kotlin 1.9.20 中，编译器不知道</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 有关智能转换的信息，因此调用 purr()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 函数会触发错误。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        animal.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">purr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> kitty </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Cat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    petAnimal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(kitty)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Purr purr</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="使用逻辑或操作符进行类型检测" tabindex="-1">使用逻辑或操作符进行类型检测 <a class="header-anchor" href="#使用逻辑或操作符进行类型检测" aria-label="Permalink to &quot;使用逻辑或操作符进行类型检测&quot;">​</a></h4><p>在 Kotlin 2.0.0 中，如果您将对象的类型检测与或操作符 (<code>||</code>) 结合使用，则会智能转换为它们最近的公共超类型。在此更改之前，智能转换总是针对 <code>Any</code> 类型进行的。</p><p>在这种情况下，您仍然需要在此后手动检测对象类型，然后才能访问其任何属性或调用其函数。例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> signal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Ok</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Status</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Postponed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Status</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Declined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Status</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> signalCheck</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(signalStatus: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (signalStatus </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Postponed </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> signalStatus </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Declined) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // signalStatus 被智能转换为公共超类型 Status</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        signalStatus.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">signal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 在 Kotlin 2.0.0 之前，signalStatus 被智能转换</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 为 Any 类型，因此调用 signal() 函数会触发</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 未解析引用错误。signal() 函数只有在</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 再次进行类型检测后才能成功调用：</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // check(signalStatus is Status)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // signalStatus.signal()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>公共超类型是<a href="https://en.wikipedia.org/wiki/Union_type" target="_blank" rel="noreferrer">联合类型</a>的<strong>近似</strong>。Kotlin 不支持联合类型。</p></div><h4 id="内联函数" tabindex="-1">内联函数 <a class="header-anchor" href="#内联函数" aria-label="Permalink to &quot;内联函数&quot;">​</a></h4><p>在 Kotlin 2.0.0 中，K2 编译器以不同的方式处理内联函数， 结合其他编译器分析，判断进行智能转换是否安全。</p><p>具体来说，内联函数现在被视为具有隐式的 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.contracts/-contract-builder/calls-in-place.html" target="_blank" rel="noreferrer"><code>callsInPlace</code></a> 契约。这意味着传递给内联函数的任何 lambda 函数都会在原地调用。由于 lambda 函数是在原地调用的，编译器知道 lambda 函数不会泄露对其函数体中包含的任何变量的引用。</p><p>编译器使用此知识以及其他编译器分析来决定智能转换任何捕获的变量是否安全。例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Processor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> process</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">inline</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> inlineAction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Unit) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> nextProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Processor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> runProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Processor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> processor: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Processor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    inlineAction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 在 Kotlin 2.0.0 中，编译器知道 processor </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 是一个局部变量，并且 inlineAction() 是一个内联函数，因此</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 对 processor 的引用不会泄露。因此，进行智能转换是安全的。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 如果 processor 不为 null，则 processor 会被智能转换</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (processor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 编译器知道 processor 不为 null，因此无需安全调用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            processor.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">process</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 在 Kotlin 1.9.20 中，您必须执行安全调用：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // processor?.process()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        processor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> nextProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> processor</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="函数类型的属性" tabindex="-1">函数类型的属性 <a class="header-anchor" href="#函数类型的属性" aria-label="Permalink to &quot;函数类型的属性&quot;">​</a></h4><p>在 Kotlin 的先前版本中，存在一个错误，导致函数类型的类属性无法智能转换。 我们在 Kotlin 2.0.0 和 K2 编译器中修复了此行为。例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Holder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> provider: (() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Unit)?) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> process</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 在 Kotlin 2.0.0 中，如果 provider 不为 null，则</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // provider 会被智能转换</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (provider </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 编译器知道 provider 不为 null</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            provider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 在 1.9.20 中，编译器不知道 provider 不为</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // null，因此会触发错误：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // Reference has a nullable type &#39;(() -&gt; Unit)?&#39;, use explicit &#39;?.invoke()&#39; to make a function-like call instead</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>如果您重载 <code>invoke</code> 操作符，此更改也适用。例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Provider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    operator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> invoke</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Processor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Holder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> provider: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Provider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> processor: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Processor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> process</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (provider </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            provider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 在 1.9.20 中，编译器会触发错误： </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // Reference has a nullable type &#39;Provider?&#39; use explicit &#39;?.invoke()&#39; to make a function-like call instead</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="异常处理" tabindex="-1">异常处理 <a class="header-anchor" href="#异常处理" aria-label="Permalink to &quot;异常处理&quot;">​</a></h4><p>在 Kotlin 2.0.0 中，我们改进了异常处理，以便智能转换信息可以传递到 <code>catch</code> 和 <code>finally</code> 代码块。此更改使您的代码更安全，因为编译器会跟踪您的对象是否具有可空类型。例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> testString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> stringInput: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // stringInput 被智能转换为 String 类型</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    stringInput </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 编译器知道 stringInput 不为 null</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(stringInput.length)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 编译器会拒绝 stringInput 的先前智能转换信息。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 现在 stringInput 具有 String? 类型。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        stringInput </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 触发异常</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throw</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Exception</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        stringInput </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (exception: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Exception</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 在 Kotlin 2.0.0 中，编译器知道 stringInput </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 可以为 null，因此 stringInput 保持可空。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(stringInput?.length)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // null</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 在 Kotlin 1.9.20 中，编译器会说不需要安全调用，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 但这是不正确的。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    testString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="递增和递减操作符" tabindex="-1">递增和递减操作符 <a class="header-anchor" href="#递增和递减操作符" aria-label="Permalink to &quot;递增和递减操作符&quot;">​</a></h4><p>在 Kotlin 2.0.0 之前，编译器不理解对象类型在使用递增或递减操作符后会发生变化。由于编译器无法准确地跟踪对象类型，您的代码可能导致未解析引用错误。在 Kotlin 2.0.0 中，此问题已修复：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Rho</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    operator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> inc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Sigma</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TODO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Sigma</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Rho</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sigma</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Unit</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Tau</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> tau</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Unit</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(input: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Rho</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> unknownObject: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Rho</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> input</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 检测 unknownObject 是否继承自 Tau 接口</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 请注意，unknownObject 可能同时继承自</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Rho 和 Tau 接口。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (unknownObject </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Tau) {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 使用来自接口 Rho 的重载 inc() 操作符。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 在 Kotlin 2.0.0 中，unknownObject 的类型被智能转换为</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Sigma。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        ++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">unknownObject</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 在 Kotlin 2.0.0 中，编译器知道 unknownObject 的类型为</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Sigma，因此可以成功调用 sigma() 函数。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        unknownObject.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sigma</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 在 Kotlin 1.9.20 中，当调用 inc() 时，编译器不会执行智能转换，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 因此编译器仍然认为 unknownObject 的类型是 Tau。调用 sigma() 函数</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 会抛出编译期错误。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 在 Kotlin 2.0.0 中，编译器知道 unknownObject 的类型为</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Sigma，因此调用 tau() 函数会抛出编译期错误。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        unknownObject.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tau</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Unresolved reference &#39;tau&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 在 Kotlin 1.9.20 中，由于编译器错误地认为</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // unknownObject 的类型是 Tau，因此可以调用 tau() 函数，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 但会抛出 ClassCastException。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="kotlin-多平台改进" tabindex="-1">Kotlin 多平台改进 <a class="header-anchor" href="#kotlin-多平台改进" aria-label="Permalink to &quot;Kotlin 多平台改进&quot;">​</a></h3><p>在 Kotlin 2.0.0 中，我们在 K2 编译器中对 Kotlin 多平台进行了以下方面的改进：</p><ul><li><a href="#separation-of-common-and-platform-sources-during-compilation">编译期间公共源和平台源的分离</a></li><li><a href="#different-visibility-levels-of-expected-and-actual-declarations">expected 和 actual 声明的不同可见性级别</a></li></ul><h4 id="编译期间公共源和平台源的分离" tabindex="-1">编译期间公共源和平台源的分离 <a class="header-anchor" href="#编译期间公共源和平台源的分离" aria-label="Permalink to &quot;编译期间公共源和平台源的分离&quot;">​</a></h4><p>此前，Kotlin 编译器的设计使其无法在编译期保持公共和平台源代码集的分离。结果是，公共代码可以访问平台代码，这导致了不同平台之间行为不一致。此外，一些编译器设置和公共代码的依赖项也曾泄露到平台代码中。</p><p>在 Kotlin 2.0.0 中，我们新的 Kotlin K2 编译器实现包括对编译方案的重新设计，以确保公共和平台源代码集之间的严格分离。当您使用 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-expect-actual.html#expected-and-actual-functions" target="_blank" rel="noreferrer">expected 和 actual 函数</a>时，此更改最为明显。此前，您的公共代码中的函数调用可能解析为平台代码中的函数。例如：</p><table><tr><td>公共代码</td><td>平台代码</td></tr><tr><td><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;common foo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> exampleFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></td><td><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// JVM</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;platform foo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// JavaScript</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// JavaScript 平台上没有</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// foo() 函数重载</span></span></code></pre></div></td></tr></table><p>在此示例中，公共代码的行为因其运行平台的不同而异：</p><ul><li>在 JVM 平台上，调用公共代码中的 <code>foo()</code> 函数会导致平台代码中的 <code>foo()</code> 函数被调用，显示为 <code>platform foo</code>。</li><li>在 JavaScript 平台上，调用公共代码中的 <code>foo()</code> 函数会导致公共代码中的 <code>foo()</code> 函数被调用，显示为 <code>common foo</code>，因为平台代码中没有这样的函数可用。</li></ul><p>在 Kotlin 2.0.0 中，公共代码无法访问平台代码，因此两个平台都成功将 <code>foo()</code> 函数解析为公共代码中的 <code>foo()</code> 函数：<code>common foo</code>。</p><p>除了跨平台行为一致性得到改进之外，我们还努力修复了 IntelliJ IDEA 或 Android Studio 与编译器之间行为冲突的情况。例如，当您使用 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-expect-actual.html#expected-and-actual-classes" target="_blank" rel="noreferrer">expected 和 actual 类</a>时，会出现以下情况：</p><table><tr><td>公共代码</td><td>平台代码</td></tr><tr><td><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Identity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> confirmIdentity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> common</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 2.0.0 之前，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 它只会触发 IDE 错误</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Identity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">confirmIdentity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // RESOLUTION_TO_CLASSIFIER : Expected class</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Identity has no default constructor.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></td><td><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Identity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> confirmIdentity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;expect class fun: jvm&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></td></tr></table><p>在此示例中，expected 类 <code>Identity</code> 没有默认构造函数，因此无法在公共代码中成功调用。 此前，只有 IDE 报告了错误，但代码在 JVM 上仍然成功编译。然而，现在编译器正确地报告了错误：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Expected class &#39;expect class Identity : Any&#39; does not have default constructor</span></span></code></pre></div><h5 id="何时解析行为不变" tabindex="-1">何时解析行为不变 <a class="header-anchor" href="#何时解析行为不变" aria-label="Permalink to &quot;何时解析行为不变&quot;">​</a></h5><p>我们仍在迁移到新的编译方案，因此当您调用不在同一源代码集中的函数时，解析行为仍然相同。您主要会在公共代码中使用多平台库中的重载时注意到这种差异。</p><p>假设您有一个库，其中有两个 <code>whichFun()</code> 函数，具有不同的签名：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 示例库</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// MODULE: common</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> whichFun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;common function&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// MODULE: JVM</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> whichFun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;platform function&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>如果您在公共代码中调用 <code>whichFun()</code> 函数，则会解析库中具有最相关实参类型的函数：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 一个在 JVM 目标上使用示例库的项目</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// MODULE: common</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    whichFun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // platform function</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>相比之下，如果您在同一源代码集中声明 <code>whichFun()</code> 的重载，则会解析来自公共代码的函数，因为您的代码无法访问平台特有版本：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 未使用示例库</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// MODULE: common</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> whichFun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;common function&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    whichFun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // common function</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// MODULE: JVM</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> whichFun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;platform function&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>与多平台库类似，由于 <code>commonTest</code> 模块位于单独的源代码集中，它仍然可以访问平台特有代码。因此，<code>commonTest</code> 模块中函数调用的解析表现出与旧编译方案相同的行为。</p><p>将来，这些剩余的案例将与新的编译方案更加一致。</p><h4 id="expected-和-actual-声明的不同可见性级别" tabindex="-1">expected 和 actual 声明的不同可见性级别 <a class="header-anchor" href="#expected-和-actual-声明的不同可见性级别" aria-label="Permalink to &quot;expected 和 actual 声明的不同可见性级别&quot;">​</a></h4><p>在 Kotlin 2.0.0 之前，如果您在 Kotlin 多平台项目中使用 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-expect-actual.html" target="_blank" rel="noreferrer">expected 和 actual 声明</a>，它们必须具有相同的<a href="/kotlin/visibility-modifiers">可见性级别</a>。 Kotlin 2.0.0 现在也支持不同的可见性级别，但<strong>仅当</strong> actual 声明比 expected 声明_更宽松_时。例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">internal</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Attribute</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 可见性为 internal</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Attribute</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // 默认可见性为 public，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                                // 这更宽松</span></span></code></pre></div><p>类似地，如果您在 actual 声明中使用<a href="/kotlin/type-aliases">类型别名</a>，则<strong>底层类型</strong>的可见性应与 expected 声明相同或更宽松。例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">internal</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Attribute</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                 // 可见性为 internal</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">internal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typealias</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Attribute</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Expanded</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Expanded</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                                  // 默认可见性为 public，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                                                // 这更宽松</span></span></code></pre></div><h3 id="编译器插件支持" tabindex="-1">编译器插件支持 <a class="header-anchor" href="#编译器插件支持" aria-label="Permalink to &quot;编译器插件支持&quot;">​</a></h3><p>目前，Kotlin K2 编译器支持以下 Kotlin 编译器插件：</p><ul><li><a href="/kotlin/all-open-plugin"><code>all-open</code></a></li><li><a href="https://github.com/Kotlin/kotlinx-atomicfu" target="_blank" rel="noreferrer">AtomicFU</a></li><li><a href="https://github.com/JetBrains/kotlin/tree/master/plugins/jvm-abi-gen" target="_blank" rel="noreferrer"><code>jvm-abi-gen</code></a></li><li><a href="https://github.com/JetBrains/kotlin/tree/master/plugins/js-plain-objects" target="_blank" rel="noreferrer"><code>js-plain-objects</code></a></li><li><a href="/kotlin/whatsnew1920#preview-kapt-compiler-plugin-with-k2">kapt</a></li><li><a href="/kotlin/lombok">Lombok</a></li><li><a href="/kotlin/no-arg-plugin"><code>no-arg</code></a></li><li><a href="https://plugins.gradle.org/plugin/org.jetbrains.kotlin.plugin.parcelize" target="_blank" rel="noreferrer">Parcelize</a></li><li><a href="/kotlin/sam-with-receiver-plugin">SAM with receiver</a></li><li><a href="/kotlin/serialization">serialization</a></li><li><a href="/kotlin/power-assert">Power-assert</a></li></ul><p>此外，Kotlin K2 编译器还支持：</p><ul><li>Jetpack Compose 编译器插件 2.0.0，该插件已<a href="https://android-developers.googleblog.com/2024/04/jetpack-compose-compiler-moving-to-kotlin-repository.html" target="_blank" rel="noreferrer">移至 Kotlin 版本库</a>。</li><li>自 <a href="https://android-developers.googleblog.com/2023/12/ksp2-preview-kotlin-k2-standalone.html" target="_blank" rel="noreferrer">KSP2</a> 以来的 <a href="/kotlin/ksp-overview">Kotlin 符号处理 (KSP) 插件</a>。</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>如果您使用任何其他编译器插件，请查看其文档以了解它们是否与 K2 兼容。</p></div><h3 id="实验性的-kotlin-power-assert-编译器插件" tabindex="-1">实验性的 Kotlin Power-assert 编译器插件 <a class="header-anchor" href="#实验性的-kotlin-power-assert-编译器插件" aria-label="Permalink to &quot;实验性的 Kotlin Power-assert 编译器插件&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>Kotlin Power-assert 插件是<a href="/kotlin/components-stability#stability-levels-explained">实验性的</a>。 它可能随时更改。</p></div><p>Kotlin 2.0.0 引入了一个实验性的 Power-assert 编译器插件。此插件通过在失败消息中包含上下文信息来改进测试编写体验，使调试更轻松高效。</p><p>开发人员通常需要使用复杂的断言库来编写有效的测试。Power-assert 插件通过自动生成包含断言表达式中间值的失败消息来简化此过程。这有助于开发人员快速理解测试失败的原因。</p><p>当测试中的断言失败时，改进的错误消息会显示断言中所有变量和子表达式的值，清楚地表明条件的哪一部分导致了失败。这对于检查多个条件的复杂断言特别有用。</p><p>要在您的项目中启用该插件，请在 <code>build.gradle(.kts)</code> 文件中配置它：</p>`,77)),n(p,{group:"build-script"},{default:l(()=>[n(t,{title:"Kotlin","group-key":"kotlin"},{default:l(()=>a[0]||(a[0]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"plugins"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    kotlin"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"multiplatform"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") version "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"2.0.0"')]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    kotlin"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"plugin.power-assert"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") version "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"2.0.0"')]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),i(`
`),s("span",{class:"line"}),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"powerAssert"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    functions "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," listOf"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"kotlin.assert"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"kotlin.test.assertTrue"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),n(t,{title:"Groovy","group-key":"groovy"},{default:l(()=>a[1]||(a[1]=[s("div",{class:"language-groovy vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"groovy"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"plugins {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    id "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'org.jetbrains.kotlin.multiplatform'"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," version "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'2.0.0'")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    id "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'org.jetbrains.kotlin.plugin.power-assert'"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," version "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'2.0.0'")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),i(`
`),s("span",{class:"line"}),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"powerAssert {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    functions "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," ["),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"kotlin.assert"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"kotlin.test.assertTrue"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"]")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),a[9]||(a[9]=e('<p>在<a href="/kotlin/power-assert">文档</a>中了解有关 Kotlin Power-assert 插件的更多信息。</p><h3 id="如何启用-kotlin-k2-编译器" tabindex="-1">如何启用 Kotlin K2 编译器 <a class="header-anchor" href="#如何启用-kotlin-k2-编译器" aria-label="Permalink to &quot;如何启用 Kotlin K2 编译器&quot;">​</a></h3><p>从 Kotlin 2.0.0 开始，Kotlin K2 编译器默认启用。无需额外操作。</p><h3 id="在-kotlin-playground-中试用-kotlin-k2-编译器" tabindex="-1">在 Kotlin Playground 中试用 Kotlin K2 编译器 <a class="header-anchor" href="#在-kotlin-playground-中试用-kotlin-k2-编译器" aria-label="Permalink to &quot;在 Kotlin Playground 中试用 Kotlin K2 编译器&quot;">​</a></h3><p>Kotlin Playground 支持 2.0.0 版本。<a href="https://pl.kotl.in/czuoQprce" target="_blank" rel="noreferrer">去试试吧！</a></p><h3 id="ide-支持-1" tabindex="-1">IDE 支持 <a class="header-anchor" href="#ide-支持-1" aria-label="Permalink to &quot;IDE 支持&quot;">​</a></h3><p>默认情况下，IntelliJ IDEA 和 Android Studio 仍然使用旧版编译器进行代码分析、代码补全、高亮显示及其他 IDE 相关特性。要在您的 IDE 中获得完整的 Kotlin 2.0 体验，请启用 K2 模式。</p><p>在您的 IDE 中，转到 <strong>Settings</strong> | <strong>Languages &amp; Frameworks</strong> | <strong>Kotlin</strong> 并选择 <strong>Enable K2 mode</strong> 选项。 IDE 将使用其 K2 模式分析您的代码。</p><p><img src="'+r+`" alt="Enable K2 mode" width="200"></p><p>启用 K2 模式后，由于编译器行为变化，您可能会注意到 IDE 分析中的差异。在我们的<a href="/kotlin/k2-compiler-migration-guide">迁移指南</a>中了解新 K2 编译器与旧编译器的不同之处。</p><ul><li>在<a href="https://blog.jetbrains.com/idea/2024/11/k2-mode-becomes-stable/" target="_blank" rel="noreferrer">我们的博客</a>中了解更多关于 K2 模式的信息。</li><li>我们正在积极收集关于 K2 模式的反馈，请在我们的<a href="https://kotlinlang.slack.com/archives/C0B8H786P" target="_blank" rel="noreferrer">公共 Slack 频道</a>分享您的想法。</li></ul><h3 id="对新-k2-编译器提出您的反馈" tabindex="-1">对新 K2 编译器提出您的反馈 <a class="header-anchor" href="#对新-k2-编译器提出您的反馈" aria-label="Permalink to &quot;对新 K2 编译器提出您的反馈&quot;">​</a></h3><p>我们感谢您的任何反馈！</p><ul><li>在我们的<a href="https://kotl.in/issue" target="_blank" rel="noreferrer">问题跟踪器</a>中报告您使用新 K2 编译器遇到的任何问题。</li><li><a href="https://www.jetbrains.com/help/idea/settings-usage-statistics.html" target="_blank" rel="noreferrer">启用“发送使用情况统计信息”选项</a>，允许 JetBrains 收集有关 K2 使用情况的匿名数据。</li></ul><h2 id="kotlin-jvm" tabindex="-1">Kotlin/JVM <a class="header-anchor" href="#kotlin-jvm" aria-label="Permalink to &quot;Kotlin/JVM&quot;">​</a></h2><p>从 2.0.0 版本开始，编译器可以生成包含 Java 22 字节码的类。 此版本还带来了以下更改：</p><ul><li><a href="#generation-of-lambda-functions-using-invokedynamic">使用 invokedynamic 生成 lambda 函数</a></li><li><a href="#the-kotlinx-metadata-jvm-library-is-stable">kotlinx-metadata-jvm 库现已稳定</a></li></ul><h3 id="使用-invokedynamic-生成-lambda-函数" tabindex="-1">使用 invokedynamic 生成 lambda 函数 <a class="header-anchor" href="#使用-invokedynamic-生成-lambda-函数" aria-label="Permalink to &quot;使用 invokedynamic 生成 lambda 函数&quot;">​</a></h3><p>Kotlin 2.0.0 引入了一种新的默认方法，即使用 <code>invokedynamic</code> 生成 lambda 函数。与传统的匿名类生成相比，此更改减少了应用程序的二进制大小。</p><p>自第一个版本以来，Kotlin 一直将 lambda 作为匿名类生成。然而，从 <a href="/kotlin/whatsnew15#lambdas-via-invokedynamic">Kotlin 1.5.0</a> 开始，通过使用 <code>-Xlambdas=indy</code> 编译器选项，<code>invokedynamic</code> 生成选项已可用。在 Kotlin 2.0.0 中，<code>invokedynamic</code> 已成为 lambda 生成的默认方法。此方法生成更轻量级的二进制文件，并使 Kotlin 与 JVM 优化保持一致，确保应用程序受益于正在进行和未来的 JVM 性能改进。</p><p>目前，与普通 lambda 编译相比，它有三个限制：</p><ul><li><p>编译为 <code>invokedynamic</code> 的 lambda 不可序列化。</p></li><li><p>实验性的 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect.jvm/reflect.html" target="_blank" rel="noreferrer"><code>reflect()</code></a> API 不支持由 <code>invokedynamic</code> 生成的 lambda。</p></li><li><p>在此类 lambda 上调用 <code>.toString()</code> 会生成可读性较差的字符串表示：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 在 Kotlin 1.9.24 及反射下，返回</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // () -&gt; kotlin.Unit</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 在 Kotlin 2.0.0 下，返回</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // FileKt$Lambda$13/0x00007f88a0004608@506e1b77</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><p>要保留生成 lambda 函数的旧行为，您可以：</p><ul><li>使用 <code>@JvmSerializableLambda</code> 注解特定的 lambda。</li><li>使用编译器选项 <code>-Xlambdas=class</code> 以旧方法生成模块中的所有 lambda。</li></ul><h3 id="kotlinx-metadata-jvm-库已稳定" tabindex="-1">kotlinx-metadata-jvm 库已稳定 <a class="header-anchor" href="#kotlinx-metadata-jvm-库已稳定" aria-label="Permalink to &quot;kotlinx-metadata-jvm 库已稳定&quot;">​</a></h3><p>在 Kotlin 2.0.0 中，<code>kotlinx-metadata-jvm</code> 库变得<a href="/kotlin/components-stability#stability-levels-explained">稳定</a>。现在，该库已更改为 <code>kotlin</code> 包和坐标，您可以在 <code>kotlin-metadata-jvm</code>（不带“x”）中找到它。</p><p>此前，<code>kotlinx-metadata-jvm</code> 库有自己的发布方案和版本。现在，我们将作为 Kotlin 发布周期的一部分构建和发布 <code>kotlin-metadata-jvm</code> 更新，并提供与 Kotlin 标准库相同的向后兼容性保证。</p><p><code>kotlin-metadata-jvm</code> 库提供了一个 API，用于读取和修改由 Kotlin/JVM 编译器生成的二进制文件的元数据。</p><h2 id="kotlin-native" tabindex="-1">Kotlin/Native <a class="header-anchor" href="#kotlin-native" aria-label="Permalink to &quot;Kotlin/Native&quot;">​</a></h2><p>此版本带来了以下更改：</p><ul><li><a href="#monitoring-gc-performance-with-signposts-on-apple-platforms">使用 signpost 监控 GC 性能</a></li><li><a href="#resolving-conflicts-with-objective-c-methods">解决与 Objective-C 方法的冲突</a></li><li><a href="#changed-log-level-for-compiler-arguments">Kotlin/Native 中编译器实参的日志级别已更改</a></li><li><a href="#explicitly-added-standard-library-and-platform-dependencies-to-kotlin-native">显式地将标准库和平台依赖项添加到 Kotlin/Native</a></li><li><a href="#tasks-error-in-gradle-configuration-cache">Gradle 配置缓存中的任务错误</a></li></ul><h3 id="使用-signpost-监控-gc-性能" tabindex="-1">使用 signpost 监控 GC 性能 <a class="header-anchor" href="#使用-signpost-监控-gc-性能" aria-label="Permalink to &quot;使用 signpost 监控 GC 性能&quot;">​</a></h3><p>此前，只能通过查看日志来监控 Kotlin/Native 垃圾收集器 (GC) 的性能。然而，这些日志未与 Xcode Instruments（一个用于调查 iOS 应用程序性能问题的流行工具包）集成。</p><p>自 Kotlin 2.0.0 以来，GC 会使用 Instruments 中可用的 signpost 报告暂停。Signpost 允许在您的应用程序中进行自定义日志记录，因此现在，在调试 iOS 应用性能时，您可以检查 GC 暂停是否对应于应用程序冻结。</p><p>在<a href="/kotlin/native-memory-manager#monitor-gc-performance">文档</a>中了解有关 GC 性能分析的更多信息。</p><h3 id="解决与-objective-c-方法的冲突" tabindex="-1">解决与 Objective-C 方法的冲突 <a class="header-anchor" href="#解决与-objective-c-方法的冲突" aria-label="Permalink to &quot;解决与 Objective-C 方法的冲突&quot;">​</a></h3><p>Objective-C 方法可以有不同的名称，但形参的数量和类型相同。例如， <a href="https://developer.apple.com/documentation/corelocation/cllocationmanagerdelegate/1423560-locationmanager?language=objc" target="_blank" rel="noreferrer"><code>locationManager:didEnterRegion:</code></a> 和 <a href="https://developer.apple.com/documentation/corelocation/cllocationmanagerdelegate/1423630-locationmanager?language=objc" target="_blank" rel="noreferrer"><code>locationManager:didExitRegion:</code></a>。 在 Kotlin 中，这些方法具有相同的签名，因此尝试使用它们会触发冲突的重载错误。</p><p>此前，您必须手动抑制冲突的重载以避免此编译错误。为了改进 Kotlin 与 Objective-C 的互操作性，Kotlin 2.0.0 引入了新的 <code>@ObjCSignatureOverride</code> 注解。</p><p>当从 Objective-C 类继承多个具有相同实参类型但不同实参名称的函数时，此注解指示 Kotlin 编译器忽略冲突的重载。</p><p>应用此注解也比一般的错误抑制更安全。此注解仅可在覆盖 Objective-C 方法的情况下使用，这些方法已受支持并经过测试，而一般的抑制可能会隐藏重要的错误并导致代码静默地出现问题。</p><h3 id="kotlin-native-中编译器实参的日志级别已更改" tabindex="-1">Kotlin/Native 中编译器实参的日志级别已更改 <a class="header-anchor" href="#kotlin-native-中编译器实参的日志级别已更改" aria-label="Permalink to &quot;Kotlin/Native 中编译器实参的日志级别已更改&quot;">​</a></h3><p>在此版本中，Kotlin/Native Gradle 任务（例如 <code>compile</code>、<code>link</code> 和 <code>cinterop</code>）中编译器实参的日志级别已从 <code>info</code> 更改为 <code>debug</code>。</p><p>将 <code>debug</code> 作为其默认值，日志级别与其他的 Gradle 编译任务保持一致，并提供详细的调试信息，包括所有编译器实参。</p><h3 id="显式地将标准库和平台依赖项添加到-kotlin-native" tabindex="-1">显式地将标准库和平台依赖项添加到 Kotlin/Native <a class="header-anchor" href="#显式地将标准库和平台依赖项添加到-kotlin-native" aria-label="Permalink to &quot;显式地将标准库和平台依赖项添加到 Kotlin/Native&quot;">​</a></h3><p>此前，Kotlin/Native 编译器隐式地解析标准库和平台依赖项，这导致 Kotlin Gradle 插件在不同 Kotlin 目标之间工作方式不一致。</p><p>现在，每个 Kotlin/Native Gradle 编译都通过 <code>compileDependencyFiles</code> <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-dsl-reference.html#compilation-parameters" target="_blank" rel="noreferrer">编译形参</a>显式地将标准库和平台依赖项包含在其编译期库路径中。</p><h3 id="gradle-配置缓存中的任务错误" tabindex="-1">Gradle 配置缓存中的任务错误 <a class="header-anchor" href="#gradle-配置缓存中的任务错误" aria-label="Permalink to &quot;Gradle 配置缓存中的任务错误&quot;">​</a></h3><p>自 Kotlin 2.0.0 起，您可能会遇到配置缓存错误，消息指示： <code>invocation of Task.project at execution time is unsupported</code>。</p><p>此错误出现在 <code>NativeDistributionCommonizerTask</code> 和 <code>KotlinNativeCompile</code> 等任务中。</p><p>然而，这是一个误报。根本问题是存在与 Gradle 配置缓存不兼容的任务，例如 <code>publish*</code> 任务。</p><p>这种差异可能不会立即显现，因为错误消息暗示了不同的根本原因。</p><p>由于错误报告中未明确说明确切原因，<a href="https://github.com/gradle/gradle/issues/21290" target="_blank" rel="noreferrer">Gradle 团队已在着手解决此问题以修复报告</a>。</p><h2 id="kotlin-wasm" tabindex="-1">Kotlin/Wasm <a class="header-anchor" href="#kotlin-wasm" aria-label="Permalink to &quot;Kotlin/Wasm&quot;">​</a></h2><p>Kotlin 2.0.0 改进了性能和与 JavaScript 的互操作性：</p><ul><li><a href="#optimized-production-builds-by-default-using-binaryen">默认使用 Binaryen 优化生产构建</a></li><li><a href="#support-for-named-export">支持命名导出</a></li><li><a href="#support-for-unsigned-primitive-types-in-functions-with-jsexport">支持带 @JsExport 的函数中使用无符号原始类型</a></li><li><a href="#generation-of-typescript-declaration-files-in-kotlin-wasm">在 Kotlin/Wasm 中生成 TypeScript 声明文件</a></li><li><a href="#support-for-catching-javascript-exceptions">支持捕获 JavaScript 异常</a></li><li><a href="#new-exception-handling-proposal-is-now-supported-as-an-option">现在支持将新的异常处理提案作为一个选项</a></li><li><a href="#the-withwasm-function-is-split-into-js-and-wasi-variants">withWasm() 函数被拆分为 JS 和 WASI 变体</a></li></ul><h3 id="默认使用-binaryen-优化生产构建" tabindex="-1">默认使用 Binaryen 优化生产构建 <a class="header-anchor" href="#默认使用-binaryen-优化生产构建" aria-label="Permalink to &quot;默认使用 Binaryen 优化生产构建&quot;">​</a></h3><p>Kotlin/Wasm 工具链现在在生产编译期间将 Binaryen 工具应用于所有项目，而不是之前的手动设置方法。根据我们的估计，这应该可以提高项目的运行时性能并减小二进制大小。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>此更改仅影响生产编译。开发编译过程保持不变。</p></div><h3 id="支持命名导出" tabindex="-1">支持命名导出 <a class="header-anchor" href="#支持命名导出" aria-label="Permalink to &quot;支持命名导出&quot;">​</a></h3><p>此前，Kotlin/Wasm 的所有导出声明都使用默认导出导入到 JavaScript 中：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//JavaScript:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Module </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;./index.mjs&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Module.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>现在，您可以按名称导入每个用 <code>@JsExport</code> 标记的 Kotlin 声明：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Kotlin:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JsExport</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, b: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b</span></span></code></pre></div><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//JavaScript:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { add } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;./index.mjs&quot;</span></span></code></pre></div><p>命名导出使得 Kotlin 和 JavaScript 模块之间共享代码变得更容易。它们提高了可读性，并帮助您管理模块之间的依赖项。</p><h3 id="支持带-jsexport-的函数中使用无符号原始类型" tabindex="-1">支持带 @JsExport 的函数中使用无符号原始类型 <a class="header-anchor" href="#支持带-jsexport-的函数中使用无符号原始类型" aria-label="Permalink to &quot;支持带 @JsExport 的函数中使用无符号原始类型&quot;">​</a></h3><p>从 Kotlin 2.0.0 开始，您可以在外部声明和带有 <code>@JsExport</code> 注解的函数中使用<a href="/kotlin/unsigned-integer-types">无符号原始类型</a>，该注解使 Kotlin/Wasm 函数在 JavaScript 代码中可用。</p><p>这有助于缓解此前阻止<a href="/kotlin/unsigned-integer-types">无符号原始类型</a>直接用于导出和外部声明的限制。现在您可以导出以无符号原始类型作为返回或形参类型的函数，并使用返回或消费无符号原始类型的外部声明。</p><p>有关 Kotlin/Wasm 与 JavaScript 互操作性的更多信息，请参见<a href="/kotlin/wasm-js-interop#use-javascript-code-in-kotlin">文档</a>。</p><h3 id="在-kotlin-wasm-中生成-typescript-声明文件" tabindex="-1">在 Kotlin/Wasm 中生成 TypeScript 声明文件 <a class="header-anchor" href="#在-kotlin-wasm-中生成-typescript-声明文件" aria-label="Permalink to &quot;在 Kotlin/Wasm 中生成 TypeScript 声明文件&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>在 Kotlin/Wasm 中生成 TypeScript 声明文件是<a href="/kotlin/components-stability#stability-levels-explained">实验性的</a>。 它可能随时放弃或更改。</p></div><p>在 Kotlin 2.0.0 中，Kotlin/Wasm 编译器现在能够从 Kotlin 代码中的任何 <code>@JsExport</code> 声明生成 TypeScript 定义。这些定义可被 IDE 和 JavaScript 工具使用，以提供代码自动补全，帮助进行类型检测，并使在 JavaScript 中包含 Kotlin 代码变得更容易。</p><p>Kotlin/Wasm 编译器会收集任何用 <code>@JsExport</code> 标记的<a href="/kotlin/wasm-js-interop#functions-with-the-jsexport-annotation">顶层函数</a>，并自动在 <code>.d.ts</code> 文件中生成 TypeScript 定义。</p><p>要生成 TypeScript 定义，请在 <code>wasmJs {}</code> 代码块中的 <code>build.gradle(.kts)</code> 文件中添加 <code>generateTypeScriptDefinitions()</code> 函数：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    wasmJs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        binaries.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        browser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        generateTypeScriptDefinitions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="支持捕获-javascript-异常" tabindex="-1">支持捕获 JavaScript 异常 <a class="header-anchor" href="#支持捕获-javascript-异常" aria-label="Permalink to &quot;支持捕获 JavaScript 异常&quot;">​</a></h3><p>此前，Kotlin/Wasm 代码无法捕获 JavaScript 异常，这使得处理源自 JavaScript 端的错误变得困难。</p><p>在 Kotlin 2.0.0 中，我们实现了对捕获 Kotlin/Wasm 中 JavaScript 异常的支持。此实现允许您使用 <code>try-catch</code> 代码块，通过特定类型（如 <code>Throwable</code> 或 <code>JsException</code>）来正确处理这些错误。</p><p>此外，<code>finally</code> 代码块（无论是否抛出异常都能帮助执行代码）现在也能正常工作。尽管我们引入了对捕获 JavaScript 异常的支持，但当 JavaScript 异常（例如调用堆栈）发生时，不会提供额外信息。然而，<a href="https://youtrack.jetbrains.com/issue/KT-68185/WasmJs-Attach-js-exception-object-to-JsException" target="_blank" rel="noreferrer">我们正在开发这些实现</a>。</p><h3 id="现在支持将新的异常处理提案作为一个选项" tabindex="-1">现在支持将新的异常处理提案作为一个选项 <a class="header-anchor" href="#现在支持将新的异常处理提案作为一个选项" aria-label="Permalink to &quot;现在支持将新的异常处理提案作为一个选项&quot;">​</a></h3><p>在此版本中，我们引入了对 WebAssembly <a href="https://github.com/WebAssembly/exception-handling/blob/main/proposals/exception-handling/Exceptions.md" target="_blank" rel="noreferrer">异常处理提案</a>新版本在 Kotlin/Wasm 中的支持。</p><p>此更新确保新提案与 Kotlin 要求保持一致，允许在仅支持该提案最新版本的虚拟机上使用 Kotlin/Wasm。</p><p>通过使用 <code>-Xwasm-use-new-exception-proposal</code> 编译器选项激活新的异常处理提案，该选项默认是关闭的。</p><h3 id="withwasm-函数被拆分为-js-和-wasi-变体" tabindex="-1">withWasm() 函数被拆分为 JS 和 WASI 变体 <a class="header-anchor" href="#withwasm-函数被拆分为-js-和-wasi-变体" aria-label="Permalink to &quot;withWasm() 函数被拆分为 JS 和 WASI 变体&quot;">​</a></h3><p><code>withWasm()</code> 函数（曾用于为层次结构模板提供 Wasm 目标）已被弃用，取而代之的是专用的 <code>withWasmJs()</code> 和 <code>withWasmWasi()</code> 函数。</p><p>现在您可以将 WASI 和 JS 目标分离到树定义中的不同组。</p><h2 id="kotlin-js" tabindex="-1">Kotlin/JS <a class="header-anchor" href="#kotlin-js" aria-label="Permalink to &quot;Kotlin/JS&quot;">​</a></h2><p>除了其他更改，此版本还为 Kotlin 带来了现代化 JS 编译，支持 ES2015 标准的更多特性：</p><ul><li><a href="#new-compilation-target">新的编译目标</a></li><li><a href="#suspend-functions-as-es2015-generators">将挂起函数作为 ES2015 生成器</a></li><li><a href="#passing-arguments-to-the-main-function">向 main 函数传递实参</a></li><li><a href="#per-file-compilation-for-kotlin-js-projects">Kotlin/JS 项目的按文件编译</a></li><li><a href="#improved-collection-interoperability">改进的集合互操作性</a></li><li><a href="#support-for-createinstance">支持 createInstance()</a></li><li><a href="#support-for-type-safe-plain-javascript-objects">支持类型安全的普通 JavaScript 对象</a></li><li><a href="#support-for-npm-package-manager">支持 npm 包管理器</a></li><li><a href="#changes-to-compilation-tasks">编译任务的更改</a></li><li><a href="#discontinuing-legacy-kotlin-js-jar-artifacts">停止支持旧版 Kotlin/JS JAR artifact</a></li></ul><h3 id="新的编译目标" tabindex="-1">新的编译目标 <a class="header-anchor" href="#新的编译目标" aria-label="Permalink to &quot;新的编译目标&quot;">​</a></h3><p>在 Kotlin 2.0.0 中，我们正在为 Kotlin/JS 添加一个新的编译目标 <code>es2015</code>。这是一种新的方式，让您一次性启用 Kotlin 支持的所有 ES2015 特性。</p><p>您可以在 <code>build.gradle(.kts)</code> 文件中这样设置它：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            target.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;es2015&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>新目标自动启用 <a href="/kotlin/whatsnew19#experimental-support-for-es2015-classes-and-modules">ES 类和模块</a> 以及新支持的 <a href="#suspend-functions-as-es2015-generators">ES 生成器</a>。</p><h3 id="将挂起函数作为-es2015-生成器" tabindex="-1">将挂起函数作为 ES2015 生成器 <a class="header-anchor" href="#将挂起函数作为-es2015-生成器" aria-label="Permalink to &quot;将挂起函数作为 ES2015 生成器&quot;">​</a></h3><p>此版本引入了将<a href="/kotlin/composing-suspending-functions">挂起函数</a>编译为 ES2015 生成器的<a href="/kotlin/components-stability#stability-levels-explained">实验性</a>支持。</p><p>使用生成器而不是状态机应该会减小项目最终打包的大小。例如，JetBrains 团队通过使用 ES2015 生成器成功将其 Space 项目的打包大小减少了 20%。</p><p>在<a href="https://262.ecma-international.org/6.0/" target="_blank" rel="noreferrer">官方文档</a>中了解有关 ES2015 (ECMAScript 2015, ES6) 的更多信息。</p><h3 id="向-main-函数传递实参" tabindex="-1">向 main 函数传递实参 <a class="header-anchor" href="#向-main-函数传递实参" aria-label="Permalink to &quot;向 main 函数传递实参&quot;">​</a></h3><p>从 Kotlin 2.0.0 开始，您可以为 <code>main()</code> 函数指定 <code>args</code> 的来源。此特性使得使用命令行和传递实参变得更容易。</p><p>为此，请定义带有新的 <code>passAsArgumentToMainFunction()</code> 函数的 <code>js {}</code> 代码块，该函数返回一个字符串数组：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        binary.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        passAsArgumentToMainFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Deno.args&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>该函数在运行时执行。它接受 JavaScript 表达式并将其用作 <code>args: Array&lt;String&gt;</code> 实参，而不是 <code>main()</code> 函数调用。</p><p>此外，如果您使用 Node.js 运行时，您可以利用一个特殊别名。它允许您将 <code>process.argv</code> 一次性传递给 <code>args</code> 形参，而无需每次手动添加：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        binary.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        nodejs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            passProcessArgvToMainFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="kotlin-js-项目的按文件编译" tabindex="-1">Kotlin/JS 项目的按文件编译 <a class="header-anchor" href="#kotlin-js-项目的按文件编译" aria-label="Permalink to &quot;Kotlin/JS 项目的按文件编译&quot;">​</a></h3><p>Kotlin 2.0.0 引入了 Kotlin/JS 项目输出的新粒度选项。您现在可以设置按文件编译，即为每个 Kotlin 文件生成一个 JavaScript 文件。这有助于显著优化最终打包的大小并提高程序的加载时间。</p><p>此前，只有两种输出选项。Kotlin/JS 编译器可以为整个项目生成一个单独的 <code>.js</code> 文件。然而，该文件可能过大且不方便使用。无论何时您想使用项目中的函数，都必须将整个 JavaScript 文件作为依赖项包含在内。或者，您可以配置为每个项目模块编译一个单独的 <code>.js</code> 文件。这仍然是默认选项。</p><p>由于模块文件也可能过大，从 Kotlin 2.0.0 开始，我们添加了更精细的输出，即为每个 Kotlin 文件生成一个（如果文件包含导出声明，则为两个）JavaScript 文件。要启用按文件编译模式：</p><ol><li><p>将 <a href="/kotlin/whatsnew19#experimental-support-for-es2015-classes-and-modules"><code>useEsModules()</code></a> 函数添加到您的构建文件中以支持 ECMAScript 模块：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(IR) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        useEsModules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Enables ES2015 modules</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        browser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>您也可以使用新的 <code>es2015</code> <a href="#new-compilation-target">编译目标</a>来实现。</p></li><li><p>应用 <code>-Xir-per-file</code> 编译器选项或更新您的 <code>gradle.properties</code> 文件：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># gradle.properties</span></span>
<span class="line"><span>kotlin.js.ir.output.granularity=per-file // \`per-module\` 是默认值</span></span></code></pre></div></li></ol><h3 id="改进的集合互操作性" tabindex="-1">改进的集合互操作性 <a class="header-anchor" href="#改进的集合互操作性" aria-label="Permalink to &quot;改进的集合互操作性&quot;">​</a></h3><p>从 Kotlin 2.0.0 开始，可以将带有 Kotlin 集合类型的签名声明导出到 JavaScript（和 TypeScript）。这适用于 Set、Map 和 List 集合类型及其可变对应类型。</p><p>要在 JavaScript 中使用 Kotlin 集合，首先使用 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.js/-js-export/" target="_blank" rel="noreferrer"><code>@JsExport</code></a> 注解标记必要的声明：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Kotlin</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JsExport</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> friends: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> emptyList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JsExport</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> me </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Me&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    friends </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Kodee&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>然后，您可以从 JavaScript 中将它们作为常规 JavaScript 数组使用：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// JavaScript</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { User, me, KtList } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;my-module&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> allMyFriendNames</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> me.friends</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">asJsReadonlyArrayView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x.name) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [&#39;Kodee&#39;]</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>遗憾的是，目前仍无法从 JavaScript 创建 Kotlin 集合。我们计划在 Kotlin 2.0.20 中添加此功能。</p></div><h3 id="支持-createinstance" tabindex="-1">支持 createInstance() <a class="header-anchor" href="#支持-createinstance" aria-label="Permalink to &quot;支持 createInstance()&quot;">​</a></h3><p>从 Kotlin 2.0.0 开始，您可以使用 Kotlin/JS 目标中的 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect.full/create-instance.html" target="_blank" rel="noreferrer"><code>createInstance()</code></a> 函数。此前，它仅在 JVM 上可用。</p><p><code>KClass</code> 接口中的此函数创建指定类的新实例，这对于获取 Kotlin 类的运行时引用很有用。</p><h3 id="支持类型安全的普通-javascript-对象" tabindex="-1">支持类型安全的普通 JavaScript 对象 <a class="header-anchor" href="#支持类型安全的普通-javascript-对象" aria-label="Permalink to &quot;支持类型安全的普通 JavaScript 对象&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p><code>js-plain-objects</code> 插件是<a href="/kotlin/components-stability#stability-levels-explained">实验性的</a>。 它可能随时放弃或更改。<code>js-plain-objects</code> 插件<strong>仅</strong>支持 K2 编译器。</p></div><p>为了使使用 JavaScript API 变得更容易，在 Kotlin 2.0.0 中，我们提供了一个新插件：<a href="https://github.com/JetBrains/kotlin/tree/master/plugins/js-plain-objects" target="_blank" rel="noreferrer"><code>js-plain-objects</code></a>， 您可以使用它来创建类型安全的普通 JavaScript 对象。该插件会检查您的代码中是否有任何带有 <code>@JsPlainObject</code> 注解的外部接口，并添加：</p><ul><li>伴生对象中的内联 <code>invoke</code> 操作符函数，您可以将其用作构造函数。</li><li>一个 <code>.copy()</code> 函数，您可以使用它创建对象的副本，同时调整其某些属性。</li></ul><p>例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.js.JsPlainObject</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JsPlainObject</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">external</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> email: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 创建一个 JavaScript 对象</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 复制对象并添加电子邮件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> copy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">copy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 11</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, email </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;some@user.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(JSON.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(user))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // { &quot;name&quot;: &quot;Name&quot;, &quot;age&quot;: 10 }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(JSON.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(copy))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // { &quot;name&quot;: &quot;Name&quot;, &quot;age&quot;: 11, &quot;email&quot;: &quot;some@user.com&quot; }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>通过这种方法创建的任何 JavaScript 对象都更安全，因为您不仅可以在运行时看到错误，还可以在编译期看到它们，甚至由 IDE 高亮显示。</p><p>请看这个示例，它使用 <code>fetch()</code> 函数通过外部接口与 JavaScript API 交互，以描述 JavaScript 对象的形状：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.js.JsPlainObject</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JsPlainObject</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">external</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FetchOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> method: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Window.fetch 的包装器</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">suspend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(url: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, options: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FetchOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TODO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Add your custom behavior here&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 由于“metod”未被识别，会触发编译期错误</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 为 method</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://google.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, options </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FetchOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(metod </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;POST&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 由于 method 是必需的，会触发编译期错误</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://google.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, options </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FetchOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(body </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;SOME STRING&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><p>相比之下，如果您改用 <code>js()</code> 函数创建 JavaScript 对象，则错误只会在运行时发现或根本不会触发：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">suspend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(url: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, options: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FetchOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TODO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Add your custom behavior here&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 没有错误触发。由于“metod”未被识别，使用了错误的方法</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// (GET)。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://google.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, options </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{ metod: &#39;POST&#39; }&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 默认情况下使用 GET 方法。会触发运行时错误，因为</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// body 不应存在。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://google.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, options </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;{ body: &#39;SOME STRING&#39; }&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// TypeError: Window.fetch: HEAD or GET Request cannot have a body</span></span></code></pre></div><p>要使用 <code>js-plain-objects</code> 插件，请将以下内容添加到您的 <code>build.gradle(.kts)</code> 文件中：</p>`,132)),n(p,{group:"build-script"},{default:l(()=>[n(t,{title:"Kotlin","group-key":"kotlin"},{default:l(()=>a[2]||(a[2]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"plugins"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    kotlin"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"plugin.js-plain-objects"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") version "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"2.0.0"')]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),n(t,{title:"Groovy","group-key":"groovy"},{default:l(()=>a[3]||(a[3]=[s("div",{class:"language-groovy vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"groovy"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"plugins {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    id "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"org.jetbrains.kotlin.plugin.js-plain-objects"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," version "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"2.0.0"')]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),a[10]||(a[10]=e(`<h3 id="支持-npm-包管理器" tabindex="-1">支持 npm 包管理器 <a class="header-anchor" href="#支持-npm-包管理器" aria-label="Permalink to &quot;支持 npm 包管理器&quot;">​</a></h3><p>此前，Kotlin 多平台 Gradle 插件只能使用 <a href="https://yarnpkg.com/lang/en/" target="_blank" rel="noreferrer">Yarn</a> 作为包管理器来下载和安装 npm 依赖项。从 Kotlin 2.0.0 开始，您可以改为使用 <a href="https://www.npmjs.com/" target="_blank" rel="noreferrer">npm</a> 作为您的包管理器。使用 npm 作为包管理器意味着您在设置期间需要管理的一个工具更少。</p><p>为了向后兼容，Yarn 仍然是默认的包管理器。要使用 npm 作为您的包管理器，请在您的 <code>gradle.properties</code> 文件中设置以下属性：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kotlin.js.yarn </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span></code></pre></div><h3 id="编译任务的更改" tabindex="-1">编译任务的更改 <a class="header-anchor" href="#编译任务的更改" aria-label="Permalink to &quot;编译任务的更改&quot;">​</a></h3><p>此前，<code>webpack</code> 和 <code>distributeResources</code> 编译任务都指向相同的目录。此外，<code>distribution</code> 任务也将 <code>dist</code> 声明为其输出目录。这导致输出重叠并产生了编译警告。</p><p>因此，从 Kotlin 2.0.0 开始，我们实现了以下更改：</p><ul><li><code>webpack</code> 任务现在指向一个单独的文件夹。</li><li><code>distributeResources</code> 任务已被完全移除。</li><li><code>distribution</code> 任务现在具有 <code>Copy</code> 类型并指向 <code>dist</code> 文件夹。</li></ul><h3 id="停止支持旧版-kotlin-js-jar-artifact" tabindex="-1">停止支持旧版 Kotlin/JS JAR artifact <a class="header-anchor" href="#停止支持旧版-kotlin-js-jar-artifact" aria-label="Permalink to &quot;停止支持旧版 Kotlin/JS JAR artifact&quot;">​</a></h3><p>从 Kotlin 2.0.0 开始，Kotlin 发行版不再包含带有 <code>.jar</code> 扩展名的旧版 Kotlin/JS artifact。旧版 artifact 用于不受支持的旧版 Kotlin/JS 编译器，而对于使用 <code>klib</code> 格式的 IR 编译器来说是不必要的。</p><h2 id="gradle-改进" tabindex="-1">Gradle 改进 <a class="header-anchor" href="#gradle-改进" aria-label="Permalink to &quot;Gradle 改进&quot;">​</a></h2><p>Kotlin 2.0.0 完全兼容 Gradle 6.8.3 到 8.5。您还可以使用最高到最新 Gradle 版本的 Gradle 版本，但如果您这样做，请记住您可能会遇到弃用警告或某些新的 Gradle 特性可能无法正常工作。</p><p>此版本带来了以下更改：</p><ul><li><a href="#new-gradle-dsl-for-compiler-options-in-multiplatform-projects">多平台项目中编译器选项的新 Gradle DSL</a></li><li><a href="#new-compose-compiler-gradle-plugin">新的 Compose 编译器 Gradle 插件</a></li><li><a href="#new-attribute-to-distinguish-jvm-and-android-published-libraries">区分 JVM 和 Android 已发布库的新属性</a></li><li><a href="#improved-gradle-dependency-handling-for-cinteropprocess-in-kotlin-native">改进了 Kotlin/Native 中 CInteropProcess 的 Gradle 依赖项处理</a></li><li><a href="#visibility-changes-in-gradle">Gradle 中的可见性更改</a></li><li><a href="#new-directory-for-kotlin-data-in-gradle-projects">Gradle 项目中 Kotlin 数据的新目录</a></li><li><a href="#kotlin-native-compiler-downloaded-when-needed">仅在需要时下载 Kotlin/Native 编译器</a></li><li><a href="#deprecated-old-ways-of-defining-compiler-options">弃用旧的编译器选项定义方式</a></li><li><a href="#bumped-minimum-supported-agp-version">提升了最低支持的 AGP 版本</a></li><li><a href="#new-gradle-property-for-trying-the-latest-language-version">用于尝试最新语言版本的新 Gradle 属性</a></li><li><a href="#new-json-output-format-for-build-reports">构建报告的新 JSON 输出格式</a></li><li><a href="#kapt-configurations-inherit-annotation-processors-from-superconfigurations">kapt 配置从超配置继承注解处理器</a></li><li><a href="#kotlin-gradle-plugin-no-longer-uses-deprecated-gradle-conventions">Kotlin Gradle 插件不再使用弃用的 Gradle 约定</a></li></ul><h3 id="多平台项目中编译器选项的新-gradle-dsl" tabindex="-1">多平台项目中编译器选项的新 Gradle DSL <a class="header-anchor" href="#多平台项目中编译器选项的新-gradle-dsl" aria-label="Permalink to &quot;多平台项目中编译器选项的新 Gradle DSL&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>此特性是<a href="/kotlin/components-stability#stability-levels-explained">实验性的</a>。它可能随时放弃或更改。 仅用于评估目的。我们感谢您在 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a> 上提供反馈。</p></div><p>在 Kotlin 2.0.0 之前，在 Gradle 多平台项目中配置编译器选项只能在较低级别进行，例如按任务、编译或源代码集。为了使在项目中更普遍地配置编译器选项变得更容易，Kotlin 2.0.0 引入了新的 Gradle DSL。</p><p>通过这个新的 DSL，您可以在扩展级别为所有目标和共享源代码集（如 <code>commonMain</code>）以及在目标级别为特定目标配置编译器选项：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 扩展级别的公共编译器选项，用作</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 所有目标和共享源代码集的默认值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        allWarningsAsErrors.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 目标级别的 JVM 编译器选项，用作</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 此目标中所有编译的默认值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            noJdk.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>整个项目配置现在有三层。最高层是扩展级别，然后是目标级别，最低层是编译单元（通常是编译任务）：</p><p><img src="`+o+`" alt="Kotlin compiler options levels" width="700"></p><p>较高层次的设置用作较低层次的约定（默认值）：</p><ul><li>扩展编译器选项的值是目标编译器选项的默认值，包括共享源代码集，如 <code>commonMain</code>、<code>nativeMain</code> 和 <code>commonTest</code>。</li><li>目标编译器选项的值用作编译单元（任务）编译器选项的默认值，例如 <code>compileKotlinJvm</code> 和 <code>compileTestKotlinJvm</code> 任务。</li></ul><p>反过来，在较低层次进行的配置会覆盖较高层次的相关设置：</p><ul><li>任务级别的编译器选项会覆盖目标或扩展级别的相关配置。</li><li>目标级别的编译器选项会覆盖扩展级别的相关配置。</li></ul><p>配置项目时，请记住某些旧的编译器选项设置方式已被<a href="#deprecated-old-ways-of-defining-compiler-options">弃用</a>。</p><p>我们鼓励您在多平台项目中尝试新的 DSL，并在 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a> 中留下反馈，因为我们计划将此 DSL 作为配置编译器选项的推荐方法。</p><h3 id="新的-compose-编译器-gradle-插件" tabindex="-1">新的 Compose 编译器 Gradle 插件 <a class="header-anchor" href="#新的-compose-编译器-gradle-插件" aria-label="Permalink to &quot;新的 Compose 编译器 Gradle 插件&quot;">​</a></h3><p>Jetpack Compose 编译器（将可组合项转换为 Kotlin 代码）现已合并到 Kotlin 版本库中。这将有助于 Compose 项目过渡到 Kotlin 2.0.0，因为 Compose 编译器将始终与 Kotlin 同步发布。这还将 Compose 编译器版本提升到 2.0.0。</p><p>要在您的项目中使用新的 Compose 编译器，请在 <code>build.gradle(.kts)</code> 文件中应用 <code>org.jetbrains.kotlin.plugin.compose</code> Gradle 插件，并将其版本设置为与 Kotlin 2.0.0 相同。</p><p>要了解有关此更改的更多信息并查看迁移说明，请参见 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/compose-compiler.html" target="_blank" rel="noreferrer">Compose 编译器</a> 文档。</p><h3 id="区分-jvm-和-android-已发布库的新属性" tabindex="-1">区分 JVM 和 Android 已发布库的新属性 <a class="header-anchor" href="#区分-jvm-和-android-已发布库的新属性" aria-label="Permalink to &quot;区分 JVM 和 Android 已发布库的新属性&quot;">​</a></h3><p>从 Kotlin 2.0.0 开始，<a href="https://docs.gradle.org/current/userguide/variant_attributes.html#sub:jvm_default_attributes" target="_blank" rel="noreferrer"><code>org.gradle.jvm.environment</code></a> Gradle 属性默认随所有 Kotlin 变体发布。</p><p>该属性有助于区分 Kotlin 多平台库的 JVM 和 Android 变体。它表明某个库变体更适合某个 JVM 环境。目标环境可以是“android”、“standard-jvm”或“no-jvm”。</p><p>发布此属性应能使非多平台客户端（例如仅 Java 项目）使用带有 JVM 和 Android 目标的 Kotlin 多平台库更加健壮。</p><p>如有必要，您可以禁用属性发布。为此，请将以下 Gradle 选项添加到您的 <code>gradle.properties</code> 文件中：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.publishJvmEnvironmentAttribute=false</span></span></code></pre></div><h3 id="改进了-kotlin-native-中-cinteropprocess-的-gradle-依赖项处理" tabindex="-1">改进了 Kotlin/Native 中 CInteropProcess 的 Gradle 依赖项处理 <a class="header-anchor" href="#改进了-kotlin-native-中-cinteropprocess-的-gradle-依赖项处理" aria-label="Permalink to &quot;改进了 Kotlin/Native 中 CInteropProcess 的 Gradle 依赖项处理&quot;">​</a></h3><p>在此版本中，我们增强了 <code>defFile</code> 属性的处理，以确保 Kotlin/Native 项目中更好的 Gradle 任务依赖项管理。</p><p>在此更新之前，如果 <code>defFile</code> 属性被指定为尚未执行的另一个任务的输出，Gradle 构建可能会失败。此问题的变通方法是为此任务添加依赖项：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    macosArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;native&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        compilations.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getByName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;main&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            cinterops</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cinterop </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> creating</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    defFileProperty.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(createDefFileTask.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">flatMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.defFile.asFile })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    project.tasks.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">named</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(interopProcessingTaskName).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                        dependsOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(createDefFileTask)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>为了解决此问题，新增了一个名为 <code>definitionFile</code> 的 <code>RegularFileProperty</code> 属性。现在，Gradle 会在构建过程稍后关联任务运行后惰性地验证 <code>definitionFile</code> 属性是否存在。这种新方法消除了对额外依赖项的需求。</p><p><code>CInteropProcess</code> 任务和 <code>CInteropSettings</code> 类使用 <code>definitionFile</code> 属性而不是 <code>defFile</code> 和 <code>defFileProperty</code>：</p>`,43)),n(p,{group:"build-script"},{default:l(()=>[n(t,{id:"kotlin",title:"Kotlin","group-key":"kotlin"},{default:l(()=>a[4]||(a[4]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    macosArm64"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"native"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        compilations."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"getByName"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"main"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"            cinterops"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"                val"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," cinterop "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"by"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," creating"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"                    definitionFile."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"set"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(project."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"file"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"def-file.def"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"))")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"                }")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            }")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),n(t,{id:"groovy",title:"Groovy","group-key":"groovy"},{default:l(()=>a[5]||(a[5]=[s("div",{class:"language-groovy vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"groovy"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"kotlin {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    macosArm64("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"native"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        compilations"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"main {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            cinterops {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"                cinterop {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"                    definitionFile"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"set(project"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"file("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"def-file.def"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"))")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"                }")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            }")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),a[11]||(a[11]=e(`<div class="danger custom-block"><p class="custom-block-title">WARNING</p><p><code>defFile</code> 和 <code>defFileProperty</code> 形参已被弃用。</p></div><h3 id="gradle-中的可见性更改" tabindex="-1">Gradle 中的可见性更改 <a class="header-anchor" href="#gradle-中的可见性更改" aria-label="Permalink to &quot;Gradle 中的可见性更改&quot;">​</a></h3><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>此更改仅影响 Kotlin DSL 用户。</p></div><p>在 Kotlin 2.0.0 中，我们修改了 Kotlin Gradle 插件，以更好地控制构建脚本并提高安全性。此前，某些原本用于特定 DSL 上下文的 Kotlin DSL 函数和属性会无意中泄露到其他 DSL 上下文中。这种泄露可能导致使用不正确的编译器选项、设置被多次应用以及其他错误配置：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 目标 DSL 无法访问在</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // kotlin{} 扩展 DSL 中定义的方法和属性</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 编译 DSL 无法访问在</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // kotlin{} 扩展 DSL 和 Kotlin jvm{} 目标 DSL 中定义的方法和属性</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        compilations.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configureEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 编译任务 DSL 无法访问在</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // kotlin{} 扩展、Kotlin jvm{}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 目标或 Kotlin 编译 DSL 中定义的方法和属性</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            compileTaskProvider.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // 例如：</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                explicitApi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // 错误，因为它在 kotlin{} 扩展 DSL 中定义</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                mavenPublication</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // 错误，因为它在 Kotlin jvm{} 目标 DSL 中定义</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                defaultSourceSet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // 错误，因为它在 Kotlin 编译 DSL 中定义</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>为了解决此问题，我们添加了 <code>@KotlinGradlePluginDsl</code> 注解，防止 Kotlin Gradle 插件 DSL 函数和属性暴露到其不应可用的级别。以下级别彼此分离：</p><ul><li>Kotlin extension</li><li>Kotlin target</li><li>Kotlin compilation</li><li>Kotlin compilation task</li></ul><p>对于最常见的情况，我们添加了编译器警告，并提供了关于如何修复构建脚本配置不正确的建议。例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        sourceSets.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getByName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jvmMain&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.kotlinx:kotlinx-coroutines-core-jvm:1.7.3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在这种情况下，<code>sourceSets</code> 的警告消息是：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[DEPRECATION] &#39;sourceSets: NamedDomainObjectContainer&lt;KotlinSourceSet&gt;&#39; is deprecated.Accessing &#39;sourceSets&#39; container on the Kotlin target level DSL is deprecated. Consider configuring &#39;sourceSets&#39; on the Kotlin extension level.</span></span></code></pre></div><p>我们感谢您对这项更改的反馈！请在我们的 <a href="https://kotlinlang.slack.com/archives/C19FD9681" target="_blank" rel="noreferrer">#gradle Slack 频道</a>直接向 Kotlin 开发人员分享您的评论。<a href="https://surveys.jetbrains.com/s3/kotlin-slack-sign-up" target="_blank" rel="noreferrer">获取 Slack 邀请</a>。</p><h3 id="gradle-项目中-kotlin-数据的新目录" tabindex="-1">Gradle 项目中 Kotlin 数据的新目录 <a class="header-anchor" href="#gradle-项目中-kotlin-数据的新目录" aria-label="Permalink to &quot;Gradle 项目中 Kotlin 数据的新目录&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>不要将 <code>.kotlin</code> 目录提交到版本控制。 例如，如果您使用 Git，请将 <code>.kotlin</code> 添加到项目的 <code>.gitignore</code> 文件中。</p></div><p>在 Kotlin 1.8.20 中，Kotlin Gradle 插件更改为将其数据存储在 Gradle 项目缓存目录中：<code>&lt;project-root-directory&gt;/.gradle/kotlin</code>。然而，<code>.gradle</code> 目录仅供 Gradle 使用，因此它并非面向未来。</p><p>为了解决此问题，从 Kotlin 2.0.0 开始，我们将默认将 Kotlin 数据存储在您的 <code>&lt;项目根目录&gt;/.kotlin</code> 中。 我们将继续将部分数据存储在 <code>.gradle/kotlin</code> 目录中以实现向后兼容。</p><p>您可以配置的新 Gradle 属性是：</p><table tabindex="0"><thead><tr><th>Gradle 属性</th><th>描述</th></tr></thead><tbody><tr><td><code>kotlin.project.persistent.dir</code></td><td>配置项目级别数据的存储位置。默认值：<code>&lt;项目根目录&gt;/.kotlin</code></td></tr><tr><td><code>kotlin.project.persistent.dir.gradle.disableWrite</code></td><td>一个布尔值，控制是否禁用向 <code>.gradle</code> 目录写入 Kotlin 数据。默认值：<code>false</code></td></tr></tbody></table><p>将这些属性添加到项目中的 <code>gradle.properties</code> 文件中，使其生效。</p><h3 id="仅在需要时下载-kotlin-native-编译器" tabindex="-1">仅在需要时下载 Kotlin/Native 编译器 <a class="header-anchor" href="#仅在需要时下载-kotlin-native-编译器" aria-label="Permalink to &quot;仅在需要时下载 Kotlin/Native 编译器&quot;">​</a></h3><p>在 Kotlin 2.0.0 之前，如果您在多平台项目的 Gradle 构建脚本中配置了 <a href="/kotlin/native-target-support">Kotlin/Native 目标</a>，Gradle 始终会在<a href="https://docs.gradle.org/current/userguide/build_lifecycle.html#sec:configuration" target="_blank" rel="noreferrer">配置阶段</a>下载 Kotlin/Native 编译器。</p><p>即使没有要在<a href="https://docs.gradle.org/current/userguide/build_lifecycle.html#sec:execution" target="_blank" rel="noreferrer">执行阶段</a>运行的用于编译 Kotlin/Native 目标代码的任务，这种情况也会发生。以这种方式下载 Kotlin/Native 编译器对于只希望检查项目中 JVM 或 JavaScript 代码的用户来说效率特别低。例如，作为 CI 流程的一部分，对他们的 Kotlin 项目执行测试或检测。</p><p>在 Kotlin 2.0.0 中，我们更改了 Kotlin Gradle 插件中的此行为，以便 Kotlin/Native 编译器在<a href="https://docs.gradle.org/current/userguide/build_lifecycle.html#sec:execution" target="_blank" rel="noreferrer">执行阶段</a>下载，并且<strong>仅当</strong>请求编译 Kotlin/Native 目标时。</p><p>反过来，Kotlin/Native 编译器的依赖项现在不再作为编译器的一部分下载，而是在执行阶段下载。</p><p>如果您遇到新行为的任何问题，可以通过将以下 Gradle 属性添加到 <code>gradle.properties</code> 文件中暂时切换回之前的行为：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.native.toolchain.enabled=false</span></span></code></pre></div><p>从 Kotlin 1.9.20-Beta 开始，Kotlin/Native 发行版已与 CDN 一同发布到 <a href="https://repo.maven.apache.org/maven2/org/jetbrains/kotlin/kotlin-native-prebuilt/" target="_blank" rel="noreferrer">Maven Central</a>。</p><p>这使我们能够更改 Kotlin 查找和下载所需 artifact 的方式。默认情况下，它不再使用 CDN，而是使用您在项目 <code>repositories {}</code> 代码块中指定的 Maven 仓库。</p><p>您可以通过在 <code>gradle.properties</code> 文件中设置以下 Gradle 属性来暂时切换回此行为：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.native.distribution.downloadFromMaven=false</span></span></code></pre></div><p>请向我们的问题跟踪器 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a> 报告任何问题。这两个改变默认行为的 Gradle 属性都是临时的，并将在未来版本中移除。</p><h3 id="弃用旧的编译器选项定义方式" tabindex="-1">弃用旧的编译器选项定义方式 <a class="header-anchor" href="#弃用旧的编译器选项定义方式" aria-label="Permalink to &quot;弃用旧的编译器选项定义方式&quot;">​</a></h3><p>在此版本中，我们继续完善您设置编译器选项的方式。它应该会解决不同方式之间的歧义，并使项目配置更直接。</p><p>从 Kotlin 2.0.0 开始，以下用于指定编译器选项的 DSL 已被弃用：</p><ul><li><p>实现所有 Kotlin 编译任务的 <code>KotlinCompile</code> 接口中的 <code>kotlinOptions</code> DSL。请改用 <code>KotlinCompilationTask&lt;CompilerOptions&gt;</code>。</p></li><li><p>来自 <code>KotlinCompilation</code> 接口的带有 <code>HasCompilerOptions</code> 类型的 <code>compilerOptions</code> 属性。此 DSL 与其他 DSL 不一致，并且配置与 <code>KotlinCompilation.compileTaskProvider</code> 编译任务内部的 <code>compilerOptions</code> 相同的 <code>KotlinCommonCompilerOptions</code> 对象，这令人困惑。</p><p>相反，我们建议使用 Kotlin 编译任务中的 <code>compilerOptions</code> 属性：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kotlinCompilation.compileTaskProvider.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">. }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(IR) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        compilations.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            compileTaskProvider.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                compilerOptions.freeCompilerArgs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xir-minimized-member-names=false&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><code>KotlinCompilation</code> 接口中的 <code>kotlinOptions</code> DSL。</p></li><li><p><code>KotlinNativeArtifactConfig</code> 接口、<code>KotlinNativeLink</code> 类和 <code>KotlinNativeLinkArtifactTask</code> 类中的 <code>kotlinOptions</code> DSL。请改用 <code>toolOptions</code> DSL。</p></li><li><p><code>KotlinJsDce</code> 接口中的 <code>dceOptions</code> DSL。请改用 <code>toolOptions</code> DSL。</p></li></ul><p>有关如何在 Kotlin Gradle 插件中指定编译器选项的更多信息，请参见<a href="/kotlin/gradle-compiler-options#how-to-define-options">如何定义选项</a>。</p><h3 id="提升了最低支持的-agp-版本" tabindex="-1">提升了最低支持的 AGP 版本 <a class="header-anchor" href="#提升了最低支持的-agp-版本" aria-label="Permalink to &quot;提升了最低支持的 AGP 版本&quot;">​</a></h3><p>从 Kotlin 2.0.0 开始，最低支持的 Android Gradle 插件版本为 7.1.3。</p><h3 id="用于尝试最新语言版本的新-gradle-属性" tabindex="-1">用于尝试最新语言版本的新 Gradle 属性 <a class="header-anchor" href="#用于尝试最新语言版本的新-gradle-属性" aria-label="Permalink to &quot;用于尝试最新语言版本的新 Gradle 属性&quot;">​</a></h3><p>在 Kotlin 2.0.0 之前，我们有以下 Gradle 属性用于试用新的 K2 编译器：<code>kotlin.experimental.tryK2</code>。 现在 K2 编译器在 Kotlin 2.0.0 中默认启用，我们决定将此属性演变为一种新形式，您可以使用它来尝试最新的语言版本：<code>kotlin.experimental.tryNext</code>。当您在 <code>gradle.properties</code> 文件中使用此属性时，Kotlin Gradle 插件会将语言版本增加到比您 Kotlin 版本默认值高一个的版本。例如，在 Kotlin 2.0.0 中，默认语言版本是 2.0，因此该属性配置语言版本为 2.1。</p><p>这个新的 Gradle 属性在<a href="/kotlin/gradle-compilation-and-caches#build-reports">构建报告</a>中产生与之前使用 <code>kotlin.experimental.tryK2</code> 类似的指标。配置的语言版本包含在输出中。例如：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>##### &#39;kotlin.experimental.tryNext&#39; 结果 #####</span></span>
<span class="line"><span>:app:compileKotlin: 2.1 language version</span></span>
<span class="line"><span>:lib:compileKotlin: 2.1 language version</span></span>
<span class="line"><span>##### 100% (2/2) 任务已使用 Kotlin 2.1 编译 #####</span></span></code></pre></div><p>要了解更多关于如何启用构建报告及其内容的信息，请参见<a href="/kotlin/gradle-compilation-and-caches#build-reports">构建报告</a>。</p><h3 id="构建报告的新-json-输出格式" tabindex="-1">构建报告的新 JSON 输出格式 <a class="header-anchor" href="#构建报告的新-json-输出格式" aria-label="Permalink to &quot;构建报告的新 JSON 输出格式&quot;">​</a></h3><p>在 Kotlin 1.7.0 中，我们引入了构建报告以帮助跟踪编译器性能。随着时间的推移，我们添加了更多指标，使这些报告在调查性能问题时更加详细和有帮助。此前，本地文件的唯一输出格式是 <code>*.txt</code> 格式。在 Kotlin 2.0.0 中，我们支持 JSON 输出格式，使其更容易使用其他工具进行分析。</p><p>要为您的构建报告配置 JSON 输出格式，请在您的 <code>gradle.properties</code> 文件中声明以下属性：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.build.report.output=json</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// 存储构建报告的目录</span></span>
<span class="line"><span>kotlin.build.report.json.directory=my/directory/path</span></span></code></pre></div><p>或者，您可以运行以下命令：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> assemble</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Pkotlin.build.report.output=json</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Pkotlin.build.report.json.directory=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my/directory/path&quot;</span></span></code></pre></div><p>配置完成后，Gradle 将在您指定的目录中生成构建报告，名称格式为：<code>\${project_name}-日期-时间-&lt;序列号&gt;.json</code>。</p><p>以下是一个 JSON 输出格式的构建报告示例片段，其中包含构建指标和聚合指标：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;buildOperationRecord&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     &quot;path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;:lib:compileKotlin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;classFqName&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.kotlin.gradle.tasks.KotlinCompile_Decorated&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;startTimeMs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1714730820601</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;totalTimeMs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2724</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;buildMetrics&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;buildTimes&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">          &quot;buildTimesNs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;CLEAR_OUTPUT&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">713417</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;SHRINK_AND_SAVE_CURRENT_CLASSPATH_SNAPSHOT_AFTER_COMPILATION&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">19699333</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;IR_TRANSLATION&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">281000000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;NON_INCREMENTAL_LOAD_CURRENT_CLASSPATH_SNAPSHOT&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">14088042</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;CALCULATE_OUTPUT_SIZE&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1301500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;GRADLE_TASK&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2724000000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;COMPILER_INITIALIZATION&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">263000000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;IR_GENERATION&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">74000000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">...</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;aggregatedMetrics&quot;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;buildTimes&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;buildTimesNs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;CLEAR_OUTPUT&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">782667</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;SHRINK_AND_SAVE_CURRENT_CLASSPATH_SNAPSHOT_AFTER_COMPILATION&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">22031833</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;IR_TRANSLATION&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">333000000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;NON_INCREMENTAL_LOAD_CURRENT_CLASSPATH_SNAPSHOT&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">14890292</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;CALCULATE_OUTPUT_SIZE&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2370750</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;GRADLE_TASK&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3234000000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;COMPILER_INITIALIZATION&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">292000000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;IR_GENERATION&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">89000000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre></div><h3 id="kapt-配置从超配置继承注解处理器" tabindex="-1">kapt 配置从超配置继承注解处理器 <a class="header-anchor" href="#kapt-配置从超配置继承注解处理器" aria-label="Permalink to &quot;kapt 配置从超配置继承注解处理器&quot;">​</a></h3><p>在 Kotlin 2.0.0 之前，如果您想在单独的 Gradle 配置中定义一组公共注解处理器，并在子项目的 kapt 特定配置中扩展此配置，kapt 会跳过注解处理，因为它找不到任何注解处理器。在 Kotlin 2.0.0 中，kapt 可以成功检测到对您的注解处理器的间接依赖项。</p><p>例如，对于使用 <a href="https://dagger.dev/" target="_blank" rel="noreferrer">Dagger</a> 的子项目，在您的 <code>build.gradle(.kts)</code> 文件中，使用以下配置：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> commonAnnotationProcessors </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> configurations.creating</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">configurations.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">named</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;kapt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">extendsFrom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(commonAnnotationProcessors) }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;com.google.dagger:dagger:2.48.1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    commonAnnotationProcessors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;com.google.dagger:dagger-compiler:2.48.1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在此示例中，<code>commonAnnotationProcessors</code> Gradle 配置是您的注解处理的公共配置，您希望将其用于所有项目。您使用 <a href="https://docs.gradle.org/current/dsl/org.gradle.api.artifacts.Configuration.html#org.gradle.api.artifacts.Configuration:extendsFrom" target="_blank" rel="noreferrer"><code>extendsFrom()</code></a> 方法将 <code>commonAnnotationProcessors</code> 添加为超配置。kapt 会发现 <code>commonAnnotationProcessors</code> Gradle 配置对 Dagger 注解处理器有依赖项。因此，kapt 会在其注解处理配置中包含 Dagger 注解处理器。</p><p>感谢 Christoph Loy 的<a href="https://github.com/JetBrains/kotlin/pull/5198" target="_blank" rel="noreferrer">实现</a>！</p><h3 id="kotlin-gradle-插件不再使用弃用的-gradle-约定" tabindex="-1">Kotlin Gradle 插件不再使用弃用的 Gradle 约定 <a class="header-anchor" href="#kotlin-gradle-插件不再使用弃用的-gradle-约定" aria-label="Permalink to &quot;Kotlin Gradle 插件不再使用弃用的 Gradle 约定&quot;">​</a></h3><p>在 Kotlin 2.0.0 之前，如果您使用 Gradle 8.2 或更高版本，Kotlin Gradle 插件会错误地使用 Gradle 8.2 中已弃用的 Gradle 约定。这导致 Gradle 报告构建弃用。在 Kotlin 2.0.0 中，Kotlin Gradle 插件已更新，当您使用 Gradle 8.2 或更高版本时，不再触发这些弃用警告。</p><h2 id="标准库" tabindex="-1">标准库 <a class="header-anchor" href="#标准库" aria-label="Permalink to &quot;标准库&quot;">​</a></h2><p>此版本为 Kotlin 标准库带来了进一步的稳定性，并使更多现有函数成为所有平台的通用函数：</p><ul><li><a href="#stable-replacement-of-the-enum-class-values-generic-function">enum class values 泛型函数的稳定替代</a></li><li><a href="#stable-autocloseable-interface">稳定的 AutoCloseable 接口</a></li><li><a href="#common-protected-property-abstractmutablelist-modcount">AbstractMutableList.modCount 保护属性通用化</a></li><li><a href="#common-protected-function-abstractmutablelist-removerange">AbstractMutableList.removeRange 保护函数通用化</a></li><li><a href="#common-string-tochararray-destination-function">String.toCharArray(destination) 通用函数</a></li></ul><h3 id="enum-class-values-泛型函数的稳定替代" tabindex="-1">enum class values 泛型函数的稳定替代 <a class="header-anchor" href="#enum-class-values-泛型函数的稳定替代" aria-label="Permalink to &quot;enum class values 泛型函数的稳定替代&quot;">​</a></h3><p>在 Kotlin 2.0.0 中，<code>enumEntries&lt;T&gt;()</code> 函数变得<a href="/kotlin/components-stability#stability-levels-explained">稳定</a>。 <code>enumEntries&lt;T&gt;()</code> 函数用于替代泛型 <code>enumValues&lt;T&gt;()</code> 函数。新函数返回给定枚举类型 <code>T</code> 的所有枚举条目列表。<code>enum</code> 类的 <code>entries</code> 属性此前已引入并稳定，以替代合成的 <code>values()</code> 函数。有关 <code>entries</code> 属性的更多信息，请参见 <a href="/kotlin/whatsnew1820#a-modern-and-performant-replacement-of-the-enum-class-values-function">Kotlin 1.8.20 中的新特性</a>。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>enumValues&lt;T&gt;()</code> 函数仍受支持，但我们建议您使用 <code>enumEntries&lt;T&gt;()</code> 函数，因为它对性能影响较小。每次调用 <code>enumValues&lt;T&gt;()</code> 都会创建一个新数组，而每次调用 <code>enumEntries&lt;T&gt;()</code> 都会返回相同的列表，这效率更高。</p></div><p>例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">enum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RGB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { RED, GREEN, BLUE }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">inline</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reified</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Enum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printAllValues</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">enumEntries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">joinToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.name })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printAllValues</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RGB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// RED, GREEN, BLUE</span></span></code></pre></div><h3 id="稳定的-autocloseable-接口" tabindex="-1">稳定的 AutoCloseable 接口 <a class="header-anchor" href="#稳定的-autocloseable-接口" aria-label="Permalink to &quot;稳定的 AutoCloseable 接口&quot;">​</a></h3><p>在 Kotlin 2.0.0 中，通用的 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-auto-closeable/" target="_blank" rel="noreferrer"><code>AutoCloseable</code></a> 接口变得<a href="/kotlin/components-stability#stability-levels-explained">稳定</a>。它允许您轻松关闭资源，并包含一些有用的函数：</p><ul><li><code>use()</code> 扩展函数，它在选定的资源上执行给定的代码块函数，然后正确关闭资源，无论是否抛出异常。</li><li><code>AutoCloseable()</code> 构造函数，它创建 <code>AutoCloseable</code> 接口的实例。</li></ul><p>在下面的示例中，我们定义了 <code>XMLWriter</code> 接口，并假设存在一个实现了它的资源。 例如，该资源可以是一个类，它打开文件，写入 XML 内容，然后关闭它：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> XMLWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> document</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(encoding: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, version: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, content: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">XMLWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Unit)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, content: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">XMLWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Unit)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> attribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> flushAndClose</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> writeBooksTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(writer: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">XMLWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> autoCloseable </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AutoCloseable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { writer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">flushAndClose</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    autoCloseable.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        writer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">document</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(encoding </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;UTF-8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, version </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;bookstore&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;book&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    attribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;category&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;fiction&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;title&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Harry Potter and the Prisoner of Azkaban&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;author&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;J. K. Rowling&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;year&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1999&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;price&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;29.99&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;book&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    attribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;category&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;programming&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;title&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Kotlin in Action&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;author&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Dmitry Jemerov&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;author&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Svetlana Isakova&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;year&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2017&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    element</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;price&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;25.19&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="abstractmutablelist-modcount-保护属性通用化" tabindex="-1">AbstractMutableList.modCount 保护属性通用化 <a class="header-anchor" href="#abstractmutablelist-modcount-保护属性通用化" aria-label="Permalink to &quot;AbstractMutableList.modCount 保护属性通用化&quot;">​</a></h3><p>在此版本中，<code>AbstractMutableList</code> 接口的 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-abstract-mutable-list/mod-count.html" target="_blank" rel="noreferrer"><code>modCount</code></a> 保护属性变得通用。此前，<code>modCount</code> 属性在每个平台上都可用，但对于公共目标不可用。现在，您可以创建 <code>AbstractMutableList</code> 的自定义实现，并在公共代码中访问该属性。</p><p>该属性跟踪对集合进行的结构修改的数量。这包括更改集合大小或以可能导致正在进行的迭代返回不正确结果的方式更改列表的操作。</p><p>您可以使用 <code>modCount</code> 属性在实现自定义列表时注册并检测并发修改。</p><h3 id="abstractmutablelist-removerange-保护函数通用化" tabindex="-1">AbstractMutableList.removeRange 保护函数通用化 <a class="header-anchor" href="#abstractmutablelist-removerange-保护函数通用化" aria-label="Permalink to &quot;AbstractMutableList.removeRange 保护函数通用化&quot;">​</a></h3><p>在此版本中，<code>AbstractMutableList</code> 接口的 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-abstract-mutable-list/remove-range.html" target="_blank" rel="noreferrer"><code>removeRange()</code></a> 保护函数变得通用。此前，它在每个平台上都可用，但对于公共目标不可用。现在，您可以创建 <code>AbstractMutableList</code> 的自定义实现，并在公共代码中覆盖该函数。</p><p>该函数按照指定区间从此列表中移除元素。通过覆盖此函数，您可以利用自定义实现并提高列表操作的性能。</p><h3 id="string-tochararray-destination-通用函数" tabindex="-1">String.toCharArray(destination) 通用函数 <a class="header-anchor" href="#string-tochararray-destination-通用函数" aria-label="Permalink to &quot;String.toCharArray(destination) 通用函数&quot;">​</a></h3><p>此版本引入了一个通用的 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/to-char-array.html" target="_blank" rel="noreferrer"><code>String.toCharArray(destination)</code></a> 函数。此前，它仅在 JVM 上可用。</p><p>让我们将其与现有 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/to-char-array.html" target="_blank" rel="noreferrer"><code>String.toCharArray()</code></a> 函数进行比较。它会创建一个新的 <code>CharArray</code>，其中包含指定字符串中的字符。而新的通用 <code>String.toCharArray(destination)</code> 函数则将 <code>String</code> 字符移动到现有目标 <code>CharArray</code> 中。如果您已经有一个想要填充的缓冲区，这将很有用：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myString </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Kotlin is awesome!&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> destinationArray </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CharArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myString.length)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 转换字符串并存储在 destinationArray 中：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    myString.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toCharArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(destinationArray)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (char </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> destinationArray) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$char</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // K o t l i n   i s   a w e s o m e ! </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="安装-kotlin-2-0-0" tabindex="-1">安装 Kotlin 2.0.0 <a class="header-anchor" href="#安装-kotlin-2-0-0" aria-label="Permalink to &quot;安装 Kotlin 2.0.0&quot;">​</a></h2><p>从 IntelliJ IDEA 2023.3 和 Android Studio Iguana (2023.2.1) Canary 15 开始，Kotlin 插件作为捆绑插件包含在您的 IDE 中分发。这意味着您不能再从 JetBrains Marketplace 安装插件。</p><p>要更新到新的 Kotlin 版本，请在构建脚本中将 <a href="/kotlin/releases#update-to-a-new-kotlin-version">Kotlin 版本</a>更改为 2.0.0。</p>`,87))])}const B=d(g,[["render",y]]);export{D as __pageData,B as default};
