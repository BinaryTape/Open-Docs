import{_ as e,C as t,c as l,o as n,ag as i,G as o}from"./chunks/framework.Bksy39di.js";const v=JSON.parse('{"title":"KotlinでのJavaレコードの使用","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/jvm-records.md","filePath":"ja/kotlin/jvm-records.md","lastUpdated":1754307826000}'),p={name:"ja/kotlin/jvm-records.md"};function h(r,a,d,k,c,g){const s=t("TopicTitle");return n(),l("div",null,[a[0]||(a[0]=i(`<h1 id="kotlinでのjavaレコードの使用" tabindex="-1">KotlinでのJavaレコードの使用 <a class="header-anchor" href="#kotlinでのjavaレコードの使用" aria-label="Permalink to &quot;KotlinでのJavaレコードの使用&quot;">​</a></h1><p>_レコード_は、Javaにおける不変なデータを格納するための<a href="https://openjdk.java.net/jeps/395" target="_blank" rel="noreferrer">クラス</a>です。レコードは固定された値のセット、つまり_レコードコンポーネント_を持ちます。 Javaでは簡潔な構文を持ち、ボイラープレートコードを書く手間を省きます:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Java</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> record Person (String name, int age) {}</span></span></code></pre></div><p>コンパイラは、<a href="https://docs.oracle.com/en/java/javase/16/docs/api/java.base/java/lang/Record.html" target="_blank" rel="noreferrer"><code>java.lang.Record</code></a>を継承する<code>final</code>クラスを自動的に生成し、以下のメンバーを含みます:</p><ul><li>各レコードコンポーネントに対応するprivate finalフィールド</li><li>全てのフィールドに対応するパラメータを持つpublicコンストラクタ</li><li>構造的等価性を実装するためのメソッド群: <code>equals()</code>, <code>hashCode()</code>, <code>toString()</code></li><li>各レコードコンポーネントを読み取るためのpublicメソッド</li></ul><p>レコードはKotlinの<a href="/ja/kotlin/data-classes">データクラス</a>と非常によく似ています。</p><h2 id="kotlinコードからのjavaレコードの使用" tabindex="-1">KotlinコードからのJavaレコードの使用 <a class="header-anchor" href="#kotlinコードからのjavaレコードの使用" aria-label="Permalink to &quot;KotlinコードからのJavaレコードの使用&quot;">​</a></h2><p>Javaで宣言されたコンポーネントを持つレコードクラスは、Kotlinでプロパティを持つクラスを使用するのと同じ方法で利用できます。 レコードコンポーネントにアクセスするには、<a href="/ja/kotlin/properties">Kotlinプロパティ</a>と同じようにその名前を使用します:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newPerson </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Kotlin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> firstName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newPerson.name</span></span></code></pre></div><h2 id="kotlinでのレコード宣言" tabindex="-1">Kotlinでのレコード宣言 <a class="header-anchor" href="#kotlinでのレコード宣言" aria-label="Permalink to &quot;Kotlinでのレコード宣言&quot;">​</a></h2><p>Kotlinはデータクラスでのみレコード宣言をサポートしており、データクラスは<a href="#requirements">要件</a>を満たす必要があります。</p><p>Kotlinでレコードクラスを宣言するには、<code>@JvmRecord</code>アノテーションを使用します:</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p><code>@JvmRecord</code>を既存のクラスに適用することは、バイナリ互換性のある変更ではありません。これは、クラスプロパティアクセサーの命名規則を変更します。</p></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JvmRecord</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>このJVM固有のアノテーションは、以下の生成を可能にします:</p><ul><li>クラスファイル内のクラスプロパティに対応するレコードコンポーネント</li><li>Javaレコードの命名規則に従って命名されたプロパティアクセサーメソッド</li></ul><p>データクラスは<code>equals()</code>、<code>hashCode()</code>、および<code>toString()</code>メソッドの実装を提供します。</p><h3 id="要件" tabindex="-1">要件 <a class="header-anchor" href="#要件" aria-label="Permalink to &quot;要件&quot;">​</a></h3><p><code>@JvmRecord</code>アノテーションを付けてデータクラスを宣言するには、以下の要件を満たす必要があります:</p><ul><li>クラスは、JVM 16バイトコードをターゲットとするモジュール（または<code>-Xjvm-enable-preview</code>コンパイラオプションが有効になっている場合は15）になければなりません。</li><li>全てのJVMレコードが暗黙的に<code>java.lang.Record</code>を継承するため、クラスは（<code>Any</code>を含む）他のクラスを明示的に継承することはできません。ただし、クラスはインターフェースを実装することはできます。</li><li>クラスは、対応するプライマリコンストラクタパラメータから初期化されるものを除いて、バッキングフィールドを持つプロパティを宣言できません。</li><li>クラスは、バッキングフィールドを持つ可変プロパティを宣言できません。</li><li>クラスはローカルにできません。</li><li>クラスのプライマリコンストラクタは、クラス自体と同じくらい可視である必要があります。</li></ul><h3 id="jvmレコードの有効化" tabindex="-1">JVMレコードの有効化 <a class="header-anchor" href="#jvmレコードの有効化" aria-label="Permalink to &quot;JVMレコードの有効化&quot;">​</a></h3><p>JVMレコードは、生成されるJVMバイトコードのターゲットバージョン<code>16</code>以上を必要とします。</p><p>それを明示的に指定するには、<a href="/ja/kotlin/gradle-compiler-options#attributes-specific-to-jvm">Gradle</a>または<a href="/ja/kotlin/maven#attributes-specific-to-jvm">Maven</a>で<code>jvmTarget</code>コンパイラオプションを使用します。</p>`,23)),o(s,{id:"kotlinでのレコードコンポーネントへのアノテーション",level:"2",title:"Kotlinでのレコードコンポーネントへのアノテーション",labelRef:"experimental-general"}),a[1]||(a[1]=i(`<p>Javaでは、レコードコンポーネント上の<a href="/ja/kotlin/annotations">アノテーション</a>は、バッキングフィールド、ゲッター、セッター、およびコンストラクタパラメータに自動的に伝播されます。 Kotlinでは、<a href="/ja/kotlin/annotations#all-meta-target"><code>all</code></a>ユースサイトターゲットを使用することで、この動作を再現できます。</p><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p><code>all</code>ユースサイトターゲットを使用するには、オプトインする必要があります。<code>-Xannotation-target-all</code>コンパイラオプションを使用するか、<code>build.gradle.kts</code>ファイルに以下を追加してください: <code>kotlin kotlin { compilerOptions { freeCompilerArgs.add(&quot;-Xannotation-target-all&quot;) } } </code></p></div><p>例:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JvmRecord</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Positive</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> val</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> age</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><code>@JvmRecord</code>を<code>@all:</code>と一緒に使用すると、Kotlinは次のようになります:</p><ul><li>プロパティ、バッキングフィールド、コンストラクタパラメータ、ゲッター、セッターにアノテーションを伝播します。</li><li>アノテーションがJavaの<code>RECORD_COMPONENT</code>をサポートしている場合、レコードコンポーネントにもアノテーションを適用します。</li></ul><h2 id="アノテーションをレコードコンポーネントで機能させる" tabindex="-1">アノテーションをレコードコンポーネントで機能させる <a class="header-anchor" href="#アノテーションをレコードコンポーネントで機能させる" aria-label="Permalink to &quot;アノテーションをレコードコンポーネントで機能させる&quot;">​</a></h2><p><a href="/ja/kotlin/annotations">アノテーション</a>をKotlinプロパティ<strong>と</strong>Javaレコードコンポーネントの両方で利用可能にするには、アノテーション宣言に以下のメタアノテーションを追加します:</p><ul><li>Kotlinの場合: <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.annotation/-target/index.html" target="_blank" rel="noreferrer"><code>@Target</code></a></li><li>Javaレコードコンポーネントの場合: <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/annotation/Target.html" target="_blank" rel="noreferrer"><code>@java.lang.annotation.Target</code></a></li></ul><p>例:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(AnnotationTarget.CLASS, AnnotationTarget.PROPERTY)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@java.lang.annotation.Target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ElementType.CLASS, ElementType.RECORD_COMPONENT)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">annotation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> exampleClass</span></span></code></pre></div><p>これで、<code>@ExampleClass</code>をKotlinクラスとプロパティ、ならびにJavaクラスとレコードコンポーネントに適用できます。</p><h2 id="さらなる議論" tabindex="-1">さらなる議論 <a class="header-anchor" href="#さらなる議論" aria-label="Permalink to &quot;さらなる議論&quot;">​</a></h2><p>さらなる技術的な詳細と議論については、<a href="https://github.com/Kotlin/KEEP/blob/master/proposals/jvm-records.md" target="_blank" rel="noreferrer">JVMレコードの言語プロポーザル</a>を参照してください。</p>`,14))])}const m=e(p,[["render",h]]);export{v as __pageData,m as default};
