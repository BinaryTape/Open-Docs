import{_ as i}from"./chunks/compose-resources-android-webview.1cP4Ejca.js";import{_ as e,c as s,o as t,ag as l}from"./chunks/framework.Bksy39di.js";const E=JSON.parse('{"title":"Compose Multiplatform 1.7.3の新機能","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kmp/whats-new-compose-170.md","filePath":"ja/kmp/whats-new-compose-170.md","lastUpdated":1755516278000}'),o={name:"ja/kmp/whats-new-compose-170.md"};function n(p,a,r,h,d,c){return t(),s("div",null,a[0]||(a[0]=[l(`<h1 id="compose-multiplatform-1-7-3の新機能" tabindex="-1">Compose Multiplatform 1.7.3の新機能 <a class="header-anchor" href="#compose-multiplatform-1-7-3の新機能" aria-label="Permalink to &quot;Compose Multiplatform 1.7.3の新機能&quot;">​</a></h1><p>このフィーチャーリリースの主なハイライトは以下の通りです。</p><ul><li><a href="#type-safe-navigation">型安全なナビゲーション</a></li><li><a href="#shared-element-transitions">共有要素トランジション</a></li><li><a href="#resources-packed-into-android-assets">Androidアセットにパッケージ化されたマルチプラットフォームリソース</a></li><li><a href="#custom-resource-directories">カスタムリソースディレクトリ</a></li><li><a href="#support-for-multiplatform-test-resources">マルチプラットフォームテストリソースのサポート</a></li><li><a href="#new-default-behavior-for-processing-touch-in-ios-native-elements">iOSでのタッチ操作の相互運用性の改善</a></li><li><a href="#material3-adaptive-adaptive">Material3 <code>adaptive</code> と <code>material3-window-size-class</code> が共通コードで利用可能に</a></li><li><a href="#drag-and-drop">デスクトップでのドラッグ＆ドロップ実装</a></li><li><a href="#basictextfield-renamed-from-basictextfield2-adopted-on-desktop"><code>BasicTextField</code> がデスクトップに採用</a></li></ul><p>このリリースの変更点の全リストは<a href="./https://github.com/JetBrains/compose-multiplatform/blob/master/CHANGELOG#170-october-2024">GitHub</a>で確認できます。</p><h2 id="依存関係" tabindex="-1">依存関係 <a class="header-anchor" href="#依存関係" aria-label="Permalink to &quot;依存関係&quot;">​</a></h2><ul><li>Gradleプラグイン <code>org.jetbrains.compose</code>, バージョン 1.7.3。Jetpack Composeライブラリに基づいています。 <ul><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-runtime#1.7.5" target="_blank" rel="noreferrer">Runtime 1.7.5</a></li><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-ui#1.7.5" target="_blank" rel="noreferrer">UI 1.7.5</a></li><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-foundation#1.7.5" target="_blank" rel="noreferrer">Foundation 1.7.5</a></li><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-material#1.7.5" target="_blank" rel="noreferrer">Material 1.7.5</a></li><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-material3#1.3.1" target="_blank" rel="noreferrer">Material3 1.3.1</a></li></ul></li><li>Lifecycleライブラリ <code>org.jetbrains.androidx.lifecycle:lifecycle-*:2.8.3</code>。 <a href="https://developer.android.com/jetpack/androidx/releases/lifecycle#2.8.5" target="_blank" rel="noreferrer">Jetpack Lifecycle 2.8.5</a>に基づいています。</li><li>Navigationライブラリ <code>org.jetbrains.androidx.navigation:navigation-*:2.8.0-alpha10</code>。 <a href="https://developer.android.com/jetpack/androidx/releases/navigation#2.8.0" target="_blank" rel="noreferrer">Jetpack Navigation 2.8.0</a>に基づいています。</li><li>Material3 Adaptiveライブラリ <code>org.jetbrains.compose.material3.adaptive:adaptive-*:1.0.0</code>。 <a href="https://developer.android.com/jetpack/androidx/releases/compose-material3-adaptive#1.0.0" target="_blank" rel="noreferrer">Jetpack Material3 Adaptive 1.0.0</a>に基づいています。</li></ul><h2 id="破壊的変更" tabindex="-1">破壊的変更 <a class="header-anchor" href="#破壊的変更" aria-label="Permalink to &quot;破壊的変更&quot;">​</a></h2><h3 id="最小agpバージョンが8-1-0に引き上げられました" tabindex="-1">最小AGPバージョンが8.1.0に引き上げられました <a class="header-anchor" href="#最小agpバージョンが8-1-0に引き上げられました" aria-label="Permalink to &quot;最小AGPバージョンが8.1.0に引き上げられました&quot;">​</a></h3><p>Compose Multiplatform 1.7.0で使用されているJetpack Compose 1.7.0とLifecycle 2.8.0のいずれも、AGP 7をサポートしていません。 そのため、Compose Multiplatform 1.7.3にアップデートする際には、AGPの依存関係もアップグレードする必要があるかもしれません。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Android Studioで新たに実装されたAndroidコンポーザブルのプレビューには、<a href="#resources-packed-into-android-assets">最新のAGPバージョン</a>のいずれかが必要です。</p></div><h3 id="javaリソースapiはマルチプラットフォームリソースライブラリに優先して非推奨になりました" tabindex="-1">JavaリソースAPIはマルチプラットフォームリソースライブラリに優先して非推奨になりました <a class="header-anchor" href="#javaリソースapiはマルチプラットフォームリソースライブラリに優先して非推奨になりました" aria-label="Permalink to &quot;JavaリソースAPIはマルチプラットフォームリソースライブラリに優先して非推奨になりました&quot;">​</a></h3><p>このリリースでは、<code>compose.ui</code>パッケージで利用可能なJavaリソースAPIを明示的に非推奨とします。 具体的には、<code>painterResource()</code>、<code>loadImageBitmap()</code>、<code>loadSvgPainter()</code>、<code>loadXmlImageVector()</code> 関数、 ならびに <code>ClassLoaderResourceLoader</code> クラスおよびそれに依存する関数です。</p><p><a href="./compose-multiplatform-resources">マルチプラットフォームリソースライブラリ</a>への移行を検討してください。 JavaリソースをCompose Multiplatformで使用することはできますが、生成されたアクセサー、マルチモジュールサポート、ローカライゼーションなど、フレームワークが提供する拡張機能の恩恵を受けることはできません。</p><p>それでもJavaリソースにアクセスする必要がある場合は、<a href="https://github.com/JetBrains/compose-multiplatform-core/pull/1457" target="_blank" rel="noreferrer">プルリクエストで提案されている実装</a>をコピーすることで、Compose Multiplatform 1.7.3にアップグレードし、可能な限りマルチプラットフォームリソースに切り替えた後でもコードが動作することを確認できます。</p><h3 id="iosネイティブ要素でのタッチ処理の新しいデフォルト動作" tabindex="-1">iOSネイティブ要素でのタッチ処理の新しいデフォルト動作 <a class="header-anchor" href="#iosネイティブ要素でのタッチ処理の新しいデフォルト動作" aria-label="Permalink to &quot;iOSネイティブ要素でのタッチ処理の新しいデフォルト動作&quot;">​</a></h3><p>1.7.3以前では、Compose Multiplatformは相互運用UIビューに着地したタッチイベントに応答できず、相互運用ビューがこれらのタッチシーケンスを完全に処理していました。</p><p>Compose Multiplatform 1.7.3では、相互運用タッチシーケンスを処理するためのより洗練されたロジックが実装されています。 デフォルトでは、最初のタッチ後に遅延が設けられるようになり、これにより親コンポーザブルがタッチシーケンスがネイティブビューとのインタラクションを意図したものかどうかを理解し、それに応じて反応するのに役立ちます。</p><p>詳細については、<a href="#ios-touch-interop">このページのiOSセクションでの説明</a>を参照するか、<a href="./compose-ios-touch">この機能のドキュメント</a>をお読みください。</p><h3 id="iosでの最小フレーム期間の無効化は必須です" tabindex="-1">iOSでの最小フレーム期間の無効化は必須です <a class="header-anchor" href="#iosでの最小フレーム期間の無効化は必須です" aria-label="Permalink to &quot;iOSでの最小フレーム期間の無効化は必須です&quot;">​</a></h3><p>開発者は、高リフレッシュレートディスプレイに関する出力される警告に気付かないことが多く、ユーザーは120Hz対応デバイスでスムーズなアニメーションを利用できませんでした。 現在、このチェックを厳密に強制しています。<code>Info.plist</code>ファイル内の<code>CADisableMinimumFrameDurationOnPhone</code>プロパティが存在しないか<code>false</code>に設定されている場合、Compose Multiplatformでビルドされたアプリはクラッシュするようになります。</p><p>この動作を無効にするには、<code>ComposeUIViewControllerConfiguration.enforceStrictPlistSanityCheck</code>プロパティを<code>false</code>に設定します。</p><h3 id="デスクトップ版のmodifier-onexternaldragは非推奨になりました" tabindex="-1">デスクトップ版のModifier.onExternalDragは非推奨になりました <a class="header-anchor" href="#デスクトップ版のmodifier-onexternaldragは非推奨になりました" aria-label="Permalink to &quot;デスクトップ版のModifier.onExternalDragは非推奨になりました&quot;">​</a></h3><p>実験的な<code>Modifier.onExternalDrag</code>および関連APIは、新しい<code>Modifier.dragAndDropTarget</code>に優先して非推奨になりました。 <code>DragData</code>インターフェースは<code>compose.ui.draganddrop</code>パッケージに移動されました。</p><p>Compose Multiplatform 1.7.0で非推奨のAPIを使用している場合、非推奨エラーに遭遇します。 1.8.0では、<code>onExternalDrag</code>モディファイアは完全に削除される予定です。</p><h2 id="クロスプラットフォーム" tabindex="-1">クロスプラットフォーム <a class="header-anchor" href="#クロスプラットフォーム" aria-label="Permalink to &quot;クロスプラットフォーム&quot;">​</a></h2><h3 id="共有要素トランジション" tabindex="-1">共有要素トランジション <a class="header-anchor" href="#共有要素トランジション" aria-label="Permalink to &quot;共有要素トランジション&quot;">​</a></h3><p>Compose Multiplatformは、一貫した要素を共有するコンポーザブル間のシームレスなトランジションのためのAPIを提供するようになりました。 これらのトランジションは、ユーザーがUIの変更の軌跡を追うのに役立つため、ナビゲーションでよく利用されます。</p><p>APIの詳細については、<a href="https://developer.android.com/develop/ui/compose/animation/shared-elements" target="_blank" rel="noreferrer">Jetpack Composeドキュメント</a>を参照してください。</p><h3 id="型安全なナビゲーション" tabindex="-1">型安全なナビゲーション <a class="header-anchor" href="#型安全なナビゲーション" aria-label="Permalink to &quot;型安全なナビゲーション&quot;">​</a></h3><p>Compose Multiplatformは、Jetpack Composeの型安全なアプローチを採用し、ナビゲーションルートに沿ってオブジェクトを渡すようになりました。 Navigation 2.8.0の新しいAPIにより、Composeはナビゲーショングラフのコンパイル時の安全性を確保できるようになります。 これらのAPIは、XMLベースのナビゲーションにおける<a href="https://developer.android.com/guide/navigation/use-graph/pass-data#Safe-args" target="_blank" rel="noreferrer">Safe Args</a>プラグインと同じ結果を実現します。</p><p>詳細は、<a href="https://developer.android.com/guide/navigation/design/type-safety" target="_blank" rel="noreferrer">GoogleのNavigation Composeにおける型安全性に関するドキュメント</a>を参照してください。</p><h3 id="マルチプラットフォームリソース" tabindex="-1">マルチプラットフォームリソース <a class="header-anchor" href="#マルチプラットフォームリソース" aria-label="Permalink to &quot;マルチプラットフォームリソース&quot;">​</a></h3><h4 id="androidアセットにパッケージ化されたリソース" tabindex="-1">Androidアセットにパッケージ化されたリソース <a class="header-anchor" href="#androidアセットにパッケージ化されたリソース" aria-label="Permalink to &quot;Androidアセットにパッケージ化されたリソース&quot;">​</a></h4><p>すべてのマルチプラットフォームリソースがAndroidアセットにパッケージ化されるようになりました。これにより、Android StudioでAndroidソースセット内のCompose Multiplatformコンポーザブルのプレビューを生成できます。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Android StudioのプレビューはAndroidソースセット内のコンポーザブルでのみ利用可能です。 また、最新バージョンのAGP (8.5.2、8.6.0-rc01、または8.7.0-alpha04) のいずれかが必要です。</p></div><p>これにより、Android上のWebViewやメディアプレーヤーコンポーネントからマルチプラットフォームリソースに直接アクセスできるようになりました。 例えば、<code>Res.getUri(“files/index.html”)</code>のようなシンプルなパスでリソースにアクセスできます。</p><p>以下は、リソースHTMLページとリソース画像へのリンクを表示するAndroidコンポーザブルの例です。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// androidMain/kotlin/com/example/webview/App.kt</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalResourceApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Composable</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Preview</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    MaterialTheme</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uri </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getUri</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;files/webview/index.html&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Adding a WebView inside AndroidView with layout as full screen.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        AndroidView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(factory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            WebView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(it).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                layoutParams </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ViewGroup.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LayoutParams</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    ViewGroup.LayoutParams.MATCH_PARENT,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    ViewGroup.LayoutParams.MATCH_PARENT</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }, update </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">loadUrl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(uri)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>この例は、以下のシンプルなHTMLファイルで動作します。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">header</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Cat Resource</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">header</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">img</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cat.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>この例の2つのリソースファイルは、<code>commonMain</code>ソースセットに配置されています。</p><p><img src="`+i+`" alt="composeResourcesディレクトリのファイル構造" width="230"></p><h4 id="カスタムリソースディレクトリ" tabindex="-1">カスタムリソースディレクトリ <a class="header-anchor" href="#カスタムリソースディレクトリ" aria-label="Permalink to &quot;カスタムリソースディレクトリ&quot;">​</a></h4><p>新しい<code>customDirectory</code>設定を構成DSLで使用すると、特定のソースセットに<a href="./compose-multiplatform-resources-setup#custom-resource-directories">カスタムディレクトリを関連付ける</a>ことができます。これにより、例えば、ダウンロードしたファイルをリソースとして使用することが可能になります。</p><h4 id="マルチプラットフォームフォントキャッシュ" tabindex="-1">マルチプラットフォームフォントキャッシュ <a class="header-anchor" href="#マルチプラットフォームフォントキャッシュ" aria-label="Permalink to &quot;マルチプラットフォームフォントキャッシュ&quot;">​</a></h4><p>Compose Multiplatformは、Androidのフォントキャッシュ機能を他のプラットフォームにも提供し、<code>Font</code>リソースの過剰なバイト読み取りを排除します。</p><h4 id="マルチプラットフォームテストリソースのサポート" tabindex="-1">マルチプラットフォームテストリソースのサポート <a class="header-anchor" href="#マルチプラットフォームテストリソースのサポート" aria-label="Permalink to &quot;マルチプラットフォームテストリソースのサポート&quot;">​</a></h4><p>リソースライブラリは、プロジェクトでのテストリソースの使用をサポートするようになり、以下のことが可能になります。</p><ul><li>テストソースセットにリソースを追加する。</li><li>対応するソースセットでのみ利用可能な生成されたアクセサーを使用する。</li><li>テスト実行時のみ、テストリソースをアプリにパッケージ化する。</li></ul><h4 id="アクセスを容易にするために文字列idにマッピングされたリソース" tabindex="-1">アクセスを容易にするために文字列IDにマッピングされたリソース <a class="header-anchor" href="#アクセスを容易にするために文字列idにマッピングされたリソース" aria-label="Permalink to &quot;アクセスを容易にするために文字列IDにマッピングされたリソース&quot;">​</a></h4><p>各タイプのリソースは、ファイル名とマッピングされています。例えば、<code>Res.allDrawableResources</code>プロパティを使用して、すべての<code>drawable</code>リソースのマップを取得し、その文字列IDを渡すことで必要なリソースにアクセスできます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">painterResource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Res.allDrawableResources[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;compose_multiplatform&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h4 id="バイト配列をimagebitmapまたはimagevectorに変換する関数" tabindex="-1">バイト配列をImageBitmapまたはImageVectorに変換する関数 <a class="header-anchor" href="#バイト配列をimagebitmapまたはimagevectorに変換する関数" aria-label="Permalink to &quot;バイト配列をImageBitmapまたはImageVectorに変換する関数&quot;">​</a></h4><p><code>ByteArray</code>を画像リソースに変換するための新しい関数が追加されました。</p><ul><li><code>decodeToImageBitmap()</code>は、JPEG、PNG、BMP、またはWEBPファイルを<code>ImageBitmap</code>オブジェクトに変換します。</li><li><code>decodeToImageVector()</code>は、XMLベクターファイルを<code>ImageVector</code>オブジェクトに変換します。</li><li><code>decodeToSvgPainter()</code>は、SVGファイルを<code>Painter</code>オブジェクトに変換します。この関数はAndroidでは利用できません。</li></ul><p>詳細については、<a href="./compose-multiplatform-resources-usage#convert-byte-arrays-into-images">ドキュメント</a>を参照してください。</p><h3 id="新しい共通モジュール" tabindex="-1">新しい共通モジュール <a class="header-anchor" href="#新しい共通モジュール" aria-label="Permalink to &quot;新しい共通モジュール&quot;">​</a></h3><h4 id="material3-adaptive-adaptive" tabindex="-1">material3.adaptive:adaptive* <a class="header-anchor" href="#material3-adaptive-adaptive" aria-label="Permalink to &quot;material3.adaptive:adaptive*&quot;">​</a></h4><p>Material3アダプティブモジュールが、Compose Multiplatformで共通コードとして利用可能になりました。 これらを使用するには、モジュールの<code>build.gradle.kts</code>ファイルで、対応する依存関係を<code>commonMain</code>ソースセットに明示的に追加します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">commonMain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.compose.material3.adaptive:adaptive:1.0.0-alpha03&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.compose.material3.adaptive:adaptive-layout:1.0.0-alpha03&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.compose.material3.adaptive:adaptive-navigation:1.0.0-alpha03&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="material3-material3-adaptive-navigation-suite" tabindex="-1">material3.material3-adaptive-navigation-suite <a class="header-anchor" href="#material3-material3-adaptive-navigation-suite" aria-label="Permalink to &quot;material3.material3-adaptive-navigation-suite&quot;">​</a></h4><p>Composeで<a href="https://developer.android.com/develop/ui/compose/layouts/adaptive/build-adaptive-navigation" target="_blank" rel="noreferrer">アダプティブナビゲーションを構築</a>するために必要なMaterial3アダプティブナビゲーションスイートが、Compose Multiplatformで共通コードとして利用可能になりました。 これを使用するには、モジュールの<code>build.gradle.kts</code>ファイルで、依存関係を<code>commonMain</code>ソースセットに明示的に追加します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">commonMain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(compose.material3AdaptiveNavigationSuite)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="material3-material3-window-size-class" tabindex="-1">material3:material3-window-size-class <a class="header-anchor" href="#material3-material3-window-size-class" aria-label="Permalink to &quot;material3:material3-window-size-class&quot;">​</a></h4><p><a href="https://developer.android.com/reference/kotlin/androidx/compose/material3/windowsizeclass/package-summary" target="_blank" rel="noreferrer"><code>WindowSizeClass</code></a>クラスを使用するには、モジュールの<code>build.gradle.kts</code>ファイルで、<code>material3-window-size-class</code>依存関係を<code>commonMain</code>ソースセットに明示的に追加します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">commonMain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.compose.material3:material3-window-size-class:1.7.3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>calculateWindowSizeClass()</code>関数は、まだ共通コードでは利用できません。 ただし、プラットフォーム固有のコードでインポートして呼び出すことはできます。例:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// desktopMain/kotlin/main.kt</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> androidx.compose.material3.windowsizeclass.calculateWindowSizeClass</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> size </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> calculateWindowSizeClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><h4 id="material-navigation" tabindex="-1">material-navigation <a class="header-anchor" href="#material-navigation" aria-label="Permalink to &quot;material-navigation&quot;">​</a></h4><p><code>material-navigation</code>ライブラリは、Compose Multiplatform Navigationに加えて、共通コードで利用可能です。 これを使用するには、モジュールの<code>build.gradle.kts</code>ファイルで、以下の明示的な依存関係を<code>commonMain</code>ソースセットに追加します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">commonMain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.androidx.navigation:navigation-compose:2.8.0-alpha10&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.compose.material:material-navigation:1.7.0-beta02&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="skiaがmilestone-126にアップデートされました" tabindex="-1">SkiaがMilestone 126にアップデートされました <a class="header-anchor" href="#skiaがmilestone-126にアップデートされました" aria-label="Permalink to &quot;SkiaがMilestone 126にアップデートされました&quot;">​</a></h3><p>Compose Multiplatformが<a href="https://github.com/JetBrains/skiko" target="_blank" rel="noreferrer">Skiko</a>経由で使用しているSkiaのバージョンがMilestone 126にアップデートされました。</p><p>以前のSkiaのバージョンはMilestone 116でした。これらのバージョン間の変更点は、<a href="./https://skia.googlesource.com/skia/+/refs/heads/main/RELEASE_NOTES#milestone-126">リリースノート</a>で確認できます。</p><h3 id="graphicslayer-–-新しい描画api" tabindex="-1">GraphicsLayer – 新しい描画API <a class="header-anchor" href="#graphicslayer-–-新しい描画api" aria-label="Permalink to &quot;GraphicsLayer – 新しい描画API&quot;">​</a></h3><p>Jetpack Compose 1.7.0で追加された新しい描画レイヤーが、Compose Multiplatformでも利用可能になりました。</p><p><code>Modifier.graphicsLayer</code>とは異なり、新しい<code>GraphicsLayer</code>クラスを使用すると、Composableコンテンツをどこにでもレンダリングできます。 これは、アニメーションコンテンツが異なるシーンでレンダリングされることが期待される場合に役立ちます。</p><p>詳細な説明と例については、<a href="https://developer.android.com/reference/kotlin/androidx/compose/ui/graphics/layer/GraphicsLayer" target="_blank" rel="noreferrer">リファレンスドキュメント</a>を参照してください。</p><h3 id="locallifecycleownerがcompose-uiから移動されました" tabindex="-1">LocalLifecycleOwnerがCompose UIから移動されました <a class="header-anchor" href="#locallifecycleownerがcompose-uiから移動されました" aria-label="Permalink to &quot;LocalLifecycleOwnerがCompose UIから移動されました&quot;">​</a></h3><p><code>LocalLifecycleOwner</code>クラスが、Compose UIパッケージからLifecycleパッケージに移動されました。</p><p>この変更により、Compose UIに依存せずにクラスにアクセスし、ComposeベースのヘルパーAPIを呼び出すことができます。 ただし、Compose UIバインディングがない場合、<code>LocalLifecycleOwner</code>インスタンスにはプラットフォーム統合がなく、プラットフォーム固有のイベントをリッスンできないことに注意してください。</p><h2 id="ios" tabindex="-1">iOS <a class="header-anchor" href="#ios" aria-label="Permalink to &quot;iOS&quot;">​</a></h2><h3 id="ios-touch-interop" tabindex="-1">Compose MultiplatformとネイティブiOS間のタッチ相互運用性の改善 <a class="header-anchor" href="#ios-touch-interop" aria-label="Permalink to &quot;Compose MultiplatformとネイティブiOS間のタッチ相互運用性の改善 {id=&quot;ios-touch-interop&quot;}&quot;">​</a></h3><p>このリリースでは、iOSの相互運用ビューのタッチハンドリングが改善されました。 Compose Multiplatformは、タッチが相互運用ビューを意図しているのか、それともComposeで処理されるべきなのかを検出するようになりました。 これにより、Compose Multiplatformアプリ内のUIKitまたはSwiftUI領域で発生するタッチイベントを処理することが可能になります。</p><p>デフォルトでは、Compose Multiplatformはタッチイベントを相互運用ビューに送信するのを150ミリ秒遅延させます。</p><ul><li>この時間枠内にしきい値を超える移動があった場合、 親のコンポーザブルがタッチシーケンスをインターセプトし、相互運用ビューには転送されません。</li><li>顕著な移動がない場合、Composeはタッチシーケンスの残りを処理せず、 代わりに相互運用ビューが単独で処理します。</li></ul><p>この動作は、ネイティブの<a href="https://developer.apple.com/documentation/uikit/uiscrollview" target="_blank" rel="noreferrer"><code>UIScrollView</code></a>の動作と一致しています。 これにより、相互運用ビューで始まったタッチシーケンスが、Compose Multiplatformがそれを認識する機会もなくインターセプトされてしまう状況を防ぐことができます。これはユーザーにとって不満な体験につながる可能性があります。 例えば、レイジーリストのようなスクロール可能なコンテキストで、画面の大部分を占める大きな相互運用ビデオプレーヤーがある場合を想像してみてください。 ビデオがすべてのタッチをインターセプトし、Compose Multiplatformがそれらを認識していない場合、リストをスクロールするのは難しいでしょう。</p><h3 id="ネイティブパフォーマンスの改善" tabindex="-1">ネイティブパフォーマンスの改善 <a class="header-anchor" href="#ネイティブパフォーマンスの改善" aria-label="Permalink to &quot;ネイティブパフォーマンスの改善&quot;">​</a></h3><p>Kotlin 2.0.20では、Kotlin/NativeチームはiOSでのComposeアプリのパフォーマンスをより速く、よりスムーズにするために大きな進歩を遂げました。 Compose Multiplatform 1.7.3リリースでは、これらの最適化に加え、Jetpack Compose 1.7.0からのパフォーマンス改善も取り入れられています。</p><p>Kotlin 2.0.0と組み合わせたCompose Multiplatform 1.6.11と、Kotlin 2.0.20と組み合わせたCompose Multiplatform 1.7.3を比較すると、全体的に良い結果が見られます。</p><ul><li><em>LazyGrid</em>ベンチマークは、実際の使用例に最も近い<code>LazyVerticalGrid</code>のスクロールをシミュレートし、平均して**約9%**高速に実行されます。 また、UIの応答性が低いとユーザーに感じさせる原因となるフレーム落ちの数も大幅に減少しています。 ぜひご自身でお試しください。Compose MultiplatformでiOS向けに作成されたアプリは、はるかにスムーズに感じるはずです。</li><li><em>VisualEffects</em>ベンチマークは、多数のランダムに配置されたコンポーネントをレンダリングし、<strong>3.6倍</strong>高速に動作します。 1000フレームあたりの平均CPU時間は8.8秒から2.4秒に短縮されました。</li><li><em>AnimatedVisibility</em>コンポーザブルは、画像の表示と非表示をアニメーション化し、**約6%**高速なレンダリングを示します。</li></ul><p>さらに、Kotlin 2.0.20では、ガベージコレクターに実験的な<a href="https://kotlinlang.org/docs/whatsnew2020.html#concurrent-marking-in-garbage-collector" target="_blank" rel="noreferrer">並行マーキングのサポート</a>が導入されました。並行マーキングを有効にすると、ガベージコレクターの一時停止が短縮され、すべてのベンチマークでさらに大きな改善につながります。</p><p>これらのCompose固有のベンチマークのコードは、Compose Multiplatformリポジトリで確認できます。</p><ul><li><a href="https://github.com/JetBrains/compose-multiplatform/tree/master/benchmarks/kn-performance" target="_blank" rel="noreferrer">Kotlin/Nativeパフォーマンスベンチマーク</a></li><li><a href="https://github.com/JetBrains/compose-multiplatform/tree/master/benchmarks/ios/jvm-vs-kotlin-native" target="_blank" rel="noreferrer">Kotlin/JVM対Kotlin/Nativeベンチマーク</a></li></ul><h2 id="デスクトップ" tabindex="-1">デスクトップ <a class="header-anchor" href="#デスクトップ" aria-label="Permalink to &quot;デスクトップ&quot;">​</a></h2><h3 id="ドラッグ-ドロップ" tabindex="-1">ドラッグ＆ドロップ <a class="header-anchor" href="#ドラッグ-ドロップ" aria-label="Permalink to &quot;ドラッグ＆ドロップ&quot;">​</a></h3><p>ユーザーがコンテンツをComposeアプリケーションにドラッグしたり、アプリケーションからドラッグしたりできるようにするドラッグ＆ドロップメカニズムが、デスクトップ版のCompose Multiplatformに実装されました。 ドラッグ＆ドロップの潜在的なソースと宛先を指定するには、<code>dragAndDropSource</code>および<code>dragAndDropTarget</code>修飾子を使用します。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>これらの修飾子は共通コードで利用可能ですが、現在はデスクトップおよびAndroidソースセットでのみ動作します。 今後のリリースにご期待ください。</p></div><p>一般的な使用例については、Jetpack Composeドキュメントの<a href="https://developer.android.com/develop/ui/compose/touch-input/user-interactions/drag-and-drop" target="_blank" rel="noreferrer">専用記事</a>を参照してください。</p><h3 id="basictextfield-basictextfield2から名称変更-がデスクトップに採用されました" tabindex="-1">BasicTextField（BasicTextField2から名称変更）がデスクトップに採用されました <a class="header-anchor" href="#basictextfield-basictextfield2から名称変更-がデスクトップに採用されました" aria-label="Permalink to &quot;BasicTextField（BasicTextField2から名称変更）がデスクトップに採用されました&quot;">​</a></h3><p>Jetpack Composeは<code>BasicTextField2</code>コンポーネントを安定化させ、<code>BasicTextField</code>に名称変更しました。 このリリースでは、Compose Multiplatformがデスクトップターゲット向けにこの変更を採用しており、安定版1.7.0ではiOSもカバーする計画です。</p><p>新しい<code>BasicTextField</code>は以下の機能を提供します。</p><ul><li>状態をより確実に管理できます。</li><li>テキストフィールドのコンテンツをプログラムで変更するための新しい<code>TextFieldBuffer</code> APIを提供します。</li><li>視覚的な変換とスタイリングのためのいくつかの新しいAPIが含まれています。</li><li>フィールドの以前の状態に戻る機能を持つ<code>UndoState</code>へのアクセスを提供します。</li></ul><h3 id="composepanelのレンダー設定" tabindex="-1">ComposePanelのレンダー設定 <a class="header-anchor" href="#composepanelのレンダー設定" aria-label="Permalink to &quot;ComposePanelのレンダー設定&quot;">​</a></h3><p><code>ComposePanel</code>コンストラクタで新しい<code>RenderSettings.isVsyncEnabled</code>パラメータを指定することで、バックエンドレンダリング実装に垂直同期を無効にするようヒントを与えることができます。 これにより、入力とUIの変更間の視覚的な遅延を減らすことができますが、テアリングが発生する可能性もあります。</p><p>デフォルトの動作は変わりません。<code>ComposePanel</code>は描画可能なプレゼンテーションをVSyncと同期しようとします。</p><h2 id="web" tabindex="-1">Web <a class="header-anchor" href="#web" aria-label="Permalink to &quot;Web&quot;">​</a></h2><h3 id="skiko-jsはkotlin-wasmアプリケーションにとって冗長になりました" tabindex="-1">skiko.jsはKotlin/Wasmアプリケーションにとって冗長になりました <a class="header-anchor" href="#skiko-jsはkotlin-wasmアプリケーションにとって冗長になりました" aria-label="Permalink to &quot;skiko.jsはKotlin/Wasmアプリケーションにとって冗長になりました&quot;">​</a></h3><p><code>skiko.js</code>ファイルは、Compose MultiplatformでビルドされたKotlin/Wasmアプリケーションにとって冗長になりました。 <code>index.html</code>ファイルから削除でき、アプリの読み込み時間を改善できます。 <code>skiko.js</code>は将来のリリースでKotlin/Wasmの配布物から完全に削除されます。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p><code>skiko.js</code>ファイルはKotlin/JSアプリケーションには依然として必要です。</p></div>`,110)]))}const g=e(o,[["render",n]]);export{E as __pageData,g as default};
