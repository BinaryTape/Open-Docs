import{_ as d,C as r,c,o as g,j as i,G as s,ag as k,a as t,w as e}from"./chunks/framework.Bksy39di.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/ktor/client-websocket-serialization.md","filePath":"zh-Hant/ktor/client-websocket-serialization.md","lastUpdated":1755457140000}'),u={name:"zh-Hant/ktor/client-websocket-serialization.md"};function E(y,a,b,v,F,_){const h=r("show-structure"),p=r("tldr"),l=r("code-block"),n=r("TabItem"),o=r("Tabs");return g(),c("div",null,[a[7]||(a[7]=i("h1",{id:"ktor-client-中的-websockets-序列化",tabindex:"-1"},[t("Ktor Client 中的 WebSockets 序列化 "),i("a",{class:"header-anchor",href:"#ktor-client-中的-websockets-序列化","aria-label":'Permalink to "Ktor Client 中的 WebSockets 序列化"'},"​")],-1)),s(h,{for:"chapter",depth:"2"}),s(p,null,{default:e(()=>a[0]||(a[0]=[i("p",null,[i("b",null,"程式碼範例"),t(": "),i("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/client-websockets-serialization"}," client-websockets-serialization ")],-1)])),_:1}),a[8]||(a[8]=k('<p>與 <a href="./client-serialization">ContentNegotiation</a> 插件（plugin）類似，WebSockets 允許您將文字幀（text frames）序列化/反序列化為特定格式。Ktor 客戶端（client）開箱即用地支援以下格式：JSON、XML、CBOR 和 ProtoBuf。</p><h2 id="add_dependencies" tabindex="-1">添加依賴項 <a class="header-anchor" href="#add_dependencies" aria-label="Permalink to &quot;添加依賴項 {id=&quot;add_dependencies&quot;}&quot;">​</a></h2><p>在使用 kotlinx.serialization 轉換器（converter）之前，您需要如 <a href="https://github.com/Kotlin/kotlinx.serialization#setup" target="_blank" rel="noreferrer">設置</a> 部分所述添加 Kotlin 序列化插件。</p><h4 id="add_json_dependency" tabindex="-1">JSON <a class="header-anchor" href="#add_json_dependency" aria-label="Permalink to &quot;JSON {id=&quot;add_json_dependency&quot;}&quot;">​</a></h4><p>要序列化/反序列化 JSON 數據，您可以選擇以下函式庫（library）之一：kotlinx.serialization、Gson 或 Jackson。</p>',5)),s(o,{group:"json-libraries"},{default:e(()=>[s(n,{title:"kotlinx.serialization","group-key":"kotlinx"},{default:e(()=>[a[1]||(a[1]=i("p",null,[t("在建構腳本（build script）中添加 "),i("code",null,"ktor-serialization-kotlinx-json"),t(" 構件（artifact）：")],-1)),s(o,{group:"languages"},{default:e(()=>[s(n,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:e(()=>[s(l,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-serialization-kotlinx-json:$ktor_version")'})]),_:1}),s(n,{title:"Gradle (Groovy)","group-key":"groovy"},{default:e(()=>[s(l,{lang:"Groovy",code:'            implementation "io.ktor:ktor-serialization-kotlinx-json:$ktor_version"'})]),_:1}),s(n,{title:"Maven","group-key":"maven"},{default:e(()=>[s(l,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-serialization-kotlinx-json-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1})]),_:1}),s(n,{title:"Gson","group-key":"gson"},{default:e(()=>[a[2]||(a[2]=i("p",null,[t("在建構腳本中添加 "),i("code",null,"ktor-serialization-gson"),t(" 構件：")],-1)),s(o,{group:"languages"},{default:e(()=>[s(n,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:e(()=>[s(l,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-serialization-gson:$ktor_version")'})]),_:1}),s(n,{title:"Gradle (Groovy)","group-key":"groovy"},{default:e(()=>[s(l,{lang:"Groovy",code:'            implementation "io.ktor:ktor-serialization-gson:$ktor_version"'})]),_:1}),s(n,{title:"Maven","group-key":"maven"},{default:e(()=>[s(l,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-serialization-gson-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1})]),_:1}),s(n,{title:"Jackson","group-key":"jackson"},{default:e(()=>[a[3]||(a[3]=i("p",null,[t("在建構腳本中添加 "),i("code",null,"ktor-serialization-jackson"),t(" 構件：")],-1)),s(o,{group:"languages"},{default:e(()=>[s(n,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:e(()=>[s(l,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-serialization-jackson:$ktor_version")'})]),_:1}),s(n,{title:"Gradle (Groovy)","group-key":"groovy"},{default:e(()=>[s(l,{lang:"Groovy",code:'            implementation "io.ktor:ktor-serialization-jackson:$ktor_version"'})]),_:1}),s(n,{title:"Maven","group-key":"maven"},{default:e(()=>[s(l,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-serialization-jackson-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1})]),_:1})]),_:1}),a[9]||(a[9]=i("h4",{id:"add_xml_dependency",tabindex:"-1"},[t("XML "),i("a",{class:"header-anchor",href:"#add_xml_dependency","aria-label":'Permalink to "XML {id="add_xml_dependency"}"'},"​")],-1)),a[10]||(a[10]=i("p",null,[t("要序列化/反序列化 XML，請在建構腳本中添加 "),i("code",null,"ktor-serialization-kotlinx-xml"),t("：")],-1)),s(o,{group:"languages"},{default:e(()=>[s(n,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:e(()=>[s(l,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-serialization-kotlinx-xml:$ktor_version")'})]),_:1}),s(n,{title:"Gradle (Groovy)","group-key":"groovy"},{default:e(()=>[s(l,{lang:"Groovy",code:'            implementation "io.ktor:ktor-serialization-kotlinx-xml:$ktor_version"'})]),_:1}),s(n,{title:"Maven","group-key":"maven"},{default:e(()=>[s(l,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-serialization-kotlinx-xml-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),a[11]||(a[11]=k('<div class="note custom-block"><p class="custom-block-title">NOTE</p><p>注意，XML 序列化 <a href="https://github.com/pdvrieze/xmlutil/issues/83" target="_blank" rel="noreferrer">在 <code>jsNode</code> 目標上不受支援</a>。</p></div><h4 id="add_cbor_dependency" tabindex="-1">CBOR <a class="header-anchor" href="#add_cbor_dependency" aria-label="Permalink to &quot;CBOR {id=&quot;add_cbor_dependency&quot;}&quot;">​</a></h4><p>要序列化/反序列化 CBOR，請在建構腳本中添加 <code>ktor-serialization-kotlinx-cbor</code>：</p>',3)),s(o,{group:"languages"},{default:e(()=>[s(n,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:e(()=>[s(l,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-serialization-kotlinx-cbor:$ktor_version")'})]),_:1}),s(n,{title:"Gradle (Groovy)","group-key":"groovy"},{default:e(()=>[s(l,{lang:"Groovy",code:'            implementation "io.ktor:ktor-serialization-kotlinx-cbor:$ktor_version"'})]),_:1}),s(n,{title:"Maven","group-key":"maven"},{default:e(()=>[s(l,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-serialization-kotlinx-cbor-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),a[12]||(a[12]=i("h4",{id:"add_protobuf_dependency",tabindex:"-1"},[t("ProtoBuf "),i("a",{class:"header-anchor",href:"#add_protobuf_dependency","aria-label":'Permalink to "ProtoBuf {id="add_protobuf_dependency"}"'},"​")],-1)),a[13]||(a[13]=i("p",null,[t("要序列化/反序列化 ProtoBuf，請在建構腳本中添加 "),i("code",null,"ktor-serialization-kotlinx-protobuf"),t("：")],-1)),s(o,{group:"languages"},{default:e(()=>[s(n,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:e(()=>[s(l,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-serialization-kotlinx-protobuf:$ktor_version")'})]),_:1}),s(n,{title:"Gradle (Groovy)","group-key":"groovy"},{default:e(()=>[s(l,{lang:"Groovy",code:'            implementation "io.ktor:ktor-serialization-kotlinx-protobuf:$ktor_version"'})]),_:1}),s(n,{title:"Maven","group-key":"maven"},{default:e(()=>[s(l,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-serialization-kotlinx-protobuf-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),a[14]||(a[14]=i("h2",{id:"configure_serializer",tabindex:"-1"},[t("配置序列化器 "),i("a",{class:"header-anchor",href:"#configure_serializer","aria-label":'Permalink to "配置序列化器 {id="configure_serializer"}"'},"​")],-1)),a[15]||(a[15]=i("h3",{id:"register_json",tabindex:"-1"},[t("JSON 序列化器 "),i("a",{class:"header-anchor",href:"#register_json","aria-label":'Permalink to "JSON 序列化器 {id="register_json"}"'},"​")],-1)),s(o,{group:"json-libraries"},{default:e(()=>[s(n,{title:"kotlinx.serialization","group-key":"kotlinx"},{default:e(()=>a[4]||(a[4]=[i("p",null,[t("要在 WebSockets "),i("a",{href:"./client-websockets#install_plugin"},"配置"),t(" 中註冊 JSON 序列化器，請使用 "),i("code",null,"Json"),t(" 參數建立一個 "),i("code",null,"KotlinxWebsocketSerializationConverter"),t(" 實例（instance），並將此實例分配給 "),i("code",null,"contentConverter"),t(" 屬性（property）：")],-1),i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," io.ktor.serialization.kotlinx."),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"*")]),t(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," kotlinx.serialization.json."),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"*")]),t(`
`),i("span",{class:"line"}),t(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"val"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," client "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," HttpClient"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(CIO) {")]),t(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    install"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(WebSockets) {")]),t(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        contentConverter "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," KotlinxWebsocketSerializationConverter"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(Json)")]),t(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),t(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),s(n,{title:"Gson","group-key":"gson"},{default:e(()=>a[5]||(a[5]=[i("p",null,[t("要註冊 Gson 序列化器，請將 "),i("code",null,"GsonWebsocketContentConverter"),t(" 分配給 "),i("code",null,"contentConverter"),t(" 屬性：")],-1),i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," io.ktor.serialization.gson."),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"*")]),t(`
`),i("span",{class:"line"}),t(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"install"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(WebSockets) {")]),t(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    contentConverter "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," GsonWebsocketContentConverter"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),t(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),s(n,{title:"Jackson","group-key":"jackson"},{default:e(()=>a[6]||(a[6]=[i("p",null,[t("要註冊 Jackson 序列化器，請將 "),i("code",null,"JacksonWebsocketContentConverter"),t(" 分配給 "),i("code",null,"contentConverter"),t(" 屬性：")],-1),i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," io.ktor.serialization.jackson."),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"*")]),t(`
`),i("span",{class:"line"}),t(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"install"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(WebSockets) {")]),t(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    contentConverter "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," JacksonWebsocketContentConverter"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),t(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),a[16]||(a[16]=k(`<h3 id="register_xml" tabindex="-1">XML 序列化器 <a class="header-anchor" href="#register_xml" aria-label="Permalink to &quot;XML 序列化器 {id=&quot;register_xml&quot;}&quot;">​</a></h3><p>要在 WebSockets <a href="./client-websockets#install_plugin">配置</a> 中註冊 XML 序列化器，請使用 <code>XML</code> 參數建立一個 <code>KotlinxWebsocketSerializationConverter</code> 實例，並將此實例分配給 <code>contentConverter</code> 屬性：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> nl.adaptivity.xmlutil.serialization.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(WebSockets) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    contentConverter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> KotlinxWebsocketSerializationConverter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(XML)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="register_cbor" tabindex="-1">CBOR 序列化器 <a class="header-anchor" href="#register_cbor" aria-label="Permalink to &quot;CBOR 序列化器 {id=&quot;register_cbor&quot;}&quot;">​</a></h3><p>要在 WebSockets <a href="./client-websockets#install_plugin">配置</a> 中註冊 CBOR 序列化器，請使用 <code>Cbor</code> 參數建立一個 <code>KotlinxWebsocketSerializationConverter</code> 實例，並將此實例分配給 <code>contentConverter</code> 屬性：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.serialization.kotlinx.cbor.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(WebSockets) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    contentConverter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> KotlinxWebsocketSerializationConverter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Cbor)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="register_protobuf" tabindex="-1">ProtoBuf 序列化器 <a class="header-anchor" href="#register_protobuf" aria-label="Permalink to &quot;ProtoBuf 序列化器 {id=&quot;register_protobuf&quot;}&quot;">​</a></h3><p>要在 WebSockets <a href="./client-websockets#install_plugin">配置</a> 中註冊 ProtoBuf 序列化器，請使用 <code>ProtoBuf</code> 參數建立一個 <code>KotlinxWebsocketSerializationConverter</code> 實例，並將此實例分配給 <code>contentConverter</code> 屬性：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.serialization.kotlinx.protobuf.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(WebSockets) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    contentConverter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> KotlinxWebsocketSerializationConverter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ProtoBuf)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="receive_send_data" tabindex="-1">接收和發送數據 <a class="header-anchor" href="#receive_send_data" aria-label="Permalink to &quot;接收和發送數據 {id=&quot;receive_send_data&quot;}&quot;">​</a></h2><h3 id="create_data_class" tabindex="-1">建立資料類別 <a class="header-anchor" href="#create_data_class" aria-label="Permalink to &quot;建立資料類別 {id=&quot;create_data_class&quot;}&quot;">​</a></h3><p>要將文字幀序列化為物件（object）或從物件反序列化，您需要建立一個資料類別（data class），例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Customer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> firstName: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lastName: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>如果您使用 kotlinx.serialization，請確保此類別具有 <code>@Serializable</code> 註解（annotation）：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Serializable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Customer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> firstName: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lastName: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>要了解有關 <code>kotlinx.serialization</code> 的更多資訊，請參閱 <a href="./https://github.com/Kotlin/kotlinx.serialization/blob/master/docs/serialization-guide">Kotlin Serialization Guide</a>。</p><h3 id="send_data" tabindex="-1">發送數據 <a class="header-anchor" href="#send_data" aria-label="Permalink to &quot;發送數據 {id=&quot;send_data&quot;}&quot;">​</a></h3><p>要在文字幀中以<a href="#configure_serializer">指定格式</a> 發送<a href="#create_data_class">類別實例</a>，請使用 <code>sendSerialized</code> 函式（function）：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">webSocket</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(method </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HttpMethod.Get, host </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;127.0.0.1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, port </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8080</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/customer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sendSerialized</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Customer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Jane&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Smith&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="receive_data" tabindex="-1">接收數據 <a class="header-anchor" href="#receive_data" aria-label="Permalink to &quot;接收數據 {id=&quot;receive_data&quot;}&quot;">​</a></h3><p>要接收並轉換文字幀的內容，請呼叫 <code>receiveDeserialized</code> 函式，它接受一個資料類別作為參數（parameter）：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">webSocket</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(method </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HttpMethod.Get, host </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;127.0.0.1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, port </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8080</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/customer/1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> customer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> receiveDeserialized</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Customer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;A customer with id \${customer.id} is received by the client.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>要從 <a href="./client-websockets#incoming">傳入通道（incoming channel）</a> 接收反序列化的幀，請使用 <a href="https://api.ktor.io/ktor-shared/ktor-serialization/io.ktor.serialization/-websocket-content-converter/deserialize.html" target="_blank" rel="noreferrer">WebsocketContentConverter.deserialize</a> 函式。<code>WebsocketContentConverter</code> 可透過 <code>DefaultClientWebSocketSession.converter</code> 屬性取得。</p><blockquote><p>您可以在此處找到完整的範例：<a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/client-websockets-serialization" target="_blank" rel="noreferrer">client-websockets-serialization</a>。</p></blockquote>`,24))])}const f=d(u,[["render",E]]);export{m as __pageData,f as default};
