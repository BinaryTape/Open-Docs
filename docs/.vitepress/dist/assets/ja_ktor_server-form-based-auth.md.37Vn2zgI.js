import{_ as E,C as t,c,o as u,j as i,G as a,ag as h,a as e,w as n}from"./chunks/framework.Bksy39di.js";const _=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ja/ktor/server-form-based-auth.md","filePath":"ja/ktor/server-form-based-auth.md","lastUpdated":1755457140000}'),g={name:"ja/ktor/server-form-based-auth.md"};function y(m,s,F,v,f,b){const p=t("show-structure"),o=t("Links"),k=t("tldr"),l=t("code-block"),r=t("TabItem"),d=t("Tabs");return u(),c("div",null,[s[5]||(s[5]=i("h1",{id:"ktorサーバーでのフォームベース認証",tabindex:"-1"},[e("Ktorサーバーでのフォームベース認証 "),i("a",{class:"header-anchor",href:"#ktorサーバーでのフォームベース認証","aria-label":'Permalink to "Ktorサーバーでのフォームベース認証"'},"​")],-1)),a(p,{for:"chapter",depth:"2"}),a(k,null,{default:n(()=>[s[3]||(s[3]=i("p",null,[i("b",null,"必要な依存関係"),e(": "),i("code",null,"io.ktor:ktor-server-auth")],-1)),s[4]||(s[4]=i("p",null,[i("b",null,"コード例"),e(": "),i("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/auth-form-html-dsl"},"auth-form-html-dsl"),e(", "),i("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/auth-form-session"},"auth-form-session")],-1)),i("p",null,[i("b",null,[a(o,{href:"/ktor/server-native",summary:"KtorはKotlin/Nativeをサポートしており、追加のランタイムや仮想マシンなしでサーバーを実行できます。"},{default:n(()=>s[0]||(s[0]=[e("ネイティブサーバー")])),_:1}),s[1]||(s[1]=e("のサポート"))]),s[2]||(s[2]=e(": ✅ "))])]),_:1}),s[6]||(s[6]=h('<p>フォームベース認証は、<a href="https://developer.mozilla.org/en-US/docs/Learn/Forms" target="_blank" rel="noreferrer">Webフォーム</a>を使用して資格情報（クレデンシャル情報）を収集し、ユーザーを認証します。 KtorでWebフォームを作成するには、<a href="./server-html-dsl#html_response">HTML DSL</a>を使用するか、FreeMarker、VelocityなどのJVM<a href="./server-templating">テンプレートエンジン</a>から選択できます。</p><blockquote><p>フォームベース認証を使用するとユーザー名とパスワードがクリアテキストで渡されるため、機密情報を保護するために<a href="./server-ssl">HTTPS/TLS</a>を使用する必要があります。</p></blockquote><h2 id="add_dependencies" tabindex="-1">依存関係の追加 <a class="header-anchor" href="#add_dependencies" aria-label="Permalink to &quot;依存関係の追加 {id=&quot;add_dependencies&quot;}&quot;">​</a></h2><p><code>form</code>認証を有効にするには、ビルドスクリプトに<code>ktor-server-auth</code>アーティファクトを含める必要があります。</p>',4)),a(d,{group:"languages"},{default:n(()=>[a(r,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[a(l,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-server-auth:$ktor_version")'})]),_:1}),a(r,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[a(l,{lang:"Groovy",code:'            implementation "io.ktor:ktor-server-auth:$ktor_version"'})]),_:1}),a(r,{title:"Maven","group-key":"maven"},{default:n(()=>[a(l,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-server-auth-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),s[7]||(s[7]=h(`<h2 id="flow" tabindex="-1">フォームベース認証のフロー <a class="header-anchor" href="#flow" aria-label="Permalink to &quot;フォームベース認証のフロー {id=&quot;flow&quot;}&quot;">​</a></h2><p>フォームベース認証のフローは次のようになります。</p><ol><li>未認証のクライアントが、サーバーアプリケーション内の特定の<a href="./server-routing">ルート</a>にリクエストを行います。</li><li>サーバーは、少なくともHTMLベースのWebフォームで構成されるHTMLページを返します。このフォームは、ユーザーにユーザー名とパスワードを要求します。 <blockquote><p>Ktorでは、<a href="./server-html-dsl">Kotlin DSL</a>を使用してフォームを構築できます。また、FreeMarker、VelocityなどのさまざまなJVMテンプレートエンジンから選択することもできます。</p></blockquote></li><li>ユーザーがユーザー名とパスワードを送信すると、クライアントはWebフォームデータ（ユーザー名とパスワードを含む）を含むリクエストをサーバーに行います。</li></ol><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">POST http:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//localhost:8080/login</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Content</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Type: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">application</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">www</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">form</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">urlencoded</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">username</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">jetbrains&amp;password</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">foobar</span></span></code></pre></div><p>Ktorでは、ユーザー名とパスワードの取得に使用する<a href="#configure-provider">パラメーター名を指定</a>する必要があります。</p><ol start="4"><li>サーバーはクライアントから送信された資格情報（クレデンシャル）を<a href="#configure-provider">検証</a>し、要求されたコンテンツで応答します。</li></ol><h2 id="install" tabindex="-1">フォーム認証のインストール <a class="header-anchor" href="#install" aria-label="Permalink to &quot;フォーム認証のインストール {id=&quot;install&quot;}&quot;">​</a></h2><p><code>form</code>認証プロバイダーをインストールするには、<code>install</code>ブロック内で<a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/form.html" target="_blank" rel="noreferrer">form</a>関数を呼び出します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.application.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.auth.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Authentication) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    form</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Configure form authentication</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>オプションで、<a href="#authenticate-route">指定されたルートを認証</a>するために使用できる<a href="./server-auth#provider-name">プロバイダー名</a>を指定できます。</p><h2 id="configure" tabindex="-1">フォーム認証の設定 <a class="header-anchor" href="#configure" aria-label="Permalink to &quot;フォーム認証の設定 {id=&quot;configure&quot;}&quot;">​</a></h2><h3 id="configure-provider" tabindex="-1">ステップ1: フォームプロバイダーの設定 <a class="header-anchor" href="#configure-provider" aria-label="Permalink to &quot;ステップ1: フォームプロバイダーの設定 {id=&quot;configure-provider&quot;}&quot;">​</a></h3><p><code>form</code>認証プロバイダーは、<a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-form-authentication-provider/-config/index.html" target="_blank" rel="noreferrer">FormAuthenticationProvider.Config</a>クラスを介してその設定を公開します。以下の例では、次の設定が指定されています。</p><ul><li><code>userParamName</code>プロパティと<code>passwordParamName</code>プロパティは、ユーザー名とパスワードの取得に使用されるパラメーター名を指定します。</li><li><code>validate</code>関数は、ユーザー名とパスワードを検証します。 <code>validate</code>関数は<code>UserPasswordCredential</code>をチェックし、認証が成功した場合は<code>UserIdPrincipal</code>を返し、認証が失敗した場合は<code>null</code>を返します。</li><li><code>challenge</code>関数は、認証が失敗した場合に実行されるアクションを指定します。例えば、ログインページにリダイレクトするか、<a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-unauthorized-response/index.html" target="_blank" rel="noreferrer">UnauthorizedResponse</a>を送信できます。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Authentication) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    form</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-form&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        userParamName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;username&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        passwordParamName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;password&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        validate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { credentials </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (credentials.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;jetbrains&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> credentials.password </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;foobar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                UserIdPrincipal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(credentials.name)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        challenge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respond</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpStatusCode.Unauthorized, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Credentials are not valid&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p><code>basic</code>認証と同様に、<a href="./server-basic-auth#validate-user-hash">UserHashedTableAuth</a>を使用して、ユーザー名とパスワードのハッシュを保持するインメモリテーブルに保存されているユーザーを検証することもできます。</p></blockquote><h3 id="authenticate-route" tabindex="-1">ステップ2: 特定のリソースの保護 <a class="header-anchor" href="#authenticate-route" aria-label="Permalink to &quot;ステップ2: 特定のリソースの保護 {id=&quot;authenticate-route&quot;}&quot;">​</a></h3><p><code>form</code>プロバイダーを設定した後、データが送信される<code>post</code>ルートを定義する必要があります。 次に、このルートを**<a href="./server-auth#authenticate-route">authenticate</a>**関数内に追加します。 認証が成功した場合、ルートハンドラー内で<code>call.principal</code>関数を使用して認証された<a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-user-id-principal/index.html" target="_blank" rel="noreferrer">UserIdPrincipal</a>を取得し、認証されたユーザーの名前を取得できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    authenticate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-form&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/login&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, \${call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">principal</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserIdPrincipal</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&gt;()?.name}!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>ログインしたユーザーのIDを保存するには、<a href="./server-session-auth">セッション認証</a>を使用できます。 例えば、ユーザーがWebフォームを使用して初めてログインするときに、ユーザー名をクッキーセッションに保存し、その後のリクエストで<code>session</code>プロバイダーを使用してそのユーザーを認証できます。</p>`,20))])}const q=E(g,[["render",y]]);export{_ as __pageData,q as default};
