import{_ as i,a,b as t}from"./chunks/browser-console-output.ORKOEfuB.js";import{_ as l,c as n,o as e,ag as p}from"./chunks/framework.Bksy39di.js";const u=JSON.parse('{"title":"运行 Kotlin/JS","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/running-kotlin-js.md","filePath":"kotlin/running-kotlin-js.md","lastUpdated":1754307826000}'),h={name:"kotlin/running-kotlin-js.md"};function k(d,s,o,r,E,g){return e(),n("div",null,s[0]||(s[0]=[p(`<h1 id="运行-kotlin-js" tabindex="-1">运行 Kotlin/JS <a class="header-anchor" href="#运行-kotlin-js" aria-label="Permalink to &quot;运行 Kotlin/JS&quot;">​</a></h1><p>由于 Kotlin/JS 项目由 Kotlin Multiplatform Gradle 插件管理，因此您可以使用相应的任务来运行项目。如果您正在从一个空白项目开始，请确保您有一些示例代码可供执行。 创建文件 <code>src/jsMain/kotlin/App.kt</code> 并用一个小的“Hello, World”类型的代码片段填充它：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, Kotlin/JS!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>根据目标平台的不同，首次运行代码可能需要一些平台特有的额外设置。</p><h2 id="运行-node-js-目标平台" tabindex="-1">运行 Node.js 目标平台 <a class="header-anchor" href="#运行-node-js-目标平台" aria-label="Permalink to &quot;运行 Node.js 目标平台&quot;">​</a></h2><p>当使用 Kotlin/JS 针对 Node.js 时，您只需执行 <code>jsNodeDevelopmentRun</code> Gradle 任务。例如，这可以通过命令行使用 Gradle wrapper 来完成：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jsNodeDevelopmentRun</span></span></code></pre></div><p>如果您正在使用 IntelliJ IDEA，可以在 Gradle 工具窗口中找到 <code>jsNodeDevelopmentRun</code> 操作：</p><p><img src="`+i+'" alt="IntelliJ IDEA 中的 Gradle 运行任务" width="700"></p><p>首次启动时，<code>kotlin.multiplatform</code> Gradle 插件将下载所有必要的依赖项，以便让您正常运行。 构建完成后，程序将执行，您可以在终端中看到日志输出：</p><p><img src="'+a+`" alt="在 IntelliJ IDEA 中执行 Kotlin Multiplatform 项目中的 JS 目标平台" width="700"></p><h2 id="运行浏览器目标平台" tabindex="-1">运行浏览器目标平台 <a class="header-anchor" href="#运行浏览器目标平台" aria-label="Permalink to &quot;运行浏览器目标平台&quot;">​</a></h2><p>当针对浏览器时，您的项目需要一个 HTML 页面。在您开发应用程序时，该页面将由开发服务器提供服务，并且应该嵌入您的已编译 Kotlin/JS 文件。 创建并填充 HTML 文件 <code>/src/jsMain/resources/index.html</code>：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;!</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">DOCTYPE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;en&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> charset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;UTF-8&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;JS Client&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;js-tutorial.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>默认情况下，您项目生成的 artifact（通过 webpack 创建）需要被引用的名称是您的项目名称（在本例中为 <code>js-tutorial</code>）。如果您将项目命名为 <code>followAlong</code>，请确保嵌入 <code>followAlong.js</code> 而不是 <code>js-tutorial.js</code>。</p><p>进行这些调整后，启动集成开发服务器。您可以通过命令行使用 Gradle wrapper 来完成此操作：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> jsBrowserDevelopmentRun</span></span></code></pre></div><p>当在 IntelliJ IDEA 中工作时，您可以在 Gradle 工具窗口中找到 <code>jsBrowserDevelopmentRun</code> 操作。</p><p>项目构建完成后，嵌入式 <code>webpack-dev-server</code> 将开始运行，并会打开一个（看起来是空的）浏览器窗口，指向您之前指定的 HTML 文件。为了验证您的程序是否正常运行，请打开浏览器的开发者工具（例如通过右键点击并选择 <em>Inspect</em> 操作）。 在开发者工具内部，导航到控制台，您可以在其中看到已执行 JavaScript 代码的结果：</p><p><img src="`+t+'" alt="浏览器开发者工具中的控制台输出" width="700"></p><p>通过此设置，您可以在每次代码更改后重新编译项目以查看您的更改。Kotlin/JS 还支持一种更便捷的方式，即在您开发应用程序时自动重建它。 要了解如何设置此“<em>持续模式</em>”，请查看<a href="/kotlin/dev-server-continuous-compilation">相应教程</a>。</p>',21)]))}const m=l(h,[["render",k]]);export{u as __pageData,m as default};
