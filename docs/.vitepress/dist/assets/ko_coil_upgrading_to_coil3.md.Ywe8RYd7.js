import{_ as o,c,o as d,ag as a}from"./chunks/framework.Bksy39di.js";const g=JSON.parse('{"title":"Coil 3.x으로 업그레이드","description":"","frontmatter":{},"headers":[],"relativePath":"ko/coil/upgrading_to_coil3.md","filePath":"ko/coil/upgrading_to_coil3.md","lastUpdated":1753369988000}'),i={name:"ko/coil/upgrading_to_coil3.md"};function r(l,e,t,n,s,m){return d(),c("div",null,e[0]||(e[0]=[a('<h1 id="coil-3-x으로-업그레이드" tabindex="-1">Coil 3.x으로 업그레이드 <a class="header-anchor" href="#coil-3-x으로-업그레이드" aria-label="Permalink to &quot;Coil 3.x으로 업그레이드&quot;">​</a></h1><p>Coil 3은 여러 주요 개선 사항을 포함하는 Coil의 다음 주요 버전입니다.</p><ul><li>모든 주요 타겟(Android, iOS, JVM, JS, <a href="/ko/coil/sample/">WASM</a>)을 포함하여 <a href="https://www.jetbrains.com/lp/compose-multiplatform/" target="_blank" rel="noreferrer">Compose Multiplatform</a>을 전폭적으로 지원합니다.</li><li>여러 네트워킹 라이브러리(Ktor 및 OkHttp)를 지원합니다. 또는 로컬/정적 파일만 로드해야 하는 경우 네트워크 종속성 없이 Coil을 사용할 수 있습니다.</li><li><code>LocalAsyncImagePreviewHandler</code>를 통한 Compose <code>@Preview</code> 렌더링 개선 및 사용자 정의 미리보기 동작을 지원합니다.</li><li>기존 동작을 중단해야 했던(아래에 설명됨) 버그에 대한 중요한 수정 사항이 있습니다.</li></ul><p>이 문서는 Coil 2에서 Coil 3으로의 주요 변경 사항에 대한 개요를 제공하고, 중단되거나 중요한 변경 사항을 강조합니다. 모든 바이너리 비호환 변경 사항이나 사소한 동작 변경 사항을 다루지는 않습니다.</p><p>Compose Multiplatform 프로젝트에서 Coil 3을 사용하시나요? 예제는 <a href="https://github.com/coil-kt/coil/tree/3.x/samples/compose" target="_blank" rel="noreferrer"><code>samples</code></a> 저장소를 확인하세요.</p><h2 id="maven-좌표-및-패키지-이름" tabindex="-1">Maven 좌표 및 패키지 이름 <a class="header-anchor" href="#maven-좌표-및-패키지-이름" aria-label="Permalink to &quot;Maven 좌표 및 패키지 이름&quot;">​</a></h2><p>Coil의 Maven 좌표는 <code>io.coil-kt</code>에서 <code>io.coil-kt.coil3</code>으로, 패키지 이름은 <code>coil</code>에서 <code>coil3</code>으로 업데이트되었습니다. 이를 통해 Coil 3은 Coil 2와 바이너리 호환성 문제 없이 나란히 실행될 수 있습니다. 예를 들어, <code>io.coil-kt:coil:2.7.0</code>은 이제 <code>io.coil-kt.coil3:coil:3.0.0</code>입니다.</p><p><code>coil-base</code> 및 <code>coil-compose-base</code> 아티팩트는 Coroutines, Ktor, AndroidX에서 사용되는 명명 규칙에 맞추기 위해 각각 <code>coil-core</code> 및 <code>coil-compose-core</code>로 이름이 변경되었습니다.</p><h2 id="네트워크-이미지" tabindex="-1">네트워크 이미지 <a class="header-anchor" href="#네트워크-이미지" aria-label="Permalink to &quot;네트워크 이미지&quot;">​</a></h2><p><strong><code>coil-core</code>는 기본적으로 네트워크에서 이미지 로드를 더 이상 지원하지 않습니다.</strong> <a href="./network">Coil의 네트워크 아티팩트 중 하나에 종속성을 추가해야 합니다. 자세한 내용은 여기를 참조하세요.</a>. 이 변경은 사용자가 다른 네트워킹 라이브러리를 사용하거나 앱에 네트워크 종속성이 필요 없는 경우 이를 피할 수 있도록 하기 위함입니다.</p><p>또한, 캐시 제어 헤더는 기본적으로 더 이상 존중되지 않습니다. 자세한 내용은 <a href="./network">여기</a>를 참조하세요.</p><h2 id="멀티플랫폼" tabindex="-1">멀티플랫폼 <a class="header-anchor" href="#멀티플랫폼" aria-label="Permalink to &quot;멀티플랫폼&quot;">​</a></h2><p>Coil 3은 이제 Android, JVM, iOS, macOS, Javascript 및 WASM을 지원하는 Kotlin 멀티플랫폼 라이브러리입니다.</p><p>Android에서 Coil은 표준 그래픽 클래스를 사용하여 이미지를 렌더링합니다. Android가 아닌 플랫폼에서는 Coil이 <a href="https://github.com/JetBrains/skiko" target="_blank" rel="noreferrer">Skiko</a>를 사용하여 이미지를 렌더링합니다. Skiko는 Google이 개발한 <a href="https://github.com/google/skia" target="_blank" rel="noreferrer">Skia</a> 그래픽 엔진을 래핑하는 Kotlin 바인딩 집합입니다.</p><p>Android SDK로부터의 분리(decoupling)의 일환으로 여러 API 변경이 이루어졌습니다. 특히 다음과 같습니다.</p><ul><li><code>Drawable</code>은 사용자 정의 <code>Image</code> 인터페이스로 대체되었습니다. Android에서는 <code>Drawable.asImage()</code>와 <code>Image.asDrawable(resources)</code>를 사용하여 클래스 간에 변환합니다. Android가 아닌 플랫폼에서는 <code>Bitmap.asImage()</code>와 <code>Image.toBitmap()</code>을 사용합니다.</li><li>Android의 <code>android.net.Uri</code> 클래스 사용은 멀티플랫폼 <code>coil3.Uri</code> 클래스로 대체되었습니다. <code>android.net.Uri</code>를 <code>ImageRequest.data</code>로 전달하는 모든 호출 지점은 영향을 받지 않습니다. <code>android.net.Uri</code> 수신에 의존하는 사용자 정의 <code>Fetcher</code>는 <code>coil3.Uri</code>를 사용하도록 업데이트해야 합니다.</li><li><code>Context</code>의 사용은 <code>PlatformContext</code>로 대체되었습니다. <code>PlatformContext</code>는 Android에서 <code>Context</code>의 타입 별칭이며, Android가 아닌 플랫폼에서는 <code>PlatformContext.INSTANCE</code>를 사용하여 접근할 수 있습니다. Compose Multiplatform에서는 <code>LocalPlatformContext.current</code>를 사용하여 참조를 얻을 수 있습니다.</li><li><code>Coil</code> 클래스는 <code>SingletonImageLoader</code>로 이름이 변경되었습니다.</li><li>사용자 정의 Android <code>Application</code> 클래스에서 <code>ImageLoaderFactory</code>를 구현하고 있다면, <code>ImageLoaderFactory</code>를 대체하여 <code>SingletonImageLoader.Factory</code>를 구현하도록 전환해야 합니다. <code>SingletonImageLoader.Factory</code>를 구현하면 필요하거나 원하는 경우 <code>newImageLoader()</code>를 오버라이드할 수 있습니다.</li></ul><p><code>coil-svg</code> 아티팩트는 멀티플랫폼에서 지원되지만, <code>coil-gif</code> 및 <code>coil-video</code> 아티팩트는 특정 Android 디코더 및 라이브러리에 의존하므로 (현재로서는) 계속 Android 전용입니다.</p><h2 id="compose" tabindex="-1">Compose <a class="header-anchor" href="#compose" aria-label="Permalink to &quot;Compose&quot;">​</a></h2><p><code>coil-compose</code> 아티팩트의 API는 대부분 변경되지 않았습니다. <code>AsyncImage</code>, <code>SubcomposeAsyncImage</code>, <code>rememberAsyncImagePainter</code>를 Coil 2와 동일한 방식으로 계속 사용할 수 있습니다. 또한, 이 메서드들은 <a href="https://developer.android.com/jetpack/compose/performance/stability" target="_blank" rel="noreferrer">재시작 가능하고 스킵 가능하도록</a> 업데이트되어 성능이 향상될 것입니다.</p><ul><li><code>AsyncImagePainter.state</code>는 이제 <code>StateFlow</code>입니다. <code>val state = painter.state.collectAsState()</code>를 사용하여 관찰해야 합니다.</li><li><code>AsyncImagePainter</code>의 기본 <code>SizeResolver</code>는 더 이상 첫 번째 <code>onDraw</code> 호출을 기다려 캔버스 크기를 가져오지 않습니다. 대신, <code>AsyncImagePainter</code>는 기본적으로 <code>Size.ORIGINAL</code>로 설정됩니다.</li><li>Compose <code>modelEqualityDelegate</code> 델리게이트는 이제 <code>AsyncImage</code>/<code>SubcomposeAsyncImage</code>/<code>rememberAsyncImagePainter</code>의 매개변수 대신, <code>LocalAsyncImageModelEqualityDelegate</code>라는 컴포지션 로컬을 통해 설정됩니다.</li></ul><h2 id="일반" tabindex="-1">일반 <a class="header-anchor" href="#일반" aria-label="Permalink to &quot;일반&quot;">​</a></h2><p>기타 중요한 동작 변경 사항은 다음과 같습니다.</p><ul><li>퍼스트 파티 <code>Fetcher</code> 및 <code>Decoder</code> (예: <code>NetworkFetcher.Factory</code>, <code>SvgDecoder</code> 등)는 이제 서비스 로더를 통해 각 새 <code>ImageLoader</code>에 자동으로 추가됩니다. 이 동작은 <code>ImageLoader.Builder.serviceLoaderEnabled(false)</code>로 비활성화할 수 있습니다.</li><li><code>android.resource://example.package.name/drawable/image</code> URI에 대한 지원이 제거되었습니다. 이는 리소스 축소 최적화를 방해하기 때문입니다. <code>R.drawable.image</code> 값을 직접 전달하는 것이 좋습니다. 리소스 이름 대신 리소스 ID를 전달해도 여전히 작동합니다: <code>android.resource://example.package.name/12345678</code>. 여전히 이 기능이 필요한 경우 <a href="https://github.com/coil-kt/coil/blob/da7d872e340430014dbc5136e35eb62f9b17662e/coil-core/src/androidInstrumentedTest/kotlin/coil3/map/ResourceUriMapper.kt" target="_blank" rel="noreferrer">컴포넌트 레지스트리에 <code>ResourceUriMapper</code>를 수동으로 포함</a>할 수 있습니다.</li><li>파일의 최종 쓰기 타임스탬프는 기본적으로 캐시 키에 더 이상 추가되지 않습니다. 이는 메인 스레드에서 디스크를 읽는 것을(아주 짧은 시간이라도) 피하기 위함입니다. 이 기능은 <code>ImageRequest.Builder.addLastModifiedToFileCacheKey(true)</code> 또는 <code>ImageLoader.Builder.addLastModifiedToFileCacheKey(true)</code>로 다시 활성화할 수 있습니다.</li><li>출력 이미지 치수는 의도치 않은 OOM(Out Of Memory)을 방지하기 위해 4096x4096 미만으로 강제됩니다. 이는 <code>ImageLoader/ImageRequest.Builder.maxBitmapSize</code>로 구성할 수 있습니다. 이 동작을 비활성화하려면 <code>maxBitmapSize</code>를 <code>Size.ORIGINAL</code>로 설정하세요.</li><li>Coil 2의 <code>Parameters</code> API는 <code>Extras</code>로 대체되었습니다. <code>Extras</code>는 문자열 키를 요구하지 않으며 대신 참조 동일성에 의존합니다. <code>Extras</code>는 메모리 캐시 키 수정을 지원하지 않습니다. 대신, 추가 데이터가 메모리 캐시 키에 영향을 미치는 경우 <code>ImageRequest.memoryCacheKeyExtra</code>를 사용하세요.</li><li><code>ImageRequest.Builder</code>의 많은 함수가 멀티플랫폼을 더 쉽게 지원하기 위해 확장 함수로 이동되었습니다.</li></ul>',23)]))}const u=o(i,[["render",r]]);export{g as __pageData,u as default};
