import{_ as h}from"./chunks/native-gc-signposts.CmU4CX4K.js";import{_ as r,C as l,c as k,o,ag as i,j as a,G as t,a as n,w as d}from"./chunks/framework.Bksy39di.js";const v=JSON.parse('{"title":"Kotlin/Nativeのメモリ管理","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/native-memory-manager.md","filePath":"ja/kotlin/native-memory-manager.md","lastUpdated":1754307826000}'),c={name:"ja/kotlin/native-memory-manager.md"};function g(E,s,u,y,m,F){const p=l("shortcut"),e=l("TopicTitle");return o(),k("div",null,[s[9]||(s[9]=i('<h1 id="kotlin-nativeのメモリ管理" tabindex="-1">Kotlin/Nativeのメモリ管理 <a class="header-anchor" href="#kotlin-nativeのメモリ管理" aria-label="Permalink to &quot;Kotlin/Nativeのメモリ管理&quot;">​</a></h1><p>Kotlin/Nativeは、JVM、Go、その他の主要なテクノロジーに似たモダンなメモリマネージャーを使用しており、以下の機能を備えています。</p><ul><li>オブジェクトは共有ヒープに格納され、どのスレッドからもアクセスできます。</li><li>ローカル変数やグローバル変数などの「ルート」から到達不能なオブジェクトを収集するために、トレース型ガベージコレクションが定期的に実行されます。</li></ul><h2 id="ガベージコレクター" tabindex="-1">ガベージコレクター <a class="header-anchor" href="#ガベージコレクター" aria-label="Permalink to &quot;ガベージコレクター&quot;">​</a></h2><p>Kotlin/Nativeのガベージコレクター (GC) アルゴリズムは常に進化しています。現在、これはヒープを世代に分割しない、Stop-the-world方式のマーク&amp;コンカレントスイープコレクターとして機能します。</p><p>GCは独立したスレッドで実行され、メモリ負荷のヒューリスティクスに基づいて、またはタイマーによって開始されます。あるいは、<a href="#enable-garbage-collection-manually">手動で呼び出す</a>こともできます。</p><p>GCは、アプリケーションスレッド、GCスレッド、オプションのマーカースレッドを含む複数のスレッドでマークキューを並行して処理します。アプリケーションスレッドと少なくとも1つのGCスレッドがマーキングプロセスに参加します。デフォルトでは、GCがヒープ内のオブジェクトをマーキングしている間、アプリケーションスレッドは一時停止する必要があります。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>マークフェーズの並列化は、<code>kotlin.native.binary.gcMarkSingleThreaded=true</code>コンパイラオプションで無効にできます。 ただし、これにより大規模なヒープではガベージコレクターの一時停止時間が増加する可能性があります。</p></div><p>マーキングフェーズが完了すると、GCは弱参照を処理し、マークされていないオブジェクトへの参照をnull化します。デフォルトでは、弱参照はGCの一時停止時間を短縮するために並行して処理されます。</p><p>ガベージコレクションの<a href="#monitor-gc-performance">監視</a>と<a href="#optimize-gc-performance">最適化</a>の方法については、こちらをご覧ください。</p><h3 id="ガベージコレクションを手動で有効にする" tabindex="-1">ガベージコレクションを手動で有効にする <a class="header-anchor" href="#ガベージコレクションを手動で有効にする" aria-label="Permalink to &quot;ガベージコレクションを手動で有効にする&quot;">​</a></h3><p>ガベージコレクターを強制的に開始するには、<code>kotlin.native.internal.GC.collect()</code>を呼び出します。このメソッドは新しいコレクションをトリガーし、その完了を待ちます。</p><h3 id="gcパフォーマンスを監視する" tabindex="-1">GCパフォーマンスを監視する <a class="header-anchor" href="#gcパフォーマンスを監視する" aria-label="Permalink to &quot;GCパフォーマンスを監視する&quot;">​</a></h3><p>GCパフォーマンスを監視するには、そのログを確認し、問題を診断できます。ロギングを有効にするには、Gradleビルドスクリプトで以下のコンパイラオプションを設定します。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>-Xruntime-logs=gc=info</span></span></code></pre></div><p>現在、ログは<code>stderr</code>にのみ出力されます。</p><p>Appleプラットフォームでは、Xcode Instrumentsツールキットを利用してiOSアプリのパフォーマンスをデバッグできます。ガベージコレクターは、Instrumentsで利用可能なサインポストを使用して一時停止をレポートします。サインポストはアプリ内でカスタムロギングを可能にし、GCの一時停止がアプリケーションのフリーズに対応しているかを確認できます。</p><p>アプリでGC関連の一時停止を追跡するには：</p>',18)),a("ol",null,[s[7]||(s[7]=i('<li><p>この機能を有効にするには、<code>gradle.properties</code>ファイルに以下のコンパイラオプションを設定します。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.native.binary.enableSafepointSignposts=true</span></span></code></pre></div></li>',1)),a("li",null,[a("p",null,[s[1]||(s[1]=n("Xcodeを開き、")),s[2]||(s[2]=a("strong",null,"Product",-1)),s[3]||(s[3]=n(" | ")),s[4]||(s[4]=a("strong",null,"Profile",-1)),s[5]||(s[5]=n(" に移動するか、")),t(p,null,{default:d(()=>s[0]||(s[0]=[n("Cmd + I")])),_:1}),s[6]||(s[6]=n("を押します。このアクションにより、アプリがコンパイルされ、Instrumentsが起動します。"))])]),s[8]||(s[8]=i('<li><p>テンプレート選択で、<strong>os_signpost</strong>を選択します。</p></li><li><p><strong>subsystem</strong>に<code>org.kotlinlang.native.runtime</code>、<strong>category</strong>に<code>safepoint</code>を指定して設定します。</p></li><li><p>赤い記録ボタンをクリックしてアプリを実行し、サインポストイベントの記録を開始します。</p><p><img src="'+h+'" alt="Tracking GC pauses as signposts" width="700"></p><p>ここで、一番下のグラフの各青い塊は、個別のサインポストイベントであり、GCの一時停止です。</p></li>',3))]),s[10]||(s[10]=i(`<h3 id="gcパフォーマンスを最適化する" tabindex="-1">GCパフォーマンスを最適化する <a class="header-anchor" href="#gcパフォーマンスを最適化する" aria-label="Permalink to &quot;GCパフォーマンスを最適化する&quot;">​</a></h3><p>GCパフォーマンスを改善するには、並行マーキングを有効にしてGCの一時停止時間を短縮できます。これにより、ガベージコレクションのマーキングフェーズがアプリケーションスレッドと同時に実行されるようになります。</p><p>この機能は現在<a href="/ja/kotlin/components-stability#stability-levels-explained">Experimental</a>です。有効にするには、<code>gradle.properties</code>ファイルに以下のコンパイラオプションを設定します。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.native.binary.gc=cms</span></span></code></pre></div><h3 id="ガベージコレクションを無効にする" tabindex="-1">ガベージコレクションを無効にする <a class="header-anchor" href="#ガベージコレクションを無効にする" aria-label="Permalink to &quot;ガベージコレクションを無効にする&quot;">​</a></h3><p>GCを有効にしておくことをお勧めします。ただし、テスト目的や、問題が発生し短命なプログラムである場合など、特定のケースでは無効にできます。そうするには、<code>gradle.properties</code>ファイルに以下のバイナリオプションを設定します。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.native.binary.gc=noop</span></span></code></pre></div><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>このオプションを有効にすると、GCはKotlinオブジェクトを収集しないため、プログラムの実行中はメモリ消費量が継続的に増加します。システムメモリを使い果たさないように注意してください。</p></div><h2 id="メモリ消費" tabindex="-1">メモリ消費 <a class="header-anchor" href="#メモリ消費" aria-label="Permalink to &quot;メモリ消費&quot;">​</a></h2><p>Kotlin/Nativeは独自の<a href="https://github.com/JetBrains/kotlin/blob/master/kotlin-native/runtime/src/alloc/custom/README.md" target="_blank" rel="noreferrer">メモリ確保機能</a>を使用しています。これはシステムメモリをページに分割し、連続した順序で独立したスイープを可能にします。各割り当てはページ内のメモリブロックとなり、ページはブロックサイズを追跡します。異なるページタイプは様々な割り当てサイズに合わせて最適化されています。メモリブロックの連続的な配置により、割り当てられたすべてのブロックを効率的に反復処理できます。</p><p>スレッドがメモリを割り当てる際、割り当てサイズに基づいて適切なページを検索します。スレッドは異なるサイズカテゴリのページセットを維持します。通常、特定のサイズに対する現在のページが割り当てを収容できます。そうでない場合、スレッドは共有割り当てスペースから別のページを要求します。このページはすでに利用可能であるか、スイープが必要であるか、または最初に作成する必要があります。</p><p>Kotlin/Nativeのメモリ確保機能には、メモリ割り当ての急激なスパイクに対する保護機能が備わっています。これは、ミューテーターが大量のガベージを高速で割り当て始め、GCスレッドがそれについていけないために、メモリ使用量が無限に増加してしまう状況を防ぎます。この場合、イテレーションが完了するまでGCはStop-the-worldフェーズを強制します。</p><p>メモリ消費量を自身で監視し、メモリリークをチェックし、メモリ消費量を調整できます。</p><h3 id="メモリ消費量を監視する" tabindex="-1">メモリ消費量を監視する <a class="header-anchor" href="#メモリ消費量を監視する" aria-label="Permalink to &quot;メモリ消費量を監視する&quot;">​</a></h3><p>メモリの問題をデバッグするには、メモリマネージャーのメトリクスを確認できます。さらに、AppleプラットフォームでのKotlinのメモリ消費量を追跡することも可能です。</p><h4 id="メモリリークをチェックする" tabindex="-1">メモリリークをチェックする <a class="header-anchor" href="#メモリリークをチェックする" aria-label="Permalink to &quot;メモリリークをチェックする&quot;">​</a></h4><p>メモリマネージャーのメトリクスにアクセスするには、<code>kotlin.native.internal.GC.lastGCInfo()</code>を呼び出します。このメソッドは、ガベージコレクターの最後の実行に関する統計を返します。この統計は、以下の点で役立ちます。</p><ul><li>グローバル変数使用時のメモリリークのデバッグ</li><li>テスト実行時のリークの確認</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.native.internal.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.test.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Resource</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> global </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mutableListOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Resource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalStdlibApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getUsage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    GC.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">collect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GC.lastGCInfo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.memoryUsageAfter[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;heap&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.totalObjectsSizeBytes</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    global.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Resource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // The test will fail if you remove the next line</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    global.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> before </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getUsage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // A separate function is used to ensure that all temporary objects are cleared</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> after </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getUsage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    assertEquals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(before, after)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="appleプラットフォームでメモリ消費量を追跡する" tabindex="-1">Appleプラットフォームでメモリ消費量を追跡する <a class="header-anchor" href="#appleプラットフォームでメモリ消費量を追跡する" aria-label="Permalink to &quot;Appleプラットフォームでメモリ消費量を追跡する&quot;">​</a></h4><p>Appleプラットフォームでメモリの問題をデバッグする際、Kotlinコードによって確保されているメモリ量を視覚的に確認できます。Kotlinの共有分は識別子でタグ付けされており、Xcode InstrumentsのVM Trackerのようなツールを通じて追跡できます。</p><p>この機能は、以下の条件がすべて満たされている場合にのみ、デフォルトのKotlin/Nativeメモリ確保機能で利用可能です。</p><ul><li><p><strong>タグ付けが有効であること</strong>。メモリは有効な識別子でタグ付けされている必要があります。Appleは240から255の間の数値を推奨しており、デフォルト値は246です。</p><p><code>kotlin.native.binary.mmapTag=0</code> Gradleプロパティを設定すると、タグ付けが無効になります。</p></li><li><p><strong><code>mmap</code>による割り当て</strong>。アロケーターは<code>mmap</code>システムコールを使用してファイルをメモリにマッピングする必要があります。</p><p><code>kotlin.native.binary.disableMmap=true</code> Gradleプロパティを設定すると、デフォルトのアロケーターは<code>mmap</code>の代わりに<code>malloc</code>を使用します。</p></li><li><p><strong>ページングが有効であること</strong>。割り当てのページング（バッファリング）が有効である必要があります。</p><p><a href="#disable-allocator-paging"><code>kotlin.native.binary.pagedAllocator=false</code></a> Gradleプロパティを設定すると、メモリは代わりにオブジェクトごとに確保されます。</p></li></ul><h3 id="メモリ消費量を調整する" tabindex="-1">メモリ消費量を調整する <a class="header-anchor" href="#メモリ消費量を調整する" aria-label="Permalink to &quot;メモリ消費量を調整する&quot;">​</a></h3><p>予期せず高いメモリ消費が発生した場合は、以下の解決策を試してください。</p><h4 id="kotlinを更新する" tabindex="-1">Kotlinを更新する <a class="header-anchor" href="#kotlinを更新する" aria-label="Permalink to &quot;Kotlinを更新する&quot;">​</a></h4><p>Kotlinを最新バージョンに更新してください。メモリマネージャーは継続的に改善されているため、簡単なコンパイラの更新でもメモリ消費が改善する可能性があります。</p>`,27)),t(e,{id:"アロケーターのページングを無効にする",level:"4",title:"アロケーターのページングを無効にする",labelRef:"experimental-opt-in"}),s[11]||(s[11]=i('<p>割り当てのページング（バッファリング）を無効にして、メモリ確保機能がオブジェクトごとにメモリを確保するようにできます。場合によっては、これにより厳密なメモリ制限を満たしたり、アプリケーションの起動時のメモリ消費を削減したりするのに役立つ場合があります。</p><p>そうするには、<code>gradle.properties</code>ファイルに以下のオプションを設定します。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.native.binary.pagedAllocator=false</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>アロケーターのページングが無効になっている場合、<a href="#track-memory-consumption-on-apple-platforms">Appleプラットフォームでのメモリ消費量の追跡</a>はできません。</p></div>',4)),t(e,{id:"latin-1文字列のサポートを有効にする",level:"4",title:"Latin-1文字列のサポートを有効にする",labelRef:"experimental-opt-in"}),s[12]||(s[12]=i(`<p>デフォルトでは、Kotlinの文字列はUTF-16エンコーディングを使用して格納され、各文字は2バイトで表現されます。場合によっては、これにより文字列がバイナリ内でソースコードの2倍のスペースを占め、データの読み込みが2倍のメモリを消費することがあります。</p><p>アプリケーションのバイナリサイズを削減し、メモリ消費量を調整するには、Latin-1エンコードされた文字列のサポートを有効にできます。<a href="https://en.wikipedia.org/wiki/ISO/IEC_8859-1" target="_blank" rel="noreferrer">Latin-1 (ISO 8859-1)</a>エンコーディングは、Unicodeの最初の256文字をそれぞれ1バイトで表現します。</p><p>これを有効にするには、<code>gradle.properties</code>ファイルに以下のオプションを設定します。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.native.binary.latin1Strings=true</span></span></code></pre></div><p>Latin-1サポートを有効にすると、すべての文字がその範囲内にある限り、文字列はLatin-1エンコーディングで格納されます。そうでない場合は、デフォルトのUTF-16エンコーディングが使用されます。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>この機能はExperimentalですが、cinterop拡張関数<a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlinx.cinterop/pin.html" target="_blank" rel="noreferrer"><code>String.pin</code></a>、<a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlinx.cinterop/use-pinned.html" target="_blank" rel="noreferrer"><code>String.usePinned</code></a>、および<a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlinx.cinterop/ref-to.html" target="_blank" rel="noreferrer"><code>String.refTo</code></a>の効率が低下します。それらへの各呼び出しは、UTF-16への自動的な文字列変換をトリガーする可能性があります。</p></div><p>これらのオプションのいずれも役に立たない場合は、<a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a>でイシューを作成してください。</p><h2 id="バックグラウンドでの単体テスト" tabindex="-1">バックグラウンドでの単体テスト <a class="header-anchor" href="#バックグラウンドでの単体テスト" aria-label="Permalink to &quot;バックグラウンドでの単体テスト&quot;">​</a></h2><p>単体テストでは、メインスレッドキューを処理するものがないため、<code>Dispatchers.Main</code>はモックされていない限り使用しないでください。モックは<code>kotlinx-coroutines-test</code>から<code>Dispatchers.setMain</code>を呼び出すことで可能です。</p><p><code>kotlinx.coroutines</code>に依存していない場合や、何らかの理由で<code>Dispatchers.setMain</code>が機能しない場合は、テストランチャーを実装するための以下の回避策を試してください。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> testlauncher</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> platform.CoreFoundation.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.native.concurrent.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.native.internal.test.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.system.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mainBackground</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> worker </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Worker.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;main-background&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    worker.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TransferMode.SAFE, { args.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">freeze</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> testLauncherEntryPoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(it)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        exitProcess</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    CFRunLoopRun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;CFRunLoopRun should never return&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>次に、コンパイラオプション<code>-e testlauncher.mainBackground</code>を指定してテストバイナリをコンパイルします。</p><h2 id="次のステップ" tabindex="-1">次のステップ <a class="header-anchor" href="#次のステップ" aria-label="Permalink to &quot;次のステップ&quot;">​</a></h2><ul><li><a href="/ja/kotlin/native-migration-guide">レガシーメモリマネージャーからの移行</a></li><li><a href="/ja/kotlin/native-arc-integration">Swift/Objective-C ARCとの統合の具体例を確認する</a></li></ul>`,14))])}const f=r(c,[["render",g]]);export{v as __pageData,f as default};
