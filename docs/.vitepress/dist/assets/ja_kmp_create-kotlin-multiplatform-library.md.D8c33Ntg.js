import{_ as p,a as l,b as h,c as k,d as r}from"./chunks/publish-maven-local-gradle-task.BGdngNQl.js";import{_ as o,a as d,b as c,c as g}from"./chunks/youtube.DH2NfHCv.js";import{_ as E,C as t,c as y,o as m,j as i,G as a,ag as u,a as b,w as F}from"./chunks/framework.Bksy39di.js";const q=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kmp/create-kotlin-multiplatform-library.md","filePath":"ja/kmp/create-kotlin-multiplatform-library.md","lastUpdated":1755516278000}'),f={name:"ja/kmp/create-kotlin-multiplatform-library.md"};function v(C,s,A,D,B,_){const n=t("secondary-label"),e=t("tldr");return m(),y("div",null,[s[1]||(s[1]=i("h1",{id:"kotlin-multiplatformライブラリの作成-チュートリアル",tabindex:"-1"},[b("Kotlin Multiplatformライブラリの作成 - チュートリアル "),i("a",{class:"header-anchor",href:"#kotlin-multiplatformライブラリの作成-チュートリアル","aria-label":'Permalink to "Kotlin Multiplatformライブラリの作成 - チュートリアル"'},"​")],-1)),a(n,{ref:"IntelliJ IDEA"},null,512),a(n,{ref:"Android Studio"},null,512),a(e,null,{default:F(()=>s[0]||(s[0]=[i("p",null,"このチュートリアルではIntelliJ IDEAを使用しますが、Android Studioでも同様に進めることができます。どちらのIDEもコア機能とKotlin Multiplatformのサポートを共有しています。",-1)])),_:1}),s[2]||(s[2]=u('<p>このチュートリアルでは、IntelliJ IDEAでマルチプラットフォームライブラリを作成し、ローカルのMavenリポジトリに公開し、別のプロジェクトで依存関係として追加する方法を学びます。</p><p>このチュートリアルは、フィボナッチ数列を生成する関数を含むシンプルなライブラリである、当社の<a href="https://github.com/Kotlin/multiplatform-library-template" target="_blank" rel="noreferrer">マルチプラットフォームライブラリテンプレート</a>に基づいています。</p><h2 id="環境をセットアップする" tabindex="-1">環境をセットアップする <a class="header-anchor" href="#環境をセットアップする" aria-label="Permalink to &quot;環境をセットアップする&quot;">​</a></h2><p><a href="./quickstart">必要なツールをすべてインストールし、最新バージョンに更新します</a>。</p><h2 id="プロジェクトを作成する" tabindex="-1">プロジェクトを作成する <a class="header-anchor" href="#プロジェクトを作成する" aria-label="Permalink to &quot;プロジェクトを作成する&quot;">​</a></h2><ol><li><p>IntelliJ IDEAで、<strong>File</strong> | <strong>New</strong> | <strong>Project from Version Control</strong> を選択します。</p></li><li><p><a href="https://github.com/Kotlin/multiplatform-library-template" target="_blank" rel="noreferrer">マルチプラットフォームライブラリテンプレートプロジェクト</a>のURLを入力します。</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>https://github.com/Kotlin/multiplatform-library-template</span></span></code></pre></div></li><li><p><strong>Clone</strong> をクリックします。</p></li></ol><h2 id="プロジェクト構造を確認する" tabindex="-1">プロジェクト構造を確認する <a class="header-anchor" href="#プロジェクト構造を確認する" aria-label="Permalink to &quot;プロジェクト構造を確認する&quot;">​</a></h2><p>Kotlin Multiplatformライブラリテンプレートプロジェクトは、Kotlin Multiplatformライブラリを開発するための基礎的な構造を提供します。このテンプレートは、様々なプラットフォームで動作するライブラリの作成に役立ちます。</p><p>テンプレートプロジェクトでは、<code>library</code> がコアモジュールとして機能し、Multiplatformライブラリのメインソースコードとビルドリソースを含んでいます。</p><p><img src="'+p+`" alt="Multiplatform library project structure" width="350"></p><p><code>library</code> モジュールは、共有コードとプラットフォーム固有の実装を収容するように構築されています。その主要なソースコード (<code>src</code>) の内容は次のとおりです。</p><ul><li><strong><code>commonMain</code>:</strong> すべてのターゲットプラットフォームで共有されるKotlinコードが含まれています。ここでは、プラットフォーム固有のAPIに依存しないコードを配置します。</li><li><strong><code>androidMain</code>、<code>iosMain</code>、<code>jvmMain</code>、<code>linuxX64Main</code>:</strong> Android、iOS、JVM、Linuxプラットフォーム固有のコードが含まれています。ここでは、これらのプラットフォームに固有の機能を実装します。</li><li><strong><code>commonTest</code>、<code>androidUnitTest</code>、<code>iosTest</code>、<code>jvmTest</code>、<code>linuxX64Test</code>:</strong> 共有された <code>commonMain</code> コードのテストと、それぞれAndroid、iOS、JVM、Linuxプラットフォームに固有のテストが含まれています。</li></ul><p>すべてのプラットフォームで共有される <code>library</code> コードに焦点を当てましょう。<code>src/commonMain/kotlin</code> ディレクトリ内には、フィボナッチ数列ジェネレーターを定義するKotlin Multiplatformコードを含む <code>CustomFibi.kt</code> ファイルがあります。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.github.kotlin.fibonacci</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Defines the function to generate the Fibonacci sequence</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> generateFibi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sequence</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> firstElement</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    yield</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> secondElement</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    yield</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(b)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        yield</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(c)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Declares the expected values for \`firstElement\` and \`secondElement\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> firstElement: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> secondElement: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span></span></code></pre></div><p><code>firstElement</code> と <code>secondElement</code> プロパティは、プラットフォーム固有のコードが実装できるプレースホルダーです。 各ターゲットは、それぞれのソースセットで <code>actual</code> キーワードを使用して実際の値を提供する必要があります。</p><p><code>expect</code> 宣言は、<code>actual</code> 実装と<a href="./multiplatform-connect-to-apis#expected-and-actual-functions-and-properties">マッチングされます</a>。 このメカニズムは、プラットフォーム固有の動作を必要とするクロスプラットフォームコードを作成する際に役立ちます。</p><p>このケースでは、マルチプラットフォームライブラリテンプレートには <code>firstElement</code> と <code>secondElement</code> プロパティのプラットフォーム固有の実装が含まれています。<code>androidMain</code>、<code>iosMain</code>、<code>jvmMain</code>、<code>linuxX64Main</code> ディレクトリには、これらのプロパティに値を提供する <code>actual</code> 宣言が含まれています。</p><p>例えば、<code>androidMain/kotlin/fibiprops.android.kt</code> に含まれるAndroidの実装は次のとおりです。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.github.kotlin.fibonacci</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> firstElement: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> secondElement: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span></code></pre></div><p>他のプラットフォームも同様のパターンに従い、<code>firstElement</code> および <code>secondElement</code> プロパティの値にバリエーションがあります。</p><h2 id="新しいプラットフォームを追加する" tabindex="-1">新しいプラットフォームを追加する <a class="header-anchor" href="#新しいプラットフォームを追加する" aria-label="Permalink to &quot;新しいプラットフォームを追加する&quot;">​</a></h2><p>テンプレートで共有コードとプラットフォーム固有コードがどのように機能するかを理解したところで、追加のプラットフォームのサポートを追加してプロジェクトを拡張しましょう。</p><p><a href="./multiplatform-connect-to-apis#expected-and-actual-functions-and-properties"><code>expect</code>/<code>actual</code>メカニズム</a>を使用して、<a href="https://kotlinlang.org/docs/wasm-overview.html" target="_blank" rel="noreferrer">Kotlin/Wasm</a>プラットフォームのサポートを設定します。<code>firstElement</code>と<code>secondElement</code>プロパティのプラットフォーム固有の機能を実装できます。</p><h3 id="kotlin-wasmターゲットをプロジェクトに追加する" tabindex="-1">Kotlin/Wasmターゲットをプロジェクトに追加する <a class="header-anchor" href="#kotlin-wasmターゲットをプロジェクトに追加する" aria-label="Permalink to &quot;Kotlin/Wasmターゲットをプロジェクトに追加する&quot;">​</a></h3><ol><li><p><code>library/build.gradle.kts</code> ファイルに、Kotlin/Wasmターゲット (<code>wasmJs</code>) とソースセットを追加します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(org.jetbrains.kotlin.gradle.ExperimentalWasmDsl::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    wasmJs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        browser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        binaries.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wasmJsMain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // Wasm-specific dependencies</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>ビルドファイルに表示される<strong>Sync Gradle Changes</strong>アイコン (<img src="`+l+'" alt="Gradle sync icon" width="30" type="joined">)をクリックしてGradleファイルを同期します。または、Gradleツールウィンドウのリフレッシュボタンをクリックします。</p></li></ol><h3 id="wasm用のプラットフォーム固有コードを作成する" tabindex="-1">Wasm用のプラットフォーム固有コードを作成する <a class="header-anchor" href="#wasm用のプラットフォーム固有コードを作成する" aria-label="Permalink to &quot;Wasm用のプラットフォーム固有コードを作成する&quot;">​</a></h3><p>Wasmターゲットを追加した後、<code>firstElement</code>と<code>secondElement</code>のプラットフォーム固有の実装を保持するためのWasmディレクトリが必要です。</p><ol><li><p><code>library/src</code> ディレクトリを右クリックし、<strong>New | Directory</strong> を選択します。</p></li><li><p><strong>Gradle Source Sets</strong> リストから <strong>wasmJsMain/kotlin</strong> を選択します。</p><p><img src="'+h+`" alt="Gradle source sets list" width="450"></p></li><li><p>新しく作成された <code>wasmJsMain/kotlin</code> ディレクトリを右クリックし、<strong>New | Kotlin Class/File</strong> を選択します。</p></li><li><p>ファイル名として <strong>fibiprops.wasm</strong> を入力し、<strong>File</strong> を選択します。</p></li><li><p><code>fibiprops.wasm.kt</code> ファイルに以下のコードを追加します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.github.kotlin.fibonacci</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> firstElement: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> secondElement: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span></span></code></pre></div><p>このコードはWasm固有の実装を設定し、<code>firstElement</code> の <code>actual</code> 値を <code>3</code> に、<code>secondElement</code> の <code>actual</code> 値を <code>5</code> に定義します。</p></li></ol><h3 id="プロジェクトをビルドする" tabindex="-1">プロジェクトをビルドする <a class="header-anchor" href="#プロジェクトをビルドする" aria-label="Permalink to &quot;プロジェクトをビルドする&quot;">​</a></h3><p>新しいプラットフォームでプロジェクトが正しくコンパイルされることを確認してください。</p><ol><li><p><strong>View</strong> | <strong>Tool Windows</strong> | <strong>Gradle</strong> を選択してGradleツールウィンドウを開きます。</p></li><li><p><strong>multiplatform-library-template</strong> | <strong>library</strong> | <strong>Tasks</strong> | <strong>build</strong> の中で、<strong>build</strong> タスクを実行します。</p><p><img src="`+k+`" alt="Gradle tool window" width="450"></p><p>または、<code>multiplatform-library-template</code> のルートディレクトリからターミナルで以下のコマンドを実行します。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span></code></pre></div></li></ol><p><strong>Build</strong> ツールウィンドウで成功した出力を確認できます。</p><h2 id="ライブラリをローカルのmavenリポジトリに公開する" tabindex="-1">ライブラリをローカルのMavenリポジトリに公開する <a class="header-anchor" href="#ライブラリをローカルのmavenリポジトリに公開する" aria-label="Permalink to &quot;ライブラリをローカルのMavenリポジトリに公開する&quot;">​</a></h2><p>これで、マルチプラットフォームライブラリをローカルに公開し、同じマシン上の他のプロジェクトで使用する準備ができました。</p><p>ライブラリを公開するには、<a href="https://docs.gradle.org/current/userguide/publishing_maven.html" target="_blank" rel="noreferrer"><code>maven-publish</code></a> Gradleプラグインを次のように使用します。</p><ol><li><p><code>library/build.gradle.kts</code> ファイル内の <code>plugins { }</code> ブロックを見つけ、<code>maven-publish</code> プラグインを適用します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       // ...</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       // Add the following line:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">       id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;maven-publish&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span></code></pre></div></li><li><p><code>mavenPublishing { }</code> ブロックを見つけ、公開がローカルのみであることを示すために <code>signAllPublications()</code> メソッドをコメントアウトします。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mavenPublishing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Comment out the following method:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // signAllPublications()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>ビルドファイルに表示される<strong>Sync Gradle Changes</strong>アイコン (<img src="`+l+'" alt="Gradle sync icon" width="30" type="joined">)をクリックしてGradleファイルを同期します。または、Gradleツールウィンドウのリフレッシュボタンをクリックします。</p></li><li><p>Gradleツールウィンドウで、<strong>multiplatform-library-template</strong> | <strong>Tasks</strong> | <strong>publishing</strong> に移動し、<strong>publishToMavenLocal</strong> Gradleタスクを実行します。</p><p><img src="'+r+`" alt="Multiplatform library Gradle tool window" width="450"></p><p>または、<code>multiplatform-library-template</code> のルートディレクトリからターミナルで以下のコマンドを実行します。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> publishToMavenLocal</span></span></code></pre></div></li></ol><p>ライブラリがローカルのMavenリポジトリに公開されました。</p><p>公開されたライブラリを見つけるには、ファイルエクスプローラーまたはターミナルを使用し、ユーザーのホームディレクトリにある <code>.m2\\repository\\io\\github\\kotlin\\library\\1.0.0\\</code> へ移動します。</p><h2 id="ライブラリを別のプロジェクトの依存関係として追加する" tabindex="-1">ライブラリを別のプロジェクトの依存関係として追加する <a class="header-anchor" href="#ライブラリを別のプロジェクトの依存関係として追加する" aria-label="Permalink to &quot;ライブラリを別のプロジェクトの依存関係として追加する&quot;">​</a></h2><p>MultiplatformライブラリをローカルのMavenリポジトリに公開した後、同じマシン上の他のKotlinプロジェクトでそれを使用できます。</p><p>コンシューマプロジェクトの <code>build.gradle.kts</code> ファイルで、公開されたライブラリへの依存関係を追加します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">repositories</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    mavenLocal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;io.github.kotlin:library:1.0.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>repositories{}</code> ブロックは、GradleにローカルのMavenリポジトリからライブラリを解決し、共有コードで利用可能にするように指示します。</p><p><code>implementation</code> 依存関係は、ライブラリの <code>build.gradle.kts</code> ファイルで指定されたグループとバージョンで構成されます。</p><p>別のマルチプラットフォームプロジェクトに追加する場合は、共有またはプラットフォーム固有のソースセットに追加できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // For all platforms</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> commonMain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;io.github.kotlin:library:1.0.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Or for specific platforms</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wasmJsMain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;io.github.kotlin:library:1.0.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>コンシューマプロジェクトを同期して、ライブラリの使用を開始しましょう！</p><h2 id="次のステップ" tabindex="-1">次のステップ <a class="header-anchor" href="#次のステップ" aria-label="Permalink to &quot;次のステップ&quot;">​</a></h2><p>マルチプラットフォーム開発をさらに探求することをお勧めします。</p><ul><li><a href="./multiplatform-publish-libraries">ライブラリをMaven Centralに公開する</a></li><li><a href="https://kotlinlang.org/docs/api-guidelines-introduction.html" target="_blank" rel="noreferrer">ライブラリ作者向けガイドラインを確認する</a></li></ul><p>コミュニティに参加する:</p><ul><li><img src="`+o+'" alt="GitHub" width="25" type="joined"> <strong>Compose Multiplatform GitHub</strong>: <a href="https://github.com/JetBrains/compose-multiplatform" target="_blank" rel="noreferrer">リポジトリ</a>にスターを付けて貢献する</li><li><img src="'+d+'" alt="Slack" width="25" type="joined"> <strong>Kotlin Slack</strong>: <a href="https://surveys.jetbrains.com/s3/kotlin-slack-sign-up" target="_blank" rel="noreferrer">招待</a>を受け取り、<a href="https://kotlinlang.slack.com/archives/C3PQML5NU" target="_blank" rel="noreferrer">#multiplatform</a>チャンネルに参加する</li><li><img src="'+c+'" alt="Stack Overflow" width="25" type="joined"> <strong>Stack Overflow</strong>: 「kotlin-multiplatform」<a href="https://stackoverflow.com/questions/tagged/kotlin-multiplatform" target="_blank" rel="noreferrer">タグを購読する</a></li><li><img src="'+g+'" alt="YouTube" width="25" type="joined"> <strong>Kotlin YouTube channel</strong>: <a href="https://www.youtube.com/playlist?list=PLlFc5cFwUnmy_oVc9YQzjasSNoAk4hk_C" target="_blank" rel="noreferrer">Kotlin Multiplatform</a>に関する動画を購読して視聴する</li></ul>',52))])}const P=E(f,[["render",v]]);export{q as __pageData,P as default};
