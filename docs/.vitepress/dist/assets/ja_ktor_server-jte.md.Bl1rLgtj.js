import{_ as u,C as n,c as y,o as m,G as e,j as i,ag as c,w as a,a as t}from"./chunks/framework.Bksy39di.js";const q=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ja/ktor/server-jte.md","filePath":"ja/ktor/server-jte.md","lastUpdated":1755457140000}'),v={name:"ja/ktor/server-jte.md"};function F(f,s,b,C,j,B){const k=n("TopicTitle"),h=n("show-structure"),d=n("primary-label"),r=n("Links"),E=n("tldr"),l=n("code-block"),p=n("TabItem"),o=n("Tabs"),g=n("list");return m(),y("div",null,[e(k,{labelRef:"server-plugin",title:"JTE"}),e(h,{for:"chapter",depth:"2"}),e(d,{ref:"server-plugin"},null,512),e(E,null,{default:a(()=>[s[3]||(s[3]=i("p",null,[i("b",null,"必須の依存関係"),t(": "),i("code",null,"io.ktor:ktor-server-jte")],-1)),s[4]||(s[4]=i("p",null,[i("b",null,"コード例"),t(": "),i("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/jte"}," jte ")],-1)),i("p",null,[i("b",null,[e(r,{href:"/ktor/server-native",summary:"KtorはKotlin/Nativeをサポートしており、追加のランタイムや仮想マシンなしでサーバーを実行できます。"},{default:a(()=>s[0]||(s[0]=[t("ネイティブサーバー")])),_:1}),s[1]||(s[1]=t("のサポート"))]),s[2]||(s[2]=t(": ✖️ "))])]),_:1}),s[17]||(s[17]=i("p",null,[t("Ktorでは、"),i("a",{href:"https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-jte/io.ktor.server.jte/-jte.html",target:"_blank",rel:"noreferrer"},"Jte"),t("プラグインをインストールすることで、"),i("a",{href:"https://github.com/casid/jte",target:"_blank",rel:"noreferrer"},"JTEテンプレート"),t("をアプリケーション内のビューとして使用できます。")],-1)),s[18]||(s[18]=i("h2",{id:"add_dependencies",tabindex:"-1"},[t("依存関係を追加する "),i("a",{class:"header-anchor",href:"#add_dependencies","aria-label":'Permalink to "依存関係を追加する {id="add_dependencies"}"'},"​")],-1)),s[19]||(s[19]=i("p",null,[i("code",null,"Jte"),t(" を使用するには、ビルドスクリプトに "),i("code",null,"ktor-server-jte"),t(" アーティファクトを含める必要があります。 ")],-1)),e(o,{group:"languages"},{default:a(()=>[e(p,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:a(()=>[e(l,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-server-jte:$ktor_version")'})]),_:1}),e(p,{title:"Gradle (Groovy)","group-key":"groovy"},{default:a(()=>[e(l,{lang:"Groovy",code:'            implementation "io.ktor:ktor-server-jte:$ktor_version"'})]),_:1}),e(p,{title:"Maven","group-key":"maven"},{default:a(()=>[e(l,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-server-jte-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),s[20]||(s[20]=i("blockquote",null,[i("p",null,[i("code",null,".kte"),t(" ファイルを処理するには、"),i("code",null,"gg.jte:jte-kotlin"),t(" アーティファクトをプロジェクトに追加する必要があります。")])],-1)),s[21]||(s[21]=i("h2",{id:"install_plugin",tabindex:"-1"},[t("Jte をインストールする "),i("a",{class:"header-anchor",href:"#install_plugin","aria-label":'Permalink to "Jte をインストールする {id="install_plugin"}"'},"​")],-1)),i("p",null,[s[6]||(s[6]=t(" アプリケーションに ")),s[7]||(s[7]=i("code",null,"Jte",-1)),s[8]||(s[8]=t(" プラグインを")),s[9]||(s[9]=i("a",{href:"#install"},"インストール",-1)),s[10]||(s[10]=t("するには、指定された")),e(r,{href:"/ktor/server-modules",summary:"モジュールを使用すると、ルートをグループ化してアプリケーションを構造化できます。"},{default:a(()=>s[5]||(s[5]=[t("モジュール")])),_:1}),s[11]||(s[11]=t("の ")),s[12]||(s[12]=i("code",null,"install",-1)),s[13]||(s[13]=t(" 関数に渡します。以下のコードスニペットは、")),s[14]||(s[14]=i("code",null,"Jte",-1)),s[15]||(s[15]=t(" をインストールする方法を示しています... "))]),e(g,null,{default:a(()=>s[16]||(s[16]=[i("li",null,[t(" ... "),i("code",null,"embeddedServer"),t(" 関数呼び出し内。 ")],-1),i("li",null,[t(" ... 明示的に定義された "),i("code",null,"module"),t(" ( "),i("code",null,"Application"),t(" クラスの拡張関数) 内。 ")],-1)])),_:1}),e(o,null,{default:a(()=>[e(p,{title:"embeddedServer"},{default:a(()=>[e(l,{lang:"kotlin",code:`            import io.ktor.server.engine.*
            import io.ktor.server.netty.*
            import io.ktor.server.application.*
            import io.ktor.server.jte.*

            fun main() {
                embeddedServer(Netty, port = 8080) {
                    install(Jte)
                    // ...
                }.start(wait = true)
            }`})]),_:1}),e(p,{title:"module"},{default:a(()=>[e(l,{lang:"kotlin",code:`            import io.ktor.server.application.*
            import io.ktor.server.jte.*
            // ...
            fun Application.module() {
                install(Jte)
                // ...
            }`})]),_:1})]),_:1}),s[22]||(s[22]=c(`<p><code>install</code> ブロック内で、JTEテンプレートのロード方法を<a href="#configure">設定</a>できます。</p><h2 id="configure" tabindex="-1">Jte を設定する <a class="header-anchor" href="#configure" aria-label="Permalink to &quot;Jte を設定する {id=&quot;configure&quot;}&quot;">​</a></h2><h3 id="template_loading" tabindex="-1">テンプレートのロードを設定する <a class="header-anchor" href="#template_loading" aria-label="Permalink to &quot;テンプレートのロードを設定する {id=&quot;template_loading&quot;}&quot;">​</a></h3><p>JTEテンプレートをロードするには、次の手順を実行する必要があります。</p><ol><li>テンプレートコードを解決するために使用される <code>CodeResolver</code> を作成します。たとえば、特定のディレクトリからテンプレートをロードするように <code>DirectoryCodeResolver</code> を構成したり、アプリケーションリソースからテンプレートをロードするように <code>ResourceCodeResolver</code> を構成したりできます。</li><li><code>templateEngine</code> プロパティを使用してテンプレートエンジンを指定します。これは、作成された <code>CodeResolver</code> を使用して、テンプレートをネイティブのJava/Kotlinコードに変換します。</li></ol><p>例えば、以下のコードスニペットは、Ktorが <code>templates</code> ディレクトリ内のJTEテンプレートを検索できるようにします。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> gg.jte.TemplateEngine</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> gg.jte.resolve.DirectoryCodeResolver</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.application.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.jte.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> java.nio.file.Path</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Jte) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> resolver </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DirectoryCodeResolver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Path.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;templates&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        templateEngine </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TemplateEngine.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(resolver, gg.jte.ContentType.Html)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="use_template" tabindex="-1">応答でテンプレートを送信する <a class="header-anchor" href="#use_template" aria-label="Permalink to &quot;応答でテンプレートを送信する {id=&quot;use_template&quot;}&quot;">​</a></h3><p><code>templates</code> ディレクトリに <code>index.kte</code> テンプレートがあるとします。</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@param id: Int</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@param name: String</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Hello, \${name}!&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>指定された<a href="./server-routing">ルート</a>でテンプレートを使用するには、<code>JteContent</code> を <code>call.respond</code> メソッドに次のように渡します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> params </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mapOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> to </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> to </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;John&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respond</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">JteContent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;index.kte&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, params))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,12))])}const A=u(v,[["render",F]]);export{q as __pageData,A as default};
