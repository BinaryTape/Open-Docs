import{_ as t,a as e,b as l,c as n}from"./chunks/wasm-composeapp-browser.n73x6mgF.js";import{_ as p,a as r}from"./chunks/wasm-custom-formatters-firefox.C2LVO8ja.js";import{_ as o,a as h,b as k,c as d,d as c,e as g}from"./chunks/wasm-debug-scope.e8jm_6Gj.js";import{_ as m}from"./chunks/slack.7XnOPcJK.js";import{_ as E,c as u,o as b,ag as i,j as a,a as y}from"./chunks/framework.Bksy39di.js";const T=JSON.parse('{"title":"Kotlin/Wasm コードのデバッグ","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/wasm-debugging.md","filePath":"ja/kotlin/wasm-debugging.md","lastUpdated":1754307826000}'),f={name:"ja/kotlin/wasm-debugging.md"};function _(v,s,F,w,C,D){return b(),u("div",null,s[0]||(s[0]=[i('<h1 id="kotlin-wasm-コードのデバッグ" tabindex="-1">Kotlin/Wasm コードのデバッグ <a class="header-anchor" href="#kotlin-wasm-コードのデバッグ" aria-label="Permalink to &quot;Kotlin/Wasm コードのデバッグ&quot;">​</a></h1><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Kotlin/Wasm は <a href="/ja/kotlin/components-stability">アルファ版</a>です。これは予告なく変更される可能性があります。</p></div><p>このチュートリアルでは、ブラウザを使用して Kotlin/Wasm でビルドされた <a href="https://www.jetbrains.com/lp/compose-multiplatform/" target="_blank" rel="noreferrer">Compose Multiplatform</a> アプリケーションをデバッグする方法を説明します。</p><h2 id="開始する前に" tabindex="-1">開始する前に <a class="header-anchor" href="#開始する前に" aria-label="Permalink to &quot;開始する前に&quot;">​</a></h2><p>Kotlin Multiplatform ウィザードを使用してプロジェクトを作成します:</p><ol><li><p><a href="https://kmp.jetbrains.com/#newProject" target="_blank" rel="noreferrer">Kotlin Multiplatform ウィザード</a>を開きます。</p></li><li><p><strong>New Project</strong> タブで、プロジェクト名と ID を任意に変更します。このチュートリアルでは、名前を「WasmDemo」、ID を「wasm.project.demo」に設定します。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>これらはプロジェクトディレクトリの名前と ID です。そのままにしておくこともできます。</p></div></li><li><p><strong>Web</strong> オプションを選択します。他のオプションが選択されていないことを確認してください。</p></li><li><p><strong>Download</strong> ボタンをクリックし、結果として得られるアーカイブを解凍します。</p><p><img src="'+t+'" alt="Kotlin Multiplatform wizard" width="450"></p></li></ol><h2 id="intellij-idea-でプロジェクトを開く" tabindex="-1">IntelliJ IDEA でプロジェクトを開く <a class="header-anchor" href="#intellij-idea-でプロジェクトを開く" aria-label="Permalink to &quot;IntelliJ IDEA でプロジェクトを開く&quot;">​</a></h2><ol><li><a href="https://www.jetbrains.com/idea/" target="_blank" rel="noreferrer">IntelliJ IDEA</a> の最新バージョンをダウンロードしてインストールします。</li><li>IntelliJ IDEA のようこそ画面で、<strong>Open</strong> をクリックするか、メニューバーで <strong>File | Open</strong> を選択します。</li><li>解凍した「WasmDemo」フォルダに移動し、<strong>Open</strong> をクリックします。</li></ol><h2 id="アプリケーションを実行する" tabindex="-1">アプリケーションを実行する <a class="header-anchor" href="#アプリケーションを実行する" aria-label="Permalink to &quot;アプリケーションを実行する&quot;">​</a></h2><ol><li><p>IntelliJ IDEA で、<strong>View</strong> | <strong>Tool Windows</strong> | <strong>Gradle</strong> を選択して <strong>Gradle</strong> ツールウィンドウを開きます。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>タスクを正常にロードするには、Gradle JVM として Java 11 以降が必要です。</p></div></li><li><p><strong>composeApp</strong> | <strong>Tasks</strong> | <strong>kotlin browser</strong> で、<strong>wasmJsBrowserDevelopmentRun</strong> タスクを選択して実行します。</p><p><img src="'+e+'" alt="Run the Gradle task" width="450"></p><p>あるいは、<code>WasmDemo</code> のルートディレクトリからターミナルで以下のコマンドを実行することもできます:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wasmJsBrowserDevelopmentRun</span></span></code></pre></div></li><li><p>アプリケーションが起動したら、ブラウザで以下の URL を開きます:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">http://localhost:8080/</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>ポート番号は、8080 ポートが利用できない場合があるため、異なる場合があります。実際のポート番号は Gradle ビルドコンソールに表示されます。</p></div><p>「Click me!」ボタンが表示されます。これをクリックします:</p><p><img src="'+l+'" alt="Click me" width="550"></p><p>すると、Compose Multiplatform のロゴが表示されます:</p><p><img src="'+n+'" alt="Compose app in browser" width="550"></p></li></ol><h2 id="ブラウザでデバッグする" tabindex="-1">ブラウザでデバッグする <a class="header-anchor" href="#ブラウザでデバッグする" aria-label="Permalink to &quot;ブラウザでデバッグする&quot;">​</a></h2><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>現在、デバッグはブラウザでのみ利用可能です。将来的には、<a href="https://youtrack.jetbrains.com/issue/KT-64683/Kotlin-Wasm-debugging-in-IntelliJ-IDEA" target="_blank" rel="noreferrer">IntelliJ IDEA</a> でコードをデバッグできるようになります。</p></div><p>この Compose Multiplatform アプリケーションは、追加の設定なしで、すぐにブラウザでデバッグできます。</p><p>ただし、他のプロジェクトでは、Gradle ビルドファイルに追加の設定を行う必要がある場合があります。デバッグのためにブラウザを設定する方法の詳細については、次のセクションを展開してください。</p>',14),a("h3",{"initial-collapse-state":"collapsed",collapsible:"true",id:"デバッグのためにブラウザを設定する",tabindex:"-1"},[y("デバッグのためにブラウザを設定する "),a("a",{class:"header-anchor",href:"#デバッグのためにブラウザを設定する","aria-label":'Permalink to "デバッグのためにブラウザを設定する {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1),i(`<h4 id="プロジェクトのソースへのアクセスを有効にする" tabindex="-1">プロジェクトのソースへのアクセスを有効にする <a class="header-anchor" href="#プロジェクトのソースへのアクセスを有効にする" aria-label="Permalink to &quot;プロジェクトのソースへのアクセスを有効にする&quot;">​</a></h4><p>デフォルトでは、ブラウザはデバッグに必要なプロジェクトのソースの一部にアクセスできません。アクセスを提供するために、Webpack DevServer を構成してこれらのソースを提供できます。<code>ComposeApp</code> ディレクトリにある <code>build.gradle.kts</code> ファイルに以下のコードスニペットを追加します。</p><p>このインポートをトップレベルの宣言として追加します:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.kotlin.gradle.targets.js.webpack.KotlinWebpackConfig</span></span></code></pre></div><p><code>kotlin{}</code> 内の <code>wasmJs{}</code> ターゲット DSL および <code>browser{}</code> プラットフォーム DSL にある <code>commonWebpackConfig{}</code> ブロック内に、このコードスニペットを追加します:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">devServer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (devServer ?: KotlinWebpackConfig.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DevServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    static </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (static ?: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mutableListOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Serve sources to debug inside browser</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(project.rootDir.path)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(project.projectDir.path)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>結果として得られるコードブロックは以下のようになります:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalWasmDsl::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    wasmJs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        moduleName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;composeApp&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        browser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            commonWebpackConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                outputFileName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;composeApp.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                devServer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (devServer ?: KotlinWebpackConfig.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DevServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    static </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (static ?: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mutableListOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                        // Serve sources to debug inside browser</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                        add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(project.rootDir.path)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                        add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(project.projectDir.path)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                } </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>現在、ライブラリのソースはデバッグできません。<a href="https://youtrack.jetbrains.com/issue/KT-64685" target="_blank" rel="noreferrer">将来的にはこれをサポートする予定です</a>。</p></div><h4 id="カスタムフォーマッタを使用する" tabindex="-1">カスタムフォーマッタを使用する <a class="header-anchor" href="#カスタムフォーマッタを使用する" aria-label="Permalink to &quot;カスタムフォーマッタを使用する&quot;">​</a></h4><p>カスタムフォーマッタは、Kotlin/Wasm コードをデバッグする際に、変数値をよりユーザーフレンドリーで分かりやすい方法で表示し、特定するのに役立ちます。</p><p>カスタムフォーマッタは開発ビルドでデフォルトで有効になっているため、追加の Gradle 設定は必要ありません。</p><p>この機能は、<a href="https://firefox-source-docs.mozilla.org/devtools-user/custom_formatters/index.html" target="_blank" rel="noreferrer">カスタムフォーマッタ API</a> を使用しているため、Firefox および Chromium ベースのブラウザでサポートされています。</p><p>この機能を使用するには、ブラウザの開発者ツールでカスタムフォーマッタが有効になっていることを確認してください:</p><ul><li><p>Chrome DevTools では、<strong>Settings | Preferences | Console</strong> でカスタムフォーマッタのチェックボックスを見つけます:</p><p><img src="`+p+'" alt="Enable custom formatters in Chrome" width="400"></p></li><li><p>Firefox DevTools では、<strong>Settings | Advanced settings</strong> でカスタムフォーマッタのチェックボックスを見つけます:</p><p><img src="'+r+`" alt="Enable custom formatters in Firefox" width="400"></p></li></ul><p>カスタムフォーマッタは Kotlin/Wasm 開発ビルドで機能します。本番ビルドで特定の要件がある場合は、Gradle 設定をそれに応じて調整する必要があります。以下のコンパイラオプションを <code>wasmJs {}</code> ブロックに追加します:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    wasmJs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            freeCompilerArgs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xwasm-debugger-custom-formatters&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>カスタムフォーマッタを有効にした後、デバッグチュートリアルを続行できます。</p><h3 id="kotlin-wasm-アプリケーションをデバッグする" tabindex="-1">Kotlin/Wasm アプリケーションをデバッグする <a class="header-anchor" href="#kotlin-wasm-アプリケーションをデバッグする" aria-label="Permalink to &quot;Kotlin/Wasm アプリケーションをデバッグする&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>このチュートリアルでは Chrome ブラウザを使用していますが、他のブラウザでもこれらの手順を実行できるはずです。詳細については、<a href="/ja/kotlin/wasm-troubleshooting#browser-versions">ブラウザのバージョン</a>を参照してください。</p></div><ol><li><p>アプリケーションのブラウザウィンドウで右クリックし、<strong>Inspect</strong> アクションを選択して開発者ツールにアクセスします。あるいは、<strong>F12</strong> ショートカットを使用するか、<strong>View</strong> | <strong>Developer</strong> | <strong>Developer Tools</strong> を選択することもできます。</p></li><li><p><strong>Sources</strong> タブに切り替え、デバッグする Kotlin ファイルを選択します。このチュートリアルでは、<code>Greeting.kt</code> ファイルを扱います。</p></li><li><p>行番号をクリックして、調べたいコードにブレークポイントを設定します。ブレークポイントを設定できるのは、数字が濃い色の行のみです。</p><p><img src="`+o+'" alt="Set breakpoints" width="700"></p></li><li><p><strong>Click me!</strong> ボタンをクリックしてアプリケーションを操作します。このアクションによりコードの実行がトリガーされ、実行がブレークポイントに到達するとデバッガが一時停止します。</p></li><li><p>デバッグペインで、デバッグコントロールボタンを使用して、ブレークポイントでの変数とコードの実行を調べます:</p><ul><li><img src="'+h+'" alt="Step into" width="30" type="joined"> 関数をさらに深く調査するためにステップインします。</li><li><img src="'+k+'" alt="Step over" width="30" type="joined"> 現在の行を実行し、次の行で一時停止するためにステップオーバーします。</li><li><img src="'+d+'" alt="Step out" width="30" type="joined"> 現在の関数を終了するまでコードを実行するためにステップアウトします。</li></ul><p><img src="'+c+'" alt="Debug controls" width="450"></p></li><li><p><strong>Call stack</strong> と <strong>Scope</strong> ペインをチェックして、関数呼び出しのシーケンスをトレースし、エラーの場所を特定します。</p><p><img src="'+g+'" alt="Check call stack" width="450"></p><p>変数値をより分かりやすく視覚化するには、「<a href="#configure-your-browser-for-debugging">デバッグのためにブラウザを設定する</a>」セクションの「<em>カスタムフォーマッタを使用する</em>」を参照してください。</p></li><li><p>コードを変更し、<a href="#run-the-application">アプリケーションを再度実行</a>して、すべてが期待どおりに機能することを確認します。</p></li><li><p>ブレークポイントのある行番号をクリックして、ブレークポイントを削除します。</p></li></ol><h2 id="フィードバックを残す" tabindex="-1">フィードバックを残す <a class="header-anchor" href="#フィードバックを残す" aria-label="Permalink to &quot;フィードバックを残す&quot;">​</a></h2><p>デバッグ体験に関するフィードバックをいただければ幸いです！</p><ul><li><img src="'+m+'" alt="Slack" width="25" type="joined"> Slack: <a href="https://surveys.jetbrains.com/s3/kotlin-slack-sign-up" target="_blank" rel="noreferrer">Slack の招待を取得</a>し、直接開発者に <a href="https://kotlinlang.slack.com/archives/CDFP59223" target="_blank" rel="noreferrer">#webassembly</a> チャンネルでフィードバックを提供してください。</li><li><a href="https://youtrack.jetbrains.com/issue/KT-56492" target="_blank" rel="noreferrer">YouTrack</a> でフィードバックを提供してください。</li></ul><h2 id="次のステップ" tabindex="-1">次のステップ <a class="header-anchor" href="#次のステップ" aria-label="Permalink to &quot;次のステップ&quot;">​</a></h2><ul><li>この <a href="https://www.youtube.com/watch?v=t3FUWfJWrjU&amp;t=2703s" target="_blank" rel="noreferrer">YouTube ビデオ</a> で Kotlin/Wasm のデバッグの実際の様子をご覧ください。</li><li><code>kotlin-wasm-examples</code> リポジトリから Kotlin/Wasm の例を試してみてください: <ul><li><a href="https://github.com/Kotlin/kotlin-wasm-examples/tree/main/compose-imageviewer" target="_blank" rel="noreferrer">Compose image viewer</a></li><li><a href="https://github.com/Kotlin/kotlin-wasm-examples/tree/main/compose-jetsnack" target="_blank" rel="noreferrer">Jetsnack application</a></li><li><a href="https://github.com/Kotlin/kotlin-wasm-examples/tree/main/nodejs-example" target="_blank" rel="noreferrer">Node.js example</a></li><li><a href="https://github.com/Kotlin/kotlin-wasm-examples/tree/main/wasi-example" target="_blank" rel="noreferrer">WASI example</a></li><li><a href="https://github.com/Kotlin/kotlin-wasm-examples/tree/main/compose-example" target="_blank" rel="noreferrer">Compose example</a></li></ul></li></ul>',26)]))}const I=E(f,[["render",_]]);export{T as __pageData,I as default};
