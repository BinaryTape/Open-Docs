import{_ as r,C as k,c as o,o as d,ag as e,G as t,j as i,w as l,a as s}from"./chunks/framework.Bksy39di.js";const C=JSON.parse('{"title":"Kotlin 1.5.30 的新功能","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/whatsnew1530.md","filePath":"zh-Hant/kotlin/whatsnew1530.md","lastUpdated":1754307826000}'),E={name:"zh-Hant/kotlin/whatsnew1530.md"};function g(c,a,y,u,F,m){const p=k("YouTubeVideo"),n=k("tab"),h=k("tabs");return d(),o("div",null,[a[18]||(a[18]=e('<h1 id="kotlin-1-5-30-的新功能" tabindex="-1">Kotlin 1.5.30 的新功能 <a class="header-anchor" href="#kotlin-1-5-30-的新功能" aria-label="Permalink to &quot;Kotlin 1.5.30 的新功能&quot;">​</a></h1><p><a href="/zh-Hant/kotlin/releases#release-details">發佈日期：2021 年 8 月 24 日</a></p><p>Kotlin 1.5.30 提供了語言更新，包括未來變更的預覽、平台支援和工具的各項改進，以及新的標準函式庫函數。</p><p>以下是一些主要改進：</p><ul><li>語言功能，包括實驗性的 <code>sealed when</code> 語句、使用選擇性加入要求的變更等等</li><li>對 Apple 晶片的原生支援</li><li>Kotlin/JS IR 後端進入 Beta 階段</li><li>改進的 Gradle 插件體驗</li></ul><p>您也可以在<a href="https://blog.jetbrains.com/kotlin/2021/08/kotlin-1-5-30-released/" target="_blank" rel="noreferrer">發佈部落格文章</a>和這部影片中找到變更的簡要概述：</p>',6)),t(p,{src:"https://www.youtube.com/v/rNbb3A9IdOo",title:"Kotlin 1.5.30"}),a[19]||(a[19]=e(`<h2 id="語言功能" tabindex="-1">語言功能 <a class="header-anchor" href="#語言功能" aria-label="Permalink to &quot;語言功能&quot;">​</a></h2><p>Kotlin 1.5.30 呈現了未來語言變更的預覽，並改進了選擇性加入要求機制和型別推斷：</p><ul><li><a href="#exhaustive-when-statements-for-sealed-and-boolean-subjects">針對 <code>sealed</code> 類別和布林主體的詳盡 <code>when</code> 語句</a></li><li><a href="#suspending-functions-as-supertypes">暫停函式作為超型別</a></li><li><a href="#requiring-opt-in-on-implicit-usages-of-experimental-apis">要求對實驗性 API 的隱式使用進行選擇性加入</a></li><li><a href="#changes-to-using-opt-in-requirement-annotations-with-different-targets">針對不同目標使用選擇性加入要求註解的變更</a></li><li><a href="#improvements-to-type-inference-for-recursive-generic-types">遞迴泛型型別的型別推斷改進</a></li><li><a href="#eliminating-builder-inference-restrictions">消除建構器推斷限制</a></li></ul><h3 id="針對-sealed-類別和布林主體的詳盡-when-語句" tabindex="-1">針對 <code>sealed</code> 類別和布林主體的詳盡 <code>when</code> 語句 <a class="header-anchor" href="#針對-sealed-類別和布林主體的詳盡-when-語句" aria-label="Permalink to &quot;針對 \`sealed\` 類別和布林主體的詳盡 \`when\` 語句&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>對於 <code>sealed</code>（詳盡）<code>when</code> 語句的支援是<a href="/zh-Hant/kotlin/components-stability">實驗性</a>的。它可能會隨時被移除或變更。 需要選擇性加入（詳情請見下文），您應僅用於評估目的。我們非常感謝您在 <a href="https://youtrack.jetbrains.com/issue/KT-12380" target="_blank" rel="noreferrer">YouTrack</a> 上提供回饋。</p></div><p>一個「詳盡的」 <a href="/zh-Hant/kotlin/control-flow#when-expressions-and-statements"><code>when</code></a> 語句包含其主體所有可能型別或值的分支，或者針對特定型別並包含一個 <code>else</code> 分支以涵蓋任何其餘情況。</p><p>我們計劃很快禁止非詳盡的 <code>when</code> 語句，以使行為與 <code>when</code> 表達式保持一致。為了確保平穩遷移，您可以配置編譯器，使其在遇到帶有 <code>sealed</code> 類別或布林的非詳盡 <code>when</code> 語句時報告警告。此類警告將在 Kotlin 1.6 中預設出現，並將在稍後成為錯誤。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>列舉 (Enums) 已會收到警告。</p></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">sealed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OFF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Mode</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Mode.ON</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    when</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x) { </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Mode.ON </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ON&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// WARNING: Non exhaustive &#39;when&#39; statements on sealed classes/interfaces </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// will be prohibited in 1.7, add an &#39;OFF&#39; or &#39;else&#39; branch instead</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Boolean</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    when</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (y) {  </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        true</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;true&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// WARNING: Non exhaustive &#39;when&#39; statements on Booleans will be prohibited </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// in 1.7, add a &#39;false&#39; or &#39;else&#39; branch instead</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>要在 Kotlin 1.5.30 中啟用此功能，請使用語言版本 <code>1.6</code>。您也可以透過啟用<a href="/zh-Hant/kotlin/whatsnew13#progressive-mode">漸進模式</a>將警告變更為錯誤。</p>`,10)),t(h,{group:"build-script"},{default:l(()=>[t(n,{title:"Kotlin","group-key":"kotlin"},{default:l(()=>a[0]||(a[0]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    sourceSets."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"all"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        languageSettings."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"apply"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            languageVersion "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "1.6"')]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"            //progressiveMode = true"),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}}," // false by default")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),t(n,{title:"Groovy","group-key":"groovy"},{default:l(()=>a[1]||(a[1]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"kotlin {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    sourceSets"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"all {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        languageSettings {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            languageVersion "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," '1.6'")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"            //progressiveMode = true"),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}}," // false by default")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),a[20]||(a[20]=e(`<h3 id="暫停函式作為超型別" tabindex="-1">暫停函式作為超型別 <a class="header-anchor" href="#暫停函式作為超型別" aria-label="Permalink to &quot;暫停函式作為超型別&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>對於暫停函式作為超型別的支援是<a href="/zh-Hant/kotlin/components-stability">實驗性</a>的。它可能會隨時被移除或變更。 需要選擇性加入（詳情請見下文），您應僅用於評估目的。我們非常感謝您在 <a href="https://youtrack.jetbrains.com/issue/KT-18707" target="_blank" rel="noreferrer">YouTrack</a> 上提供回饋。</p></div><p>Kotlin 1.5.30 提供了在某些限制下將 <code>suspend</code> 函式型別用作超型別的預覽功能。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">suspend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> suspend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> invoke</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TODO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>使用 <code>-language-version 1.6</code> 編譯器選項來啟用該功能：</p>`,5)),t(h,{group:"build-script"},{default:l(()=>[t(n,{title:"Kotlin","group-key":"kotlin"},{default:l(()=>a[2]||(a[2]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    sourceSets."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"all"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        languageSettings."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"apply"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            languageVersion "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "1.6"')]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),t(n,{title:"Groovy","group-key":"groovy"},{default:l(()=>a[3]||(a[3]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"kotlin {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    sourceSets"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"all {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        languageSettings {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            languageVersion "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," '1.6'")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),a[21]||(a[21]=e(`<p>該功能有以下限制：</p><ul><li>您不能將普通的函式型別和 <code>suspend</code> 函式型別混合作為超型別。這是由於 JVM 後端中 <code>suspend</code> 函式型別的實作細節所致。它們在其中被表示為帶有標記介面的普通函式型別。由於標記介面，無法區分哪些超介面是 <code>suspend</code> 的，哪些是普通的。</li><li>您不能使用多個 <code>suspend</code> 函式超型別。如果存在型別檢查，您也不能使用多個普通的函式超型別。</li></ul><h3 id="要求對實驗性-api-的隱式使用進行選擇性加入" tabindex="-1">要求對實驗性 API 的隱式使用進行選擇性加入 <a class="header-anchor" href="#要求對實驗性-api-的隱式使用進行選擇性加入" aria-label="Permalink to &quot;要求對實驗性 API 的隱式使用進行選擇性加入&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>選擇性加入要求機制是<a href="/zh-Hant/kotlin/components-stability">實驗性</a>的。 它可能會隨時變更。 <a href="/zh-Hant/kotlin/opt-in-requirements">了解如何選擇性加入</a>。 僅用於評估目的。我們非常感謝您在 <a href="https://youtrack.jetbrains.com/issues/KT" target="_blank" rel="noreferrer">YouTrack</a> 上提供回饋。</p></div><p>函式庫的作者可以將實驗性 API 標記為<a href="/zh-Hant/kotlin/opt-in-requirements#create-opt-in-requirement-annotations">需要選擇性加入</a>，以告知使用者其實驗性狀態。當使用該 API 時，編譯器會發出警告或錯誤，並要求<a href="/zh-Hant/kotlin/opt-in-requirements#opt-in-to-api">明確同意</a>以抑制它。</p><p>在 Kotlin 1.5.30 中，編譯器將簽章中包含實驗性型別的任何聲明視為實驗性。也就是說，即使聲明未明確標記為需要選擇性加入，它也要求對實驗性 API 的隱式使用進行選擇性加入。例如，如果函式的回傳型別被標記為實驗性 API 元素，則該函式的使用需要您選擇性加入。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Library code</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@RequiresOptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;This API is experimental.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Retention</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(AnnotationRetention.BINARY)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(AnnotationTarget.CLASS)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">annotation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyDateTime</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Opt-in requirement annotation</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@MyDateTime</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DateProvider</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // A class requiring opt-in</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Client code</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Warning: experimental API usage</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createDateSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DateProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* ... */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getDate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dateSource </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createDateSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Also warning: experimental API usage</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ... </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>了解更多關於<a href="/zh-Hant/kotlin/opt-in-requirements">選擇性加入要求</a>的資訊。</p><h3 id="針對不同目標使用選擇性加入要求註解的變更" tabindex="-1">針對不同目標使用選擇性加入要求註解的變更 <a class="header-anchor" href="#針對不同目標使用選擇性加入要求註解的變更" aria-label="Permalink to &quot;針對不同目標使用選擇性加入要求註解的變更&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>選擇性加入要求機制是<a href="/zh-Hant/kotlin/components-stability">實驗性</a>的。 它可能會隨時變更。 <a href="/zh-Hant/kotlin/opt-in-requirements">了解如何選擇性加入</a>。 僅用於評估目的。我們非常感謝您在 <a href="https://youtrack.jetbrains.com/issues/KT" target="_blank" rel="noreferrer">YouTrack</a> 上提供回饋。</p></div><p>Kotlin 1.5.30 針對在不同<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.annotation/-target/" target="_blank" rel="noreferrer">目標</a>上使用和聲明選擇性加入要求註解，引入了新的規則。編譯器現在會針對在編譯時難以處理的使用案例報告錯誤。在 Kotlin 1.5.30 中：</p><ul><li>禁止在使用點標記局部變數和值參數與選擇性加入要求註解。</li><li>只有當其基本聲明也被標記時，才允許標記覆寫。</li><li>禁止標記支援欄位和 getter。您可以改為標記基本屬性。</li><li>禁止在選擇性加入要求註解聲明點設定 <code>TYPE</code> 和 <code>TYPE_PARAMETER</code> 註解目標。</li></ul><p>了解更多關於<a href="/zh-Hant/kotlin/opt-in-requirements">選擇性加入要求</a>的資訊。</p><h3 id="遞迴泛型型別的型別推斷改進" tabindex="-1">遞迴泛型型別的型別推斷改進 <a class="header-anchor" href="#遞迴泛型型別的型別推斷改進" aria-label="Permalink to &quot;遞迴泛型型別的型別推斷改進&quot;">​</a></h3><p>在 Kotlin 和 Java 中，您可以定義一個遞迴泛型型別，該型別在其型別參數中引用自身。在 Kotlin 1.5.30 中，Kotlin 編譯器可以僅根據相應型別參數的上限來推斷型別引數，如果它是遞迴泛型型別。這使得創建各種遞迴泛型型別的模式成為可能，這些模式在 Java 中常用於建構器 API。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Kotlin 1.5.20</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> containerA </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PostgreSQLContainer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(DockerImageName.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;postgres:13-alpine&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    withDatabaseName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;db&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    withUsername</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    withPassword</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;password&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    withInitScript</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sql/schema.sql&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Kotlin 1.5.30</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> containerB </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PostgreSQLContainer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(DockerImageName.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;postgres:13-alpine&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withDatabaseName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;db&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withUsername</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withPassword</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;password&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withInitScript</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sql/schema.sql&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>您可以透過傳遞 <code>-Xself-upper-bound-inference</code> 或 <code>-language-version 1.6</code> 編譯器選項來啟用這些改進。請參閱 <a href="https://youtrack.jetbrains.com/issue/KT-40804" target="_blank" rel="noreferrer">此 YouTrack 議題</a> 中新支援使用案例的其他範例。</p><h3 id="消除建構器推斷限制" tabindex="-1">消除建構器推斷限制 <a class="header-anchor" href="#消除建構器推斷限制" aria-label="Permalink to &quot;消除建構器推斷限制&quot;">​</a></h3><p>建構器推斷是一種特殊型別的型別推斷，它允許您根據其 Lambda 引數內其他呼叫的型別資訊來推斷呼叫的型別引數。這在呼叫泛型建構器函式（例如 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/build-list.html" target="_blank" rel="noreferrer"><code>buildList()</code></a> 或 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.sequences/sequence.html" target="_blank" rel="noreferrer"><code>sequence()</code></a>）時非常有用：<code>buildList { add(&quot;string&quot;) }</code>。</p><p>在此類 Lambda 引數內部，先前對使用建構器推斷嘗試推斷的型別資訊存在限制。這意味著您只能指定它而不能取得它。例如，您不能在 <code>buildList()</code> 的 Lambda 引數內部呼叫 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-list/get.html" target="_blank" rel="noreferrer"><code>get()</code></a> 而不明確指定型別引數。</p><p>Kotlin 1.5.30 透過 <code>-Xunrestricted-builder-inference</code> 編譯器選項移除了這些限制。添加此選項以啟用先前禁止在泛型建構器函式的 Lambda 引數內部進行的呼叫：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@kotlin.ExperimentalStdlibApi</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> list </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> buildList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;b&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        removeAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@kotlin.ExperimentalStdlibApi</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> map </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> buildMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    put</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    put</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;b&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    put</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>此外，您也可以使用 <code>-language-version 1.6</code> 編譯器選項啟用此功能。</p><h2 id="kotlin-jvm" tabindex="-1">Kotlin/JVM <a class="header-anchor" href="#kotlin-jvm" aria-label="Permalink to &quot;Kotlin/JVM&quot;">​</a></h2><p>透過 Kotlin 1.5.30，Kotlin/JVM 獲得了以下功能：</p><ul><li><a href="#instantiation-of-annotation-classes">註解類別的實例化</a></li><li><a href="#improved-nullability-annotation-support-configuration">改進的空值性註解支援配置</a></li></ul><p>有關 JVM 平台上 Kotlin Gradle 插件更新的資訊，請參閱 <a href="#gradle">Gradle</a> 部分。</p><h3 id="註解類別的實例化" tabindex="-1">註解類別的實例化 <a class="header-anchor" href="#註解類別的實例化" aria-label="Permalink to &quot;註解類別的實例化&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>註解類別的實例化是<a href="/zh-Hant/kotlin/components-stability">實驗性</a>的。它可能會隨時被移除或變更。 需要選擇性加入（詳情請見下文），您應僅用於評估目的。我們非常感謝您在 <a href="https://youtrack.jetbrains.com/issue/KT-45395" target="_blank" rel="noreferrer">YouTrack</a> 上提供回饋。</p></div><p>透過 Kotlin 1.5.30，您現在可以在任意程式碼中呼叫<a href="/zh-Hant/kotlin/annotations">註解類別</a>的建構函式以取得結果實例。此功能涵蓋了與 Java 慣例相同的用例，該慣例允許實作註解介面。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">annotation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> InfoMarker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> info: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> processInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(marker: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">InfoMarker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (args.size </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        processInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAnnotationReflective</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    else</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        processInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">InfoMarker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;default&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>使用 <code>-language-version 1.6</code> 編譯器選項來啟用此功能。請注意，所有目前的註解類別限制，例如定義非 <code>val</code> 參數或與次級建構函式不同的成員的限制，仍然保持不變。</p><p>在<a href="https://github.com/Kotlin/KEEP/blob/master/proposals/annotation-instantiation.md" target="_blank" rel="noreferrer">此 KEEP</a> 中了解更多關於註解類別實例化的資訊。</p><h3 id="改進的空值性註解支援配置" tabindex="-1">改進的空值性註解支援配置 <a class="header-anchor" href="#改進的空值性註解支援配置" aria-label="Permalink to &quot;改進的空值性註解支援配置&quot;">​</a></h3><p>Kotlin 編譯器可以讀取各種型別的<a href="/zh-Hant/kotlin/java-interop#nullability-annotations">空值性註解</a>以從 Java 取得空值性資訊。此資訊允許它在呼叫 Java 程式碼時報告 Kotlin 中的空值性不匹配。</p><p>在 Kotlin 1.5.30 中，您可以指定編譯器是否根據來自特定型別的空值性註解的資訊報告空值性不匹配。只需使用編譯器選項 <code>-Xnullability-annotations=@&lt;package-name&gt;:&lt;report-level&gt;</code>。在引數中，指定完全合格的空值性註解套件以及以下報告級別之一：</p><ul><li><code>ignore</code> 以忽略空值性不匹配</li><li><code>warn</code> 以報告警告</li><li><code>strict</code> 以報告錯誤。</li></ul><p>請參閱<a href="/zh-Hant/kotlin/java-interop#nullability-annotations">支援的空值性註解的完整列表</a>及其完全合格的套件名稱。</p><p>以下是一個範例，展示如何為新支援的 <a href="https://github.com/ReactiveX/RxJava" target="_blank" rel="noreferrer">RxJava</a> 3 空值性註解啟用錯誤報告：<code>-Xnullability-annotations=@io.reactivex.rxjava3.annotations:strict</code>。請注意，所有此類空值性不匹配預設為警告。</p><h2 id="kotlin-native" tabindex="-1">Kotlin/Native <a class="header-anchor" href="#kotlin-native" aria-label="Permalink to &quot;Kotlin/Native&quot;">​</a></h2><p>Kotlin/Native 獲得了各種變更和改進：</p><ul><li><a href="#apple-silicon-support">Apple 晶片支援</a></li><li><a href="#improved-kotlin-dsl-for-the-cocoapods-gradle-plugin">改進的 CocoaPods Gradle 插件的 Kotlin DSL</a></li><li><a href="#experimental-interoperability-with-swift-5-5-async-await">與 Swift 5.5 <code>async/await</code> 的實驗性互通性</a></li><li><a href="#improved-swift-objective-c-mapping-for-objects-and-companion-objects">改進的 Swift/Objective-C 物件和伴隨物件映射</a></li><li><a href="#deprecation-of-linkage-against-dlls-without-import-libraries-for-mingw-targets">針對 MinGW 目標棄用不含匯入函式庫的 DLL 連結</a></li></ul><h3 id="apple-晶片支援" tabindex="-1">Apple 晶片支援 <a class="header-anchor" href="#apple-晶片支援" aria-label="Permalink to &quot;Apple 晶片支援&quot;">​</a></h3><p>Kotlin 1.5.30 引入了對 <a href="https://support.apple.com/en-us/HT211814" target="_blank" rel="noreferrer">Apple 晶片</a>的原生支援。</p><p>先前，Kotlin/Native 編譯器和工具需要在 Apple 晶片主機上工作時的 <a href="https://developer.apple.com/documentation/apple-silicon/about-the-rosetta-translation-environment" target="_blank" rel="noreferrer">Rosetta 轉譯環境</a>。在 Kotlin 1.5.30 中，不再需要轉譯環境 – 編譯器和工具可以在 Apple 晶片硬體上執行，無需任何額外操作。</p><p>我們還引入了新的目標，使 Kotlin 程式碼在 Apple 晶片上原生執行：</p><ul><li><code>macosArm64</code></li><li><code>iosSimulatorArm64</code></li><li><code>watchosSimulatorArm64</code></li><li><code>tvosSimulatorArm64</code></li></ul><p>它們在基於 Intel 和 Apple 晶片的主機上都可用。所有現有目標在 Apple 晶片主機上也可用。</p><p>請注意，在 1.5.30 中，我們僅在 <code>kotlin-multiplatform</code> Gradle 插件中為 Apple 晶片目標提供了基本支援。特別是，新的模擬器目標未包含在 <code>ios</code>、<code>tvos</code> 和 <code>watchos</code> 目標捷徑中。 我們將繼續努力改進新目標的使用者體驗。</p><h3 id="改進的-cocoapods-gradle-插件的-kotlin-dsl" tabindex="-1">改進的 CocoaPods Gradle 插件的 Kotlin DSL <a class="header-anchor" href="#改進的-cocoapods-gradle-插件的-kotlin-dsl" aria-label="Permalink to &quot;改進的 CocoaPods Gradle 插件的 Kotlin DSL&quot;">​</a></h3><h4 id="kotlin-native-框架的新參數" tabindex="-1">Kotlin/Native 框架的新參數 <a class="header-anchor" href="#kotlin-native-框架的新參數" aria-label="Permalink to &quot;Kotlin/Native 框架的新參數&quot;">​</a></h4><p>Kotlin 1.5.30 引入了改進的 CocoaPods Gradle 插件 DSL，用於 Kotlin/Native 框架。除了框架名稱外，您還可以在 Pod 配置中指定其他參數：</p><ul><li>指定框架的動態或靜態版本</li><li>明確啟用匯出依賴項</li><li>啟用 Bitcode 嵌入</li></ul><p>要使用新的 DSL，請將您的專案更新到 Kotlin 1.5.30，並在 <code>build.gradle(.kts)</code> 檔案的 <code>cocoapods</code> 部分中指定參數：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cocoapods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    frameworkName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;MyFramework&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // This property is deprecated </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // and will be removed in future versions</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // New DSL for framework configuration:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    framework</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // All Framework properties are supported</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Framework name configuration. Use this property instead of </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // deprecated &#39;frameworkName&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        baseName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;MyFramework&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Dynamic framework support</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        isStatic </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Dependency export</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">project</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;:anotherKMMModule&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        transitiveExport </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // This is default.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Bitcode embedding</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        embedBitcode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(BITCODE)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="支援-xcode-配置的自訂名稱" tabindex="-1">支援 Xcode 配置的自訂名稱 <a class="header-anchor" href="#支援-xcode-配置的自訂名稱" aria-label="Permalink to &quot;支援 Xcode 配置的自訂名稱&quot;">​</a></h4><p>Kotlin CocoaPods Gradle 插件支援 Xcode 建置配置中的自訂名稱。如果您在 Xcode 中為建置配置使用特殊名稱，例如 <code>Staging</code>，這也將有所幫助。</p><p>要指定自訂名稱，請在 <code>build.gradle(.kts)</code> 檔案的 <code>cocoapods</code> 部分中使用 <code>xcodeConfigurationToNativeBuildType</code> 參數：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cocoapods</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Maps custom Xcode configuration to NativeBuildType</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    xcodeConfigurationToNativeBuildType[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;CUSTOM_DEBUG&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NativeBuildType.DEBUG</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    xcodeConfigurationToNativeBuildType[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;CUSTOM_RELEASE&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NativeBuildType.RELEASE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>此參數不會出現在 Podspec 檔案中。當 Xcode 執行 Gradle 建置過程時，Kotlin CocoaPods Gradle 插件將選擇必要的原生建置型別。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>無需聲明 <code>Debug</code> 和 <code>Release</code> 配置，因為它們預設受支援。</p></div><h3 id="與-swift-5-5-async-await-的實驗性互通性" tabindex="-1">與 Swift 5.5 <code>async/await</code> 的實驗性互通性 <a class="header-anchor" href="#與-swift-5-5-async-await-的實驗性互通性" aria-label="Permalink to &quot;與 Swift 5.5 \`async/await\` 的實驗性互通性&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>與 Swift <code>async/await</code> 的並發互通性是<a href="/zh-Hant/kotlincomponents-stability.2md">實驗性</a>的。它可能會隨時被移除或變更。 您應僅用於評估目的。我們非常感謝您在 <a href="https://youtrack.jetbrains.com/issue/KT-47610" target="_blank" rel="noreferrer">YouTrack</a> 上提供回饋。</p></div><p>我們在 1.4.0 中添加了<a href="/zh-Hant/kotlin/whatsnew14#support-for-kotlin-s-suspending-functions-in-swift-and-objective-c">支援從 Objective-C 和 Swift 呼叫 Kotlin 的暫停函式</a>，現在我們正在改進它，以跟上 Swift 5.5 的新功能 – <a href="https://github.com/apple/swift-evolution/blob/main/proposals/0296-async-await.md" target="_blank" rel="noreferrer">帶有 <code>async</code> 和 <code>await</code> 修飾符的並發</a>。</p><p>Kotlin/Native 編譯器現在會為具有可空回傳型別的暫停函式，在生成的 Objective-C 標頭中發出 <code>_Nullable_result</code> 屬性。這使得從 Swift 呼叫它們作為 <code>async</code> 函式時，可以具有適當的空值性。</p><p>請注意，此功能是實驗性的，未來可能會受到 Kotlin 和 Swift 變更的影響。目前，我們提供此功能的預覽，它具有某些限制，我們渴望聽到您的想法。在<a href="https://youtrack.jetbrains.com/issue/KT-47610" target="_blank" rel="noreferrer">此 YouTrack 議題</a> 中了解其目前狀態並留下您的回饋。</p><h3 id="改進的-swift-objective-c-物件和伴隨物件映射" tabindex="-1">改進的 Swift/Objective-C 物件和伴隨物件映射 <a class="header-anchor" href="#改進的-swift-objective-c-物件和伴隨物件映射" aria-label="Permalink to &quot;改進的 Swift/Objective-C 物件和伴隨物件映射&quot;">​</a></h3><p>現在，以對於原生 iOS 開發人員更直觀的方式取得物件和伴隨物件。例如，如果您在 Kotlin 中有以下物件：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Some value&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    companion</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Some value&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>要在 Swift 中存取它們，您可以使用 <code>shared</code> 和 <code>companion</code> 屬性：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MyObject.shared</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MyObject.shared.x</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MyClass.companion</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MyClass.Companion.shared</span></span></code></pre></div><p>了解更多關於 <a href="/zh-Hant/kotlin/native-objc-interop">Swift/Objective-C 互通性</a>的資訊。</p><h3 id="針對-mingw-目標棄用不含匯入函式庫的-dll-連結" tabindex="-1">針對 MinGW 目標棄用不含匯入函式庫的 DLL 連結 <a class="header-anchor" href="#針對-mingw-目標棄用不含匯入函式庫的-dll-連結" aria-label="Permalink to &quot;針對 MinGW 目標棄用不含匯入函式庫的 DLL 連結&quot;">​</a></h3><p><a href="https://lld.llvm.org/" target="_blank" rel="noreferrer">LLD</a> 是 LLVM 專案中的連結器，我們計劃開始在 Kotlin/Native 中將其用於 MinGW 目標，因為它比預設的 ld.bfd 具有優勢 – 主要在於其更好的效能。</p><p>然而，最新穩定版 LLD 不支援針對 MinGW (Windows) 目標直接連結 DLL。此類連結需要使用<a href="https://stackoverflow.com/questions/3573475/how-does-the-import-library-work-details/3573527#3573527" target="_blank" rel="noreferrer">匯入函式庫</a>。儘管 Kotlin/Native 1.5.30 不需要它們，但我們正在添加警告以告知您此類用法與未來將成為 MinGW 預設連結器的 LLD 不兼容。</p><p>請在<a href="https://youtrack.jetbrains.com/issue/KT-47605" target="_blank" rel="noreferrer">此 YouTrack 議題</a> 中分享您對過渡到 LLD 連結器的想法和疑慮。</p><h2 id="kotlin-多平台" tabindex="-1">Kotlin 多平台 <a class="header-anchor" href="#kotlin-多平台" aria-label="Permalink to &quot;Kotlin 多平台&quot;">​</a></h2><p>1.5.30 為 Kotlin 多平台帶來了以下顯著更新：</p><ul><li><a href="#ability-to-use-custom-cinterop-libraries-in-shared-native-code">在共享原生程式碼中使用自訂 <code>cinterop</code> 函式庫的能力</a></li><li><a href="#support-for-xcframeworks">支援 XCFrameworks</a></li><li><a href="#new-default-publishing-setup-for-android-artifacts">Android 構件的新預設發佈設定</a></li></ul><h3 id="在共享原生程式碼中使用自訂-cinterop-函式庫的能力" tabindex="-1">在共享原生程式碼中使用自訂 <code>cinterop</code> 函式庫的能力 <a class="header-anchor" href="#在共享原生程式碼中使用自訂-cinterop-函式庫的能力" aria-label="Permalink to &quot;在共享原生程式碼中使用自訂 \`cinterop\` 函式庫的能力&quot;">​</a></h3><p>Kotlin 多平台提供了一個<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-share-on-platforms.html#connect-platform-specific-libraries" target="_blank" rel="noreferrer">選項</a>，可以在共享原始碼集中使用平台相關的 interop 函式庫。在 1.5.30 之前，這僅適用於 Kotlin/Native 發行版隨附的<a href="/zh-Hant/kotlin/native-platform-libs">平台函式庫</a>。從 1.5.30 開始，您可以將其與您的自訂 <code>cinterop</code> 函式庫一起使用。要啟用此功能，請在您的 <code>gradle.properties</code> 中添加 <code>kotlin.mpp.enableCInteropCommonization=true</code> 屬性：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.mpp.enableGranularSourceSetsMetadata=true</span></span>
<span class="line"><span>kotlin.native.enableDependencyPropagation=false</span></span>
<span class="line"><span>kotlin.mpp.enableCInteropCommonization=true</span></span></code></pre></div><h3 id="支援-xcframeworks" tabindex="-1">支援 XCFrameworks <a class="header-anchor" href="#支援-xcframeworks" aria-label="Permalink to &quot;支援 XCFrameworks&quot;">​</a></h3><p>所有 Kotlin 多平台專案現在都可以將 XCFrameworks 作為輸出格式。Apple 引入 XCFrameworks 作為通用 (fat) 框架的替代品。藉助 XCFrameworks，您可以：</p><ul><li>將所有目標平台和架構的邏輯收集到一個單一捆綁包中。</li><li>無需在將應用程式發佈到 App Store 之前移除所有不必要的架構。</li></ul><p>如果您希望將 Kotlin 框架用於 Apple M1 上的裝置和模擬器，XCFrameworks 非常有用。</p><p>要使用 XCFrameworks，請更新您的 <code>build.gradle(.kts)</code> 腳本：</p>`,87)),t(h,{group:"build-script"},{default:l(()=>[t(n,{title:"Kotlin","group-key":"kotlin"},{default:l(()=>a[4]||(a[4]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," org.jetbrains.kotlin.gradle.plugin.mpp.apple.XCFramework")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"plugins"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"multiplatform"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"    val"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," xcf "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," XCFramework"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"  ")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    ios"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        binaries."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"framework"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            baseName "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "shared"')]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            xcf."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"add"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"this"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    watchos"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        binaries."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"framework"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            baseName "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "shared"')]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            xcf."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"add"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"this"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    tvos"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        binaries."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"framework"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            baseName "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "shared"')]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            xcf."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"add"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"this"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),t(n,{title:"Groovy","group-key":"groovy"},{default:l(()=>a[5]||(a[5]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," org.jetbrains.kotlin.gradle.plugin.mpp.apple.XCFrameworkConfig")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"plugins {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    id "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'org.jetbrains.kotlin.multiplatform'")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"kotlin {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"    def"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," xcf "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," new"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," XCFrameworkConfig"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(project)")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ios {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        binaries"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"framework {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            baseName "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "shared"')]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            xcf"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"add(it)")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    watchos {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        binaries"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"framework {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            baseName "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "shared"')]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            xcf"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"add(it)")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    tvos {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        binaries"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"framework {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            baseName "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "shared"')]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            xcf"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"add(it)")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),a[22]||(a[22]=e('<p>當您聲明 XCFrameworks 時，將註冊以下新的 Gradle 任務：</p><ul><li><code>assembleXCFramework</code></li><li><code>assembleDebugXCFramework</code> (額外的偵錯構件，<a href="/zh-Hant/kotlin/native-ios-symbolication">包含 dSYMs</a>)</li><li><code>assembleReleaseXCFramework</code></li></ul><p>在<a href="https://developer.apple.com/videos/play/wwdc2019/416/" target="_blank" rel="noreferrer">此 WWDC 影片</a>中了解更多關於 XCFrameworks 的資訊。</p><h3 id="android-構件的新預設發佈設定" tabindex="-1">Android 構件的新預設發佈設定 <a class="header-anchor" href="#android-構件的新預設發佈設定" aria-label="Permalink to &quot;Android 構件的新預設發佈設定&quot;">​</a></h3><p>使用 <code>maven-publish</code> Gradle 插件，您可以透過在建置腳本中指定 <a href="https://developer.android.com/studio/build/build-variants" target="_blank" rel="noreferrer">Android 變體</a>名稱來<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-publish-lib-setup.html#publish-an-android-library" target="_blank" rel="noreferrer">發佈您的多平台函式庫以用於 Android 目標</a>。Kotlin Gradle 插件將自動生成發佈內容。</p><p>在 1.5.30 之前，生成的發佈<a href="https://docs.gradle.org/current/userguide/publishing_gradle_module_metadata.html" target="_blank" rel="noreferrer">中繼資料</a>包含每個已發佈 Android 變體的建置型別屬性，使其僅與函式庫消費者使用的相同建置型別兼容。Kotlin 1.5.30 引入了新的預設發佈設定：</p><ul><li>如果專案發佈的所有 Android 變體都具有相同的建置型別屬性，則已發佈的變體將不具有建置型別屬性，並且將與任何建置型別兼容。</li><li>如果已發佈的變體具有不同的建置型別屬性，則只有那些具有 <code>release</code> 值的變體將在沒有建置型別屬性的情況下發佈。這使得 <code>release</code> 變體與消費者端的任何建置型別兼容，而其他非 <code>release</code> 變體將僅與相符的消費者建置型別兼容。</li></ul><p>要選擇退出並保留所有變體的建置型別屬性，您可以設定此 Gradle 屬性：<code>kotlin.android.buildTypeAttribute.keep=true</code>。</p><h2 id="kotlin-js" tabindex="-1">Kotlin/JS <a class="header-anchor" href="#kotlin-js" aria-label="Permalink to &quot;Kotlin/JS&quot;">​</a></h2><p>Kotlin/JS 在 1.5.30 中有兩項主要改進：</p><ul><li><a href="#js-ir-compiler-backend-reaches-beta">JS IR 編譯器後端進入 Beta 階段</a></li><li><a href="#better-debugging-experience-for-applications-with-the-kotlin-js-ir-backend">使用 Kotlin/JS IR 後端的應用程式提供更好的偵錯體驗</a></li></ul><h3 id="js-ir-編譯器後端進入-beta-階段" tabindex="-1">JS IR 編譯器後端進入 Beta 階段 <a class="header-anchor" href="#js-ir-編譯器後端進入-beta-階段" aria-label="Permalink to &quot;JS IR 編譯器後端進入 Beta 階段&quot;">​</a></h3><p>基於 IR 的<a href="/zh-Hant/kotlin/whatsnew14#unified-backends-and-extensibility">編譯器後端</a>（在 1.4.0 中以 <a href="/zh-Hant/kotlin/components-stability">Alpha</a> 形式引入，用於 Kotlin/JS）已進入 Beta 階段。</p><p>先前，我們發佈了 <a href="/zh-Hant/kotlin/js-ir-migration">JS IR 後端遷移指南</a>，以幫助您將專案遷移到新的後端。現在，我們想介紹 <a href="https://plugins.jetbrains.com/plugin/17183-kotlin-js-inspection-pack/" target="_blank" rel="noreferrer">Kotlin/JS 檢查套件</a> IDE 插件，它直接在 IntelliJ IDEA 中顯示所需的變更。</p><h3 id="使用-kotlin-js-ir-後端的應用程式提供更好的偵錯體驗" tabindex="-1">使用 Kotlin/JS IR 後端的應用程式提供更好的偵錯體驗 <a class="header-anchor" href="#使用-kotlin-js-ir-後端的應用程式提供更好的偵錯體驗" aria-label="Permalink to &quot;使用 Kotlin/JS IR 後端的應用程式提供更好的偵錯體驗&quot;">​</a></h3><p>Kotlin 1.5.30 為 Kotlin/JS IR 後端帶來了 JavaScript 原始碼映射生成。這將在使用 IR 後端時改進 Kotlin/JS 的偵錯體驗，提供完整的偵錯支援，包括中斷點、單步執行以及帶有適當原始碼參考的可讀堆疊追蹤。</p><p>了解如何在<a href="/zh-Hant/kotlin/js-debugging">瀏覽器或 IntelliJ IDEA Ultimate 中偵錯 Kotlin/JS</a>。</p><h2 id="gradle" tabindex="-1">Gradle <a class="header-anchor" href="#gradle" aria-label="Permalink to &quot;Gradle&quot;">​</a></h2><p>作為我們<a href="https://youtrack.jetbrains.com/issue/KT-45778" target="_blank" rel="noreferrer">改進 Kotlin Gradle 插件使用者體驗</a>使命的一部分，我們實作了以下功能：</p><ul><li><a href="#support-for-java-toolchains">支援 Java 工具鏈</a>，其中包括<a href="#ability-to-specify-jdk-home-with-useskotlinjavatoolchain-interface">針對較舊 Gradle 版本的 <code>UsesKotlinJavaToolchain</code> 介面，指定 JDK 主目錄的能力</a></li><li><a href="#easier-way-to-explicitly-specify-kotlin-daemon-jvm-arguments">更輕鬆地明確指定 Kotlin 守護行程的 JVM 參數</a></li></ul><h3 id="支援-java-工具鏈" tabindex="-1">支援 Java 工具鏈 <a class="header-anchor" href="#支援-java-工具鏈" aria-label="Permalink to &quot;支援 Java 工具鏈&quot;">​</a></h3><p>Gradle 6.7 引入了「<a href="https://docs.gradle.org/current/userguide/toolchains.html" target="_blank" rel="noreferrer">Java 工具鏈支援</a>」功能。 使用此功能，您可以：</p><ul><li>使用與 Gradle 不同的 JDK 和 JRE 執行編譯、測試和可執行檔。</li><li>使用未發佈的語言版本編譯和測試程式碼。</li></ul><p>透過工具鏈支援，Gradle 可以自動偵測本地 JDK 並安裝建置所需的缺失 JDK。現在，Gradle 本身可以在任何 JDK 上執行，並且仍然重複使用<a href="/zh-Hant/kotlin/gradle-compilation-and-caches#gradle-build-cache-support">建置快取功能</a>。</p><p>Kotlin Gradle 插件支援 Kotlin/JVM 編譯任務的 Java 工具鏈。 Java 工具鏈：</p><ul><li><p>設定適用於 JVM 目標的 <a href="/zh-Hant/kotlin/gradle-compiler-options#attributes-specific-to-jvm"><code>jdkHome</code> 選項</a>。</p><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p><a href="https://youtrack.jetbrains.com/issue/KT-46541" target="_blank" rel="noreferrer">直接設定 <code>jdkHome</code> 選項的功能已被棄用</a>。</p></div></li><li><p>如果使用者未明確設定 <code>jvmTarget</code> 選項，則將 <a href="/zh-Hant/kotlin/gradle-compiler-options#attributes-specific-to-jvm"><code>kotlinOptions.jvmTarget</code></a> 設定為工具鏈的 JDK 版本。 如果未配置工具鏈，<code>jvmTarget</code> 欄位將使用預設值。了解更多關於<a href="/zh-Hant/kotlin/gradle-configure-project#check-for-jvm-target-compatibility-of-related-compile-tasks">JVM 目標兼容性</a>的資訊。</p></li><li><p>影響 <a href="/zh-Hant/kotlin/kapt#run-kapt-tasks-in-parallel"><code>kapt</code> 工作行程</a>在哪個 JDK 上執行。</p></li></ul><p>使用以下程式碼設定工具鏈。將佔位符 <code>&lt;MAJOR_JDK_VERSION&gt;</code> 替換為您要使用的 JDK 版本：</p>',27)),t(h,{group:"build-script"},{default:l(()=>[t(n,{title:"Kotlin","group-key":"kotlin"},{default:l(()=>a[6]||(a[6]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    jvmToolchain"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        ("),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"this"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," as"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," JavaToolchainSpec).languageVersion."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"set"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(JavaLanguageVersion."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"of"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"<"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"MAJOR_JDK_VERSION"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},">"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")) "),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},'// "8"')]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),t(n,{title:"Groovy","group-key":"groovy"},{default:l(()=>a[7]||(a[7]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"kotlin {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    jvmToolchain {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        languageVersion"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"set("),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"JavaLanguageVersion."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"of("),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"<"),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"MAJOR_JDK_VERSION"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},">"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")) "),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},'// "8"')]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),a[23]||(a[23]=e(`<p>請注意，透過 <code>kotlin</code> 擴展設定工具鏈也會更新 Java 編譯任務的工具鏈。</p><p>您可以透過 <code>java</code> 擴展設定工具鏈，並且 Kotlin 編譯任務將使用它：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">java</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    toolchain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        languageVersion.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(JavaLanguageVersion.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MAJOR_JDK_VERSION</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;8&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>有關為 <code>KotlinCompile</code> 任務設定任何 JDK 版本的資訊，請查閱關於<a href="/zh-Hant/kotlin/gradle-configure-project#set-jdk-version-with-the-task-dsl">使用任務 DSL 設定 JDK 版本</a>的文檔。</p><p>對於 Gradle 6.1 到 6.6 版本，<a href="#ability-to-specify-jdk-home-with-useskotlinjavatoolchain-interface">使用 <code>UsesKotlinJavaToolchain</code> 介面設定 JDK 主目錄</a>。</p><h3 id="針對較舊-gradle-版本的-useskotlinjavatoolchain-介面-指定-jdk-主目錄的能力" tabindex="-1">針對較舊 Gradle 版本的 <code>UsesKotlinJavaToolchain</code> 介面，指定 JDK 主目錄的能力 <a class="header-anchor" href="#針對較舊-gradle-版本的-useskotlinjavatoolchain-介面-指定-jdk-主目錄的能力" aria-label="Permalink to &quot;針對較舊 Gradle 版本的 \`UsesKotlinJavaToolchain\` 介面，指定 JDK 主目錄的能力&quot;">​</a></h3><p>所有支援透過 <a href="/zh-Hant/kotlin/gradle-compiler-options"><code>kotlinOptions</code></a> 設定 JDK 的 Kotlin 任務現在都實作了 <code>UsesKotlinJavaToolchain</code> 介面。要設定 JDK 主目錄，請填寫您的 JDK 路徑並替換 <code>&lt;JDK_VERSION&gt;</code> 佔位符：</p>`,7)),t(h,{group:"build-script"},{default:l(()=>[t(n,{title:"Kotlin","group-key":"kotlin"},{default:l(()=>a[8]||(a[8]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"project.tasks")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withType"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"UsesKotlinJavaToolchain"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},">()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"configureEach"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        it.kotlinJavaToolchain.jdk."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"use"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'            "/path/to/local/jdk"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},",")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            JavaVersion."),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"<"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"LOCAL_JDK_VERSION"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},">")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        )")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")])])])],-1)])),_:1}),t(n,{title:"Groovy","group-key":"groovy"},{default:l(()=>a[9]||(a[9]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"project"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    .withType("),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"UsesKotlinJavaToolchain."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"class)")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    .configureEach {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        it"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"kotlinJavaToolchain"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"jdk"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"use(")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"            '/path/to/local/jdk'"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},",")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"            JavaVersion.<"),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"LOCAL_JDK_VERSION"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},">")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        )")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")])])])],-1)])),_:1})]),_:1}),a[24]||(a[24]=e('<p>對於 Gradle 6.1 到 6.6 版本，請使用 <code>UsesKotlinJavaToolchain</code> 介面。從 Gradle 6.7 開始，請改用 <a href="#support-for-java-toolchains">Java 工具鏈</a>。</p><p>使用此功能時，請注意 <a href="/zh-Hant/kotlin/kapt#run-kapt-tasks-in-parallel">kapt 任務工作行程</a>將僅使用<a href="https://docs.gradle.org/current/userguide/worker_api.html#changing_the_isolation_mode" target="_blank" rel="noreferrer">程序隔離模式</a>，並且 <code>kapt.workers.isolation</code> 屬性將被忽略。</p><h3 id="更輕鬆地明確指定-kotlin-守護行程的-jvm-參數" tabindex="-1">更輕鬆地明確指定 Kotlin 守護行程的 JVM 參數 <a class="header-anchor" href="#更輕鬆地明確指定-kotlin-守護行程的-jvm-參數" aria-label="Permalink to &quot;更輕鬆地明確指定 Kotlin 守護行程的 JVM 參數&quot;">​</a></h3><p>在 Kotlin 1.5.30 中，Kotlin 守護行程的 JVM 參數有了新的邏輯。以下列表中的每個選項都會覆寫其之前的選項：</p>',4)),i("ul",null,[a[17]||(a[17]=e('<li><p>如果未指定任何內容，Kotlin 守護行程將繼承 Gradle 守護行程的參數（與以前相同）。例如，在 <code>gradle.properties</code> 檔案中：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>org.gradle.jvmargs=-Xmx1500m -Xms=500m</span></span></code></pre></div></li><li><p>如果 Gradle 守護行程的 JVM 參數具有 <code>kotlin.daemon.jvm.options</code> 系統屬性，則像以前一樣使用它：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>org.gradle.jvmargs=-Dkotlin.daemon.jvm.options=-Xmx1500m -Xms=500m</span></span></code></pre></div></li><li><p>您可以在 <code>gradle.properties</code> 檔案中添加 <code>kotlin.daemon.jvmargs</code> 屬性：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.daemon.jvmargs=-Xmx1500m -Xms=500m</span></span></code></pre></div></li>',3)),i("li",null,[a[12]||(a[12]=i("p",null,[s("您可以在 "),i("code",null,"kotlin"),s(" 擴展中指定參數：")],-1)),t(h,{group:"build-script"},{default:l(()=>[t(n,{title:"Kotlin","group-key":"kotlin"},{default:l(()=>a[10]||(a[10]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    kotlinDaemonJvmArgs "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," listOf"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-Xmx486m"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-Xms256m"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-XX:+UseParallelGC"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),t(n,{title:"Groovy","group-key":"groovy"},{default:l(()=>a[11]||(a[11]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"kotlin {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    kotlinDaemonJvmArgs "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," ["),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-Xmx486m"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-Xms256m"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-XX:+UseParallelGC"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"]")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1})]),i("li",null,[a[15]||(a[15]=i("p",null,"您可以為特定任務指定參數：",-1)),t(h,{group:"build-script"},{default:l(()=>[t(n,{title:"Kotlin","group-key":"kotlin"},{default:l(()=>a[13]||(a[13]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"matching"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," { it.name "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"=="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "compileKotlin"'),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," &&"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," it "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"is"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," CompileUsingKotlinDaemon }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"configureEach"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        ("),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"this"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," as"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," CompileUsingKotlinDaemon).kotlinDaemonJvmArguments."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"set"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"listOf"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-Xmx486m"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-Xms256m"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-XX:+UseParallelGC"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"))")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")])])])],-1)])),_:1}),t(n,{title:"Groovy","group-key":"groovy"},{default:l(()=>a[14]||(a[14]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    .matching {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        it"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"name "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"=="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "compileKotlin"'),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," &&"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," it "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"instanceof"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," CompileUsingKotlinDaemon")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    .configureEach {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        kotlinDaemonJvmArguments"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"set(["),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-Xmx1g"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-Xms512m"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"])")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")])])])],-1)])),_:1})]),_:1}),a[16]||(a[16]=i("div",{class:"note custom-block"},[i("p",{class:"custom-block-title"},"NOTE"),i("p",null,[s("在此情況下，新 Kotlin 守護行程實例可能會在任務執行時啟動。請參閱 "),i("a",{href:"/zh-Hant/kotlin/gradle-compilation-and-caches#setting-kotlin-daemon-s-jvm-arguments"},"Kotlin 守護行程與 JVM 參數的互動"),s(" 了解更多資訊。")])],-1))])]),a[25]||(a[25]=e(`<p>有關 Kotlin 守護行程的更多資訊，請參閱 <a href="/zh-Hant/kotlin/gradle-compilation-and-caches#the-kotlin-daemon-and-how-to-use-it-with-gradle">Kotlin 守護行程以及如何與 Gradle 一起使用</a>。</p><h2 id="標準函式庫" tabindex="-1">標準函式庫 <a class="header-anchor" href="#標準函式庫" aria-label="Permalink to &quot;標準函式庫&quot;">​</a></h2><p>Kotlin 1.5.30 正在改進標準函式庫的 <code>Duration</code> 和 <code>Regex</code> API：</p><ul><li><a href="#changing-duration-tostring-output">變更 <code>Duration.toString()</code> 輸出</a></li><li><a href="#parsing-duration-from-string">從字串解析 <code>Duration</code></a></li><li><a href="#matching-with-regex-at-a-particular-position">在特定位置使用 <code>Regex</code> 進行匹配</a></li><li><a href="#splitting-regex-to-a-sequence">將 <code>Regex</code> 分割成序列</a></li></ul><h3 id="變更-duration-tostring-輸出" tabindex="-1">變更 <code>Duration.toString()</code> 輸出 <a class="header-anchor" href="#變更-duration-tostring-輸出" aria-label="Permalink to &quot;變更 \`Duration.toString()\` 輸出&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p><code>Duration</code> API 是<a href="/zh-Hant/kotlin/components-stability">實驗性</a>的。它可能會隨時被移除或變更。 僅用於評估目的。我們非常感謝您在 <a href="https://youtrack.jetbrains.com/issues/KT" target="_blank" rel="noreferrer">YouTrack</a> 上提供回饋。</p></div><p>在 Kotlin 1.5.30 之前，<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.time/-duration/to-string.html" target="_blank" rel="noreferrer"><code>Duration.toString()</code></a> 函式會回傳其引數的字串表示形式，以產生最緊湊和可讀數值的單位表示。 從現在開始，它將回傳表示為數值組件組合的字串值，每個組件都有自己的單位。 每個組件是一個數字，後跟單位的縮寫名稱：<code>d</code>、<code>h</code>、<code>m</code>、<code>s</code>。例如：</p><table tabindex="0"><thead><tr><th><strong>函式呼叫範例</strong></th><th><strong>先前輸出</strong></th><th><strong>目前輸出</strong></th></tr></thead><tbody><tr><td>Duration.days(45).toString()</td><td><code>45.0d</code></td><td><code>45d</code></td></tr><tr><td>Duration.days(1.5).toString()</td><td><code>36.0h</code></td><td><code>1d 12h</code></td></tr><tr><td>Duration.minutes(1230).toString()</td><td><code>20.5h</code></td><td><code>20h 30m</code></td></tr><tr><td>Duration.minutes(2415).toString()</td><td><code>40.3h</code></td><td><code>1d 16h 15m</code></td></tr><tr><td>Duration.minutes(920).toString()</td><td><code>920m</code></td><td><code>15h 20m</code></td></tr><tr><td>Duration.seconds(1.546).toString()</td><td><code>1.55s</code></td><td><code>1.546s</code></td></tr><tr><td>Duration.milliseconds(25.12).toString()</td><td><code>25.1ms</code></td><td><code>25.12ms</code></td></tr></tbody></table><p>負持續時間的表示方式也已變更。負持續時間以減號 (<code>-</code>) 為前綴，如果它由多個組件組成，則用圓括號包圍：<code>-12m</code> 和 <code>-(1h 30m)</code>。</p><p>請注意，小於一秒的短持續時間表示為單個數字，帶有其中一個亞秒單位。例如，<code>ms</code>（毫秒）、<code>us</code>（微秒）或 <code>ns</code>（奈秒）：<code>140.884ms</code>、<code>500us</code>、<code>24ns</code>。不再使用科學記號表示它們。</p><p>如果您想以單一單位表示持續時間，請使用重載的 <code>Duration.toString(unit, decimals)</code> 函式。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>在某些情況下，包括序列化和交換，我們建議使用 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.time/-duration/to-iso-string.html" target="_blank" rel="noreferrer"><code>Duration.toIsoString()</code></a>。<code>Duration.toIsoString()</code> 使用更嚴格的 <a href="https://www.iso.org/iso-8601-date-and-time-format.html" target="_blank" rel="noreferrer">ISO-8601</a> 格式，而非 <code>Duration.toString()</code>。</p></div><h3 id="從字串解析-duration" tabindex="-1">從字串解析 <code>Duration</code> <a class="header-anchor" href="#從字串解析-duration" aria-label="Permalink to &quot;從字串解析 \`Duration\`&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p><code>Duration</code> API 是<a href="/zh-Hant/kotlin/components-stability">實驗性</a>的。它可能會隨時被移除或變更。 僅用於評估目的。我們非常感謝您在<a href="https://github.com/Kotlin/KEEP/issues/190" target="_blank" rel="noreferrer">此議題</a>上提供回饋。</p></div><p>在 Kotlin 1.5.30 中，<code>Duration</code> API 中有新的函式：</p><ul><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.time/-duration/parse.html" target="_blank" rel="noreferrer"><code>parse()</code></a>，支援解析以下輸出的內容： <ul><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.time/-duration/to-string.html" target="_blank" rel="noreferrer"><code>toString()</code></a>。</li><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.time/-duration/to-string.html" target="_blank" rel="noreferrer"><code>toString(unit, decimals)</code></a>。</li><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.time/-duration/to-iso-string.html" target="_blank" rel="noreferrer"><code>toIsoString()</code></a>。</li></ul></li><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.time/-duration/parse-iso-string.html" target="_blank" rel="noreferrer"><code>parseIsoString()</code></a>，它只從 <code>toIsoString()</code> 產生的格式中解析。</li><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.time/-duration/parse-or-null.html" target="_blank" rel="noreferrer"><code>parseOrNull()</code></a> 和 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.time/-duration/parse-iso-string-or-null.html" target="_blank" rel="noreferrer"><code>parseIsoStringOrNull()</code></a>，它們的行為與上述函式類似，但在無效持續時間格式時回傳 <code>null</code> 而不是拋出 <code>IllegalArgumentException</code>。</li></ul><p>以下是 <code>parse()</code> 和 <code>parseOrNull()</code> 用法的一些範例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.time.Duration</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.time.ExperimentalTime</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@ExperimentalTime</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isoFormatString </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;PT1H30M&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> defaultFormatString </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1h 30m&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> singleUnitFormatString </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1.5h&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> invalidFormatString </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1 hour 30 minutes&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Duration.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(isoFormatString)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;1h 30m&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Duration.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(defaultFormatString)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;1h 30m&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Duration.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(singleUnitFormatString)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;1h 30m&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //println(Duration.parse(invalidFormatString))</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // throws exception</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Duration.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parseOrNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(invalidFormatString)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;null&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>以下是 <code>parseIsoString()</code> 和 <code>parseIsoStringOrNull()</code> 用法的一些範例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.time.Duration</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.time.ExperimentalTime</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@ExperimentalTime</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isoFormatString </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;PT1H30M&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> defaultFormatString </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1h 30m&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Duration.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parseIsoString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(isoFormatString)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;1h 30m&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //println(Duration.parseIsoString(defaultFormatString))</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // throws exception</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Duration.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parseIsoStringOrNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(defaultFormatString)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;null&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="在特定位置使用-regex-進行匹配" tabindex="-1">在特定位置使用 <code>Regex</code> 進行匹配 <a class="header-anchor" href="#在特定位置使用-regex-進行匹配" aria-label="Permalink to &quot;在特定位置使用 \`Regex\` 進行匹配&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p><code>Regex.matchAt()</code> 和 <code>Regex.matchesAt()</code> 函式是<a href="/zh-Hant/kotlin/components-stability">實驗性</a>的。它們可能會隨時被移除或變更。 僅用於評估目的。我們非常感謝您在 <a href="https://youtrack.jetbrains.com/issue/KT-34021" target="_blank" rel="noreferrer">YouTrack</a> 上提供回饋。</p></div><p>新的 <code>Regex.matchAt()</code> 和 <code>Regex.matchesAt()</code> 函式提供了一種方法來檢查正規表達式是否在 <code>String</code> 或 <code>CharSequence</code> 中的特定位置具有精確匹配。</p><p><code>matchesAt()</code> 回傳一個布林結果：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> releaseText </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Kotlin 1.5.30 is released!&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // regular expression: one digit, dot, one digit, dot, one or more digits</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> versionRegex </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">d[.]</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">d[.]</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">d+&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toRegex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(versionRegex.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">matchesAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(releaseText, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;false&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(versionRegex.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">matchesAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(releaseText, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;true&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>matchAt()</code> 回傳匹配（如果找到）或 <code>null</code>（如果未找到）：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> releaseText </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Kotlin 1.5.30 is released!&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> versionRegex </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">d[.]</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">d[.]</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">d+&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toRegex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(versionRegex.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">matchAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(releaseText, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;null&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(versionRegex.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">matchAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(releaseText, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)?.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;1.5.30&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="將-regex-分割成序列" tabindex="-1">將 <code>Regex</code> 分割成序列 <a class="header-anchor" href="#將-regex-分割成序列" aria-label="Permalink to &quot;將 \`Regex\` 分割成序列&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p><code>Regex.splitToSequence()</code> 和 <code>CharSequence.splitToSequence(Regex)</code> 函式是<a href="/zh-Hant/kotlin/components-stability">實驗性</a>的。它們可能會隨時被移除或變更。 僅用於評估目的。我們非常感謝您在 <a href="https://youtrack.jetbrains.com/issue/KT-23351" target="_blank" rel="noreferrer">YouTrack</a> 上提供回饋。</p></div><p>新的 <code>Regex.splitToSequence()</code> 函式是 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/-regex/split.html" target="_blank" rel="noreferrer"><code>split()</code></a> 的延遲對應物。它圍繞給定正規表達式的匹配來分割字串，但它將結果作為一個<a href="/zh-Hant/kotlin/sequences">序列</a>回傳，以便對此結果的所有操作都是延遲執行的。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> colorsText </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;green, red , brown&amp;blue, orange, pink&amp;green&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> regex </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;[,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">s]+&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toRegex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mixedColor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> regex.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">splitToSequence</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(colorsText)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(it) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">firstOrNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">contains</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&amp;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mixedColor) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;brown&amp;blue&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>一個類似的函式也已添加到 <code>CharSequence</code> 中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mixedColor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> colorsText.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">splitToSequence</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(regex)</span></span></code></pre></div><h2 id="serialization-1-3-0-rc" tabindex="-1">Serialization 1.3.0-RC <a class="header-anchor" href="#serialization-1-3-0-rc" aria-label="Permalink to &quot;Serialization 1.3.0-RC&quot;">​</a></h2><p><code>kotlinx.serialization</code> <a href="https://github.com/Kotlin/kotlinx.serialization/releases/tag/v1.3.0-RC" target="_blank" rel="noreferrer">1.3.0-RC</a> 帶來了 新的 JSON 序列化功能：</p><ul><li>Java IO 串流序列化</li><li>對預設值進行屬性層級控制</li><li>從序列化中排除空值的選項</li><li>多型序列化中的自訂類別鑑別器</li></ul><p>在<a href="https://github.com/Kotlin/kotlinx.serialization/releases/tag/v1.3.0-RC" target="_blank" rel="noreferrer">變更日誌</a>中了解更多資訊。</p>`,37))])}const v=r(E,[["render",g]]);export{C as __pageData,v as default};
