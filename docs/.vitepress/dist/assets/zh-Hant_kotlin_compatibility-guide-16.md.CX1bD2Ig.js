import{_ as e,c as t,o as r,ag as n}from"./chunks/framework.Bksy39di.js";const u=JSON.parse('{"title":"Kotlin 1.6 相容性指南","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/compatibility-guide-16.md","filePath":"zh-Hant/kotlin/compatibility-guide-16.md","lastUpdated":1754307826000}'),a={name:"zh-Hant/kotlin/compatibility-guide-16.md"};function l(s,o,i,c,d,p){return r(),t("div",null,o[0]||(o[0]=[n('<h1 id="kotlin-1-6-相容性指南" tabindex="-1">Kotlin 1.6 相容性指南 <a class="header-anchor" href="#kotlin-1-6-相容性指南" aria-label="Permalink to &quot;Kotlin 1.6 相容性指南&quot;">​</a></h1><p><em><a href="/zh-Hant/kotlin/kotlin-evolution-principles">保持語言現代化</a></em> 和 <em><a href="/zh-Hant/kotlin/kotlin-evolution-evolution-principles">舒適的更新</a></em> 是 Kotlin 語言設計的基本原則。前者指出，阻礙語言演進的建構應予移除；後者則說明，此類移除應事先充分溝通，以使程式碼遷移盡可能順暢。</p><p>儘管大多數語言變更已透過其他管道（例如更新變更日誌或編譯器警告）公佈，但本文總結了所有變更，為從 Kotlin 1.5 遷移至 Kotlin 1.6 提供了完整的參考資料。</p><h2 id="基本術語" tabindex="-1">基本術語 <a class="header-anchor" href="#基本術語" aria-label="Permalink to &quot;基本術語&quot;">​</a></h2><p>本文中，我們介紹了幾種相容性類型：</p><ul><li><em>來源</em>：來源不相容變更會使原本可正常編譯（無錯誤或警告）的程式碼不再能編譯</li><li><em>二進位</em>：如果兩個二進位構件互相替換不會導致載入或連結錯誤，則稱它們具有二進位相容性</li><li><em>行為</em>：如果同一程式在套用變更前後展現出不同行為，則稱該變更為行為不相容</li></ul><p>請記住，這些定義僅適用於純 Kotlin。從其他語言（例如 Java）的角度來看的 Kotlin 程式碼相容性超出本文範圍。</p><h2 id="語言" tabindex="-1">語言 <a class="header-anchor" href="#語言" aria-label="Permalink to &quot;語言&quot;">​</a></h2><h3 id="預設情況下-當-when-陳述式以-enum、sealed-和-boolean-型別為主題時-要求窮舉完備" tabindex="-1">預設情況下，當 <code>when</code> 陳述式以 enum、sealed 和 Boolean 型別為主題時，要求窮舉完備 <a class="header-anchor" href="#預設情況下-當-when-陳述式以-enum、sealed-和-boolean-型別為主題時-要求窮舉完備" aria-label="Permalink to &quot;預設情況下，當 `when` 陳述式以 enum、sealed 和 Boolean 型別為主題時，要求窮舉完備&quot;">​</a></h3><blockquote><p><strong>議題</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-47709" target="_blank" rel="noreferrer">KT-47709</a></p><p><strong>元件</strong>：核心語言</p><p><strong>不相容變更類型</strong>：來源</p><p><strong>簡述</strong>：Kotlin 1.6 將針對以 enum、sealed 或 Boolean 型別為主題的非窮舉完備 <code>when</code> 陳述式發出警告</p><p><strong>棄用週期</strong>：</p><ul><li>1.6.0：當以 enum、sealed 或 Boolean 型別為主題的 <code>when</code> 陳述式非窮舉完備時，引入警告（在漸進模式下為錯誤）</li><li>1.7.0：將此警告提升為錯誤</li></ul></blockquote><h3 id="棄用-when-with-subject-中易混淆的語法" tabindex="-1">棄用 <code>when-with-subject</code> 中易混淆的語法 <a class="header-anchor" href="#棄用-when-with-subject-中易混淆的語法" aria-label="Permalink to &quot;棄用 `when-with-subject` 中易混淆的語法&quot;">​</a></h3><blockquote><p><strong>議題</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-48385" target="_blank" rel="noreferrer">KT-48385</a></p><p><strong>元件</strong>：核心語言</p><p><strong>不相容變更類型</strong>：來源</p><p><strong>簡述</strong>：Kotlin 1.6 將棄用 <code>when</code> 條件表達式中幾個易混淆的語法建構</p><p><strong>棄用週期</strong>：</p><ul><li>1.6.20：對受影響的表達式引入棄用警告</li><li>1.8.0：將此警告提升為錯誤</li><li>&gt;= 1.8：將一些棄用的建構重新用於新的語言功能</li></ul></blockquote><h3 id="禁止在伴生物件和巢狀物件的父類別建構函式呼叫中存取類別成員" tabindex="-1">禁止在伴生物件和巢狀物件的父類別建構函式呼叫中存取類別成員 <a class="header-anchor" href="#禁止在伴生物件和巢狀物件的父類別建構函式呼叫中存取類別成員" aria-label="Permalink to &quot;禁止在伴生物件和巢狀物件的父類別建構函式呼叫中存取類別成員&quot;">​</a></h3><blockquote><p><strong>議題</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-25289" target="_blank" rel="noreferrer">KT-25289</a></p><p><strong>元件</strong>：核心語言</p><p><strong>不相容變更類型</strong>：來源</p><p><strong>簡述</strong>：Kotlin 1.6 將對伴生物件和常規物件的父類別建構函式呼叫引數報告錯誤，如果此類引數的接收者指向包含宣告</p><p><strong>棄用週期</strong>：</p><ul><li>1.5.20：對有問題的引數引入警告</li><li>1.6.0：將此警告提升為錯誤， <code>-XXLanguage:-ProhibitSelfCallsInNestedObjects</code> 可用於暫時恢復到 1.6 之前的行為</li></ul></blockquote><h3 id="型別空值可否性增強改進" tabindex="-1">型別空值可否性增強改進 <a class="header-anchor" href="#型別空值可否性增強改進" aria-label="Permalink to &quot;型別空值可否性增強改進&quot;">​</a></h3><blockquote><p><strong>議題</strong>：<a href="https://youtrack.com/issue/KT-48623" target="_blank" rel="noreferrer">KT-48623</a></p><p><strong>元件</strong>：Kotlin/JVM</p><p><strong>不相容變更類型</strong>：來源</p><p><strong>簡述</strong>：Kotlin 1.7 將改變其載入和解釋 Java 程式碼中型別空值可否性註釋的方式</p><p><strong>棄用週期</strong>：</p><ul><li>1.4.30：針對更精確的型別空值可否性可能導致錯誤的情況引入警告</li><li>1.7.0：推斷 Java 型別更精確的空值可否性， <code>-XXLanguage:-TypeEnhancementImprovementsInStrictMode</code> 可用於暫時恢復到 1.7 之前的行為</li></ul></blockquote><h3 id="防止不同數字型別之間的隱式強制轉型" tabindex="-1">防止不同數字型別之間的隱式強制轉型 <a class="header-anchor" href="#防止不同數字型別之間的隱式強制轉型" aria-label="Permalink to &quot;防止不同數字型別之間的隱式強制轉型&quot;">​</a></h3><blockquote><p><strong>議題</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-48645" target="_blank" rel="noreferrer">KT-48645</a></p><p><strong>元件</strong>：Kotlin/JVM</p><p><strong>不相容變更類型</strong>：行為</p><p><strong>簡述</strong>：當語義上只需要將數值向下轉型為原始數字型別時，Kotlin 將避免自動將其轉換為該型別</p><p><strong>棄用週期</strong>：</p><ul><li>&lt; 1.5.30：所有受影響情況下的舊行為</li><li>1.5.30：修復生成的屬性委託存取器中的向下轉型行為， <code>-Xuse-old-backend</code> 可用於暫時恢復到 1.5.30 之前修復的行為</li><li>&gt;= 1.6.20：修復其他受影響情況下的向下轉型行為</li></ul></blockquote><h3 id="禁止宣告其容器註釋違反-jls-的可重複註釋類別" tabindex="-1">禁止宣告其容器註釋違反 JLS 的可重複註釋類別 <a class="header-anchor" href="#禁止宣告其容器註釋違反-jls-的可重複註釋類別" aria-label="Permalink to &quot;禁止宣告其容器註釋違反 JLS 的可重複註釋類別&quot;">​</a></h3><blockquote><p><strong>議題</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-47928" target="_blank" rel="noreferrer">KT-47928</a></p><p><strong>元件</strong>：Kotlin/JVM</p><p><strong>不相容變更類型</strong>：來源</p><p><strong>簡述</strong>：Kotlin 1.6 將檢查可重複註釋的容器註釋是否滿足 <a href="https://docs.oracle.com/javase/specs/jls/se16/html/jls-9.html#jls-9.6.3" target="_blank" rel="noreferrer">JLS 9.6.3</a> 中的相同要求：陣列型別值方法、保留策略和目標</p><p><strong>棄用週期</strong>：</p><ul><li>1.5.30：對違反 JLS 要求的可重複容器註釋宣告引入警告（在漸進模式下為錯誤）</li><li>1.6.0：將此警告提升為錯誤， <code>-XXLanguage:-RepeatableAnnotationContainerConstraints</code> 可用於暫時禁用錯誤報告</li></ul></blockquote><h3 id="禁止在可重複註釋類別中宣告名為-container-的巢狀類別" tabindex="-1">禁止在可重複註釋類別中宣告名為 <code>Container</code> 的巢狀類別 <a class="header-anchor" href="#禁止在可重複註釋類別中宣告名為-container-的巢狀類別" aria-label="Permalink to &quot;禁止在可重複註釋類別中宣告名為 `Container` 的巢狀類別&quot;">​</a></h3><blockquote><p><strong>議題</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-47971" target="_blank" rel="noreferrer">KT-47971</a></p><p><strong>元件</strong>：Kotlin/JVM</p><p><strong>不相容變更類型</strong>：來源</p><p><strong>簡述</strong>：Kotlin 1.6 將檢查在 Kotlin 中宣告的可重複註釋是否沒有名為 <code>Container</code> 的巢狀類別</p><p><strong>棄用週期</strong>：</p><ul><li>1.5.30：對 Kotlin 可重複註釋類別中名為 <code>Container</code> 的巢狀類別引入警告（在漸進模式下為錯誤）</li><li>1.6.0：將此警告提升為錯誤， <code>-XXLanguage:-RepeatableAnnotationContainerConstraints</code> 可用於暫時禁用錯誤報告</li></ul></blockquote><h3 id="禁止在覆寫介面屬性的主建構函式中的屬性上使用-jvmfield" tabindex="-1">禁止在覆寫介面屬性的主建構函式中的屬性上使用 <code>@JvmField</code> <a class="header-anchor" href="#禁止在覆寫介面屬性的主建構函式中的屬性上使用-jvmfield" aria-label="Permalink to &quot;禁止在覆寫介面屬性的主建構函式中的屬性上使用 `@JvmField`&quot;">​</a></h3><blockquote><p><strong>議題</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-32753" target="_blank" rel="noreferrer">KT-32753</a></p><p><strong>元件</strong>：Kotlin/JVM</p><p><strong>不相容變更類型</strong>：來源</p><p><strong>簡述</strong>：Kotlin 1.6 將禁止在覆寫介面屬性的主建構函式中宣告的屬性上註釋 <code>@JvmField</code></p><p><strong>棄用週期</strong>：</p><ul><li>1.5.20：對主建構函式中此類屬性上的 <code>@JvmField</code> 註釋引入警告</li><li>1.6.0：將此警告提升為錯誤， <code>-XXLanguage:-ProhibitJvmFieldOnOverrideFromInterfaceInPrimaryConstructor</code> 可用於暫時禁用錯誤報告</li></ul></blockquote><h3 id="棄用編譯器選項-xjvm-default-的-enable-和-compatibility-模式" tabindex="-1">棄用編譯器選項 <code>-Xjvm-default</code> 的 <code>enable</code> 和 <code>compatibility</code> 模式 <a class="header-anchor" href="#棄用編譯器選項-xjvm-default-的-enable-和-compatibility-模式" aria-label="Permalink to &quot;棄用編譯器選項 `-Xjvm-default` 的 `enable` 和 `compatibility` 模式&quot;">​</a></h3><blockquote><p><strong>議題</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-46329" target="_blank" rel="noreferrer">KT-46329</a></p><p><strong>元件</strong>：Kotlin/JVM</p><p><strong>不相容變更類型</strong>：來源</p><p><strong>簡述</strong>：Kotlin 1.6.20 將對使用 <code>-Xjvm-default</code> 編譯器選項的 <code>enable</code> 和 <code>compatibility</code> 模式發出警告</p><p><strong>棄用週期</strong>：</p><ul><li>1.6.20：對 <code>-Xjvm-default</code> 編譯器選項的 <code>enable</code> 和 <code>compatibility</code> 模式引入警告</li><li>&gt;= 1.8.0：將此警告提升為錯誤</li></ul></blockquote><h3 id="禁止從公開-abi-內聯函式呼叫-super" tabindex="-1">禁止從公開 ABI 內聯函式呼叫 <code>super</code> <a class="header-anchor" href="#禁止從公開-abi-內聯函式呼叫-super" aria-label="Permalink to &quot;禁止從公開 ABI 內聯函式呼叫 `super`&quot;">​</a></h3><blockquote><p><strong>議題</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-45379" target="_blank" rel="noreferrer">KT-45379</a></p><p><strong>元件</strong>：核心語言</p><p><strong>不相容變更類型</strong>：來源</p><p><strong>簡述</strong>：Kotlin 1.6 將禁止從公開或受保護的內聯函式和屬性呼叫帶有 <code>super</code> 限定符的函式</p><p><strong>棄用週期</strong>：</p><ul><li>1.5.0：對從公開或受保護的內聯函式或屬性存取器呼叫 <code>super</code> 引入警告</li><li>1.6.0：將此警告提升為錯誤， <code>-XXLanguage:-ProhibitSuperCallsFromPublicInline</code> 可用於暫時禁用錯誤報告</li></ul></blockquote><h3 id="禁止從公開內聯函式呼叫受保護建構函式" tabindex="-1">禁止從公開內聯函式呼叫受保護建構函式 <a class="header-anchor" href="#禁止從公開內聯函式呼叫受保護建構函式" aria-label="Permalink to &quot;禁止從公開內聯函式呼叫受保護建構函式&quot;">​</a></h3><blockquote><p><strong>議題</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-48860" target="_blank" rel="noreferrer">KT-48860</a></p><p><strong>元件</strong>：核心語言</p><p><strong>不相容變更類型</strong>：來源</p><p><strong>簡述</strong>：Kotlin 1.6 將禁止從公開或受保護的內聯函式和屬性呼叫受保護的建構函式</p><p><strong>棄用週期</strong>：</p><ul><li>1.4.30：對從公開或受保護的內聯函式或屬性存取器呼叫受保護建構函式引入警告</li><li>1.6.0：將此警告提升為錯誤， <code>-XXLanguage:-ProhibitProtectedConstructorCallFromPublicInline</code> 可用於暫時禁用錯誤報告</li></ul></blockquote><h3 id="禁止從檔案內私有型別公開私有巢狀型別" tabindex="-1">禁止從檔案內私有型別公開私有巢狀型別 <a class="header-anchor" href="#禁止從檔案內私有型別公開私有巢狀型別" aria-label="Permalink to &quot;禁止從檔案內私有型別公開私有巢狀型別&quot;">​</a></h3><blockquote><p><strong>議題</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-20094" target="_blank" rel="noreferrer">KT-20094</a></p><p><strong>元件</strong>：核心語言</p><p><strong>不相容變更類型</strong>：來源</p><p><strong>簡述</strong>：Kotlin 1.6 將禁止從檔案內私有型別公開私有巢狀型別和內部類別</p><p><strong>棄用週期</strong>：</p><ul><li>1.5.0：對從檔案內私有型別公開的私有型別引入警告</li><li>1.6.0：將此警告提升為錯誤， <code>-XXLanguage:-PrivateInFileEffectiveVisibility</code> 可用於暫時禁用錯誤報告</li></ul></blockquote><h3 id="在多種情況下-不對型別上的註釋進行註釋目標分析" tabindex="-1">在多種情況下，不對型別上的註釋進行註釋目標分析 <a class="header-anchor" href="#在多種情況下-不對型別上的註釋進行註釋目標分析" aria-label="Permalink to &quot;在多種情況下，不對型別上的註釋進行註釋目標分析&quot;">​</a></h3><blockquote><p><strong>議題</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-28449" target="_blank" rel="noreferrer">KT-28449</a></p><p><strong>元件</strong>：核心語言</p><p><strong>不相容變更類型</strong>：來源</p><p><strong>簡述</strong>：Kotlin 1.6 將不再允許對不應適用於型別的註釋進行型別註釋</p><p><strong>棄用週期</strong>：</p><ul><li>1.5.20：在漸進模式下引入錯誤</li><li>1.6.0：引入錯誤， <code>-XXLanguage:-ProperCheckAnnotationsTargetInTypeUsePositions</code> 可用於暫時禁用錯誤報告</li></ul></blockquote><h3 id="禁止呼叫帶有尾隨-lambda-的-suspend-函式" tabindex="-1">禁止呼叫帶有尾隨 lambda 的 <code>suspend</code> 函式 <a class="header-anchor" href="#禁止呼叫帶有尾隨-lambda-的-suspend-函式" aria-label="Permalink to &quot;禁止呼叫帶有尾隨 lambda 的 `suspend` 函式&quot;">​</a></h3><blockquote><p><strong>議題</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-22562" target="_blank" rel="noreferrer">KT-22562</a></p><p><strong>元件</strong>：核心語言</p><p><strong>不相容變更類型</strong>：來源</p><p><strong>簡述</strong>：Kotlin 1.6 將不再允許呼叫名為 <code>suspend</code> 且將單一函式型別引數作為尾隨 lambda 傳遞的函式</p><p><strong>棄用週期</strong>：</p><ul><li>1.3.0：對此類函式呼叫引入警告</li><li>1.6.0：將此警告提升為錯誤</li><li>&gt;= 1.7.0：引入語言語法變更，以便將 <code>{</code> 之前的 <code>suspend</code> 解析為關鍵字</li></ul></blockquote><h2 id="標準函式庫" tabindex="-1">標準函式庫 <a class="header-anchor" href="#標準函式庫" aria-label="Permalink to &quot;標準函式庫&quot;">​</a></h2><h3 id="移除-minus-removeall-retainall-中脆弱的-contains-優化" tabindex="-1">移除 <code>minus</code>/<code>removeAll</code>/<code>retainAll</code> 中脆弱的 <code>contains</code> 優化 <a class="header-anchor" href="#移除-minus-removeall-retainall-中脆弱的-contains-優化" aria-label="Permalink to &quot;移除 `minus`/`removeAll`/`retainAll` 中脆弱的 `contains` 優化&quot;">​</a></h3><blockquote><p><strong>議題</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-45438" target="_blank" rel="noreferrer">KT-45438</a></p><p><strong>元件</strong>：kotlin-stdlib</p><p><strong>不相容變更類型</strong>：行為</p><p><strong>簡述</strong>：Kotlin 1.6 將不再對從集合/迭代器/陣列/序列中移除多個元素的函式和運算符的引數執行轉換為 <code>Set</code> 的操作。</p><p><strong>棄用週期</strong>：</p><ul><li>&lt; 1.6：舊行為：在某些情況下將引數轉換為 <code>Set</code></li><li>1.6.0：如果函式引數是集合，則不再將其轉換為 <code>Set</code>。如果不是集合，則可以將其轉換為 <code>List</code>。 舊行為可在 JVM 上透過設定系統屬性 <code>kotlin.collections.convert_arg_to_set_in_removeAll=true</code> 暫時重新啟用</li><li>&gt;= 1.7：上述系統屬性將不再有效</li></ul></blockquote><h3 id="變更-random-nextlong-中的值生成演算法" tabindex="-1">變更 <code>Random.nextLong</code> 中的值生成演算法 <a class="header-anchor" href="#變更-random-nextlong-中的值生成演算法" aria-label="Permalink to &quot;變更 `Random.nextLong` 中的值生成演算法&quot;">​</a></h3><blockquote><p><strong>議題</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-47304" target="_blank" rel="noreferrer">KT-47304</a></p><p><strong>元件</strong>：kotlin-stdlib</p><p><strong>不相容變更類型</strong>：行為</p><p><strong>簡述</strong>：Kotlin 1.6 變更了 <code>Random.nextLong</code> 函式中的值生成演算法，以避免產生超出指定範圍的值。</p><p><strong>棄用週期</strong>：</p><ul><li>1.6.0：行為立即修復</li></ul></blockquote><h3 id="逐步將集合-min-和-max-函式的回傳型別變更為不可為空" tabindex="-1">逐步將集合 <code>min</code> 和 <code>max</code> 函式的回傳型別變更為不可為空 <a class="header-anchor" href="#逐步將集合-min-和-max-函式的回傳型別變更為不可為空" aria-label="Permalink to &quot;逐步將集合 `min` 和 `max` 函式的回傳型別變更為不可為空&quot;">​</a></h3><blockquote><p><strong>議題</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-38854" target="_blank" rel="noreferrer">KT-38854</a></p><p><strong>元件</strong>：kotlin-stdlib</p><p><strong>不相容變更類型</strong>：來源</p><p><strong>簡述</strong>：集合 <code>min</code> 和 <code>max</code> 函式的回傳型別將在 Kotlin 1.7 中變更為不可為空</p><p><strong>棄用週期</strong>：</p><ul><li>1.4.0：引入 <code>...OrNull</code> 函式作為同義詞，並棄用受影響的 API（詳情請參閱議題）</li><li>1.5.0：將受影響 API 的棄用級別提升為錯誤</li><li>1.6.0：從公共 API 隱藏已棄用的函式</li><li>&gt;= 1.7：重新引入受影響的 API，但回傳型別為不可為空</li></ul></blockquote><h3 id="棄用浮點陣列函式-contains、indexof、lastindexof" tabindex="-1">棄用浮點陣列函式：<code>contains</code>、<code>indexOf</code>、<code>lastIndexOf</code> <a class="header-anchor" href="#棄用浮點陣列函式-contains、indexof、lastindexof" aria-label="Permalink to &quot;棄用浮點陣列函式：`contains`、`indexOf`、`lastIndexOf`&quot;">​</a></h3><blockquote><p><strong>議題</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-28753" target="_blank" rel="noreferrer">KT-28753</a></p><p><strong>元件</strong>：kotlin-stdlib</p><p><strong>不相容變更類型</strong>：來源</p><p><strong>簡述</strong>：Kotlin 棄用浮點陣列函式 <code>contains</code>、<code>indexOf</code>、<code>lastIndexOf</code>，這些函式使用 IEEE-754 順序而非總順序比較值</p><p><strong>棄用週期</strong>：</p><ul><li>1.4.0：以警告棄用受影響的函式</li><li>1.6.0：將棄用級別提升為錯誤</li><li>&gt;= 1.7：從公共 API 隱藏已棄用的函式</li></ul></blockquote><h3 id="將宣告從-kotlin-dom-和-kotlin-browser-套件遷移到-kotlinx" tabindex="-1">將宣告從 <code>kotlin.dom</code> 和 <code>kotlin.browser</code> 套件遷移到 <code>kotlinx.*</code> <a class="header-anchor" href="#將宣告從-kotlin-dom-和-kotlin-browser-套件遷移到-kotlinx" aria-label="Permalink to &quot;將宣告從 `kotlin.dom` 和 `kotlin.browser` 套件遷移到 `kotlinx.*`&quot;">​</a></h3><blockquote><p><strong>議題</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-39330" target="_blank" rel="noreferrer">KT-39330</a></p><p><strong>元件</strong>：kotlin-stdlib (JS)</p><p><strong>不相容變更類型</strong>：來源</p><p><strong>簡述</strong>：<code>kotlin.dom</code> 和 <code>kotlin.browser</code> 套件中的宣告已移動到對應的 <code>kotlinx.*</code> 套件，為從 stdlib 中提取它們做準備</p><p><strong>棄用週期</strong>：</p><ul><li>1.4.0：在 <code>kotlinx.dom</code> 和 <code>kotlinx.browser</code> 套件中引入替代 API</li><li>1.4.0：棄用 <code>kotlin.dom</code> 和 <code>kotlin.browser</code> 套件中的 API，並建議以上新 API 作為替代方案</li><li>1.6.0：將棄用級別提升為錯誤</li><li>&gt;= 1.7：從 stdlib 移除已棄用的函式</li><li>&gt;= 1.7：將 <code>kotlinx.*</code> 套件中的 API 移動到單獨的函式庫</li></ul></blockquote><h3 id="使-kotlin-js-中的-regex-replace-函式不再是內聯函式" tabindex="-1">使 Kotlin/JS 中的 <code>Regex.replace</code> 函式不再是內聯函式 <a class="header-anchor" href="#使-kotlin-js-中的-regex-replace-函式不再是內聯函式" aria-label="Permalink to &quot;使 Kotlin/JS 中的 `Regex.replace` 函式不再是內聯函式&quot;">​</a></h3><blockquote><p><strong>議題</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-27738" target="_blank" rel="noreferrer">KT-27738</a></p><p><strong>元件</strong>：kotlin-stdlib (JS)</p><p><strong>不相容變更類型</strong>：來源</p><p><strong>簡述</strong>：帶有函式 <code>transform</code> 參數的 <code>Regex.replace</code> 函式將不再是 Kotlin/JS 中的內聯函式</p><p><strong>棄用週期</strong>：</p><ul><li>1.6.0：從受影響的函式中移除 <code>inline</code> 修飾符</li></ul></blockquote><h3 id="當替換字串包含群組參考時-jvm-和-js-中-regex-replace-函式的行為不同" tabindex="-1">當替換字串包含群組參考時，JVM 和 JS 中 <code>Regex.replace</code> 函式的行為不同 <a class="header-anchor" href="#當替換字串包含群組參考時-jvm-和-js-中-regex-replace-函式的行為不同" aria-label="Permalink to &quot;當替換字串包含群組參考時，JVM 和 JS 中 `Regex.replace` 函式的行為不同&quot;">​</a></h3><blockquote><p><strong>議題</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-28378" target="_blank" rel="noreferrer">KT-28378</a></p><p><strong>元件</strong>：kotlin-stdlib (JS)</p><p><strong>不相容變更類型</strong>：行為</p><p><strong>簡述</strong>：Kotlin/JS 中帶有替換模式字串的 <code>Regex.replace</code> 函式將遵循與 Kotlin/JVM 中相同的模式語法</p><p><strong>棄用週期</strong>：</p><ul><li>1.6.0：變更 Kotlin/JS stdlib 中 <code>Regex.replace</code> 的替換模式處理方式</li></ul></blockquote><h3 id="在-js-regex-中使用-unicode-大小寫摺疊" tabindex="-1">在 JS <code>Regex</code> 中使用 Unicode 大小寫摺疊 <a class="header-anchor" href="#在-js-regex-中使用-unicode-大小寫摺疊" aria-label="Permalink to &quot;在 JS `Regex` 中使用 Unicode 大小寫摺疊&quot;">​</a></h3><blockquote><p><strong>議題</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-45928" target="_blank" rel="noreferrer">KT-45928</a></p><p><strong>元件</strong>：kotlin-stdlib (JS)</p><p><strong>不相容變更類型</strong>：行為</p><p><strong>簡述</strong>：Kotlin/JS 中的 <code>Regex</code> 類別在呼叫底層 JS 正規表達式引擎以根據 Unicode 規則搜尋和比較字元時，將使用 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode" target="_blank" rel="noreferrer"><code>unicode</code></a> 標誌。這會帶來 JS 環境的某些版本要求，並導致對正規表達式模式字串中不必要的轉義進行更嚴格的驗證。</p><p><strong>棄用週期</strong>：</p><ul><li>1.5.0：在 JS <code>Regex</code> 類別的大多數函式中啟用 Unicode 大小寫摺疊</li><li>1.6.0：在 <code>Regex.replaceFirst</code> 函式中啟用 Unicode 大小寫摺疊</li></ul></blockquote><h3 id="棄用部分僅限-js-的-api" tabindex="-1">棄用部分僅限 JS 的 API <a class="header-anchor" href="#棄用部分僅限-js-的-api" aria-label="Permalink to &quot;棄用部分僅限 JS 的 API&quot;">​</a></h3><blockquote><p><strong>議題</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-48587" target="_blank" rel="noreferrer">KT-48587</a></p><p><strong>元件</strong>：kotlin-stdlib (JS)</p><p><strong>不相容變更類型</strong>：來源</p><p><strong>簡述</strong>：stdlib 中許多僅限 JS 的函式已棄用並將移除。它們包括：<code>String.concat(String)</code>、<code>String.match(regex: String)</code>、<code>String.matches(regex: String)</code>，以及接受比較函式的陣列 <code>sort</code> 函式，例如 <code>Array&lt;out T&gt;.sort(comparison: (a: T, b: T) -&gt; Int)</code></p><p><strong>棄用週期</strong>：</p><ul><li>1.6.0：以警告棄用受影響的函式</li><li>1.7.0：將棄用級別提升為錯誤</li><li>1.8.0：從公共 API 移除已棄用的函式</li></ul></blockquote><h3 id="從-kotlin-js-類別的公共-api-隱藏實作和互通性特定函式" tabindex="-1">從 Kotlin/JS 類別的公共 API 隱藏實作和互通性特定函式 <a class="header-anchor" href="#從-kotlin-js-類別的公共-api-隱藏實作和互通性特定函式" aria-label="Permalink to &quot;從 Kotlin/JS 類別的公共 API 隱藏實作和互通性特定函式&quot;">​</a></h3><blockquote><p><strong>議題</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-48587" target="_blank" rel="noreferrer">KT-48587</a></p><p><strong>元件</strong>：kotlin-stdlib (JS)</p><p><strong>不相容變更類型</strong>：來源、二進位</p><p><strong>簡述</strong>：函式 <code>HashMap.createEntrySet</code> 和 <code>AbstactMutableCollection.toJSON</code> 將其可見性變更為 <code>internal</code></p><p><strong>棄用週期</strong>：</p><ul><li>1.6.0：將函式設為 <code>internal</code>，從而將其從公共 API 中移除</li></ul></blockquote><h2 id="工具" tabindex="-1">工具 <a class="header-anchor" href="#工具" aria-label="Permalink to &quot;工具&quot;">​</a></h2><h3 id="棄用-kotlingradlesubplugin-類別" tabindex="-1">棄用 <code>KotlinGradleSubplugin</code> 類別 <a class="header-anchor" href="#棄用-kotlingradlesubplugin-類別" aria-label="Permalink to &quot;棄用 `KotlinGradleSubplugin` 類別&quot;">​</a></h3><blockquote><p><strong>議題</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-48830" target="_blank" rel="noreferrer">KT-48830</a></p><p><strong>元件</strong>：Gradle</p><p><strong>不相容變更類型</strong>：來源</p><p><strong>簡述</strong>：<code>KotlinGradleSubplugin</code> 類別將被棄用，以 <code>KotlinCompilerPluginSupportPlugin</code> 取代</p><p><strong>棄用週期</strong>：</p><ul><li>1.6.0：將棄用級別提升為錯誤</li><li>&gt;= 1.7.0：移除已棄用的類別</li></ul></blockquote><h3 id="移除-kotlin-usefallbackcompilersearch-建置選項" tabindex="-1">移除 <code>kotlin.useFallbackCompilerSearch</code> 建置選項 <a class="header-anchor" href="#移除-kotlin-usefallbackcompilersearch-建置選項" aria-label="Permalink to &quot;移除 `kotlin.useFallbackCompilerSearch` 建置選項&quot;">​</a></h3><blockquote><p><strong>議題</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-46719" target="_blank" rel="noreferrer">KT-46719</a></p><p><strong>元件</strong>：Gradle</p><p><strong>不相容變更類型</strong>：來源</p><p><strong>簡述</strong>：移除已棄用的 <code>kotlin.useFallbackCompilerSearch</code> 建置選項</p><p><strong>棄用週期</strong>：</p><ul><li>1.5.0：將棄用級別提升為警告</li><li>1.6.0：移除已棄用的選項</li></ul></blockquote><h3 id="移除多個編譯器選項" tabindex="-1">移除多個編譯器選項 <a class="header-anchor" href="#移除多個編譯器選項" aria-label="Permalink to &quot;移除多個編譯器選項&quot;">​</a></h3><blockquote><p><strong>議題</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-48847" target="_blank" rel="noreferrer">KT-48847</a></p><p><strong>元件</strong>：Gradle</p><p><strong>不相容變更類型</strong>：來源</p><p><strong>簡述</strong>：移除已棄用的 <code>noReflect</code> 和 <code>includeRuntime</code> 編譯器選項</p><p><strong>棄用週期</strong>：</p><ul><li>1.5.0：將棄用級別提升為錯誤</li><li>1.6.0：移除已棄用的選項</li></ul></blockquote><h3 id="棄用-useir-編譯器選項" tabindex="-1">棄用 <code>useIR</code> 編譯器選項 <a class="header-anchor" href="#棄用-useir-編譯器選項" aria-label="Permalink to &quot;棄用 `useIR` 編譯器選項&quot;">​</a></h3><blockquote><p><strong>議題</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-48847" target="_blank" rel="noreferrer">KT-48847</a></p><p><strong>元件</strong>：Gradle</p><p><strong>不相容變更類型</strong>：來源</p><p><strong>簡述</strong>：隱藏已棄用的 <code>useIR</code> 編譯器選項</p><p><strong>棄用週期</strong>：</p><ul><li>1.5.0：將棄用級別提升為警告</li><li>1.6.0：隱藏選項</li><li>&gt;= 1.7.0：移除已棄用的選項</li></ul></blockquote><h3 id="棄用-kapt-use-worker-api-gradle-屬性" tabindex="-1">棄用 <code>kapt.use.worker.api</code> Gradle 屬性 <a class="header-anchor" href="#棄用-kapt-use-worker-api-gradle-屬性" aria-label="Permalink to &quot;棄用 `kapt.use.worker.api` Gradle 屬性&quot;">​</a></h3><blockquote><p><strong>議題</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-48826" target="_blank" rel="noreferrer">KT-48826</a></p><p><strong>元件</strong>：Gradle</p><p><strong>不相容變更類型</strong>：來源</p><p><strong>簡述</strong>：棄用 <code>kapt.use.worker.api</code> 屬性，該屬性允許透過 Gradle Workers API 執行 kapt（預設：true）</p><p><strong>棄用週期</strong>：</p><ul><li>1.6.20：將棄用級別提升為警告</li><li>&gt;= 1.8.0：移除此屬性</li></ul></blockquote><h3 id="移除-kotlin-parallel-tasks-in-project-gradle-屬性" tabindex="-1">移除 <code>kotlin.parallel.tasks.in.project</code> Gradle 屬性 <a class="header-anchor" href="#移除-kotlin-parallel-tasks-in-project-gradle-屬性" aria-label="Permalink to &quot;移除 `kotlin.parallel.tasks.in.project` Gradle 屬性&quot;">​</a></h3><blockquote><p><strong>議題</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-46406" target="_blank" rel="noreferrer">KT-46406</a></p><p><strong>元件</strong>：Gradle</p><p><strong>不相容變更類型</strong>：來源</p><p><strong>簡述</strong>：移除 <code>kotlin.parallel.tasks.in.project</code> 屬性</p><p><strong>棄用週期</strong>：</p><ul><li>1.5.20：將棄用級別提升為警告</li><li>1.6.20：移除此屬性</li></ul></blockquote><h3 id="棄用-kotlin-experimental-coroutines-gradle-dsl-選項和-kotlin-coroutines-gradle-屬性" tabindex="-1">棄用 <code>kotlin.experimental.coroutines</code> Gradle DSL 選項和 <code>kotlin.coroutines</code> Gradle 屬性 <a class="header-anchor" href="#棄用-kotlin-experimental-coroutines-gradle-dsl-選項和-kotlin-coroutines-gradle-屬性" aria-label="Permalink to &quot;棄用 `kotlin.experimental.coroutines` Gradle DSL 選項和 `kotlin.coroutines` Gradle 屬性&quot;">​</a></h3><blockquote><p><strong>議題</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-50369" target="_blank" rel="noreferrer">KT-50369</a></p><p><strong>元件</strong>：Gradle</p><p><strong>不相容變更類型</strong>：來源</p><p><strong>簡述</strong>：棄用 <code>kotlin.experimental.coroutines</code> Gradle DSL 選項和 <code>kotlin.coroutines</code> 屬性</p><p><strong>棄用週期</strong>：</p><ul><li>1.6.20：將棄用級別提升為警告</li><li>&gt;= 1.7.0：移除 DSL 選項和屬性</li></ul></blockquote>',72)]))}const h=e(a,[["render",l]]);export{u as __pageData,h as default};
