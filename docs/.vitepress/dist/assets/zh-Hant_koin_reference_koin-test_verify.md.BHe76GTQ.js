import{_ as i,c as a,o as n,ag as l}from"./chunks/framework.Bksy39di.js";const r=JSON.parse('{"title":"驗證您的 Koin 配置","description":"","frontmatter":{"title":"驗證您的 Koin 配置"},"headers":[],"relativePath":"zh-Hant/koin/reference/koin-test/verify.md","filePath":"zh-Hant/koin/reference/koin-test/verify.md","lastUpdated":1750001831000}'),p={name:"zh-Hant/koin/reference/koin-test/verify.md"};function e(t,s,h,k,d,E){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="驗證您的-koin-配置" tabindex="-1">驗證您的 Koin 配置 <a class="header-anchor" href="#驗證您的-koin-配置" aria-label="Permalink to &quot;驗證您的 Koin 配置&quot;">​</a></h1><p>Koin 允許您驗證您的配置模組，避免在運行時發現依賴注入問題。</p><h2 id="使用-verify-進行-koin-配置檢查-僅限-jvm-3-3" tabindex="-1">使用 Verify() 進行 Koin 配置檢查 - 僅限 JVM [3.3] <a class="header-anchor" href="#使用-verify-進行-koin-配置檢查-僅限-jvm-3-3" aria-label="Permalink to &quot;使用 Verify() 進行 Koin 配置檢查 - 僅限 JVM [3.3]&quot;">​</a></h2><p>在 Koin 模組上使用 <code>verify()</code> 擴展函數即可！在幕後，這將驗證所有建構函數類別並與 Koin 配置進行交叉檢查，以確認是否存在為此依賴項宣告的元件。如果失敗，該函數將拋出 <code>MissingKoinDefinitionException</code>。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> niaAppModule </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    includes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        jankStatsKoinModule,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        dataKoinModule,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        syncWorkerKoinModule,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        topicKoinModule,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        authorKoinModule,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        interestsKoinModule,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        settingsKoinModule,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        bookMarksKoinModule,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        forYouKoinModule</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    viewModelOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MainActivityViewModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NiaAppModuleCheck</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> checkKoinModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 驗證 Koin 配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        niaAppModule.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">verify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>啟動 JUnit 測試，即可完成！✅</p><p>您可能會看到，我們使用 <code>extra Types</code> 參數來列出在 Koin 配置中使用但未直接宣告的類型。<code>SavedStateHandle</code> 和 <code>WorkerParameters</code> 類型就是這種情況，它們被用作注入的參數。<code>Context</code> 在啟動時由 <code>androidContext()</code> 函數宣告。</p><p><code>verify()</code> API 運行起來非常輕量，並且不需要任何類型的模擬 (mock)/存根 (stub) 即可在您的配置上運行。</p><h2 id="使用注入參數進行驗證-僅限-jvm-4-0" tabindex="-1">使用注入參數進行驗證 - 僅限 JVM [4.0] <a class="header-anchor" href="#使用注入參數進行驗證-僅限-jvm-4-0" aria-label="Permalink to &quot;使用注入參數進行驗證 - 僅限 JVM [4.0]&quot;">​</a></h2><p>當您的配置涉及使用 <code>parametersOf</code> 注入物件時，驗證將會失敗，因為您的配置中沒有參數類型的定義。 然而，您可以定義一個參數類型，以便透過給定的定義 <code>definition&lt;Type&gt;(Class1::class, Class2::class ...)</code> 注入。</p><p>以下是如何實現的：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ModuleCheck</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 給定一個帶有注入定義的定義</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> module </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        single</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { (a: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Simple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.ComponentA) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Simple.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ComponentB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> checkKoinModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 驗證並宣告注入參數</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        module.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">verify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            injections </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> injectedParameters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                definition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Simple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ComponentB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(Simple.ComponentA::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="類型白名單" tabindex="-1">類型白名單 <a class="header-anchor" href="#類型白名單" aria-label="Permalink to &quot;類型白名單&quot;">​</a></h2><p>我們可以將類型添加為「白名單」。這意味著該類型對於任何定義都被視為系統中存在的。以下是如何實現的：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NiaAppModuleCheck</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> checkKoinModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 驗證 Koin 配置</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        niaAppModule.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">verify</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 列出用於定義中但未直接宣告的類型（例如參數注入）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            extraTypes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MyType::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="核心註解-自動宣告安全類型" tabindex="-1">核心註解 - 自動宣告安全類型 <a class="header-anchor" href="#核心註解-自動宣告安全類型" aria-label="Permalink to &quot;核心註解 - 自動宣告安全類型&quot;">​</a></h2><p>我們還在主要的 Koin 專案中（位於 <code>koin-core-annotations</code> 模組下）引入了註解，這些註解是從 Koin 註解中提取的。 這些註解透過使用 <code>@InjectedParam</code> 和 <code>@Provided</code> 避免了冗長的宣告，以幫助 Koin 推斷注入合約並驗證配置。這有助於識別這些元素，而不是採用複雜的 DSL 配置。 目前，這些註解僅與 <code>verify</code> API 結合使用。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 表示 &quot;a&quot; 是一個注入參數</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ComponentB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@InjectedParam</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ComponentA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 表示 &quot;a&quot; 是動態提供的</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ComponentBProvided</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Provided</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ComponentA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>這有助於防止在測試或運行時出現的細微問題，而無需編寫自訂驗證邏輯。</p>`,20)]))}const c=i(p,[["render",e]]);export{r as __pageData,c as default};
