import{_ as n,C as a,c as o,o as s,G as e,ag as r}from"./chunks/framework.Bksy39di.js";const f=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/native-c-interop-stability.md","filePath":"zh-Hant/kotlin/native-c-interop-stability.md","lastUpdated":1754307826000}'),p={name:"zh-Hant/kotlin/native-c-interop-stability.md"};function h(c,i,d,k,b,m){const t=a("TopicTitle"),l=a("primary-label");return s(),o("div",null,[e(t,{labelRef:"beta",title:"C 和 Objective-C 函式庫匯入的穩定性"}),e(l,{ref:"beta"},null,512),i[0]||(i[0]=r(`<p>Kotlin/Native 提供 <a href="/zh-Hant/kotlin/native-c-interop">匯入 C</a> 和 <a href="/zh-Hant/kotlin/native-objc-interop">Objective-C</a> 函式庫的能力。這些函式庫的支援目前處於 <a href="/zh-Hant/kotlin/components-stability#kotlin-native">Beta</a> 階段。</p><p>處於 Beta 狀態的主要原因之一是，使用 C 和 Objective-C 函式庫可能會影響您的程式碼與不同版本的 Kotlin、依賴項和 Xcode 的相容性。本指南列出了在實踐中經常發生的相容性問題、僅在某些情況下發生的問題，以及假設性的潛在問題。</p><p>在本指南中，C 和 Objective-C 函式庫，為簡便起見，或稱 <em>原生函式庫</em>，分為：</p><ul><li><a href="#platform-libraries">平台函式庫</a>，Kotlin 預設提供此類函式庫，用於存取每個平台上的「系統」原生函式庫。</li><li><a href="#third-party-libraries">第三方函式庫</a>，所有其他需要額外配置才能在 Kotlin 中使用的原生函式庫。</li></ul><p>這兩種類型的原生函式庫具有不同的相容性細節。</p><h2 id="平台函式庫" tabindex="-1">平台函式庫 <a class="header-anchor" href="#平台函式庫" aria-label="Permalink to &quot;平台函式庫&quot;">​</a></h2><p><a href="/zh-Hant/kotlin/native-platform-libs"><em>平台函式庫</em></a> 隨附於 Kotlin/Native 編譯器。因此，在專案中使用不同版本的 Kotlin 會導致取得不同版本的平台函式庫。對於 Apple 目標（例如 iOS），平台函式庫是根據特定編譯器版本支援的 Xcode 版本生成的。</p><p>隨附於 Xcode SDK 的原生函式庫 API 隨每個 Xcode 版本而改變。即使當這些變更在原生語言內部是來源碼和二進位相容的，由於互通性實作，它們對於 Kotlin 而言可能會產生破壞性變更。</p><p>結果是，更新專案中的 Kotlin 版本可能會在平台函式庫中帶來破壞性變更。這可能在兩種情況下很重要：</p><ul><li><p>平台函式庫中存在來源碼破壞性變更，影響專案中來源碼的編譯。通常，這很容易修復。</p></li><li><p>平台函式庫中存在二進位破壞性變更，影響您的一些依賴項。通常沒有簡單的解決方法，您需要等到函式庫開發人員在其端修復此問題，例如，透過更新 Kotlin 版本。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>此類二進位不相容性表現為連結警告和執行時異常。如果您希望在編譯時檢測它們，請使用 <a href="/zh-Hant/kotlin/whatsnew19#library-linkage-in-kotlin-native"><code>-Xpartial-linkage-loglevel=ERROR</code></a> 編譯器選項，將警告提升為錯誤。</p></div></li></ul><p>當 JetBrains 團隊更新用於生成平台函式庫的 Xcode 版本時，他們會盡力避免平台函式庫中出現破壞性變更。每當可能發生破壞性變更時，團隊會進行影響分析，並決定要麼忽略特定的變更（因為受影響的 API 不常用），要麼應用臨時修復。</p><p>平台函式庫中破壞性變更的另一個潛在原因，是將原生 API 轉譯為 Kotlin 的演算法發生變更。JetBrains 團隊在這些情況下也盡力避免破壞性變更。</p><h3 id="從平台函式庫使用新的-objective-c-類別" tabindex="-1">從平台函式庫使用新的 Objective-C 類別 <a class="header-anchor" href="#從平台函式庫使用新的-objective-c-類別" aria-label="Permalink to &quot;從平台函式庫使用新的 Objective-C 類別&quot;">​</a></h3><p>Kotlin 編譯器不會阻止您使用在您的部署目標中不可用的 Objective-C 類別。</p><p>例如，如果您的部署目標是 iOS 17.0，而您使用了一個僅在 iOS 18.0 中出現的類別，編譯器不會警告您，並且您的應用程式可能會在裝有 iOS 17.0 的裝置上啟動時崩潰。此外，即使執行從未達到那些用法，這種崩潰也會發生，因此僅透過版本檢查來保護它們是不夠的。</p><p>更多詳細資訊，請參閱 <a href="/zh-Hant/kotlin/native-objc-interop#strong-linking">強連結</a>。</p><h2 id="第三方函式庫" tabindex="-1">第三方函式庫 <a class="header-anchor" href="#第三方函式庫" aria-label="Permalink to &quot;第三方函式庫&quot;">​</a></h2><p>除了系統平台函式庫之外，Kotlin/Native 還允許匯入第三方原生函式庫。例如，您可以使用 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-cocoapods-overview.html" target="_blank" rel="noreferrer">CocoaPods 整合</a> 或設定 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-dsl-reference.html#cinterops" target="_blank" rel="noreferrer">cinterops 配置</a>。</p><h3 id="匯入具有不符-xcode-版本的函式庫" tabindex="-1">匯入具有不符 Xcode 版本的函式庫 <a class="header-anchor" href="#匯入具有不符-xcode-版本的函式庫" aria-label="Permalink to &quot;匯入具有不符 Xcode 版本的函式庫&quot;">​</a></h3><p>匯入第三方原生函式庫可能會導致與不同 Xcode 版本的相容性問題。</p><p>在處理原生函式庫時，編譯器通常使用來自本地安裝 Xcode 的標頭檔，因為幾乎所有原生函式庫標頭都會匯入來自 Xcode 的「標準」標頭（例如 <code>stdint.h</code>）。</p><p>這就是為什麼 Xcode 版本會影響原生函式庫匯入 Kotlin 的原因。這也是為什麼當使用第三方原生函式庫時，<a href="/zh-Hant/kotlin/whatsnew21#ability-to-publish-kotlin-libraries-from-any-host">從非 Mac 主機交叉編譯 Apple 目標</a> 仍然不可能的原因之一。</p><p>每個 Kotlin 版本與單一 Xcode 版本的相容性最佳。這是推薦版本，針對對應的 Kotlin 版本進行了最充分的測試。請在 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-compatibility-guide.html#version-compatibility" target="_blank" rel="noreferrer">相容性表格</a> 中檢查與特定 Xcode 版本的相容性。</p><p>使用更新或更舊的 Xcode 版本通常可行，但可能會導致問題，通常會影響第三方原生函式庫的匯入。</p><h4 id="xcode-版本比推薦版本新" tabindex="-1">Xcode 版本比推薦版本新 <a class="header-anchor" href="#xcode-版本比推薦版本新" aria-label="Permalink to &quot;Xcode 版本比推薦版本新&quot;">​</a></h4><p>使用比推薦版本新的 Xcode 版本可能會破壞某些 Kotlin 功能。匯入第三方原生函式庫受此影響最大。使用不支援的 Xcode 版本時，它通常根本無法運作。</p><h4 id="xcode-版本比推薦版本舊" tabindex="-1">Xcode 版本比推薦版本舊 <a class="header-anchor" href="#xcode-版本比推薦版本舊" aria-label="Permalink to &quot;Xcode 版本比推薦版本舊&quot;">​</a></h4><p>通常，Kotlin 與較舊的 Xcode 版本運作良好。偶爾會出現問題，最常導致以下情況：</p><ul><li>Kotlin API 參考到不存在的類型，如 <a href="https://youtrack.jetbrains.com/issue/KT-71694" target="_blank" rel="noreferrer">KT-71694</a>。</li><li>系統函式庫中的類型被包含在原生函式庫的 Kotlin API 中。在這種情況下，專案編譯成功，但一個系統原生類型會被新增到您的原生函式庫套件中。例如，您可能隨後會在 IDE 自動完成中意外地看到此類型。</li></ul><p>如果您的 Kotlin 函式庫成功編譯，即使使用較舊的 Xcode 版本，發布也是安全的，除非您在 <a href="#using-native-types-in-library-api">您的 Kotlin 函式庫 API 中使用來自第三方函式庫的類型</a>。</p><h3 id="使用傳遞的第三方原生依賴項" tabindex="-1">使用傳遞的第三方原生依賴項 <a class="header-anchor" href="#使用傳遞的第三方原生依賴項" aria-label="Permalink to &quot;使用傳遞的第三方原生依賴項&quot;">​</a></h3><p>當您的專案中的 Kotlin 函式庫在其實作中匯入第三方原生函式庫時，您的專案也將獲得對該原生函式庫的存取權限。發生這種情況是因為 Kotlin/Native 不區分 <code>api</code> 和 <code>implementation</code> 依賴類型，因此原生函式庫總是最終成為 <code>api</code> 依賴項。</p><p>使用此類傳遞的原生依賴項更容易出現更多的相容性問題。例如，Kotlin 函式庫開發人員所做的變更可能會使原生函式庫的 Kotlin 表示形式不相容，導致您更新 Kotlin 函式庫時出現相容性問題。</p><p>因此，與其依賴於傳遞的依賴項，不如直接配置與相同原生函式庫的互通性。為此，請為原生函式庫使用另一個套件名稱，類似於 <a href="#use-custom-package-name">使用自訂套件名稱</a> 以防止相容性問題。</p><h3 id="在函式庫-api-中使用原生類型" tabindex="-1">在函式庫 API 中使用原生類型 <a class="header-anchor" href="#在函式庫-api-中使用原生類型" aria-label="Permalink to &quot;在函式庫 API 中使用原生類型&quot;">​</a></h3><p>如果您發布 Kotlin 函式庫，請注意您的函式庫 API 中的原生類型。此類用法預計將來會被破壞，以修復相容性及其他問題，這將影響您的函式庫使用者。</p><p>在某些情況下，在函式庫 API 中使用原生類型是必要的，因為函式庫的用途需要它，例如，當一個 Kotlin 函式庫基本上是為原生函式庫提供擴充功能時。如果這不是您的情況，請避免或限制在函式庫 API 中使用原生類型。</p><p>此建議僅適用於函式庫 API 中原生類型的用法，與應用程式碼無關。它也不適用於函式庫實作，例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 請格外小心！函式庫 API 中使用了原生類型：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createUIView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UIView</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handleThirdPartyNativeType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(c: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ThirdPartyNativeType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 照常小心；函式庫 API 中沒有使用原生類型：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">internal</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createUIViewController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UIViewController</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getDate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NSDate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><h3 id="發布使用第三方函式庫的函式庫" tabindex="-1">發布使用第三方函式庫的函式庫 <a class="header-anchor" href="#發布使用第三方函式庫的函式庫" aria-label="Permalink to &quot;發布使用第三方函式庫的函式庫&quot;">​</a></h3><p>如果您發布使用第三方原生函式庫的 Kotlin 函式庫，您可以做幾件事來避免相容性問題。</p><h4 id="使用自訂套件名稱" tabindex="-1">使用自訂套件名稱 <a class="header-anchor" href="#使用自訂套件名稱" aria-label="Permalink to &quot;使用自訂套件名稱&quot;">​</a></h4><p>為第三方原生函式庫使用自訂套件名稱可能有助於防止相容性問題。</p><p>當原生函式庫匯入 Kotlin 時，它會取得一個 Kotlin 套件名稱。如果它不唯一，函式庫使用者可能會遇到衝突。例如，如果在使用者專案中的其他位置或在其他依賴項中匯入了一個具有相同套件名稱的原生函式庫，這兩種用法將會衝突。</p><p>在這種情況下，編譯可能會失敗並出現 <code>Linking globals named &#39;...&#39;: symbol multiply defined!</code> 錯誤。然而，可能會有其他錯誤，甚至成功編譯。</p><p>若要為第三方原生函式庫使用自訂名稱：</p><ul><li>透過 CocoaPods 整合匯入原生函式庫時，請在 Gradle 建置指令碼的 <code>pod {}</code> 區塊中使用 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-cocoapods-dsl-reference.html#pod-function" target="_blank" rel="noreferrer"><code>packageName</code></a> 屬性。</li><li>使用 <code>cinterops</code> 配置匯入原生函式庫時，請在配置區塊中使用 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-dsl-reference.html#cinterops" target="_blank" rel="noreferrer"><code>packageName</code></a> 屬性。</li></ul><h4 id="檢查與舊版-kotlin-的相容性" tabindex="-1">檢查與舊版 Kotlin 的相容性 <a class="header-anchor" href="#檢查與舊版-kotlin-的相容性" aria-label="Permalink to &quot;檢查與舊版 Kotlin 的相容性&quot;">​</a></h4><p>發布 Kotlin 函式庫時，使用第三方原生函式庫可能會影響函式庫與其他 Kotlin 版本的相容性，具體而言：</p><ul><li>Kotlin Multiplatform 函式庫不保證向前相容性（指舊版編譯器可以使用由新版編譯器編譯的函式庫）。 在實踐中，它在某些情況下是可行的；然而，使用原生函式庫可能會進一步限制向前相容性。</li><li>Kotlin Multiplatform 函式庫提供向後相容性（指新版編譯器可以使用由舊版編譯器產生的函式庫）。 在 Kotlin 函式庫中使用原生函式庫通常不應影響其向後相容性。但這會增加更多影響相容性的編譯器錯誤的可能性。</li></ul><h4 id="避免嵌入靜態函式庫" tabindex="-1">避免嵌入靜態函式庫 <a class="header-anchor" href="#避免嵌入靜態函式庫" aria-label="Permalink to &quot;避免嵌入靜態函式庫&quot;">​</a></h4><p>匯入原生函式庫時，可以使用 <code>-staticLibrary</code> 編譯器選項或 <code>.def</code> 檔案中的 <code>staticLibraries</code> 屬性來包含相關的 <a href="/zh-Hant/kotlin/native-definition-file#include-a-static-library">靜態函式庫</a>（<code>.a</code> 檔案）。在這種情況下，您的函式庫使用者無需處理原生依賴項和連結器選項。</p><p>然而，無法以任何方式配置所包含靜態函式庫的使用方式：既不能排除它，也不能替換（取代）它。因此，使用者將無法解決與包含相同靜態函式庫的其他 Kotlin 函式庫的潛在衝突，也無法調整其版本。</p><h2 id="原生函式庫支援的演進" tabindex="-1">原生函式庫支援的演進 <a class="header-anchor" href="#原生函式庫支援的演進" aria-label="Permalink to &quot;原生函式庫支援的演進&quot;">​</a></h2><p>目前，在 Kotlin 專案中使用 C 和 Objective-C 可能會導致相容性問題；其中一些列於本指南中。為了解決這些問題，未來可能需要一些破壞性變更，這本身也導致了相容性問題。</p>`,55))])}const g=n(p,[["render",h]]);export{f as __pageData,g as default};
