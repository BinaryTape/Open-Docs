import{_ as g,C as a,c as E,o as _,G as e,ag as l,w as n,j as i,a as t}from"./chunks/framework.Bksy39di.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ktor/server-autoheadresponse.md","filePath":"ktor/server-autoheadresponse.md","lastUpdated":1755457140000}'),m={name:"ktor/server-autoheadresponse.md"};function y(v,s,F,f,C,T){const p=a("TopicTitle"),d=a("primary-label"),k=a("Links"),h=a("tldr"),u=a("link-summary"),o=a("code-block"),r=a("TabItem"),c=a("Tabs");return _(),E("div",null,[e(p,{labelRef:"server-plugin",title:"AutoHeadResponse"}),e(d,{ref:"server-plugin"},null,512),e(h,null,{default:n(()=>[s[3]||(s[3]=i("p",null,[i("b",null,"所需依赖项"),t(": "),i("code",null,"io.ktor:ktor-server-auto-head-response")],-1)),s[4]||(s[4]=i("p",null,[i("b",null,"代码示例"),t(": "),i("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/autohead"}," autohead ")],-1)),i("p",null,[i("b",null,[e(k,{href:"/ktor/server-native",summary:"Ktor 支持 Kotlin/Native，允许你在没有额外运行时或虚拟机的情况下运行服务器。"},{default:n(()=>s[0]||(s[0]=[t("原生服务器")])),_:1}),s[1]||(s[1]=t("支持"))]),s[2]||(s[2]=t(": ✅ "))])]),_:1}),e(u,null,{default:n(()=>s[5]||(s[5]=[t(" AutoHeadResponse 提供了针对每个定义了 GET 的路由自动响应 HEAD 请求的能力。 ")])),_:1}),s[6]||(s[6]=l('<p><a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auto-head-response/io.ktor.server.plugins.autohead/-auto-head-response.html" target="_blank" rel="noreferrer">AutoHeadResponse</a> 插件提供了针对每个定义了 <code>GET</code> 的路由自动响应 <code>HEAD</code> 请求的能力。如果你需要在客户端获取实际内容之前对响应进行某些处理，可以使用 AutoHeadResponse 来避免创建单独的 <a href="./server-routing#define_route">head</a> 处理程序。例如，调用 <a href="./server-responses#file">respondFile</a> 函数会自动向响应添加 <code>Content-Length</code> 和 <code>Content-Type</code> 标头，你可以在下载文件之前在客户端获取此信息。</p><h2 id="add_dependencies" tabindex="-1">添加依赖项 <a class="header-anchor" href="#add_dependencies" aria-label="Permalink to &quot;添加依赖项 {id=&quot;add_dependencies&quot;}&quot;">​</a></h2><p> 要使用 <code>AutoHeadResponse</code>，你需要将 <code>ktor-server-auto-head-response</code> 构件添加到构建脚本中： </p>',3)),e(c,{group:"languages"},{default:n(()=>[e(r,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[e(o,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-server-auto-head-response:$ktor_version")'})]),_:1}),e(r,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[e(o,{lang:"Groovy",code:'            implementation "io.ktor:ktor-server-auto-head-response:$ktor_version"'})]),_:1}),e(r,{title:"Maven","group-key":"maven"},{default:n(()=>[e(o,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-server-auto-head-response-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),s[7]||(s[7]=l(`<h2 id="用法" tabindex="-1">用法 <a class="header-anchor" href="#用法" aria-label="Permalink to &quot;用法&quot;">​</a></h2><p>为了利用此功能，我们需要在应用程序中安装 <code>AutoHeadResponse</code> 插件。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.application.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.plugins.autohead.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.response.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.routing.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(AutoHeadResponse)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/home&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;This is a response to a GET, but HEAD also works&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在我们的示例中，<code>/home</code> 路由现在将响应 <code>HEAD</code> 请求，即使没有为此动词显式定义。</p><p>需要注意的是，如果我们使用此插件，对于相同的 <code>GET</code> 路由，自定义的 <code>HEAD</code> 定义将被忽略。</p><h2 id="选项" tabindex="-1">选项 <a class="header-anchor" href="#选项" aria-label="Permalink to &quot;选项&quot;">​</a></h2><p>AutoHeadResponse 不提供任何额外的配置选项。</p>`,7))])}const B=g(m,[["render",y]]);export{b as __pageData,B as default};
