import{_ as i,c as a,o as t,ag as e}from"./chunks/framework.Bksy39di.js";const c=JSON.parse('{"title":"JavaScriptからKotlinコードを使用する","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/js-to-kotlin-interop.md","filePath":"ja/kotlin/js-to-kotlin-interop.md","lastUpdated":1754307826000}'),n={name:"ja/kotlin/js-to-kotlin-interop.md"};function l(p,s,d,h,o,k){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="javascriptからkotlinコードを使用する" tabindex="-1">JavaScriptからKotlinコードを使用する <a class="header-anchor" href="#javascriptからkotlinコードを使用する" aria-label="Permalink to &quot;JavaScriptからKotlinコードを使用する&quot;">​</a></h1><p>選択した<a href="/ja/kotlin/js-modules">JavaScriptモジュール</a>システムに応じて、Kotlin/JSコンパイラは異なる出力を生成します。しかし一般的に、Kotlinコンパイラは通常のJavaScriptクラス、関数、プロパティを生成し、それらをJavaScriptコードから自由に利用できます。ただし、いくつかの注意点があります。</p><h2 id="plainモードで宣言を個別のjavascriptオブジェクトに分離する" tabindex="-1">plainモードで宣言を個別のJavaScriptオブジェクトに分離する <a class="header-anchor" href="#plainモードで宣言を個別のjavascriptオブジェクトに分離する" aria-label="Permalink to &quot;plainモードで宣言を個別のJavaScriptオブジェクトに分離する&quot;">​</a></h2><p>モジュール種別を明示的に<code>plain</code>に設定した場合、Kotlinは現在のモジュール内のすべてのKotlin宣言を含むオブジェクトを作成します。これはグローバルオブジェクトを汚染しないようにするためです。つまり、<code>myModule</code>というモジュールの場合、すべての宣言は<code>myModule</code>オブジェクトを介してJavaScriptから利用可能です。例:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello&quot;</span></span></code></pre></div><p>JavaScriptからは次のように呼び出せます。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myModule.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span></code></pre></div><p>これは、KotlinモジュールをUMD（<code>browser</code>と<code>nodejs</code>ターゲットの両方のデフォルト設定です）、CommonJS、またはAMDのようなJavaScriptモジュールにコンパイルする場合には適用されません。この場合、宣言は選択したJavaScriptモジュールシステムで指定された形式で公開されます。例えば、UMDまたはCommonJSを使用する場合、呼び出し箇所は次のようになります。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;myModule&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span></code></pre></div><p>JavaScriptモジュールシステムに関する詳細については、<a href="/ja/kotlin/js-modules">JavaScriptモジュール</a>に関する記事を確認してください。</p><h2 id="パッケージ構造" tabindex="-1">パッケージ構造 <a class="header-anchor" href="#パッケージ構造" aria-label="Permalink to &quot;パッケージ構造&quot;">​</a></h2><p>Kotlinはパッケージ構造をJavaScriptに公開するため、宣言をルートパッケージに定義しない限り、JavaScriptで完全修飾名を使用する必要があります。例:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> my.qualified.packagename</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello&quot;</span></span></code></pre></div><p>例えば、UMDまたはCommonJSを使用する場合、呼び出し箇所は次のようになります。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;myModule&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).my.qualified.packagename.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><p>または、<code>plain</code>をモジュールシステム設定として使用する場合:</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myModule.my.qualified.packagename.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span></code></pre></div><h3 id="jsnameアノテーション" tabindex="-1">@JsNameアノテーション <a class="header-anchor" href="#jsnameアノテーション" aria-label="Permalink to &quot;@JsNameアノテーション&quot;">​</a></h3><p>場合によっては（例えば、オーバーロードをサポートするため）、KotlinコンパイラはJavaScriptコードで生成される関数や属性の名前をマングリングします。生成される名前を制御するには、<code>@JsName</code>アノテーションを使用できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Module &#39;kjs&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> hello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @JsName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;helloWithGreeting&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> hello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(greeting: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$greeting</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> $name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>このクラスはJavaScriptから次のように使用できます。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// If necessary, import &#39;kjs&#39; according to chosen module system</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> person </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> kjs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Dmitry&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// refers to module &#39;kjs&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">person.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();                          </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// prints &quot;Hello Dmitry!&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">person.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">helloWithGreeting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Servus&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// prints &quot;Servus Dmitry!&quot;</span></span></code></pre></div><p><code>@JsName</code>アノテーションを指定しなかった場合、対応する関数の名前には、関数シグネチャから計算されたサフィックスが含まれます。例えば<code>hello_61zpoe</code>のようになります。</p><p>Kotlinコンパイラがマングリングを適用しない場合があることに注意してください。</p><ul><li><code>external</code>宣言はマングリングされません。</li><li><code>external</code>クラスから継承した非<code>external</code>クラス内のオーバーライドされた関数はマングリングされません。</li></ul><p><code>@JsName</code>のパラメーターは、有効な識別子である定数文字列リテラルである必要があります。コンパイラは、有効な識別子ではない文字列を<code>@JsName</code>に渡そうとするとエラーを報告します。次の例はコンパイル時エラーを生成します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JsName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;new C()&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// error here</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">external</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> newC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><h3 id="jsexportアノテーション" tabindex="-1">@JsExportアノテーション <a class="header-anchor" href="#jsexportアノテーション" aria-label="Permalink to &quot;@JsExportアノテーション&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>この機能は<a href="/ja/kotlin/components-stability#stability-levels-explained">実験的</a>です。 その設計は将来のバージョンで変更される可能性があります。</p></div><p>トップレベル宣言（クラスや関数など）に<code>@JsExport</code>アノテーションを適用することで、Kotlin宣言をJavaScriptから利用可能にします。このアノテーションは、Kotlinで指定された名前でネストされたすべての宣言をエクスポートします。<code>@file:JsExport</code>を使用してファイルレベルで適用することもできます。</p><p>エクスポートにおける曖昧さを解消するために（同名の関数のオーバーロードなど）、<code>@JsExport</code>アノテーションを<code>@JsName</code>と組み合わせて使用し、生成およびエクスポートされる関数の名前を指定できます。</p><p>現在の<a href="/ja/kotlin/js-ir-compiler">IRコンパイラバックエンド</a>では、<code>@JsExport</code>アノテーションは関数をKotlinから可視にする唯一の方法です。</p><p>マルチプラットフォームプロジェクトでは、<code>@JsExport</code>は共通コードでも利用可能です。これはJavaScriptターゲット向けにコンパイルする場合にのみ効果があり、プラットフォーム固有ではないKotlin宣言もエクスポートできます。</p><h3 id="jsstatic" tabindex="-1">@JsStatic <a class="header-anchor" href="#jsstatic" aria-label="Permalink to &quot;@JsStatic&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>この機能は<a href="/ja/kotlin/components-stability#stability-levels-explained">実験的</a>です。いつでも廃止または変更される可能性があります。 評価目的でのみ使用してください。これに関するフィードバックを<a href="https://youtrack.jetbrains.com/issue/KT-18891/JS-provide-a-way-to-declare-static-members-JsStatic" target="_blank" rel="noreferrer">YouTrack</a>にていただけると幸いです。</p></div><p><code>@JsStatic</code>アノテーションは、ターゲット宣言に対して追加の静的メソッドを生成するようにコンパイラに指示します。これは、Kotlinコードの静的メンバーをJavaScriptで直接使用するのに役立ちます。</p><p><code>@JsStatic</code>アノテーションは、名前付きオブジェクトで定義された関数、およびクラスやインターフェース内に宣言されたコンパニオンオブジェクトに適用できます。このアノテーションを使用すると、コンパイラはオブジェクトの静的メソッドと、オブジェクト自体のインスタンスメソッドの両方を生成します。例:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Kotlin</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> C</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    companion</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        @JsStatic</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> callStatic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> callNonStatic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>ここで、<code>callStatic()</code>関数はJavaScriptでは静的ですが、<code>callNonStatic()</code>関数はそうではありません。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// JavaScript</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">C</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">callStatic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();              </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Works, accessing the static function</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">C</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">callNonStatic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();           </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Error, not a static function in the generated JavaScript</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">C</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.Companion.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">callStatic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Instance method remains</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">C</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.Companion.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">callNonStatic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// The only way it works</span></span></code></pre></div><p>オブジェクトまたはコンパニオンオブジェクトのプロパティに<code>@JsStatic</code>アノテーションを適用することも可能です。これにより、そのオブジェクト、またはコンパニオンオブジェクトを含むクラスにおいて、そのゲッターおよびセッターメソッドを静的メンバーにします。</p><h2 id="javascriptにおけるkotlinの型" tabindex="-1">JavaScriptにおけるKotlinの型 <a class="header-anchor" href="#javascriptにおけるkotlinの型" aria-label="Permalink to &quot;JavaScriptにおけるKotlinの型&quot;">​</a></h2><p>Kotlinの型がJavaScriptの型にどのようにマッピングされるかを参照してください。</p><table tabindex="0"><thead><tr><th>Kotlin</th><th>JavaScript</th><th>コメント</th></tr></thead><tbody><tr><td><code>Byte</code>, <code>Short</code>, <code>Int</code>, <code>Float</code>, <code>Double</code></td><td><code>Number</code></td><td></td></tr><tr><td><code>Char</code></td><td><code>Number</code></td><td>数値は文字コードを表します。</td></tr><tr><td><code>Long</code></td><td>Not supported</td><td>JavaScriptには64ビット整数型がないため、Kotlinクラスによってエミュレートされます。</td></tr><tr><td><code>Boolean</code></td><td><code>Boolean</code></td><td></td></tr><tr><td><code>String</code></td><td><code>String</code></td><td></td></tr><tr><td><code>Array</code></td><td><code>Array</code></td><td></td></tr><tr><td><code>ByteArray</code></td><td><code>Int8Array</code></td><td></td></tr><tr><td><code>ShortArray</code></td><td><code>Int16Array</code></td><td></td></tr><tr><td><code>IntArray</code></td><td><code>Int32Array</code></td><td></td></tr><tr><td><code>CharArray</code></td><td><code>UInt16Array</code></td><td><code>$type$ == &quot;CharArray&quot;</code>プロパティを持ちます。</td></tr><tr><td><code>FloatArray</code></td><td><code>Float32Array</code></td><td></td></tr><tr><td><code>DoubleArray</code></td><td><code>Float64Array</code></td><td></td></tr><tr><td><code>LongArray</code></td><td><code>Array&lt;kotlin.Long&gt;</code></td><td><code>$type$ == &quot;LongArray&quot;</code>プロパティを持ちます。KotlinのLong型に関するコメントも参照してください。</td></tr><tr><td><code>BooleanArray</code></td><td><code>Int8Array</code></td><td><code>$type$ == &quot;BooleanArray&quot;</code>プロパティを持ちます。</td></tr><tr><td><code>List</code>, <code>MutableList</code></td><td><code>KtList</code>, <code>KtMutableList</code></td><td><code>KtList.asJsReadonlyArrayView</code>または<code>KtMutableList.asJsArrayView</code>を介して<code>Array</code>を公開します。</td></tr><tr><td><code>Map</code>, <code>MutableMap</code></td><td><code>KtMap</code>, <code>KtMutableMap</code></td><td><code>KtMap.asJsReadonlyMapView</code>または<code>KtMutableMap.asJsMapView</code>を介してES2015の<code>Map</code>を公開します。</td></tr><tr><td><code>Set</code>, <code>MutableSet</code></td><td><code>KtSet</code>, <code>KtMutableSet</code></td><td><code>KtSet.asJsReadonlySetView</code>または<code>KtMutableSet.asJsSetView</code>を介してES2015の<code>Set</code>を公開します。</td></tr><tr><td><code>Unit</code></td><td>Undefined</td><td>戻り値の型として使用する場合はエクスポート可能ですが、パラメーターの型として使用する場合はエクスポートできません。</td></tr><tr><td><code>Any</code></td><td><code>Object</code></td><td></td></tr><tr><td><code>Throwable</code></td><td><code>Error</code></td><td></td></tr><tr><td><code>enum class Type</code></td><td><code>Type</code></td><td>列挙型エントリは静的クラスプロパティ（<code>Type.ENTRY</code>）として公開されます。</td></tr><tr><td>Nullable <code>Type?</code></td><td>\`Type</td><td>null</td></tr><tr><td>All other Kotlin types, except for those marked with <code>@JsExport</code></td><td>Not supported</td><td>Kotlinの<a href="/ja/kotlin/unsigned-integer-types">符号なし整数型</a>が含まれます。</td></tr></tbody></table><p>さらに、次の点を知っておくことが重要です。</p><ul><li><p>Kotlinは<code>kotlin.Int</code>、<code>kotlin.Byte</code>、<code>kotlin.Short</code>、<code>kotlin.Char</code>、<code>kotlin.Long</code>のオーバーフローセマンティクスを保持します。</p></li><li><p>Kotlinは実行時に数値型を区別できません（<code>kotlin.Long</code>を除く）。そのため、次のコードが機能します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 23</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Any</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Float)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>KotlinはJavaScriptで遅延オブジェクト初期化を保持します。</p></li><li><p>KotlinはJavaScriptでトップレベルプロパティの遅延初期化を実装しません。</p></li></ul>`,46)]))}const E=i(n,[["render",l]]);export{c as __pageData,E as default};
