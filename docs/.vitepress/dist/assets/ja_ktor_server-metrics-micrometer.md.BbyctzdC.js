import{_ as u,C as r,c as y,o as v,G as e,ag as k,j as i,w as a,a as t}from"./chunks/framework.Bksy39di.js";const T=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ja/ktor/server-metrics-micrometer.md","filePath":"ja/ktor/server-metrics-micrometer.md","lastUpdated":1755457140000}'),F={name:"ja/ktor/server-metrics-micrometer.md"};function f(b,s,_,C,M,B){const h=r("TopicTitle"),d=r("show-structure"),c=r("primary-label"),o=r("Links"),E=r("tldr"),m=r("link-summary"),n=r("code-block"),l=r("TabItem"),p=r("Tabs"),g=r("list");return v(),y("div",null,[e(h,{labelRef:"server-plugin",title:"Micrometer メトリクス"}),e(d,{for:"chapter",depth:"2"}),e(c,{ref:"server-plugin"},null,512),e(E,null,{default:a(()=>[s[3]||(s[3]=i("p",null,[i("b",null,"必須依存関係"),t(": "),i("code",null,"io.ktor:ktor-server-metrics-micrometer")],-1)),s[4]||(s[4]=i("p",null,[i("b",null,"コード例"),t(": "),i("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/micrometer-metrics"}," micrometer-metrics ")],-1)),i("p",null,[i("b",null,[e(o,{href:"/ktor/server-native",summary:"KtorはKotlin/Nativeをサポートしており、追加のランタイムや仮想マシンなしでサーバーを実行できます。"},{default:a(()=>s[0]||(s[0]=[t("ネイティブサーバー")])),_:1}),s[1]||(s[1]=t("のサポート"))]),s[2]||(s[2]=t(": ✖️ "))])]),_:1}),e(m,null,{default:a(()=>s[5]||(s[5]=[t("MicrometerMetricsプラグインは、KtorサーバーアプリケーションでMicrometerメトリクスを有効にし、Prometheus、JMX、Elasticなどの必要な監視システムを選択できるようにします。")])),_:1}),s[21]||(s[21]=k('<p><a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-metrics-micrometer/io.ktor.server.metrics.micrometer/-micrometer-metrics" target="_blank" rel="noreferrer">MicrometerMetrics</a>プラグインは、Ktorサーバーアプリケーションで<a href="https://micrometer.io/docs" target="_blank" rel="noreferrer">Micrometer</a>メトリクスを有効にし、Prometheus、JMX、Elasticなどの必要な監視システムを選択できるようにします。デフォルトでは、KtorはHTTPリクエストを監視するためのメトリクスと、<a href="https://micrometer.io/docs/ref/jvm" target="_blank" rel="noreferrer">JVMを監視</a>するための一連の低レベルメトリクスを公開します。これらのメトリクスをカスタマイズしたり、新しいメトリクスを作成したりできます。</p><h2 id="add_dependencies" tabindex="-1">依存関係を追加する <a class="header-anchor" href="#add_dependencies" aria-label="Permalink to &quot;依存関係を追加する {id=&quot;add_dependencies&quot;}&quot;">​</a></h2><p><code>MicrometerMetrics</code>を有効にするには、ビルドスクリプトに以下のアーティファクトを含める必要があります。</p>',3)),i("ul",null,[i("li",null,[s[6]||(s[6]=i("p",null,[i("code",null,"ktor-server-metrics-micrometer"),t("の依存関係を追加します。")],-1)),e(p,{group:"languages"},{default:a(()=>[e(l,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:a(()=>[e(n,{lang:"Kotlin",code:'              implementation("io.ktor:ktor-server-metrics-micrometer:$ktor_version")'})]),_:1}),e(l,{title:"Gradle (Groovy)","group-key":"groovy"},{default:a(()=>[e(n,{lang:"Groovy",code:'              implementation "io.ktor:ktor-server-metrics-micrometer:$ktor_version"'})]),_:1}),e(l,{title:"Maven","group-key":"maven"},{default:a(()=>[e(n,{lang:"XML",code:`              <dependency>
                  <groupId>io.ktor</groupId>
                  <artifactId>ktor-server-metrics-micrometer-jvm</artifactId>
                  <version>\${ktor_version}</version>
              </dependency>`})]),_:1})]),_:1})]),i("li",null,[s[7]||(s[7]=i("p",null,"監視システムに必要な依存関係を追加します。以下の例は、Prometheus用のアーティファクトを追加する方法を示しています。",-1)),e(p,{group:"languages"},{default:a(()=>[e(l,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:a(()=>[e(n,{lang:"Kotlin",code:'              implementation("io.micrometer:micrometer-registry-prometheus:$prometheus_version")'})]),_:1}),e(l,{title:"Gradle (Groovy)","group-key":"groovy"},{default:a(()=>[e(n,{lang:"Groovy",code:'              implementation "io.micrometer:micrometer-registry-prometheus:$prometheus_version"'})]),_:1}),e(l,{title:"Maven","group-key":"maven"},{default:a(()=>[e(n,{lang:"XML",code:`              <dependency>
                  <groupId>io.micrometer</groupId>
                  <artifactId>micrometer-registry-prometheus</artifactId>
                  <version>\${prometheus_version}</version>
              </dependency>`})]),_:1})]),_:1}),s[8]||(s[8]=i("p",null,[i("code",null,"$prometheus_version"),t("は、"),i("code",null,"micrometer-registry-prometheus"),t("アーティファクトの必要なバージョンに置き換えることができます。例: "),i("code",null,"1.10.3"),t("。")],-1))])]),s[22]||(s[22]=i("h2",{id:"install_plugin",tabindex:"-1"},[t("MicrometerMetrics をインストールする "),i("a",{class:"header-anchor",href:"#install_plugin","aria-label":'Permalink to "MicrometerMetrics をインストールする {id="install_plugin"}"'},"​")],-1)),i("p",null,[s[10]||(s[10]=t(" アプリケーションに")),s[11]||(s[11]=i("code",null,"MicrometerMetrics",-1)),s[12]||(s[12]=t("プラグインを")),s[13]||(s[13]=i("a",{href:"#install"},"インストール",-1)),s[14]||(s[14]=t("するには、 指定された")),e(o,{href:"/ktor/server-modules",summary:"モジュールを使用すると、ルートをグループ化してアプリケーションを構造化できます。"},{default:a(()=>s[9]||(s[9]=[t("モジュール")])),_:1}),s[15]||(s[15]=t("内の")),s[16]||(s[16]=i("code",null,"install",-1)),s[17]||(s[17]=t("関数に渡します。 以下のコードスニペットは、")),s[18]||(s[18]=i("code",null,"MicrometerMetrics",-1)),s[19]||(s[19]=t("をインストールする方法を示しています... "))]),e(g,null,{default:a(()=>s[20]||(s[20]=[i("li",null,[t(" ... "),i("code",null,"embeddedServer"),t("関数呼び出し内で。 ")],-1),i("li",null,[t(" ... 明示的に定義された"),i("code",null,"module"),t("（"),i("code",null,"Application"),t("クラスの拡張関数）内で。 ")],-1)])),_:1}),e(p,null,{default:a(()=>[e(l,{title:"embeddedServer"},{default:a(()=>[e(n,{lang:"kotlin",code:`            import io.ktor.server.engine.*
            import io.ktor.server.netty.*
            import io.ktor.server.application.*
            import io.ktor.server.metrics.micrometer.*

            fun main() {
                embeddedServer(Netty, port = 8080) {
                    install(MicrometerMetrics)
                    // ...
                }.start(wait = true)
            }`})]),_:1}),e(l,{title:"module"},{default:a(()=>[e(n,{lang:"kotlin",code:`            import io.ktor.server.application.*
            import io.ktor.server.metrics.micrometer.*
            // ...
            fun Application.module() {
                install(MicrometerMetrics)
                // ...
            }`})]),_:1})]),_:1}),s[23]||(s[23]=k(`<h3 id="ktor_metrics" tabindex="-1">公開されるメトリクス <a class="header-anchor" href="#ktor_metrics" aria-label="Permalink to &quot;公開されるメトリクス {id=&quot;ktor_metrics&quot;}&quot;">​</a></h3><p>KtorはHTTPリクエストを監視するために、以下のメトリクスを公開します。</p><ul><li><code>ktor.http.server.requests.active</code>: 同時HTTPリクエスト数をカウントする<a href="https://micrometer.io/docs/concepts#_gauges" target="_blank" rel="noreferrer">ゲージ</a>。このメトリクスにはタグは提供されません。</li><li><code>ktor.http.server.requests</code>: 各リクエストの時間を測定するための<a href="https://micrometer.io/docs/concepts#_timers" target="_blank" rel="noreferrer">タイマー</a>。このメトリクスは、要求されたURLの<code>address</code>、HTTPメソッドの<code>method</code>、リクエストを処理するKtorルートの<code>route</code>など、リクエストデータを監視するための一連のタグを提供します。</li></ul><p>デフォルトの<code>ktor.http.server.requests</code>プレフィックスは、<code>metricName</code> <a href="#configure_metrics">設定</a>プロパティを使用してカスタマイズできます。</p><blockquote><p>メトリクス名は、設定された監視システムによって<a href="https://micrometer.io/docs/concepts#_naming_meters" target="_blank" rel="noreferrer">異なる</a>場合があります。</p></blockquote><p>HTTPメトリクスに加えて、Ktorは<a href="#jvm_metrics">JVMを監視する</a>ための一連のメトリクスを公開します。</p><h2 id="create_registry" tabindex="-1">レジストリを作成する <a class="header-anchor" href="#create_registry" aria-label="Permalink to &quot;レジストリを作成する {id=&quot;create_registry&quot;}&quot;">​</a></h2><p><code>MicrometerMetrics</code>をインストールした後、<a href="https://micrometer.io/docs/concepts#_registry" target="_blank" rel="noreferrer">監視システム用のレジストリ</a>を作成し、それを<code>registry</code>プロパティに割り当てる必要があります。以下の例では、<code>PrometheusMeterRegistry</code>は<code>install</code>ブロックの外で作成されており、このレジストリを異なる<a href="./server-routing">ルートハンドラー</a>で再利用できるようになっています。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> appMicrometerRegistry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PrometheusMeterRegistry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(PrometheusConfig.DEFAULT)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MicrometerMetrics) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        registry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> appMicrometerRegistry</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="configure_metrics" tabindex="-1">メトリクスを設定する <a class="header-anchor" href="#configure_metrics" aria-label="Permalink to &quot;メトリクスを設定する {id=&quot;configure_metrics&quot;}&quot;">​</a></h2><p><code>MicrometerMetrics</code>プラグインは、<a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-metrics-micrometer/io.ktor.server.metrics.micrometer/-micrometer-metrics-config/index.html" target="_blank" rel="noreferrer">MicrometerMetricsConfig</a>を使用してアクセスできるさまざまな設定オプションを提供します。</p><h3 id="timers" tabindex="-1">タイマー <a class="header-anchor" href="#timers" aria-label="Permalink to &quot;タイマー {id=&quot;timers&quot;}&quot;">​</a></h3><p>各タイマーのタグをカスタマイズするには、各リクエストで呼び出される<code>timers</code>関数を使用できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MicrometerMetrics) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    timers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { call, exception </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        tag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;region&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, call.request.headers[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;regionId&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="distribution_statistics" tabindex="-1">分布統計 <a class="header-anchor" href="#distribution_statistics" aria-label="Permalink to &quot;分布統計 {id=&quot;distribution_statistics&quot;}&quot;">​</a></h3><p><a href="https://micrometer.io/docs/concepts#_configuring_distribution_statistics" target="_blank" rel="noreferrer">分布統計</a>は、<code>distributionStatisticConfig</code>プロパティを使用して設定します。例:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MicrometerMetrics) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    distributionStatisticConfig </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DistributionStatisticConfig.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">percentilesHistogram</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">maximumExpectedValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Duration.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ofSeconds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toNanos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toDouble</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">serviceLevelObjectives</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Duration.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ofMillis</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toNanos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toDouble</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Duration.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ofMillis</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toNanos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toDouble</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="jvm_metrics" tabindex="-1">JVMおよびシステムメトリクス <a class="header-anchor" href="#jvm_metrics" aria-label="Permalink to &quot;JVMおよびシステムメトリクス {id=&quot;jvm_metrics&quot;}&quot;">​</a></h3><p><a href="#ktor_metrics">HTTPメトリクス</a>に加えて、Ktorは<a href="https://micrometer.io/docs/ref/jvm" target="_blank" rel="noreferrer">JVMを監視する</a>ための一連のメトリクスを公開します。これらのメトリクスのリストは、<code>meterBinders</code>プロパティを使用してカスタマイズできます。例:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MicrometerMetrics) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    meterBinders </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        JvmMemoryMetrics</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        JvmGcMetrics</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        ProcessorMetrics</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>これらのメトリクスを完全に無効にするために、空のリストを割り当てることもできます。</p><h2 id="prometheus_endpoint" tabindex="-1">Prometheus: スクレイピングエンドポイントを公開する <a class="header-anchor" href="#prometheus_endpoint" aria-label="Permalink to &quot;Prometheus: スクレイピングエンドポイントを公開する {id=&quot;prometheus_endpoint&quot;}&quot;">​</a></h2><p>Prometheusを監視システムとして使用する場合、PrometheusスクレイパーにHTTPエンドポイントを公開する必要があります。Ktorでは、以下の方法でこれを行うことができます。</p><ol><li><p>必要なアドレス（以下の例では<code>/metrics</code>）でGETリクエストを受け付ける専用の<a href="./server-routing">ルート</a>を作成します。</p></li><li><p><code>call.respond</code>を使用して、スクレイピングデータをPrometheusに送信します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> appMicrometerRegistry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PrometheusMeterRegistry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(PrometheusConfig.DEFAULT)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MicrometerMetrics) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        registry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> appMicrometerRegistry</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/metrics&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respond</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(appMicrometerRegistry.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scrape</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>完全な例はこちらで確認できます: <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/micrometer-metrics" target="_blank" rel="noreferrer">micrometer-metrics</a>。</p></li></ol>`,24))])}const P=u(F,[["render",f]]);export{T as __pageData,P as default};
