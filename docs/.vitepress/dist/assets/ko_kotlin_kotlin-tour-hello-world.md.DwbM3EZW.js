import{_ as p}from"./chunks/icon-1.K8qzZaho.js";import{_ as h}from"./chunks/icon-2-todo.CF_tKCD9.js";import{_ as k}from"./chunks/icon-3-todo.Gx4op1du.js";import{_ as o}from"./chunks/icon-4-todo.GaeEmerm.js";import{_ as r}from"./chunks/icon-5-todo.CqROQ9Y8.js";import{_ as d}from"./chunks/icon-6-todo.Bq5TIrqo.js";import{_ as c}from"./chunks/icon-7-todo.D-C90RBD.js";import{_ as g,C as t,c as E,o as y,j as s,G as l,ag as u,a as i,w as m}from"./chunks/framework.Bksy39di.js";const N=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kotlin/kotlin-tour-hello-world.md","filePath":"ko/kotlin/kotlin-tour-hello-world.md","lastUpdated":1754307826000}'),F={name:"ko/kotlin/kotlin-tour-hello-world.md"};function C(b,a,v,_,A,f){const n=t("no-index"),e=t("tldr");return y(),E("div",null,[a[1]||(a[1]=s("h1",{id:"hello-world",tabindex:"-1"},[i("Hello world "),s("a",{class:"header-anchor",href:"#hello-world","aria-label":'Permalink to "Hello world"'},"​")],-1)),l(n),l(e,null,{default:m(()=>a[0]||(a[0]=[s("p",null,[s("img",{src:p,width:"20",alt:"First step"}),i(),s("strong",null,"Hello world"),s("br"),s("img",{src:h,width:"20",alt:"Second step"}),i(),s("a",{href:"/ko/kotlin/kotlin-tour-basic-types"},"기본 타입"),s("br"),s("img",{src:k,width:"20",alt:"Third step"}),i(),s("a",{href:"/ko/kotlin/kotlin-tour-collections"},"컬렉션"),s("br"),s("img",{src:o,width:"20",alt:"Fourth step"}),i(),s("a",{href:"/ko/kotlin/kotlin-tour-control-flow"},"제어 흐름"),s("br"),s("img",{src:r,width:"20",alt:"Fifth step"}),i(),s("a",{href:"/ko/kotlin/kotlin-tour-functions"},"함수"),s("br"),s("img",{src:d,width:"20",alt:"Sixth step"}),i(),s("a",{href:"/ko/kotlin/kotlin-tour-classes"},"클래스"),s("br"),s("img",{src:c,width:"20",alt:"Final step"}),i(),s("a",{href:"/ko/kotlin/kotlin-tour-null-safety"},"널 안전성")],-1)])),_:1}),a[2]||(a[2]=u(`<p>다음은 &quot;Hello, world!&quot;를 출력하는 간단한 프로그램입니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, world!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Hello, world!</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Kotlin에서:</p><ul><li><code>fun</code>은 함수를 선언하는 데 사용됩니다.</li><li><code>main()</code> 함수는 프로그램이 시작되는 지점입니다.</li><li>함수의 본문은 중괄호 <code>{}</code> 안에 작성됩니다.</li><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.io/println.html" target="_blank" rel="noreferrer"><code>println()</code></a> 및 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.io/print.html" target="_blank" rel="noreferrer"><code>print()</code></a> 함수는 인수를 표준 출력에 인쇄합니다.</li></ul><p>함수는 특정 작업을 수행하는 일련의 지침입니다. 함수를 한 번 생성하면, 해당 작업을 수행해야 할 때마다 지침을 다시 작성할 필요 없이 사용할 수 있습니다. 함수에 대한 자세한 내용은 몇 개의 챕터에서 더 자세히 다룹니다. 그때까지 모든 예제는 <code>main()</code> 함수를 사용합니다.</p><h2 id="변수" tabindex="-1">변수 <a class="header-anchor" href="#변수" aria-label="Permalink to &quot;변수&quot;">​</a></h2><p>모든 프로그램은 데이터를 저장할 수 있어야 하며, 변수가 바로 이 역할을 돕습니다. Kotlin에서는 다음을 선언할 수 있습니다:</p><ul><li><code>val</code>을 사용하여 읽기 전용 변수</li><li><code>var</code>을 사용하여 변경 가능한 변수</li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>읽기 전용 변수는 일단 값을 할당하면 변경할 수 없습니다.</p></div><p>값을 할당하려면 할당 연산자 <code>=</code>를 사용합니다.</p><p>예시:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> popcorn </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // There are 5 boxes of popcorn</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hotdog </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 7</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     // There are 7 hotdogs</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> customers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // There are 10 customers in the queue</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Some customers leave the queue</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    customers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(customers)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 8</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>변수는 프로그램 시작 시 <code>main()</code> 함수 외부에 선언할 수 있습니다. 이렇게 선언된 변수는 **최상위(top level)**에 선언되었다고 합니다.</p></div><p><code>customers</code>는 변경 가능한 변수이므로 선언 후 값을 다시 할당할 수 있습니다.</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>기본적으로 모든 변수를 읽기 전용(<code>val</code>)으로 선언하는 것을 권장합니다. 정말 필요한 경우에만 변경 가능한 변수(<code>var</code>)를 사용하십시오. 그렇게 하면 의도하지 않은 변경을 실수로 저지를 가능성이 줄어듭니다.</p></div><h2 id="문자열-템플릿" tabindex="-1">문자열 템플릿 <a class="header-anchor" href="#문자열-템플릿" aria-label="Permalink to &quot;문자열 템플릿&quot;">​</a></h2><p>변수 내용을 표준 출력에 인쇄하는 방법을 아는 것이 유용합니다. 이는 **문자열 템플릿(string templates)**을 통해 할 수 있습니다. 템플릿 표현식을 사용하여 변수 및 다른 객체에 저장된 데이터에 접근하고 이를 문자열로 변환할 수 있습니다. 문자열 값은 이중 따옴표 <code>&quot;</code> 안에 있는 문자 시퀀스입니다. 템플릿 표현식은 항상 달러 기호 <code>$</code>로 시작합니다. 템플릿 표현식에서 코드 조각을 평가하려면 달러 기호 <code>$</code> 뒤에 중괄호 <code>{}</code> 안에 코드를 배치하십시오.</p><p>예시:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> customers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;There are </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$customers</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> customers&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // There are 10 customers</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;There are \${customers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">} customers&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // There are 11 customers</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>자세한 내용은 <a href="/ko/kotlin/strings#string-templates">문자열 템플릿</a>을 참조하십시오.</p><p>변수에 대해 어떤 타입도 선언되지 않은 것을 알 수 있습니다. Kotlin은 타입을 직접 추론했습니다: <code>Int</code>. 이 투어에서는 <a href="/ko/kotlin/kotlin-tour-basic-types">다음 챕터</a>에서 다양한 Kotlin 기본 타입과 선언 방법을 설명합니다.</p><h2 id="연습" tabindex="-1">연습 <a class="header-anchor" href="#연습" aria-label="Permalink to &quot;연습&quot;">​</a></h2><details class="details custom-block"><summary>연습 문제</summary><p>프로그램이 표준 출력에 <code>&quot;Mary is 20 years old&quot;</code>를 인쇄하도록 코드를 완성하세요:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Mary&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 여기에 코드를 작성하세요</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><details class="details custom-block"><summary>예시 솔루션</summary><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Mary&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> is </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$age</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> years old&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></details></details>`,23))])}const S=g(F,[["render",C]]);export{N as __pageData,S as default};
