import{_ as i,c as a,o as t,ag as n}from"./chunks/framework.Bksy39di.js";const E=JSON.parse('{"title":"내장 도구","description":"","frontmatter":{},"headers":[],"relativePath":"ko/koog/built-in-tools.md","filePath":"ko/koog/built-in-tools.md","lastUpdated":1755146406000}'),l={name:"ko/koog/built-in-tools.md"};function e(h,s,p,k,o,d){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="내장-도구" tabindex="-1">내장 도구 <a class="header-anchor" href="#내장-도구" aria-label="Permalink to &quot;내장 도구&quot;">​</a></h1><p>Koog 프레임워크는 에이전트와 사용자 간의 일반적인 상호작용 시나리오를 처리하는 내장 도구를 제공합니다.</p><p>다음 내장 도구들을 사용할 수 있습니다:</p><table tabindex="0"><thead><tr><th>도구</th><th><div style="width:115px;">이름</div></th><th>설명</th></tr></thead><tbody><tr><td>SayToUser</td><td><code>__say_to_user__</code></td><td>에이전트가 사용자에게 메시지를 보낼 수 있도록 합니다. 에이전트 메시지를 <code>Agent says: </code> 접두사와 함께 콘솔에 출력합니다.</td></tr><tr><td>AskUser</td><td><code>__ask_user__</code></td><td>에이전트가 사용자에게 입력을 요청할 수 있도록 합니다. 에이전트 메시지를 콘솔에 출력하고 사용자 응답을 기다립니다.</td></tr><tr><td>ExitTool</td><td><code>__exit__</code></td><td>에이전트가 대화를 종료하고 세션을 마칠 수 있도록 합니다.</td></tr></tbody></table><h2 id="내장-도구-등록하기" tabindex="-1">내장 도구 등록하기 <a class="header-anchor" href="#내장-도구-등록하기" aria-label="Permalink to &quot;내장 도구 등록하기&quot;">​</a></h2><p>다른 모든 도구와 마찬가지로, 내장 도구는 에이전트가 사용할 수 있도록 도구 레지스트리에 추가되어야 합니다. 다음은 예시입니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 모든 내장 도구를 포함하는 도구 레지스트리 생성</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> toolRegistry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ToolRegistry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    tool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(SayToUser)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    tool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(AskUser)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    tool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExitTool)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 에이전트 생성 시 레지스트리 전달</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> agent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AIAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    executor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> simpleOpenAIExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(apiToken),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    systemPrompt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;You are a helpful assistant.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    llmModel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> OpenAIModels.Chat.GPT4o,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    toolRegistry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> toolRegistry</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>내장 도구와 커스텀 도구를 동일한 레지스트리에서 결합하여 에이전트의 포괄적인 기능 세트를 만들 수 있습니다. 커스텀 도구에 대해 더 자세히 알아보려면 <a href="./annotation-based-tools">어노테이션 기반 도구</a> 및 <a href="./class-based-tools">클래스 기반 도구</a>를 참조하세요.</p>`,8)]))}const g=i(l,[["render",e]]);export{E as __pageData,g as default};
