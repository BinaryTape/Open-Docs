import{_ as a,c as i,o as n,ag as l}from"./chunks/framework.Bksy39di.js";const g=JSON.parse('{"title":"概述","description":"","frontmatter":{},"headers":[],"relativePath":"koog/index.md","filePath":"koog/index.md","lastUpdated":1755146406000}'),e={name:"koog/index.md"};function t(p,s,o,h,r,k){return n(),i("div",null,s[0]||(s[0]=[l(`<h1 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h1><p>Koog 是一个基于 Kotlin 的框架，旨在完全以地道的 Kotlin 构建和运行 AI 智能体。它允许你创建能够与工具交互、处理复杂工作流以及与用户通信的智能体。</p><p>该框架支持以下类型的智能体：</p><ul><li>单次运行智能体，配置最少，处理单个输入并提供响应。此类智能体在单个工具调用周期内运行，以完成其任务并提供响应。</li><li>复杂工作流智能体，具备高级功能，支持自定义策略和配置。</li></ul><h2 id="主要特性" tabindex="-1">主要特性 <a class="header-anchor" href="#主要特性" aria-label="Permalink to &quot;主要特性&quot;">​</a></h2><p>Koog 的主要特性包括：</p><ul><li><strong>纯 Kotlin 实现</strong>：完全以自然和地道的 Kotlin 构建 AI 智能体。</li><li><strong>MCP 集成</strong>：连接到 Model Control Protocol，以增强模型管理。</li><li><strong>嵌入能力</strong>：使用向量嵌入进行语义搜索和知识检索。</li><li><strong>自定义工具创建</strong>：通过访问外部系统和 API 的工具来扩展你的智能体。</li><li><strong>即用型组件</strong>：利用预构建解决方案来加速常见 AI 工程挑战的开发。</li><li><strong>智能历史记录压缩</strong>：使用各种预构建策略，在保持对话上下文的同时优化 token 用量。</li><li><strong>强大的 Streaming API</strong>：通过流式支持和并行工具调用来实时处理响应。</li><li><strong>持久化智能体记忆</strong>：实现跨会话甚至跨不同智能体的知识留存。</li><li><strong>全面的追踪</strong>：通过详细且可配置的追踪来调试和监控智能体执行。</li><li><strong>灵活的图工作流</strong>：使用直观的基于图的工作流来设计复杂的智能体行为。</li><li><strong>模块化特性系统</strong>：通过可组合架构自定义智能体功能。</li><li><strong>可伸缩架构</strong>：处理从简单聊天机器人到企业应用程序的各种工作负载。</li><li><strong>多平台</strong>：通过 Kotlin Multiplatform 在 JVM、JS、WasmJS 目标平台运行智能体。</li></ul><h1 id="可用的-llm-提供商和平台" tabindex="-1">可用的 LLM 提供商和平台 <a class="header-anchor" href="#可用的-llm-提供商和平台" aria-label="Permalink to &quot;可用的 LLM 提供商和平台&quot;">​</a></h1><p>你可以使用以下 LLM 提供商和平台的 LLM 来为你的智能体功能提供支持：</p><ul><li>Google</li><li>OpenAI</li><li>Anthropic</li><li>OpenRouter</li><li>Ollama</li></ul><h1 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h1><p>要使用 Koog，你需要将所有必要的依赖项包含在你的构建配置中。</p><h2 id="gradle" tabindex="-1">Gradle <a class="header-anchor" href="#gradle" aria-label="Permalink to &quot;Gradle&quot;">​</a></h2><h3 id="gradle-kotlin-dsl" tabindex="-1">Gradle (Kotlin DSL) <a class="header-anchor" href="#gradle-kotlin-dsl" aria-label="Permalink to &quot;Gradle (Kotlin DSL)&quot;">​</a></h3><ol><li><p>将依赖项添加到 <code>build.gradle.kts</code> 文件：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>dependencies {</span></span>
<span class="line"><span>    implementation(&quot;ai.koog:koog-agents:LATEST_VERSION&quot;)</span></span>
<span class="line"><span>}</span></span></code></pre></div></li><li><p>确保在仓库列表中包含 <code>mavenCentral()</code>。</p></li></ol><h3 id="gradle-groovy" tabindex="-1">Gradle (Groovy) <a class="header-anchor" href="#gradle-groovy" aria-label="Permalink to &quot;Gradle (Groovy)&quot;">​</a></h3><ol><li><p>将依赖项添加到 <code>build.gradle</code> 文件：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>dependencies {</span></span>
<span class="line"><span>    implementation &#39;ai.koog:koog-agents:LATEST_VERSION&#39;</span></span>
<span class="line"><span>}</span></span></code></pre></div></li><li><p>确保在仓库列表中包含 <code>mavenCentral()</code>。</p></li></ol><h2 id="maven" tabindex="-1">Maven <a class="header-anchor" href="#maven" aria-label="Permalink to &quot;Maven&quot;">​</a></h2><ol><li><p>将依赖项添加到 <code>pom.xml</code> 文件：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;dependency&gt;</span></span>
<span class="line"><span>    &lt;groupId&gt;ai.koog&lt;/groupId&gt;</span></span>
<span class="line"><span>    &lt;artifactId&gt;koog-agents&lt;/artifactId&gt;</span></span>
<span class="line"><span>    &lt;version&gt;LATEST_VERSION&lt;/version&gt;</span></span>
<span class="line"><span>&lt;/dependency&gt;</span></span></code></pre></div></li><li><p>确保在仓库列表中包含 <code>mavenCentral</code>。</p></li></ol><h1 id="快速开始示例" tabindex="-1">快速开始示例 <a class="header-anchor" href="#快速开始示例" aria-label="Permalink to &quot;快速开始示例&quot;">​</a></h1><p>为了帮助你快速开始使用 AI 智能体，以下是一个单次运行智能体的快速示例：</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>在运行该示例之前，请将相应的 API 密钥指定为环境变量。关于详细信息，请参见<a href="./single-run-agents">开始使用</a>。</p></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    runBlocking</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> apiKey </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getenv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;OPENAI_API_KEY&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// or Anthropic, Google, OpenRouter, etc.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> agent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AIAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            executor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> simpleOpenAIExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(apiKey), </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// or Anthropic, Google, OpenRouter, etc.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            systemPrompt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;You are a helpful assistant. Answer user questions concisely.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            llmModel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> OpenAIModels.Chat.GPT4o</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        )</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> agent.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello! How can you help me?&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>关于更多详细信息，请参见<a href="./single-run-agents">开始使用</a>。</p>`,24)]))}const c=a(e,[["render",t]]);export{g as __pageData,c as default};
