import{_ as h,a as d,b as k,c,d as m,e as u}from"./chunks/ios-new-configuration.DNF7jnri.js";import{_ as g}from"./chunks/icon-3-todo.aEuKIG4W.js";import{_ as E}from"./chunks/icon-4-todo.DqbNYzPe.js";import{_ as f,a as b,b as _,c as y,d as C,e as A,f as F,g as I,h as v}from"./chunks/first-compose-project-on-web.B8aVrJBG.js";import{_ as M,C as t,c as S,o as D,j as i,G as a,ag as n,a as s,w as e}from"./chunks/framework.Bksy39di.js";const X=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kmp/compose-multiplatform-create-first-app.md","filePath":"ja/kmp/compose-multiplatform-create-first-app.md","lastUpdated":1755516278000}'),w={name:"ja/kmp/compose-multiplatform-create-first-app.md"};function P(T,l,x,B,O,K){const o=t("secondary-label"),r=t("tldr"),p=t("snippet");return D(),S("div",null,[l[3]||(l[3]=i("h1",{id:"compose-multiplatformアプリを作成する",tabindex:"-1"},[s("Compose Multiplatformアプリを作成する "),i("a",{class:"header-anchor",href:"#compose-multiplatformアプリを作成する","aria-label":'Permalink to "Compose Multiplatformアプリを作成する"'},"​")],-1)),a(o,{ref:"IntelliJ IDEA"},null,512),a(o,{ref:"Android Studio"},null,512),a(r,null,{default:e(()=>l[0]||(l[0]=[i("p",null,"このチュートリアルではIntelliJ IDEAを使用していますが、Android Studioでも同様に進めることができます。どちらのIDEもコア機能とKotlin Multiplatformのサポートは共通しています。",-1),i("br",null,null,-1),i("p",null,[s("これは"),i("strong",null,"共有ロジックとUIを持つCompose Multiplatformアプリの作成"),s("チュートリアルの最初のパートです。")],-1),i("p",null,[i("img",{src:h,width:"20",alt:"First step"}),s(),i("strong",null,"Compose Multiplatformアプリの作成"),i("br"),i("img",{src:d,width:"20",alt:"Second step"}),s(" コンポーザブルコードを探索する"),i("br"),i("img",{src:g,width:"20",alt:"Third step"}),s(" プロジェクトの変更"),i("br"),i("br"),i("img",{src:E,width:"20",alt:"Fourth step"}),s(" 独自のアプリケーションを作成する"),i("br")],-1)])),_:1}),l[4]||(l[4]=n('<p>ここでは、IntelliJ IDEAを使って初めてのCompose Multiplatformアプリケーションを作成し、実行する方法を学びます。</p><p><a href="https://www.jetbrains.com/lp/compose-multiplatform/" target="_blank" rel="noreferrer">Compose Multiplatform</a> UIフレームワークを使えば、Kotlin Multiplatformのコード共有機能をアプリケーションロジックを超えて拡張できます。ユーザーインターフェースを一度実装すれば、Compose Multiplatformがサポートするすべてのプラットフォームでそれを使用できます。</p><p>このチュートリアルでは、Android、iOS、デスクトップ、およびウェブで動作するサンプルアプリケーションを構築します。ユーザーインターフェースの作成にはCompose Multiplatformフレームワークを使用し、その基本であるコンポーザブル関数、テーマ、レイアウト、イベント、モディファイアについて学びます。</p><p>このチュートリアルを進める上での注意点：</p><ul><li>Compose Multiplatform、Android、iOSに関する事前の経験は不要です。開始する前に<a href="https://kotlinlang.org/docs/getting-started.html" target="_blank" rel="noreferrer">Kotlinの基礎</a>に慣れておくことをお勧めします。</li><li>このチュートリアルを完了するには、IntelliJ IDEAのみが必要です。IntelliJ IDEAを使用すると、Androidおよびデスクトップでのマルチプラットフォーム開発を試すことができます。iOSの場合、XcodeがインストールされたmacOSマシンが必要です。これはiOS開発全般の制限事項です。</li><li>必要に応じて、興味のある特定のプラットフォームに選択を限定し、他のプラットフォームを省略することも可能です。</li></ul><h2 id="プロジェクトの作成" tabindex="-1">プロジェクトの作成 <a class="header-anchor" href="#プロジェクトの作成" aria-label="Permalink to &quot;プロジェクトの作成&quot;">​</a></h2><ol><li><p><a href="./quickstart">クイックスタート</a>に記載されている<a href="./quickstart#set-up-the-environment">Kotlin Multiplatform開発の環境設定</a>の手順を完了します。</p></li><li><p>IntelliJ IDEAで、<strong>File</strong> | <strong>New</strong> | <strong>Project</strong>を選択します。</p></li><li><p>左側のパネルで、<strong>Kotlin Multiplatform</strong>を選択します。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Kotlin Multiplatform IDEプラグインを使用していない場合でも、<a href="https://kmp.jetbrains.com/?android=true&amp;ios=true&amp;iosui=compose&amp;desktop=true&amp;web=true&amp;includeTests=true" target="_blank" rel="noreferrer">KMP Webウィザード</a>を使用して同じプロジェクトを生成できます。</p></div></li><li><p><strong>New Project</strong>ウィンドウで以下のフィールドを指定します。</p><ul><li><strong>Name</strong>: ComposeDemo</li><li><strong>Group</strong>: compose.project</li><li><strong>Artifact</strong>: demo</li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Webウィザードを使用している場合は、<strong>Project Name</strong>を「ComposeDemo」、<strong>Project ID</strong>を「compose.project.demo」と指定します。</p></div></li><li><p><strong>Android</strong>、<strong>iOS</strong>、<strong>Desktop</strong>、<strong>Web</strong>ターゲットを選択します。 iOSで<strong>Share UI</strong>オプションが選択されていることを確認してください。</p></li><li><p>すべてのフィールドとターゲットを指定したら、<strong>Create</strong>（Webウィザードの場合は<strong>Download</strong>）をクリックします。</p></li></ol><p><img src="'+f+'" alt="Create Compose Multiplatform project" width="800"></p><h2 id="プロジェクト構造の確認" tabindex="-1">プロジェクト構造の確認 <a class="header-anchor" href="#プロジェクト構造の確認" aria-label="Permalink to &quot;プロジェクト構造の確認&quot;">​</a></h2><p>IntelliJ IDEAで「ComposeDemo」フォルダに移動します。 ウィザードでiOSを選択しなかった場合、「ios」または「apple」で始まる名前のフォルダはありません。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>IntelliJ IDEAは、プロジェクト内のAndroid Gradleプラグインを最新バージョンにアップグレードすることを自動的に提案する場合があります。 しかし、Kotlin Multiplatformは最新のAGPバージョンと互換性がないため（<a href="https://kotlinlang.org/docs/multiplatform-compatibility-guide.html#version-compatibility" target="_blank" rel="noreferrer">互換性テーブル</a>を参照）、アップグレードはお勧めしません。</p></div><p>このプロジェクトには2つのモジュールが含まれています。</p><ul><li><em>composeApp</em> は、Android、デスクトップ、iOS、ウェブアプリケーション間で共有されるロジック（すべてのプラットフォームで使用するコード）を含むKotlinモジュールです。ビルドプロセスを自動化するのに役立つビルドシステムとして<a href="https://kotlinlang.org/docs/gradle.html" target="_blank" rel="noreferrer">Gradle</a>を使用しています。</li><li><em>iosApp</em> は、iOSアプリケーションにビルドされるXcodeプロジェクトです。共有モジュールに依存し、それをiOSフレームワークとして使用します。</li></ul><p><img src="'+b+'" alt="Compose Multiplatform project structure" width="350"></p><p><strong>composeApp</strong>モジュールは、以下のソースセットで構成されています：<code>androidMain</code>、<code>commonMain</code>、<code>desktopMain</code>、<code>iosMain</code>、<code>wasmJsMain</code>。 <em>ソースセット</em> とは、Gradleの概念で、論理的にグループ化された複数のファイルの集まりであり、各グループは独自の依存関係を持ちます。Kotlin Multiplatformでは、異なるソースセットが異なるプラットフォームをターゲットにすることができます。</p><p><code>commonMain</code>ソースセットは共通のKotlinコードを使用し、プラットフォームソースセットは各ターゲットに固有のKotlinコードを使用します。Kotlin/JVMは<code>androidMain</code>と<code>desktopMain</code>に、Kotlin/Nativeは<code>iosMain</code>に、そしてKotlin/Wasmは<code>wasmJsMain</code>に使用されます。</p><p>共有モジュールがAndroidライブラリにビルドされるとき、共通のKotlinコードはKotlin/JVMとして扱われます。iOSフレームワークにビルドされるとき、共通のKotlinコードはKotlin/Nativeとして扱われます。共有モジュールがWebアプリにビルドされるとき、共通のKotlinコードはKotlin/Wasmとして扱われます。</p><p><img src="'+_+`" alt="Common Kotlin, Kotlin/JVM, and Kotlin/Native" width="700"></p><p>一般的に、プラットフォーム固有のソースセットで機能を重複させるのではなく、可能な限り実装を共通コードとして記述してください。</p><p><code>composeApp/src/commonMain/kotlin</code>ディレクトリにある<code>App.kt</code>ファイルを開きます。このファイルには、最小限ながら完全なCompose Multiplatform UIを実装する<code>App()</code>関数が含まれています。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Composable</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Preview</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    MaterialTheme</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> showContent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> remember</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mutableStateOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        Column</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            modifier </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Modifier</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">safeContentPadding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fillMaxSize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            horizontalAlignment </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Alignment.CenterHorizontally,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            Button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(onClick </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { showContent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">showContent }) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Click me!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            AnimatedVisibility</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(showContent) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> greeting </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> remember</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Greeting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                Column</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Modifier.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fillMaxWidth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), horizontalAlignment </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Alignment.CenterHorizontally) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    Image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">painterResource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Res.drawable.compose_multiplatform), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Compose: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$greeting</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>サポートされているすべてのプラットフォームでアプリケーションを実行してみましょう。</p><h2 id="アプリケーションの実行" tabindex="-1">アプリケーションの実行 <a class="header-anchor" href="#アプリケーションの実行" aria-label="Permalink to &quot;アプリケーションの実行&quot;">​</a></h2><p>アプリケーションはAndroid、iOS、デスクトップ、ウェブで実行できます。特定の順序で実行する必要はないため、最も慣れているプラットフォームから始めてください。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Gradleビルドタスクを使用する必要はありません。マルチプラットフォームアプリケーションでは、これはサポートされているすべてのターゲットのデバッグ版とリリース版をビルドします。 Multiplatformウィザードで選択されたプラットフォームによっては、時間がかかる場合があります。 実行構成を使用する方がはるかに高速です。この場合、選択されたターゲットのみがビルドされます。</p></div><h3 id="androidでアプリケーションを実行する" tabindex="-1">Androidでアプリケーションを実行する <a class="header-anchor" href="#androidでアプリケーションを実行する" aria-label="Permalink to &quot;Androidでアプリケーションを実行する&quot;">​</a></h3><ol><li>実行構成のリストから<strong>composeApp</strong>を選択します。</li><li>Android仮想デバイスを選択し、<strong>Run</strong>をクリックします。IDEが選択された仮想デバイスの電源が入っていない場合は起動し、アプリを実行します。</li></ol><p><img src="`+m+'" alt="Run the Compose Multiplatform app on Android" width="350"></p><p><img src="'+y+'" alt="First Compose Multiplatform app on Android" width="300"></p>',29)),a(p,{id:"run_android_other_devices"},{default:e(()=>l[1]||(l[1]=[i("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"別のandroidシミュレートデバイスで実行する",tabindex:"-1"},[s("別のAndroidシミュレートデバイスで実行する "),i("a",{class:"header-anchor",href:"#別のandroidシミュレートデバイスで実行する","aria-label":'Permalink to "別のAndroidシミュレートデバイスで実行する {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1),i("p",null,[i("a",{href:"https://developer.android.com/studio/run/emulator#runningapp",target:"_blank",rel:"noreferrer"},"Android Emulatorを設定し、別のシミュレートデバイスでアプリケーションを実行する方法"),s("を学びましょう。")],-1),i("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"実際のandroidデバイスで実行する",tabindex:"-1"},[s("実際のAndroidデバイスで実行する "),i("a",{class:"header-anchor",href:"#実際のandroidデバイスで実行する","aria-label":'Permalink to "実際のAndroidデバイスで実行する {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1),i("p",null,[i("a",{href:"https://developer.android.com/studio/run/device",target:"_blank",rel:"noreferrer"},"ハードウェアデバイスを設定して接続し、そのデバイスでアプリケーションを実行する方法"),s("を学びましょう。")],-1)])),_:1}),l[5]||(l[5]=n('<h3 id="iosでアプリケーションを実行する" tabindex="-1">iOSでアプリケーションを実行する <a class="header-anchor" href="#iosでアプリケーションを実行する" aria-label="Permalink to &quot;iOSでアプリケーションを実行する&quot;">​</a></h3><p>初期設定の一環としてXcodeを起動していない場合は、iOSアプリを実行する前にXcodeを起動してください。</p><p>IntelliJ IDEAで、実行構成のリストから<strong>iosApp</strong>を選択し、実行構成の横にあるシミュレートデバイスを選択して、<strong>Run</strong>をクリックします。 リストに利用可能なiOS構成がない場合は、<a href="#run-on-a-new-ios-simulated-device">新しい実行構成を追加</a>します。</p><p><img src="'+u+'" alt="Run the Compose Multiplatform app on iOS" width="350"></p><p><img src="'+C+'" alt="First Compose Multiplatform app on iOS" width="300"></p>',5)),a(p,{id:"run_ios_other_devices"},{default:e(()=>l[2]||(l[2]=[i("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"新しいiosシミュレートデバイスで実行する",tabindex:"-1"},[s("新しいiOSシミュレートデバイスで実行する "),i("a",{class:"header-anchor",href:"#新しいiosシミュレートデバイスで実行する","aria-label":'Permalink to "新しいiOSシミュレートデバイスで実行する {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1),i("p",null,"アプリケーションをシミュレートデバイスで実行したい場合は、新しい実行構成を追加できます。",-1),i("ol",null,[i("li",null,[s("実行構成のリストで、"),i("strong",null,"Edit Configurations"),s("をクリックします。")])],-1),i("p",null,[i("img",{src:k,alt:"Edit run configurations",width:"450"})],-1),i("ol",{start:"2"},[i("li",null,[s("構成リストの上にある**+**ボタンをクリックし、"),i("strong",null,"Xcode Application"),s("を選択します。")])],-1),i("p",null,[i("img",{src:c,alt:"New run configuration for iOS application"})],-1),i("ol",{start:"3"},[i("li",null,[i("p",null,"構成に名前を付けます。")]),i("li",null,[i("p",null,[i("strong",null,"Working directory"),s("を選択します。そのためには、プロジェクト（例："),i("strong",null,"KotlinMultiplatformSandbox"),s("）の"),i("code",null,"iosApp"),s("フォルダに移動します。")])]),i("li",null,[i("p",null,[i("strong",null,"Run"),s("をクリックして、新しいシミュレートデバイスでアプリケーションを実行します。")])])],-1),i("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"実際のiosデバイスで実行する",tabindex:"-1"},[s("実際のiOSデバイスで実行する "),i("a",{class:"header-anchor",href:"#実際のiosデバイスで実行する","aria-label":'Permalink to "実際のiOSデバイスで実行する {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1),i("p",null,[s("マルチプラットフォームアプリケーションを実際のiOSデバイスで実行できます。開始する前に、"),i("a",{href:"https://support.apple.com/en-us/HT204316",target:"_blank",rel:"noreferrer"},"Apple ID"),s("に関連付けられたTeam IDを設定する必要があります。")],-1),i("h5",{id:"team-idの設定",tabindex:"-1"},[s("Team IDの設定 "),i("a",{class:"header-anchor",href:"#team-idの設定","aria-label":'Permalink to "Team IDの設定"'},"​")],-1),i("p",null,"プロジェクトでTeam IDを設定するには、IntelliJ IDEAでKDoctorツールを使用するか、Xcodeでチームを選択することができます。",-1),i("p",null,"KDoctorの場合：",-1),i("ol",null,[i("li",null,"IntelliJ IDEAで、ターミナルで以下のコマンドを実行します。")],-1),i("div",{class:"language-none vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"none"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",null,"kdoctor --team-ids")])])])],-1),i("p",null,"KDoctorは、現在システムに設定されているすべてのTeam IDをリストします。例：",-1),i("div",{class:"language-text vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"text"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",null,"3ABC246XYZ (Max Sample)")]),s(`
`),i("span",{class:"line"},[i("span",null,"ZABCW6SXYZ (SampleTech Inc.)")])])])],-1),i("ol",{start:"2"},[i("li",null,[s("IntelliJ IDEAで、"),i("code",null,"iosApp/Configuration/Config.xcconfig"),s("を開き、Team IDを指定します。")])],-1),i("p",null,"あるいは、Xcodeでチームを選択する方法：",-1),i("ol",null,[i("li",null,[s("Xcodeを起動し、"),i("strong",null,"Open a project or file"),s("を選択します。")]),i("li",null,[s("プロジェクトの"),i("code",null,"iosApp/iosApp.xcworkspace"),s("ファイルに移動します。")]),i("li",null,[s("左側のメニューで"),i("code",null,"iosApp"),s("を選択します。")]),i("li",null,[i("strong",null,"Signing & Capabilities"),s("に移動します。")]),i("li",null,[i("strong",null,"Team"),s("リストで、自分のチームを選択します。")])],-1),i("p",null,[s("まだチームを設定していない場合は、"),i("strong",null,"Team"),s("リストの"),i("strong",null,"Add an Account"),s("オプションを使用して、Xcodeの指示に従ってください。")],-1),i("ol",{start:"6"},[i("li",null,"Bundle Identifierがユニークであり、Signing Certificateが正常に割り当てられていることを確認してください。")],-1),i("h5",{id:"アプリケーションの実行-1",tabindex:"-1"},[s("アプリケーションの実行 "),i("a",{class:"header-anchor",href:"#アプリケーションの実行-1","aria-label":'Permalink to "アプリケーションの実行"'},"​")],-1),i("p",null,[s("iPhoneをケーブルで接続します。Xcodeにデバイスがすでに登録されている場合、IntelliJ IDEAはそれを実行構成のリストに表示します。対応する"),i("code",null,"iosApp"),s("構成を実行してください。")],-1),i("p",null,[s("まだiPhoneをXcodeに登録していない場合は、"),i("a",{href:"https://developer.apple.com/documentation/xcode/running-your-app-in-simulator-or-on-a-device/",target:"_blank",rel:"noreferrer"},"Appleの推奨事項"),s("に従ってください。 手短に言えば、以下の手順を実行する必要があります。")],-1),i("ol",null,[i("li",null,"iPhoneをケーブルで接続します。"),i("li",null,[s("iPhoneで、"),i("strong",null,"設定"),s(" | "),i("strong",null,"プライバシーとセキュリティ"),s("から開発者モードを有効にします。")]),i("li",null,[s("Xcodeで、上部メニューから"),i("strong",null,"Window"),s(" | "),i("strong",null,"Devices and Simulators"),s("を選択します。")]),i("li",null,[s("プラス記号をクリックします。接続されているiPhoneを選択し、"),i("strong",null,"Add"),s("をクリックします。")]),i("li",null,"Apple IDでサインインして、デバイスでの開発機能を有効にします。"),i("li",null,"画面の指示に従ってペアリングプロセスを完了します。")],-1),i("p",null,[s("XcodeでiPhoneを登録したら、IntelliJ IDEAで"),i("a",{href:"#run-on-a-new-ios-simulated-device"},"新しい実行構成を作成"),s("し、"),i("strong",null,"Execution target"),s("リストでデバイスを選択します。対応する"),i("code",null,"iosApp"),s("構成を実行します。")],-1)])),_:1}),l[6]||(l[6]=n('<h3 id="デスクトップでアプリケーションを実行する" tabindex="-1">デスクトップでアプリケーションを実行する <a class="header-anchor" href="#デスクトップでアプリケーションを実行する" aria-label="Permalink to &quot;デスクトップでアプリケーションを実行する&quot;">​</a></h3><p>実行構成のリストから**composeApp [desktop]**を選択し、<strong>Run</strong>をクリックします。デフォルトでは、実行構成はデスクトップアプリを独自のOSウィンドウで起動します。</p><p><img src="'+A+'" alt="Run the Compose Multiplatform app on desktop" width="350"></p><p><img src="'+F+'" alt="First Compose Multiplatform app on desktop" width="500"></p><h3 id="ウェブアプリケーションを実行する" tabindex="-1">ウェブアプリケーションを実行する <a class="header-anchor" href="#ウェブアプリケーションを実行する" aria-label="Permalink to &quot;ウェブアプリケーションを実行する&quot;">​</a></h3><p>実行構成のリストから**composeApp [wasmJs]**を選択し、<strong>Run</strong>をクリックします。</p><p><img src="'+I+'" alt="Run the Compose Multiplatform app on web" width="350"></p><p>ウェブアプリケーションはブラウザで自動的に開きます。あるいは、実行が完了したらブラウザに以下のURLを入力することもできます。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   http://localhost:8080/</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>ポート番号は、8080番ポートが利用できない場合があるため、異なる場合があります。 実際のポート番号はGradleビルドコンソールで確認できます。</p></div><p><img src="'+v+'" alt="Compose web application" width="550"></p><h2 id="次のステップ" tabindex="-1">次のステップ <a class="header-anchor" href="#次のステップ" aria-label="Permalink to &quot;次のステップ&quot;">​</a></h2><p>チュートリアルの次のパートでは、コンポーザブル関数の実装方法と、各プラットフォームでアプリケーションを起動する方法を学びます。</p><p><strong><a href="./compose-multiplatform-explore-composables">次のパートに進む</a></strong></p><h2 id="ヘルプ" tabindex="-1">ヘルプ <a class="header-anchor" href="#ヘルプ" aria-label="Permalink to &quot;ヘルプ&quot;">​</a></h2><ul><li><strong>Kotlin Slack</strong>。<a href="https://surveys.jetbrains.com/s3/kotlin-slack-sign-up" target="_blank" rel="noreferrer">招待状を入手</a>し、<a href="https://kotlinlang.slack.com/archives/C3PQML5NU" target="_blank" rel="noreferrer">#multiplatform</a>チャンネルに参加してください。</li><li><strong>Kotlin課題トラッカー</strong>。<a href="https://youtrack.jetbrains.com/newIssue?project=KT" target="_blank" rel="noreferrer">新しい課題を報告</a>してください。</li></ul>',16))])}const V=M(w,[["render",P]]);export{X as __pageData,V as default};
