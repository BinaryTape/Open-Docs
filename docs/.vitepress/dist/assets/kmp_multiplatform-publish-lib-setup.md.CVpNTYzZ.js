import{_ as l,C as e,c as n,o as t,ag as a,G as p}from"./chunks/framework.Bksy39di.js";const E=JSON.parse('{"title":"设置多平台库发布","description":"","frontmatter":{},"headers":[],"relativePath":"kmp/multiplatform-publish-lib-setup.md","filePath":"kmp/multiplatform-publish-lib-setup.md","lastUpdated":1755516278000}'),h={name:"kmp/multiplatform-publish-lib-setup.md"};function r(o,s,d,k,c,g){const i=e("secondary-label");return t(),n("div",null,[s[0]||(s[0]=a(`<h1 id="设置多平台库发布" tabindex="-1">设置多平台库发布 <a class="header-anchor" href="#设置多平台库发布" aria-label="Permalink to &quot;设置多平台库发布&quot;">​</a></h1><p>您可以将多平台库发布到不同位置：</p><ul><li><a href="#publishing-to-a-local-maven-repository">到本地 Maven 版本库</a></li><li>到 Maven Central 版本库。了解如何在<a href="./multiplatform-publish-libraries">我们的教程</a>中设置账户凭据、自定义库元数据以及配置发布插件。</li><li>到 GitHub 版本库。有关更多信息，请参阅 GitHub 关于 <a href="https://docs.github.com/en/packages" target="_blank" rel="noreferrer">GitHub packages</a> 的文档。</li></ul><h2 id="发布到本地-maven-版本库" tabindex="-1">发布到本地 Maven 版本库 <a class="header-anchor" href="#发布到本地-maven-版本库" aria-label="Permalink to &quot;发布到本地 Maven 版本库&quot;">​</a></h2><p>您可以使用 <code>maven-publish</code> Gradle 插件将多平台库发布到本地 Maven 版本库：</p><ol><li><p>在 <code>shared/build.gradle.kts</code> 文件中，添加 <a href="https://docs.gradle.org/current/userguide/publishing_maven.html" target="_blank" rel="noreferrer"><code>maven-publish</code> Gradle 插件</a>。</p></li><li><p>指定库的 group 和 version，以及应发布到的<a href="https://docs.gradle.org/current/userguide/publishing_maven.html#publishing_maven:repositories" target="_blank" rel="noreferrer">版本库</a>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;maven-publish&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">group </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;com.example&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">version </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1.0&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">publishing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    repositories</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        maven</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            //...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ol><p>与 <code>maven-publish</code> 结合使用时，Kotlin 插件会自动为可在当前主机上构建的每个目标创建发布项，但 Android 目标除外，它需要<a href="#publish-an-android-library">额外步骤来配置发布</a>。</p><h2 id="发布项的结构" tabindex="-1">发布项的结构 <a class="header-anchor" href="#发布项的结构" aria-label="Permalink to &quot;发布项的结构&quot;">​</a></h2><p>Kotlin Multiplatform 库的发布项包含多个 Maven 发布项，每个都对应一个特定目标。此外，一个伞形 <em>root</em> 发布项 <code>kotlinMultiplatform</code>（代表整个库）也会被发布。</p><p>当作为<a href="./multiplatform-add-dependencies">依赖项</a>添加到公共源代码集时，根发布项会自动解析为相应的平台特有 artifact。</p><h3 id="目标特有与根发布项" tabindex="-1">目标特有与根发布项 <a class="header-anchor" href="#目标特有与根发布项" aria-label="Permalink to &quot;目标特有与根发布项&quot;">​</a></h3><p>Kotlin Multiplatform Gradle 插件为每个目标配置独立的发布项。考虑以下项目配置：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// projectName = &quot;lib&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">group </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;test&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">version </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1.0&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosX64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>此设置会生成以下 Maven 发布项：</p><p><strong>目标特有的发布项</strong></p><ul><li>对于 <code>jvm</code> 目标：<code>test:lib-jvm:1.0</code></li><li>对于 <code>iosX64</code> 目标：<code>test:lib-iosx64:1.0</code></li><li>对于 <code>iosArm64</code> 目标：<code>test:lib-iosarm64:1.0</code></li></ul><p>每个目标特有的发布项都是独立的。例如，运行 <code>publishJvmPublicationTo&lt;MavenRepositoryName&gt;</code> 只发布 JVM 模块，使其他模块保持未发布状态。</p><p><strong>根发布项</strong></p><p><code>kotlinMultiplatform</code> 根发布项：<code>test:lib:1.0</code>。</p><p>根发布项作为入口点，引用所有目标特有的发布项。它包含元数据 artifact，并通过包含对其他发布项的引用（即各个平台 artifact 的预期 URL 和坐标）来确保正确的依赖项解析。</p><ul><li><p>一些版本库，例如 Maven Central，要求根模块包含不带分类器的 JAR artifact，例如 <code>kotlinMultiplatform-1.0.jar</code>。Kotlin Multiplatform 插件会自动生成所需的 artifact，其中包含嵌入式元数据 artifact。这意味着您无需在库的根模块中添加一个空 artifact 来满足版本库的要求。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>详细了解如何使用 <a href="./multiplatform-configure-compilations#compilation-for-jvm">Gradle</a> 和 <a href="https://kotlinlang.org/docs/maven.html#create-jar-file" target="_blank" rel="noreferrer">Maven</a> 构建系统生成 JAR artifact。</p></div></li><li><p>如果版本库需要，<code>kotlinMultiplatform</code> 发布项也可能需要源代码和文档 artifact。在这种情况下，请在发布项的作用域中使用 <a href="https://docs.gradle.org/current/javadoc/org/gradle/api/publish/maven/MavenPublication.html#artifact-java.lang.Object-" target="_blank" rel="noreferrer"><code>artifact()</code></a>。</p></li></ul><h3 id="发布完整库" tabindex="-1">发布完整库 <a class="header-anchor" href="#发布完整库" aria-label="Permalink to &quot;发布完整库&quot;">​</a></h3><p>要一步发布所有必需的 artifact，请使用 <code>publishAllPublicationsTo&lt;MavenRepositoryName&gt;</code> 伞形任务。例如：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> publishAllPublicationsToGithubPackagesRepository</span></span></code></pre></div><p>发布到 Maven Local 时，您可以使用特殊任务：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> publishToMavenLocal</span></span></code></pre></div><p>这些任务确保所有目标特有和根发布项一起发布，使库完全可用于依赖项解析。</p><p>或者，您可以使用单独的发布任务。首先运行根发布项：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> publishKotlinMultiplatformPublicationToMavenLocal</span></span></code></pre></div><p>此任务发布一个 <code>*.module</code> 文件，其中包含关于目标特有发布项的信息，但目标本身仍未发布。要完成此过程，请单独发布每个目标特有的发布项：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> publish</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">TargetNam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">PublicationToMavenLocal</span></span></code></pre></div><p>这保证所有 artifact 都可用并被正确引用。</p><h2 id="主机要求" tabindex="-1">主机要求 <a class="header-anchor" href="#主机要求" aria-label="Permalink to &quot;主机要求&quot;">​</a></h2><p>Kotlin/Native 支持交叉编译，允许任何主机生成必要的 <code>.klib</code> artifact。但是，您仍需注意一些具体事项。</p><h3 id="apple-目标的编译" tabindex="-1">Apple 目标的编译 <a class="header-anchor" href="#apple-目标的编译" aria-label="Permalink to &quot;Apple 目标的编译&quot;">​</a></h3>`,35)),p(i,{ref:"实验性的"},null,512),s[1]||(s[1]=a(`<p>要为带有 Apple 目标的项目生成 artifact，您通常需要一台 Apple 机器。但是，如果您想使用其他主机，请在您的 <code>gradle.properties</code> 文件中设置此选项：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.native.enableKlibsCrossCompilation=true</span></span></code></pre></div><p>交叉编译目前是实验性的，并有一些限制。您仍需要使用 Mac 机器，如果：</p><ul><li>您的库具有 <a href="https://kotlinlang.org/docs/native-c-interop.html" target="_blank" rel="noreferrer">cinterop 依赖项</a>。</li><li>您的项目中设置了 <a href="./multiplatform-cocoapods-overview">CocoaPods 集成</a>。</li><li>您需要为 Apple 目标构建或测试<a href="./multiplatform-build-native-binaries">最终二进制文件</a>。</li></ul><h3 id="重复发布项" tabindex="-1">重复发布项 <a class="header-anchor" href="#重复发布项" aria-label="Permalink to &quot;重复发布项&quot;">​</a></h3><p>为避免发布期间出现任何问题，请从单个主机发布所有 artifact，以避免在版本库中重复发布项。例如，Maven Central 明确禁止重复发布项并会导致进程失败。</p><h2 id="发布-android-库" tabindex="-1">发布 Android 库 <a class="header-anchor" href="#发布-android-库" aria-label="Permalink to &quot;发布 Android 库&quot;">​</a></h2><p>要发布 Android 库，您需要提供额外配置。</p><p>默认情况下，不发布 Android 库的任何 artifact。要发布一组 Android <a href="https://developer.android.com/build/build-variants" target="_blank" rel="noreferrer">构建变体</a>生成的 artifact，请在 <code>shared/build.gradle.kts</code> 文件中的 Android 目标块中指定变体名称：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    androidTarget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        publishLibraryVariants</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;release&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>此示例适用于不带 <a href="https://developer.android.com/build/build-variants#product-flavors" target="_blank" rel="noreferrer">product flavor</a> 的 Android 库。对于带有 product flavor 的库，变体名称也包含 flavor，例如 <code>fooBarDebug</code> 或 <code>fooBarRelease</code>。</p><p>默认发布设置如下：</p><ul><li>如果已发布的变体具有相同的构建类型（例如，所有变体都是 <code>release</code> 或 <code>debug</code>），它们将与任何消费者构建类型兼容。</li><li>如果已发布的变体具有不同的构建类型，则只有 release 变体将与未包含在已发布变体中的消费者构建类型兼容。所有其他变体（例如 <code>debug</code>）将只匹配消费者侧的相同构建类型，除非消费者项目指定了<a href="https://developer.android.com/reference/tools/gradle-api/4.2/com/android/build/api/dsl/BuildType" target="_blank" rel="noreferrer">匹配回退</a>。</li></ul><p>如果您希望使每个已发布的 Android 变体仅与库消费者使用的相同构建类型兼容，请设置此 Gradle 属性：<code>kotlin.android.buildTypeAttribute.keep=true</code>。</p><p>您还可以按 product flavor 分组发布变体，这样不同构建类型的输出会放置在单个模块中，构建类型成为 artifact 的分类器（release 构建类型仍不带分类器发布）。此模式默认禁用，可以在 <code>shared/build.gradle.kts</code> 文件中按如下方式启用：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    androidTarget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        publishLibraryVariantsGroupedByFlavor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>不建议您按 product flavor 分组发布变体，以防它们具有不同的依赖项，因为这些依赖项将合并到一个依赖项列表中。</p></div><h2 id="禁用源代码发布" tabindex="-1">禁用源代码发布 <a class="header-anchor" href="#禁用源代码发布" aria-label="Permalink to &quot;禁用源代码发布&quot;">​</a></h2><p>默认情况下，Kotlin Multiplatform Gradle 插件会为所有指定目标发布源代码。但是，您可以在 <code>shared/build.gradle.kts</code> 文件中使用 <code>withSourcesJar()</code> API 配置并禁用源代码发布：</p><ul><li><p>要为所有目标禁用源代码发布：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    withSourcesJar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(publish </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    linuxX64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>要仅为指定目标禁用源代码发布：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     // Disable sources publication only for JVM:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        withSourcesJar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(publish </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    linuxX64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>要为除指定目标外的所有目标禁用源代码发布：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Disable sources publication for all targets except for JVM:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    withSourcesJar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(publish </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        withSourcesJar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(publish </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    linuxX64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><h2 id="禁用-jvm-环境属性发布" tabindex="-1">禁用 JVM 环境属性发布 <a class="header-anchor" href="#禁用-jvm-环境属性发布" aria-label="Permalink to &quot;禁用 JVM 环境属性发布&quot;">​</a></h2><p>从 Kotlin 2.0.0 开始，Gradle 属性 <a href="https://docs.gradle.org/current/userguide/variant_attributes.html#sub:jvm_default_attributes" target="_blank" rel="noreferrer"><code>org.gradle.jvm.environment</code></a> 会随所有 Kotlin 变体自动发布，以帮助区分 Kotlin Multiplatform 库的 JVM 和 Android 变体。此属性指示哪个库变体适用于哪个 JVM 环境，Gradle 会使用此信息帮助您项目中的依赖项解析。目标环境可以是 &quot;android&quot;、&quot;standard-jvm&quot; 或 &quot;no-jvm&quot;。</p><p>您可以通过将以下 Gradle 属性添加到您的 <code>gradle.properties</code> 文件来禁用此属性的发布：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.publishJvmEnvironmentAttribute=false</span></span></code></pre></div><h2 id="推广您的库" tabindex="-1">推广您的库 <a class="header-anchor" href="#推广您的库" aria-label="Permalink to &quot;推广您的库&quot;">​</a></h2><p>您的库可以在 <a href="https://klibs.io/" target="_blank" rel="noreferrer">JetBrains 的搜索平台</a>上展示。它旨在方便根据目标平台查找 Kotlin Multiplatform 库。</p><p>符合标准的库会自动添加。有关如何添加库的更多信息，请参阅 <a href="https://klibs.io/faq" target="_blank" rel="noreferrer">FAQ</a>。</p><h2 id="下一步" tabindex="-1">下一步 <a class="header-anchor" href="#下一步" aria-label="Permalink to &quot;下一步&quot;">​</a></h2><ul><li><a href="./multiplatform-publish-libraries">了解如何将您的 Kotlin Multiplatform 库发布到 Maven Central 版本库</a></li><li><a href="https://kotlinlang.org/docs/api-guidelines-build-for-multiplatform.html" target="_blank" rel="noreferrer">参阅库作者指南，了解为 Kotlin Multiplatform 设计库的最佳实践和技巧</a></li></ul>`,29))])}const b=l(h,[["render",r]]);export{E as __pageData,b as default};
