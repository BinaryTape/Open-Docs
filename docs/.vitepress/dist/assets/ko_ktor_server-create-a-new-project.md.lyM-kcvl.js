import{_ as S,a as L,b as H,c as R,d as D,e as J,f as P,g as C,h as O,i as G,j as N,k as M,l as U,m as W,n as q,o as $,p as B,q as Y,r as F,s as z,t as V,u as X,v as Z}from"./chunks/server_get_started_register_error_handler_output.Dqrb0DZY.js";import{_ as v}from"./chunks/server_get_started_ktor_sample_app_output.BqyRKElU.js";import{_ as Q}from"./chunks/intellij_idea_gradle_icon.dCXxPOpm.js";import{_ as y}from"./chunks/intellij_idea_rerun_icon.tlG8QH6A.js";import{_,C as p,c as h,o as c,G as u,w as o,j as n,a as t}from"./chunks/framework.Bksy39di.js";const ml=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ko/ktor/server-create-a-new-project.md","filePath":"ko/ktor/server-create-a-new-project.md","lastUpdated":1755457140000}'),ll={name:"ko/ktor/server-create-a-new-project.md"};function tl(nl,l,ul,ol,rl,il){const A=p("show-structure"),I=p("tldr"),T=p("link-summary"),j=p("web-summary"),s=p("Links"),a=p("list"),r=p("step"),i=p("control"),d=p("Path"),b=p("emphasis"),m=p("procedure"),f=p("chapter"),k=p("ui-path"),e=p("code-block"),g=p("tab"),K=p("tabs"),w=p("shortcut"),x=p("tip"),E=p("topic");return c(),h("div",null,[u(E,{"xsi:noNamespaceSchemaLocation":"https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd","xmlns:xsi":"http://www.w3.org/2001/XMLSchema-instance",title:"새 Ktor 프로젝트 생성, 열기 및 실행",id:"server-create-a-new-project","help-id":"server_create_a_new_project"},{default:o(()=>[u(A,{for:"chapter",depth:"2"}),u(I,null,{default:o(()=>l[0]||(l[0]=[n("p",null,[n("b",null,"코드 예시"),t(": "),n("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/tutorial-server-get-started"}," tutorial-server-get-started ")],-1)])),_:1}),u(T,null,{default:o(()=>l[1]||(l[1]=[t(" Ktor를 사용하여 서버 애플리케이션을 열고, 실행하고, 테스트하는 방법을 알아봅니다. ")])),_:1}),u(j,null,{default:o(()=>l[2]||(l[2]=[t(" 첫 번째 Ktor 서버 애플리케이션 구축을 시작하세요. 이 튜토리얼에서는 새 Ktor 프로젝트를 생성하고, 열고, 실행하는 방법을 배웁니다. ")])),_:1}),l[355]||(l[355]=n("p",null," 이 튜토리얼에서는 첫 번째 Ktor 서버 프로젝트를 생성하고, 열고, 실행하는 방법을 배웁니다. 일단 프로젝트를 시작하고 나면, Ktor에 익숙해지기 위한 일련의 작업들을 시도해 볼 수 있습니다. ",-1)),l[356]||(l[356]=n("p",null," 이 튜토리얼은 Ktor를 사용하여 서버 애플리케이션 구축을 시작하는 일련의 튜토리얼 중 첫 번째입니다. 각 튜토리얼을 개별적으로 진행할 수 있지만, 다음의 권장 순서를 따르시는 것을 강력히 추천합니다: ",-1)),u(a,{type:"decimal"},{default:o(()=>[l[13]||(l[13]=n("li",null,"새 Ktor 프로젝트를 생성하고, 열고, 실행합니다.",-1)),n("li",null,[u(s,{href:"/ktor/server-requests-and-responses",summary:"작업 관리자 애플리케이션을 구축하여 Ktor와 함께 Kotlin에서 라우팅, 요청 처리 및 매개변수의 기본 사항을 배웁니다."},{default:o(()=>l[3]||(l[3]=[t("요청 처리 및 응답 생성")])),_:1}),l[4]||(l[4]=t("."))]),n("li",null,[u(s,{href:"/ktor/server-create-restful-apis",summary:"Kotlin과 Ktor를 사용하여 백엔드 서비스를 구축하는 방법을 배우고, JSON 파일을 생성하는 RESTful API의 예시를 살펴봅니다."},{default:o(()=>l[5]||(l[5]=[t("JSON을 생성하는 RESTful API 생성")])),_:1}),l[6]||(l[6]=t("."))]),n("li",null,[u(s,{href:"/ktor/server-create-website",summary:"Ktor 및 Thymeleaf 템플릿으로 Kotlin에서 웹사이트를 구축하는 방법을 배웁니다."},{default:o(()=>l[7]||(l[7]=[t("Thymeleaf 템플릿을 사용하여 웹사이트 생성")])),_:1}),l[8]||(l[8]=t("."))]),n("li",null,[u(s,{href:"/ktor/server-create-websocket-application",summary:"WebSocket의 강력한 기능을 활용하여 콘텐츠를 송수신하는 방법을 배웁니다."},{default:o(()=>l[9]||(l[9]=[t("WebSocket 애플리케이션 생성")])),_:1}),l[10]||(l[10]=t("."))]),n("li",null,[u(s,{href:"/ktor/server-integrate-database",summary:"Exposed SQL 라이브러리를 사용하여 Ktor 서비스를 데이터베이스 리포지토리에 연결하는 과정을 배웁니다."},{default:o(()=>l[11]||(l[11]=[t("Exposed와 데이터베이스 통합")])),_:1}),l[12]||(l[12]=t("."))])]),_:1}),u(f,{id:"create-project",title:"새 Ktor 프로젝트 생성"},{default:o(()=>[l[144]||(l[144]=n("p",null,[t(" 새 Ktor 프로젝트를 생성하는 가장 빠른 방법 중 하나는 "),n("a",{href:"#create-project-with-the-ktor-project-generator"},"웹 기반 Ktor 프로젝트 생성기"),t("를 사용하는 것입니다. ")],-1)),l[145]||(l[145]=n("p",null,[t(" 또는 "),n("a",{href:"#create_project_with_intellij"},"IntelliJ IDEA Ultimate용 전용 Ktor 플러그인"),t(" 또는 "),n("a",{href:"#create_project_with_ktor_cli_tool"},"Ktor CLI 도구"),t("를 사용하여 프로젝트를 생성할 수 있습니다. ")],-1)),u(f,{title:"Ktor 프로젝트 생성기 사용",id:"create-project-with-the-ktor-project-generator"},{default:o(()=>[l[57]||(l[57]=n("p",null," Ktor 프로젝트 생성기로 새 프로젝트를 생성하려면 아래 단계를 따르세요: ",-1)),u(m,null,{default:o(()=>[u(r,null,{default:o(()=>l[14]||(l[14]=[n("p",null,[n("a",{href:"https://start.ktor.io/"},"Ktor 프로젝트 생성기"),t("로 이동합니다.")],-1)])),_:1}),u(r,null,{default:o(()=>[n("p",null,[u(i,null,{default:o(()=>l[15]||(l[15]=[t("프로젝트 아티팩트")])),_:1}),l[17]||(l[17]=t(" 필드에 ")),u(d,null,{default:o(()=>l[16]||(l[16]=[t("com.example.ktor-sample-app")])),_:1}),l[18]||(l[18]=t("을 프로젝트 아티팩트 이름으로 입력합니다. ")),l[19]||(l[19]=n("img",{src:S,alt:"Ktor Project Generator with Project Artifact Name org.example.ktor-sample-app","border-effect":"line",style:{},width:"706"},null,-1))])]),_:1}),u(r,null,{default:o(()=>[n("p",null,[u(i,null,{default:o(()=>l[20]||(l[20]=[t("구성")])),_:1}),l[21]||(l[21]=t("을 클릭하여 설정 드롭다운 메뉴를 엽니다: ")),l[22]||(l[22]=n("img",{src:L,style:{},alt:"expanded view of Ktor project settings","border-effect":"line",width:"706"},null,-1))]),l[45]||(l[45]=n("p",null," 다음 설정들을 사용할 수 있습니다: ",-1)),u(a,null,{default:o(()=>[n("li",null,[n("p",null,[u(i,null,{default:o(()=>l[23]||(l[23]=[t("빌드 시스템")])),_:1}),l[27]||(l[27]=t(" : 원하는 ")),u(s,{href:"/ktor/server-dependencies",summary:"기존 Gradle/Maven 프로젝트에 Ktor 서버 종속성을 추가하는 방법을 배웁니다."},{default:o(()=>l[24]||(l[24]=[t("빌드 시스템")])),_:1}),l[28]||(l[28]=t("을 선택합니다. 이는 Kotlin 또는 Groovy DSL을 사용하는 ")),u(b,null,{default:o(()=>l[25]||(l[25]=[t("Gradle")])),_:1}),l[29]||(l[29]=t("이거나 ")),u(b,null,{default:o(()=>l[26]||(l[26]=[t("Maven")])),_:1}),l[30]||(l[30]=t("일 수 있습니다. "))])]),n("li",null,[n("p",null,[u(i,null,{default:o(()=>l[31]||(l[31]=[t("Ktor 버전")])),_:1}),l[32]||(l[32]=t(" : 필요한 Ktor 버전을 선택합니다. "))])]),n("li",null,[n("p",null,[u(i,null,{default:o(()=>l[33]||(l[33]=[t("엔진")])),_:1}),l[35]||(l[35]=t(" : 서버를 실행하는 데 사용되는 ")),u(s,{href:"/ktor/server-engines",summary:"네트워크 요청을 처리하는 엔진에 대해 배웁니다."},{default:o(()=>l[34]||(l[34]=[t("엔진")])),_:1}),l[36]||(l[36]=t("을 선택합니다. "))])]),n("li",null,[n("p",null,[u(i,null,{default:o(()=>l[37]||(l[37]=[t("구성")])),_:1}),l[40]||(l[40]=t(" : ")),u(s,{href:"/ktor/server-configuration-file",summary:"구성 파일에서 다양한 서버 매개변수를 구성하는 방법을 배웁니다."},{default:o(()=>l[38]||(l[38]=[t("YAML 또는 HOCON 파일에서")])),_:1}),l[41]||(l[41]=t(" 서버 매개변수를 지정할지, 아니면 ")),u(s,{href:"/ktor/server-configuration-code",summary:"코드에서 다양한 서버 매개변수를 구성하는 방법을 배웁니다."},{default:o(()=>l[39]||(l[39]=[t("코드에서")])),_:1}),l[42]||(l[42]=t(" 지정할지 선택합니다. "))])]),n("li",null,[n("p",null,[u(i,null,{default:o(()=>l[43]||(l[43]=[t("샘플 포함")])),_:1}),l[44]||(l[44]=t(" : 플러그인용 샘플 코드를 추가하려면 이 옵션을 활성화된 상태로 둡니다. "))])])]),_:1}),l[46]||(l[46]=n("p",null,"이 튜토리얼에서는 이 설정들의 기본값을 그대로 사용할 수 있습니다.",-1))]),_:1}),u(r,null,{default:o(()=>[n("p",null,[u(i,null,{default:o(()=>l[47]||(l[47]=[t("완료")])),_:1}),l[48]||(l[48]=t("를 클릭하여 구성을 저장하고 메뉴를 닫습니다. "))])]),_:1}),u(r,null,{default:o(()=>[n("p",null,[l[50]||(l[50]=t("아래에서 프로젝트에 추가할 수 있는 ")),u(s,{href:"/ktor/server-plugins",summary:"플러그인은 직렬화, 콘텐츠 인코딩, 압축 등과 같은 공통 기능을 제공합니다."},{default:o(()=>l[49]||(l[49]=[t("플러그인")])),_:1}),l[51]||(l[51]=t(" 세트를 찾을 수 있습니다. 플러그인은 Ktor 애플리케이션에서 인증, 직렬화 및 콘텐츠 인코딩, 압축, 쿠키 지원 등과 같은 공통 기능을 제공하는 구성 요소입니다."))]),l[52]||(l[52]=n("p",null,"이 튜토리얼을 위해 이 단계에서는 플러그인을 추가할 필요가 없습니다.",-1))]),_:1}),u(r,null,{default:o(()=>[n("p",null,[u(i,null,{default:o(()=>l[53]||(l[53]=[t("다운로드")])),_:1}),l[54]||(l[54]=t(" 버튼을 클릭하여 Ktor 프로젝트를 생성하고 다운로드합니다. ")),l[55]||(l[55]=n("img",{src:H,alt:"Ktor Project Generator download button","border-effect":"line",style:{},width:"706"},null,-1))])]),_:1}),l[56]||(l[56]=n("p",null,"다운로드가 자동으로 시작됩니다.",-1))]),_:1}),l[58]||(l[58]=n("p",null,[t("새 프로젝트를 생성했으니 이제 "),n("a",{href:"#unpacking"},"Ktor 프로젝트 압축을 풀고 실행하는"),t(" 과정을 계속 진행합니다.")],-1))]),_:1}),u(f,{title:"IntelliJ IDEA Ultimate용 Ktor 플러그인 사용",id:"create_project_with_intellij",collapsible:"true"},{default:o(()=>[l[117]||(l[117]=n("p",null,[t(" 이 섹션에서는 IntelliJ IDEA Ultimate용 "),n("a",{href:"https://plugins.jetbrains.com/plugin/16008-ktor"},"Ktor 플러그인"),t("을 사용하여 프로젝트를 설정하는 방법을 설명합니다. ")],-1)),l[118]||(l[118]=n("p",null,[t(" 새 Ktor 프로젝트를 생성하려면 "),n("a",{href:"https://www.jetbrains.com/help/idea/run-for-the-first-time.html"},"IntelliJ IDEA를 열고"),t(", 아래 단계를 따르세요: ")],-1)),u(m,null,{default:o(()=>[u(r,null,{default:o(()=>[n("p",null,[l[60]||(l[60]=t(" 환영 화면에서 ")),u(i,null,{default:o(()=>l[59]||(l[59]=[t("새 프로젝트")])),_:1}),l[61]||(l[61]=t("를 클릭합니다. "))]),n("p",null,[l[63]||(l[63]=t(" 그렇지 않으면, 메인 메뉴에서 ")),u(k,null,{default:o(()=>l[62]||(l[62]=[t("파일 | 새로 만들기 | 프로젝트")])),_:1}),l[64]||(l[64]=t("를 선택합니다. "))])]),_:1}),u(r,null,{default:o(()=>[n("p",null,[u(i,null,{default:o(()=>l[65]||(l[65]=[t("새 프로젝트")])),_:1}),l[67]||(l[67]=t(" 마법사에서 왼쪽 목록에서 ")),u(i,null,{default:o(()=>l[66]||(l[66]=[t("Ktor")])),_:1}),l[68]||(l[68]=t("를 선택합니다. "))])]),_:1}),u(r,null,{default:o(()=>[l[85]||(l[85]=n("p",null," 오른쪽 창에서 다음 설정을 지정할 수 있습니다: ",-1)),l[86]||(l[86]=n("img",{src:R,alt:"Ktor Project Settings",width:"706","border-effect":"rounded"},null,-1)),u(a,null,{default:o(()=>[n("li",null,[n("p",null,[u(i,null,{default:o(()=>l[69]||(l[69]=[t("이름")])),_:1}),l[71]||(l[71]=t(" : 프로젝트 이름을 지정합니다. ")),u(d,null,{default:o(()=>l[70]||(l[70]=[t("ktor-sample-app")])),_:1}),l[72]||(l[72]=t("을 프로젝트 이름으로 입력합니다. "))])]),n("li",null,[n("p",null,[u(i,null,{default:o(()=>l[73]||(l[73]=[t("위치")])),_:1}),l[74]||(l[74]=t(" : 프로젝트 디렉터리를 지정합니다. "))])]),n("li",null,[n("p",null,[u(i,null,{default:o(()=>l[75]||(l[75]=[t("웹사이트")])),_:1}),l[76]||(l[76]=t(" : 패키지 이름을 생성하는 데 사용될 도메인을 지정합니다. "))])]),n("li",null,[n("p",null,[u(i,null,{default:o(()=>l[77]||(l[77]=[t("아티팩트")])),_:1}),l[78]||(l[78]=t(" : 이 필드는 생성된 아티팩트 이름을 보여줍니다. "))])]),n("li",null,[n("p",null,[u(i,null,{default:o(()=>l[79]||(l[79]=[t("엔진")])),_:1}),l[81]||(l[81]=t(" : 서버를 실행하는 데 사용되는 ")),u(s,{href:"/ktor/server-engines",summary:"네트워크 요청을 처리하는 엔진에 대해 배웁니다."},{default:o(()=>l[80]||(l[80]=[t("엔진")])),_:1}),l[82]||(l[82]=t("을 선택합니다. "))])]),n("li",null,[n("p",null,[u(i,null,{default:o(()=>l[83]||(l[83]=[t("샘플 포함")])),_:1}),l[84]||(l[84]=t(" : 플러그인용 샘플 코드를 추가하려면 이 옵션을 활성화된 상태로 둡니다. "))])])]),_:1})]),_:1}),u(r,null,{default:o(()=>[n("p",null,[u(i,null,{default:o(()=>l[87]||(l[87]=[t("고급 설정")])),_:1}),l[88]||(l[88]=t("을 클릭하여 추가 설정 메뉴를 확장합니다: "))]),l[105]||(l[105]=n("img",{src:D,alt:"Ktor Project Advanced Settings",width:"706","border-effect":"rounded"},null,-1)),l[106]||(l[106]=n("p",null," 다음 설정들을 사용할 수 있습니다: ",-1)),u(a,null,{default:o(()=>[n("li",null,[n("p",null,[u(i,null,{default:o(()=>l[89]||(l[89]=[t("빌드 시스템")])),_:1}),l[93]||(l[93]=t(" : 원하는 ")),u(s,{href:"/ktor/server-dependencies",summary:"기존 Gradle/Maven 프로젝트에 Ktor 서버 종속성을 추가하는 방법을 배웁니다."},{default:o(()=>l[90]||(l[90]=[t("빌드 시스템")])),_:1}),l[94]||(l[94]=t("을 선택합니다. 이는 Kotlin 또는 Groovy DSL을 사용하는 ")),u(b,null,{default:o(()=>l[91]||(l[91]=[t("Gradle")])),_:1}),l[95]||(l[95]=t("이거나 ")),u(b,null,{default:o(()=>l[92]||(l[92]=[t("Maven")])),_:1}),l[96]||(l[96]=t("일 수 있습니다. "))])]),n("li",null,[n("p",null,[u(i,null,{default:o(()=>l[97]||(l[97]=[t("Ktor 버전")])),_:1}),l[98]||(l[98]=t(" : 필요한 Ktor 버전을 선택합니다. "))])]),n("li",null,[n("p",null,[u(i,null,{default:o(()=>l[99]||(l[99]=[t("구성")])),_:1}),l[102]||(l[102]=t(" : ")),u(s,{href:"/ktor/server-configuration-file",summary:"구성 파일에서 다양한 서버 매개변수를 구성하는 방법을 배웁니다."},{default:o(()=>l[100]||(l[100]=[t("YAML 또는 HOCON 파일에서")])),_:1}),l[103]||(l[103]=t(" 서버 매개변수를 지정할지, 아니면 ")),u(s,{href:"/ktor/server-configuration-code",summary:"코드에서 다양한 서버 매개변수를 구성하는 방법을 배웁니다."},{default:o(()=>l[101]||(l[101]=[t("코드에서")])),_:1}),l[104]||(l[104]=t(" 지정할지 선택합니다. "))])])]),_:1}),l[107]||(l[107]=n("p",null,"이 튜토리얼을 위해 이 설정들의 기본값을 그대로 사용할 수 있습니다.",-1))]),_:1}),u(r,null,{default:o(()=>[n("p",null,[u(i,null,{default:o(()=>l[108]||(l[108]=[t("다음")])),_:1}),l[109]||(l[109]=t("을 클릭하여 다음 페이지로 이동합니다. "))]),l[113]||(l[113]=n("img",{src:J,alt:"Ktor plugins",width:"706","border-effect":"rounded"},null,-1)),n("p",null,[l[111]||(l[111]=t(" 이 페이지에서 ")),u(s,{href:"/ktor/server-plugins",summary:"플러그인은 직렬화, 콘텐츠 인코딩, 압축 등과 같은 공통 기능을 제공합니다."},{default:o(()=>l[110]||(l[110]=[t("플러그인")])),_:1}),l[112]||(l[112]=t(" 세트를 선택할 수 있습니다. 플러그인은 Ktor 애플리케이션의 일반적인 기능(예: 인증, 직렬화 및 콘텐츠 인코딩, 압축, 쿠키 지원 등)을 제공하는 구성 요소입니다. "))]),l[114]||(l[114]=n("p",null,"이 튜토리얼을 위해 이 단계에서는 플러그인을 추가할 필요가 없습니다.",-1))]),_:1}),u(r,null,{default:o(()=>[n("p",null,[u(i,null,{default:o(()=>l[115]||(l[115]=[t("생성")])),_:1}),l[116]||(l[116]=t("을 클릭하고 IntelliJ IDEA가 프로젝트를 생성하고 종속성을 설치할 때까지 기다립니다. "))])]),_:1})]),_:1}),l[119]||(l[119]=n("p",null,[t(" 새 프로젝트를 생성했으니 이제 애플리케이션을 "),n("a",{href:"#open-explore-run"},"열고, 탐색하고, 실행하는"),t(" 방법을 계속 배웁니다. ")],-1))]),_:1}),u(f,{title:"Ktor CLI 도구 사용",id:"create_project_with_ktor_cli_tool",collapsible:"true"},{default:o(()=>[l[142]||(l[142]=n("p",null,[t(" 이 섹션에서는 "),n("a",{href:"https://github.com/ktorio/ktor-cli"},"Ktor CLI 도구"),t("를 사용하여 프로젝트를 설정하는 방법을 설명합니다. ")],-1)),l[143]||(l[143]=n("p",null," 새 Ktor 프로젝트를 생성하려면 원하는 터미널을 열고 다음 단계를 따르세요: ",-1)),u(m,null,{default:o(()=>[u(r,null,{default:o(()=>[l[120]||(l[120]=t(" 다음 명령 중 하나를 사용하여 Ktor CLI 도구를 설치합니다: ")),u(K,null,{default:o(()=>[u(g,{title:"macOS/Linux",id:"macos-linux"},{default:o(()=>[u(e,{lang:"console",code:"                                brew install ktor"})]),_:1}),u(g,{title:"Windows",id:"windows"},{default:o(()=>[u(e,{lang:"console",code:"                                winget install JetBrains.KtorCLI"})]),_:1})]),_:1})]),_:1}),u(r,null,{default:o(()=>[l[121]||(l[121]=t(" 대화형 모드로 새 프로젝트를 생성하려면 다음 명령을 사용합니다: ")),u(e,{lang:"console",code:"                      ktor new"})]),_:1}),u(r,null,{default:o(()=>[u(d,null,{default:o(()=>l[122]||(l[122]=[t("ktor-sample-app")])),_:1}),l[126]||(l[126]=t("을 프로젝트 이름으로 입력합니다: ")),l[127]||(l[127]=n("img",{src:P,alt:"Using the Ktor CLI tool in interactive mode","border-effect":"rounded",style:{},width:"706"},null,-1)),n("p",null,[l[124]||(l[124]=t(" (선택 사항) 프로젝트 이름 아래 ")),u(k,null,{default:o(()=>l[123]||(l[123]=[t("위치")])),_:1}),l[125]||(l[125]=t(" 경로를 편집하여 프로젝트가 저장될 위치를 변경할 수도 있습니다. "))])]),_:1}),u(r,null,{default:o(()=>[u(w,null,{default:o(()=>l[128]||(l[128]=[t("Enter")])),_:1}),l[129]||(l[129]=t("를 눌러 계속 진행합니다. "))]),_:1}),u(r,null,{default:o(()=>[l[131]||(l[131]=t(" 다음 단계에서 프로젝트에 ")),u(s,{href:"/ktor/server-plugins",summary:"플러그인은 직렬화, 콘텐츠 인코딩, 압축 등과 같은 공통 기능을 제공합니다."},{default:o(()=>l[130]||(l[130]=[t("플러그인")])),_:1}),l[132]||(l[132]=t("을 검색하고 추가할 수 있습니다. 플러그인은 Ktor 애플리케이션에서 인증, 직렬화 및 콘텐츠 인코딩, 압축, 쿠키 지원 등과 같은 공통 기능을 제공하는 구성 요소입니다. ")),l[133]||(l[133]=n("img",{src:C,alt:"Add plugins to a project using the Ktor CLI tool","border-effect":"rounded",style:{},width:"706"},null,-1)),l[134]||(l[134]=n("p",null,"이 튜토리얼을 위해 이 단계에서는 플러그인을 추가할 필요가 없습니다.",-1))]),_:1}),u(r,null,{default:o(()=>[u(w,null,{default:o(()=>l[135]||(l[135]=[t("CTRL+G")])),_:1}),l[141]||(l[141]=t("를 눌러 프로젝트를 생성합니다. ")),n("p",null,[l[138]||(l[138]=t(" 또는 ")),u(i,null,{default:o(()=>l[136]||(l[136]=[t("프로젝트 생성 (CTRL+G)")])),_:1}),l[139]||(l[139]=t("을 선택하고 ")),u(w,null,{default:o(()=>l[137]||(l[137]=[t("Enter")])),_:1}),l[140]||(l[140]=t("를 눌러 프로젝트를 생성할 수 있습니다. "))])]),_:1})]),_:1})]),_:1})]),_:1}),u(f,{title:"Ktor 프로젝트 압축 해제 및 실행",id:"unpacking"},{default:o(()=>[l[163]||(l[163]=n("p",null," 이 섹션에서는 명령줄에서 프로젝트를 압축 해제하고, 빌드하고, 실행하는 방법을 배웁니다. 아래 설명은 다음을 가정합니다: ",-1)),u(a,{type:"bullet"},{default:o(()=>[n("li",null,[u(d,null,{default:o(()=>l[146]||(l[146]=[t("ktor-sample-app")])),_:1}),l[147]||(l[147]=t("이라는 프로젝트를 생성하고 다운로드했습니다. "))]),n("li",null,[l[149]||(l[149]=t("이 프로젝트가 홈 디렉터리의 ")),u(d,null,{default:o(()=>l[148]||(l[148]=[t("myprojects")])),_:1}),l[150]||(l[150]=t("라는 폴더에 있습니다. "))])]),_:1}),l[164]||(l[164]=n("p",null,"필요한 경우, 사용자 설정에 맞게 이름과 경로를 변경하세요.",-1)),l[165]||(l[165]=n("p",null,"원하는 명령줄 도구를 열고 다음 단계를 따르세요:",-1)),u(m,null,{default:o(()=>[u(r,null,{default:o(()=>[l[151]||(l[151]=n("p",null,"터미널에서 프로젝트를 다운로드한 폴더로 이동합니다:",-1)),u(e,{lang:"console",code:"                    cd ~/myprojects"})]),_:1}),u(r,null,{default:o(()=>[l[152]||(l[152]=n("p",null,"ZIP 아카이브를 동일한 이름의 폴더로 압축 해제합니다:",-1)),u(K,null,{default:o(()=>[u(g,{title:"macOS","group-key":"macOS"},{default:o(()=>[u(e,{lang:"console",code:"                            unzip ktor-sample-app.zip -d ktor-sample-app"})]),_:1}),u(g,{title:"Windows","group-key":"windows"},{default:o(()=>[u(e,{lang:"console",code:"                            tar -xf ktor-sample-app.zip"})]),_:1})]),_:1}),l[153]||(l[153]=n("p",null,"이제 디렉터리에 ZIP 아카이브와 압축 해제된 폴더가 포함됩니다.",-1))]),_:1}),u(r,null,{default:o(()=>[l[154]||(l[154]=n("p",null,"해당 디렉터리에서 새로 생성된 폴더로 이동합니다:",-1)),u(e,{lang:"console",code:"                    cd ktor-sample-app"})]),_:1}),u(r,null,{default:o(()=>[l[155]||(l[155]=n("p",null,[t("macOS/UNIX 시스템에서는 gradlew Gradle 헬퍼 스크립트를 실행 가능하게 만들어야 합니다. 이를 위해 "),n("code",null,"chmod"),t(" 명령어를 사용합니다:")],-1)),u(K,null,{default:o(()=>[u(g,{title:"macOS","group-key":"macOS"},{default:o(()=>[u(e,{lang:"console",code:"                            chmod +x ./gradlew"})]),_:1})]),_:1})]),_:1}),u(r,null,{default:o(()=>[l[156]||(l[156]=n("p",null,"프로젝트를 빌드하려면 다음 명령어를 사용합니다:",-1)),u(K,null,{default:o(()=>[u(g,{title:"macOS","group-key":"macOS"},{default:o(()=>[u(e,{lang:"console",code:"                            ./gradlew build"})]),_:1}),u(g,{title:"Windows","group-key":"windows"},{default:o(()=>[u(e,{lang:"console",code:"                            gradlew build"})]),_:1})]),_:1}),l[157]||(l[157]=n("p",null,"빌드가 성공했음을 확인하면 Gradle을 통해 프로젝트를 다시 실행할 수 있습니다.",-1))]),_:1}),u(r,null,{default:o(()=>[l[158]||(l[158]=n("p",null,"프로젝트를 실행하려면 다음 명령어를 사용합니다:",-1)),u(K,null,{default:o(()=>[u(g,{title:"macOS","group-key":"macOS"},{default:o(()=>[u(e,{lang:"console",code:"                            ./gradlew run"})]),_:1}),u(g,{title:"Windows","group-key":"windows"},{default:o(()=>[u(e,{lang:"console",code:"                            gradlew run"})]),_:1})]),_:1})]),_:1}),u(r,null,{default:o(()=>l[159]||(l[159]=[n("p",null,[t("프로젝트가 실행 중인지 확인하려면 출력에 언급된 URL("),n("a",{href:"http://0.0.0.0:8080"},[n("a",{href:"http://0.0.0.0:8080",target:"_blank",rel:"noreferrer"},"http://0.0.0.0:8080")]),t(')로 브라우저를 엽니다. 화면에 "Hello World!" 메시지가 표시되어야 합니다:')],-1),n("img",{src:v,alt:"Output of generated ktor project","border-effect":"line",width:"706"},null,-1)])),_:1})]),_:1}),l[166]||(l[166]=n("p",null,"축하합니다! Ktor 프로젝트를 성공적으로 시작했습니다.",-1)),n("p",null,[l[161]||(l[161]=t(" Ktor 애플리케이션 실행으로 인해 기본 프로세스가 사용 중이므로 명령줄이 응답하지 않을 수 있습니다. ")),u(w,null,{default:o(()=>l[160]||(l[160]=[t("CTRL+C")])),_:1}),l[162]||(l[162]=t("를 눌러 애플리케이션을 종료할 수 있습니다. "))])]),_:1}),u(f,{title:"IntelliJ IDEA에서 Ktor 프로젝트 열기, 탐색 및 실행",id:"open-explore-run"},{default:o(()=>[u(f,{title:"프로젝트 열기",id:"open"},{default:o(()=>[l[175]||(l[175]=n("p",null,[n("a",{href:"https://www.jetbrains.com/idea/"},"IntelliJ IDEA"),t("가 설치되어 있다면 명령줄에서 프로젝트를 쉽게 열 수 있습니다. ")],-1)),l[176]||(l[176]=n("p",null,[t(" 프로젝트 폴더에 있는지 확인한 다음, 현재 폴더를 나타내는 마침표와 함께 "),n("code",null,"idea"),t(" 명령어를 입력합니다: ")],-1)),u(e,{lang:"Bash",code:"                idea ."}),l[177]||(l[177]=n("p",null," 또는 수동으로 IntelliJ IDEA를 실행하여 프로젝트를 열 수 있습니다. ",-1)),n("p",null,[l[170]||(l[170]=t(" 환영 화면이 열리면 ")),u(i,null,{default:o(()=>l[167]||(l[167]=[t("열기")])),_:1}),l[171]||(l[171]=t("를 클릭합니다. 그렇지 않으면 메인 메뉴에서 ")),u(k,null,{default:o(()=>l[168]||(l[168]=[t("파일 | 열기")])),_:1}),l[172]||(l[172]=t("로 이동하여 ")),u(d,null,{default:o(()=>l[169]||(l[169]=[t("ktor-sample-app")])),_:1}),l[173]||(l[173]=t(" 폴더를 선택하여 엽니다. "))]),u(x,null,{default:o(()=>l[174]||(l[174]=[t(" 프로젝트 관리에 대한 자세한 내용은 "),n("a",{href:"https://www.jetbrains.com/help/idea/creating-and-managing-projects.html"},"IntelliJ IDEA 문서",-1),t("를 참조하세요. ")])),_:1})]),_:1}),u(f,{title:"프로젝트 탐색",id:"explore"},{default:o(()=>[l[202]||(l[202]=n("p",null,"어떤 옵션을 선택하든 프로젝트는 아래와 같이 열립니다:",-1)),l[203]||(l[203]=n("img",{src:O,alt:"Generated Ktor project view in IDE",width:"706"},null,-1)),n("p",null,[l[180]||(l[180]=t(" 프로젝트 레이아웃을 설명하기 위해 ")),u(i,null,{default:o(()=>l[178]||(l[178]=[t("프로젝트")])),_:1}),l[181]||(l[181]=t(" 뷰에서 구조를 확장하고 ")),u(d,null,{default:o(()=>l[179]||(l[179]=[t("settings-gradle.kts")])),_:1}),l[182]||(l[182]=t(" 파일을 선택했습니다. "))]),n("p",null,[l[188]||(l[188]=t(" 애플리케이션을 실행하는 코드는 ")),u(d,null,{default:o(()=>l[183]||(l[183]=[t("src/main/kotlin")])),_:1}),l[189]||(l[189]=t(" 아래의 패키지에 있습니다. 기본 패키지는 ")),u(d,null,{default:o(()=>l[184]||(l[184]=[t("com.example")])),_:1}),l[190]||(l[190]=t("이며 ")),u(d,null,{default:o(()=>l[185]||(l[185]=[t("plugins")])),_:1}),l[191]||(l[191]=t("라는 하위 패키지를 포함합니다. 이 패키지들 안에 ")),u(d,null,{default:o(()=>l[186]||(l[186]=[t("Application.kt")])),_:1}),l[192]||(l[192]=t("와 ")),u(d,null,{default:o(()=>l[187]||(l[187]=[t("Routing.kt")])),_:1}),l[193]||(l[193]=t("라는 두 파일이 생성되었습니다. "))]),l[204]||(l[204]=n("img",{src:G,alt:"Ktor project src folder structure",width:"400"},null,-1)),n("p",null,[l[195]||(l[195]=t("프로젝트 이름은 ")),u(d,null,{default:o(()=>l[194]||(l[194]=[t("settings-gradle.kts")])),_:1}),l[196]||(l[196]=t("에 구성되어 있습니다. "))]),l[205]||(l[205]=n("img",{src:N,alt:"Contents of settings.gradle.kt",width:"706"},null,-1)),n("p",null,[l[198]||(l[198]=t(" 구성 파일 및 기타 종류의 콘텐츠는 ")),u(d,null,{default:o(()=>l[197]||(l[197]=[t("src/main/resources")])),_:1}),l[199]||(l[199]=t(" 폴더 안에 있습니다. "))]),l[206]||(l[206]=n("img",{src:M,alt:"Ktor project resources folder structure",width:"400"},null,-1)),n("p",null,[u(d,null,{default:o(()=>l[200]||(l[200]=[t("src/test/kotlin")])),_:1}),l[201]||(l[201]=t(" 아래의 패키지에 스켈레톤 테스트가 생성되었습니다. "))]),l[207]||(l[207]=n("img",{src:U,alt:"Ktor project test folder structure",width:"400"},null,-1))]),_:1}),u(f,{title:"프로젝트 실행",id:"run"},{default:o(()=>[u(m,null,{default:o(()=>[l[221]||(l[221]=n("p",null,"IntelliJ IDEA 내에서 프로젝트를 실행하려면:",-1)),u(r,null,{default:o(()=>l[208]||(l[208]=[n("p",null,[t("오른쪽 사이드바에서 Gradle 아이콘("),n("img",{alt:"intelliJ IDEA gradle icon",src:Q,width:"16",height:"26"}),t(")을 클릭하여 "),n("a",{href:"https://www.jetbrains.com/help/idea/jetgradle-tool-window.html"},"Gradle 도구 창"),t("을 엽니다.")],-1),n("img",{src:W,alt:"Gradle tab in IntelliJ IDEA","border-effect":"line",width:"706"},null,-1)])),_:1}),u(r,null,{default:o(()=>[n("p",null,[l[211]||(l[211]=t("이 도구 창에서 ")),u(k,null,{default:o(()=>l[209]||(l[209]=[t("작업 | 애플리케이션")])),_:1}),l[212]||(l[212]=t("으로 이동하여 ")),u(i,null,{default:o(()=>l[210]||(l[210]=[t("실행")])),_:1}),l[213]||(l[213]=t(" 작업을 두 번 클릭합니다. "))]),l[214]||(l[214]=n("img",{src:q,alt:"Gradle tab in IntelliJ IDEA","border-effect":"line",width:"450"},null,-1))]),_:1}),u(r,null,{default:o(()=>[l[218]||(l[218]=n("p",null,[t("Ktor 애플리케이션은 IDE 하단의 "),n("a",{href:"https://www.jetbrains.com/help/idea/run-tool-window.html"},"실행 도구 창"),t("에서 시작됩니다:")],-1)),l[219]||(l[219]=n("img",{src:$,alt:"Project running in terminal",width:"706"},null,-1)),n("p",null,[l[216]||(l[216]=t("이전에 명령줄에 표시되었던 동일한 메시지가 이제 ")),u(k,null,{default:o(()=>l[215]||(l[215]=[t("실행")])),_:1}),l[217]||(l[217]=t(" 도구 창에 표시됩니다. "))])]),_:1}),u(r,null,{default:o(()=>l[220]||(l[220]=[n("p",null,[t("프로젝트가 실행 중인지 확인하려면 지정된 URL ("),n("a",{href:"http://0.0.0.0:8080"},[n("a",{href:"http://0.0.0.0:8080",target:"_blank",rel:"noreferrer"},"http://0.0.0.0:8080")]),t(")로 브라우저를 엽니다.")],-1),n("p",null,'화면에 "Hello World!" 메시지가 다시 표시되어야 합니다:',-1),n("img",{src:v,alt:"Hello World in Browser Screen",width:"706"},null,-1)])),_:1})]),_:1}),n("p",null,[u(k,null,{default:o(()=>l[222]||(l[222]=[t("실행")])),_:1}),l[223]||(l[223]=t(" 도구 창을 통해 애플리케이션을 관리할 수 있습니다. "))]),u(a,{type:"bullet"},{default:o(()=>l[224]||(l[224]=[n("li",null,[t(" 애플리케이션을 종료하려면 중지 버튼("),n("img",{src:B,style:{},height:"16",width:"16",alt:"intelliJ IDEA terminate icon"}),t(")을 클릭합니다. ")],-1),n("li",null,[t(" 프로세스를 다시 시작하려면 다시 실행 버튼("),n("img",{src:y,style:{},height:"16",width:"16",alt:"intelliJ IDEA rerun icon"}),t(")을 클릭합니다. ")],-1)])),_:1}),l[225]||(l[225]=n("p",null,[t(" 이러한 옵션은 "),n("a",{href:"https://www.jetbrains.com/help/idea/run-tool-window.html#run-toolbar"},"IntelliJ IDEA 실행 도구 창 문서"),t("에서 자세히 설명합니다. ")],-1))]),_:1})]),_:1}),u(f,{title:"시도해 볼 추가 작업",id:"additional-tasks"},{default:o(()=>[l[348]||(l[348]=n("p",null,"다음은 시도해 볼 만한 추가 작업들입니다:",-1)),u(a,{type:"decimal"},{default:o(()=>l[226]||(l[226]=[n("li",null,[n("a",{href:"#change-the-default-port"},"기본 포트 변경.")],-1),n("li",null,[n("a",{href:"#change-the-port-via-yaml"},"YAML을 통해 포트 변경.")],-1),n("li",null,[n("a",{href:"#add-a-new-http-endpoint"},"새 HTTP 엔드포인트 추가.")],-1),n("li",null,[n("a",{href:"#configure-static-content"},"정적 콘텐츠 구성.")],-1),n("li",null,[n("a",{href:"#write-an-integration-test"},"통합 테스트 작성.")],-1),n("li",null,[n("a",{href:"#register-error-handlers"},"오류 핸들러 등록.")],-1)])),_:1}),l[349]||(l[349]=n("p",null," 이 작업들은 서로 의존하지 않지만, 점진적으로 복잡성이 증가합니다. 선언된 순서대로 시도하는 것이 점진적으로 학습하는 가장 쉬운 방법입니다. 단순화와 중복을 피하기 위해 아래 설명에서는 작업을 순서대로 시도한다고 가정합니다. ",-1)),l[350]||(l[350]=n("p",null," 코딩이 필요한 경우 코드와 해당 임포트(imports)를 모두 지정했습니다. IDE가 이러한 임포트를 자동으로 추가해 줄 수 있습니다. ",-1)),u(f,{title:"기본 포트 변경",id:"change-the-default-port"},{default:o(()=>[n("p",null,[u(k,null,{default:o(()=>l[227]||(l[227]=[t("프로젝트")])),_:1}),l[229]||(l[229]=t(" 뷰에서 ")),u(d,null,{default:o(()=>l[228]||(l[228]=[t("src/main/kotlin")])),_:1}),l[230]||(l[230]=t(" 폴더로 이동한 다음 생성된 단일 패키지로 이동하여 다음 단계를 따릅니다: "))]),u(m,null,{default:o(()=>[u(r,null,{default:o(()=>[n("p",null,[u(d,null,{default:o(()=>l[231]||(l[231]=[t("Application.kt")])),_:1}),l[232]||(l[232]=t(" 파일을 엽니다. 다음과 유사한 코드를 찾을 수 있습니다: "))]),u(e,{lang:"kotlin",code:`                        fun main() {
                            embeddedServer(
                                Netty,
                                port = 8080, // This is the port on which Ktor is listening
                                host = "0.0.0.0",
                                module = Application::module
                            ).start(wait = true)
                        }

                        fun Application.module() {
                            configureRouting()
                        }`})]),_:1}),u(r,null,{default:o(()=>[l[233]||(l[233]=n("p",null,[n("code",null,"embeddedServer()"),t(" 함수에서 "),n("code",null,"port"),t(' 매개변수를 원하는 다른 숫자(예: "9292")로 변경합니다.')],-1)),u(e,{lang:"kotlin",code:`                        fun main() {
                            embeddedServer(
                                Netty,
                                port = 9292,
                                host = "0.0.0.0",
                                module = Application::module
                            ).start(wait = true)
                        }`})]),_:1}),u(r,null,{default:o(()=>l[234]||(l[234]=[n("p",null,[t("다시 실행 버튼("),n("img",{alt:"intelliJ IDEA rerun button icon",src:y,height:"16",width:"16"}),t(")을 클릭하여 애플리케이션을 다시 시작합니다.")],-1)])),_:1}),u(r,null,{default:o(()=>l[235]||(l[235]=[n("p",null,[t("새 포트 번호로 애플리케이션이 실행 중인지 확인하려면 새 URL("),n("a",{href:"http://0.0.0.0:9292"},[n("a",{href:"http://0.0.0.0:9292",target:"_blank",rel:"noreferrer"},"http://0.0.0.0:9292")]),t(")로 브라우저를 열거나, "),n("a",{href:"https://www.jetbrains.com/help/idea/http-client-in-product-code-editor.html#creating-http-request-files"},"IntelliJ IDEA에서 새 HTTP 요청 파일(HTTP Request file)을 생성"),t("할 수 있습니다:")],-1),n("img",{src:Y,alt:"Testing port change with an HTTP request file in IntelliJ IDEA",width:"706"},null,-1)])),_:1})]),_:1})]),_:1}),u(f,{title:"YAML을 통해 포트 변경",id:"change-the-port-via-yaml"},{default:o(()=>[l[242]||(l[242]=n("p",null," 새 Ktor 프로젝트를 생성할 때 YAML 또는 HOCON 파일 중 하나에 외부적으로 구성을 저장할 수 있는 옵션이 있습니다: ",-1)),l[243]||(l[243]=n("img",{src:F,width:"400",alt:"Ktor project generator configuration options"},null,-1)),n("p",null,[l[237]||(l[237]=t(" 만약 구성을 외부적으로 저장하도록 선택했다면, ")),u(d,null,{default:o(()=>l[236]||(l[236]=[t("Application.kt")])),_:1}),l[238]||(l[238]=t("의 코드는 다음과 같을 것입니다: "))]),u(e,{lang:"kotlin",code:`                fun main(args: Array<String>): Unit =
                    io.ktor.server.netty.EngineMain.main(args)

                @Suppress("unused")
                fun Application.module() {
                    configureRouting()
                }`}),n("p",null,[l[240]||(l[240]=t(" 이 값들은 ")),u(d,null,{default:o(()=>l[239]||(l[239]=[t("src/main/resources/")])),_:1}),l[241]||(l[241]=t(" 내의 구성 파일에 저장될 것입니다: "))]),u(K,null,{default:o(()=>[u(g,{title:"application.yaml (YAML)","group-key":"yaml"},{default:o(()=>[u(e,{lang:"yaml",code:`                        ktor:
                            application:
                                modules:
                                    - com.example.ApplicationKt.module
                            deployment:
                                port: 8080`})]),_:1}),u(g,{title:"application.conf (HOCON)","group-key":"hocon"},{default:o(()=>[u(e,{lang:"json",code:`                        ktor {
                            deployment {
                                port = 8080
                                port = \${?PORT}
                            }
                            application {
                                modules = [ com.example.ApplicationKt.module ]
                            }
                        }`})]),_:1})]),_:1}),l[244]||(l[244]=n("p",null,[t(" 이 경우 포트 번호를 변경하기 위해 코드를 수정할 필요가 없습니다. YAML 또는 HOCON 파일의 값을 변경하고 애플리케이션을 다시 시작하기만 하면 됩니다. 변경 사항은 위 "),n("a",{href:"#change-the-default-port"},"기본 포트 변경"),t("과 동일한 방식으로 확인할 수 있습니다. ")],-1))]),_:1}),u(f,{title:"새 HTTP 엔드포인트 추가",id:"add-a-new-http-endpoint"},{default:o(()=>[l[265]||(l[265]=n("p",null,"다음으로, GET 요청에 응답하는 새 HTTP 엔드포인트를 생성합니다.",-1)),n("p",null,[u(k,null,{default:o(()=>l[245]||(l[245]=[t("프로젝트")])),_:1}),l[247]||(l[247]=t(" 도구 창에서 ")),u(d,null,{default:o(()=>l[246]||(l[246]=[t("src/main/kotlin/com/example")])),_:1}),l[248]||(l[248]=t(" 폴더로 이동하여 다음 단계를 따릅니다: "))]),u(m,null,{default:o(()=>[u(r,null,{default:o(()=>[n("p",null,[u(d,null,{default:o(()=>l[249]||(l[249]=[t("Application.kt")])),_:1}),l[250]||(l[250]=t(" 파일을 열고 ")),l[251]||(l[251]=n("code",null,"configureRouting()",-1)),l[252]||(l[252]=t(" 함수를 찾습니다. "))])]),_:1}),u(r,null,{default:o(()=>[n("p",null,[l[254]||(l[254]=t("IntelliJ IDEA에서 함수 이름 위에 캐럿을 놓고 ")),u(w,null,{default:o(()=>l[253]||(l[253]=[t("⌘Cmd+B")])),_:1}),l[255]||(l[255]=t("를 눌러 ")),l[256]||(l[256]=n("code",null,"configureRouting()",-1)),l[257]||(l[257]=t(" 함수로 이동합니다. "))]),l[258]||(l[258]=n("p",null,[t("또는 "),n("code",null,"Routing.kt"),t(" 파일을 열어 함수로 이동할 수 있습니다.")],-1)),l[259]||(l[259]=n("p",null,"다음은 표시되어야 할 코드입니다:",-1)),u(e,{lang:"Kotlin",validate:"true",code:`                        fun Application.configureRouting() {
                            routing {
                                get("/") {
                                    call.respondText("Hello World!")
                                }
                            }
                        }`})]),_:1}),u(r,null,{default:o(()=>[l[260]||(l[260]=n("p",null,"새 엔드포인트를 생성하려면 아래에 표시된 추가 다섯 줄의 코드를 삽입합니다:",-1)),u(e,{lang:"kotlin",code:`fun Application.configureRouting() {
    routing {
        get("/") {
            call.respondText("Hello World!")
        }

        get("/test1") {
            val text = "<h1>Hello From Ktor</h1>"
            val type = ContentType.parse("text/html")
            call.respondText(text, type)
        }
    }
}`}),l[261]||(l[261]=n("p",null,[t("참고로, "),n("code",null,"/test1"),t(" URL은 원하는 대로 변경할 수 있습니다.")],-1))]),_:1}),u(r,null,{default:o(()=>[l[262]||(l[262]=n("p",null,[n("code",null,"ContentType"),t("을 사용하려면 다음 임포트(import)를 추가합니다:")],-1)),u(e,{lang:"kotlin",code:"                        import io.ktor.http.*"})]),_:1}),u(r,null,{default:o(()=>l[263]||(l[263]=[n("p",null,[t("다시 실행 버튼("),n("img",{alt:"intelliJ IDEA rerun button icon",src:y,height:"16",width:"16"}),t(")을 클릭하여 애플리케이션을 다시 시작합니다.")],-1)])),_:1}),u(r,null,{default:o(()=>l[264]||(l[264]=[n("p",null,[t("브라우저에서 새 URL("),n("a",{href:"http://0.0.0.0:9292/test1"},[n("a",{href:"http://0.0.0.0:9292/test1",target:"_blank",rel:"noreferrer"},"http://0.0.0.0:9292/test1")]),t(")을 요청합니다. 사용해야 할 포트 번호는 첫 번째 작업("),n("a",{href:"#change-the-default-port"},"기본 포트 변경"),t(")을 시도했는지 여부에 따라 달라집니다. 아래에 표시된 출력을 확인할 수 있습니다:")],-1),n("img",{src:z,alt:"A browser screen displaying Hello from Ktor",width:"706"},null,-1),n("p",null,"HTTP 요청 파일(HTTP Request File)을 생성했다면 그곳에서도 새 엔드포인트를 확인할 수 있습니다:",-1),n("img",{src:V,alt:"An HTTP request file in intelliJ IDEA",width:"450"},null,-1),n("p",null,"참고로, 서로 다른 요청을 구분하려면 세 개의 해시(###)를 포함하는 줄이 필요합니다.",-1)])),_:1})]),_:1})]),_:1}),u(f,{title:"정적 콘텐츠 구성",id:"configure-static-content"},{default:o(()=>[n("p",null,[u(k,null,{default:o(()=>l[266]||(l[266]=[t("프로젝트")])),_:1}),l[268]||(l[268]=t(" 도구 창에서 ")),u(d,null,{default:o(()=>l[267]||(l[267]=[t("src/main/kotlin/com/example/plugins")])),_:1}),l[269]||(l[269]=t(" 폴더로 이동하여 다음 단계를 따릅니다: "))]),u(m,null,{default:o(()=>[u(r,null,{default:o(()=>[l[270]||(l[270]=n("p",null,[n("code",null,"Routing.kt"),t(" 파일을 엽니다.")],-1)),l[271]||(l[271]=n("p",null,"다시 한번, 이것이 기본 콘텐츠여야 합니다:",-1)),u(e,{lang:"kotlin",code:`                        fun Application.configureRouting() {
                            routing {
                                get("/") {
                                    call.respondText("Hello World!")
                                }
                            }
                        }`}),l[272]||(l[272]=n("p",null,[t("이 작업을 위해서는 "),n("a",{href:"#add-a-new-http-endpoint"},"새 HTTP 엔드포인트 추가"),t("에 지정된 추가 엔드포인트에 대한 콘텐츠를 삽입했는지 여부는 중요하지 않습니다.")],-1))]),_:1}),u(r,null,{default:o(()=>[l[274]||(l[274]=n("p",null,"라우팅 섹션에 다음 줄을 추가합니다:",-1)),u(e,{lang:"kotlin",code:`                        fun Application.configureRouting() {
                            routing {
                                // Add the line below
                                staticResources("/content", "mycontent")

                                get("/") {
                                    call.respondText("Hello World!")
                                }
                            }
                        }`}),l[275]||(l[275]=n("p",null,"이 줄의 의미는 다음과 같습니다:",-1)),u(a,{type:"bullet"},{default:o(()=>l[273]||(l[273]=[n("li",null,[n("code",null,"staticResources()"),t("를 호출하면 Ktor 애플리케이션이 HTML 및 JavaScript 파일과 같은 표준 웹사이트 콘텐츠를 제공할 수 있음을 Ktor에 알립니다. 이 콘텐츠가 브라우저 내에서 실행될 수 있지만, 서버 관점에서는 정적으로 간주됩니다. ")],-1),n("li",null,[t("URL "),n("code",null,"/content"),t("는 이 콘텐츠를 가져오는 데 사용될 경로를 지정합니다. ")],-1),n("li",null,[t("경로 "),n("code",null,"mycontent"),t("는 정적 콘텐츠가 위치할 폴더의 이름입니다. Ktor는 "),n("code",null,"resources"),t(" 디렉터리 내에서 이 폴더를 찾을 것입니다. ")],-1)])),_:1})]),_:1}),u(r,null,{default:o(()=>[l[276]||(l[276]=n("p",null,"다음 임포트(import)를 추가합니다:",-1)),u(e,{lang:"kotlin",code:"                        import io.ktor.server.http.content.*"})]),_:1}),u(r,null,{default:o(()=>[n("p",null,[u(i,null,{default:o(()=>l[277]||(l[277]=[t("프로젝트")])),_:1}),l[279]||(l[279]=t(" 도구 창에서 ")),l[280]||(l[280]=n("code",null,"src/main/resources",-1)),l[281]||(l[281]=t(" 폴더를 마우스 오른쪽 버튼으로 클릭하고 ")),u(i,null,{default:o(()=>l[278]||(l[278]=[t("새로 만들기 | 디렉터리")])),_:1}),l[282]||(l[282]=t(" 를 선택합니다. "))]),n("p",null,[l[285]||(l[285]=t(" 또는 ")),l[286]||(l[286]=n("code",null,"src/main/resources",-1)),l[287]||(l[287]=t(" 폴더를 선택하고 ")),u(w,null,{default:o(()=>l[283]||(l[283]=[t("⌘Сmd+N")])),_:1}),l[288]||(l[288]=t("을 누른 다음 ")),u(i,null,{default:o(()=>l[284]||(l[284]=[t("디렉터리")])),_:1}),l[289]||(l[289]=t("를 클릭합니다. "))])]),_:1}),u(r,null,{default:o(()=>[n("p",null,[l[291]||(l[291]=t("새 디렉터리 이름을 ")),l[292]||(l[292]=n("code",null,"mycontent",-1)),l[293]||(l[293]=t("로 지정하고 ")),u(w,null,{default:o(()=>l[290]||(l[290]=[t("↩Enter")])),_:1}),l[294]||(l[294]=t("를 누릅니다. "))])]),_:1}),u(r,null,{default:o(()=>[n("p",null,[l[296]||(l[296]=t("새로 생성된 폴더를 마우스 오른쪽 버튼으로 클릭하고 ")),u(i,null,{default:o(()=>l[295]||(l[295]=[t("새로 만들기 | 파일")])),_:1}),l[297]||(l[297]=t("을 클릭합니다. "))])]),_:1}),u(r,null,{default:o(()=>[n("p",null,[l[299]||(l[299]=t('새 파일 이름을 "sample.html"로 지정하고 ')),u(w,null,{default:o(()=>l[298]||(l[298]=[t("↩Enter")])),_:1}),l[300]||(l[300]=t("를 누릅니다. "))])]),_:1}),u(r,null,{default:o(()=>[l[301]||(l[301]=n("p",null,"새로 생성된 파일 페이지에 유효한 HTML을 채웁니다(예시):",-1)),u(e,{lang:"html",code:`<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <title>My sample</title>
    </head>
    <body>
        <h1>This page is built with:</h1>
    <ol>
        <li>Ktor</li>
        <li>Kotlin</li>
        <li>HTML</li>
    </ol>
    </body>
</html>`})]),_:1}),u(r,null,{default:o(()=>l[302]||(l[302]=[n("p",null,[t("다시 실행 버튼("),n("img",{alt:"intelliJ IDEA rerun button icon",src:y,height:"16",width:"16"}),t(")을 클릭하여 애플리케이션을 다시 시작합니다.")],-1)])),_:1}),u(r,null,{default:o(()=>l[303]||(l[303]=[n("p",null,[t("브라우저에서 "),n("a",{href:"http://0.0.0.0:9292/content/sample.html"},[n("a",{href:"http://0.0.0.0:9292/content/sample.html",target:"_blank",rel:"noreferrer"},"http://0.0.0.0:9292/content/sample.html")]),t("을 열면 샘플 페이지의 내용이 표시되어야 합니다:")],-1),n("img",{src:X,alt:"Output of a static page in browser",width:"706"},null,-1)])),_:1})]),_:1})]),_:1}),u(f,{title:"통합 테스트 작성",id:"write-an-integration-test"},{default:o(()=>[n("p",null,[l[305]||(l[305]=t(" Ktor는 ")),u(s,{href:"/ktor/server-testing",summary:"특수 테스트 엔진을 사용하여 서버 애플리케이션을 테스트하는 방법을 배웁니다."},{default:o(()=>l[304]||(l[304]=[t("통합 테스트 생성")])),_:1}),l[306]||(l[306]=t("을 지원하며, 생성된 프로젝트에는 이 기능이 번들로 제공됩니다. "))]),l[318]||(l[318]=n("p",null,"이 기능을 활용하려면 아래 단계를 따르세요:",-1)),u(m,null,{default:o(()=>[u(r,null,{default:o(()=>[n("p",null,[u(d,null,{default:o(()=>l[307]||(l[307]=[t("src")])),_:1}),l[308]||(l[308]=t(' 아래에 "test"라는 새 디렉터리를 만들고 그 아래에 "kotlin"이라는 하위 디렉터리를 만듭니다. '))])]),_:1}),u(r,null,{default:o(()=>[n("p",null,[u(d,null,{default:o(()=>l[309]||(l[309]=[t("src/test/kotlin")])),_:1}),l[310]||(l[310]=t(' 안에 "com.example"이라는 새 패키지를 생성합니다. '))])]),_:1}),u(r,null,{default:o(()=>[n("p",null,[u(d,null,{default:o(()=>l[311]||(l[311]=[t("src/test/kotlin/com.example")])),_:1}),l[312]||(l[312]=t(' 안에 "ApplicationTest.kt"라는 새 파일을 생성합니다. '))])]),_:1}),u(r,null,{default:o(()=>[l[313]||(l[313]=n("p",null,[n("code",null,"ApplicationTest.kt"),t(" 파일을 열고 아래 코드를 추가합니다:")],-1)),u(e,{lang:"kotlin",code:`                        class ApplicationTest {

                            @Test
                            fun testRoot() = testApplication {
                                application {
                                    module()
                                }
                                val response = client.get("/")

                                assertEquals(HttpStatusCode.OK, response.status)
                                assertEquals("Hello World!", response.bodyAsText())
                            }
                        }`}),l[314]||(l[314]=n("p",null,[n("code",null,"testApplication()"),t(" 메서드는 Ktor의 새 인스턴스를 생성합니다. 이 인스턴스는 Netty와 같은 서버와 달리 테스트 환경에서 실행됩니다.")],-1)),l[315]||(l[315]=n("p",null,[t("그런 다음 "),n("code",null,"application()"),t(" 메서드를 사용하여 "),n("code",null,"embeddedServer()"),t("에서 호출되는 것과 동일한 설정을 호출할 수 있습니다.")],-1)),l[316]||(l[316]=n("p",null,[t("마지막으로, 내장된 "),n("code",null,"client"),t(" 객체와 JUnit 어설션(assertions)을 사용하여 샘플 요청을 보내고 응답을 확인할 수 있습니다.")],-1))]),_:1}),u(r,null,{default:o(()=>[l[317]||(l[317]=n("p",null,"다음 필수 임포트(imports)를 추가합니다:",-1)),u(e,{lang:"kotlin",code:`                        import io.ktor.client.request.*
                        import io.ktor.client.statement.*
                        import io.ktor.http.*
                        import io.ktor.server.testing.*
                        import org.junit.Assert.assertEquals
                        import org.junit.Test`})]),_:1})]),_:1}),l[319]||(l[319]=n("p",null," 테스트는 IntelliJ IDEA에서 테스트를 실행하는 모든 표준 방식으로 실행할 수 있습니다. Ktor의 새 인스턴스를 실행하고 있으므로 테스트의 성공 또는 실패는 애플리케이션이 0.0.0.0에서 실행 중인지 여부에 따라 달라지지 않습니다. ",-1)),l[320]||(l[320]=n("p",null,[n("a",{href:"#add-a-new-http-endpoint"},"새 HTTP 엔드포인트 추가"),t("를 성공적으로 완료했다면 다음 추가 테스트를 추가할 수 있습니다: ")],-1)),u(e,{lang:"Kotlin",code:`                @Test
                fun testNewEndpoint() = testApplication {
                    application {
                        module()
                    }

                    val response = client.get("/test1")

                    assertEquals(HttpStatusCode.OK, response.status)
                    assertEquals("html", response.contentType()?.contentSubtype)
                    assertContains(response.bodyAsText(), "Hello From Ktor")
                }`}),l[321]||(l[321]=n("p",null,"다음 추가 임포트(import)가 필요합니다:",-1)),u(e,{lang:"Kotlin",code:"                import kotlin.test.assertContains"})]),_:1}),u(f,{title:"오류 핸들러 등록",id:"register-error-handlers"},{default:o(()=>[n("p",null,[l[323]||(l[323]=t(" Ktor 애플리케이션에서 오류를 처리하려면 ")),u(s,{href:"/ktor/server-status-pages",summary:"%plugin_name%는 Ktor 애플리케이션이 발생한 예외 또는 상태 코드에 따라 모든 실패 상태에 적절하게 응답할 수 있도록 합니다."},{default:o(()=>l[322]||(l[322]=[t("StatusPages 플러그인")])),_:1}),l[324]||(l[324]=t("을 사용할 수 있습니다. "))]),n("p",null,[l[326]||(l[326]=t(" 이 플러그인은 기본적으로 프로젝트에 포함되어 있지 않습니다. Ktor 프로젝트 생성기의 ")),u(k,null,{default:o(()=>l[325]||(l[325]=[t("플러그인")])),_:1}),l[327]||(l[327]=t(" 섹션 또는 IntelliJ IDEA의 프로젝트 마법사를 통해 프로젝트에 추가할 수 있습니다. 이미 프로젝트를 생성했으므로, 다음 단계에서는 플러그인을 수동으로 추가하고 구성하는 방법을 배울 것입니다. "))]),l[346]||(l[346]=n("p",null," 이를 달성하기 위한 네 가지 단계가 있습니다: ",-1)),u(a,{type:"decimal"},{default:o(()=>l[328]||(l[328]=[n("li",null,[n("a",{href:"#add-dependency"},"Gradle 빌드 파일에 새 종속성 추가.")],-1),n("li",null,[n("a",{href:"#install-plugin-and-specify-handler"},"플러그인 설치 및 예외 핸들러 지정.")],-1),n("li",null,[n("a",{href:"#write-sample-code"},"핸들러를 트리거할 샘플 코드 작성.")],-1),n("li",null,[n("a",{href:"#restart-and-invoke"},"샘플 코드 다시 시작 및 호출.")],-1)])),_:1}),u(m,{title:"새 종속성 추가",id:"add-dependency"},{default:o(()=>[n("p",null,[u(i,null,{default:o(()=>l[329]||(l[329]=[t("프로젝트")])),_:1}),l[330]||(l[330]=t(" 도구 창에서 프로젝트 루트 폴더로 이동하여 다음 단계를 따릅니다: "))]),u(r,null,{default:o(()=>l[331]||(l[331]=[n("p",null,[n("code",null,"build.gradle.kts"),t(" 파일을 엽니다.")],-1)])),_:1}),u(r,null,{default:o(()=>[l[332]||(l[332]=n("p",null,"종속성 섹션에 아래와 같이 추가 종속성을 추가합니다:",-1)),u(e,{lang:"kotlin",code:`                        dependencies {
                            // The new dependency to be added
                            implementation("io.ktor:ktor-server-status-pages:$ktor_version")
                            // The existing dependencies
                            implementation("io.ktor:ktor-server-core-jvm:$ktor_version")
                            implementation("io.ktor:ktor-server-netty-jvm:$ktor_version")
                            implementation("ch.qos.logback:logback-classic:$logback_version")
                            testImplementation("io.ktor:ktor-server-test-host-jvm:$ktor_version")
                            testImplementation("org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version")
                        }`}),l[333]||(l[333]=n("p",null,"이 작업을 완료하면 이 새 종속성을 적용하기 위해 프로젝트를 다시 로드해야 합니다.",-1))]),_:1}),u(r,null,{default:o(()=>[n("p",null,[l[336]||(l[336]=t("macOS에서는 ")),u(w,null,{default:o(()=>l[334]||(l[334]=[t("Shift+⌘Cmd+I")])),_:1}),l[337]||(l[337]=t(", Windows에서는 ")),u(w,null,{default:o(()=>l[335]||(l[335]=[t("Ctrl+Shift+O")])),_:1}),l[338]||(l[338]=t("를 눌러 프로젝트를 다시 로드합니다. "))])]),_:1})]),_:1}),u(m,{title:"플러그인 설치 및 예외 핸들러 지정",id:"install-plugin-and-specify-handler"},{default:o(()=>[u(r,null,{default:o(()=>[l[339]||(l[339]=n("p",null,[n("code",null,"Routing.kt"),t(" 파일의 "),n("code",null,"configureRouting()"),t(" 메서드로 이동하여 다음 코드 줄을 추가합니다:")],-1)),u(e,{lang:"kotlin",code:`fun Application.configureRouting() {
    install(StatusPages) {
        exception<IllegalStateException> { call, cause ->
            call.respondText("App in illegal state as \${cause.message}")
        }
    }
    routing {
        get("/") {
            call.respondText("Hello World!")
        }
    }
}`}),l[340]||(l[340]=n("p",null,[t("이 줄들은 "),n("code",null,"StatusPages"),t(" 플러그인을 설치하고 "),n("code",null,"IllegalStateException"),t(" 유형의 예외가 발생했을 때 취할 동작을 지정합니다.")],-1))]),_:1}),u(r,null,{default:o(()=>[l[341]||(l[341]=n("p",null,"다음 임포트(import)를 추가합니다:",-1)),u(e,{lang:"kotlin",code:"                        import io.ktor.server.plugins.statuspages.*"})]),_:1})]),_:1}),l[347]||(l[347]=n("p",null," HTTP 오류 코드는 일반적으로 응답에 설정되지만, 이 작업의 목적을 위해 출력은 브라우저에 직접 표시됩니다. ",-1)),u(m,{title:"핸들러를 트리거할 샘플 코드 작성",id:"write-sample-code"},{default:o(()=>[u(r,null,{default:o(()=>[l[342]||(l[342]=n("p",null,[n("code",null,"configureRouting()"),t(" 메서드 내에 다음 추가 줄을 아래와 같이 추가합니다:")],-1)),u(e,{lang:"kotlin",code:`fun Application.configureRouting() {
    install(StatusPages) {
        exception<IllegalStateException> { call, cause ->
            call.respondText("App in illegal state as \${cause.message}")
        }
    }
    routing {
        get("/") {
            call.respondText("Hello World!")
        }
        get("/error-test") {
            throw IllegalStateException("Too Busy")
        }
    }
}`}),l[343]||(l[343]=n("p",null,[t("이제 URL "),n("code",null,"/error-test"),t("를 가진 엔드포인트를 추가했습니다. 이 엔드포인트가 트리거되면 핸들러에 사용된 유형의 예외가 발생할 것입니다.")],-1))]),_:1})]),_:1}),u(m,{title:"샘플 코드 다시 시작 및 호출",id:"restart-and-invoke"},{default:o(()=>[u(r,null,{default:o(()=>l[344]||(l[344]=[n("p",null,[t("다시 실행 버튼("),n("img",{alt:"intelliJ IDEA rerun button icon",src:y,height:"16",width:"16"}),t(")을 클릭하여 애플리케이션을 다시 시작합니다.")],-1)])),_:1}),u(r,null,{default:o(()=>l[345]||(l[345]=[n("p",null,[t("브라우저에서 URL "),n("a",{href:"http://0.0.0.0:9292/error-test"},[n("a",{href:"http://0.0.0.0:9292/error-test",target:"_blank",rel:"noreferrer"},"http://0.0.0.0:9292/error-test")]),t("로 이동합니다. 아래와 같이 오류 메시지가 표시되어야 합니다:")],-1),n("img",{src:Z,alt:"A browser screen with message `App in illegal state as Too Busy`",width:"706"},null,-1)])),_:1})]),_:1})]),_:1})]),_:1}),u(f,{title:"다음 단계",id:"next_steps"},{default:o(()=>[l[354]||(l[354]=n("p",null," 추가 작업의 끝까지 완료했다면, 이제 Ktor 서버 구성, Ktor 플러그인 통합, 새 경로 구현에 대한 이해를 갖추게 됩니다. 그러나 이것은 시작에 불과합니다. Ktor의 기본 개념을 더 깊이 탐구하려면 이 가이드의 다음 튜토리얼을 계속 진행하세요. ",-1)),n("p",null,[l[352]||(l[352]=t(" 다음으로, ")),u(s,{href:"/ktor/server-requests-and-responses",summary:"작업 관리자 애플리케이션을 구축하여 Ktor와 함께 Kotlin에서 라우팅, 요청 처리 및 매개변수의 기본 사항을 배웁니다."},{default:o(()=>l[351]||(l[351]=[t("작업 관리자 애플리케이션을 생성하여 요청을 처리하고 응답을 생성하는")])),_:1}),l[353]||(l[353]=t(" 방법을 배우게 됩니다. "))])]),_:1})]),_:1})])}const gl=_(ll,[["render",tl]]);export{ml as __pageData,gl as default};
