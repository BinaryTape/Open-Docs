import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.Bksy39di.js";const g=JSON.parse('{"title":"AndroidX Paging","description":"","frontmatter":{},"headers":[],"relativePath":"ja/sqldelight/js_sqlite/androidx_paging.md","filePath":"ja/sqldelight/js_sqlite/androidx_paging.md","lastUpdated":1748435462000}'),l={name:"ja/sqldelight/js_sqlite/androidx_paging.md"};function t(h,s,p,k,d,r){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="androidx-paging" tabindex="-1">AndroidX Paging <a class="header-anchor" href="#androidx-paging" aria-label="Permalink to &quot;AndroidX Paging&quot;">​</a></h1><p>SQLDelightを<a href="https://developer.android.com/topic/libraries/architecture/paging/v3-overview" target="_blank" rel="noreferrer">AndroidのPaging 3ライブラリ</a>と連携して使用するには、ページング拡張アーティファクトへの依存関係を追加します。 AndroidX Pagingのマルチプラットフォーム対応は、<a href="https://github.com/cashapp/multiplatform-paging" target="_blank" rel="noreferrer">Multiplatform Paging</a>を介して提供されます。</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-HnyZO" id="tab-fiMDTwT" checked><label data-title="Kotlin" for="tab-fiMDTwT">Kotlin</label><input type="radio" name="group-HnyZO" id="tab-kYOIvGW"><label data-title="Groovy" for="tab-kYOIvGW">Groovy</label></div><div class="blocks"><div class="language-kotlin vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  sourceSets.commonMain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;app.cash.sqldelight:androidx-paging3-extensions:2.1.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kotlin {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  sourceSets</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">commonMain</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dependencies {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    implementation </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;app.cash.sqldelight:androidx-paging3-extensions:2.1.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></div></div><p>SQLDelightは、オフセットベースのページングとキーセットページングという2つのデータページング方法を提供します。</p><h2 id="オフセットベースのページング" tabindex="-1">オフセットベースのページング <a class="header-anchor" href="#オフセットベースのページング" aria-label="Permalink to &quot;オフセットベースのページング&quot;">​</a></h2><p>オフセットページングは、<code>OFFSET</code>句と<code>LIMIT</code>句を使用してページングされた結果を実現します。オフセットベースのページングを実行する<code>PagingSource</code>を作成するには、カウントクエリとページングされるクエリの両方が必要です。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">countPlayers:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hockeyPlayer;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">players:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hockeyPlayer</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">LIMIT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> :</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">limit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> OFFSET :offset;</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> app.cash.sqldelight.android.paging3.QueryPagingSource</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pagingSource: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PagingSource</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> QueryPagingSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  countQuery </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> playerQueries.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">countPlayers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  transacter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> playerQueries,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Dispatchers.IO,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  queryProvider </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> playerQueries::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">players</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>デフォルトでは、コンテキストが指定されていない場合、クエリは<code>Dispatchers.IO</code>で実行されます。RxJavaの<code>Scheduler</code>を使用してクエリを実行することを想定しているコンシューマは、<a href="https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-rx2/kotlinx.coroutines.rx2/io.reactivex.-scheduler/as-coroutine-dispatcher.html" target="_blank" rel="noreferrer"><code>Scheduler.asCoroutineDispatcher</code></a>拡張関数を使用すべきです。</p><h2 id="キーセットページング" tabindex="-1">キーセットページング <a class="header-anchor" href="#キーセットページング" aria-label="Permalink to &quot;キーセットページング&quot;">​</a></h2><p>オフセットページングはシンプルで保守が容易です。残念ながら、大規模なデータセットではパフォーマンスが低下します。SQLステートメントの<code>OFFSET</code>句は、実際にはSQLクエリですでに実行された行を単に破棄するだけです。したがって、<code>OFFSET</code>の数値が増加するにつれて、クエリの実行にかかる時間も増加します。これを克服するために、SQLDelightは<code>PagingSource</code>の「キーセットページング」実装を提供します。データセット全体をクエリし、最初の<code>OFFSET</code>要素を非効率的に破棄するのではなく、キーセットページングは一意の列を使用してクエリの境界を制限します。これは、開発者のメンテナンスコストが高くなるという犠牲を払って、より優れたパフォーマンスを発揮します。</p><p>このページングソースが受け入れる<code>queryProvider</code>コールバックは、<code>beginInclusive</code>というnull非許容の一意な<code>Key</code>と、<code>endExclusive</code>というnull許容の一意な<code>Key?</code>という2つのパラメータを持っています。コアページングクエリの例を以下に示します。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">keyedQuery:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hockeyPlayer</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> :beginInclusive </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AND</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> :endExclusive </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">OR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> :endExclusive </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">IS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ORDER BY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ASC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>キーセットページングで使用されるクエリは、上記のように一意の順序付けを持つ必要があります。</p><p><code>beginInclusive</code>と<code>endExclusive</code>は、ページ境界として機能する_事前に計算された_キーです。ページ境界を事前に計算するときにページサイズが設定されます。<code>pageBoundariesProvider</code>コールバックは、<code>anchor: Key?</code>パラメータと<code>limit: Int?</code>パラメータを受け取ります。ページ境界を事前に計算するクエリの例を以下に示します。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pageBoundaries:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  SELECT</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    id,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    CASE</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      WHEN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ((</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">row_number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">OVER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ORDER BY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ASC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) % :</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">limit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> THEN</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      WHEN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> :anchor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">THEN</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      ELSE</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    END</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> page_boundary;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hockeyPlayer</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  ORDER BY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ASC</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> page_boundary </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>SQLクエリのページ境界を事前に計算するには、<a href="https://www.sqlite.org/windowfunctions.html" target="_blank" rel="noreferrer">SQLite Window Functions</a>が必要となる可能性が高いです。ウィンドウ関数はSQLiteバージョン3.25.0で導入されたため、Android API 30まではデフォルトでは利用できません。キーセットページングを使用するには、SQLDelightは<code>minApi 30</code>を設定するか、独自のSQLiteバージョンをバンドルすることを推奨します。Requery組織は、スタンドアロンライブラリとしてSQLiteの<a href="https://github.com/requery/sqlite-android" target="_blank" rel="noreferrer">最新ディストリビューション</a>を提供しています。</p><p>AndroidX pagingライブラリでは、<code>PagingConfig.initialLoadSize</code>を使用して、最初のページフェッチのサイズを以降のページフェッチと異なるように設定できます。<code>pageBoundariesProvider</code>コールバックは最初のページフェッチ時に一度だけ呼び出されるため、<strong>この機能は避けるべきです</strong>。<code>PagingConfig.initialLoadSize</code>と<code>PagingConfig.pageSize</code>が一致しない場合、予期せぬページ境界の生成につながります。</p><p>このページングソースはジャンプを_サポートしていません_。</p><p>このページングソースを作成するには、<code>QueryPagingSource</code>ファクトリ関数を使用します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> app.cash.sqldelight.android.paging3.QueryPagingSource</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> keyedSource </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> QueryPagingSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  transacter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> playerQueries,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Dispatchers.IO,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  pageBoundariesProvider </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> playerQueries::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pageBoundaries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  queryProvider </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> playerQueries::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">keyedQuery</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>デフォルトでは、コンテキストが指定されていない場合、クエリは<code>Dispatchers.IO</code>で実行されます。RxJavaの<code>Scheduler</code>を使用してクエリを実行することを想定しているコンシューマは、<a href="https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-rx2/kotlinx.coroutines.rx2/io.reactivex.-scheduler/as-coroutine-dispatcher.html" target="_blank" rel="noreferrer"><code>Scheduler.asCoroutineDispatcher</code></a>拡張関数を使用すべきです。</p>`,22)]))}const o=i(l,[["render",t]]);export{g as __pageData,o as default};
