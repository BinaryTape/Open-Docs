import{_ as c,C as e,c as E,o as u,j as i,G as a,ag as r,a as t,w as n}from"./chunks/framework.Bksy39di.js";const q=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ko/ktor/server-basic-auth.md","filePath":"ko/ktor/server-basic-auth.md","lastUpdated":1755457140000}'),g={name:"ko/ktor/server-basic-auth.md"};function y(F,s,b,v,m,f){const p=e("show-structure"),o=e("Links"),k=e("tldr"),l=e("code-block"),h=e("TabItem"),d=e("Tabs");return u(),E("div",null,[s[5]||(s[5]=i("h1",{id:"ktor-서버의-기본-인증",tabindex:"-1"},[t("Ktor 서버의 기본 인증 "),i("a",{class:"header-anchor",href:"#ktor-서버의-기본-인증","aria-label":'Permalink to "Ktor 서버의 기본 인증"'},"​")],-1)),a(p,{for:"chapter",depth:"2"}),a(k,null,{default:n(()=>[s[3]||(s[3]=i("p",null,[i("b",null,"필수 의존성"),t(": "),i("code",null,"io.ktor:ktor-server-auth")],-1)),s[4]||(s[4]=i("p",null,[i("b",null,"코드 예시"),t(": "),i("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/auth-basic"},"auth-basic"),t(", "),i("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/auth-basic-hash-table"},"auth-basic-hash-table")],-1)),i("p",null,[i("b",null,[a(o,{href:"/ktor/server-native",summary:"Ktor는 Kotlin/Native를 지원하며 추가 런타임이나 가상 머신 없이 서버를 실행할 수 있게 해줍니다."},{default:n(()=>s[0]||(s[0]=[t("네이티브 서버")])),_:1}),s[1]||(s[1]=t(" 지원"))]),s[2]||(s[2]=t(": ✅ "))])]),_:1}),s[6]||(s[6]=r('<p>기본 인증 스키마는 접근 제어 및 인증에 사용되는 <a href="https://developer.mozilla.org/en-US/Web/HTTP/Authentication" target="_blank" rel="noreferrer">HTTP 프레임워크</a>의 일부입니다. 이 스키마에서는 사용자 자격 증명(credentials)이 Base64로 인코딩된 사용자 이름/비밀번호 쌍으로 전송됩니다.</p><p>Ktor를 사용하면 사용자 로그인 및 특정 <a href="./server-routing">경로</a> 보호를 위해 기본 인증을 사용할 수 있습니다. Ktor의 인증에 대한 일반적인 정보는 <a href="./server-auth">Ktor 서버의 인증 및 권한 부여</a> 섹션에서 얻을 수 있습니다.</p><blockquote><p>기본 인증은 사용자 이름과 비밀번호를 평문(clear text)으로 전송하므로 민감한 정보를 보호하기 위해 <a href="./server-ssl">HTTPS/TLS</a>를 사용해야 합니다.</p></blockquote><h2 id="add_dependencies" tabindex="-1">의존성 추가 <a class="header-anchor" href="#add_dependencies" aria-label="Permalink to &quot;의존성 추가 {id=&quot;add_dependencies&quot;}&quot;">​</a></h2><p><code>basic</code> 인증을 활성화하려면 빌드 스크립트에 <code>ktor-server-auth</code> 아티팩트를 포함해야 합니다:</p>',5)),a(d,{group:"languages"},{default:n(()=>[a(h,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[a(l,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-server-auth:$ktor_version")'})]),_:1}),a(h,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[a(l,{lang:"Groovy",code:'            implementation "io.ktor:ktor-server-auth:$ktor_version"'})]),_:1}),a(h,{title:"Maven","group-key":"maven"},{default:n(()=>[a(l,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-server-auth-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),s[7]||(s[7]=r(`<h2 id="flow" tabindex="-1">기본 인증 흐름 <a class="header-anchor" href="#flow" aria-label="Permalink to &quot;기본 인증 흐름 {id=&quot;flow&quot;}&quot;">​</a></h2><p>기본 인증 흐름은 다음과 같습니다:</p><ol><li>클라이언트가 서버 애플리케이션의 특정 <a href="./server-routing">경로</a>로 <code>Authorization</code> 헤더 없이 요청을 보냅니다.</li><li>서버는 클라이언트에게 <code>401</code> (Unauthorized) 응답 상태로 응답하고, <code>WWW-Authenticate</code> 응답 헤더를 사용하여 해당 경로를 보호하는 데 기본 인증 스키마가 사용되었음을 알립니다. 일반적인 <code>WWW-Authenticate</code> 헤더는 다음과 같습니다:</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>WWW-Authenticate: Basic realm=&quot;Access to the &#39;/&#39; path&quot;, charset=&quot;UTF-8&quot;</span></span></code></pre></div><p>Ktor에서는 <code>basic</code> 인증 공급자(provider)를 <a href="#configure-provider">구성</a>할 때 해당 속성을 사용하여 realm과 charset을 지정할 수 있습니다.</p><ol start="3"><li>일반적으로 클라이언트는 사용자가 자격 증명을 입력할 수 있는 로그인 대화 상자를 표시합니다. 그런 다음 클라이언트는 Base64로 인코딩된 사용자 이름과 비밀번호 쌍을 포함하는 <code>Authorization</code> 헤더를 사용하여 요청을 보냅니다. 예를 들면 다음과 같습니다:</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Authorization: Basic amV0YnJhaW5zOmZvb2Jhcg</span></span></code></pre></div><ol start="4"><li>서버는 클라이언트가 보낸 자격 증명을 <a href="#configure-provider">검증</a>하고 요청된 콘텐츠로 응답합니다.</li></ol><h2 id="install" tabindex="-1">기본 인증 설치 <a class="header-anchor" href="#install" aria-label="Permalink to &quot;기본 인증 설치 {id=&quot;install&quot;}&quot;">​</a></h2><p><code>basic</code> 인증 공급자(provider)를 설치하려면 <code>install</code> 블록 내에서 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/basic.html" target="_blank" rel="noreferrer">basic</a> 함수를 호출합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.application.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.auth.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Authentication) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    basic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Configure basic authentication</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>선택적으로 <a href="#authenticate-route">지정된 경로를 인증</a>하는 데 사용할 수 있는 <a href="./server-auth#provider-name">공급자 이름</a>을 지정할 수 있습니다.</p><h2 id="configure" tabindex="-1">기본 인증 구성 <a class="header-anchor" href="#configure" aria-label="Permalink to &quot;기본 인증 구성 {id=&quot;configure&quot;}&quot;">​</a></h2><p>Ktor에서 다양한 인증 공급자(provider)를 구성하는 방법에 대한 일반적인 아이디어를 얻으려면 <a href="./server-auth#configure">인증 구성</a>을 참조하세요. 이 섹션에서는 <code>basic</code> 인증 공급자의 특정 구성에 대해 살펴보겠습니다.</p><h3 id="configure-provider" tabindex="-1">1단계: 기본 공급자 구성 <a class="header-anchor" href="#configure-provider" aria-label="Permalink to &quot;1단계: 기본 공급자 구성 {id=&quot;configure-provider&quot;}&quot;">​</a></h3><p><code>basic</code> 인증 공급자(provider)는 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-basic-authentication-provider/-config/index.html" target="_blank" rel="noreferrer">BasicAuthenticationProvider.Configuration</a> 클래스를 통해 설정을 노출합니다. 아래 예시에서는 다음 설정이 지정되어 있습니다:</p><ul><li><code>realm</code> 속성은 <code>WWW-Authenticate</code> 헤더에 전달될 realm을 설정합니다.</li><li><code>validate</code> 함수는 사용자 이름과 비밀번호를 검증합니다.</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Authentication) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    basic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-basic&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        realm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Access to the &#39;/&#39; path&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        validate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { credentials </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (credentials.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;jetbrains&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> credentials.password </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;foobar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                UserIdPrincipal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(credentials.name)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>validate</code> 함수는 <code>UserPasswordCredential</code>을 확인하고 인증에 성공하면 <code>UserIdPrincipal</code>을 반환하며, 인증에 실패하면 <code>null</code>을 반환합니다.</p><blockquote><p>사용자 이름과 비밀번호 해시를 보관하는 인메모리 테이블에 저장된 사용자를 검증하기 위해 <a href="#validate-user-hash">UserHashedTableAuth</a>를 사용할 수도 있습니다.</p></blockquote><h3 id="authenticate-route" tabindex="-1">2단계: 특정 리소스 보호 <a class="header-anchor" href="#authenticate-route" aria-label="Permalink to &quot;2단계: 특정 리소스 보호 {id=&quot;authenticate-route&quot;}&quot;">​</a></h3><p><code>basic</code> 공급자(provider)를 구성한 후, <strong><a href="./server-auth#authenticate-route">authenticate</a></strong> 함수를 사용하여 애플리케이션의 특정 리소스를 보호할 수 있습니다. 인증에 성공한 경우, 라우트 핸들러 내에서 <code>call.principal</code> 함수를 사용하여 인증된 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-user-id-principal/index.html" target="_blank" rel="noreferrer">UserIdPrincipal</a>을 검색하고 인증된 사용자의 이름을 얻을 수 있습니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    authenticate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-basic&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, \${call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">principal</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserIdPrincipal</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&gt;()?.name}!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="validate-user-hash" tabindex="-1">UserHashedTableAuth로 검증하기 <a class="header-anchor" href="#validate-user-hash" aria-label="Permalink to &quot;UserHashedTableAuth로 검증하기 {id=&quot;validate-user-hash&quot;}&quot;">​</a></h2><p>Ktor를 사용하면 사용자 이름과 비밀번호 해시를 보관하는 인메모리 테이블에 저장된 사용자를 <a href="#configure-provider">검증</a>하기 위해 <a href="#validate-user-hash">UserHashedTableAuth</a>를 사용할 수 있습니다. 이를 통해 데이터 소스가 유출되더라도 사용자 비밀번호가 손상되지 않도록 할 수 있습니다.</p><p><code>UserHashedTableAuth</code>를 사용하여 사용자를 검증하려면 다음 단계를 따르세요:</p><ol><li><a href="https://api.ktor.io/ktor-utils/io.ktor.util/get-digest-function.html" target="_blank" rel="noreferrer">getDigestFunction</a> 함수를 사용하여 지정된 알고리즘과 솔트 공급자(salt provider)로 다이제스트 함수를 생성합니다:</li></ol><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> digestFunction </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getDigestFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;SHA-256&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ktor\${it.length}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div><ol start="2"><li><code>UserHashedTableAuth</code>의 새 인스턴스를 초기화하고 다음 속성을 지정합니다:</li></ol><ul><li><code>table</code> 속성을 사용하여 사용자 이름과 해시된 비밀번호 테이블을 제공합니다.</li><li><code>digester</code> 속성에 다이제스트 함수를 할당합니다.</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hashedUserTable </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserHashedTableAuth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    table </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mapOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;jetbrains&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> to </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">digestFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;foobar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;admin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> to </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">digestFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;password&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    digester </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> digestFunction</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><ol start="3"><li><code>validate</code> 함수 내부에서 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-user-hashed-table-auth/authenticate.html" target="_blank" rel="noreferrer">UserHashedTableAuth.authenticate</a> 함수를 호출하여 사용자를 인증하고, 자격 증명이 유효하면 <code>UserIdPrincipal</code> 인스턴스를 반환합니다:</li></ol><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Authentication) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    basic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-basic-hashed&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        realm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Access to the &#39;/&#39; path&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        validate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { credentials </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            hashedUserTable.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">authenticate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(credentials)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,33))])}const A=c(g,[["render",y]]);export{q as __pageData,A as default};
