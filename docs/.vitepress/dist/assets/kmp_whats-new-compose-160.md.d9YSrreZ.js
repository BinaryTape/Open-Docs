import{_ as s,a,b as e,c as l}from"./chunks/compose-swingpanel-overlapping.BiVO7k80.js";import{_ as t,c as n,o,ag as p}from"./chunks/framework.Bksy39di.js";const y=JSON.parse('{"title":"Compose Multiplatform 1.6.0 中的新特性","description":"","frontmatter":{},"headers":[],"relativePath":"kmp/whats-new-compose-160.md","filePath":"kmp/whats-new-compose-160.md","lastUpdated":1755516278000}'),r={name:"kmp/whats-new-compose-160.md"};function h(k,i,d,c,E,g){return o(),n("div",null,i[0]||(i[0]=[p(`<h1 id="compose-multiplatform-1-6-0-中的新特性" tabindex="-1">Compose Multiplatform 1.6.0 中的新特性 <a class="header-anchor" href="#compose-multiplatform-1-6-0-中的新特性" aria-label="Permalink to &quot;Compose Multiplatform 1.6.0 中的新特性&quot;">​</a></h1><p>以下是 Compose Multiplatform 1.6.0 版本的亮点：</p><ul><li><a href="#breaking-changes">破坏性变更</a></li><li><a href="#improved-resources-api-all-platforms">全新改进的 Resources API</a></li><li><a href="#accessibility-support">对 iOS 辅助功能的基础支持</a></li><li><a href="#ui-testing-api-experimental-all-platforms">适用于所有平台的 UI 测试 API</a></li><li><a href="#separate-platform-views-for-popups-dialogs-and-dropdowns-ios-desktop">为弹窗、对话框和下拉菜单提供独立的平台视图</a>。</li><li><a href="#changes-from-jetpack-compose-and-material-3-all-platforms">Jetpack Compose 和 Material 3 的合并变更</a></li><li><a href="#kotlin-wasm-artifacts-available-in-stable-versions-of-the-framework">稳定版本中提供 Kotlin/Wasm artifact</a></li><li><a href="#known-issues-missing-dependencies">已知问题：缺失的依赖项</a></li></ul><h2 id="依赖项" tabindex="-1">依赖项 <a class="header-anchor" href="#依赖项" aria-label="Permalink to &quot;依赖项&quot;">​</a></h2><p>此版本的 Compose Multiplatform 基于以下 Jetpack Compose 库：</p><ul><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-compiler#1.5.8" target="_blank" rel="noreferrer">Compiler 1.5.8</a></li><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-runtime#1.6.1" target="_blank" rel="noreferrer">Runtime 1.6.1</a></li><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-ui#1.6.1" target="_blank" rel="noreferrer">UI 1.6.1</a></li><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-foundation#1.6.1" target="_blank" rel="noreferrer">Foundation 1.6.1</a></li><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-material#1.6.1" target="_blank" rel="noreferrer">Material 1.6.1</a></li><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-material3#1.2.0" target="_blank" rel="noreferrer">Material3 1.2.0</a></li></ul><h2 id="破坏性变更" tabindex="-1">破坏性变更 <a class="header-anchor" href="#破坏性变更" aria-label="Permalink to &quot;破坏性变更&quot;">​</a></h2><h3 id="默认裁剪设置了行高的文本内边距" tabindex="-1">默认裁剪设置了行高的文本内边距 <a class="header-anchor" href="#默认裁剪设置了行高的文本内边距" aria-label="Permalink to &quot;默认裁剪设置了行高的文本内边距&quot;">​</a></h3><p>随着对 <a href="https://developer.android.com/reference/kotlin/androidx/compose/ui/text/style/LineHeightStyle.Trim" target="_blank" rel="noreferrer">LineHeightStyle.Trim</a> 的新增支持，Compose Multiplatform 在文本内边距裁剪方式上与 Android 保持一致。关于详情，请参见<a href="https://github.com/JetBrains/compose-multiplatform-core/pull/897" target="_blank" rel="noreferrer">此拉取请求</a>。</p><p>这与 <a href="https://developer.android.com/jetpack/androidx/releases/compose-material#1.6.0-alpha01" target="_blank" rel="noreferrer">1.6.0-alpha01 版本</a> 中 <code>compose.material</code> 的变更保持一致：</p><ul><li>Android 上 <code>includeFontPadding</code> 参数默认变为 <code>false</code>。关于此变更的更深入理解，请参见<a href="https://github.com/JetBrains/compose-multiplatform/issues/2477#issuecomment-1825716543" target="_blank" rel="noreferrer">有关不在 Compose Multiplatform 中实现此标志的讨论</a>。</li><li>默认行高样式已更改为 <code>Trim.None</code> 和 <code>Alignment.Center</code>。Compose Multiplatform 现在支持 <code>LineHeightStyle.Trim</code> 并将 <code>Trim.None</code> 作为默认值实现。</li><li>已将显式 <code>lineHeight</code> 添加到 <code>Typography</code> 的 <code>TextStyle</code> 中，这导致了<a href="#using-fontsize-in-materialtheme-requires-lineheight">下一个破坏性变更</a>。</li></ul><h3 id="在-materialtheme-中使用-fontsize-需要-lineheight" tabindex="-1">在 MaterialTheme 中使用 fontSize 需要 lineHeight <a class="header-anchor" href="#在-materialtheme-中使用-fontsize-需要-lineheight" aria-label="Permalink to &quot;在 MaterialTheme 中使用 fontSize 需要 lineHeight&quot;">​</a></h3><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>这仅影响 <code>material</code> 组件。<code>material3</code> 已有此限制。</p></div><p>如果您在 <code>MaterialTheme</code> 中为 <code>Text</code> 组件设置了 <code>fontSize</code> 属性但未包含 <code>lineHeight</code>，则实际行高将不会被修改以匹配字体。现在，每次设置对应的 <code>fontSize</code> 时，您都必须显式指定 <code>lineHeight</code> 属性。</p><p>Jetpack Compose 现在<a href="https://issuetracker.google.com/issues/321872412" target="_blank" rel="noreferrer">建议</a>不要直接设置字体大小：</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>为支持非标准文本大小，我们鼓励用户遵循 Material 设计系统并使用不同的<a href="https://m2.material.io/design/typography/the-type-system.html#type-scale" target="_blank" rel="noreferrer">类型比例</a>，而不是直接更改字体大小。或者，用户可以像这样覆盖行高：<code>style = LocalTextStyle.current.copy(lineHeight = TextUnit.Unspecified)</code>，或完全创建自定义的 <code>Typography</code>。</p></div><h3 id="资源组织的新方法" tabindex="-1">资源组织的新方法 <a class="header-anchor" href="#资源组织的新方法" aria-label="Permalink to &quot;资源组织的新方法&quot;">​</a></h3><p>如果您一直在使用 Compose Multiplatform 1.6.0 预览版中的 resources API，请熟悉<a href="./compose-multiplatform-resources">当前版本的文档</a>：1.6.0-beta01 更改了资源文件应如何存储在项目文件夹中以供项目代码使用的方式。</p><h2 id="跨平台" tabindex="-1">跨平台 <a class="header-anchor" href="#跨平台" aria-label="Permalink to &quot;跨平台&quot;">​</a></h2><h3 id="改进的-resources-api-所有平台" tabindex="-1">改进的 resources API（所有平台） <a class="header-anchor" href="#改进的-resources-api-所有平台" aria-label="Permalink to &quot;改进的 resources API（所有平台）&quot;">​</a></h3><p>这个新的实验性的 API 新增了对字符串和字体的支持，并允许您更方便地在通用 Kotlin 中共享和访问资源：</p><ul><li>资源可以根据为其设计的特定设置或约束进行组织，支持： <ul><li>区域设置</li><li>图像分辨率</li><li>深色和浅色主题</li></ul></li><li>Compose Multiplatform 现在为每个项目生成一个 <code>Res</code> 对象，以提供直接的资源访问。</li></ul><p>要深入了解资源限定符以及新 resources API 的更深入概述，请参见<a href="./compose-multiplatform-resources">图像和资源</a>。</p><h3 id="ui-测试-api-实验性的-所有平台" tabindex="-1">UI 测试 API（实验性的，所有平台） <a class="header-anchor" href="#ui-测试-api-实验性的-所有平台" aria-label="Permalink to &quot;UI 测试 API（实验性的，所有平台）&quot;">​</a></h3><p>用于 Compose Multiplatform UI 测试的实验性的 API 已适用于桌面和 Android，现在支持所有平台。您可以编写并运行通用测试，以验证您的应用程序 UI 在框架支持的所有平台上的行为。该 API 使用与 Jetpack Compose 相同的查找器、断言、操作和匹配器。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>基于 JUnit 的测试仅在桌面项目中受支持。</p></div><p>关于设置说明和测试示例，请参见<a href="./compose-test">测试 Compose Multiplatform UI</a>。</p><h3 id="jetpack-compose-和-material-3-的变更-所有平台" tabindex="-1">Jetpack Compose 和 Material 3 的变更（所有平台） <a class="header-anchor" href="#jetpack-compose-和-material-3-的变更-所有平台" aria-label="Permalink to &quot;Jetpack Compose 和 Material 3 的变更（所有平台）&quot;">​</a></h3><h4 id="jetpack-compose-1-6-1" tabindex="-1">Jetpack Compose 1.6.1 <a class="header-anchor" href="#jetpack-compose-1-6-1" aria-label="Permalink to &quot;Jetpack Compose 1.6.1&quot;">​</a></h4><p>合并最新版本的 Jetpack Compose 对所有平台的性能产生了积极影响。关于详情，请参见 <a href="https://android-developers.googleblog.com/2024/01/whats-new-in-jetpack-compose-january-24-release.html" target="_blank" rel="noreferrer">Android 开发者博客上的公告</a>。</p><p>此版本的其他值得注意的特性：</p><ul><li>默认字体内边距的更改仅对 Android 目标生效。但是，请务必考虑此更改的<a href="#using-fontsize-in-materialtheme-requires-lineheight">副作用</a>。</li><li>Compose Multiplatform 之前已支持其他目标中的鼠标选择。在 1.6.0 中，这也包括 Android。</li></ul><p>尚未移植到 Compose Multiplatform 的 Jetpack Compose 特性：</p><ul><li><a href="https://github.com/JetBrains/compose-multiplatform/issues/4218" target="_blank" rel="noreferrer">BasicTextField2</a></li><li><a href="https://github.com/JetBrains/compose-multiplatform/issues/4305" target="_blank" rel="noreferrer">对非线性字体缩放的支持</a></li><li><a href="https://github.com/JetBrains/compose-multiplatform/issues/4236" target="_blank" rel="noreferrer">MultiParagraph.fillBoundingBoxes</a></li><li><a href="https://github.com/JetBrains/compose-multiplatform/issues/4235" target="_blank" rel="noreferrer">跨平台拖放</a>。目前仅在 Android 上有效。在桌面端，您可以使用现有的 API，<code>Modifier.onExternalDrag</code>。</li></ul><p>JetBrains 团队正在致力于在即将发布的 Compose Multiplatform 版本中采纳这些特性。</p><h4 id="compose-material-3-1-2-0" tabindex="-1">Compose Material 3 1.2.0 <a class="header-anchor" href="#compose-material-3-1-2-0" aria-label="Permalink to &quot;Compose Material 3 1.2.0&quot;">​</a></h4><p>版本亮点：</p><ul><li>一个新的实验性的组件 <code>Segmented Button</code>，支持单选和多选。</li><li>扩展的颜色集，提供了更多的表面选项，使在 UI 中强调信息变得更容易。 <ul><li>实现说明：<code>ColorScheme</code> 对象现在是不可变的。如果您的代码当前直接修改 <code>ColorScheme</code> 中的颜色，则现在需要利用 <a href="https://developer.android.com/reference/kotlin/androidx/compose/material3/ColorScheme#copy(androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color,androidx.compose.ui.graphics.Color)" target="_blank" rel="noreferrer">copy</a> 方法来更改颜色。</li><li>现在有多个表面颜色和表面容器选项，而不是单一的表面值，以实现更灵活的颜色管理。</li></ul></li></ul><p>关于 Material 3 变更的更多详情，请参见 <a href="https://material.io/blog/material-3-compose-1-2" target="_blank" rel="noreferrer">Material Design 博客上的发布文章</a>。</p><h3 id="为弹窗、对话框和下拉菜单提供独立的平台视图-ios-桌面" tabindex="-1">为弹窗、对话框和下拉菜单提供独立的平台视图 (iOS, 桌面) <a class="header-anchor" href="#为弹窗、对话框和下拉菜单提供独立的平台视图-ios-桌面" aria-label="Permalink to &quot;为弹窗、对话框和下拉菜单提供独立的平台视图 (iOS, 桌面)&quot;">​</a></h3><p>有时，弹窗元素（例如，工具提示和下拉菜单）不应受初始可组合画布或应用窗口的限制，这一点很重要。如果可组合视图不占据整个屏幕但需要产生一个警报对话框时，这尤其相关。在 1.6.0 中，有一种可靠的方法可以实现这一点。</p><p>请注意，弹窗和对话框仍无法在其自身边界之外绘制任何内容（例如，最顶层容器的阴影）。</p><h4 id="ios-稳定版" tabindex="-1">iOS (稳定版) <a class="header-anchor" href="#ios-稳定版" aria-label="Permalink to &quot;iOS (稳定版)&quot;">​</a></h4><p>在 iOS 上，此特性默认启用。 要切换回旧行为，请将 <code>platformLayers</code> 参数设置为 <code>false</code>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ComposeUIViewController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    configure </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        platformLayers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 您的 Compose 代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="桌面-实验性的" tabindex="-1">桌面 (实验性的) <a class="header-anchor" href="#桌面-实验性的" aria-label="Permalink to &quot;桌面 (实验性的)&quot;">​</a></h4><p>要在桌面端使用此特性，请设置 <code>compose.layers.type</code> 系统属性。支持的值：</p><ul><li><code>WINDOW</code>，用于将 <code>Popup</code> 和 <code>Dialog</code> 组件创建为单独的无装饰窗口。</li><li><code>COMPONENT</code>，用于将 <code>Popup</code> 或 <code>Dialog</code> 作为同一窗口中的单独 Swing 组件创建。它仅适用于离屏渲染，其中 <code>compose.swing.render.on.graphics</code> 设置为 <code>true</code>（参见 1.5.0 Compose Multiplatform 发布说明中的<a href="https://blog.jetbrains.com/kotlin/2023/08/compose-multiplatform-1-5-0-release/#enhanced-swing-interop" target="_blank" rel="noreferrer">增强的 Swing 互操作</a>部分）。请注意，离屏渲染仅适用于 <code>ComposePanel</code> 组件，不适用于全窗口应用程序。</li></ul><p>使用 <code>COMPONENT</code> 属性的代码示例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalComposeUiApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SwingUtilities.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">invokeLater</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;compose.swing.render.on.graphics&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;true&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;compose.layers.type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;COMPONENT&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> window </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> JFrame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    window.defaultCloseOperation </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> WindowConstants.EXIT_ON_CLOSE</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> contentPane </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> JLayeredPane</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    contentPane.layout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> composePanel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ComposePanel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    composePanel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setBounds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    composePanel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setContent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      ComposeContent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    composePanel.windowContainer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> contentPane  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 将整个窗口用于对话框</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    contentPane.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(composePanel)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    window.contentPane.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(contentPane)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setSize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">800</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">600</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    window.isVisible </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Composable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ComposeContent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Box</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Modifier.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fillMaxSize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Color.Green)) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        Dialog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(onDismissRequest </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            Box</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Modifier.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.dp).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">background</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Color.Yellow))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>Dialog</code>（黄色）将被完整绘制，不受父级 <code>ComposePanel</code>（绿色）边界的限制：</p><p><img src="`+s+`" alt="Dialog outside the bounds of the parent panel" width="700"></p><h3 id="支持文本装饰线条样式-ios-桌面-web" tabindex="-1">支持文本装饰线条样式 (iOS, 桌面, Web) <a class="header-anchor" href="#支持文本装饰线条样式-ios-桌面-web" aria-label="Permalink to &quot;支持文本装饰线条样式 (iOS, 桌面, Web)&quot;">​</a></h3><p>Compose Multiplatform 现在允许使用 <code>PlatformTextStyle</code> 类设置文本的下划线样式。</p><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>该类在公共源代码集中不可用，需要在平台特有的代码中使用。</p></div><p>设置点状下划线样式的示例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;Hello, Compose&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  style </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TextStyle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    textDecoration </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TextDecoration.Underline,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    platformStyle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PlatformTextStyle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      textDecorationLineStyle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TextDecorationLineStyle.Dotted</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>您可以使用实线、双实线、点状、虚线和波浪线样式。关于所有可用选项，请参见<a href="https://github.com/JetBrains/compose-multiplatform-core/blob/jb-main/compose/ui/ui-text/src/skikoMain/kotlin/androidx/compose/ui/text/TextDecorationLineStyle.kt#L21" target="_blank" rel="noreferrer">源代码</a>。</p><h3 id="访问系统上安装的字体-ios-桌面-web" tabindex="-1">访问系统上安装的字体 (iOS, 桌面, Web) <a class="header-anchor" href="#访问系统上安装的字体-ios-桌面-web" aria-label="Permalink to &quot;访问系统上安装的字体 (iOS, 桌面, Web)&quot;">​</a></h3><p>您现在可以从 Compose Multiplatform 应用访问系统上安装的字体：使用 <code>SystemFont</code> 类加载具有适当字体样式和字重的字体：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> androidx.compose.ui.text.platform.SystemFont</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FontFamily</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SystemFont</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Menlo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, weight </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 700</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FontFamily</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SystemFont</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Times New Roman&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, FontWeight.Bold))</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FontFamily</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SystemFont</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Webdings&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><p>在桌面端，您可以使用 <code>FontFamily</code> 函数仅通过指定字体族名称来加载所有可能的字体样式（关于详尽示例，请参见<a href="https://github.com/JetBrains/compose-multiplatform-core/blob/release/1.6.0/compose/desktop/desktop/samples/src/jvmMain/kotlin/androidx/compose/desktop/examples/fonts/Fonts.jvm.kt" target="_blank" rel="noreferrer">代码示例</a>）：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FontFamily</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Menlo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="ios" tabindex="-1">iOS <a class="header-anchor" href="#ios" aria-label="Permalink to &quot;iOS&quot;">​</a></h2><h3 id="辅助功能支持" tabindex="-1">辅助功能支持 <a class="header-anchor" href="#辅助功能支持" aria-label="Permalink to &quot;辅助功能支持&quot;">​</a></h3><p>适用于 iOS 的 Compose Multiplatform 现在允许残障人士以与原生 iOS UI 相同的舒适度与 Compose UI 进行交互：</p><ul><li>屏幕阅读器和 VoiceOver 可以访问 Compose UI 的内容。</li><li>Compose UI 支持与原生 UI 相同的导航和交互手势。</li></ul><p>这也意味着您可以将 Compose Multiplatform 的语义数据提供给辅助功能服务和 XCTest framework。</p><p>关于实现和自定义 API 的详情，请参见<a href="./compose-ios-accessibility">对 iOS 辅助功能的支持</a>。</p><h3 id="更改可组合视图的不透明度" tabindex="-1">更改可组合视图的不透明度 <a class="header-anchor" href="#更改可组合视图的不透明度" aria-label="Permalink to &quot;更改可组合视图的不透明度&quot;">​</a></h3><p><code>ComposeUIViewController</code> 类现在多了一个配置选项，可以更改视图背景的不透明度以使其透明。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>透明背景会对性能产生负面影响，因为它会导致额外的混合步骤。</p></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> appController </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ComposeUIViewController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(configure </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.opaque </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>透明背景可以帮助您实现的效果示例：</p><p><img src="`+a+`" alt="Compose opaque = false demo" width="700"></p><h3 id="通过双击和三击在-selectioncontainer-中选择文本" tabindex="-1">通过双击和三击在 SelectionContainer 中选择文本 <a class="header-anchor" href="#通过双击和三击在-selectioncontainer-中选择文本" aria-label="Permalink to &quot;通过双击和三击在 SelectionContainer 中选择文本&quot;">​</a></h3><p>以前，适用于 iOS 的 Compose Multiplatform 只允许用户通过多次轻触在文本输入字段中选择文本。现在，双击和三击手势也适用于选择 <code>SelectionContainer</code> 内 <code>Text</code> 组件中显示的文本。</p><h3 id="与-uiviewcontroller-的互操作" tabindex="-1">与 UIViewController 的互操作 <a class="header-anchor" href="#与-uiviewcontroller-的互操作" aria-label="Permalink to &quot;与 UIViewController 的互操作&quot;">​</a></h3><p>一些未实现为 <code>UIView</code> 的原生 API，例如 <code>UITabBarController</code> 或 <code>UINavigationController</code>，无法使用<a href="./compose-uikit-integration">现有互操作机制</a>嵌入到 Compose Multiplatform UI 中。</p><p>现在，Compose Multiplatform 实现了 <code>UIKitViewController</code> 函数，允许您在 Compose UI 中嵌入原生 iOS 视图控制器。</p><h3 id="文本字段中类似原生的光标行为-通过长按-单击" tabindex="-1">文本字段中类似原生的光标行为（通过长按/单击） <a class="header-anchor" href="#文本字段中类似原生的光标行为-通过长按-单击" aria-label="Permalink to &quot;文本字段中类似原生的光标行为（通过长按/单击）&quot;">​</a></h3><p>Compose Multiplatform 现在更接近原生 iOS 文本字段中光标的行为：</p><ul><li>文本字段中单击后光标的位置将更精确地确定。</li><li>在文本字段中长按并拖动会导致移动光标，而不是像 Android 上那样进入选择模式。</li></ul><h2 id="desktop" tabindex="-1">Desktop <a class="header-anchor" href="#desktop" aria-label="Permalink to &quot;Desktop&quot;">​</a></h2><h3 id="对改进的互操作混合的实验性支持" tabindex="-1">对改进的互操作混合的实验性支持 <a class="header-anchor" href="#对改进的互操作混合的实验性支持" aria-label="Permalink to &quot;对改进的互操作混合的实验性支持&quot;">​</a></h3><p>过去，使用 <code>SwingPanel</code> 包装器实现的互操作视图总是矩形的，并且总是在前景，位于任何 Compose Multiplatform 组件之上。这使得任何弹窗元素（下拉菜单、Toast 通知）都难以使用。通过新的实现，此问题已解决，您现在可以在以下用例中依赖 Swing：</p><ul><li><p>裁剪。您不再受矩形形状的限制：裁剪和阴影修饰符现在可以与 SwingPanel 正确配合使用。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 启用实验性混合所需的标志 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;compose.interop.blending&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;true&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SwingPanel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    modifier </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Modifier.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clip</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RoundedCornerShape</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.dp))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>您可以看到 <code>JButton</code> 在没有此特性时被裁剪的方式（左侧），以及使用实验性混合时的裁剪方式（右侧）：</p><p><img src="`+e+'" alt="Correct clipping with SwingPanel"></p></li><li><p>重叠。现在可以在 <code>SwingPanel</code> 之上绘制任何 Compose Multiplatform 内容，并像往常一样与其交互。在这里，“Snackbar”位于带有可点击的 <strong>OK</strong> 按钮的 Swing 面板之上：</p><p><img src="'+l+`" alt="Correct overlapping with SwingPanel"></p></li></ul><p>关于已知限制和更多详情，请参见<a href="https://github.com/JetBrains/compose-multiplatform-core/pull/915" target="_blank" rel="noreferrer">拉取请求的描述</a>。</p><h2 id="web" tabindex="-1">Web <a class="header-anchor" href="#web" aria-label="Permalink to &quot;Web&quot;">​</a></h2><h3 id="kotlin-wasm-artifact-在框架的稳定版本中可用" tabindex="-1">Kotlin/Wasm artifact 在框架的稳定版本中可用 <a class="header-anchor" href="#kotlin-wasm-artifact-在框架的稳定版本中可用" aria-label="Permalink to &quot;Kotlin/Wasm artifact 在框架的稳定版本中可用&quot;">​</a></h3><p>Compose Multiplatform 的稳定版本现在支持 Kotlin/Wasm 目标。切换到 1.6.0 后，您无需在依赖项列表中指定 <code>compose-ui</code> 库的特定 <code>dev-wasm</code> 版本。</p><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>要构建带有 Wasm 目标的 Compose Multiplatform 项目，您需要使用 Kotlin 1.9.22 及更高版本。</p></div><h2 id="已知问题-缺失的依赖项" tabindex="-1">已知问题：缺失的依赖项 <a class="header-anchor" href="#已知问题-缺失的依赖项" aria-label="Permalink to &quot;已知问题：缺失的依赖项&quot;">​</a></h2><p>在默认项目配置下可能会缺失几个库：</p><ul><li><p><code>org.jetbrains.compose.annotation-internal:annotation</code> 或 <code>org.jetbrains.compose.collection-internal:collection</code></p><p>如果某个库依赖于 Compose Multiplatform 1.6.0-beta02，则它们可能会缺失，因为 1.6.0-beta02 与 1.6.0 不二进制兼容。要找出是哪个库，请运行此命令（将 <code>shared</code> 替换为您主模块的名称）：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> shared:dependencies</span></span></code></pre></div><p>将该库降级到依赖于 Compose Multiplatform 1.5.12 的版本，或请求库作者将其升级到 Compose Multiplatform 1.6.0。</p></li><li><p><code>androidx.annotation:annotation:...</code> 或 <code>androidx.collection:collection:...</code></p><p>Compose Multiplatform 1.6.0 依赖于 <a href="https://developer.android.com/jetpack/androidx/releases/collection" target="_blank" rel="noreferrer">collection</a> 和 <a href="https://developer.android.com/jetpack/androidx/releases/annotation" target="_blank" rel="noreferrer">annotation</a> 库，这些库仅在 Google Maven 版本库中可用。</p><p>要使此版本库可用于您的项目，请将以下行添加到模块的 <code>build.gradle.kts</code> 文件中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">repositories</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    google</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul>`,95)]))}const C=t(r,[["render",h]]);export{y as __pageData,C as default};
