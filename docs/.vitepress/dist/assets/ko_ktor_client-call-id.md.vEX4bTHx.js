import{_ as C,C as t,c as y,o as m,G as s,ag as p,j as l,w as e,a}from"./chunks/framework.Bksy39di.js";const T=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ko/ktor/client-call-id.md","filePath":"ko/ktor/client-call-id.md","lastUpdated":1755457140000}'),I={name:"ko/ktor/client-call-id.md"};function b(v,i,f,_,F,D){const r=t("TopicTitle"),k=t("show-structure"),h=t("primary-label"),c=t("tldr"),u=t("link-summary"),n=t("code-block"),o=t("TabItem"),d=t("Tabs"),g=t("Links"),E=t("list");return m(),y("div",null,[s(r,{labelRef:"client-plugin",title:"Ktor 클라이언트에서 요청 추적하기"}),s(k,{for:"chapter",depth:"2"}),s(h,{ref:"client-plugin"},null,512),s(c,null,{default:e(()=>i[0]||(i[0]=[l("p",null,[l("b",null,"필수 의존성"),a(": "),l("code",null,"io.ktor:ktor-client-call-id")],-1),l("p",null,[l("b",null,"코드 예시"),a(": "),l("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/client-call-id"}," client-call-id ")],-1)])),_:1}),s(u,null,{default:e(()=>i[1]||(i[1]=[a(" CallId 클라이언트 플러그인을 사용하면 고유한 호출 ID를 사용하여 클라이언트 요청을 추적할 수 있습니다. ")])),_:1}),i[14]||(i[14]=p('<p>CallId 플러그인을 사용하면 고유한 호출 ID를 통해 클라이언트 요청을 엔드투엔드로 추적할 수 있습니다. 이는 요청이 거치는 서비스의 수와 관계없이 호출을 추적하는 데 마이크로서비스 아키텍처에서 특히 유용합니다.</p><p>호출 스코프에는 이미 코루틴 컨텍스트에 호출 ID가 있을 수 있습니다. 기본적으로 플러그인은 현재 컨텍스트를 사용하여 호출 ID를 검색하고, 이를 <code>HttpHeaders.XRequestId</code> 헤더를 사용하여 특정 호출의 컨텍스트에 추가합니다.</p><p>또한, 스코프에 호출 ID가 없는 경우, <a href="#configure">플러그인 구성</a>을 통해 새 호출 ID를 생성하고 적용할 수 있습니다.</p><blockquote><p>서버 측에서는 Ktor가 클라이언트 요청을 추적하기 위해 <a href="./server-call-id">CallId</a> 플러그인을 제공합니다.</p></blockquote><h2 id="add_dependencies" tabindex="-1">의존성 추가 <a class="header-anchor" href="#add_dependencies" aria-label="Permalink to &quot;의존성 추가 {id=&quot;add_dependencies&quot;}&quot;">​</a></h2><p><code>CallId</code>을(를) 사용하려면 빌드 스크립트에 <code>ktor-client-call-id</code> 아티팩트를 포함해야 합니다. </p>',6)),s(d,{group:"languages"},{default:e(()=>[s(o,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:e(()=>[s(n,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-client-call-id:$ktor_version")'})]),_:1}),s(o,{title:"Gradle (Groovy)","group-key":"groovy"},{default:e(()=>[s(n,{lang:"Groovy",code:'            implementation "io.ktor:ktor-client-call-id:$ktor_version"'})]),_:1}),s(o,{title:"Maven","group-key":"maven"},{default:e(()=>[s(n,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-client-call-id-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),i[15]||(i[15]=l("h2",{id:"install_plugin",tabindex:"-1"},[a("CallId 설치 "),l("a",{class:"header-anchor",href:"#install_plugin","aria-label":'Permalink to "CallId 설치 {id="install_plugin"}"'},"​")],-1)),l("p",null,[i[3]||(i[3]=a(" 애플리케이션에 ")),i[4]||(i[4]=l("code",null,"CallId",-1)),i[5]||(i[5]=a(" 플러그인을 ")),i[6]||(i[6]=l("a",{href:"#install"},"설치",-1)),i[7]||(i[7]=a("하려면, 지정된 ")),s(g,{href:"/ktor/server-modules",summary:"모듈을 사용하면 경로를 그룹화하여 애플리케이션을 구조화할 수 있습니다."},{default:e(()=>i[2]||(i[2]=[a("모듈")])),_:1}),i[8]||(i[8]=a("의 ")),i[9]||(i[9]=l("code",null,"install",-1)),i[10]||(i[10]=a(" 함수에 전달하세요. 아래 코드 스니펫은 ")),i[11]||(i[11]=l("code",null,"CallId",-1)),i[12]||(i[12]=a("을(를) 설치하는 방법을 보여줍니다... "))]),s(E,null,{default:e(()=>i[13]||(i[13]=[l("li",null,[a(" ... "),l("code",null,"embeddedServer"),a(" 함수 호출 내부에서. ")],-1),l("li",null,[a(" ... "),l("code",null,"Application"),a(" 클래스의 확장 함수인 명시적으로 정의된 "),l("code",null,"module"),a(" 내부에서. ")],-1)])),_:1}),s(d,null,{default:e(()=>[s(o,{title:"embeddedServer"},{default:e(()=>[s(n,{lang:"kotlin",code:`            import io.ktor.server.engine.*
            import io.ktor.server.netty.*
            import io.ktor.server.application.*
            import io.ktor.client.plugins.callid.*

            fun main() {
                embeddedServer(Netty, port = 8080) {
                    install(CallId)
                    // ...
                }.start(wait = true)
            }`})]),_:1}),s(o,{title:"module"},{default:e(()=>[s(n,{lang:"kotlin",code:`            import io.ktor.server.application.*
            import io.ktor.client.plugins.callid.*
            // ...
            fun Application.module() {
                install(CallId)
                // ...
            }`})]),_:1})]),_:1}),i[16]||(i[16]=p(`<h2 id="configure" tabindex="-1">CallId 구성 <a class="header-anchor" href="#configure" aria-label="Permalink to &quot;CallId 구성 {id=&quot;configure&quot;}&quot;">​</a></h2><p>CallId 플러그인 구성은 <a href="https://api.ktor.io/ktor-client/ktor-client-plugins/ktor-client-call-id/io.ktor.client.plugins.callid/-call-id-config/index.html" target="_blank" rel="noreferrer">CallIdConfig</a> 클래스에 의해 제공되며, 호출 ID를 생성하여 호출 컨텍스트에 추가할 수 있도록 합니다.</p><h3 id="호출-id-생성" tabindex="-1">호출 ID 생성 <a class="header-anchor" href="#호출-id-생성" aria-label="Permalink to &quot;호출 ID 생성&quot;">​</a></h3><p>다음 방법 중 하나로 특정 요청에 대한 호출 ID를 생성할 수 있습니다:</p><ul><li><code>useCoroutineContext</code> 속성은 기본적으로 활성화되어 있으며, 현재 <code>CoroutineContext</code>를 사용하여 호출 ID를 검색하는 제너레이터를 추가합니다. 이 기능을 비활성화하려면 <code>useCoroutineContext</code>를 <code>false</code>로 설정하세요:</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CallId) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    useCoroutineContext </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p>Ktor 서버에서는 <a href="./server-call-id">CallId 플러그인</a>을 사용하여 <code>CoroutineContext</code>에 호출 ID를 추가하세요.</p></blockquote><ul><li><code>generate()</code> 함수를 사용하면 나가는 요청에 대한 호출 ID를 생성할 수 있습니다. 호출 ID 생성에 실패하면 <code>null</code>을 반환합니다.</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CallId) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    generate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;call-id-client-2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>여러 방법을 사용하여 호출 ID를 생성할 수 있습니다. 이 경우 첫 번째 null이 아닌 값이 적용됩니다.</p><h3 id="호출-id-추가" tabindex="-1">호출 ID 추가 <a class="header-anchor" href="#호출-id-추가" aria-label="Permalink to &quot;호출 ID 추가&quot;">​</a></h3><p>호출 ID를 검색한 후, 요청에 추가하기 위해 다음 옵션을 사용할 수 있습니다:</p><ul><li><code>intercept()</code> 함수를 사용하면 <code>CallIdInterceptor</code>를 사용하여 요청에 호출 ID를 추가할 수 있습니다.</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ClientCallId) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    intercept</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { request, callId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">header</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpHeaders.XRequestId, callId)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><code>addToHeader()</code> 함수는 지정된 헤더에 호출 ID를 추가합니다. 이 함수는 매개변수로 헤더를 받으며, 기본값은 <code>HttpHeaders.XRequestId</code>입니다.</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CallId) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    addToHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpHeaders.XRequestId)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="예시" tabindex="-1">예시 <a class="header-anchor" href="#예시" aria-label="Permalink to &quot;예시&quot;">​</a></h2><p>다음 예제에서는 Ktor 클라이언트용 CallId 플러그인이 새로운 호출 ID를 생성하고 이를 헤더에 추가하도록 구성되어 있습니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CallId) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        generate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;call-id-client&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        addToHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpHeaders.XRequestId)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>이 플러그인은 코루틴 컨텍스트를 사용하여 호출 ID를 가져오고, <code>generate()</code> 함수를 활용하여 새 호출 ID를 생성합니다. 그런 다음 첫 번째 null이 아닌 호출 ID가 <code>addToHeader()</code> 함수를 사용하여 요청 헤더에 적용됩니다.</p><p>Ktor 서버에서는 <a href="./server-call-id">서버용 CallId 플러그인</a>의 <a href="./server-call-id#retrieve">retrieve</a> 함수를 사용하여 헤더에서 호출 ID를 검색할 수 있습니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CallId) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    retrieveFromHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpHeaders.XRequestId)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>이러한 방식으로 Ktor 서버는 요청의 지정된 헤더에서 ID를 검색하고 이를 호출의 <code>callId</code> 속성에 적용합니다.</p><p>전체 예제는 <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/client-call-id" target="_blank" rel="noreferrer">client-call-id</a>를 참조하세요.</p>`,24))])}const x=C(I,[["render",b]]);export{T as __pageData,x as default};
