import{_ as n}from"./chunks/icon-1-done.ZX9lW-aj.js";import{_ as l}from"./chunks/icon-2-done.DCMUaFG5.js";import{_ as e}from"./chunks/icon-3.BwKvTetO.js";import{_ as p,a as k,b as o}from"./chunks/kandy-library.BjUNQ4SJ.js";import{_ as h,C as r,c as d,o as E,j as s,G as c,ag as g,a,w as y}from"./chunks/framework.Bksy39di.js";const w=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kotlin/kotlin-notebook-add-dependencies.md","filePath":"ko/kotlin/kotlin-notebook-add-dependencies.md","lastUpdated":1754307826000}'),b={name:"ko/kotlin/kotlin-notebook-add-dependencies.md"};function m(u,i,F,f,D,C){const t=r("tldr");return E(),d("div",null,[i[1]||(i[1]=s("h1",{id:"kotlin-notebook에-의존성-추가하기",tabindex:"-1"},[a("Kotlin Notebook에 의존성 추가하기 "),s("a",{class:"header-anchor",href:"#kotlin-notebook에-의존성-추가하기","aria-label":'Permalink to "Kotlin Notebook에 의존성 추가하기"'},"​")],-1)),c(t,null,{default:y(()=>i[0]||(i[0]=[s("p",null,[a("이것은 "),s("strong",null,"Kotlin Notebook 시작하기"),a(" 튜토리얼의 세 번째 부분입니다. 진행하기 전에 이전 단계를 완료했는지 확인하세요.")],-1),s("p",null,[s("img",{src:n,width:"20",alt:"첫 번째 단계"}),a(),s("a",{href:"/ko/kotlin/kotlin-notebook-set-up-env"},"환경 설정하기"),s("br"),s("img",{src:l,width:"20",alt:"두 번째 단계"}),a(),s("a",{href:"/ko/kotlin/kotlin-notebook-create"},"Kotlin Notebook 생성하기"),s("br"),s("img",{src:e,width:"20",alt:"세 번째 단계"}),a(),s("strong",null,"Kotlin Notebook에 의존성 추가하기"),s("br")],-1)])),_:1}),i[2]||(i[2]=g(`<p>첫 번째 <a href="/ko/kotlin/kotlin-notebook-overview">Kotlin Notebook</a>을 이미 생성하셨습니다! 이제 고급 기능을 사용하기 위해 필요한 라이브러리에 의존성을 추가하는 방법을 알아봅시다.</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Kotlin 표준 라이브러리는 별도의 설정 없이 바로 사용할 수 있으므로 가져올 필요가 없습니다.</p></div><p>어떤 코드 셀에서든 Gradle 스타일 구문을 사용하여 Maven 저장소에서 라이브러리의 좌표를 지정하여 라이브러리를 로드할 수 있습니다. 그러나 Kotlin Notebook에는 <a href="https://www.jetbrains.com/help/idea/kotlin-notebook.html#import-libraries" target="_blank" rel="noreferrer"><code>%use</code> 구문</a> 형태로 인기 있는 라이브러리를 로드하는 간소화된 방법이 있습니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// libraryName을 추가하려는 라이브러리 의존성으로 바꾸세요</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">use libraryName</span></span></code></pre></div><p>Kotlin Notebook의 자동 완성 기능을 사용하여 사용 가능한 라이브러리에 빠르게 접근할 수도 있습니다.</p><p><img src="`+p+`" alt="Kotlin Notebook의 자동 완성 기능" width="700"></p><h2 id="kotlin-notebook에-kotlin-dataframe-및-kandy-라이브러리-추가하기" tabindex="-1">Kotlin Notebook에 Kotlin DataFrame 및 Kandy 라이브러리 추가하기 <a class="header-anchor" href="#kotlin-notebook에-kotlin-dataframe-및-kandy-라이브러리-추가하기" aria-label="Permalink to &quot;Kotlin Notebook에 Kotlin DataFrame 및 Kandy 라이브러리 추가하기&quot;">​</a></h2><p>Kotlin Notebook에 인기 있는 Kotlin 라이브러리 의존성 두 가지를 추가해 봅시다.</p><ul><li><a href="https://kotlin.github.io/dataframe/gettingstarted.html" target="_blank" rel="noreferrer">Kotlin DataFrame 라이브러리</a>는 Kotlin 프로젝트에서 데이터를 조작할 수 있는 기능을 제공합니다. 이 라이브러리를 사용하여 <a href="/ko/kotlin/data-analysis-work-with-api">API</a>, <a href="/ko/kotlin/data-analysis-connect-to-db">SQL 데이터베이스</a> 및 CSV 또는 JSON과 같은 <a href="/ko/kotlin/data-analysis-work-with-data-sources">다양한 파일 형식</a>에서 데이터를 가져올 수 있습니다.</li><li><a href="https://kotlin.github.io/kandy/welcome.html" target="_blank" rel="noreferrer">Kandy 라이브러리</a>는 <a href="/ko/kotlin/data-analysis-visualization">차트 생성</a>을 위한 강력하고 유연한 DSL을 제공합니다.</li></ul><p>이 라이브러리들을 추가하려면:</p><ol><li><p>**Add Code Cell(코드 셀 추가)**을 클릭하여 새 코드 셀을 생성합니다.</p></li><li><p>코드 셀에 다음 코드를 입력합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 최신 라이브러리 버전을 사용하도록 보장합니다.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">useLatestDescriptors</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Kotlin DataFrame 라이브러리를 가져옵니다.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">use dataframe</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Kotlin Kandy 라이브러리를 가져옵니다.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">use kandy</span></span></code></pre></div></li><li><p>코드 셀을 실행합니다.</p><p><code>%use</code> 구문이 실행되면 라이브러리 의존성을 다운로드하고 노트북에 기본 임포트를 추가합니다.</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>라이브러리에 의존하는 다른 코드 셀을 실행하기 전에 <code>%use libraryName</code> 줄이 포함된 코드 셀을 반드시 실행해야 합니다.</p></div></li><li><p>Kotlin DataFrame 라이브러리를 사용하여 CSV 파일에서 데이터를 가져오려면 새 코드 셀에서 <code>.read()</code> 함수를 사용하세요.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;netflix_titles.csv&quot; 파일에서 데이터를 가져와 DataFrame을 생성합니다.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rawDf </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DataFrame.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;netflix_titles.csv&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 원본 DataFrame 데이터를 표시합니다.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rawDf</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>이 예제 CSV는 <a href="https://github.com/Kotlin/dataframe/blob/master/examples/notebooks/netflix/netflix_titles.csv" target="_blank" rel="noreferrer">Kotlin DataFrame 예제 GitHub 저장소</a>에서 다운로드할 수 있습니다. 이를 프로젝트 디렉터리에 추가하세요.</p></div><p><img src="`+k+`" alt="DataFrame을 사용하여 데이터 표시하기" width="700"></p></li><li><p>새 코드 셀에서 <code>.plot</code> 메서드를 사용하여 DataFrame에 있는 TV 프로그램과 영화의 분포를 시각적으로 표현합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rawDf</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // &quot;type&quot;이라는 열에서 각 고유 값의 발생 횟수를 계산합니다.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">valueCounts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sort </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { type }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 색상을 지정하여 막대 차트로 데이터를 시각화합니다.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        bars</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;count&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            fillColor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                scale </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> categorical</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(range </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Color.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#00BCD4&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), Color.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;#009688&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 차트의 레이아웃을 구성하고 제목을 설정합니다.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        layout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            title </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Count of TV Shows and Movies&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            size </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 900</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> to </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">550</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre></div></li></ol><p>결과 차트:</p><p><img src="`+o+'" alt="Kandy 라이브러리를 사용한 시각화" width="700"></p><p>Kotlin Notebook에 이러한 라이브러리를 추가하고 활용하신 것을 축하드립니다! 이것은 Kotlin Notebook과 <a href="/ko/kotlin/data-analysis-libraries">지원되는 라이브러리</a>로 무엇을 달성할 수 있는지에 대한 일부일 뿐입니다.</p><h2 id="다음-단계" tabindex="-1">다음 단계 <a class="header-anchor" href="#다음-단계" aria-label="Permalink to &quot;다음 단계&quot;">​</a></h2><ul><li><a href="/ko/kotlin/kotlin-notebook-share">Kotlin Notebook을 공유하는 방법</a> 배우기</li><li><a href="https://www.jetbrains.com/help/idea/kotlin-notebook.html#add-dependencies" target="_blank" rel="noreferrer">Kotlin Notebook에 의존성을 추가하는 방법</a>에 대한 자세한 내용 확인하기</li><li>Kotlin DataFrame 라이브러리를 사용하는 더 포괄적인 가이드는 <a href="/ko/kotlin/data-analysis-work-with-data-sources">파일에서 데이터 가져오기</a>를 참조하세요.</li><li>데이터 과학 및 Kotlin에서의 분석에 사용할 수 있는 도구 및 자료에 대한 포괄적인 개요는 <a href="/ko/kotlin/data-analysis-libraries">데이터 분석을 위한 Kotlin 및 Java 라이브러리</a>를 참조하세요.</li></ul>',16))])}const B=h(b,[["render",m]]);export{w as __pageData,B as default};
