import{_ as e,a as t}from"./chunks/lib-hierarchical-structure.Dk8bxMrh.js";import{_ as r,c as o,o as l,ag as i}from"./chunks/framework.Bksy39di.js";const _=JSON.parse('{"title":"プラットフォーム間でのコード共有","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kmp/multiplatform-share-on-platforms.md","filePath":"ja/kmp/multiplatform-share-on-platforms.md","lastUpdated":1755516278000}'),n={name:"ja/kmp/multiplatform-share-on-platforms.md"};function c(p,a,d,s,h,m){return l(),o("div",null,a[0]||(a[0]=[i('<h1 id="プラットフォーム間でのコード共有" tabindex="-1">プラットフォーム間でのコード共有 <a class="header-anchor" href="#プラットフォーム間でのコード共有" aria-label="Permalink to &quot;プラットフォーム間でのコード共有&quot;">​</a></h1><p>Kotlin Multiplatform を使用すると、Kotlin が提供するメカニズムを使ってコードを共有できます。</p><ul><li>プロジェクトで使用する<strong>すべてのプラットフォーム間でコードを共有</strong>します。すべてのプラットフォームに適用される共通のビジネスロジックを共有する場合に使用します。</li><li>プロジェクトに含まれる<strong>一部のプラットフォーム間でコードを共有</strong>しますが、すべてではありません。階層構造を利用して、類似したプラットフォームでコードを再利用できます。</li></ul><p>共有コードからプラットフォーム固有の API にアクセスする必要がある場合は、Kotlin の<a href="./multiplatform-expect-actual">期待される宣言と実際の宣言 (expected and actual declarations)</a> のメカニズムを使用します。</p><h2 id="すべてのプラットフォームでコードを共有する" tabindex="-1">すべてのプラットフォームでコードを共有する <a class="header-anchor" href="#すべてのプラットフォームでコードを共有する" aria-label="Permalink to &quot;すべてのプラットフォームでコードを共有する&quot;">​</a></h2><p>すべてのプラットフォームに共通のビジネスロジックがある場合、各プラットフォームで同じコードを記述する必要はありません。共通ソースセットで共有するだけです。</p><p><img src="'+e+'" alt="すべてのプラットフォームで共有されるコード"></p><p>一部のソースセットの依存関係はデフォルトで設定されます。<code>dependsOn</code> 関係を手動で指定する必要はありません。</p><ul><li><code>jvmMain</code> や <code>macosX64Main</code> など、共通ソースセットに依存するすべてのプラットフォーム固有のソースセットに対して。</li><li><code>androidMain</code> と <code>androidUnitTest</code> など、特定のターゲットの <code>main</code> と <code>test</code> ソースセット間に対して。</li></ul><p>共有コードからプラットフォーム固有の API にアクセスする必要がある場合は、Kotlin の<a href="./multiplatform-expect-actual">期待される宣言と実際の宣言</a>のメカニズムを使用します。</p><h2 id="類似したプラットフォームでコードを共有する" tabindex="-1">類似したプラットフォームでコードを共有する <a class="header-anchor" href="#類似したプラットフォームでコードを共有する" aria-label="Permalink to &quot;類似したプラットフォームでコードを共有する&quot;">​</a></h2><p>共通のロジックやサードパーティ製 API の多くを再利用できる可能性がある、複数のネイティブターゲットを作成する必要があることがよくあります。</p><p>たとえば、iOS をターゲットとする一般的なマルチプラットフォームプロジェクトには、2つの iOS 関連ターゲットがあります。1つは iOS ARM64 デバイス用、もう1つは x64 シミュレーター用です。これらは個別のプラットフォーム固有のソースセットを持っていますが、実際にはデバイスとシミュレーターで異なるコードが必要となることはほとんどなく、その依存関係もほぼ同じです。そのため、iOS 固有のコードは両者間で共有できます。</p><p>この設定では、2つの iOS ターゲット用の共有ソースセットを持ち、iOS デバイスとシミュレーターの両方に共通する任意の API を Kotlin/Native コードから直接呼び出せるようにすることが望ましいのは明らかです。</p><p>この場合、以下のいずれかの方法で<a href="./multiplatform-hierarchy">階層構造 (hierarchical structure)</a> を使用して、プロジェクトのネイティブターゲット間でコードを共有できます。</p><ul><li><a href="./multiplatform-hierarchy#default-hierarchy-template">デフォルトの階層テンプレートを使用する</a></li><li><a href="./multiplatform-hierarchy#manual-configuration">階層構造を手動で構成する</a></li></ul><p><a href="#share-code-in-libraries">ライブラリでのコード共有</a> と <a href="#connect-platform-specific-libraries">プラットフォーム固有のライブラリの接続</a> について詳しく学びましょう。</p><h2 id="ライブラリでコードを共有する" tabindex="-1">ライブラリでコードを共有する <a class="header-anchor" href="#ライブラリでコードを共有する" aria-label="Permalink to &quot;ライブラリでコードを共有する&quot;">​</a></h2><p>階層的なプロジェクト構造のおかげで、ライブラリはターゲットのサブセットに対して共通の API を提供することもできます。<a href="./multiplatform-publish-lib-setup">ライブラリが公開される</a> と、その中間ソースセットの API がプロジェクト構造に関する情報とともにライブラリアーティファクトに組み込まれます。このライブラリを使用すると、プロジェクトの中間ソースセットは、各ソースセットのターゲットで利用可能なライブラリの API のみにアクセスできます。</p><p>たとえば、<code>kotlinx.coroutines</code> リポジトリの以下のソースセット階層を確認してください。</p><p><img src="'+t+'" alt="ライブラリの階層構造"></p><p><code>concurrent</code> ソースセットは <code>runBlocking</code> 関数を宣言し、JVM およびネイティブターゲット用にコンパイルされます。<code>kotlinx.coroutines</code> ライブラリが更新され、階層的なプロジェクト構造で公開されると、そのライブラリに依存し、ライブラリの <code>concurrent</code> ソースセットの「ターゲットシグネチャ」と一致するため、JVM とネイティブターゲット間で共有されるソースセットから <code>runBlocking</code> を呼び出すことができます。</p><h2 id="プラットフォーム固有のライブラリを接続する" tabindex="-1">プラットフォーム固有のライブラリを接続する <a class="header-anchor" href="#プラットフォーム固有のライブラリを接続する" aria-label="Permalink to &quot;プラットフォーム固有のライブラリを接続する&quot;">​</a></h2><p>プラットフォーム固有の依存関係に制限されることなく、より多くのネイティブコードを共有するには、Foundation、UIKit、POSIX などの<a href="https://kotlinlang.org/docs/native-platform-libs.html" target="_blank" rel="noreferrer">プラットフォームライブラリ</a>を使用します。これらのライブラリは Kotlin/Native に同梱されており、共有ソースセットでデフォルトで利用可能です。</p><p>さらに、プロジェクトで <a href="./multiplatform-cocoapods-overview">Kotlin CocoaPods Gradle</a> プラグインを使用している場合、<a href="https://kotlinlang.org/docs/native-c-interop.html" target="_blank" rel="noreferrer"><code>cinterop</code> メカニズム</a> を介して使用されるサードパーティのネイティブライブラリを扱うことができます。</p><h2 id="次のステップ" tabindex="-1">次のステップ <a class="header-anchor" href="#次のステップ" aria-label="Permalink to &quot;次のステップ&quot;">​</a></h2><ul><li><a href="./multiplatform-expect-actual">Kotlin の期待される宣言と実際の宣言のメカニズムについて読む</a></li><li><a href="./multiplatform-hierarchy">階層的なプロジェクト構造について詳しく学ぶ</a></li><li><a href="./multiplatform-publish-lib-setup">マルチプラットフォームライブラリの公開を設定する</a></li><li><a href="https://kotlinlang.org/docs/coding-conventions.html#source-file-names" target="_blank" rel="noreferrer">マルチプラットフォームプロジェクトにおけるソースファイル名の命名に関する推奨事項を見る</a></li></ul>',27)]))}const b=r(n,[["render",c]]);export{_ as __pageData,b as default};
