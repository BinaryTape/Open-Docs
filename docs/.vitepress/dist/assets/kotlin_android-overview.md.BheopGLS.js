import{_ as o,c as t,o as e,ag as l}from"./chunks/framework.Bksy39di.js";const c=JSON.parse('{"title":"适用于 Android 的 Kotlin","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/android-overview.md","filePath":"kotlin/android-overview.md","lastUpdated":1754307826000}'),n={name:"kotlin/android-overview.md"};function i(a,r,d,s,p,m){return e(),t("div",null,r[0]||(r[0]=[l('<h1 id="适用于-android-的-kotlin" tabindex="-1">适用于 Android 的 Kotlin <a class="header-anchor" href="#适用于-android-的-kotlin" aria-label="Permalink to &quot;适用于 Android 的 Kotlin&quot;">​</a></h1><p>Android 移动开发自 2019 年 Google I/O 大会以来一直秉持 <a href="https://developer.android.com/kotlin/first" target="_blank" rel="noreferrer">Kotlin 优先</a> 的原则。</p><p>超过 50% 的专业 Android 开发者使用 Kotlin 作为他们的主要语言，而只有 30% 的开发者使用 Java 作为他们的主要语言。70% 以 Kotlin 为主要语言的开发者表示，Kotlin 让他们更高效。</p><p>在 Android 开发中使用 Kotlin，您可以从以下方面获益：</p><ul><li><strong>更少的代码，更高的可读性</strong>。减少编写代码的时间，并更容易理解他人编写的代码。</li><li><strong>更少的常见错误</strong>。根据 <a href="https://medium.com/androiddevelopers/fewer-crashes-and-more-stability-with-kotlin-b606c6a6ac04" target="_blank" rel="noreferrer">Google 内部数据</a> 显示，使用 Kotlin 构建的应用崩溃的可能性降低 20%。</li><li><strong>Jetpack 库中的 Kotlin 支持</strong>。<a href="https://developer.android.com/jetpack/compose" target="_blank" rel="noreferrer">Jetpack Compose</a> 是 Android 推荐的现代工具包，用于使用 Kotlin 构建原生 UI。<a href="https://developer.android.com/kotlin/ktx" target="_blank" rel="noreferrer">KTX 扩展</a> 为现有 Android 库添加了 Kotlin 语言特性，例如协程、扩展函数、lambda 表达式和命名形参。</li><li><strong>多平台开发支持</strong>。Kotlin Multiplatform 不仅支持 Android 开发，还支持 <a href="https://kotlinlang.org/lp/multiplatform/" target="_blank" rel="noreferrer">iOS</a>、后端和 Web 应用程序的开发。<a href="https://developer.android.com/kotlin/multiplatform" target="_blank" rel="noreferrer">一些 Jetpack 库</a> 已经是多平台的。<a href="https://www.jetbrains.com/lp/compose-multiplatform/" target="_blank" rel="noreferrer">Compose Multiplatform</a> 是 JetBrains 基于 Kotlin 和 Jetpack Compose 的声明式 UI 框架，它使得跨 iOS、Android、桌面和 Web 平台共享 UI 成为可能。</li><li><strong>成熟的语言和环境</strong>。自 2011 年创建以来，Kotlin 不仅作为一门语言持续发展，而且作为一个拥有强大工具链的完整生态系统也持续发展。如今，它已无缝集成到 <a href="https://developer.android.com/studio" target="_blank" rel="noreferrer">Android Studio</a> 中，并被许多公司广泛用于开发 Android 应用程序。</li><li><strong>与 Java 的互操作性</strong>。您可以在应用程序中将 Kotlin 与 Java 编程语言一起使用，而无需将所有代码迁移到 Kotlin。</li><li><strong>易于学习</strong>。Kotlin 非常容易学习，特别是对于 Java 开发者而言。</li><li><strong>庞大的社区</strong>。Kotlin 拥有强大的社区支持和众多贡献，该社区正在全球范围内不断壮大。排名前一千的 Android 应用中，超过 95% 使用 Kotlin。</li></ul><p>许多初创公司和财富 500 强公司已经使用 Kotlin 开发了 Android 应用程序，关于列表，请参见 <a href="https://developer.android.com/kotlin/stories" target="_blank" rel="noreferrer">面向 Android 开发者提供的 Google 网站</a>。</p><p>要开始将 Kotlin 用于：</p><ul><li>Android 开发，关于使用 Kotlin 开发 Android 应用，请参阅 <a href="https://developer.android.com/kotlin/get-started" target="_blank" rel="noreferrer">Google 提供的文档</a>。</li><li>开发跨平台移动应用程序，关于创建具有共享逻辑和原生 UI 的应用，请参见 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-create-first-app.html" target="_blank" rel="noreferrer">此文档</a>。</li></ul>',8)]))}const g=o(n,[["render",i]]);export{c as __pageData,g as default};
