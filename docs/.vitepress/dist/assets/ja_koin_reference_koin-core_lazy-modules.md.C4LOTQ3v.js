import{_ as i,c as a,o as n,ag as l}from"./chunks/framework.Bksy39di.js";const c=JSON.parse('{"title":"レイジーモジュールとバックグラウンドロード","description":"","frontmatter":{"title":"レイジーモジュールとバックグラウンドロード"},"headers":[],"relativePath":"ja/koin/reference/koin-core/lazy-modules.md","filePath":"ja/koin/reference/koin-core/lazy-modules.md","lastUpdated":1748365453000}'),e={name:"ja/koin/reference/koin-core/lazy-modules.md"};function t(p,s,h,k,d,o){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="レイジーモジュールとバックグラウンドロード" tabindex="-1">レイジーモジュールとバックグラウンドロード <a class="header-anchor" href="#レイジーモジュールとバックグラウンドロード" aria-label="Permalink to &quot;レイジーモジュールとバックグラウンドロード&quot;">​</a></h1><p>このセクションでは、レイジーローディングのアプローチでモジュールを整理する方法について説明します。</p><h2 id="レイジーモジュールの定義-実験的" tabindex="-1">レイジーモジュールの定義 [実験的] <a class="header-anchor" href="#レイジーモジュールの定義-実験的" aria-label="Permalink to &quot;レイジーモジュールの定義 [実験的]&quot;">​</a></h2><p>Koin起動時にリソースの事前割り当てを避け、バックグラウンドでロードするために、レイジーなKoinモジュールを宣言できるようになりました。</p><ul><li>\`\`lazyModule<code> - KoinモジュールのレイジーKotlinバージョンを宣言します</code></li><li>\`\`Module.includes<code> - レイジーモジュールを含めることを可能にします</code></li></ul><p>良い例は常に理解を深めます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// レイジーなモジュール</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lazyModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    singleOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ClassB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// m2レイジーモジュールを含める</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lazyModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    includes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(m2)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    singleOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ClassA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IClassA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;() }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><pre><code>\`LazyModule\`は、以下のAPIによってロードされるまで、いかなるリソースもトリガーしません
</code></pre></div><h2 id="kotlinコルーチンによるバックグラウンドロード-実験的" tabindex="-1">Kotlinコルーチンによるバックグラウンドロード [実験的] <a class="header-anchor" href="#kotlinコルーチンによるバックグラウンドロード-実験的" aria-label="Permalink to &quot;Kotlinコルーチンによるバックグラウンドロード [実験的]&quot;">​</a></h2><p>レイジーモジュールを宣言したら、Koinの設定からバックグラウンドでそれらをロードし、さらに利用することができます。</p><ul><li>\`\`KoinApplication.lazyModules<code> - プラットフォームのデフォルトの</code>Dispatchers<code>を使用して、コルーチンでバックグラウンドでレイジーモジュールをロードします</code></li><li>\`\`Koin.waitAllStartJobs<code> - 起動ジョブが完了するのを待ちます</code></li><li>\`\`Koin.runOnKoinStarted<code> - 起動完了後にコードブロックを実行します</code></li></ul><p>良い例は常に理解を深めます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startKoin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // バックグラウンドでレイジーモジュールをロード</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    lazyModules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(m1)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> koin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> KoinPlatform.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getKoin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ロードジョブが完了するのを待つ</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">koin.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">waitAllStartJobs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// または、ロード完了後にコードを実行する</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">koin.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">runOnKoinStarted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { koin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // バックグラウンドロード完了後に実行</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><pre><code>\`lazyModules\`関数では、ディスパッチャーを指定できます: \`lazyModules(modules, dispatcher = Dispatcher.IO)\`
</code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><pre><code>コルーチンエンジンのデフォルトディスパッチャーは\`Dispatchers.Default\`です
</code></pre></div><h3 id="制限-モジュールとレイジーモジュールの混在" tabindex="-1">制限 - モジュールとレイジーモジュールの混在 <a class="header-anchor" href="#制限-モジュールとレイジーモジュールの混在" aria-label="Permalink to &quot;制限 - モジュールとレイジーモジュールの混在&quot;">​</a></h3><p>現時点では、起動時にモジュールとレイジーモジュールを混在させないことを推奨します。<code>mainModule</code>が<code>lazyReporter</code>内で依存関係を要求しないようにしてください。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startKoin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    androidLogger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    androidContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this@TestApp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    modules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mainModule)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    lazyModules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lazyReporter)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>現時点では、Koinはあなたのモジュールがレイジーモジュールに依存しているかどうかをチェックしません</p></div>`,19)]))}const E=i(e,[["render",t]]);export{c as __pageData,E as default};
