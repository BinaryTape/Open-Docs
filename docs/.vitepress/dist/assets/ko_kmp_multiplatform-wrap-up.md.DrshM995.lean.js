import{_ as p}from"./chunks/icon-1-done.B5D6C9SU.js";import{_ as s}from"./chunks/icon-2-done.e1N9yMQF.js";import{_ as e}from"./chunks/icon-3-done.D86i6ZaO.js";import{_ as f,a}from"./chunks/icon-5.B4O82I8r.js";import{_ as k,C as m,c as I,o as K,j as t,G as i,a as n,w as o}from"./chunks/framework.Bksy39di.js";const j=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kmp/multiplatform-wrap-up.md","filePath":"ko/kmp/multiplatform-wrap-up.md","lastUpdated":1755516278000}'),A={name:"ko/kmp/multiplatform-wrap-up.md"};function y(g,l,D,w,E,b){const r=m("Links"),d=m("tldr"),u=m("list");return K(),I("div",null,[l[38]||(l[38]=t("h1",{id:"프로젝트-마무리하기",tabindex:"-1"},[n("프로젝트 마무리하기 "),t("a",{class:"header-anchor",href:"#프로젝트-마무리하기","aria-label":'Permalink to "프로젝트 마무리하기"'},"​")],-1)),i(d,null,{default:o(()=>[l[20]||(l[20]=t("p",null,[n("이 문서는 "),t("strong",null,"공유 로직과 네이티브 UI를 사용하는 Kotlin 멀티플랫폼 앱 만들기"),n(" 튜토리얼의 마지막 부분입니다. 계속 진행하기 전에 이전 단계를 완료했는지 확인하세요.")],-1)),t("p",null,[l[4]||(l[4]=t("img",{src:p,width:"20",alt:"첫 번째 단계"},null,-1)),l[5]||(l[5]=n()),i(r,{href:"/kmp/multiplatform-create-first-app",summary:"이 튜토리얼은 IntelliJ IDEA를 사용하지만, Android Studio에서도 따라 할 수 있습니다. 두 IDE는 동일한 핵심 기능과 Kotlin 멀티플랫폼 지원을 공유합니다. 이 문서는 공유 로직과 네이티브 UI를 사용하는 Kotlin 멀티플랫폼 앱 만들기 튜토리얼의 첫 번째 부분입니다. Kotlin 멀티플랫폼 앱 만들기 사용자 인터페이스 업데이트 종속성 추가 더 많은 로직 공유 프로젝트 마무리하기"},{default:o(()=>l[0]||(l[0]=[n("Kotlin 멀티플랫폼 앱 만들기")])),_:1}),l[6]||(l[6]=t("br",null,null,-1)),l[7]||(l[7]=t("img",{src:s,width:"20",alt:"두 번째 단계"},null,-1)),l[8]||(l[8]=n()),i(r,{href:"/kmp/multiplatform-update-ui",summary:"이 튜토리얼은 IntelliJ IDEA를 사용하지만, Android Studio에서도 따라 할 수 있습니다. 두 IDE는 동일한 핵심 기능과 Kotlin 멀티플랫폼 지원을 공유합니다. 이 문서는 공유 로직과 네이티브 UI를 사용하는 Kotlin 멀티플랫폼 앱 만들기 튜토리얼의 두 번째 부분입니다. 계속 진행하기 전에 이전 단계를 완료했는지 확인하세요. Kotlin 멀티플랫폼 앱 만들기 사용자 인터페이스 업데이트 종속성 추가 더 많은 로직 공유 프로젝트 마무리하기"},{default:o(()=>l[1]||(l[1]=[n("사용자 인터페이스 업데이트")])),_:1}),l[9]||(l[9]=t("br",null,null,-1)),l[10]||(l[10]=t("img",{src:e,width:"20",alt:"세 번째 단계"},null,-1)),l[11]||(l[11]=n()),i(r,{href:"/kmp/multiplatform-dependencies",summary:"이 튜토리얼은 IntelliJ IDEA를 사용하지만, Android Studio에서도 따라 할 수 있습니다. 두 IDE는 동일한 핵심 기능과 Kotlin 멀티플랫폼 지원을 공유합니다. 이 문서는 공유 로직과 네이티브 UI를 사용하는 Kotlin 멀티플랫폼 앱 만들기 튜토리얼의 세 번째 부분입니다. 계속 진행하기 전에 이전 단계를 완료했는지 확인하세요. Kotlin 멀티플랫폼 앱 만들기 사용자 인터페이스 업데이트 종속성 추가 더 많은 로직 공유 프로젝트 마무리하기"},{default:o(()=>l[2]||(l[2]=[n("종속성 추가")])),_:1}),l[12]||(l[12]=t("br",null,null,-1)),l[13]||(l[13]=t("img",{src:f,width:"20",alt:"네 번째 단계"},null,-1)),l[14]||(l[14]=n()),i(r,{href:"/kmp/multiplatform-upgrade-app",summary:"이 튜토리얼은 IntelliJ IDEA를 사용하지만, Android Studio에서도 따라 할 수 있습니다. 두 IDE는 동일한 핵심 기능과 Kotlin 멀티플랫폼 지원을 공유합니다. 이 문서는 공유 로직과 네이티브 UI를 사용하는 Kotlin 멀티플랫폼 앱 만들기 튜토리얼의 네 번째 부분입니다. 계속 진행하기 전에 이전 단계를 완료했는지 확인하세요. Kotlin 멀티플랫폼 앱 만들기 사용자 인터페이스 업데이트 종속성 추가 더 많은 로직 공유 프로젝트 마무리하기"},{default:o(()=>l[3]||(l[3]=[n("더 많은 로직 공유")])),_:1}),l[15]||(l[15]=t("br",null,null,-1)),l[16]||(l[16]=t("img",{src:a,width:"20",alt:"다섯 번째 단계"},null,-1)),l[17]||(l[17]=n()),l[18]||(l[18]=t("strong",null,"프로젝트 마무리하기",-1)),l[19]||(l[19]=t("br",null,null,-1))])]),_:1}),l[39]||(l[39]=t("p",null,"iOS와 Android에서 모두 작동하는 첫 번째 Kotlin 멀티플랫폼 앱을 만들었습니다! 이제 크로스 플랫폼 모바일 개발 환경을 설정하고, IntelliJ IDEA에서 프로젝트를 생성하고, 기기에서 앱을 실행하며, 기능을 확장하는 방법을 알게 되었습니다.",-1)),l[40]||(l[40]=t("p",null,"Kotlin 멀티플랫폼에 대한 경험을 쌓았으니, 이제 몇 가지 고급 주제를 살펴보고 추가적인 크로스 플랫폼 모바일 개발 작업을 수행할 수 있습니다.",-1)),t("table",null,[l[31]||(l[31]=t("tr",null,[t("th",null,"다음 단계"),t("th",null,"심층 학습")],-1)),t("tr",null,[t("td",null,[i(u,null,{default:o(()=>[t("li",null,[i(r,{href:"/kmp/multiplatform-run-tests",summary:"이 튜토리얼은 IntelliJ IDEA를 사용하지만, Android Studio에서도 따라 할 수 있습니다. 두 IDE는 동일한 핵심 기능과 Kotlin 멀티플랫폼 지원을 공유합니다."},{default:o(()=>l[21]||(l[21]=[n("Kotlin 멀티플랫폼 프로젝트에 테스트 추가하기")])),_:1})]),t("li",null,[i(r,{href:"/kmp/multiplatform-publish-apps",summary:"undefined"},{default:o(()=>l[22]||(l[22]=[n("모바일 애플리케이션을 앱 스토어에 게시하기")])),_:1})]),t("li",null,[i(r,{href:"/kmp/multiplatform-introduce-your-team",summary:"undefined"},{default:o(()=>l[23]||(l[23]=[n("팀에 크로스 플랫폼 모바일 개발 도입하기")])),_:1})]),l[24]||(l[24]=t("li",null,[t("a",{href:"https://klibs.io/"},"타겟 플랫폼에서 사용 가능한 Kotlin 멀티플랫폼 라이브러리 찾아보기")],-1)),l[25]||(l[25]=t("li",null,[t("a",{href:"https://github.com/terrakok/kmm-awesome"},"유용한 도구 및 리소스 목록 확인하기")],-1))]),_:1})]),t("td",null,[i(u,null,{default:o(()=>[t("li",null,[i(r,{href:"/kmp/multiplatform-discover-project",summary:"undefined"},{default:o(()=>l[26]||(l[26]=[n("Kotlin 멀티플랫폼 프로젝트 구조")])),_:1})]),l[30]||(l[30]=t("li",null,[t("a",{href:"https://kotlinlang.org/docs/native-objc-interop.html"},"Objective-C 프레임워크 및 라이브러리와의 상호 운용성")],-1)),t("li",null,[i(r,{href:"/kmp/multiplatform-add-dependencies",summary:"undefined"},{default:o(()=>l[27]||(l[27]=[n("멀티플랫폼 라이브러리 종속성 추가하기")])),_:1})]),t("li",null,[i(r,{href:"/kmp/multiplatform-android-dependencies",summary:"undefined"},{default:o(()=>l[28]||(l[28]=[n("Android 종속성 추가하기")])),_:1})]),t("li",null,[i(r,{href:"/kmp/multiplatform-ios-dependencies",summary:"undefined"},{default:o(()=>l[29]||(l[29]=[n("iOS 종속성 추가하기")])),_:1})])]),_:1})])])]),t("table",null,[l[37]||(l[37]=t("tr",null,[t("th",null,"튜토리얼 및 샘플"),t("th",null,"커뮤니티 및 피드백")],-1)),t("tr",null,[t("td",null,[i(u,null,{default:o(()=>[t("li",null,[i(r,{href:"/kmp/multiplatform-integrate-in-existing-app",summary:"이 튜토리얼은 Android Studio를 사용하지만, IntelliJ IDEA에서도 따라 할 수 있습니다. 올바르게 설정하면 두 IDE는 동일한 핵심 기능과 Kotlin 멀티플랫폼 지원을 공유합니다."},{default:o(()=>l[32]||(l[32]=[n("Android 앱을 크로스 플랫폼으로 만들기")])),_:1})]),t("li",null,[i(r,{href:"/kmp/multiplatform-ktor-sqldelight",summary:"이 튜토리얼은 IntelliJ IDEA를 사용하지만, Android Studio에서도 따라 할 수 있습니다. 두 IDE는 동일한 핵심 기능과 Kotlin 멀티플랫폼 지원을 공유합니다."},{default:o(()=>l[33]||(l[33]=[n("Ktor 및 SQLDelight를 사용하여 멀티플랫폼 앱 만들기")])),_:1})]),t("li",null,[i(r,{href:"/kmp/compose-multiplatform-create-first-app",summary:"이 튜토리얼은 IntelliJ IDEA를 사용하지만, Android Studio에서도 따라 할 수 있습니다. 두 IDE는 동일한 핵심 기능과 Kotlin 멀티플랫폼 지원을 공유합니다. 이 문서는 공유 로직과 UI를 사용하는 Compose 멀티플랫폼 앱 만들기 튜토리얼의 첫 번째 부분입니다. Compose 멀티플랫폼 앱 만들기 컴포저블 코드 탐색 프로젝트 수정 나만의 애플리케이션 만들기"},{default:o(()=>l[34]||(l[34]=[n("Compose Multiplatform를 사용하여 iOS와 Android 간 UI 공유하기")])),_:1})]),t("li",null,[i(r,{href:"/kmp/multiplatform-samples",summary:"undefined"},{default:o(()=>l[35]||(l[35]=[n("엄선된 샘플 프로젝트 목록 확인하기")])),_:1})])]),_:1})]),t("td",null,[i(u,null,{default:o(()=>l[36]||(l[36]=[t("li",null,[t("a",{href:"https://kotlinlang.slack.com/archives/C3PQML5NU"},"Kotlin Slack의 #multiplatform 채널 참여하기")],-1),t("li",null,[t("a",{href:"https://stackoverflow.com/questions/tagged/kotlin-multiplatform"},'Stack Overflow에서 "kotlin-multiplatform" 태그 구독하기')],-1),t("li",null,[t("a",{href:"https://www.youtube.com/playlist?list=PLlFc5cFwUnmy_oVc9YQzjasSNoAk4hk_C"},"Kotlin YouTube 채널 구독하기")],-1),t("li",null,[t("a",{href:"https://youtrack.jetbrains.com/newIssue?project=KT"},"이슈 트래커에 문제 보고하기")],-1)])),_:1})])])])])}const x=k(A,[["render",y]]);export{j as __pageData,x as default};
