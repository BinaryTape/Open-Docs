import{_ as r,a as o,b as d,c as E,d as g,e as c}from"./chunks/native-output-gutter-3.D2hCv83U.js";import{_ as y,C as h,c as u,o as F,ag as n,j as i,G as l,a as s,w as t}from"./chunks/framework.Bksy39di.js";const q=JSON.parse('{"title":"開始使用 Kotlin/Native","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/native-get-started.md","filePath":"zh-Hant/kotlin/native-get-started.md","lastUpdated":1754307826000}'),b={name:"zh-Hant/kotlin/native-get-started.md"};function m(v,a,C,A,f,D){const p=h("shortcut"),e=h("tab"),k=h("tabs");return F(),u("div",null,[a[13]||(a[13]=n(`<h1 id="開始使用-kotlin-native" tabindex="-1">開始使用 Kotlin/Native <a class="header-anchor" href="#開始使用-kotlin-native" aria-label="Permalink to &quot;開始使用 Kotlin/Native&quot;">​</a></h1><p>在本教學中，您將學習如何建立 Kotlin/Native 應用程式。選擇最適合您的工具，並使用以下方式建立您的應用程式：</p><ul><li><p><strong><a href="#in-ide">IDE</a></strong>。在這裡，您可以從版本控制系統複製專案範本，並在 IntelliJ IDEA 中使用它。</p></li><li><p><strong><a href="#using-gradle">Gradle 建置系統</a></strong>。為了更好地理解底層運作方式，請手動為您的專案建立建置檔案。</p></li><li><p><strong><a href="#using-the-command-line-compiler">命令列工具</a></strong>。您可以使用 Kotlin/Native 編譯器，它是標準 Kotlin 發行版的一部分，並直接在命令列工具中建立應用程式。</p><p>主控台編譯可能看起來簡單明瞭，但對於包含數百個檔案和函式庫的大型專案而言，其擴展性不佳。對於此類專案，我們建議使用 IDE 或建置系統。</p></li></ul><p>透過 Kotlin/Native，您可以為<a href="/zh-Hant/kotlin/native-target-support">不同的目標平台</a>編譯，包括 Linux、macOS 和 Windows。雖然跨平台編譯是可能的，這意味著使用一個平台來編譯另一個平台的程式碼，但在本教學中，您將針對您正在編譯的相同平台。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>如果您使用 Mac，並且想要建立和執行適用於 macOS 或其他 Apple 目標平台的應用程式，您還需要先安裝 <a href="https://developer.apple.com/download/" target="_blank" rel="noreferrer">Xcode Command Line Tools</a>，啟動它，並接受許可條款。</p></div><h2 id="在-ide-中" tabindex="-1">在 IDE 中 <a class="header-anchor" href="#在-ide-中" aria-label="Permalink to &quot;在 IDE 中&quot;">​</a></h2><p>在本節中，您將學習如何使用 IntelliJ IDEA 建立 Kotlin/Native 應用程式。您可以同時使用 Community Edition 和 Ultimate Edition。</p><h3 id="建立專案" tabindex="-1">建立專案 <a class="header-anchor" href="#建立專案" aria-label="Permalink to &quot;建立專案&quot;">​</a></h3><ol><li><p>下載並安裝最新版本的 <a href="https://www.jetbrains.com/idea/" target="_blank" rel="noreferrer">IntelliJ IDEA</a>。</p></li><li><p>在 IntelliJ IDEA 中選擇 <strong>File</strong> | <strong>New</strong> | <strong>Project from Version Control</strong> (檔案 | 新增 | 從版本控制建立專案) 並使用此 URL，複製<a href="https://github.com/Kotlin/kmp-native-wizard" target="_blank" rel="noreferrer">專案範本</a>：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>https://github.com/Kotlin/kmp-native-wizard</span></span></code></pre></div></li><li><p>開啟 <code>gradle/libs.versions.toml</code> 檔案，它是專案依賴項的版本目錄。要建立 Kotlin/Native 應用程式，您需要 Kotlin Multiplatform Gradle 外掛程式，其版本與 Kotlin 相同。請確保您使用最新的 Kotlin 版本：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[versions]</span></span>
<span class="line"><span>kotlin = &quot;2.2.10&quot;</span></span></code></pre></div></li><li><p>依照建議重新載入 Gradle 檔案：</p><p><img src="`+r+'" alt="載入 Gradle 變更按鈕" width="295"></p></li></ol><p>有關這些設定的更多資訊，請參閱 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-dsl-reference.html" target="_blank" rel="noreferrer">Multiplatform Gradle DSL 參考</a>。</p><h3 id="建置並執行應用程式" tabindex="-1">建置並執行應用程式 <a class="header-anchor" href="#建置並執行應用程式" aria-label="Permalink to &quot;建置並執行應用程式&quot;">​</a></h3><p>開啟 <code>src/nativeMain/kotlin/</code> 目錄中的 <code>Main.kt</code> 檔案：</p><ul><li><code>src</code> 目錄包含 Kotlin 原始碼檔案。</li><li><code>Main.kt</code> 檔案包含使用 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.io/println.html" target="_blank" rel="noreferrer"><code>println()</code></a> 函式列印「Hello, Kotlin/Native!」的程式碼。</li></ul><p>按下側邊欄中的綠色圖示以執行程式碼：</p><p><img src="'+o+'" alt="執行應用程式" width="478"></p><p>IntelliJ IDEA 使用 Gradle 任務執行程式碼，並在 <strong>Run</strong> (執行) 分頁中輸出結果：</p><p><img src="'+d+'" alt="應用程式輸出" width="331"></p><p>首次執行後，IDE 會在頂部建立對應的執行組態：</p><p><img src="'+E+'" alt="Gradle 執行組態" width="503"></p><blockquote><p>IntelliJ IDEA Ultimate 使用者可以安裝 <a href="https://plugins.jetbrains.com/plugin/12775-native-debugging-support" target="_blank" rel="noreferrer">Native Debugging Support</a> 外掛程式，該外掛程式允許除錯已編譯的原生執行檔，並自動為匯入的 Kotlin/Native 專案建立執行組態。</p></blockquote><p>您可以<a href="https://www.jetbrains.com/help/idea/compiling-applications.html#auto-build" target="_blank" rel="noreferrer">設定 IntelliJ IDEA</a> 以自動建置您的專案：</p><ol><li>前往 <strong>Settings | Build, Execution, Deployment | Compiler</strong> (設定 | 建置、執行、部署 | 編譯器)。</li><li>在 <strong>Compiler</strong> (編譯器) 頁面，選擇 <strong>Build project automatically</strong> (自動建置專案)。</li><li>套用變更。</li></ol>',22)),i("p",null,[a[2]||(a[2]=s("現在，當您在類別檔案中進行變更或儲存檔案 (")),l(p,null,{default:t(()=>a[0]||(a[0]=[s("Ctrl + S")])),_:1}),a[3]||(a[3]=s("/")),l(p,null,{default:t(()=>a[1]||(a[1]=[s("Cmd + S")])),_:1}),a[4]||(a[4]=s(") 時，IntelliJ IDEA 會自動對專案執行增量建置。"))]),a[14]||(a[14]=n(`<h3 id="更新應用程式" tabindex="-1">更新應用程式 <a class="header-anchor" href="#更新應用程式" aria-label="Permalink to &quot;更新應用程式&quot;">​</a></h3><p>讓我們為您的應用程式新增一個功能，使其可以計算您姓名中的字母數量：</p><ol><li><p>在 <code>Main.kt</code> 檔案中，新增程式碼以讀取輸入。使用 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.io/readln.html" target="_blank" rel="noreferrer"><code>readln()</code></a> 函式讀取輸入值並將其指派給 <code>name</code> 變數：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 讀取輸入值。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, enter your name:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> readln</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>要使用 Gradle 執行此應用程式，請在 <code>build.gradle.kts</code> 檔案中指定 <code>System.in</code> 作為要使用的輸入，並載入 Gradle 變更：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    nativeTarget.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        binaries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                entryPoint </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;main&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                runTask?.standardInput </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> System.\`</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>消除空白字元並計算字母數量：</p><ul><li>使用 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/replace.html" target="_blank" rel="noreferrer"><code>replace()</code></a> 函式移除姓名中的空白。</li><li>使用作用域函式 <a href="/zh-Hant/kotlin/scope-functions#let"><code>let</code></a> 在物件上下文 (object context) 中執行函式。</li><li>使用<a href="/zh-Hant/kotlin/strings#string-templates">字串範本</a>將您姓名的長度插入字串中，方法是新增錢號並將其括在花括號中 – <code>\${it.length}</code>。<code>it</code> 是<a href="/zh-Hant/kotlin/coding-conventions#lambda-parameters">lambda 參數</a>的預設名稱。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 讀取輸入值。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, enter your name:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> readln</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 計算姓名中的字母數。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot; &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;您的姓名包含 \${it.length} 個字母&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>執行應用程式。</p></li><li><p>輸入您的姓名並享受結果：</p><p><img src="`+g+`" alt="應用程式輸出" width="422"></p></li></ol><p>現在讓我們只計算您姓名中的唯一字母：</p><ol><li><p>在 <code>Main.kt</code> 檔案中，為 <code>String</code> 宣告新的<a href="/zh-Hant/kotlin/extensions#extension-functions">擴充函式</a> <code>.countDistinctCharacters()</code>：</p><ul><li>使用 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/lowercase.html" target="_blank" rel="noreferrer"><code>.lowercase()</code></a> 函式將姓名轉換為小寫。</li><li>使用 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/to-list.html" target="_blank" rel="noreferrer"><code>toList()</code></a> 函式將輸入字串轉換為字元清單。</li><li>使用 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/distinct.html" target="_blank" rel="noreferrer"><code>distinct()</code></a> 函式選取姓名中所有唯一的字元。</li><li>使用 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/count.html" target="_blank" rel="noreferrer"><code>count()</code></a> 函式計算唯一字元的數量。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">countDistinctCharacters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lowercase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">distinct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div></li><li><p>使用 <code>.countDistinctCharacters()</code> 函式計算您姓名中的唯一字母：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">countDistinctCharacters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lowercase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">distinct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 讀取輸入值。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, enter your name:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> readln</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 計算姓名中的字母數。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot; &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;您的姓名包含 \${it.length} 個字母&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 列印唯一字母的數量。</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;您的姓名包含 \${it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">countDistinctCharacters</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">()} 個唯一字母&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>執行應用程式。</p></li><li><p>輸入您的姓名並查看結果：</p><p><img src="`+c+'" alt="應用程式輸出" width="422"></p></li></ol><h2 id="使用-gradle" tabindex="-1">使用 Gradle <a class="header-anchor" href="#使用-gradle" aria-label="Permalink to &quot;使用 Gradle&quot;">​</a></h2><p>在本節中，您將學習如何使用 <a href="https://gradle.org" target="_blank" rel="noreferrer">Gradle</a> 手動建立 Kotlin/Native 應用程式。它是 Kotlin/Native 和 Kotlin Multiplatform 專案的預設建置系統，也常用於 Java、Android 和其他生態系統。</p><h3 id="建立專案檔案" tabindex="-1">建立專案檔案 <a class="header-anchor" href="#建立專案檔案" aria-label="Permalink to &quot;建立專案檔案&quot;">​</a></h3>',8)),i("ol",null,[a[9]||(a[9]=i("li",null,[i("p",null,[s("首先，安裝相容的 "),i("a",{href:"https://gradle.org/install/",target:"_blank",rel:"noreferrer"},"Gradle"),s(" 版本。請參閱"),i("a",{href:"/zh-Hant/kotlin/gradle-configure-project#apply-the-plugin"},"相容性表格"),s("以檢查 Kotlin Gradle 外掛程式 (KGP) 與可用 Gradle 版本的相容性。")])],-1)),i("li",null,[a[7]||(a[7]=i("p",null,[s("建立一個空的專案目錄。在其中，建立一個包含以下內容的 "),i("code",null,"build.gradle(.kts)"),s(" 檔案：")],-1)),l(k,{group:"build-script"},{default:t(()=>[l(e,{title:"Kotlin","group-key":"kotlin"},{default:t(()=>a[5]||(a[5]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// build.gradle.kts")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"plugins"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"multiplatform"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") version "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"2.2.10"')]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"repositories"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    mavenCentral"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    macosArm64"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"native"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {  "),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// 在 macOS 上")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},'    // linuxArm64("native")'),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}}," // 在 Linux 上")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},'    // mingwX64("native")'),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"   // 在 Windows 上")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"        binaries"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"            executable"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withType"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"Wrapper"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"> {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    gradleVersion "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},' "8.14"')]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    distributionType "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," Wrapper.DistributionType.BIN")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),l(e,{title:"Groovy","group-key":"groovy"},{default:t(()=>a[6]||(a[6]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// build.gradle")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"plugins {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    id "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'org.jetbrains.kotlin.multiplatform'"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," version "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'2.2.10'")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"repositories {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    mavenCentral()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"kotlin {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    macosArm64("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'native'"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {  "),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// 在 macOS 上")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"    // linuxArm64('native')"),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}}," // 在 Linux 上")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"    // mingwX64('native')"),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"   // 在 Windows 上")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        binaries {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            executable()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"wrapper {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    gradleVersion "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," '8.14'")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    distributionType "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," 'BIN'")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),a[8]||(a[8]=n('<p>您可以使用不同的<a href="/zh-Hant/kotlin/native-target-support">目標名稱</a>，例如 <code>macosArm64</code>、<code>iosArm64</code>、<code>linuxArm64</code> 和 <code>mingwX64</code> 來定義您要編譯程式碼的目標平台。這些目標名稱可以選擇性地將平台名稱作為參數，在本例中為 <code>native</code>。平台名稱用於在專案中產生原始碼路徑和任務名稱。</p>',1))]),a[10]||(a[10]=n(`<li><p>在專案目錄中建立一個空的 <code>settings.gradle(.kts)</code> 檔案。</p></li><li><p>建立 <code>src/nativeMain/kotlin</code> 目錄，並在其中放置一個包含以下內容的 <code>hello.kt</code> 檔案：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, Kotlin/Native!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 列印 &quot;Hello, Kotlin/Native!&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li>`,2))]),a[15]||(a[15]=n(`<p>按照慣例，所有原始碼都位於 <code>src/&lt;target name&gt;[Main|Test]/kotlin</code> 目錄中，其中 <code>Main</code> 用於原始碼，<code>Test</code> 用於測試。<code>&lt;target name&gt;</code> 對應於目標平台 (在本例中為 <code>native</code>)，如建置檔案中所指定。</p><h3 id="建置並執行專案" tabindex="-1">建置並執行專案 <a class="header-anchor" href="#建置並執行專案" aria-label="Permalink to &quot;建置並執行專案&quot;">​</a></h3><ol><li><p>從根專案目錄執行建置命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nativeBinaries</span></span></code></pre></div><p>此命令會建立 <code>build/bin/native</code> 目錄，其中包含兩個子目錄：<code>debugExecutable</code> 和 <code>releaseExecutable</code>。它們包含對應的二進位檔案。</p><p>預設情況下，二進位檔案的名稱與專案目錄相同。</p></li><li><p>要執行專案，請執行以下命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build/bin/native/debugExecutable/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;project_name&gt;.kexe</span></span></code></pre></div></li></ol><p>終端機將列印「Hello, Kotlin/Native!」。</p><h3 id="在-ide-中開啟專案" tabindex="-1">在 IDE 中開啟專案 <a class="header-anchor" href="#在-ide-中開啟專案" aria-label="Permalink to &quot;在 IDE 中開啟專案&quot;">​</a></h3><p>現在，您可以在任何支援 Gradle 的 IDE 中開啟您的專案。如果您使用 IntelliJ IDEA：</p><ol><li>選擇 <strong>File</strong> | <strong>Open</strong> (檔案 | 開啟)。</li><li>選取專案目錄並點擊 <strong>Open</strong> (開啟)。IntelliJ IDEA 會自動偵測它是否為 Kotlin/Native 專案。</li></ol><p>如果您遇到專案問題，IntelliJ IDEA 會在 <strong>Build</strong> (建置) 分頁中顯示錯誤訊息。</p><h2 id="使用命令列編譯器" tabindex="-1">使用命令列編譯器 <a class="header-anchor" href="#使用命令列編譯器" aria-label="Permalink to &quot;使用命令列編譯器&quot;">​</a></h2><p>在本節中，您將學習如何使用命令列工具中的 Kotlin 編譯器建立 Kotlin/Native 應用程式。</p><h3 id="下載並安裝編譯器" tabindex="-1">下載並安裝編譯器 <a class="header-anchor" href="#下載並安裝編譯器" aria-label="Permalink to &quot;下載並安裝編譯器&quot;">​</a></h3><p>要安裝編譯器：</p><ol><li><p>前往 Kotlin 的 <a href="https://github.com/JetBrains/kotlin/releases/tag/v2.2.10" target="_blank" rel="noreferrer">GitHub 發佈</a> 頁面，然後向下捲動到 <strong>Assets</strong> (資產) 區段。</p></li><li><p>尋找名稱中包含 <code>kotlin-native</code> 的檔案，並下載適用於您作業系統的檔案，例如 <code>kotlin-native-prebuilt-linux-x86_64-2.2.10.tar.gz</code>。</p></li><li><p>將壓縮檔解壓縮到您選擇的目錄。</p></li><li><p>開啟您的 shell 設定檔，並將編譯器 <code>/bin</code> 目錄的路徑新增到 <code>PATH</code> 環境變數中：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PATH</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/&lt;path to the compiler&gt;/kotlin-native/bin:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$PATH</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span></code></pre></div></li></ol><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>雖然編譯器輸出沒有依賴項或虛擬機器要求，但編譯器本身需要 Java 1.8 或更高版本的執行環境。它由 <a href="https://www.oracle.com/java/technologies/downloads/" target="_blank" rel="noreferrer">JDK 8 (JAVA SE 8) 或更高版本</a>支援。</p></div><h3 id="建立程式" tabindex="-1">建立程式 <a class="header-anchor" href="#建立程式" aria-label="Permalink to &quot;建立程式&quot;">​</a></h3><p>選擇一個工作目錄，並建立一個名為 <code>hello.kt</code> 的檔案。使用以下程式碼更新它：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, Kotlin/Native!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 列印 &quot;Hello, Kotlin/Native!&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="從主控台編譯程式碼" tabindex="-1">從主控台編譯程式碼 <a class="header-anchor" href="#從主控台編譯程式碼" aria-label="Permalink to &quot;從主控台編譯程式碼&quot;">​</a></h3><p>要編譯應用程式，請使用下載的編譯器執行以下命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlinc-native</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.kt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello</span></span></code></pre></div><p><code>-o</code> 選項的值指定輸出檔案的名稱，因此此呼叫會在 macOS 和 Linux 上產生 <code>hello.kexe</code> 二進位檔案 (在 Windows 上則為 <code>hello.exe</code>)。</p><p>有關可用選項的完整列表，請參閱 <a href="/zh-Hant/kotlin/compiler-reference">Kotlin 編譯器選項</a>。</p><h3 id="執行程式" tabindex="-1">執行程式 <a class="header-anchor" href="#執行程式" aria-label="Permalink to &quot;執行程式&quot;">​</a></h3><p>要執行程式，在您的命令列工具中，導覽至包含二進位檔案的目錄並執行以下命令：</p>`,24)),l(k,null,{default:t(()=>[l(e,{title:"macOS 和 Linux"},{default:t(()=>a[11]||(a[11]=[i("div",{class:"language-none vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"none"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",null,"./hello.kexe")])])])],-1)])),_:1}),l(e,{title:"Windows"},{default:t(()=>a[12]||(a[12]=[i("div",{class:"language-none vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"none"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",null,"./hello.exe")])])])],-1)])),_:1})]),_:1}),a[16]||(a[16]=n('<p>應用程式會將「Hello, Kotlin/Native」列印到標準輸出。</p><h2 id="下一步是什麼" tabindex="-1">下一步是什麼？ <a class="header-anchor" href="#下一步是什麼" aria-label="Permalink to &quot;下一步是什麼？&quot;">​</a></h2><ul><li>完成<a href="/zh-Hant/kotlin/native-app-with-c-and-libcurl">使用 C 互通性與 libcurl 建立應用程式</a>教學，其中解釋了如何建立原生 HTTP 用戶端以及與 C 函式庫互通。</li><li>學習如何<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-dsl-reference.html" target="_blank" rel="noreferrer">為實際的 Kotlin/Native 專案編寫 Gradle 建置指令碼</a>。</li><li>在<a href="/zh-Hant/kotlin/gradle">文件中</a>閱讀更多關於 Gradle 建置系統的資訊。</li></ul>',3))])}const x=y(b,[["render",m]]);export{q as __pageData,x as default};
