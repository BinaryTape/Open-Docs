import{_ as p,a as h,b as k}from"./chunks/variable-optimised-out.gsL8I0ER.js";import{_ as d,a as g,b as c,c as E}from"./chunks/coroutine-debug-3.D_74SQPz.js";import{_ as u,C as e,c as y,o as m,ag as o,G as a,w as n,j as i,a as t}from"./chunks/framework.Bksy39di.js";const I=JSON.parse('{"title":"使用 IntelliJ IDEA 调试协程 – 教程","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/debug-coroutines-with-idea.md","filePath":"kotlin/debug-coroutines-with-idea.md","lastUpdated":1754307826000}'),F={name:"kotlin/debug-coroutines-with-idea.md"};function b(_,s,C,f,x,B){const l=e("tab"),r=e("tabs");return m(),y("div",null,[s[2]||(s[2]=o('<h1 id="使用-intellij-idea-调试协程-–-教程" tabindex="-1">使用 IntelliJ IDEA 调试协程 – 教程 <a class="header-anchor" href="#使用-intellij-idea-调试协程-–-教程" aria-label="Permalink to &quot;使用 IntelliJ IDEA 调试协程 – 教程&quot;">​</a></h1><p>本教程演示了如何创建 Kotlin 协程并使用 IntelliJ IDEA 调试它们。</p><p>本教程假定你已对<a href="/kotlin/coroutines-guide">协程</a>概念有预备知识。</p><h2 id="创建协程" tabindex="-1">创建协程 <a class="header-anchor" href="#创建协程" aria-label="Permalink to &quot;创建协程&quot;">​</a></h2><ol><li>在 IntelliJ IDEA 中打开一个 Kotlin 项目。如果你没有项目，请<a href="/kotlin/jvm-get-started#create-a-project">创建一个</a>。</li><li>要在 Gradle 项目中使用 <code>kotlinx.coroutines</code> 库，请将以下依赖项添加到 <code>build.gradle(.kts)</code> 中：</li></ol>',5)),a(r,{group:"build-script"},{default:n(()=>[a(l,{title:"Kotlin","group-key":"kotlin"},{default:n(()=>s[0]||(s[0]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"dependencies"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),t(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    implementation"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"org.jetbrains.kotlinx:kotlinx-coroutines-core:1.10.2"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),t(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),a(l,{title:"Groovy","group-key":"groovy"},{default:n(()=>s[1]||(s[1]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"dependencies {")]),t(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    implementation "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.10.2'")]),t(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),s[3]||(s[3]=o(`<p>对于其他构建系统，请参阅 <a href="https://github.com/Kotlin/kotlinx.coroutines#using-in-your-projects" target="_blank" rel="noreferrer"><code>kotlinx.coroutines</code> README</a> 中的说明。</p><ol start="3"><li><p>打开 <code>src/main/kotlin</code> 目录中的 <code>Main.kt</code> 文件。</p><p><code>src</code> 目录包含 Kotlin 源文件和资源。<code>Main.kt</code> 文件包含将打印 <code>Hello World!</code> 的示例代码。</p></li><li><p>更改 <code>main()</code> 函数中的代码：</p><ul><li>使用 <a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/run-blocking.html" target="_blank" rel="noreferrer"><code>runBlocking()</code></a> 代码块来包裹一个协程。</li><li>使用 <a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/async.html" target="_blank" rel="noreferrer"><code>async()</code></a> 函数创建计算延迟值 <code>a</code> 和 <code>b</code> 的协程。</li><li>使用 <a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-deferred/await.html" target="_blank" rel="noreferrer"><code>await()</code></a> 函数等待计算结果。</li><li>使用 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.io/println.html" target="_blank" rel="noreferrer"><code>println()</code></a> 函数向输出打印计算状态和乘法结果。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.coroutines.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> runBlocking</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;I&#39;m computing part of the answer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        6</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> async</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;I&#39;m computing another part of the answer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        7</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;The answer is \${a.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">await</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> b.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">await</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">()}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>通过点击 <strong>构建项目</strong> 来构建代码。</p><p><img src="`+p+'" alt="构建应用程序"></p></li></ol><h2 id="调试协程" tabindex="-1">调试协程 <a class="header-anchor" href="#调试协程" aria-label="Permalink to &quot;调试协程&quot;">​</a></h2><ol><li><p>在 <code>println()</code> 函数调用的行上设置断点：</p><p><img src="'+d+'" alt="构建控制台应用程序"></p></li><li><p>通过点击屏幕顶部运行配置旁边的 <strong>调试</strong> 来在调试模式下运行代码。</p><p><img src="'+h+'" alt="构建控制台应用程序"></p><p><strong>调试</strong> 工具窗口出现：</p><ul><li><strong>帧</strong> 选项卡包含调用栈。</li><li><strong>变量</strong> 选项卡包含当前上下文中的变量。</li><li><strong>协程</strong> 选项卡包含运行中或挂起中的协程的信息。它显示有三个协程。 第一个协程处于 <strong>RUNNING</strong> (运行中) 状态，另外两个处于 <strong>CREATED</strong> (已创建) 状态。</li></ul><p><img src="'+g+'" alt="调试协程"></p></li><li><p>通过点击 <strong>调试</strong> 工具窗口中的 <strong>恢复程序</strong> 来恢复调试器会话：</p><p><img src="'+c+'" alt="调试协程"></p><p>现在 <strong>协程</strong> 选项卡显示以下内容：</p><ul><li>第一个协程处于 <strong>SUSPENDED</strong> (挂起) 状态 – 它正在等待这些值以便它可以将它们相乘。</li><li>第二个协程正在计算 <code>a</code> 值 – 它处于 <strong>RUNNING</strong> (运行中) 状态。</li><li>第三个协程处于 <strong>CREATED</strong> (已创建) 状态，并且没有计算 <code>b</code> 值。</li></ul></li><li><p>通过点击 <strong>调试</strong> 工具窗口中的 <strong>恢复程序</strong> 来恢复调试器会话：</p><p><img src="'+E+'" alt="构建控制台应用程序"></p><p>现在 <strong>协程</strong> 选项卡显示以下内容：</p><ul><li>第一个协程处于 <strong>SUSPENDED</strong> (挂起) 状态 – 它正在等待这些值以便它可以将它们相乘。</li><li>第二个协程已经计算出其值并消失了。</li><li>第三个协程正在计算 <code>b</code> 值 – 它处于 <strong>RUNNING</strong> (运行中) 状态。</li></ul></li></ol><p>使用 IntelliJ IDEA 调试器，你可以深入探查每个协程以调试你的代码。</p><h3 id="被优化掉的变量" tabindex="-1">被优化掉的变量 <a class="header-anchor" href="#被优化掉的变量" aria-label="Permalink to &quot;被优化掉的变量&quot;">​</a></h3><p>如果你使用 <code>suspend</code> 函数，在调试器中，你可能会在变量名旁边看到“was optimized out”文本：</p><p><img src="'+k+'" alt="变量 &quot;a&quot; 被优化掉" width="480"></p><p>此文本意味着变量的生命周期被缩短，并且该变量不再存在了。 调试含有被优化掉的变量的代码是困难的，因为你无法看到它们的值。 你可以通过 <code>-Xdebug</code> 编译器选项禁用此行为。</p><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p><strong>切勿在生产环境中使用此标志</strong>：<code>-Xdebug</code> <a href="https://youtrack.jetbrains.com/issue/KT-48678/Coroutine-debugger-disable-was-optimised-out-compiler-feature#focus=Comments-27-6015585.0-0" target="_blank" rel="noreferrer">可能导致内存泄漏</a>。</p></div>',10))])}const N=u(F,[["render",b]]);export{I as __pageData,N as default};
