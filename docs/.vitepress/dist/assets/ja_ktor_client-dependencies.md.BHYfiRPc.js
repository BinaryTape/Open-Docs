import{_ as E,C as l,c as y,o as m,j as t,G as i,ag as r,a as o,w as n}from"./chunks/framework.Bksy39di.js";const K=JSON.parse('{"title":"クライアントの依存関係を追加する","description":"","frontmatter":{},"headers":[],"relativePath":"ja/ktor/client-dependencies.md","filePath":"ja/ktor/client-dependencies.md","lastUpdated":1755457140000}'),v={name:"ja/ktor/client-dependencies.md"};function _(f,e,b,F,q,A){const h=l("show-structure"),c=l("link-summary"),d=l("control"),s=l("code-block"),a=l("TabItem"),g=l("note"),p=l("Tabs"),k=l("list"),u=l("chapter");return m(),y("div",null,[e[10]||(e[10]=t("h1",{id:"クライアントの依存関係を追加する",tabindex:"-1"},[o("クライアントの依存関係を追加する "),t("a",{class:"header-anchor",href:"#クライアントの依存関係を追加する","aria-label":'Permalink to "クライアントの依存関係を追加する"'},"​")],-1)),i(h,{for:"chapter",depth:"2"}),i(c,null,{default:n(()=>e[0]||(e[0]=[o("既存プロジェクトにクライアントの依存関係を追加する方法を学びます。")])),_:1}),e[11]||(e[11]=r('<p>プロジェクトでKtor HTTPクライアントを使用するには、<a href="#repositories">リポジトリを設定</a>し、以下の依存関係を追加する必要があります。</p><ul><li><p><strong><a href="#client-dependency">ktor-client-core</a></strong></p><p><code>ktor-client-core</code> には Ktor クライアントのコア機能が含まれています。</p></li><li><p><strong><a href="#engine-dependency">エンジン依存関係</a></strong></p><p>エンジンはネットワークリクエストを処理するために使用されます。 <a href="./client-supported-platforms">特定のプラットフォーム</a>では、ネットワークリクエストを処理する特定のエンジンが必要になる場合があることに注意してください。</p></li><li><p>(任意) <strong><a href="#logging-dependency">ロギング依存関係</a></strong></p><p>構造化された柔軟なロギング機能を有効にするためのロギングフレームワークを提供します。</p></li><li><p>(任意) <strong><a href="#plugin-dependency">プラグイン依存関係</a></strong></p><p>プラグインは、クライアントを特定の機能で拡張するために使用されます。</p></li></ul><p> Ktor の依存関係を追加する前に、このプロジェクトのリポジトリを設定する必要があります。 </p>',3)),i(k,null,{default:n(()=>[t("li",null,[t("p",null,[i(d,null,{default:n(()=>e[1]||(e[1]=[o("本番環境")])),_:1})]),e[3]||(e[3]=t("p",null," Ktor の本番リリースは Maven セントラルリポジトリで入手できます。 このリポジトリは、ビルドスクリプトで次のように宣言できます。 ",-1)),i(p,{group:"languages"},{default:n(()=>[i(a,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[i(s,{lang:"Kotlin",code:`                    repositories {
                        mavenCentral()
                    }`})]),_:1}),i(a,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[i(s,{lang:"Groovy",code:`                    repositories {
                        mavenCentral()
                    }`})]),_:1}),i(a,{title:"Maven","group-key":"maven"},{default:n(()=>[i(g,null,{default:n(()=>e[2]||(e[2]=[t("p",null,[o(" プロジェクトが "),t("a",{href:"https://maven.apache.org/guides/introduction/introduction-to-the-pom.html#super-pom"},"Super POM"),o(" からセントラルリポジトリを継承しているため、"),t("path",null,"pom.xml"),o(" ファイルに Maven セントラルリポジトリを追加する必要はありません。 ")],-1)])),_:1})]),_:1})]),_:1})]),t("li",null,[t("p",null,[i(d,null,{default:n(()=>e[4]||(e[4]=[o("早期アクセスプログラム (EAP)")])),_:1})]),e[5]||(e[5]=t("p",null,[o(" Ktor の "),t("a",{href:"https://ktor.io/eap/"},"EAP"),o(" バージョンにアクセスするには、"),t("a",{href:"https://maven.pkg.jetbrains.space/public/p/ktor/eap/io/ktor/"},"Space リポジトリ"),o("を参照する必要があります。 ")],-1)),i(p,{group:"languages"},{default:n(()=>[i(a,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[i(s,{lang:"Kotlin",code:`                    repositories {
                        maven {
                            url = uri("https://maven.pkg.jetbrains.space/public/p/ktor/eap")
                        }
                    }`})]),_:1}),i(a,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[i(s,{lang:"Groovy",code:`                    repositories {
                        maven {
                            url "https://maven.pkg.jetbrains.space/public/p/ktor/eap"
                        }
                    }`})]),_:1}),i(a,{title:"Maven","group-key":"maven"},{default:n(()=>[i(s,{lang:"XML",code:`                    <repositories>
                        <repository>
                            <id>ktor-eap</id>
                            <url>https://maven.pkg.jetbrains.space/public/p/ktor/eap</url>
                        </repository>
                    </repositories>`})]),_:1})]),_:1}),e[6]||(e[6]=t("p",null,[o(" Ktor の EAP は、"),t("a",{href:"https://maven.pkg.jetbrains.space/kotlin/p/kotlin/dev"},"Kotlin dev リポジトリ"),o("を必要とする場合があることに注意してください。 ")],-1)),i(p,{group:"languages"},{default:n(()=>[i(a,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[i(s,{lang:"Kotlin",code:`                    repositories {
                        maven {
                            url = uri("https://maven.pkg.jetbrains.space/kotlin/p/kotlin/dev")
                        }
                    }`})]),_:1}),i(a,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[i(s,{lang:"Groovy",code:`                    repositories {
                        maven {
                            url "https://maven.pkg.jetbrains.space/kotlin/p/kotlin/dev"
                        }
                    }`})]),_:1}),i(a,{title:"Maven","group-key":"maven"},{default:n(()=>[i(s,{lang:"XML",code:`                    <repositories>
                        <repository>
                            <id>ktor-eap</id>
                            <url>https://maven.pkg.jetbrains.space/kotlin/p/kotlin/dev</url>
                        </repository>
                    </repositories>`})]),_:1})]),_:1})])]),_:1}),e[12]||(e[12]=r('<h2 id="add-ktor-dependencies" tabindex="-1">依存関係を追加する <a class="header-anchor" href="#add-ktor-dependencies" aria-label="Permalink to &quot;依存関係を追加する {id=&quot;add-ktor-dependencies&quot;}&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><a href="./client-supported-platforms">異なるプラットフォーム</a>向けに、Ktor は <code>-jvm</code> や <code>-js</code> などのサフィックスを持つプラットフォーム固有のアーティファクト（例: <code>ktor-client-core-jvm</code>）を提供しています。Gradle は特定のプラットフォームに適したアーティファクトを自動的に解決しますが、Maven はこの機能をサポートしていません。つまり、Maven の場合は、プラットフォーム固有のサフィックスを手動で追加する必要があります。</p></div><h3 id="client-dependency" tabindex="-1">クライアント依存関係 <a class="header-anchor" href="#client-dependency" aria-label="Permalink to &quot;クライアント依存関係 {id=&quot;client-dependency&quot;}&quot;">​</a></h3><p>主要なクライアント機能は <code>ktor-client-core</code> アーティファクトで利用できます。ビルドシステムに応じて、次のように追加できます。</p>',4)),i(p,{group:"languages"},{default:n(()=>[i(a,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[i(s,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-client-core:$ktor_version")'})]),_:1}),i(a,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[i(s,{lang:"Groovy",code:'            implementation "io.ktor:ktor-client-core:$ktor_version"'})]),_:1}),i(a,{title:"Maven","group-key":"maven"},{default:n(()=>[i(s,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-client-core-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),e[13]||(e[13]=r(`<p><code>$ktor_version</code> を必要な Ktor バージョンに置き換えることができます。例: <code>3.2.3</code>。</p><h4 id="client-dependency-multiplatform" tabindex="-1">マルチプラットフォーム <a class="header-anchor" href="#client-dependency-multiplatform" aria-label="Permalink to &quot;マルチプラットフォーム {id=&quot;client-dependency-multiplatform&quot;}&quot;">​</a></h4><p>マルチプラットフォームプロジェクトの場合、Ktor のバージョンと <code>ktor-client-core</code> アーティファクトを <code>gradle/libs.versions.toml</code> ファイルで定義できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[versions]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ktor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;3.2.3&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[libraries]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kotlin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">test </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { module </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;org.jetbrains.kotlin:kotlin-test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, version.ref </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;kotlin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ktor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">client</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">okhttp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { module </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;io.ktor:ktor-client-okhttp&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, version.ref </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;ktor&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div><p>次に、<code>ktor-client-core</code> を <code>commonMain</code> ソースセットへの依存関係として追加します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    commonMain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(libs.ktor.client.core)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="engine-dependency" tabindex="-1">エンジン依存関係 <a class="header-anchor" href="#engine-dependency" aria-label="Permalink to &quot;エンジン依存関係 {id=&quot;engine-dependency&quot;}&quot;">​</a></h3><p><a href="./client-engines">エンジン</a>はネットワークリクエストの処理を担当します。Apache、CIO、Android、iOS など、さまざまなプラットフォームで利用可能なクライアントエンジンがあります。たとえば、<code>CIO</code> エンジンの依存関係は次のように追加できます。</p>`,8)),i(p,{group:"languages"},{default:n(()=>[i(a,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[i(s,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-client-cio:$ktor_version")'})]),_:1}),i(a,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[i(s,{lang:"Groovy",code:'            implementation "io.ktor:ktor-client-cio:$ktor_version"'})]),_:1}),i(a,{title:"Maven","group-key":"maven"},{default:n(()=>[i(s,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-client-cio-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),e[14]||(e[14]=r(`<h4 id="engine-dependency-multiplatform" tabindex="-1">マルチプラットフォーム <a class="header-anchor" href="#engine-dependency-multiplatform" aria-label="Permalink to &quot;マルチプラットフォーム {id=&quot;engine-dependency-multiplatform&quot;}&quot;">​</a></h4><p>マルチプラットフォームプロジェクトの場合、必要なエンジンの依存関係を対応するソースセットに追加する必要があります。</p><p>たとえば、Android 用の <code>OkHttp</code> エンジン依存関係を追加するには、まず <code>gradle/libs.versions.toml</code> ファイルで Ktor のバージョンと <code>ktor-client-okhttp</code> アーティファクトを定義します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[versions]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ktor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;3.2.3&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[libraries]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kotlin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">test </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { module </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;org.jetbrains.kotlin:kotlin-test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, version.ref </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;kotlin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ktor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">client</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">darwin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { module </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;io.ktor:ktor-client-darwin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, version.ref </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;ktor&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div><p>次に、<code>ktor-client-okhttp</code> を <code>androidMain</code> ソースセットへの依存関係として追加します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    androidMain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(libs.ktor.client.okhttp)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>特定のエンジンに必要な依存関係の完全なリストについては、<a href="./client-engines#dependencies">エンジンの依存関係を追加する</a>を参照してください。</p><h3 id="ロギング依存関係" tabindex="-1">ロギング依存関係 <a class="header-anchor" href="#ロギング依存関係" aria-label="Permalink to &quot;ロギング依存関係&quot;">​</a></h3><p><a href="#jvm">JVM</a> では、Ktor はロギングの抽象化レイヤーとして Simple Logging Facade for Java (<a href="http://www.slf4j.org/">SLF4J</a>) を使用します。SLF4J はロギング API を基盤となるロギング実装から切り離し、 アプリケーションの要件に最適なロギングフレームワークを統合できるようにします。 一般的な選択肢には <a href="https://logback.qos.ch/">Logback</a> や <a href="https://logging.apache.org/log4j">Log4j</a> があります。フレームワークが提供されない場合、SLF4J はデフォルトで 何もしない (NOP) 実装になり、実質的にロギングが無効になります。 </p><p> ロギングを有効にするには、<a href="https://logback.qos.ch/">Logback</a> など、必要な SLF4J 実装を含むアーティファクトを含めます。 </p>`,10)),i(p,{group:"languages"},{default:n(()=>[i(a,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[i(s,{lang:"Kotlin",code:'              implementation("ch.qos.logback:logback-classic:$logback_version")'})]),_:1}),i(a,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[i(s,{lang:"Groovy",code:'              implementation "ch.qos.logback:logback-classic:$logback_version"'})]),_:1}),i(a,{title:"Maven","group-key":"maven"},{default:n(()=>[i(s,{lang:"XML",code:`              <dependency>
                  <groupId>ch.qos.logback</groupId>
                  <artifactId>logback-classic</artifactId>
                  <version>\${logback_version}</version>
              </dependency>`})]),_:1})]),_:1}),e[15]||(e[15]=r('<p>Ktor でのロギングの詳細については、<a href="./client-logging">Ktor クライアントでのロギング</a>を参照してください。</p><h3 id="plugin-dependency" tabindex="-1">プラグイン依存関係 <a class="header-anchor" href="#plugin-dependency" aria-label="Permalink to &quot;プラグイン依存関係 {id=&quot;plugin-dependency&quot;}&quot;">​</a></h3><p>Ktor では、認証やシリアライズなど、デフォルトでは利用できない追加のクライアント機能（<a href="./client-plugins">プラグイン</a>）を使用できます。これらのプラグインの一部は、個別のアーティファクトとして提供されています。必要なプラグインのトピックから、必要な依存関係を確認できます。</p><blockquote><p>マルチプラットフォームプロジェクトの場合、プラグインの依存関係は <code>commonMain</code> ソースセットに追加する必要があります。一部のプラグインには、特定のプラットフォームで<a href="./client-engines#limitations">制限</a>がある場合があることに注意してください。</p></blockquote><h2 id="ktor-のバージョンの一貫性を確保する" tabindex="-1">Ktor のバージョンの一貫性を確保する <a class="header-anchor" href="#ktor-のバージョンの一貫性を確保する" aria-label="Permalink to &quot;Ktor のバージョンの一貫性を確保する&quot;">​</a></h2>',5)),i(u,{title:"Ktor BOM 依存関係の使用"},{default:n(()=>[e[7]||(e[7]=t("p",null,"Ktor BOM を使用すると、各依存関係のバージョンを個別に指定することなく、すべての Ktor モジュールが同じ一貫したバージョンを使用していることを保証できます。",-1)),e[8]||(e[8]=t("p",null,"Ktor BOM 依存関係を追加するには、ビルドスクリプトで次のように宣言します。",-1)),i(p,{group:"languages"},{default:n(()=>[i(a,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[i(s,{lang:"Kotlin",code:'            implementation(platform("io.ktor:ktor-bom:$ktor_version"))'})]),_:1}),i(a,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[i(s,{lang:"Groovy",code:'            implementation platform "io.ktor:ktor-bom:$ktor_version"'})]),_:1}),i(a,{title:"Maven","group-key":"maven"},{default:n(()=>[i(s,{lang:"XML",code:`            <dependencyManagement>
              <dependencies>
                  <dependency>
                      <groupId>io.ktor</groupId>
                      <artifactId>ktor-bom</artifactId>
                      <version>3.2.3</version>
                      <type>pom</type>
                      <scope>import</scope>
                  </dependency>
              </dependencies>
          </dependencyManagement>`})]),_:1})]),_:1})]),_:1}),e[16]||(e[16]=t("p",null," 公開されたバージョンカタログを使用することで、Ktor の依存関係宣言を一元化することもできます。 このアプローチには、以下の利点があります。 ",-1)),i(k,{id:"published-version-catalog-benefits"},{default:n(()=>e[9]||(e[9]=[t("li",null," 独自のカタログで Ktor のバージョンを手動で宣言する必要がなくなります。 ",-1),t("li",null," すべての Ktor モジュールを単一のネームスペースの下で公開します。 ",-1)])),_:1}),e[17]||(e[17]=t("p",null,[o(" カタログを宣言するには、 "),t("path",null,"settings.gradle.kts"),o(" で選択した名前でバージョンカタログを作成します。 ")],-1)),i(s,{lang:"kotlin",code:`    dependencyResolutionManagement {
        versionCatalogs {
            create("ktorLibs") {
                from("io.ktor:ktor-version-catalog:3.2.3")
            }
        }
    }`}),e[18]||(e[18]=t("p",null,[o(" その後、モジュールの "),t("path",null,"build.gradle.kts"),o(" でカタログ名を参照して依存関係を追加できます。 ")],-1)),i(s,{lang:"kotlin",code:`    dependencies {
        implementation(ktorLibs.client.core)
        // ...
    }`})])}const T=E(v,[["render",_]]);export{K as __pageData,T as default};
