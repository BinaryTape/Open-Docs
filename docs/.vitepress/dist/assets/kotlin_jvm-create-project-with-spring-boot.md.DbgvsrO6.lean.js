import{_ as d}from"./chunks/icon-1.K8qzZaho.js";import{_ as g}from"./chunks/icon-2-todo.CF_tKCD9.js";import{_ as E}from"./chunks/icon-3-todo.Gx4op1du.js";import{_ as c}from"./chunks/icon-4-todo.GaeEmerm.js";import{_ as u,a as m,b as y,c as F,d as b}from"./chunks/spring-application-response.CubByq9P.js";import{_ as C,C as p,c as B,o as f,j as s,G as a,ag as e,a as i,w as l}from"./chunks/framework.Bksy39di.js";const J=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/jvm-create-project-with-spring-boot.md","filePath":"kotlin/jvm-create-project-with-spring-boot.md","lastUpdated":1755514048000}'),A={name:"kotlin/jvm-create-project-with-spring-boot.md"};function S(_,n,q,v,D,w){const r=p("web-summary"),k=p("tldr"),t=p("def"),o=p("deflist"),h=p("code-block");return f(),B("div",null,[n[14]||(n[14]=s("h1",{id:"使用-kotlin-创建-spring-boot-项目",tabindex:"-1"},[i("使用 Kotlin 创建 Spring Boot 项目 "),s("a",{class:"header-anchor",href:"#使用-kotlin-创建-spring-boot-项目","aria-label":'Permalink to "使用 Kotlin 创建 Spring Boot 项目"'},"​")],-1)),a(r,null,{default:l(()=>n[0]||(n[0]=[i("使用 IntelliJ IDEA 和 Kotlin 创建 Spring Boot 应用程序。")])),_:1}),a(k,null,{default:l(()=>n[1]||(n[1]=[s("p",null,[i("这是 "),s("strong",null,"Spring Boot 和 Kotlin 入门"),i(" 教程的第一部分：")],-1),s("br",null,null,-1),s("p",null,[s("img",{src:d,width:"20",alt:"第一步"}),i(),s("strong",null,"使用 Kotlin 创建 Spring Boot 项目"),s("br"),s("img",{src:g,width:"20",alt:"第二步"}),i(" 向 Spring Boot 项目添加数据类"),s("br"),s("img",{src:E,width:"20",alt:"第三步"}),i(" 为 Spring Boot 项目添加数据库支持"),s("br"),s("img",{src:c,width:"20",alt:"第四步"}),i(" 使用 Spring Data CrudRepository 访问数据库"),s("br")],-1)])),_:1}),n[15]||(n[15]=e("",8)),n[16]||(n[16]=s("h2",{"initial-collapse-state":"collapsed",collapsible:"true",id:"探查项目-gradle-构建文件",tabindex:"-1"},[i("探查项目 Gradle 构建文件 "),s("a",{class:"header-anchor",href:"#探查项目-gradle-构建文件","aria-label":'Permalink to "探查项目 Gradle 构建文件 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),n[17]||(n[17]=e("",10)),a(o,{collapsible:"true"},{default:l(()=>[a(t,{title:"声明类 – class DemoApplication"},{default:l(()=>n[2]||(n[2]=[s("p",null,[i("在包声明和导入语句之后，您会看到第一个类声明，"),s("code",null,"class DemoApplication"),i("。")],-1),s("p",null,[i("在 Kotlin 中，如果一个类不包含任何成员（属性或函数），您可以省略其类体（"),s("code",null,"{}"),i("）。")],-1)])),_:1}),a(t,{title:"@SpringBootApplication 注解"},{default:l(()=>n[3]||(n[3]=[s("p",null,[s("a",{href:"https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#using.using-the-springbootapplication-annotation"},[s("code",null,"@SpringBootApplication 注解")]),i(" 是 Spring Boot 应用程序中的一个便捷注解。 它启用 Spring Boot 的"),s("a",{href:"https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#using.auto-configuration"},"自动配置"),i("、"),s("a",{href:"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/ComponentScan.html"},"组件扫描"),i("，并能够在它们的“应用程序类”上定义额外的配置。 ")],-1)])),_:1}),a(t,{title:"程序入口点 – main()"},{default:l(()=>n[4]||(n[4]=[s("p",null,[s("code",null,"main()"),i(" 函数是应用程序的入口点。")],-1),s("p",null,[i("它被声明为 "),s("code",null,"DemoApplication"),i(" 类之外的"),s("a",{href:"/kotlin/functions#function-scope"},"顶层函数"),i("。"),s("code",null,"main()"),i(" 函数调用 Spring 的 "),s("code",null,"runApplication(*args)"),i(" 函数，以 Spring Framework 启动应用程序。")],-1)])),_:1}),a(t,{title:"可变实参 – args: Array<String>"},{default:l(()=>n[5]||(n[5]=[s("p",null,[i("如果您检测 "),s("code",null,"runApplication()"),i(" 函数的声明，会看到该函数的形参被 "),s("a",{href:"/kotlin/functions#variable-number-of-arguments-varargs"},[s("code",null,"vararg"),i(" 修饰符")]),i("标记："),s("code",null,"vararg args: String"),i("。 这意味着您可以向该函数传递可变数量的 String 实参。 ")],-1)])),_:1}),a(t,{title:"展开操作符 – (*args)"},{default:l(()=>n[6]||(n[6]=[s("p",null,[s("code",null,"args"),i(" 是 "),s("code",null,"main()"),i(" 函数的形参，被声明为 String 数组。 由于它是一个字符串数组，并且您希望将其内容传递给函数，请使用展开操作符（在数组前加上星号 "),s("code",null,"*"),i("）。 ")],-1)])),_:1})]),_:1}),n[18]||(n[18]=e("",4)),a(o,{collapsible:"true"},{default:l(()=>[a(t,{title:"@RestController 注解"},{default:l(()=>n[7]||(n[7]=[s("p",null,[i("您需要告诉 Spring "),s("code",null,"MessageController"),i(" 是一个 REST Controller，因此您应该使用 "),s("code",null,"@RestController"),i(" 注解对其进行标记。")],-1),s("p",null,[i("此注解意味着该类将被组件扫描识别，因为它与我们的 "),s("code",null,"DemoApplication"),i(" 类在同一个包中。")],-1)])),_:1}),a(t,{title:"@GetMapping 注解"},{default:l(()=>[n[9]||(n[9]=s("p",null,[s("code",null,"@GetMapping"),i(" 标记了实现与 HTTP GET 调用对应端点的 REST 控制器函数：")],-1)),a(h,{lang:"kotlin"},{default:l(()=>n[8]||(n[8]=[i(' @GetMapping("/") fun index(@RequestParam("name") name: String) = "Hello, $name!" ')])),_:1})]),_:1}),a(t,{title:"@RequestParam 注解"},{default:l(()=>n[10]||(n[10]=[s("p",null,[i("函数形参 "),s("code",null,"name"),i(" 被 "),s("code",null,"@RequestParam"),i(" 注解标记。此注解表明方法形参应绑定到 Web 请求形参。")],-1),s("p",null,[i("因此，如果您在根路径访问应用程序并提供名为“name”的请求形参，例如 "),s("code",null,"/?name=<your-value>"),i("，则该形参值将用作调用 "),s("code",null,"index()"),i(" 函数的实参。")],-1)])),_:1}),a(t,{title:"单表达式函数 – index()"},{default:l(()=>n[11]||(n[11]=[s("p",null,[i("由于 "),s("code",null,"index()"),i(" 函数只包含一个语句，您可以将其声明为"),s("a",{href:"/kotlin/functions#single-expression-functions"},"单表达式函数"),i("。")],-1),s("p",null,[i("这意味着可以省略花括号，并在等号 "),s("code",null,"="),i(" 之后指定函数体。")],-1)])),_:1}),a(t,{title:"函数返回类型的类型推断"},{default:l(()=>n[12]||(n[12]=[s("p",null,[s("code",null,"index()"),i(" 函数没有显式声明返回类型。相反，编译器通过查看等号 "),s("code",null,"="),i(" 右侧语句的结果来推断返回类型。")],-1),s("p",null,[s("code",null,"Hello, $name!"),i(" 表达式的类型是 "),s("code",null,"String"),i("，因此该函数的返回类型也是 "),s("code",null,"String"),i("。")],-1)])),_:1}),a(t,{title:"字符串模板 – $name"},{default:l(()=>n[13]||(n[13]=[s("p",null,[s("code",null,"Hello, $name!"),i(" 表达式在 Kotlin 中被称为"),s("a",{href:"/kotlin/strings#string-templates"},[s("i",null,"字符串模板")]),i("。")],-1),s("p",null,"字符串模板是包含嵌入表达式的字符串字面量。",-1),s("p",null,"这是 String 拼接操作的便捷替代方案。",-1)])),_:1})]),_:1}),n[19]||(n[19]=e("",6))])}const R=C(A,[["render",S]]);export{J as __pageData,R as default};
