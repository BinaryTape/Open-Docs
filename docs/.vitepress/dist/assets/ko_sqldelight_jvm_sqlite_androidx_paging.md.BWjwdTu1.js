import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.Bksy39di.js";const o=JSON.parse('{"title":"AndroidX Paging","description":"","frontmatter":{},"headers":[],"relativePath":"ko/sqldelight/jvm_sqlite/androidx_paging.md","filePath":"ko/sqldelight/jvm_sqlite/androidx_paging.md","lastUpdated":1748435462000}'),l={name:"ko/sqldelight/jvm_sqlite/androidx_paging.md"};function t(h,s,p,k,d,r){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="androidx-paging" tabindex="-1">AndroidX Paging <a class="header-anchor" href="#androidx-paging" aria-label="Permalink to &quot;AndroidX Paging&quot;">​</a></h1><p><a href="https://developer.android.com/topic/libraries/architecture/paging/v3-overview" target="_blank" rel="noreferrer">Android의 Paging 3 라이브러리</a>와 함께 SQLDelight를 사용하려면 페이징 확장 아티팩트에 의존성을 추가하세요.</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-nXi_N" id="tab-PtC7a6b" checked><label data-title="Kotlin" for="tab-PtC7a6b">Kotlin</label><input type="radio" name="group-nXi_N" id="tab-b2zaOEM"><label data-title="Groovy" for="tab-b2zaOEM">Groovy</label></div><div class="blocks"><div class="language-kotlin vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;app.cash.sqldelight:androidx-paging3-extensions:2.1.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dependencies {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  implementation </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;app.cash.sqldelight:androidx-paging3-extensions:2.1.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></div></div><p>SQLDelight는 데이터 페이징을 위한 두 가지 방법인 오프셋 기반 페이징과 키셋 페이징을 제공합니다.</p><h2 id="오프셋-기반-페이징" tabindex="-1">오프셋 기반 페이징 <a class="header-anchor" href="#오프셋-기반-페이징" aria-label="Permalink to &quot;오프셋 기반 페이징&quot;">​</a></h2><p>오프셋 페이징은 <code>OFFSET</code> 및 <code>LIMIT</code> 절을 사용하여 페이지화된 결과를 얻습니다. 오프셋 기반 페이징을 수행하는 <code>PagingSource</code>를 생성하려면 페이지네이션 쿼리뿐만 아니라 카운트 쿼리도 필요합니다.</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">countPlayers:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hockeyPlayer;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">players:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hockeyPlayer</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">LIMIT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> :</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">limit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> OFFSET :offset;</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> app.cash.sqldelight.android.paging3.QueryPagingSource</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pagingSource: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PagingSource</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> QueryPagingSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  countQuery </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> playerQueries.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">countPlayers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  transacter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> playerQueries,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Dispatchers.IO,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  queryProvider </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> playerQueries::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">players</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>기본적으로 컨텍스트가 지정되지 않은 경우 쿼리는 <code>Dispatchers.IO</code>에서 수행됩니다. RxJava의 <code>Scheduler</code>를 사용하여 쿼리를 수행하려는 소비자(개발자)는 <a href="https://kotlin.github.io/kotlinx-coroutines/kotlinx-coroutines-rx2/kotlinx.coroutines.rx2/io.reactivex.-scheduler/as-coroutine-dispatcher.html" target="_blank" rel="noreferrer"><code>Scheduler.asCoroutineDispatcher</code></a> 확장 함수를 사용해야 합니다.</p><h2 id="키셋-페이징" tabindex="-1">키셋 페이징 <a class="header-anchor" href="#키셋-페이징" aria-label="Permalink to &quot;키셋 페이징&quot;">​</a></h2><p>오프셋 페이징은 간단하고 유지보수하기 쉽습니다. 하지만 대규모 데이터셋에서는 성능이 좋지 않습니다. SQL 문의 <code>OFFSET</code> 절은 사실상 SQL 쿼리에서 이미 실행된 행을 단순히 버립니다. 따라서 <code>OFFSET</code> 숫자가 커질수록 쿼리 실행 시간도 길어집니다. 이를 극복하기 위해 SQLDelight는 <code>PagingSource</code>의 &quot;키셋 페이징&quot; 구현을 제공합니다. 전체 데이터셋을 쿼리하고 첫 <code>OFFSET</code> 요소를 비효율적으로 버리는 대신, 키셋 페이징은 고유한 열을 사용하여 쿼리의 범위를 제한합니다. 이는 개발자 유지보수 부담이 더 커지는 대가로 더 나은 성능을 제공합니다.</p><p>이 페이징 소스가 받는 <code>queryProvider</code> 콜백은 <code>beginInclusive</code>라는 null을 허용하지 않는 고유한 <code>Key</code> 매개변수와 <code>endExclusive</code>라는 null을 허용하는 고유한 <code>Key?</code> 매개변수를 가집니다. 핵심 페이징 쿼리 예시는 아래에 나와 있습니다.</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">keyedQuery:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hockeyPlayer</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> :beginInclusive </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AND</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> :endExclusive </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">OR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> :endExclusive </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">IS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ORDER BY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ASC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>키셋 페이징에 사용되는 쿼리는 위에서 보여진 것처럼 고유한 정렬을 가져야 합니다.</p><p><code>beginInclusive</code>와 <code>endExclusive</code>는 모두 페이지 경계 역할을 하는 <em>미리 계산된</em> 키입니다. 페이지 크기는 페이지 경계를 미리 계산할 때 설정됩니다. <code>pageBoundariesProvider</code> 콜백은 <code>anchor: Key?</code> 매개변수와 <code>limit: Int?</code> 매개변수를 받습니다. 페이지 경계를 미리 계산하는 쿼리 예시는 아래에 나와 있습니다.</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pageBoundaries:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  SELECT</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    id,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    CASE</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      WHEN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ((</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">row_number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">OVER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ORDER BY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ASC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) % :</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">limit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> THEN</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      WHEN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> :anchor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">THEN</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      ELSE</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    END</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> page_boundary;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hockeyPlayer</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  ORDER BY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ASC</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> page_boundary </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>SQL 쿼리의 페이지 경계를 미리 계산하려면 아마도 <a href="https://www.sqlite.org/windowfunctions.html" target="_blank" rel="noreferrer">SQLite Window Functions</a>가 필요할 것입니다. 윈도우 함수는 SQLite 버전 3.25.0에 도입되었으므로, Android API 30 이전에는 기본적으로 사용할 수 없습니다. 키셋 페이징을 사용하려면 SQLDelight는 <code>minApi 30</code>을 설정하거나 자체 SQLite 버전을 번들링하는 것을 권장합니다. Requery 조직은 SQLite의 <a href="https://github.com/requery/sqlite-android" target="_blank" rel="noreferrer">최신 배포본</a>을 독립형 라이브러리로 제공합니다.</p><p>AndroidX 페이징 라이브러리는 <code>PagingConfig.initialLoadSize</code>를 사용하여 첫 번째 페이지 가져오기 크기가 이후 페이지 가져오기 크기와 다르게 허용합니다. <code>pageBoundariesProvider</code> 콜백은 첫 번째 페이지 가져오기 시 한 번만 호출되기 때문에 <strong>이 기능은 피해야 합니다</strong>. <code>PagingConifg.initialLoadSize</code>와 <code>PagingConfig.pageSize</code>가 일치하지 않으면 예상치 못한 페이지 경계 생성이 발생할 수 있습니다.</p><p>이 페이징 소스는 점프를 <em>지원하지 않습니다</em>.</p><p>이 페이징 소스를 생성하려면 <code>QueryPagingSource</code> 팩토리 함수를 사용하십시오.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> app.cash.sqldelight.android.paging3.QueryPagingSource</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> keyedSource </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> QueryPagingSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  transacter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> playerQueries,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Dispatchers.IO,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  pageBoundariesProvider </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> playerQueries::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pageBoundaries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  queryProvider </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> playerQueries::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">keyedQuery</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>기본적으로 컨텍스트가 지정되지 않은 경우 쿼리는 <code>Dispatchers.IO</code>에서 수행됩니다. RxJava의 <code>Scheduler</code>를 사용하여 쿼리를 수행하려는 소비자(개발자)는 <a href="https://kotlin.github.io/kotlinx-coroutines/kotlinx-coroutines-rx2/kotlinx.coroutines.rx2/io.reactivex.-scheduler/as-coroutine-dispatcher.html" target="_blank" rel="noreferrer"><code>Scheduler.asCoroutineDispatcher</code></a> 확장 함수를 사용해야 합니다.</p>`,22)]))}const g=i(l,[["render",t]]);export{o as __pageData,g as default};
