import{_ as i,a as n,b as o}from"./chunks/compose-hot-reload-hello.B2T097lK.js";import{_ as p}from"./chunks/gradle-sync.fCQp85Nh.js";import{_ as h}from"./chunks/compose-hot-reload-gutter-run.m_A5v9gh.js";import{_ as r,C as a,c as k,o as d,G as t,ag as c}from"./chunks/framework.Bksy39di.js";const B=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kmp/compose-hot-reload.md","filePath":"ja/kmp/compose-hot-reload.md","lastUpdated":1755516278000}'),g={name:"ja/kmp/compose-hot-reload.md"};function E(m,s,u,y,C,F){const e=a("TopicTitle"),l=a("primary-label");return d(),k("div",null,[t(e,{labelRef:"alpha",title:"Compose Hot Reload"}),t(l,{ref:"alpha"},null,512),s[0]||(s[0]=c('<p><a href="https://github.com/JetBrains/compose-hot-reload" target="_blank" rel="noreferrer">Compose Hot Reload</a>は、Compose Multiplatformプロジェクトでの作業中にUIの変更を視覚化し、試すのに役立ちます。</p><p>現時点では、Compose Hot Reloadは、マルチプラットフォームプロジェクトにデスクトップターゲットを含めた場合にのみ利用可能です。 今後、他のターゲットに対するサポートを追加することを検討しています。その間、デスクトップアプリをサンドボックスとして使用することで、作業の流れを中断することなく共通コードでのUIの変更を素早く試すことができます。</p><p><img src="'+i+'" alt="Compose Hot Reload" width="500"></p><h2 id="プロジェクトにcompose-hot-reloadを追加する" tabindex="-1">プロジェクトにCompose Hot Reloadを追加する <a class="header-anchor" href="#プロジェクトにcompose-hot-reloadを追加する" aria-label="Permalink to &quot;プロジェクトにCompose Hot Reloadを追加する&quot;">​</a></h2><p>Compose Hot Reloadは、以下の2つの方法で追加できます。</p><ul><li><a href="#from-scratch">IntelliJ IDEAまたはAndroid Studioでプロジェクトを最初から作成する</a></li><li><a href="#to-an-existing-project">既存のプロジェクトにGradleプラグインとして追加する</a></li></ul><h3 id="最初から" tabindex="-1">最初から <a class="header-anchor" href="#最初から" aria-label="Permalink to &quot;最初から&quot;">​</a></h3><p>このセクションでは、IntelliJ IDEAおよびAndroid Studioでデスクトップターゲットを含むマルチプラットフォームプロジェクトを作成する手順を説明します。プロジェクトが作成されると、Compose Hot Reloadが自動的に追加されます。</p><ol><li><a href="./quickstart">クイックスタート</a>で、<a href="./quickstart#set-up-the-environment">Kotlin Multiplatform開発の環境をセットアップする</a>の手順を完了します。</li><li>IntelliJ IDEAで、<strong>File</strong> | <strong>New</strong> | <strong>Project</strong>を選択します。</li><li>左側のパネルで、<strong>Kotlin Multiplatform</strong>を選択します。</li><li><strong>新規プロジェクト</strong>ウィンドウで、<strong>Name</strong>、<strong>Group</strong>、および<strong>Artifact</strong>フィールドを指定します。</li><li><strong>Desktop</strong>ターゲットを選択し、<strong>Create</strong>をクリックします。 <img src="'+n+`" alt="Create multiplatform project with desktop target" width="700"></li></ol><h3 id="既存のプロジェクトに" tabindex="-1">既存のプロジェクトに <a class="header-anchor" href="#既存のプロジェクトに" aria-label="Permalink to &quot;既存のプロジェクトに&quot;">​</a></h3><p>このセクションでは、既存のマルチプラットフォームプロジェクトにCompose Hot Reloadを追加する手順を説明します。これらの手順は、<a href="./compose-multiplatform-create-first-app">共有ロジックとUIを持つアプリを作成する</a>チュートリアルのプロジェクトを参照としています。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Compose Hot Reloadの最新バージョンについては、<a href="https://github.com/JetBrains/compose-hot-reload/releases" target="_blank" rel="noreferrer">Releases</a>を参照してください。</p></div><ol><li><p>プロジェクトで、バージョンカタログを更新します。<code>gradle/libs.versions.toml</code>に、以下のコードを追加します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">composeHotReload </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;org.jetbrains.compose.hot-reload&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, version.ref </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;composeHotReload&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p>バージョンカタログを使用してプロジェクト全体の依存関係を一元的に管理する方法の詳細については、当社の<a href="https://kotlinlang.org/gradle-best-practices.html" target="_blank" rel="noreferrer">Gradleのベストプラクティス</a>を参照してください。</p></blockquote></li><li><p>親プロジェクトの<code>build.gradle.kts</code> (<code>ComposeDemo/build.gradle.kts</code>)で、<code>plugins {}</code>ブロックに以下のコードを追加します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    alias</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(libs.plugins.composeHotReload) apply </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>これにより、Compose Hot Reloadプラグインが各サブプロジェクトで複数回ロードされることを防ぎます。</p></li><li><p>マルチプラットフォームアプリケーションを含むサブプロジェクトの<code>build.gradle.kts</code> (<code>ComposeDemo/composeApp/build.gradle.kts</code>)で、<code>plugins {}</code>ブロックに以下のコードを追加します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    alias</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(libs.plugins.composeHotReload)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>Compose Hot Reloadの全ての機能を使用するには、プロジェクトは拡張されたクラス再定義をサポートするOpenJDKのフォークである<a href="https://github.com/JetBrains/JetBrainsRuntime" target="_blank" rel="noreferrer">JetBrains Runtime</a> (JBR)で実行される必要があります。 Compose Hot Reloadは、プロジェクトのために互換性のあるJBRを自動的にプロビジョニングできます。 これを許可するには、<code>settings.gradle.kts</code>ファイルに以下のGradleプラグインを追加します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.gradle.toolchains.foojay-resolver-convention&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) version </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0.10.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>Sync Gradle Changes</strong>ボタンをクリックしてGradleファイルを同期します: <img src="`+p+`" alt="Synchronize Gradle files" width="50"></p></li></ol><h2 id="compose-hot-reloadを使用する" tabindex="-1">Compose Hot Reloadを使用する <a class="header-anchor" href="#compose-hot-reloadを使用する" aria-label="Permalink to &quot;Compose Hot Reloadを使用する&quot;">​</a></h2><ol><li><p><code>desktopMain</code>ディレクトリで、<code>main.kt</code>ファイルを開き、<code>main()</code>関数を更新します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        onCloseRequest </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exitApplication</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        alwaysOnTop </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        title </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;composedemo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>alwaysOnTop</code>変数を<code>true</code>に設定することで、生成されたデスクトップアプリが全てのウィンドウの手前に表示され続け、コードを編集して変更をライブで確認しやすくなります。</p></li><li><p><code>commonMain</code>ディレクトリで、<code>App.kt</code>ファイルを開き、<code>Button</code>コンポーザブルを更新します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(onClick </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { showContent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">showContent }) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Column</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Greeting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>これで、ボタンのテキストは<code>greet()</code>関数によって制御されます。</p></li><li><p><code>commonMain</code>ディレクトリで、<code>Greeting.kt</code>ファイルを開き、<code>greet()</code>関数を更新します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello!&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div></li><li><p><code>desktopMain</code>ディレクトリで、<code>main.kt</code>ファイルを開き、ガターの<strong>実行</strong>アイコンをクリックします。 **Run &#39;composeApp [desktop]&#39; with Compose Hot Reload (Alpha)**を選択します。</p><p><img src="`+h+'" alt="Run Compose Hot Reload from gutter" width="350"></p><p><img src="'+o+'" alt="First Compose Hot Reload on desktop app" width="500"></p></li><li><p><code>greet()</code>関数から返される文字列を更新し、その後ファイルを保存すると、デスクトップアプリが自動的に更新されるのを確認できます。</p><p><img src="'+i+'" alt="Compose Hot Reload" width="500"></p></li></ol><p>おめでとうございます！Compose Hot Reloadが動作しているのを確認できました。これで、変更のたびにデスクトップ実行構成を再起動することなく、テキスト、画像、書式設定、UI構造などの変更を試すことができます。</p><h2 id="ヘルプ" tabindex="-1">ヘルプ <a class="header-anchor" href="#ヘルプ" aria-label="Permalink to &quot;ヘルプ&quot;">​</a></h2><p>Compose Hot Reloadの使用中に何らかの問題に遭遇した場合は、<a href="https://github.com/JetBrains/compose-hot-reload/issues" target="_blank" rel="noreferrer">GitHub issueを作成</a>してお知らせください。</p>',18))])}const R=r(g,[["render",E]]);export{B as __pageData,R as default};
