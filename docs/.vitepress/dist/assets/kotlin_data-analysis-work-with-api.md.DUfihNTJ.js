import{_ as i,a,b as t}from"./chunks/kotlin-analysis.DmuGV0qM.js";import{_ as n,c as l,o as e,ag as h}from"./chunks/framework.Bksy39di.js";const u=JSON.parse('{"title":"从 Web 源和 API 检索数据","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/data-analysis-work-with-api.md","filePath":"kotlin/data-analysis-work-with-api.md","lastUpdated":1754307826000}'),p={name:"kotlin/data-analysis-work-with-api.md"};function k(r,s,o,d,E,g){return e(),l("div",null,s[0]||(s[0]=[h(`<h1 id="从-web-源和-api-检索数据" tabindex="-1">从 Web 源和 API 检索数据 <a class="header-anchor" href="#从-web-源和-api-检索数据" aria-label="Permalink to &quot;从 Web 源和 API 检索数据&quot;">​</a></h1><p><a href="/kotlin/kotlin-notebook-overview">Kotlin Notebook</a> 提供了一个强大的平台，用于访问和操作来自各种 Web 源和 API 的数据。 它通过提供一个迭代环境来简化数据提取和分析任务，在该环境中，每个步骤都可以可视化以提高清晰度。这使得它在探索不熟悉的 API 时特别有用。</p><p>与 <a href="https://kotlin.github.io/dataframe/gettingstarted.html" target="_blank" rel="noreferrer">Kotlin DataFrame 库</a> 结合使用时，Kotlin Notebook 不仅使你能够连接到 API 并从中获取 JSON 数据，还协助重塑此数据以进行全面的分析和可视化。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>关于 Kotlin Notebook 示例，请参见 <a href="https://github.com/Kotlin/dataframe/blob/master/examples/notebooks/youtube/Youtube.ipynb" target="_blank" rel="noreferrer">GitHub 上的 DataFrame 示例</a>。</p></div><h2 id="开始之前" tabindex="-1">开始之前 <a class="header-anchor" href="#开始之前" aria-label="Permalink to &quot;开始之前&quot;">​</a></h2><p>Kotlin Notebook 依赖于 <a href="https://plugins.jetbrains.com/plugin/16340-kotlin-notebook" target="_blank" rel="noreferrer">Kotlin Notebook 插件</a>， 该插件在 IntelliJ IDEA 中默认捆绑并启用。</p><p>如果 Kotlin Notebook 特性不可用，请确保该插件已启用。关于更多信息， 请参见 <a href="/kotlin/kotlin-notebook-set-up-env">设置环境</a>。</p><p>创建新的 Kotlin Notebook：</p><ol><li><p>选择 <strong>文件</strong> | <strong>新建</strong> | <strong>Kotlin Notebook</strong>。</p></li><li><p>在 Kotlin Notebook 中，通过运行以下命令导入 Kotlin DataFrame 库：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">use dataframe</span></span></code></pre></div></li></ol><h2 id="从-api-获取数据" tabindex="-1">从 API 获取数据 <a class="header-anchor" href="#从-api-获取数据" aria-label="Permalink to &quot;从 API 获取数据&quot;">​</a></h2><p>使用 Kotlin Notebook 和 Kotlin DataFrame 库从 API 获取数据通过 <a href="https://kotlin.github.io/dataframe/read.html" target="_blank" rel="noreferrer"><code>.read()</code></a> 函数实现，这类似于 <a href="/kotlin/data-analysis-work-with-data-sources#retrieve-data-from-a-file">从文件</a>（例如 CSV 或 JSON）检索数据。 然而，在使用基于 Web 的源时，你可能需要额外的格式化来将原始 API 数据转换为结构化格式。</p><p>我们来看一个从 <a href="https://console.cloud.google.com/apis/library/youtube.googleapis.com" target="_blank" rel="noreferrer">YouTube Data API</a> 获取数据的示例：</p><ol><li><p>打开你的 Kotlin Notebook 文件 (<code>.ipynb</code>)。</p></li><li><p>导入 Kotlin DataFrame 库，这对于数据操作任务至关重要。 这通过在代码单元格中运行以下命令来完成：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">use dataframe</span></span></code></pre></div></li><li><p>在一个新的代码单元格中安全地添加你的 API 密钥，这对于向 YouTube Data API 进行请求认证是必需的。 你可以从 <a href="https://console.cloud.google.com/apis/credentials" target="_blank" rel="noreferrer">凭据选项卡</a> 获取你的 API 密钥：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> apiKey </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;YOUR-API_KEY&quot;</span></span></code></pre></div></li><li><p>创建一个 <code>load</code> 函数，该函数以字符串形式的路径作为实参，并使用 DataFrame 的 <code>.read()</code> 函数从 YouTube Data API 获取数据：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(path: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AnyRow</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DataRow.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://www.googleapis.com/youtube/v3/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$path</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&amp;key=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$apiKey</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></li><li><p>将获取到的数据组织成行，并通过 <code>nextPageToken</code> 处理 YouTube API 的分页。 这确保你可以在多个页面中收集数据：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(path: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, maxPages: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AnyFrame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Initializes a mutable list to store rows of data.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rows </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mutableListOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AnyRow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Sets the initial page path for data loading.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pagePath </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> path</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    do</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Loads data from the current page path.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> row </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pagePath)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Adds the loaded data as a row to the list.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        rows.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(row)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Retrieves the token for the next page, if available.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> next </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> row.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getValueOrNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;nextPageToken&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Updates the page path for the next iteration, including the new token.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        pagePath </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&amp;pageToken=&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> next</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Continues loading pages until there&#39;s no next page.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (next </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rows.size </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> maxPages) </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Concatenates and returns all loaded rows as a DataFrame.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rows.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">concat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>使用先前定义的 <code>load()</code> 函数获取数据并在新的代码单元格中创建 DataFrame。 此示例获取与 Kotlin 相关的视频数据，每页最多 50 个结果，最多 5 页。 结果存储在 <code>df</code> 变量中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> df </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;search?q=kotlin&amp;maxResults=50&amp;part=snippet&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">df</span></span></code></pre></div></li><li><p>最后，从 DataFrame 中提取并连接 <code>items</code>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> items </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> df.items.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">concat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">items</span></span></code></pre></div></li></ol><h2 id="清洗和精炼数据" tabindex="-1">清洗和精炼数据 <a class="header-anchor" href="#清洗和精炼数据" aria-label="Permalink to &quot;清洗和精炼数据&quot;">​</a></h2><p>清洗和精炼数据是为分析准备数据集的关键步骤。 <a href="https://kotlin.github.io/dataframe/gettingstarted.html" target="_blank" rel="noreferrer">Kotlin DataFrame 库</a> 为这些任务提供了强大的功能。<a href="https://kotlin.github.io/dataframe/move.html" target="_blank" rel="noreferrer"><code>move</code></a>、 <a href="https://kotlin.github.io/dataframe/concatdf.html" target="_blank" rel="noreferrer"><code>concat</code></a>、<a href="https://kotlin.github.io/dataframe/select.html" target="_blank" rel="noreferrer"><code>select</code></a>、 <a href="https://kotlin.github.io/dataframe/parse.html" target="_blank" rel="noreferrer"><code>parse</code></a> 和 <a href="https://kotlin.github.io/dataframe/join.html" target="_blank" rel="noreferrer"><code>join</code></a> 等方法对于组织和转换数据至关重要。</p><p>我们来看一个数据已通过 <a href="#fetch-data-from-an-api">YouTube 数据 API 获取</a> 的示例。 目标是清洗和重构数据集，以便进行深入分析：</p><ol><li><p>你可以从重新组织和清洗数据开始。这包括将某些列移动到新的标题下，并删除不必要的列以提高清晰度：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> videos </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> items.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dropNulls</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { id.videoId }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { id.videoId named </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> and snippet }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">distinct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">videos</span></span></code></pre></div></li><li><p>从清洗过的数据中分块 ID 并加载相应的视频统计信息。这包括将数据分成更小的批次并获取额外细节：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> statPages </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clean.id.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">chunked</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ids </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">joinToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;%2C&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;videos?part=statistics&amp;id=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$ids</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">statPages</span></span></code></pre></div></li><li><p>连接获取到的统计信息并选择相关列：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> stats </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> statPages.items.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">concat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { id and statistics.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">stats</span></span></code></pre></div></li><li><p>将现有清洗过的数据与新获取的统计信息连接起来。这会将两组数据合并到一个全面的 DataFrame 中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> joined </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clean.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(stats)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">joined</span></span></code></pre></div></li></ol><p>此示例演示了如何使用 Kotlin DataFrame 的各种函数清洗、重新组织和增强数据集。 每个步骤都旨在精炼数据，使其更适合进行 <a href="#analyze-data-in-kotlin-notebook">深入分析</a>。</p><h2 id="在-kotlin-notebook-中分析数据" tabindex="-1">在 Kotlin Notebook 中分析数据 <a class="header-anchor" href="#在-kotlin-notebook-中分析数据" aria-label="Permalink to &quot;在 Kotlin Notebook 中分析数据&quot;">​</a></h2><p>在使用 <a href="https://kotlin.github.io/dataframe/gettingstarted.html" target="_blank" rel="noreferrer">Kotlin DataFrame 库</a> 中的函数成功 <a href="#fetch-data-from-an-api">获取</a> 并 <a href="#clean-and-refine-data">清洗和精炼数据</a> 后，下一步是分析这个准备好的数据集以提取有意义的洞察。</p><p><a href="https://kotlin.github.io/dataframe/groupby.html" target="_blank" rel="noreferrer"><code>groupBy</code></a> 用于数据分类，<a href="https://kotlin.github.io/dataframe/sum.html" target="_blank" rel="noreferrer"><code>sum</code></a> 和 <a href="https://kotlin.github.io/dataframe/maxby.html" target="_blank" rel="noreferrer"><code>maxBy</code></a> 用于 <a href="https://kotlin.github.io/dataframe/summarystatistics.html" target="_blank" rel="noreferrer">汇总统计</a>，以及 <a href="https://kotlin.github.io/dataframe/sortby.html" target="_blank" rel="noreferrer"><code>sortBy</code></a> 用于数据排序等方法特别有用。 这些工具使你能够高效地执行复杂的数据分析任务。</p><p>我们来看一个示例，使用 <code>groupBy</code> 按频道对视频进行分类，使用 <code>sum</code> 计算每个类别的总播放量，以及使用 <code>maxBy</code> 查找每个组中最新或播放量最高的视频：</p><ol><li><p>通过设置引用来简化对特定列的访问：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> view </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> column</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span></code></pre></div></li><li><p>使用 <code>groupBy</code> 方法按 <code>channel</code> 列对数据进行分组并排序。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> channels </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> joined.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">groupBy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { channel }.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sortByCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div></li></ol><p>在结果表中，你可以交互式地探索数据。点击与频道对应的行的 <code>group</code> 字段会展开该行，显示该频道视频的更多详细信息。</p><p><img src="`+i+'" alt="Expanding a row to reveal more details" width="700"></p><p>你可以点击左下角的表格图标返回到分组数据集。</p><p><img src="'+a+`" alt="Click on the table icon in the bottom left to return" width="700"></p><ol start="3"><li><p>使用 <code>aggregate</code>、<code>sum</code>、<code>maxBy</code> 和 <code>flatten</code> 创建一个 DataFrame，汇总每个频道的总播放量以及其最新或播放量最高的视频的详细信息：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> aggregated </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> channels.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">aggregate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    viewCount.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() into view</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> last </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> maxBy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { publishedAt }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    last.title into </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;last title&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    last.publishedAt into </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;time&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    last.viewCount into </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;viewCount&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Sorts the DataFrame in descending order by view count and transform it into a flat structure.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sortByDesc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(view).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">flatten</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">aggregated</span></span></code></pre></div></li></ol><p>分析结果：</p><p><img src="`+t+'" alt="Analysis results" width="700"></p><p>关于更高级的技术，请参见 <a href="https://kotlin.github.io/dataframe/gettingstarted.html" target="_blank" rel="noreferrer">Kotlin DataFrame 文档</a>。</p><h2 id="后续步骤" tabindex="-1">后续步骤 <a class="header-anchor" href="#后续步骤" aria-label="Permalink to &quot;后续步骤&quot;">​</a></h2><ul><li>使用 <a href="https://kotlin.github.io/kandy/examples.html" target="_blank" rel="noreferrer">Kandy 库</a> 探索数据可视化</li><li>关于数据可视化的更多信息，请参见 <a href="/kotlin/data-analysis-visualization">使用 Kandy 在 Kotlin Notebook 中进行数据可视化</a></li><li>关于 Kotlin 中可用于数据科学和分析的工具和资源的广泛概述，请参见 <a href="/kotlin/data-analysis-libraries">用于数据分析的 Kotlin 和 Java 库</a></li></ul>',33)]))}const F=n(p,[["render",k]]);export{u as __pageData,F as default};
