import{_ as a,c as s,o as t,ag as l}from"./chunks/framework.Bksy39di.js";const E=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/compatibility.md","filePath":"kotlin/compatibility.md","lastUpdated":1754307826000}'),e={name:"kotlin/compatibility.md"};function n(r,i,o,p,h,k){return t(),s("div",null,i[0]||(i[0]=[l(`<ul><li><a href="#compatibility">兼容性</a></li><li><a href="#public-api-types">公共 API 类型</a><ul><li><a href="#experimental-api">实验性的 API</a></li><li><a href="#flow-preview-api">Flow 预览 API</a></li><li><a href="#obsolete-api">废弃的 API</a></li><li><a href="#internal-api">内部 API</a></li><li><a href="#stable-api">稳定的 API</a></li><li><a href="#deprecation-cycle">废弃周期</a></li></ul></li><li><a href="#using-annotated-api">使用带注解的 API</a><ul><li><a href="#programmatically">通过编程方式</a></li><li><a href="#gradle">Gradle</a></li><li><a href="#maven">Maven</a></li></ul></li></ul><h2 id="兼容性" tabindex="-1">兼容性 <a class="header-anchor" href="#兼容性" aria-label="Permalink to &quot;兼容性&quot;">​</a></h2><p>本文档描述了 <code>kotlinx.coroutines</code> 库自 1.0.0 版本以来的兼容性策略，以及兼容性相关注解的语义。</p><h2 id="公共-api-类型" tabindex="-1">公共 API 类型 <a class="header-anchor" href="#公共-api-类型" aria-label="Permalink to &quot;公共 API 类型&quot;">​</a></h2><p><code>kotlinx.coroutines</code> 公共 API 分为五种类型：稳定的、实验性的、废弃的、内部的和弃用的。除稳定的公共 API 外，所有 API 都标有对应的注解。</p><h3 id="实验性的-api" tabindex="-1">实验性的 API <a class="header-anchor" href="#实验性的-api" aria-label="Permalink to &quot;实验性的 API&quot;">​</a></h3><p>实验性的 API 标有 <a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-experimental-coroutines-api/index.html" target="_blank" rel="noreferrer">@ExperimentalCoroutinesApi</a> 注解。当 API 的设计存在潜在的开放问题，可能最终导致 API 的语义变更或弃用时，该 API 会被标记为实验性的。</p><p>默认情况下，大多数新 API 都被标记为实验性的，并且在没有新问题出现的情况下，会在后续的某个主要版本中变为稳定的。否则，API 的语义将在不改变 ABI 的情况下得到修复，或者该 API 会进入废弃周期。</p><p>何时使用实验性的 API 可能存在危险：</p><ul><li>你正在编写一个依赖于 <code>kotlinx.coroutines</code> 的库，并且希望在稳定的库 API 中使用实验性的协程 API。当你库的最终用户更新他们的 <code>kotlinx.coroutines</code> 版本，而其中实验性的 API 语义略有不同时，这可能导致不良后果。</li><li>你希望围绕实验性的 API 构建应用程序的核心基础设施。</li></ul><h3 id="flow-预览-api" tabindex="-1">Flow 预览 API <a class="header-anchor" href="#flow-预览-api" aria-label="Permalink to &quot;Flow 预览 API&quot;">​</a></h3><p>所有 <a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/-flow/index.html" target="_blank" rel="noreferrer">Flow</a> 相关的 API 都标有 <a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-flow-preview/index.html" target="_blank" rel="noreferrer">@FlowPreview</a> 注解。此注解表明 Flow API 处于预览状态。对于预览特性，我们不提供版本间的兼容性保证，包括二进制兼容性、源代码兼容性以及语义兼容性。</p><p>何时使用预览 API 可能存在危险：</p><ul><li>你正在编写一个库/框架，并且希望在稳定版本或稳定的 API 中使用 <a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/-flow/index.html" target="_blank" rel="noreferrer">Flow</a> API。</li><li>你希望在应用程序的核心基础设施中使用 <a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/-flow/index.html" target="_blank" rel="noreferrer">Flow</a>。</li><li>你希望将 <a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/-flow/index.html" target="_blank" rel="noreferrer">Flow</a> 用作“即写即忘”的解决方案，并且无法承担 <code>kotlinx.coroutines</code> 更新时产生的额外维护成本。</li></ul><h3 id="废弃的-api" tabindex="-1">废弃的 API <a class="header-anchor" href="#废弃的-api" aria-label="Permalink to &quot;废弃的 API&quot;">​</a></h3><p>废弃的 API 标有 <a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-obsolete-coroutines-api/index.html" target="_blank" rel="noreferrer">@ObsoleteCoroutinesApi</a> 注解。废弃的 API 与实验性的 API 相似，但已知存在严重的设计缺陷，并且存在潜在的替代方案，但该替代方案尚未实现。</p><p>此 API 的语义不会改变，但一旦替代方案准备就绪，它将进入废弃周期。</p><h3 id="内部-api" tabindex="-1">内部 API <a class="header-anchor" href="#内部-api" aria-label="Permalink to &quot;内部 API&quot;">​</a></h3><p>内部 API 标有 <a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-internal-coroutines-api/index.html" target="_blank" rel="noreferrer">@InternalCoroutinesApi</a> 注解或属于 <code>kotlinx.coroutines.internal</code> 包。此 API 不保证其稳定性，在未来版本中可能会被更改和/或移除。如果你无法避免使用内部 API，请将其报告给 <a href="https://github.com/Kotlin/kotlinx.coroutines/issues/new" target="_blank" rel="noreferrer">问题跟踪器</a>。</p><h3 id="稳定的-api" tabindex="-1">稳定的 API <a class="header-anchor" href="#稳定的-api" aria-label="Permalink to &quot;稳定的 API&quot;">​</a></h3><p>稳定的 API 保证保留其 ABI 和文档化的语义。如果在某个时候发现无法修复的设计缺陷，此 API 将进入废弃周期，并尽可能长时间地保持二进制兼容。</p><h3 id="废弃周期" tabindex="-1">废弃周期 <a class="header-anchor" href="#废弃周期" aria-label="Permalink to &quot;废弃周期&quot;">​</a></h3><p>当某个 API 被弃用时，它会经历多个阶段，且每个阶段之间至少有一个主要版本。</p><ul><li>特性被弃用并带有编译警告。大多数情况下，都会提供适当的替代方案（以及相应的 <code>replaceWith</code> 声明），以便借助 IntelliJ IDEA 自动迁移弃用的用法。</li><li>弃用级别提升为 <code>error</code> 或 <code>hidden</code>。此时已无法再针对弃用的 API 编译新代码，尽管它仍然存在于 ABI 中。</li><li>API 被完全移除。尽管我们尽最大努力不这样做，也没有移除任何 API 的计划，但我们仍保留此选项，以防出现安全漏洞等无法预见的问题。</li></ul><h2 id="使用带注解的-api" tabindex="-1">使用带注解的 API <a class="header-anchor" href="#使用带注解的-api" aria-label="Permalink to &quot;使用带注解的 API&quot;">​</a></h2><p>所有 API 注解都是 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-experimental/" target="_blank" rel="noreferrer">kotlin.Experimental</a>。这样做是为了在使用实验性的或废弃的 API 时产生编译警告。警告可以通过编程方式在特定调用点禁用，或全局禁用整个模块。</p><h3 id="通过编程方式" tabindex="-1">通过编程方式 <a class="header-anchor" href="#通过编程方式" aria-label="Permalink to &quot;通过编程方式&quot;">​</a></h3><p>对于特定调用点，可以使用 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-opt-in/" target="_blank" rel="noreferrer">OptIn</a> 注解禁用警告：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalCoroutinesApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 禁用关于实验性协程 API 的警告</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> experimentalApiUsage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    someKotlinxCoroutinesExperimentalMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="gradle" tabindex="-1">Gradle <a class="header-anchor" href="#gradle" aria-label="Permalink to &quot;Gradle&quot;">​</a></h3><p>对于 Gradle 项目，可以通过在 <code>build.gradle</code> 文件中传递一个编译器标志来禁用警告：</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tasks</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">withType(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">org.jetbrains.kotlin.gradle.tasks.AbstractKotlinCompile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">all {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    kotlinOptions</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">freeCompilerArgs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="maven" tabindex="-1">Maven <a class="header-anchor" href="#maven" aria-label="Permalink to &quot;Maven&quot;">​</a></h3><p>对于 Maven 项目，可以通过在 <code>pom.xml</code> 文件中传递一个编译器标志来禁用警告：</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">plugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;kotlin-maven-plugin&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;org.jetbrains.kotlin&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ... 你的配置 ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">configuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">arg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">arg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">configuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">plugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div>`,35)]))}const c=a(e,[["render",n]]);export{E as __pageData,c as default};
