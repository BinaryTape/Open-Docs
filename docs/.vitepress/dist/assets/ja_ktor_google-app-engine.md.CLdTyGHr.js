import{_ as d,C as n,c as k,o as g,j as a,G as e,ag as c,a as i,w as p}from"./chunks/framework.Bksy39di.js";const f=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ja/ktor/google-app-engine.md","filePath":"ja/ktor/google-app-engine.md","lastUpdated":1755457140000}'),E={name:"ja/ktor/google-app-engine.md"};function u(y,s,m,F,b,C){const l=n("show-structure"),t=n("control"),o=n("tldr"),h=n("web-summary"),r=n("link-summary");return g(),k("div",null,[s[8]||(s[8]=a("h1",{id:"google-app-engine",tabindex:"-1"},[i("Google App Engine "),a("a",{class:"header-anchor",href:"#google-app-engine","aria-label":'Permalink to "Google App Engine"'},"​")],-1)),e(l,{for:"chapter",depth:"2"}),e(o,null,{default:p(()=>[a("p",null,[e(t,null,{default:p(()=>s[0]||(s[0]=[i("初期プロジェクト")])),_:1}),s[1]||(s[1]=i(": ")),s[2]||(s[2]=a("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/engine-main"},"engine-main",-1))]),a("p",null,[e(t,null,{default:p(()=>s[3]||(s[3]=[i("最終プロジェクト")])),_:1}),s[4]||(s[4]=i(": ")),s[5]||(s[5]=a("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/google-appengine-standard"},"google-appengine-standard",-1))])]),_:1}),e(h,null,{default:p(()=>s[6]||(s[6]=[i(" このチュートリアルでは、KtorプロジェクトをGoogle App Engine標準環境に準備してデプロイする方法を説明します。 ")])),_:1}),e(r,null,{default:p(()=>s[7]||(s[7]=[i(" Google App Engine標準環境にプロジェクトをデプロイする方法を学びます。 ")])),_:1}),s[9]||(s[9]=c(`<p>このチュートリアルでは、KtorプロジェクトをGoogle App Engine標準環境に準備してデプロイする方法を説明します。このチュートリアルでは、<a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/engine-main" target="_blank" rel="noreferrer">engine-main</a>サンプルプロジェクトを開始プロジェクトとして使用します。</p><h2 id="prerequisites" tabindex="-1">前提条件 <a class="header-anchor" href="#prerequisites" aria-label="Permalink to &quot;前提条件 {id=&quot;prerequisites&quot;}&quot;">​</a></h2><p>このチュートリアルを開始する前に、以下の手順を実行する必要があります。</p><ul><li><a href="https://console.cloud.google.com/" target="_blank" rel="noreferrer">Google Cloud Platform</a>に登録します。</li><li><a href="https://cloud.google.com/sdk/docs/install" target="_blank" rel="noreferrer">Google Cloud SDK</a>をインストールして初期化します。</li><li>以下のコマンドでJava用のApp Engine拡張機能をインストールします。<div class="language-Bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gcloud</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> components</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app-engine-java</span></span></code></pre></div></li></ul><h2 id="clone" tabindex="-1">サンプルアプリケーションのクローン作成 <a class="header-anchor" href="#clone" aria-label="Permalink to &quot;サンプルアプリケーションのクローン作成 {id=&quot;clone&quot;}&quot;">​</a></h2><p>サンプルアプリケーションを開くには、以下の手順に従います。</p><ol><li>Ktorドキュメンテーションリポジトリをクローンし、<a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets" target="_blank" rel="noreferrer">codeSnippets</a>プロジェクトを開きます。</li><li><a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/engine-main" target="_blank" rel="noreferrer">engine-main</a>モジュールを開きます。 <blockquote><p>Ktorは、<a href="./server-create-and-configure">サーバーを作成および構成する</a>ための2つのアプローチ（コード内または構成ファイルを使用）を提供していることに注意してください。このチュートリアルでは、両方のアプローチでデプロイプロセスは同じです。</p></blockquote></li></ol><h2 id="prepare-app" tabindex="-1">アプリケーションの準備 <a class="header-anchor" href="#prepare-app" aria-label="Permalink to &quot;アプリケーションの準備 {id=&quot;prepare-app&quot;}&quot;">​</a></h2><h3 id="configure-shadow-plugin" tabindex="-1">ステップ1: Shadowプラグインの適用 <a class="header-anchor" href="#configure-shadow-plugin" aria-label="Permalink to &quot;ステップ1: Shadowプラグインの適用 {id=&quot;configure-shadow-plugin&quot;}&quot;">​</a></h3><p>このチュートリアルでは、<a href="./server-fatjar">fat JAR</a>を使用してアプリケーションをGoogle App Engineにデプロイする方法を示します。fat JARを生成するには、Shadowプラグインを適用する必要があります。<code>build.gradle.kts</code>ファイルを開き、<code>plugins</code>ブロックにプラグインを追加します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;com.gradleup.shadow&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) version </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;8.3.9&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="configure-app-engine-plugin" tabindex="-1">ステップ2: App Engineプラグインの構成 <a class="header-anchor" href="#configure-app-engine-plugin" aria-label="Permalink to &quot;ステップ2: App Engineプラグインの構成 {id=&quot;configure-app-engine-plugin&quot;}&quot;">​</a></h3><p><a href="https://github.com/GoogleCloudPlatform/app-gradle-plugin" target="_blank" rel="noreferrer">Google App Engine Gradleプラグイン</a>は、Google App Engineアプリケーションをビルドおよびデプロイするためのタスクを提供します。このプラグインを使用するには、以下の手順に従います。</p><ol><li><p><code>settings.gradle.kts</code>ファイルを開き、以下のコードを挿入してCentral Mavenリポジトリからプラグインを参照します。</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pluginManagement {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    repositories {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        gradlePluginPortal()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        mavenCentral()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        maven(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://maven.pkg.jetbrains.space/public/p/ktor/eap&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    resolutionStrategy {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        eachPlugin {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (requested</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">startsWith(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;com.google.cloud.tools.appengine&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                useModule(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;com.google.cloud.tools:appengine-gradle-plugin:\${requested.version}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><code>build.gradle.kts</code>を開き、<code>plugins</code>ブロックにプラグインを適用します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;com.google.cloud.tools.appengine&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) version </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2.8.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><code>build.gradle.kts</code>ファイルに以下の設定で<code>appengine</code>ブロックを追加します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> com.google.cloud.tools.gradle.appengine.appyaml.AppEngineAppYamlExtension</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AppEngineAppYamlExtension</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    stage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        setArtifact</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;build/libs/\${project.name}-all.jar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    deploy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        version </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;GCLOUD_CONFIG&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        projectId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;GCLOUD_CONFIG&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ol><h3 id="configure-app-engine-settings" tabindex="-1">ステップ3: App Engine設定の構成 <a class="header-anchor" href="#configure-app-engine-settings" aria-label="Permalink to &quot;ステップ3: App Engine設定の構成 {id=&quot;configure-app-engine-settings&quot;}&quot;">​</a></h3><p>アプリケーションのApp Engine設定は、<a href="https://cloud.google.com/appengine/docs/standard/python/config/appref" target="_blank" rel="noreferrer">app.yaml</a>ファイルで構成します。</p><ol><li><p><code>src/main</code>内に<code>appengine</code>ディレクトリを作成します。</p></li><li><p>このディレクトリ内に<code>app.yaml</code>ファイルを作成し、以下のコンテンツを追加します（<code>google-appengine-standard</code>をプロジェクト名に置き換えます）。</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">runtime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">java21</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">entrypoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;java -jar google-appengine-standard-all.jar&#39;</span></span></code></pre></div><p><code>entrypoint</code>オプションには、アプリケーション用に生成されたfat JARを実行するために使用されるコマンドが含まれています。</p><p>サポートされている構成オプションに関する詳細なドキュメントは、<a href="https://cloud.google.com/appengine/docs/standard/reference/app-yaml?tab=java" target="_blank" rel="noreferrer">Google App Engineドキュメント</a>で確認できます。</p></li></ol><h2 id="deploy-app" tabindex="-1">アプリケーションのデプロイ <a class="header-anchor" href="#deploy-app" aria-label="Permalink to &quot;アプリケーションのデプロイ {id=&quot;deploy-app&quot;}&quot;">​</a></h2><p>アプリケーションをデプロイするには、ターミナルを開き、以下の手順に従います。</p><ol><li><p>まず、アプリケーションリソースを保持するトップレベルのコンテナであるGoogle Cloudプロジェクトを作成します。例えば、以下のコマンドは<code>ktor-sample-app-engine</code>という名前でプロジェクトを作成します。</p><div class="language-Bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gcloud</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> projects</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ktor-sample-app-engine</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --set-as-default</span></span></code></pre></div></li><li><p>Cloudプロジェクト用にApp Engineアプリケーションを作成します。</p><div class="language-Bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gcloud</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> app</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> create</span></span></code></pre></div></li><li><p>アプリケーションをデプロイするには、<code>appengineDeploy</code> Gradleタスクを実行します...</p><div class="language-Bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> appengineDeploy</span></span></code></pre></div><p>...そして、Google Cloudがアプリケーションをビルドおよび公開するまで待ちます。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>...done.</span></span>
<span class="line"><span>Deployed service [default] to [https://ktor-sample-app-engine.ew.r.appspot.com]</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>ビルド中に<code>Cloud Build has not been used in project</code>エラーが発生した場合は、エラーレポートの指示に従って有効にしてください。</p></div></li></ol><p>完成した例は、こちらで確認できます: <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/google-appengine-standard" target="_blank" rel="noreferrer">google-appengine-standard</a>。</p>`,21))])}const q=d(E,[["render",u]]);export{f as __pageData,q as default};
