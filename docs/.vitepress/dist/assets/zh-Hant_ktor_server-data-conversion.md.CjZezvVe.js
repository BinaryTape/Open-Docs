import{_ as u,C as e,c as v,o as y,G as a,ag as k,j as i,w as t,a as n}from"./chunks/framework.Bksy39di.js";const B=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/ktor/server-data-conversion.md","filePath":"zh-Hant/ktor/server-data-conversion.md","lastUpdated":1755457140000}'),m={name:"zh-Hant/ktor/server-data-conversion.md"};function F(C,s,D,b,f,A){const d=e("TopicTitle"),h=e("primary-label"),p=e("Links"),E=e("tldr"),g=e("link-summary"),l=e("code-block"),o=e("TabItem"),r=e("Tabs"),c=e("list");return y(),v("div",null,[a(d,{labelRef:"server-plugin",title:"資料轉換"}),a(h,{ref:"server-plugin"},null,512),a(E,null,{default:t(()=>[s[3]||(s[3]=i("p",null,[i("b",null,"程式碼範例"),n(": "),i("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/data-conversion"}," data-conversion ")],-1)),s[4]||(s[4]=i("p",null,[i("b",null,"所需依賴項"),n(": "),i("code",null,"io.ktor:ktor-server-data-conversion")],-1)),i("p",null,[i("b",null,[a(p,{href:"/ktor/server-native",summary:"Ktor 支援 Kotlin/Native，允許您在不依賴額外執行時或虛擬機器的情況下執行伺服器。"},{default:t(()=>s[0]||(s[0]=[n("原生伺服器")])),_:1}),s[1]||(s[1]=n(" 支援"))]),s[2]||(s[2]=n(": ✅ "))])]),_:1}),a(g,null,{default:t(()=>s[5]||(s[5]=[n(" Ktor 伺服器的 DataConversion 外掛允許您新增自訂轉換器，以序列化和反序列化值列表。 ")])),_:1}),s[18]||(s[18]=k('<p>DataConversion <a href="https://api.ktor.io/ktor-utils/io.ktor.util.converters/-data-conversion/index.html" target="_blank" rel="noreferrer">外掛</a> 允許您序列化和反序列化值列表。預設情況下，Ktor 透過 <a href="https://api.ktor.io/ktor-utils/io.ktor.util.converters/-default-conversion-service/index.html" target="_blank" rel="noreferrer">DefaultConversionService</a> 處理基本類型和列舉。您可以透過安裝和配置 <code>DataConversion</code> 外掛來擴展此服務以處理其他類型。</p><h2 id="add_dependencies" tabindex="-1">新增依賴項 <a class="header-anchor" href="#add_dependencies" aria-label="Permalink to &quot;新增依賴項 {id=&quot;add_dependencies&quot;}&quot;">​</a></h2><p> 要使用 <code>DataConversion</code>，您需要在構建腳本中包含 <code>ktor-server-data-conversion</code> artifact： </p>',3)),a(r,{group:"languages"},{default:t(()=>[a(o,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:t(()=>[a(l,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-server-data-conversion:$ktor_version")'})]),_:1}),a(o,{title:"Gradle (Groovy)","group-key":"groovy"},{default:t(()=>[a(l,{lang:"Groovy",code:'            implementation "io.ktor:ktor-server-data-conversion:$ktor_version"'})]),_:1}),a(o,{title:"Maven","group-key":"maven"},{default:t(()=>[a(l,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-server-data-conversion-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),s[19]||(s[19]=i("h2",{id:"install_plugin",tabindex:"-1"},[n("安裝 DataConversion "),i("a",{class:"header-anchor",href:"#install_plugin","aria-label":'Permalink to "安裝 DataConversion {id="install_plugin"}"'},"​")],-1)),i("p",null,[s[7]||(s[7]=n(" 若要將 ")),s[8]||(s[8]=i("code",null,"DataConversion",-1)),s[9]||(s[9]=n(" 外掛")),s[10]||(s[10]=i("a",{href:"#install"},"安裝",-1)),s[11]||(s[11]=n("到應用程式中，請在指定的")),a(p,{href:"/ktor/server-modules",summary:"模組允許您透過分組路由來組織應用程式。"},{default:t(()=>s[6]||(s[6]=[n("模組")])),_:1}),s[12]||(s[12]=n("中將其傳遞給 ")),s[13]||(s[13]=i("code",null,"install",-1)),s[14]||(s[14]=n(" 函數。以下程式碼片段展示了如何安裝 ")),s[15]||(s[15]=i("code",null,"DataConversion",-1)),s[16]||(s[16]=n(" ... "))]),a(c,null,{default:t(()=>s[17]||(s[17]=[i("li",null,[n(" ... 在 "),i("code",null,"embeddedServer"),n(" 函數呼叫內部。 ")],-1),i("li",null,[n(" ... 在明確定義的 "),i("code",null,"module"),n(" 內部，後者是 "),i("code",null,"Application"),n(" 類別的一個擴展函數。 ")],-1)])),_:1}),a(r,null,{default:t(()=>[a(o,{title:"embeddedServer"},{default:t(()=>[a(l,{lang:"kotlin",code:`            import io.ktor.server.engine.*
            import io.ktor.server.netty.*
            import io.ktor.server.application.*
            import io.ktor.server.plugins.dataconversion.*

            fun main() {
                embeddedServer(Netty, port = 8080) {
                    install(DataConversion)
                    // ...
                }.start(wait = true)
            }`})]),_:1}),a(o,{title:"module"},{default:t(()=>[a(l,{lang:"kotlin",code:`            import io.ktor.server.application.*
            import io.ktor.server.plugins.dataconversion.*
            // ...
            fun Application.module() {
                install(DataConversion)
                // ...
            }`})]),_:1})]),_:1}),s[20]||(s[20]=k(`<h2 id="add-converters" tabindex="-1">新增轉換器 <a class="header-anchor" href="#add-converters" aria-label="Permalink to &quot;新增轉換器 {id=&quot;add-converters&quot;}&quot;">​</a></h2><p>您可以在 <code>DataConversion</code> 配置中定義類型轉換。為指定類型提供一個 <code>convert&lt;T&gt;</code> 方法，並使用可用函數序列化和反序列化值列表：</p><ul><li>使用 <code>decode()</code> 函數反序列化值列表。它接受一個字串列表，表示 URL 中的重複值，並返回解碼後的值。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">decode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { values </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // converter: (values: List&lt;String&gt;) -&gt; Any?</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //deserialize values</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>使用 <code>encode()</code> 函數序列化一個值。該函數接受任意值並返回表示它的字串列表。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   encode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // converter: (value: Any?) -&gt; List&lt;String&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     //serialize value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre></div><h2 id="存取服務" tabindex="-1">存取服務 <a class="header-anchor" href="#存取服務" aria-label="Permalink to &quot;存取服務&quot;">​</a></h2><p id="service"></p><p>您可以從當前上下文存取 <code>DataConversion</code> 服務：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dataConversion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> application.conversionService</span></span></code></pre></div><p>然後您可以使用轉換器服務呼叫回呼函數：</p><ul><li><code>fromValues(values: List&lt;String&gt;, type: TypeInfo)</code> 回呼函數接受 <code>values</code> 作為字串列表，以及用於轉換值的 <code>TypeInfo</code>，並返回解碼後的值。</li><li><code>toValues(value: Any?)</code> 回呼函數接受任意值並返回表示它的字串列表。</li></ul><h2 id="範例" tabindex="-1">範例 <a class="header-anchor" href="#範例" aria-label="Permalink to &quot;範例&quot;">​</a></h2><p>在以下範例中，為 <code>LocalDate</code> 類型定義並配置了一個轉換器，用於序列化和反序列化值。當呼叫 <code>encode</code> 函數時，服務將使用 <code>SimpleDateFormat</code> 轉換值並返回包含格式化值的列表。當呼叫 <code>decode</code> 函數時，服務將把日期格式化為 <code>LocalDate</code> 並返回。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(DataConversion) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        convert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LocalDate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// this: DelegatingConversionService</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> formatter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DateTimeFormatterBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">appendValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ChronoField.YEAR, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, SignStyle.NEVER)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">appendValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ChronoField.MONTH_OF_YEAR, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">appendValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ChronoField.DAY_OF_MONTH, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toFormatter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Locale.ROOT)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            decode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { values </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // converter: (values: List&lt;String&gt;) -&gt; Any?</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                LocalDate.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(formatter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(values.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">single</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            encode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // converter: (value: Any?) -&gt; List&lt;String&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(SimpleDateFormat.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">format</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre></div><p>隨後可以手動呼叫轉換服務，以擷取編碼和解碼的值：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> encodedDate </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> application.conversionService.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toValues</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(call.parameters[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;date&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> decodedDate </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> application.conversionService.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fromValues</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(encodedDate, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">typeInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LocalDate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;())</span></span></code></pre></div><p>如需完整範例，請參閱 <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/data-conversion" target="_blank" rel="noreferrer">data-conversion</a></p>`,18))])}const T=u(m,[["render",F]]);export{B as __pageData,T as default};
