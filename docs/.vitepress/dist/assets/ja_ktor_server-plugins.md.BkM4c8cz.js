import{_ as d,a as E,b as g}from"./chunks/plugin-pipeline-routing.fgYqhUxB.js";import{_ as c,C as a,c as y,o as u,j as e,G as s,ag as p,a as h,w as n}from"./chunks/framework.Bksy39di.js";const A=JSON.parse('{"title":"サーバープラグイン","description":"","frontmatter":{},"headers":[],"relativePath":"ja/ktor/server-plugins.md","filePath":"ja/ktor/server-plugins.md","lastUpdated":1755457140000}'),F={name:"ja/ktor/server-plugins.md"};function C(m,i,_,v,b,B){const k=a("show-structure"),r=a("link-summary"),t=a("code-block"),l=a("TabItem"),o=a("Tabs");return u(),y("div",null,[i[1]||(i[1]=e("h1",{id:"サーバープラグイン",tabindex:"-1"},[h("サーバープラグイン "),e("a",{class:"header-anchor",href:"#サーバープラグイン","aria-label":'Permalink to "サーバープラグイン"'},"​")],-1)),s(k,{for:"chapter",depth:"2"}),s(r,null,{default:n(()=>i[0]||(i[0]=[h(" プラグインは、シリアライゼーション、コンテンツエンコーディング、圧縮などの共通機能を提供します。 ")])),_:1}),i[2]||(i[2]=p('<p>Ktorにおける一般的なリクエスト/レスポンスパイプラインは以下のようになります。</p><p><img src="'+d+'" alt="Request Response Pipeline" width="600"></p><p>リクエストから始まり、特定のハンドラーにルーティングされ、アプリケーションロジックによって処理され、最終的にレスポンスが返されます。</p><h2 id="add_functionality" tabindex="-1">プラグインで機能を追加する <a class="header-anchor" href="#add_functionality" aria-label="Permalink to &quot;プラグインで機能を追加する {id=&quot;add_functionality&quot;}&quot;">​</a></h2><p>多くのアプリケーションでは、アプリケーションロジックの範囲外となる共通機能が必要です。これには、シリアライゼーション、コンテンツエンコーディング、圧縮、ヘッダー、Cookieのサポートなどが含まれます。これらすべては、Ktorでは<strong>プラグイン (Plugins)</strong> と呼ばれるものによって提供されます。</p><p>前のパイプライン図を見ると、プラグインはリクエスト/レスポンスとアプリケーションロジックの間に位置しています。</p><p><img src="'+E+'" alt="Plugin pipeline" width="600"></p><p>リクエストが来たとき：</p><ul><li>ルーティングメカニズムを通じて正しいハンドラーにルーティングされる</li><li>ハンドラーに渡される前に、1つまたは複数のプラグインを経由する</li><li>ハンドラー（アプリケーションロジック）がリクエストを処理する</li><li>レスポンスがクライアントに送信される前に、1つまたは複数のプラグインを経由する</li></ul><h2 id="routing" tabindex="-1">ルーティングもプラグインである <a class="header-anchor" href="#routing" aria-label="Permalink to &quot;ルーティングもプラグインである {id=&quot;routing&quot;}&quot;">​</a></h2><p>プラグインは最大限の柔軟性を提供するように設計されており、リクエスト/レスポンスパイプラインのどのセグメントにも存在できるようにしています。実際、これまで<code>routing</code>と呼んでいたものは、単なるプラグインに過ぎません。</p><p><img src="'+g+'" alt="Routing as a Plugin" width="600"></p><h2 id="dependency" tabindex="-1">プラグインの依存関係を追加する <a class="header-anchor" href="#dependency" aria-label="Permalink to &quot;プラグインの依存関係を追加する {id=&quot;dependency&quot;}&quot;">​</a></h2><p>ほとんどのプラグインは特定の依存関係を必要とします。例えば、<code>CORS</code>プラグインでは、ビルドスクリプトに<code>ktor-server-cors</code>アーティファクトを追加する必要があります。</p>',14)),s(o,{group:"languages"},{default:n(()=>[s(l,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[s(t,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-server-cors:$ktor_version")'})]),_:1}),s(l,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[s(t,{lang:"Groovy",code:'            implementation "io.ktor:ktor-server-cors:$ktor_version"'})]),_:1}),s(l,{title:"Maven","group-key":"maven"},{default:n(()=>[s(t,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-server-cors-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),i[3]||(i[3]=p(`<h2 id="install" tabindex="-1">プラグインをインストールする <a class="header-anchor" href="#install" aria-label="Permalink to &quot;プラグインをインストールする {id=&quot;install&quot;}&quot;">​</a></h2><p>プラグインは通常、サーバーの初期化フェーズで、プラグインをパラメータとして取る<code>install</code>関数を使用して設定されます。<a href="./server-create-and-configure">サーバーの作成方法</a>に応じて、<code>embeddedServer</code>呼び出しの内部でプラグインをインストールできます...</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.application.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.plugins.cors.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.plugins.compression.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    embeddedServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Netty, port </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8080</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CORS)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Compression)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(wait </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>...または指定された<a href="./server-modules">モジュール</a>でインストールできます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.application.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.plugins.cors.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.plugins.compression.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CORS)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Compression)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>リクエストとレスポンスをインターセプトするだけでなく、プラグインにはこのステップで設定されるオプションの構成セクションを持つことができます。</p><p>例えば、<a href="./server-sessions#cookie">Cookie</a>をインストールする際に、Cookieをどこに保存するか、その名前など、特定のパラメータを設定できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Sessions) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    cookie</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyCookie</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MY_COOKIE&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="install-route" tabindex="-1">特定のルートにプラグインをインストールする <a class="header-anchor" href="#install-route" aria-label="Permalink to &quot;特定のルートにプラグインをインストールする {id=&quot;install-route&quot;}&quot;">​</a></h3><p>Ktorでは、プラグインをグローバルにインストールするだけでなく、特定の<a href="./server-routing">ルート</a>にもインストールできます。これは、異なるアプリケーションリソースに対して異なるプラグイン構成が必要な場合に役立ちます。例えば、以下の<a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/caching-headers-routes" target="_blank" rel="noreferrer">例</a>は、<code>/index</code>ルートに指定された<a href="./server-caching-headers">キャッシュヘッダー</a>を追加する方法を示しています。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">route</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CachingHeaders) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { call, content </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CachingOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CacheControl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MaxAge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(maxAgeSeconds </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1800</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Index page&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>同じプラグインが複数インストールされている場合、以下のルールが適用されることに注意してください。</p><ul><li><p>特定のルートにインストールされたプラグインの設定は、その<a href="#install">グローバル設定</a>を上書きします。</p></li><li><p>ルーティングは同じルートのインストールをマージし、最後のインストールが優先されます。例えば、このようなアプリケーションの場合...</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    route</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CachingHeaders) { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* First configuration */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    route</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CachingHeaders) { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* Second configuration */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;b&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><p>&quot;}</p><pre><code>...\`/index/a\`と\`/index/b\`への両方の呼び出しは、プラグインの2番目のインストールのみによって処理されます。
</code></pre><h2 id="default_available_custom" tabindex="-1">デフォルト、利用可能なプラグイン、カスタムプラグイン <a class="header-anchor" href="#default_available_custom" aria-label="Permalink to &quot;デフォルト、利用可能なプラグイン、カスタムプラグイン {id=&quot;default_available_custom&quot;}&quot;">​</a></h2><p>デフォルトでは、Ktorはどのプラグインもアクティベートしないため、アプリケーションが必要とする機能のためにプラグインをインストールするかどうかは、あなた次第です。</p><p>しかしながら、Ktorは箱から出してすぐに使える様々なプラグインを提供しています。これらの完全なリストは、<a href="https://github.com/ktorio/ktor-plugin-registry/tree/main/plugins/server" target="_blank" rel="noreferrer">Ktor Plugin Registry</a>で確認できます。</p><p>さらに、独自の<a href="./server-custom-plugins">カスタムプラグイン</a>を作成することもできます。</p>`,19))])}const D=c(F,[["render",C]]);export{A as __pageData,D as default};
