import{_ as i}from"./chunks/compose-resources-android-webview.1cP4Ejca.js";import{_ as s,c as e,o as t,ag as l}from"./chunks/framework.Bksy39di.js";const E=JSON.parse('{"title":"Compose Multiplatform 1.7.3 有何新功能","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kmp/whats-new-compose-170.md","filePath":"zh-Hant/kmp/whats-new-compose-170.md","lastUpdated":1755516278000}'),o={name:"zh-Hant/kmp/whats-new-compose-170.md"};function n(p,a,r,h,d,c){return t(),e("div",null,a[0]||(a[0]=[l(`<h1 id="compose-multiplatform-1-7-3-有何新功能" tabindex="-1">Compose Multiplatform 1.7.3 有何新功能 <a class="header-anchor" href="#compose-multiplatform-1-7-3-有何新功能" aria-label="Permalink to &quot;Compose Multiplatform 1.7.3 有何新功能&quot;">​</a></h1><p>以下是此功能版本的主要亮點：</p><ul><li><a href="#type-safe-navigation">型別安全的導航</a></li><li><a href="#shared-element-transitions">共享元素轉場</a></li><li><a href="#resources-packed-into-android-assets">打包至 Android assets 的多平台資源</a></li><li><a href="#custom-resource-directories">自訂資源目錄</a></li><li><a href="#support-for-multiplatform-test-resources">支援多平台測試資源</a></li><li><a href="#new-default-behavior-for-processing-touch-in-ios-native-elements">改善 iOS 上的觸控互通性</a></li><li><a href="#material3-adaptive-adaptive">Material3 <code>adaptive</code> 和 <code>material3-window-size-class</code> 現已在通用程式碼中提供</a></li><li><a href="#drag-and-drop">桌面版已實作拖放功能</a></li><li><a href="#basictextfield-renamed-from-basictextfield2-adopted-on-desktop"><code>BasicTextField</code> 已在桌面版採用 (由 BasicTextField2 更名)</a></li></ul><p>請參閱此版本的完整變更列表 <a href="./https://github.com/JetBrains/compose-multiplatform/blob/master/CHANGELOG#170-october-2024">在 GitHub 上</a>。</p><h2 id="相依性" tabindex="-1">相依性 <a class="header-anchor" href="#相依性" aria-label="Permalink to &quot;相依性&quot;">​</a></h2><ul><li>Gradle 外掛程式 <code>org.jetbrains.compose</code>，版本 1.7.3。基於 Jetpack Compose 函式庫： <ul><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-runtime#1.7.5" target="_blank" rel="noreferrer">Runtime 1.7.5</a></li><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-ui#1.7.5" target="_blank" rel="noreferrer">UI 1.7.5</a></li><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-foundation#1.7.5" target="_blank" rel="noreferrer">Foundation 1.7.5</a></li><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-material#1.7.5" target="_blank" rel="noreferrer">Material 1.7.5</a></li><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-material3#1.3.1" target="_blank" rel="noreferrer">Material3 1.3.1</a></li></ul></li><li>Lifecycle 函式庫 <code>org.jetbrains.androidx.lifecycle:lifecycle-*:2.8.3</code>。基於 <a href="https://developer.android.com/jetpack/androidx/releases/lifecycle#2.8.5" target="_blank" rel="noreferrer">Jetpack Lifecycle 2.8.5</a>。</li><li>Navigation 函式庫 <code>org.jetbrains.androidx.navigation:navigation-*:2.8.0-alpha10</code>。基於 <a href="https://developer.android.com/jetpack/androidx/releases/navigation#2.8.0" target="_blank" rel="noreferrer">Jetpack Navigation 2.8.0</a>。</li><li>Material3 Adaptive 函式庫 <code>org.jetbrains.compose.material3.adaptive:adaptive-*:1.0.0</code>。基於 <a href="https://developer.android.com/jetpack/androidx/releases/compose-material3-adaptive#1.0.0" target="_blank" rel="noreferrer">Jetpack Material3 Adaptive 1.0.0</a></li></ul><h2 id="破壞性變更" tabindex="-1">破壞性變更 <a class="header-anchor" href="#破壞性變更" aria-label="Permalink to &quot;破壞性變更&quot;">​</a></h2><h3 id="最低-agp-版本提升至-8-1-0" tabindex="-1">最低 AGP 版本提升至 8.1.0 <a class="header-anchor" href="#最低-agp-版本提升至-8-1-0" aria-label="Permalink to &quot;最低 AGP 版本提升至 8.1.0&quot;">​</a></h3><p>Jetpack Compose 1.7.0 和 Lifecycle 2.8.0（兩者都由 Compose Multiplatform 1.7.0 使用）皆不支援 AGP 7。 因此，當您更新至 Compose Multiplatform 1.7.3 時，您可能也必須升級您的 AGP 相依性。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Android Studio 中新實作的 Android composables 預覽功能 <a href="#resources-packed-into-android-assets">需要最新的 AGP 版本之一</a>。</p></div><h3 id="java-資源-api-已棄用-改用多平台資源庫" tabindex="-1">Java 資源 API 已棄用，改用多平台資源庫 <a class="header-anchor" href="#java-資源-api-已棄用-改用多平台資源庫" aria-label="Permalink to &quot;Java 資源 API 已棄用，改用多平台資源庫&quot;">​</a></h3><p>在此版本中，我們明確棄用了 <code>compose.ui</code> 軟體包中可用的 Java 資源 API：<code>painterResource()</code>、<code>loadImageBitmap()</code>、<code>loadSvgPainter()</code> 和 <code>loadXmlImageVector()</code> 函數，以及 <code>ClassLoaderResourceLoader</code> 類別和依賴於它的函數。</p><p>請考慮轉移至 <a href="./compose-multiplatform-resources">多平台資源庫</a>。 雖然您可以在 Compose Multiplatform 中使用 Java 資源，但它們無法受益於框架提供的擴充功能：生成式存取器、多模組支援、本地化等等。</p><p>如果您仍然需要存取 Java 資源，可以複製 <a href="https://github.com/JetBrains/compose-multiplatform-core/pull/1457" target="_blank" rel="noreferrer">pull request 中建議的實作</a>， 以確保即使在您升級到 Compose Multiplatform 1.7.3 並在可能的情況下切換到多平台資源後，您的程式碼仍然可以運作。</p><h3 id="ios-原生元素中處理觸控的新預設行為" tabindex="-1">iOS 原生元素中處理觸控的新預設行為 <a class="header-anchor" href="#ios-原生元素中處理觸控的新預設行為" aria-label="Permalink to &quot;iOS 原生元素中處理觸控的新預設行為&quot;">​</a></h3><p>在 1.7.3 之前，Compose Multiplatform 無法回應落在互通 UI 視圖中的觸控事件，因此 互通視圖會完全處理這些觸控序列。</p><p>Compose Multiplatform 1.7.3 實作了更精密的邏輯來處理互通觸控序列。 預設情況下，現在在初始觸控後會有一段延遲，這有助於父層 composable 判斷觸控序列是否旨在與原生視圖互動並做出相應反應。</p><p>更多資訊請參閱 <a href="#ios-touch-interop">此頁面的 iOS 部分</a> 中的解釋， 或閱讀 <a href="./compose-ios-touch">此功能的說明文件</a>。</p><h3 id="ios-上強制禁用最低影格持續時間" tabindex="-1">iOS 上強制禁用最低影格持續時間 <a class="header-anchor" href="#ios-上強制禁用最低影格持續時間" aria-label="Permalink to &quot;iOS 上強制禁用最低影格持續時間&quot;">​</a></h3><p>開發者經常未能注意到有關高更新率顯示器列印出的警告， 導致用戶在他們的 120Hz 啟用設備上無法享受流暢的動畫。 我們現在嚴格執行此檢查。如果 <code>Info.plist</code> 檔案中缺少 <code>CADisableMinimumFrameDurationOnPhone</code> 屬性或將其設定為 <code>false</code>，則使用 Compose Multiplatform 建置的應用程式現在將會當機。</p><p>您可以透過將 <code>ComposeUIViewControllerConfiguration.enforceStrictPlistSanityCheck</code> 屬性設定為 <code>false</code> 來禁用此行為。</p><h3 id="桌面版-modifier-onexternaldrag-已棄用" tabindex="-1">桌面版 Modifier.onExternalDrag 已棄用 <a class="header-anchor" href="#桌面版-modifier-onexternaldrag-已棄用" aria-label="Permalink to &quot;桌面版 Modifier.onExternalDrag 已棄用&quot;">​</a></h3><p>實驗性的 <code>Modifier.onExternalDrag</code> 和相關 API 已棄用，改用新的 <code>Modifier.dragAndDropTarget</code>。 <code>DragData</code> 介面已移至 <code>compose.ui.draganddrop</code> 軟體包。</p><p>如果您在 Compose Multiplatform 1.7.0 中使用已棄用的 API，您將會遇到棄用錯誤。 在 1.8.0 中，<code>onExternalDrag</code> 修飾符將會被完全移除。</p><h2 id="跨平台" tabindex="-1">跨平台 <a class="header-anchor" href="#跨平台" aria-label="Permalink to &quot;跨平台&quot;">​</a></h2><h3 id="共享元素轉場" tabindex="-1">共享元素轉場 <a class="header-anchor" href="#共享元素轉場" aria-label="Permalink to &quot;共享元素轉場&quot;">​</a></h3><p>Compose Multiplatform 現在提供一個 API，用於在共享一致元素的 composables 之間進行無縫轉場。 這些轉場在導航中通常很有用，可幫助使用者追蹤 UI 中變化的軌跡。</p><p>要深入探討此 API，請參閱 <a href="https://developer.android.com/develop/ui/compose/animation/shared-elements" target="_blank" rel="noreferrer">Jetpack Compose 說明文件</a>。</p><h3 id="型別安全的導航" tabindex="-1">型別安全的導航 <a class="header-anchor" href="#型別安全的導航" aria-label="Permalink to &quot;型別安全的導航&quot;">​</a></h3><p>Compose Multiplatform 已採用 Jetpack Compose 的型別安全方法來沿著導航路徑傳遞物件。 Navigation 2.8.0 中的新 API 允許 Compose 為您的導航圖提供編譯時期的安全性。 這些 API 達到了與基於 XML 的導航的 <a href="https://developer.android.com/guide/navigation/use-graph/pass-data#Safe-args" target="_blank" rel="noreferrer">Safe Args</a> 外掛程式相同的效果。</p><p>有關詳細資訊，請參閱 <a href="https://developer.android.com/guide/navigation/design/type-safety" target="_blank" rel="noreferrer">Google 關於 Navigation Compose 中型別安全性的文件</a>。</p><h3 id="多平台資源" tabindex="-1">多平台資源 <a class="header-anchor" href="#多平台資源" aria-label="Permalink to &quot;多平台資源&quot;">​</a></h3><h4 id="資源打包至-android-assets" tabindex="-1">資源打包至 Android assets <a class="header-anchor" href="#資源打包至-android-assets" aria-label="Permalink to &quot;資源打包至 Android assets&quot;">​</a></h4><p>所有多平台資源現在都打包到 Android assets 中。這允許 Android Studio 在 Android 來源集中為 Compose Multiplatform composables 生成預覽。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Android Studio 預覽功能僅適用於 Android 來源集中的 composables。 它們還需要最新的 AGP 版本之一：8.5.2、8.6.0-rc01 或 8.7.0-alpha04。</p></div><p>這也提供了從 Android 上的 WebViews 和媒體播放器組件直接存取多平台資源的功能， 因為資源可以透過簡單的路徑存取，例如 <code>Res.getUri(“files/index.html”)</code>。</p><p>這是一個 Android composable 的範例，它顯示一個資源 HTML 頁面，其中包含指向資源圖片的連結：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// androidMain/kotlin/com/example/webview/App.kt</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalResourceApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Composable</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Preview</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    MaterialTheme</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uri </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getUri</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;files/webview/index.html&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Adding a WebView inside AndroidView with layout as full screen.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        AndroidView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(factory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            WebView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(it).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                layoutParams </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ViewGroup.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LayoutParams</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    ViewGroup.LayoutParams.MATCH_PARENT,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    ViewGroup.LayoutParams.MATCH_PARENT</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }, update </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">loadUrl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(uri)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>此範例適用於這個簡單的 HTML 檔案：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">header</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Cat Resource</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">header</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">img</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cat.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>此範例中的兩個資源檔案都位於 <code>commonMain</code> 來源集中：</p><p><img src="`+i+`" alt="File structure of the composeResources directory" width="230"></p><h4 id="自訂資源目錄" tabindex="-1">自訂資源目錄 <a class="header-anchor" href="#自訂資源目錄" aria-label="Permalink to &quot;自訂資源目錄&quot;">​</a></h4><p>透過配置 DSL 中的新 <code>customDirectory</code> 設定，您可以 <a href="./compose-multiplatform-resources-setup#custom-resource-directories">將自訂目錄</a> 與特定來源集關聯。這使得例如可以使用下載的檔案作為資源。</p><h4 id="多平台字型快取" tabindex="-1">多平台字型快取 <a class="header-anchor" href="#多平台字型快取" aria-label="Permalink to &quot;多平台字型快取&quot;">​</a></h4><p>Compose Multiplatform 將 Android 的字型快取功能帶到其他平台， 消除了對 <code>Font</code> 資源過度的位元組讀取。</p><h4 id="支援多平台測試資源" tabindex="-1">支援多平台測試資源 <a class="header-anchor" href="#支援多平台測試資源" aria-label="Permalink to &quot;支援多平台測試資源&quot;">​</a></h4><p>資源庫現在支援在您的專案中使用測試資源，這意味著您可以：</p><ul><li>將資源新增至測試來源集。</li><li>使用僅在對應來源集中可用的生成式存取器。</li><li>僅在測試執行時將測試資源打包到應用程式中。</li></ul><h4 id="資源映射至字串-id-以便輕鬆存取" tabindex="-1">資源映射至字串 ID 以便輕鬆存取 <a class="header-anchor" href="#資源映射至字串-id-以便輕鬆存取" aria-label="Permalink to &quot;資源映射至字串 ID 以便輕鬆存取&quot;">​</a></h4><p>每種類型的資源都與其檔案名稱映射。例如，您可以使用 <code>Res.allDrawableResources</code> 屬性 來取得所有 <code>drawable</code> 資源的映射，並透過傳遞其字串 ID 來存取所需資源：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">painterResource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Res.allDrawableResources[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;compose_multiplatform&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h4 id="將位元組陣列轉換為-imagebitmap-或-imagevector-的函數" tabindex="-1">將位元組陣列轉換為 ImageBitmap 或 ImageVector 的函數 <a class="header-anchor" href="#將位元組陣列轉換為-imagebitmap-或-imagevector-的函數" aria-label="Permalink to &quot;將位元組陣列轉換為 ImageBitmap 或 ImageVector 的函數&quot;">​</a></h4><p>有一些新函數可將 <code>ByteArray</code> 轉換為圖像資源：</p><ul><li><code>decodeToImageBitmap()</code> 將 JPEG、PNG、BMP 或 WEBP 檔案轉換為 <code>ImageBitmap</code> 物件。</li><li><code>decodeToImageVector()</code> 將 XML 向量檔案轉換為 <code>ImageVector</code> 物件。</li><li><code>decodeToSvgPainter()</code> 將 SVG 檔案轉換為 <code>Painter</code> 物件。此函數在 Android 上不可用。</li></ul><p>有關詳細資訊，請參閱 <a href="./compose-multiplatform-resources-usage#convert-byte-arrays-into-images">說明文件</a>。</p><h3 id="新的通用模組" tabindex="-1">新的通用模組 <a class="header-anchor" href="#新的通用模組" aria-label="Permalink to &quot;新的通用模組&quot;">​</a></h3><h4 id="material3-adaptive-adaptive" tabindex="-1">material3.adaptive:adaptive* <a class="header-anchor" href="#material3-adaptive-adaptive" aria-label="Permalink to &quot;material3.adaptive:adaptive*&quot;">​</a></h4><p>Material3 adaptive 模組現在透過 Compose Multiplatform 在通用程式碼中可用。 要使用它們，請在模組的 <code>build.gradle.kts</code> 檔案中明確將相應的相依性新增到通用來源集：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">commonMain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.compose.material3.adaptive:adaptive:1.0.0-alpha03&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.compose.material3.adaptive:adaptive-layout:1.0.0-alpha03&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.compose.material3.adaptive:adaptive-navigation:1.0.0-alpha03&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="material3-material3-adaptive-navigation-suite" tabindex="-1">material3.material3-adaptive-navigation-suite <a class="header-anchor" href="#material3-material3-adaptive-navigation-suite" aria-label="Permalink to &quot;material3.material3-adaptive-navigation-suite&quot;">​</a></h4><p>Material3 adaptive navigation suite（對於使用 Compose <a href="https://developer.android.com/develop/ui/compose/layouts/adaptive/build-adaptive-navigation" target="_blank" rel="noreferrer">建構適應性導航</a> 很重要）可透過 Compose Multiplatform 在通用程式碼中提供。 要使用它，請在模組的 <code>build.gradle.kts</code> 檔案中明確將相依性新增到通用來源集：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">commonMain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(compose.material3AdaptiveNavigationSuite)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="material3-material3-window-size-class" tabindex="-1">material3:material3-window-size-class <a class="header-anchor" href="#material3-material3-window-size-class" aria-label="Permalink to &quot;material3:material3-window-size-class&quot;">​</a></h4><p>要使用 <a href="https://developer.android.com/reference/kotlin/androidx/compose/material3/windowsizeclass/package-summary" target="_blank" rel="noreferrer"><code>WindowSizeClass</code></a> 類別，請在模組的 <code>build.gradle.kts</code> 檔案中明確將 <code>material3-window-size-class</code> 相依性新增到通用來源集：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">commonMain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.compose.material3:material3-window-size-class:1.7.3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>calculateWindowSizeClass()</code> 函數尚未在通用程式碼中提供。 但是，您可以在平台特定程式碼中匯入並呼叫它，例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// desktopMain/kotlin/main.kt</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> androidx.compose.material3.windowsizeclass.calculateWindowSizeClass</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> size </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> calculateWindowSizeClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><h4 id="material-navigation" tabindex="-1">material-navigation <a class="header-anchor" href="#material-navigation" aria-label="Permalink to &quot;material-navigation&quot;">​</a></h4><p>除了 Compose Multiplatform Navigation 之外，<code>material-navigation</code> 函式庫在通用程式碼中也可用。 要使用它，請在模組的 <code>build.gradle.kts</code> 檔案中將以下明確相依性新增到通用來源集：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">commonMain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.androidx.navigation:navigation-compose:2.8.0-alpha10&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.compose.material:material-navigation:1.7.0-beta02&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="skia-更新至-milestone-126" tabindex="-1">Skia 更新至 Milestone 126 <a class="header-anchor" href="#skia-更新至-milestone-126" aria-label="Permalink to &quot;Skia 更新至 Milestone 126&quot;">​</a></h3><p>Compose Multiplatform 透過 <a href="https://github.com/JetBrains/skiko" target="_blank" rel="noreferrer">Skiko</a> 使用的 Skia 版本已更新至 Milestone 126。</p><p>之前使用的 Skia 版本是 Milestone 116。您可以在 <a href="./https://skia.googlesource.com/skia/+/refs/heads/main/RELEASE_NOTES#milestone-126">發行說明</a> 中查看這些版本之間所做的變更。</p><h3 id="graphicslayer-–-新的繪圖-api" tabindex="-1">GraphicsLayer – 新的繪圖 API <a class="header-anchor" href="#graphicslayer-–-新的繪圖-api" aria-label="Permalink to &quot;GraphicsLayer – 新的繪圖 API&quot;">​</a></h3><p>Jetpack Compose 1.7.0 中新增的繪圖層現在在 Compose Multiplatform 中可用。</p><p>與 <code>Modifier.graphicsLayer</code> 不同，新的 <code>GraphicsLayer</code> 類別允許您在任何地方渲染 Composable 內容。 這在預期動畫內容在不同場景中渲染的情況下很有用。</p><p>有關更詳細的描述和範例，請參閱 <a href="https://developer.android.com/reference/kotlin/androidx/compose/ui/graphics/layer/GraphicsLayer" target="_blank" rel="noreferrer">參考說明文件</a>。</p><h3 id="locallifecycleowner-已從-compose-ui-移出" tabindex="-1">LocalLifecycleOwner 已從 Compose UI 移出 <a class="header-anchor" href="#locallifecycleowner-已從-compose-ui-移出" aria-label="Permalink to &quot;LocalLifecycleOwner 已從 Compose UI 移出&quot;">​</a></h3><p><code>LocalLifecycleOwner</code> 類別已從 Compose UI 軟體包移至 Lifecycle 軟體包。</p><p>此變更允許您獨立於 Compose UI 存取該類別並呼叫其基於 Compose 的輔助 API。 但是，請記住，如果沒有 Compose UI 綁定，<code>LocalLifecycleOwner</code> 實例將沒有平台整合，因此也沒有平台特定事件可供監聽。</p><h2 id="ios" tabindex="-1">iOS <a class="header-anchor" href="#ios" aria-label="Permalink to &quot;iOS&quot;">​</a></h2><h3 id="ios-touch-interop" tabindex="-1">改善 Compose Multiplatform 與 iOS 原生觸控的互通性 <a class="header-anchor" href="#ios-touch-interop" aria-label="Permalink to &quot;改善 Compose Multiplatform 與 iOS 原生觸控的互通性 {id=&quot;ios-touch-interop&quot;}&quot;">​</a></h3><p>此版本改善了 iOS 互通視圖的觸控處理。 Compose Multiplatform 現在會嘗試偵測觸控是否用於互通視圖，或者是否應由 Compose 處理。 這使得處理發生在您的 Compose Multiplatform 應用程式中 UIKit 或 SwiftUI 區域內的觸控事件成為可能。</p><p>預設情況下，Compose Multiplatform 將延遲 150 毫秒將觸控事件傳輸到互通視圖：</p><ul><li>如果在此時間範圍內發生超出距離閾值的移動， 父層 composable 將會攔截觸控序列，並且它將不會轉發到互通視圖。</li><li>如果沒有明顯移動，Compose 將不處理其餘觸控序列， 而是僅由互通視圖處理。</li></ul><p>此行為與原生 <a href="https://developer.apple.com/documentation/uikit/uiscrollview" target="_blank" rel="noreferrer"><code>UIScrollView</code></a> 的運作方式一致。 它有助於防止觸控序列在互通視圖中開始，但在 Compose Multiplatform 未感知到的情況下被攔截的情形。這可能導致令人沮喪的使用者體驗。 例如，想像一個在可捲動環境（如懶惰列表）中使用的大型互通視訊播放器。 當螢幕大部分被視訊佔據並攔截所有觸控而 Compose Multiplatform 無法感知到它們時，捲動列表會變得棘手。</p><h3 id="原生效能改進" tabindex="-1">原生效能改進 <a class="header-anchor" href="#原生效能改進" aria-label="Permalink to &quot;原生效能改進&quot;">​</a></h3><p>透過 Kotlin 2.0.20，Kotlin/Native 團隊在使 iOS 上的 Compose 應用程式執行更快、更流暢方面取得了長足進步。 Compose Multiplatform 1.7.3 版本利用了這些最佳化，並帶來了 Jetpack Compose 1.7.0 的效能改進。</p><p>當比較 Compose Multiplatform 1.6.11 搭配 Kotlin 2.0.0 和 Compose Multiplatform 1.7.3 搭配 Kotlin 2.0.20 時，我們看到全面性的更好結果：</p><ul><li><code>LazyGrid</code> 基準測試模擬 <code>LazyVerticalGrid</code> 捲動，這最接近實際使用情境，平均執行速度快約 <strong>9%</strong>。 它還顯示錯過影格的數量顯著減少，這通常會讓使用者感覺 UI 反應較不靈敏。 親自試試看：使用 Compose Multiplatform 為 iOS 建置的應用程式應該會感覺流暢許多。</li><li><code>VisualEffects</code> 基準測試渲染大量隨機放置的元件，執行速度快 <strong>3.6</strong> 倍： 每 1000 影格的平均 CPU 時間從 8.8 秒減少到 2.4 秒。</li><li><code>AnimatedVisibility</code> composable 動畫顯示和隱藏圖像，呈現約 <strong>6%</strong> 更快的渲染速度。</li></ul><p>最重要的是，Kotlin 2.0.20 在垃圾回收器中引入了實驗性的 <a href="https://kotlinlang.org/docs/whatsnew2020.html#concurrent-marking-in-garbage-collector" target="_blank" rel="noreferrer">並行標記支援</a>。啟用並行標記可以縮短垃圾回收器暫停時間，並為所有基準測試帶來更大的改進。</p><p>您可以在 Compose Multiplatform 儲存庫中查看這些 Compose 特定基準測試的程式碼：</p><ul><li><a href="https://github.com/JetBrains/compose-multiplatform/tree/master/benchmarks/kn-performance" target="_blank" rel="noreferrer">Kotlin/Native 效能基準測試</a></li><li><a href="https://github.com/JetBrains/compose-multiplatform/tree/master/benchmarks/ios/jvm-vs-kotlin-native" target="_blank" rel="noreferrer">Kotlin/JVM 與 Kotlin/Native 基準測試</a></li></ul><h2 id="桌面版" tabindex="-1">桌面版 <a class="header-anchor" href="#桌面版" aria-label="Permalink to &quot;桌面版&quot;">​</a></h2><h3 id="拖放" tabindex="-1">拖放 <a class="header-anchor" href="#拖放" aria-label="Permalink to &quot;拖放&quot;">​</a></h3><p>拖放機制已在 Compose Multiplatform 桌面版中實作，該機制允許使用者將內容拖入或拖出您的 Compose 應用程式。 要指定拖放的潛在來源和目的地，請使用 <code>dragAndDropSource</code> 和 <code>dragAndDropTarget</code> 修飾符。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>雖然這些修飾符在通用程式碼中可用，但它們目前僅適用於桌面和 Android 來源集。 請繼續關注未來的版本。</p></div><p>對於常見使用情境，請參閱 Jetpack Compose 說明文件中的 <a href="https://developer.android.com/develop/ui/compose/touch-input/user-interactions/drag-and-drop" target="_blank" rel="noreferrer">專門文章</a>。</p><h3 id="basictextfield-由-basictextfield2-更名-已在桌面版採用" tabindex="-1">BasicTextField (由 BasicTextField2 更名) 已在桌面版採用 <a class="header-anchor" href="#basictextfield-由-basictextfield2-更名-已在桌面版採用" aria-label="Permalink to &quot;BasicTextField (由 BasicTextField2 更名) 已在桌面版採用&quot;">​</a></h3><p>Jetpack Compose 已使 <code>BasicTextField2</code> 元件穩定並將其更名為 <code>BasicTextField</code>。 在此版本中，Compose Multiplatform 已為桌面目標採用此變更，並計劃在穩定的 1.7.0 版本中也涵蓋 iOS。</p><p>新的 <code>BasicTextField</code>：</p><ul><li>允許您更可靠地管理狀態。</li><li>提供新的 <code>TextFieldBuffer</code> API，用於對文字欄位內容進行程式化的變更。</li><li>包含多個新的 API，用於視覺轉換和樣式設定。</li><li>提供對 <code>UndoState</code> 的存取，並能夠返回欄位的先前狀態。</li></ul><h3 id="composepanel-的渲染設定" tabindex="-1">ComposePanel 的渲染設定 <a class="header-anchor" href="#composepanel-的渲染設定" aria-label="Permalink to &quot;ComposePanel 的渲染設定&quot;">​</a></h3><p>透過在 <code>ComposePanel</code> 建構函式中指定新的 <code>RenderSettings.isVsyncEnabled</code> 參數，您可以提示後端渲染實作禁用垂直同步。 這可以減少輸入和 UI 變更之間的視覺延遲，但也可能導致畫面撕裂。</p><p>預設行為保持不變：<code>ComposePanel</code> 會嘗試將可繪製的呈現與 VSync 同步。</p><h2 id="網路版" tabindex="-1">網路版 <a class="header-anchor" href="#網路版" aria-label="Permalink to &quot;網路版&quot;">​</a></h2><h3 id="skiko-js-對於-kotlin-wasm-應用程式來說是多餘的" tabindex="-1">skiko.js 對於 Kotlin/Wasm 應用程式來說是多餘的 <a class="header-anchor" href="#skiko-js-對於-kotlin-wasm-應用程式來說是多餘的" aria-label="Permalink to &quot;skiko.js 對於 Kotlin/Wasm 應用程式來說是多餘的&quot;">​</a></h3><p><code>skiko.js</code> 檔案現在對於使用 Compose Multiplatform 建置的 Kotlin/Wasm 應用程式來說是多餘的。 您可以將其從 <code>index.html</code> 檔案中移除，並改善應用程式的載入時間。 <code>skiko.js</code> 將在未來版本中從 Kotlin/Wasm 發行版中完全移除。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p><code>skiko.js</code> 檔案對於 Kotlin/JS 應用程式來說仍然必要。</p></div>`,110)]))}const g=s(o,[["render",n]]);export{E as __pageData,g as default};
