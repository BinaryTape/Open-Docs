import{_ as p,C as i,c as h,o as k,G as a,ag as o,w as r,a as d}from"./chunks/framework.Bksy39di.js";const q=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ja/ktor/server-routing.md","filePath":"ja/ktor/server-routing.md","lastUpdated":1755457140000}'),c={name:"ja/ktor/server-routing.md"};function E(g,s,u,y,F,C){const n=i("TopicTitle"),e=i("show-structure"),t=i("primary-label"),l=i("link-summary");return k(),h("div",null,[a(n,{labelRef:"server-plugin",title:"ルーティング"}),a(e,{for:"chapter",depth:"2"}),a(t,{ref:"server-plugin"},null,512),a(l,null,{default:r(()=>s[0]||(s[0]=[d(" ルーティングは、サーバーアプリケーションで受信リクエストを処理するためのコアプラグインです。 ")])),_:1}),s[1]||(s[1]=o(`<p>ルーティングは、サーバーアプリケーションで受信リクエストを処理するためのKtorのコア<a href="./server-plugins">プラグイン</a>です。クライアントが特定のURL（例: <code>/hello</code>）にリクエストを送信すると、ルーティングメカニズムによって、このリクエストをどのように処理するかを定義できます。</p><h2 id="install_plugin" tabindex="-1">ルーティングのインストール <a class="header-anchor" href="#install_plugin" aria-label="Permalink to &quot;ルーティングのインストール {id=&quot;install_plugin&quot;}&quot;">​</a></h2><p>「ルーティング」プラグインは、次の方法でインストールできます。</p><div class="language-Kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.routing.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(RoutingRoot) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>「ルーティング」プラグインはあらゆるアプリケーションで非常に一般的であるため、ルーティングのインストールを簡素化する便利な <code>routing</code> 関数があります。以下のコードスニペットでは、<code>install(RoutingRoot)</code> が <code>routing</code> 関数に置き換えられています。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.routing.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="define_route" tabindex="-1">ルートハンドラーの定義 <a class="header-anchor" href="#define_route" aria-label="Permalink to &quot;ルートハンドラーの定義 {id=&quot;define_route&quot;}&quot;">​</a></h2><p>「ルーティング」プラグインを<a href="#install_plugin">インストール</a>した後、<code>routing</code> 内で<a href="https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.routing/route.html" target="_blank" rel="noreferrer">route</a> 関数を呼び出してルートを定義できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.routing.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.http.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.response.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    route</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, HttpMethod.Get) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        handle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Ktorはまた、ルートハンドラーの定義をはるかに簡単かつ簡潔にする一連の関数も提供しています。例えば、前のコードは、URLとリクエストを処理するコードのみを必要とする<a href="https://api.ktor.io/ktor-server/ktor-server-core/io.ktor.server.routing/get.html" target="_blank" rel="noreferrer">get</a> 関数に置き換えることができます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.routing.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.response.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>同様に、Ktorは他のすべての動詞、つまり <code>put</code>、<code>post</code>、<code>head</code> などについても関数を提供しています。</p><p>要約すると、ルートを定義するには以下の設定を指定する必要があります。</p><ul><li><p><strong>HTTP動詞</strong></p><p><code>GET</code>、<code>POST</code>、<code>PUT</code>などのHTTP動詞を選択します。最も便利な方法は、<code>get</code>、<code>post</code>、<code>put</code>などの専用動詞関数を使用することです。</p></li><li><p><strong>パスパターン</strong></p><p><code>/hello</code>、<code>/customer/{id}</code>などのURLパスを<a href="#match_url">照合</a>するために使用されるパスパターンを指定します。パスパターンを <code>get</code>/<code>post</code>/などの関数に直接渡すことも、<code>route</code> 関数を使用して<a href="#multiple_routes">ルートハンドラー</a>をグループ化し、<a href="#nested_routes">ネストされたルート</a>を定義することもできます。</p></li><li><p><strong>ハンドラー</strong></p><p><a href="./server-requests">リクエスト</a>と<a href="./server-responses">レスポンス</a>を処理する方法を指定します。ハンドラー内では、<code>ApplicationCall</code> にアクセスし、クライアントリクエストを処理し、レスポンスを送信できます。</p></li></ul><h2 id="match_url" tabindex="-1">パスパターンの指定 <a class="header-anchor" href="#match_url" aria-label="Permalink to &quot;パスパターンの指定 {id=&quot;match_url&quot;}&quot;">​</a></h2><p><a href="#define_route">ルーティング</a>関数（<code>route</code>、<code>get</code>、<code>post</code>など）に渡されるパスパターンは、URLの_パス_コンポーネントを照合するために使用されます。パスはスラッシュ <code>/</code> 文字で区切られた一連のパスセグメントを含むことができます。</p><blockquote><p>Ktorは末尾のスラッシュの有無でパスを区別することに注意してください。この動作は、<code>IgnoreTrailingSlash</code> プラグインを<a href="./server-plugins#install">インストール</a>することで変更できます。</p></blockquote><p>以下にいくつかのパスの例を示します。</p><ul><li><code>/hello</code> 単一のパスセグメントを含むパス。</li><li><code>/order/shipment</code> 複数のパスセグメントを含むパス。このようなパスは、そのまま<a href="#define_route">route/get/etc.</a>関数に渡すことも、複数の <code>route</code> 関数を<a href="#multiple_routes">ネスト</a>してサブルートを整理することもできます。</li><li><code>/user/{login}</code><code>login</code> <a href="#path_parameter">パスパラメータ</a>を持つパスで、その値はルートハンドラー内でアクセスできます。</li><li><code>/user/*</code> 任意のパスセグメントにマッチする<a href="#wildcard">ワイルドカード文字</a>を持つパス。</li><li><code>/user/{...}</code> URLパスの残りのすべてにマッチする<a href="#tailcard">テールカード</a>を持つパス。</li><li><code>/user/{param...}</code><a href="#path_parameter_tailcard">テールカード付きパスパラメータ</a>を含むパス。</li><li><code>Regex(&quot;/.+/hello&quot;)</code><code>/hello</code> の最後の出現箇所を含むパスセグメントまでを照合する<a href="#regular_expression">正規表現</a>を含むパス。</li></ul><h3 id="wildcard" tabindex="-1">ワイルドカード <a class="header-anchor" href="#wildcard" aria-label="Permalink to &quot;ワイルドカード {id=&quot;wildcard&quot;}&quot;">​</a></h3><p><em>ワイルドカード</em> (<code>*</code>) は任意のパスセグメントにマッチし、省略することはできません。例えば、<code>/user/*</code> は <code>/user/john</code> にマッチしますが、<code>/user</code> にはマッチしません。</p><h3 id="tailcard" tabindex="-1">テールカード <a class="header-anchor" href="#tailcard" aria-label="Permalink to &quot;テールカード {id=&quot;tailcard&quot;}&quot;">​</a></h3><p><em>テールカード</em> (<code>{...}</code>) はURLパスの残りのすべてにマッチし、複数のパスセグメントを含めることができ、空にすることもできます。例えば、<code>/user/{...}</code> は <code>/user/john/settings</code> および <code>/user</code> にマッチします。</p><h3 id="path_parameter" tabindex="-1">パスパラメータ <a class="header-anchor" href="#path_parameter" aria-label="Permalink to &quot;パスパラメータ {id=&quot;path_parameter&quot;}&quot;">​</a></h3><p><em>パスパラメータ</em> (<code>{param}</code>) はパスセグメントにマッチし、<code>param</code> という名前のパラメータとしてキャプチャします。このパスセグメントは必須ですが、疑問符を追加することでオプションにできます: <code>{param?}</code>。例えば、</p><ul><li><code>/user/{login}</code> は <code>/user/john</code> にマッチしますが、<code>/user</code> にはマッチしません。</li><li><code>/user/{login?}</code> は <code>/user/john</code> および <code>/user</code> にマッチします。</li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>オプションのパスパラメータ <code>{param?}</code> は、パスの末尾でのみ使用できることに注意してください。</p></div><p>ルートハンドラー内でパラメータ値にアクセスするには、<code>call.parameters</code> プロパティを使用します。例えば、以下のコードスニペットの <code>call.parameters[&quot;login&quot;]</code> は、<code>/user/admin</code> パスに対して <em>admin</em> を返します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/user/{login}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (call.parameters[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;login&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;admin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p>リクエストにクエリ文字列が含まれている場合、<code>call.parameters</code> にはそのクエリ文字列のパラメータも含まれます。ハンドラー内でクエリ文字列とそのパラメータにアクセスする方法については、<a href="./server-requests#query_parameters">クエリパラメータ</a>を参照してください。</p></blockquote><h3 id="path_parameter_tailcard" tabindex="-1">テールカード付きパスパラメータ <a class="header-anchor" href="#path_parameter_tailcard" aria-label="Permalink to &quot;テールカード付きパスパラメータ {id=&quot;path_parameter_tailcard&quot;}&quot;">​</a></h3><p>テールカード付きパスパラメータ (<code>{param...}</code>) はURLパスの残りのすべてにマッチし、各パスセグメントの複数の値を <code>param</code> をキーとしてパラメータに格納します。例えば、<code>/user/{param...}</code> は <code>/user/john/settings</code> にマッチします。 ルートハンドラー内でパスセグメントの値にアクセスするには、<code>call.parameters.getAll(&quot;param&quot;)</code> を使用します。上記の例では、<code>getAll</code> 関数は <em>john</em> と <em>settings</em> の値を含む配列を返します。</p><h3 id="regular_expression" tabindex="-1">正規表現 <a class="header-anchor" href="#regular_expression" aria-label="Permalink to &quot;正規表現 {id=&quot;regular_expression&quot;}&quot;">​</a></h3><p>正規表現は、<code>route</code>、<code>get</code>、<code>post</code> など、すべてのルートハンドラー定義関数で使用できます。</p><blockquote><p>正規表現の詳細については、<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/-regex/" target="_blank" rel="noreferrer">Kotlinドキュメント</a>を参照してください。</p></blockquote><p><code>/hello</code> で終わる任意のパスにマッチするルートを記述してみましょう。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.routing.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.response.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Regex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;.+/hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>このルート定義により、<code>/foo/hello</code>、<code>/bar/baz/hello</code> など、<code>/hello</code> で終わるパスへの受信リクエストはすべてマッチします。</p><h4 id="ハンドラーでのパスの要素へのアクセス" tabindex="-1">ハンドラーでのパスの要素へのアクセス <a class="header-anchor" href="#ハンドラーでのパスの要素へのアクセス" aria-label="Permalink to &quot;ハンドラーでのパスの要素へのアクセス&quot;">​</a></h4><p>正規表現において、名前付きグループは、パターンにマッチする文字列の特定の部分をキャプチャし、それに名前を割り当てる方法です。 <code>(?&lt;name&gt;pattern)</code> という構文は名前付きグループを定義するために使用され、<code>name</code> はグループの名前、 <code>pattern</code> はグループにマッチする正規表現パターンです。</p><p>ルート関数で名前付きグループを定義することで、パスの一部をキャプチャでき、その後ハンドラー関数で、 <code>call.parameters</code> オブジェクトを使用してキャプチャされたパラメータにアクセスできます。</p><p>例えば、整数識別子が続き、その後 <code>/hello</code> が続くパスへのリクエストにマッチするルートを定義できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.routing.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.response.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Regex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;(?&lt;id&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">+)/hello&quot;&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> call.parameters[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!!</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(id)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>以下のコードでは、<code>(?&lt;id&gt;\\d+)</code> 名前付きグループがリクエストされたパスから整数識別子 <code>id</code> をキャプチャするために使用され、 <code>call.parameters</code> プロパティがハンドラー関数でキャプチャされた <code>id</code> パラメータにアクセスするために使用されています。</p><p>無名グループは正規表現ルートハンドラー内ではアクセスできませんが、パスをマッチさせるために使用できます。例えば、<code>hello/world</code> というパスはマッチしますが、<code>hello/World</code> はマッチしません。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.routing.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.response.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Regex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello/([a-z]+)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>また、パスセグメント全体が正規表現によって消費される必要があります。例えば、パスパターン <code>get(Regex(&quot;[a-z]+&quot;))</code> はパス <code>&quot;hello1&quot;</code> にはマッチせず、パス <code>hello/1</code> の <code>hello</code> 部分にマッチし、<code>/1</code> を次のルートに残します。</p><h2 id="multiple_routes" tabindex="-1">複数のルートハンドラーの定義 <a class="header-anchor" href="#multiple_routes" aria-label="Permalink to &quot;複数のルートハンドラーの定義 {id=&quot;multiple_routes&quot;}&quot;">​</a></h2><h3 id="group_by_verb" tabindex="-1">動詞関数によるルートのグループ化 <a class="header-anchor" href="#group_by_verb" aria-label="Permalink to &quot;動詞関数によるルートのグループ化 {id=&quot;group_by_verb&quot;}&quot;">​</a></h3><p>複数のルートハンドラーを定義したい場合（これはもちろんあらゆるアプリケーションに当てはまります）、それらを <code>routing</code> 関数に追加するだけで済みます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/customer/{id}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/customer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/order&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/order/{id}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>この場合、各ルートは独自の関数を持ち、特定のエンドポイントとHTTP動詞に応答します。</p><h3 id="group_by_path" tabindex="-1">パスによるルートのグループ化 <a class="header-anchor" href="#group_by_path" aria-label="Permalink to &quot;パスによるルートのグループ化 {id=&quot;group_by_path&quot;}&quot;">​</a></h3><p>別の方法として、パスでグループ化する方法があります。これは、パスを定義し、そのパスの動詞をネストされた関数として <code>route</code> 関数を使用して配置します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    route</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/customer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    route</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/order&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/{id}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="nested_routes" tabindex="-1">ネストされたルート <a class="header-anchor" href="#nested_routes" aria-label="Permalink to &quot;ネストされたルート {id=&quot;nested_routes&quot;}&quot;">​</a></h3><p>グループ化の方法に関わらず、Ktorは <code>route</code> 関数のパラメータとしてサブルートを持つことも許可しています。これは、論理的に他のリソースの子であるリソースを定義するのに役立ちます。以下の例は、<code>/order/shipment</code> への <code>GET</code> および <code>POST</code> リクエストに応答する方法を示しています。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    route</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/order&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        route</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/shipment&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>このように、各 <code>route</code> 呼び出しは個別のパスセグメントを生成します。</p><p><a href="#define_route">ルーティング</a>関数（<code>route</code>、<code>get</code>、<code>post</code>など）に渡されるパスパターンは、URLの_パス_コンポーネントを照合するために使用されます。パスはスラッシュ <code>/</code> 文字で区切られた一連のパスセグメントを含むことができます。</p><h2 id="route_extension_function" tabindex="-1">ルート拡張関数 <a class="header-anchor" href="#route_extension_function" aria-label="Permalink to &quot;ルート拡張関数 {id=&quot;route_extension_function&quot;}&quot;">​</a></h2><p>一般的なパターンとして、<code>Route</code> 型の拡張関数を使用して実際のルートを定義する方法があります。これにより、動詞への簡単なアクセスが可能になり、すべてのルートを単一のルーティング関数にまとめることによる煩雑さを解消できます。このパターンは、ルートのグループ化方法に関わらず適用できます。そのため、最初の例はよりクリーンな方法で表現できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    listOrdersRoute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    getOrderRoute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    totalizeOrderRoute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Route</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listOrdersRoute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/order&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Route</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getOrderRoute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/order/{id}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Route</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">totalizeOrderRoute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/order/{id}/total&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>このアプローチをデモンストレーションする完全な例については、<a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/legacy-interactive-website" target="_blank" rel="noreferrer">legacy-interactive-website</a> を参照してください。</p><blockquote><p>アプリケーションの保守性を考慮してスケールさせるには、特定の<a href="./server-application-structure">構造パターン</a>に従うことが推奨されます。</p></blockquote><h2 id="trace_routes" tabindex="-1">ルートのトレース <a class="header-anchor" href="#trace_routes" aria-label="Permalink to &quot;ルートのトレース {id=&quot;trace_routes&quot;}&quot;">​</a></h2><p><a href="./server-logging">ロギング</a>が構成されている場合、Ktorはルートトレースを有効にし、一部のルートが実行されない理由を特定するのに役立ちます。例えば、アプリケーションを<a href="./server-run">実行</a>し、指定されたエンドポイントにリクエストを行うと、アプリケーションの出力は次のようになる場合があります。</p><div class="language-Console vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Console</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TRACE Application - Trace for [missing-page]</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">/, segment:0 -&gt; SUCCESS @ /</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  /, segment:0 -&gt; SUCCESS @ /</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    /(method:GET), segment:0 -&gt; FAILURE &quot;Not all segments matched&quot; @ /(method:GET)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Matched routes:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  No results</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Route resolve result:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  FAILURE &quot;No matched subtrees found&quot; @ /</span></span></code></pre></div><blockquote><p><a href="./server-native">Nativeサーバー</a>でルートトレースを有効にするには、アプリケーションを<a href="./server-run">実行</a>する際に <code>KTOR_LOG_LEVEL</code> 環境変数に <em>TRACE</em> 値を渡します。</p></blockquote>`,69))])}const b=p(c,[["render",E]]);export{q as __pageData,b as default};
