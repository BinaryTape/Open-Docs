import{_ as c,C as n,c as u,o as F,G as i,ag as o,j as a,w as l,a as t}from"./chunks/framework.Bksy39di.js";const A=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ktor/server-velocity.md","filePath":"ktor/server-velocity.md","lastUpdated":1755457140000}'),v={name:"ktor/server-velocity.md"};function m(C,s,b,f,_,q){const r=n("TopicTitle"),d=n("show-structure"),E=n("primary-label"),k=n("Links"),g=n("tldr"),e=n("code-block"),p=n("TabItem"),h=n("Tabs"),y=n("list");return F(),u("div",null,[i(r,{labelRef:"server-plugin",title:"Velocity"}),i(d,{for:"chapter",depth:"2"}),i(E,{ref:"server-plugin"},null,512),i(g,null,{default:l(()=>[s[3]||(s[3]=a("p",null,[a("b",null,"所需依赖项"),t(": "),a("code",null,"io.ktor:ktor-server-velocity")],-1)),s[4]||(s[4]=a("p",null,[a("b",null,"代码示例"),t(": "),a("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/velocity"}," velocity ")],-1)),a("p",null,[a("b",null,[i(k,{href:"/ktor/server-native",summary:"Ktor 支持 Kotlin/Native，并允许您无需额外运行时或虚拟机即可运行服务器。"},{default:l(()=>s[0]||(s[0]=[t("原生服务器")])),_:1}),s[1]||(s[1]=t(" 支持"))]),s[2]||(s[2]=t(": ✖️ "))])]),_:1}),s[17]||(s[17]=o('<p>Ktor 允许您通过安装 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-velocity/io.ktor.server.velocity/-velocity" target="_blank" rel="noreferrer">Velocity</a> 插件，在应用程序中使用 <a href="https://velocity.apache.org/engine/" target="_blank" rel="noreferrer">Velocity 模板</a> 作为视图。</p><h2 id="add_dependencies" tabindex="-1">添加依赖项 <a class="header-anchor" href="#add_dependencies" aria-label="Permalink to &quot;添加依赖项 {id=&quot;add_dependencies&quot;}&quot;">​</a></h2><p> 要使用 <code>Velocity</code>，您需要在构建脚本中包含 <code>ktor-server-velocity</code> artifact： </p>',3)),i(h,{group:"languages"},{default:l(()=>[i(p,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:l(()=>[i(e,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-server-velocity:$ktor_version")'})]),_:1}),i(p,{title:"Gradle (Groovy)","group-key":"groovy"},{default:l(()=>[i(e,{lang:"Groovy",code:'            implementation "io.ktor:ktor-server-velocity:$ktor_version"'})]),_:1}),i(p,{title:"Maven","group-key":"maven"},{default:l(()=>[i(e,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-server-velocity-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),s[18]||(s[18]=a("h2",{id:"install_plugin",tabindex:"-1"},[t("安装 Velocity "),a("a",{class:"header-anchor",href:"#install_plugin","aria-label":'Permalink to "安装 Velocity {id="install_plugin"}"'},"​")],-1)),a("p",null,[s[6]||(s[6]=t(" 要将 ")),s[7]||(s[7]=a("code",null,"Velocity",-1)),s[8]||(s[8]=t(" 插件")),s[9]||(s[9]=a("a",{href:"#install"},"安装",-1)),s[10]||(s[10]=t("到应用程序中， 请将其传递给指定 ")),i(k,{href:"/ktor/server-modules",summary:"模块允许您通过对路由进行分组来组织您的应用程序。"},{default:l(()=>s[5]||(s[5]=[t("模块")])),_:1}),s[11]||(s[11]=t(" 中的 ")),s[12]||(s[12]=a("code",null,"install",-1)),s[13]||(s[13]=t(" 函数。 以下代码片段展示了如何安装 ")),s[14]||(s[14]=a("code",null,"Velocity",-1)),s[15]||(s[15]=t(" ... "))]),i(y,null,{default:l(()=>s[16]||(s[16]=[a("li",null,[t(" ... 在 "),a("code",null,"embeddedServer"),t(" 函数调用内部。 ")],-1),a("li",null,[t(" ... 在显式定义的模块（它是 "),a("code",null,"Application"),t(" 类的扩展函数）内部。 ")],-1)])),_:1}),i(h,null,{default:l(()=>[i(p,{title:"embeddedServer"},{default:l(()=>[i(e,{lang:"kotlin",code:`            import io.ktor.server.engine.*
            import io.ktor.server.netty.*
            import io.ktor.server.application.*
            import io.ktor.server.velocity.*

            fun main() {
                embeddedServer(Netty, port = 8080) {
                    install(Velocity)
                    // ...
                }.start(wait = true)
            }`})]),_:1}),i(p,{title:"module"},{default:l(()=>[i(e,{lang:"kotlin",code:`            import io.ktor.server.application.*
            import io.ktor.server.velocity.*
            // ...
            fun Application.module() {
                install(Velocity)
                // ...
            }`})]),_:1})]),_:1}),s[19]||(s[19]=o(`<p>可选地，您可以安装 <code>VelocityTools</code> 插件，以便能够添加标准和自定义的 <a href="#velocity_tools">Velocity 工具</a>。</p><h2 id="configure" tabindex="-1">配置 Velocity <a class="header-anchor" href="#configure" aria-label="Permalink to &quot;配置 Velocity {id=&quot;configure&quot;}&quot;">​</a></h2><h3 id="template_loading" tabindex="-1">配置模板加载 <a class="header-anchor" href="#template_loading" aria-label="Permalink to &quot;配置模板加载 {id=&quot;template_loading&quot;}&quot;">​</a></h3><p>在 <code>install</code> 代码块内部，您可以配置 <a href="https://velocity.apache.org/engine/devel/apidocs/org/apache/velocity/app/VelocityEngine.html" target="_blank" rel="noreferrer">VelocityEngine</a>。例如，如果您想使用 classpath 中的模板，请为 classpath 使用资源加载器：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.application.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.velocity.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.apache.velocity.runtime.RuntimeConstants</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Velocity) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        setProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(RuntimeConstants.RESOURCE_LOADER, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;classpath&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        setProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;classpath.resource.loader.class&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ClasspathResourceLoader::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.java.name)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="use_template" tabindex="-1">在响应中发送模板 <a class="header-anchor" href="#use_template" aria-label="Permalink to &quot;在响应中发送模板 {id=&quot;use_template&quot;}&quot;">​</a></h3><p>假设您在 <code>resources/templates</code> 中有 <code>index.vl</code> 模板：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Hello, $user.name&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>用户的数据模型如下所示：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>要将该模板用于指定的 <a href="./server-routing">route</a>，请按如下方式将 <code>VelocityContent</code> 传递给 <code>call.respond</code> 方法：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sampleUser </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;John&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respond</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">VelocityContent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;templates/index.vl&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mapOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> to sampleUser)))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="velocity_tools" tabindex="-1">添加 Velocity 工具 <a class="header-anchor" href="#velocity_tools" aria-label="Permalink to &quot;添加 Velocity 工具 {id=&quot;velocity_tools&quot;}&quot;">​</a></h3><p>如果您已经<a href="#install_plugin">安装</a>了 <code>VelocityTools</code> 插件，您可以在 <code>install</code> 代码块内部访问 <code>EasyFactoryConfiguration</code> 实例，以便添加标准和自定义的 Velocity 工具，例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(VelocityTools) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    engine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 引擎配置</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        setProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;resource.loader&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;string&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        addProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;resource.loader.string.name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;myRepo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        addProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;resource.loader.string.class&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, StringResourceLoader::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.java.name)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        addProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;resource.loader.string.repository.name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;myRepo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    addDefaultTools</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 添加一个默认工具</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    tool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;foo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, MyCustomTool::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.java) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 添加一个自定义工具</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,15))])}const V=c(v,[["render",m]]);export{A as __pageData,V as default};
