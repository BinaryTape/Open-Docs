import{_ as e}from"./chunks/icon-1-done.ZX9lW-aj.js";import{_ as r}from"./chunks/icon-2-done.DCMUaFG5.js";import{_ as o}from"./chunks/icon-3.BwKvTetO.js";import{_ as d}from"./chunks/icon-4-todo.GaeEmerm.js";import{_ as E,C as h,c as g,o as c,j as s,G as t,ag as n,a,w as l}from"./chunks/framework.Bksy39di.js";const x=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/mapping-function-pointers-from-c.md","filePath":"ja/kotlin/mapping-function-pointers-from-c.md","lastUpdated":1754307826000}'),y={name:"ja/kotlin/mapping-function-pointers-from-c.md"};function F(u,i,C,m,f,A){const k=h("tldr"),p=h("shortcut");return c(),g("div",null,[i[10]||(i[10]=s("h1",{id:"cからの関数ポインターのマッピング-–-チュートリアル",tabindex:"-1"},[a("Cからの関数ポインターのマッピング – チュートリアル "),s("a",{class:"header-anchor",href:"#cからの関数ポインターのマッピング-–-チュートリアル","aria-label":'Permalink to "Cからの関数ポインターのマッピング – チュートリアル"'},"​")],-1)),t(k,null,{default:l(()=>i[0]||(i[0]=[s("p",null,[a("これは"),s("strong",null,"KotlinとCのマッピング"),a("チュートリアルシリーズの第3部です。進む前に、前の手順を完了していることを確認してください。")],-1),s("p",null,[s("img",{src:e,width:"20",alt:"First step"}),a(),s("a",{href:"/ja/kotlin/mapping-primitive-data-types-from-c"},"Cからのプリミティブデータ型のマッピング"),s("br"),s("img",{src:r,width:"20",alt:"Second step"}),a(),s("a",{href:"/ja/kotlin/mapping-struct-union-types-from-c"},"Cからの構造体と共用体型のマッピング"),s("br"),s("img",{src:o,width:"20",alt:"Third step"}),a(),s("strong",null,"関数ポインターのマッピング"),s("br"),s("img",{src:d,width:"20",alt:"Fourth step"}),a(),s("a",{href:"/ja/kotlin/mapping-strings-from-c"},"Cからの文字列のマッピング"),s("br")],-1)])),_:1}),i[11]||(i[11]=n(`<blockquote style=""><p>Cライブラリのインポートは<a href="/ja/kotlin/native-c-interop-stability">ベータ版</a>です。Cライブラリからcinteropツールによって生成されたすべてのKotlin宣言には、<code>@ExperimentalForeignApi</code>アノテーションが必要です。</p><p>Kotlin/Nativeに同梱されているネイティブプラットフォームライブラリ（Foundation、UIKit、POSIXなど）は、一部のAPIのみオプトインが必要です。</p></blockquote><p>KotlinからどのC関数ポインターが可視であるかを探り、Kotlin/Nativeと<a href="/ja/kotlin/gradle-configure-project#targeting-multiple-platforms">マルチプラットフォーム</a> Gradleビルドの高度なC相互運用関連のユースケースを調べましょう。</p><p>このチュートリアルでは、以下を行います。</p><ul><li><a href="#pass-kotlin-function-as-a-c-function-pointer">Kotlin関数をC関数ポインターとして渡す方法を学ぶ</a></li><li><a href="#use-the-c-function-pointer-from-kotlin">KotlinからC関数ポインターを使用する</a></li></ul><h2 id="cからの関数ポインター型のマッピング" tabindex="-1">Cからの関数ポインター型のマッピング <a class="header-anchor" href="#cからの関数ポインター型のマッピング" aria-label="Permalink to &quot;Cからの関数ポインター型のマッピング&quot;">​</a></h2><p>KotlinとCのマッピングを理解するために、関数ポインターをパラメーターとして受け取る関数と、関数ポインターを返す関数の2つを宣言しましょう。</p><p>シリーズの<a href="/ja/kotlin/mapping-primitive-data-types-from-c">最初のパート</a>では、必要なファイルを含むCライブラリを既に作成しました。このステップでは、<code>---</code>セパレーターの後に<code>interop.def</code>ファイル内の宣言を更新します。</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">---</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> myFun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> i</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MyFun)(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> accept_fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MyFun </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MyFun </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">supply_fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myFun;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>interop.def</code>ファイルは、IDEでアプリケーションをコンパイル、実行、または開くために必要なすべてを提供します。</p><h2 id="cライブラリ用に生成されたkotlin-apiを検査する" tabindex="-1">Cライブラリ用に生成されたKotlin APIを検査する <a class="header-anchor" href="#cライブラリ用に生成されたkotlin-apiを検査する" aria-label="Permalink to &quot;Cライブラリ用に生成されたKotlin APIを検査する&quot;">​</a></h2><p>C関数ポインターがKotlin/Nativeにどのようにマッピングされるかを見て、プロジェクトを更新しましょう。</p>`,11)),s("ol",null,[i[9]||(i[9]=n(`<li><p><code>src/nativeMain/kotlin</code>で、<a href="/ja/kotlin/mapping-struct-union-types-from-c">前のチュートリアル</a>から<code>hello.kt</code>ファイルを以下の内容で更新します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> interop.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.cinterop.ExperimentalForeignApi</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalForeignApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello Kotlin/Native!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    accept_fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* fix me*/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> useMe </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> supply_fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li>`,1)),s("li",null,[s("p",null,[i[3]||(i[3]=a("IntelliJ IDEAの")),i[4]||(i[4]=s("a",{href:"https://www.jetbrains.com/help/rider/Navigation_and_Search__Go_to_Declaration.html",target:"_blank",rel:"noreferrer"},"宣言へ移動",-1)),i[5]||(i[5]=a("コマンド（")),t(p,null,{default:l(()=>i[1]||(i[1]=[a("Cmd + B")])),_:1}),i[6]||(i[6]=a("/")),t(p,null,{default:l(()=>i[2]||(i[2]=[a("Ctrl + B")])),_:1}),i[7]||(i[7]=a("）を使用して、C関数用に生成された以下のAPIに移動します。"))]),i[8]||(i[8]=n(`<div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> myFun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.Int): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.Int</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> accept_fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlinx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.cinterop.CPointer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kotlinx.cinterop.CFunction</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(kotlin.Int) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> kotlin.Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* from: interop.MyFun? */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> supply_fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlinx</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.cinterop.CPointer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kotlinx.cinterop.CFunction</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(kotlin.Int) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> kotlin.Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* from: interop.MyFun? */</span></span></code></pre></div>`,1))])]),i[12]||(i[12]=n(`<p>ご覧のとおり、C関数ポインターはKotlinでは<code>CPointer&lt;CFunction&lt;...&gt;&gt;</code>を使用して表現されます。<code>accept_fun()</code>関数はオプションの関数ポインターをパラメーターとして受け取り、<code>supply_fun()</code>関数は関数ポインターを返します。</p><p><code>CFunction&lt;(Int) -&gt; Int&gt;</code>は関数シグネチャを表し、<code>CPointer&lt;CFunction&lt;...&gt;&gt;?</code>はnull許容の関数ポインターを表します。すべての<code>CPointer&lt;CFunction&lt;...&gt;&gt;</code>型に対して<a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlinx.cinterop/invoke.html" target="_blank" rel="noreferrer"><code>.invoke()</code></a>演算子拡張関数が利用可能であり、これにより通常のKotlin関数であるかのように関数ポインターを呼び出すことができます。</p><h2 id="kotlin関数をc関数ポインターとして渡す" tabindex="-1">Kotlin関数をC関数ポインターとして渡す <a class="header-anchor" href="#kotlin関数をc関数ポインターとして渡す" aria-label="Permalink to &quot;Kotlin関数をC関数ポインターとして渡す&quot;">​</a></h2><p>KotlinコードからC関数を使ってみる時が来ました。<code>accept_fun()</code>関数を呼び出し、C関数ポインターをKotlinラムダに渡します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> interop.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.cinterop.staticCFunction</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.cinterop.ExperimentalForeignApi</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalForeignApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> myFun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    accept_fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">staticCFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; { it </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>この呼び出しは、Kotlin/Nativeの<code>staticCFunction {}</code>ヘルパー関数を使用して、Kotlinラムダ関数をC関数ポインターにラップします。これは、束縛されていない非キャプチャラムダ関数のみを許可します。たとえば、関数内のローカル変数をキャプチャすることはできず、グローバルに可視な宣言のみをキャプチャできます。</p><p>関数が例外をスローしないことを確認してください。<code>staticCFunction {}</code>から例外をスローすると、非決定的な副作用が発生します。</p><h2 id="kotlinからc関数ポインターを使用する" tabindex="-1">KotlinからC関数ポインターを使用する <a class="header-anchor" href="#kotlinからc関数ポインターを使用する" aria-label="Permalink to &quot;KotlinからC関数ポインターを使用する&quot;">​</a></h2><p>次のステップは、<code>supply_fun()</code>呼び出しから返されたC関数ポインターを呼び出すことです。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> interop.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.cinterop.ExperimentalForeignApi</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.cinterop.invoke</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalForeignApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> myFun2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> functionFromC </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> supply_fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() ?: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;No function is returned&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    functionFromC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Kotlinは、関数ポインターの戻り型をnull許容の<code>CPointer&lt;CFunction&lt;&gt;</code>オブジェクトに変換します。最初に明示的に<code>null</code>をチェックする必要があり、そのため上記のコードでは<a href="/ja/kotlin/null-safety">エルビス演算子</a>が使用されています。cinteropツールを使用すると、C関数ポインターを通常のKotlin関数呼び出し（<code>functionFromC(42)</code>）として呼び出すことができます。</p><h2 id="kotlinコードの更新" tabindex="-1">Kotlinコードの更新 <a class="header-anchor" href="#kotlinコードの更新" aria-label="Permalink to &quot;Kotlinコードの更新&quot;">​</a></h2><p>すべての定義を見たので、それらをプロジェクトで使ってみましょう。 <code>hello.kt</code>ファイル内のコードは次のようになります。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> interop.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.cinterop.ExperimentalForeignApi</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.cinterop.invoke</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.cinterop.staticCFunction</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalForeignApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello Kotlin/Native!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cFunctionPointer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> staticCFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; { it </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    accept_fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cFunctionPointer)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> funFromC </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> supply_fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() ?: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;No function is returned&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    funFromC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>すべてが期待通りに動作することを確認するには、<a href="/ja/kotlin/native-get-started#build-and-run-the-application">IDEで</a><code>runDebugExecutableNative</code> Gradleタスクを実行するか、以下のコマンドを使用してコードを実行します。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> runDebugExecutableNative</span></span></code></pre></div><h2 id="次のステップ" tabindex="-1">次のステップ <a class="header-anchor" href="#次のステップ" aria-label="Permalink to &quot;次のステップ&quot;">​</a></h2><p>シリーズの次のパートでは、KotlinとCの間で文字列がどのようにマッピングされるかを学びます。</p><p><strong><a href="/ja/kotlin/mapping-strings-from-c">次のパートに進む</a></strong></p><h3 id="関連項目" tabindex="-1">関連項目 <a class="header-anchor" href="#関連項目" aria-label="Permalink to &quot;関連項目&quot;">​</a></h3><p>より高度なシナリオを扱う<a href="/ja/kotlin/native-c-interop">Cとの相互運用性</a>のドキュメントで詳細を学んでください。</p>`,21))])}const I=E(y,[["render",F]]);export{x as __pageData,I as default};
