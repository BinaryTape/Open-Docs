import{_ as u,C as t,c as y,o as m,j as s,G as e,ag as r,a,w as l}from"./chunks/framework.Bksy39di.js";const R=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/ktor/docker.md","filePath":"zh-Hant/ktor/docker.md","lastUpdated":1755457140000}'),F={name:"zh-Hant/ktor/docker.md"};function b(C,i,v,D,f,_){const p=t("show-structure"),k=t("tldr"),o=t("web-summary"),d=t("link-summary"),n=t("TabItem"),h=t("Tabs"),g=t("code-block"),E=t("list"),c=t("tip");return m(),y("div",null,[i[10]||(i[10]=s("h1",{id:"docker",tabindex:"-1"},[a("Docker "),s("a",{class:"header-anchor",href:"#docker","aria-label":'Permalink to "Docker"'},"​")],-1)),e(p,{for:"chapter",depth:"2"}),e(k,null,{default:l(()=>i[0]||(i[0]=[s("p",null,[s("b",null,"程式碼範例"),a(": "),s("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/deployment-ktor-plugin"}," deployment-ktor-plugin ")],-1)])),_:1}),e(o,null,{default:l(()=>i[1]||(i[1]=[a(" 了解如何將 Ktor 應用程式部署到 Docker 容器，然後可以在本地或您選擇的雲端供應商上執行。 ")])),_:1}),e(d,null,{default:l(()=>i[2]||(i[2]=[a(" 了解如何將您的應用程式部署到 Docker 容器。 ")])),_:1}),i[11]||(i[11]=r('<p>在本節中，我們將探討如何使用 <a href="https://github.com/ktorio/ktor-build-plugins" target="_blank" rel="noreferrer">Ktor Gradle plugin</a> 來 打包、執行和部署使用 <a href="https://www.docker.com" target="_blank" rel="noreferrer">Docker</a> 的應用程式。</p><h2 id="install-plugin" tabindex="-1">安裝 Ktor 插件 <a class="header-anchor" href="#install-plugin" aria-label="Permalink to &quot;安裝 Ktor 插件 {id=&quot;install-plugin&quot;}&quot;">​</a></h2><p>要安裝 Ktor 插件，請將其新增到您的 <code>build.gradle.(kts)</code> 檔案的 <code>plugins</code> 區塊中：</p>',3)),e(h,{group:"languages"},{default:l(()=>[e(n,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:l(()=>i[3]||(i[3]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"plugins"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    id"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"io.ktor.plugin"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") version "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"3.2.3"')]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1),s("p",{"interpolate-variables":"true"},null,-1)])),_:1}),e(n,{title:"Gradle (Groovy)","group-key":"groovy"},{default:l(()=>i[4]||(i[4]=[s("div",{class:"language-groovy vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"groovy"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"plugins {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    id "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"io.ktor.plugin"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," version "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"3.2.3"')]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1),s("p",{"interpolate-variables":"true"},null,-1)])),_:1})]),_:1}),i[12]||(i[12]=r(`<div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>如果您將 Ktor Gradle plugin 與 Kotlin Multiplatform Gradle plugin 一起應用，Docker 整合功能會自動停用。 為了能夠將它們一起使用： 1. 建立一個僅限 JVM 的專案，並如上所示應用 Ktor Gradle plugin。 2. 將 Kotlin Multiplatform 專案作為依賴項新增到該僅限 JVM 的專案中。 如果此解決方法未能解決您的問題，請在 <a href="https://youtrack.jetbrains.com/issue/KTOR-8464" target="_blank" rel="noreferrer">KTOR-8464</a> 中留言告知我們。</p></div><h2 id="tasks" tabindex="-1">插件任務 <a class="header-anchor" href="#tasks" aria-label="Permalink to &quot;插件任務 {id=&quot;tasks&quot;}&quot;">​</a></h2><p><a href="#install-plugin">安裝</a> 插件後，以下任務可用於打包、執行和部署 應用程式：</p><ul><li><code>buildImage</code>: 將專案的 Docker 映像檔建置為 tarball。此任務會在 <code>build</code> 目錄中產生一個 <code>jib-image.tar</code> 檔案。您可以 使用 <a href="https://docs.docker.com/engine/reference/commandline/load/" target="_blank" rel="noreferrer">docker load</a> 命令將此映像檔載入到 Docker daemon：<div class="language-Bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> load</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build/jib-image.tar</span></span></code></pre></div></li><li><code>publishImageToLocalRegistry</code>: 建置並發佈專案的 Docker 映像檔到本地 registry。</li><li><code>runDocker</code>: 將專案的映像檔建置到 Docker daemon 並執行它。執行此任務將會啟動 Ktor 伺服器， 預設在 <code>http://0.0.0.0:8080</code> 上響應。如果您的伺服器配置為使用另一個埠口，您可以 調整 <a href="#port-mapping">埠口映射</a>。</li><li><code>publishImage</code>: 建置並發佈專案的 Docker 映像檔到外部 registry，例如 <a href="https://hub.docker.com/" target="_blank" rel="noreferrer">Docker Hub</a> 或 <a href="https://cloud.google.com/container-registry" target="_blank" rel="noreferrer">Google Container Registry</a>。 請注意，您需要使用 <strong><a href="#external-registry">ktor.docker.externalRegistry</a></strong> 屬性來配置此任務的外部 registry。</li></ul><p>請注意，預設情況下，這些任務會以 <code>ktor-docker-image</code> 名稱和 <code>latest</code> 標籤建置映像檔。 您可以在 <a href="#name-tag">插件配置</a> 中自訂這些值。</p><h2 id="configure-plugin" tabindex="-1">配置 Ktor 插件 <a class="header-anchor" href="#configure-plugin" aria-label="Permalink to &quot;配置 Ktor 插件 {id=&quot;configure-plugin&quot;}&quot;">​</a></h2><p>要配置與 Docker 任務相關的 Ktor 插件設定，請在您的 <code>build.gradle.(kts)</code> 檔案中使用 <code>ktor.docker</code> 擴展：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ktor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    docker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="jre-version" tabindex="-1">JRE 版本 <a class="header-anchor" href="#jre-version" aria-label="Permalink to &quot;JRE 版本 {id=&quot;jre-version&quot;}&quot;">​</a></h3><p><code>jreVersion</code> 屬性指定映像檔中使用的 JRE 版本：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ktor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    docker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        jreVersion.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(JavaVersion.VERSION_17)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="name-tag" tabindex="-1">映像檔名稱和標籤 <a class="header-anchor" href="#name-tag" aria-label="Permalink to &quot;映像檔名稱和標籤 {id=&quot;name-tag&quot;}&quot;">​</a></h3><p>如果您需要自訂映像檔名稱和標籤，請分別使用 <code>localImageName</code> 和 <code>imageTag</code> 屬性：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ktor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    docker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        localImageName.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sample-docker-image&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        imageTag.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0.0.1-preview&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="port-mapping" tabindex="-1">埠口映射 <a class="header-anchor" href="#port-mapping" aria-label="Permalink to &quot;埠口映射 {id=&quot;port-mapping&quot;}&quot;">​</a></h3><p>預設情況下，<a href="#tasks">runDocker</a> 任務會將 <code>8080</code> 容器埠口發佈到 <code>8080</code> Docker 主機埠口。 如果需要，您可以使用 <code>portMappings</code> 屬性更改這些埠口。 如果您的伺服器 <a href="./server-configuration-file#predefined-properties">配置</a> 為使用其他埠口，這可能很有用。</p><p>以下範例展示了如何將 <code>8080</code> 容器埠口映射到 <code>80</code> Docker 主機埠口。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ktor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    docker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        portMappings.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            io.ktor.plugin.features.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DockerPortMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                80</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                8080</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                io.ktor.plugin.features.DockerPortMappingProtocol.TCP</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在這種情況下，您可以透過 <code>http://0.0.0.0:80</code> 存取伺服器。</p><h3 id="external-registry" tabindex="-1">外部 registry <a class="header-anchor" href="#external-registry" aria-label="Permalink to &quot;外部 registry {id=&quot;external-registry&quot;}&quot;">​</a></h3><p>在使用 <strong><a href="#tasks">publishImage</a></strong> 任務將專案的 Docker 映像檔發佈到外部 registry 之前，您需要 使用 <code>ktor.docker.externalRegistry</code> 屬性配置外部 registry。此屬性接受 <code>DockerImageRegistry</code> 實例，該實例為所需的 registry 類型提供配置：</p><ul><li><code>DockerImageRegistry.dockerHub</code>: 為 <a href="https://hub.docker.com/" target="_blank" rel="noreferrer">Docker Hub</a> 建立一個 <code>DockerImageRegistry</code>。</li><li><code>DockerImageRegistry.googleContainerRegistry</code>: 為 <a href="https://cloud.google.com/container-registry" target="_blank" rel="noreferrer">Google Container Registry</a> 建立一個 <code>DockerImageRegistry</code>。</li></ul><p>以下範例展示了如何配置 Docker Hub registry：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ktor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    docker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        externalRegistry.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            io.ktor.plugin.features.DockerImageRegistry.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dockerHub</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                appName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> provider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ktor-app&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                username </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> providers.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">environmentVariable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;DOCKER_HUB_USERNAME&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                password </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> providers.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">environmentVariable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;DOCKER_HUB_PASSWORD&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>請注意，Docker Hub 的名稱和密碼是從環境變數中取得的，因此您需要在執行 <code>publishImage</code> 任務之前設定這些值：</p>`,25)),e(h,{group:"os"},{default:l(()=>[e(n,{title:"Linux/macOS","group-key":"unix"},{default:l(()=>i[5]||(i[5]=[s("div",{class:"language-Bash vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"Bash"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"export"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," DOCKER_HUB_USERNAME"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"yourHubUsername")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"export"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," DOCKER_HUB_PASSWORD"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"yourHubPassword")])])])],-1)])),_:1}),e(n,{title:"Windows","group-key":"windows"},{default:l(()=>i[6]||(i[6]=[s("div",{class:"language-Bash vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"Bash"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"setx"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," DOCKER_HUB_USERNAME"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," yourHubUsername")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"setx"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," DOCKER_HUB_PASSWORD"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," yourHubPassword")])])])],-1)])),_:1})]),_:1}),i[13]||(i[13]=r('<h2 id="manual" tabindex="-1">手動映像檔配置 <a class="header-anchor" href="#manual" aria-label="Permalink to &quot;手動映像檔配置 {id=&quot;manual&quot;}&quot;">​</a></h2><p>如果需要，您可以提供自己的 <code>Dockerfile</code> 來組裝包含 Ktor 應用程式的映像檔。</p><h3 id="packagea-pp" tabindex="-1">打包應用程式 <a class="header-anchor" href="#packagea-pp" aria-label="Permalink to &quot;打包應用程式 {id=&quot;packagea-pp&quot;}&quot;">​</a></h3><p>第一步，您需要打包您的應用程式及其依賴項。 例如，這可能是一個 <a href="./server-fatjar">fat JAR</a> 或一個 <a href="./server-packaging">可執行 JVM 應用程式</a>。</p><h3 id="prepare-docker" tabindex="-1">準備 Docker 映像檔 <a class="header-anchor" href="#prepare-docker" aria-label="Permalink to &quot;準備 Docker 映像檔 {id=&quot;prepare-docker&quot;}&quot;">​</a></h3><p>為了將應用程式 Docker 化，我們將 使用 <a href="https://docs.docker.com/develop/develop-images/multistage-build/" target="_blank" rel="noreferrer">多階段建置 (multi-stage builds)</a>：</p><ol><li>首先，我們將為 Gradle/Maven 依賴項設定快取。此步驟是可選的，但建議執行，因為它會提高整體建置速度。</li><li>然後，我們將使用 <code>gradle</code>/<code>maven</code> 映像檔來產生應用程式的 fat JAR。</li><li>最後，生成的發行版將在基於 JDK 映像檔建立的環境中執行。</li></ol><p>在專案的根資料夾中，建立一個名為 <code>Dockerfile</code> 的檔案，其內容如下：</p>',8)),e(h,{group:"languages"},{default:l(()=>[e(n,{title:"Gradle","group-key":"kotlin"},{default:l(()=>[e(g,{lang:"Docker",code:`# 階段 1：快取 Gradle 依賴項
FROM gradle:latest AS cache
RUN mkdir -p /home/gradle/cache_home
ENV GRADLE_USER_HOME=/home/gradle/cache_home
COPY build.gradle.* gradle.properties /home/gradle/app/
COPY gradle /home/gradle/app/gradle
WORKDIR /home/gradle/app
RUN gradle clean build -i --stacktrace

# 階段 2：建置應用程式
FROM gradle:latest AS build
COPY --from=cache /home/gradle/cache_home /home/gradle/.gradle
COPY --chown=gradle:gradle . /home/gradle/src
WORKDIR /home/gradle/src
# 建置 fat JAR，Gradle 預設也支援 shadow
# 和 boot JAR。
RUN gradle buildFatJar --no-daemon

# 階段 3：建立運行時映像檔
FROM amazoncorretto:22 AS runtime
EXPOSE 8080
RUN mkdir /app
COPY --from=build /home/gradle/src/build/libs/*.jar /app/ktor-docker-sample.jar
ENTRYPOINT ["java","-jar","/app/ktor-docker-sample.jar"]`})]),_:1}),e(n,{title:"Maven","group-key":"maven"},{default:l(()=>i[7]||(i[7]=[s("div",{class:"language-Docker vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"Docker"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"# 階段 1：快取 Maven 依賴項")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"FROM"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," maven:3.8-amazoncorretto-21 "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"AS"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," cache")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"WORKDIR"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," /app")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"COPY"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," pom.xml .")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"RUN"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," mvn dependency:go-offline")]),a(`
`),s("span",{class:"line"}),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"# 階段 2：建置應用程式")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"FROM"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," maven:3.8-amazoncorretto-21 "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"AS"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," build")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"WORKDIR"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," /app")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"COPY"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," --from=cache /root/.m2 /root/.m2")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"COPY"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," . .")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"RUN"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," mvn clean package")]),a(`
`),s("span",{class:"line"}),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"# 階段 3：建立運行時映像檔")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"FROM"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," amazoncorretto:21-slim "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"AS"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," runtime")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"EXPOSE"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," 8080")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"WORKDIR"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," /app")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"COPY"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," --from=build /app/target/*-with-dependencies.jar app.jar")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"ENTRYPOINT"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," ["),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"java"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-jar"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"app.jar"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"]")])])])],-1)])),_:1})]),_:1}),i[14]||(i[14]=s("p",null,"第一個階段確保只有在建置相關檔案發生更改時才會重新下載依賴項。如果未使用第一個階段，或依賴項未在其他階段快取， 則每次建置時都會安裝依賴項。",-1)),i[15]||(i[15]=s("p",null,"在第二個階段建置 fat JAR。請注意，Gradle 預設也支援 shadow 和 boot JAR。",-1)),i[16]||(i[16]=s("p",null,"建置的第三個階段以以下方式運作：",-1)),i[17]||(i[17]=s("ul",null,[s("li",null,"指示將使用的映像檔。"),s("li",null,"指定暴露的埠口（這不會自動暴露埠口，在運行容器時完成）。"),s("li",null,"將建置輸出中的內容複製到資料夾。"),s("li",null,[a("運行應用程式 ("),s("code",null,"ENTRYPOINT"),a(")。")])],-1)),e(c,{id:"jdk_image_replacement_tip"},{default:l(()=>[i[9]||(i[9]=s("p",null," 本範例使用 Amazon Corretto Docker 映像檔，但您可以將其替換為任何其他適合的替代方案，例如： ",-1)),e(E,null,{default:l(()=>i[8]||(i[8]=[s("li",null,[s("a",{href:"https://hub.docker.com/_/eclipse-temurin"},"Eclipse Temurin")],-1),s("li",null,[s("a",{href:"https://hub.docker.com/_/ibm-semeru-runtimes"},"IBM Semeru")],-1),s("li",null,[s("a",{href:"https://hub.docker.com/_/ibmjava"},"IBM Java")],-1),s("li",null,[s("a",{href:"https://hub.docker.com/_/sapmachine"},"SAP Machine JDK")],-1)])),_:1})]),_:1}),i[18]||(i[18]=r('<h3 id="build-run" tabindex="-1">建置並運行 Docker 映像檔 <a class="header-anchor" href="#build-run" aria-label="Permalink to &quot;建置並運行 Docker 映像檔 {id=&quot;build-run&quot;}&quot;">​</a></h3><p>下一步是建置並標記 Docker 映像檔：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-application</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span></code></pre></div><p>最後，啟動映像檔：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 8080:8080</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-application</span></span></code></pre></div><p>這將會啟動 Ktor 伺服器，在 <code>https://0.0.0.0:8080</code> 上響應。</p>',6))])}const A=u(F,[["render",b]]);export{R as __pageData,A as default};
