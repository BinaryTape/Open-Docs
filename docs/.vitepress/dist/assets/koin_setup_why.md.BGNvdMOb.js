import{_ as s,c as a,o as n,ag as l}from"./chunks/framework.Bksy39di.js";const c=JSON.parse('{"title":"为什么选择 Koin？","description":"","frontmatter":{"title":"为什么选择 Koin？"},"headers":[],"relativePath":"koin/setup/why.md","filePath":"koin/setup/why.md","lastUpdated":1748365453000}'),t={name:"koin/setup/why.md"};function e(p,i,h,o,k,r){return n(),a("div",null,i[0]||(i[0]=[l(`<h1 id="为什么选择-koin" tabindex="-1">为什么选择 Koin？ <a class="header-anchor" href="#为什么选择-koin" aria-label="Permalink to &quot;为什么选择 Koin？&quot;">​</a></h1><p>Koin 提供了一种简单高效的方式，将依赖注入整合到任何 Kotlin 应用（多平台、Android、后端等）中。</p><p>Koin 的目标是：</p><ul><li>通过智能 API 简化你的依赖注入基础设施</li><li>易于阅读、易于使用的 Kotlin DSL，让你能够编写任何类型的应用程序</li><li>提供多种集成方式，从 Android 生态系统到 Ktor 等后端需求</li><li>允许与注解一起使用</li></ul><h2 id="koin-简介" tabindex="-1">Koin 简介 <a class="header-anchor" href="#koin-简介" aria-label="Permalink to &quot;Koin 简介&quot;">​</a></h2><h3 id="让你的-kotlin-开发更简单、更高效" tabindex="-1">让你的 Kotlin 开发更简单、更高效 <a class="header-anchor" href="#让你的-kotlin-开发更简单、更高效" aria-label="Permalink to &quot;让你的 Kotlin 开发更简单、更高效&quot;">​</a></h3><p>Koin 是一个智能的 Kotlin 依赖注入库，让你专注于你的应用，而不是你的工具。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyRepository</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyPresenter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> repository : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyRepository</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// just declare it </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myModule </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  singleOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyPresenter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  singleOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyRepository</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Koin 为你提供简单的工具和 API，让你能够构建、整合 Kotlin 相关技术到你的应用中，并轻松扩展你的业务。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Just start Koin</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  startKoin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    modules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myModule)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="适用于-android" tabindex="-1">适用于 Android <a class="header-anchor" href="#适用于-android" aria-label="Permalink to &quot;适用于 Android&quot;">​</a></h3><p>得益于 Kotlin 语言，Koin 扩展了 Android 平台，并作为原始平台的一部分提供了新功能。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyApplication</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onCreate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onCreate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    startKoin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      modules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myModule)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Koin 提供了简单而强大的 API，只需使用 <code>by inject()</code> 或 <code>by viewModel()</code> 即可在 Android 组件中的任何位置检索你的依赖。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyActivity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AppCompatActivity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myPresenter : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyPresenter</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> inject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="赋能-kotlin-multiplatform" tabindex="-1">赋能 Kotlin Multiplatform <a class="header-anchor" href="#赋能-kotlin-multiplatform" aria-label="Permalink to &quot;赋能 Kotlin Multiplatform&quot;">​</a></h3><p>在移动平台之间共享代码是 Kotlin Multiplatform 的主要用例之一。借助 Kotlin Multiplatform Mobile，你可以构建跨平台移动应用程序，并在 Android 和 iOS 之间共享通用代码。</p><p>Koin 提供了多平台依赖注入功能，帮助你在原生移动应用、Web/后端应用中构建组件。</p><h3 id="性能与生产力" tabindex="-1">性能与生产力 <a class="header-anchor" href="#性能与生产力" aria-label="Permalink to &quot;性能与生产力&quot;">​</a></h3><p>Koin 是一个纯 Kotlin 框架，在使用和执行方面都设计得直观明了。它易于使用，不影响你的编译时间，也不需要任何额外的插件配置。</p><h2 id="koin-一个依赖注入框架" tabindex="-1">Koin：一个依赖注入框架 <a class="header-anchor" href="#koin-一个依赖注入框架" aria-label="Permalink to &quot;Koin：一个依赖注入框架&quot;">​</a></h2><p>Koin 是一个流行的 Kotlin 依赖注入 (DI) 框架，提供了一种现代化、轻量级的解决方案，以最少的样板代码管理应用程序的依赖。</p><h3 id="依赖注入-vs-服务定位器" tabindex="-1">依赖注入 vs. 服务定位器 <a class="header-anchor" href="#依赖注入-vs-服务定位器" aria-label="Permalink to &quot;依赖注入 vs. 服务定位器&quot;">​</a></h3><p>虽然 Koin 可能看起来与服务定位器模式相似，但它们之间存在关键区别：</p><ul><li><p><strong>服务定位器 (Service Locator)</strong>：服务定位器本质上是可用服务的注册表，你可以根据需要从中请求服务实例。它负责创建和管理这些实例，通常使用静态的全局注册表。</p></li><li><p><strong>依赖注入 (Dependency Injection)</strong>：相比之下，Koin 是一个纯粹的依赖注入框架。使用 Koin，你在模块中声明你的依赖，Koin 负责对象的创建和连接。它允许创建多个独立的、拥有自己作用域的模块，从而使依赖管理更具模块化，并避免潜在冲突。</p></li></ul><h3 id="koin-的方法-灵活性与最佳实践的融合" tabindex="-1">Koin 的方法：灵活性与最佳实践的融合 <a class="header-anchor" href="#koin-的方法-灵活性与最佳实践的融合" aria-label="Permalink to &quot;Koin 的方法：灵活性与最佳实践的融合&quot;">​</a></h3><p>Koin 同时支持 DI 和服务定位器模式，为开发者提供了灵活性。然而，它强烈鼓励使用 DI，特别是构造函数注入，即通过构造函数参数传递依赖。这种方法提高了可测试性，并使你的代码更易于理解。</p><p>Koin 的设计理念以简洁和易于设置为核心，同时在必要时允许进行复杂配置。通过使用 Koin，开发者可以有效地管理依赖，其中 DI 是大多数场景下推荐和首选的方法。</p><h3 id="透明度与设计概览" tabindex="-1">透明度与设计概览 <a class="header-anchor" href="#透明度与设计概览" aria-label="Permalink to &quot;透明度与设计概览&quot;">​</a></h3><p>Koin 被设计为一个多功能的控制反转 (IoC) 容器，它支持依赖注入 (DI) 和服务定位器 (SL) 两种模式。为了清晰地了解 Koin 的运作方式并指导你有效使用它，我们来探讨以下几个方面：</p><h4 id="koin-如何平衡-di-和-sl" tabindex="-1">Koin 如何平衡 DI 和 SL <a class="header-anchor" href="#koin-如何平衡-di-和-sl" aria-label="Permalink to &quot;Koin 如何平衡 DI 和 SL&quot;">​</a></h4><p>Koin 结合了 DI 和 SL 的元素，这可能会影响你使用框架的方式：</p><ol><li><p><strong>全局上下文使用 (Global Context Usage)</strong>：默认情况下，Koin 提供了一个全局可访问的组件，其作用类似于服务定位器。这允许你使用 <code>KoinComponent</code> 或 <code>inject</code> 函数从中心注册表检索依赖。</p></li><li><p><strong>独立组件 (Isolated Components)</strong>：尽管 Koin 鼓励使用依赖注入，尤其是构造函数注入，但它也允许使用独立组件。这种灵活性意味着你可以配置应用程序在最合适的地方使用 DI，同时仍可利用 SL 来处理特定情况。</p></li><li><p><strong>Android 组件中的 SL (SL in Android Components)</strong>：在 Android 开发中，Koin 通常会在 <code>Application</code> 和 <code>Activity</code> 等组件内部使用 SL 以便于设置。从这个角度来看，Koin 推荐使用 DI，特别是构造函数注入，以更结构化的方式管理依赖。然而，这并非强制要求，开发者可以根据需要灵活使用 SL。</p></li></ol><h4 id="为什么这与你相关" tabindex="-1">为什么这与你相关 <a class="header-anchor" href="#为什么这与你相关" aria-label="Permalink to &quot;为什么这与你相关&quot;">​</a></h4><p>理解 DI 和 SL 之间的区别有助于有效地管理应用程序的依赖：</p><ul><li><p><strong>依赖注入 (Dependency Injection)</strong>：Koin 鼓励使用 DI，因为它在可测试性和可维护性方面具有优势。构造函数注入是首选方法，因为它使依赖关系明确，并增强了代码的清晰度。</p></li><li><p><strong>服务定位器 (Service Locator)</strong>：虽然 Koin 支持 SL 以提供便利（尤其是在 Android 组件中），但仅仅依赖 SL 可能导致更紧密的耦合和降低可测试性。Koin 的设计提供了一种平衡的方法，允许你在实用时使用 SL，但提倡 DI 作为最佳实践。</p></li></ul><h4 id="充分利用-koin" tabindex="-1">充分利用 Koin <a class="header-anchor" href="#充分利用-koin" aria-label="Permalink to &quot;充分利用 Koin&quot;">​</a></h4><p>要有效使用 Koin：</p><ul><li><p><strong>遵循最佳实践 (Follow Best Practices)</strong>：尽可能使用构造函数注入，以符合依赖管理的最佳实践。这种方法提高了可测试性和可维护性。</p></li><li><p><strong>利用 Koin 的灵活性 (Leverage Koin’s Flexibility)</strong>：在简化设置的场景中使用 Koin 对 SL 的支持，但目标是依靠 DI 来管理核心应用程序依赖。</p></li><li><p><strong>参考文档和示例 (Refer to Documentation and Examples)</strong>：查阅 Koin 的文档和示例，了解如何根据项目需求适当地配置和使用 DI 和 SL。</p></li><li><p><strong>可视化依赖管理 (Visualize Dependency Management)</strong>：图表和示例可以帮助说明 Koin 如何解析依赖并在不同上下文中管理它们。这些视觉辅助工具可以更清晰地理解 Koin 的内部工作原理。</p></li></ul><blockquote><p>通过提供这些指导，我们旨在帮助你了解 Koin 的特性和设计选择，确保你可以在遵循依赖管理最佳实践的同时，充分发挥其潜力。</p></blockquote>`,40)]))}const E=s(t,[["render",e]]);export{c as __pageData,E as default};
