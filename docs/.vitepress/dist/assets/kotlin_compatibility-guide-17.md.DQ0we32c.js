import{_ as e,c as t,o as r,ag as n}from"./chunks/framework.Bksy39di.js";const g=JSON.parse('{"title":"Kotlin 1.7 兼容性指南","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/compatibility-guide-17.md","filePath":"kotlin/compatibility-guide-17.md","lastUpdated":1754307826000}'),a={name:"kotlin/compatibility-guide-17.md"};function l(s,o,i,c,p,u){return r(),t("div",null,o[0]||(o[0]=[n('<h1 id="kotlin-1-7-兼容性指南" tabindex="-1">Kotlin 1.7 兼容性指南 <a class="header-anchor" href="#kotlin-1-7-兼容性指南" aria-label="Permalink to &quot;Kotlin 1.7 兼容性指南&quot;">​</a></h1><p><em><a href="/kotlin/kotlin-evolution-principles">保持语言现代性</a></em> 和 <em><a href="/kotlin/kotlin-evolution-principles">舒适的更新</a></em> 是 Kotlin 语言设计中的基本原则。前者指出，阻碍语言演进的构造应被移除；后者则强调，此移除应提前充分沟通，以使代码迁移尽可能顺畅。</p><p>尽管大多数语言变更已通过其他渠道（例如更新日志或编译器警告）公布，但本文档总结了所有这些变更，为从 Kotlin 1.6 迁移到 Kotlin 1.7 提供了完整的参考。</p><h2 id="基本术语" tabindex="-1">基本术语 <a class="header-anchor" href="#基本术语" aria-label="Permalink to &quot;基本术语&quot;">​</a></h2><p>本文档中，我们引入了几种兼容性类型：</p><ul><li><em>源代码</em>：源代码不兼容的变更，导致原本可以正常编译（无错误或警告）的代码无法再编译。</li><li><em>二进制</em>：如果两个二进制 artifact 互换不会导致加载或链接错误，则称它们是二进制兼容的。</li><li><em>行为</em>：如果同一程序在应用变更前后表现出不同的行为，则称该变更行为不兼容。</li></ul><p>请记住，这些定义仅适用于纯 Kotlin。从其他语言（例如 Java）角度看 Kotlin 代码的兼容性超出了本文档的范围。</p><h2 id="语言" tabindex="-1">语言 <a class="header-anchor" href="#语言" aria-label="Permalink to &quot;语言&quot;">​</a></h2><h3 id="使安全调用结果始终可空" tabindex="-1">使安全调用结果始终可空 <a class="header-anchor" href="#使安全调用结果始终可空" aria-label="Permalink to &quot;使安全调用结果始终可空&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-46860" target="_blank" rel="noreferrer">KT-46860</a></p><p><strong>Component</strong>: Core language</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Short summary</strong>: Kotlin 1.7 将始终把安全调用结果的类型视为可空，即使安全调用的接收者是非空的。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>&lt;1.3: 对非空接收者的不必要安全调用报告警告</li><li>1.6.20: 额外警告，不必要的安全调用的结果类型将在下一版本中改变</li><li>1.7.0: 将安全调用结果的类型更改为可空， <code>-XXLanguage:-SafeCallsAreAlwaysNullable</code> 可用于临时恢复到 1.7 之前的行为</li></ul></blockquote><h3 id="禁止将-super-调用委托给抽象超类成员" tabindex="-1">禁止将 <code>super</code> 调用委托给抽象超类成员 <a class="header-anchor" href="#禁止将-super-调用委托给抽象超类成员" aria-label="Permalink to &quot;禁止将 `super` 调用委托给抽象超类成员&quot;">​</a></h3><blockquote><p><strong>Issues</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-45508" target="_blank" rel="noreferrer">KT-45508</a>, <a href="https://youtrack.jetbrains.com/issue/KT-49017" target="_blank" rel="noreferrer">KT-49017</a>, <a href="https://youtrack.jetbrains.com/issue/KT-38078" target="_blank" rel="noreferrer">KT-38078</a></p><p><strong>Component</strong>: Core language</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Short summary</strong>: 当显式或隐式 <code>super</code> 调用委托给超类的_抽象_成员时，Kotlin 将报告编译错误，即使超接口中有默认实现。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.5.20: 当使用未覆盖所有抽象成员的非抽象类时引入警告</li><li>1.7.0: 如果 <code>super</code> 调用实际上访问了超类中的抽象成员，则报告错误</li><li>1.7.0: 如果启用了 <code>-Xjvm-default=all</code> 或 <code>-Xjvm-default=all-compatibility</code> 兼容模式，则报告错误；在渐进模式下报告错误</li><li><blockquote><p>=1.8.0: 在所有情况下报告错误</p></blockquote></li></ul></blockquote><h3 id="禁止通过非公共主构造函数中声明的公共属性暴露非公共类型" tabindex="-1">禁止通过非公共主构造函数中声明的公共属性暴露非公共类型 <a class="header-anchor" href="#禁止通过非公共主构造函数中声明的公共属性暴露非公共类型" aria-label="Permalink to &quot;禁止通过非公共主构造函数中声明的公共属性暴露非公共类型&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-28078" target="_blank" rel="noreferrer">KT-28078</a></p><p><strong>Component</strong>: Core language</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Short summary</strong>: Kotlin 将阻止在私有主构造函数中声明具有非公共类型的公共属性。从另一个包访问此类属性可能导致 <code>IllegalAccessError</code>。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.3.20: 对具有非公共类型且在非公共构造函数中声明的公共属性报告警告</li><li>1.6.20: 在渐进模式下将此警告提升为错误</li><li>1.7.0: 将此警告提升为错误</li></ul></blockquote><h3 id="禁止访问用枚举名称限定的未初始化枚举条目" tabindex="-1">禁止访问用枚举名称限定的未初始化枚举条目 <a class="header-anchor" href="#禁止访问用枚举名称限定的未初始化枚举条目" aria-label="Permalink to &quot;禁止访问用枚举名称限定的未初始化枚举条目&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-41124" target="_blank" rel="noreferrer">KT-41124</a></p><p><strong>Component</strong>: Core language</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Short summary</strong>: Kotlin 1.7 将禁止在枚举静态初始化块中访问用枚举名称限定的未初始化枚举条目。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.7.0: 在枚举静态初始化块中访问未初始化枚举条目时报告错误</li></ul></blockquote><h3 id="禁止在-when-条件分支和循环条件中计算复杂布尔表达式的常量值" tabindex="-1">禁止在 <code>when</code> 条件分支和循环条件中计算复杂布尔表达式的常量值 <a class="header-anchor" href="#禁止在-when-条件分支和循环条件中计算复杂布尔表达式的常量值" aria-label="Permalink to &quot;禁止在 `when` 条件分支和循环条件中计算复杂布尔表达式的常量值&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.com/issue/KT-39883" target="_blank" rel="noreferrer">KT-39883</a></p><p><strong>Component</strong>: Core language</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Short summary</strong>: Kotlin 将不再基于除字面值 <code>true</code> 和 <code>false</code> 以外的常量布尔表达式进行穷尽性和控制流假设。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.5.30: 当 <code>when</code> 的穷尽性或控制流可达性是基于 <code>when</code> 分支或循环条件中的复杂常量布尔表达式确定时，报告警告</li><li>1.7.0: 将此警告提升为错误</li></ul></blockquote><h3 id="默认使枚举、密封类和布尔类型作为主题的-when-语句穷尽化" tabindex="-1">默认使枚举、密封类和布尔类型作为主题的 <code>when</code> 语句穷尽化 <a class="header-anchor" href="#默认使枚举、密封类和布尔类型作为主题的-when-语句穷尽化" aria-label="Permalink to &quot;默认使枚举、密封类和布尔类型作为主题的 `when` 语句穷尽化&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-47709" target="_blank" rel="noreferrer">KT-47709</a></p><p><strong>Component</strong>: Core language</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Short summary</strong>: Kotlin 1.7 将对以枚举、密封类或布尔类型作为主题的非穷尽 <code>when</code> 语句报告错误。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.6.0: 当以枚举、密封类或布尔类型作为主题的 <code>when</code> 语句非穷尽时引入警告（渐进模式下为错误）</li><li>1.7.0: 将此警告提升为错误</li></ul></blockquote><h3 id="废弃-when-表达式中令人困惑的语法" tabindex="-1">废弃 <code>when</code> 表达式中令人困惑的语法 <a class="header-anchor" href="#废弃-when-表达式中令人困惑的语法" aria-label="Permalink to &quot;废弃 `when` 表达式中令人困惑的语法&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-48385" target="_blank" rel="noreferrer">KT-48385</a></p><p><strong>Component</strong>: Core language</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Short summary</strong>: Kotlin 1.6 废弃了 <code>when</code> 条件表达式中几个令人困惑的语法构造。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.6.20: 对受影响的表达式引入废弃警告</li><li>1.8.0: 将此警告提升为错误</li><li><blockquote><p>= 1.8: 将一些废弃的构造用于新的语言特性</p></blockquote></li></ul></blockquote><h3 id="类型可空性增强改进" tabindex="-1">类型可空性增强改进 <a class="header-anchor" href="#类型可空性增强改进" aria-label="Permalink to &quot;类型可空性增强改进&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-48623" target="_blank" rel="noreferrer">KT-48623</a></p><p><strong>Component</strong>: Kotlin/JVM</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Short summary</strong>: Kotlin 1.7 将改变其加载和解释 Java 代码中类型可空性注解的方式。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.4.30: 对更精确的类型可空性可能导致错误的情况引入警告</li><li>1.7.0: 推断 Java 类型的更精确可空性， <code>-XXLanguage:-TypeEnhancementImprovementsInStrictMode</code> 可用于临时恢复到 1.7 之前的行为</li></ul></blockquote><h3 id="防止不同数值类型之间的隐式强制转换" tabindex="-1">防止不同数值类型之间的隐式强制转换 <a class="header-anchor" href="#防止不同数值类型之间的隐式强制转换" aria-label="Permalink to &quot;防止不同数值类型之间的隐式强制转换&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-48645" target="_blank" rel="noreferrer">KT-48645</a></p><p><strong>Component</strong>: Kotlin/JVM</p><p><strong>Incompatible change type</strong>: behavioral</p><p><strong>Short summary</strong>: Kotlin 将避免在语义上仅需要向下转换为某个原生数值类型时，自动将数值转换为该类型。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>&lt; 1.5.30: 所有受影响案例中的旧行为</li><li>1.5.30: 修复生成的属性委托访问器中的向下转换行为， <code>-Xuse-old-backend</code> 可用于临时恢复到 1.5.30 修复前的行为</li><li><blockquote><p>= 1.7.20: 修复其他受影响案例中的向下转换行为</p></blockquote></li></ul></blockquote><h3 id="废弃编译器选项-xjvm-default-的-enable-和-compatibility-模式" tabindex="-1">废弃编译器选项 <code>-Xjvm-default</code> 的 <code>enable</code> 和 <code>compatibility</code> 模式 <a class="header-anchor" href="#废弃编译器选项-xjvm-default-的-enable-和-compatibility-模式" aria-label="Permalink to &quot;废弃编译器选项 `-Xjvm-default` 的 `enable` 和 `compatibility` 模式&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-46329" target="_blank" rel="noreferrer">KT-46329</a></p><p><strong>Component</strong>: Kotlin/JVM</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Short summary</strong>: Kotlin 1.6.20 对使用 <code>-Xjvm-default</code> 编译器选项的 <code>enable</code> 和 <code>compatibility</code> 模式发出警告。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.6.20: 对 <code>-Xjvm-default</code> 编译器选项的 <code>enable</code> 和 <code>compatibility</code> 模式引入警告</li><li><blockquote><p>= 1.8.0: 将此警告提升为错误</p></blockquote></li></ul></blockquote><h3 id="禁止调用名称为-suspend-且带有尾随-lambda-的函数" tabindex="-1">禁止调用名称为 <code>suspend</code> 且带有尾随 lambda 的函数 <a class="header-anchor" href="#禁止调用名称为-suspend-且带有尾随-lambda-的函数" aria-label="Permalink to &quot;禁止调用名称为 `suspend` 且带有尾随 lambda 的函数&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-22562" target="_blank" rel="noreferrer">KT-22562</a></p><p><strong>Component</strong>: Core language</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Short summary</strong>: Kotlin 1.6 不再允许调用名称为 <code>suspend</code> 且以尾随 lambda 形式传入单个函数类型实参的用户函数。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.3.0: 对此类函数调用引入警告</li><li>1.6.0: 将此警告提升为错误</li><li>1.7.0: 引入语言语法变更，使 <code>{</code> 之前的 <code>suspend</code> 被解析为关键字</li></ul></blockquote><h3 id="禁止对来自另一个模块的基类属性进行智能转换" tabindex="-1">禁止对来自另一个模块的基类属性进行智能转换 <a class="header-anchor" href="#禁止对来自另一个模块的基类属性进行智能转换" aria-label="Permalink to &quot;禁止对来自另一个模块的基类属性进行智能转换&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-52629" target="_blank" rel="noreferrer">KT-52629</a></p><p><strong>Component</strong>: Core language</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Short summary</strong>: Kotlin 1.7 将不再允许对位于另一个模块中的超类属性进行智能转换。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.6.0: 对在位于另一个模块中的超类中声明的属性进行智能转换报告警告</li><li>1.7.0: 将此警告提升为错误， <code>-XXLanguage:-ProhibitSmartcastsOnPropertyFromAlienBaseClass</code> 可用于临时恢复到 1.7 之前的行为</li></ul></blockquote><h3 id="类型推断时勿忽略有意义的约束" tabindex="-1">类型推断时勿忽略有意义的约束 <a class="header-anchor" href="#类型推断时勿忽略有意义的约束" aria-label="Permalink to &quot;类型推断时勿忽略有意义的约束&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-52668" target="_blank" rel="noreferrer">KT-52668</a></p><p><strong>Component</strong>: Core language</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Short summary</strong>: Kotlin 1.4−1.6 由于不正确的优化，在类型推断时忽略了一些类型约束。这可能导致编写不健全的代码，并在运行时引发 <code>ClassCastException</code>。Kotlin 1.7 会考虑这些约束，从而禁止不健全的代码。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.5.20: 对如果考虑所有类型推断约束就会发生类型不匹配的表达式报告警告</li><li>1.7.0: 考虑所有约束，从而将此警告提升为错误， <code>-XXLanguage:-ProperTypeInferenceConstraintsProcessing</code> 可用于临时恢复到 1.7 之前的行为</li></ul></blockquote><h2 id="标准库" tabindex="-1">标准库 <a class="header-anchor" href="#标准库" aria-label="Permalink to &quot;标准库&quot;">​</a></h2><h3 id="逐步更改集合-min-和-max-函数的返回类型为非空" tabindex="-1">逐步更改集合 <code>min</code> 和 <code>max</code> 函数的返回类型为非空 <a class="header-anchor" href="#逐步更改集合-min-和-max-函数的返回类型为非空" aria-label="Permalink to &quot;逐步更改集合 `min` 和 `max` 函数的返回类型为非空&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-38854" target="_blank" rel="noreferrer">KT-38854</a></p><p><strong>Component</strong>: kotlin-stdlib</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Short summary</strong>: 集合 <code>min</code> 和 <code>max</code> 函数的返回类型将在 Kotlin 1.7 中更改为非空。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.4.0: 引入 <code>...OrNull</code> 函数作为同义词并废弃受影响的 API（详见 issue）</li><li>1.5.0: 将受影响 API 的废弃级别提升为错误</li><li>1.6.0: 从公共 API 中隐藏废弃函数</li><li>1.7.0: 重新引入受影响的 API，但返回类型为非空</li></ul></blockquote><h3 id="废弃浮点数组函数-contains、indexof、lastindexof" tabindex="-1">废弃浮点数组函数：<code>contains</code>、<code>indexOf</code>、<code>lastIndexOf</code> <a class="header-anchor" href="#废弃浮点数组函数-contains、indexof、lastindexof" aria-label="Permalink to &quot;废弃浮点数组函数：`contains`、`indexOf`、`lastIndexOf`&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-28753" target="_blank" rel="noreferrer">KT-28753</a></p><p><strong>Component</strong>: kotlin-stdlib</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Short summary</strong>: Kotlin 废弃浮点数组函数 <code>contains</code>、<code>indexOf</code>、<code>lastIndexOf</code>，这些函数使用 IEEE-754 顺序而不是全序来比较值。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.4.0: 以警告形式废弃受影响的函数</li><li>1.6.0: 将废弃级别提升为错误</li><li>1.7.0: 从公共 API 中隐藏废弃函数</li></ul></blockquote><h3 id="将-kotlin-dom-和-kotlin-browser-包中的声明迁移到-kotlinx" tabindex="-1">将 <code>kotlin.dom</code> 和 <code>kotlin.browser</code> 包中的声明迁移到 <code>kotlinx.*</code> <a class="header-anchor" href="#将-kotlin-dom-和-kotlin-browser-包中的声明迁移到-kotlinx" aria-label="Permalink to &quot;将 `kotlin.dom` 和 `kotlin.browser` 包中的声明迁移到 `kotlinx.*`&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-39330" target="_blank" rel="noreferrer">KT-39330</a></p><p><strong>Component</strong>: kotlin-stdlib (JS)</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Short summary</strong>: <code>kotlin.dom</code> 和 <code>kotlin.browser</code> 包中的声明已移至对应的 <code>kotlinx.*</code> 包，为将其从标准库中提取做准备。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.4.0: 在 <code>kotlinx.dom</code> 和 <code>kotlinx.browser</code> 包中引入替代 API</li><li>1.4.0: 废弃 <code>kotlin.dom</code> 和 <code>kotlin.browser</code> 包中的 API，并建议上述新 API 作为替代</li><li>1.6.0: 将废弃级别提升为错误</li><li><blockquote><p>= 1.8: 从标准库中移除废弃函数</p></blockquote></li><li><blockquote><p>= 1.8: 将 <code>kotlinx.*</code> 包中的 API 移动到单独的库</p></blockquote></li></ul></blockquote><h3 id="废弃部分仅-js-api" tabindex="-1">废弃部分仅 JS API <a class="header-anchor" href="#废弃部分仅-js-api" aria-label="Permalink to &quot;废弃部分仅 JS API&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-48587" target="_blank" rel="noreferrer">KT-48587</a></p><p><strong>Component</strong>: kotlin-stdlib (JS)</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Short summary</strong>: 标准库中一些仅 JS 函数已废弃以供移除。它们包括：<code>String.concat(String)</code>、<code>String.match(regex: String)</code>、<code>String.matches(regex: String)</code>，以及接受比较函数的数组 <code>sort</code> 函数，例如 <code>Array&lt;out T&gt;.sort(comparison: (a: T, b: T) -&gt; Int)</code>。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.6.0: 以警告形式废弃受影响的函数</li><li>1.8.0: 将废弃级别提升为错误</li><li>1.9.0: 从公共 API 中移除废弃函数</li></ul></blockquote><h2 id="工具" tabindex="-1">工具 <a class="header-anchor" href="#工具" aria-label="Permalink to &quot;工具&quot;">​</a></h2><h3 id="移除-kotlingradlesubplugin-类" tabindex="-1">移除 <code>KotlinGradleSubplugin</code> 类 <a class="header-anchor" href="#移除-kotlingradlesubplugin-类" aria-label="Permalink to &quot;移除 `KotlinGradleSubplugin` 类&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-48831" target="_blank" rel="noreferrer">KT-48831</a></p><p><strong>Component</strong>: Gradle</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Short summary</strong>: 移除 <code>KotlinGradleSubplugin</code> 类。请改用 <code>KotlinCompilerPluginSupportPlugin</code> 类。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.6.0: 将废弃级别提升为错误</li><li>1.7.0: 移除废弃类</li></ul></blockquote><h3 id="移除-useir-编译器选项" tabindex="-1">移除 <code>useIR</code> 编译器选项 <a class="header-anchor" href="#移除-useir-编译器选项" aria-label="Permalink to &quot;移除 `useIR` 编译器选项&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-48847" target="_blank" rel="noreferrer">KT-48847</a></p><p><strong>Component</strong>: Gradle</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Short summary</strong>: 移除已废弃并隐藏的 <code>useIR</code> 编译器选项。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.5.0: 将废弃级别提升为警告</li><li>1.6.0: 隐藏该选项</li><li>1.7.0: 移除废弃选项</li></ul></blockquote><h3 id="废弃-kapt-use-worker-api-gradle-属性" tabindex="-1">废弃 <code>kapt.use.worker.api</code> Gradle 属性 <a class="header-anchor" href="#废弃-kapt-use-worker-api-gradle-属性" aria-label="Permalink to &quot;废弃 `kapt.use.worker.api` Gradle 属性&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-48826" target="_blank" rel="noreferrer">KT-48826</a></p><p><strong>Component</strong>: Gradle</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Short summary</strong>: 废弃 <code>kapt.use.worker.api</code> 属性，该属性允许通过 Gradle Workers API 运行 kapt（默认值：true）。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.6.20: 将废弃级别提升为警告</li><li><blockquote><p>= 1.8.0: 移除此属性</p></blockquote></li></ul></blockquote><h3 id="移除-kotlin-experimental-coroutines-gradle-dsl-选项和-kotlin-coroutines-gradle-属性" tabindex="-1">移除 <code>kotlin.experimental.coroutines</code> Gradle DSL 选项和 <code>kotlin.coroutines</code> Gradle 属性 <a class="header-anchor" href="#移除-kotlin-experimental-coroutines-gradle-dsl-选项和-kotlin-coroutines-gradle-属性" aria-label="Permalink to &quot;移除 `kotlin.experimental.coroutines` Gradle DSL 选项和 `kotlin.coroutines` Gradle 属性&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-50494" target="_blank" rel="noreferrer">KT-50494</a></p><p><strong>Component</strong>: Gradle</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Short summary</strong>: 移除 <code>kotlin.experimental.coroutines</code> Gradle DSL 选项和 <code>kotlin.coroutines</code> 属性。</p><p><strong>Deprecation cycle</strong>:</p><ul><li>1.6.20: 将废弃级别提升为警告</li><li>1.7.0: 移除 DSL 选项、其包含的 <code>experimental</code> 代码块和该属性</li></ul></blockquote><h3 id="废弃-useexperimentalannotation-编译器选项" tabindex="-1">废弃 <code>useExperimentalAnnotation</code> 编译器选项 <a class="header-anchor" href="#废弃-useexperimentalannotation-编译器选项" aria-label="Permalink to &quot;废弃 `useExperimentalAnnotation` 编译器选项&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-47763" target="_blank" rel="noreferrer">KT-47763</a></p><p><strong>Component</strong>: Gradle</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Short summary</strong>: 移除用于选择性地使用模块中 API 的隐藏 <code>useExperimentalAnnotation()</code> Gradle 函数。请改用 <code>optIn()</code> 函数。</p><p><strong>Deprecation cycle:</strong></p><ul><li>1.6.0: 隐藏废弃选项</li><li>1.7.0: 移除废弃选项</li></ul></blockquote><h3 id="废弃-kotlin-compiler-execution-strategy-系统属性" tabindex="-1">废弃 <code>kotlin.compiler.execution.strategy</code> 系统属性 <a class="header-anchor" href="#废弃-kotlin-compiler-execution-strategy-系统属性" aria-label="Permalink to &quot;废弃 `kotlin.compiler.execution.strategy` 系统属性&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-51830" target="_blank" rel="noreferrer">KT-51830</a></p><p><strong>Component</strong>: Gradle</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Short summary</strong>: 废弃用于选择编译器执行策略的 <code>kotlin.compiler.execution.strategy</code> 系统属性。请改用 Gradle 属性 <code>kotlin.compiler.execution.strategy</code> 或编译任务属性 <code>compilerExecutionStrategy</code>。</p><p><strong>Deprecation cycle:</strong></p><ul><li>1.7.0: 将废弃级别提升为警告</li><li><blockquote><p>1.7.0: 移除该属性</p></blockquote></li></ul></blockquote><h3 id="移除-kotlinoptions-jdkhome-编译器选项" tabindex="-1">移除 <code>kotlinOptions.jdkHome</code> 编译器选项 <a class="header-anchor" href="#移除-kotlinoptions-jdkhome-编译器选项" aria-label="Permalink to &quot;移除 `kotlinOptions.jdkHome` 编译器选项&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-46541" target="_blank" rel="noreferrer">KT-46541</a></p><p><strong>Component</strong>: Gradle</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Short summary</strong>: 移除 <code>kotlinOptions.jdkHome</code> 编译器选项，该选项用于从指定位置而非默认的 <code>JAVA_HOME</code> 包含自定义 JDK 到类路径。请改用 <a href="/kotlin/gradle-configure-project#gradle-java-toolchains-support">Java 工具链</a>。</p><p><strong>Deprecation cycle:</strong></p><ul><li>1.5.30: 将废弃级别提升为警告</li><li><blockquote><p>1.7.0: 移除该选项</p></blockquote></li></ul></blockquote><h3 id="移除-nostdlib-编译器选项" tabindex="-1">移除 <code>noStdlib</code> 编译器选项 <a class="header-anchor" href="#移除-nostdlib-编译器选项" aria-label="Permalink to &quot;移除 `noStdlib` 编译器选项&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-49011" target="_blank" rel="noreferrer">KT-49011</a></p><p><strong>Component</strong>: Gradle</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Short summary</strong>: 移除 <code>noStdlib</code> 编译器选项。Gradle 插件使用 <code>kotlin.stdlib.default.dependency=true</code> 属性来控制 Kotlin 标准库是否存在。</p><p><strong>Deprecation cycle:</strong></p><ul><li>1.5.0: 将废弃级别提升为警告</li><li>1.7.0: 移除该选项</li></ul></blockquote><h3 id="移除-kotlin2js-和-kotlin-dce-plugin-插件" tabindex="-1">移除 <code>kotlin2js</code> 和 <code>kotlin-dce-plugin</code> 插件 <a class="header-anchor" href="#移除-kotlin2js-和-kotlin-dce-plugin-插件" aria-label="Permalink to &quot;移除 `kotlin2js` 和 `kotlin-dce-plugin` 插件&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-48276" target="_blank" rel="noreferrer">KT-48276</a></p><p><strong>Component</strong>: Gradle</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Short summary</strong>: 移除 <code>kotlin2js</code> 和 <code>kotlin-dce-plugin</code> 插件。请改用新的 <code>org.jetbrains.kotlin.js</code> 插件来替代 <code>kotlin2js</code>。无用代码消除 (DCE) 在 Kotlin/JS Gradle 插件正确配置后即可工作。</p><p><strong>Deprecation cycle:</strong></p><ul><li>1.4.0: 将废弃级别提升为警告</li><li>1.7.0: 移除这些插件</li></ul></blockquote><h3 id="编译任务的变更" tabindex="-1">编译任务的变更 <a class="header-anchor" href="#编译任务的变更" aria-label="Permalink to &quot;编译任务的变更&quot;">​</a></h3><blockquote><p><strong>Issue</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-32805" target="_blank" rel="noreferrer">KT-32805</a></p><p><strong>Component</strong>: Gradle</p><p><strong>Incompatible change type</strong>: source</p><p><strong>Short summary</strong>: Kotlin 编译任务不再继承 Gradle <code>AbstractCompile</code> 任务，因此 <code>sourceCompatibility</code> 和 <code>targetCompatibility</code> 输入在 Kotlin 用户脚本中不再可用。<code>SourceTask.stableSources</code> 输入不再可用。<code>sourceFilesExtensions</code> 输入已被移除。废弃的 <code>Gradle destinationDir: File</code> 输出已被 <code>destinationDirectory: DirectoryProperty</code> 输出替换。<code>KotlinCompile</code> 任务的 <code>classpath</code> 属性已废弃。</p><p><strong>Deprecation cycle:</strong></p><ul><li>1.7.0: 输入不再可用，输出被替换，<code>classpath</code> 属性已废弃</li></ul></blockquote>',64)]))}const h=e(a,[["render",l]]);export{g as __pageData,h as default};
