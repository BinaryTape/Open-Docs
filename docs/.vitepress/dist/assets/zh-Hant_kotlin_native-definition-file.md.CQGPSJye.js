import{_ as a}from"./chunks/gradle-sync.DiZmeJUl.js";import{_ as t,c as o,o as i,ag as n}from"./chunks/framework.Bksy39di.js";const g=JSON.parse('{"title":"定義檔案","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/native-definition-file.md","filePath":"zh-Hant/kotlin/native-definition-file.md","lastUpdated":1754307826000}'),s={name:"zh-Hant/kotlin/native-definition-file.md"};function d(l,e,c,r,p,h){return i(),o("div",null,e[0]||(e[0]=[n(`<h1 id="定義檔案" tabindex="-1">定義檔案 <a class="header-anchor" href="#定義檔案" aria-label="Permalink to &quot;定義檔案&quot;">​</a></h1><p>Kotlin/Native 讓您能夠使用 C 和 Objective-C 函式庫，進而在 Kotlin 中運用其功能。 一個名為 cinterop 的特殊工具會讀取 C 或 Objective-C 函式庫，並產生相對應的 Kotlin 綁定， 如此一來，該函式庫的方法便能如同往常般在您的 Kotlin 程式碼中使用。</p><p>為了產生這些綁定，每個函式庫都需要一個定義檔案，其名稱通常與函式庫相同。 這是一個屬性檔案，精確描述了該函式庫應如何被使用。請參閱 <a href="#properties">可用屬性</a> 的完整列表。</p><p>以下是專案工作的一般工作流程：</p><ol><li>建立一個 <code>.def</code> 檔案，描述綁定中應包含的內容。</li><li>在您的 Kotlin 程式碼中使用已產生的綁定。</li><li>執行 Kotlin/Native 編譯器以產生最終的可執行檔。</li></ol><h2 id="建立與設定定義檔案" tabindex="-1">建立與設定定義檔案 <a class="header-anchor" href="#建立與設定定義檔案" aria-label="Permalink to &quot;建立與設定定義檔案&quot;">​</a></h2><p>讓我們建立一個定義檔案並為 C 函式庫產生綁定：</p><ol><li><p>在您的 IDE 中，選取 <code>src</code> 資料夾，並透過 <strong>檔案 | 新增 | 目錄</strong> 建立一個新目錄。</p></li><li><p>將新目錄命名為 <code>nativeInterop/cinterop</code>。</p><p>這是 <code>.def</code> 檔案位置的預設慣例，但如果您使用不同的位置，可以在 <code>build.gradle.kts</code> 檔案中覆寫它。</p></li><li><p>選取新的子資料夾，並透過 <strong>檔案 | 新增 | 檔案</strong> 建立一個 <code>png.def</code> 檔案。</p></li><li><p>新增必要的屬性：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>headers = png.h</span></span>
<span class="line"><span>headerFilter = png.h</span></span>
<span class="line"><span>package = png</span></span>
<span class="line"><span></span></span>
<span class="line"><span>compilerOpts.linux = -I/usr/include -I/usr/include/x86_64-linux-gnu</span></span>
<span class="line"><span>linkerOpts.osx = -L/opt/local/lib -L/usr/local/opt/png/lib -lpng</span></span>
<span class="line"><span>linkerOpts.linux = -L/usr/lib/x86_64-linux-gnu -lpng</span></span></code></pre></div><ul><li><p><code>headers</code> 是用於產生 Kotlin 存根 (stub) 的標頭檔列表。您可以將多個檔案新增到此條目，每個檔案之間用空格分隔。在此情況下，僅為 <code>png.h</code>。引用的檔案需要位於指定的路徑上 (在此情況下，為 <code>/usr/include/png</code>)。</p></li><li><p><code>headerFilter</code> 顯示了確切包含的內容。在 C 語言中，當一個檔案透過 <code>#include</code> 指令引用另一個檔案時，所有標頭都會被包含。有時這並非必要，您可以新增此參數 <a href="https://en.wikipedia.org/wiki/Glob_(programming)" target="_blank" rel="noreferrer">使用 glob 模式</a> 進行調整。</p><p>如果您不希望將外部依賴項 (例如系統的 <code>stdint.h</code> 標頭檔) 引入互通函式庫，則可以使用 <code>headerFilter</code>。此外，它對於函式庫大小最佳化以及修復系統與所提供的 Kotlin/Native 編譯環境之間潛在的衝突可能很有用。</p></li><li><p>如果需要修改特定平台的行為，您可以使用類似 <code>compilerOpts.osx</code> 或 <code>compilerOpts.linux</code> 的格式，為選項提供平台特定的值。在此情況下，它們是 macOS (即 <code>.osx</code> 後綴) 和 Linux (即 <code>.linux</code> 後綴)。不帶後綴的參數也是可行的 (例如 <code>linkerOpts=</code>)，並會應用於所有平台。</p></li></ul></li><li><p>若要產生綁定，請在通知中點擊 <strong>立即同步</strong> (Sync Now) 來同步 Gradle 檔案。</p><p><img src="`+a+`" alt="Synchronize the Gradle files"></p></li></ol><p>綁定產生後，IDE 可以將其作為原生函式庫的代理視圖使用。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>您也可以透過在命令列中使用 <a href="#generate-bindings-using-command-line">cinterop 工具</a> 來配置綁定產生。</p></div><h2 id="屬性" tabindex="-1">屬性 <a class="header-anchor" href="#屬性" aria-label="Permalink to &quot;屬性&quot;">​</a></h2><p>以下是您可以在定義檔案中使用的完整屬性列表，用於調整所產生二進位檔的內容。 有關更多資訊，請參閱以下對應部分。</p><table tabindex="0"><thead><tr><th><strong>屬性</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><a href="#import-headers"><code>headers</code></a></td><td>函式庫中要包含在綁定中的標頭列表。</td></tr><tr><td><a href="#import-modules"><code>modules</code></a></td><td>要包含在綁定中的 Objective-C 函式庫的 Clang 模組列表。</td></tr><tr><td><code>language</code></td><td>指定語言。預設使用 C；必要時變更為 <code>Objective-C</code>。</td></tr><tr><td><a href="#pass-compiler-and-linker-options"><code>compilerOpts</code></a></td><td>cinterop 工具傳遞給 C 編譯器的編譯器選項。</td></tr><tr><td><a href="#pass-compiler-and-linker-options"><code>linkerOpts</code></a></td><td>cinterop 工具傳遞給連結器的連結器選項。</td></tr><tr><td><a href="#ignore-specific-functions"><code>excludedFunctions</code></a></td><td>以空白分隔的函式名稱列表，應被忽略。</td></tr><tr><td><a href="#include-a-static-library"><code>staticLibraries</code></a></td><td><a href="/zh-Hant/kotlin/components-stability#stability-levels-explained">實驗性</a>。將靜態函式庫包含到 <code>.klib</code> 中。</td></tr><tr><td><a href="#include-a-static-library"><code>libraryPaths</code></a></td><td><a href="/zh-Hant/kotlin/components-stability#stability-levels-explained">實驗性</a>。以空白分隔的目錄列表，cinterop 工具在這些目錄中搜尋要包含在 <code>.klib</code> 中的函式庫。</td></tr><tr><td><code>packageName</code></td><td>產生之 Kotlin API 的套件前綴。</td></tr><tr><td><a href="#filter-headers-by-globs"><code>headerFilter</code></a></td><td>透過 glob 模式篩選標頭，僅在匯入函式庫時包含這些標頭。</td></tr><tr><td><a href="#exclude-headers"><code>excludeFilter</code></a></td><td>在匯入函式庫時排除特定的標頭，並優先於 <code>headerFilter</code>。</td></tr><tr><td><a href="#configure-enums-generation"><code>strictEnums</code></a></td><td>以空白分隔的列舉列表，應產生為 <a href="/zh-Hant/kotlin/enum-classes">Kotlin 列舉</a>。</td></tr><tr><td><a href="#configure-enums-generation"><code>nonStrictEnums</code></a></td><td>以空白分隔的列舉列表，應產生為整數值。</td></tr><tr><td><a href="#set-up-string-conversion"><code>noStringConversion</code></a></td><td>以空白分隔的函式列表，其 <code>const char*</code> 參數不應自動轉換為 Kotlin <code>String</code>。</td></tr><tr><td><code>allowedOverloadsForCFunctions</code></td><td>預設情況下，C 函式被認為具有唯一名稱。如果多個函式具有相同名稱，則只會選取其中一個。但是，您可以透過在 <code>allowedOverloadsForCFunctions</code> 中指定這些函式來更改此行為。</td></tr><tr><td><a href="#allow-calling-a-non-designated-initializer"><code>disableDesignatedInitializerChecks</code></a></td><td>停用不允許將非指定 Objective-C 初始化器作為 <code>super()</code> 建構子呼叫的編譯器檢查。</td></tr><tr><td><a href="#handle-objective-c-exceptions"><code>foreignExceptionMode</code></a></td><td>將 Objective-C 程式碼中的例外情況封裝為 <code>ForeignException</code> 類型的 Kotlin 例外情況。</td></tr><tr><td><a href="#help-resolve-linker-errors"><code>userSetupHint</code></a></td><td>新增自訂訊息，例如協助使用者解決連結器錯誤。</td></tr></tbody></table><p>除了屬性列表之外，您還可以在定義檔案中包含 <a href="#add-custom-declarations">自訂宣告</a>。</p><h3 id="匯入標頭" tabindex="-1">匯入標頭 <a class="header-anchor" href="#匯入標頭" aria-label="Permalink to &quot;匯入標頭&quot;">​</a></h3><p>如果一個 C 函式庫沒有 Clang 模組，而是由一組標頭組成，請使用 <code>headers</code> 屬性來指定應匯入的標頭：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>headers = curl/curl.h</span></span></code></pre></div><h4 id="依-glob-模式篩選標頭" tabindex="-1">依 glob 模式篩選標頭 <a class="header-anchor" href="#依-glob-模式篩選標頭" aria-label="Permalink to &quot;依 glob 模式篩選標頭&quot;">​</a></h4><p>您可以使用 <code>.def</code> 檔案中的篩選屬性，依 glob 模式篩選標頭。若要包含來自標頭的宣告， 請使用 <code>headerFilter</code> 屬性。如果標頭符合任何 glob 模式，其宣告將包含在綁定中。</p><p>Glob 模式會應用於相對於適當包含路徑元素的標頭路徑， 例如 <code>time.h</code> 或 <code>curl/curl.h</code>。因此，如果函式庫通常是透過 <code>#include &lt;SomeLibrary/Header.h&gt;</code> 包含的， 您可以使用以下篩選器來篩選標頭：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>headerFilter = SomeLibrary/**</span></span></code></pre></div><p>如果未提供 <code>headerFilter</code>，則所有標頭都將被包含。然而，我們鼓勵您使用 <code>headerFilter</code> 並盡可能精確地指定 glob 模式。在此情況下，產生的函式庫將僅包含必要的宣告。 這有助於避免在升級 Kotlin 或開發環境中的工具時出現的各種問題。</p><h4 id="排除標頭" tabindex="-1">排除標頭 <a class="header-anchor" href="#排除標頭" aria-label="Permalink to &quot;排除標頭&quot;">​</a></h4><p>若要排除特定標頭，請使用 <code>excludeFilter</code> 屬性。這有助於移除冗餘或有問題的標頭並最佳化編譯，因為來自指定標頭的宣告不會包含在綁定中：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>excludeFilter = SomeLibrary/time.h</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>如果同一個標頭既透過 <code>headerFilter</code> 包含，又透過 <code>excludeFilter</code> 排除，則該標頭將不會包含在綁定中。</p></div><h3 id="匯入模組" tabindex="-1">匯入模組 <a class="header-anchor" href="#匯入模組" aria-label="Permalink to &quot;匯入模組&quot;">​</a></h3><p>如果 Objective-C 函式庫具有 Clang 模組，請使用 <code>modules</code> 屬性來指定要匯入的模組：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>modules = UIKit</span></span></code></pre></div><h3 id="傳遞編譯器與連結器選項" tabindex="-1">傳遞編譯器與連結器選項 <a class="header-anchor" href="#傳遞編譯器與連結器選項" aria-label="Permalink to &quot;傳遞編譯器與連結器選項&quot;">​</a></h3><p>使用 <code>compilerOpts</code> 屬性將選項傳遞給 C 編譯器，C 編譯器在底層用於分析標頭。 若要將選項傳遞給連結最終可執行檔的連結器，請使用 <code>linkerOpts</code>。例如：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>compilerOpts = -DFOO=bar</span></span>
<span class="line"><span>linkerOpts = -lpng</span></span></code></pre></div><p>您也可以指定僅適用於特定目標的目標特定選項：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>compilerOpts = -DBAR=bar</span></span>
<span class="line"><span>compilerOpts.linux_x64 = -DFOO=foo1</span></span>
<span class="line"><span>compilerOpts.macos_x64 = -DFOO=foo2</span></span></code></pre></div><p>透過此配置，標頭在 Linux 上使用 <code>-DBAR=bar -DFOO=foo1</code> 進行分析，在 macOS 上使用 <code>-DBAR=bar -DFOO=foo2</code> 進行分析。 請注意，任何定義檔案選項都可以包含通用和平台特定兩部分。</p><h3 id="忽略特定函式" tabindex="-1">忽略特定函式 <a class="header-anchor" href="#忽略特定函式" aria-label="Permalink to &quot;忽略特定函式&quot;">​</a></h3><p>使用 <code>excludedFunctions</code> 屬性指定應忽略的函式名稱列表。 如果標頭中宣告的函式不保證可呼叫，並且難以或不可能自動判斷，這會很有用。 您還可以使用此屬性來解決互通本身的一個錯誤。</p><h3 id="包含靜態函式庫" tabindex="-1">包含靜態函式庫 <a class="header-anchor" href="#包含靜態函式庫" aria-label="Permalink to &quot;包含靜態函式庫&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>此功能為<a href="/zh-Hant/kotlin/components-stability#stability-levels-explained">實驗性</a>。它可能隨時被刪除或更改。 僅用於評估目的。</p></div><p>有時候，將靜態函式庫與您的產品一同發布會更方便，而不是假設它在使用者環境中可用。 若要將靜態函式庫包含到 <code>.klib</code> 中，請使用 <code>staticLibraries</code> 和 <code>libraryPaths</code> 屬性：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>headers = foo.h</span></span>
<span class="line"><span>staticLibraries = libfoo.a</span></span>
<span class="line"><span>libraryPaths = /opt/local/lib /usr/local/opt/curl/lib</span></span></code></pre></div><p>當提供上述程式碼片段時，cinterop 工具會在 <code>/opt/local/lib</code> 和 <code>/usr/local/opt/curl/lib</code> 中搜尋 <code>libfoo.a</code>， 如果找到，則會將函式庫二進位檔包含在 <code>klib</code> 中。</p><p>當在您的程式中使用這樣的 <code>klib</code> 時，函式庫會自動連結。</p><h3 id="配置列舉產生" tabindex="-1">配置列舉產生 <a class="header-anchor" href="#配置列舉產生" aria-label="Permalink to &quot;配置列舉產生&quot;">​</a></h3><p>使用 <code>strictEnums</code> 屬性將列舉產生為 Kotlin 列舉，或使用 <code>nonStrictEnums</code> 將其產生為整數值。 如果列舉不包含在這兩個列表中的任何一個，它將根據啟發式方法產生。</p><h3 id="設定字串轉換" tabindex="-1">設定字串轉換 <a class="header-anchor" href="#設定字串轉換" aria-label="Permalink to &quot;設定字串轉換&quot;">​</a></h3><p>使用 <code>noStringConversion</code> 屬性來停用 <code>const char*</code> 函式參數自動轉換為 Kotlin <code>String</code> 的功能。</p><h3 id="允許呼叫非指定初始化器" tabindex="-1">允許呼叫非指定初始化器 <a class="header-anchor" href="#允許呼叫非指定初始化器" aria-label="Permalink to &quot;允許呼叫非指定初始化器&quot;">​</a></h3><p>預設情況下，Kotlin/Native 編譯器不允許將非指定的 Objective-C 初始化器作為 <code>super()</code> 建構子呼叫。 如果函式庫中沒有正確標記指定的 Objective-C 初始化器，此行為可能會帶來不便。 若要停用這些編譯器檢查，請使用 <code>disableDesignatedInitializerChecks</code> 屬性。</p><h3 id="處理-objective-c-例外" tabindex="-1">處理 Objective-C 例外 <a class="header-anchor" href="#處理-objective-c-例外" aria-label="Permalink to &quot;處理 Objective-C 例外&quot;">​</a></h3><p>預設情況下，如果 Objective-C 例外達到 Objective-C 到 Kotlin 的互通邊界並進入 Kotlin 程式碼，程式將會崩潰。</p><p>若要將 Objective-C 例外傳播到 Kotlin，請透過 <code>foreignExceptionMode = objc-wrap</code> 屬性啟用封裝。 在此情況下，Objective-C 例外會被轉換為類型為 <code>ForeignException</code> 的 Kotlin 例外。</p><h3 id="協助解決連結器錯誤" tabindex="-1">協助解決連結器錯誤 <a class="header-anchor" href="#協助解決連結器錯誤" aria-label="Permalink to &quot;協助解決連結器錯誤&quot;">​</a></h3><p>當 Kotlin 函式庫依賴於 C 或 Objective-C 函式庫時，可能會發生連結器錯誤，例如使用 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-cocoapods-overview.html" target="_blank" rel="noreferrer">CocoaPods 整合</a>。如果依賴的函式庫未在機器上本地安裝或未在專案建置腳本中明確配置，則會出現「找不到框架 (Framework not found)」錯誤。</p><p>如果您是函式庫作者，可以透過自訂訊息協助使用者解決連結器錯誤。 為此，請將 <code>userSetupHint=message</code> 屬性新增到您的 <code>.def</code> 檔案中，或將 <code>-Xuser-setup-hint</code> 編譯器選項傳遞給 <code>cinterop</code>。</p><h3 id="新增自訂宣告" tabindex="-1">新增自訂宣告 <a class="header-anchor" href="#新增自訂宣告" aria-label="Permalink to &quot;新增自訂宣告&quot;">​</a></h3><p>有時需要先向函式庫新增自訂 C 宣告，然後再產生綁定 (例如，針對 <a href="/zh-Hant/kotlin/native-c-interop#macros">巨集</a>)。 您可以不建立包含這些宣告的額外標頭檔，而是直接將它們包含到 <code>.def</code> 檔案的末尾，在一個僅包含分隔符序列 <code>---</code> 的分隔線之後：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>headers = errno.h</span></span>
<span class="line"><span>---</span></span>
<span class="line"><span></span></span>
<span class="line"><span>static inline int getErrno() {</span></span>
<span class="line"><span>    return errno;</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>請注意，<code>.def</code> 檔案的此部分被視為標頭檔的一部分，因此帶有函式主體的函式應宣告為 <code>static</code>。 宣告會在包含 <code>headers</code> 列表中的檔案後被解析。</p><h2 id="使用命令列產生綁定" tabindex="-1">使用命令列產生綁定 <a class="header-anchor" href="#使用命令列產生綁定" aria-label="Permalink to &quot;使用命令列產生綁定&quot;">​</a></h2><p>除了定義檔案之外，您還可以透過在 <code>cinterop</code> 呼叫中將對應屬性作為選項傳遞，來指定綁定中要包含的內容。</p><p>以下是產生 <code>png.klib</code> 編譯後函式庫的指令範例：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cinterop</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -def</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> png.def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -compiler-option</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -I/usr/local/include</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> png</span></span></code></pre></div><p>請注意，產生的綁定通常是平台特定的，因此如果您正在為多個目標開發，則需要重新產生綁定。</p><ul><li>對於未包含在 sysroot 搜尋路徑中的主機函式庫，可能需要標頭。</li><li>對於帶有配置腳本的典型 UNIX 函式庫，<code>compilerOpts</code> 可能會包含帶有 <code>--cflags</code> 選項 (可能沒有確切路徑) 的配置腳本輸出。</li><li>帶有 <code>--libs</code> 的配置腳本輸出可以傳遞給 <code>linkerOpts</code> 屬性。</li></ul><h2 id="下一步" tabindex="-1">下一步 <a class="header-anchor" href="#下一步" aria-label="Permalink to &quot;下一步&quot;">​</a></h2><ul><li><a href="/zh-Hant/kotlin/native-c-interop#bindings">C 互通性綁定</a></li><li><a href="/zh-Hant/kotlin/native-objc-interop">與 Swift/Objective-C 的互通性</a></li></ul>`,67)]))}const k=t(s,[["render",d]]);export{g as __pageData,k as default};
