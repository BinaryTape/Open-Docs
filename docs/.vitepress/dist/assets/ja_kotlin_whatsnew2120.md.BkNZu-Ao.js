import{_ as n,a as e}from"./chunks/wasm-custom-formatters-firefox.C2LVO8ja.js";import{_ as l,C as p,c as h,o,ag as i,G as t}from"./chunks/framework.Bksy39di.js";const F=JSON.parse('{"title":"Kotlin 2.1.20の新機能","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/whatsnew2120.md","filePath":"ja/kotlin/whatsnew2120.md","lastUpdated":1754307826000}'),k={name:"ja/kotlin/whatsnew2120.md"};function r(d,s,c,E,g,u){const a=p("TopicTitle");return o(),h("div",null,[s[0]||(s[0]=i('<h1 id="kotlin-2-1-20の新機能" tabindex="-1">Kotlin 2.1.20の新機能 <a class="header-anchor" href="#kotlin-2-1-20の新機能" aria-label="Permalink to &quot;Kotlin 2.1.20の新機能&quot;">​</a></h1><p><em><a href="/ja/kotlin/releases#release-details">リリース日: 2025年3月20日</a></em></p><p>Kotlin 2.1.20がリリースされました！主なハイライトは以下の通りです。</p><ul><li><strong>K2コンパイラの更新</strong>: <a href="#kotlin-k2-compiler">新しいkaptおよびLombokプラグインへの更新</a></li><li><strong>Kotlin Multiplatform</strong>: <a href="#kotlin-multiplatform-new-dsl-to-replace-gradle-s-application-plugin">GradleのApplicationプラグインを置き換える新しいDSL</a></li><li><strong>Kotlin/Native</strong>: <a href="#kotlin-native">Xcode 16.3のサポートと新しいインライン化最適化</a></li><li><strong>Kotlin/Wasm</strong>: <a href="#kotlin-wasm">デフォルトのカスタムフォーマッタ、DWARFのサポート、Provider APIへの移行</a></li><li><strong>Gradleサポート</strong>: <a href="#gradle">GradleのIsolated Projectsとの互換性、カスタムパブリケーションバリアント</a></li><li><strong>標準ライブラリ</strong>: <a href="#standard-library">共通のアトミック型、UUIDサポートの改善、新しい時間追跡機能</a></li><li><strong>Composeコンパイラ</strong>: <a href="#compose-compiler"><code>@Composable</code>関数の制限緩和とその他の更新</a></li><li><strong>ドキュメント</strong>: <a href="#documentation-updates">Kotlinドキュメントの注目すべき改善</a>。</li></ul><h2 id="ideサポート" tabindex="-1">IDEサポート <a class="header-anchor" href="#ideサポート" aria-label="Permalink to &quot;IDEサポート&quot;">​</a></h2><p>2.1.20をサポートするKotlinプラグインは、最新のIntelliJ IDEAおよびAndroid Studioにバンドルされています。 IDEでKotlinプラグインを更新する必要はありません。 ビルドスクリプトでKotlinのバージョンを2.1.20に変更するだけです。</p><p>詳細については、<a href="/ja/kotlin/releases#update-to-a-new-kotlin-version">新しいリリースへの更新</a>を参照してください。</p><h3 id="osgiサポートを使用するプロジェクトにおけるkotlinアーティファクトのソースのダウンロード" tabindex="-1">OSGiサポートを使用するプロジェクトにおけるKotlinアーティファクトのソースのダウンロード <a class="header-anchor" href="#osgiサポートを使用するプロジェクトにおけるkotlinアーティファクトのソースのダウンロード" aria-label="Permalink to &quot;OSGiサポートを使用するプロジェクトにおけるKotlinアーティファクトのソースのダウンロード&quot;">​</a></h3><p><code>kotlin-osgi-bundle</code>ライブラリのすべての依存関係のソースが、そのディストリビューションに含まれるようになりました。これにより、 IntelliJ IDEAはこれらのソースをダウンロードして、Kotlinシンボルのドキュメントを提供し、デバッグエクスペリエンスを向上させることができます。</p><h2 id="kotlin-k2コンパイラ" tabindex="-1">Kotlin K2コンパイラ <a class="header-anchor" href="#kotlin-k2コンパイラ" aria-label="Permalink to &quot;Kotlin K2コンパイラ&quot;">​</a></h2><p>新しいKotlin K2コンパイラに対するプラグインのサポートを改善し続けています。このリリースでは、新しいkaptおよびLombokプラグインの更新が含まれています。</p>',11)),t(a,{id:"新しいデフォルトのkaptプラグイン",level:"3",title:"新しいデフォルトのkaptプラグイン",labelRef:"beta"}),s[1]||(s[1]=i('<p>Kotlin 2.1.20より、kaptコンパイラプラグインのK2実装がすべてのプロジェクトでデフォルトで有効になります。</p><p>JetBrainsチームは、Kotlin 1.9.20でK2コンパイラとともにkaptプラグインの新しい実装をリリースしました。 それ以来、私たちはK2 kaptの内部実装をさらに開発し、その動作をK1バージョンと同様にしつつ、 パフォーマンスも大幅に改善しました。</p><p>K2コンパイラでkaptを使用中に問題が発生した場合は、 一時的に以前のプラグイン実装に戻すことができます。</p><p>そのためには、プロジェクトの<code>gradle.properties</code>ファイルに以下のオプションを追加してください。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kapt.use.k2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span></code></pre></div><p>問題がありましたら、<a href="https://youtrack.jetbrains.com/issue/KT-71439/K2-kapt-feedback" target="_blank" rel="noreferrer">イシュートラッカー</a>にご報告ください。</p>',6)),t(a,{id:"lombokコンパイラプラグイン-superbuilder-のサポートと-builder-の更新",level:"3",title:"Lombokコンパイラプラグイン: `@SuperBuilder`のサポートと`@Builder`の更新",labelRef:"experimental-general"}),s[2]||(s[2]=i('<p><a href="/ja/kotlin/lombok">Kotlin Lombokコンパイラプラグイン</a>が<code>@SuperBuilder</code>アノテーションをサポートし、クラス階層用のビルダーをより簡単に作成できるようになりました。以前は、KotlinでLombokを使用する開発者は、継承を扱う際にビルダーを手動で定義する必要がありました。<code>@SuperBuilder</code>を使用すると、ビルダーが自動的にスーパークラスのフィールドを継承し、オブジェクト構築時にそれらを初期化できるようになります。</p><p>さらに、この更新にはいくつかの改善とバグ修正が含まれています。</p><ul><li><code>@Builder</code>アノテーションがコンストラクタで動作するようになり、より柔軟なオブジェクト作成が可能になりました。詳細については、関連する<a href="https://youtrack.jetbrains.com/issue/KT-71547" target="_blank" rel="noreferrer">YouTrackイシュー</a>を参照してください。</li><li>KotlinにおけるLombokのコード生成に関連するいくつかの問題が解決され、全体的な互換性が向上しました。詳細については、<a href="https://github.com/JetBrains/kotlin/releases/tag/v2.1.20" target="_blank" rel="noreferrer">GitHub changelog</a>を参照してください。</li></ul><p><code>@SuperBuilder</code>アノテーションの詳細については、公式の<a href="https://projectlombok.org/features/experimental/SuperBuilder" target="_blank" rel="noreferrer">Lombokドキュメント</a>を参照してください。</p>',4)),t(a,{id:"kotlin-multiplatform-gradleのapplicationプラグインを置き換える新しいdsl",level:"2",title:"Kotlin Multiplatform: GradleのApplicationプラグインを置き換える新しいDSL",labelRef:"experimental-opt-in"}),s[3]||(s[3]=i(`<p>Gradle 8.7以降、<a href="https://docs.gradle.org/current/userguide/application_plugin.html" target="_blank" rel="noreferrer">Application</a>プラグインは Kotlin Multiplatform Gradleプラグインと互換性がなくなりました。Kotlin 2.1.20では、同様の機能を実現するためのExperimentalな DSLが導入されました。新しい<code>executable {}</code>ブロックは、JVMターゲットの実行タスクとGradleの<a href="https://docs.gradle.org/current/userguide/distribution_plugin.html#distribution_plugin" target="_blank" rel="noreferrer">ディストリビューション</a>を設定します。</p><p>ビルドスクリプトの<code>executable {}</code>ブロックの前に、以下の<code>@OptIn</code>アノテーションを追加してください。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalKotlinGradlePluginApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>例:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        @OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalKotlinGradlePluginApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        binaries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // Configures a JavaExec task named &quot;runJvm&quot; and a Gradle distribution for the &quot;main&quot; compilation in this target</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                mainClass.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;foo.MainKt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // Configures a JavaExec task named &quot;runJvmAnother&quot; and a Gradle distribution for the &quot;main&quot; compilation</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(KotlinCompilation.MAIN_COMPILATION_NAME, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;another&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // Set a different class</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                mainClass.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;foo.MainAnotherKt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // Configures a JavaExec task named &quot;runJvmTest&quot; and a Gradle distribution for the &quot;test&quot; compilation</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(KotlinCompilation.TEST_COMPILATION_NAME) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                mainClass.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;foo.MainTestKt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // Configures a JavaExec task named &quot;runJvmTestAnother&quot; and a Gradle distribution for the &quot;test&quot; compilation</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(KotlinCompilation.TEST_COMPILATION_NAME, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;another&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                mainClass.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;foo.MainAnotherTestKt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>この例では、Gradleの<a href="https://docs.gradle.org/current/userguide/distribution_plugin.html#distribution_plugin" target="_blank" rel="noreferrer">Distribution</a>プラグインが、最初の<code>executable {}</code>ブロックに適用されています。</p><p>問題が発生した場合は、<a href="https://kotl.in/issue" target="_blank" rel="noreferrer">イシュートラッカー</a>にご報告いただくか、<a href="https://kotlinlang.slack.com/archives/C19FD9681" target="_blank" rel="noreferrer">公開Slackチャンネル</a>でお知らせください。</p><h2 id="kotlin-native" tabindex="-1">Kotlin/Native <a class="header-anchor" href="#kotlin-native" aria-label="Permalink to &quot;Kotlin/Native&quot;">​</a></h2><h3 id="xcode-16-3のサポート" tabindex="-1">Xcode 16.3のサポート <a class="header-anchor" href="#xcode-16-3のサポート" aria-label="Permalink to &quot;Xcode 16.3のサポート&quot;">​</a></h3><p>Kotlin <strong>2.1.21</strong>以降、Kotlin/NativeコンパイラはXcodeの最新安定バージョンであるXcode 16.3をサポートします。 Xcodeを更新して、Appleオペレーティングシステム向けのKotlinプロジェクトの作業を続けることができます。</p><p>2.1.21リリースでは、Kotlin Multiplatformプロジェクトでコンパイルエラーを引き起こしていた関連する<a href="https://youtrack.jetbrains.com/issue/KT-75781/" target="_blank" rel="noreferrer">cinteropのイシュー</a>も修正されています。</p>`,11)),t(a,{id:"新しいインライン化最適化",level:"3",title:"新しいインライン化最適化",labelRef:"experimental-opt-in"}),s[4]||(s[4]=i('<p>Kotlin 2.1.20では、実際のコード生成フェーズの前に実行される新しいインライン化最適化パスが導入されました。</p><p>Kotlin/Nativeコンパイラにおける新しいインライン化パスは、標準のLLVMインライナーよりも優れたパフォーマンスを発揮し、生成されたコードのランタイムパフォーマンスを向上させるはずです。</p><p>新しいインライン化パスは現在<a href="/ja/kotlin/components-stability#stability-levels-explained">Experimental</a>です。試すには、 以下のコンパイラオプションを使用してください。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>-Xbinary=preCodegenInlineThreshold=40</span></span></code></pre></div><p>私たちの実験では、閾値を40トークン（コンパイラによって解析されるコード単位）に設定すると、コンパイル最適化にとって妥当な妥協点となることが示されています。私たちのベンチマークによると、これにより全体的なパフォーマンスが9.5%向上します。もちろん、他の値を試すこともできます。</p><p>バイナリサイズやコンパイル時間の増加を経験した場合は、<a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a>経由で問題を報告してください。</p><h2 id="kotlin-wasm" tabindex="-1">Kotlin/Wasm <a class="header-anchor" href="#kotlin-wasm" aria-label="Permalink to &quot;Kotlin/Wasm&quot;">​</a></h2><p>このリリースでは、Kotlin/Wasmのデバッグとプロパティの使用が改善されています。カスタムフォーマッタが開発 ビルドでそのまま動作するようになり、DWARFデバッグはコードの検査を容易にします。さらに、Provider APIは Kotlin/WasmおよびKotlin/JSにおけるプロパティの使用を簡素化します。</p><h3 id="カスタムフォーマッタがデフォルトで有効に" tabindex="-1">カスタムフォーマッタがデフォルトで有効に <a class="header-anchor" href="#カスタムフォーマッタがデフォルトで有効に" aria-label="Permalink to &quot;カスタムフォーマッタがデフォルトで有効に&quot;">​</a></h3><p>以前は、Kotlin/Wasmコードを扱う際にWebブラウザでのデバッグを改善するために、カスタムフォーマッタを<a href="/ja/kotlin/whatsnew21#improved-debugging-experience-for-kotlin-wasm">手動で設定</a>する必要がありました。</p><p>このリリースでは、開発ビルドでカスタムフォーマッタがデフォルトで有効になるため、追加のGradle設定は不要です。</p><p>この機能を使用するには、ブラウザの開発者ツールでカスタムフォーマッタが有効になっていることを確認するだけです。</p><ul><li><p>Chrome DevToolsでは、<strong>Settings | Preferences | Console</strong>でカスタムフォーマッタのチェックボックスを見つけます。</p><p><img src="'+n+'" alt="Enable custom formatters in Chrome" width="400"></p></li><li><p>Firefox DevToolsでは、<strong>Settings | Advanced settings</strong>でカスタムフォーマッタのチェックボックスを見つけます。</p><p><img src="'+e+`" alt="Enable custom formatters in Firefox" width="400"></p></li></ul><p>この変更は主にKotlin/Wasmの開発ビルドに影響します。プロダクションビルドに特定の要件がある場合は、 それに応じてGradle設定を調整する必要があります。そのためには、<code>wasmJs {}</code>ブロックに以下のコンパイラオプションを追加します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    wasmJs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            freeCompilerArgs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xwasm-debugger-custom-formatters&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="kotlin-wasmコードをデバッグするためのdwarfのサポート" tabindex="-1">Kotlin/WasmコードをデバッグするためのDWARFのサポート <a class="header-anchor" href="#kotlin-wasmコードをデバッグするためのdwarfのサポート" aria-label="Permalink to &quot;Kotlin/WasmコードをデバッグするためのDWARFのサポート&quot;">​</a></h3><p>Kotlin 2.1.20では、Kotlin/WasmでDWARF（debugging with arbitrary record format）のサポートが導入されました。</p><p>この変更により、Kotlin/Wasmコンパイラは生成されたWebAssembly (Wasm) バイナリにDWARFデータを埋め込むことができるようになります。 多くのデバッガや仮想マシンは、このデータを読み取ってコンパイルされたコードに関する洞察を提供できます。</p><p>DWARFは、主にスタンドアロンのWasm仮想マシン（VM）内でKotlin/Wasmアプリケーションをデバッグするのに役立ちます。この機能を 使用するには、Wasm VMとデバッガがDWARFをサポートしている必要があります。</p><p>DWARFのサポートにより、Kotlin/Wasmアプリケーションをステップ実行したり、変数を検査したり、コードの洞察を得ることができます。この機能を有効にするには、 以下のコンパイラオプションを使用してください。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-Xwasm-generate-dwarf</span></span></code></pre></div><h3 id="kotlin-wasmおよびkotlin-jsプロパティのprovider-apiへの移行" tabindex="-1">Kotlin/WasmおよびKotlin/JSプロパティのProvider APIへの移行 <a class="header-anchor" href="#kotlin-wasmおよびkotlin-jsプロパティのprovider-apiへの移行" aria-label="Permalink to &quot;Kotlin/WasmおよびKotlin/JSプロパティのProvider APIへの移行&quot;">​</a></h3><p>以前、Kotlin/WasmおよびKotlin/JS拡張機能のプロパティはミュータブル（<code>var</code>）であり、ビルドスクリプトで直接代入されていました。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">the</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NodeJsExtension</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;().version </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;2.0.0&quot;</span></span></code></pre></div><p>現在、プロパティは<a href="https://docs.gradle.org/current/userguide/properties_providers.html" target="_blank" rel="noreferrer">Provider API</a>を介して公開されており、 値を代入するには<code>.set()</code>関数を使用する必要があります。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">the</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NodeJsEnvSpec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;().version.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2.0.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Provider APIは、値が遅延計算され、タスクの依存関係と適切に統合されることを保証し、ビルドパフォーマンスを向上させます。</p><p>この変更により、<code>NodeJsEnvSpec</code>や<code>YarnRootEnvSpec</code>などの<code>*EnvSpec</code>クラスに有利な直接のプロパティ代入は非推奨になりました。</p><p>さらに、混乱を避けるためにいくつかのエイリアスタスクが削除されました。</p><table tabindex="0"><thead><tr><th style="text-align:left;">Deprecated task</th><th style="text-align:left;">Replacement</th></tr></thead><tbody><tr><td style="text-align:left;"><code>wasmJsRun</code></td><td style="text-align:left;"><code>wasmJsBrowserDevelopmentRun</code></td></tr><tr><td style="text-align:left;"><code>wasmJsBrowserRun</code></td><td style="text-align:left;"><code>wasmJsBrowserDevelopmentRun</code></td></tr><tr><td style="text-align:left;"><code>wasmJsNodeRun</code></td><td style="text-align:left;"><code>wasmJsNodeDevelopmentRun</code></td></tr><tr><td style="text-align:left;"><code>wasmJsBrowserWebpack</code></td><td style="text-align:left;"><code>wasmJsBrowserProductionWebpack</code> or <code>wasmJsBrowserDistribution</code></td></tr><tr><td style="text-align:left;"><code>jsRun</code></td><td style="text-align:left;"><code>jsBrowserDevelopmentRun</code></td></tr><tr><td style="text-align:left;"><code>jsBrowserRun</code></td><td style="text-align:left;"><code>jsBrowserDevelopmentRun</code></td></tr><tr><td style="text-align:left;"><code>jsNodeRun</code></td><td style="text-align:left;"><code>jsNodeDevelopmentRun</code></td></tr><tr><td style="text-align:left;"><code>jsBrowserWebpack</code></td><td style="text-align:left;"><code>jsBrowserProductionWebpack</code> or <code>jsBrowserDistribution</code></td></tr></tbody></table><p>ビルドスクリプトでKotlin/JSまたはKotlin/Wasmのみを使用している場合、Gradleが自動的に代入を処理するため、何もアクションは必要ありません。</p><p>ただし、Kotlin Gradle Pluginをベースとしたプラグインをメンテナンスしており、そのプラグインが<code>kotlin-dsl</code>を適用していない場合は、 プロパティの代入を<code>.set()</code>関数を使用するように更新する必要があります。</p><h2 id="gradle" tabindex="-1">Gradle <a class="header-anchor" href="#gradle" aria-label="Permalink to &quot;Gradle&quot;">​</a></h2><p>Kotlin 2.1.20はGradle 7.6.3から8.11までと完全に互換性があります。最新のGradle リリースまでのGradleバージョンも使用できます。ただし、そうすると非推奨の警告が表示されたり、新しいGradle機能の一部が動作しない可能性があることに注意してください。</p><p>このバージョンのKotlinには、Kotlin GradleプラグインのGradleのIsolated Projectsとの互換性、およびカスタムGradleパブリケーションバリアントのサポートが含まれています。</p>`,35)),t(a,{id:"gradleのisolated-projectsと互換性のあるkotlin-gradleプラグイン",level:"3",title:"GradleのIsolated Projectsと互換性のあるKotlin Gradleプラグイン",labelRef:"experimental-opt-in"}),s[5]||(s[5]=i('<div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>この機能は現在、Gradleでプレアルファ（pre-Alpha）状態です。JSおよびWasmターゲットは現在サポートされていません。 Gradleバージョン8.10以降でのみ、評価目的でご利用ください。</p></div><p>Kotlin 2.1.0以降、プロジェクトで<a href="/ja/kotlin/whatsnew21#preview-gradle-s-isolated-projects-in-kotlin-multiplatform">GradleのIsolated Projects機能をプレビュー</a>できるようになりました。</p><p>以前は、この機能を試す前に、Kotlin Gradleプラグインを設定してプロジェクトをIsolated Projects機能と互換性があるようにする必要がありました。Kotlin 2.1.20では、この追加の手順は不要になりました。</p><p>現在、Isolated Projects機能を有効にするには、<a href="https://docs.gradle.org/current/userguide/isolated_projects.html#how_do_i_use_it" target="_blank" rel="noreferrer">システムプロパティを設定</a>するだけで済みます。</p><p>GradleのIsolated Projects機能は、マルチプラットフォームプロジェクトと、JVMまたはAndroidターゲットのみを含むプロジェクトの両方で、Kotlin Gradleプラグインでサポートされています。</p><p>特にマルチプラットフォームプロジェクトの場合、アップグレード後にGradleビルドで問題が発生した場合は、 以下の行を追加することで新しいKotlin Gradleプラグインの動作をオプトアウトできます。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.kmp.isolated-projects.support=disable</span></span></code></pre></div><p>ただし、マルチプラットフォームプロジェクトでこのGradleプロパティを使用すると、Isolated Projects機能は使用できません。</p><p>この機能に関するご意見は、<a href="https://youtrack.jetbrains.com/issue/KT-57279/Support-Gradle-Project-Isolation-Feature-for-Kotlin-Multiplatform" target="_blank" rel="noreferrer">YouTrack</a>でお知らせください。</p>',9)),t(a,{id:"カスタムgradleパブリケーションバリアントの追加のサポート",level:"3",title:"カスタムGradleパブリケーションバリアントの追加のサポート",labelRef:"experimental-opt-in"}),s[6]||(s[6]=i(`<div class="note custom-block"><p class="custom-block-title">NOTE</p><p>この機能では、既存のGradleバリアントを変更することはできません。</p></div><p>この機能は<a href="/ja/kotlin/components-stability#stability-levels-explained">Experimental</a>です。 オプトインするには、<code>@OptIn(ExperimentalKotlinGradlePluginApi::class)</code>アノテーションを使用します。</p><p>カスタムGradleパブリケーションバリアントを追加するには、<code>adhocSoftwareComponent()</code>関数を呼び出します。この関数は、 Kotlin DSLで設定可能な<a href="https://docs.gradle.org/current/javadoc/org/gradle/api/component/AdhocComponentWithVariants.html" target="_blank" rel="noreferrer"><code>AdhocComponentWithVariants</code></a>のインスタンスを返します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Only JVM and Multiplatform are supported</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jvm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // or</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;multiplatform&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalKotlinGradlePluginApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    publishing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Returns an instance of AdhocSoftwareComponent</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        adhocSoftwareComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Alternatively, you can configure AdhocSoftwareComponent in the DSL block as follows</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        adhocSoftwareComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // Add your custom variants here using the AdhocSoftwareComponent API</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>バリアントの詳細については、Gradleの<a href="https://docs.gradle.org/current/userguide/publishing_customization.html" target="_blank" rel="noreferrer">カスタマイズパブリッシングガイド</a>を参照してください。</p></div><h2 id="標準ライブラリ" tabindex="-1">標準ライブラリ <a class="header-anchor" href="#標準ライブラリ" aria-label="Permalink to &quot;標準ライブラリ&quot;">​</a></h2><p>このリリースでは、共通のアトミック型、UUIDサポートの改善、新しい時間追跡機能といった、標準ライブラリの新しいExperimental機能が導入されています。</p>`,7)),t(a,{id:"共通のアトミック型",level:"3",title:"共通のアトミック型",labelRef:"experimental-opt-in"}),s[7]||(s[7]=i(`<p>Kotlin 2.1.20では、標準ライブラリの<code>kotlin.concurrent.atomics</code>パッケージに共通のアトミック型が導入され、 スレッドセーフな操作のための共有されたプラットフォーム非依存のコードが可能になります。これにより、 ソースセット間でアトミック依存ロジックを重複させる必要がなくなり、Kotlin Multiplatformプロジェクトの開発が簡素化されます。</p><p><code>kotlin.concurrent.atomics</code>パッケージとそのプロパティは<a href="/ja/kotlin/components-stability#stability-levels-explained">Experimental</a>です。 オプトインするには、<code>@OptIn(ExperimentalAtomicApi::class)</code>アノテーションまたはコンパイラオプション<code>-opt-in=kotlin.ExperimentalAtomicApi</code>を使用します。</p><p>以下は、<code>AtomicInt</code>を使用して複数のスレッド間で処理済みアイテムを安全にカウントする方法を示す例です。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Imports the necessary libraries</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.concurrent.atomics.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.coroutines.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalAtomicApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">suspend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Initializes the atomic counter for processed items</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> processedItems </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AtomicInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> totalItems </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> items </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(totalItems) { </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;item</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$it</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Splits the items into chunks for processing by multiple coroutines</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> chunkSize </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> itemChunks </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> items.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">chunked</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(chunkSize)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    coroutineScope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (chunk </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> itemChunks) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            launch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> chunk) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Processing </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$item</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> in thread \${Thread.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">currentThread</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">()}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    processedItems </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Increment counter atomically</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Prints the total number of processed items</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Total processed items: \${processedItems.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">load</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">()}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Kotlinのアトミック型とJavaの<a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/package-summary.html" target="_blank" rel="noreferrer"><code>java.util.concurrent.atomic</code></a>アトミック型とのシームレスな相互運用を可能にするために、APIは<code>.asJavaAtomic()</code>および<code>.asKotlinAtomic()</code>拡張関数を提供します。JVM上では、Kotlinのアトミック型とJavaのアトミック型はランタイムで同じ型であるため、オーバーヘッドなしでJavaのアトミック型をKotlinのアトミック型に、またはその逆に変換できます。</p><p>以下は、KotlinとJavaのアトミック型が連携して動作する方法を示す例です。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Imports the necessary libraries</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.concurrent.atomics.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> java.util.concurrent.atomic.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalAtomicApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Converts Kotlin AtomicInt to Java&#39;s AtomicInteger</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> kotlinAtomic </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AtomicInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> javaAtomic: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AtomicInteger</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> kotlinAtomic.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">asJavaAtomic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Java atomic value: \${javaAtomic.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">()}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Java atomic value: 42</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Converts Java&#39;s AtomicInteger back to Kotlin&#39;s AtomicInt</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> kotlinAgain: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AtomicInt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> javaAtomic.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">asKotlinAtomic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Kotlin atomic value: \${kotlinAgain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">load</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">()}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Kotlin atomic value: 42</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,7)),t(a,{id:"uuidのパース、フォーマット、比較可能性の変更",level:"3",title:"UUIDのパース、フォーマット、比較可能性の変更",labelRef:"experimental-opt-in"}),s[8]||(s[8]=i(`<p>JetBrainsチームは、<a href="/ja/kotlin/whatsnew2020#support-for-uuids-in-the-common-kotlin-standard-library">2.0.20で標準ライブラリに導入された</a>UUIDのサポートを改善し続けています。</p><p>以前は、<code>parse()</code>関数は16進数とダッシュ形式のUUIDのみを受け入れていました。Kotlin 2.1.20では、 16進数とダッシュ形式 <em>および</em> プレーンな16進数形式（ダッシュなし）の <em>両方</em> に<code>parse()</code>を使用できます。</p><p>このリリースでは、16進数とダッシュ形式での操作に特化した関数も導入されました。</p><ul><li><code>parseHexDash()</code>は、16進数とダッシュ形式からUUIDをパースします。</li><li><code>toHexDashString()</code>は、<code>Uuid</code>を16進数とダッシュ形式の<code>String</code>に変換します（<code>toString()</code>の機能をミラーリング）。</li></ul><p>これらの関数は、以前16進数形式のために導入された<a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin.uuid/-uuid/-companion/parse-hex.html" target="_blank" rel="noreferrer"><code>parseHex()</code></a>および<a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin.uuid/-uuid/to-hex-string.html" target="_blank" rel="noreferrer"><code>toHexString()</code></a>と同様に機能します。 パースおよびフォーマット機能の明示的な命名は、コードの明確性とUUIDの全体的なエクスペリエンスを向上させるはずです。</p><p>KotlinのUUIDは<code>Comparable</code>になりました。Kotlin 2.1.20以降、<code>Uuid</code>型の値を直接比較したりソートしたりできます。 これにより、<code>&lt;</code>および<code>&gt;</code>演算子、および<code>Comparable</code>型またはそのコレクション（<code>sorted()</code>など）専用に利用可能な標準ライブラリの拡張機能の使用が可能になり、 また、<code>Comparable</code>インターフェースを必要とするあらゆる関数やAPIにUUIDを渡すこともできます。</p><p>標準ライブラリにおけるUUIDのサポートはまだ<a href="/ja/kotlin/components-stability#stability-levels-explained">Experimental</a>であることに注意してください。 オプトインするには、<code>@OptIn(ExperimentalUuidApi::class)</code>アノテーションまたはコンパイラオプション<code>-opt-in=kotlin.uuid.ExperimentalUuidApi</code>を使用します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.uuid.ExperimentalUuidApi</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.uuid.Uuid</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalUuidApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // parse() accepts a UUID in a plain hexadecimal format</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uuid </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Uuid.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;550e8400e29b41d4a716446655440000&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Converts it to the hex-and-dash format</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hexDashFormat </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uuid.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toHexDashString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Outputs the UUID in the hex-and-dash format</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(hexDashFormat)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Outputs UUIDs in ascending order</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            uuid,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Uuid.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;780e8400e29b41d4a716446655440005&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Uuid.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;5ab88400e29b41d4a716446655440076&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sorted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span></code></pre></div>`,8)),t(a,{id:"新しい時間追跡機能",level:"3",title:"新しい時間追跡機能",labelRef:"experimental-opt-in"}),s[9]||(s[9]=i(`<p>Kotlin 2.1.20以降、標準ライブラリは時刻の瞬間を表す機能を提供します。この機能は 以前は公式Kotlinライブラリである<a href="https://kotlinlang.org/api/kotlinx-datetime/" target="_blank" rel="noreferrer"><code>kotlinx-datetime</code></a>でのみ利用可能でした。</p><p><a href="https://kotlinlang.org/api/kotlinx-datetime/kotlinx-datetime/kotlinx.datetime/-clock/" target="_blank" rel="noreferrer"><code>kotlinx.datetime.Clock</code></a>インターフェースは 標準ライブラリに<code>kotlin.time.Clock</code>として導入され、<a href="https://kotlinlang.org/api/kotlinx-datetime/kotlinx-datetime/kotlinx.datetime/-instant/" target="_blank" rel="noreferrer"><code>kotlinx.datetime.Instant</code></a>クラスは <code>kotlin.time.Instant</code>として導入されました。これらの概念は、より複雑なカレンダーやタイムゾーン機能が<code>kotlinx-datetime</code>に残るのに対し、 時刻の瞬間にのみ関心があるため、標準ライブラリの<code>time</code>パッケージと自然に整合します。</p><p><code>Instant</code>と<code>Clock</code>は、タイムゾーンや日付を考慮せずに正確な時間追跡が必要な場合に役立ちます。例えば、 タイムスタンプ付きでイベントを記録したり、2つの時点間の期間を測定したり、システムプロセス用の現在の 瞬間を取得したりするのに使用できます。</p><p>他の言語との相互運用性を提供するために、追加の変換関数が利用可能です。</p><ul><li><code>.toKotlinInstant()</code>は、時刻値を<code>kotlin.time.Instant</code>インスタンスに変換します。</li><li><code>.toJavaInstant()</code>は、<code>kotlin.time.Instant</code>値を<code>java.time.Instant</code>値に変換します。</li><li><code>Instant.toJSDate()</code>は、<code>kotlin.time.Instant</code>値をJS <code>Date</code>クラスのインスタンスに変換します。この変換は 正確ではありません。JSは日付を表すのにミリ秒精度を使用しますが、Kotlinはナノ秒解像度を許容します。</li></ul><p>標準ライブラリの新しい時間機能はまだ<a href="/ja/kotlin/components-stability#stability-levels-explained">Experimental</a>です。 オプトインするには、<code>@OptIn(ExperimentalTime::class)</code>アノテーションを使用します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.time.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalTime::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Get the current moment in time</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> currentInstant </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Clock.System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">now</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Current time: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$currentInstant</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Find the difference between two moments in time</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pastInstant </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Instant.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2023-01-01T00:00:00Z&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> duration </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> currentInstant </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pastInstant</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Time elapsed since 2023-01-01: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$duration</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>実装に関する詳細情報は、この<a href="https://github.com/Kotlin/KEEP/pull/387/files" target="_blank" rel="noreferrer">KEEP提案</a>を参照してください。</p><h2 id="composeコンパイラ" tabindex="-1">Composeコンパイラ <a class="header-anchor" href="#composeコンパイラ" aria-label="Permalink to &quot;Composeコンパイラ&quot;">​</a></h2><p>2.1.20では、Composeコンパイラは以前のリリースで導入された<code>@Composable</code>関数に対する一部の制限を緩和します。 さらに、ComposeコンパイラのGradleプラグインは、Androidとのすべてのプラットフォームでの動作を合わせるため、 ソース情報をデフォルトで含めるように設定されています。</p><h3 id="openな-composable関数におけるデフォルト値を持つパラメーターのサポート" tabindex="-1">openな<code>@Composable</code>関数におけるデフォルト値を持つパラメーターのサポート <a class="header-anchor" href="#openな-composable関数におけるデフォルト値を持つパラメーターのサポート" aria-label="Permalink to &quot;openな\`@Composable\`関数におけるデフォルト値を持つパラメーターのサポート&quot;">​</a></h3><p>以前、コンパイラは、不正確なコンパイラ出力により、ランタイムでクラッシュを引き起こす可能性があったため、<code>open</code>な<code>@Composable</code>関数におけるデフォルト値を持つパラメーターを制限していました。この根本的な問題は解決され、Kotlin 2.1.20以降で使用する場合、デフォルト値を持つパラメーターは完全にサポートされます。</p><p>Composeコンパイラは、<a href="https://developer.android.com/jetpack/androidx/releases/compose-compiler#1.5.8" target="_blank" rel="noreferrer">バージョン1.5.8</a>より前に<code>open</code>な関数でデフォルト値を持つパラメーターを許可していたため、 そのサポートはプロジェクト構成に依存します。</p><ul><li><code>open</code>なコンポーザブル関数がKotlinバージョン2.1.20以降でコンパイルされた場合、コンパイラはデフォルト値を持つパラメーターに対して正しいラッパーを生成します。これには、1.5.8より前のバイナリと互換性のあるラッパーが含まれ、ダウンストリームライブラリもこの<code>open</code>関数を使用できるようになります。</li><li><code>open</code>なコンポーザブル関数がKotlin 2.1.20より古いバージョンでコンパイルされた場合、Composeは互換性モードを使用し、ランタイムでクラッシュが発生する可能性があります。互換性モードを使用している場合、コンパイラは潜在的な問題を強調するために警告を発します。</li></ul><h3 id="finalでオーバーライドされた関数は再起動可能に" tabindex="-1">finalでオーバーライドされた関数は再起動可能に <a class="header-anchor" href="#finalでオーバーライドされた関数は再起動可能に" aria-label="Permalink to &quot;finalでオーバーライドされた関数は再起動可能に&quot;">​</a></h3><p>仮想関数（インターフェースを含む<code>open</code>および<code>abstract</code>のオーバーライド）は、<a href="/ja/kotlin/whatsnew21#changes-to-open-and-overridden-composable-functions">2.1.0リリースで再起動不可とされていました</a>。 この制限は、<code>final</code>クラスのメンバーであるか、それ自体が<code>final</code>である関数に対して緩和され、 通常どおり再起動またはスキップされます。</p><p>Kotlin 2.1.20にアップグレードした後、影響を受ける関数でいくつかの動作変更が見られるかもしれません。以前のバージョンの再起動不可ロジックを強制するには、 関数に<code>@NonRestartableComposable</code>アノテーションを適用してください。</p><h3 id="composablesingletonsが公開apiから削除" tabindex="-1"><code>ComposableSingletons</code>が公開APIから削除 <a class="header-anchor" href="#composablesingletonsが公開apiから削除" aria-label="Permalink to &quot;\`ComposableSingletons\`が公開APIから削除&quot;">​</a></h3><p><code>ComposableSingletons</code>は、<code>@Composable</code>ラムダを最適化する際にComposeコンパイラによって作成されるクラスです。 パラメーターをキャプチャしないラムダは一度割り当てられ、クラスのプロパティにキャッシュされるため、ランタイムでのアロケーションを節約します。 このクラスは内部可視性で生成され、コンパイル単位（通常はファイル）内のラムダを最適化することのみを目的としています。</p><p>しかし、この最適化は<code>inline</code>関数本体にも適用され、シングルトンラムダインスタンスが 公開APIに漏洩するという問題を引き起こしていました。この問題を解決するため、2.1.20以降、<code>@Composable</code>ラムダは インライン関数内でシングルトンに最適化されなくなりました。同時に、Composeコンパイラは、 以前のモデルでコンパイルされたモジュールのバイナリ互換性をサポートするために、 インライン関数用のシングルトンクラスとラムダの生成を継続します。</p><h3 id="ソース情報がデフォルトで含まれるように" tabindex="-1">ソース情報がデフォルトで含まれるように <a class="header-anchor" href="#ソース情報がデフォルトで含まれるように" aria-label="Permalink to &quot;ソース情報がデフォルトで含まれるように&quot;">​</a></h3><p>ComposeコンパイラGradleプラグインは、Androidではすでに<a href="https://kotlinlang.org/api/kotlin-gradle-plugin/compose-compiler-gradle-plugin/org.jetbrains.kotlin.compose.compiler.gradle/-compose-compiler-gradle-plugin-extension/include-source-information.html" target="_blank" rel="noreferrer">ソース情報を含める機能</a>がデフォルトで有効になっています。 Kotlin 2.1.20以降、この機能はすべてのプラットフォームでデフォルトで有効になります。</p><p>このオプションを<code>freeCompilerArgs</code>を使用して設定していないか確認してください。この方法は、 プラグインと併用された場合に、オプションが事実上2回設定されることになり、ビルドが失敗する原因となる可能性があります。</p><h2 id="破壊的変更と非推奨" tabindex="-1">破壊的変更と非推奨 <a class="header-anchor" href="#破壊的変更と非推奨" aria-label="Permalink to &quot;破壊的変更と非推奨&quot;">​</a></h2><ul><li>Kotlin MultiplatformをGradleの今後の変更に合わせるため、<code>withJava()</code>関数を段階的に廃止しています。 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-compatibility-guide.html#java-source-sets-created-by-default" target="_blank" rel="noreferrer">Javaソースセットはデフォルトで作成されるようになりました</a>。<a href="https://docs.gradle.org/current/userguide/java_testing.html#sec:java_test_fixtures" target="_blank" rel="noreferrer">Javaテストフィクスチャ</a>Gradleプラグインを使用している場合は、 互換性の問題を避けるため、直接<a href="/ja/kotlin/releases#release-details">Kotlin 2.1.21</a>にアップグレードしてください。</li><li>JetBrainsチームは<code>kotlin-android-extensions</code>プラグインの非推奨化を進めています。プロジェクトでこれを使用しようとすると、 設定エラーが発生し、プラグインコードは実行されなくなります。</li><li>レガシープロパティ<code>kotlin.incremental.classpath.snapshot.enabled</code>がKotlin Gradleプラグインから削除されました。 このプロパティは、JVMで組み込みのABIスナップショットにフォールバックする機会を提供していました。現在、プラグインは 不要な再コンパイルを検出して回避するために他の方法を使用しており、このプロパティは廃止されました。</li></ul><h2 id="ドキュメントの更新" tabindex="-1">ドキュメントの更新 <a class="header-anchor" href="#ドキュメントの更新" aria-label="Permalink to &quot;ドキュメントの更新&quot;">​</a></h2><p>Kotlinドキュメントにはいくつかの注目すべき変更が加えられました。</p><h3 id="改良されたページと新しいページ" tabindex="-1">改良されたページと新しいページ <a class="header-anchor" href="#改良されたページと新しいページ" aria-label="Permalink to &quot;改良されたページと新しいページ&quot;">​</a></h3><ul><li><a href="/ja/kotlin/roadmap">Kotlinロードマップ</a> – Kotlinの言語とエコシステムの進化における優先順位の更新されたリストをご覧ください。</li><li><a href="/ja/kotlin/gradle-best-practices">Gradleのベストプラクティス</a>ページ – Gradleビルドを最適化し、パフォーマンスを向上させるための重要なベストプラクティスを学びましょう。</li><li><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/compose-multiplatform-and-jetpack-compose.html" target="_blank" rel="noreferrer">Compose MultiplatformとJetpack Compose</a> – 2つのUIフレームワーク間の関係の概要。</li><li><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/kotlin-multiplatform-flutter.html" target="_blank" rel="noreferrer">Kotlin MultiplatformとFlutter</a> – 2つの人気のあるクロスプラットフォームフレームワークの比較をご覧ください。</li><li><a href="/ja/kotlin/native-c-interop">Cとの相互運用</a> – KotlinとCの相互運用の詳細を探りましょう。</li><li><a href="/ja/kotlin/numbers">数値型</a> – 数値を表現するためのさまざまなKotlin型について学びましょう。</li></ul><h3 id="新しく更新されたチュートリアル" tabindex="-1">新しく更新されたチュートリアル <a class="header-anchor" href="#新しく更新されたチュートリアル" aria-label="Permalink to &quot;新しく更新されたチュートリアル&quot;">​</a></h3><ul><li><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-publish-libraries.html" target="_blank" rel="noreferrer">Maven Centralにライブラリを公開する</a> – 最も人気のあるMavenリポジトリにKMPライブラリアーティファクトを公開する方法を学びましょう。</li><li><a href="/ja/kotlin/native-dynamic-libraries">Kotlin/Nativeを動的ライブラリとして使用する</a> – 動的Kotlinライブラリを作成します。</li><li><a href="/ja/kotlin/apple-framework">Kotlin/NativeをAppleフレームワークとして使用する</a> – 独自のフレームワークを作成し、macOSおよびiOS上のSwift/Objective-CアプリケーションからKotlin/Nativeコードを使用します。</li></ul><h2 id="kotlin-2-1-20へのアップデート方法" tabindex="-1">Kotlin 2.1.20へのアップデート方法 <a class="header-anchor" href="#kotlin-2-1-20へのアップデート方法" aria-label="Permalink to &quot;Kotlin 2.1.20へのアップデート方法&quot;">​</a></h2><p>IntelliJ IDEA 2023.3およびAndroid Studio Iguana (2023.2.1) Canary 15以降、KotlinプラグインはIDEにバンドルされた プラグインとして配布されます。これは、JetBrains Marketplaceからプラグインをインストールできなくなったことを意味します。</p><p>新しいKotlinバージョンに更新するには、ビルドスクリプトで<a href="/ja/kotlin/releases#update-to-a-new-kotlin-version">Kotlinのバージョンを2.1.20に変更</a>してください。</p>`,34))])}const b=l(k,[["render",r]]);export{F as __pageData,b as default};
