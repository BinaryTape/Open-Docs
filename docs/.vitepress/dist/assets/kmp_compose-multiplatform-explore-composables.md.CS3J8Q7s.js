import{_ as k}from"./chunks/icon-1-done.B5D6C9SU.js";import{_ as o}from"./chunks/icon-2.D_3lm1kb.js";import{_ as r}from"./chunks/icon-3-todo.aEuKIG4W.js";import{_ as d}from"./chunks/icon-4-todo.DqbNYzPe.js";import{_ as E,C as l,c,o as g,j as i,G as n,ag as y,a,w as e}from"./chunks/framework.Bksy39di.js";const I=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"kmp/compose-multiplatform-explore-composables.md","filePath":"kmp/compose-multiplatform-explore-composables.md","lastUpdated":1755516278000}'),m={name:"kmp/compose-multiplatform-explore-composables.md"};function u(F,s,C,b,A,f){const t=l("secondary-label"),p=l("Links"),h=l("tldr");return g(),c("div",null,[s[18]||(s[18]=i("h1",{id:"探索可组合代码",tabindex:"-1"},[a("探索可组合代码 "),i("a",{class:"header-anchor",href:"#探索可组合代码","aria-label":'Permalink to "探索可组合代码"'},"​")],-1)),n(t,{ref:"IntelliJ IDEA"},null,512),n(t,{ref:"Android Studio"},null,512),n(h,null,{default:e(()=>[s[15]||(s[15]=i("p",null,"本教程使用 IntelliJ IDEA，但你也可以在 Android Studio 中学习 – 这两个 IDE 共享相同的核心功能和 Kotlin Multiplatform 支持。",-1)),s[16]||(s[16]=i("br",null,null,-1)),s[17]||(s[17]=i("p",null,[a("这是"),i("strong",null,"使用共享逻辑和 UI 创建 Compose Multiplatform 应用"),a("教程的第二部分。在继续之前，请确保你已完成之前的步骤。")],-1)),i("p",null,[s[1]||(s[1]=i("img",{src:k,width:"20",alt:"第一步"},null,-1)),s[2]||(s[2]=a()),n(p,{href:"/kmp/compose-multiplatform-create-first-app",summary:"本教程使用 IntelliJ IDEA，但你也可以在 Android Studio 中学习 – 这两个 IDE 共享相同的核心功能和 Kotlin Multiplatform 支持。这是创建 Compose Multiplatform 应用并共享逻辑和 UI 教程的第一部分。创建你的 Compose Multiplatform 应用 探索可组合代码 修改项目 创建你自己的应用程序"},{default:e(()=>s[0]||(s[0]=[a("创建你的 Compose Multiplatform 应用")])),_:1}),s[3]||(s[3]=i("br",null,null,-1)),s[4]||(s[4]=i("img",{src:o,width:"20",alt:"第二步"},null,-1)),s[5]||(s[5]=a()),s[6]||(s[6]=i("strong",null,"探索可组合代码",-1)),s[7]||(s[7]=i("br",null,null,-1)),s[8]||(s[8]=i("img",{src:r,width:"20",alt:"第三步"},null,-1)),s[9]||(s[9]=a(" 修改项目")),s[10]||(s[10]=i("br",null,null,-1)),s[11]||(s[11]=i("br",null,null,-1)),s[12]||(s[12]=i("img",{src:d,width:"20",alt:"第四步"},null,-1)),s[13]||(s[13]=a(" 创建你自己的应用程序")),s[14]||(s[14]=i("br",null,null,-1))])]),_:1}),s[19]||(s[19]=y(`<p>让我们仔细研究一下 Kotlin Multiplatform 向导创建的示例可组合项。首先，有一个 <code>App()</code> 可组合函数，它实现了公共 UI，并且可以在所有平台中使用。其次，有用于在每个平台启动此 UI 的平台特有代码。</p><h2 id="实现可组合函数" tabindex="-1">实现可组合函数 <a class="header-anchor" href="#实现可组合函数" aria-label="Permalink to &quot;实现可组合函数&quot;">​</a></h2><p>在 <code>composeApp/src/commonMain/kotlin/App.kt</code> 文件中，查看 <code>App()</code> 函数：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Composable</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Preview</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  MaterialTheme</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> showContent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> remember</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mutableStateOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Column</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      modifier </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Modifier</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">safeContentPadding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fillMaxSize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      horizontalAlignment </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Alignment.CenterHorizontally,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      Button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(onClick </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { showContent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">showContent }) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Click me!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      AnimatedVisibility</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(showContent) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> greeting </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> remember</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Greeting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        Column</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Modifier.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fillMaxWidth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), horizontalAlignment </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Alignment.CenterHorizontally) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          Image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">painterResource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Res.drawable.compose_multiplatform), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Compose: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$greeting</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>App()</code> 函数是一个常规的 Kotlin 函数，标注有 <code>@Composable</code>。这类函数被称为_可组合函数_或简称_可组合项_。它们是基于 Compose Multiplatform 的 UI 的构建块。</p><p>可组合函数具有以下通用结构：</p><ul><li><code>MaterialTheme</code> 设置应用程序的外观。默认设置可自定义。例如，你可以选择颜色、形状和排版。</li><li><code>Column</code> 可组合项控制应用程序的布局。在这里，它在 <code>AnimatedVisibility</code> 可组合项上方显示一个 <code>Button</code>。</li><li><code>Button</code> 包含 <code>Text</code> 可组合项，它渲染一些文本。</li><li><code>AnimatedVisibility</code> 使用动画显示和隐藏 <code>Image</code>。</li><li><code>painterResource</code> 加载存储在 XML 资源中的矢量图标。</li></ul><p><code>Column</code> 的 <code>horizontalAlignment</code> 形参使其内容居中。但要使其生效，该列应占据其容器的全部宽度。这是通过 <code>modifier</code> 形参实现的。</p><p>修饰符是 Compose Multiplatform 的关键组件。这是你用于调整 UI 中可组合项外观或行为的主要机制。修饰符使用 <code>Modifier</code> 类型的方法创建。当你链式调用这些方法时，每次调用都可以更改从上次调用返回的 <code>Modifier</code>，这使得顺序变得重要。关于更多详细信息，请参见 <a href="https://developer.android.com/jetpack/compose/modifiers" target="_blank" rel="noreferrer">JetPack Compose 文档</a>。</p><h3 id="管理状态" tabindex="-1">管理状态 <a class="header-anchor" href="#管理状态" aria-label="Permalink to &quot;管理状态&quot;">​</a></h3><p>示例可组合项的最后一个方面是如何管理状态。<code>App</code> 可组合项中的 <code>showContent</code> 属性使用 <code>mutableStateOf()</code> 函数构建，这意味着它是一个可以被观察的状态对象：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> showContent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> remember</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mutableStateOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span></code></pre></div><p>该状态对象被 <code>remember()</code> 函数调用包装，这意味着它被构建一次，然后由框架保留。通过执行此操作，你创建了一个属性，其值是包含布尔值的状态对象。框架缓存此状态对象，允许可组合项观察它。</p><p>当状态值改变时，任何观察它的可组合项都会被重新调用。这使得它们产生的任何控件都可以被重新绘制。这被称为_重组_。</p><p>在你的应用程序中，状态唯一改变的地方是按钮的点击事件中。<code>onClick</code> 事件处理程序反转 <code>showContent</code> 属性的值。因此，图像会随 <code>Greeting().greet()</code> 调用一起显示或隐藏，因为父 <code>AnimatedVisibility</code> 可组合项观察 <code>showContent</code>。</p><h2 id="在不同平台启动-ui" tabindex="-1">在不同平台启动 UI <a class="header-anchor" href="#在不同平台启动-ui" aria-label="Permalink to &quot;在不同平台启动 UI&quot;">​</a></h2><p><code>App()</code> 函数在每个平台上的执行方式不同。在 Android 上，它由 activity 管理；在 iOS 上，由 view controller 管理；在桌面端，由 window 管理；在 Web 上，由 container 管理。让我们分别查看它们。</p><h3 id="在-android-上" tabindex="-1">在 Android 上 <a class="header-anchor" href="#在-android-上" aria-label="Permalink to &quot;在 Android 上&quot;">​</a></h3><p>对于 Android，打开 <code>composeApp/src/androidMain/kotlin</code> 中的 <code>MainActivity.kt</code> 文件：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MainActivity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ComponentActivity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onCreate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(savedInstanceState: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Bundle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        enableEdgeToEdge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onCreate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(savedInstanceState)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        setContent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这是一个名为 <code>MainActivity</code> 的 <a href="https://developer.android.com/guide/components/activities/intro-activities" target="_blank" rel="noreferrer">Android activity</a>，它调用 <code>App</code> 可组合项。</p><h3 id="在-ios-上" tabindex="-1">在 iOS 上 <a class="header-anchor" href="#在-ios-上" aria-label="Permalink to &quot;在 iOS 上&quot;">​</a></h3><p>对于 iOS，打开 <code>composeApp/src/iosMain/kotlin</code> 中的 <code>MainViewController.kt</code> 文件：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MainViewController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ComposeUIViewController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span></code></pre></div><p>这是一个 <a href="https://developer.apple.com/documentation/uikit/view_controllers" target="_blank" rel="noreferrer">view controller</a>，扮演与 Android 上的 activity 相同的角色。请注意，iOS 和 Android 类型都只是简单地调用 <code>App</code> 可组合项。</p><h3 id="在桌面端" tabindex="-1">在桌面端 <a class="header-anchor" href="#在桌面端" aria-label="Permalink to &quot;在桌面端&quot;">​</a></h3><p>对于桌面端，查看 <code>composeApp/src/desktopMain/kotlin</code> 中的 <code>main()</code> 函数：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(onCloseRequest </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exitApplication</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, title </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;ComposeDemo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>在这里，<code>application()</code> 函数启动一个新的桌面应用程序。</li><li>此函数接受一个 lambda 表达式，你在其中初始化 UI。通常，你创建一个 <code>Window</code> 并指定属性和指令，指示程序在窗口关闭时应如何反应。在这种情况下，整个应用程序都会关闭。</li><li>在此窗口内，你可以放置你的内容。与 Android 和 iOS 一样，唯一的内容是 <code>App()</code> 函数。</li></ul><p>目前，<code>App</code> 函数没有声明任何形参。在更大的应用程序中，你通常会向平台特有的依赖项传递形参。这些依赖项可以手动创建，也可以使用依赖注入库创建。</p><h3 id="在-web-上" tabindex="-1">在 Web 上 <a class="header-anchor" href="#在-web-上" aria-label="Permalink to &quot;在 Web 上&quot;">​</a></h3><p>在 <code>composeApp/src/wasmJsMain/kotlin/main.kt</code> 文件中，查看 <code>main()</code> 函数：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalComposeUiApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ComposeViewport</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(document.body</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><code>@OptIn(ExperimentalComposeUiApi::class)</code> 注解告诉编译器你正在使用标记为实验性的 API，该 API 可能会在未来版本中更改。</li><li><code>ComposeViewport()</code> 函数为应用程序设置 Compose 环境。</li><li>Web 应用被插入到作为 <code>ComposeViewport</code> 函数形参指定的 container 中。在此示例中，整个文档的 body 用作 container。</li><li><code>App()</code> 函数负责使用 Jetpack Compose 构建应用程序的 UI 组件。</li></ul><h2 id="下一步" tabindex="-1">下一步 <a class="header-anchor" href="#下一步" aria-label="Permalink to &quot;下一步&quot;">​</a></h2><p>在本教程的下一部分，你将向项目添加一个依赖项并修改用户界面。</p><p><strong><a href="./compose-multiplatform-modify-project">进入下一部分</a></strong></p><h2 id="获取帮助" tabindex="-1">获取帮助 <a class="header-anchor" href="#获取帮助" aria-label="Permalink to &quot;获取帮助&quot;">​</a></h2><ul><li><strong>Kotlin Slack</strong>。获取 <a href="https://surveys.jetbrains.com/s3/kotlin-slack-sign-up" target="_blank" rel="noreferrer">邀请</a> 并加入 <a href="https://kotlinlang.slack.com/archives/C3PQML5NU" target="_blank" rel="noreferrer">#multiplatform</a> 频道。</li><li><strong>Kotlin 问题追踪器</strong>。 <a href="https://youtrack.jetbrains.com/newIssue?project=KT" target="_blank" rel="noreferrer">报告新问题</a>。</li></ul>`,39))])}const M=E(m,[["render",u]]);export{I as __pageData,M as default};
