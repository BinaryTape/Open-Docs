import{_ as o,c as r,o as t,ag as a}from"./chunks/framework.Bksy39di.js";const m=JSON.parse('{"title":"Google Summer of Code with Kotlin 2024","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/gsoc-2024.md","filePath":"zh-Hant/kotlin/gsoc-2024.md","lastUpdated":1754307826000}'),l={name:"zh-Hant/kotlin/gsoc-2024.md"};function n(i,e,s,p,d,h){return t(),r("div",null,e[0]||(e[0]=[a('<h1 id="google-summer-of-code-with-kotlin-2024" tabindex="-1">Google Summer of Code with Kotlin 2024 <a class="header-anchor" href="#google-summer-of-code-with-kotlin-2024" aria-label="Permalink to &quot;Google Summer of Code with Kotlin 2024&quot;">​</a></h1><p>這篇文章包含 Google Summer of Code with Kotlin 2024 的<a href="#project-ideas">專案構想清單</a>和<a href="#kotlin-contributor-guidelines-for-google-summer-of-code-gsoc">貢獻者指南</a>。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Kotlin 資源： * <a href="https://github.com/jetbrains/kotlin" target="_blank" rel="noreferrer">Kotlin GitHub 儲存庫</a> * <a href="https://surveys.jetbrains.com/s3/kotlin-slack-sign-up" target="_blank" rel="noreferrer">Kotlin Slack</a> 以及 <a href="https://slack-chats.kotlinlang.org/c/gsoc" target="_blank" rel="noreferrer">#gsoc</a> Slack 頻道 如果您有任何疑問，請透過 <a href="mailto:gsoc@kotlinfoundation.org" target="_blank" rel="noreferrer">gsoc@kotlinfoundation.org</a> <a href="mailto:gsoc@kotlinfoundation.org" target="_blank" rel="noreferrer">聯絡我們</a></p></div><h2 id="google-summer-of-code-gsoc-的-kotlin-貢獻者指南" tabindex="-1">Google Summer of Code (GSoC) 的 Kotlin 貢獻者指南 <a class="header-anchor" href="#google-summer-of-code-gsoc-的-kotlin-貢獻者指南" aria-label="Permalink to &quot;Google Summer of Code (GSoC) 的 Kotlin 貢獻者指南&quot;">​</a></h2><h3 id="開始使用" tabindex="-1">開始使用 <a class="header-anchor" href="#開始使用" aria-label="Permalink to &quot;開始使用&quot;">​</a></h3><ol><li><p>查看 <a href="https://developers.google.com/open-source/gsoc/faq" target="_blank" rel="noreferrer">GSoC 常見問題</a>和<a href="https://summerofcode.withgoogle.com/" target="_blank" rel="noreferrer">計畫公告</a>。</p></li><li><p>熟悉 Kotlin 語言：</p><ul><li>官方 <a href="https://kotlinlang.org/" target="_blank" rel="noreferrer">Kotlin 網站</a>是個很好的起點。</li><li>閱讀官方<a href="/zh-Hant/kotlin/getting-started">文件</a>以更深入了解該語言。</li><li>查看 <a href="https://lp.jetbrains.com/academy/learn-kotlin/" target="_blank" rel="noreferrer">JetBrains Academy</a> 上的 Kotlin 課程或 Android 團隊的<a href="https://developer.android.com/courses/" target="_blank" rel="noreferrer">訓練選項</a>。</li><li>關注 <a href="https://twitter.com/kotlin" target="_blank" rel="noreferrer">Kotlin X</a> 或 <a href="https://bsky.app/profile/kotlinlang.org" target="_blank" rel="noreferrer">Kotlin Bluesky</a> 帳號以掌握最新消息和發展。</li><li>查看 <a href="https://www.youtube.com/@Kotlin" target="_blank" rel="noreferrer">Kotlin YouTube 頻道</a>以獲取教學課程、技巧和最新更新。</li></ul></li><li><p>了解 Kotlin 開源社群：</p><ul><li>探索一般 <a href="/zh-Hant/kotlin/contribute">Kotlin 貢獻者指南</a>。</li><li><a href="https://surveys.jetbrains.com/s3/kotlin-slack-sign-up" target="_blank" rel="noreferrer">加入 Kotlin Slack 頻道</a>以與其他開發者交流並獲得關於任何問題的協助。</li><li><a href="https://slack-chats.kotlinlang.org/c/gsoc" target="_blank" rel="noreferrer">加入 #gsoc 頻道</a>以提出問題並獲得 GSoC 團隊的支援。</li></ul></li></ol><h3 id="如何申請" tabindex="-1">如何申請 <a class="header-anchor" href="#如何申請" aria-label="Permalink to &quot;如何申請&quot;">​</a></h3><ol><li>查看<a href="#project-ideas">專案構想</a>並選擇您想參與的專案。</li><li>如果您不熟悉 Kotlin，請<a href="/zh-Hant/kotlin/getting-started">閱讀 Kotlin 網站上的入門資訊</a>。</li><li>參考 <a href="https://google.github.io/gsocguides/student/writing-a-proposal" target="_blank" rel="noreferrer">GSoC 貢獻者指南</a>。</li><li>透過 <a href="https://summerofcode.withgoogle.com/" target="_blank" rel="noreferrer">GSoC 網站</a>申請。 <ul><li>我們建議您撰寫一個與所提議專案相關的可執行程式碼範例。您也可以向我們展示任何您引以為傲的程式碼範例。</li><li>描述您為何對 Kotlin 感興趣以及您使用它的經驗。</li><li>如果您參與開源專案，請提供您的貢獻歷史記錄。</li><li>如果您有 GitHub、Twitter 帳號、部落格或技術或科學出版物作品集，也請提供參考連結。</li><li>請揭露任何由於其他承諾（例如考試和假期）與 GSoC 時間表發生的衝突。</li></ul></li></ol><p>謝謝您！我們期待閱讀您的申請！</p><h2 id="專案構想" tabindex="-1">專案構想 <a class="header-anchor" href="#專案構想" aria-label="Permalink to &quot;專案構想&quot;">​</a></h2><h3 id="kotlin-to-webassembly-編譯器的增量編譯-困難-350-小時" tabindex="-1">Kotlin-to-WebAssembly 編譯器的增量編譯 [困難，350 小時] <a class="header-anchor" href="#kotlin-to-webassembly-編譯器的增量編譯-困難-350-小時" aria-label="Permalink to &quot;Kotlin-to-WebAssembly 編譯器的增量編譯 [困難，350 小時]&quot;">​</a></h3><p>增量編譯是一種有助於提高編譯速度的技術，透過僅重新編譯已更改的檔案而不是整個程式（也稱為執行全新建置）。Kotlin-to-Wasm 編譯器目前僅支援全新建置，但在此專案中，我們將會增強它，使其也支援增量編譯。</p><p><strong>預期成果</strong></p><p>在 Kotlin-to-WebAssembly 編譯器中實作增量編譯功能，有助於更快的開發工作流程。</p><p><strong>所需技能（偏好）</strong></p><p>Kotlin</p><p><strong>可能導師</strong></p><p>Artem Kobzar, JetBrains</p><h3 id="支援-node-js-原生繫結的-compose-multiplatform-for-skia-困難-350-小時" tabindex="-1">支援 Node.js 原生繫結的 Compose Multiplatform for Skia [困難，350 小時] <a class="header-anchor" href="#支援-node-js-原生繫結的-compose-multiplatform-for-skia-困難-350-小時" aria-label="Permalink to &quot;支援 Node.js 原生繫結的 Compose Multiplatform for Skia [困難，350 小時]&quot;">​</a></h3><p><a href="https://github.com/JetBrains/compose-multiplatform" target="_blank" rel="noreferrer">Compose Multiplatform</a> 是一個宣告式框架，用於跨多個平台共享以 Kotlin 建置的 UI。目前渲染桌面應用程式的方法使用 JVM 作為平台，但如果我們將 Compose Multiplatform 用於 Web 並嘗試在瀏覽器外部使用 Skia 的原生繫結執行應用程式呢？這會改善桌面應用程式的效能和記憶體消耗嗎？還是會產生反效果？我們將在這個專案中找到答案！</p><p><strong>預期成果</strong></p><p>整合 Skia 繫結與 Compose Multiplatform，並評估對桌面應用程式的效能影響。</p><p><strong>所需技能（偏好）</strong></p><p>Kotlin, Node.js, C++, 或 Rust</p><p><strong>可能導師</strong></p><p>Artem Kobzar, JetBrains</p><h3 id="compose-multiplatform-元件圖庫產生器-中等-350-小時" tabindex="-1">Compose Multiplatform 元件圖庫產生器 [中等，350 小時] <a class="header-anchor" href="#compose-multiplatform-元件圖庫產生器-中等-350-小時" aria-label="Permalink to &quot;Compose Multiplatform 元件圖庫產生器 [中等，350 小時]&quot;">​</a></h3><p><a href="https://github.com/JetBrains/compose-multiplatform" target="_blank" rel="noreferrer">Compose Multiplatform</a> 是一個宣告式框架，用於跨多個平台共享以 Kotlin 建置的 UI。在 Web 開發的 React 時代初期，Storybook 被創建，而 Storybook 提出的描述元件狀態以及生成整個 UI 函式庫圖庫的方法，仍然是 Web 開發中文件編寫的重要方法之一。我們能否使用 Compose Multiplatform 做到這一點，用它來生成 Web UI 元素的圖庫，以及行動和桌面平台的圖庫？讓我們在這個專案中試試看。</p><p><strong>預期成果</strong></p><p>創建一個工具，使用 Compose Multiplatform 為 Web、行動和桌面平台生成 UI 元件圖庫。</p><p><strong>所需技能（偏好）</strong></p><p>Kotlin, Jetpack Compose, UI/UX Design</p><p><strong>可能導師</strong></p><p>Artem Kobzar, JetBrains</p><h3 id="宣告式-gradle-的-kotlin-dsl-改進-中等-175-小時" tabindex="-1">宣告式 Gradle 的 Kotlin DSL 改進 [中等，175 小時] <a class="header-anchor" href="#宣告式-gradle-的-kotlin-dsl-改進-中等-175-小時" aria-label="Permalink to &quot;宣告式 Gradle 的 Kotlin DSL 改進 [中等，175 小時]&quot;">​</a></h3><p>去年十一月，Gradle 團隊<a href="https://blog.gradle.org/declarative-gradle" target="_blank" rel="noreferrer">宣布了新的宣告式 Gradle 專案</a>，並在專案中引入了更高層次的 Kotlin DSL。我們邀請 GSoC 貢獻者加入我們，共同改進新 DSL 的開發者體驗，特別是透過在 Gradle 外掛程式中實作擴展性，以支援最常見的 Kotlin 和 Java 專案整合：靜態分析、像 Kotest 這樣的測試框架以及其他。</p><p><strong>預期成果</strong></p><p>實作 Gradle 的 Kotlin DSL 中的擴展性功能，並改進對常見專案整合的支援。</p><p><strong>所需技能（偏好）</strong></p><p>Kotlin, Gradle, Java, Static Analysis</p><p><strong>可能導師</strong></p><p>Oleg Nenashev, Gradle</p><p><a href="https://gradle.github.io/community/events/gsoc/" target="_blank" rel="noreferrer">Gradle 指南</a></p><h3 id="kotlin-dsl-文件範例測試框架-容易或中等-90-小時或-175-小時" tabindex="-1">Kotlin DSL 文件範例測試框架 [容易或中等，90 小時或 175 小時] <a class="header-anchor" href="#kotlin-dsl-文件範例測試框架-容易或中等-90-小時或-175-小時" aria-label="Permalink to &quot;Kotlin DSL 文件範例測試框架 [容易或中等，90 小時或 175 小時]&quot;">​</a></h3><p>許多專案，包括 Gradle，有許多 Kotlin DSL 範例和程式碼片段（請參閱 <a href="https://docs.gradle.org/current/userguide/userguide.html" target="_blank" rel="noreferrer">Gradle 文件</a> 以獲取範例）。針對多個版本測試它們帶來了某些挑戰，因為這些片段通常是為了簡潔而呈現不完整的程式碼。我們希望建立一個測試框架，以簡化這些範例在單元測試框架（Kotest 或 JUnit 5）中於 GitHub Actions 和 Teamcity 上的驗證。</p><p><strong>預期成果</strong></p><p>實作一個用於 Kotlin DSL 範例的基本測試框架，並與 GitHub Actions 整合以進行持續測試。</p><p><strong>所需技能（偏好）</strong></p><p>Kotlin, Testing Frameworks, CI/CD</p><p><strong>可能導師</strong></p><p>Oleg Nenashev, Gradle</p><p><a href="https://gradle.github.io/community/events/gsoc/" target="_blank" rel="noreferrer">Gradle 指南</a></p><h3 id="gradle-建置伺服器-–-支援-android-專案-中等或困難-175-小時或-350-小時" tabindex="-1">Gradle 建置伺服器 – 支援 Android 專案 [中等或困難，175 小時或 350 小時] <a class="header-anchor" href="#gradle-建置伺服器-–-支援-android-專案-中等或困難-175-小時或-350-小時" aria-label="Permalink to &quot;Gradle 建置伺服器 – 支援 Android 專案 [中等或困難，175 小時或 350 小時]&quot;">​</a></h3><p>Kotlin 和 Gradle 是建置 Android 專案的預設選擇。在 2023 年 11 月，Microsoft 團隊<a href="https://devblogs.microsoft.com/java/announcing-the-build-server-for-gradle-open-source-repository/" target="_blank" rel="noreferrer">宣布了 Gradle 建置伺服器專案</a>，它是一個 Gradle 特定的 <a href="https://build-server-protocol.github.io/" target="_blank" rel="noreferrer">建置伺服器協定 (BSP)</a> 實作。引入對 Android 建置的完整支援將會很棒。對於範圍較小的專案，可以在 Gradle 建置伺服器中實作針對 Gradle 任務的自動探索和取消。</p><p><strong>預期成果</strong></p><p>在 Gradle 建置伺服器中實作 Android 專案支援，包括自動探索和任務取消。</p><p><strong>所需技能（偏好）</strong></p><p>Kotlin, Gradle, Android Development, Visual Studio Code</p><p><strong>可能導師</strong></p><p>Oleg Nenashev, Gradle</p><p><a href="https://gradle.github.io/community/events/gsoc/" target="_blank" rel="noreferrer">Gradle 指南</a></p><h3 id="實作-kotlin-native-基準測試的記憶體使用分析-中等-175-小時" tabindex="-1">實作 Kotlin/Native 基準測試的記憶體使用分析 [中等，175 小時] <a class="header-anchor" href="#實作-kotlin-native-基準測試的記憶體使用分析-中等-175-小時" aria-label="Permalink to &quot;實作 Kotlin/Native 基準測試的記憶體使用分析 [中等，175 小時]&quot;">​</a></h3><p><a href="https://github.com/Kotlin/kotlinx-benchmark" target="_blank" rel="noreferrer">kotlinx-benchmark 函式庫</a>是一個開源工具包，有助於 Kotlin 程式碼跨多個平台的基準測試。它目前具有針對 JVM 的 GC 分析功能，詳述每個基準測試方法的記憶體分配率。本專案旨在將類似的分析功能擴展到 Kotlin/Native，朝著跨平台統一基準測試功能邁進。</p><p>貢獻者將與 Kotlin/Native 團隊密切合作，建立用於從 Kotlin/Native 記憶體管理器存取記憶體分配數據的 API。目標是生成與 JVM 格式一致的報告，確保跨平台資料呈現的一致性。此外，該專案涉及識別並糾正針對其他函式庫功能在報告格式上的任何差異，從而標準化基準測試輸出以進行全面的跨平台分析。</p><p><strong>預期成果</strong></p><p>在 Kotlin/Native 的 kotlinx-benchmark 中實作記憶體使用分析，並標準化基準測試輸出。</p><p><strong>所需技能（偏好）</strong></p><p>Kotlin, Kotlin/Native, Benchmarking, Memory Profiling</p><p><strong>可能導師</strong></p><p>Abduqodiri Qurbonzoda, JetBrains<br> Alexander Shabalin, JetBrains</p><h3 id="在-kotlinx-benchmark-中支援-android-目標-中等-175-小時" tabindex="-1">在 kotlinx-benchmark 中支援 Android 目標 [中等，175 小時] <a class="header-anchor" href="#在-kotlinx-benchmark-中支援-android-目標-中等-175-小時" aria-label="Permalink to &quot;在 kotlinx-benchmark 中支援 Android 目標 [中等，175 小時]&quot;">​</a></h3><p><a href="https://github.com/Kotlin/kotlinx-benchmark" target="_blank" rel="noreferrer">kotlinx-benchmark 函式庫</a>是一個開源工具，設計用於對包括 JVM、JS、WasmJs 和 Native 在內的多個平台上的 Kotlin 程式碼進行基準測試。儘管其廣泛相容，該函式庫目前不支援在 Android 上進行基準測試。本專案旨在彌補這一差距。計畫是利用現有的 Android 函式庫（例如 androidx.benchmark）在底層整合此功能。本專案的一個關鍵層面是確保目前適用於其他平台的所有功能也在 Android 上受到支援，維持該函式庫的多平台實用性。</p><p><strong>預期成果</strong></p><p>在 kotlinx-benchmark 中整合對 Android 平台的基準測試支援，確保與其他平台的功能對等。</p><p><strong>所需技能（偏好）</strong></p><p>Kotlin, Android Development, Benchmarking</p><p><strong>可能導師</strong></p><p>Abduqodiri Qurbonzoda, JetBrains<br> Rahul Ravikumar, Google</p><h3 id="在-intellij-idea-中為-kotlinx-benchmark-基準測試啟用點擊執行-中等-175-小時" tabindex="-1">在 IntelliJ IDEA 中為 kotlinx-benchmark 基準測試啟用點擊執行 [中等，175 小時] <a class="header-anchor" href="#在-intellij-idea-中為-kotlinx-benchmark-基準測試啟用點擊執行-中等-175-小時" aria-label="Permalink to &quot;在 IntelliJ IDEA 中為 kotlinx-benchmark 基準測試啟用點擊執行 [中等，175 小時]&quot;">​</a></h3><p><a href="https://github.com/Kotlin/kotlinx-benchmark" target="_blank" rel="noreferrer">kotlinx-benchmark</a> 是一個開源函式庫，用於對以 Kotlin 編寫的多平台程式碼進行基準測試。它包含一個 Gradle 外掛程式，當應用時，它提供執行基準測試的任務。然而，執行這些任務需要導覽到 IDE 的 Gradle 面板或使用終端機。此外，執行特定的基準測試需要進一步的步驟，增加了複雜性。為了減輕這種不便並簡化流程，本專案旨在讓使用者能夠直接從 IntelliJ IDEA 介面執行單一基準測試或整個套件，複製單元測試所提供的便利性。實現此目標可能需要與 IntelliJ IDEA 團隊合作以及/或直接對 IntelliJ 專案做出貢獻。</p><p><strong>預期成果</strong></p><p>在 IntelliJ IDEA 中整合針對 kotlinx-benchmark 基準測試的點擊執行功能，改善使用者體驗。</p><p><strong>所需技能（偏好）</strong></p><p>Kotlin, IntelliJ IDEA Plugin Development, Benchmarking</p><p><strong>可能導師</strong></p><p>Abduqodiri Qurbonzoda, JetBrains</p>',86)]))}const c=o(l,[["render",n]]);export{m as __pageData,c as default};
