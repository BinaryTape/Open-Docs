import{_ as i,c as e,o as l,ag as t}from"./chunks/framework.Bksy39di.js";const k=JSON.parse('{"title":"Javaとの比較","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/comparison-to-java.md","filePath":"ja/kotlin/comparison-to-java.md","lastUpdated":1754307826000}'),o={name:"ja/kotlin/comparison-to-java.md"};function n(r,a,s,f,c,h){return l(),e("div",null,a[0]||(a[0]=[t('<h1 id="javaとの比較" tabindex="-1">Javaとの比較 <a class="header-anchor" href="#javaとの比較" aria-label="Permalink to &quot;Javaとの比較&quot;">​</a></h1><h2 id="kotlinで解決されたjavaのいくつかの問題" tabindex="-1">Kotlinで解決されたJavaのいくつかの問題 <a class="header-anchor" href="#kotlinで解決されたjavaのいくつかの問題" aria-label="Permalink to &quot;Kotlinで解決されたJavaのいくつかの問題&quot;">​</a></h2><p>Kotlinは、Javaが抱える一連の問題を解決します。</p><ul><li>ヌル参照は<a href="/ja/kotlin/null-safety">型システムによって制御されます</a>。</li><li><a href="/ja/kotlin/java-interop#java-generics-in-kotlin">ロー型がない</a></li><li>Kotlinの配列は<a href="/ja/kotlin/arrays">不変です</a>。</li><li>Kotlinには、JavaのSAM変換とは異なり、適切な<a href="/ja/kotlin/lambdas#function-types">関数型があります</a>。</li><li>ワイルドカードなしの<a href="/ja/kotlin/generics#use-site-variance-type-projections">使用サイト変性</a></li><li>Kotlinにはチェック<a href="/ja/kotlin/exceptions">例外がありません</a>。</li><li><a href="/ja/kotlin/collections-overview">読み取り専用と可変コレクション用の別々のインターフェース</a></li></ul><h2 id="javaにあってkotlinにはないもの" tabindex="-1">JavaにあってKotlinにはないもの <a class="header-anchor" href="#javaにあってkotlinにはないもの" aria-label="Permalink to &quot;JavaにあってKotlinにはないもの&quot;">​</a></h2><ul><li><a href="/ja/kotlin/exceptions">チェック例外</a></li><li>クラスではない<a href="/ja/kotlin/basic-types">プリミティブ型</a>。バイトコードは可能な限りプリミティブを使用しますが、明示的に利用することはできません。</li><li><a href="/ja/kotlin/classes">静的メンバー</a>は、<a href="/ja/kotlin/object-declarations#companion-objects">コンパニオンオブジェクト</a>、<a href="/ja/kotlin/functions">トップレベル関数</a>、<a href="/ja/kotlin/extensions#extension-functions">拡張関数</a>、または<a href="/ja/kotlin/java-to-kotlin-interop#static-methods"><code>@JvmStatic</code></a>に置き換えられます。</li><li><a href="/ja/kotlin/generics">ワイルドカード型</a>は、<a href="/ja/kotlin/generics#declaration-site-variance">宣言サイト変性</a>と<a href="/ja/kotlin/generics#type-projections">型プロジェクション</a>に置き換えられます。</li><li><a href="/ja/kotlin/control-flow#if-expression">三項演算子 <code>a ? b : c</code></a>は<a href="/ja/kotlin/control-flow#if-expression">if式</a>に置き換えられます。</li><li><a href="https://openjdk.org/jeps/395" target="_blank" rel="noreferrer">Records</a></li><li><a href="https://openjdk.org/projects/amber/design-notes/patterns/pattern-matching-for-java" target="_blank" rel="noreferrer">パターンマッチング</a></li><li>パッケージプライベートの<a href="/ja/kotlin/visibility-modifiers">可視性修飾子</a></li></ul><h2 id="kotlinにあってjavaにはないもの" tabindex="-1">KotlinにあってJavaにはないもの <a class="header-anchor" href="#kotlinにあってjavaにはないもの" aria-label="Permalink to &quot;KotlinにあってJavaにはないもの&quot;">​</a></h2><ul><li><a href="/ja/kotlin/lambdas">ラムダ式</a> + <a href="/ja/kotlin/inline-functions">インライン関数</a> = パフォーマンスの高いカスタム制御構造</li><li><a href="/ja/kotlin/extensions">拡張関数</a></li><li><a href="/ja/kotlin/null-safety">ヌル安全性</a></li><li><a href="/ja/kotlin/typecasts">スマートキャスト</a> (<strong>Java 16</strong>: <a href="https://openjdk.org/jeps/394" target="_blank" rel="noreferrer"><code>instanceof</code>のパターンマッチング</a>)</li><li><a href="/ja/kotlin/strings">文字列テンプレート</a> (<strong>Java 21</strong>: <a href="https://openjdk.org/jeps/430" target="_blank" rel="noreferrer">文字列テンプレート (プレビュー)</a>)</li><li><a href="/ja/kotlin/properties">プロパティ</a></li><li><a href="/ja/kotlin/classes">プライマリコンストラクタ</a></li><li><a href="/ja/kotlin/delegation">ファーストクラスのデリゲーション</a></li><li><a href="/ja/kotlin/basic-types">変数およびプロパティ型の型推論</a> (<strong>Java 10</strong>: <a href="https://openjdk.org/jeps/286" target="_blank" rel="noreferrer">ローカル変数型推論</a>)</li><li><a href="/ja/kotlin/object-declarations">シングルトン</a></li><li><a href="/ja/kotlin/generics">宣言サイト変性 &amp; 型プロジェクション</a></li><li><a href="/ja/kotlin/ranges">範囲式</a></li><li><a href="/ja/kotlin/operator-overloading">演算子オーバーロード</a></li><li><a href="/ja/kotlin/classes#companion-objects">コンパニオンオブジェクト</a></li><li><a href="/ja/kotlin/data-classes">データクラス</a></li><li><a href="/ja/kotlin/coroutines-overview">コルーチン</a></li><li><a href="/ja/kotlin/functions">トップレベル関数</a></li><li><a href="/ja/kotlin/functions#parameters-with-default-values">デフォルト値を持つパラメータ</a></li><li><a href="/ja/kotlin/functions#named-arguments">名前付きパラメータ</a></li><li><a href="/ja/kotlin/functions#infix-notation">中置関数</a></li><li><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-expect-actual.html" target="_blank" rel="noreferrer"><code>expect</code>および<code>actual</code>宣言</a></li><li><a href="/ja/kotlin/whatsnew14#explicit-api-mode-for-library-authors">明示的APIモード</a>と<a href="/ja/kotlin/opt-in-requirements">APIサーフェスのより良い制御</a></li></ul><h2 id="次は何ですか" tabindex="-1">次は何ですか？ <a class="header-anchor" href="#次は何ですか" aria-label="Permalink to &quot;次は何ですか？&quot;">​</a></h2><p>次の方法を学びましょう：</p><ul><li>JavaとKotlinで<a href="/ja/kotlin/java-to-kotlin-idioms-strings">文字列を使った一般的なタスクを実行する</a>。</li><li>JavaとKotlinで<a href="/ja/kotlin/java-to-kotlin-collections-guide">コレクションを使った一般的なタスクを実行する</a>。</li><li>JavaとKotlinで<a href="/ja/kotlin/java-to-kotlin-nullability-guide">null可能性を処理する</a>。</li></ul>',11)]))}const p=i(o,[["render",n]]);export{k as __pageData,p as default};
