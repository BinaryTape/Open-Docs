import{_ as e,c as t,o as r,ag as a}from"./chunks/framework.Bksy39di.js";const u=JSON.parse('{"title":"Kotlin 2.1 兼容性指南","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/compatibility-guide-21.md","filePath":"kotlin/compatibility-guide-21.md","lastUpdated":1754307826000}'),n={name:"kotlin/compatibility-guide-21.md"};function l(i,o,s,p,c,g){return r(),t("div",null,o[0]||(o[0]=[a('<h1 id="kotlin-2-1-兼容性指南" tabindex="-1">Kotlin 2.1 兼容性指南 <a class="header-anchor" href="#kotlin-2-1-兼容性指南" aria-label="Permalink to &quot;Kotlin 2.1 兼容性指南&quot;">​</a></h1><p><em><a href="/kotlin/kotlin-evolution-principles">保持语言现代性</a></em> 和 <em><a href="/kotlin/kotlin-evolution-principles">舒适的更新</a></em> 是 Kotlin 语言设计中的基本原则。前者指出应移除阻碍语言演进的结构，而后者则表示，在移除之前应事先充分沟通，以尽可能顺畅地进行代码迁移。</p><p>虽然大多数语言变更已通过其他渠道（例如更新日志或编译器警告）公布，但本文档总结了所有变更，为从 Kotlin 2.0 到 Kotlin 2.1 的迁移提供了完整参考。</p><h2 id="基本术语" tabindex="-1">基本术语 <a class="header-anchor" href="#基本术语" aria-label="Permalink to &quot;基本术语&quot;">​</a></h2><p>本文档中介绍了几种兼容性类型：</p><ul><li><em>源代码兼容性</em>：源代码不兼容的变更会阻止之前能够正常编译（无错误或警告）的代码继续编译。</li><li><em>二进制兼容性</em>：如果互相替换两个二进制构件不会导致加载或链接错误，则称它们是二进制兼容的。</li><li><em>行为兼容性</em>：如果同一个程序在应用变更前后表现出不同的行为，则称此变更是行为不兼容的。</li></ul><p>请记住，这些定义仅适用于纯 Kotlin。从其他语言角度（例如 Java）来看的 Kotlin 代码兼容性超出了本文档的范围。</p><h2 id="语言" tabindex="-1">语言 <a class="header-anchor" href="#语言" aria-label="Permalink to &quot;语言&quot;">​</a></h2><h3 id="移除语言版本-1-4-和-1-5" tabindex="-1">移除语言版本 1.4 和 1.5 <a class="header-anchor" href="#移除语言版本-1-4-和-1-5" aria-label="Permalink to &quot;移除语言版本 1.4 和 1.5&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-60521" target="_blank" rel="noreferrer">KT-60521</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：源代码</p><p><strong>简要概述</strong>：Kotlin 2.1 引入了语言版本 2.1，并移除了对语言版本 1.4 和 1.5 的支持。语言版本 1.6 和 1.7 已被弃用。</p><p><strong>弃用周期</strong>：</p><ul><li>1.6.0：报告语言版本 1.4 的警告</li><li>1.9.0：报告语言版本 1.5 的警告</li><li>2.1.0：报告语言版本 1.6 和 1.7 的警告；将语言版本 1.4 和 1.5 的警告提升为错误</li></ul></blockquote><h3 id="变更-kotlin-native-上-typeof-函数的行为" tabindex="-1">变更 Kotlin/Native 上 typeOf() 函数的行为 <a class="header-anchor" href="#变更-kotlin-native-上-typeof-函数的行为" aria-label="Permalink to &quot;变更 Kotlin/Native 上 typeOf() 函数的行为&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-70754" target="_blank" rel="noreferrer">KT-70754</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：行为</p><p><strong>简要概述</strong>：<code>typeOf()</code> 函数在 Kotlin/Native 上的行为与 Kotlin/JVM 对齐，以确保跨平台的一致性。</p><p><strong>弃用周期</strong>：</p><ul><li>2.1.0：对齐 <code>typeOf()</code> 函数在 Kotlin/Native 上的行为</li></ul></blockquote><h3 id="禁止通过类型形参界限暴露类型" tabindex="-1">禁止通过类型形参界限暴露类型 <a class="header-anchor" href="#禁止通过类型形参界限暴露类型" aria-label="Permalink to &quot;禁止通过类型形参界限暴露类型&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-69653" target="_blank" rel="noreferrer">KT-69653</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：源代码</p><p><strong>简要概述</strong>：现在禁止通过类型形参界限暴露可见性较低的类型，以此解决类型可见性规则中的不一致问题。此变更确保了类型形参的界限遵循与类相同的可见性规则，从而防止了诸如 JVM 中 IR 验证错误之类的问题。</p><p><strong>弃用周期</strong>：</p><ul><li>2.1.0：报告关于通过可见性较低的类型形参界限暴露类型的警告</li><li>2.2.0：将警告提升为错误</li></ul></blockquote><h3 id="禁止继承同名的抽象-var-属性和-val-属性" tabindex="-1">禁止继承同名的抽象 var 属性和 val 属性 <a class="header-anchor" href="#禁止继承同名的抽象-var-属性和-val-属性" aria-label="Permalink to &quot;禁止继承同名的抽象 var 属性和 val 属性&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-58659" target="_blank" rel="noreferrer">KT-58659</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：源代码</p><p><strong>简要概述</strong>：如果一个类从接口继承了一个抽象的 <code>var</code> 属性，同时从超类继承了一个同名的 <code>val</code> 属性，现在会触发编译错误。这解决了在这些情况下因缺少 setter 而导致的运行时崩溃问题。</p><p><strong>弃用周期</strong>：</p><ul><li>2.1.0：当一个类从接口继承了一个抽象的 <code>var</code> 属性，同时从超类继承了一个同名的 <code>val</code> 属性时，报告警告（或在渐进模式下为错误）</li><li>2.2.0：将警告提升为错误</li></ul></blockquote><h3 id="访问未初始化的枚举条目时报告错误" tabindex="-1">访问未初始化的枚举条目时报告错误 <a class="header-anchor" href="#访问未初始化的枚举条目时报告错误" aria-label="Permalink to &quot;访问未初始化的枚举条目时报告错误&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-68451" target="_blank" rel="noreferrer">KT-68451</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：源代码</p><p><strong>简要概述</strong>：当在枚举类或条目初始化期间访问未初始化的枚举条目时，编译器现在会报告错误。这使得行为与成员属性初始化规则对齐，从而防止了运行时异常并确保了逻辑一致性。</p><p><strong>弃用周期</strong>：</p><ul><li>2.1.0：访问未初始化的枚举条目时报告错误</li></ul></blockquote><h3 id="k2-智能类型推断传播的变更" tabindex="-1">K2 智能类型推断传播的变更 <a class="header-anchor" href="#k2-智能类型推断传播的变更" aria-label="Permalink to &quot;K2 智能类型推断传播的变更&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KTLC-34" target="_blank" rel="noreferrer">KTLC-34</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：行为</p><p><strong>简要概述</strong>：K2 编译器改变了其智能类型推断传播的行为，为推断的变量（例如 <code>val x = y</code>）引入了双向类型信息传播。显式类型化变量（例如 <code>val x: T = y</code>）不再传播类型信息，确保更严格地遵循声明的类型。</p><p><strong>弃用周期</strong>：</p><ul><li>2.1.0：启用新行为</li></ul></blockquote><h3 id="纠正-java-子类中成员扩展属性覆盖的处理" tabindex="-1">纠正 Java 子类中成员扩展属性覆盖的处理 <a class="header-anchor" href="#纠正-java-子类中成员扩展属性覆盖的处理" aria-label="Permalink to &quot;纠正 Java 子类中成员扩展属性覆盖的处理&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KTLC-35" target="_blank" rel="noreferrer">KTLC-35</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：行为</p><p><strong>简要概述</strong>：Java 子类覆盖的成员扩展属性的 getter 现在在其子类作用域中被隐藏，使其行为与常规 Kotlin 属性对齐。</p><p><strong>弃用周期</strong>：</p><ul><li>2.1.0：启用新行为</li></ul></blockquote><h3 id="纠正-var-属性覆盖-protected-val-时-getter-和-setter-的可见性对齐" tabindex="-1">纠正 var 属性覆盖 protected val 时 getter 和 setter 的可见性对齐 <a class="header-anchor" href="#纠正-var-属性覆盖-protected-val-时-getter-和-setter-的可见性对齐" aria-label="Permalink to &quot;纠正 var 属性覆盖 protected val 时 getter 和 setter 的可见性对齐&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KTLC-36" target="_blank" rel="noreferrer">KTLC-36</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：二进制</p><p><strong>简要概述</strong>：现在，覆盖 <code>protected val</code> 属性的 <code>var</code> 属性的 getter 和 setter 的可见性是一致的，两者都继承被覆盖的 <code>val</code> 属性的可见性。</p><p><strong>弃用周期</strong>：</p><ul><li>2.1.0：在 K2 中强制执行 getter 和 setter 的一致可见性；K1 不受影响</li></ul></blockquote><h3 id="将-jspecify-可空性不匹配诊断的严重性提升为错误" tabindex="-1">将 JSpecify 可空性不匹配诊断的严重性提升为错误 <a class="header-anchor" href="#将-jspecify-可空性不匹配诊断的严重性提升为错误" aria-label="Permalink to &quot;将 JSpecify 可空性不匹配诊断的严重性提升为错误&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KTLC-11" target="_blank" rel="noreferrer">KTLC-11</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：源代码</p><p><strong>简要概述</strong>：来自 <code>org.jspecify.annotations</code> 的可空性不匹配，例如 <code>@NonNull</code>、<code>@Nullable</code> 和 <code>@NullMarked</code>，现在被视为错误而非警告，以强制执行更严格的 Java 互操作空安全。要调整这些诊断的严重性，请使用 <code>-Xnullability-annotations</code> 编译器选项。</p><p><strong>弃用周期</strong>：</p><ul><li>1.6.0：报告潜在可空性不匹配的警告</li><li>1.8.20：将警告扩展到特定的 JSpecify 注解，包括：<code>@Nullable</code>、<code>@NullnessUnspecified</code>、<code>@NullMarked</code>，以及 <code>org.jspecify.nullness</code> 中的旧版注解（JSpecify 0.2 及更早版本）</li><li>2.0.0：添加对 <code>@NonNull</code> 注解的支持</li><li>2.1.0：将 JSpecify 注解的默认模式更改为 <code>strict</code>，将警告转换为错误；使用 <code>-Xnullability-annotations=@org.jspecify.annotations:warning</code> 或 <code>-Xnullability-annotations=@org.jspecify.annotations:ignore</code> 来覆盖默认行为</li></ul></blockquote><h3 id="在模糊情况下-变更重载解析以优先考虑扩展函数而非-invoke-调用" tabindex="-1">在模糊情况下，变更重载解析以优先考虑扩展函数而非 invoke 调用 <a class="header-anchor" href="#在模糊情况下-变更重载解析以优先考虑扩展函数而非-invoke-调用" aria-label="Permalink to &quot;在模糊情况下，变更重载解析以优先考虑扩展函数而非 invoke 调用&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KTLC-37" target="_blank" rel="noreferrer">KTLC-37</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：行为</p><p><strong>简要概述</strong>：现在，在模糊情况下，重载解析始终优先考虑扩展函数而非 invoke 调用。这解决了局部函数和属性解析逻辑中的不一致问题。此变更仅在重新编译后生效，不影响预编译的二进制文件。</p><p><strong>弃用周期</strong>：</p><ul><li>2.1.0：变更重载解析以始终优先考虑具有匹配签名的扩展函数的 invoke 调用；此变更仅在重新编译后生效，不影响预编译的二进制文件</li></ul></blockquote><h3 id="禁止在-jdk-函数接口的-sam-构造函数中从-lambda-表达式返回可空值" tabindex="-1">禁止在 JDK 函数接口的 SAM 构造函数中从 lambda 表达式返回可空值 <a class="header-anchor" href="#禁止在-jdk-函数接口的-sam-构造函数中从-lambda-表达式返回可空值" aria-label="Permalink to &quot;禁止在 JDK 函数接口的 SAM 构造函数中从 lambda 表达式返回可空值&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KTLC-42" target="_blank" rel="noreferrer">KTLC-42</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：源代码</p><p><strong>简要概述</strong>：现在，如果在 JDK 函数接口的 SAM 构造函数中，从 lambda 表达式返回可空值，且指定类型实参为非空的，则会触发编译错误。这解决了可空性不匹配可能导致运行时异常的问题，从而确保了更严格的类型安全。</p><p><strong>弃用周期</strong>：</p><ul><li>2.0.0：报告关于 JDK 函数接口的 SAM 构造函数中可空返回值弃用警告</li><li>2.1.0：默认启用新行为</li></ul></blockquote><h3 id="纠正-kotlin-native-中私有成员与公共成员冲突的处理" tabindex="-1">纠正 Kotlin/Native 中私有成员与公共成员冲突的处理 <a class="header-anchor" href="#纠正-kotlin-native-中私有成员与公共成员冲突的处理" aria-label="Permalink to &quot;纠正 Kotlin/Native 中私有成员与公共成员冲突的处理&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KTLC-43" target="_blank" rel="noreferrer">KTLC-43</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：行为</p><p><strong>简要概述</strong>：在 Kotlin/Native 中，私有成员不再覆盖或与超类中的公共成员冲突，使其行为与 Kotlin/JVM 对齐。这解决了覆盖解析中的不一致性，并消除了由单独编译引起的意外行为。</p><p><strong>弃用周期</strong>：</p><ul><li>2.1.0：Kotlin/Native 中的私有函数和属性不再覆盖或影响超类中的公共成员，使其行为与 JVM 对齐</li></ul></blockquote><h3 id="禁止在公共内联函数中访问私有操作符函数" tabindex="-1">禁止在公共内联函数中访问私有操作符函数 <a class="header-anchor" href="#禁止在公共内联函数中访问私有操作符函数" aria-label="Permalink to &quot;禁止在公共内联函数中访问私有操作符函数&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KTLC-71" target="_blank" rel="noreferrer">KTLC-71</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：源代码</p><p><strong>简要概述</strong>：私有操作符函数，例如 <code>getValue()</code>、<code>setValue()</code>、<code>provideDelegate()</code>、<code>hasNext()</code> 和 <code>next()</code>，不能再在公共内联函数中访问。</p><p><strong>弃用周期</strong>：</p><ul><li>2.0.0：报告关于在公共内联函数中访问私有操作符函数弃用警告</li><li>2.1.0：将警告提升为错误</li></ul></blockquote><h3 id="禁止向带有-unsafevariance-注解的不型变形参传递无效实参" tabindex="-1">禁止向带有 @UnsafeVariance 注解的不型变形参传递无效实参 <a class="header-anchor" href="#禁止向带有-unsafevariance-注解的不型变形参传递无效实参" aria-label="Permalink to &quot;禁止向带有 @UnsafeVariance 注解的不型变形参传递无效实参&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KTLC-72" target="_blank" rel="noreferrer">KTLC-72</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：源代码</p><p><strong>简要概述</strong>：编译器现在在类型检测期间会忽略 <code>@UnsafeVariance</code> 注解，从而对不型变类型形参强制执行更严格的类型安全。这可以防止依赖 <code>@UnsafeVariance</code> 绕过预期类型检测的无效调用。</p><p><strong>弃用周期</strong>：</p><ul><li>2.1.0：激活新行为</li></ul></blockquote><h3 id="报告警告级别-java-类型的错误级别可空实参的空安全错误" tabindex="-1">报告警告级别 Java 类型的错误级别可空实参的空安全错误 <a class="header-anchor" href="#报告警告级别-java-类型的错误级别可空实参的空安全错误" aria-label="Permalink to &quot;报告警告级别 Java 类型的错误级别可空实参的空安全错误&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KTLC-100" target="_blank" rel="noreferrer">KTLC-100</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：源代码</p><p><strong>简要概述</strong>：编译器现在会检测 Java 方法中的可空性不匹配，即警告级别的可空类型包含具有更严格错误级别可空性的类型实参。这确保了之前在类型实参中被忽略的错误能被正确报告。</p><p><strong>弃用周期</strong>：</p><ul><li>2.0.0：报告关于 Java 方法中具有更严格类型实参的可空性不匹配弃用警告</li><li>2.1.0：将警告提升为错误</li></ul></blockquote><h3 id="报告对不可访问类型的隐式使用" tabindex="-1">报告对不可访问类型的隐式使用 <a class="header-anchor" href="#报告对不可访问类型的隐式使用" aria-label="Permalink to &quot;报告对不可访问类型的隐式使用&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KTLC-3" target="_blank" rel="noreferrer">KTLC-3</a></p><p><strong>组件</strong>：核心语言</p><p><strong>不兼容变更类型</strong>：源代码</p><p><strong>简要概述</strong>：编译器现在会报告函数字面量和类型实参中不可访问类型的使用，从而防止由于类型信息不完整导致的编译和运行时失败。</p><p><strong>弃用周期</strong>：</p><ul><li>2.0.0：报告关于参数或接收者为不可访问非泛型类型的函数字面量以及具有不可访问类型实参的类型警告；报告关于参数或接收者为不可访问泛型类型的函数字面量以及在特定场景下具有不可访问泛型类型实参的类型错误</li><li>2.1.0：将参数和接收者为不可访问非泛型类型的函数字面量的警告提升为错误</li><li>2.2.0：将具有不可访问类型实参的类型的警告提升为错误</li></ul></blockquote><h2 id="标准库" tabindex="-1">标准库 <a class="header-anchor" href="#标准库" aria-label="Permalink to &quot;标准库&quot;">​</a></h2><h3 id="弃用-char-和-string-的区域敏感大小写转换函数" tabindex="-1">弃用 Char 和 String 的区域敏感大小写转换函数 <a class="header-anchor" href="#弃用-char-和-string-的区域敏感大小写转换函数" aria-label="Permalink to &quot;弃用 Char 和 String 的区域敏感大小写转换函数&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-43023" target="_blank" rel="noreferrer">KT-43023</a></p><p><strong>组件</strong>：kotlin-stdlib</p><p><strong>不兼容变更类型</strong>：源代码</p><p><strong>简要概述</strong>：在其他 Kotlin 标准库 API 中，对 <code>Char</code> 和 <code>String</code> 进行区域敏感大小写转换的函数，例如 <code>Char.toUpperCase()</code> 和 <code>String.toLowerCase()</code>，已被弃用。请将其替换为区域无关的替代方案，例如 <code>String.lowercase()</code>，或明确指定区域以实现区域敏感行为，例如 <code>String.lowercase(Locale.getDefault())</code>。</p><p>有关 Kotlin 2.1.0 中已弃用的 Kotlin 标准库 API 的完整列表，请参见 <a href="https://youtrack.jetbrains.com/issue/KT-71628" target="_blank" rel="noreferrer">KT-71628</a>。</p><p><strong>弃用周期</strong>：</p><ul><li>1.4.30：引入区域无关的替代方案作为实验性 API</li><li>1.5.0：弃用区域敏感大小写转换函数并报告警告</li><li>2.1.0：将警告提升为错误</li></ul></blockquote><h3 id="移除-kotlin-stdlib-common-jar-构件" tabindex="-1">移除 kotlin-stdlib-common JAR 构件 <a class="header-anchor" href="#移除-kotlin-stdlib-common-jar-构件" aria-label="Permalink to &quot;移除 kotlin-stdlib-common JAR 构件&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-62159" target="_blank" rel="noreferrer">KT-62159</a></p><p><strong>组件</strong>：kotlin-stdlib</p><p><strong>不兼容变更类型</strong>：二进制</p><p><strong>简要概述</strong>：<code>kotlin-stdlib-common.jar</code> 构件曾用于旧版多平台声明元数据，现已弃用，并由 <code>.klib</code> 文件取代，后者是公共多平台声明元数据的标准格式。此变更不影响主要的 <code>kotlin-stdlib.jar</code> 或 <code>kotlin-stdlib-all.jar</code> 构件。</p><p><strong>弃用周期</strong>：</p><ul><li>2.1.0：弃用并移除 <code>kotlin-stdlib-common.jar</code> 构件</li></ul></blockquote><h3 id="弃用-appendln-转而使用-appendline" tabindex="-1">弃用 appendln()，转而使用 appendLine() <a class="header-anchor" href="#弃用-appendln-转而使用-appendline" aria-label="Permalink to &quot;弃用 appendln()，转而使用 appendLine()&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KTLC-27" target="_blank" rel="noreferrer">KTLC-27</a></p><p><strong>组件</strong>：kotlin-stdlib</p><p><strong>不兼容变更类型</strong>：源代码</p><p><strong>简要概述</strong>：<code>StringBuilder.appendln()</code> 已被弃用，转而使用 <code>StringBuilder.appendLine()</code>。</p><p><strong>弃用周期</strong>：</p><ul><li>1.4.0：<code>appendln()</code> 函数被弃用；使用时报告警告</li><li>2.1.0：将警告提升为错误</li></ul></blockquote><h3 id="弃用-kotlin-native-中与冻结相关的-api" tabindex="-1">弃用 Kotlin/Native 中与冻结相关的 API <a class="header-anchor" href="#弃用-kotlin-native-中与冻结相关的-api" aria-label="Permalink to &quot;弃用 Kotlin/Native 中与冻结相关的 API&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-69545" target="_blank" rel="noreferrer">KT-69545</a></p><p><strong>组件</strong>：kotlin-stdlib</p><p><strong>不兼容变更类型</strong>：源代码</p><p><strong>简要概述</strong>：Kotlin/Native 中与冻结相关的 API（之前已标记 <code>@FreezingIsDeprecated</code> 注解）现在已被弃用。这与引入新内存管理器保持一致，新管理器消除了为线程共享而冻结对象的需要。有关迁移详情，请参见 <a href="/kotlin/native-migration-guide#update-your-code">Kotlin/Native 迁移指南</a>。</p><p><strong>弃用周期</strong>：</p><ul><li>1.7.20：弃用与冻结相关的 API 并报告警告</li><li>2.1.0：将警告提升为错误</li></ul></blockquote><h3 id="变更-map-entry-行为-使其在结构性修改时快速失败" tabindex="-1">变更 Map.Entry 行为，使其在结构性修改时快速失败 <a class="header-anchor" href="#变更-map-entry-行为-使其在结构性修改时快速失败" aria-label="Permalink to &quot;变更 Map.Entry 行为，使其在结构性修改时快速失败&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KTLC-23" target="_blank" rel="noreferrer">KTLC-23</a></p><p><strong>组件</strong>：kotlin-stdlib</p><p><strong>不兼容变更类型</strong>：行为</p><p><strong>简要概述</strong>：在其关联的 map 被结构性修改后访问 <code>Map.Entry</code> 键值对现在会抛出 <code>ConcurrentModificationException</code>。</p><p><strong>弃用周期</strong>：</p><ul><li>2.1.0：检测到 map 结构性修改时抛出异常</li></ul></blockquote><h2 id="工具" tabindex="-1">工具 <a class="header-anchor" href="#工具" aria-label="Permalink to &quot;工具&quot;">​</a></h2><h3 id="弃用-kotlincompilationoutput-resourcesdirprovider" tabindex="-1">弃用 KotlinCompilationOutput#resourcesDirProvider <a class="header-anchor" href="#弃用-kotlincompilationoutput-resourcesdirprovider" aria-label="Permalink to &quot;弃用 KotlinCompilationOutput#resourcesDirProvider&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-69255" target="_blank" rel="noreferrer">KT-69255</a></p><p><strong>组件</strong>：Gradle</p><p><strong>不兼容变更类型</strong>：源代码</p><p><strong>简要概述</strong>：<code>KotlinCompilationOutput#resourcesDirProvider</code> 字段已弃用。请改用 Gradle 构建脚本中的 <code>KotlinSourceSet.resources</code> 来添加额外的资源目录。</p><p><strong>弃用周期</strong>：</p><ul><li>2.1.0：<code>KotlinCompilationOutput#resourcesDirProvider</code> 已弃用</li></ul></blockquote><h3 id="弃用-registerkotlinjvmcompiletask-taskname-modulename-函数" tabindex="-1">弃用 registerKotlinJvmCompileTask(taskName, moduleName) 函数 <a class="header-anchor" href="#弃用-registerkotlinjvmcompiletask-taskname-modulename-函数" aria-label="Permalink to &quot;弃用 registerKotlinJvmCompileTask(taskName, moduleName) 函数&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-69927" target="_blank" rel="noreferrer">KT-69927</a></p><p><strong>组件</strong>：Gradle</p><p><strong>不兼容变更类型</strong>：源代码</p><p><strong>简要概述</strong>：<code>registerKotlinJvmCompileTask(taskName, moduleName)</code> 函数已被弃用，转而使用新的 <code>registerKotlinJvmCompileTask(taskName, compilerOptions, explicitApiMode)</code> 函数，该函数现在接受 <code>KotlinJvmCompilerOptions</code>。这允许您传递一个 <code>compilerOptions</code> 实例（通常来自扩展或目标），其值用作任务选项的约定。</p><p><strong>弃用周期</strong>：</p><ul><li>2.1.0：<code>registerKotlinJvmCompileTask(taskName, moduleName)</code> 函数已被弃用</li></ul></blockquote><h3 id="弃用-registerkaptgeneratestubstask-taskname-函数" tabindex="-1">弃用 registerKaptGenerateStubsTask(taskName) 函数 <a class="header-anchor" href="#弃用-registerkaptgeneratestubstask-taskname-函数" aria-label="Permalink to &quot;弃用 registerKaptGenerateStubsTask(taskName) 函数&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-70383" target="_blank" rel="noreferrer">KT-70383</a></p><p><strong>组件</strong>：Gradle</p><p><strong>不兼容变更类型</strong>：源代码</p><p><strong>简要概述</strong>：<code>registerKaptGenerateStubsTask(taskName)</code> 函数已被弃用。请改用新的 <code>registerKaptGenerateStubsTask(compileTask, kaptExtension, explicitApiMode)</code> 函数。此新版本允许您将相关 <code>KotlinJvmCompile</code> 任务中的值作为约定链接，确保两个任务使用相同的选项集。</p><p><strong>弃用周期</strong>：</p><ul><li>2.1.0：<code>registerKaptGenerateStubsTask(taskName)</code> 函数已被弃用</li></ul></blockquote><h3 id="弃用-kotlintoplevelextension-和-kotlintoplevelextensionconfig-接口" tabindex="-1">弃用 KotlinTopLevelExtension 和 KotlinTopLevelExtensionConfig 接口 <a class="header-anchor" href="#弃用-kotlintoplevelextension-和-kotlintoplevelextensionconfig-接口" aria-label="Permalink to &quot;弃用 KotlinTopLevelExtension 和 KotlinTopLevelExtensionConfig 接口&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-71602" target="_blank" rel="noreferrer">KT-71602</a></p><p><strong>组件</strong>：Gradle</p><p><strong>不兼容变更类型</strong>：行为</p><p><strong>简要概述</strong>：<code>KotlinTopLevelExtension</code> 和 <code>KotlinTopLevelExtensionConfig</code> 接口已被弃用，转而使用新的 <code>KotlinTopLevelExtension</code> 接口。此接口合并了 <code>KotlinTopLevelExtensionConfig</code>、<code>KotlinTopLevelExtension</code> 和 <code>KotlinProjectExtension</code>，以简化 API 层次结构，并提供对 JVM 工具链和编译器属性的官方访问。</p><p><strong>弃用周期</strong>：</p><ul><li>2.1.0：<code>KotlinTopLevelExtension</code> 和 <code>KotlinTopLevelExtensionConfig</code> 接口已被弃用</li></ul></blockquote><h3 id="从构建运行时依赖项中移除-kotlin-compiler-embeddable" tabindex="-1">从构建运行时依赖项中移除 kotlin-compiler-embeddable <a class="header-anchor" href="#从构建运行时依赖项中移除-kotlin-compiler-embeddable" aria-label="Permalink to &quot;从构建运行时依赖项中移除 kotlin-compiler-embeddable&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-61706" target="_blank" rel="noreferrer">KT-61706</a></p><p><strong>组件</strong>：Gradle</p><p><strong>不兼容变更类型</strong>：源代码</p><p><strong>简要概述</strong>：<code>kotlin-compiler-embeddable</code> 依赖项已从 Kotlin Gradle 插件（KGP）的运行时中移除。所需模块现在直接包含在 KGP 构件中，Kotlin 语言版本限制为 2.0，以支持与 8.2 以下版本的 Gradle Kotlin 运行时兼容。</p><p><strong>弃用周期</strong>：</p><ul><li>2.1.0：报告关于使用 <code>kotlin-compiler-embeddable</code> 的警告</li><li>2.2.0：将警告提升为错误</li></ul></blockquote><h3 id="从-kotlin-gradle-插件-api-中隐藏编译器符号" tabindex="-1">从 Kotlin Gradle 插件 API 中隐藏编译器符号 <a class="header-anchor" href="#从-kotlin-gradle-插件-api-中隐藏编译器符号" aria-label="Permalink to &quot;从 Kotlin Gradle 插件 API 中隐藏编译器符号&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-70251" target="_blank" rel="noreferrer">KT-70251</a></p><p><strong>组件</strong>：Gradle</p><p><strong>不兼容变更类型</strong>：源代码</p><p><strong>简要概述</strong>：捆绑在 Kotlin Gradle 插件（KGP）中的编译器模块符号（例如 <code>KotlinCompilerVersion</code>）已从公共 API 中隐藏，以防止在构建脚本中意外访问。</p><p><strong>弃用周期</strong>：</p><ul><li>2.1.0：报告关于访问这些符号的警告</li><li>2.2.0：将警告提升为错误</li></ul></blockquote><h3 id="添加对多个稳定性配置文件支持" tabindex="-1">添加对多个稳定性配置文件支持 <a class="header-anchor" href="#添加对多个稳定性配置文件支持" aria-label="Permalink to &quot;添加对多个稳定性配置文件支持&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-68345" target="_blank" rel="noreferrer">KT-68345</a></p><p><strong>组件</strong>：Gradle</p><p><strong>不兼容变更类型</strong>：源代码</p><p><strong>简要概述</strong>：Compose 扩展中的 <code>stabilityConfigurationFile</code> 属性已被弃用，转而使用新的 <code>stabilityConfigurationFiles</code> 属性，后者允许指定多个配置文件。</p><p><strong>弃用周期</strong>：</p><ul><li>2.1.0：<code>stabilityConfigurationFile</code> 属性已被弃用</li></ul></blockquote><h3 id="移除已弃用的平台插件-id" tabindex="-1">移除已弃用的平台插件 ID <a class="header-anchor" href="#移除已弃用的平台插件-id" aria-label="Permalink to &quot;移除已弃用的平台插件 ID&quot;">​</a></h3><blockquote><p><strong>问题</strong>：<a href="https://youtrack.jetbrains.com/issue/KT-65565" target="_blank" rel="noreferrer">KT-65565</a></p><p><strong>组件</strong>：Gradle</p><p><strong>不兼容变更类型</strong>：源代码</p><p><strong>简要概述</strong>：对这些平台插件 ID 的支持已被移除：</p><ul><li><code>kotlin-platform-common</code></li><li><code>org.jetbrains.kotlin.platform.common</code></li></ul><p><strong>弃用周期</strong>：</p><ul><li>1.3：平台插件 ID 被弃用</li><li>2.1.0：平台插件 ID 不再受支持</li></ul></blockquote>',68)]))}const k=e(n,[["render",l]]);export{u as __pageData,k as default};
