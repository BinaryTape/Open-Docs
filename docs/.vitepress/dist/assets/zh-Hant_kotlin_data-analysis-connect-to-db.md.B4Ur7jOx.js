import{_ as i,c as a,o as n,ag as t}from"./chunks/framework.Bksy39di.js";const E=JSON.parse('{"title":"連接並從資料庫擷取資料","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/data-analysis-connect-to-db.md","filePath":"zh-Hant/kotlin/data-analysis-connect-to-db.md","lastUpdated":1754307826000}'),l={name:"zh-Hant/kotlin/data-analysis-connect-to-db.md"};function e(h,s,p,k,r,o){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="連接並從資料庫擷取資料" tabindex="-1">連接並從資料庫擷取資料 <a class="header-anchor" href="#連接並從資料庫擷取資料" aria-label="Permalink to &quot;連接並從資料庫擷取資料&quot;">​</a></h1><p><a href="/zh-Hant/kotlin/kotlin-notebook-overview">Kotlin Notebook</a> 提供了連接和從各種 SQL 資料庫（例如 MariaDB、PostgreSQL、MySQL 和 SQLite）擷取資料的功能。利用 <a href="https://kotlin.github.io/dataframe/gettingstarted.html" target="_blank" rel="noreferrer">Kotlin DataFrame 函式庫</a>，Kotlin Notebook 可以建立與資料庫的連接、執行 SQL 查詢，並匯入結果以進行後續操作。</p><p>如需詳細範例，請參閱 <a href="https://github.com/zaleslaw/KotlinDataFrame-SQL-Examples/blob/master/notebooks/imdb.ipynb" target="_blank" rel="noreferrer">KotlinDataFrame SQL 範例 GitHub 儲存庫中的 Notebook</a>。</p><h2 id="開始之前" tabindex="-1">開始之前 <a class="header-anchor" href="#開始之前" aria-label="Permalink to &quot;開始之前&quot;">​</a></h2><p>Kotlin Notebook 依賴於 <a href="https://plugins.jetbrains.com/plugin/16340-kotlin-notebook" target="_blank" rel="noreferrer">Kotlin Notebook 外掛程式</a>，該外掛程式預設情況下在 IntelliJ IDEA 中捆綁並啟用。</p><p>如果 Kotlin Notebook 功能不可用，請確保外掛程式已啟用。如需更多資訊，請參閱 <a href="/zh-Hant/kotlin/kotlin-notebook-set-up-env">設定環境</a>。</p><p>建立新的 Kotlin Notebook：</p><ol><li>選擇 <strong>檔案</strong> | <strong>新增</strong> | <strong>Kotlin Notebook</strong>。</li><li>確保您可以存取 SQL 資料庫，例如 MariaDB 或 MySQL。</li></ol><h2 id="連接資料庫" tabindex="-1">連接資料庫 <a class="header-anchor" href="#連接資料庫" aria-label="Permalink to &quot;連接資料庫&quot;">​</a></h2><p>您可以使用 <a href="https://kotlin.github.io/dataframe/gettingstarted.html" target="_blank" rel="noreferrer">Kotlin DataFrame 函式庫</a> 中的特定函式來連接和與 SQL 資料庫互動。您可以使用 <code>DatabaseConfiguration</code> 建立與資料庫的連接，並使用 <code>getSchemaForAllSqlTables()</code> 擷取其中所有資料表的綱要。</p><p>讓我們看一個範例：</p><ol><li><p>開啟您的 Kotlin Notebook 檔案 (<code>.ipynb</code>)。</p></li><li><p>新增 JDBC (Java 資料庫連接) 驅動程式的依賴項，並指定 JDBC 驅動程式版本。此範例使用 MariaDB：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">USE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.mariadb.jdbc:mariadb-java-client:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$version</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>匯入 Kotlin DataFrame 函式庫，這對於資料操作任務至關重要，同時匯入 SQL 連接和實用功能所需的 Java 函式庫：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">use dataframe</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> java.sql.DriverManager</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> java.util.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span></code></pre></div></li><li><p>使用 <code>DatabaseConfiguration</code> 類別定義資料庫的連接參數，包括 URL、使用者名稱和密碼：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> URL </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;YOUR_URL&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> USER_NAME </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;YOUR_USERNAME&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PASSWORD </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;YOUR_PASSWORD&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dbConfig </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DatabaseConfiguration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(URL, USER_NAME, PASSWORD)</span></span></code></pre></div></li><li><p>連接後，使用 <code>getSchemaForAllSqlTables()</code> 函式擷取並顯示資料庫中每個資料表的綱要資訊：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dataschemas </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DataFrame.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getSchemaForAllSqlTables</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dbConfig)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dataschemas.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;---Yet another table schema---&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(it)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>如需更多關於連接 SQL 資料庫的資訊，請參閱 <a href="https://kotlin.github.io/dataframe/readsqldatabases.html" target="_blank" rel="noreferrer">Kotlin DataFrame 文件中的「從 SQL 資料庫讀取」</a>。</p></div></li></ol><h2 id="擷取和操作資料" tabindex="-1">擷取和操作資料 <a class="header-anchor" href="#擷取和操作資料" aria-label="Permalink to &quot;擷取和操作資料&quot;">​</a></h2><p>在 <a href="#connect-to-database">建立與 SQL 資料庫的連接</a> 後，您可以使用 Kotlin Notebook 擷取和操作資料，並利用 Kotlin DataFrame 函式庫。您可以使用 <code>readSqlTable()</code> 函式擷取資料。要操作資料，您可以使用諸如 <a href="https://kotlin.github.io/dataframe/filter.html" target="_blank" rel="noreferrer"><code>filter</code></a>、<a href="https://kotlin.github.io/dataframe/groupby.html" target="_blank" rel="noreferrer"><code>groupBy</code></a> 和 <a href="https://kotlin.github.io/dataframe/convert.html" target="_blank" rel="noreferrer"><code>convert</code></a> 等方法。</p><p>讓我們看一個連接到 IMDB 資料庫並擷取昆汀·塔倫提諾導演電影資料的範例：</p><ol><li><p>使用 <code>readSqlTable()</code> 函式從「movies」資料表擷取資料，並設定 <code>limit</code> 以限制查詢只讀取前 100 筆記錄，以提高效率：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dfs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DataFrame.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readSqlTable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dbConfig, tableName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;movies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, limit </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></li><li><p>使用 SQL 查詢擷取與昆汀·塔倫提諾導演電影相關的特定資料集。此查詢選取電影詳細資訊並組合每部電影的類型：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> props </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Properties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">props.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, USER_NAME)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">props.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;password&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, PASSWORD)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TARANTINO_FILMS_SQL_QUERY </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    SELECT name, year, rank, GROUP_CONCAT(genre) as &quot;genres&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    FROM movies JOIN movies_directors ON movie_id = movies.id</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    JOIN directors ON directors.id=director_id LEFT JOIN movies_genres ON movies.id = movies_genres.movie_id</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    WHERE directors.first_name = &quot;Quentin&quot; AND directors.last_name = &quot;Tarantino&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    GROUP BY name, year, rank</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    ORDER BY year</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 擷取昆汀·塔倫提諾的電影列表，包括其名稱、年份、排名以及所有類型的串聯字串。結果按名稱、年份、排名分組，並按年份排序。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dfTarantinoMovies: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DataFrame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;*&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DriverManager.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getConnection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(URL, props).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { connection </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   connection.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createStatement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { st </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      st.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">executeQuery</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(TARANTINO_FILMS_SQL_QUERY).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { rs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">         val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dfTarantinoFilmsSchema </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DataFrame.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getSchemaForResultSet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rs, connection)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         dfTarantinoFilmsSchema.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         dfTarantinoMovies </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DataFrame.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readResultSet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rs, connection)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         dfTarantinoMovies</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>擷取塔倫提諾電影資料集後，您可以進一步操作和篩選資料。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> df </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dfTarantinoMovies</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 將「year」欄位中的任何缺失值替換為 0。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fillNA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { year }.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 將「year」欄位轉換為整數。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">convert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { year }.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 過濾資料以僅包含 2000 年之後發行的電影。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { year </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">df</span></span></code></pre></div></li></ol><p>最終輸出的結果是一個 DataFrame，其中「year」欄位中的缺失值使用 <a href="https://kotlin.github.io/dataframe/fill.html#fillna" target="_blank" rel="noreferrer"><code>fillNA</code></a> 方法替換為 0。 「year」欄位使用 <a href="https://kotlin.github.io/dataframe/convert.html" target="_blank" rel="noreferrer"><code>convert</code></a> 方法轉換為整數值，並且資料使用 <a href="https://kotlin.github.io/dataframe/filter.html" target="_blank" rel="noreferrer"><code>filter</code></a> 方法過濾為僅包含 2000 年及之後的資料列。</p><h2 id="在-kotlin-notebook-中分析資料" tabindex="-1">在 Kotlin Notebook 中分析資料 <a class="header-anchor" href="#在-kotlin-notebook-中分析資料" aria-label="Permalink to &quot;在 Kotlin Notebook 中分析資料&quot;">​</a></h2><p>在 <a href="#connect-to-database">建立與 SQL 資料庫的連接</a> 後，您可以使用 Kotlin Notebook 進行深度資料分析，並利用 <a href="https://kotlin.github.io/dataframe/gettingstarted.html" target="_blank" rel="noreferrer">Kotlin DataFrame 函式庫</a>。這包括用於分組、排序和聚合資料的函式，幫助您揭示和理解資料中的模式。</p><p>讓我們深入探討一個範例，該範例涉及分析電影資料庫中的演員資料，重點關注演員最常見的名字：</p><ol><li><p>使用 <a href="https://kotlin.github.io/dataframe/readsqldatabases.html#reading-specific-tables" target="_blank" rel="noreferrer"><code>readSqlTable()</code></a> 函式從「actors」資料表擷取資料：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> actorDf </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DataFrame.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readSqlTable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dbConfig, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;actors&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></li><li><p>處理擷取的資料以識別前 20 個最常見的演員名字。此分析涉及多種 DataFrame 方法：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> top20ActorNames </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> actorDf</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 根據 first_name 欄位對資料進行分組，以根據演員名字進行組織。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">groupBy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { first_name }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 計算每個唯一名字的出現次數，提供頻率分佈。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 按計數的降序對結果進行排序，以識別最常見的名稱。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sortByDesc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;count&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 選取前 20 個最常見的名稱進行分析。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">take</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">top20ActorNames</span></span></code></pre></div></li></ol><h2 id="下一步" tabindex="-1">下一步 <a class="header-anchor" href="#下一步" aria-label="Permalink to &quot;下一步&quot;">​</a></h2><ul><li>探索使用 <a href="https://kotlin.github.io/kandy/examples.html" target="_blank" rel="noreferrer">Kandy 函式庫</a> 進行資料視覺化</li><li>在 <a href="/zh-Hant/kotlin/data-analysis-visualization">使用 Kandy 在 Kotlin Notebook 中進行資料視覺化</a> 中找到有關資料視覺化的更多資訊</li><li>如需有關 Kotlin 中用於資料科學和分析的工具和資源的廣泛概述，請參閱 <a href="/zh-Hant/kotlin/data-analysis-libraries">Kotlin 和 Java 資料分析函式庫</a></li></ul>`,23)]))}const g=i(l,[["render",e]]);export{E as __pageData,g as default};
