import{_ as d,C as o,c as n,o as c,j as a,G as t,ag as s,a as r}from"./chunks/framework.Bksy39di.js";const _=JSON.parse('{"title":"コンパイル時間短縮のヒント","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/native-improving-compilation-time.md","filePath":"ja/kotlin/native-improving-compilation-time.md","lastUpdated":1754307826000}'),p={name:"ja/kotlin/native-improving-compilation-time.md"};function h(u,e,m,b,g,k){const l=o("show-structure"),i=o("TopicTitle");return c(),n("div",null,[e[0]||(e[0]=a("h1",{id:"コンパイル時間短縮のヒント",tabindex:"-1"},[r("コンパイル時間短縮のヒント "),a("a",{class:"header-anchor",href:"#コンパイル時間短縮のヒント","aria-label":'Permalink to "コンパイル時間短縮のヒント"'},"​")],-1)),t(l,{depth:"1"}),e[1]||(e[1]=s(`<p>Kotlin/Nativeコンパイラは、そのパフォーマンスを向上させるための更新を常に受けています。最新のKotlin/Nativeコンパイラと適切に設定されたビルド環境があれば、Kotlin/Nativeターゲットを持つプロジェクトのコンパイル時間を大幅に改善できます。</p><p>Kotlin/Nativeのコンパイルプロセスを高速化するためのヒントを続けてお読みください。</p><h2 id="一般的な推奨事項" tabindex="-1">一般的な推奨事項 <a class="header-anchor" href="#一般的な推奨事項" aria-label="Permalink to &quot;一般的な推奨事項&quot;">​</a></h2><h3 id="最新バージョンのkotlinを使用する" tabindex="-1">最新バージョンのKotlinを使用する <a class="header-anchor" href="#最新バージョンのkotlinを使用する" aria-label="Permalink to &quot;最新バージョンのKotlinを使用する&quot;">​</a></h3><p>これにより、常に最新のパフォーマンス改善が得られます。最新のKotlinバージョンは 2.2.10 です。</p><h3 id="巨大なクラスの作成を避ける" tabindex="-1">巨大なクラスの作成を避ける <a class="header-anchor" href="#巨大なクラスの作成を避ける" aria-label="Permalink to &quot;巨大なクラスの作成を避ける&quot;">​</a></h3><p>コンパイルに時間がかかり、実行時にロードされる巨大なクラスの作成は避けるようにしてください。</p><h3 id="ビルド間でダウンロード済みおよびキャッシュされたコンポーネントを保持する" tabindex="-1">ビルド間でダウンロード済みおよびキャッシュされたコンポーネントを保持する <a class="header-anchor" href="#ビルド間でダウンロード済みおよびキャッシュされたコンポーネントを保持する" aria-label="Permalink to &quot;ビルド間でダウンロード済みおよびキャッシュされたコンポーネントを保持する&quot;">​</a></h3><p>プロジェクトをコンパイルする際、Kotlin/Nativeは必要なコンポーネントをダウンロードし、その作業結果の一部を<code>$USER_HOME/.konan</code>ディレクトリにキャッシュします。コンパイラはこのディレクトリを以降のコンパイルに使用し、完了にかかる時間を短縮します。</p><p>コンテナ（Dockerなど）または継続的インテグレーションシステムでビルドを行う場合、コンパイラはビルドごとに<code>~/.konan</code>ディレクトリをゼロから作成する必要があるかもしれません。この手順を避けるには、ビルド間で<code>~/.konan</code>を保持するように環境を設定してください。たとえば、<code>kotlin.data.dir</code> Gradleプロパティを使用してその場所を再定義します。</p><p>あるいは、<code>-Xkonan-data-dir</code>コンパイラオプションを使用して、<code>cinterop</code>および<code>konanc</code>ツール経由でディレクトリへのカスタムパスを設定できます。</p><h2 id="gradle設定" tabindex="-1">Gradle設定 <a class="header-anchor" href="#gradle設定" aria-label="Permalink to &quot;Gradle設定&quot;">​</a></h2><p>Gradleでの最初のコンパイルは、依存関係のダウンロード、キャッシュの構築、および追加の手順の実行が必要なため、通常は後続のコンパイルよりも時間がかかります。実際のコンパイル時間を正確に把握するには、プロジェクトを少なくとも2回ビルドする必要があります。</p><p>以下に、コンパイルパフォーマンスを向上させるためのGradle設定の推奨事項を示します。</p><h3 id="gradleヒープサイズの増加" tabindex="-1">Gradleヒープサイズの増加 <a class="header-anchor" href="#gradleヒープサイズの増加" aria-label="Permalink to &quot;Gradleヒープサイズの増加&quot;">​</a></h3><p><a href="https://docs.gradle.org/current/userguide/performance.html#adjust_the_daemons_heap_size" target="_blank" rel="noreferrer">Gradleヒープサイズ</a>を増やすには、<code>gradle.properties</code>ファイルに<code>org.gradle.jvmargs=-Xmx3g</code>を追加します。</p><p><a href="https://docs.gradle.org/current/userguide/performance.html#parallel_execution" target="_blank" rel="noreferrer">並列ビルド</a>を使用する場合、<code>org.gradle.workers.max</code>プロパティまたは<code>--max-workers</code>コマンドラインオプションを使用して適切なワーカー数を選択する必要があるかもしれません。デフォルト値はCPUプロセッサの数です。</p><h3 id="必要なバイナリのみをビルドする" tabindex="-1">必要なバイナリのみをビルドする <a class="header-anchor" href="#必要なバイナリのみをビルドする" aria-label="Permalink to &quot;必要なバイナリのみをビルドする&quot;">​</a></h3><p>本当に必要な場合を除き、<code>build</code>や<code>assemble</code>など、プロジェクト全体をビルドするGradleタスクを実行しないでください。これらのタスクは同じコードを複数回ビルドするため、コンパイル時間が増加します。IntelliJ IDEAからテストを実行したり、Xcodeからアプリを起動したりするような一般的なケースでは、Kotlinツールは不要なタスクの実行を回避します。</p><p>一般的でないケースやビルド設定の場合、タスクを自分で選択する必要があるかもしれません。</p><ul><li><code>linkDebug*</code>。開発中にコードを実行する場合、通常は1つのバイナリのみが必要なため、対応する<code>linkDebug*</code>タスクを実行するだけで十分なはずです。</li><li><code>embedAndSignAppleFrameworkForXcode</code>。iOSシミュレータとデバイスは異なるプロセッサアーキテクチャを持っているため、Kotlin/Nativeバイナリをユニバーサル（fat）フレームワークとして配布するのが一般的なアプローチです。 ただし、ローカル開発中は、使用しているプラットフォーム専用の<code>.framework</code>ファイルをビルドする方が高速です。プラットフォーム固有のフレームワークをビルドするには、<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-direct-integration.html#connect-the-framework-to-your-project" target="_blank" rel="noreferrer">embedAndSignAppleFrameworkForXcode</a>タスクを使用します。</li></ul><h3 id="必要なターゲットのみをビルドする" tabindex="-1">必要なターゲットのみをビルドする <a class="header-anchor" href="#必要なターゲットのみをビルドする" aria-label="Permalink to &quot;必要なターゲットのみをビルドする&quot;">​</a></h3><p>上記の推奨事項と同様に、すべてのネイティブプラットフォーム用のバイナリを一度にビルドしないでください。たとえば、<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-build-native-binaries.html#build-xcframeworks" target="_blank" rel="noreferrer">XCFramework</a>をコンパイルする（<code>*XCFramework</code>タスクを使用する）と、すべてのターゲットに対して同じコードがビルドされ、単一ターゲットのビルドよりも比例して多くの時間がかかります。</p><p>もしセットアップにXCFrameworkが必要な場合でも、ターゲットの数を減らすことができます。たとえば、IntelベースのMac上のiOSシミュレータでこのプロジェクトを実行しない場合、<code>iosX64</code>は必要ありません。</p><blockquote style=""><p>異なるターゲットのバイナリは、<code>linkDebug*$Target</code> および <code>linkRelease*$Target</code> Gradleタスクでビルドされます。実行されたタスクは、ビルドログ、または<code>--scan</code>オプションを付けてGradleビルドを実行することで<a href="https://docs.gradle.org/current/userguide/build_scans.html" target="_blank" rel="noreferrer">Gradleビルドスキャン</a>で確認できます。</p></blockquote><h3 id="不要なリリースバイナリをビルドしない" tabindex="-1">不要なリリースバイナリをビルドしない <a class="header-anchor" href="#不要なリリースバイナリをビルドしない" aria-label="Permalink to &quot;不要なリリースバイナリをビルドしない&quot;">​</a></h3><p>Kotlin/Nativeは、<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-build-native-binaries.html#declare-binaries" target="_blank" rel="noreferrer">デバッグモードとリリースモード</a>の2つのビルドモードをサポートしています。リリースは高度に最適化されており、これには多くの時間がかかります。リリースバイナリのコンパイルは、デバッグバイナリよりも桁違いに時間がかかります。</p><p>実際のリリースを除けば、これらの最適化はすべて、通常の開発サイクルでは不要な場合があります。開発プロセス中に名前に<code>Release</code>を含むタスクを使用している場合は、<code>Debug</code>に置き換えることを検討してください。同様に、<code>assembleXCFramework</code>を実行する代わりに、たとえば<code>assembleSharedDebugXCFramework</code>を実行できます。</p><blockquote style=""><p>リリースバイナリは<code>linkRelease*</code> Gradleタスクでビルドされます。ビルドログ、または<code>--scan</code>オプションを付けてGradleビルドを実行することで<a href="https://docs.gradle.org/current/userguide/build_scans.html" target="_blank" rel="noreferrer">Gradleビルドスキャン</a>でそれらを確認できます。</p></blockquote><h3 id="gradleデーモンを無効にしない" tabindex="-1">Gradleデーモンを無効にしない <a class="header-anchor" href="#gradleデーモンを無効にしない" aria-label="Permalink to &quot;Gradleデーモンを無効にしない&quot;">​</a></h3><p>正当な理由がない限り、<a href="https://docs.gradle.org/current/userguide/gradle_daemon.html" target="_blank" rel="noreferrer">Gradleデーモン</a>を無効にしないでください。デフォルトでは、<a href="https://blog.jetbrains.com/kotlin/2020/03/kotlin-1-3-70-released/#kotlin-native" target="_blank" rel="noreferrer">Kotlin/NativeはGradleデーモンから実行されます</a>。有効になっている場合、同じJVMプロセスが使用され、コンパイルごとにウォームアップする必要はありません。</p><h3 id="推移的エクスポートを使用しない" tabindex="-1">推移的エクスポートを使用しない <a class="header-anchor" href="#推移的エクスポートを使用しない" aria-label="Permalink to &quot;推移的エクスポートを使用しない&quot;">​</a></h3><p><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-build-native-binaries.html#export-dependencies-to-binaries" target="_blank" rel="noreferrer"><code>transitiveExport = true</code></a>を使用すると、多くの場合、デッドコードエリミネーションが無効になり、コンパイラは大量の未使用コードを処理する必要があります。これによりコンパイル時間が増加します。代わりに、必要なプロジェクトと依存関係をエクスポートするには、<code>export</code>メソッドを明示的に使用してください。</p><h3 id="モジュールを過度にエクスポートしない" tabindex="-1">モジュールを過度にエクスポートしない <a class="header-anchor" href="#モジュールを過度にエクスポートしない" aria-label="Permalink to &quot;モジュールを過度にエクスポートしない&quot;">​</a></h3><p>不要な<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-build-native-binaries.html#export-dependencies-to-binaries" target="_blank" rel="noreferrer">モジュールエクスポート</a>は避けるようにしてください。エクスポートされた各モジュールは、コンパイル時間とバイナリサイズに悪影響を及ぼします。</p><h3 id="gradleビルドキャッシュを使用する" tabindex="-1">Gradleビルドキャッシュを使用する <a class="header-anchor" href="#gradleビルドキャッシュを使用する" aria-label="Permalink to &quot;Gradleビルドキャッシュを使用する&quot;">​</a></h3><p>Gradleの<a href="https://docs.gradle.org/current/userguide/build_cache.html" target="_blank" rel="noreferrer">ビルドキャッシュ</a>機能を有効にします。</p><ul><li><strong>ローカルビルドキャッシュ</strong>。ローカルキャッシュの場合、<code>gradle.properties</code>ファイルに<code>org.gradle.caching=true</code>を追加するか、コマンドラインで<code>--build-cache</code>オプションを付けてビルドを実行します。</li><li><strong>リモートビルドキャッシュ</strong>。継続的インテグレーション環境向けに<a href="https://docs.gradle.org/current/userguide/build_cache.html#sec:build_cache_configure_remote" target="_blank" rel="noreferrer">リモートビルドキャッシュを設定する方法</a>を学習してください。</li></ul><h3 id="gradleコンフィギュレーションキャッシュを使用する" tabindex="-1">Gradleコンフィギュレーションキャッシュを使用する <a class="header-anchor" href="#gradleコンフィギュレーションキャッシュを使用する" aria-label="Permalink to &quot;Gradleコンフィギュレーションキャッシュを使用する&quot;">​</a></h3><p>Gradleの<a href="https://docs.gradle.org/current/userguide/configuration_cache.html" target="_blank" rel="noreferrer">コンフィギュレーションキャッシュ</a>を使用するには、<code>gradle.properties</code>ファイルに<code>org.gradle.configuration-cache=true</code>を追加します。</p><blockquote style=""><p>コンフィギュレーションキャッシュは、<code>link*</code>タスクの並列実行も可能にします。これにより、特に多くのCPUコアを持つマシンで負荷が大きくなる可能性があります。この問題は<a href="https://youtrack.jetbrains.com/issue/KT-70915" target="_blank" rel="noreferrer">KT-70915</a>で修正される予定です。</p></blockquote><h3 id="以前に無効にした機能を有効にする" tabindex="-1">以前に無効にした機能を有効にする <a class="header-anchor" href="#以前に無効にした機能を有効にする" aria-label="Permalink to &quot;以前に無効にした機能を有効にする&quot;">​</a></h3><p>Gradleデーモンとコンパイラキャッシュを無効にするKotlin/Nativeプロパティがあります。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.native.disableCompilerDaemon=true</span></span>
<span class="line"><span>kotlin.native.cacheKind=none</span></span>
<span class="line"><span>kotlin.native.cacheKind.$target=none</span></span></code></pre></div><p>ここで<code>$target</code>はKotlin/Nativeのコンパイルターゲットです（例: <code>iosSimulatorArm64</code>）。</p><p>以前にこれらの機能で問題があり、<code>gradle.properties</code>ファイルまたはGradle引数にこれらの行を追加した場合は、それらを削除してビルドが正常に完了するかどうかを確認してください。これらのプロパティは、以前にすでに修正された問題を回避するために追加された可能性があります。</p><h3 id="klibアーティファクトのインクリメンタルコンパイルを試す" tabindex="-1">klibアーティファクトのインクリメンタルコンパイルを試す <a class="header-anchor" href="#klibアーティファクトのインクリメンタルコンパイルを試す" aria-label="Permalink to &quot;klibアーティファクトのインクリメンタルコンパイルを試す&quot;">​</a></h3><p>インクリメンタルコンパイルでは、プロジェクトモジュールによって生成された<code>klib</code>アーティファクトの一部のみが変更された場合、<code>klib</code>の一部だけがバイナリに再コンパイルされます。</p><p>この機能は<a href="/ja/kotlin/components-stability#stability-levels-explained">Experimental</a>です。これを有効にするには、<code>gradle.properties</code>ファイルに<code>kotlin.incremental.native=true</code>オプションを追加します。問題が発生した場合は、<a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrackでissueを作成</a>してください。</p><h2 id="windows設定" tabindex="-1">Windows設定 <a class="header-anchor" href="#windows設定" aria-label="Permalink to &quot;Windows設定&quot;">​</a></h2><p>WindowsセキュリティはKotlin/Nativeコンパイラの動作を遅くする可能性があります。これを回避するには、デフォルトで<code>%\\USERPROFILE%</code>にある<code>.konan</code>ディレクトリをWindowsセキュリティの除外に追加します。<a href="https://support.microsoft.com/en-us/windows/add-an-exclusion-to-windows-security-811816c0-4dfd-af4a-47e4-c301afe13b26" target="_blank" rel="noreferrer">Windowsセキュリティに除外を追加する方法</a>を学習してください。</p>`,51)),t(i,{id:"llvm設定",level:"2",title:"LLVM設定",labelRef:"advanced"}),e[2]||(e[2]=a("p",null,[r("上記のヒントがコンパイル時間の改善に役立たなかった場合は、"),a("a",{href:"/ja/kotlin/native-llvm-passes"},"LLVMバックエンドのカスタマイズ"),r("を検討してください。")],-1))])}const v=d(p,[["render",h]]);export{_ as __pageData,v as default};
