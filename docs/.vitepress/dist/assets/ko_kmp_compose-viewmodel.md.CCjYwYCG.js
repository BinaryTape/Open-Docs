import{_ as i,c as a,o as e,ag as l}from"./chunks/framework.Bksy39di.js";const c=JSON.parse('{"title":"공통 ViewModel","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kmp/compose-viewmodel.md","filePath":"ko/kmp/compose-viewmodel.md","lastUpdated":1755516278000}'),n={name:"ko/kmp/compose-viewmodel.md"};function t(p,s,h,k,o,d){return e(),a("div",null,s[0]||(s[0]=[l(`<h1 id="공통-viewmodel" tabindex="-1">공통 ViewModel <a class="header-anchor" href="#공통-viewmodel" aria-label="Permalink to &quot;공통 ViewModel&quot;">​</a></h1><p>UI를 구축하는 Android <a href="https://developer.android.com/topic/libraries/architecture/viewmodel" target="_blank" rel="noreferrer">ViewModel</a> 접근 방식은 Compose Multiplatform를 사용하여 공통 코드에서 구현할 수 있습니다.</p><h2 id="프로젝트에-공통-viewmodel-추가하기" tabindex="-1">프로젝트에 공통 ViewModel 추가하기 <a class="header-anchor" href="#프로젝트에-공통-viewmodel-추가하기" aria-label="Permalink to &quot;프로젝트에 공통 ViewModel 추가하기&quot;">​</a></h2><p>멀티플랫폼 <code>ViewModel</code> 구현을 사용하려면 <code>commonMain</code> 소스 세트에 다음 의존성을 추가하세요:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        commonMain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.androidx.lifecycle:lifecycle-viewmodel-compose:2.9.2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="공통-코드에서-viewmodel-사용하기" tabindex="-1">공통 코드에서 ViewModel 사용하기 <a class="header-anchor" href="#공통-코드에서-viewmodel-사용하기" aria-label="Permalink to &quot;공통 코드에서 ViewModel 사용하기&quot;">​</a></h2><p>Compose Multiplatform는 공통 <code>ViewModelStoreOwner</code> 인터페이스를 구현하므로, 일반적으로 공통 코드에서 <code>ViewModel</code> 클래스를 사용하는 것은 Android의 모범 사례와 크게 다르지 않습니다.</p><p><a href="https://github.com/JetBrains/compose-multiplatform/tree/0e38f58b42d23ff6d0ad30b119d34fa1cd6ccedb/examples/nav_cupcake" target="_blank" rel="noreferrer">내비게이션 예제</a>를 사용한 예시입니다:</p><ol><li>ViewModel 클래스 선언:</li></ol><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> androidx.lifecycle.ViewModel</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> androidx.lifecycle.viewmodel.compose.viewModel</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OrderViewModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ViewModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _uiState </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MutableStateFlow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OrderUiState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pickupOptions </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> pickupOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uiState: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">StateFlow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OrderUiState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _uiState.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">asStateFlow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ol start="2"><li>컴포저블 함수에 ViewModel 추가:</li></ol><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Composable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CupcakeApp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   viewModel: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OrderViewModel</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> viewModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OrderViewModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>ViewModel에서 코루틴을 실행할 때, <code>ViewModel.viewModelScope</code> 값은 <code>Dispatchers.Main.immediate</code> 값에 연결되어 있으며, 이 값은 기본적으로 데스크톱에서 사용하지 못할 수 있다는 점을 기억하세요. ViewModel 코루틴이 Compose Multiplatform에서 올바르게 작동하려면 프로젝트에 <code>kotlinx-coroutines-swing</code> 의존성을 추가하세요. 자세한 내용은 <a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-main.html" target="_blank" rel="noreferrer"><code>Dispatchers.Main</code> 문서</a>를 참조하세요.</p></div><p>비 JVM 플랫폼에서는 타입 리플렉션을 사용하여 객체를 인스턴스화할 수 없습니다. 따라서 공통 코드에서는 매개변수 없이 <code>viewModel()</code> 함수를 호출할 수 없습니다. <code>ViewModel</code> 인스턴스를 생성할 때마다 최소한 초기화 람다를 인수로 제공해야 합니다.</p><p>초기화 람다만 제공하는 경우, 라이브러리는 내부적으로 기본 팩토리를 생성합니다. 하지만 <a href="https://developer.android.com/topic/libraries/architecture/viewmodel#jetpack-compose" target="_blank" rel="noreferrer">Jetpack Compose</a>에서와 마찬가지로, 사용자 정의 팩토리를 구현하고 공통 <code>viewModel(...)</code> 함수의 더 명시적인 버전을 호출할 수 있습니다.</p>`,15)]))}const E=i(n,[["render",t]]);export{c as __pageData,E as default};
