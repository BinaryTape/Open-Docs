import{_ as s,a,b as t,c as e,d as l}from"./chunks/refined-data.Bho3Y6Lq.js";import{_ as n,c as h,o as p,ag as k}from"./chunks/framework.Bksy39di.js";const u=JSON.parse('{"title":"ファイルからデータを取得する","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/data-analysis-work-with-data-sources.md","filePath":"ja/kotlin/data-analysis-work-with-data-sources.md","lastUpdated":1754307826000}'),o={name:"ja/kotlin/data-analysis-work-with-data-sources.md"};function r(d,i,E,g,c,y){return p(),h("div",null,i[0]||(i[0]=[k(`<h1 id="ファイルからデータを取得する" tabindex="-1">ファイルからデータを取得する <a class="header-anchor" href="#ファイルからデータを取得する" aria-label="Permalink to &quot;ファイルからデータを取得する&quot;">​</a></h1><p><a href="/ja/kotlin/kotlin-notebook-overview">Kotlin Notebook</a>は、<a href="https://kotlin.github.io/dataframe/gettingstarted.html" target="_blank" rel="noreferrer">Kotlin DataFrameライブラリ</a>と組み合わせることで、非構造化データと構造化データの両方を扱えるようになります。この組み合わせにより、TXTファイルのような非構造化データを構造化データセットに変換する柔軟性が得られます。</p><p>データ変換には、<a href="https://kotlin.github.io/dataframe/adddf.html" target="_blank" rel="noreferrer"><code>add</code></a>、<a href="https://kotlin.github.io/dataframe/split.html" target="_blank" rel="noreferrer"><code>split</code></a>、<a href="https://kotlin.github.io/dataframe/convert.html" target="_blank" rel="noreferrer"><code>convert</code></a>、<a href="https://kotlin.github.io/dataframe/parse.html" target="_blank" rel="noreferrer"><code>parse</code></a>などのメソッドを使用できます。さらに、このツールセットを使用すると、CSV、JSON、XLS、XLSX、Apache Arrowなど、さまざまな構造化ファイル形式からデータを取得および操作できます。</p><p>このガイドでは、複数の例を通して、データの取得、整形、処理の方法を学ぶことができます。</p><h2 id="開始する前に" tabindex="-1">開始する前に <a class="header-anchor" href="#開始する前に" aria-label="Permalink to &quot;開始する前に&quot;">​</a></h2><p>Kotlin Notebookは、<a href="https://plugins.jetbrains.com/plugin/16340-kotlin-notebook" target="_blank" rel="noreferrer">Kotlin Notebookプラグイン</a>に依存しており、このプラグインはIntelliJ IDEAにデフォルトでバンドルされ、有効化されています。</p><p>Kotlin Notebookの機能が利用できない場合は、プラグインが有効になっていることを確認してください。詳細については、<a href="/ja/kotlin/kotlin-notebook-set-up-env">環境をセットアップする</a>を参照してください。</p><p>新しいKotlin Notebookを作成する:</p><ol><li><p><strong>File</strong> | <strong>New</strong> | <strong>Kotlin Notebook</strong> を選択します。</p></li><li><p>Kotlin Notebookで、次のコマンドを実行してKotlin DataFrameライブラリをインポートします:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">use dataframe</span></span></code></pre></div></li></ol><h2 id="ファイルからデータを取得する-1" tabindex="-1">ファイルからデータを取得する <a class="header-anchor" href="#ファイルからデータを取得する-1" aria-label="Permalink to &quot;ファイルからデータを取得する&quot;">​</a></h2><p>Kotlin Notebookでファイルからデータを取得するには:</p><ol><li>Kotlin Notebookファイル（<code>.ipynb</code>）を開きます。</li><li>ノートブックの先頭にあるコードセルに <code>%use dataframe</code> を追加して、Kotlin DataFrameライブラリをインポートします。<div class="note custom-block"><p class="custom-block-title">NOTE</p><p><code>%use dataframe</code> の行があるコードセルは、Kotlin DataFrameライブラリに依存する他のコードセルを実行する前に必ず実行してください。</p></div></li><li>Kotlin DataFrameライブラリの <a href="https://kotlin.github.io/dataframe/read.html" target="_blank" rel="noreferrer"><code>.read()</code></a> 関数を使用してデータを取得します。たとえば、CSVファイルを読み込むには <code>DataFrame.read(&quot;example.csv&quot;)</code> を使用します。</li></ol><p><code>.read()</code> 関数は、ファイル拡張子とコンテンツに基づいて入力形式を自動的に検出します。また、<code>delimiter = &#39;;&#39;</code> で区切り文字を指定するなど、関数をカスタマイズするための他の引数を追加することもできます。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>追加のファイル形式とさまざまな読み込み関数の詳細については、<a href="https://kotlin.github.io/dataframe/read.html" target="_blank" rel="noreferrer">Kotlin DataFrameライブラリのドキュメント</a>を参照してください。</p></div><h2 id="データを表示する" tabindex="-1">データを表示する <a class="header-anchor" href="#データを表示する" aria-label="Permalink to &quot;データを表示する&quot;">​</a></h2><p>ノートブックに<a href="#retrieve-data-from-a-file">データを取り込んだら</a>、次のコードセルを実行することで、簡単に変数に保存してアクセスできます:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dfJson </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DataFrame.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jsonFile.json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dfJson</span></span></code></pre></div><p>このコードは、CSV、JSON、XLS、XLSX、Apache Arrowなど、選択したファイルからデータを表示します。</p><p><img src="`+s+'" alt="Display data" width="700"></p><p>データの構造またはスキーマを把握するには、DataFrame変数に <code>.schema()</code> 関数を適用します。たとえば、<code>dfJson.schema()</code> はJSONデータセット内の各列の型をリスト表示します。</p><p><img src="'+a+'" alt="Schema example" width="700"></p><p>Kotlin Notebookのオートコンプリート機能を使用すると、DataFrameのプロパティに素早くアクセスして操作できます。データをロードした後、DataFrame変数の後にドットを入力するだけで、利用可能な列とその型の一覧が表示されます。</p><p><img src="'+t+`" alt="Available properties" width="700"></p><h2 id="データを整形する" tabindex="-1">データを整形する <a class="header-anchor" href="#データを整形する" aria-label="Permalink to &quot;データを整形する&quot;">​</a></h2><p>Kotlin DataFrameライブラリでデータセットを整形するために利用できるさまざまな操作の中でも、主な例として<a href="https://kotlin.github.io/dataframe/group.html" target="_blank" rel="noreferrer">グルーピング</a>、<a href="https://kotlin.github.io/dataframe/filter.html" target="_blank" rel="noreferrer">フィルタリング</a>、<a href="https://kotlin.github.io/dataframe/update.html" target="_blank" rel="noreferrer">更新</a>、<a href="https://kotlin.github.io/dataframe/add.html" target="_blank" rel="noreferrer">新しい列の追加</a>があります。これらの関数はデータ分析に不可欠であり、データを効果的に整理、クリーンアップ、変換するのに役立ちます。</p><p>データに映画のタイトルと対応する公開年が同じセルに含まれている例を見てみましょう。目標は、このデータセットを分析しやすくするために整形することです。</p><ol><li><p><code>.read()</code> 関数を使用してデータをノートブックにロードします。この例では、<code>movies.csv</code>という名前のCSVファイルからデータを読み込み、<code>movies</code>というDataFrameを作成します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> movies </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DataFrame.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;movies.csv&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></li><li><p>正規表現を使用して映画のタイトルから公開年を抽出し、新しい列として追加します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> moviesWithYear </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> movies</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;year&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">d{4}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toRegex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">findAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(title)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lastOrNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            ?.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            ?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            ?: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre></div></li><li><p>各タイトルから公開年を削除して、映画のタイトルを変更します。これにより、タイトルが整形され、一貫性が保たれます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> moviesTitle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> moviesWithYear</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;title&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">s*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">d{4}</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">s*$&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toRegex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(title, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre></div></li><li><p><code>filter</code> メソッドを使用して特定のデータに焦点を当てます。この場合、データセットは1996年以降に公開された映画に絞り込まれます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> moviesNew </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> moviesWithYear.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { year </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1996</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">moviesNew</span></span></code></pre></div></li></ol><p>比較のために、整形前のデータセットを次に示します。</p><p><img src="`+e+'" alt="Original dataset" width="700"></p><p>整形されたデータセット:</p><p><img src="'+l+`" alt="Data refinement result" width="700"></p><p>これは、Kotlinでデータを効果的に整形および分析するために、Kotlin DataFrameライブラリの <code>add</code>、<code>update</code>、<code>filter</code> などのメソッドをどのように使用できるかを示す実用的なデモンストレーションです。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>追加のユースケースと詳細な例については、<a href="https://github.com/Kotlin/dataframe/tree/master/examples" target="_blank" rel="noreferrer">Kotlin Dataframeの例</a>を参照してください。</p></div><h2 id="dataframeを保存する" tabindex="-1">DataFrameを保存する <a class="header-anchor" href="#dataframeを保存する" aria-label="Permalink to &quot;DataFrameを保存する&quot;">​</a></h2><p>Kotlin DataFrameライブラリを使用してKotlin Notebookで<a href="#refine-data">データを整形した</a>後、処理済みのデータを簡単にエクスポートできます。この目的のために、さまざまな<a href="https://kotlin.github.io/dataframe/write.html" target="_blank" rel="noreferrer"><code>.write()</code></a> 関数を利用できます。これらは、CSV、JSON、XLS、XLSX、Apache Arrow、さらにはHTMLテーブルなど、複数の形式での保存をサポートしています。これは、調査結果の共有、レポートの作成、またはさらなる分析のためにデータを利用可能にするのに特に役立ちます。</p><p>DataFrameをフィルタリングし、列を削除し、整形されたデータをJSONファイルに保存し、HTMLテーブルをブラウザで開く方法を次に示します。</p><ol><li><p>Kotlin Notebookで、<code>.read()</code> 関数を使用して <code>movies.csv</code> という名前のファイルを <code>moviesDf</code> という名前のDataFrameにロードします。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> moviesDf </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DataFrame.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;movies.csv&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></li><li><p><code>.filter</code> メソッドを使用して、DataFrameを「アクション」ジャンルに属する映画のみにフィルタリングします。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> actionMoviesDf </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> moviesDf.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { genres.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Action&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span></code></pre></div></li><li><p><code>.remove</code> を使用してDataFrameから <code>movieId</code> 列を削除します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> refinedMoviesDf </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> actionMoviesDf.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">remove</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { movieId }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">refinedMoviesDf</span></span></code></pre></div></li><li><p>Kotlin DataFrameライブラリは、さまざまな形式でデータを保存するためのさまざまな書き込み関数を提供します。この例では、変更された <code>movies.csv</code> をJSONファイルとして保存するために、<a href="https://kotlin.github.io/dataframe/write.html#writing-to-json" target="_blank" rel="noreferrer"><code>.writeJson()</code></a> 関数が使用されます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">refinedMoviesDf.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeJson</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;movies.json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></li><li><p><code>.toStandaloneHTML()</code> 関数を使用してDataFrameをスタンドアロンHTMLテーブルに変換し、デフォルトのWebブラウザで開きます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">refinedMoviesDf.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toStandaloneHTML</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DisplayConfiguration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rowsLimit </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">openInBrowser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div></li></ol><h2 id="次のステップ" tabindex="-1">次のステップ <a class="header-anchor" href="#次のステップ" aria-label="Permalink to &quot;次のステップ&quot;">​</a></h2><ul><li><a href="https://kotlin.github.io/kandy/examples.html" target="_blank" rel="noreferrer">Kandyライブラリ</a>を使用してデータ視覚化を探索する</li><li><a href="/ja/kotlin/data-analysis-visualization">Kandyを使用したKotlin Notebookでのデータ視覚化</a>でデータ視覚化に関する追加情報を見つける</li><li>Kotlinにおけるデータサイエンスと分析に利用できるツールとリソースの広範な概要については、<a href="/ja/kotlin/data-analysis-libraries">KotlinおよびJavaのデータ分析用ライブラリ</a>を参照してください。</li></ul>`,39)]))}const b=n(o,[["render",r]]);export{u as __pageData,b as default};
