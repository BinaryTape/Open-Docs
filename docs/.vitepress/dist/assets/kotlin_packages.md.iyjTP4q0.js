import{_ as a,c as s,o as e,ag as t}from"./chunks/framework.Bksy39di.js";const g=JSON.parse('{"title":"包与导入","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/packages.md","filePath":"kotlin/packages.md","lastUpdated":1754307826000}'),l={name:"kotlin/packages.md"};function n(p,i,r,o,h,k){return e(),s("div",null,i[0]||(i[0]=[t(`<h1 id="包与导入" tabindex="-1">包与导入 <a class="header-anchor" href="#包与导入" aria-label="Permalink to &quot;包与导入&quot;">​</a></h1><p>源文件可以以包声明开始：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.example</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> printMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*...*/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*...*/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span></code></pre></div><p>源文件的所有内容，例如类和函数，都包含在此包中。 因此，在上述示例中，<code>printMessage()</code> 的完整名称是 <code>org.example.printMessage</code>， 而 <code>Message</code> 的完整名称是 <code>org.example.Message</code>。</p><p>如果未指定包，此类文件的内容属于无名称的_默认_包。</p><h2 id="默认导入" tabindex="-1">默认导入 <a class="header-anchor" href="#默认导入" aria-label="Permalink to &quot;默认导入&quot;">​</a></h2><p>默认情况下，许多包都会被导入到每个 Kotlin 文件中：</p><ul><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/index.html" target="_blank" rel="noreferrer">kotlin.*</a></li><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.annotation/index.html" target="_blank" rel="noreferrer">kotlin.annotation.*</a></li><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/index.html" target="_blank" rel="noreferrer">kotlin.collections.*</a></li><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.comparisons/index.html" target="_blank" rel="noreferrer">kotlin.comparisons.*</a></li><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.io/index.html" target="_blank" rel="noreferrer">kotlin.io.*</a></li><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.ranges/index.html" target="_blank" rel="noreferrer">kotlin.ranges.*</a></li><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.sequences/index.html" target="_blank" rel="noreferrer">kotlin.sequences.*</a></li><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/index.html" target="_blank" rel="noreferrer">kotlin.text.*</a></li></ul><p>根据目标平台的不同，还会导入额外的包：</p><ul><li><p>JVM:</p><ul><li>java.lang.*</li><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.jvm/index.html" target="_blank" rel="noreferrer">kotlin.jvm.*</a></li></ul></li><li><p>JS:</p><ul><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.js/index.html" target="_blank" rel="noreferrer">kotlin.js.*</a></li></ul></li></ul><h2 id="导入" tabindex="-1">导入 <a class="header-anchor" href="#导入" aria-label="Permalink to &quot;导入&quot;">​</a></h2><p>除了默认导入之外，每个文件可能包含自己的 <code>import</code> 指令。</p><p>你可以导入单个名称：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.example.Message </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 现在无需限定符即可访问 Message</span></span></code></pre></div><p>或者导入作用域的所有可访问内容，例如：包、类、对象等：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.example.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // &#39;org.example&#39; 中的所有内容都变得可访问</span></span></code></pre></div><p>如果存在名称冲突，你可以通过使用 <code>as</code> 关键字在本地重命名冲突实体来消除歧义：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.example.Message </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Message 可访问</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.test.Message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TestMessage </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// TestMessage 代表 &#39;org.test.Message&#39;</span></span></code></pre></div><p><code>import</code> 关键字不限于导入类；你也可以用它来导入其他声明：</p><ul><li>顶层函数和属性</li><li>在 <a href="/kotlin/object-declarations#object-declarations-overview">对象声明</a> 中声明的函数和属性</li><li><a href="/kotlin/enum-classes">枚举常量</a></li></ul><h2 id="顶层声明的可见性" tabindex="-1">顶层声明的可见性 <a class="header-anchor" href="#顶层声明的可见性" aria-label="Permalink to &quot;顶层声明的可见性&quot;">​</a></h2><p>如果一个顶层声明被标记为 <code>private</code>，它对于声明它的文件而言是私有的（参见 <a href="/kotlin/visibility-modifiers">可见性修饰符</a>）。</p>`,22)]))}const c=a(l,[["render",n]]);export{g as __pageData,c as default};
