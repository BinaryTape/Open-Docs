import{_ as i,a as n,b as p}from"./chunks/compose-hot-reload-hello.B2T097lK.js";import{_ as o}from"./chunks/gradle-sync.fCQp85Nh.js";import{_ as h}from"./chunks/compose-hot-reload-gutter-run.m_A5v9gh.js";import{_ as k,C as a,c as r,o as d,G as t,ag as c}from"./chunks/framework.Bksy39di.js";const B=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"kmp/compose-hot-reload.md","filePath":"kmp/compose-hot-reload.md","lastUpdated":1755516278000}'),g={name:"kmp/compose-hot-reload.md"};function E(m,s,u,y,C,b){const e=a("TopicTitle"),l=a("primary-label");return d(),r("div",null,[t(e,{labelRef:"alpha",title:"Compose 热重载"}),t(l,{ref:"alpha"},null,512),s[0]||(s[0]=c('<p><a href="https://github.com/JetBrains/compose-hot-reload" target="_blank" rel="noreferrer">Compose 热重载</a> 帮助您在处理 Compose Multiplatform 项目时可视化并实验 UI 变更。</p><p>目前，Compose 热重载仅在您的多平台项目中包含 desktop 目标平台时可用。我们正在探索未来增加对其他目标平台的支持。同时，使用 desktop 应用作为您的沙盒可以帮助您快速实验通用代码中的 UI 变更，而不会中断您的工作流。</p><p><img src="'+i+'" alt="Compose 热重载" width="500"></p><h2 id="将-compose-热重载添加到您的项目" tabindex="-1">将 Compose 热重载添加到您的项目 <a class="header-anchor" href="#将-compose-热重载添加到您的项目" aria-label="Permalink to &quot;将 Compose 热重载添加到您的项目&quot;">​</a></h2><p>Compose 热重载可通过两种方式添加，即：</p><ul><li><a href="#from-scratch">在 IntelliJ IDEA 或 Android Studio 中从头创建项目</a></li><li><a href="#to-an-existing-project">将其作为 Gradle 插件添加到现有项目</a></li></ul><h3 id="从头开始" tabindex="-1">从头开始 <a class="header-anchor" href="#从头开始" aria-label="Permalink to &quot;从头开始&quot;">​</a></h3><p>本节将引导您完成在 IntelliJ IDEA 和 Android Studio 中创建包含 desktop 目标平台的多平台项目的步骤。当您的项目创建后，Compose 热重载将自动添加。</p><ol><li>在 <a href="./quickstart">快速入门</a> 中，完成以下说明以 <a href="./quickstart#set-up-the-environment">为 Kotlin Multiplatform 开发设置环境</a>。</li><li>在 IntelliJ IDEA 中，选择 <strong>File</strong> | <strong>New</strong> | <strong>Project</strong>。</li><li>在左侧面板中，选择 <strong>Kotlin Multiplatform</strong>。</li><li>在 <strong>New Project</strong> 窗口中指定 <strong>Name</strong>、<strong>Group</strong> 和 <strong>Artifact</strong> 字段。</li><li>选择 <strong>Desktop</strong> 目标平台，然后点击 <strong>Create</strong>。 <img src="'+n+`" alt="创建包含 desktop 目标平台的多平台项目" width="700"></li></ol><h3 id="添加到现有项目" tabindex="-1">添加到现有项目 <a class="header-anchor" href="#添加到现有项目" aria-label="Permalink to &quot;添加到现有项目&quot;">​</a></h3><p>本节将引导您完成将 Compose 热重载添加到现有多平台项目的步骤。这些步骤参考了 <a href="./compose-multiplatform-create-first-app">使用共享逻辑和 UI 创建应用</a> 教程中的项目。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>要查找 Compose 热重载的最新版本，请参见 <a href="https://github.com/JetBrains/compose-hot-reload/releases" target="_blank" rel="noreferrer">发行版本</a>。</p></div><ol><li><p>在您的项目中，更新版本目录。在 <code>gradle/libs.versions.toml</code> 中，添加以下代码：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">composeHotReload </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;org.jetbrains.compose.hot-reload&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, version.ref </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;composeHotReload&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><blockquote><p>要了解有关如何使用版本目录以集中管理项目中的依赖项的更多信息，请参见我们的 <a href="https://kotlinlang.org/gradle-best-practices.html" target="_blank" rel="noreferrer">Gradle 最佳实践</a>。</p></blockquote></li><li><p>在您的父项目 (<code>ComposeDemo/build.gradle.kts</code>) 的 <code>build.gradle.kts</code> 中，将以下代码添加到您的 <code>plugins {}</code> 代码块中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    alias</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(libs.plugins.composeHotReload) apply </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这可以防止 Compose 热重载插件在您的每个子项目中被多次加载。</p></li><li><p>在包含您的多平台应用程序的子项目 (<code>ComposeDemo/composeApp/build.gradle.kts</code>) 的 <code>build.gradle.kts</code> 中，将以下代码添加到您的 <code>plugins {}</code> 代码块中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    alias</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(libs.plugins.composeHotReload)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>要使用 Compose 热重载的全部功能，您的项目必须运行在 <a href="https://github.com/JetBrains/JetBrainsRuntime" target="_blank" rel="noreferrer">JetBrains Runtime</a> (JBR) 上，这是一个支持增强类重定义的 OpenJDK 分支。 Compose 热重载可以自动提供兼容的 JBR 给您的项目。 为了实现此目的，请将以下 Gradle 插件添加到您的 <code>settings.gradle.kts</code> 文件中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.gradle.toolchains.foojay-resolver-convention&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) version </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0.10.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>点击 <strong>Sync Gradle Changes</strong> 按钮以同步 Gradle 文件： <img src="`+o+`" alt="同步 Gradle 文件" width="50"></p></li></ol><h2 id="使用-compose-热重载" tabindex="-1">使用 Compose 热重载 <a class="header-anchor" href="#使用-compose-热重载" aria-label="Permalink to &quot;使用 Compose 热重载&quot;">​</a></h2><ol><li><p>在 <code>desktopMain</code> 目录中，打开 <code>main.kt</code> 文件并更新 <code>main()</code> 函数：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        onCloseRequest </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exitApplication</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        alwaysOnTop </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        title </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;composedemo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>通过将 <code>alwaysOnTop</code> 变量设置为 <code>true</code>，生成的 desktop 应用将保持在所有窗口的顶部，使您更轻松地编辑代码并实时查看更改。</p></li><li><p>在 <code>commonMain</code> 目录中，打开 <code>App.kt</code> 文件并更新 <code>Button</code> 可组合项：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(onClick </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { showContent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">showContent }) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Column</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Greeting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>现在，按钮的文本由 <code>greet()</code> 函数控制。</p></li><li><p>在 <code>commonMain</code> 目录中，打开 <code>Greeting.kt</code> 文件并更新 <code>greet()</code> 函数：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello!&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div></li><li><p>在 <code>desktopMain</code> 目录中，打开 <code>main.kt</code> 文件并点击边栏中的 <strong>Run</strong> 图标。 选择 <strong>Run &#39;composeApp [desktop]&#39; with Compose Hot Reload (Alpha)</strong>。</p><p><img src="`+h+'" alt="从边栏运行 Compose Hot Reload" width="350"></p><p><img src="'+p+'" alt="desktop 应用上的首次 Compose Hot Reload" width="500"></p></li><li><p>更新 <code>greet()</code> 函数返回的字符串，然后保存文件以查看 desktop 应用自动更新。</p><p><img src="'+i+'" alt="Compose 热重载" width="500"></p></li></ol><p>恭喜！您已看到 Compose 热重载的实际效果。现在，您可以尝试更改文本、图像、格式、UI 结构等内容，无需在每次更改后重新启动 desktop 运行配置。</p><h2 id="获取帮助" tabindex="-1">获取帮助 <a class="header-anchor" href="#获取帮助" aria-label="Permalink to &quot;获取帮助&quot;">​</a></h2><p>如果您在使用 Compose 热重载时遇到任何问题，请通过 <a href="https://github.com/JetBrains/compose-hot-reload/issues" target="_blank" rel="noreferrer">创建 GitHub Issue</a> 告诉我们。</p>',18))])}const A=k(g,[["render",E]]);export{B as __pageData,A as default};
