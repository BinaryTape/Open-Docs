import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.Bksy39di.js";const o=JSON.parse('{"title":"エージェントイベント","description":"","frontmatter":{},"headers":[],"relativePath":"ja/koog/agent-events.md","filePath":"ja/koog/agent-events.md","lastUpdated":1755146406000}'),t={name:"ja/koog/agent-events.md"};function l(p,s,h,k,r,d){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="エージェントイベント" tabindex="-1">エージェントイベント <a class="header-anchor" href="#エージェントイベント" aria-label="Permalink to &quot;エージェントイベント&quot;">​</a></h1><p>エージェントイベントは、エージェントのワークフローの一部として発生するアクションまたはインタラクションです。これには以下が含まれます。</p><ul><li>エージェントライフサイクルイベント</li><li>ストラテジーイベント</li><li>ノードイベント</li><li>LLM呼び出しイベント</li><li>ツール呼び出しイベント</li></ul><h2 id="イベントハンドラー" tabindex="-1">イベントハンドラー <a class="header-anchor" href="#イベントハンドラー" aria-label="Permalink to &quot;イベントハンドラー&quot;">​</a></h2><p>エージェントのワークフロー中に特定のイベントを監視し、それに応答するために、イベントハンドラーをロギング、テスト、デバッグ、およびエージェントの振る舞いの拡張に利用できます。</p><p><code>EventHandler</code> 機能は、さまざまなエージェントイベントにフックすることを可能にします。これは、以下のイベント委譲メカニズムとして機能します。</p><ul><li>AIエージェント操作のライフサイクルを管理します。</li><li>ワークフローのさまざまな段階を監視し、それに応答するためのフックを提供します。</li><li>エラー処理と回復を可能にします。</li><li>ツール呼び出しの追跡と結果処理を促進します。</li></ul><h3 id="インストールと設定" tabindex="-1">インストールと設定 <a class="header-anchor" href="#インストールと設定" aria-label="Permalink to &quot;インストールと設定&quot;">​</a></h3><p><code>EventHandler</code> 機能は、<code>EventHandler</code> クラスを介してエージェントのワークフローに統合されます。このクラスは、異なるエージェントイベントのコールバックを登録する方法を提供し、エージェント設定の機能としてインストールできます。詳細については、<a href="https://api.koog.ai/agents/agents-features/agents-features-event-handler/ai.koog.agents.local.features.eventHandler.feature/-event-handler/index.html" target="_blank" rel="noreferrer">API リファレンス</a>を参照してください。</p><p>この機能をインストールし、エージェントのイベントハンドラーを設定するには、次のようにします。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">handleEvents</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ツール呼び出しを処理</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    onToolCall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { eventContext </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Tool called: \${eventContext.tool} with args \${eventContext.toolArgs}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // エージェントの実行が完了したときにトリガーされるイベントを処理</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    onAgentFinished</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { eventContext </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Agent finished with result: \${eventContext.result}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // その他のイベントハンドラー</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>イベントハンドラーの設定に関する詳細については、<a href="https://api.koog.ai/agents/agents-features/agents-features-event-handler/ai.koog.agents.local.features.eventHandler.feature/-event-handler-config/index.html" target="_blank" rel="noreferrer">API リファレンス</a>を参照してください。</p><p>エージェントを作成する際に、<code>handleEvents</code> 拡張関数を使用してイベントハンドラーを設定することもできます。この関数もイベントハンドラー機能をインストールし、エージェントのイベントハンドラーを設定します。例を次に示します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> agent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AIAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    executor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> simpleOllamaAIExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    llmModel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> OllamaModels.Meta.LLAMA_3_2,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    handleEvents</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ツール呼び出しを処理</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        onToolCall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { eventContext </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Tool called: \${eventContext.tool} with args \${eventContext.toolArgs}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // エージェントの実行が完了したときにトリガーされるイベントを処理</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        onAgentFinished</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { eventContext </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Agent finished with result: \${eventContext.result}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // その他のイベントハンドラー</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,14)]))}const g=i(t,[["render",l]]);export{o as __pageData,g as default};
