import{_ as i,a,b as t}from"./chunks/kotlin-analysis.DmuGV0qM.js";import{_ as n,c as l,o as e,ag as h}from"./chunks/framework.Bksy39di.js";const F=JSON.parse('{"title":"從網路來源和 API 擷取資料","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/data-analysis-work-with-api.md","filePath":"zh-Hant/kotlin/data-analysis-work-with-api.md","lastUpdated":1754307826000}'),p={name:"zh-Hant/kotlin/data-analysis-work-with-api.md"};function k(r,s,o,d,E,g){return e(),l("div",null,s[0]||(s[0]=[h(`<h1 id="從網路來源和-api-擷取資料" tabindex="-1">從網路來源和 API 擷取資料 <a class="header-anchor" href="#從網路來源和-api-擷取資料" aria-label="Permalink to &quot;從網路來源和 API 擷取資料&quot;">​</a></h1><p><a href="/zh-Hant/kotlin/kotlin-notebook-overview">Kotlin Notebook</a> 提供一個強大的平台，用於存取和操作來自各種網路來源和 API 的資料。它透過提供一個疊代式環境來簡化資料擷取和分析任務，該環境能將每個步驟視覺化以提高清晰度。這使得它在探索您不熟悉的 API 時特別有用。</p><p>當與 <a href="https://kotlin.github.io/dataframe/gettingstarted.html" target="_blank" rel="noreferrer">Kotlin DataFrame 程式庫</a> 結合使用時，Kotlin Notebook 不僅讓您能夠連接並從 API 擷取 JSON 資料，還協助重塑這些資料以進行全面的分析和視覺化。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>有關 Kotlin Notebook 範例，請參閱 <a href="https://github.com/Kotlin/dataframe/blob/master/examples/notebooks/youtube/Youtube.ipynb" target="_blank" rel="noreferrer">GitHub 上的 DataFrame 範例</a>。</p></div><h2 id="開始之前" tabindex="-1">開始之前 <a class="header-anchor" href="#開始之前" aria-label="Permalink to &quot;開始之前&quot;">​</a></h2><p>Kotlin Notebook 依賴於 <a href="https://plugins.jetbrains.com/plugin/16340-kotlin-notebook" target="_blank" rel="noreferrer">Kotlin Notebook 外掛程式</a>，該外掛程式預設已綁定並在 IntelliJ IDEA 中啟用。</p><p>如果 Kotlin Notebook 功能不可用，請確保外掛程式已啟用。欲了解更多資訊，請參閱 <a href="/zh-Hant/kotlin/kotlin-notebook-set-up-env">設定環境</a>。</p><p>建立一個新的 Kotlin Notebook：</p><ol><li><p>選取 <strong>檔案</strong> | <strong>新增</strong> | <strong>Kotlin Notebook</strong>。</p></li><li><p>在 Kotlin Notebook 中，透過執行以下命令匯入 Kotlin DataFrame 程式庫：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">use dataframe</span></span></code></pre></div></li></ol><h2 id="從-api-擷取資料" tabindex="-1">從 API 擷取資料 <a class="header-anchor" href="#從-api-擷取資料" aria-label="Permalink to &quot;從 API 擷取資料&quot;">​</a></h2><p>透過 Kotlin Notebook 與 Kotlin DataFrame 程式庫從 API 擷取資料，是透過 <a href="https://kotlin.github.io/dataframe/read.html" target="_blank" rel="noreferrer"><code>.read()</code></a> 函數實現的，這與 <a href="/zh-Hant/kotlin/data-analysis-work-work-with-data-sources#retrieve-data-from-a-file">從檔案擷取資料</a>（例如 CSV 或 JSON）相似。然而，當處理基於網路的來源時，您可能需要額外的格式設定，以將原始 API 資料轉換為結構化格式。</p><p>讓我們看看一個從 <a href="https://console.cloud.google.com/apis/library/youtube.googleapis.com" target="_blank" rel="noreferrer">YouTube Data API</a> 擷取資料的範例：</p><ol><li><p>開啟您的 Kotlin Notebook 檔案 (<code>.ipynb</code>)。</p></li><li><p>匯入 Kotlin DataFrame 程式庫，這對於資料操作任務至關重要。這是透過在程式碼儲存格中執行以下命令來完成的：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">use dataframe</span></span></code></pre></div></li><li><p>在新的程式碼儲存格中安全地新增您的 API 密鑰，這對於向 YouTube Data API 驗證請求是必要的。您可以從 <a href="https://console.cloud.google.com/apis/credentials" target="_blank" rel="noreferrer">憑證分頁</a> 取得您的 API 密鑰：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> apiKey </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;YOUR-API_KEY&quot;</span></span></code></pre></div></li><li><p>建立一個 <code>load</code> 函數，它接受一個字串形式的路徑，並使用 DataFrame 的 <code>.read()</code> 函數從 YouTube Data API 擷取資料：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(path: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AnyRow</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DataRow.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://www.googleapis.com/youtube/v3/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$path</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&amp;key=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$apiKey</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></li><li><p>將擷取的資料組織成行，並透過 <code>nextPageToken</code> 處理 YouTube API 的分頁。這確保您能收集多個頁面中的資料：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(path: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, maxPages: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AnyFrame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 初始化一個可變列表來儲存資料行。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rows </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mutableListOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AnyRow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 設定資料載入的初始頁面路徑。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pagePath </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> path</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    do</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 從當前頁面路徑載入資料。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> row </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pagePath)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 將載入的資料作為一行新增到列表中。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        rows.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(row)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 擷取下一頁的權杖（如果可用）。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> next </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> row.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getValueOrNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;nextPageToken&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 更新用於下一個疊代的頁面路徑，包括新的權杖。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        pagePath </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&amp;pageToken=&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> next</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 持續載入頁面，直到沒有下一頁。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (next </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rows.size </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> maxPages) </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 將所有載入的資料行串聯並作為 DataFrame 返回。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rows.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">concat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>使用先前定義的 <code>load()</code> 函數，在新的程式碼儲存格中擷取資料並建立一個 DataFrame。此範例擷取資料，或者在本例中，擷取與 Kotlin 相關的影片，每頁最多 50 個結果，最多 5 頁。結果儲存在 <code>df</code> 變數中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> df </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;search?q=kotlin&amp;maxResults=50&amp;part=snippet&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">df</span></span></code></pre></div></li><li><p>最後，從 DataFrame 中提取並串聯項目：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> items </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> df.items.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">concat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">items</span></span></code></pre></div></li></ol><h2 id="清理和優化資料" tabindex="-1">清理和優化資料 <a class="header-anchor" href="#清理和優化資料" aria-label="Permalink to &quot;清理和優化資料&quot;">​</a></h2><p>清理和優化資料是準備資料集以進行分析的關鍵步驟。<a href="https://kotlin.github.io/dataframe/gettingstarted.html" target="_blank" rel="noreferrer">Kotlin DataFrame 程式庫</a> 為這些任務提供了強大的功能。諸如 <a href="https://kotlin.github.io/dataframe/move.html" target="_blank" rel="noreferrer"><code>move</code></a>、<a href="https://kotlin.github.io/dataframe/concatdf.html" target="_blank" rel="noreferrer"><code>concat</code></a>、<a href="https://kotlin.github.io/dataframe/select.html" target="_blank" rel="noreferrer"><code>select</code></a>、<a href="https://kotlin.github.io/dataframe/parse.html" target="_blank" rel="noreferrer"><code>parse</code></a> 和 <a href="https://kotlin.github.io/dataframe/join.html" target="_blank" rel="noreferrer"><code>join</code></a> 等方法在組織和轉換資料方面發揮著重要作用。</p><p>讓我們來探討一個資料已從 <a href="#fetch-data-from-an-api">YouTube 資料 API 擷取</a> 的範例。目標是清理和重組資料集，為深入分析做準備：</p><ol><li><p>您可以從重新組織和清理資料開始。這包括將某些欄位移至新的標題下，並為清晰度移除不必要的欄位：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> videos </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> items.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dropNulls</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { id.videoId }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { id.videoId named </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> and snippet }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">distinct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">videos</span></span></code></pre></div></li><li><p>從清理後的資料中將 ID 分塊，並載入對應的影片統計資料。這涉及將資料分解成更小的批次，並擷取額外詳細資訊：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> statPages </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clean.id.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">chunked</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ids </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">joinToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;%2C&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;videos?part=statistics&amp;id=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$ids</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">statPages</span></span></code></pre></div></li><li><p>串聯已擷取的統計資料並選取相關欄位：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> stats </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> statPages.items.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">concat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { id and statistics.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">stats</span></span></code></pre></div></li><li><p>將現有的清理資料與新擷取的統計資料連接。這將兩組資料合併到一個全面的 DataFrame 中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> joined </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clean.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(stats)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">joined</span></span></code></pre></div></li></ol><p>此範例示範如何使用 Kotlin DataFrame 的各種函數清理、重新組織和增強您的資料集。每個步驟都旨在優化資料，使其更適合 <a href="#analyze-data-in-kotlin-notebook">深入分析</a>。</p><h2 id="在-kotlin-notebook-中分析資料" tabindex="-1">在 Kotlin Notebook 中分析資料 <a class="header-anchor" href="#在-kotlin-notebook-中分析資料" aria-label="Permalink to &quot;在 Kotlin Notebook 中分析資料&quot;">​</a></h2><p>在您使用 <a href="https://kotlin.github.io/dataframe/gettingstarted.html" target="_blank" rel="noreferrer">Kotlin DataFrame 程式庫</a> 的函數成功 <a href="#fetch-data-from-an-api">擷取</a> 並 <a href="#clean-and-refine-data">清理和優化資料</a> 後，下一步是分析這個準備好的資料集，以提取有意義的見解。</p><p>諸如用於資料分類的 <a href="https://kotlin.github.io/dataframe/groupby.html" target="_blank" rel="noreferrer"><code>groupBy</code></a>、用於 <a href="https://kotlin.github.io/dataframe/summarystatistics.html" target="_blank" rel="noreferrer">摘要統計</a> 的 <a href="https://kotlin.github.io/dataframe/sum.html" target="_blank" rel="noreferrer"><code>sum</code></a> 和 <a href="https://kotlin.github.io/dataframe/maxby.html" target="_blank" rel="noreferrer"><code>maxBy</code></a>，以及用於資料排序的 <a href="https://kotlin.github.io/dataframe/sortby.html" target="_blank" rel="noreferrer"><code>sortBy</code></a> 等方法特別有用。這些工具讓您能夠高效地執行複雜的資料分析任務。</p><p>讓我們來看一個範例，使用 <code>groupBy</code> 按頻道分類影片，使用 <code>sum</code> 計算每個類別的總觀看次數，並使用 <code>maxBy</code> 尋找每個群組中最新或觀看次數最多的影片：</p><ol><li><p>透過設定引用來簡化對特定欄位的存取：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> view </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> column</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span></code></pre></div></li><li><p>使用 <code>groupBy</code> 方法，根據 <code>channel</code> 欄位對資料進行分組並排序。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> channels </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> joined.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">groupBy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { channel }.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sortByCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div></li></ol><p>在結果表中，您可以互動式地探索資料。點擊與頻道對應的資料行中的 <code>group</code> 欄位，將展開該資料行以顯示有關該頻道影片的更多詳細資訊。</p><p><img src="`+i+'" alt="展開資料行以顯示更多詳細資訊" width="700"></p><p>您可以點擊左下角的表格圖示，返回到分組的資料集。</p><p><img src="'+a+`" alt="點擊左下角的表格圖示以返回" width="700"></p><ol start="3"><li><p>使用 <code>aggregate</code>、<code>sum</code>、<code>maxBy</code> 和 <code>flatten</code> 建立一個 DataFrame，摘要每個頻道的總觀看次數及其最新或觀看次數最多的影片的詳細資訊：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> aggregated </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> channels.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">aggregate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    viewCount.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() into view</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> last </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> maxBy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { publishedAt }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    last.title into </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;last title&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    last.publishedAt into </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;time&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    last.viewCount into </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;viewCount&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 按觀看次數將 DataFrame 降序排序，並將其轉換為平面結構。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sortByDesc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(view).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">flatten</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">aggregated</span></span></code></pre></div></li></ol><p>分析結果：</p><p><img src="`+t+'" alt="分析結果" width="700"></p><p>有關更進階的技術，請參閱 <a href="https://kotlin.github.io/dataframe/gettingstarted.html" target="_blank" rel="noreferrer">Kotlin DataFrame 文件</a>。</p><h2 id="接下來" tabindex="-1">接下來 <a class="header-anchor" href="#接下來" aria-label="Permalink to &quot;接下來&quot;">​</a></h2><ul><li>探索資料視覺化，使用 <a href="https://kotlin.github.io/kandy/examples.html" target="_blank" rel="noreferrer">Kandy 程式庫</a></li><li>在 <a href="/zh-Hant/kotlin/data-analysis-visualization">使用 Kandy 在 Kotlin Notebook 中進行資料視覺化</a> 中尋找更多關於資料視覺化的資訊</li><li>有關 Kotlin 中可用於資料科學和分析的工具和資源的廣泛概述，請參閱 <a href="/zh-Hant/kotlin/data-analysis-libraries">用於資料分析的 Kotlin 和 Java 程式庫</a></li></ul>',33)]))}const u=n(p,[["render",k]]);export{F as __pageData,u as default};
