import{_ as i,c as a,o as t,ag as e}from"./chunks/framework.Bksy39di.js";const r=JSON.parse('{"title":"브라우저 및 DOM API","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kotlin/browser-api-dom.md","filePath":"ko/kotlin/browser-api-dom.md","lastUpdated":1754307826000}'),n={name:"ko/kotlin/browser-api-dom.md"};function l(p,s,h,k,d,o){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="브라우저-및-dom-api" tabindex="-1">브라우저 및 DOM API <a class="header-anchor" href="#브라우저-및-dom-api" aria-label="Permalink to &quot;브라우저 및 DOM API&quot;">​</a></h1><p>Kotlin/JS 표준 라이브러리를 사용하면 <code>kotlinx.browser</code> 패키지를 통해 브라우저별 기능에 접근할 수 있습니다. 이 패키지에는 <code>document</code> 및 <code>window</code>와 같은 일반적인 최상위 객체가 포함됩니다. 표준 라이브러리는 가능한 경우 이러한 객체에 의해 노출되는 기능에 대해 타입 안전(typesafe) 래퍼를 제공합니다. 대안으로, 코틀린 타입 시스템에 잘 매핑되지 않는 함수와의 상호 작용을 위해 <code>dynamic</code> 타입이 사용됩니다.</p><h2 id="dom과의-상호-작용" tabindex="-1">DOM과의 상호 작용 <a class="header-anchor" href="#dom과의-상호-작용" aria-label="Permalink to &quot;DOM과의 상호 작용&quot;">​</a></h2><p>문서 객체 모델(DOM)과의 상호 작용을 위해 <code>document</code> 변수를 사용할 수 있습니다. 예를 들어, 이 객체를 통해 웹사이트의 배경색을 설정할 수 있습니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.bgColor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;FFAA12&quot;</span></span></code></pre></div><p><code>document</code> 객체는 또한 ID, 이름, 클래스 이름, 태그 이름 등으로 특정 요소를 검색하는 방법을 제공합니다. 반환되는 모든 요소는 <code>Element?</code> 타입입니다. 해당 속성에 접근하려면 적절한 타입으로 캐스팅해야 합니다. 예를 들어, 이메일 <code>&lt;input&gt;</code> 필드가 있는 HTML 페이지가 있다고 가정해 봅시다:</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;text&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;email&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;email&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;text/javascript&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;tutorial.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>스크립트가 <code>&lt;body&gt;</code> 태그 하단에 포함된다는 점에 유의하세요. 이렇게 하면 스크립트가 로드되기 전에 DOM이 완전히 사용 가능한 상태가 되도록 보장됩니다.</p><p>이 설정을 통해 DOM 요소에 접근할 수 있습니다. <code>input</code> 필드의 속성에 접근하려면 <code>getElementById</code>를 호출하고 <code>HTMLInputElement</code>로 캐스팅하세요. 그러면 <code>value</code>와 같은 해당 속성에 안전하게 접근할 수 있습니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> email </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;email&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HTMLInputElement</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">email.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;hadi@jetbrains.com&quot;</span></span></code></pre></div><p>이 <code>input</code> 요소를 참조하는 것과 마찬가지로, 페이지의 다른 요소에 접근하여 해당 적절한 타입으로 캐스팅할 수 있습니다.</p><p>DOM에서 요소를 간결하게 생성하고 구조화하는 방법을 보려면 <a href="/ko/kotlin/typesafe-html-dsl">타입 안전 HTML DSL</a>을 확인하세요.</p>`,12)]))}const c=i(n,[["render",l]]);export{r as __pageData,c as default};
