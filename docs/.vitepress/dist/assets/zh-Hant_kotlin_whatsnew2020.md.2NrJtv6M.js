import{_ as k}from"./chunks/accessing-sourse-sets.FkWDOZ3N.js";import{_ as r,C as p,c as d,o,ag as h,G as n,j as s,w as t,a}from"./chunks/framework.Bksy39di.js";const C=JSON.parse('{"title":"Kotlin 2.0.20 有什麼新功能","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/whatsnew2020.md","filePath":"zh-Hant/kotlin/whatsnew2020.md","lastUpdated":1754307826000}'),c={name:"zh-Hant/kotlin/whatsnew2020.md"};function E(g,i,y,u,F,b){const e=p("tab"),l=p("tabs");return o(),d("div",null,[i[4]||(i[4]=h(`<h1 id="kotlin-2-0-20-有什麼新功能" tabindex="-1">Kotlin 2.0.20 有什麼新功能 <a class="header-anchor" href="#kotlin-2-0-20-有什麼新功能" aria-label="Permalink to &quot;Kotlin 2.0.20 有什麼新功能&quot;">​</a></h1><p><em><a href="/zh-Hant/kotlin/releases#release-details">發佈日期：2024 年 8 月 22 日</a></em></p><p>Kotlin 2.0.20 版本現已發佈！此版本包括 Kotlin 2.0.0 的效能改進和錯誤修正，我們在該版本中宣布 Kotlin K2 編譯器為穩定版。以下是此版本的一些額外亮點：</p><ul><li><a href="#data-class-copy-function-to-have-the-same-visibility-as-constructor">data class 的 copy 函數與建構函式具有相同可見性</a></li><li><a href="#static-accessors-for-source-sets-from-the-default-target-hierarchy">多平台專案中預設目標階層的原始碼集現在提供靜態存取器</a></li><li><a href="#concurrent-marking-in-garbage-collector">垃圾收集器中已實現 Kotlin/Native 的並行標記</a></li><li><a href="#new-location-of-experimentalwasmdsl-annotation">Kotlin/Wasm 中的 <code>@ExperimentalWasmDsl</code> 註解有了新的位置</a></li><li><a href="#gradle">已新增對 Gradle 8.6–8.8 版本的支援</a></li><li><a href="#option-to-share-jvm-artifacts-between-projects-as-class-files">一個新選項允許在 Gradle 專案之間以類別檔案形式共享 JVM 構件</a></li><li><a href="#compose-compiler">Compose 編譯器已更新</a></li><li><a href="#support-for-uuids-in-the-common-kotlin-standard-library">通用 Kotlin 標準函式庫已新增對 UUIDs 的支援</a></li></ul><h2 id="ide-支援" tabindex="-1">IDE 支援 <a class="header-anchor" href="#ide-支援" aria-label="Permalink to &quot;IDE 支援&quot;">​</a></h2><p>支援 2.0.20 的 Kotlin 外掛程式已捆綁在最新的 IntelliJ IDEA 和 Android Studio 中。 您無需在 IDE 中更新 Kotlin 外掛程式。 您只需在建構腳本中將 Kotlin 版本更改為 2.0.20 即可。</p><p>詳情請參閱<a href="/zh-Hant/kotlin/releases#update-to-a-new-kotlin-version">更新至新版本</a>。</p><h2 id="語言" tabindex="-1">語言 <a class="header-anchor" href="#語言" aria-label="Permalink to &quot;語言&quot;">​</a></h2><p>Kotlin 2.0.20 開始引入變更，以改進 data class 的一致性，並取代實驗性內容接收器功能。</p><h3 id="data-class-的-copy-函數與建構函式具有相同可見性" tabindex="-1">data class 的 copy 函數與建構函式具有相同可見性 <a class="header-anchor" href="#data-class-的-copy-函數與建構函式具有相同可見性" aria-label="Permalink to &quot;data class 的 copy 函數與建構函式具有相同可見性&quot;">​</a></h3><p>目前，如果您使用 <code>private</code> 建構函式建立 data class，自動生成的 <code>copy()</code> 函數不會具有相同的可見性。這可能在您的程式碼中引起問題。在未來的 Kotlin 版本中，我們將引入 <code>copy()</code> 函數的預設可見性與建構函式相同的行為。此變更將逐步引入，以幫助您盡可能順暢地遷移程式碼。</p><p>我們的遷移計畫從 Kotlin 2.0.20 開始，它會在您的程式碼中發出警告，表示可見性將在未來發生變化。例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在 2.0.20 中觸發警告</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PositiveInteger</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> private</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> number: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    companion</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(number: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PositiveInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (number </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PositiveInteger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(number) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> positiveNumber </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PositiveInteger.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) ?: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 在 2.0.20 中觸發警告</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> negativeNumber </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> positiveNumber.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">copy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(number </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Warning: 非公開主要建構函式透過 data class 自動生成的 &#39;copy()&#39; 方法暴露。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 自動生成的 &#39;copy()&#39; 在未來版本中會變更其可見性。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>有關我們遷移計畫的最新資訊，請參閱 <a href="https://youtrack.jetbrains.com/issue/KT-11914" target="_blank" rel="noreferrer">YouTrack</a> 中的相應問題。</p><p>為使您能更好地控制此行為，在 Kotlin 2.0.20 中，我們引入了兩個註解：</p><ul><li><code>@ConsistentCopyVisibility</code> 以便在我們將其作為未來版本的預設行為之前，現在就選擇啟用該行為。</li><li><code>@ExposedCopyVisibility</code> 以便選擇停用該行為並在宣告點抑制警告。 請注意，即使使用此註解，編譯器在呼叫 <code>copy()</code> 函數時仍會報告警告。</li></ul><p>如果您想在 2.0.20 中為整個模組（而不僅是個別類別）選擇啟用新行為， 您可以使用 <code>-Xconsistent-data-class-copy-visibility</code> 編譯器選項。 此選項與向模組中的所有 data class 添加 <code>@ConsistentCopyVisibility</code> 註解具有相同的效果。</p><h3 id="內容接收器分階段替換為內容參數" tabindex="-1">內容接收器分階段替換為內容參數 <a class="header-anchor" href="#內容接收器分階段替換為內容參數" aria-label="Permalink to &quot;內容接收器分階段替換為內容參數&quot;">​</a></h3><p>在 Kotlin 1.6.20 中，我們引入了<a href="/zh-Hant/kotlin/whatsnew1620#prototype-of-context-receivers-for-kotlin-jvm">內容接收器</a>作為一項<a href="/zh-Hant/kotlin/components-stability#stability-levels-explained">實驗性</a>功能。在聽取社群回饋後，我們決定不繼續採用此方法，並將採取不同的方向。</p><p>在未來的 Kotlin 版本中，內容接收器將被內容參數取代。內容參數仍處於設計階段，您可以在 <a href="https://github.com/Kotlin/KEEP/blob/context-parameters/proposals/context-parameters.md" target="_blank" rel="noreferrer">KEEP</a> 中找到該提案。</p><p>由於內容參數的實作需要對編譯器進行重大修改，我們決定不同時支援內容接收器和內容參數。此決定極大地簡化了實作並最大程度地降低了不穩定行為的風險。</p><p>我們了解到內容接收器已經被大量開發者使用。因此，我們將開始逐步移除對內容接收器的支援。我們的遷移計畫從 Kotlin 2.0.20 開始，當使用 <code>-Xcontext-receivers</code> 編譯器選項時，您的程式碼中會在使用內容接收器時發出警告。例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyContext</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MyContext)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Warning: 實驗性內容接收器已被棄用，將被內容參數取代。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 請不要使用內容接收器。您可以明確傳遞參數或使用帶有擴充功能的成員。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> someFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>此警告將在未來的 Kotlin 版本中變成錯誤。</p><p>如果您在程式碼中使用了內容接收器，我們建議您將程式碼遷移為使用以下任一方式：</p><ul><li><p>明確參數。</p><table><tr><td>之前</td><td>之後</td></tr><tr><td><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ContextReceiverType)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> someFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    contextReceiverMember</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></td><td><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> someFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(explicitContext: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ContextReceiverType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    explicitContext.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">contextReceiverMember</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></td></tr></table></li><li><p>擴充成員函式（如果可能）。</p><table><tr><td>之前</td><td>之後</td></tr><tr><td><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ContextReceiverType)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> contextReceiverMember</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TODO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ContextReceiverType)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> someFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    contextReceiverMember</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></td><td><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ContextReceiverType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> contextReceiverMember</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TODO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ContextReceiverType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">someFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    contextReceiverMember</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></td></tr></table></li></ul><p>或者，您可以等到編譯器支援內容參數的 Kotlin 版本。請注意，內容參數最初將作為實驗性功能引入。</p><h2 id="kotlin-多平台" tabindex="-1">Kotlin 多平台 <a class="header-anchor" href="#kotlin-多平台" aria-label="Permalink to &quot;Kotlin 多平台&quot;">​</a></h2><p>Kotlin 2.0.20 為多平台專案中的原始碼集管理帶來了改進，並由於 Gradle 的近期變更而棄用了與某些 Gradle Java 外掛程式的相容性。</p><h3 id="預設目標階層的原始碼集提供靜態存取器" tabindex="-1">預設目標階層的原始碼集提供靜態存取器 <a class="header-anchor" href="#預設目標階層的原始碼集提供靜態存取器" aria-label="Permalink to &quot;預設目標階層的原始碼集提供靜態存取器&quot;">​</a></h3><p>自 Kotlin 1.9.20 起，<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-hierarchy.html#default-hierarchy-template" target="_blank" rel="noreferrer">預設階層範本</a>會自動套用於所有 Kotlin 多平台專案。 對於預設階層範本中的所有原始碼集，Kotlin Gradle 外掛程式提供了型別安全存取器。 這樣，您最終無需使用 <code>by getting</code> 或 <code>by creating</code> 結構即可存取所有指定目標的原始碼集。</p><p>Kotlin 2.0.20 旨在進一步改善您的 IDE 體驗。它現在在 <code>sourceSets {}</code> 區塊中為預設階層範本中的所有原始碼集提供了靜態存取器。 我們相信此變更將使按名稱存取原始碼集變得更輕鬆且更可預測。</p><p>現在，每個此類原始碼集都帶有詳細的 KDoc 註解，其中包含範例和診斷訊息，如果您在未先宣告相應目標的情況下嘗試存取原始碼集，則會發出警告：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    linuxX64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    linuxArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    mingwX64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        commonMain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">languageSettings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            progressiveMode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        jvmMain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        linuxX64Main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        linuxArm64Main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Warning: accessing source set without registering the target</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        iosX64Main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><img src="`+k+`" alt="Accessing the source sets by name" width="700"></p><p>了解更多關於 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-hierarchy.html" target="_blank" rel="noreferrer">Kotlin 多平台中的階層式專案結構</a>。</p><h3 id="棄用與-kotlin-multiplatform-gradle-外掛程式和-gradle-java-外掛程式的相容性" tabindex="-1">棄用與 Kotlin Multiplatform Gradle 外掛程式和 Gradle Java 外掛程式的相容性 <a class="header-anchor" href="#棄用與-kotlin-multiplatform-gradle-外掛程式和-gradle-java-外掛程式的相容性" aria-label="Permalink to &quot;棄用與 Kotlin Multiplatform Gradle 外掛程式和 Gradle Java 外掛程式的相容性&quot;">​</a></h3><p>在 Kotlin 2.0.20 中，當您在同一專案中套用 Kotlin Multiplatform Gradle 外掛程式和以下任何 Gradle Java 外掛程式時，我們引入了棄用警告：<a href="https://docs.gradle.org/current/userguide/java_plugin.html" target="_blank" rel="noreferrer">Java</a>、 <a href="https://docs.gradle.org/current/userguide/java_library_plugin.html" target="_blank" rel="noreferrer">Java Library</a> 和 <a href="https://docs.gradle.org/current/userguide/application_plugin.html" target="_blank" rel="noreferrer">Application</a>。 當您的多平台專案中的另一個 Gradle 外掛程式套用 Gradle Java 外掛程式時，也會出現警告。 例如，<a href="https://docs.spring.io/spring-boot/gradle-plugin/index.html" target="_blank" rel="noreferrer">Spring Boot Gradle Plugin</a> 會自動套用 Application 外掛程式。</p><p>由於 Kotlin Multiplatform 的專案模型與 Gradle 的 Java 生態系統外掛程式之間存在根本性的相容性問題，我們新增了此棄用警告。Gradle 的 Java 生態系統外掛程式目前未考慮到其他外掛程式可能：</p><ul><li>也以與 Java 生態系統外掛程式不同的方式發布或編譯 JVM 目標。</li><li>在同一專案中擁有兩個不同的 JVM 目標，例如 JVM 和 Android。</li><li>擁有複雜的多平台專案結構，可能包含多個非 JVM 目標。</li></ul><p>不幸的是，Gradle 目前不提供任何 API 來解決這些問題。</p><p>我們之前在 Kotlin Multiplatform 中使用了一些變通方法來幫助整合 Java 生態系統外掛程式。 然而，這些變通方法從未真正解決相容性問題，並且自 Gradle 8.8 版本發布以來，這些變通方法已不再可行。更多資訊請參閱我們的 <a href="https://youtrack.jetbrains.com/issue/KT-66542/Gradle-JVM-target-with-withJava-produces-a-deprecation-warning" target="_blank" rel="noreferrer">YouTrack 問題</a>。</p><p>雖然我們尚不確切知道如何解決此相容性問題，但我們承諾繼續支援您的 Kotlin 多平台專案中的某些形式的 Java 原始碼編譯。至少，我們將支援 Java 原始碼的編譯以及在您的多平台專案中使用 Gradle 的 <a href="https://docs.gradle.org/current/javadoc/org/gradle/api/plugins/JavaBasePlugin.html" target="_blank" rel="noreferrer"><code>java-base</code></a> 外掛程式。</p><p>同時，如果您在多平台專案中看到此棄用警告，我們建議您：</p><ol><li>確定您的專案是否確實需要 Gradle Java 外掛程式。如果不需要，請考慮將其移除。</li><li>檢查 Gradle Java 外掛程式是否僅用於單一任務。如果是這樣，您可能可以在不費力氣的情況下移除該外掛程式。例如，如果任務使用 Gradle Java 外掛程式建立 Javadoc JAR 檔案，您可以手動定義 Javadoc 任務。</li></ol><p>否則，如果您想在多平台專案中同時使用 Kotlin Multiplatform Gradle 外掛程式和這些 Java 的 Gradle 外掛程式，我們建議您：</p><ol><li>在您的多平台專案中建立一個獨立的子專案。</li><li>在獨立的子專案中，套用 Java 的 Gradle 外掛程式。</li><li>在獨立的子專案中，新增對父多平台專案的依賴。</li></ol><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>獨立子專案<strong>不得</strong>是多平台專案，您只能使用它來設定對多平台專案的依賴。</p></div><p>例如，您有一個名為 <code>my-main-project</code> 的多平台專案，並且您想 使用 <a href="https://docs.gradle.org/current/userguide/application_plugin.html" target="_blank" rel="noreferrer">Application</a> Gradle 外掛程式來執行 JVM 應用程式。</p><p>建立子專案後，我們將其命名為 <code>subproject-A</code>，您的父專案結構應如下所示：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>.</span></span>
<span class="line"><span>├── build.gradle.kts</span></span>
<span class="line"><span>├── settings.gradle</span></span>
<span class="line"><span>├── subproject-A</span></span>
<span class="line"><span>    └── build.gradle.kts</span></span>
<span class="line"><span>    └── src</span></span>
<span class="line"><span>        └── Main.java</span></span></code></pre></div><p>在您的子專案的 <code>build.gradle.kts</code> 檔案中，在 <code>plugins {}</code> 區塊中套用 Application 外掛程式：</p>`,52)),n(l,{group:"build-script"},{default:t(()=>[n(e,{title:"Kotlin","group-key":"kotlin"},{default:t(()=>i[0]||(i[0]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"plugins"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    id"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"application"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),n(e,{title:"Groovy","group-key":"groovy"},{default:t(()=>i[1]||(i[1]=[s("div",{class:"language-groovy vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"groovy"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"plugins {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    id("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'application'"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),i[5]||(i[5]=s("p",null,[a("在您的子專案的 "),s("code",null,"build.gradle.kts"),a(" 檔案中，新增對父多平台專案的依賴：")],-1)),n(l,{group:"build-script"},{default:t(()=>[n(e,{title:"Kotlin","group-key":"kotlin"},{default:t(()=>i[2]||(i[2]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"dependencies"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    implementation"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"project"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'":my-main-project"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")) "),s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// 您的父多平台專案的名稱")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),n(e,{title:"Groovy","group-key":"groovy"},{default:t(()=>i[3]||(i[3]=[s("div",{class:"language-groovy vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"groovy"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"dependencies {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    implementation project("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"':my-main-project'"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") "),s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// 您的父多平台專案的名稱")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),i[6]||(i[6]=h(`<p>您的父專案現在已設定為同時適用於這兩個外掛程式。</p><h2 id="kotlin-native" tabindex="-1">Kotlin/Native <a class="header-anchor" href="#kotlin-native" aria-label="Permalink to &quot;Kotlin/Native&quot;">​</a></h2><p>Kotlin/Native 在垃圾收集器以及從 Swift/Objective-C 呼叫 Kotlin 暫停函式方面獲得了改進。</p><h3 id="垃圾收集器中的並行標記" tabindex="-1">垃圾收集器中的並行標記 <a class="header-anchor" href="#垃圾收集器中的並行標記" aria-label="Permalink to &quot;垃圾收集器中的並行標記&quot;">​</a></h3><p>在 Kotlin 2.0.20 中，JetBrains 團隊在改進 Kotlin/Native 執行期效能方面又邁出了一步。 我們已新增對垃圾收集器（GC）中並行標記的實驗性支援。</p><p>預設情況下，當 GC 在堆積中標記物件時，應用程式執行緒必須暫停。這極大地影響了 GC 暫停時間的持續時間，這對於對延遲敏感的應用程式（例如使用 Compose Multiplatform 建構的 UI 應用程式）的效能至關重要。</p><p>現在，垃圾收集的標記階段可以與應用程式執行緒同時運行。 這應該會顯著縮短 GC 暫停時間並有助於提高應用程式回應性。</p><h4 id="如何啟用" tabindex="-1">如何啟用 <a class="header-anchor" href="#如何啟用" aria-label="Permalink to &quot;如何啟用&quot;">​</a></h4><p>此功能目前為<a href="/zh-Hant/kotlin/components-stability#stability-levels-explained">實驗性</a>。 要啟用它，請在您的 <code>gradle.properties</code> 檔案中設定以下選項：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.native.binary.gc=cms</span></span></code></pre></div><p>請將任何問題報告到我們的問題追蹤器 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a>。</p><h3 id="移除位元碼嵌入支援" tabindex="-1">移除位元碼嵌入支援 <a class="header-anchor" href="#移除位元碼嵌入支援" aria-label="Permalink to &quot;移除位元碼嵌入支援&quot;">​</a></h3><p>從 Kotlin 2.0.20 開始，Kotlin/Native 編譯器不再支援位元碼嵌入。 位元碼嵌入在 Xcode 14 中被棄用，並在 Xcode 15 中針對所有 Apple 目標被移除。</p><p>現在，框架配置的 <code>embedBitcode</code> 參數， 以及 <code>-Xembed-bitcode</code> 和 <code>-Xembed-bitcode-marker</code> 命令列引數均已棄用。</p><p>如果您仍使用較早版本的 Xcode 但想升級到 Kotlin 2.0.20， 請在您的 Xcode 專案中停用位元碼嵌入。</p><h3 id="使用-signposts-變更-gc-效能監控" tabindex="-1">使用 signposts 變更 GC 效能監控 <a class="header-anchor" href="#使用-signposts-變更-gc-效能監控" aria-label="Permalink to &quot;使用 signposts 變更 GC 效能監控&quot;">​</a></h3><p>Kotlin 2.0.0 使通過 Xcode Instruments 監控 Kotlin/Native 垃圾收集器（GC）的效能成為可能。Instruments 包含 signposts 工具，可以將 GC 暫停顯示為事件。 這在檢查 iOS 應用程式中與 GC 相關的凍結時非常有用。</p><p>此功能預設為啟用，但不幸的是， 當應用程式與 Xcode Instruments 同時運行時，有時會導致崩潰。 從 Kotlin 2.0.20 開始，它需要明確選擇啟用以下編譯器選項：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>-Xbinary=enableSafepointSignposts=true</span></span></code></pre></div><p>在<a href="/zh-Hant/kotlin/native-memory-manager#monitor-gc-performance">文件中</a>了解更多關於 GC 效能分析的資訊。</p><h3 id="能夠從-swift-objective-c-在非主執行緒上呼叫-kotlin-暫停函式" tabindex="-1">能夠從 Swift/Objective-C 在非主執行緒上呼叫 Kotlin 暫停函式 <a class="header-anchor" href="#能夠從-swift-objective-c-在非主執行緒上呼叫-kotlin-暫停函式" aria-label="Permalink to &quot;能夠從 Swift/Objective-C 在非主執行緒上呼叫 Kotlin 暫停函式&quot;">​</a></h3><p>以前，Kotlin/Native 有一個預設限制，將從 Swift 和 Objective-C 呼叫 Kotlin 暫停函式的功能限制在主執行緒。Kotlin 2.0.20 解除了該限制，允許您從 Swift/Objective-C 在任何執行緒上執行 Kotlin <code>suspend</code> 函式。</p><p>如果您之前已使用 <code>kotlin.native.binary.objcExportSuspendFunctionLaunchThreadRestriction=none</code> 二進位選項切換了非主執行緒的預設行為，您現在可以將其從 <code>gradle.properties</code> 檔案中移除。</p><h2 id="kotlin-wasm" tabindex="-1">Kotlin/Wasm <a class="header-anchor" href="#kotlin-wasm" aria-label="Permalink to &quot;Kotlin/Wasm&quot;">​</a></h2><p>在 Kotlin 2.0.20 中，Kotlin/Wasm 持續轉向命名匯出並重新定位 <code>@ExperimentalWasmDsl</code> 註解。</p><h3 id="預設匯出使用中的錯誤" tabindex="-1">預設匯出使用中的錯誤 <a class="header-anchor" href="#預設匯出使用中的錯誤" aria-label="Permalink to &quot;預設匯出使用中的錯誤&quot;">​</a></h3><p>作為轉向命名匯出的一部分，當在 JavaScript 中使用 Kotlin/Wasm 匯出的預設匯入時，之前會向主控台列印警告訊息。</p><p>為了完全支援命名匯出，此警告現在已升級為錯誤。如果您使用預設匯入，您會遇到以下錯誤訊息：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Do not use default import. Use the corresponding named import instead.</span></span></code></pre></div><p>此變更是棄用週期的一部分，旨在轉向命名匯出。以下是每個階段您可以預期的內容：</p><ul><li><strong>在 2.0.0 版中</strong>：主控台會列印警告訊息，解釋透過預設匯出匯出實體已被棄用。</li><li><strong>在 2.0.20 版中</strong>：發生錯誤，要求使用相應的命名匯入。</li><li><strong>在 2.1.0 版中</strong>：完全移除預設匯入的使用。</li></ul><h3 id="experimentalwasmdsl-註解的新位置" tabindex="-1">ExperimentalWasmDsl 註解的新位置 <a class="header-anchor" href="#experimentalwasmdsl-註解的新位置" aria-label="Permalink to &quot;ExperimentalWasmDsl 註解的新位置&quot;">​</a></h3><p>以前，WebAssembly (Wasm) 功能的 <code>@ExperimentalWasmDsl</code> 註解位於 Kotlin Gradle 外掛程式中的此位置：</p><div class="language-Kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.jetbrains.kotlin.gradle.targets.js.dsl.ExperimentalWasmDsl</span></span></code></pre></div><p>在 2.0.20 中，<code>@ExperimentalWasmDsl</code> 註解已重新定位到：</p><div class="language-Kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">org.jetbrains.kotlin.gradle.ExperimentalWasmDsl</span></span></code></pre></div><p>舊位置現在已被棄用，並可能導致建構失敗，出現未解析的引用。</p><p>為了反映 <code>@ExperimentalWasmDsl</code> 註解的新位置，請更新您的 Gradle 建構腳本中的 import 語句。 使用新 <code>@ExperimentalWasmDsl</code> 位置的明確 import：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.kotlin.gradle.ExperimentalWasmDsl</span></span></code></pre></div><p>或者，從舊套件中移除此星號 import 語句：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.kotlin.gradle.targets.js.dsl.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span></code></pre></div><h2 id="kotlin-js" tabindex="-1">Kotlin/JS <a class="header-anchor" href="#kotlin-js" aria-label="Permalink to &quot;Kotlin/JS&quot;">​</a></h2><p>Kotlin/JS 引入了一些實驗性功能，以支援 JavaScript 中的靜態成員以及從 JavaScript 建立 Kotlin 集合。</p><h3 id="支援在-javascript-中使用-kotlin-靜態成員" tabindex="-1">支援在 JavaScript 中使用 Kotlin 靜態成員 <a class="header-anchor" href="#支援在-javascript-中使用-kotlin-靜態成員" aria-label="Permalink to &quot;支援在 JavaScript 中使用 Kotlin 靜態成員&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>此功能為<a href="/zh-Hant/kotlin/components-stability#stability-levels-explained">實驗性</a>。它可能隨時被移除或更改。 僅用於評估目的。我們非常感謝您在 <a href="https://youtrack.jetbrains.com/issue/KT-18891/JS-provide-a-way-to-declare-static-members-JsStatic" target="_blank" rel="noreferrer">YouTrack</a> 中的回饋。</p></div><p>從 Kotlin 2.0.20 開始，您可以使用 <code>@JsStatic</code> 註解。它的工作方式類似於 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.jvm/-jvm-static/" target="_blank" rel="noreferrer">@JvmStatic</a> 並指示編譯器為目標宣告生成額外的靜態方法。這有助於您直接在 JavaScript 中使用 Kotlin 程式碼中的靜態成員。</p><p>您可以將 <code>@JsStatic</code> 註解用於命名物件中定義的函式，以及在類別和介面內部宣告的伴隨物件中定義的函式。編譯器會生成物件的靜態方法和物件本身的實例方法。例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> C</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    companion</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        @JsStatic</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> callStatic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> callNonStatic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>現在，<code>callStatic()</code> 在 JavaScript 中是靜態的，而 <code>callNonStatic()</code> 則不是：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">C</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">callStatic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();              </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Works, accessing the static function</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">C</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">callNonStatic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();           </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Error, not a static function in the generated JavaScript</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">C</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.Companion.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">callStatic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Instance method remains</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">C</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.Companion.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">callNonStatic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// The only way it works</span></span></code></pre></div><p>也可以將 <code>@JsStatic</code> 註解應用於物件或伴隨物件的屬性，使其 getter 和 setter 方法成為該物件或包含伴隨物件的類別中的靜態成員。</p><h3 id="能夠從-javascript-建立-kotlin-集合" tabindex="-1">能夠從 JavaScript 建立 Kotlin 集合 <a class="header-anchor" href="#能夠從-javascript-建立-kotlin-集合" aria-label="Permalink to &quot;能夠從 JavaScript 建立 Kotlin 集合&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>此功能為<a href="/zh-Hant/kotlin/components-stability#stability-levels-explained">實驗性</a>。它可能隨時被移除或更改。 僅用於評估目的。我們非常感謝您在 <a href="https://youtrack.jetbrains.com/issue/KT-69133/Kotlin-JS-Add-support-for-collection-instantiation-in-JavaScript" target="_blank" rel="noreferrer">YouTrack</a> 中的回饋。</p></div><p>Kotlin 2.0.0 引入了將 Kotlin 集合匯出到 JavaScript（和 TypeScript）的功能。現在，JetBrains 團隊 正在採取另一步驟來改進集合互通性。從 Kotlin 2.0.20 開始，可以直接從 JavaScript/TypeScript 端建立 Kotlin 集合。</p><p>您可以從 JavaScript 建立 Kotlin 集合並將其作為參數傳遞給匯出的建構函式或函式。 只要您在匯出的宣告中提及集合，Kotlin 就會為該集合生成一個在 JavaScript/TypeScript 中可用的工廠。</p><p>請看以下匯出函式：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Kotlin</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JsExport</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> consumeMutableMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(map: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MutableMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;)</span></span></code></pre></div><p>由於提到了 <code>MutableMap</code> 集合，Kotlin 會生成一個物件，其中包含一個可從 JavaScript/TypeScript 存取的工廠方法。 此工廠方法接著從 JavaScript <code>Map</code> 建立一個 <code>MutableMap</code>：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// JavaScript</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { consumeMutableMap } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;an-awesome-kotlin-module&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { KtMutableMap } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;an-awesome-kotlin-module/kotlin-kotlin-stdlib&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">consumeMutableMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    KtMutableMap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fromJsMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;First&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Second&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]]))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>此功能適用於 <code>Set</code>、<code>Map</code> 和 <code>List</code> Kotlin 集合型別及其可變對應項。</p><h2 id="gradle" tabindex="-1">Gradle <a class="header-anchor" href="#gradle" aria-label="Permalink to &quot;Gradle&quot;">​</a></h2><p>Kotlin 2.0.20 與 Gradle 6.8.3 到 8.6 完全相容。Gradle 8.7 和 8.8 也受支援，但只有一個 例外：如果您使用 Kotlin Multiplatform Gradle 外掛程式，您可能會在呼叫 JVM 目標中的 <code>withJava()</code> 函數的多平台專案中看到棄用警告。我們計畫盡快解決此問題。</p><p>更多資訊請參閱 <a href="https://youtrack.jetbrains.com/issue/KT-66542/Gradle-JVM-target-with-withJava-produces-a-deprecation-warning" target="_blank" rel="noreferrer">YouTrack</a> 中的問題。</p><p>您也可以使用最新 Gradle 版本之前的 Gradle 版本，但如果您這樣做，請記住您可能會遇到 棄用警告或某些新的 Gradle 功能可能無法正常運作。</p><p>此版本帶來了諸多變更，例如開始棄用基於 JVM 歷史檔案的舊式增量編譯方法，以及在專案之間共享 JVM 構件的新方式。</p><h3 id="棄用基於-jvm-歷史檔案的增量編譯" tabindex="-1">棄用基於 JVM 歷史檔案的增量編譯 <a class="header-anchor" href="#棄用基於-jvm-歷史檔案的增量編譯" aria-label="Permalink to &quot;棄用基於 JVM 歷史檔案的增量編譯&quot;">​</a></h3><p>在 Kotlin 2.0.20 中，基於 JVM 歷史檔案的增量編譯方法已被棄用，轉而使用自 Kotlin 1.8.20 以來預設啟用的新增量編譯方法。</p><p>基於 JVM 歷史檔案的增量編譯方法存在局限性， 例如不適用於 <a href="https://docs.gradle.org/current/userguide/build_cache.html" target="_blank" rel="noreferrer">Gradle 的建構快取</a> 且不支援編譯迴避。 相比之下，新的增量編譯方法克服了這些局限性，並且自引入以來表現良好。</p><p>鑑於新的增量編譯方法已預設用於過去兩個主要的 Kotlin 版本， <code>kotlin.incremental.useClasspathSnapshot</code> Gradle 屬性在 Kotlin 2.0.20 中被棄用。 因此，如果您使用它來選擇停用，您將看到棄用警告。</p><h3 id="選項-以類別檔案形式在專案之間共享-jvm-構件" tabindex="-1">選項：以類別檔案形式在專案之間共享 JVM 構件 <a class="header-anchor" href="#選項-以類別檔案形式在專案之間共享-jvm-構件" aria-label="Permalink to &quot;選項：以類別檔案形式在專案之間共享 JVM 構件&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>此功能為<a href="/zh-Hant/kotlin/components-stability#stability-levels-explained">實驗性</a>。 它可能隨時被移除或更改。僅用於評估目的。 我們非常感謝您在 <a href="https://youtrack.jetbrains.com/issue/KT-61861/Gradle-Kotlin-compilations-depend-on-packed-artifacts" target="_blank" rel="noreferrer">YouTrack</a> 中的回饋。 需要選擇啟用（詳情如下）。</p></div><p>在 Kotlin 2.0.20 中，我們引入了一種新方法，改變了 Kotlin/JVM 編譯的輸出（例如 JAR 檔案）在專案之間共享的方式。透過這種方法，Gradle 的 <code>apiElements</code> 配置現在具有一個次要變體，提供對包含已編譯 <code>.class</code> 檔案的目錄的存取。當配置時，您的專案會使用此目錄，而不是在編譯期間請求壓縮的 JAR 構件。這減少了 JAR 檔案被壓縮和解壓縮的次數，特別是對於增量建構。</p><p>我們的測試顯示，這種新方法可以為 Linux 和 macOS 主機提供建構效能改進。 然而，在 Windows 主機上，由於 Windows 處理檔案 I/O 操作的方式，我們發現效能有所下降。</p><p>要嘗試這種新方法，請將以下屬性添加到您的 <code>gradle.properties</code> 檔案中：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.jvm.addClassesVariant=true</span></span></code></pre></div><p>預設情況下，此屬性設定為 <code>false</code>，並且 Gradle 中的 <code>apiElements</code> 變體請求壓縮的 JAR 構件。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Gradle 有一個相關屬性，您可以在您的僅 Java 專案中使用它，以便在編譯期間<strong>僅</strong>公開壓縮的 JAR 構件，<strong>而不</strong>是包含已編譯 <code>.class</code> 檔案的目錄： <code>none org.gradle.java.compile-classpath-packaging=true </code> 有關此屬性及其用途的更多資訊， 請參閱 Gradle 文件中關於<a href="https://docs.gradle.org/current/userguide/java_library_plugin.html#sub:java_library_known_issues_windows_performance" target="_blank" rel="noreferrer">大型多專案在 Windows 上建構效能顯著下降</a>的內容。</p></div><p>我們非常感謝您對這種新方法的回饋。您在使用它時是否注意到任何效能改進？ 請透過在 <a href="https://youtrack.jetbrains.com/issue/KT-61861/Gradle-Kotlin-compilations-depend-on-packed-artifacts" target="_blank" rel="noreferrer">YouTrack</a> 中新增評論來告訴我們。</p><h3 id="調整-kotlin-gradle-外掛程式與-java-test-fixtures-外掛程式的依賴行為" tabindex="-1">調整 Kotlin Gradle 外掛程式與 java-test-fixtures 外掛程式的依賴行為 <a class="header-anchor" href="#調整-kotlin-gradle-外掛程式與-java-test-fixtures-外掛程式的依賴行為" aria-label="Permalink to &quot;調整 Kotlin Gradle 外掛程式與 java-test-fixtures 外掛程式的依賴行為&quot;">​</a></h3><p>在 Kotlin 2.0.20 之前，如果您在專案中使用了 <a href="https://docs.gradle.org/current/userguide/java_testing.html#sec:java_test_fixtures" target="_blank" rel="noreferrer"><code>java-test-fixtures</code> 外掛程式</a>，則 Gradle 和 Kotlin Gradle 外掛程式在依賴傳播方式上存在差異。</p><p>Kotlin Gradle 外掛程式會傳播依賴：</p><ul><li>從 <code>java-test-fixtures</code> 外掛程式的 <code>implementation</code> 和 <code>api</code> 依賴型別到 <code>test</code> 原始碼集編譯類別路徑。</li><li>從主原始碼集的 <code>implementation</code> 和 <code>api</code> 依賴型別到 <code>java-test-fixtures</code> 外掛程式的原始碼集編譯類別路徑。</li></ul><p>然而，Gradle 只會傳播 <code>api</code> 依賴型別中的依賴。</p><p>這種行為差異導致一些專案在類別路徑中多次找到資源檔案。</p><p>自 Kotlin 2.0.20 起，Kotlin Gradle 外掛程式的行為與 Gradle 的 <code>java-test-fixtures</code> 外掛程式對齊，因此此問題不再發生於此或其他 Gradle 外掛程式。</p><p>由於此變更，<code>test</code> 和 <code>testFixtures</code> 原始碼集中的某些依賴可能不再可存取。 如果發生這種情況，請將依賴宣告型別從 <code>implementation</code> 變更為 <code>api</code>，或在受影響的原始碼集上新增新的依賴宣告。</p><h3 id="為編譯任務缺少構件依賴的極少數情況新增任務依賴" tabindex="-1">為編譯任務缺少構件依賴的極少數情況新增任務依賴 <a class="header-anchor" href="#為編譯任務缺少構件依賴的極少數情況新增任務依賴" aria-label="Permalink to &quot;為編譯任務缺少構件依賴的極少數情況新增任務依賴&quot;">​</a></h3><p>在 2.0.20 之前，我們發現有些情況下，編譯任務缺少其一個構件輸入的任務依賴。這意味著依賴編譯任務的結果是不穩定的，因為有時構件會及時生成，但有時則不會。</p><p>為了修正此問題，Kotlin Gradle 外掛程式現在會在此類情況下自動新增所需的任務依賴。</p><p>在極少數情況下，我們發現這種新行為可能導致循環依賴錯誤。 例如，如果您有多個編譯，其中一個編譯可以看到另一個編譯的所有內部宣告，並且生成的構件依賴於兩個編譯任務的輸出，您可能會看到類似以下的錯誤：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>FAILURE: Build failed with an exception.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>What went wrong:</span></span>
<span class="line"><span>Circular dependency between the following tasks:</span></span>
<span class="line"><span>:lib:compileKotlinJvm</span></span>
<span class="line"><span>--- :lib:jvmJar</span></span>
<span class="line"><span>     \\--- :lib:compileKotlinJvm (*)</span></span>
<span class="line"><span>(*) - details omitted (listed previously)</span></span></code></pre></div><p>為了修正此循環依賴錯誤，我們新增了一個 Gradle 屬性：<code>archivesTaskOutputAsFriendModule</code>。</p><p>預設情況下，此屬性設定為 <code>true</code> 以追蹤任務依賴。要停用在編譯任務中使用構件，以便不需要任務依賴，請在您的 <code>gradle.properties</code> 檔案中新增以下內容：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kotlin.build.archivesTaskOutputAsFriendModule</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span></code></pre></div><p>更多資訊請參閱 <a href="https://youtrack.jetbrains.com/issue/KT-69330" target="_blank" rel="noreferrer">YouTrack</a> 中的問題。</p><h2 id="compose-編譯器" tabindex="-1">Compose 編譯器 <a class="header-anchor" href="#compose-編譯器" aria-label="Permalink to &quot;Compose 編譯器&quot;">​</a></h2><p>在 Kotlin 2.0.20 中，Compose 編譯器獲得了一些改進。</p><h3 id="修正-2-0-0-中引入的不必要重新組合問題" tabindex="-1">修正 2.0.0 中引入的不必要重新組合問題 <a class="header-anchor" href="#修正-2-0-0-中引入的不必要重新組合問題" aria-label="Permalink to &quot;修正 2.0.0 中引入的不必要重新組合問題&quot;">​</a></h3><p>Compose 編譯器 2.0.0 有一個問題，它有時會錯誤地推斷多平台專案中具有非 JVM 目標的型別的穩定性。這可能導致不必要（甚至無止盡）的重新組合。我們強烈建議將您為 Kotlin 2.0.0 製作的 Compose 應用程式更新到 2.0.10 或更高版本。</p><p>如果您的應用程式是使用 Compose 編譯器 2.0.10 或更高版本建構的，但使用了版本 2.0.0 建構的依賴， 這些舊的依賴仍可能導致重新組合問題。 為防止這種情況，請將您的依賴更新到與您的應用程式使用相同 Compose 編譯器版本建構的版本。</p><h3 id="配置編譯器選項的新方式" tabindex="-1">配置編譯器選項的新方式 <a class="header-anchor" href="#配置編譯器選項的新方式" aria-label="Permalink to &quot;配置編譯器選項的新方式&quot;">​</a></h3><p>我們引入了一種新的選項配置機制，以避免頂層參數的變動。 對於 Compose 編譯器團隊來說，透過建立或移除 <code>composeCompiler {}</code> 區塊的頂層條目來測試東西會更困難。 因此，諸如強跳過模式和非跳過群組優化等選項現在透過 <code>featureFlags</code> 屬性啟用。 此屬性將用於測試最終將成為預設值的新 Compose 編譯器選項。</p><p>此變更也已套用到 Compose 編譯器 Gradle 外掛程式。要配置未來的 feature flags， 請使用以下語法（此程式碼將反轉所有預設值）：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">composeCompiler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    featureFlags </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ComposeFeatureFlag.IntrinsicRemember.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">disabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ComposeFeatureFlag.OptimizeNonSkippingGroups,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ComposeFeatureFlag.StrongSkipping.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">disabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>或者，如果您直接配置 Compose 編譯器，請使用以下語法：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>-P plugin:androidx.compose.compiler.plugins.kotlin:featureFlag=IntrinsicRemember</span></span></code></pre></div><p>因此，<code>enableIntrinsicRemember</code>、<code>enableNonSkippingGroupOptimization</code> 和 <code>enableStrongSkippingMode</code> 屬性已被棄用。</p><p>我們非常感謝您在 <a href="https://youtrack.jetbrains.com/issue/KT-68651/Compose-provide-a-single-place-in-extension-to-configure-all-compose-flags" target="_blank" rel="noreferrer">YouTrack</a> 中對這種新方法的回饋。</p><h3 id="強力跳過模式預設啟用" tabindex="-1">強力跳過模式預設啟用 <a class="header-anchor" href="#強力跳過模式預設啟用" aria-label="Permalink to &quot;強力跳過模式預設啟用&quot;">​</a></h3><p>Compose 編譯器的強力跳過模式現在預設啟用。</p><p>強力跳過模式是一個 Compose 編譯器配置選項，它更改了哪些組合式函式可以被跳過的規則。 啟用強力跳過模式後，參數不穩定的組合式函式現在也可以被跳過。 強力跳過模式還會自動記住組合式函式中使用的 lambda， 因此您應該不再需要使用 <code>remember</code> 包裝您的 lambda 以避免重新組合。</p><p>更多詳情請參閱<a href="https://developer.android.com/develop/ui/compose/performance/stability/strongskipping" target="_blank" rel="noreferrer">強力跳過模式文件</a>。</p><h3 id="組合追蹤標記預設啟用" tabindex="-1">組合追蹤標記預設啟用 <a class="header-anchor" href="#組合追蹤標記預設啟用" aria-label="Permalink to &quot;組合追蹤標記預設啟用&quot;">​</a></h3><p><code>includeTraceMarkers</code> 選項現在在 Compose 編譯器 Gradle 外掛程式中預設設定為 <code>true</code>，以符合編譯器外掛程式中的預設值。這使您可以在 Android Studio 系統追蹤分析器中看到組合式函式。有關組合追蹤的詳情，請參閱這篇 <a href="https://medium.com/androiddevelopers/jetpack-compose-composition-tracing-9ec2b3aea535" target="_blank" rel="noreferrer">Android 開發者部落格文章</a>。</p><h3 id="非跳過群組優化" tabindex="-1">非跳過群組優化 <a class="header-anchor" href="#非跳過群組優化" aria-label="Permalink to &quot;非跳過群組優化&quot;">​</a></h3><p>此版本包含一個新的編譯器選項：啟用後，不可跳過且不可重新啟動的組合式函式將不再在組合式函式主體周圍生成一個群組。這會導致更少的分配，從而提高效能。 此選項是實驗性的，預設為禁用，但可以使用功能標記 <code>OptimizeNonSkippingGroups</code> 啟用，如<a href="#new-way-to-configure-compiler-options">上文</a>所示。</p><p>此功能標記現在已準備好進行更廣泛的測試。在啟用此功能時發現的任何問題都可以在 <a href="https://goo.gle/compose-feedback" target="_blank" rel="noreferrer">Google 問題追蹤器</a>中提出。</p><h3 id="支援抽象組合式函式中的預設參數" tabindex="-1">支援抽象組合式函式中的預設參數 <a class="header-anchor" href="#支援抽象組合式函式中的預設參數" aria-label="Permalink to &quot;支援抽象組合式函式中的預設參數&quot;">​</a></h3><p>您現在可以為抽象組合式函式新增預設參數。</p><p>以前，即使這是有效的 Kotlin 程式碼，Compose 編譯器也會在嘗試執行此操作時報告錯誤。 我們現在已在 Compose 編譯器中新增了對此的支援，並且該限制已被移除。 這對於包含預設 <code>Modifier</code> 值特別有用：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Composables</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @Composable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Composable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(modifier: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Modifier</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Modifier)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>對於開放組合式函式的預設參數在 2.0.20 中仍然受限。此限制將在未來版本中解決。</p><h2 id="標準函式庫" tabindex="-1">標準函式庫 <a class="header-anchor" href="#標準函式庫" aria-label="Permalink to &quot;標準函式庫&quot;">​</a></h2><p>標準函式庫現在支援作為實驗性功能的全球唯一識別碼，並包括 Base64 解碼的一些變更。</p><h3 id="通用-kotlin-標準函式庫中對-uuids-的支援" tabindex="-1">通用 Kotlin 標準函式庫中對 UUIDs 的支援 <a class="header-anchor" href="#通用-kotlin-標準函式庫中對-uuids-的支援" aria-label="Permalink to &quot;通用 Kotlin 標準函式庫中對 UUIDs 的支援&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>此功能為<a href="/zh-Hant/kotlin/components-stability#stability-levels-explained">實驗性</a>。 若要選擇啟用，請使用 <code>@ExperimentalUuidApi</code> 註解或編譯器選項 <code>-opt-in=kotlin.uuid.ExperimentalUuidApi</code>。</p></div><p>Kotlin 2.0.20 在通用 Kotlin 標準函式庫中引入了一個用於表示 <a href="https://en.wikipedia.org/wiki/Universally_unique_identifier" target="_blank" rel="noreferrer">UUIDs (全球唯一識別碼)</a> 的類別，以解決唯一識別項目的挑戰。</p><p>此外，此功能還提供了用於以下 UUID 相關操作的 API：</p><ul><li>生成 UUIDs。</li><li>從字串表示法解析 UUIDs 並將其格式化為字串。</li><li>從指定的 128 位元值建立 UUIDs。</li><li>存取 UUID 的 128 位元。</li></ul><p>以下程式碼範例展示了這些操作：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 建構位元組陣列以建立 UUID</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> byteArray </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> byteArrayOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    0x55</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x0E</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x84</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toByte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x00</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0xE2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toByte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x9B</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toByte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x41</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0xD4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toByte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    0xA7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toByte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x44</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x66</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x55</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x44</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x00</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x00</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uuid1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Uuid.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fromByteArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(byteArray)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uuid2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Uuid.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fromULongs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0x550E8400E29B41D4u</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">L, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0xA716446655440000u</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">L)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uuid3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Uuid.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;550e8400-e29b-41d4-a716-446655440000&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(uuid1)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 550e8400-e29b-41d4-a716-446655440000</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(uuid1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uuid2)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(uuid2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uuid3)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 存取 UUID 位元</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> version </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uuid1.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toLongs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { mostSignificantBits, _ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ((mostSignificantBits shr </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) and </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0xF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(version)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 4</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 生成隨機 UUID</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> randomUuid </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Uuid.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">random</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(uuid1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> randomUuid)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// false</span></span></code></pre></div><p>為了維持與使用 <code>java.util.UUID</code> 的 API 的相容性，Kotlin/JVM 中有兩個擴充函式用於在 <code>java.util.UUID</code> 和 <code>kotlin.uuid.Uuid</code> 之間進行轉換：<code>.toJavaUuid()</code> 和 <code>.toKotlinUuid()</code>。例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> kotlinUuid </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Uuid.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parseHex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;550e8400e29b41d4a716446655440000&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 將 Kotlin UUID 轉換為 java.util.UUID</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> javaUuid </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> kotlinUuid.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toJavaUuid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> javaUuid </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.util.UUID.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fromString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;550e8400-e29b-41d4-a716-446655440000&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 將 Java UUID 轉換為 kotlin.uuid.Uuid</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> kotlinUuid </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> javaUuid.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toKotlinUuid</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>此功能和提供的 API 透過允許在多個平台之間共享程式碼來簡化多平台軟體開發。UUIDs 在難以生成唯一識別碼的環境中也十分理想。</p><p>涉及 UUIDs 的一些範例使用案例包括：</p><ul><li>為資料庫記錄分配唯一 ID。</li><li>生成網路會話識別碼。</li><li>任何需要唯一識別或追蹤的情境。</li></ul><h3 id="hexformat-中的-minlength-支援" tabindex="-1">HexFormat 中的 minLength 支援 <a class="header-anchor" href="#hexformat-中的-minlength-支援" aria-label="Permalink to &quot;HexFormat 中的 minLength 支援&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/-hex-format/" target="_blank" rel="noreferrer"><code>HexFormat</code></a> 類別及其屬性為 <a href="/zh-Hant/kotlin/components-stability#stability-levels-explained">實驗性</a>。 若要選擇啟用，請使用 <code>@OptIn(ExperimentalStdlibApi::class)</code> 註解或編譯器 選項 <code>-opt-in=kotlin.ExperimentalStdlibApi</code>。</p></div><p>Kotlin 2.0.20 為 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/-hex-format/-number-hex-format/" target="_blank" rel="noreferrer"><code>NumberHexFormat</code></a> 類別新增了新的 <code>minLength</code> 屬性， 可透過 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/-hex-format/number.html" target="_blank" rel="noreferrer"><code>HexFormat.number</code></a> 存取。 此屬性讓您可以指定數值十六進位表示法中的最小位數，從而能夠用零填充以滿足所需長度。此外，可以使用 <code>removeLeadingZeros</code> 屬性修剪前導零：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">93</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toHexString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HexFormat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        number.minLength </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        number.removeLeadingZeros </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // &quot;005d&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>minLength</code> 屬性不影響解析。然而，解析現在允許十六進位字串的位數多於型別的寬度，如果額外的進位位元是零的話。</p><h3 id="base64-解碼器行為的變更" tabindex="-1">Base64 解碼器行為的變更 <a class="header-anchor" href="#base64-解碼器行為的變更" aria-label="Permalink to &quot;Base64 解碼器行為的變更&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.io.encoding/-base64/" target="_blank" rel="noreferrer"><code>Base64</code> 類別</a> 及其 相關功能為<a href="/zh-Hant/kotlin/components-stability#stability-levels-explained">實驗性</a>。 若要選擇啟用，請使用 <code>@OptIn(ExperimentalEncodingApi::class)</code> 註解或編譯器選項 <code>-opt-in=kotlin.io.encoding.ExperimentalEncodingApi</code>。</p></div><p>Kotlin 2.0.20 中對 Base64 解碼器的行為引入了兩項變更：</p><ul><li><a href="#the-base64-decoder-now-requires-padding">Base64 解碼器現在需要填充</a></li><li><a href="#withpadding-function-for-padding-configuration">已新增用於填充配置的 <code>withPadding</code> 函數</a></li></ul><h4 id="base64-解碼器現在需要填充" tabindex="-1">Base64 解碼器現在需要填充 <a class="header-anchor" href="#base64-解碼器現在需要填充" aria-label="Permalink to &quot;Base64 解碼器現在需要填充&quot;">​</a></h4><p>Base64 編碼器現在預設新增填充，解碼器在解碼時需要填充並禁止非零填充位元。</p><h4 id="用於填充配置的-withpadding-函數" tabindex="-1">用於填充配置的 withPadding 函數 <a class="header-anchor" href="#用於填充配置的-withpadding-函數" aria-label="Permalink to &quot;用於填充配置的 withPadding 函數&quot;">​</a></h4><p>已引入新的 <code>.withPadding()</code> 函數，以便使用者控制 Base64 編碼和解碼的填充行為：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> base64 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Base64.UrlSafe.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withPadding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Base64.PaddingOption.ABSENT_OPTIONAL)</span></span></code></pre></div><p>此函數允許建立具有不同填充選項的 <code>Base64</code> 實例：</p><table tabindex="0"><thead><tr><th><code>PaddingOption</code></th><th>編碼時</th><th>解碼時</th></tr></thead><tbody><tr><td><code>PRESENT</code></td><td>新增填充</td><td>需要填充</td></tr><tr><td><code>ABSENT</code></td><td>忽略填充</td><td>不允許填充</td></tr><tr><td><code>PRESENT_OPTIONAL</code></td><td>新增填充</td><td>填充是可選的</td></tr><tr><td><code>ABSENT_OPTIONAL</code></td><td>忽略填充</td><td>填充是可選的</td></tr></tbody></table><p>您可以建立具有不同填充選項的 <code>Base64</code> 實例，並使用它們來編碼和解碼資料：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.io.encoding.Base64</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.io.encoding.ExperimentalEncodingApi</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalEncodingApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 範例編碼資料</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;fooba&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toByteArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 建立一個帶有 URL 安全字母表和 PRESENT 填充的 Base64 實例</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> base64Present </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Base64.UrlSafe.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withPadding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Base64.PaddingOption.PRESENT)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> encodedDataPresent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> base64Present.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">encode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Encoded data with PRESENT padding: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$encodedDataPresent</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Encoded data with PRESENT padding: Zm9vYmE=</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 建立一個帶有 URL 安全字母表和 ABSENT 填充的 Base64 實例</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> base64Absent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Base64.UrlSafe.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withPadding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Base64.PaddingOption.ABSENT)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> encodedDataAbsent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> base64Absent.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">encode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Encoded data with ABSENT padding: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$encodedDataAbsent</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Encoded data with ABSENT padding: Zm9vYmE</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 解碼資料</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> decodedDataPresent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> base64Present.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">decode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(encodedDataPresent)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Decoded data with PRESENT padding: \${</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(decodedDataPresent)}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Decoded data with PRESENT padding: fooba</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> decodedDataAbsent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> base64Absent.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">decode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(encodedDataAbsent)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Decoded data with ABSENT padding: \${</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(decodedDataAbsent)}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Decoded data with ABSENT padding: fooba</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="文件更新" tabindex="-1">文件更新 <a class="header-anchor" href="#文件更新" aria-label="Permalink to &quot;文件更新&quot;">​</a></h2><p>Kotlin 文件收到了一些顯著的變更：</p><ul><li>改進了<a href="/zh-Hant/kotlin/standard-input">標準輸入頁面</a> - 學習如何使用 Java Scanner 和 <code>readln()</code>。</li><li>改進了<a href="/zh-Hant/kotlin/k2-compiler-migration-guide">K2 編譯器遷移指南</a> - 學習效能改進、與 Kotlin 函式庫的相容性以及如何處理您的自訂編譯器外掛程式。</li><li>改進了<a href="/zh-Hant/kotlin/exceptions">異常頁面</a> - 學習異常、如何拋出和捕捉它們。</li><li>改進了<a href="/zh-Hant/kotlin/jvm-test-using-junit">在 JVM 中使用 JUnit 測試程式碼 – 教學課程</a> - 學習如何使用 JUnit 建立測試。</li><li>改進了<a href="/zh-Hant/kotlin/native-objc-interop">與 Swift/Objective-C 的互通性頁面</a> - 學習如何在 Swift/Objective-C 程式碼中使用 Kotlin 宣告以及在 Kotlin 程式碼中使用 Objective-C 宣告。</li><li>改進了<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-spm-export.html" target="_blank" rel="noreferrer">Swift 套件匯出設定頁面</a> - 學習如何設定 Kotlin/Native 輸出，使其可由 Swift 套件管理器依賴使用。</li></ul><h2 id="安裝-kotlin-2-0-20" tabindex="-1">安裝 Kotlin 2.0.20 <a class="header-anchor" href="#安裝-kotlin-2-0-20" aria-label="Permalink to &quot;安裝 Kotlin 2.0.20&quot;">​</a></h2><p>從 IntelliJ IDEA 2023.3 和 Android Studio Iguana (2023.2.1) Canary 15 開始，Kotlin 外掛程式作為捆綁外掛程式隨您的 IDE 一起發布。這意味著您無法再從 JetBrains Marketplace 安裝外掛程式。</p><p>要更新到新的 Kotlin 版本，請在您的建構腳本中<a href="/zh-Hant/kotlin/releases#update-to-a-new-kotlin-version">將 Kotlin 版本更改</a>為 2.0.20。</p>`,160))])}const f=r(c,[["render",E]]);export{C as __pageData,f as default};
