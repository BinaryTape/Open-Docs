import{_ as d}from"./chunks/icon-1.K8qzZaho.js";import{_ as g}from"./chunks/icon-2-todo.CF_tKCD9.js";import{_ as E}from"./chunks/icon-3-todo.Gx4op1du.js";import{_ as c}from"./chunks/icon-4-todo.GaeEmerm.js";import{_ as u,a as m,b as y,c as F,d as C}from"./chunks/spring-application-response.CubByq9P.js";import{_ as b,C as p,c as B,o as f,j as s,G as a,ag as e,a as i,w as l}from"./chunks/framework.Bksy39di.js";const J=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/jvm-create-project-with-spring-boot.md","filePath":"ja/kotlin/jvm-create-project-with-spring-boot.md","lastUpdated":1754307826000}'),A={name:"ja/kotlin/jvm-create-project-with-spring-boot.md"};function S(_,n,q,D,v,j){const r=p("web-summary"),k=p("tldr"),t=p("def"),o=p("deflist"),h=p("code-block");return f(),B("div",null,[n[14]||(n[14]=s("h1",{id:"kotlinでspring-bootプロジェクトを作成する",tabindex:"-1"},[i("KotlinでSpring Bootプロジェクトを作成する "),s("a",{class:"header-anchor",href:"#kotlinでspring-bootプロジェクトを作成する","aria-label":'Permalink to "KotlinでSpring Bootプロジェクトを作成する"'},"​")],-1)),a(r,null,{default:l(()=>n[0]||(n[0]=[i("IntelliJ IDEAを使用してKotlinでSpring Bootアプリケーションを作成します。")])),_:1}),a(k,null,{default:l(()=>n[1]||(n[1]=[s("p",null,[i("これは、"),s("strong",null,"Spring BootとKotlin入門"),i("チュートリアルの最初のパートです。")],-1),s("br",null,null,-1),s("p",null,[s("img",{src:d,width:"20",alt:"最初のステップ"}),i(),s("strong",null,"KotlinでSpring Bootプロジェクトを作成する"),s("br"),s("img",{src:g,width:"20",alt:"2番目のステップ"}),i(" Spring Bootプロジェクトにデータクラスを追加する"),s("br"),s("img",{src:E,width:"20",alt:"3番目のステップ"}),i(" Spring Bootプロジェクトのデータベースサポートを追加する"),s("br"),s("img",{src:c,width:"20",alt:"4番目のステップ"}),i(" データベースアクセスにSpring Data CrudRepositoryを使用する"),s("br")],-1)])),_:1}),n[15]||(n[15]=e(`<p>チュートリアルの最初のパートでは、IntelliJ IDEAのプロジェクトウィザードを使用して、GradleでSpring Bootプロジェクトを作成する方法を示します。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>このチュートリアルでは、ビルドシステムとしてGradleを使用する必要はありません。Mavenを使用する場合でも、同じ手順に従うことができます。</p></div><h2 id="開始する前に" tabindex="-1">開始する前に <a class="header-anchor" href="#開始する前に" aria-label="Permalink to &quot;開始する前に&quot;">​</a></h2><p><a href="https://www.jetbrains.com/idea/download/index.html" target="_blank" rel="noreferrer">IntelliJ IDEA Ultimate Edition</a>の最新バージョンをダウンロードしてインストールしてください。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>IntelliJ IDEA Community Editionまたは他のIDEを使用している場合は、 <a href="https://start.spring.io/#!language=kotlin&amp;type=gradle-project-kotlin" target="_blank" rel="noreferrer">ウェブベースのプロジェクトジェネレーター</a>を使用してSpring Bootプロジェクトを生成できます。</p></div><h2 id="spring-bootプロジェクトを作成する" tabindex="-1">Spring Bootプロジェクトを作成する <a class="header-anchor" href="#spring-bootプロジェクトを作成する" aria-label="Permalink to &quot;Spring Bootプロジェクトを作成する&quot;">​</a></h2><p>IntelliJ IDEA Ultimate Editionのプロジェクトウィザードを使用して、Kotlinで新しいSpring Bootプロジェクトを作成します。</p><ol><li>IntelliJ IDEAで、<strong>File</strong> | <strong>New</strong> | <strong>Project</strong>を選択します。</li><li>左側のパネルで、<strong>New Project</strong> | <strong>Spring Boot</strong>を選択します。</li><li><strong>New Project</strong>ウィンドウで、以下のフィールドとオプションを指定します。</li></ol><ul><li><strong>Name</strong>: demo</li><li><strong>Language</strong>: Kotlin</li><li><strong>Type</strong>: Gradle - Kotlin</li></ul><pre><code> ::: tip
 このオプションは、ビルドシステムとDSLを指定します。
 :::
</code></pre><ul><li><strong>Package name</strong>: com.example.demo</li><li><strong>JDK</strong>: Java JDK</li></ul><pre><code> ::: note
 このチュートリアルでは、**Amazon Corretto version 23**を使用します。 JDKがインストールされていない場合、ドロップダウンリストからダウンロードできます。
 :::
</code></pre><ul><li><strong>Java</strong>: 17</li></ul><pre><code> ::: tip
 Java 17がインストールされていない場合、JDKドロップダウンリストからダウンロードできます。
 :::
</code></pre><p><img src="`+u+'" alt="Spring Bootプロジェクトの作成" width="800"></p><ol start="4"><li><p>すべてのフィールドが指定されていることを確認し、<strong>Next</strong>をクリックします。</p></li><li><p>チュートリアルに必要な以下の依存関係を選択します。</p></li></ol><ul><li><strong>Web | Spring Web</strong></li><li><strong>SQL | Spring Data JDBC</strong></li><li><strong>SQL | H2 Database</strong></li></ul><p><img src="'+m+'" alt="Spring Bootプロジェクトのセットアップ" width="800"></p><ol start="6"><li><strong>Create</strong>をクリックしてプロジェクトを生成およびセットアップします。</li></ol><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>IDEは新しいプロジェクトを生成して開きます。プロジェクトの依存関係のダウンロードとインポートには時間がかかる場合があります。</p></div><ol start="7"><li>その後、<strong>Project view</strong>で以下の構造を確認できます。</li></ol><p><img src="'+y+'" alt="Spring Bootプロジェクトのビュー" width="400"></p><p>生成されたGradleプロジェクトは、Mavenの標準ディレクトリレイアウトに対応しています。</p><ul><li><code>main/kotlin</code>フォルダーの下には、アプリケーションに属するパッケージとクラスがあります。</li><li>アプリケーションのエントリポイントは、<code>DemoApplication.kt</code>ファイルの<code>main()</code>メソッドです。</li></ul>',24)),n[16]||(n[16]=s("h2",{"initial-collapse-state":"collapsed",collapsible:"true",id:"プロジェクトのgradleビルドファイルを確認する",tabindex:"-1"},[i("プロジェクトのGradleビルドファイルを確認する "),s("a",{class:"header-anchor",href:"#プロジェクトのgradleビルドファイルを確認する","aria-label":'Permalink to "プロジェクトのGradleビルドファイルを確認する {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),n[17]||(n[17]=e(`<p><code>build.gradle.kts</code>ファイルを開きます。これはGradle Kotlinビルドスクリプトであり、アプリケーションに必要な依存関係のリストが含まれています。</p><p>このGradleファイルはSpring Bootの標準ですが、kotlin-spring Gradleプラグイン (<code>kotlin(&quot;plugin.spring&quot;)</code>) を含む必要なKotlin依存関係も含まれています。</p><p>以下は、すべてのパートと依存関係の説明を含む完全なスクリプトです。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jvm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) version </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.9.25&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 使用するKotlinのバージョン</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;plugin.spring&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) version </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.9.25&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Kotlin Springプラグイン</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.springframework.boot&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) version </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;3.4.5&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;io.spring.dependency-management&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) version </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.1.7&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">group </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;com.example&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">version </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;0.0.1-SNAPSHOT&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">java</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    toolchain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        languageVersion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> JavaLanguageVersion.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">17</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">repositories</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    mavenCentral</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.springframework.boot:spring-boot-starter-data-jdbc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.springframework.boot:spring-boot-starter-web&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;com.fasterxml.jackson.module:jackson-module-kotlin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// JSONを扱うためのKotlin用Jackson拡張</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.kotlin:kotlin-reflect&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Kotlinリフレクションライブラリ。Springで作業するために必要</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    runtimeOnly</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;com.h2database:h2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    testImplementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.springframework.boot:spring-boot-starter-test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    testImplementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.kotlin:kotlin-test-junit5&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    testRuntimeOnly</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.junit.platform:junit-platform-launcher&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        freeCompilerArgs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xjsr305=strict&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// \`-Xjsr305=strict\`はJSR-305アノテーションの厳格モードを有効にする</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tasks.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    useJUnitPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>ご覧のとおり、GradleビルドファイルにはいくつかのKotlin関連のアーティファクトが追加されています。</p><ol><li><code>plugins</code>ブロックには2つのKotlinアーティファクトがあります。</li></ol><ul><li><code>kotlin(&quot;jvm&quot;)</code> – プロジェクトで使用するKotlinのバージョンを定義するプラグイン</li><li><code>kotlin(&quot;plugin.spring&quot;)</code> – Spring Frameworkの機能と互換性を持たせるために、Kotlinクラスに<code>open</code>修飾子を追加するKotlin Springコンパイラプラグイン</li></ul><ol start="2"><li><code>dependencies</code>ブロックには、いくつかのKotlin関連モジュールがリストされています。</li></ol><ul><li><code>com.fasterxml.jackson.module:jackson-module-kotlin</code> – Kotlinクラスおよびデータクラスのシリアライズとデシリアライズのサポートを追加するモジュール</li><li><code>org.jetbrains.kotlin:kotlin-reflect</code> – Kotlinリフレクションライブラリ</li></ul><ol start="3"><li>依存関係セクションの後には、<code>kotlin</code>プラグインの設定ブロックが表示されます。 ここでは、さまざまな言語機能を有効または無効にするために、コンパイラに追加の引数を追加できます。</li></ol><p>Kotlinコンパイラのオプションの詳細については、<a href="/ja/kotlin/gradle-compiler-options"></a>を参照してください。</p><h2 id="生成されたspring-bootアプリケーションを確認する" tabindex="-1">生成されたSpring Bootアプリケーションを確認する <a class="header-anchor" href="#生成されたspring-bootアプリケーションを確認する" aria-label="Permalink to &quot;生成されたSpring Bootアプリケーションを確認する&quot;">​</a></h2><p><code>DemoApplication.kt</code>ファイルを開きます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// DemoApplication.kt</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> com.example.demo</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.springframework.boot.autoconfigure.SpringBootApplication</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.springframework.boot.runApplication</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@SpringBootApplication</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DemoApplication</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    runApplication</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DemoApplication</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">args)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,14)),a(o,{collapsible:"true"},{default:l(()=>[a(t,{title:"クラスの宣言 – class DemoApplication"},{default:l(()=>n[2]||(n[2]=[s("p",null,[i("パッケージ宣言とインポート文の直後に、最初のクラス宣言である"),s("code",null,"class DemoApplication"),i("が表示されます。")],-1),s("p",null,[i("Kotlinでは、クラスにメンバー（プロパティや関数）が含まれていない場合、クラス本体（"),s("code",null,"{}"),i("）を省略することができます。")],-1)])),_:1}),a(t,{title:"@SpringBootApplicationアノテーション"},{default:l(()=>n[3]||(n[3]=[s("p",null,[s("a",{href:"https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#using.using-the-springbootapplication-annotation"},[s("code",null,"@SpringBootApplicationアノテーション")]),i("は、Spring Bootアプリケーションの便利なアノテーションです。 Spring Bootの"),s("a",{href:"https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#using.auto-configuration"},"自動構成"),i("、"),s("a",{href:"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/ComponentScan.html"},"コンポーネントスキャン"),i("を有効にし、その「アプリケーションクラス」に追加の構成を定義できるようにします。 ")],-1)])),_:1}),a(t,{title:"プログラムのエントリポイント – main()"},{default:l(()=>n[4]||(n[4]=[s("p",null,[s("a",{href:"/ja/kotlin/basic-syntax#program-entry-point"},[s("code",null,"main()")]),i("関数は、アプリケーションのエントリポイントです。")],-1),s("p",null,[i("これは、"),s("code",null,"DemoApplication"),i("クラスの外で"),s("a",{href:"/ja/kotlin/functions#function-scope"},"トップレベル関数"),i("として宣言されています。"),s("code",null,"main()"),i("関数は、Springの"),s("code",null,"runApplication(*args)"),i("関数を呼び出して、Spring Frameworkでアプリケーションを起動します。")],-1)])),_:1}),a(t,{title:"可変引数 – args: Array<String>"},{default:l(()=>n[5]||(n[5]=[s("p",null,[s("code",null,"runApplication()"),i("関数の宣言を確認すると、関数のパラメータが"),s("a",{href:"/ja/kotlin/functions#variable-number-of-arguments-varargs"},[s("code",null,"vararg"),i("修飾子")]),i("でマークされていることがわかります。"),s("code",null,"vararg args: String"),i("です。 これは、関数に可変数の"),s("code",null,"String"),i("引数を渡すことができることを意味します。 ")],-1)])),_:1}),a(t,{title:"スプレッド演算子 – (*args)"},{default:l(()=>n[6]||(n[6]=[s("p",null,[s("code",null,"args"),i("は、"),s("code",null,"main()"),i("関数へのパラメータであり、"),s("code",null,"String"),i("の配列として宣言されています。 "),s("code",null,"String"),i("の配列があり、その内容を関数に渡したい場合は、スプレッド演算子（配列の前にアスタリスク"),s("code",null,"*"),i("を付ける）を使用します。 ")],-1)])),_:1})]),_:1}),n[18]||(n[18]=e(`<h2 id="コントローラーを作成する" tabindex="-1">コントローラーを作成する <a class="header-anchor" href="#コントローラーを作成する" aria-label="Permalink to &quot;コントローラーを作成する&quot;">​</a></h2><p>アプリケーションを実行する準備ができていますが、まずそのロジックを更新しましょう。</p><p>Springアプリケーションでは、Webリクエストを処理するためにコントローラーが使用されます。 <code>DemoApplication.kt</code>ファイルと同じパッケージに、<code>MessageController.kt</code>ファイルを以下の<code>MessageController</code>クラスとともに作成します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// MessageController.kt</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> com.example.demo</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.springframework.web.bind.annotation.GetMapping</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.springframework.web.bind.annotation.RequestParam</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.springframework.web.bind.annotation.RestController</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@RestController</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MessageController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @GetMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@RequestParam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">!&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,4)),a(o,{collapsible:"true"},{default:l(()=>[a(t,{title:"@RestControllerアノテーション"},{default:l(()=>n[7]||(n[7]=[s("p",null,[s("code",null,"MessageController"),i("がRESTコントローラーであることをSpringに伝える必要があるため、"),s("code",null,"@RestController"),i("アノテーションでマークする必要があります。")],-1),s("p",null,[i("このアノテーションは、このクラスが"),s("code",null,"DemoApplication"),i("クラスと同じパッケージにあるため、コンポーネントスキャンによって取得されることを意味します。")],-1)])),_:1}),a(t,{title:"@GetMappingアノテーション"},{default:l(()=>[n[9]||(n[9]=s("p",null,[s("code",null,"@GetMapping"),i("は、HTTP GET呼び出しに対応するエンドポイントを実装するRESTコントローラーの関数をマークします。")],-1)),a(h,{lang:"kotlin"},{default:l(()=>n[8]||(n[8]=[i(' @GetMapping("/") fun index(@RequestParam("name") name: String) = "Hello, $name!" ')])),_:1})]),_:1}),a(t,{title:"@RequestParamアノテーション"},{default:l(()=>n[10]||(n[10]=[s("p",null,[i("関数パラメータ"),s("code",null,"name"),i("は"),s("code",null,"@RequestParam"),i("アノテーションでマークされています。このアノテーションは、メソッドパラメータがWebリクエストパラメータにバインドされるべきであることを示します。")],-1),s("p",null,[i("したがって、ルートでアプリケーションにアクセスし、"),s("code",null,"/?name=&lt;your-value&gt;"),i("のように「name」というリクエストパラメータを提供すると、そのパラメータ値が"),s("code",null,"index()"),i("関数を呼び出すための引数として使用されます。")],-1)])),_:1}),a(t,{title:"単一式関数 – index()"},{default:l(()=>n[11]||(n[11]=[s("p",null,[s("code",null,"index()"),i("関数には1つのステートメントしか含まれていないため、"),s("a",{href:"/ja/kotlin/functions#single-expression-functions"},"単一式関数"),i("として宣言できます。")],-1),s("p",null,[i("これは、中括弧を省略でき、本文が等号"),s("code",null,"="),i("の後に指定されることを意味します。")],-1)])),_:1}),a(t,{title:"関数の戻り値の型の型推論"},{default:l(()=>n[12]||(n[12]=[s("p",null,[s("code",null,"index()"),i("関数は、戻り値の型を明示的に宣言していません。代わりに、コンパイラは等号"),s("code",null,"="),i("の右側のステートメントの結果を見て、戻り値の型を推論します。")],-1),s("p",null,[s("code",null,"Hello, $name!"),i("式の型は"),s("code",null,"String"),i("であるため、関数の戻り値の型も"),s("code",null,"String"),i("です。")],-1)])),_:1}),a(t,{title:"文字列テンプレート – $name"},{default:l(()=>n[13]||(n[13]=[s("p",null,[s("code",null,"Hello, $name!"),i("式は、Kotlinでは"),s("a",{href:"/ja/kotlin/strings#string-templates"},[s("i",null,"文字列テンプレート")]),i("と呼ばれます。")],-1),s("p",null,"文字列テンプレートは、埋め込み式を含む文字列リテラルです。",-1),s("p",null,"これは、文字列連結操作の便利な代替手段です。",-1)])),_:1})]),_:1}),n[19]||(n[19]=e('<h2 id="アプリケーションを実行する" tabindex="-1">アプリケーションを実行する <a class="header-anchor" href="#アプリケーションを実行する" aria-label="Permalink to &quot;アプリケーションを実行する&quot;">​</a></h2><p>Springアプリケーションの実行準備が整いました。</p><ol><li><p><code>DemoApplication.kt</code>ファイルで、<code>main()</code>メソッドの横にあるガターの緑色の<strong>Run</strong>アイコンをクリックします。</p><p><img src="'+F+'" alt="Spring Bootアプリケーションの実行" width="706"></p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>ターミナルで<code>./gradlew bootRun</code>コマンドを実行することもできます。</p></div><p>これにより、ローカルサーバーがコンピューター上で起動します。</p></li><li><p>アプリケーションが起動したら、以下のURLを開きます。</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>http://localhost:8080?name=John</span></span></code></pre></div><p>「Hello, John!」という応答が表示されるはずです。</p><p><img src="'+C+'" alt="Springアプリケーションの応答" width="706"></p></li></ol><h2 id="次のステップ" tabindex="-1">次のステップ <a class="header-anchor" href="#次のステップ" aria-label="Permalink to &quot;次のステップ&quot;">​</a></h2><p>チュートリアルの次のパートでは、Kotlinのデータクラスについて、そしてそれらをアプリケーションでどのように使用できるかを学びます。</p><p><strong><a href="/ja/kotlin/jvm-spring-boot-add-data-class">次の章に進む</a></strong></p>',6))])}const R=b(A,[["render",S]]);export{J as __pageData,R as default};
