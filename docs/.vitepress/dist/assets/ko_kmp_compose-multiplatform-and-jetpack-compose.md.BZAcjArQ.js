import{_ as s}from"./chunks/compose-multiplatform-and-jetpack-compose.CSURSSFa.js";import{_ as i,C as a,c as m,o as n,j as t,G as r,ag as c,a as o,w as l}from"./chunks/framework.Bksy39di.js";const _=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kmp/compose-multiplatform-and-jetpack-compose.md","filePath":"ko/kmp/compose-multiplatform-and-jetpack-compose.md","lastUpdated":1755516278000}'),f={name:"ko/kmp/compose-multiplatform-and-jetpack-compose.md"};function u(g,e,h,k,C,x){const p=a("web-summary"),d=a("tldr");return n(),m("div",null,[e[2]||(e[2]=t("h1",{id:"compose-multiplatform과-jetpack-compose",tabindex:"-1"},[o("Compose Multiplatform과 Jetpack Compose "),t("a",{class:"header-anchor",href:"#compose-multiplatform과-jetpack-compose","aria-label":'Permalink to "Compose Multiplatform과 Jetpack Compose"'},"​")],-1)),r(p,null,{default:l(()=>e[0]||(e[0]=[o("이 문서는 Compose Multiplatform과 Jetpack Compose의 관계에 대해 설명합니다. 두 툴킷과 이들이 어떻게 조화를 이루는지 자세히 알아봅니다.")])),_:1}),e[3]||(e[3]=t("p",null,[t("img",{src:s,alt:"JetBrains가 만든 Compose Multiplatform, Google이 만든 Jetpack Compose",width:"730"})],-1)),r(d,null,{default:l(()=>e[1]||(e[1]=[o("이 문서는 Compose Multiplatform과 Jetpack Compose의 관계를 설명합니다. 두 툴킷이 어떻게 조화를 이루는지, 타겟 전반에서 라이브러리가 어떻게 처리되는지, 그리고 멀티플랫폼 프로젝트를 위해 자신만의 UI 라이브러리를 만들거나 적용하는 방법을 배우게 됩니다.")])),_:1}),e[4]||(e[4]=c('<p>Compose Multiplatform은 JetBrains에서 개발한 크로스 플랫폼 UI 툴킷입니다. Google의 <a href="https://developer.android.com/jetpack/compose" target="_blank" rel="noreferrer">Jetpack Compose</a> Android용 툴킷을 확장하여 추가 대상 플랫폼을 지원합니다.</p><p>Compose Multiplatform은 <a href="./multiplatform-discover-project#common-code">공통 Kotlin 코드</a>에서 Compose API를 사용할 수 있도록 하여, Android, iOS, 데스크톱, 웹에서 실행할 수 있는 공유 Compose UI 코드를 작성할 수 있게 합니다.</p><table tabindex="0"><thead><tr><th></th><th><strong>Compose Multiplatform</strong></th><th><strong>Jetpack Compose</strong></th></tr></thead><tbody><tr><td><strong>플랫폼</strong></td><td>Android, iOS, 데스크톱, 웹</td><td>Android</td></tr><tr><td><strong>지원 주체</strong></td><td>JetBrains</td><td>Google</td></tr></tbody></table><h2 id="jetpack-compose와-컴포저블" tabindex="-1">Jetpack Compose와 컴포저블 <a class="header-anchor" href="#jetpack-compose와-컴포저블" aria-label="Permalink to &quot;Jetpack Compose와 컴포저블&quot;">​</a></h2><p>Jetpack Compose는 네이티브 Android 인터페이스를 구축하기 위한 선언형 UI 툴킷입니다. 그 기반은 <code>@Composable</code> 애너테이션으로 표시된 <em>컴포저블</em> 함수입니다. 이 함수들은 UI의 각 부분을 정의하고, 기본 데이터가 변경될 때 자동으로 업데이트됩니다. 컴포저블을 결합하여 레이아웃을 구축하고, 사용자 입력을 처리하며, 상태를 관리하고, 애니메이션을 적용할 수 있습니다. Jetpack Compose에는 <code>Text</code>, <code>Button</code>, <code>Row</code>, <code>Column</code>과 같은 일반적인 UI 컴포넌트가 포함되어 있으며, 수식어(Modifier)를 사용하여 이들을 사용자 지정할 수 있습니다.</p><p>Compose Multiplatform은 동일한 원칙을 기반으로 구축되었습니다. Jetpack Compose와 Compose 컴파일러 및 런타임을 공유하며, <code>@Composable</code> 함수, <code>remember</code>와 같은 상태 관리 도구, 레이아웃 컴포넌트, 수식어, 애니메이션 지원 등 동일한 API를 사용합니다. 이는 Jetpack Compose 지식을 Compose Multiplatform과 함께 재사용하여 Android, iOS, 데스크톱, 웹을 위한 크로스 플랫폼 UI를 구축할 수 있음을 의미합니다.</p><h2 id="compose-multiplatform과-jetpack-compose-기능" tabindex="-1">Compose Multiplatform과 Jetpack Compose 기능 <a class="header-anchor" href="#compose-multiplatform과-jetpack-compose-기능" aria-label="Permalink to &quot;Compose Multiplatform과 Jetpack Compose 기능&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>두 UI 프레임워크의 기본 개념은 <a href="https://developer.android.com/jetpack/compose/documentation" target="_blank" rel="noreferrer">Google의 공식 문서</a>를 포함하여 거의 모든 Jetpack Compose 자료에서 배울 수 있습니다.</p></div><p>당연히 Compose Multiplatform에는 플랫폼별 기능 및 고려 사항이 있습니다.</p><ul><li><a href="./compose-android-only-components">Android 전용 컴포넌트</a> 페이지는 Android 플랫폼에 밀접하게 연결되어 있어 공통 Compose Multiplatform 코드에서는 사용할 수 없는 API를 나열합니다.</li><li>데스크톱용 창 처리 API 또는 iOS용 UIKit 호환성 API와 같은 일부 플랫폼별 API는 해당 플랫폼에서만 사용할 수 있습니다.</li></ul><p>다음은 인기 있는 컴포넌트 및 API의 가용성 개요입니다.</p><table tabindex="0"><thead><tr><th style="text-align:left;"></th><th style="text-align:left;"><strong>Compose Multiplatform</strong></th><th style="text-align:left;"><strong>Jetpack Compose</strong></th></tr></thead><tbody><tr><td style="text-align:left;"><a href="https://developer.android.com/jetpack/androidx/releases/compose-animation" target="_blank" rel="noreferrer">Compose Animation</a></td><td style="text-align:left;">예</td><td style="text-align:left;">예</td></tr><tr><td style="text-align:left;"><a href="https://developer.android.com/jetpack/androidx/releases/compose-compiler" target="_blank" rel="noreferrer">Compose Compiler</a></td><td style="text-align:left;">예</td><td style="text-align:left;">예</td></tr><tr><td style="text-align:left;"><a href="https://developer.android.com/jetpack/androidx/releases/compose-foundation" target="_blank" rel="noreferrer">Compose Foundation</a></td><td style="text-align:left;">예</td><td style="text-align:left;">예</td></tr><tr><td style="text-align:left;"><a href="https://developer.android.com/jetpack/androidx/releases/compose-material" target="_blank" rel="noreferrer">Compose Material</a></td><td style="text-align:left;">예</td><td style="text-align:left;">예</td></tr><tr><td style="text-align:left;"><a href="https://developer.android.com/jetpack/androidx/releases/compose-material30" target="_blank" rel="noreferrer">Compose Material 3</a></td><td style="text-align:left;">예</td><td style="text-align:left;">예</td></tr><tr><td style="text-align:left;"><a href="https://developer.android.com/jetpack/androidx/releases/compose-runtime" target="_blank" rel="noreferrer">Compose Runtime</a></td><td style="text-align:left;">예, 단 <code>androidx.compose.runtime.rxjava2</code> 및 <code>androidx.compose.runtime.rxjava3</code> 제외</td><td style="text-align:left;">예</td></tr><tr><td style="text-align:left;"><a href="https://developer.android.com/jetpack/androidx/releases/compose-ui" target="_blank" rel="noreferrer">Compose UI</a></td><td style="text-align:left;">예</td><td style="text-align:left;">예</td></tr><tr><td style="text-align:left;"><a href="https://developer.android.com/jetpack/androidx/releases/lifecycle" target="_blank" rel="noreferrer">Jetpack Lifecycle</a></td><td style="text-align:left;"><a href="./compose-lifecycle">예</a></td><td style="text-align:left;">예</td></tr><tr><td style="text-align:left;"><a href="https://developer.android.com/topic/libraries/architecture/viewmodel" target="_blank" rel="noreferrer">Jetpack ViewModel</a></td><td style="text-align:left;"><a href="./compose-viewmodel">예</a></td><td style="text-align:left;">예</td></tr><tr><td style="text-align:left;"><a href="https://developer.android.com/jetpack/androidx/releases/navigation" target="_blank" rel="noreferrer">Jetpack Navigation Compose</a></td><td style="text-align:left;"><a href="./compose-navigation-routing">예</a></td><td style="text-align:left;">예</td></tr><tr><td style="text-align:left;">리소스</td><td style="text-align:left;"><code>Res</code> 클래스를 사용하는 <a href="./compose-multiplatform-resources">Compose Multiplatform 리소스 라이브러리</a></td><td style="text-align:left;"><code>R</code> 클래스를 사용하는 <a href="https://developer.android.com/jetpack/compose/resources" target="_blank" rel="noreferrer">Android 리소스 시스템</a></td></tr><tr><td style="text-align:left;"><a href="https://developers.google.com/maps/documentation/android-sdk/maps-compose" target="_blank" rel="noreferrer">Maps Compose</a></td><td style="text-align:left;">아니요</td><td style="text-align:left;">예</td></tr><tr><td style="text-align:left;"><a href="#libraries-for-compose-multiplatform">서드파티 라이브러리</a> (UI 컴포넌트, 내비게이션, 아키텍처 등)</td><td style="text-align:left;"><a href="https://github.com/terrakok/kmp-awesome?tab=readme-ov-file#-compose-ui" target="_blank" rel="noreferrer">Compose Multiplatform 라이브러리</a></td><td style="text-align:left;">Jetpack Compose 및 Compose Multiplatform 라이브러리</td></tr></tbody></table><h2 id="기술-세부-정보" tabindex="-1">기술 세부 정보 <a class="header-anchor" href="#기술-세부-정보" aria-label="Permalink to &quot;기술 세부 정보&quot;">​</a></h2><p>Compose Multiplatform은 Google이 게시한 코드 및 릴리스를 기반으로 구축되었습니다. Google의 주요 초점은 Android용 Jetpack Compose이지만, Compose Multiplatform을 가능하게 하기 위해 Google과 JetBrains 간에 긴밀한 협력이 이루어지고 있습니다.</p><p>Jetpack에는 Google이 Android용으로 게시하는 Foundation 및 Material과 같은 퍼스트 파티 라이브러리가 포함됩니다. <a href="https://github.com/JetBrains/compose-multiplatform-core" target="_blank" rel="noreferrer">이러한 라이브러리</a>에서 제공하는 API를 공통 코드에서 사용할 수 있도록 하기 위해, JetBrains는 Android 외의 다른 타겟을 위해 게시되는 이러한 라이브러리의 멀티플랫폼 버전을 유지 관리합니다.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><a href="./compose-compatibility-and-versioning#jetpack-compose-and-compose-multiplatform-release-cycles">호환성 및 버전</a> 페이지에서 릴리스 주기에 대해 자세히 알아보세요.</p></div><p>Compose Multiplatform 애플리케이션을 Android용으로 빌드할 때, Google이 게시한 Jetpack Compose 아티팩트를 사용합니다. 예를 들어, <code>compose.material3</code>를 의존성에 추가하면, 프로젝트는 Android 타겟에서는 <code>androidx.compose.material3:material3</code>를 사용하고, 다른 타겟에서는 <code>org.jetbrains.compose.material3:material3</code>를 사용합니다. 이는 멀티플랫폼 아티팩트의 Gradle Module Metadata를 기반으로 자동으로 수행됩니다.</p><h2 id="compose-multiplatform용-라이브러리" tabindex="-1">Compose Multiplatform용 라이브러리 <a class="header-anchor" href="#compose-multiplatform용-라이브러리" aria-label="Permalink to &quot;Compose Multiplatform용 라이브러리&quot;">​</a></h2><p>Compose Multiplatform을 사용하면 Compose API를 사용하는 라이브러리를 <a href="./multiplatform-publish-lib-setup">Kotlin Multiplatform 라이브러리</a>로 게시할 수 있습니다. 이를 통해 여러 플랫폼을 타겟팅하는 공통 Kotlin 코드에서 사용할 수 있습니다.</p><p>따라서 Compose API로 새 라이브러리를 구축하는 경우, Compose Multiplatform을 사용하여 멀티플랫폼 라이브러리로 구축하는 것을 고려해 보세요. 이미 Android용 Jetpack Compose 라이브러리를 구축했다면, 해당 라이브러리를 멀티플랫폼으로 만드는 것을 고려해 보세요. 이미 생태계에는 <a href="https://github.com/terrakok/kmp-awesome#-compose-ui" target="_blank" rel="noreferrer">많은 Compose Multiplatform 라이브러리</a>가 있습니다.</p><p>라이브러리가 Compose Multiplatform으로 게시되면, Jetpack Compose만 사용하는 앱도 원활하게 해당 라이브러리를 사용할 수 있습니다. 단순히 해당 라이브러리의 Android 아티팩트를 사용하면 됩니다.</p><h2 id="다음-단계" tabindex="-1">다음 단계 <a class="header-anchor" href="#다음-단계" aria-label="Permalink to &quot;다음 단계&quot;">​</a></h2><p>다음 컴포넌트에 대한 Compose Multiplatform 구현에 대해 더 읽어보세요.</p><ul><li><a href="./compose-lifecycle">Lifecycle</a></li><li><a href="./compose-multiplatform-resources">Resources</a></li><li><a href="./compose-viewmodel">Common ViewModel</a></li><li><a href="./compose-navigation-routing">Navigation and routing</a></li></ul>',24))])}const M=i(f,[["render",u]]);export{_ as __pageData,M as default};
