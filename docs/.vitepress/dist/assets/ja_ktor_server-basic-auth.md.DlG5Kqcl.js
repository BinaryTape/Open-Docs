import{_ as c,C as e,c as E,o as u,j as i,G as a,ag as r,a as t,w as n}from"./chunks/framework.Bksy39di.js";const q=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ja/ktor/server-basic-auth.md","filePath":"ja/ktor/server-basic-auth.md","lastUpdated":1755457140000}'),g={name:"ja/ktor/server-basic-auth.md"};function y(F,s,b,v,m,f){const p=e("show-structure"),k=e("Links"),o=e("tldr"),l=e("code-block"),h=e("TabItem"),d=e("Tabs");return u(),E("div",null,[s[5]||(s[5]=i("h1",{id:"ktor-serverにおけるbasic認証",tabindex:"-1"},[t("Ktor ServerにおけるBasic認証 "),i("a",{class:"header-anchor",href:"#ktor-serverにおけるbasic認証","aria-label":'Permalink to "Ktor ServerにおけるBasic認証"'},"​")],-1)),a(p,{for:"chapter",depth:"2"}),a(o,null,{default:n(()=>[s[3]||(s[3]=i("p",null,[i("b",null,"必須の依存関係"),t(": "),i("code",null,"io.ktor:ktor-server-auth")],-1)),s[4]||(s[4]=i("p",null,[i("b",null,"コード例"),t(": "),i("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/auth-basic"},"auth-basic"),t(", "),i("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/auth-basic-hash-table"},"auth-basic-hash-table")],-1)),i("p",null,[i("b",null,[a(k,{href:"/ktor/server-native",summary:"KtorはKotlin/Nativeをサポートしており、追加のランタイムや仮想マシンなしでサーバーを実行できます。"},{default:n(()=>s[0]||(s[0]=[t("ネイティブサーバー")])),_:1}),s[1]||(s[1]=t("のサポート"))]),s[2]||(s[2]=t(": ✅ "))])]),_:1}),s[6]||(s[6]=r('<p>Basic認証スキームは、アクセス制御と認証に使用される<a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication" target="_blank" rel="noreferrer">HTTPフレームワーク</a>の一部です。このスキームでは、ユーザー認証情報はユーザー名とパスワードのペアとしてBase64でエンコードされて送信されます。</p><p>Ktorでは、ユーザーのログインや特定の<a href="./server-routing">ルート</a>の保護にBasic認証を使用できます。Ktorでの認証に関する一般的な情報は、<a href="./server-auth">Ktor Serverにおける認証と認可</a>セクションで確認できます。</p><blockquote><p>Basic認証ではユーザー名とパスワードが平文で渡されるため、機密情報を保護するには<a href="./server-ssl">HTTPS/TLS</a>を使用する必要があります。</p></blockquote><h2 id="add_dependencies" tabindex="-1">依存関係を追加する <a class="header-anchor" href="#add_dependencies" aria-label="Permalink to &quot;依存関係を追加する {id=&quot;add_dependencies&quot;}&quot;">​</a></h2><p><code>basic</code>認証を有効にするには、ビルドスクリプトに<code>ktor-server-auth</code>アーティファクトを含める必要があります。</p>',5)),a(d,{group:"languages"},{default:n(()=>[a(h,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[a(l,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-server-auth:$ktor_version")'})]),_:1}),a(h,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[a(l,{lang:"Groovy",code:'            implementation "io.ktor:ktor-server-auth:$ktor_version"'})]),_:1}),a(h,{title:"Maven","group-key":"maven"},{default:n(()=>[a(l,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-server-auth-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),s[7]||(s[7]=r(`<h2 id="flow" tabindex="-1">Basic認証フロー <a class="header-anchor" href="#flow" aria-label="Permalink to &quot;Basic認証フロー {id=&quot;flow&quot;}&quot;">​</a></h2><p>Basic認証フローは次のようになります。</p><ol><li>クライアントは、サーバーアプリケーションの特定の<a href="./server-routing">ルート</a>に対して、<code>Authorization</code>ヘッダーなしでリクエストを行います。</li><li>サーバーは、クライアントに<code>401</code> (Unauthorized) レスポンスステータスで応答し、<code>WWW-Authenticate</code>レスポンスヘッダーを使用して、Basic認証スキームがルートを保護するために使用されているという情報を提供します。典型的な<code>WWW-Authenticate</code>ヘッダーは次のようになります。</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>WWW-Authenticate: Basic realm=&quot;Access to the &#39;/&#39; path&quot;, charset=&quot;UTF-8&quot;</span></span></code></pre></div><p>Ktorでは、<code>basic</code>認証プロバイダーを<a href="#configure-provider">設定</a>する際に、対応するプロパティを使用してレルムと文字セットを指定できます。</p><ol start="3"><li>通常、クライアントはログインダイアログを表示し、ユーザーが認証情報を入力できるようにします。その後、クライアントはBase64でエンコードされたユーザー名とパスワードのペアを含む<code>Authorization</code>ヘッダー付きでリクエストを行います。例:</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Authorization: Basic amV0YnJhaW5zOmZvb2Jhcg</span></span></code></pre></div><ol start="4"><li>サーバーは、クライアントから送信された認証情報を<a href="#configure-provider">検証</a>し、リクエストされたコンテンツで応答します。</li></ol><h2 id="install" tabindex="-1">Basic認証のインストール <a class="header-anchor" href="#install" aria-label="Permalink to &quot;Basic認証のインストール {id=&quot;install&quot;}&quot;">​</a></h2><p><code>basic</code>認証プロバイダーをインストールするには、<code>install</code>ブロック内で<a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/basic.html" target="_blank" rel="noreferrer">basic</a>関数を呼び出します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.application.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.auth.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Authentication) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    basic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Configure basic authentication</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>必要に応じて、<a href="./server-auth#provider-name">プロバイダー名</a>を指定できます。これは、<a href="#authenticate-route">指定されたルートを認証</a>するために使用できます。</p><h2 id="configure" tabindex="-1">Basic認証の構成 <a class="header-anchor" href="#configure" aria-label="Permalink to &quot;Basic認証の構成 {id=&quot;configure&quot;}&quot;">​</a></h2><p>Ktorで様々な認証プロバイダーを構成する方法の一般的な考え方については、<a href="./server-auth#configure">認証の構成</a>を参照してください。このセクションでは、<code>basic</code>認証プロバイダーの設定の詳細について説明します。</p><h3 id="configure-provider" tabindex="-1">ステップ1: Basicプロバイダーの構成 <a class="header-anchor" href="#configure-provider" aria-label="Permalink to &quot;ステップ1: Basicプロバイダーの構成 {id=&quot;configure-provider&quot;}&quot;">​</a></h3><p><code>basic</code>認証プロバイダーは、<a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-basic-authentication-provider/-config/index.html" target="_blank" rel="noreferrer">BasicAuthenticationProvider.Configuration</a>クラスを介して設定を公開します。以下の例では、次の設定が指定されています。</p><ul><li><code>realm</code>プロパティは、<code>WWW-Authenticate</code>ヘッダーに渡すレルムを設定します。</li><li><code>validate</code>関数は、ユーザー名とパスワードを検証します。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Authentication) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    basic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-basic&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        realm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Access to the &#39;/&#39; path&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        validate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { credentials </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (credentials.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;jetbrains&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> credentials.password </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;foobar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                UserIdPrincipal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(credentials.name)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>validate</code>関数は<code>UserPasswordCredential</code>をチェックし、認証が成功した場合は<code>UserIdPrincipal</code>を返し、認証が失敗した場合は<code>null</code>を返します。</p><blockquote><p>ユーザー名とパスワードのハッシュを保持するインメモリテーブルに格納されたユーザーを検証するために、<a href="#validate-user-hash">UserHashedTableAuth</a>を使用することもできます。</p></blockquote><h3 id="authenticate-route" tabindex="-1">ステップ2: 特定のリソースの保護 <a class="header-anchor" href="#authenticate-route" aria-label="Permalink to &quot;ステップ2: 特定のリソースの保護 {id=&quot;authenticate-route&quot;}&quot;">​</a></h3><p><code>basic</code>プロバイダーを構成した後、**<a href="./server-auth#authenticate-route">authenticate</a>**関数を使用してアプリケーション内の特定のリソースを保護できます。認証が成功した場合、ルートハンドラー内で<code>call.principal</code>関数を使用して認証された<a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-user-id-principal/index.html" target="_blank" rel="noreferrer">UserIdPrincipal</a>を取得し、認証されたユーザーの名前を取得できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    authenticate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-basic&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, \${call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">principal</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserIdPrincipal</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&gt;()?.name}!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="validate-user-hash" tabindex="-1">UserHashedTableAuthによる検証 <a class="header-anchor" href="#validate-user-hash" aria-label="Permalink to &quot;UserHashedTableAuthによる検証 {id=&quot;validate-user-hash&quot;}&quot;">​</a></h2><p>Ktorでは、ユーザー名とパスワードのハッシュを保持するインメモリテーブルに格納されたユーザーを<a href="#configure-provider">検証</a>するために、<a href="#validate-user-hash">UserHashedTableAuth</a>を使用できます。これにより、データソースが漏洩した場合でもユーザーパスワードが危うくなることを防ぐことができます。</p><p>ユーザーの検証に<code>UserHashedTableAuth</code>を使用するには、以下の手順に従います。</p><ol><li><a href="https://api.ktor.io/ktor-utils/io.ktor.util/get-digest-function.html" target="_blank" rel="noreferrer">getDigestFunction</a>関数を使用して、指定されたアルゴリズムとソルトプロバイダーでダイジェスト関数を作成します。</li></ol><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> digestFunction </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getDigestFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;SHA-256&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ktor\${it.length}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div><ol start="2"><li><code>UserHashedTableAuth</code>の新しいインスタンスを初期化し、以下のプロパティを指定します。 <ul><li><code>table</code>プロパティを使用して、ユーザー名とハッシュ化されたパスワードのテーブルを提供します。</li><li><code>digester</code>プロパティにダイジェスト関数を割り当てます。</li></ul></li></ol><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hashedUserTable </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserHashedTableAuth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    table </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mapOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;jetbrains&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> to </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">digestFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;foobar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;admin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> to </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">digestFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;password&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    digester </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> digestFunction</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><ol start="3"><li><code>validate</code>関数内で、<a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-user-hashed-table-auth/authenticate.html" target="_blank" rel="noreferrer">UserHashedTableAuth.authenticate</a>関数を呼び出してユーザーを認証し、認証情報が有効な場合は<code>UserIdPrincipal</code>のインスタンスを返します。</li></ol><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Authentication) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    basic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-basic-hashed&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        realm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Access to the &#39;/&#39; path&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        validate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { credentials </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            hashedUserTable.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">authenticate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(credentials)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,32))])}const B=c(g,[["render",y]]);export{q as __pageData,B as default};
