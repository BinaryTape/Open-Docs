import{_ as p,C as a,c as l,o as t,G as n,ag as o}from"./chunks/framework.Bksy39di.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/native-llvm-passes.md","filePath":"kotlin/native-llvm-passes.md","lastUpdated":1754307826000}'),c={name:"kotlin/native-llvm-passes.md"};function r(d,s,h,k,m,g){const e=a("TopicTitle"),i=a("primary-label");return t(),l("div",null,[n(e,{labelRef:"advanced",title:"自定义 LLVM 后端的技巧"}),n(i,{ref:"advanced"},null,512),s[0]||(s[0]=o(`<p>Kotlin/Native 编译器使用 <a href="https://llvm.org/" target="_blank" rel="noreferrer">LLVM</a> 为不同的目标平台优化和生成二进制可执行文件。编译时间的相当一部分也花在了 LLVM 上，对于大型应用，这最终可能会耗费过长的时间，令人难以接受。</p><p>你可以自定义 Kotlin/Native 如何使用 LLVM，并调整优化遍的列表。</p><h2 id="检查构建日志" tabindex="-1">检查构建日志 <a class="header-anchor" href="#检查构建日志" aria-label="Permalink to &quot;检查构建日志&quot;">​</a></h2><p>让我们查看构建日志，了解有多少编译时间耗费在 LLVM 优化遍上：</p><ol><li><p>运行 <code>linkRelease*</code> Gradle 任务，并使用 <code>-Pkotlin.internal.compiler.arguments.log.level=warning</code> 选项，以使 Gradle 输出 LLVM 性能分析详情，例如：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> linkReleaseExecutableMacosArm64</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Pkotlin.internal.compiler.arguments.log.level=warning</span></span></code></pre></div><p>执行时，该任务会打印必要的编译器实参，例如：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&gt; Task :linkReleaseExecutableMacosArm64</span></span>
<span class="line"><span>Run in-process tool &quot;konanc&quot;</span></span>
<span class="line"><span>Entry point method = org.jetbrains.kotlin.cli.utilities.MainKt.daemonMain</span></span>
<span class="line"><span>Classpath = [</span></span>
<span class="line"><span>        /Users/user/.konan/kotlin-native-prebuilt-macos-aarch64-2.2.0/konan/lib/kotlin-native-compiler-embeddable.jar</span></span>
<span class="line"><span>        /Users/user/.konan/kotlin-native-prebuilt-macos-aarch64-2.2.0/konan/lib/trove4j.jar</span></span>
<span class="line"><span>]</span></span>
<span class="line"><span>Arguments = [</span></span>
<span class="line"><span>        -Xinclude=...</span></span>
<span class="line"><span>        -library</span></span>
<span class="line"><span>        /Users/user/.konan/kotlin-native-prebuilt-macos-aarch64-2.2.0/klib/common/stdlib</span></span>
<span class="line"><span>        -no-endorsed-libs</span></span>
<span class="line"><span>        -nostdlib</span></span>
<span class="line"><span>        ...</span></span>
<span class="line"><span>]</span></span></code></pre></div></li><li><p>运行命令行编译器，使用提供的实参，再加上 <code>-Xprofile-phases</code> 实参，例如：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/Users/user/.konan/kotlin-native-prebuilt-macos-aarch64-2.2.0/bin/kotlinc-native</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-Xinclude=... </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-library </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/Users/user/.konan/kotlin-native-prebuilt-macos-aarch64-2.2.0/klib/common/stdlib</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">... </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-Xprofile-phases</span></span></code></pre></div></li><li><p>检查构建日志中生成的输出。日志可能包含数万行；LLVM 性能分析部分在末尾。</p></li></ol><p>以下是运行一个简单 Kotlin/Native 程序时的摘录：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Frontend: 275 msec</span></span>
<span class="line"><span>PsiToIr: 1186 msec</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>... 30k lines</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>LinkBitcodeDependencies: 476 msec</span></span>
<span class="line"><span>StackProtectorPhase: 0 msec</span></span>
<span class="line"><span>MandatoryBitcodeLLVMPostprocessingPhase: 2 msec</span></span>
<span class="line"><span>===-------------------------------------------------------------------------===</span></span>
<span class="line"><span>                          Pass execution timing report</span></span>
<span class="line"><span>===-------------------------------------------------------------------------===</span></span>
<span class="line"><span>  Total Execution Time: 6.7726 seconds (6.7192 wall clock)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>   ---User Time---   --System Time--   --User+System--   ---Wall Time---  --- Name ---</span></span>
<span class="line"><span>   0.9778 ( 22.4%)   0.5043 ( 21.0%)   1.4821 ( 21.9%)   1.4628 ( 21.8%)  InstCombinePass</span></span>
<span class="line"><span>   0.3827 (  8.8%)   0.2497 ( 10.4%)   0.6323 (  9.3%)   0.6283 (  9.4%)  InlinerPass</span></span>
<span class="line"><span>   0.2815 (  6.4%)   0.1792 (  7.5%)   0.4608 (  6.8%)   0.4555 (  6.8%)  SimplifyCFGPass</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>   0.6444 (100.0%)   0.5474 (100.0%)   1.1917 (100.0%)   1.1870 (100.0%)  Total</span></span>
<span class="line"><span></span></span>
<span class="line"><span>ModuleBitcodeOptimization: 8118 msec</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span>LTOBitcodeOptimization: 1399 msec</span></span>
<span class="line"><span>...</span></span></code></pre></div><p>Kotlin/Native 编译器运行两组独立的 LLVM 优化序列：模块遍和链接时遍。对于典型的编译，这两个流水线是依次运行的，唯一真正的区别在于它们运行哪些 LLVM 优化遍。</p><p>在上述日志中，两个 LLVM 优化分别是 <code>ModuleBitcodeOptimization</code> 和 <code>LTOBitcodeOptimization</code>。格式化表格是优化的输出，其中包含每遍的计时信息。</p><h2 id="自定义-llvm-优化遍" tabindex="-1">自定义 LLVM 优化遍 <a class="header-anchor" href="#自定义-llvm-优化遍" aria-label="Permalink to &quot;自定义 LLVM 优化遍&quot;">​</a></h2><p>如果上述某个遍的耗时显得过长，你可以跳过它。然而，这可能会损害运行时性能，因此之后你应该检测基准测试性能的变化。</p><p>目前，没有直接的方式来<a href="https://youtrack.jetbrains.com/issue/KT-69212" target="_blank" rel="noreferrer">禁用给定遍</a>。不过，你可以使用以下编译器选项来提供一个新的要运行的遍列表：</p><table tabindex="0"><thead><tr><th><strong>选项</strong></th><th><strong>发布二进制文件的默认值</strong></th></tr></thead><tbody><tr><td><code>-Xllvm-module-passes</code></td><td><code>&quot;default&lt;O3&gt;&quot;</code></td></tr><tr><td><code>-Xllvm-lto-passes</code></td><td><code>&quot;internalize,globaldce,lto&lt;O3&gt;&quot;</code></td></tr></tbody></table><p>默认值会展开成一个很长的实际遍列表，你需要从中排除不需要的遍。</p><p>要获取实际遍列表，请运行 <a href="https://llvm.org/docs/CommandGuide/opt.html" target="_blank" rel="noreferrer"><code>opt</code></a> 工具，该工具会随 LLVM 分发自动下载到 <code>~/.konan/dependencies/llvm-{VERSION}-{ARCH}-{OS}-dev-{BUILD}/bin</code> 目录。</p><p>例如，要获取链接时遍列表，请运行：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">opt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -print-pipeline-passes</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -passes=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;internalize,globaldce,lto&lt;O3&gt;&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /dev/null</span></span></code></pre></div><p>这会输出一个警告和很长的遍列表，该列表取决于 LLVM 版本。</p><p><code>opt</code> 工具生成的遍列表与 Kotlin/Native 编译器实际运行的遍之间存在两个区别：</p><ul><li>由于 <code>opt</code> 是一个调试工具，它会包含一个或多个 <code>verify</code> 遍，这些遍通常不运行。</li><li>Kotlin/Native 会禁用 <code>devirt</code> 遍，因为 Kotlin 编译器已经自行执行了它们。</li></ul><p>禁用任何遍之后，请务必重新运行性能测试，以检测运行时性能下降是否可接受。</p>`,21))])}const v=p(c,[["render",r]]);export{b as __pageData,v as default};
