import{_ as h,C as a,c as p,o as k,j as s,G as n,ag as t,a as r,w as o}from"./chunks/framework.Bksy39di.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/whatsnew17.md","filePath":"zh-Hant/kotlin/whatsnew17.md","lastUpdated":1754307826000}'),d={name:"zh-Hant/kotlin/whatsnew17.md"};function E(c,i,g,y,u,F){const l=a("tldr"),e=a("YouTubeVideo");return k(),p("div",null,[i[1]||(i[1]=s("h1",{id:"kotlin-1-7-0-有哪些新功能",tabindex:"-1"},[r("Kotlin 1.7.0 有哪些新功能 "),s("a",{class:"header-anchor",href:"#kotlin-1-7-0-有哪些新功能","aria-label":'Permalink to "Kotlin 1.7.0 有哪些新功能"'},"​")],-1)),n(l,null,{default:o(()=>i[0]||(i[0]=[s("p",null,"Kotlin 1.7.0 的 IDE 支援適用於 IntelliJ IDEA 2021.2、2021.3 和 2022.1。",-1)])),_:1}),i[2]||(i[2]=t('<p><em><a href="/zh-Hant/kotlin/releases#release-details">發布日期：2022 年 6 月 9 日</a></em></p><p>Kotlin 1.7.0 已發布。它發布了新 Kotlin/JVM K2 編譯器的 Alpha 版本，穩定化了語言功能，並為 JVM、JS 和 Native 平台帶來了效能改進。</p><p>以下是此版本中主要更新的列表：</p><ul><li><a href="#new-kotlin-k2-compiler-for-the-jvm-in-alpha">新的 Kotlin K2 編譯器現在處於 Alpha 階段</a>，它提供了顯著的效能改進。它僅適用於 JVM，並且不支援任何編譯器插件，包括 kapt。</li><li><a href="#a-new-approach-to-incremental-compilation">Gradle 中增量編譯的新方法</a>。增量編譯現在也支援在依賴的非 Kotlin 模組中進行的變更，並且與 Gradle 相容。</li><li>我們已穩定化<a href="#stable-opt-in-requirements">選擇性啟用要求註解</a>、<a href="#stable-definitely-non-nullable-types">明確非空類型</a>和<a href="#stable-builder-inference">建立器推斷</a>。</li><li><a href="#underscore-operator-for-type-arguments">現在有型別引數的底線運算子</a>。您可以使用它在指定其他類型時自動推斷引數的類型。</li><li><a href="#allow-implementation-by-delegation-to-an-inlined-value-of-an-inline-class">此版本允許委託實作至行內類別的行內值</a>。您現在可以建立輕量級包裝器，在大多數情況下它們不會分配記憶體。</li></ul><p>您也可以在此影片中找到這些變更的簡短概覽：</p>',5)),n(e,{src:"https://www.youtube.com/v/54WEfLKtCGk",title:"Kotlin 1.7.0 有哪些新功能"}),i[3]||(i[3]=t(`<h2 id="新的-kotlin-k2-編譯器現在處於-jvm-的-alpha-階段" tabindex="-1">新的 Kotlin K2 編譯器現在處於 JVM 的 Alpha 階段 <a class="header-anchor" href="#新的-kotlin-k2-編譯器現在處於-jvm-的-alpha-階段" aria-label="Permalink to &quot;新的 Kotlin K2 編譯器現在處於 JVM 的 Alpha 階段&quot;">​</a></h2><p>此 Kotlin 版本引入了新 Kotlin K2 編譯器的 <strong>Alpha</strong> 版本。新編譯器旨在加速新語言功能的開發，統一 Kotlin 支援的所有平台，帶來效能改進，並提供編譯器擴充的 API。</p><p>我們已經發布了一些關於我們新編譯器及其優勢的詳細說明：</p><ul><li><a href="https://www.youtube.com/watch?v=iTdJJq_LyoY" target="_blank" rel="noreferrer">新 Kotlin 編譯器的發展之路</a></li><li><a href="https://www.youtube.com/watch?v=db19VFLZqJM" target="_blank" rel="noreferrer">K2 編譯器：頂層視圖</a></li></ul><p>需要指出的是，K2 編譯器 Alpha 版本主要著重於效能改進，並且它僅適用於 JVM 專案。它不支援 Kotlin/JS、Kotlin/Native 或其他多平台專案，並且不支援任何編譯器插件，包括 <a href="/zh-Hant/kotlin/kapt">kapt</a>。</p><p>我們的基準測試顯示了在內部專案上的一些出色結果：</p><table tabindex="0"><thead><tr><th>專案</th><th>當前 Kotlin 編譯器效能</th><th>新 K2 Kotlin 編譯器效能</th><th>效能提升</th></tr></thead><tbody><tr><td>Kotlin</td><td>2.2 KLOC/s</td><td>4.8 KLOC/s</td><td>~ x2.2</td></tr><tr><td>YouTrack</td><td>1.8 KLOC/s</td><td>4.2 KLOC/s</td><td>~ x2.3</td></tr><tr><td>IntelliJ IDEA</td><td>1.8 KLOC/s</td><td>3.9 KLOC/s</td><td>~ x2.2</td></tr><tr><td>Space</td><td>1.2 KLOC/s</td><td>2.8 KLOC/s</td><td>~ x2.3</td></tr></tbody></table><blockquote><p>KLOC/s 效能數字代表編譯器每秒處理數千行程式碼的數量。</p><p style=""></p></blockquote><p>您可以在您的 JVM 專案中查看效能提升，並與舊編譯器的結果進行比較。要啟用 Kotlin K2 編譯器，請使用以下編譯器選項：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-Xuse-k2</span></span></code></pre></div><p>此外，K2 編譯器<a href="https://youtrack.jetbrains.com/issues/KT?q=tag:%20FIR-preview-qa%20%23Resolved" target="_blank" rel="noreferrer">包含許多錯誤修正</a>。請注意，即使此列表中<strong>狀態：開放</strong>的議題實際上也已在 K2 中修復。</p><p>接下來的 Kotlin 版本將改進 K2 編譯器的穩定性並提供更多功能，敬請期待！</p><p>如果您在使用 Kotlin K2 編譯器時遇到任何效能問題，請<a href="https://kotl.in/issue" target="_blank" rel="noreferrer">向我們的問題追蹤器回報</a>。</p><h2 id="語言" tabindex="-1">語言 <a class="header-anchor" href="#語言" aria-label="Permalink to &quot;語言&quot;">​</a></h2><p>Kotlin 1.7.0 引入了對委託實作和型別引數新底線運算子的支援。它還穩定化了先前版本中作為預覽版引入的幾個語言功能：</p><ul><li><a href="#allow-implementation-by-delegation-to-an-inlined-value-of-an-inline-class">委託實作至行內類別的行內值</a></li><li><a href="#underscore-operator-for-type-arguments">型別引數的底線運算子</a></li><li><a href="#stable-builder-inference">穩定版建立器推斷</a></li><li><a href="#stable-opt-in-requirements">穩定版選擇性啟用要求</a></li><li><a href="#stable-definitely-non-nullable-types">穩定版明確非空類型</a></li></ul><h3 id="允許委託實作至行內類別的行內值" tabindex="-1">允許委託實作至行內類別的行內值 <a class="header-anchor" href="#允許委託實作至行內類別的行內值" aria-label="Permalink to &quot;允許委託實作至行內類別的行內值&quot;">​</a></h3><p>如果您想為值或類別實例建立輕量級包裝器，則需要手動實作所有介面方法。委託實作解決了這個問題，但它在 1.7.0 之前不適用於行內類別。此限制已移除，因此您現在可以建立輕量級包裝器，在大多數情況下它們不會分配記憶體。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;foo&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JvmInline</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BarWrapper</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bar: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Bar</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bar</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bw </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BarWrapper</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {})</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(bw.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="型別引數的底線運算子" tabindex="-1">型別引數的底線運算子 <a class="header-anchor" href="#型別引數的底線運算子" aria-label="Permalink to &quot;型別引數的底線運算子&quot;">​</a></h3><p>Kotlin 1.7.0 引入了型別引數的底線運算子 <code>_</code>。您可以使用它在指定其他類型時自動推斷型別引數：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SomeClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    abstract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SomeImplementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SomeClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Test&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OtherImplementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SomeClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 42</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Runner</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    inline</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reified</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> S</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SomeClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> S::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.java.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getDeclaredConstructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">newInstance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 因為 SomeImplementation 衍生自 SomeClass&lt;String&gt;，所以 T 被推斷為 String</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Runner.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SomeImplementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    assert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 因為 OtherImplementation 衍生自 SomeClass&lt;Int&gt;，所以 T 被推斷為 Int</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Runner.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OtherImplementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    assert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>您可以在變數清單中的任何位置使用底線運算子來推斷型別引數。</p></div><h3 id="穩定版建立器推斷" tabindex="-1">穩定版建立器推斷 <a class="header-anchor" href="#穩定版建立器推斷" aria-label="Permalink to &quot;穩定版建立器推斷&quot;">​</a></h3><p>建立器推斷是一種特殊類型的型別推斷，在呼叫泛型建立器函數時非常有用。它有助於編譯器使用其 lambda 引數中其他呼叫的型別資訊來推斷呼叫的型別引數。</p><p>從 1.7.0 開始，如果常規型別推斷無法在不指定 <code>-Xenable-builder-inference</code> 編譯器選項的情況下獲得足夠的型別資訊，則建立器推斷將自動啟用，該選項在 <a href="/zh-Hant/kotlin/whatsnew16#changes-to-builder-inference">1.6.0 中引入</a>。</p><p><a href="/zh-Hant/kotlin/using-builders-with-builder-inference">了解如何編寫自訂泛型建立器</a>。</p><h3 id="穩定版選擇性啟用要求" tabindex="-1">穩定版選擇性啟用要求 <a class="header-anchor" href="#穩定版選擇性啟用要求" aria-label="Permalink to &quot;穩定版選擇性啟用要求&quot;">​</a></h3><p><a href="/zh-Hant/kotlin/opt-in-requirements">選擇性啟用要求</a>現在是<a href="/zh-Hant/kotlin/components-stability">穩定版</a>，不需要額外的編譯器組態。</p><p>在 1.7.0 之前，選擇性啟用功能本身需要引數 <code>-opt-in=kotlin.RequiresOptIn</code> 以避免警告。現在不再需要此引數；但是，您仍然可以使用編譯器引數 <code>-opt-in</code> 來選擇性啟用其他註解、<a href="/zh-Hant/kotlin/opt-in-requirements#opt-in-a-module">一個模組</a>。</p><h3 id="穩定版明確非空類型" tabindex="-1">穩定版明確非空類型 <a class="header-anchor" href="#穩定版明確非空類型" aria-label="Permalink to &quot;穩定版明確非空類型&quot;">​</a></h3><p>在 Kotlin 1.7.0 中，明確非空類型已升級為<a href="/zh-Hant/kotlin/components-stability">穩定版</a>。它們在擴充泛型 Java 類別和介面時提供了更好的互通性。</p><p>您可以使用新語法 <code>T &amp; Any</code> 在使用位置將泛型型別參數標記為明確非空。這種語法形式來自<a href="https://en.wikipedia.org/wiki/Intersection_type" target="_blank" rel="noreferrer">交集類型</a>的表示法，現在僅限於 <code>&amp;</code> 左側帶有可空上限的型別參數和右側帶有非空 <code>Any</code> 的型別參數：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">elvisLike</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp; Any): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp; Any </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x ?: y</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 正常</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    elvisLike</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).length</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 錯誤：&#39;null&#39; 不能是非空類型的值</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    elvisLike</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).length</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 正常</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    elvisLike</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?&gt;(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).length</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 錯誤：&#39;null&#39; 不能是非空類型的值</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    elvisLike</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?&gt;(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).length</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在 <a href="https://github.com/Kotlin/KEEP/blob/master/proposals/definitely-non-nullable-types.md" target="_blank" rel="noreferrer">this KEEP</a> 中了解有關明確非空類型的更多資訊。</p><h2 id="kotlin-jvm" tabindex="-1">Kotlin/JVM <a class="header-anchor" href="#kotlin-jvm" aria-label="Permalink to &quot;Kotlin/JVM&quot;">​</a></h2><p>此版本為 Kotlin/JVM 編譯器帶來了效能改進和一個新的編譯器選項。此外，函數式介面建構函式的可呼叫引用已變得穩定。請注意，從 1.7.0 開始，Kotlin/JVM 編譯的預設目標版本是 <code>1.8</code>。</p><ul><li><a href="#compiler-performance-optimizations">編譯器效能最佳化</a></li><li><a href="#new-compiler-option-xjdk-release">新編譯器選項：-Xjdk-release</a></li><li><a href="#stable-callable-references-to-functional-interface-constructors">函數式介面建構函式的穩定可呼叫引用</a></li><li><a href="#removed-jvm-target-version-1-6">已移除 JVM 目標版本 1.6</a></li></ul><h3 id="編譯器效能最佳化" tabindex="-1">編譯器效能最佳化 <a class="header-anchor" href="#編譯器效能最佳化" aria-label="Permalink to &quot;編譯器效能最佳化&quot;">​</a></h3><p>Kotlin 1.7.0 為 Kotlin/JVM 編譯器帶來了效能改進。根據我們的基準測試，與 Kotlin 1.6.0 相比，編譯時間<a href="https://youtrack.jetbrains.com/issue/KT-48233/Switching-to-JVM-IR-backend-increases-compilation-time-by-more-t#focus=Comments-27-6114542.0-0" target="_blank" rel="noreferrer">平均減少了 10%</a>。由於位元碼後處理的改進，大量使用行內函數的專案，例如<a href="https://youtrack.jetbrains.com/issue/KT-51416/Compilation-of-kotlinx-html-DSL-should-still-be-faster" target="_blank" rel="noreferrer">使用 <code>kotlinx.html</code> 的專案</a>，將會編譯得更快。</p><h3 id="新編譯器選項-xjdk-release" tabindex="-1">新編譯器選項：-Xjdk-release <a class="header-anchor" href="#新編譯器選項-xjdk-release" aria-label="Permalink to &quot;新編譯器選項：-Xjdk-release&quot;">​</a></h3><p>Kotlin 1.7.0 引入了一個新的編譯器選項 <code>-Xjdk-release</code>。此選項類似於 <a href="http://openjdk.java.net/jeps/247" target="_blank" rel="noreferrer">javac 的命令列 <code>--release</code> 選項</a>。<code>-Xjdk-release</code> 選項控制目標位元碼版本，並將類別路徑中 JDK 的 API 限制為指定的 Java 版本。例如，<code>kotlinc -Xjdk-release=1.8</code> 將不允許引用 <code>java.lang.Module</code>，即使依賴項中的 JDK 版本是 9 或更高版本。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>此選項<a href="https://youtrack.jetbrains.com/issue/KT-29974" target="_blank" rel="noreferrer">不保證</a>對每個 JDK 發行版都有效。</p></div><p>請在<a href="https://youtrack.jetbrains.com/issue/KT-29974/Add-a-compiler-option-Xjdk-release-similar-to-javac-s-release-to" target="_blank" rel="noreferrer">此 YouTrack 議題</a>中留下您的回饋。</p><h3 id="函數式介面建構函式的穩定可呼叫引用" tabindex="-1">函數式介面建構函式的穩定可呼叫引用 <a class="header-anchor" href="#函數式介面建構函式的穩定可呼叫引用" aria-label="Permalink to &quot;函數式介面建構函式的穩定可呼叫引用&quot;">​</a></h3><p>函數式介面建構函式的<a href="/zh-Hant/kotlin/reflection#callable-references">可呼叫引用</a>現在是<a href="/zh-Hant/kotlin/components-stability">穩定版</a>。了解如何<a href="/zh-Hant/kotlin/fun-interfaces#migration-from-an-interface-with-constructor-function-to-a-functional-interface">遷移</a>從帶有建構函式函數的介面到使用可呼叫引用的函數式介面。</p><p>請在 <a href="https://youtrack.jetbrains.com/newissue?project=kt" target="_blank" rel="noreferrer">YouTrack</a> 中報告您發現的任何問題。</p><h3 id="已移除-jvm-目標版本-1-6" tabindex="-1">已移除 JVM 目標版本 1.6 <a class="header-anchor" href="#已移除-jvm-目標版本-1-6" aria-label="Permalink to &quot;已移除 JVM 目標版本 1.6&quot;">​</a></h3><p>Kotlin/JVM 編譯的預設目標版本是 <code>1.8</code>。<code>1.6</code> 目標已移除。</p><p>請遷移到 JVM 目標 1.8 或更高版本。了解如何更新 JVM 目標版本適用於：</p><ul><li><a href="/zh-Hant/kotlin/gradle-compiler-options#attributes-specific-to-jvm">Gradle</a></li><li><a href="/zh-Hant/kotlin/maven#attributes-specific-to-jvm">Maven</a></li><li><a href="/zh-Hant/kotlin/compiler-reference#jvm-target-version">命令列編譯器</a></li></ul><h2 id="kotlin-native" tabindex="-1">Kotlin/Native <a class="header-anchor" href="#kotlin-native" aria-label="Permalink to &quot;Kotlin/Native&quot;">​</a></h2><p>Kotlin 1.7.0 包含了對 Objective-C 和 Swift 互通性的變更，並穩定化了先前版本中引入的功能。它還為新記憶體管理器帶來了效能改進以及其他更新：</p><ul><li><a href="#performance-improvements-for-the-new-memory-manager">新記憶體管理器的效能改進</a></li><li><a href="#unified-compiler-plugin-abi-with-jvm-and-js-ir-backends">與 JVM 和 JS IR 後端的統一編譯器插件 ABI</a></li><li><a href="#support-for-standalone-android-executables">支援獨立 Android 可執行檔</a></li><li><a href="#interop-with-swift-async-await-returning-void-instead-of-kotlinunit">與 Swift async/await 的互通性：返回 Void 而不是 KotlinUnit</a></li><li><a href="#prohibited-undeclared-exceptions-through-objective-c-bridges">禁止透過 Objective-C 橋接器傳遞未宣告的例外</a></li><li><a href="#improved-cocoapods-integration">改進的 CocoaPods 整合</a></li><li><a href="#overriding-the-kotlin-native-compiler-download-url">覆寫 Kotlin/Native 編譯器下載 URL</a></li></ul><h3 id="新記憶體管理器的效能改進" tabindex="-1">新記憶體管理器的效能改進 <a class="header-anchor" href="#新記憶體管理器的效能改進" aria-label="Permalink to &quot;新記憶體管理器的效能改進&quot;">​</a></h3><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>新的 Kotlin/Native 記憶體管理器處於 <a href="/zh-Hant/kotlin/components-stability">Alpha</a> 階段。 它可能在未來發生不相容的變更並需要手動遷移。 我們非常感謝您在 <a href="https://youtrack.jetbrains.com/issue/KT-48525" target="_blank" rel="noreferrer">YouTrack</a> 中提供回饋。</p></div><p>新記憶體管理器仍處於 Alpha 階段，但它正在成為<a href="/zh-Hant/kotlin/components-stability">穩定版</a>。此版本為新記憶體管理器帶來了顯著的效能改進，尤其是在垃圾回收 (GC) 方面。具體來說，在 <a href="/zh-Hant/kotlin/whatsnew1620">1.6.20 中引入</a>的清掃階段並行實作現在預設啟用。這有助於減少應用程式因 GC 暫停的時間。新的 GC 排程器在選擇 GC 頻率方面表現更好，尤其對於較大的堆。</p><p>此外，我們特別優化了偵錯二進位檔，確保在記憶體管理器的實作程式碼中使用了適當的優化等級和連結時優化。這有助於我們在基準測試中將偵錯二進位檔的執行時間提高了約 30%。</p><p>嘗試在您的專案中使用新的記憶體管理器，看看它是如何運作的，並在 <a href="https://youtrack.jetbrains.com/issue/KT-48525" target="_blank" rel="noreferrer">YouTrack</a> 中與我們分享您的回饋。</p><h3 id="與-jvm-和-js-ir-後端的統一編譯器插件-abi" tabindex="-1">與 JVM 和 JS IR 後端的統一編譯器插件 ABI <a class="header-anchor" href="#與-jvm-和-js-ir-後端的統一編譯器插件-abi" aria-label="Permalink to &quot;與 JVM 和 JS IR 後端的統一編譯器插件 ABI&quot;">​</a></h3><p>從 Kotlin 1.7.0 開始，Kotlin 多平台 Gradle 插件預設使用 Kotlin/Native 的可嵌入編譯器 Jar。此<a href="/zh-Hant/kotlin/whatsnew16#unified-compiler-plugin-abi-with-jvm-and-js-ir-backends">功能在 1.6.0 中作為實驗性功能宣布</a>，現在它已穩定且可使用。</p><p>這項改進對於函式庫作者來說非常方便，因為它改進了編譯器插件開發體驗。在此版本之前，您必須為 Kotlin/Native 提供單獨的構件，但現在您可以為 Native 和其他支援的平台使用相同的編譯器插件構件。</p><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>此功能可能需要插件開發人員對其現有插件採取遷移步驟。 了解如何在此 <a href="https://youtrack.jetbrains.com/issue/KT-48595" target="_blank" rel="noreferrer">YouTrack 議題</a>中準備您的插件以進行更新。</p></div><h3 id="支援獨立-android-可執行檔" tabindex="-1">支援獨立 Android 可執行檔 <a class="header-anchor" href="#支援獨立-android-可執行檔" aria-label="Permalink to &quot;支援獨立 Android 可執行檔&quot;">​</a></h3><p>Kotlin 1.7.0 為為 Android Native 目標產生標準可執行檔提供了全面支援。它<a href="/zh-Hant/kotlin/whatsnew1620#support-for-standalone-android-executables">在 1.6.20 中引入</a>，現在預設啟用。</p><p>如果您想回復到 Kotlin/Native 產生共用函式庫的先前行為，請使用以下設定：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">binaryOptions[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;androidProgramType&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;nativeActivity&quot;</span></span></code></pre></div><h3 id="與-swift-async-await-的互通性-返回-void-而不是-kotlinunit" tabindex="-1">與 Swift async/await 的互通性：返回 Void 而不是 KotlinUnit <a class="header-anchor" href="#與-swift-async-await-的互通性-返回-void-而不是-kotlinunit" aria-label="Permalink to &quot;與 Swift async/await 的互通性：返回 Void 而不是 KotlinUnit&quot;">​</a></h3><p>Kotlin <code>suspend</code> 函數現在在 Swift 中返回 <code>Void</code> 類型而不是 <code>KotlinUnit</code>。這是與 Swift 的 <code>async</code>/<code>await</code> 互通性改進的結果。此功能<a href="/zh-Hant/kotlin/whatsnew1620#interop-with-swift-async-await-returning-void-instead-of-kotlinunit">在 1.6.20 中引入</a>，此版本預設啟用此行為。</p><p>您不再需要使用 <code>kotlin.native.binary.unitSuspendFunctionObjCExport=proper</code> 屬性來為此類函數返回正確的類型。</p><h3 id="禁止透過-objective-c-橋接器傳遞未宣告的例外" tabindex="-1">禁止透過 Objective-C 橋接器傳遞未宣告的例外 <a class="header-anchor" href="#禁止透過-objective-c-橋接器傳遞未宣告的例外" aria-label="Permalink to &quot;禁止透過 Objective-C 橋接器傳遞未宣告的例外&quot;">​</a></h3><p>當您從 Swift/Objective-C 程式碼呼叫 Kotlin 程式碼（反之亦然），並且此程式碼拋出例外時，它應該由發生例外的程式碼處理，除非您明確允許透過適當的轉換在語言之間轉發例外（例如，使用 <code>@Throws</code> 註解）。</p><p>以前，Kotlin 有另一種無意中的行為，即未宣告的例外在某些情況下可能會從一種語言「洩漏」到另一種語言。Kotlin 1.7.0 修復了這個問題，現在此類情況會導致程式終止。</p><p>因此，例如，如果您在 Kotlin 中有一個 <code>{ throw Exception() }</code> lambda 並從 Swift 中呼叫它，在 Kotlin 1.7.0 中，一旦例外到達 Swift 程式碼，它將立即終止。在以前的 Kotlin 版本中，此類例外可能會洩漏到 Swift 程式碼。</p><p><code>@Throws</code> 註解繼續像以前一樣工作。</p><h3 id="改進的-cocoapods-整合" tabindex="-1">改進的 CocoaPods 整合 <a class="header-anchor" href="#改進的-cocoapods-整合" aria-label="Permalink to &quot;改進的 CocoaPods 整合&quot;">​</a></h3><p>從 Kotlin 1.7.0 開始，如果您想在專案中整合 CocoaPods，您不再需要安裝 <code>cocoapods-generate</code> 插件。</p><p>以前，您需要安裝 CocoaPods 依賴管理器和 <code>cocoapods-generate</code> 插件才能使用 CocoaPods，例如，在 Kotlin 多平台行動專案中處理 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-ios-dependencies.html#with-cocoapods" target="_blank" rel="noreferrer">iOS 依賴項</a>。</p><p>現在設定 CocoaPods 整合更容易，我們解決了 <code>cocoapods-generate</code> 無法安裝在 Ruby 3 及更高版本上的問題。現在也支援在 Apple M1 上運作更好的最新 Ruby 版本。</p><p>了解如何設定<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-cocoapods-overview.html#set-up-an-environment-to-work-with-cocoapods" target="_blank" rel="noreferrer">初始 CocoaPods 整合</a>。</p><h3 id="覆寫-kotlin-native-編譯器下載-url" tabindex="-1">覆寫 Kotlin/Native 編譯器下載 URL <a class="header-anchor" href="#覆寫-kotlin-native-編譯器下載-url" aria-label="Permalink to &quot;覆寫 Kotlin/Native 編譯器下載 URL&quot;">​</a></h3><p>從 Kotlin 1.7.0 開始，您可以自訂 Kotlin/Native 編譯器的下載 URL。當 CI 上的外部連結被禁止時，這非常有用。</p><p>要覆寫預設基本 URL <code>https://download.jetbrains.com/kotlin/native/builds</code>，請使用以下 Gradle 屬性：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.native.distribution.baseDownloadUrl=https://example.com</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>下載器會將原生版本和目標作業系統附加到此基本 URL，以確保它下載實際的編譯器發行版。</p></div><h2 id="kotlin-js" tabindex="-1">Kotlin/JS <a class="header-anchor" href="#kotlin-js" aria-label="Permalink to &quot;Kotlin/JS&quot;">​</a></h2><p>Kotlin/JS 正在對 <a href="/zh-Hant/kotlin/js-ir-compiler">JS IR 編譯器後端</a>進行進一步改進，以及其他可以改善您的開發體驗的更新：</p><ul><li><a href="#performance-improvements-for-the-new-ir-backend">新 IR 後端的效能改進</a></li><li><a href="#minification-for-member-names-when-using-ir">使用 IR 時成員名稱的最小化</a></li><li><a href="#support-for-older-browsers-via-polyfills-in-the-ir-backend">透過 IR 後端中的 polyfills 支援舊版瀏覽器</a></li><li><a href="#dynamically-load-javascript-modules-from-js-expressions">從 js 表達式動態載入 JavaScript 模組</a></li><li><a href="#specify-environment-variables-for-javascript-test-runners">為 JavaScript 測試執行器指定環境變數</a></li></ul><h3 id="新-ir-後端的效能改進" tabindex="-1">新 IR 後端的效能改進 <a class="header-anchor" href="#新-ir-後端的效能改進" aria-label="Permalink to &quot;新 IR 後端的效能改進&quot;">​</a></h3><p>此版本有一些主要的更新，應能改善您的開發體驗：</p><ul><li>Kotlin/JS 的增量編譯效能已顯著改進。構建 JS 專案所需時間更少。現在，在許多情況下，增量重建的效能應該與舊版後端大致相同。</li><li>Kotlin/JS 最終捆綁包所需空間更少，因為我們顯著縮小了最終構件的大小。我們測量了某些大型專案的生產捆綁包大小比舊版後端減少了高達 20%。</li><li>介面的類型檢查已數量級地改進。</li><li>Kotlin 產生更高品質的 JS 程式碼。</li></ul><h3 id="使用-ir-時成員名稱的最小化" tabindex="-1">使用 IR 時成員名稱的最小化 <a class="header-anchor" href="#使用-ir-時成員名稱的最小化" aria-label="Permalink to &quot;使用 IR 時成員名稱的最小化&quot;">​</a></h3><p>Kotlin/JS IR 編譯器現在利用其關於 Kotlin 類別和函數之間關係的內部資訊，應用更有效的最小化，縮短函數、屬性和類別的名稱。這會縮小最終捆綁的應用程式。</p><p>這種最小化類型在您以生產模式構建 Kotlin/JS 應用程式時自動應用，並且預設啟用。要禁用成員名稱最小化，請使用 <code>-Xir-minimized-member-names</code> 編譯器標誌：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(IR) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        compilations.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            compileKotlinTask.kotlinOptions.freeCompilerArgs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xir-minimized-member-names=false&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="透過-ir-後端中的-polyfills-支援舊版瀏覽器" tabindex="-1">透過 IR 後端中的 polyfills 支援舊版瀏覽器 <a class="header-anchor" href="#透過-ir-後端中的-polyfills-支援舊版瀏覽器" aria-label="Permalink to &quot;透過 IR 後端中的 polyfills 支援舊版瀏覽器&quot;">​</a></h3><p>Kotlin/JS 的 IR 編譯器後端現在包含與舊版後端相同的 polyfills。這使得使用新編譯器編譯的程式碼可以在不支援 Kotlin 標準函式庫使用的所有 ES2015 方法的舊版瀏覽器中執行。只有專案實際使用的那些 polyfills 會包含在最終捆綁包中，這最大限度地減少了它們對捆綁包大小的潛在影響。</p><p>此功能在使用 IR 編譯器時預設啟用，您無需進行配置。</p><h3 id="從-js-表達式動態載入-javascript-模組" tabindex="-1">從 js 表達式動態載入 JavaScript 模組 <a class="header-anchor" href="#從-js-表達式動態載入-javascript-模組" aria-label="Permalink to &quot;從 js 表達式動態載入 JavaScript 模組&quot;">​</a></h3><p>在使用 JavaScript 模組時，大多數應用程式使用靜態導入，其使用已透過 <a href="/zh-Hant/kotlin/js-modules">JavaScript 模組整合</a>涵蓋。然而，Kotlin/JS 缺少一種機制來在應用程式中於執行時動態載入 JavaScript 模組。</p><p>從 Kotlin 1.7.0 開始，JavaScript 的 <code>import</code> 陳述式在 <code>js</code> 區塊中得到支援，允許您在執行時動態將套件引入您的應用程式：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myPackage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;import(&#39;my-package&#39;)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="為-javascript-測試執行器指定環境變數" tabindex="-1">為 JavaScript 測試執行器指定環境變數 <a class="header-anchor" href="#為-javascript-測試執行器指定環境變數" aria-label="Permalink to &quot;為 JavaScript 測試執行器指定環境變數&quot;">​</a></h3><p>為了調整 Node.js 套件解析或將外部資訊傳遞給 Node.js 測試，您現在可以指定 JavaScript 測試執行器使用的環境變數。要定義環境變數，請在建置腳本的 <code>testTask</code> 區塊中使用帶有鍵值對的 <code>environment()</code> 函數：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        nodejs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            testTask</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                environment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;key&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;value&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="標準函式庫" tabindex="-1">標準函式庫 <a class="header-anchor" href="#標準函式庫" aria-label="Permalink to &quot;標準函式庫&quot;">​</a></h2><p>在 Kotlin 1.7.0 中，標準函式庫收到了一系列變更和改進。它們引入了新功能，穩定化了實驗性功能，並統一了 Native、JS 和 JVM 命名捕獲群組的支援：</p><ul><li><a href="#min-and-max-collection-functions-return-as-non-nullable">min() 和 max() 集合函數返回非空值</a></li><li><a href="#regular-expression-matching-at-specific-indices">特定索引處的正規表達式匹配</a></li><li><a href="#extended-support-for-previous-language-and-api-versions">擴展對先前語言和 API 版本的支援</a></li><li><a href="#access-to-annotations-via-reflection">透過反射存取註解</a></li><li><a href="#stable-deep-recursive-functions">穩定版深度遞迴函數</a></li><li><a href="#time-marks-based-on-inline-classes-for-default-time-source">基於行內類別的預設時間來源時間標記</a></li><li><a href="#new-experimental-extension-functions-for-java-optionals">Java Optional 的新實驗性擴展函數</a></li><li><a href="#support-for-named-capturing-groups-in-js-and-native">JS 和 Native 中對命名捕獲群組的支援</a></li></ul><h3 id="min-和-max-集合函數返回非空值" tabindex="-1">min() 和 max() 集合函數返回非空值 <a class="header-anchor" href="#min-和-max-集合函數返回非空值" aria-label="Permalink to &quot;min() 和 max() 集合函數返回非空值&quot;">​</a></h3><p>在 <a href="/zh-Hant/kotlin/whatsnew14">Kotlin 1.4.0</a> 中，我們將 <code>min()</code> 和 <code>max()</code> 集合函數重新命名為 <code>minOrNull()</code> 和 <code>maxOrNull()</code>。這些新名稱更好地反映了它們的行為 — 如果接收器集合為空則返回 null。它還有助於使函數行為與整個 Kotlin 集合 API 中使用的命名慣例保持一致。</p><p><code>minBy()</code>、<code>maxBy()</code>、<code>minWith()</code> 和 <code>maxWith()</code> 也是如此，它們都在 Kotlin 1.4.0 中獲得了其 *OrNull() 同義詞。受此變更影響的舊函數已逐步棄用。</p><p>Kotlin 1.7.0 重新引入了原始函數名稱，但帶有非空返回類型。新的 <code>min()</code>、<code>max()</code>、<code>minBy()</code>、<code>maxBy()</code>、<code>minWith()</code> 和 <code>maxWith()</code> 函數現在嚴格返回集合元素或拋出例外。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> numbers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(numbers.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">maxOrNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;null&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(numbers.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">max</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;Exception in... Collection is empty.&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="特定索引處的正規表達式匹配" tabindex="-1">特定索引處的正規表達式匹配 <a class="header-anchor" href="#特定索引處的正規表達式匹配" aria-label="Permalink to &quot;特定索引處的正規表達式匹配&quot;">​</a></h3><p>在 <a href="/zh-Hant/kotlin/whatsnew1530#matching-with-regex-at-a-particular-position">1.5.30 中引入</a>的 <code>Regex.matchAt()</code> 和 <code>Regex.matchesAt()</code> 函數現在是穩定版。它們提供了一種檢查正規表達式是否在 <code>String</code> 或 <code>CharSequence</code> 中的特定位置具有精確匹配的方法。</p><p><code>matchesAt()</code> 檢查匹配並返回布林結果：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> releaseText </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Kotlin 1.7.0 is on its way!&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 正規表達式：一位數字，點，一位數字，點，一位或多位數字</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> versionRegex </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">d[.]</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">d[.]</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">d+&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toRegex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(versionRegex.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">matchesAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(releaseText, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;false&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(versionRegex.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">matchesAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(releaseText, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;true&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>matchAt()</code> 如果找到匹配則返回匹配，否則返回 <code>null</code>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> releaseText </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Kotlin 1.7.0 is on its way!&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> versionRegex </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">d[.]</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">d[.]</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">d+&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toRegex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(versionRegex.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">matchAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(releaseText, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;null&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(versionRegex.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">matchAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(releaseText, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)?.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;1.7.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>我們非常感謝您對此 <a href="https://youtrack.jetbrains.com/issue/KT-34021" target="_blank" rel="noreferrer">YouTrack 議題</a>的回饋。</p><h3 id="擴展對先前語言和-api-版本的支援" tabindex="-1">擴展對先前語言和 API 版本的支援 <a class="header-anchor" href="#擴展對先前語言和-api-版本的支援" aria-label="Permalink to &quot;擴展對先前語言和 API 版本的支援&quot;">​</a></h3><p>為了支援函式庫作者開發旨在可在廣泛的舊版 Kotlin 中使用的函式庫，並解決主要 Kotlin 版本發布頻率增加的問題，我們擴展了對先前語言和 API 版本的支援。</p><p>透過 Kotlin 1.7.0，我們支援三個而不是兩個先前的語言和 API 版本。這意味著 Kotlin 1.7.0 支援開發目標為 Kotlin 1.4.0 或更低版本的函式庫。有關向下相容性的更多資訊，請參閱<a href="/zh-Hant/kotlin/compatibility-modes">相容性模式</a>。</p><h3 id="透過反射存取註解" tabindex="-1">透過反射存取註解 <a class="header-anchor" href="#透過反射存取註解" aria-label="Permalink to &quot;透過反射存取註解&quot;">​</a></h3><p>首次<a href="/zh-Hant/kotlin/whatsnew16#repeatable-annotations-with-runtime-retention-for-1-8-jvm-target">在 1.6.0 中引入</a>的 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect.full/find-annotations.html" target="_blank" rel="noreferrer"><code>KAnnotatedElement.findAnnotations()</code></a> 擴展函數現在是<a href="/zh-Hant/kotlin/components-stability">穩定版</a>。這個<a href="/zh-Hant/kotlin/reflection">反射</a>函數返回元素上給定類型的所有註解，包括單獨應用和重複的註解。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Repeatable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">annotation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Tag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Tag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;First Tag&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Tag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Second Tag&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> taggedFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;I&#39;m a tagged function!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">taggedFunction</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> KAnnotatedElement</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(foo.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">findAnnotations</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Tag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [@Tag(name=First Tag), @Tag(name=Second Tag)]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="穩定版深度遞迴函數" tabindex="-1">穩定版深度遞迴函數 <a class="header-anchor" href="#穩定版深度遞迴函數" aria-label="Permalink to &quot;穩定版深度遞迴函數&quot;">​</a></h3><p>深度遞迴函數自 <a href="https://blog.jetbrains.com/kotlin/2020/07/kotlin-1-4-rc-debugging-coroutines/#Defining_deep_recursive_functions_using_coroutines" target="_blank" rel="noreferrer">Kotlin 1.4.0</a> 以來一直作為實驗性功能提供，現在它們在 Kotlin 1.7.0 中是<a href="/zh-Hant/kotlin/components-stability">穩定版</a>。使用 <code>DeepRecursiveFunction</code>，您可以定義一個將其堆疊保留在堆上而不是使用實際呼叫堆疊的函數。這允許您執行非常深的遞迴計算。要呼叫深度遞迴函數，請 <code>invoke</code> 它。</p><p>在此範例中，深度遞迴函數用於遞迴計算二元樹的深度。即使此範例函數遞迴呼叫自身 100,000 次，也不會拋出 <code>StackOverflowError</code>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Tree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> left: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Tree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> right: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Tree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> calculateDepth </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DeepRecursiveFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Tree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; { t </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (t </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> else</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> maxOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        callRecursive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(t.left),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        callRecursive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(t.right)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 產生深度為 100_000 的樹</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> deepTree </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> generateSequence</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Tree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) { prev </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        Tree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(prev, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">take</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100_000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">last</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">calculateDepth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(deepTree)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 100000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>考慮在您的程式碼中使用深度遞迴函數，如果您的遞迴深度超過 1000 次呼叫。</p><h3 id="基於行內類別的預設時間來源時間標記" tabindex="-1">基於行內類別的預設時間來源時間標記 <a class="header-anchor" href="#基於行內類別的預設時間來源時間標記" aria-label="Permalink to &quot;基於行內類別的預設時間來源時間標記&quot;">​</a></h3><p>Kotlin 1.7.0 透過將 <code>TimeSource.Monotonic</code> 返回的時間標記變更為行內值類別來改進時間測量功能的效能。這意味著呼叫 <code>markNow()</code>、<code>elapsedNow()</code>、<code>measureTime()</code> 和 <code>measureTimedValue()</code> 等函數不會為其 <code>TimeMark</code> 實例分配包裝器類別。特別是當測量屬於熱路徑的程式碼片段時，這有助於最大程度地減少測量對效能的影響：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalTime::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mark </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TimeSource.Monotonic.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">markNow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 返回的 \`TimeMark\` 是行內類別</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> elapsedDuration </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mark.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">elapsedNow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>此最佳化僅在靜態已知取得 <code>TimeMark</code> 的時間來源為 <code>TimeSource.Monotonic</code> 時才可用。</p></div><h3 id="java-optional-的新實驗性擴展函數" tabindex="-1">Java Optional 的新實驗性擴展函數 <a class="header-anchor" href="#java-optional-的新實驗性擴展函數" aria-label="Permalink to &quot;Java Optional 的新實驗性擴展函數&quot;">​</a></h3><p>Kotlin 1.7.0 附帶了新的便利函數，可簡化在 Java 中使用 <code>Optional</code> 類別。這些新函數可用於解包和轉換 JVM 上的可選物件，並有助於使 Java API 的使用更簡潔。</p><p><code>getOrNull()</code>、<code>getOrDefault()</code> 和 <code>getOrElse()</code> 擴展函數允許您在 <code>Optional</code> 存在時獲取其值。否則，您將分別獲得 <code>null</code>、預設值或由函數返回的值：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> presentOptional </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Optional.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;I&#39;m here!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(presentOptional.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getOrNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;I&#39;m here!&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> absentOptional </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Optional.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">empty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(absentOptional.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getOrNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// null</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(absentOptional.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getOrDefault</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Nobody here!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;Nobody here!&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(absentOptional.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getOrElse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Optional was absent!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;Default value!&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;Optional was absent!&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;Default value!&quot;</span></span></code></pre></div><p><code>toList()</code>、<code>toSet()</code> 和 <code>asSequence()</code> 擴展函數將存在的 <code>Optional</code> 值轉換為列表、集合或序列，否則返回空集合。<code>toCollection()</code> 擴展函數將 <code>Optional</code> 值附加到已存在的目標集合：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> presentOptional </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Optional.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;I&#39;m here!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> absentOptional </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Optional.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">empty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(presentOptional.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;,&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> absentOptional.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [&quot;I&#39;m here!&quot;], []</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(presentOptional.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toSet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;,&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> absentOptional.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toSet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [&quot;I&#39;m here!&quot;], []</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myCollection </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mutableListOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">absentOptional.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toCollection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myCollection)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myCollection)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// []</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">presentOptional.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toCollection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myCollection)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myCollection)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [&quot;I&#39;m here!&quot;]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> list </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(presentOptional, absentOptional).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">flatMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">asSequence</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(list)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [&quot;I&#39;m here!&quot;]</span></span></code></pre></div><p>這些擴展函數在 Kotlin 1.7.0 中作為實驗性功能引入。您可以在 <a href="https://github.com/Kotlin/KEEP/pull/291" target="_blank" rel="noreferrer">this KEEP</a> 中了解有關 <code>Optional</code> 擴展的更多資訊。一如既往，我們歡迎您在 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">Kotlin 問題追蹤器</a>中提供回饋。</p><h3 id="js-和-native-中對命名捕獲群組的支援" tabindex="-1">JS 和 Native 中對命名捕獲群組的支援 <a class="header-anchor" href="#js-和-native-中對命名捕獲群組的支援" aria-label="Permalink to &quot;JS 和 Native 中對命名捕獲群組的支援&quot;">​</a></h3><p>從 Kotlin 1.7.0 開始，命名捕獲群組不僅在 JVM 上受支援，而且在 JS 和 Native 平台上也受支援。</p><p>要為捕獲群組命名，請在您的正規表達式中使用 <code>(?&lt;name&gt;group)</code> 語法。要獲取群組匹配的文本，請呼叫新引入的 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/get.html" target="_blank" rel="noreferrer"><code>MatchGroupCollection.get()</code></a> 函數並傳遞群組名稱。</p><h4 id="按名稱檢索匹配群組值" tabindex="-1">按名稱檢索匹配群組值 <a class="header-anchor" href="#按名稱檢索匹配群組值" aria-label="Permalink to &quot;按名稱檢索匹配群組值&quot;">​</a></h4><p>考慮這個用於匹配城市座標的範例。要獲取正規表達式匹配的群組集合，請使用 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/-match-result/groups.html" target="_blank" rel="noreferrer"><code>groups</code></a>。比較按其編號 (索引) 和按其名稱使用 <code>value</code> 檢索群組內容：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> regex </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">b(?&lt;city&gt;[A-Za-z</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">s]+),</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">s(?&lt;state&gt;[A-Z]{2}):</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">s(?&lt;areaCode&gt;[0-9]{3})</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">b&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toRegex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> input </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Coordinates: Austin, TX: 123&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> match </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> regex.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">find</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(input)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!!</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(match.groups[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;city&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]?.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;Austin&quot; — 按名稱</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(match.groups[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]?.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;TX&quot; — 按編號</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="命名反向引用" tabindex="-1">命名反向引用 <a class="header-anchor" href="#命名反向引用" aria-label="Permalink to &quot;命名反向引用&quot;">​</a></h4><p>您現在還可以在反向引用群組時使用群組名稱。反向引用匹配之前由捕獲群組匹配的相同文本。為此，請在您的正規表達式中使用 <code>\\k&lt;name&gt;</code> 語法：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> backRef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> regex </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;(?&lt;title&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">w+), yes </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">k&lt;title&gt;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toRegex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> match </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> regex.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">find</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Do you copy? Sir, yes Sir!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!!</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(match.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;Sir, yes Sir&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(match.groups[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;title&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]?.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;Sir&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="替換表達式中的命名群組" tabindex="-1">替換表達式中的命名群組 <a class="header-anchor" href="#替換表達式中的命名群組" aria-label="Permalink to &quot;替換表達式中的命名群組&quot;">​</a></h4><p>命名群組引用可用於替換表達式。考慮 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/-regex/replace.html" target="_blank" rel="noreferrer"><code>replace()</code></a> 函數，它將輸入中指定正規表達式的所有出現替換為替換表達式，以及 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/-regex/replace-first.html" target="_blank" rel="noreferrer"><code>replaceFirst()</code></a> 函數，它僅替換第一個匹配。</p><p>替換字串中 <code>\${name}</code> 的出現將替換為與帶指定名稱的捕獲群組對應的子序列。您可以比較按名稱和索引的群組引用中的替換：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> dateReplace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dateRegex </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Regex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;(?&lt;dd&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">d{2})-(?&lt;mm&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">d{2})-(?&lt;yyyy&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">d{4})&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> input </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Date of birth: 27-04-2022&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dateRegex.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(input, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">{yyyy}-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">{mm}-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">{dd}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;Date of birth: 2022-04-27&quot; — 按名稱</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dateRegex.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(input, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">3-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">2-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;Date of birth: 2022-04-27&quot; — 按編號</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="gradle" tabindex="-1">Gradle <a class="header-anchor" href="#gradle" aria-label="Permalink to &quot;Gradle&quot;">​</a></h2><p>此版本引入了新的建置報告、對 Gradle 插件變體的支援、kapt 中的新統計資料等等：</p><ul><li><a href="#a-new-approach-to-incremental-compilation">增量編譯的新方法</a></li><li><a href="#build-reports-for-kotlin-compiler-tasks">追蹤編譯器效能的新建置報告</a></li><li><a href="#bumping-minimum-supported-versions">Gradle 和 Android Gradle 插件的最低支援版本變更</a></li><li><a href="#support-for-gradle-plugin-variants">支援 Gradle 插件變體</a></li><li><a href="#updates-in-the-kotlin-gradle-plugin-api">Kotlin Gradle 插件 API 中的更新</a></li><li><a href="#the-sam-with-receiver-plugin-is-available-via-the-plugins-api">透過插件 API 提供 sam-with-receiver 插件</a></li><li><a href="#changes-in-compile-tasks">編譯任務中的變更</a></li><li><a href="#statistics-of-generated-files-by-each-annotation-processor-in-kapt">kapt 中每個註解處理器產生檔案的新統計資料</a></li><li><a href="#deprecation-of-the-kotlin-compiler-execution-strategy-system-property">kotlin.compiler.execution.strategy 系統屬性的棄用</a></li><li><a href="#removal-of-deprecated-options-methods-and-plugins">移除棄用選項、方法和插件</a></li></ul><h3 id="增量編譯的新方法" tabindex="-1">增量編譯的新方法 <a class="header-anchor" href="#增量編譯的新方法" aria-label="Permalink to &quot;增量編譯的新方法&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>增量編譯的新方法是<a href="/zh-Hant/kotlin/components-stability">實驗性</a>的。它可能隨時被移除或更改。 需要選擇性啟用 (請參閱下面的詳細資訊)。我們鼓勵您僅將其用於評估目的，我們非常感謝您在 <a href="https://youtrack.jetbrains.com/issues/KT" target="_blank" rel="noreferrer">YouTrack</a> 中提供回饋。</p></div><p>在 Kotlin 1.7.0 中，我們重新設計了跨模組變更的增量編譯。現在，增量編譯也支援在依賴的非 Kotlin 模組中進行的變更，並且與 <a href="https://docs.gradle.org/current/userguide/build_cache.html" target="_blank" rel="noreferrer">Gradle 建置快取</a>相容。編譯避免的支援也得到了改進。</p><p>如果您使用建置快取或經常在非 Kotlin Gradle 模組中進行變更，我們預計您將從這種新方法中獲得最顯著的效益。我們對 <code>kotlin-gradle-plugin</code> 模組的 Kotlin 專案測試顯示，快取命中後的變更改進超過 80%。</p><p>要嘗試這種新方法，請在 <code>gradle.properties</code> 中設定以下選項：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.incremental.useClasspathSnapshot=true</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>增量編譯的新方法目前僅適用於 Gradle 建置系統中的 JVM 後端。</p></div><p>在<a href="https://blog.jetbrains.com/kotlin/2022/07/a-new-approach-to-incremental-compilation-in-kotlin/" target="_blank" rel="noreferrer">這篇部落格文章</a>中了解增量編譯新方法的底層實作方式。</p><p>我們的計劃是穩定化這項技術並新增對其他後端（例如 JS）和建置系統的支援。我們非常感謝您在 <a href="https://youtrack.jetbrains.com/issues/KT" target="_blank" rel="noreferrer">YouTrack</a> 中報告您在此編譯方案中遇到的任何問題或奇怪行為。謝謝！</p><p>Kotlin 團隊非常感謝 <a href="https://github.com/gavra0" target="_blank" rel="noreferrer">Ivan Gavrilovic</a>、<a href="https://github.com/hungvietnguyen" target="_blank" rel="noreferrer">Hung Nguyen</a>、<a href="https://github.com/melix" target="_blank" rel="noreferrer">Cédric Champeau</a> 和其他外部貢獻者的幫助。</p><h3 id="追蹤編譯器效能的新建置報告" tabindex="-1">追蹤編譯器效能的新建置報告 <a class="header-anchor" href="#追蹤編譯器效能的新建置報告" aria-label="Permalink to &quot;追蹤編譯器效能的新建置報告&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>Kotlin 建置報告是<a href="/zh-Hant/kotlin/components-stability">實驗性</a>的。它們可能隨時被移除或更改。 需要選擇性啟用 (請參閱下面的詳細資訊)。僅將它們用於評估目的。我們非常感謝您在 <a href="https://youtrack.jetbrains.com/issues/KT" target="_blank" rel="noreferrer">YouTrack</a> 中提供對它們的回饋。</p></div><p>Kotlin 1.7.0 引入了有助於追蹤編譯器效能的建置報告。報告包含不同編譯階段的持續時間以及編譯無法增量的原因。</p><p>當您想調查編譯器任務的問題時，建置報告非常有用，例如：</p><ul><li>當 Gradle 建置耗時過多，並且您想了解效能不佳的根本原因時。</li><li>當同一專案的編譯時間不同，有時需要幾秒鐘，有時需要幾分鐘時。</li></ul><p>要啟用建置報告，請在 <code>gradle.properties</code> 中宣告儲存建置報告輸出的位置：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.build.report.output=file</span></span></code></pre></div><p>以下值（及其組合）可用：</p><ul><li><p><code>file</code> 將建置報告儲存在本機檔案中。</p></li><li><p><code>build_scan</code> 將建置報告儲存在 <a href="https://scans.gradle.com/" target="_blank" rel="noreferrer">build scan</a> 的 <code>custom values</code> 部分。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Gradle Enterprise 插件限制自訂值的數量及其長度。在大型專案中，某些值可能會遺失。</p></div></li><li><p><code>http</code> 使用 HTTP(S) 發佈建置報告。POST 方法以 JSON 格式傳送指標。資料可能會因版本而異。您可以在 <a href="https://github.com/JetBrains/kotlin/blob/master/libraries/tools/kotlin-gradle-plugin/src/common/kotlin/org/jetbrains/kotlin/gradle/report/data/GradleCompileStatisticsData.kt" target="_blank" rel="noreferrer">Kotlin 儲存庫</a>中查看傳送資料的當前版本。</p></li></ul><p>有兩種常見情況，分析長時間執行編譯的建置報告可以幫助您解決：</p><ul><li>建置不是增量的。分析原因並解決潛在問題。</li><li>建置是增量的，但耗時過多。嘗試重新組織原始碼檔案 — 分割大檔案，將單獨的類別儲存在不同檔案中，重構大型類別，在不同檔案中宣告頂層函數等等。</li></ul><p>在<a href="https://blog.jetbrains.com/kotlin/2022/06/introducing-kotlin-build-reports/" target="_blank" rel="noreferrer">這篇部落格文章</a>中了解有關新建置報告的更多資訊。</p><p>歡迎您嘗試在您的基礎設施中使用建置報告。如果您有任何回饋，遇到任何問題，或想提出改進建議，請隨時在我們的<a href="https://youtrack.jetbrains.com/newIssue" target="_blank" rel="noreferrer">問題追蹤器</a>中報告。謝謝！</p><h3 id="gradle-和-android-gradle-插件的最低支援版本變更" tabindex="-1">Gradle 和 Android Gradle 插件的最低支援版本變更 <a class="header-anchor" href="#gradle-和-android-gradle-插件的最低支援版本變更" aria-label="Permalink to &quot;Gradle 和 Android Gradle 插件的最低支援版本變更&quot;">​</a></h3><p>從 Kotlin 1.7.0 開始，最低支援的 Gradle 版本是 6.7.1。我們不得不<a href="https://youtrack.jetbrains.com/issue/KT-49733/Bump-minimal-supported-Gradle-version-to-6-7-1" target="_blank" rel="noreferrer">提高版本</a>以支援 <a href="#support-for-gradle-plugin-variants">Gradle 插件變體</a>和新的 Gradle API。未來，由於 Gradle 插件變體功能，我們不應該再像以前那樣頻繁地提高最低支援版本。</p><p>此外，最低支援的 Android Gradle 插件版本現在是 3.6.4。</p><h3 id="支援-gradle-插件變體" tabindex="-1">支援 Gradle 插件變體 <a class="header-anchor" href="#支援-gradle-插件變體" aria-label="Permalink to &quot;支援 Gradle 插件變體&quot;">​</a></h3><p>Gradle 7.0 為 Gradle 插件作者引入了一項新功能 — <a href="https://docs.gradle.org/7.0/userguide/implementing_gradle_plugins.html#plugin-with-variants" target="_blank" rel="noreferrer">帶變體的插件</a>。此功能使得在新增對新 Gradle 功能的支援的同時，更容易維護與 7.1 以下 Gradle 版本的相容性。了解有關 <a href="https://docs.gradle.org/current/userguide/variant_model.html" target="_blank" rel="noreferrer">Gradle 中變體選擇</a>的更多資訊。</p><p>透過 Gradle 插件變體，我們可以為不同的 Gradle 版本發布不同的 Kotlin Gradle 插件變體。目標是在 <code>main</code> 變體中支援基本 Kotlin 編譯，這對應於 Gradle 的最舊支援版本。每個變體將具有來自相應版本的 Gradle 功能實作。最新的變體將支援最廣泛的 Gradle 功能集。透過這種方法，我們可以擴展對功能有限的舊版 Gradle 的支援。</p><p>目前，Kotlin Gradle 插件只有兩種變體：</p><ul><li><code>main</code> 適用於 Gradle 6.7.1–6.9.3 版</li><li><code>gradle70</code> 適用於 Gradle 7.0 及更高版本</li></ul><p>在未來的 Kotlin 版本中，我們可能會增加更多。</p><p>要檢查您的建置使用哪個變體，請啟用 <a href="https://docs.gradle.org/current/userguide/logging.html#sec:choosing_a_log_level" target="_blank" rel="noreferrer"><code>--info</code> 記錄級別</a>並在輸出中查找以 <code>Using Kotlin Gradle plugin</code> 開頭的字串，例如 <code>Using Kotlin Gradle plugin main variant</code>。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>以下是一些 Gradle 中變體選擇已知問題的解決方法： * <a href="https://github.com/gradle/gradle/issues/20545" target="_blank" rel="noreferrer">pluginManagement 中的 ResolutionStrategy 不適用於多變體插件</a> * <a href="https://github.com/gradle/gradle/issues/20847" target="_blank" rel="noreferrer">當插件作為 <code>buildSrc</code> 通用依賴項添加時，插件變體被忽略</a></p></div><p>請在<a href="https://youtrack.jetbrains.com/issue/KT-49227/Support-Gradle-plugins-variants" target="_blank" rel="noreferrer">此 YouTrack 議題</a>中留下您的回饋。</p><h3 id="kotlin-gradle-插件-api-中的更新" tabindex="-1">Kotlin Gradle 插件 API 中的更新 <a class="header-anchor" href="#kotlin-gradle-插件-api-中的更新" aria-label="Permalink to &quot;Kotlin Gradle 插件 API 中的更新&quot;">​</a></h3><p>Kotlin Gradle 插件 API 構件收到了一些改進：</p><ul><li><p>新增了帶有使用者可配置輸入的 Kotlin/JVM 和 Kotlin/kapt 任務的介面。</p></li><li><p>新增了 <code>KotlinBasePlugin</code> 介面，所有 Kotlin 插件都繼承自它。當您想在應用任何 Kotlin Gradle 插件（JVM、JS、多平台、Native 和其他平台）時觸發一些組態動作時，請使用此介面：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">project.plugins.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">org</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jetbrains</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gradle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KotlinBasePlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 在此處配置您的動作</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>您可以<a href="https://youtrack.jetbrains.com/issue/KT-48008/Consider-offering-a-KotlinBasePlugin" target="_blank" rel="noreferrer">在此 YouTrack 議題</a>中留下關於 <code>KotlinBasePlugin</code> 的回饋。</p></li><li><p>我們為 Android Gradle 插件奠定了基礎，以便在自身內部配置 Kotlin 編譯，這意味著您無需將 Kotlin Android Gradle 插件新增到您的建置中。 請關注 <a href="https://developer.android.com/studio/releases/gradle-plugin" target="_blank" rel="noreferrer">Android Gradle 插件發布公告</a>以了解新增的支援並嘗試一下！</p></li></ul><h3 id="透過插件-api-提供-sam-with-receiver-插件" tabindex="-1">透過插件 API 提供 sam-with-receiver 插件 <a class="header-anchor" href="#透過插件-api-提供-sam-with-receiver-插件" aria-label="Permalink to &quot;透過插件 API 提供 sam-with-receiver 插件&quot;">​</a></h3><p><a href="/zh-Hant/kotlin/sam-with-receiver-plugin">sam-with-receiver 編譯器插件</a>現在可透過 <a href="https://docs.gradle.org/current/userguide/plugins.html#sec:plugins_block" target="_blank" rel="noreferrer">Gradle 插件 DSL</a> 取得：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.kotlin.plugin.sam.with.receiver&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) version </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$kotlin_version</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="編譯任務中的變更" tabindex="-1">編譯任務中的變更 <a class="header-anchor" href="#編譯任務中的變更" aria-label="Permalink to &quot;編譯任務中的變更&quot;">​</a></h3><p>此版本中編譯任務收到了大量變更：</p><ul><li>Kotlin 編譯任務不再繼承 Gradle 的 <code>AbstractCompile</code> 任務。它們僅繼承 <code>DefaultTask</code>。</li><li><code>AbstractCompile</code> 任務具有 <code>sourceCompatibility</code> 和 <code>targetCompatibility</code> 輸入。由於不再繼承 <code>AbstractCompile</code> 任務，這些輸入在 Kotlin 使用者腳本中不再可用。</li><li><code>SourceTask.stableSources</code> 輸入不再可用，您應該使用 <code>sources</code> 輸入。<code>setSource(...)</code> 方法仍然可用。</li><li>所有編譯任務現在都使用 <code>libraries</code> 輸入來表示編譯所需的函式庫列表。<code>KotlinCompile</code> 任務仍然具有棄用的 Kotlin 屬性 <code>classpath</code>，該屬性將在未來版本中移除。</li><li>編譯任務仍然實作 <code>PatternFilterable</code> 介面，該介面允許過濾 Kotlin 原始碼。<code>sourceFilesExtensions</code> 輸入已移除，改為使用 <code>PatternFilterable</code> 方法。</li><li>棄用的 <code>Gradle destinationDir: File</code> 輸出已替換為 <code>destinationDirectory: DirectoryProperty</code> 輸出。</li><li>Kotlin/Native <code>AbstractNativeCompile</code> 任務現在繼承 <code>AbstractKotlinCompileTool</code> 基底類別。這是將 Kotlin/Native 建置工具整合到所有其他工具的初步步驟。</li></ul><p>請在<a href="https://youtrack.jetbrains.com/issue/KT-32805" target="_blank" rel="noreferrer">此 YouTrack 議題</a>中留下您的回饋。</p><h3 id="kapt-中每個註解處理器產生檔案的新統計資料" tabindex="-1">kapt 中每個註解處理器產生檔案的新統計資料 <a class="header-anchor" href="#kapt-中每個註解處理器產生檔案的新統計資料" aria-label="Permalink to &quot;kapt 中每個註解處理器產生檔案的新統計資料&quot;">​</a></h3><p><code>kotlin-kapt</code> Gradle 插件已經<a href="https://github.com/JetBrains/kotlin/pull/4280" target="_blank" rel="noreferrer">報告每個處理器的效能統計資料</a>。從 Kotlin 1.7.0 開始，它還可以報告每個註解處理器產生檔案數量的統計資料。</p><p>這對於追蹤建置中是否存在未使用的註解處理器非常有用。您可以使用產生的報告來查找觸發不必要註解處理器的模組，並更新模組以防止此情況。</p><p>分兩步啟用統計資料：</p><ul><li><p>在您的 <code>build.gradle.kts</code> 中將 <code>showProcessorStats</code> 標誌設定為 <code>true</code>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kapt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    showProcessorStats </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>在您的 <code>gradle.properties</code> 中將 <code>kapt.verbose</code> Gradle 屬性設定為 <code>true</code>：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kapt.verbose=true</span></span></code></pre></div></li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>您也可以透過<a href="/zh-Hant/kotlin/kapt#use-in-cli">命令列選項 <code>verbose</code></a> 啟用詳細輸出。</p></div><p>統計資料將以 <code>info</code> 等級顯示在日誌中。您將看到 <code>Annotation processor stats:</code> 行，其後是每個註解處理器的執行時間統計資料。在這些行之後，將有 <code>Generated files report:</code> 行，其後是每個註解處理器產生檔案數量的統計資料。例如：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[INFO] Annotation processor stats:</span></span>
<span class="line"><span>[INFO] org.mapstruct.ap.MappingProcessor: total: 290 ms, init: 1 ms, 3 round(s): 289 ms, 0 ms, 0 ms</span></span>
<span class="line"><span>[INFO] Generated files report:</span></span>
<span class="line"><span>[INFO] org.mapstruct.ap.MappingProcessor: total sources: 2, sources per round: 2, 0, 0</span></span></code></pre></div><p>請在<a href="https://youtrack.jetbrains.com/issue/KT-51132/KAPT-Support-reporting-the-number-of-generated-files-by-each-ann" target="_blank" rel="noreferrer">此 YouTrack 議題</a>中留下您的回饋。</p><h3 id="kotlin-compiler-execution-strategy-系統屬性的棄用" tabindex="-1">kotlin.compiler.execution.strategy 系統屬性的棄用 <a class="header-anchor" href="#kotlin-compiler-execution-strategy-系統屬性的棄用" aria-label="Permalink to &quot;kotlin.compiler.execution.strategy 系統屬性的棄用&quot;">​</a></h3><p>Kotlin 1.6.20 引入了<a href="/zh-Hant/kotlin/whatsnew1620#properties-for-defining-kotlin-compiler-execution-strategy">用於定義 Kotlin 編譯器執行策略的新屬性</a>。在 Kotlin 1.7.0 中，舊系統屬性 <code>kotlin.compiler.execution.strategy</code> 已開始棄用週期，改用新屬性。</p><p>當使用 <code>kotlin.compiler.execution.strategy</code> 系統屬性時，您將收到警告。此屬性將在未來版本中刪除。要保留舊行為，請用同名的 Gradle 屬性替換系統屬性。您可以在 <code>gradle.properties</code> 中執行此操作，例如：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.compiler.execution.strategy=out-of-process</span></span></code></pre></div><p>您還可以使用編譯任務屬性 <code>compilerExecutionStrategy</code>。在 <a href="/zh-Hant/kotlin/gradle-compilation-and-caches#defining-kotlin-compiler-execution-strategy">Gradle 頁面</a>上了解更多資訊。</p><h3 id="移除棄用選項、方法和插件" tabindex="-1">移除棄用選項、方法和插件 <a class="header-anchor" href="#移除棄用選項、方法和插件" aria-label="Permalink to &quot;移除棄用選項、方法和插件&quot;">​</a></h3><h4 id="移除-useexperimentalannotation-方法" tabindex="-1">移除 useExperimentalAnnotation 方法 <a class="header-anchor" href="#移除-useexperimentalannotation-方法" aria-label="Permalink to &quot;移除 useExperimentalAnnotation 方法&quot;">​</a></h4><p>在 Kotlin 1.7.0 中，我們完成了 <code>useExperimentalAnnotation</code> Gradle 方法的棄用週期。請改用 <code>optIn()</code> 來選擇性啟用在模組中使用 API。</p><p>例如，如果您的 Gradle 模組是多平台的：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        languageSettings.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">optIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.mylibrary.OptInAnnotation&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在 Kotlin 中了解有關<a href="/zh-Hant/kotlin/opt-in-requirements">選擇性啟用要求</a>的更多資訊。</p><h4 id="移除棄用的編譯器選項" tabindex="-1">移除棄用的編譯器選項 <a class="header-anchor" href="#移除棄用的編譯器選項" aria-label="Permalink to &quot;移除棄用的編譯器選項&quot;">​</a></h4><p>我們已完成幾個編譯器選項的棄用週期：</p><ul><li><code>kotlinOptions.jdkHome</code> 編譯器選項在 1.5.30 中棄用，並已在當前版本中移除。如果 Gradle 建置包含此選項，現在將失敗。我們鼓勵您使用 <a href="/zh-Hant/kotlin/whatsnew1530#support-for-java-toolchains">Java 工具鏈</a>，它自 Kotlin 1.5.30 起已受支援。</li><li>棄用的 <code>noStdlib</code> 編譯器選項也已移除。Gradle 插件使用 <code>kotlin.stdlib.default.dependency=true</code> 屬性來控制 Kotlin 標準函式庫是否存在。</li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>編譯器引數 <code>-jdkHome</code> 和 <code>-no-stdlib</code> 仍然可用。</p></div><h4 id="移除棄用的插件" tabindex="-1">移除棄用的插件 <a class="header-anchor" href="#移除棄用的插件" aria-label="Permalink to &quot;移除棄用的插件&quot;">​</a></h4><p>在 Kotlin 1.4.0 中，<code>kotlin2js</code> 和 <code>kotlin-dce-plugin</code> 插件被棄用，它們已在此版本中移除。請改用新的 <code>org.jetbrains.kotlin.js</code> 插件而不是 <code>kotlin2js</code>。當 Kotlin/JS Gradle 插件正確配置時，無用程式碼移除 (DCE) 才會運作。</p><p>在 Kotlin 1.6.0 中，我們將 <code>KotlinGradleSubplugin</code> 類別的棄用等級變更為 <code>ERROR</code>。開發人員使用此類別編寫編譯器插件。在此版本中，<a href="https://youtrack.jetbrains.com/issue/KT-48831/" target="_blank" rel="noreferrer">此類別已移除</a>。請改用 <code>KotlinCompilerPluginSupportPlugin</code> 類別。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>最佳實踐是在整個專案中使用 1.7.0 及更高版本的 Kotlin 插件。</p></div><h4 id="移除棄用的協程-dsl-選項和屬性" tabindex="-1">移除棄用的協程 DSL 選項和屬性 <a class="header-anchor" href="#移除棄用的協程-dsl-選項和屬性" aria-label="Permalink to &quot;移除棄用的協程 DSL 選項和屬性&quot;">​</a></h4><p>我們移除了棄用的 <code>kotlin.experimental.coroutines</code> Gradle DSL 選項和 <code>gradle.properties</code> 中使用的 <code>kotlin.coroutines</code> 屬性。現在您只需使用<a href="/zh-Hant/kotlin/coroutines-basics#extract-function-refactoring">暫停函數</a>或<a href="/zh-Hant/kotlin/gradle-configure-project#set-a-dependency-on-a-kotlinx-library">將 <code>kotlinx.coroutines</code> 依賴項新增</a>到您的建置腳本中即可。</p><p>在<a href="/zh-Hant/kotlin/coroutines-guide">協程指南</a>中了解有關協程的更多資訊。</p><h4 id="移除工具鏈擴展方法中的類型轉換" tabindex="-1">移除工具鏈擴展方法中的類型轉換 <a class="header-anchor" href="#移除工具鏈擴展方法中的類型轉換" aria-label="Permalink to &quot;移除工具鏈擴展方法中的類型轉換&quot;">​</a></h4><p>在 Kotlin 1.7.0 之前，當使用 Kotlin DSL 配置 Gradle 工具鏈時，您必須執行類型轉換為 <code>JavaToolchainSpec</code> 類別：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvmToolchain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> JavaToolchainSpec).languageVersion.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(JavaLanguageVersion.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MAJOR_JDK_VERSION</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>現在，您可以省略 <code>(this as JavaToolchainSpec)</code> 部分：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvmToolchain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        languageVersion.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(JavaLanguageVersion.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MAJOR_JDK_VERSION</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="遷移到-kotlin-1-7-0" tabindex="-1">遷移到 Kotlin 1.7.0 <a class="header-anchor" href="#遷移到-kotlin-1-7-0" aria-label="Permalink to &quot;遷移到 Kotlin 1.7.0&quot;">​</a></h2><h3 id="安裝-kotlin-1-7-0" tabindex="-1">安裝 Kotlin 1.7.0 <a class="header-anchor" href="#安裝-kotlin-1-7-0" aria-label="Permalink to &quot;安裝 Kotlin 1.7.0&quot;">​</a></h3><p>IntelliJ IDEA 2022.1 和 Android Studio Chipmunk (212) 會自動建議將 Kotlin 插件更新到 1.7.0。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>對於 IntelliJ IDEA 2022.2，以及 Android Studio Dolphin (213) 或 Android Studio Electric Eel (221)，Kotlin 插件 1.7.0 將隨即將推出的 IntelliJ IDEA 和 Android Studio 更新一同提供。</p></div><p>新的命令列編譯器可在 <a href="https://github.com/JetBrains/kotlin/releases/tag/v1.7.0" target="_blank" rel="noreferrer">GitHub 發布頁面</a>下載。</p><h3 id="遷移現有專案或使用-kotlin-1-7-0-開始新專案" tabindex="-1">遷移現有專案或使用 Kotlin 1.7.0 開始新專案 <a class="header-anchor" href="#遷移現有專案或使用-kotlin-1-7-0-開始新專案" aria-label="Permalink to &quot;遷移現有專案或使用 Kotlin 1.7.0 開始新專案&quot;">​</a></h3><ul><li><p>要將現有專案遷移到 Kotlin 1.7.0，請將 Kotlin 版本更改為 <code>1.7.0</code> 並重新導入您的 Gradle 或 Maven 專案。<a href="/zh-Hant/kotlin/releases#update-to-a-new-kotlin-version">了解如何更新到 Kotlin 1.7.0</a>。</p></li><li><p>要使用 Kotlin 1.7.0 開始新專案，請更新 Kotlin 插件並從 <strong>File</strong> | <strong>New</strong> | <strong>Project</strong> 執行專案精靈。</p></li></ul><h3 id="kotlin-1-7-0-相容性指南" tabindex="-1">Kotlin 1.7.0 相容性指南 <a class="header-anchor" href="#kotlin-1-7-0-相容性指南" aria-label="Permalink to &quot;Kotlin 1.7.0 相容性指南&quot;">​</a></h3><p>Kotlin 1.7.0 是一個<a href="/zh-Hant/kotlin/kotlin-evolution-principles#language-and-tooling-releases">功能發行版</a>，因此可能會帶來與您為早期語言版本編寫的程式碼不相容的變更。在 <a href="/zh-Hant/kotlin/compatibility-guide-17">Kotlin 1.7.0 相容性指南</a>中找到此類變更的詳細列表。</p>`,248))])}const C=h(d,[["render",E]]);export{m as __pageData,C as default};
