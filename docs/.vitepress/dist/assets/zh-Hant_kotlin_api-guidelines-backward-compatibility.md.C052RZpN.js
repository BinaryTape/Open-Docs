import{_ as l,C as e,c as p,o as h,j as s,ag as a,G as k,a as t}from"./chunks/framework.Bksy39di.js";const u=JSON.parse('{"title":"函式庫作者的向下相容性指南","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/api-guidelines-backward-compatibility.md","filePath":"zh-Hant/kotlin/api-guidelines-backward-compatibility.md","lastUpdated":1754307826000}'),d={name:"zh-Hant/kotlin/api-guidelines-backward-compatibility.md"};function r(o,i,c,g,E,y){const n=e("TopicTitle");return h(),p("div",null,[i[0]||(i[0]=s("h1",{id:"函式庫作者的向下相容性指南",tabindex:"-1"},[t("函式庫作者的向下相容性指南 "),s("a",{class:"header-anchor",href:"#函式庫作者的向下相容性指南","aria-label":'Permalink to "函式庫作者的向下相容性指南"'},"​")],-1)),i[1]||(i[1]=s("p",null,"建立函式庫最常見的動機是將功能公開給更廣泛的社群。 此社群可能是一個單一團隊、一家公司、一個特定產業或一個技術平台。 在所有情況下，向下相容性都將是一個重要的考量。 社群越廣泛，向下相容性就越重要，因為您將越不清楚您的使用者是誰以及他們所處的工作限制。",-1)),i[2]||(i[2]=s("p",null,"向下相容性不是單一術語，但可以在二進位、原始碼和行為層級定義。 本節將提供這些類型的更多資訊。",-1)),i[3]||(i[3]=s("p",null,"請注意：",-1)),i[4]||(i[4]=s("ul",null,[s("li",null,"即使不破壞原始碼相容性，也可能破壞二進位相容性，反之亦然。"),s("li",null,"保證原始碼相容性是理想但非常困難的。作為函式庫作者，您必須考量函式庫使用者可能呼叫或實例化函式或類型的所有可能方式。 原始碼相容性通常是願景，而非承諾。")],-1)),i[5]||(i[5]=s("p",null,"本節其餘部分將說明您可以採取的行動，以及可以使用的工具，以協助確保不同類型的相容性。",-1)),i[6]||(i[6]=s("h2",{"initial-collapse-state":"collapsed",collapsible:"true",id:"相容性類型",tabindex:"-1"},[t("相容性類型 "),s("a",{class:"header-anchor",href:"#相容性類型","aria-label":'Permalink to "相容性類型 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),i[7]||(i[7]=a('<p><strong>二進位相容性</strong>意味著函式庫的新版本可以替換先前編譯的函式庫版本。 任何針對函式庫先前版本編譯的軟體都應繼續正常運作。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>了解更多關於二進位相容性，請參閱 <a href="https://github.com/Kotlin/binary-compatibility-validator?tab=readme-ov-file#what-makes-an-incompatible-change-to-the-public-binary-api" target="_blank" rel="noreferrer">Binary compatibility validator 的 README</a> 或 <a href="https://github.com/eclipse-platform/eclipse.platform/blob/master/docs/Evolving-Java-based-APIs-2.md" target="_blank" rel="noreferrer">Evolving Java-based APIs</a> 文件。</p></div><p><strong>原始碼相容性</strong>意味著函式庫的新版本可以在不修改任何使用該函式庫的原始碼的情況下替換舊版本。然而，編譯此客戶端程式碼的輸出可能不再與編譯函式庫的輸出相容，因此客戶端程式碼必須針對函式庫的新版本進行重建，以確保相容性。</p><p><strong>行為相容性</strong>意味著函式庫的新版本不會修改現有功能，除非是修復錯誤。相同的特性被涉及，並且它們具有相同的語義。</p><h2 id="使用-binary-compatibility-validator" tabindex="-1">使用 Binary compatibility validator <a class="header-anchor" href="#使用-binary-compatibility-validator" aria-label="Permalink to &quot;使用 Binary compatibility validator&quot;">​</a></h2><p>JetBrains 提供一個 <a href="https://github.com/Kotlin/binary-compatibility-validator" target="_blank" rel="noreferrer">Binary compatibility validator</a> 工具，可用於確保您的 API 在不同版本之間的二進位相容性。</p><p>此工具作為 Gradle 外掛實作，並為您的建構新增兩個任務：</p><ul><li><code>apiDump</code> 任務會建立一個人類可讀的 <code>.api</code> 檔案，描述您的 API。</li><li><code>apiCheck</code> 任務會將儲存的 API 描述與目前建構中編譯的類別進行比較。</li></ul><p><code>apiCheck</code> 任務在建構時由標準的 Gradle <code>check</code> 任務呼叫。 當相容性被破壞時，建構會失敗。此時，您應該手動執行 <code>apiDump</code> 任務，並比較舊版本和新版本之間的差異。 如果您對這些變更感到滿意，可以更新現有的 <code>.api</code> 檔案，該檔案位於您的 VCS 中。</p><p>驗證器對多平台函式庫產生的 <a href="https://github.com/Kotlin/binary-compatibility-validator?tab=readme-ov-file#experimental-klib-abi-validation-support" target="_blank" rel="noreferrer">KLibs 具有實驗性驗證支援</a>。</p>',10)),k(n,{id:"kotlin-gradle-外掛中的二進位相容性驗證",level:"3",title:"Kotlin Gradle 外掛中的二進位相容性驗證",labelRef:"experimental-general"}),i[8]||(i[8]=a(`<p>從 2.2.0 版開始，Kotlin Gradle 外掛支援二進位相容性驗證。有關更多資訊，請參閱 <a href="/zh-Hant/kotlin/gradle-binary-compatibility-validation">Kotlin Gradle 外掛中的二進位相容性驗證</a>。</p><h2 id="明確指定回傳類型" tabindex="-1">明確指定回傳類型 <a class="header-anchor" href="#明確指定回傳類型" aria-label="Permalink to &quot;明確指定回傳類型&quot;">​</a></h2><p>如同在 <a href="/zh-Hant/kotlin/coding-conventions#coding-conventions-for-libraries">Kotlin 程式碼撰寫準則</a> 中所討論的，您應該始終在 API 中明確指定函式回傳類型和屬性類型。另請參閱有關 <a href="/zh-Hant/kotlin/api-guidelines-simplicity#use-explicit-api-mode">明確 API 模式</a> 的部分。</p><p>考量以下範例，其中函式庫作者建立了一個 <code>JsonDeserializer</code>，為了方便起見，使用擴展函式將其與 <code>Int</code> 類型關聯：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> JsonDeserializer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fromJson: (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) -&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> deserialize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(input: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        ..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">defaultDeserializer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> JsonDeserializer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">. }</span></span></code></pre></div><p>假設作者將此實作替換為 <code>JsonOrXmlDeserializer</code>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> JsonOrXmlDeserializer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fromJson: (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) -&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fromXML: (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) -&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> deserialize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(input: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        ..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">defaultDeserializer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> JsonOrXmlDeserializer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">. }, { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">. })</span></span></code></pre></div><p>現有功能將繼續運作，並新增了解析 XML 的功能。然而，這會破壞二進位相容性。</p><h2 id="避免向現有-api-函式新增參數" tabindex="-1">避免向現有 API 函式新增參數 <a class="header-anchor" href="#避免向現有-api-函式新增參數" aria-label="Permalink to &quot;避免向現有 API 函式新增參數&quot;">​</a></h2><p>向公開 API 新增非預設參數會破壞二進位和原始碼相容性，因為使用者在呼叫時需要提供比以前更多的資訊。 然而，即使是新增 <a href="/zh-Hant/kotlin/functions#parameters-with-default-values">預設參數</a> 也可能破壞相容性。</p><p>例如，假設您在 <code>lib.kt</code> 中有以下函式：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fib</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> … </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Returns zero</span></span></code></pre></div><p>以及在 <code>client.kt</code> 中有以下函式：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fib</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Prints zero</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在 JVM 上編譯這兩個檔案會產生 <code>LibKt.class</code> 和 <code>ClientKt.class</code> 輸出。</p><p>假設您重新實作並編譯 <code>fib</code> 函式以表示費波那契數列，使得 <code>fib(3)</code> 回傳 2，<code>fib(4)</code> 回傳 3，依此類推。 您新增一個參數，但賦予其零的預設值，以保留現有行為：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fib</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(input: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> … </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Returns Fibonacci member</span></span></code></pre></div><p>您現在需要重新編譯檔案 <code>lib.kt</code>。您可能會預期 <code>client.kt</code> 檔案不需要重新編譯， 並且相關的類別檔案可以如下呼叫：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kotlin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ClientKt.class</span></span></code></pre></div><p>但如果您嘗試這樣做，會發生 <code>NoSuchMethodError</code>：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Exception in thread &quot;main&quot; java.lang.NoSuchMethodError: &#39;int LibKt.fib()&#39;</span></span>
<span class="line"><span>       at LibKt.main(fib.kt:2)</span></span>
<span class="line"><span>       at LibKt.main(fib.kt)</span></span>
<span class="line"><span>       …</span></span></code></pre></div><p>這是因為方法簽章在 Kotlin/JVM 編譯器生成的位元組碼中發生了改變，破壞了二進位相容性。</p><p>然而，原始碼相容性被保留。如果您重新編譯兩個檔案，程式將像以前一樣執行。</p>`,23)),i[9]||(i[9]=s("h3",{"initial-collapse-state":"collapsed",collapsible:"true",id:"使用多載來保留相容性",tabindex:"-1"},[t("使用多載來保留相容性 "),s("a",{class:"header-anchor",href:"#使用多載來保留相容性","aria-label":'Permalink to "使用多載來保留相容性 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),i[10]||(i[10]=a(`<p>在為 JVM 撰寫 Kotlin 程式碼時，您可以在具有預設參數的函式上使用 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.jvm/-jvm-overloads/" target="_blank" rel="noreferrer"><code>@JvmOverloads</code></a> 註解。 這會生成函式的多載，每個多載對應一個帶有預設參數且可以從參數列表末尾省略的參數。 透過這些獨立生成的函式，在參數列表末尾新增一個新參數會保留二進位相容性，因為它不會改變輸出中任何現有函式，只是新增一個。</p><p>例如，上述函式可以像這樣註解：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JvmOverloads</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fib</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(input: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> …</span></span></code></pre></div><p>這將在輸出位元組碼中生成兩個方法，一個沒有參數，一個帶有 <code>Int</code> 參數：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> static </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fib</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()I</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> static </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fib</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(I)I</span></span></code></pre></div><p>對於所有 Kotlin 目標，您可以選擇手動為您的函式建立多個多載，而不是單一接受預設參數的函式，以保留二進位相容性。在上述範例中，這意味著為您希望接受 <code>Int</code> 參數的情況建立一個單獨的 <code>fib</code> 函式：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fib</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> … </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fib</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(input: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> …</span></span></code></pre></div><h2 id="避免擴展或縮小回傳類型" tabindex="-1">避免擴展或縮小回傳類型 <a class="header-anchor" href="#避免擴展或縮小回傳類型" aria-label="Permalink to &quot;避免擴展或縮小回傳類型&quot;">​</a></h2><p>在 API 演進過程中，通常會想要擴展或縮小函式的回傳類型。 例如，在您的 API 的即將推出的版本中，您可能希望將回傳類型從 <code>List</code> 切換到 <code>Collection</code>，或從 <code>Collection</code> 切換到 <code>List</code>。</p><p>您可能希望將類型縮小為 <code>List</code>，以滿足使用者對索引支援的需求。 相反地，您可能希望將類型擴展為 <code>Collection</code>，因為您意識到您正在處理的資料沒有自然順序。</p><p>很容易理解為什麼擴展回傳類型會破壞相容性。例如，從 <code>List</code> 轉換為 <code>Collection</code> 會破壞所有使用索引的程式碼。</p><p>您可能會認為縮小回傳類型，例如從 <code>Collection</code> 到 <code>List</code>，會保留相容性。 不幸的是，雖然原始碼相容性被保留，但二進位相容性被破壞。</p><p>假設您在檔案 <code>Library.kt</code> 中有一個示範函式：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> demo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Number</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span></span></code></pre></div><p>以及在 <code>Client.kt</code> 中有一個函式客戶端：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">demo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Prints 3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>讓我們想像一個場景，您更改了 <code>demo</code> 的回傳類型，並且只重新編譯了 <code>Library.kt</code>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> demo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span></span></code></pre></div><p>當您重新執行客戶端時，將發生以下錯誤 (在 JVM 上)：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Exception in thread &quot;main&quot; java.lang.NoSuchMethodError: &#39;java.lang.Number Library.demo()&#39;</span></span>
<span class="line"><span>        at ClientKt.main(call.kt:2)</span></span>
<span class="line"><span>        at ClientKt.main(call.kt)</span></span>
<span class="line"><span>        …</span></span></code></pre></div><p>發生這種情況是因為從 <code>main</code> 方法生成的位元組碼中包含以下指令：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>0: invokestatic  #12 // Method Library.demo:()Ljava/lang/Number;</span></span></code></pre></div><p>JVM 正在嘗試呼叫一個名為 <code>demo</code> 的靜態方法，該方法回傳一個 <code>Number</code>。 然而，由於此方法不再存在，您已破壞了二進位相容性。</p><h2 id="避免在-api-中使用資料類別" tabindex="-1">避免在 API 中使用資料類別 <a class="header-anchor" href="#避免在-api-中使用資料類別" aria-label="Permalink to &quot;避免在 API 中使用資料類別&quot;">​</a></h2><p>在常規開發中，資料類別的優勢在於為您生成的額外函式。 在 API 設計中，這種優勢變成了弱點。</p><p>例如，假設您在 API 中使用以下資料類別：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> email: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>稍後，您可能希望新增一個名為 <code>active</code> 的屬性：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> email: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> active: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Boolean</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>這會以兩種方式破壞二進位相容性。首先，生成的建構函式將具有不同的簽章。 此外，生成的 <code>copy</code> 方法的簽章也會改變。</p><p>原始簽章 (在 Kotlin/JVM 上) 會是：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>public final User copy(java.lang.String, java.lang.String)</span></span></code></pre></div><p>添加 <code>active</code> 屬性後，簽章變為：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>public final User copy(java.lang.String, java.lang.String, boolean)</span></span></code></pre></div><p>與建構函式一樣，這會破壞二進位相容性。</p><p>可以透過手動撰寫次要建構函式並覆寫 <code>copy</code> 方法來解決這些問題。 然而，所涉及的努力抵消了使用資料類別的便利性。</p><p>資料類別的另一個問題是，更改建構函式參數的順序會影響生成的 <code>componentX</code> 方法， 這些方法用於解構。即使它不破壞二進位相容性，更改順序也肯定會破壞行為相容性。</p><h2 id="使用-publishedapi-註解的考量事項" tabindex="-1">使用 PublishedApi 註解的考量事項 <a class="header-anchor" href="#使用-publishedapi-註解的考量事項" aria-label="Permalink to &quot;使用 PublishedApi 註解的考量事項&quot;">​</a></h2><p>Kotlin 允許內聯函式成為您函式庫 API 的一部分。對這些函式的呼叫將內聯到您的使用者撰寫的客戶端程式碼中。這可能會引入相容性問題，因此這些函式不允許呼叫非公開 API 宣告。</p><p>如果您需要從內聯的公開函式呼叫函式庫的內部 API，您可以透過使用 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-published-api/" target="_blank" rel="noreferrer"><code>@PublishedApi</code></a> 註解來做到這一點。 這使得內部宣告有效地成為公開的，因為對它的引用最終會出現在編譯後的客戶端程式碼中。 因此，在對其進行更改時，必須將其與公開宣告相同地處理，因為這些更改可能會影響二進位相容性。</p><h2 id="務實地演進-api" tabindex="-1">務實地演進 API <a class="header-anchor" href="#務實地演進-api" aria-label="Permalink to &quot;務實地演進 API&quot;">​</a></h2><p>有些情況下，您需要透過移除或更改現有宣告來隨時間對函式庫的 API 進行重大變更。 在本節中，我們將討論如何務實地處理此類情況。</p><p>當使用者升級到您的函式庫的新版本時，他們不應在專案的原始碼中遇到對您函式庫 API 的未解析引用。與其立即從函式庫的公開 API 中移除某些內容，您應該遵循一個棄用週期。這樣，您可以給予使用者時間遷移到替代方案。</p><p>在舊宣告上使用 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-deprecated/" target="_blank" rel="noreferrer"><code>@Deprecated</code></a> 註解，以表明它正在被替換。此註解的參數提供了有關棄用的重要詳細資訊：</p><ul><li><code>message</code> 應解釋正在更改的內容以及原因。</li><li><code>replaceWith</code> 參數應盡可能用於提供自動遷移到新 API 的功能。</li><li>棄用的層級應用於逐漸棄用 API。有關更多資訊，請參閱 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-deprecated/" target="_blank" rel="noreferrer">Kotlin 文件中的 Deprecated 頁面</a>。</li></ul><p>通常，棄用應首先產生警告，然後是錯誤，最後隱藏宣告。 此過程應在幾個次要版本中進行，給予使用者時間在其專案中進行任何必要的更改。 破壞性變更，例如移除 API，應僅在主要版本中發生。 函式庫可以採用不同的版本控制和棄用策略，但這必須傳達給其使用者，以設定正確的期望。</p><p>您可以在 <a href="/zh-Hant/kotlin/kotlin-evolution-principles#libraries">Kotlin 演進原則文件</a> 或 KotlinConf 2023 上 Leonid Startsev 的 <a href="https://www.youtube.com/watch?v=cCgXtpVPO-o&amp;t=1468s" target="_blank" rel="noreferrer">為客戶無痛演進您的 Kotlin API 演講</a> 中了解更多資訊。</p><h2 id="使用-requiresoptin-機制" tabindex="-1">使用 RequiresOptIn 機制 <a class="header-anchor" href="#使用-requiresoptin-機制" aria-label="Permalink to &quot;使用 RequiresOptIn 機制&quot;">​</a></h2><p>Kotlin 標準函式庫 <a href="/zh-Hant/kotlin/opt-in-requirements">提供了選擇性加入機制</a>，要求使用者在使用您的 API 的某個部分之前明確同意。 這是基於建立標記註解，這些註解本身都用 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-requires-opt-in/" target="_blank" rel="noreferrer"><code>@RequiresOptIn</code></a> 註解。 您應該使用此機制來管理與原始碼和行為相容性相關的期望，特別是在向您的函式庫引入新的 API 時。</p><p>如果您選擇使用此機制，我們建議遵循以下最佳實踐：</p><ul><li>使用選擇性加入機制為 API 的不同部分提供不同的保證。例如，您可以將功能標記為 <em>預覽</em>、<em>實驗性</em> 和 <em>精細</em>。每個類別都應在您的文件中和 <a href="/zh-Hant/kotlin/kotlin-doc">KDoc 註解</a> 中清楚解釋，並附有適當的警告訊息。</li><li>如果您的函式庫使用實驗性 API，請將 <a href="/zh-Hant/kotlin/opt-in-requirements#propagate-opt-in-requirements">註解傳播</a> 給您的使用者。這確保您的使用者意識到您有仍在演進的依賴項。</li><li>避免使用選擇性加入機制來棄用函式庫中已存在的宣告。請改用 <code>@Deprecated</code>，如 <a href="#evolve-apis-pragmatically">務實地演進 API</a> 部分所述。</li></ul><h2 id="接下來呢" tabindex="-1">接下來呢 <a class="header-anchor" href="#接下來呢" aria-label="Permalink to &quot;接下來呢&quot;">​</a></h2><p>如果您還沒有，請考慮查看這些頁面：</p><ul><li>在 <a href="/zh-Hant/kotlin/api-guidelines-minimizing-mental-complexity">最小化心智複雜度</a> 頁面中探索最小化心智複雜度的策略。</li><li>有關有效文件撰寫實踐的廣泛概述，請參閱 <a href="/zh-Hant/kotlin/api-guidelines-informative-documentation">資訊豐富的文件</a>。</li></ul>`,54))])}const F=l(d,[["render",r]]);export{u as __pageData,F as default};
