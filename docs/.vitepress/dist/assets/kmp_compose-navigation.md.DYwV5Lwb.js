import{_ as s,c as a,o as n,ag as t}from"./chunks/framework.Bksy39di.js";const c=JSON.parse('{"title":"在 Compose 中导航","description":"","frontmatter":{},"headers":[],"relativePath":"kmp/compose-navigation.md","filePath":"kmp/compose-navigation.md","lastUpdated":1755516278000}'),e={name:"kmp/compose-navigation.md"};function l(p,i,h,o,k,r){return n(),a("div",null,i[0]||(i[0]=[t(`<h1 id="在-compose-中导航" tabindex="-1">在 Compose 中导航 <a class="header-anchor" href="#在-compose-中导航" aria-label="Permalink to &quot;在 Compose 中导航&quot;">​</a></h1><p><a href="https://developer.android.com/guide/navigation" target="_blank" rel="noreferrer">Android 的 Navigation 库</a>支持在 Jetpack Compose 中导航。Compose Multiplatform 团队正在为 AndroidX Navigation 库贡献多平台支持。</p><p>除了在应用程序内容片段之间进行实际导航外，该库还解决了基本的导航问题：</p><ul><li>以类型安全的方式在目标之间传递数据。</li><li>通过保持清晰易用的导航历史记录，轻松跟踪用户在应用程序中的旅程。</li><li>支持深层链接机制，允许在常规工作流之外将用户导航到应用程序中的特定位置。</li><li>支持导航时统一的动画和过渡，并允许使用常用模式（例如返回手势），且只需极少额外工作。</li></ul><p>如果您对基础知识感到足够熟悉，请继续阅读 <a href="./compose-navigation-routing">导航和路由</a>，了解如何在跨平台项目中利用 Navigation 库。否则，请继续阅读以了解该库所使用的基本概念。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>您可以在我们的 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/whats-new-compose.html" target="_blank" rel="noreferrer">新功能</a> 中跟踪 Navigation 库多平台版本的变更，或在 <a href="./https://github.com/JetBrains/compose-multiplatform/blob/master/CHANGELOG">Compose Multiplatform 变更日志</a> 中关注具体的抢先体验预览（EAP）版本。</p></div><h2 id="compose-navigation-的基本概念" tabindex="-1">Compose Navigation 的基本概念 <a class="header-anchor" href="#compose-navigation-的基本概念" aria-label="Permalink to &quot;Compose Navigation 的基本概念&quot;">​</a></h2><p>Navigation 库使用以下概念来映射导航用例：</p><ul><li>一个 <em>导航图</em> 描述了应用程序中所有可能的目标以及它们之间的连接。导航图可以嵌套以适应应用程序中的子流程。</li><li>一个 <em>目标</em> 是导航图中的一个节点，可以导航到该节点。这可以是一个 composable、一个嵌套导航图或一个对话框。当用户导航到目标时，应用程序会显示其内容。</li><li>一个 <em>路由</em> 标识一个目标并定义导航到它所需的实参，但不描述 UI。通过这种方式，数据与表示分离，这允许您保持每个 UI 实现片段独立于整个应用程序结构。例如，这使得在项目中测试和重新排列 composable 变得更容易。</li></ul><p>牢记这些概念，Navigation 库实现了基本规则来指导您的导航架构：</p><ul><li>应用程序将用户路径表示为目标堆栈，或 <em>返回栈</em>。默认情况下，每当用户导航到新目标时，该目标都会被添加到堆栈顶部。您可以使用返回栈使导航更直接：您无需直接来回导航，而是可以从堆栈顶部弹出当前目标，并自动返回到上一个目标。</li><li>每个目标都可以关联一组 <em>深层链接</em>：当应用程序从操作系统接收到链接时，应引导至该目标的 URI 模式。</li></ul><h2 id="基本导航示例" tabindex="-1">基本导航示例 <a class="header-anchor" href="#基本导航示例" aria-label="Permalink to &quot;基本导航示例&quot;">​</a></h2><p>要使用 Navigation 库，请将以下依赖项添加到您的 <code>commonMain</code> 源代码集：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        commonMain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.androidx.navigation:navigation-compose:2.9.0-beta05&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Compose Multiplatform 1.8.2 需要 Navigation 库版本 2.9.0-beta05。</p></div><p>设置导航所需的步骤存在一定的顺序：</p><ol><li>定义您的路由。 为每个目标创建一个 <a href="https://kotlinlang.org/docs/serialization.html" target="_blank" rel="noreferrer">可序列化</a> 的对象或数据类，以保存相应目标所需的实参。</li><li>创建一个 <code>NavController</code>，它将是您的导航接口，位于 composable 层级结构中足够高的位置，以便所有 composable 都可以访问它。 <code>NavController</code> 持有应用程序的返回栈，并提供在导航图中目标之间进行过渡的方法。</li><li>设计您的导航图，选择其中一个路由作为起始目标。 为此，创建一个 <code>NavHost</code> composable，它持有导航图（描述所有可导航的目标）。</li></ol><p>以下是在应用程序中导航的基础示例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Creates routes</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Serializable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Profile</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Serializable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">object</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FriendsList</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Creates the NavController</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> navController </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rememberNavController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Creates the NavHost with the navigation graph consisting of supplied destinations</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NavHost</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(navController </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> navController, startDestination </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Profile) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    composable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Profile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ProfileScreen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* ... */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ) }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    composable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FriendsList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FriendsListScreen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">( </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* ... */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ) }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // You can add more destinations similarly</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="navigation-库的主要类" tabindex="-1">Navigation 库的主要类 <a class="header-anchor" href="#navigation-库的主要类" aria-label="Permalink to &quot;Navigation 库的主要类&quot;">​</a></h3><p>Navigation 库提供以下核心类型：</p><ul><li><code>NavController</code>。 提供核心导航功能 API：目标之间过渡、处理深层链接、管理返回栈等。 </li><li><code>NavHost</code>。Composable，根据导航图显示当前目标的内容。 每个 <code>NavHost</code> 都有一个必需的 <code>startDestination</code> 形参：当用户启动应用程序时应该看到的第一屏所对应的目标。</li><li><code>NavGraph</code>。 描述应用程序中所有可能的目标以及它们之间的连接。导航图通常定义为返回 <code>NavGraph</code> 的构建器 lambda 表达式，例如在 <code>NavHost</code> 声明中。</li></ul><p>除了核心类型功能外，Navigation 组件还提供动画和过渡、深层链接支持、类型安全、<code>ViewModel</code> 支持以及其他用于处理应用程序导航的质量改进特性。</p><h2 id="导航用例" tabindex="-1">导航用例 <a class="header-anchor" href="#导航用例" aria-label="Permalink to &quot;导航用例&quot;">​</a></h2><h3 id="前往目标" tabindex="-1">前往目标 <a class="header-anchor" href="#前往目标" aria-label="Permalink to &quot;前往目标&quot;">​</a></h3><p>要导航到目标，请调用 <code>NavController.navigate()</code> 函数。以上述示例为例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(onClick </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { navController.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">navigate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Profile) }) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Go to profile&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="向目标传递实参" tabindex="-1">向目标传递实参 <a class="header-anchor" href="#向目标传递实参" aria-label="Permalink to &quot;向目标传递实参&quot;">​</a></h3><p>在设计导航图时，可以将路由定义为带有形参的数据类，例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Serializable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Profile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>要向目标传递实参，请在导航到目标时将实参传递给相应的类构造函数。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(onClick </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { navController.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">navigate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Profile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Alice&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) }) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Go to profile&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>然后，在目标处检索数据：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">composable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Profile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; { backStackEntry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> profile: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Profile</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> backStackEntry.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toRoute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Use \`profile.name\` wherever a user&#39;s name is needed</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="导航时检索复杂数据" tabindex="-1">导航时检索复杂数据 <a class="header-anchor" href="#导航时检索复杂数据" aria-label="Permalink to &quot;导航时检索复杂数据&quot;">​</a></h3><p>在目标之间导航时，请考虑仅传递必要的最少信息。反映应用程序一般状态的文件或复杂对象应存储在数据层中：当用户到达目标时，UI 应从单一可信来源加载实际数据。</p><p>例如：</p><ul><li><strong>不要</strong>传递完整的用户配置文件；<strong>要</strong>传递用户 ID 以在目标处检索配置文件。</li><li><strong>不要</strong>传递图像对象；<strong>要</strong>传递 URI 或文件名，它们允许从源加载图像到目标。</li><li><strong>不要</strong>传递应用程序状态或 ViewModels；<strong>要</strong>仅传递目标屏幕工作所需的信息。</li></ul><p>这种方法有助于防止配置变更期间的数据丢失以及当引用的对象更新或变更时出现的任何不一致。</p><p>有关在应用程序中正确实现数据层的指南，请参见 <a href="https://developer.android.com/topic/architecture/data-layer" target="_blank" rel="noreferrer">Android 的数据层文章</a>。</p><h3 id="管理返回栈" tabindex="-1">管理返回栈 <a class="header-anchor" href="#管理返回栈" aria-label="Permalink to &quot;管理返回栈&quot;">​</a></h3><p>返回栈由 <code>NavController</code> 类控制。与任何其他栈一样，<code>NavController</code> 将新项推到栈的顶部，并从顶部弹出它们：</p><ul><li>应用程序启动时，返回栈中出现的第一个条目是在 <code>NavHost</code> 中定义的起始目标。</li><li>默认情况下，每次 <code>NavController.navigate()</code> 调用都会将给定目标推到栈的顶部。</li><li>使用返回手势、返回按钮或 <code>NavController.popBackStack()</code> 方法会将当前目标从栈中弹出，并将用户返回到上一个目标。如果用户通过深层链接来到当前目标，弹出栈会将其返回到上一个应用程序。</li><li>或者，<code>NavController.navigateUp()</code> 函数只在 <code>NavController</code> 的上下文中在应用程序内导航用户。</li></ul><p>Navigation 库在处理返回栈方面提供了一些灵活性。您可以：</p><ul><li>指定返回栈中的特定目标并导航到它，弹出栈中位于该目标顶部（在该目标之后出现）的所有内容。</li><li>导航到目标 X，同时将返回栈弹出到目标 Y（通过向 <code>.navigate()</code> 调用添加 <code>popUpTo()</code> 实参）。</li><li>处理空返回栈的弹出（这将导致用户进入空屏幕）。</li><li>为应用程序的不同部分维护多个返回栈。 例如，对于带有底部导航的应用程序，您可以为每个标签页维护单独的嵌套图，同时在标签页之间切换时保存和恢复导航状态。 或者，您可以为每个标签页创建单独的 <code>NavHost</code>，这会使设置稍微复杂一些，但在某些情况下可能更容易跟踪。</li></ul><p>有关详细信息和用例，请参见 <a href="https://developer.android.com/guide/navigation/backstack" target="_blank" rel="noreferrer">Jetpack Compose 返回栈文档</a>。</p><h3 id="深层链接" tabindex="-1">深层链接 <a class="header-anchor" href="#深层链接" aria-label="Permalink to &quot;深层链接&quot;">​</a></h3><p>Navigation 库允许您将特定 URI、操作或 MIME 类型与目标关联。这种关联称为 <em>深层链接</em>。</p><p>默认情况下，深层链接不暴露给外部应用程序：您需要为每个目标分发向操作系统注册相应的 URI 方案。</p><p>有关创建、注册和处理深层链接的详细信息，请参见 <a href="./compose-navigation-deep-links">深层链接</a>。</p><h3 id="返回手势" tabindex="-1">返回手势 <a class="header-anchor" href="#返回手势" aria-label="Permalink to &quot;返回手势&quot;">​</a></h3><p>多平台 Navigation 库将每个平台上的返回手势转换为导航到上一个屏幕（例如，在 iOS 上这是简单的向后滑动，在桌面端是 <code>&lt;shortcut&gt;Esc&lt;/shortcut&gt;</code> 键）。</p><p>默认情况下，在 iOS 上，返回手势会触发类似原生的滑动过渡到另一个屏幕的动画。如果您使用 <code>enterTransition</code> 或 <code>exitTransition</code> 实参自定义 <code>NavHost</code> 动画，默认动画将不会触发：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NavHost</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    navController </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> navController,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    startDestination </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Profile,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Explicitly specifying transitions turns off default animations</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // in favor of the selected ones </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    enterTransition </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">slideInHorizontally</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    exitTransition </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">slideOutVertically</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">. }</span></span></code></pre></div><p>在 Android 上，您可以在 <a href="https://developer.android.com/guide/navigation/custom-back/predictive-back-gesture#opt-predictive" target="_blank" rel="noreferrer">manifest 文件</a> 中启用或禁用返回手势处理程序。</p><p>在 iOS 上，处理程序默认启用。要禁用它，请在 <code>ViewController</code> 配置中设置此标志：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ComposeUIViewController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    configure </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { enableBackGesture </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="替代导航解决方案" tabindex="-1">替代导航解决方案 <a class="header-anchor" href="#替代导航解决方案" aria-label="Permalink to &quot;替代导航解决方案&quot;">​</a></h2><p>如果基于 Compose 的导航实现不适合您，可以评估以下第三方替代方案：</p><table tabindex="0"><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://voyager.adriel.cafe" target="_blank" rel="noreferrer">Voyager</a></td><td>一种实用的导航方法</td></tr><tr><td><a href="https://arkivanov.github.io/Decompose/" target="_blank" rel="noreferrer">Decompose</a></td><td>一种高级导航方法，涵盖了完整的生命周期和任何潜在的依赖注入</td></tr><tr><td><a href="https://slackhq.github.io/circuit/" target="_blank" rel="noreferrer">Circuit</a></td><td>一种 Compose 驱动的 Kotlin 应用程序架构，具有导航和高级状态管理。</td></tr><tr><td><a href="https://bumble-tech.github.io/appyx/" target="_blank" rel="noreferrer">Appyx</a></td><td>带有手势控制的模型驱动导航</td></tr><tr><td><a href="https://tlaster.github.io/PreCompose/" target="_blank" rel="noreferrer">PreCompose</a></td><td>一种受 Jetpack Lifecycle、ViewModel、LiveData 和 Navigation 启发的导航和视图模型</td></tr></tbody></table><h2 id="下一步" tabindex="-1">下一步 <a class="header-anchor" href="#下一步" aria-label="Permalink to &quot;下一步&quot;">​</a></h2><p>Compose 导航在 Android 开发者门户中有深入的介绍。 有时此文档会使用仅限 Android 的示例，但基本指导和导航原则对于多平台是相同的：</p><ul><li><a href="https://developer.android.com/develop/ui/compose/navigation" target="_blank" rel="noreferrer">使用 Compose 导航概览</a>。</li><li><a href="https://developer.android.com/guide/navigation" target="_blank" rel="noreferrer">Jetpack Navigation 入门页面</a>，其中包含有关导航图、在其中移动以及其他导航用例的子页面。</li></ul>`,63)]))}const g=s(e,[["render",l]]);export{c as __pageData,g as default};
