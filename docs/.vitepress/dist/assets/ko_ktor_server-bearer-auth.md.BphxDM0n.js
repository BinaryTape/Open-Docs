import{_ as c,C as e,c as u,o as E,j as a,G as i,ag as h,a as t,w as n}from"./chunks/framework.Bksy39di.js";const C=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ko/ktor/server-bearer-auth.md","filePath":"ko/ktor/server-bearer-auth.md","lastUpdated":1755457140000}'),g={name:"ko/ktor/server-bearer-auth.md"};function y(v,s,b,F,f,m){const p=e("show-structure"),o=e("Links"),k=e("tldr"),r=e("code-block"),l=e("TabItem"),d=e("Tabs");return E(),u("div",null,[s[5]||(s[5]=a("h1",{id:"ktor-서버의-베어러-인증",tabindex:"-1"},[t("Ktor 서버의 베어러 인증 "),a("a",{class:"header-anchor",href:"#ktor-서버의-베어러-인증","aria-label":'Permalink to "Ktor 서버의 베어러 인증"'},"​")],-1)),i(p,{for:"chapter",depth:"2"}),i(k,null,{default:n(()=>[s[3]||(s[3]=a("p",null,[a("b",null,"필요한 의존성"),t(": "),a("code",null,"io.ktor:ktor-server-auth")],-1)),s[4]||(s[4]=a("p",null,[a("b",null,"코드 예시"),t(": "),a("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/auth-bearer"}," auth-bearer ")],-1)),a("p",null,[a("b",null,[i(o,{href:"/ktor/server-native",summary:"Ktor는 Kotlin/Native를 지원하며 추가 런타임이나 가상 머신 없이 서버를 실행할 수 있습니다."},{default:n(()=>s[0]||(s[0]=[t("네이티브 서버")])),_:1}),s[1]||(s[1]=t(" 지원"))]),s[2]||(s[2]=t(": ✅ "))])]),_:1}),s[6]||(s[6]=h('<p>베어러(Bearer) 인증 스키마는 접근 제어 및 인증에 사용되는 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication" target="_blank" rel="noreferrer">HTTP 프레임워크</a>의 일부입니다. 이 스키마는 베어러 토큰이라고 불리는 보안 토큰을 포함합니다. 베어러 인증 스키마는 <a href="./server-oauth">OAuth</a> 또는 <a href="./server-jwt">JWT</a>의 일부로 사용되지만, 베어러 토큰을 인증하기 위한 사용자 정의 로직을 제공할 수도 있습니다.</p><p>Ktor의 인증에 대한 일반 정보는 <a href="./server-auth">Ktor 서버의 인증 및 권한 부여</a> 섹션에서 확인할 수 있습니다.</p><blockquote><p>베어러 인증은 <a href="./server-ssl">HTTPS/TLS</a>를 통해서만 사용해야 합니다.</p></blockquote><h2 id="add_dependencies" tabindex="-1">의존성 추가 <a class="header-anchor" href="#add_dependencies" aria-label="Permalink to &quot;의존성 추가 {id=&quot;add_dependencies&quot;}&quot;">​</a></h2><p><code>bearer</code> 인증을 활성화하려면 빌드 스크립트에 <code>ktor-server-auth</code> 아티팩트를 포함해야 합니다.</p>',5)),i(d,{group:"languages"},{default:n(()=>[i(l,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[i(r,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-server-auth:$ktor_version")'})]),_:1}),i(l,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[i(r,{lang:"Groovy",code:'            implementation "io.ktor:ktor-server-auth:$ktor_version"'})]),_:1}),i(l,{title:"Maven","group-key":"maven"},{default:n(()=>[i(r,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-server-auth-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),s[7]||(s[7]=h(`<h2 id="flow" tabindex="-1">베어러 인증 흐름 <a class="header-anchor" href="#flow" aria-label="Permalink to &quot;베어러 인증 흐름 {id=&quot;flow&quot;}&quot;">​</a></h2><p>일반적으로 베어러 인증 흐름은 다음과 같습니다.</p><ol><li>사용자가 성공적으로 인증 및 접근 권한을 부여한 후, 서버는 클라이언트에게 접근 토큰을 반환합니다.</li><li>클라이언트는 <code>Bearer</code> 스키마를 사용하여 <code>Authorization</code> 헤더에 토큰을 전달하여 보호된 리소스에 요청을 할 수 있습니다.<div class="language-HTTP vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">HTTP</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GET</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> http://localhost:8080/</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Authorization</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Bearer abc123</span></span></code></pre></div></li><li>서버는 요청을 수신하고 토큰을 <a href="#configure">검증</a>합니다.</li><li>검증 후, 서버는 보호된 리소스의 내용으로 응답합니다.</li></ol><h2 id="install" tabindex="-1">베어러 인증 설치 <a class="header-anchor" href="#install" aria-label="Permalink to &quot;베어러 인증 설치 {id=&quot;install&quot;}&quot;">​</a></h2><p><code>bearer</code> 인증 프로바이더를 설치하려면 <code>install</code> 블록 내에서 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/bearer.html" target="_blank" rel="noreferrer">bearer</a> 함수를 호출합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.application.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.auth.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Authentication) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    bearer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Configure bearer authentication</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>선택적으로 <a href="#authenticate-route">지정된 라우트를 인증</a>하는 데 사용될 수 있는 <a href="./server-auth#provider-name">프로바이더 이름</a>을 지정할 수 있습니다.</p><h2 id="configure" tabindex="-1">베어러 인증 설정 <a class="header-anchor" href="#configure" aria-label="Permalink to &quot;베어러 인증 설정 {id=&quot;configure&quot;}&quot;">​</a></h2><p>Ktor에서 다양한 인증 프로바이더를 설정하는 방법에 대한 일반적인 아이디어를 얻으려면 <a href="./server-auth#configure">인증 설정</a>을 참조하세요. 이 섹션에서는 <code>bearer</code> 인증 프로바이더의 설정 세부 사항을 살펴보겠습니다.</p><h3 id="configure-provider" tabindex="-1">1단계: 베어러 프로바이더 설정 <a class="header-anchor" href="#configure-provider" aria-label="Permalink to &quot;1단계: 베어러 프로바이더 설정 {id=&quot;configure-provider&quot;}&quot;">​</a></h3><p><code>bearer</code> 인증 프로바이더는 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-bearer-authentication-provider/-config/index.html" target="_blank" rel="noreferrer">BearerAuthenticationProvider.Configuration</a> 클래스를 통해 설정을 노출합니다. 아래 예제에서는 다음 설정이 지정되어 있습니다.</p><ul><li><code>realm</code> 속성은 <code>WWW-Authenticate</code> 헤더에 전달될 realm을 설정합니다.</li><li><code>authenticate</code> 함수는 클라이언트가 보낸 토큰을 확인하고, 인증 성공 시 <code>UserIdPrincipal</code>을 반환하거나 인증 실패 시 <code>null</code>을 반환합니다.</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Authentication) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    bearer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-bearer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        realm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Access to the &#39;/&#39; path&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        authenticate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { tokenCredential </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (tokenCredential.token </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;abc123&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                UserIdPrincipal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jetbrains&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="authenticate-route" tabindex="-1">2단계: 특정 리소스 보호 <a class="header-anchor" href="#authenticate-route" aria-label="Permalink to &quot;2단계: 특정 리소스 보호 {id=&quot;authenticate-route&quot;}&quot;">​</a></h3><p><code>bearer</code> 프로바이더를 설정한 후, <strong><a href="./server-auth#authenticate-route">authenticate</a></strong> 함수를 사용하여 애플리케이션의 특정 리소스를 보호할 수 있습니다. 인증 성공 시, 라우트 핸들러 내에서 <code>call.principal</code> 함수를 사용하여 인증된 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-user-id-principal/index.html" target="_blank" rel="noreferrer">UserIdPrincipal</a>을 검색하고 인증된 사용자의 이름을 가져올 수 있습니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    authenticate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-bearer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, \${call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">principal</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserIdPrincipal</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&gt;()?.name}!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,16))])}const q=c(g,[["render",y]]);export{C as __pageData,q as default};
