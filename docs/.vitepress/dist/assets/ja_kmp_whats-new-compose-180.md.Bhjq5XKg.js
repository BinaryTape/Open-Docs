import{_ as n}from"./chunks/compose-180-LineHeightStyle.DsnceP5I.js";import{_ as o,C as r,c as p,o as h,ag as e,G as t,j as i,a as l}from"./chunks/framework.Bksy39di.js";const b=JSON.parse('{"title":"Compose Multiplatform 1.8.2の新機能","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kmp/whats-new-compose-180.md","filePath":"ja/kmp/whats-new-compose-180.md","lastUpdated":1755516278000}'),d={name:"ja/kmp/whats-new-compose-180.md"};function k(c,a,g,E,m,u){const s=r("secondary-label");return h(),p("div",null,[a[0]||(a[0]=e(`<h1 id="compose-multiplatform-1-8-2の新機能" tabindex="-1">Compose Multiplatform 1.8.2の新機能 <a class="header-anchor" href="#compose-multiplatform-1-8-2の新機能" aria-label="Permalink to &quot;Compose Multiplatform 1.8.2の新機能&quot;">​</a></h1><p>この機能リリースにおける主なハイライトは以下の通りです。</p><ul><li><a href="#variable-fonts">可変フォント</a></li><li><a href="#drag-and-drop">iOSでのドラッグ＆ドロップ</a></li><li><a href="#deep-linking">iOSでのディープリンク</a></li><li><a href="#accessibility-support-improvements">iOSでのアクセシビリティサポートの改善</a></li><li><a href="#preloading-of-resources">Webターゲット向けリソースのプリロード</a></li><li><a href="#browser-controls-supported-in-the-navigation-library">ブラウザナビゲーションコントロールとの統合</a></li></ul><p>このリリースの変更点の全リストは<a href="https://github.com/JetBrains/compose-multiplatform/releases/tag/v1.8.0" target="_blank" rel="noreferrer">GitHub</a>で確認できます。</p><h2 id="依存関係" tabindex="-1">依存関係 <a class="header-anchor" href="#依存関係" aria-label="Permalink to &quot;依存関係&quot;">​</a></h2><ul><li>Gradleプラグイン <code>org.jetbrains.compose</code> バージョン1.8.2。Jetpack Composeライブラリに基づいています。 <ul><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-runtime#1.8.2" target="_blank" rel="noreferrer">Runtime 1.8.2</a></li><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-ui#1.8.2" target="_blank" rel="noreferrer">UI 1.8.2</a></li><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-foundation#1.8.2" target="_blank" rel="noreferrer">Foundation 1.8.2</a></li><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-material#1.8.2" target="_blank" rel="noreferrer">Material 1.8.2</a></li><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-material3#1.3.2" target="_blank" rel="noreferrer">Material3 1.3.2</a></li></ul></li><li>Lifecycleライブラリ <code>org.jetbrains.androidx.lifecycle:lifecycle-*:2.9.0</code>。 <a href="https://developer.android.com/jetpack/androidx/releases/lifecycle#2.9.0" target="_blank" rel="noreferrer">Jetpack Lifecycle 2.9.0</a>に基づいています。</li><li>Navigationライブラリ <code>org.jetbrains.androidx.navigation:navigation-*:2.9.0-beta03</code>。 <a href="https://developer.android.com/jetpack/androidx/releases/navigation#2.9.0" target="_blank" rel="noreferrer">Jetpack Navigation 2.9.0</a>に基づいています。</li><li>Material3 Adaptiveライブラリ <code>org.jetbrains.compose.material3.adaptive:adaptive*:1.2.0-alpha03</code>。 <a href="https://developer.android.com/jetpack/androidx/releases/compose-material3-adaptive#1.1.0" target="_blank" rel="noreferrer">Jetpack Material3 Adaptive 1.1.0</a>に基づいています。</li><li>Savedstateライブラリ <code>org.jetbrains.androidx.savedstate:savedstate:1.3.1</code>。 <a href="https://developer.android.com/jetpack/androidx/releases/savedstate#1.3.0" target="_blank" rel="noreferrer">Jetpack Savedstate 1.3.0</a>に基づいています。</li><li>WindowManager Coreライブラリ <code>org.jetbrains.androidx.window:window-core:1.4.0-alpha07</code>。 <a href="https://developer.android.com/jetpack/androidx/releases/window#1.4.0-alpha04" target="_blank" rel="noreferrer">Jetpack WindowManager 1.4.0-alpha04</a>に基づいています。</li></ul><h2 id="破壊的変更" tabindex="-1">破壊的変更 <a class="header-anchor" href="#破壊的変更" aria-label="Permalink to &quot;破壊的変更&quot;">​</a></h2><h3 id="compose-multiplatformのk2コンパイラへの完全移行" tabindex="-1">Compose MultiplatformのK2コンパイラへの完全移行 <a class="header-anchor" href="#compose-multiplatformのk2コンパイラへの完全移行" aria-label="Permalink to &quot;Compose MultiplatformのK2コンパイラへの完全移行&quot;">​</a></h3><p>このリリースにより、Compose MultiplatformのコードベースはK2コンパイラに完全に移行されました。1.8.0以降、Compose Multiplatformに依存するプロジェクトによって生成されたネイティブおよびWebのklibは、Kotlin 2.1.0以降を使用している場合にのみ利用できます。</p><p>ComposeコンパイラのGradleプラグインにおける根本的な変更に加えて、これがプロジェクトにどのような影響を与えるかを以下に示します。</p><ul><li>Compose Multiplatformに依存するライブラリを使用するアプリの場合： プロジェクトをKotlin 2.1.20に更新し、依存関係をCompose Multiplatform 1.8.0およびKotlin 2.1.xに対してコンパイルされたバージョンに更新することを推奨します。</li><li>Compose Multiplatformに依存するライブラリの場合： プロジェクトをKotlin 2.1.xおよびCompose 1.8.0に更新し、その後ライブラリを再コンパイルして新しいバージョンを公開する必要があります。</li></ul><p>Compose Multiplatform 1.8.0へのアップグレードで互換性の問題が発生した場合は、<a href="https://youtrack.jetbrains.com/newIssue?project=CMP" target="_blank" rel="noreferrer">YouTrack</a>に課題を提出してお知らせください。</p><h3 id="material-icons-core-への暗黙的な依存関係の削除" tabindex="-1"><code>material-icons-core</code> への暗黙的な依存関係の削除 <a class="header-anchor" href="#material-icons-core-への暗黙的な依存関係の削除" aria-label="Permalink to &quot;\`material-icons-core\` への暗黙的な依存関係の削除&quot;">​</a></h3><p>Compose Multiplatform 1.8.2では、<a href="https://android.googlesource.com/platform/frameworks/support/+/1d1abef790da93325a83fe19b50ccdec06be6956" target="_blank" rel="noreferrer">Materialの変更</a>が取り入れられました。これにより、<code>material-icons-core</code>への推移的な依存関係がなくなりました。これは、<a href="#full-migration-of-compose-multiplatform-to-the-k2-compiler">K1でビルドされた依存関係からの移行</a>に沿ったものです。</p><p>プロジェクトで<code>material-icons-core</code>ライブラリを引き続き使用する必要がある場合は、依存関係を<code>build.gradle.kts</code>に明示的に追加してください。例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.compose.material:material-icons-core:1.7.3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="navigationにおけるbundleからsavedstateへの移行" tabindex="-1">NavigationにおけるBundleからSavedStateへの移行 <a class="header-anchor" href="#navigationにおけるbundleからsavedstateへの移行" aria-label="Permalink to &quot;NavigationにおけるBundleからSavedStateへの移行&quot;">​</a></h3><p>Compose Multiplatform 1.8.2のNavigationは、Android Navigationコンポーネントと共に、UI状態を保存するために<code>SavedState</code>クラスを使用するように移行しています。これにより、ナビゲーショングラフでデスティネーションを宣言する際のステートデータへのアクセスパターンが変更されます。<a href="./compose-navigation-routing">Navigationライブラリ</a>の2.9.*バージョンにアップグレードする際は、該当するコードを<code>SavedState</code>のアクセサーを使用するように更新してください。</p><blockquote style=""><p>より堅牢なアーキテクチャのためには、文字列ルートを避け、<a href="https://developer.android.com/guide/navigation/design/type-safety" target="_blank" rel="noreferrer">型安全なナビゲーションのアプローチ</a>を使用してください。</p></blockquote><p>変更前:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">composable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Destinations.Followers.route) { navBackStackEntry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> navBackStackEntry.arguments?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;userid&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> page </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> navBackStackEntry.arguments?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;page&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (uId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> page </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        FollowersMainComposable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(navController, accountId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uId, page </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> page)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Compose Multiplatform 1.8.2以降:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">composable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Destinations.Followers.route) { navBackStackEntry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> navBackStackEntry.arguments?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getStringOrNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;userid&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> page </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> navBackStackEntry.arguments?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getStringOrNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;page&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (uId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> page </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        FollowersMainComposable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(navController, accountId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uId, page </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> page)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="iosにおけるcomposeuiviewcontrollerdelegateの非推奨化" tabindex="-1">iOSにおける<code>ComposeUIViewControllerDelegate</code>の非推奨化 <a class="header-anchor" href="#iosにおけるcomposeuiviewcontrollerdelegateの非推奨化" aria-label="Permalink to &quot;iOSにおける\`ComposeUIViewControllerDelegate\`の非推奨化&quot;">​</a></h3><p><code>ComposeUIViewControllerDelegate</code> APIは、親ビューコントローラを優先して非推奨になりました。Compose Multiplatform 1.8.2で非推奨のAPIを使用すると、親ビューコントローラ経由で<code>UIViewController</code>クラスのメソッドをオーバーライドする必要があることを示す非推奨エラーが発生します。</p><p>子ビューコントローラと親ビューコントローラの関係については、Appleの開発者向け<a href="https://developer.apple.com/documentation/uikit/uiviewcontroller" target="_blank" rel="noreferrer">ドキュメント</a>で詳細をご確認ください。</p><h3 id="iosにおける廃止されたplatformlayersオプションの削除" tabindex="-1">iOSにおける廃止された<code>platformLayers</code>オプションの削除 <a class="header-anchor" href="#iosにおける廃止されたplatformlayersオプションの削除" aria-label="Permalink to &quot;iOSにおける廃止された\`platformLayers\`オプションの削除&quot;">​</a></h3><p><code>platformLayers</code>実験的オプションは、代替レイヤーモードを有効にし、ポップアップとダイアログを親コンテナの境界外に描画できるようにするために、<a href="./whats-new-compose-160#separate-platform-views-for-popups-dialogs-and-dropdowns-ios-desktop">1.6.0で導入されました</a>。</p><p>このモードは現在iOSのデフォルトの動作となり、これを有効にするオプションは廃止されたため削除されました。</p><h3 id="テストにおける破壊的変更" tabindex="-1">テストにおける破壊的変更 <a class="header-anchor" href="#テストにおける破壊的変更" aria-label="Permalink to &quot;テストにおける破壊的変更&quot;">​</a></h3><h4 id="テストにおけるコルーチンの遅延の新しい扱い方" tabindex="-1">テストにおけるコルーチンの遅延の新しい扱い方 <a class="header-anchor" href="#テストにおけるコルーチンの遅延の新しい扱い方" aria-label="Permalink to &quot;テストにおけるコルーチンの遅延の新しい扱い方&quot;">​</a></h4><p>以前は、Compose Multiplatformのテストでは、<code>delay()</code>呼び出しを伴う副作用はアイドル状態と見なされませんでした。そのため、例えば以下のテストは無限にハングアップしていました。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> loopInLaunchedEffectTest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> runComposeUiTest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    setContent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        LaunchedEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Unit) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                delay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Tick&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>コルーチンがコンポジションスコープで起動された後に<code>delay()</code>関数を呼び出す場合、<code>waitForIdle()</code>、<code>awaitIdle()</code>、および<code>runOnIdle()</code>関数はComposeがアイドル状態であると見なすようになりました。この変更により上記のハングアップするテストは修正されますが、<code>delay()</code>を持つコルーチンを実行するために<code>waitForIdle()</code>、<code>awaitIdle()</code>、および<code>runOnIdle()</code>に依存しているテストは影響を受けます。</p><p>これらのケースで同じ結果を得るには、時間を人工的に進めます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> updateText </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mutableStateOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mutableStateOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setContent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    LaunchedEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(updateText) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (updateText) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            delay</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">updateText </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">waitForIdle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Since waitForIdle() no longer waits for the delayed LaunchedEffect() to complete,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// the test needs to advance time to make the following assertion correct:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mainClock.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">advanceTimeBy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1001</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">assertEquals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, text)</span></span></code></pre></div><p>すでに<code>mainClock.advanceTimeBy()</code>呼び出しを使用してテストクロックを進めているテストは、再コンポジション、レイアウト、描画、およびエフェクトに関して異なる動作をする可能性があります。</p><h4 id="runonidle-の実装がandroidと同期" tabindex="-1"><code>runOnIdle()</code>の実装がAndroidと同期 <a class="header-anchor" href="#runonidle-の実装がandroidと同期" aria-label="Permalink to &quot;\`runOnIdle()\`の実装がAndroidと同期&quot;">​</a></h4><p>Compose Multiplatformの<code>runOnIdle()</code>テスト関数の実装をAndroidの動作に合わせるため、以下の変更を導入しました。</p><ul><li><code>runOnIdle()</code>は、その<code>action</code>をUIスレッドで実行するようになりました。</li><li><code>runOnIdle()</code>は、<code>action</code>の実行後に<code>waitForIdle()</code>を呼び出さなくなりました。</li></ul><p><code>runOnIdle()</code>アクションの後の追加の<code>waitForIdle()</code>呼び出しにテストが依存している場合は、Compose Multiplatform 1.8.2向けに更新する際に、必要に応じてテストにその呼び出しを追加してください。</p><h4 id="テストにおける時間の進行がレンダリングから分離" tabindex="-1">テストにおける時間の進行がレンダリングから分離 <a class="header-anchor" href="#テストにおける時間の進行がレンダリングから分離" aria-label="Permalink to &quot;テストにおける時間の進行がレンダリングから分離&quot;">​</a></h4><p>Compose Multiplatform 1.8.2では、<code>mainClock.advanceTimeBy()</code>関数は、次のフレームのレンダリングポイントを超えて時間が進められない限り（仮想テストフレームは16ミリ秒ごとにレンダリングされます）、再コンポジション、レイアウト、または描画を引き起こさなくなりました。</p><p>これにより、すべての<code>mainClock.advanceTimeBy()</code>呼び出しによってレンダリングがトリガーされることに依存しているテストが影響を受ける可能性があります。詳細については、<a href="https://github.com/JetBrains/compose-multiplatform-core/pull/1618" target="_blank" rel="noreferrer">PRの説明</a>を参照してください。</p><h2 id="クロスプラットフォーム" tabindex="-1">クロスプラットフォーム <a class="header-anchor" href="#クロスプラットフォーム" aria-label="Permalink to &quot;クロスプラットフォーム&quot;">​</a></h2><h3 id="可変フォント" tabindex="-1">可変フォント <a class="header-anchor" href="#可変フォント" aria-label="Permalink to &quot;可変フォント&quot;">​</a></h3><p>Compose Multiplatform 1.8.2は、すべてのプラットフォームで可変フォントをサポートします。可変フォントを使用すると、ウェイト、幅、スラント、イタリック、カスタム軸、タイポグラフィックカラーによる視覚的ウェイト、特定のテキストサイズへの適応など、すべてのスタイル設定を含む単一のフォントファイルを保持できます。</p><p>詳細については、<a href="https://developer.android.com/develop/ui/compose/text/fonts#variable-fonts" target="_blank" rel="noreferrer">Jetpack Composeドキュメント</a>を参照してください。</p><h3 id="skiaがマイルストーン132に更新" tabindex="-1">Skiaがマイルストーン132に更新 <a class="header-anchor" href="#skiaがマイルストーン132に更新" aria-label="Permalink to &quot;Skiaがマイルストーン132に更新&quot;">​</a></h3><p>Skikoを介してCompose Multiplatformで使用されるSkiaのバージョンがマイルストーン132に更新されました。</p><p>以前使用されていたSkiaのバージョンはマイルストーン126でした。これらのバージョン間の変更点は、<a href="./https://skia.googlesource.com/skia/+/main/RELEASE_NOTES#milestone-132">リリースノート</a>で確認できます。</p><h3 id="新しいclipboardインターフェース" tabindex="-1">新しいClipboardインターフェース <a class="header-anchor" href="#新しいclipboardインターフェース" aria-label="Permalink to &quot;新しいClipboardインターフェース&quot;">​</a></h3><p>Compose Multiplatformは、Jetpack Composeの新しい<code>Clipboard</code>インターフェースを採用しました。</p><p>以前使用されていた<code>ClipboardManager</code>インターフェースは、<a href="https://developer.mozilla.org/en-US/docs/Web/API/Clipboard_API" target="_blank" rel="noreferrer">Web上のClipboard API</a>の非同期性のためWebターゲットでアクセスできませんでしたが、<code>Clipboard</code>に置き換えられて非推奨になりました。新しいインターフェースは<code>suspend</code>関数をサポートし、Webを含むすべてのターゲットと互換性があります。</p><p>共通コードからのクリップボード操作は、現在のAPI設計によって制限されています。詳細については、<a href="https://youtrack.jetbrains.com/issue/CMP-7624" target="_blank" rel="noreferrer">CMP-7624</a>を参照してください。</p><h3 id="行の高さの配置" tabindex="-1">行の高さの配置 <a class="header-anchor" href="#行の高さの配置" aria-label="Permalink to &quot;行の高さの配置&quot;">​</a></h3><p>以前はCompose MultiplatformでAndroidのみでサポートされていた行の高さの配置に関する共通APIが、すべてのプラットフォームでサポートされるようになりました。<code>LineHeightStyle.Alignment</code>を使用すると、行の高さによって提供されるスペース内でテキスト行がどのように配置されるかを設定できます。テキスト行は、予約されたスペースの下部、中央、または上部に配置することも、そのアセント値とディセント値に基づいて比例的に調整することもできます。</p><img src="`+n+'" alt="Line-height alignment" width="508"><p>Material3では、行の高さの配置のデフォルト値は<code>Center</code>であり、特に指定がない限り、すべてのプラットフォームのMaterial3コンポーネントで<code>lineHeight</code>を持つテキストに中央揃えが適用されることに注意してください。</p><h2 id="ios" tabindex="-1">iOS <a class="header-anchor" href="#ios" aria-label="Permalink to &quot;iOS&quot;">​</a></h2><h3 id="ディープリンク" tabindex="-1">ディープリンク <a class="header-anchor" href="#ディープリンク" aria-label="Permalink to &quot;ディープリンク&quot;">​</a></h3><p>Compose Multiplatform 1.8.2と<a href="./compose-navigation-routing">org.jetbrains.androidx.navigation.navigation-compose</a> 2.9.0-beta05を組み合わせることで、通常のComposeの方法でiOSにディープリンクを実装できます。つまり、ディープリンクをデスティネーションに割り当て、<code>NavController</code>を使用してそれらにナビゲートします。</p><p>共通コードにディープリンクを導入する方法については、<a href="./compose-navigation-deep-links">ディープリンク</a>を参照してください。</p><h3 id="xcframeworks内のcomposeリソース" tabindex="-1">XCFrameworks内のComposeリソース <a class="header-anchor" href="#xcframeworks内のcomposeリソース" aria-label="Permalink to &quot;XCFrameworks内のComposeリソース&quot;">​</a></h3><p>Compose Multiplatformは、生成されたXCFrameworks内にリソースを直接埋め込むようになりました。リソースを持つComposeライブラリを標準のXCFrameworksとしてビルドおよび使用できます。</p><p>この機能にはKotlin Gradleプラグインバージョン2.2以上が必要です。</p><h3 id="アクセシビリティサポートの改善" tabindex="-1">アクセシビリティサポートの改善 <a class="header-anchor" href="#アクセシビリティサポートの改善" aria-label="Permalink to &quot;アクセシビリティサポートの改善&quot;">​</a></h3><h4 id="右から左への言語のサポート" tabindex="-1">右から左への言語のサポート <a class="header-anchor" href="#右から左への言語のサポート" aria-label="Permalink to &quot;右から左への言語のサポート&quot;">​</a></h4><p>Compose Multiplatform 1.8.2は、ジェスチャーに対する適切なテキスト方向処理を含む、右から左への言語のアクセシビリティサポートを導入しました。</p><p>RTLサポートの詳細については、<a href="./compose-rtl">右から左への言語</a>を参照してください。</p><h4 id="スクロール可能なリストのアクセシビリティ" tabindex="-1">スクロール可能なリストのアクセシビリティ <a class="header-anchor" href="#スクロール可能なリストのアクセシビリティ" aria-label="Permalink to &quot;スクロール可能なリストのアクセシビリティ&quot;">​</a></h4><p>このバージョンでは、スクロール境界と要素位置の計算のパフォーマンスと精度が向上しました。ノッチや画面の端などのセーフエリアを考慮することで、隙間や余白付近でのスクロールに対する正確なアクセシビリティプロパティを保証します。</p><p>また、スクロール状態のアナウンスのサポートも導入しました。VoiceOverが有効になっている場合、3本指スクロールジェスチャーを実行するとリストの状態更新が聞こえます。アナウンスには以下が含まれます。</p><ul><li>リストの先頭にいるときの「最初のページ」。</li><li>前方にスクロールするときの「次のページ」。</li><li>後方にスクロールするときの「前のページ」。</li><li>最後に到達したときの「最後のページ」。</li></ul><p>これらのアナウンスのローカライズ版も提供されており、VoiceOverが選択した言語でそれらを読み上げることができます。</p><h4 id="コンテナビューのアクセシビリティ" tabindex="-1">コンテナビューのアクセシビリティ <a class="header-anchor" href="#コンテナビューのアクセシビリティ" aria-label="Permalink to &quot;コンテナビューのアクセシビリティ&quot;">​</a></h4><p>Compose Multiplatform 1.8.2以降、コンテナのトラバーサルセマンティックプロパティを定義して、複雑なビューをスクロールしたりスワイプしたりする際の正しい読み上げ順序を保証できるようになりました。</p><p>スクリーンリーダー向けに要素を適切にソートすることに加えて、トラバーサルプロパティのサポートにより、スワイプアップまたはスワイプダウンのアクセシビリティジェスチャーを使用して異なるトラバーサルグループ間を移動できるようになります。コンテナのアクセシブルナビゲーションモードに切り替えるには、VoiceOverがアクティブな状態で画面上で2本指を回転させます。</p><p>トラバーサルセマンティックプロパティの詳細については、<a href="./compose-accessibility#traversal-order">アクセシビリティ</a>セクションを参照してください。</p><h4 id="アクセシブルなテキスト入力" tabindex="-1">アクセシブルなテキスト入力 <a class="header-anchor" href="#アクセシブルなテキスト入力" aria-label="Permalink to &quot;アクセシブルなテキスト入力&quot;">​</a></h4><p>Compose Multiplatform 1.8.2では、テキストフィールドのアクセシビリティ特性のサポートが導入されました。テキスト入力フィールドがフォーカスされると、編集可能としてマークされるようになり、適切なアクセシビリティ状態の表現が保証されます。</p><p>UIテストでアクセシブルなテキスト入力も使用できるようになりました。</p><h4 id="トラックパッドとキーボードによる制御のサポート" tabindex="-1">トラックパッドとキーボードによる制御のサポート <a class="header-anchor" href="#トラックパッドとキーボードによる制御のサポート" aria-label="Permalink to &quot;トラックパッドとキーボードによる制御のサポート&quot;">​</a></h4><p>iOS向けCompose Multiplatformは、デバイスを制御するための2つの追加入力方法をサポートするようになりました。タッチスクリーンに依存する代わりに、マウスやトラックパッドを使用するためにAssistiveTouchを有効にするか、キーボードを使用するためにフルキーボードアクセスを有効にすることができます。</p><ul><li>AssistiveTouch（<strong>設定</strong> | <strong>アクセシビリティ</strong> | <strong>タッチ</strong> | <strong>AssistiveTouch</strong>）を使用すると、接続されたマウスやトラックパッドからのポインタでiPhoneやiPadを制御できます。ポインタを使用して画面上のアイコンをクリックしたり、AssistiveTouchメニューを移動したり、画面上のキーボードを使用して入力したりできます。</li><li>フルキーボードアクセス（<strong>設定</strong> | <strong>アクセシビリティ</strong> | <strong>キーボード</strong> | <strong>フルキーボードアクセス</strong>）は、接続されたキーボードでのデバイス制御を可能にします。<strong>Tab</strong>などのキーでナビゲートしたり、<strong>Space</strong>を使用して項目をアクティブにしたりできます。</li></ul><h4 id="アクセシビリティツリーのオンデマンドロード" tabindex="-1">アクセシビリティツリーのオンデマンドロード <a class="header-anchor" href="#アクセシビリティツリーのオンデマンドロード" aria-label="Permalink to &quot;アクセシビリティツリーのオンデマンドロード&quot;">​</a></h4><p>ComposeセマンティックツリーとiOSアクセシビリティツリーを同期する特定のモードを設定する代わりに、Compose Multiplatformがこのプロセスを遅延的に処理するようになりました。ツリーは、iOSアクセシビリティエンジンからの最初のリクエスト後に完全にロードされ、スクリーンリーダーがそれとのインタラクションを停止すると破棄されます。</p><p>これにより、iOSのVoice Control、VoiceOver、およびアクセシビリティツリーに依存するその他のアクセシビリティツールを完全にサポートできます。</p><p><a href="./compose-ios-accessibility#choose-the-tree-synchronization-option">アクセシビリティツリーの同期を設定するために使用されていた</a><code>AccessibilitySyncOptions</code>クラスは、もはや不要になったため削除されました。</p><h4 id="アクセシビリティプロパティ計算精度の向上" tabindex="-1">アクセシビリティプロパティ計算精度の向上 <a class="header-anchor" href="#アクセシビリティプロパティ計算精度の向上" aria-label="Permalink to &quot;アクセシビリティプロパティ計算精度の向上&quot;">​</a></h4><p>Compose Multiplatformコンポーネントのアクセシビリティプロパティを、UIKitコンポーネントの期待される動作に一致するように更新しました。UI要素は広範なアクセシビリティデータを提供するようになり、アルファ値が0の透明なコンポーネントはアクセシビリティセマンティクスを提供しなくなりました。</p><p>セマンティクスを調整することで、<code>DropDown</code>要素のヒットボックスの欠落、表示されるテキストとアクセシビリティラベルの不一致、ラジオボタンの不正な状態など、アクセシビリティプロパティの誤った計算に関連するいくつかの問題を修正することもできました。</p><h3 id="ドラッグ-ドロップ" tabindex="-1">ドラッグ＆ドロップ <a class="header-anchor" href="#ドラッグ-ドロップ" aria-label="Permalink to &quot;ドラッグ＆ドロップ&quot;">​</a></h3>',93)),t(s,{ref:"Experimental"},null,512),a[1]||(a[1]=e('<p>iOS向けCompose Multiplatformは、ドラッグ＆ドロップ機能のサポートを導入し、Composeアプリケーションへのコンテンツのドラッグインまたはドラッグアウトを可能にします（デモビデオについてはプルリクエスト<a href="https://github.com/JetBrains/compose-multiplatform-core/pull/1690" target="_blank" rel="noreferrer">1690</a>を参照）。ドラッグ可能なコンテンツとドロップターゲットを定義するには、<code>dragAndDropSource</code>と<code>dragAndDropTarget</code>修飾子を使用します。</p><p>iOSでは、ドラッグ＆ドロップセッションデータは<a href="https://developer.apple.com/documentation/uikit/uidragitem" target="_blank" rel="noreferrer"><code>UIDragItem</code></a>によって表現されます。このオブジェクトには、プロセス間データ転送に関する情報と、アプリ内使用のためのオプションのローカルオブジェクトが含まれます。たとえば、<code>DragAndDropTransferData(listOf(UIDragItem.fromString(text)))</code>を使用してテキストをドラッグできます。ここで<code>UIDragItem.fromString(text)</code>は、ドラッグ＆ドロップ操作に適した形式にテキストをエンコードします。現在、<code>String</code>と<code>NSObject</code>タイプのみがサポートされています。</p><p>一般的な使用例については、Jetpack Composeドキュメントの<a href="https://developer.android.com/develop/ui/compose/touch-input/user-interactions/drag-and-drop" target="_blank" rel="noreferrer">専用の記事</a>を参照してください。</p><h3 id="スクロール可能な相互運用ビューのタッチ処理の改善" tabindex="-1">スクロール可能な相互運用ビューのタッチ処理の改善 <a class="header-anchor" href="#スクロール可能な相互運用ビューのタッチ処理の改善" aria-label="Permalink to &quot;スクロール可能な相互運用ビューのタッチ処理の改善&quot;">​</a></h3><p>このリリースでは：</p><ul><li>モーダルな<code>UIViewController</code>として表示されるスクロール不可能なコンテンツを持つComposeビューは、スワイプダウンジェスチャーで閉じることができます。</li><li>ネストされたスクロール可能なビューは、一般的な<a href="./compose-ios-touch">相互運用タッチフレームワーク</a>内で正しく機能します。スクロール可能なComposeビュー内でネイティブコンテンツをスクロールする場合、またはスクロール可能なネイティブビュー内でComposeコンテンツをスクロールする場合、UIはiOSロジックに厳密に従って、曖昧なタッチシーケンスを解決します。</li></ul><h3 id="オプトインによる並行レンダリング" tabindex="-1">オプトインによる並行レンダリング <a class="header-anchor" href="#オプトインによる並行レンダリング" aria-label="Permalink to &quot;オプトインによる並行レンダリング&quot;">​</a></h3>',7)),t(s,{ref:"Experimental"},null,512),a[2]||(a[2]=e(`<p>iOS向けCompose Multiplatformは、レンダリングタスクを専用のレンダースレッドにオフロードすることをサポートするようになりました。並行レンダリングは、UIKitの相互運用がないシナリオでパフォーマンスを向上させる可能性があります。</p><p><code>ComposeUIViewControllerConfiguration</code>クラスの<code>useSeparateRenderThreadWhenPossible</code>フラグを有効にするか、<code>ComposeUIViewController</code>設定ブロック内で<code>parallelRendering</code>プロパティを直接有効にすることで、レンダリングコマンドを別のレンダースレッドでエンコードするようにオプトインできます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalComposeUiApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(varvar args: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    UIKitMain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        ComposeUIViewController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(configure </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { parallelRendering </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="web" tabindex="-1">Web <a class="header-anchor" href="#web" aria-label="Permalink to &quot;Web&quot;">​</a></h2><h3 id="navigationライブラリでブラウザコントロールをサポート" tabindex="-1">Navigationライブラリでブラウザコントロールをサポート <a class="header-anchor" href="#navigationライブラリでブラウザコントロールをサポート" aria-label="Permalink to &quot;Navigationライブラリでブラウザコントロールをサポート&quot;">​</a></h3><p>Compose MultiplatformでビルドされたKotlin/WasmおよびKotlin/JSアプリケーションでは、ナビゲーションが基本的なブラウザコントロールと正しく連携するようになりました。これを有効にするには、<code>window.bindToNavigation()</code>メソッドを使用してブラウザウィンドウをメインのナビゲーショングラフにリンクします。これにより、Webアプリはブラウザの履歴を移動するための<strong>戻る</strong>および<strong>進む</strong>ボタンの使用に正しく反応するようになります（デモビデオについてはプルリクエスト<a href="https://github.com/JetBrains/compose-multiplatform-core/pull/1621" target="_blank" rel="noreferrer">1621</a>を参照）。</p><p>Webアプリはまた、ブラウザのアドレスバーを操作して現在の宛先ルートを反映し、ユーザーが正しいルートがエンコードされたURLを貼り付けたときに直接宛先にナビゲートします（デモビデオについてはプルリクエスト<a href="https://github.com/JetBrains/compose-multiplatform-core/pull/1640" target="_blank" rel="noreferrer">1640</a>を参照）。<code>window.bindToNavigation()</code>メソッドにはオプションの<code>getBackStackEntryPath</code>パラメータがあり、ルート文字列をURLフラグメントに変換する方法をカスタマイズできます。</p><h3 id="ブラウザカーソルの設定" tabindex="-1">ブラウザカーソルの設定 <a class="header-anchor" href="#ブラウザカーソルの設定" aria-label="Permalink to &quot;ブラウザカーソルの設定&quot;">​</a></h3>`,8)),t(s,{ref:"Experimental"},null,512),a[3]||(a[3]=i("p",null,[l("ブラウザページでマウスカーソルとして使用できるアイコンを管理するために、実験的な"),i("code",null,"PointerIcon.Companion.fromKeyword()"),l("関数を導入しました。キーワードをパラメータとして渡すことで、コンテキストに基づいて表示するカーソルの種類を指定できます。例えば、テキストを選択したり、コンテキストメニューを開いたり、読み込みプロセスを示したりするために、異なるポインタアイコンを割り当てることができます。")],-1)),a[4]||(a[4]=i("p",null,[l("利用可能な"),i("a",{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor",target:"_blank",rel:"noreferrer"},"キーワードの全リスト"),l("を確認してください。")],-1)),a[5]||(a[5]=i("h3",{id:"リソースのプリロード",tabindex:"-1"},[l("リソースのプリロード "),i("a",{class:"header-anchor",href:"#リソースのプリロード","aria-label":'Permalink to "リソースのプリロード"'},"​")],-1)),t(s,{ref:"Experimental"},null,512),a[6]||(a[6]=e('<p>Compose Multiplatform 1.8.2は、Webターゲット向けのフォントと画像のプリロードのための新しい実験的なAPIを導入しました。プリロードは、スタイルが適用されていないテキストのフラッシュ（FOUT）や画像・アイコンのちらつきなどの視覚的な問題を防止するのに役立ちます。</p><p>リソースの読み込みとキャッシュには、以下の関数が利用可能です。</p><ul><li>フォントをプリロードする<code>preloadFont()</code>。</li><li>ビットマップ画像をプリロードする<code>preloadImageBitmap()</code>。</li><li>ベクター画像をプリロードする<code>preloadImageVector()</code>。</li></ul><p>詳細については、<a href="./compose-multiplatform-resources-usage#preload-resources-using-the-compose-multiplatform-preload-api">ドキュメント</a>を参照してください。</p><h2 id="デスクトップ" tabindex="-1">デスクトップ <a class="header-anchor" href="#デスクトップ" aria-label="Permalink to &quot;デスクトップ&quot;">​</a></h2><h3 id="windowsでのソフトウェアレンダリングの改善" tabindex="-1">Windowsでのソフトウェアレンダリングの改善 <a class="header-anchor" href="#windowsでのソフトウェアレンダリングの改善" aria-label="Permalink to &quot;Windowsでのソフトウェアレンダリングの改善&quot;">​</a></h3><p>Windows上でSkiaに推奨されるclangコンパイラに切り替えることで、CPUに依存するレンダリングが高速化されました。レンダリングは通常GPUに依存し、一部の計算のみがCPUで行われるため、これは主に純粋なソフトウェアレンダリングに影響します。そのため、一部の仮想マシンや<a href="https://github.com/JetBrains/skiko/blob/30df516c1a1a25237880f3e0fe83e44a13821292/skiko/src/jvmMain/kotlin/org/jetbrains/skiko/GraphicsApi.jvm.kt#L13" target="_blank" rel="noreferrer">Skiaでサポートされていない</a>古いグラフィックカードでは、改善が非常に顕著です。Compose Multiplatformによって生成されたWindowsアプリは、これらの環境でCompose Multiplatform 1.7.3と比較して最大6倍高速になりました。</p><p>この改善は、Windows for ARM64のサポートと相まって、macOS上の仮想WindowsシステムにおけるCompose Multiplatform UIのパフォーマンスを大幅に向上させます。</p><h3 id="windows-for-arm64のサポート" tabindex="-1">Windows for ARM64のサポート <a class="header-anchor" href="#windows-for-arm64のサポート" aria-label="Permalink to &quot;Windows for ARM64のサポート&quot;">​</a></h3><p>Compose Multiplatform 1.8.2は、JVM上でのWindows for ARM64のサポートを導入し、ARMベースのWindowsデバイスでアプリケーションをビルドおよび実行する全体的なエクスペリエンスを向上させます。</p><h2 id="gradleプラグイン" tabindex="-1">Gradleプラグイン <a class="header-anchor" href="#gradleプラグイン" aria-label="Permalink to &quot;Gradleプラグイン&quot;">​</a></h2><h3 id="生成されるresクラス名を変更するオプション" tabindex="-1">生成されるResクラス名を変更するオプション <a class="header-anchor" href="#生成されるresクラス名を変更するオプション" aria-label="Permalink to &quot;生成されるResクラス名を変更するオプション&quot;">​</a></h3><p>アプリケーション内のリソースにアクセスできる生成されたリソースクラスの名前をカスタマイズできるようになりました。カスタム命名は、マルチモジュールプロジェクトでリソースを区別するのに特に役立ち、プロジェクトの命名規則との一貫性を維持するのに役立ちます。</p><p>カスタム名を定義するには、<code>build.gradle.kts</code>ファイルの<code>compose.resources</code>ブロックに以下の行を追加します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compose.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resources</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    nameOfResClass </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;MyRes&quot;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>詳細については、<a href="https://github.com/JetBrains/compose-multiplatform/pull/5296" target="_blank" rel="noreferrer">プルリクエスト</a>を参照してください。</p><h3 id="androidlibraryターゲットでのマルチプラットフォームリソースのサポート" tabindex="-1"><code>androidLibrary</code>ターゲットでのマルチプラットフォームリソースのサポート <a class="header-anchor" href="#androidlibraryターゲットでのマルチプラットフォームリソースのサポート" aria-label="Permalink to &quot;`androidLibrary`ターゲットでのマルチプラットフォームリソースのサポート&quot;">​</a></h3>',17)),t(s,{ref:"Experimental"},null,512),a[7]||(a[7]=e(`<p>Android Gradleプラグインバージョン8.8.0以降、新しい<code>androidLibrary</code>ターゲットで生成されたアセットを使用できます。これらの変更にCompose Multiplatformを合わせるため、Androidアセットにパックされたマルチプラットフォームリソースと連携するための新しいターゲット設定のサポートを導入しました。</p><p><code>androidLibrary</code>ターゲットを使用している場合は、設定でリソースを有効にしてください。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin {</span></span>
<span class="line"><span>    androidLibrary {</span></span>
<span class="line"><span>        androidResources.enable = true</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>そうしないと、<code>org.jetbrains.compose.resources.MissingResourceException: Missing resource with path: …</code>という例外が発生します。</p>`,4))])}const C=o(d,[["render",k]]);export{b as __pageData,C as default};
