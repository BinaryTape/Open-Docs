import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.Bksy39di.js";const g=JSON.parse('{"title":"AndroidX Paging","description":"","frontmatter":{},"headers":[],"relativePath":"sqldelight/jvm_sqlite/androidx_paging.md","filePath":"sqldelight/jvm_sqlite/androidx_paging.md","lastUpdated":1748435462000}'),l={name:"sqldelight/jvm_sqlite/androidx_paging.md"};function t(h,s,p,k,d,r){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="androidx-paging" tabindex="-1">AndroidX Paging <a class="header-anchor" href="#androidx-paging" aria-label="Permalink to &quot;AndroidX Paging&quot;">​</a></h1><p>要将 SQLDelight 与 <a href="https://developer.android.com/topic/libraries/architecture/paging/v3-overview" target="_blank" rel="noreferrer">Android 的 Paging 3 库</a> 结合使用，请添加对 paging 扩展构件的依赖。</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-6bvRh" id="tab-VYF-Low" checked><label data-title="Kotlin" for="tab-VYF-Low">Kotlin</label><input type="radio" name="group-6bvRh" id="tab-_6EJIS5"><label data-title="Groovy" for="tab-_6EJIS5">Groovy</label></div><div class="blocks"><div class="language-kotlin vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;app.cash.sqldelight:androidx-paging3-extensions:2.1.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dependencies {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  implementation </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;app.cash.sqldelight:androidx-paging3-extensions:2.1.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></div></div><p>SQLDelight 提供两种数据分页方法——基于偏移量的分页和键集分页。</p><h2 id="基于偏移量的分页" tabindex="-1">基于偏移量的分页 <a class="header-anchor" href="#基于偏移量的分页" aria-label="Permalink to &quot;基于偏移量的分页&quot;">​</a></h2><p>偏移量分页通过使用 <code>OFFSET</code> 和 <code>LIMIT</code> 子句来获取分页结果。创建一个执行基于偏移量分页的 <code>PagingSource</code> 需要一个计数查询以及分页查询。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">countPlayers:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hockeyPlayer;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">players:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hockeyPlayer</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">LIMIT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> :</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">limit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> OFFSET :offset;</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> app.cash.sqldelight.android.paging3.QueryPagingSource</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pagingSource: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PagingSource</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> QueryPagingSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  countQuery </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> playerQueries.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">countPlayers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  transacter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> playerQueries,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Dispatchers.IO,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  queryProvider </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> playerQueries::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">players</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>默认情况下，如果未指定上下文，查询会在 <code>Dispatchers.IO</code> 上执行。期望使用 RxJava 的 <code>Scheduler</code> 执行查询的消费者应该使用 <a href="https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-rx2/kotlinx.coroutines.rx2/io.reactivex.-scheduler/as-coroutine-dispatcher.html" target="_blank" rel="noreferrer"><code>Scheduler.asCoroutineDispatcher</code></a> 扩展函数。</p><h2 id="键集分页" tabindex="-1">键集分页 <a class="header-anchor" href="#键集分页" aria-label="Permalink to &quot;键集分页&quot;">​</a></h2><p>偏移量分页简单且易于维护。不幸的是，它在大型数据集上性能不佳。SQL 语句的 <code>OFFSET</code> 子句实际上只是丢弃了 SQL 查询中已经执行过的行。因此，随着 <code>OFFSET</code> 值的增长，执行查询所需的时间也会随之增加。为了克服这个问题，SQLDelight 提供了一种“键集分页”的 <code>PagingSource</code> 实现。键集分页不是查询整个数据集并低效地丢弃前 <code>OFFSET</code> 个元素，而是使用唯一列来限制查询的范围。这种方法性能更好，但代价是更高的开发者维护成本。</p><p>此分页源接受的 <code>queryProvider</code> 回调有两个参数——一个 <code>beginInclusive</code>（非空的唯一 <code>Key</code>）以及一个 <code>endExclusive</code>（可空的唯一 <code>Key?</code>）。核心分页查询的示例如下所示。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">keyedQuery:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hockeyPlayer</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> :beginInclusive </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AND</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> :endExclusive </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">OR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> :endExclusive </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">IS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ORDER BY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ASC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>键集分页中使用的查询必须具有如上所示的唯一排序。</p><p><code>beginInclusive</code> 和 <code>endExclusive</code> 都是作为页面边界的 _预计算_键。页面大小在预计算页面边界时确定。<code>pageBoundariesProvider</code> 回调接受一个 <code>anchor: Key?</code> 参数以及一个 <code>limit: Int?</code> 参数。预计算页面边界的查询示例如下所示。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pageBoundaries:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  SELECT</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    id,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    CASE</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      WHEN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ((</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">row_number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">OVER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ORDER BY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ASC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) % :</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">limit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> THEN</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      WHEN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> :anchor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">THEN</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      ELSE</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    END</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> page_boundary;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hockeyPlayer</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  ORDER BY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ASC</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> page_boundary </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>预计算 SQL 查询的页面边界可能需要 <a href="https://www.sqlite.org/windowfunctions.html" target="_blank" rel="noreferrer">SQLite 窗口函数</a>。窗口函数在 SQLite 3.25.0 版本中引入，因此在 Android API 30 之前默认不可用。要使用键集分页，SQLDelight 建议要么设置 <code>minApi 30</code> <em>或</em> 捆绑您自己的 SQLite 版本。Requery 组织 <a href="https://github.com/requery/sqlite-android" target="_blank" rel="noreferrer">提供了一个</a> 最新版的 SQLite 独立库。</p><p>AndroidX 分页库允许通过 <code>PagingConfig.initialLoadSize</code> 使首次页面获取的大小与后续页面获取的大小不同。<strong>应避免使用此功能</strong>，因为 <code>pageBoundariesProvider</code> 回调在首次页面获取时只会被调用一次。如果 <code>PagingConfig.initialLoadSize</code> 和 <code>PagingConfig.pageSize</code> 不匹配，将导致意外的页面边界生成。</p><p>此分页源 _不_支持跳转。</p><p>要创建此分页源，请使用 <code>QueryPagingSource</code> 工厂函数。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> app.cash.sqldelight.android.paging3.QueryPagingSource</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> keyedSource </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> QueryPagingSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  transacter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> playerQueries,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Dispatchers.IO,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  pageBoundariesProvider </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> playerQueries::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pageBoundaries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  queryProvider </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> playerQueries::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">keyedQuery</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>默认情况下，如果未指定上下文，查询会在 <code>Dispatchers.IO</code> 上执行。期望使用 RxJava 的 <code>Scheduler</code> 执行查询的消费者应该使用 <a href="https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-rx2/kotlinx.coroutines.rx2/io.reactivex.-scheduler/as-coroutine-dispatcher.html" target="_blank" rel="noreferrer"><code>Scheduler.asCoroutineDispatcher</code></a> 扩展函数。</p>`,22)]))}const o=i(l,[["render",t]]);export{g as __pageData,o as default};
