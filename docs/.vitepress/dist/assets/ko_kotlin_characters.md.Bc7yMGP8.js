import{_ as i,c as a,o as t,ag as n}from"./chunks/framework.Bksy39di.js";const r=JSON.parse('{"title":"문자","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kotlin/characters.md","filePath":"ko/kotlin/characters.md","lastUpdated":1754307826000}'),l={name:"ko/kotlin/characters.md"};function e(p,s,h,k,o,d){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="문자" tabindex="-1">문자 <a class="header-anchor" href="#문자" aria-label="Permalink to &quot;문자&quot;">​</a></h1><p>문자는 <code>Char</code> 타입으로 표현됩니다. 문자 리터럴은 작은따옴표로 묶습니다: <code>&#39;1&#39;</code>.</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>JVM에서는 <code>char</code> 기본 타입으로 저장된 문자는 16비트 유니코드 문자를 나타냅니다.</p></div><p>특수 문자는 이스케이프 백슬래시 <code>\\</code>로 시작합니다. 다음 이스케이프 시퀀스를 지원합니다:</p><ul><li><code>\\t</code> – 탭</li><li><code>\\b</code> – 백스페이스</li><li><code></code> – 새 줄 (LF)</li><li><code>\\r</code> – 캐리지 리턴 (CR)</li><li><code>\\&#39;</code> – 작은따옴표</li><li><code>\\&quot;</code> – 큰따옴표</li><li><code>\\\\</code> – 백슬래시</li><li><code>\\$</code> – 달러 기호</li></ul><p>다른 문자를 인코딩하려면 유니코드 이스케이프 시퀀스 문법을 사용합니다: <code>&#39;\\uFF00&#39;</code>.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> aChar: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;a&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(aChar)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 추가 줄 바꿈 문자를 출력합니다.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">FF00&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>문자 변수의 값이 숫자인 경우, <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/digit-to-int.html" target="_blank" rel="noreferrer"><code>digitToInt()</code></a> 함수를 사용하여 <code>Int</code> 숫자로 명시적으로 변환할 수 있습니다.</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>JVM에서는 널러블 참조가 필요한 경우, 문자는 <a href="/ko/kotlin/numbers#boxing-and-caching-numbers-on-the-java-virtual-machine">숫자</a>와 마찬가지로 자바 클래스로 박싱됩니다. 식별성은 박싱 연산으로 보존되지 않습니다.</p></div>`,9)]))}const E=i(l,[["render",e]]);export{r as __pageData,E as default};
