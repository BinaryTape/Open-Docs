import{_ as a,c as s,o,ag as i}from"./chunks/framework.Bksy39di.js";const h=JSON.parse('{"title":"Compose 編譯器遷移指南","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/compose-compiler-migration-guide.md","filePath":"zh-Hant/kotlin/compose-compiler-migration-guide.md","lastUpdated":1754307826000}'),l={name:"zh-Hant/kotlin/compose-compiler-migration-guide.md"};function n(p,e,t,r,c,d){return o(),s("div",null,e[0]||(e[0]=[i(`<h1 id="compose-編譯器遷移指南" tabindex="-1">Compose 編譯器遷移指南 <a class="header-anchor" href="#compose-編譯器遷移指南" aria-label="Permalink to &quot;Compose 編譯器遷移指南&quot;">​</a></h1><p>Compose 編譯器由一個 Gradle 外掛程式輔助，該外掛程式可簡化設定並提供更方便的編譯器選項存取方式。 當與 Android Gradle 外掛程式 (AGP) 一同應用時，此 Compose 編譯器外掛程式將覆寫 AGP 自動提供的 Compose 編譯器座標。</p><p>自 Kotlin 2.0.0 起，Compose 編譯器已合併到 Kotlin 儲存庫。 這有助於簡化您的專案向 Kotlin 2.0.0 及更高版本的遷移，因為 Compose 編譯器與 Kotlin 同步發布，並且將始終與相同版本的 Kotlin 相容。</p><p>若要在您的專案中使用新的 Compose 編譯器外掛程式，請將其應用於每個使用 Compose 的模組。 繼續閱讀有關如何 <a href="#migrating-a-jetpack-compose-project">遷移 Jetpack Compose 專案</a> 的詳細資訊。對於 Compose 多平台專案，請參閱 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/compose-compiler.html#migrating-a-compose-multiplatform-project" target="_blank" rel="noreferrer">多平台遷移指南</a>。</p><h2 id="遷移-jetpack-compose-專案" tabindex="-1">遷移 Jetpack Compose 專案 <a class="header-anchor" href="#遷移-jetpack-compose-專案" aria-label="Permalink to &quot;遷移 Jetpack Compose 專案&quot;">​</a></h2><p>當您從 1.9 遷移到 Kotlin 2.0.0 或更新版本時，應根據您處理 Compose 編譯器的方式來調整專案組態。我們建議使用 Kotlin Gradle 外掛程式和 Compose 編譯器 Gradle 外掛程式來自動化組態管理。</p><h3 id="使用-gradle-外掛程式管理-compose-編譯器" tabindex="-1">使用 Gradle 外掛程式管理 Compose 編譯器 <a class="header-anchor" href="#使用-gradle-外掛程式管理-compose-編譯器" aria-label="Permalink to &quot;使用 Gradle 外掛程式管理 Compose 編譯器&quot;">​</a></h3><p>對於 Android 模組：</p><ol><li>將 Compose 編譯器 Gradle 外掛程式加入 <a href="https://docs.gradle.com/current/userguide/platforms.html#sub:conventional-dependencies-toml" target="_blank" rel="noreferrer">Gradle 版本目錄</a>：</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[versions]</span></span>
<span class="line"><span># ...</span></span>
<span class="line"><span>kotlin = &quot;2.2.10&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[plugins]</span></span>
<span class="line"><span># ...</span></span>
<span class="line"><span>org-jetbrains-kotlin-android = { id = &quot;org.jetbrains.kotlin.android&quot;, version.ref = &quot;kotlin&quot; }</span></span>
<span class="line"><span>compose-compiler = { id = &quot;org.jetbrains.kotlin.plugin.compose&quot;, version.ref = &quot;kotlin&quot; }</span></span></code></pre></div><ol start="2"><li>將 Gradle 外掛程式加入根 <code>build.gradle.kts</code> 檔案：</li></ol><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    alias</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(libs.plugins.compose.compiler) apply </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ol start="3"><li>將該外掛程式應用於每個使用 Jetpack Compose 的模組：</li></ol><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    alias</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(libs.plugins.compose.compiler)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ol start="4"><li><p>如果您正在使用 Jetpack Compose 編譯器的編譯器選項，請在 <code>composeCompiler {}</code> 區塊中設定它們。 請參閱 <a href="/zh-Hant/kotlin/compose-compiler-options">編譯器選項列表</a> 以供參考。</p></li><li><p>如果您直接引用 Compose 編譯器構件 (artifacts)，您可以移除這些引用，並讓 Gradle 外掛程式處理相關事務。</p></li></ol><h3 id="不使用-gradle-外掛程式的-compose-編譯器" tabindex="-1">不使用 Gradle 外掛程式的 Compose 編譯器 <a class="header-anchor" href="#不使用-gradle-外掛程式的-compose-編譯器" aria-label="Permalink to &quot;不使用 Gradle 外掛程式的 Compose 編譯器&quot;">​</a></h3><p>如果您沒有使用 Gradle 外掛程式來管理 Compose 編譯器，請更新專案中對舊 Maven 構件的任何直接引用：</p><ul><li>將 <code>androidx.compose.compiler:compiler</code> 變更為 <code>org.jetbrains.kotlin:kotlin-compose-compiler-plugin-embeddable</code></li><li>將 <code>androidx.compose.compiler:compiler-hosted</code> 變更為 <code>org.jetbrains.kotlin:kotlin-compose-compiler-plugin</code></li></ul><h2 id="後續步驟" tabindex="-1">後續步驟 <a class="header-anchor" href="#後續步驟" aria-label="Permalink to &quot;後續步驟&quot;">​</a></h2><ul><li>請參閱 <a href="https://android-developers.googleblog.com/2024/04/jetpack-compose-compiler-moving-to-kotlin-repository.html" target="_blank" rel="noreferrer">Google 關於 Compose 編譯器移至 Kotlin 儲存庫的公告</a>。</li><li>如果您正在使用 Jetpack Compose 建構 Android 應用程式，請查看 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-integrate-in-existing-app.html" target="_blank" rel="noreferrer">我們關於如何使其多平台的指南</a>。</li></ul>`,20)]))}const k=a(l,[["render",n]]);export{h as __pageData,k as default};
