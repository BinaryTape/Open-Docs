import{_ as i,a,b as n,c as t}from"./chunks/convert-java-to-kotlin.BPRm1iLF.js";import{_ as l,c as p,o as h,ag as k}from"./chunks/framework.Bksy39di.js";const m=JSON.parse('{"title":"하나의 프로젝트에서 Java와 Kotlin 혼용하기 – 튜토리얼","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kotlin/mixing-java-kotlin-intellij.md","filePath":"ko/kotlin/mixing-java-kotlin-intellij.md","lastUpdated":1754307826000}'),e={name:"ko/kotlin/mixing-java-kotlin-intellij.md"};function r(o,s,E,d,g,c){return h(),p("div",null,s[0]||(s[0]=[k('<h1 id="하나의-프로젝트에서-java와-kotlin-혼용하기-–-튜토리얼" tabindex="-1">하나의 프로젝트에서 Java와 Kotlin 혼용하기 – 튜토리얼 <a class="header-anchor" href="#하나의-프로젝트에서-java와-kotlin-혼용하기-–-튜토리얼" aria-label="Permalink to &quot;하나의 프로젝트에서 Java와 Kotlin 혼용하기 – 튜토리얼&quot;">​</a></h1><p>Kotlin은 Java와 일급 상호 운용성(interoperability)을 제공하며, 최신 IDE는 이를 더욱 향상시킵니다. 이 튜토리얼에서는 IntelliJ IDEA에서 동일한 프로젝트 내에서 Kotlin 및 Java 소스를 모두 사용하는 방법을 배웁니다. IntelliJ IDEA에서 새로운 Kotlin 프로젝트를 시작하는 방법을 알아보려면 <a href="/ko/kotlin/jvm-get-started">IntelliJ IDEA 시작하기</a>를 참조하세요.</p><h2 id="기존-kotlin-프로젝트에-java-소스-코드-추가하기" tabindex="-1">기존 Kotlin 프로젝트에 Java 소스 코드 추가하기 <a class="header-anchor" href="#기존-kotlin-프로젝트에-java-소스-코드-추가하기" aria-label="Permalink to &quot;기존 Kotlin 프로젝트에 Java 소스 코드 추가하기&quot;">​</a></h2><p>Kotlin 프로젝트에 Java 클래스를 추가하는 것은 매우 간단합니다. 새로운 Java 파일을 생성하기만 하면 됩니다. 프로젝트 내에서 디렉터리 또는 패키지를 선택한 후 <strong>파일</strong> | <strong>새로 만들기</strong> | <strong>Java 클래스</strong>로 이동하거나 <strong>Alt + Insert</strong>/<strong>Cmd + N</strong> 단축키를 사용하세요.</p><p><img src="'+i+`" alt="새로운 Java 클래스 추가" width="400"></p><p>이미 Java 클래스를 가지고 있다면, 해당 클래스를 프로젝트 디렉터리에 복사하기만 하면 됩니다.</p><p>이제 Kotlin에서 Java 클래스를 사용하거나 그 반대로도 아무런 추가 작업 없이 사용할 수 있습니다.</p><p>예를 들어, 다음 Java 클래스를 추가하면:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Customer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String name;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Customer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> placeOrder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;A new order is placed by &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Kotlin의 다른 유형과 마찬가지로 Kotlin에서 이를 호출할 수 있습니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> customer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Customer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Phase&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(customer.name)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(customer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">placeOrder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><h2 id="기존-java-프로젝트에-kotlin-소스-코드-추가하기" tabindex="-1">기존 Java 프로젝트에 Kotlin 소스 코드 추가하기 <a class="header-anchor" href="#기존-java-프로젝트에-kotlin-소스-코드-추가하기" aria-label="Permalink to &quot;기존 Java 프로젝트에 Kotlin 소스 코드 추가하기&quot;">​</a></h2><p>기존 Java 프로젝트에 Kotlin 파일을 추가하는 것도 거의 동일합니다.</p><p><img src="`+a+'" alt="새로운 Kotlin 파일 클래스 추가" width="400"></p><p>이 프로젝트에 Kotlin 파일을 처음 추가하는 경우, IntelliJ IDEA가 필요한 Kotlin 런타임(runtime)을 자동으로 추가합니다.</p><p><img src="'+n+'" alt="Kotlin 런타임 번들링" width="350"></p><p><strong>도구</strong> | <strong>Kotlin</strong> | <strong>프로젝트에 Kotlin 구성</strong>에서 Kotlin 런타임 구성을 수동으로 열 수도 있습니다.</p><h2 id="j2k를-사용하여-기존-java-파일을-kotlin으로-변환하기" tabindex="-1">J2K를 사용하여 기존 Java 파일을 Kotlin으로 변환하기 <a class="header-anchor" href="#j2k를-사용하여-기존-java-파일을-kotlin으로-변환하기" aria-label="Permalink to &quot;J2K를 사용하여 기존 Java 파일을 Kotlin으로 변환하기&quot;">​</a></h2><p>Kotlin 플러그인은 또한 Java 파일을 Kotlin으로 자동으로 변환하는 Java-Kotlin 변환기(<em>J2K</em>)를 번들로 제공합니다. 파일에서 J2K를 사용하려면 해당 파일의 컨텍스트 메뉴 또는 IntelliJ IDEA의 <strong>코드</strong> 메뉴에서 <strong>Java 파일을 Kotlin 파일로 변환</strong>을 클릭하세요.</p><p><img src="'+t+'" alt="Java를 Kotlin으로 변환" width="500"></p><p>변환기가 완벽하지는 않지만, 대부분의 상용구(boilerplate) 코드를 Java에서 Kotlin으로 꽤 잘 변환합니다. 하지만 때로는 수동 조정이 필요할 수도 있습니다.</p>',21)]))}const F=l(e,[["render",r]]);export{m as __pageData,F as default};
