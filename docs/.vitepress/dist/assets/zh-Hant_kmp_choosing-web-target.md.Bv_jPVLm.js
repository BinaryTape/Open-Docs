import{_ as a,c as e,o as l,ag as r}from"./chunks/framework.Bksy39di.js";const d=JSON.parse('{"title":"為 Kotlin Multiplatform 專案選擇合適的網頁目標","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kmp/choosing-web-target.md","filePath":"zh-Hant/kmp/choosing-web-target.md","lastUpdated":1755516278000}'),o={name:"zh-Hant/kmp/choosing-web-target.md"};function i(n,t,s,p,h,c){return l(),e("div",null,t[0]||(t[0]=[r('<h1 id="為-kotlin-multiplatform-專案選擇合適的網頁目標" tabindex="-1">為 Kotlin Multiplatform 專案選擇合適的網頁目標 <a class="header-anchor" href="#為-kotlin-multiplatform-專案選擇合適的網頁目標" aria-label="Permalink to &quot;為 Kotlin Multiplatform 專案選擇合適的網頁目標&quot;">​</a></h1><p>Kotlin Multiplatform (KMP) 提供兩種網頁開發方式：</p><ul><li>基於 JavaScript (使用 Kotlin/JS 編譯器)</li><li>基於 WebAssembly (使用 Kotlin/Wasm 編譯器)</li></ul><p>這兩種選項都允許您在網頁應用程式中使用共用程式碼。 然而，它們在效能、互通性、應用程式大小和目標瀏覽器支援等方面存在重要差異。 本指南將說明何時使用每個目標，以及如何透過適當的選擇來滿足您的需求。</p><h3 id="快速指南" tabindex="-1">快速指南 <a class="header-anchor" href="#快速指南" aria-label="Permalink to &quot;快速指南&quot;">​</a></h3><p>下表根據您的使用案例總結了推薦的目標：</p><table tabindex="0"><thead><tr><th style="text-align:left;">使用案例</th><th style="text-align:left;">推薦目標</th><th style="text-align:left;">理由</th></tr></thead><tbody><tr><td style="text-align:left;">共用業務邏輯，但使用原生 UI</td><td style="text-align:left;">JS</td><td style="text-align:left;">提供與 JavaScript 直接的互通性，且開銷最小</td></tr><tr><td style="text-align:left;">同時共用 UI 和業務邏輯</td><td style="text-align:left;">Wasm</td><td style="text-align:left;">使用 <a href="https://www.jetbrains.com/compose-multiplatform/" target="_blank" rel="noreferrer">Compose Multiplatform</a> 渲染時提供更好的效能</td></tr><tr><td style="text-align:left;">不可共用的 UI</td><td style="text-align:left;">JS</td><td style="text-align:left;">允許使用基於 HTML 的框架（例如 <a href="https://kobweb.varabyte.com/" target="_blank" rel="noreferrer">Kobweb</a>、<a href="https://kilua.dev/" target="_blank" rel="noreferrer">Kilua</a> 或 <a href="https://kotlinlang.org/docs/js-react.html" target="_blank" rel="noreferrer">React</a>）構建 UI，利用現有的 JS 生態系統和工具</td></tr></tbody></table><h2 id="何時選擇-kotlin-js" tabindex="-1">何時選擇 Kotlin/JS <a class="header-anchor" href="#何時選擇-kotlin-js" aria-label="Permalink to &quot;何時選擇 Kotlin/JS&quot;">​</a></h2><p>如果您的目標是以下情況，Kotlin/JS 將提供一個很好的解決方案：</p><ul><li><a href="#share-business-logic-with-a-javascript-typescript-codebase">與 JavaScript/TypeScript 程式碼庫共用業務邏輯</a></li><li><a href="#build-web-apps-with-kotlin-without-sharing-the-code">使用 Kotlin 構建不可共用的網頁應用程式</a></li></ul><h3 id="與-javascript-typescript-程式碼庫共用業務邏輯" tabindex="-1">與 JavaScript/TypeScript 程式碼庫共用業務邏輯 <a class="header-anchor" href="#與-javascript-typescript-程式碼庫共用業務邏輯" aria-label="Permalink to &quot;與 JavaScript/TypeScript 程式碼庫共用業務邏輯&quot;">​</a></h3><p>如果您想將 Kotlin 程式碼（例如領域或資料邏輯）與原生的 JavaScript/TypeScript 應用程式共用， JS 目標提供：</p><ul><li>與 JavaScript/TypeScript 直接的互通性。</li><li>互通性開銷最小（例如，沒有不必要資料複製）。這有助於您的程式碼無縫整合到基於 JS 的工作流程中。</li></ul><h3 id="使用-kotlin-構建不可共用的網頁應用程式" tabindex="-1">使用 Kotlin 構建不可共用的網頁應用程式 <a class="header-anchor" href="#使用-kotlin-構建不可共用的網頁應用程式" aria-label="Permalink to &quot;使用 Kotlin 構建不可共用的網頁應用程式&quot;">​</a></h3><p>對於希望使用 Kotlin 構建整個網頁應用程式的團隊， 但無意將其共用至其他平台（iOS、Android 或桌面）的情況，基於 HTML 的解決方案可能是更好的選擇。 它能改進 SEO 和無障礙性，並預設提供無縫的瀏覽器整合（例如「在頁面中尋找」功能或頁面翻譯）。 在這種情況下，Kotlin/JS 提供多種選項。您可以：</p><ul><li>使用基於 Compose HTML 的框架，例如 <a href="https://kobweb.varabyte.com/" target="_blank" rel="noreferrer">Kobweb</a> 或 <a href="https://kilua.dev/" target="_blank" rel="noreferrer">Kilua</a>， 以熟悉的 Compose Multiplatform 架構構建 UI。</li><li>利用基於 React 的解決方案與 Kotlin 包裝器，在 <a href="https://kotlinlang.org/docs/js-react.html" target="_blank" rel="noreferrer">Kotlin 中構建 React 組件</a>。</li></ul><h2 id="何時選擇-kotlin-wasm" tabindex="-1">何時選擇 Kotlin/Wasm <a class="header-anchor" href="#何時選擇-kotlin-wasm" aria-label="Permalink to &quot;何時選擇 Kotlin/Wasm&quot;">​</a></h2><h3 id="使用-compose-multiplatform-構建跨平台應用程式" tabindex="-1">使用 Compose Multiplatform 構建跨平台應用程式 <a class="header-anchor" href="#使用-compose-multiplatform-構建跨平台應用程式" aria-label="Permalink to &quot;使用 Compose Multiplatform 構建跨平台應用程式&quot;">​</a></h3><p>如果您想在多個平台（包括網頁）上共用邏輯和 UI， 結合 <a href="https://www.jetbrains.com/compose-multiplatform/" target="_blank" rel="noreferrer">Compose Multiplatform</a> 的 Kotlin/Wasm 是最佳選擇：</p><ul><li>UI 體驗在不同平台之間更加一致。</li><li>您可以利用 Wasm 來改進渲染效果和實現流暢、響應式的動畫。</li><li>瀏覽器對 <a href="https://developer.chrome.com/blog/wasmgc" target="_blank" rel="noreferrer">WasmGC</a> 的支援已趨於成熟， 允許 Kotlin/Wasm 在所有主要現代瀏覽器上以接近原生的效能運行。</li></ul><p>對於需要支援舊瀏覽器版本的專案，您可以為 Compose Multiplatform 使用相容模式： 在 Wasm 中為現代瀏覽器構建 UI，但在舊瀏覽器上優雅地回退到 JS。 您也可以在專案中在 Wasm 和 JS 目標之間共用通用邏輯。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>仍然不確定該選擇哪條路徑嗎？加入我們的 <a href="https://slack-chats.kotlinlang.org" target="_blank" rel="noreferrer">Slack 社群</a> 並詢問關於關鍵差異、效能考量以及選擇合適目標的最佳實踐。</p></div>',22)]))}const f=a(o,[["render",i]]);export{d as __pageData,f as default};
