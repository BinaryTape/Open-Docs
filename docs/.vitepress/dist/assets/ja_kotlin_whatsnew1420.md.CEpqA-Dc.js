import{_ as i,c as e,o as s,ag as t}from"./chunks/framework.Bksy39di.js";const k=JSON.parse('{"title":"Kotlin 1.4.20 の新機能","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/whatsnew1420.md","filePath":"ja/kotlin/whatsnew1420.md","lastUpdated":1754307826000}'),l={name:"ja/kotlin/whatsnew1420.md"};function n(o,a,r,p,h,d){return s(),e("div",null,a[0]||(a[0]=[t(`<h1 id="kotlin-1-4-20-の新機能" tabindex="-1">Kotlin 1.4.20 の新機能 <a class="header-anchor" href="#kotlin-1-4-20-の新機能" aria-label="Permalink to &quot;Kotlin 1.4.20 の新機能&quot;">​</a></h1><p><a href="/ja/kotlin/releases#release-details">リリース日: 2020年11月23日</a></p><p>Kotlin 1.4.20では、多数の新しい実験的機能が提供され、1.4.0で追加された機能を含む既存の機能に対する修正と改善が行われています。</p><p>新機能の詳細と多くの例については、<a href="https://blog.jetbrains.com/kotlin/2020/11/kotlin-1-4-20-released/" target="_blank" rel="noreferrer">こちらのブログ記事</a>も参照してください。</p><h2 id="kotlin-jvm" tabindex="-1">Kotlin/JVM <a class="header-anchor" href="#kotlin-jvm" aria-label="Permalink to &quot;Kotlin/JVM&quot;">​</a></h2><p>Kotlin/JVMの改善は、最新のJavaバージョンの機能に対応することを目的としています。</p><ul><li><a href="#java-15-target">Java 15ターゲット</a></li><li><a href="#invokedynamic-string-concatenation">invokedynamic文字列結合</a></li></ul><h3 id="java-15ターゲット" tabindex="-1">Java 15ターゲット <a class="header-anchor" href="#java-15ターゲット" aria-label="Permalink to &quot;Java 15ターゲット&quot;">​</a></h3><p>Java 15がKotlin/JVMのターゲットとして利用可能になりました。</p><h3 id="invokedynamic文字列結合" tabindex="-1">invokedynamic文字列結合 <a class="header-anchor" href="#invokedynamic文字列結合" aria-label="Permalink to &quot;invokedynamic文字列結合&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p><code>invokedynamic</code>文字列結合は<a href="/ja/kotlin/components-stability">実験的機能</a>です。将来的に削除または変更される可能性があります。利用にはオプトインが必要です（詳細は以下を参照）。評価目的でのみ使用してください。この機能に関するフィードバックは<a href="https://youtrack.jetbrains.com/issues/KT" target="_blank" rel="noreferrer">YouTrack</a>までお寄せください。</p></div><p>Kotlin 1.4.20では、文字列結合をJVM 9+ターゲット上で<a href="https://docs.oracle.com/javase/7/docs/technotes/guides/vm/multiple-language-support.html#invokedynamic" target="_blank" rel="noreferrer">動的呼び出し</a>にコンパイルできるようになり、パフォーマンスが向上します。</p><p>現在、この機能は実験的であり、以下のケースをカバーしています。</p><ul><li>演算子形式 (<code>a + b</code>)、明示的な形式 (<code>a.plus(b)</code>)、および参照形式 (<code>(a::plus)(b)</code>) での <code>String.plus</code>。</li><li>インラインクラスとデータクラスの<code>toString</code>。</li><li>単一の非定数引数を持つもの以外の文字列テンプレート（<a href="https://youtrack.jetbrains.com/issue/KT-42457" target="_blank" rel="noreferrer">KT-42457</a>を参照）。</li></ul><p><code>invokedynamic</code>文字列結合を有効にするには、以下のいずれかの値とともに<code>-Xstring-concat</code>コンパイラオプションを追加します。</p><ul><li><code>indy-with-constants</code> を使用して文字列に<code>invokedynamic</code>結合を実行します。 <a href="https://docs.oracle.com/javase/9/docs/api/java/lang/invoke/StringConcatFactory.html#makeConcatWithConstants-java.lang.invoke.MethodHandles.Lookup-java.lang.String-java.lang.invoke.MethodType-java.lang.String-java.lang.Object...-" target="_blank" rel="noreferrer">StringConcatFactory.makeConcatWithConstants()</a> を使用します。</li><li><code>indy</code> を使用して文字列に<code>invokedynamic</code>結合を実行します。 <a href="https://docs.oracle.com/javase/9/docs/api/java/lang/invoke/StringConcatFactory.html#makeConcat-java.lang.invoke.MethodHandles.Lookup-java.lang.String-java.lang.invoke.MethodType-" target="_blank" rel="noreferrer">StringConcatFactory.makeConcat()</a> を使用します。</li><li><code>inline</code> を使用して<code>StringBuilder.append()</code>による従来の結合に戻します。</li></ul><h2 id="kotlin-js" tabindex="-1">Kotlin/JS <a class="header-anchor" href="#kotlin-js" aria-label="Permalink to &quot;Kotlin/JS&quot;">​</a></h2><p>Kotlin/JSは急速に進化を続けており、1.4.20では多くの実験的機能と改善が導入されています。</p><ul><li><a href="#gradle-dsl-changes">Gradle DSLの変更</a></li><li><a href="#new-wizard-templates">新しいウィザードテンプレート</a></li><li><a href="#ignoring-compilation-errors-with-ir-compiler">IRコンパイラでのコンパイルエラーの無視</a></li></ul><h3 id="gradle-dslの変更" tabindex="-1">Gradle DSLの変更 <a class="header-anchor" href="#gradle-dslの変更" aria-label="Permalink to &quot;Gradle DSLの変更&quot;">​</a></h3><p>Kotlin/JS用のGradle DSLには、プロジェクトのセットアップとカスタマイズを簡素化する多数の更新が加えられています。これには、webpackの設定調整、自動生成される<code>package.json</code>ファイルの変更、および推移的な依存関係の制御の改善が含まれます。</p><h4 id="webpack設定の一元化" tabindex="-1">webpack設定の一元化 <a class="header-anchor" href="#webpack設定の一元化" aria-label="Permalink to &quot;webpack設定の一元化&quot;">​</a></h4><p><code>browser</code>ターゲット用の新しい設定ブロック<code>commonWebpackConfig</code>が利用できるようになりました。このブロック内で、<code>webpackTask</code>、<code>runTask</code>、<code>testTask</code>の構成を重複させる必要なく、共通の設定を一元的に調整できます。</p><p>これら3つのタスクすべてでCSSサポートをデフォルトで有効にするには、プロジェクトの<code>build.gradle(.kts)</code>に以下のスニペットを追加します。</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">browser {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    commonWebpackConfig {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        cssSupport</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">enabled </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    binaries</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">executable()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="/ja/kotlin/js-project-setup#webpack-bundling">webpackバンドルの設定</a>の詳細については、こちらを参照してください。</p><h4 id="gradleからのpackage-jsonカスタマイズ" tabindex="-1">Gradleからの<code>package.json</code>カスタマイズ <a class="header-anchor" href="#gradleからのpackage-jsonカスタマイズ" aria-label="Permalink to &quot;Gradleからの\`package.json\`カスタマイズ&quot;">​</a></h4><p>Kotlin/JSのパッケージ管理と配布をより詳細に制御するために、Gradle DSLを介してプロジェクトファイル<a href="https://nodejs.dev/learn/the-package-json-guide" target="_blank" rel="noreferrer"><code>package.json</code></a>にプロパティを追加できるようになりました。</p><p><code>package.json</code>にカスタムフィールドを追加するには、コンパイルの<code>packageJson</code>ブロックで<code>customField</code>関数を使用します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(BOTH) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        compilations[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;main&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">packageJson</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            customField</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mapOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;one&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> to </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;two&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> to </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="/ja/kotlin/js-project-setup#package-json-customization"><code>package.json</code>のカスタマイズ</a>の詳細については、こちらを参照してください。</p><h4 id="yarnの選択的依存関係解決" tabindex="-1">Yarnの選択的依存関係解決 <a class="header-anchor" href="#yarnの選択的依存関係解決" aria-label="Permalink to &quot;Yarnの選択的依存関係解決&quot;">​</a></h4><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>Yarnの選択的依存関係解決のサポートは<a href="/ja/kotlin/components-stability">実験的機能</a>です。将来的に削除または変更される可能性があります。評価目的でのみ使用してください。この機能に関するフィードバックは<a href="https://youtrack.jetbrains.com/issues/KT" target="_blank" rel="noreferrer">YouTrack</a>までお寄せください。</p></div><p>Kotlin 1.4.20では、Yarnの<a href="https://classic.yarnpkg.com/en/docs/selective-version-resolutions/" target="_blank" rel="noreferrer">選択的依存関係解決</a>を設定する方法を提供します。これは、依存するパッケージの依存関係をオーバーライドするメカニズムです。</p><p>Gradleの<code>YarnPlugin</code>内の<code>YarnRootExtension</code>を通じてこれを使用できます。プロジェクトのパッケージの解決バージョンに影響を与えるには、パッケージ名セレクタ（Yarnで指定されている）と解決すべきバージョンを<code>resolution</code>関数に渡します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rootProject.plugins.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">YarnPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rootProject.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">the</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">YarnRootExtension</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        resolution</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;react&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;16.0.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        resolution</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;processor/decamelize&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;3.0.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>ここでは、<code>react</code>を必要とするすべてのnpm依存関係がバージョン<code>16.0.0</code>を受け取り、<code>processor</code>はその依存関係<code>decamelize</code>をバージョン<code>3.0.0</code>として受け取ります。</p><h4 id="粒度の粗いワークスペースの無効化" tabindex="-1">粒度の粗いワークスペースの無効化 <a class="header-anchor" href="#粒度の粗いワークスペースの無効化" aria-label="Permalink to &quot;粒度の粗いワークスペースの無効化&quot;">​</a></h4><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>粒度の粗いワークスペースの無効化は<a href="/ja/kotlin/components-stability">実験的機能</a>です。将来的に削除または変更される可能性があります。評価目的でのみ使用してください。この機能に関するフィードバックは<a href="https://youtrack.jetbrains.com/issues/KT" target="_blank" rel="noreferrer">YouTrack</a>までお寄せください。</p></div><p>ビルド時間を短縮するため、Kotlin/JS Gradleプラグインは、特定のGradleタスクに必要な依存関係のみをインストールします。たとえば、<code>webpack-dev-server</code>パッケージは、<code>*Run</code>タスクのいずれかを実行するときにのみインストールされ、assembleタスクの実行時にはインストールされません。このような動作は、複数のGradleプロセスを並行して実行する際に問題を引き起こす可能性があります。依存関係の要件が衝突すると、npmパッケージの2つのインストールがエラーの原因となることがあります。</p><p>この問題を解決するため、Kotlin 1.4.20には、これらのいわゆる_粒度の粗いワークスペース_を無効にするオプションが含まれています。この機能は現在、Gradleの<code>YarnPlugin</code>内の<code>YarnRootExtension</code>を通じて利用できます。使用するには、<code>build.gradle.kts</code>ファイルに以下のスニペットを追加します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">rootProject.plugins.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">YarnPlugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    rootProject.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">the</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">YarnRootExtension</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">disableGranularWorkspaces</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="新しいウィザードテンプレート" tabindex="-1">新しいウィザードテンプレート <a class="header-anchor" href="#新しいウィザードテンプレート" aria-label="Permalink to &quot;新しいウィザードテンプレート&quot;">​</a></h3><p>プロジェクト作成時により便利にプロジェクトをカスタマイズできるよう、KotlinのプロジェクトウィザードにはKotlin/JSアプリケーション用の新しいテンプレートが追加されました。</p><ul><li><strong>ブラウザアプリケーション</strong> - ブラウザで実行される最小限のKotlin/JS Gradleプロジェクト。</li><li><strong>Reactアプリケーション</strong> - 適切な<code>kotlin-wrappers</code>を使用するReactアプリ。スタイルシート、ナビゲーションコンポーネント、または状態コンテナの統合を有効にするオプションを提供します。</li><li><strong>Node.jsアプリケーション</strong> - Node.jsランタイムで実行するための最小限のプロジェクト。実験的な<code>kotlinx-nodejs</code>パッケージを直接含めるオプションが付属しています。</li></ul><h3 id="irコンパイラでのコンパイルエラーの無視" tabindex="-1">IRコンパイラでのコンパイルエラーの無視 <a class="header-anchor" href="#irコンパイラでのコンパイルエラーの無視" aria-label="Permalink to &quot;IRコンパイラでのコンパイルエラーの無視&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>_コンパイルエラー無視_モードは<a href="/ja/kotlin/components-stability">実験的機能</a>です。将来的に削除または変更される可能性があります。利用にはオプトインが必要です（詳細は以下を参照）。評価目的でのみ使用してください。この機能に関するフィードバックは<a href="https://youtrack.jetbrains.com/issues/KT" target="_blank" rel="noreferrer">YouTrack</a>までお寄せください。</p></div><p>Kotlin/JS用の<a href="/ja/kotlin/js-ir-compiler">IRコンパイラ</a>には、新しい実験的なモードである_エラーを伴うコンパイル_が導入されました。このモードでは、コードにエラーが含まれていても実行できます。たとえば、アプリケーション全体がまだ準備できていない段階で特定の機能を試したい場合などに便利です。</p><p>このモードには2つの許容ポリシーがあります。</p><ul><li><code>SEMANTIC</code>: コンパイラは、<code>val x: String = 3</code>のように、構文的には正しいが意味的に正しくないコードを受け入れます。</li><li><code>SYNTAX</code>: コンパイラは、構文エラーが含まれていても任意のコードを受け入れます。</li></ul><p>エラーを伴うコンパイルを許可するには、上記のいずれかの値とともに<code>-Xerror-tolerance-policy=</code>コンパイラオプションを追加します。</p><p><a href="/ja/kotlin/js-ir-compiler">Kotlin/JS IRコンパイラ</a>の詳細については、こちらを参照してください。</p><h2 id="kotlin-native" tabindex="-1">Kotlin/Native <a class="header-anchor" href="#kotlin-native" aria-label="Permalink to &quot;Kotlin/Native&quot;">​</a></h2><p>Kotlin/Nativeの1.4.20における優先事項は、パフォーマンスと既存機能の磨き上げです。注目すべき改善点は以下のとおりです。</p><ul><li><a href="#escape-analysis">エスケープ解析</a></li><li><a href="#performance-improvements-and-bug-fixes">パフォーマンスの改善とバグ修正</a></li><li><a href="#opt-in-wrapping-of-objective-c-exceptions">Objective-C例外のオプトインによるラッピング</a></li><li><a href="#cocoapods-plugin-improvements">CocoaPodsプラグインの改善</a></li><li><a href="#support-for-xcode-12-libraries">Xcode 12ライブラリのサポート</a></li></ul><h3 id="エスケープ解析" tabindex="-1">エスケープ解析 <a class="header-anchor" href="#エスケープ解析" aria-label="Permalink to &quot;エスケープ解析&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>エスケープ解析メカニズムは<a href="/ja/kotlin/components-stability">実験的機能</a>です。将来的に削除または変更される可能性があります。評価目的でのみ使用してください。この機能に関するフィードバックは<a href="https://youtrack.jetbrains.com/issues/KT" target="_blank" rel="noreferrer">YouTrack</a>までお寄せください。</p></div><p>Kotlin/Nativeには、新しい<a href="https://en.wikipedia.org/wiki/Escape_analysis" target="_blank" rel="noreferrer">エスケープ解析</a>メカニズムのプロトタイプが導入されました。これにより、特定のオブジェクトをヒープではなくスタックに割り当てることで、ランタイムパフォーマンスが向上します。このメカニズムは、当社のベンチマークで平均10%のパフォーマンス向上を示しており、プログラムをさらに高速化するために引き続き改善を進めています。</p><p>エスケープ解析は、リリースビルド（<code>-opt</code>コンパイラオプションを使用）の場合、個別のコンパイルフェーズで実行されます。</p><p>エスケープ解析フェーズを無効にしたい場合は、<code>-Xdisable-phases=EscapeAnalysis</code>コンパイラオプションを使用します。</p><h3 id="パフォーマンスの改善とバグ修正" tabindex="-1">パフォーマンスの改善とバグ修正 <a class="header-anchor" href="#パフォーマンスの改善とバグ修正" aria-label="Permalink to &quot;パフォーマンスの改善とバグ修正&quot;">​</a></h3><p>Kotlin/Nativeでは、1.4.0で追加された<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-share-on-platforms.html#share-code-on-similar-platforms" target="_blank" rel="noreferrer">コード共有メカニズム</a>を含む、さまざまなコンポーネントでパフォーマンスの改善とバグ修正が行われています。</p><h3 id="objective-c例外のオプトインによるラッピング" tabindex="-1">Objective-C例外のオプトインによるラッピング <a class="header-anchor" href="#objective-c例外のオプトインによるラッピング" aria-label="Permalink to &quot;Objective-C例外のオプトインによるラッピング&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>Objective-C例外ラッピングメカニズムは<a href="/ja/kotlin/components-stability">実験的機能</a>です。将来的に削除または変更される可能性があります。利用にはオプトインが必要です（詳細は以下を参照）。評価目的でのみ使用してください。この機能に関するフィードバックは<a href="https://youtrack.jetbrains.com/issues/KT" target="_blank" rel="noreferrer">YouTrack</a>までお寄せください。</p></div><p>Kotlin/Nativeは、Objective-Cコードからスローされた例外をランタイムで処理し、プログラムのクラッシュを回避できるようになりました。</p><p><code>NSException</code>を<code>ForeignException</code>型のKotlin例外にラップするようにオプトインできます。これにより、元の<code>NSException</code>への参照が保持され、根本原因に関する情報を取得し、適切に処理できるようになります。</p><p>Objective-C例外のラッピングを有効にするには、<code>cinterop</code>呼び出しで<code>-Xforeign-exception-mode objc-wrap</code>オプションを指定するか、<code>.def</code>ファイルに<code>foreignExceptionMode = objc-wrap</code>プロパティを追加します。<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-cocoapods-overview.html" target="_blank" rel="noreferrer">CocoaPods統合</a>を使用している場合は、依存関係の<code>pod {}</code>ビルドスクリプトブロックで次のようにオプションを指定します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;foo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    extraOpts </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xforeign-exception-mode&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;objc-wrap&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>デフォルトの動作は変更されていません。Objective-Cコードから例外がスローされると、プログラムは終了します。</p><h3 id="cocoapodsプラグインの改善" tabindex="-1">CocoaPodsプラグインの改善 <a class="header-anchor" href="#cocoapodsプラグインの改善" aria-label="Permalink to &quot;CocoaPodsプラグインの改善&quot;">​</a></h3><p>Kotlin 1.4.20では、CocoaPods統合の改善が継続されています。具体的には、以下の新機能を試すことができます。</p><ul><li><a href="#improved-task-execution">タスク実行の改善</a></li><li><a href="#extended-dsl">拡張されたDSL</a></li><li><a href="#updated-integration-with-xcode">Xcodeとの統合の更新</a></li></ul><h4 id="タスク実行の改善" tabindex="-1">タスク実行の改善 <a class="header-anchor" href="#タスク実行の改善" aria-label="Permalink to &quot;タスク実行の改善&quot;">​</a></h4><p>CocoaPodsプラグインは、タスク実行フローが改善されました。たとえば、新しいCocoaPods依存関係を追加しても、既存の依存関係は再ビルドされません。追加のターゲットを追加しても、既存の依存関係の再ビルドには影響しません。</p><h4 id="拡張されたdsl" tabindex="-1">拡張されたDSL <a class="header-anchor" href="#拡張されたdsl" aria-label="Permalink to &quot;拡張されたDSL&quot;">​</a></h4><p>Kotlinプロジェクトに<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-cocoapods-overview.html" target="_blank" rel="noreferrer">CocoaPods</a>依存関係を追加するためのDSLに、新しい機能が追加されました。</p><p>ローカルのPodとCocoaPodsリポジトリのPodに加えて、以下の種類のライブラリへの依存関係を追加できます。</p><ul><li>カスタムスペックリポジトリからのライブラリ。</li><li>Gitリポジトリからのリモートライブラリ。</li><li>アーカイブからのライブラリ（任意のHTTPアドレスでも利用可能）。</li><li>静的ライブラリ。</li><li>カスタムcinteropオプションを持つライブラリ。</li></ul><p>Kotlinプロジェクトでの<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-cocoapods-libraries.html" target="_blank" rel="noreferrer">CocoaPods依存関係の追加</a>の詳細については、こちらを参照してください。<a href="https://github.com/Kotlin/kmm-with-cocoapods-sample" target="_blank" rel="noreferrer">Kotlin with CocoaPodsサンプル</a>で例を見つけることができます。</p><h4 id="xcodeとの統合の更新" tabindex="-1">Xcodeとの統合の更新 <a class="header-anchor" href="#xcodeとの統合の更新" aria-label="Permalink to &quot;Xcodeとの統合の更新&quot;">​</a></h4><p>Xcodeと正しく連携するには、KotlinでPodfileをいくつか変更する必要があります。</p><ul><li>Kotlin PodがGit、HTTP、またはspecRepo Podの依存関係を持っている場合、それもPodfileに指定する必要があります。</li><li>カスタムスペックからライブラリを追加する場合、Podfileの冒頭でスペックの<a href="https://guides.cocoapods.org/syntax/podfile.html#source" target="_blank" rel="noreferrer">場所</a>も指定する必要があります。</li></ul><p>これにより、統合エラーにはIDEAで詳細な説明が表示されるようになりました。Podfileに問題がある場合、すぐに修正方法がわかります。</p><p><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-cocoapods-xcode.html" target="_blank" rel="noreferrer">Kotlin Podの作成</a>の詳細については、こちらを参照してください。</p><h3 id="xcode-12ライブラリのサポート" tabindex="-1">Xcode 12ライブラリのサポート <a class="header-anchor" href="#xcode-12ライブラリのサポート" aria-label="Permalink to &quot;Xcode 12ライブラリのサポート&quot;">​</a></h3><p>Xcode 12に付属する新しいライブラリのサポートを追加しました。Kotlinコードからこれらのライブラリを使用できるようになりました。</p><h2 id="kotlin-multiplatform" tabindex="-1">Kotlin Multiplatform <a class="header-anchor" href="#kotlin-multiplatform" aria-label="Permalink to &quot;Kotlin Multiplatform&quot;">​</a></h2><h3 id="マルチプラットフォームライブラリの公開構造の更新" tabindex="-1">マルチプラットフォームライブラリの公開構造の更新 <a class="header-anchor" href="#マルチプラットフォームライブラリの公開構造の更新" aria-label="Permalink to &quot;マルチプラットフォームライブラリの公開構造の更新&quot;">​</a></h3><p>Kotlin 1.4.20以降、個別のメタデータ公開はなくなりました。メタデータアーティファクトは、ライブラリ全体を表す_ルート_公開に含まれるようになり、共通ソースセットへの依存関係として追加されると、適切なプラットフォーム固有のアーティファクトに自動的に解決されます。</p><p><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-publish-lib-setup.html" target="_blank" rel="noreferrer">マルチプラットフォームライブラリの公開</a>の詳細については、こちらを参照してください。</p><h4 id="以前のバージョンとの互換性" tabindex="-1">以前のバージョンとの互換性 <a class="header-anchor" href="#以前のバージョンとの互換性" aria-label="Permalink to &quot;以前のバージョンとの互換性&quot;">​</a></h4><p>この構造変更により、<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-share-on-platforms.html#share-code-on-similar-platforms" target="_blank" rel="noreferrer">階層型プロジェクト構造</a>を持つプロジェクト間の互換性が損なわれます。マルチプラットフォームプロジェクトとそれが依存するライブラリの両方が階層型プロジェクト構造を持つ場合、両方をKotlin 1.4.20以降に同時に更新する必要があります。Kotlin 1.4.20で公開されたライブラリは、以前のバージョンで公開されたプロジェクトからは使用できません。</p><p>階層型プロジェクト構造を持たないプロジェクトとライブラリは互換性を維持します。</p><h2 id="標準ライブラリ" tabindex="-1">標準ライブラリ <a class="header-anchor" href="#標準ライブラリ" aria-label="Permalink to &quot;標準ライブラリ&quot;">​</a></h2><p>Kotlin 1.4.20の標準ライブラリでは、ファイル操作のための新しい拡張機能とパフォーマンスの向上が提供されます。</p><ul><li><a href="#extensions-for-java-nio-file-path"><code>java.nio.file.Path</code>の拡張機能</a></li><li><a href="#improved-string-replace-function-performance"><code>String.replace</code>関数のパフォーマンス向上</a></li></ul><h3 id="java-nio-file-pathの拡張機能" tabindex="-1"><code>java.nio.file.Path</code>の拡張機能 <a class="header-anchor" href="#java-nio-file-pathの拡張機能" aria-label="Permalink to &quot;\`java.nio.file.Path\`の拡張機能&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p><code>java.nio.file.Path</code>の拡張機能は<a href="/ja/kotlin/components-stability">実験的機能</a>です。将来的に削除または変更される可能性があります。利用にはオプトインが必要です（詳細は以下を参照）。評価目的でのみ使用してください。これらの機能に関するフィードバックは<a href="https://youtrack.jetbrains.com/issues/KT" target="_blank" rel="noreferrer">YouTrack</a>までお寄せください。</p></div><p>現在、標準ライブラリは<code>java.nio.file.Path</code>の実験的な拡張機能を提供しています。現代のJVMファイルAPIをKotlinらしい方法で操作することが、<code>kotlin.io</code>パッケージの<code>java.io.File</code>拡張機能を使用するのと同様になりました。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// construct path with the div (/) operator</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> baseDir </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/base&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> subDir </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> baseDir </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;subdirectory&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// list files in a directory</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> kotlinFiles: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/home/user&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listDirectoryEntries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;*.kt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>これらの拡張機能は、<code>kotlin-stdlib-jdk7</code>モジュールの<code>kotlin.io.path</code>パッケージで利用できます。拡張機能を使用するには、実験的アノテーション<code>@ExperimentalPathApi</code>に<a href="/ja/kotlin/opt-in-requirements">オプトイン</a>する必要があります。</p><h3 id="string-replace関数のパフォーマンス向上" tabindex="-1"><code>String.replace</code>関数のパフォーマンス向上 <a class="header-anchor" href="#string-replace関数のパフォーマンス向上" aria-label="Permalink to &quot;\`String.replace\`関数のパフォーマンス向上&quot;">​</a></h3><p><code>String.replace()</code>の新しい実装により、関数の実行が高速化されます。大文字と小文字を区別するバリアントは<code>indexOf</code>に基づく手動置換ループを使用し、大文字と小文字を区別しないバリアントは正規表現マッチングを使用します。</p><h2 id="kotlin-android-extensions" tabindex="-1">Kotlin Android Extensions <a class="header-anchor" href="#kotlin-android-extensions" aria-label="Permalink to &quot;Kotlin Android Extensions&quot;">​</a></h2><p>1.4.20では、Kotlin Android Extensionsプラグインが非推奨となり、<code>Parcelable</code>実装ジェネレータは別のプラグインに移動されます。</p><ul><li><a href="#deprecation-of-synthetic-views">Synthetic Viewsの非推奨化</a></li><li><a href="#new-plugin-for-parcelable-implementation-generator">Parcelable実装ジェネレータ用の新しいプラグイン</a></li></ul><h3 id="synthetic-viewsの非推奨化" tabindex="-1">Synthetic Viewsの非推奨化 <a class="header-anchor" href="#synthetic-viewsの非推奨化" aria-label="Permalink to &quot;Synthetic Viewsの非推奨化&quot;">​</a></h3><p>_Synthetic views_は、UI要素とのインタラクションを簡素化し、ボイラープレートを削減するために、以前Kotlin Android Extensionsプラグインで導入されました。現在、Googleは同じことを行うネイティブメカニズムであるAndroid Jetpackの<a href="https://developer.android.com/topic/libraries/view-binding" target="_blank" rel="noreferrer">ビューバインディング</a>を提供しており、私たちはこれらを支持してSynthetic viewsを非推奨にしています。</p><p><code>kotlin-android-extensions</code>から<code>Parcelable</code>実装ジェネレータを抽出し、それ以外の部分（Synthetic views）の非推奨化サイクルを開始します。現時点では、これらは非推奨警告とともに動作し続けます。将来的には、プロジェクトを別のソリューションに切り替える必要があります。AndroidプロジェクトをSynthetic viewsからビューバインディングに移行するのに役立つ<a href="https://goo.gle/kotlin-android-extensions-deprecation" target="_blank" rel="noreferrer">ガイドライン</a>はこちらです。</p><h3 id="parcelable実装ジェネレータ用の新しいプラグイン" tabindex="-1">Parcelable実装ジェネレータ用の新しいプラグイン <a class="header-anchor" href="#parcelable実装ジェネレータ用の新しいプラグイン" aria-label="Permalink to &quot;Parcelable実装ジェネレータ用の新しいプラグイン&quot;">​</a></h3><p><code>Parcelable</code>実装ジェネレータは、新しい<code>kotlin-parcelize</code>プラグインで利用できるようになりました。<code>kotlin-android-extensions</code>の代わりにこのプラグインを適用してください。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p><code>kotlin-parcelize</code>と<code>kotlin-android-extensions</code>は、1つのモジュールで同時に適用することはできません。</p></div><p><code>@Parcelize</code>アノテーションは<code>kotlinx.parcelize</code>パッケージに移動されました。</p><p><code>Parcelable</code>実装ジェネレータの詳細については、<a href="https://developer.android.com/kotlin/parcelize" target="_blank" rel="noreferrer">Androidドキュメント</a>を参照してください。</p>`,114)]))}const E=i(l,[["render",n]]);export{k as __pageData,E as default};
