import{_ as i,c as a,o as n,ag as l}from"./chunks/framework.Bksy39di.js";const o=JSON.parse('{"title":"Kotlin 1.2의 새로운 기능","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kotlin/whatsnew12.md","filePath":"ko/kotlin/whatsnew12.md","lastUpdated":1754307826000}'),h={name:"ko/kotlin/whatsnew12.md"};function t(e,s,k,p,d,r){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="kotlin-1-2의-새로운-기능" tabindex="-1">Kotlin 1.2의 새로운 기능 <a class="header-anchor" href="#kotlin-1-2의-새로운-기능" aria-label="Permalink to &quot;Kotlin 1.2의 새로운 기능&quot;">​</a></h1><p><em>출시일: 2017년 11월 28일</em></p><h2 id="목차" tabindex="-1">목차 <a class="header-anchor" href="#목차" aria-label="Permalink to &quot;목차&quot;">​</a></h2><ul><li><a href="#multiplatform-projects-experimental">다중 플랫폼 프로젝트 (실험적 기능)</a></li><li><a href="#other-language-features">기타 언어 기능</a></li><li><a href="#standard-library">표준 라이브러리</a></li><li><a href="#jvm-backend">JVM 백엔드</a></li><li><a href="#javascript-backend">JavaScript 백엔드</a></li></ul><h2 id="다중-플랫폼-프로젝트-실험적-기능" tabindex="-1">다중 플랫폼 프로젝트 (실험적 기능) <a class="header-anchor" href="#다중-플랫폼-프로젝트-실험적-기능" aria-label="Permalink to &quot;다중 플랫폼 프로젝트 (실험적 기능)&quot;">​</a></h2><p>다중 플랫폼 프로젝트는 Kotlin 1.2의 새로운 <strong>실험적</strong> 기능으로, Kotlin이 지원하는 대상 플랫폼(JVM, JavaScript, 그리고 (향후) 네이티브) 간에 코드를 재사용할 수 있게 해줍니다. 다중 플랫폼 프로젝트에는 세 가지 종류의 모듈이 있습니다:</p><ul><li><em>공통</em> 모듈에는 어떤 플랫폼에도 특정되지 않은 코드와 플랫폼 종속적 API의 구현이 없는 선언이 포함됩니다.</li><li><em>플랫폼</em> 모듈에는 특정 플랫폼에 대한 공통 모듈의 플랫폼 종속적 선언 구현과 기타 플랫폼 종속적 코드가 포함됩니다.</li><li>일반 모듈은 특정 플랫폼을 대상으로 하며, 플랫폼 모듈의 종속성이 될 수도 있고 플랫폼 모듈에 의존할 수도 있습니다.</li></ul><p>특정 플랫폼용 다중 플랫폼 프로젝트를 컴파일하면 공통 및 플랫폼별 부분 모두에 대한 코드가 생성됩니다.</p><p>다중 플랫폼 프로젝트 지원의 핵심 기능은 <em>expected</em> 및 <em>actual</em> 선언을 통해 공통 코드의 플랫폼별 부분에 대한 의존성을 표현할 수 있다는 것입니다. <em>expected</em> 선언은 API(클래스, 인터페이스, 어노테이션, 최상위 선언 등)를 지정합니다. <em>actual</em> 선언은 API의 플랫폼 종속적 구현이거나 외부 라이브러리에 있는 API의 기존 구현을 참조하는 타입 별칭입니다. 다음은 예시입니다:</p><p>공통 코드에서:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// expected platform-specific API:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> hello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(world: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // usage of the expected API:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> greeting </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> hello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;multiplatform world&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(greeting)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> URL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(spec: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    open</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getHost</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    open</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getPath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>JVM 플랫폼 코드에서:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> hello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(world: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;Hello, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$world</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">, on the JVM platform!&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// using existing platform-specific implementation:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typealias</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> URL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.net.URL</span></span></code></pre></div><p>다중 플랫폼 프로젝트 구축에 대한 자세한 내용과 단계는 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/get-started.html" target="_blank" rel="noreferrer">다중 플랫폼 프로그래밍 문서</a>를 참조하세요.</p><h2 id="기타-언어-기능" tabindex="-1">기타 언어 기능 <a class="header-anchor" href="#기타-언어-기능" aria-label="Permalink to &quot;기타 언어 기능&quot;">​</a></h2><h3 id="어노테이션의-배열-리터럴" tabindex="-1">어노테이션의 배열 리터럴 <a class="header-anchor" href="#어노테이션의-배열-리터럴" aria-label="Permalink to &quot;어노테이션의 배열 리터럴&quot;">​</a></h3><p>Kotlin 1.2부터 어노테이션에 대한 배열 인수는 <code>arrayOf</code> 함수 대신 새로운 배열 리터럴 문법으로 전달할 수 있습니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@CacheConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cacheNames </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;books&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;default&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BookRepositoryImpl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>배열 리터럴 문법은 어노테이션 인수로 제한됩니다.</p><h3 id="lateinit-최상위-프로퍼티-및-지역-변수" tabindex="-1">lateinit 최상위 프로퍼티 및 지역 변수 <a class="header-anchor" href="#lateinit-최상위-프로퍼티-및-지역-변수" aria-label="Permalink to &quot;lateinit 최상위 프로퍼티 및 지역 변수&quot;">​</a></h3><p><code>lateinit</code> 변경자는 이제 최상위 프로퍼티와 지역 변수에서 사용할 수 있습니다. 후자는 예를 들어, 한 객체의 생성자 인수로 전달된 람다가 나중에 정의되어야 하는 다른 객체를 참조할 때 사용할 수 있습니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> next: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Node</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // A cycle of three nodes:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    lateinit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> third: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> second </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, next </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { third })</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> first </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, next </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { second })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    third </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, next </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { first })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nodes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> generateSequence</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(first) { it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Values in the cycle: \${nodes.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">take</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">joinToString</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> { it.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">() }}, ...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="lateinit-var-초기화-여부-확인" tabindex="-1">lateinit var 초기화 여부 확인 <a class="header-anchor" href="#lateinit-var-초기화-여부-확인" aria-label="Permalink to &quot;lateinit var 초기화 여부 확인&quot;">​</a></h3><p>이제 프로퍼티 참조에 <code>isInitialized</code>를 사용하여 <code>lateinit var</code>가 초기화되었는지 확인할 수 있습니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    lateinit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lateinitVar: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> initializationLogic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;isInitialized before assignment: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lateinitVar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.isInitialized)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        lateinitVar </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;value&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;isInitialized after assignment: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lateinitVar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.isInitialized)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">initializationLogic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="기본-함수-파라미터를-가진-인라인-함수" tabindex="-1">기본 함수 파라미터를 가진 인라인 함수 <a class="header-anchor" href="#기본-함수-파라미터를-가진-인라인-함수" aria-label="Permalink to &quot;기본 함수 파라미터를 가진 인라인 함수&quot;">​</a></h3><p>인라인 함수는 이제 인라인된 함수 파라미터에 대한 기본값을 가질 수 있습니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">inline</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">E</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Iterable</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">E</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">strings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(transform: (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">E</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) -&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(it) }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> defaultStrings </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">strings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> customStrings </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">strings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$it</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;defaultStrings = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$defaultStrings</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;customStrings = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$customStrings</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="명시적-캐스트-정보가-타입-추론에-사용됨" tabindex="-1">명시적 캐스트 정보가 타입 추론에 사용됨 <a class="header-anchor" href="#명시적-캐스트-정보가-타입-추론에-사용됨" aria-label="Permalink to &quot;명시적 캐스트 정보가 타입 추론에 사용됨&quot;">​</a></h3><p>Kotlin 컴파일러는 이제 타입 추론에서 타입 캐스트 정보를 사용할 수 있습니다. 타입 파라미터 <code>T</code>를 반환하는 제네릭 메서드를 호출하고 반환 값을 특정 타입 <code>Foo</code>로 캐스팅하는 경우, 컴파일러는 이제 이 호출에 대한 <code>T</code>가 <code>Foo</code> 타입에 바인딩되어야 함을 이해합니다.</p><p>이는 Android API 레벨 26에서 제네릭 <code>findViewById</code> 호출을 컴파일러가 이제 올바르게 분석할 수 있기 때문에 Android 개발자에게 특히 중요합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> button </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> findViewById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(R.id.button) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Button</span></span></code></pre></div><h3 id="스마트-캐스트-개선-사항" tabindex="-1">스마트 캐스트 개선 사항 <a class="header-anchor" href="#스마트-캐스트-개선-사항" aria-label="Permalink to &quot;스마트 캐스트 개선 사항&quot;">​</a></h3><p>변수가 안전 호출 식에서 할당되고 null 검사가 이루어질 때, 스마트 캐스트는 이제 안전 호출 리시버에도 적용됩니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> countFirst</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> firstChar </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? CharSequence)?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">firstOrNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (firstChar </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> firstChar } </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// s: Any는 CharSequence로 스마트 캐스트됩니다.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> firstItem </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? Iterable</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;*&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">firstOrNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (firstItem </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> firstItem } </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// s: Any는 Iterable&lt;*&gt;로 스마트 캐스트됩니다.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> string </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;abacaba&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> countInString </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> countFirst</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(string)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;called on </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;$string\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$countInString</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> list </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> countInList </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> countFirst</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(list)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;called on </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$list</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$countInList</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>또한, 람다 내부의 스마트 캐스트는 람다 이전에만 수정되는 지역 변수에 대해 허용됩니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> flag </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> args.size </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (flag) x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Yahoo!&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x.length) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// x는 String으로 스마트 캐스트됩니다.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="this-foo의-축약형으로-foo-지원" tabindex="-1"><code>this::foo</code>의 축약형으로 <code>::foo</code> 지원 <a class="header-anchor" href="#this-foo의-축약형으로-foo-지원" aria-label="Permalink to &quot;\`this::foo\`의 축약형으로 \`::foo\` 지원&quot;">​</a></h3><p><code>this</code>의 멤버에 대한 바운드 호출 가능 참조는 이제 명시적 리시버 없이 <code>this::foo</code> 대신 <code>::foo</code>로 작성할 수 있습니다. 이는 또한 외부 리시버의 멤버를 참조하는 람다에서 호출 가능 참조를 더 편리하게 사용할 수 있게 합니다.</p><h3 id="변경-사항-try-블록-이후의-건전한-스마트-캐스트" tabindex="-1">변경 사항: try 블록 이후의 건전한 스마트 캐스트 <a class="header-anchor" href="#변경-사항-try-블록-이후의-건전한-스마트-캐스트" aria-label="Permalink to &quot;변경 사항: try 블록 이후의 건전한 스마트 캐스트&quot;">​</a></h3><p>이전에는 Kotlin이 <code>try</code> 블록 내부에서 이루어진 할당을 블록 이후의 스마트 캐스트에 사용했는데, 이는 타입 안정성 및 null 안정성을 깨뜨리고 런타임 오류로 이어질 수 있었습니다. 이번 릴리스는 이 문제를 해결하여 스마트 캐스트를 더 엄격하게 만들었지만, 이러한 스마트 캐스트에 의존하던 일부 코드는 더 이상 작동하지 않을 수 있습니다.</p><p>이전 스마트 캐스트 동작으로 전환하려면 컴파일러 인수로 폴백 플래그 <code>-Xlegacy-smart-cast-after-try</code>를 전달하세요. Kotlin 1.3에서는 더 이상 사용되지 않습니다.</p><h3 id="지원-중단-copy를-오버라이드하는-데이터-클래스" tabindex="-1">지원 중단: <code>copy</code>를 오버라이드하는 데이터 클래스 <a class="header-anchor" href="#지원-중단-copy를-오버라이드하는-데이터-클래스" aria-label="Permalink to &quot;지원 중단: \`copy\`를 오버라이드하는 데이터 클래스&quot;">​</a></h3><p>데이터 클래스가 동일한 시그니처를 가진 <code>copy</code> 함수를 이미 가지고 있는 타입에서 파생될 때, 데이터 클래스에 대해 생성된 <code>copy</code> 구현은 슈퍼타입의 기본값을 사용하게 되어 직관적이지 않은 동작을 유발하거나, 슈퍼타입에 기본 파라미터가 없으면 런타임에 실패할 수 있었습니다.</p><p><code>copy</code> 충돌을 유발하는 상속은 Kotlin 1.2에서 경고와 함께 지원이 중단되었으며, Kotlin 1.3에서는 오류가 됩니다.</p><h3 id="지원-중단-열거형-항목-내의-중첩-타입" tabindex="-1">지원 중단: 열거형 항목 내의 중첩 타입 <a class="header-anchor" href="#지원-중단-열거형-항목-내의-중첩-타입" aria-label="Permalink to &quot;지원 중단: 열거형 항목 내의 중첩 타입&quot;">​</a></h3><p>열거형 항목 내에서 <code>inner class</code>가 아닌 중첩 타입을 정의하는 것은 초기화 로직의 문제로 인해 지원이 중단되었습니다. 이는 Kotlin 1.2에서 경고를 발생시키고 Kotlin 1.3에서는 오류가 됩니다.</p><h3 id="지원-중단-vararg의-단일-명명된-인자" tabindex="-1">지원 중단: <code>vararg</code>의 단일 명명된 인자 <a class="header-anchor" href="#지원-중단-vararg의-단일-명명된-인자" aria-label="Permalink to &quot;지원 중단: \`vararg\`의 단일 명명된 인자&quot;">​</a></h3><p>어노테이션의 배열 리터럴과의 일관성을 위해, <code>vararg</code> 파라미터에 단일 항목을 명명된 형식(<code>foo(items = i)</code>)으로 전달하는 것이 지원 중단되었습니다. 해당하는 배열 팩토리 함수와 함께 스프레드 연산자를 사용하세요:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(items </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">arrayOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><p>이러한 경우에 불필요한 배열 생성을 제거하는 최적화가 있어 성능 저하를 방지합니다. 단일 인자 형식은 Kotlin 1.2에서 경고를 생성하며 Kotlin 1.3에서는 제거될 예정입니다.</p><h3 id="지원-중단-throwable을-확장하는-제네릭-클래스의-내부-클래스" tabindex="-1">지원 중단: <code>Throwable</code>을 확장하는 제네릭 클래스의 내부 클래스 <a class="header-anchor" href="#지원-중단-throwable을-확장하는-제네릭-클래스의-내부-클래스" aria-label="Permalink to &quot;지원 중단: \`Throwable\`을 확장하는 제네릭 클래스의 내부 클래스&quot;">​</a></h3><p><code>Throwable</code>을 상속하는 제네릭 타입의 내부 클래스는 throw-catch 시나리오에서 타입 안정성을 위반할 수 있으므로, Kotlin 1.2에서 경고와 함께 지원이 중단되었으며 Kotlin 1.3에서는 오류가 됩니다.</p><h3 id="지원-중단-읽기-전용-프로퍼티의-지원-필드-변경" tabindex="-1">지원 중단: 읽기 전용 프로퍼티의 지원 필드 변경 <a class="header-anchor" href="#지원-중단-읽기-전용-프로퍼티의-지원-필드-변경" aria-label="Permalink to &quot;지원 중단: 읽기 전용 프로퍼티의 지원 필드 변경&quot;">​</a></h3><p>사용자 정의 getter에서 <code>field = ...</code>를 할당하여 읽기 전용 프로퍼티의 지원 필드를 변경하는 것은 Kotlin 1.2에서 경고와 함께 지원이 중단되었으며 Kotlin 1.3에서는 오류가 됩니다.</p><h2 id="표준-라이브러리" tabindex="-1">표준 라이브러리 <a class="header-anchor" href="#표준-라이브러리" aria-label="Permalink to &quot;표준 라이브러리&quot;">​</a></h2><h3 id="kotlin-표준-라이브러리-아티팩트-및-분할-패키지" tabindex="-1">Kotlin 표준 라이브러리 아티팩트 및 분할 패키지 <a class="header-anchor" href="#kotlin-표준-라이브러리-아티팩트-및-분할-패키지" aria-label="Permalink to &quot;Kotlin 표준 라이브러리 아티팩트 및 분할 패키지&quot;">​</a></h3><p>Kotlin 표준 라이브러리는 이제 Java 9 모듈 시스템과 완벽하게 호환되며, Java 9 모듈 시스템은 분할 패키지(동일한 패키지 내 클래스를 선언하는 여러 JAR 파일)를 금지합니다. 이를 지원하기 위해 이전 <code>kotlin-stdlib-jre7</code> 및 <code>kotlin-stdlib-jre8</code>을 대체하는 새로운 아티팩트 <code>kotlin-stdlib-jdk7</code> 및 <code>kotlin-stdlib-jdk8</code>이 도입되었습니다.</p><p>새로운 아티팩트의 선언은 Kotlin 관점에서는 동일한 패키지 이름으로 보이지만, Java의 경우 다른 패키지 이름을 가집니다. 따라서 새로운 아티팩트로 전환해도 소스 코드에 변경이 필요하지 않습니다.</p><p>새로운 모듈 시스템과의 호환성을 보장하기 위한 또 다른 변경 사항은 <code>kotlin-reflect</code> 라이브러리에서 <code>kotlin.reflect</code> 패키지의 지원 중단된 선언을 제거하는 것입니다. 만약 이를 사용하고 있었다면, Kotlin 1.1부터 지원되는 <code>kotlin.reflect.full</code> 패키지의 선언을 사용하도록 전환해야 합니다.</p><h3 id="windowed-chunked-zipwithnext" tabindex="-1"><code>windowed</code>, <code>chunked</code>, <code>zipWithNext</code> <a class="header-anchor" href="#windowed-chunked-zipwithnext" aria-label="Permalink to &quot;\`windowed\`, \`chunked\`, \`zipWithNext\`&quot;">​</a></h3><p><code>Iterable&lt;T&gt;</code>, <code>Sequence&lt;T&gt;</code>, <code>CharSequence</code>를 위한 새로운 확장 함수는 버퍼링 또는 배치 처리(<code>chunked</code>), 슬라이딩 윈도우 및 슬라이딩 평균 계산(<code>windowed</code>), 연속된 항목 쌍 처리(<code>zipWithNext</code>)와 같은 사용 사례를 다룹니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> items </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> it }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> chunkedIntoLists </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> items.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">chunked</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> points3d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> items.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">chunked</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { (x, y, z) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Triple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, y, z) }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> windowed </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> items.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">windowed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> slidingAverage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> items.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">windowed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">average</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pairwiseDifferences </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> items.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">zipWithNext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { a, b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;items: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$items</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;chunked into lists: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$chunkedIntoLists</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;3D points: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$points3d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;windowed by 4: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$windowed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sliding average by 4: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$slidingAverage</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;pairwise differences: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$pairwiseDifferences</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="fill-replaceall-shuffle-shuffled" tabindex="-1"><code>fill</code>, <code>replaceAll</code>, <code>shuffle</code>/<code>shuffled</code> <a class="header-anchor" href="#fill-replaceall-shuffle-shuffled" aria-label="Permalink to &quot;\`fill\`, \`replaceAll\`, \`shuffle\`/\`shuffled\`&quot;">​</a></h3><p>리스트 조작을 위한 확장 함수 세트가 추가되었습니다: <code>MutableList</code>를 위한 <code>fill</code>, <code>replaceAll</code>, <code>shuffle</code>, 그리고 읽기 전용 <code>List</code>를 위한 <code>shuffled</code>입니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> items </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toMutableList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    items.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">shuffle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Shuffled items: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$items</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    items.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replaceAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Items doubled: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$items</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    items.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fill</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Items filled with 5: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$items</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="kotlin-stdlib의-수학-연산" tabindex="-1"><code>kotlin-stdlib</code>의 수학 연산 <a class="header-anchor" href="#kotlin-stdlib의-수학-연산" aria-label="Permalink to &quot;\`kotlin-stdlib\`의 수학 연산&quot;">​</a></h3><p>오랜 요청에 부응하여 Kotlin 1.2는 JVM과 JS에 공통으로 사용되는 수학 연산을 위한 <code>kotlin.math</code> API를 추가했으며, 다음을 포함합니다:</p><ul><li>상수: <code>PI</code> 및 <code>E</code></li><li>삼각 함수: <code>cos</code>, <code>sin</code>, <code>tan</code> 및 역함수: <code>acos</code>, <code>asin</code>, <code>atan</code>, <code>atan2</code></li><li>쌍곡선 함수: <code>cosh</code>, <code>sinh</code>, <code>tanh</code> 및 역함수: <code>acosh</code>, <code>asinh</code>, <code>atanh</code></li><li>지수: <code>pow</code>(확장 함수), <code>sqrt</code>, <code>hypot</code>, <code>exp</code>, <code>expm1</code></li><li>로그: <code>log</code>, <code>log2</code>, <code>log10</code>, <code>ln</code>, <code>ln1p</code></li><li>반올림: <ul><li><code>ceil</code>, <code>floor</code>, <code>truncate</code>, <code>round</code>(반올림) 함수</li><li><code>roundToInt</code>, <code>roundToLong</code>(정수로 반올림) 확장 함수</li></ul></li><li>부호 및 절대값: <ul><li><code>abs</code> 및 <code>sign</code> 함수</li><li><code>absoluteValue</code> 및 <code>sign</code> 확장 프로퍼티</li><li><code>withSign</code> 확장 함수</li></ul></li><li>두 값의 <code>max</code> 및 <code>min</code></li><li>이진 표현: <ul><li><code>ulp</code> 확장 프로퍼티</li><li><code>nextUp</code>, <code>nextDown</code>, <code>nextTowards</code> 확장 함수</li><li><code>toBits</code>, <code>toRawBits</code>, <code>Double.fromBits</code>(이들은 <code>kotlin</code> 패키지에 있습니다)</li></ul></li></ul><p>동일한 함수 세트(상수 제외)는 <code>Float</code> 인자에 대해서도 사용 가능합니다.</p><h3 id="biginteger-및-bigdecimal-연산자-및-변환" tabindex="-1"><code>BigInteger</code> 및 <code>BigDecimal</code> 연산자 및 변환 <a class="header-anchor" href="#biginteger-및-bigdecimal-연산자-및-변환" aria-label="Permalink to &quot;\`BigInteger\` 및 \`BigDecimal\` 연산자 및 변환&quot;">​</a></h3><p>Kotlin 1.2는 <code>BigInteger</code> 및 <code>BigDecimal</code>와 연산하고 다른 숫자 타입에서 이들을 생성하기 위한 함수 세트를 도입합니다. 다음은 다음과 같습니다:</p><ul><li><code>Int</code> 및 <code>Long</code>을 위한 <code>toBigInteger</code></li><li><code>Int</code>, <code>Long</code>, <code>Float</code>, <code>Double</code>, <code>BigInteger</code>를 위한 <code>toBigDecimal</code></li><li>산술 및 비트 연산자 함수: <ul><li>이항 연산자 <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code> 및 중위 함수 <code>and</code>, <code>or</code>, <code>xor</code>, <code>shl</code>, <code>shr</code></li><li>단항 연산자 <code>-</code>, <code>++</code>, <code>--</code> 및 함수 <code>inv</code></li></ul></li></ul><h3 id="부동-소수점-비트-변환" tabindex="-1">부동 소수점 비트 변환 <a class="header-anchor" href="#부동-소수점-비트-변환" aria-label="Permalink to &quot;부동 소수점 비트 변환&quot;">​</a></h3><p><code>Double</code> 및 <code>Float</code>를 비트 표현으로 변환하거나 비트 표현에서 변환하는 새로운 함수가 추가되었습니다:</p><ul><li><code>Double</code>의 경우 <code>Long</code>, <code>Float</code>의 경우 <code>Int</code>를 반환하는 <code>toBits</code> 및 <code>toRawBits</code></li><li>비트 표현에서 부동 소수점 숫자를 생성하기 위한 <code>Double.fromBits</code> 및 <code>Float.fromBits</code></li></ul><h3 id="regex가-이제-직렬화-가능" tabindex="-1"><code>Regex</code>가 이제 직렬화 가능 <a class="header-anchor" href="#regex가-이제-직렬화-가능" aria-label="Permalink to &quot;\`Regex\`가 이제 직렬화 가능&quot;">​</a></h3><p><code>kotlin.text.Regex</code> 클래스는 <code>Serializable</code>이 되었으며 이제 직렬화 가능한 계층 구조에서 사용할 수 있습니다.</p><h3 id="closeable-use는-가능하면-throwable-addsuppressed를-호출합니다" tabindex="-1"><code>Closeable.use</code>는 가능하면 <code>Throwable.addSuppressed</code>를 호출합니다. <a class="header-anchor" href="#closeable-use는-가능하면-throwable-addsuppressed를-호출합니다" aria-label="Permalink to &quot;\`Closeable.use\`는 가능하면 \`Throwable.addSuppressed\`를 호출합니다.&quot;">​</a></h3><p><code>Closeable.use</code> 함수는 다른 예외 발생 후 리소스를 닫는 도중 예외가 발생할 경우 <code>Throwable.addSuppressed</code>를 호출합니다.</p><p>이 동작을 활성화하려면 종속성에 <code>kotlin-stdlib-jdk7</code>이 있어야 합니다.</p><h2 id="jvm-백엔드" tabindex="-1">JVM 백엔드 <a class="header-anchor" href="#jvm-백엔드" aria-label="Permalink to &quot;JVM 백엔드&quot;">​</a></h2><h3 id="생성자-호출-정규화" tabindex="-1">생성자 호출 정규화 <a class="header-anchor" href="#생성자-호출-정규화" aria-label="Permalink to &quot;생성자 호출 정규화&quot;">​</a></h3><p>Kotlin 1.0 버전부터 Kotlin은 try-catch 식 및 인라인 함수 호출과 같은 복잡한 제어 흐름을 가진 식을 지원했습니다. 이러한 코드는 Java Virtual Machine 사양에 따라 유효합니다. 불행히도, 일부 바이트코드 처리 도구는 생성자 호출의 인수에 이러한 식이 있을 때 이러한 코드를 제대로 처리하지 못합니다.</p><p>이러한 바이트코드 처리 도구 사용자들의 이 문제를 완화하기 위해, 컴파일러가 이러한 구조에 대해 더 Java와 유사한 바이트코드를 생성하도록 지시하는 명령줄 컴파일러 옵션(<code>-Xnormalize-constructor-calls=MODE</code>)을 추가했습니다. 여기서 <code>MODE</code>는 다음 중 하나입니다:</p><ul><li><code>disable</code>(기본값) – Kotlin 1.0 및 1.1과 동일한 방식으로 바이트코드 생성.</li><li><code>enable</code> – 생성자 호출에 대해 Java와 유사한 바이트코드 생성. 이는 클래스 로드 및 초기화 순서를 변경할 수 있습니다.</li><li><code>preserve-class-initialization</code> – 클래스 초기화 순서가 보존되도록 보장하면서 생성자 호출에 대해 Java와 유사한 바이트코드 생성. 이는 애플리케이션의 전체 성능에 영향을 미칠 수 있습니다. 여러 클래스 간에 공유되고 클래스 초기화 시 업데이트되는 복잡한 상태가 있는 경우에만 사용하십시오.</li></ul><p>&quot;수동&quot; 해결 방법은 제어 흐름이 있는 하위 식의 값을 호출 인자 내에서 직접 평가하는 대신 변수에 저장하는 것입니다. 이는 <code>-Xnormalize-constructor-calls=enable</code>과 유사합니다.</p><h3 id="java-기본-메서드-호출" tabindex="-1">Java 기본 메서드 호출 <a class="header-anchor" href="#java-기본-메서드-호출" aria-label="Permalink to &quot;Java 기본 메서드 호출&quot;">​</a></h3><p>Kotlin 1.2 이전에는 JVM 1.6을 대상으로 하면서 Java 기본 메서드를 오버라이드하는 인터페이스 멤버가 슈퍼 호출에서 <code>Super calls to Java default methods are deprecated in JVM target 1.6. Recompile with &#39;-jvm-target 1.8&#39;</code> 경고를 발생시켰습니다. Kotlin 1.2에서는 대신 <strong>오류</strong>가 발생하므로, 해당 코드는 JVM 타겟 1.8로 컴파일해야 합니다.</p><h3 id="변경-사항-플랫폼-타입에-대한-x-equals-null-의-일관된-동작" tabindex="-1">변경 사항: 플랫폼 타입에 대한 <code>x.equals(null)</code>의 일관된 동작 <a class="header-anchor" href="#변경-사항-플랫폼-타입에-대한-x-equals-null-의-일관된-동작" aria-label="Permalink to &quot;변경 사항: 플랫폼 타입에 대한 \`x.equals(null)\`의 일관된 동작&quot;">​</a></h3><p>Java 기본 타입(<code>Int!</code>, <code>Boolean!</code>, <code>Short!</code>, <code>Long!</code>, <code>Float!</code>, <code>Double!</code>, <code>Char!</code>)에 매핑되는 플랫폼 타입에서 <code>x.equals(null)</code>을 호출하면 <code>x</code>가 null일 때 잘못되게 <code>true</code>를 반환했습니다. Kotlin 1.2부터 플랫폼 타입의 null 값에 대해 <code>x.equals(...)</code>를 호출하면 <strong>NPE를 발생시킵니다</strong>(하지만 <code>x == ...</code>는 그렇지 않습니다).</p><p>1.2 이전 동작으로 돌아가려면 컴파일러에 플래그 <code>-Xno-exception-on-explicit-equals-for-boxed-null</code>을 전달하세요.</p><h3 id="변경-사항-인라인된-확장-리시버를-통한-플랫폼-null-누출-수정" tabindex="-1">변경 사항: 인라인된 확장 리시버를 통한 플랫폼 null 누출 수정 <a class="header-anchor" href="#변경-사항-인라인된-확장-리시버를-통한-플랫폼-null-누출-수정" aria-label="Permalink to &quot;변경 사항: 인라인된 확장 리시버를 통한 플랫폼 null 누출 수정&quot;">​</a></h3><p>플랫폼 타입의 null 값에 대해 호출된 인라인 확장 함수는 리시버의 null 검사를 하지 않았고, 따라서 null이 다른 코드로 누출되는 것을 허용했습니다. Kotlin 1.2는 호출 사이트에서 이 검사를 강제하며, 리시버가 null이면 예외를 발생시킵니다.</p><p>이전 동작으로 전환하려면 컴파일러에 폴백 플래그 <code>-Xno-receiver-assertions</code>를 전달하세요.</p><h2 id="javascript-백엔드" tabindex="-1">JavaScript 백엔드 <a class="header-anchor" href="#javascript-백엔드" aria-label="Permalink to &quot;JavaScript 백엔드&quot;">​</a></h2><h3 id="typedarrays-지원-기본-활성화" tabindex="-1">TypedArrays 지원 기본 활성화 <a class="header-anchor" href="#typedarrays-지원-기본-활성화" aria-label="Permalink to &quot;TypedArrays 지원 기본 활성화&quot;">​</a></h3><p>Kotlin 기본 배열(예: <code>IntArray</code>, <code>DoubleArray</code>)을 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays" target="_blank" rel="noreferrer">JavaScript TypedArray</a>로 변환하는 JS TypedArray 지원은 이전에 선택적 기능이었으나, 이제 기본적으로 활성화되었습니다.</p><h2 id="도구" tabindex="-1">도구 <a class="header-anchor" href="#도구" aria-label="Permalink to &quot;도구&quot;">​</a></h2><h3 id="경고를-오류로-처리" tabindex="-1">경고를 오류로 처리 <a class="header-anchor" href="#경고를-오류로-처리" aria-label="Permalink to &quot;경고를 오류로 처리&quot;">​</a></h3><p>컴파일러는 이제 모든 경고를 오류로 처리하는 옵션을 제공합니다. 명령줄에서 <code>-Werror</code>를 사용하거나 다음 Gradle 스니펫을 사용하십시오:</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compileKotlin {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    kotlinOptions</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">allWarningsAsErrors </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,102)]))}const g=i(h,[["render",t]]);export{o as __pageData,g as default};
