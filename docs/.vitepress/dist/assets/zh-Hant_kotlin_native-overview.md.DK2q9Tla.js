import{_ as a}from"./chunks/native-get-started-button.Cbc-25HC.js";import{_ as e,c as i,o as l,ag as n}from"./chunks/framework.Bksy39di.js";const m=JSON.parse('{"title":"Kotlin/Native","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/native-overview.md","filePath":"zh-Hant/kotlin/native-overview.md","lastUpdated":1754307826000}'),o={name:"zh-Hant/kotlin/native-overview.md"};function r(p,t,h,c,v,s){return l(),i("div",null,t[0]||(t[0]=[n('<h1 id="kotlin-native" tabindex="-1">Kotlin/Native <a class="header-anchor" href="#kotlin-native" aria-label="Permalink to &quot;Kotlin/Native&quot;">​</a></h1><p>Kotlin/Native 是一種技術，用於將 Kotlin 程式碼編譯為無需虛擬機器即可執行的原生二進位檔。Kotlin/Native 包含一個基於 <a href="https://llvm.org/" target="_blank" rel="noreferrer">LLVM</a> 的 Kotlin 編譯器後端，以及 Kotlin 標準函式庫的原生實作。</p><h2 id="為什麼選擇-kotlin-native" tabindex="-1">為什麼選擇 Kotlin/Native？ <a class="header-anchor" href="#為什麼選擇-kotlin-native" aria-label="Permalink to &quot;為什麼選擇 Kotlin/Native？&quot;">​</a></h2><p>Kotlin/Native 主要設計用於允許針對虛擬機器不適用或不可行的平台進行編譯，例如嵌入式裝置或 iOS。當您需要產生一個無需額外執行時環境或虛擬機器的自包含程式時，它是理想的選擇。</p><p>將編譯後的 Kotlin 程式碼整合到以 C、C++、Swift、Objective-C 和其他語言編寫的現有專案中非常容易。您也可以直接從 Kotlin/Native 中使用現有的原生程式碼、靜態或動態 C 函式庫、Swift/Objective-C 框架、圖形引擎以及任何其他內容。</p><p><a href="/zh-Hant/kotlin/native-get-started"><img src="'+a+'" width="350" alt="開始使用 Kotlin/Native" style=""></a></p><h2 id="目標平台" tabindex="-1">目標平台 <a class="header-anchor" href="#目標平台" aria-label="Permalink to &quot;目標平台&quot;">​</a></h2><p>Kotlin/Native 支援以下平台：</p><ul><li><p>Linux</p></li><li><p>Windows（透過 <a href="https://www.mingw-w64.org/" target="_blank" rel="noreferrer">MinGW</a>）</p></li><li><p><a href="https://developer.android.com/ndk" target="_blank" rel="noreferrer">Android NDK</a></p></li><li><p>適用於 macOS、iOS、tvOS 和 watchOS 的 Apple 目標</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>若要編譯 Apple 目標，您需要安裝 <a href="https://apps.apple.com/us/app/xcode/id497799835" target="_blank" rel="noreferrer">Xcode</a> 及其命令列工具。</p></div></li></ul><p><a href="/zh-Hant/kotlin/native-target-support">查看支援目標的完整列表</a>。</p><h2 id="互通性" tabindex="-1">互通性 <a class="header-anchor" href="#互通性" aria-label="Permalink to &quot;互通性&quot;">​</a></h2><p>Kotlin/Native 支援與不同作業系統的原生程式語言雙向互通。編譯器可以為許多平台建立執行檔、靜態或動態 C 函式庫，以及 Swift/Objective-C 框架。</p><h3 id="與-c-的互通性" tabindex="-1">與 C 的互通性 <a class="header-anchor" href="#與-c-的互通性" aria-label="Permalink to &quot;與 C 的互通性&quot;">​</a></h3><p>Kotlin/Native 提供<a href="/zh-Hant/kotlin/native-c-interop">與 C 的互通性</a>。您可以直接從 Kotlin 程式碼中使用現有的 C 函式庫。</p><p>若要了解更多，請完成以下教學：</p><ul><li><a href="/zh-Hant/kotlin/native-dynamic-libraries">為 C/C++ 專案建立帶有 C 標頭的動態函式庫</a></li><li><a href="/zh-Hant/kotlin/mapping-primitive-data-types-from-c">了解 C 型別如何映射到 Kotlin</a></li><li><a href="/zh-Hant/kotlin/native-app-with-c-and-libcurl">使用 C 互通性和 libcurl 建立原生 HTTP 用戶端</a></li></ul><h3 id="與-swift-objective-c-的互通性" tabindex="-1">與 Swift/Objective-C 的互通性 <a class="header-anchor" href="#與-swift-objective-c-的互通性" aria-label="Permalink to &quot;與 Swift/Objective-C 的互通性&quot;">​</a></h3><p>Kotlin/Native 提供<a href="/zh-Hant/kotlin/native-objc-interop">透過 Objective-C 與 Swift 的互通性</a>。您可以直接從 macOS 和 iOS 上的 Swift/Objective-C 應用程式中使用 Kotlin 程式碼。</p><p>若要了解更多，請完成<a href="/zh-Hant/kotlin/apple-framework">Kotlin/Native 作為 Apple 框架</a>教學。</p><h2 id="跨平台共用程式碼" tabindex="-1">跨平台共用程式碼 <a class="header-anchor" href="#跨平台共用程式碼" aria-label="Permalink to &quot;跨平台共用程式碼&quot;">​</a></h2><p>Kotlin/Native 包含一套預建置的<a href="/zh-Hant/kotlin/native-platform-libs">平台函式庫</a>，有助於在專案之間共用 Kotlin 程式碼。POSIX、gzip、OpenGL、Metal、Foundation 和許多其他流行的函式庫和 Apple 框架都已預先匯入並作為 Kotlin/Native 函式庫包含在編譯器套件中。</p><p>Kotlin/Native 是 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/get-started.html" target="_blank" rel="noreferrer">Kotlin 多平台</a>技術的一部分，該技術有助於在多個平台之間共用通用程式碼，包括 Android、iOS、JVM、網頁和原生。多平台函式庫為通用 Kotlin 程式碼提供必要的 API，並允許在一個地方用 Kotlin 編寫專案的共用部分。</p><h2 id="記憶體管理員" tabindex="-1">記憶體管理員 <a class="header-anchor" href="#記憶體管理員" aria-label="Permalink to &quot;記憶體管理員&quot;">​</a></h2><p>Kotlin/Native 使用與 JVM 和 Go 類似的自動<a href="/zh-Hant/kotlin/native-memory-manager">記憶體管理員</a>。它擁有自己的追蹤式垃圾收集器，該收集器也與 Swift/Objective-C 的 ARC 整合。</p><p>記憶體消耗由客製化記憶體配置器控制。它優化記憶體使用並協助防止記憶體配置的突然激增。</p>',25)]))}const b=e(o,[["render",r]]);export{m as __pageData,b as default};
