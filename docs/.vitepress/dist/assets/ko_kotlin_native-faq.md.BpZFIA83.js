import{_ as k,C as l,c as p,o as r,ag as o,G as e,w as t,j as i,a}from"./chunks/framework.Bksy39di.js";const v=JSON.parse('{"title":"Kotlin/Native 자주 묻는 질문","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kotlin/native-faq.md","filePath":"ko/kotlin/native-faq.md","lastUpdated":1754307826000}'),d={name:"ko/kotlin/native-faq.md"};function c(E,s,g,y,m,b){const n=l("tab"),h=l("tabs");return r(),p("div",null,[s[2]||(s[2]=o(`<h1 id="kotlin-native-자주-묻는-질문" tabindex="-1">Kotlin/Native 자주 묻는 질문 <a class="header-anchor" href="#kotlin-native-자주-묻는-질문" aria-label="Permalink to &quot;Kotlin/Native 자주 묻는 질문&quot;">​</a></h1><h2 id="내-프로그램을-어떻게-실행하나요" tabindex="-1">내 프로그램을 어떻게 실행하나요? <a class="header-anchor" href="#내-프로그램을-어떻게-실행하나요" aria-label="Permalink to &quot;내 프로그램을 어떻게 실행하나요?&quot;">​</a></h2><p>전달된 인수에 관심이 없다면 최상위 함수 <code>fun main(args: Array&lt;String&gt;)</code> 또는 <code>fun main()</code>을 정의하세요. 이때 함수가 패키지 안에 있지 않도록 확인해야 합니다. 또한, 컴파일러 스위치 <code>-entry</code>를 사용하여 <code>Array&lt;String&gt;</code> 또는 인수를 받지 않고 <code>Unit</code>을 반환하는 모든 함수를 진입점으로 설정할 수 있습니다.</p><h2 id="kotlin-native-메모리-관리-모델이란-무엇인가요" tabindex="-1">Kotlin/Native 메모리 관리 모델이란 무엇인가요? <a class="header-anchor" href="#kotlin-native-메모리-관리-모델이란-무엇인가요" aria-label="Permalink to &quot;Kotlin/Native 메모리 관리 모델이란 무엇인가요?&quot;">​</a></h2><p>Kotlin/Native는 Java나 Swift가 제공하는 것과 유사한 자동화된 메모리 관리 방식을 사용합니다.</p><p><a href="/ko/kotlin/native-memory-manager">Kotlin/Native 메모리 관리자 알아보기</a></p><h2 id="공유-라이브러리를-어떻게-생성하나요" tabindex="-1">공유 라이브러리를 어떻게 생성하나요? <a class="header-anchor" href="#공유-라이브러리를-어떻게-생성하나요" aria-label="Permalink to &quot;공유 라이브러리를 어떻게 생성하나요?&quot;">​</a></h2><p>Gradle 빌드 파일에서 <code>-produce dynamic</code> 컴파일러 옵션 또는 <code>binaries.sharedLib()</code>를 사용하세요.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;mylib&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        binaries.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sharedLib</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>이는 플랫폼별 공유 객체(Linux에서는 <code>.so</code>, macOS에서는 <code>.dylib</code>, Windows 대상에서는 <code>.dll</code>)와 C 언어 헤더를 생성하여, C/C++ 코드에서 Kotlin/Native 프로그램의 모든 공개 API를 사용할 수 있도록 합니다.</p><p><a href="/ko/kotlin/native-dynamic-libraries">동적 라이브러리로서의 Kotlin/Native 튜토리얼 완료하기</a></p><h2 id="정적-라이브러리-또는-객체-파일을-어떻게-생성하나요" tabindex="-1">정적 라이브러리 또는 객체 파일을 어떻게 생성하나요? <a class="header-anchor" href="#정적-라이브러리-또는-객체-파일을-어떻게-생성하나요" aria-label="Permalink to &quot;정적 라이브러리 또는 객체 파일을 어떻게 생성하나요?&quot;">​</a></h2><p>Gradle 빌드 파일에서 <code>-produce static</code> 컴파일러 옵션 또는 <code>binaries.staticLib()</code>를 사용하세요.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;mylib&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        binaries.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">staticLib</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>이는 플랫폼별 정적 객체(<code>.a</code> 라이브러리 형식)와 C 언어 헤더를 생성하여, C/C++ 코드에서 Kotlin/Native 프로그램의 모든 공개 API를 사용할 수 있도록 합니다.</p><h2 id="회사-프록시-뒤에서-kotlin-native를-어떻게-실행하나요" tabindex="-1">회사 프록시 뒤에서 Kotlin/Native를 어떻게 실행하나요? <a class="header-anchor" href="#회사-프록시-뒤에서-kotlin-native를-어떻게-실행하나요" aria-label="Permalink to &quot;회사 프록시 뒤에서 Kotlin/Native를 어떻게 실행하나요?&quot;">​</a></h2><p>Kotlin/Native는 플랫폼별 툴체인(toolchain)을 다운로드해야 하므로, 컴파일러 또는 <code>gradlew</code> 인수로 <code>-Dhttp.proxyHost=xxx -Dhttp.proxyPort=xxx</code>를 지정하거나 <code>JAVA_OPTS</code> 환경 변수를 통해 설정해야 합니다.</p><h2 id="kotlin-프레임워크에-사용자-지정-objective-c-접두사-이름을-어떻게-지정하나요" tabindex="-1">Kotlin 프레임워크에 사용자 지정 Objective-C 접두사/이름을 어떻게 지정하나요? <a class="header-anchor" href="#kotlin-프레임워크에-사용자-지정-objective-c-접두사-이름을-어떻게-지정하나요" aria-label="Permalink to &quot;Kotlin 프레임워크에 사용자 지정 Objective-C 접두사/이름을 어떻게 지정하나요?&quot;">​</a></h2><p>컴파일러 옵션 <code>-module-name</code> 또는 해당 Gradle DSL 문을 사용하세요.</p>`,19)),e(h,{group:"build-script"},{default:t(()=>[e(n,{title:"Kotlin","group-key":"kotlin"},{default:t(()=>s[0]||(s[0]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    iosArm64"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"myapp"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        binaries."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"framework"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            freeCompilerArgs "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"+="),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," listOf"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-module-name"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"TheName"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),e(n,{title:"Groovy","group-key":"groovy"},{default:t(()=>s[1]||(s[1]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"kotlin {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    iosArm64("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"myapp"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        binaries"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"framework {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            freeCompilerArgs "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"+="),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," ["),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-module-name"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"TheName"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"]")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),s[3]||(s[3]=o(`<h2 id="ios-프레임워크-이름을-어떻게-변경하나요" tabindex="-1">iOS 프레임워크 이름을 어떻게 변경하나요? <a class="header-anchor" href="#ios-프레임워크-이름을-어떻게-변경하나요" aria-label="Permalink to &quot;iOS 프레임워크 이름을 어떻게 변경하나요?&quot;">​</a></h2><p>iOS 프레임워크의 기본 이름은 <code>&lt;project name&gt;.framework</code>입니다. 사용자 지정 이름을 설정하려면 <code>baseName</code> 옵션을 사용하세요. 이 옵션은 모듈 이름도 설정합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;myapp&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">       binaries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          framework</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">              baseName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;TheName&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="kotlin-프레임워크에-비트코드를-어떻게-활성화하나요" tabindex="-1">Kotlin 프레임워크에 비트코드를 어떻게 활성화하나요? <a class="header-anchor" href="#kotlin-프레임워크에-비트코드를-어떻게-활성화하나요" aria-label="Permalink to &quot;Kotlin 프레임워크에 비트코드를 어떻게 활성화하나요?&quot;">​</a></h2><p>비트코드 임베딩(Bitcode embedding)은 Xcode 14에서 더 이상 사용되지 않으며 Xcode 15부터 모든 Apple 대상에서 제거되었습니다. Kotlin/Native 컴파일러는 Kotlin 2.0.20부터 비트코드 임베딩을 지원하지 않습니다.</p><p>이전 버전의 Xcode를 사용 중이지만 Kotlin 2.0.20 이상 버전으로 업그레이드하려는 경우, Xcode 프로젝트에서 비트코드 임베딩을 비활성화하세요.</p><h2 id="서로-다른-코루틴에서-객체를-안전하게-참조하려면-어떻게-해야-하나요" tabindex="-1">서로 다른 코루틴에서 객체를 안전하게 참조하려면 어떻게 해야 하나요? <a class="header-anchor" href="#서로-다른-코루틴에서-객체를-안전하게-참조하려면-어떻게-해야-하나요" aria-label="Permalink to &quot;서로 다른 코루틴에서 객체를 안전하게 참조하려면 어떻게 해야 하나요?&quot;">​</a></h2><p>Kotlin/Native에서 여러 코루틴에 걸쳐 객체를 안전하게 접근하거나 업데이트하려면 <code>@Volatile</code> 및 <code>AtomicReference</code>와 같은 동시성 안전(concurrency-safe) 구조를 사용하는 것을 고려하세요.</p><p><a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin.concurrent/-volatile/" target="_blank" rel="noreferrer"><code>@Volatile</code></a>을 사용하여 <code>var</code> 프로퍼티에 어노테이션을 달 수 있습니다. 이는 해당 프로퍼티의 백킹 필드에 대한 모든 읽기 및 쓰기를 원자적(atomic)으로 만듭니다. 또한, 쓰기 작업은 다른 스레드에 즉시 가시화됩니다. 다른 스레드가 이 프로퍼티에 접근할 때, 업데이트된 값뿐만 아니라 업데이트 이전에 발생한 변경 사항도 관찰합니다.</p><p>대안으로, 원자적(atomic) 읽기 및 업데이트를 지원하는 <a href="https://kotlinlang.org/api/core/kotlin-stdlib/kotlin.concurrent.atomics/-atomic-reference/" target="_blank" rel="noreferrer">AtomicReference</a>를 사용하세요. Kotlin/Native에서는 휘발성 변수(volatile variable)를 래핑하고 원자적 연산(atomic operations)을 수행합니다. Kotlin은 또한 특정 데이터 타입에 맞춰진 원자적 연산을 위한 여러 타입을 제공합니다. <code>AtomicInt</code>, <code>AtomicLong</code>, <code>AtomicBoolean</code>, <code>AtomicArray</code>, 그리고 <code>AtomicIntArray</code> 및 <code>AtomicLongArray</code>를 사용할 수 있습니다.</p><p>공유 변경 가능 상태(shared mutable state) 접근에 대한 더 자세한 정보는 <a href="/ko/kotlin/shared-mutable-state-and-concurrency">코루틴 문서</a>를 참조하세요.</p><h2 id="kotlin-native의-미공개-버전으로-프로젝트를-어떻게-컴파일할-수-있나요" tabindex="-1">Kotlin/Native의 미공개 버전으로 프로젝트를 어떻게 컴파일할 수 있나요? <a class="header-anchor" href="#kotlin-native의-미공개-버전으로-프로젝트를-어떻게-컴파일할-수-있나요" aria-label="Permalink to &quot;Kotlin/Native의 미공개 버전으로 프로젝트를 어떻게 컴파일할 수 있나요?&quot;">​</a></h2><p>먼저, <a href="/ko/kotlin/eap">프리뷰 버전</a>을 사용해 보는 것을 고려해 보세요.</p><p>만약 더 최신 개발 버전이 필요한 경우, 소스 코드에서 Kotlin/Native를 빌드할 수 있습니다. <a href="https://github.com/JetBrains/kotlin" target="_blank" rel="noreferrer">Kotlin 리포지토리</a>를 클론(clone)하고 <a href="https://github.com/JetBrains/kotlin/blob/master/kotlin-native/README.md#building-from-source" target="_blank" rel="noreferrer">다음 단계</a>를 따르세요.</p>`,14))])}const F=k(d,[["render",c]]);export{v as __pageData,F as default};
