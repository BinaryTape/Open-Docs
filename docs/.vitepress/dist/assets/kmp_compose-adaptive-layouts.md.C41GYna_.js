import{_ as a,c as i,o as e,ag as n}from"./chunks/framework.Bksy39di.js";const c=JSON.parse('{"title":"自适应布局","description":"","frontmatter":{},"headers":[],"relativePath":"kmp/compose-adaptive-layouts.md","filePath":"kmp/compose-adaptive-layouts.md","lastUpdated":1755516278000}'),p={name:"kmp/compose-adaptive-layouts.md"};function t(l,s,h,o,k,d){return e(),i("div",null,s[0]||(s[0]=[n(`<h1 id="自适应布局" tabindex="-1">自适应布局 <a class="header-anchor" href="#自适应布局" aria-label="Permalink to &quot;自适应布局&quot;">​</a></h1><p>为了在所有类型的设备上提供一致的用户体验，请将您的应用 UI 调整为不同的显示尺寸、方向和输入模式。</p><h2 id="设计自适应布局" tabindex="-1">设计自适应布局 <a class="header-anchor" href="#设计自适应布局" aria-label="Permalink to &quot;设计自适应布局&quot;">​</a></h2><p>设计自适应布局时请遵循以下关键准则：</p><ul><li>优先使用 <a href="https://developer.android.com/develop/ui/compose/layouts/adaptive/canonical-layouts" target="_blank" rel="noreferrer">规范布局</a> 模式，例如 list-detail、feed 和 supporting pane。</li><li>通过重用内边距、排版和其他设计元素的共享样式来保持一致性。在遵循平台特有的准则的同时，保持跨设备导航模式的一致性。</li><li>将复杂的布局分解为可重用的 composable，以实现灵活性和模块化。</li><li>调整屏幕密度和方向。</li></ul><h2 id="使用窗口尺寸类别" tabindex="-1">使用窗口尺寸类别 <a class="header-anchor" href="#使用窗口尺寸类别" aria-label="Permalink to &quot;使用窗口尺寸类别&quot;">​</a></h2><p>窗口尺寸类别是预定义的阈值，也称为断点，它们将不同的屏幕尺寸分类，以帮助您设计、开发和测试自适应布局。</p><p>窗口尺寸类别将应用可用的显示区域分为宽度和高度各三个类别：compact、medium 和 expanded。当您进行布局更改时，请测试所有窗口尺寸的布局行为，尤其是在不同的断点阈值处。</p><p>要使用 <code>WindowSizeClass</code> 类别，请将 <code>material3.adaptive</code> 依赖项添加到模块的 <code>build.gradle.kts</code> 文件中的公共源代码集：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">commonMain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.compose.material3.adaptive:adaptive:1.2.0-alpha05&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>WindowSizeClass</code> API 允许您根据可用的显示空间更改应用的布局。例如，您可以根据窗口高度管理顶部应用栏的可见性：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Composable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyApp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    windowSizeClass: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WindowSizeClass</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> currentWindowAdaptiveInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().windowSizeClass</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Determines whether the top app bar should be displayed</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> showTopAppBar </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> windowSizeClass.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isHeightAtLeastBreakpoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(WindowSizeClass.HEIGHT_DP_MEDIUM_LOWER_BOUND)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Uses bar visibility to define UI </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    MyScreen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        showTopAppBar </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> showTopAppBar,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        /* ... */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="接下来" tabindex="-1">接下来 <a class="header-anchor" href="#接下来" aria-label="Permalink to &quot;接下来&quot;">​</a></h2><p>在 <a href="https://developer.android.com/develop/ui/compose/layouts/adaptive" target="_blank" rel="noreferrer">Jetpack Compose 文档</a> 中了解有关自适应布局的更多信息。</p>`,14)]))}const E=a(p,[["render",t]]);export{c as __pageData,E as default};
