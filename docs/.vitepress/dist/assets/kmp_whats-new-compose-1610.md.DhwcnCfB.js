import{_ as e}from"./chunks/compose-1610-ios-magnifier.YMZtwDpq.js";import{_ as o,c as r,o as i,ag as t}from"./chunks/framework.Bksy39di.js";const f=JSON.parse('{"title":"Compose Multiplatform 1.6.10 中的新特性","description":"","frontmatter":{},"headers":[],"relativePath":"kmp/whats-new-compose-1610.md","filePath":"kmp/whats-new-compose-1610.md","lastUpdated":1755516278000}'),l={name:"kmp/whats-new-compose-1610.md"};function s(n,a,p,c,h,d){return i(),r("div",null,a[0]||(a[0]=[t('<h1 id="compose-multiplatform-1-6-10-中的新特性" tabindex="-1">Compose Multiplatform 1.6.10 中的新特性 <a class="header-anchor" href="#compose-multiplatform-1-6-10-中的新特性" aria-label="Permalink to &quot;Compose Multiplatform 1.6.10 中的新特性&quot;">​</a></h1><p>以下是此特性发布的主要亮点：</p><ul><li><a href="#breaking-change-new-compose-compiler-gradle-plugin">破坏性变更：新的 Compose 编译器 Gradle 插件</a></li><li><a href="#support-for-multimodule-projects-with-compose-multiplatform-resources">支持带有 Compose Multiplatform 资源的模块化项目</a></li><li><a href="#experimental-navigation-library">实验性导航库</a></li><li><a href="#lifecycle-library">带有实验性公共 ViewModel 的生命周期库</a></li><li><a href="#known-issue-missingresourceexception">已知问题：MissingResourceException</a></li></ul><p>关于此版本的完整变更列表，请参见 <a href="./https://github.com/JetBrains/compose-multiplatform/blob/master/CHANGELOG#1610-may-2024">GitHub</a>。</p><h2 id="依赖项" tabindex="-1">依赖项 <a class="header-anchor" href="#依赖项" aria-label="Permalink to &quot;依赖项&quot;">​</a></h2><ul><li>Gradle 插件 <code>org.jetbrains.compose</code>，版本 1.6.10。基于 Jetpack Compose 库： <ul><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-compiler#1.5.14" target="_blank" rel="noreferrer">Compiler 1.5.14</a></li><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-runtime#1.6.7" target="_blank" rel="noreferrer">Runtime 1.6.7</a></li><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-ui#1.6.7" target="_blank" rel="noreferrer">UI 1.6.7</a></li><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-foundation#1.6.7" target="_blank" rel="noreferrer">Foundation 1.6.7</a></li><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-material#1.6.7" target="_blank" rel="noreferrer">Material 1.6.7</a></li><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-material3#1.2.1" target="_blank" rel="noreferrer">Material3 1.2.1</a></li></ul></li><li>Lifecycle 库 <code>org.jetbrains.androidx.lifecycle:lifecycle-*:2.8.0</code>。基于 <a href="https://developer.android.com/jetpack/androidx/releases/lifecycle#2.8.0" target="_blank" rel="noreferrer">Jetpack Lifecycle 2.8.0</a>。</li><li>Navigation 库 <code>org.jetbrains.androidx.navigation:navigation-*:2.7.0-alpha07</code>。基于 <a href="https://developer.android.com/jetpack/androidx/releases/navigation#2.7.7" target="_blank" rel="noreferrer">Jetpack Navigation 2.7.7</a>。</li></ul><h2 id="破坏性变更-新的-compose-编译器-gradle-插件" tabindex="-1">破坏性变更：新的 Compose 编译器 Gradle 插件 <a class="header-anchor" href="#破坏性变更-新的-compose-编译器-gradle-插件" aria-label="Permalink to &quot;破坏性变更：新的 Compose 编译器 Gradle 插件&quot;">​</a></h2><p>从 Kotlin 2.0.0 开始，Compose Multiplatform 要求使用新的 Compose 编译器 Gradle 插件。 关于详细信息，请参见<a href="./compose-compiler#migrating-a-compose-multiplatform-project">迁移指南</a>。</p><h2 id="跨平台" tabindex="-1">跨平台 <a class="header-anchor" href="#跨平台" aria-label="Permalink to &quot;跨平台&quot;">​</a></h2><h3 id="资源" tabindex="-1">资源 <a class="header-anchor" href="#资源" aria-label="Permalink to &quot;资源&quot;">​</a></h3><h4 id="稳定的资源库" tabindex="-1">稳定的资源库 <a class="header-anchor" href="#稳定的资源库" aria-label="Permalink to &quot;稳定的资源库&quot;">​</a></h4><p><a href="./compose-multiplatform-resources">资源库 API</a> 的大部分现已被视为稳定版。</p><h4 id="支持带有-compose-multiplatform-资源的模块化项目" tabindex="-1">支持带有 Compose Multiplatform 资源的模块化项目 <a class="header-anchor" href="#支持带有-compose-multiplatform-资源的模块化项目" aria-label="Permalink to &quot;支持带有 Compose Multiplatform 资源的模块化项目&quot;">​</a></h4><p>从 Compose Multiplatform 1.6.10 开始，你可以在任何 Gradle 模块和任何源代码集中存储资源，并发布包含资源的<a href="./project">项目</a>和库。</p><p>要启用模块化支持，请将你的<a href="./project">项目</a>更新到 Kotlin 2.0.0 或更高版本以及 Gradle 7.6 或更高版本。</p><h4 id="多平台资源的配置-dsl" tabindex="-1">多平台资源的配置 DSL <a class="header-anchor" href="#多平台资源的配置-dsl" aria-label="Permalink to &quot;多平台资源的配置 DSL&quot;">​</a></h4><p>你现在可以微调<a href="./project">项目</a>中的 <code>Res</code> 类生成：更改该类的模态和指定包，并选择生成条件：总是、从不或仅在<a href="./explicit">显式</a>依赖资源库时。</p><p>关于详细信息，请参见<a href="./compose-multiplatform-resources-usage#customizing-accessor-class-generation">文档部分</a>。</p><h4 id="用于生成资源-uri-的公共函数" tabindex="-1">用于生成资源 URI 的公共函数 <a class="header-anchor" href="#用于生成资源-uri-的公共函数" aria-label="Permalink to &quot;用于生成资源 URI 的公共函数&quot;">​</a></h4><p>新的 <code>getUri()</code> <a href="./function">函数</a>允许你将资源的平台相关 URI 传递给外部库，以便它们可以直接访问文件。 关于详细信息，请参见<a href="./compose-multiplatform-resources-usage#accessing-multiplatform-resources-from-external-libraries">文档</a>。</p><h4 id="字符串资源的复数形式" tabindex="-1">字符串资源的复数形式 <a class="header-anchor" href="#字符串资源的复数形式" aria-label="Permalink to &quot;字符串资源的复数形式&quot;">​</a></h4><p>你现在可以与其他多平台字符串资源一起定义复数（数量字符串）。 关于详细信息，请参见<a href="./compose-multiplatform-resources-usage#plurals">文档</a>。</p><h4 id="支持三字母区域设置" tabindex="-1">支持三字母区域设置 <a class="header-anchor" href="#支持三字母区域设置" aria-label="Permalink to &quot;支持三字母区域设置&quot;">​</a></h4><p><a href="./compose-multiplatform-resources-setup#language-and-regional-qualifiers">语言限定符</a>现在支持区域设置的 alpha-3 (ISO 639-2) 代码。</p><h4 id="图像和字体使用的实验性字节数组函数" tabindex="-1">图像和字体使用的实验性字节数组函数 <a class="header-anchor" href="#图像和字体使用的实验性字节数组函数" aria-label="Permalink to &quot;图像和字体使用的实验性字节数组函数&quot;">​</a></h4><p>你可以尝试两个允许将字体和图像作为字节数组获取的<a href="./function">函数</a>：<code>getDrawableResourceBytes()</code> 和 <code>getFontResourceBytes()</code>。 这些<a href="./function">函数</a>旨在帮助从第三方库访问多平台资源。</p><p>关于详细信息，请参见<a href="https://github.com/JetBrains/compose-multiplatform/pull/4651" target="_blank" rel="noreferrer">拉取请求</a>。</p><h3 id="实验性导航库" tabindex="-1">实验性导航库 <a class="header-anchor" href="#实验性导航库" aria-label="Permalink to &quot;实验性导航库&quot;">​</a></h3><p>基于 Jetpack Compose 的公共导航库现已可用。 关于详细信息，请参见<a href="./compose-navigation-routing">文档</a>。</p><p>此版本的主要限制：</p><ul><li><a href="https://developer.android.com/guide/navigation/design/deep-link" target="_blank" rel="noreferrer">Deep links</a>（处理或跟踪它们）尚不受支持。</li><li><code>BackHandler</code> <a href="https://developer.android.com/develop/ui/compose/libraries#handling_the_system_back_button" target="_blank" rel="noreferrer">函数</a>和<a href="https://developer.android.com/guide/navigation/custom-back/predictive-back-gesture" target="_blank" rel="noreferrer">预测性返回手势</a>仅在 Android 上受支持。</li></ul><h3 id="生命周期库" tabindex="-1">生命周期库 <a class="header-anchor" href="#生命周期库" aria-label="Permalink to &quot;生命周期库&quot;">​</a></h3><p>基于 Jetpack lifecycle 的公共生命周期库现已可用，关于详细信息，请参见<a href="./compose-lifecycle">文档</a>。</p><p>该库主要用于支持公共导航<a href="./functionality">功能</a>，但也提供了一个<a href="./experimental">实验性的</a>跨平台 <code>ViewModel</code> 实现，并包含一个你可以在<a href="./project">项目</a>中实现的公共 <code>LifecycleOwner</code> 接口。</p><p>Compose Multiplatform 还提供了一个通用的 <code>ViewModelStoreOwner</code> 实现。</p><h3 id="支持-kotlin-2-0-0" tabindex="-1">支持 Kotlin 2.0.0 <a class="header-anchor" href="#支持-kotlin-2-0-0" aria-label="Permalink to &quot;支持 Kotlin 2.0.0&quot;">​</a></h3><p>Kotlin 2.0.0 与新的 Compose 编译器 Gradle 插件一同发布。 要使用最新编译器版本的 Compose Multiplatform，请将插件应用到你<a href="./project">项目</a>中的模块（关于详细信息，请参见<a href="./compose-compiler#migrating-a-compose-multiplatform-project">迁移指南</a>）。</p><h2 id="桌面" tabindex="-1">桌面 <a class="header-anchor" href="#桌面" aria-label="Permalink to &quot;桌面&quot;">​</a></h2><h3 id="basictextfield2-的基本支持" tabindex="-1">BasicTextField2 的基本支持 <a class="header-anchor" href="#basictextfield2-的基本支持" aria-label="Permalink to &quot;BasicTextField2 的基本支持&quot;">​</a></h3><p>目前，桌面<a href="./target">目标平台</a>已基本支持 <code>BasicTextField2</code> Compose 组件。 如果你的<a href="./project">项目</a>绝对需要它，或者想进行测试，请使用它，但请记住可能存在未发现的边缘情况。 例如，<code>BasicTextField2</code> 目前不支持 IME 事件，因此你将无法使用虚拟键盘输入中文、日文或韩文。</p><p>该组件的完全支持以及对其他平台的<a href="./functionality">支持</a>计划在 Compose Multiplatform 1.7.0 版本中发布。</p><h3 id="dialogwindow-的-alwaysontop-标志" tabindex="-1">DialogWindow 的 alwaysOnTop 标志 <a class="header-anchor" href="#dialogwindow-的-alwaysontop-标志" aria-label="Permalink to &quot;DialogWindow 的 alwaysOnTop 标志&quot;">​</a></h3><p>为了避免你的对话框窗口被覆盖，你现在可以为 <code>DialogWindow</code> 可组合项使用 <code>alwaysOnTop</code> 标志。</p><p>关于详细信息，请参见<a href="https://github.com/JetBrains/compose-multiplatform-core/pull/1120" target="_blank" rel="noreferrer">拉取请求</a>。</p><h2 id="ios" tabindex="-1">iOS <a class="header-anchor" href="#ios" aria-label="Permalink to &quot;iOS&quot;">​</a></h2><h3 id="可访问性支持改进" tabindex="-1">可访问性支持改进 <a class="header-anchor" href="#可访问性支持改进" aria-label="Permalink to &quot;可访问性支持改进&quot;">​</a></h3><p>在此版本中：</p><ul><li>对话框和弹出窗口已与可访问性<a href="./feature">特性</a>正确集成，</li><li>使用 <code>UIKitView</code> 和 <code>UIKitViewController</code> 创建的互操作视图现在可通过 Accessibility Services 访问，</li><li><code>LiveRegion</code> 语义受可访问性 API 支持，</li><li><a href="https://github.com/JetBrains/compose-multiplatform-core/pull/1169" target="_blank" rel="noreferrer">可访问性滚动</a>受支持，</li><li><code>HapticFeedback</code> 受支持。</li></ul><h3 id="ios-17-及更高版本上的选择容器放大镜" tabindex="-1">iOS 17 及更高版本上的选择容器放大镜 <a class="header-anchor" href="#ios-17-及更高版本上的选择容器放大镜" aria-label="Permalink to &quot;iOS 17 及更高版本上的选择容器放大镜&quot;">​</a></h3><p>Compose Multiplatform 在 iOS 上的选择容器现在模拟<a href="./native">原生</a>放大工具。</p><p><img src="'+e+`" alt="Screenshot of iPhone chat app with the text magnifier active" width="390"></p><h3 id="用于-dialog-居中的软键盘内边距" tabindex="-1">用于 Dialog 居中的软键盘内边距 <a class="header-anchor" href="#用于-dialog-居中的软键盘内边距" aria-label="Permalink to &quot;用于 Dialog 居中的软键盘内边距&quot;">​</a></h3><p><code>Dialog</code> 可组合项的行为现在与 Android 对齐：当软键盘出现在屏幕上时，对话框会根据应用程序窗口的有效高度居中显示。 有一个选项可以通过 <code>DialogProperties.useSoftwareKeyboardInset</code> 属性禁用此功能。</p><h2 id="web" tabindex="-1">Web <a class="header-anchor" href="#web" aria-label="Permalink to &quot;Web&quot;">​</a></h2><h3 id="kotlin-wasm-alpha-版支持" tabindex="-1">Kotlin/Wasm Alpha 版支持 <a class="header-anchor" href="#kotlin-wasm-alpha-版支持" aria-label="Permalink to &quot;Kotlin/Wasm Alpha 版支持&quot;">​</a></h3><p><a href="./experimental">实验性</a>的 Compose Multiplatform for Web 现已进入 Alpha 阶段：</p><ul><li>大部分 Web <a href="./functionality">功能</a>都与 Compose Multiplatform for Desktop 相同。</li><li>团队致力于将 Web 平台发布。</li><li>下一步是彻底的浏览器对大部分组件的适配。</li></ul><p>请遵循<a href="./quickstart">第一个应用教程</a>，了解如何设置和运行带有共享 UI 代码的 Web <a href="./app">应用</a>。</p><h3 id="基本-ime-键盘支持" tabindex="-1">基本 IME 键盘支持 <a class="header-anchor" href="#基本-ime-键盘支持" aria-label="Permalink to &quot;基本 IME 键盘支持&quot;">​</a></h3><p>Compose Multiplatform 的 Web <a href="./target">目标</a>现在对虚拟（IME）键盘有了基本支持。</p><h2 id="gradle-插件" tabindex="-1">Gradle 插件 <a class="header-anchor" href="#gradle-插件" aria-label="Permalink to &quot;Gradle 插件&quot;">​</a></h2><h3 id="修改-macos-最低版本的可能性" tabindex="-1">修改 macOS 最低版本的可能性 <a class="header-anchor" href="#修改-macos-最低版本的可能性" aria-label="Permalink to &quot;修改 macOS 最低版本的可能性&quot;">​</a></h3><p>在以前的版本中，如果不包含 Intel 版本，则无法将 macOS <a href="./app">应用</a>上传到 App Store。 你现在可以在平台<a href="./specific">特有的</a> Compose Multiplatform 选项中为你的<a href="./app">应用</a>设置最低 macOS 版本：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compose.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">desktop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        nativeDistributions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            macOS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                minimumSystemVersion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;12.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>关于详细信息，请参见<a href="https://github.com/JetBrains/compose-multiplatform/pull/4271" target="_blank" rel="noreferrer">拉取请求</a>。</p><h3 id="支持-proguard-创建-uber-jar-的选项" tabindex="-1">支持 Proguard 创建 uber JAR 的选项 <a class="header-anchor" href="#支持-proguard-创建-uber-jar-的选项" aria-label="Permalink to &quot;支持 Proguard 创建 uber JAR 的选项&quot;">​</a></h3><p>你现在可以使用 ProGuard Gradle <a href="./task">任务</a>创建 uber JAR（包含<a href="./application">应用程序</a>所有<a href="./dependency">依赖项</a>的 JAR 的复杂软件包）。</p><p>关于详细信息，请参见<a href="./compose-native-distribution#minification-and-obfuscation">代码精简和混淆</a>指南。</p><h3 id="已知问题-missingresourceexception" tabindex="-1">已知问题：MissingResourceException <a class="header-anchor" href="#已知问题-missingresourceexception" aria-label="Permalink to &quot;已知问题：MissingResourceException&quot;">​</a></h3><p>从 Kotlin 1.9.x 切换到 2.0.0（或反之）后，你可能会遇到 <code>org.jetbrains.compose.resources.MissingResourceException: Missing resource with path: ...</code> 错误。 要解决此问题，请删除<a href="./project">项目</a>中的所有 <code>build</code> 目录。 这包括位于<a href="./project">项目</a>根目录和模块目录中的目录。</p>`,70)]))}const k=o(l,[["render",s]]);export{f as __pageData,k as default};
