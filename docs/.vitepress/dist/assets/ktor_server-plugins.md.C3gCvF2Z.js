import{_ as d,a as E,b as g}from"./chunks/plugin-pipeline-routing.fgYqhUxB.js";import{_ as c,C as a,c as y,o as u,j as e,G as s,ag as p,a as h,w as n}from"./chunks/framework.Bksy39di.js";const A=JSON.parse('{"title":"服务器插件","description":"","frontmatter":{},"headers":[],"relativePath":"ktor/server-plugins.md","filePath":"ktor/server-plugins.md","lastUpdated":1755457140000}'),F={name:"ktor/server-plugins.md"};function C(m,i,_,v,b,B){const k=a("show-structure"),r=a("link-summary"),t=a("code-block"),l=a("TabItem"),o=a("Tabs");return u(),y("div",null,[i[1]||(i[1]=e("h1",{id:"服务器插件",tabindex:"-1"},[h("服务器插件 "),e("a",{class:"header-anchor",href:"#服务器插件","aria-label":'Permalink to "服务器插件"'},"​")],-1)),s(k,{for:"chapter",depth:"2"}),s(r,null,{default:n(()=>i[0]||(i[0]=[h(" 插件提供常见功能，例如序列化、内容编码、压缩等。 ")])),_:1}),i[2]||(i[2]=p('<p>Ktor 中典型的请求/响应流水线如下所示：</p><p><img src="'+d+'" alt="Request Response Pipeline" width="600"></p><p>它始于一个请求，该请求会被路由到特定的处理程序，由我们的应用程序逻辑处理，并最终得到响应。</p><h2 id="add_functionality" tabindex="-1">使用插件添加功能 <a class="header-anchor" href="#add_functionality" aria-label="Permalink to &quot;使用插件添加功能 {id=&quot;add_functionality&quot;}&quot;">​</a></h2><p>许多应用程序需要常见功能，这些功能超出了应用程序逻辑的范围。例如序列化和内容编码、压缩、请求头、Cookie 支持等。所有这些功能都在 Ktor 中通过我们称之为 <strong>插件</strong> 的方式提供。</p><p>如果我们查看之前的流水线图，插件位于请求/响应与应用程序逻辑之间：</p><p><img src="'+E+'" alt="Plugin pipeline" width="600"></p><p>当请求进入时：</p><ul><li>它通过路由机制路由到正确的处理程序</li><li>在交给处理程序之前，它会经过一个或多个插件</li><li>处理程序（应用程序逻辑）处理该请求</li><li>在响应发送到客户端之前，它会经过一个或多个插件</li></ul><h2 id="routing" tabindex="-1">路由是一个插件 <a class="header-anchor" href="#routing" aria-label="Permalink to &quot;路由是一个插件 {id=&quot;routing&quot;}&quot;">​</a></h2><p>插件的设计旨在提供最大的灵活性，并且允许它们存在于请求/响应流水线的任何环节。事实上，我们迄今为止所称的 <code>routing</code> 也不过是一个插件。</p><p><img src="'+g+'" alt="Routing as a Plugin" width="600"></p><h2 id="dependency" tabindex="-1">添加插件依赖项 <a class="header-anchor" href="#dependency" aria-label="Permalink to &quot;添加插件依赖项 {id=&quot;dependency&quot;}&quot;">​</a></h2><p>大多数插件都需要特定的依赖项。例如，<code>CORS</code> 插件需要将 <code>ktor-server-cors</code> artifact 添加到构建脚本中：</p>',14)),s(o,{group:"languages"},{default:n(()=>[s(l,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[s(t,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-server-cors:$ktor_version")'})]),_:1}),s(l,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[s(t,{lang:"Groovy",code:'            implementation "io.ktor:ktor-server-cors:$ktor_version"'})]),_:1}),s(l,{title:"Maven","group-key":"maven"},{default:n(()=>[s(t,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-server-cors-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),i[3]||(i[3]=p(`<h2 id="install" tabindex="-1">安装插件 <a class="header-anchor" href="#install" aria-label="Permalink to &quot;安装插件 {id=&quot;install&quot;}&quot;">​</a></h2><p>插件通常在服务器的初始化阶段进行配置，使用以插件作为形参的 <code>install</code> 函数。根据您 <a href="./server-create-and-configure">创建服务器</a> 的方式，您可以在 <code>embeddedServer</code> 调用中安装插件...</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.application.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.plugins.cors.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.plugins.compression.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    embeddedServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Netty, port </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8080</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CORS)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Compression)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(wait </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>... 或指定的 <a href="./server-modules">模块</a>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.application.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.plugins.cors.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.plugins.compression.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CORS)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Compression)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>除了拦截请求和响应之外，插件还可以有一个可选的配置部分，该部分在此步骤中进行配置。</p><p>例如，在安装 <a href="./server-sessions#cookie">Cookies</a> 时，我们可以设置某些参数，例如我们希望 Cookie 存储在哪里，或者它们的名称：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Sessions) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    cookie</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyCookie</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MY_COOKIE&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="install-route" tabindex="-1">将插件安装到特定路由 <a class="header-anchor" href="#install-route" aria-label="Permalink to &quot;将插件安装到特定路由 {id=&quot;install-route&quot;}&quot;">​</a></h3><p>在 Ktor 中，您不仅可以全局安装插件，还可以将其安装到特定的 <a href="./server-routing">路由</a>。如果您需要针对不同的应用程序资源使用不同的插件配置，这可能会很有用。例如，下面的 <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/caching-headers-routes" target="_blank" rel="noreferrer">示例</a> 展示了如何为 <code>/index</code> 路由添加指定的 <a href="./server-caching-headers">缓存头</a>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">route</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CachingHeaders) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { call, content </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CachingOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CacheControl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MaxAge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(maxAgeSeconds </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1800</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Index page&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>请注意，以下规则适用于同一插件的多次安装：</p><ul><li>安装到特定路由的插件配置会 <strong>覆盖</strong> 其 <a href="#install">全局配置</a>。</li><li>路由会合并相同路由的安装，并且最后一次安装生效。例如，对于以下应用程序...</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    route</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CachingHeaders) { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* First configuration */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    route</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CachingHeaders) { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* Second configuration */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;b&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>&quot;}</p><p>... 对 <code>/index/a</code> 和 <code>/index/b</code> 的两次调用都仅由该插件的第二次安装处理。</p><h2 id="default_available_custom" tabindex="-1">默认、可用和自定义插件 <a class="header-anchor" href="#default_available_custom" aria-label="Permalink to &quot;默认、可用和自定义插件 {id=&quot;default_available_custom&quot;}&quot;">​</a></h2><p>默认情况下，Ktor 不激活任何插件，因此，您需要根据应用程序的功能需求安装插件。</p><p>然而，Ktor 确实提供了各种开箱即用的插件。您可以在 <a href="https://github.com/ktorio/ktor-plugin-registry/tree/main/plugins/server" target="_blank" rel="noreferrer">Ktor 插件注册表</a> 中查看这些插件的完整列表。</p><p>此外，您还可以创建自己的 <a href="./server-custom-plugins">自定义插件</a>。</p>`,20))])}const D=c(F,[["render",C]]);export{A as __pageData,D as default};
