import{_ as s,c as a,o as e,ag as t}from"./chunks/framework.Bksy39di.js";const r=JSON.parse('{"title":"动态类型","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/dynamic-type.md","filePath":"kotlin/dynamic-type.md","lastUpdated":1754307826000}'),d={name:"kotlin/dynamic-type.md"};function n(l,i,o,c,p,h){return e(),a("div",null,i[0]||(i[0]=[t(`<h1 id="动态类型" tabindex="-1">动态类型 <a class="header-anchor" href="#动态类型" aria-label="Permalink to &quot;动态类型&quot;">​</a></h1><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>JVM 目标平台代码不支持 <code>dynamic</code> 类型。</p></div><p>Kotlin 是一种静态类型语言，但它仍然需要与无类型或弱类型环境进行互操作，例如 JavaScript 生态系统。为了方便这些用例，语言中提供了 <code>dynamic</code> 类型：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dyn: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dynamic</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span></span></code></pre></div><p><code>dynamic</code> 类型基本上会关闭 Kotlin 的类型检测器：</p><ul><li><code>dynamic</code> 类型的值可以赋值给任何变量或作为实参传递到任何地方。</li><li>任何值都可以赋值给 <code>dynamic</code> 类型的变量，或传递给接受 <code>dynamic</code> 作为实参的函数。</li><li>对 <code>dynamic</code> 类型的值禁用了空检测。</li></ul><p><code>dynamic</code> 最特别的特性是，我们允许在 <code>dynamic</code> 变量上调用<strong>任何</strong>属性或函数，并可传入任何实参：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dyn.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">whatever</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;foo&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, dyn) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;whatever&#39; is not defined anywhere</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dyn.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">whatever</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">arrayOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><p>在 JavaScript 平台，这段代码将“原样”编译：Kotlin 中的 <code>dyn.whatever(1)</code> 在生成的 JavaScript 代码中变为 <code>dyn.whatever(1)</code>。</p><p>当在 <code>dynamic</code> 类型的值上调用用 Kotlin 编写的函数时，请记住 Kotlin 到 JavaScript 编译器执行的名字修饰。你可能需要使用 <a href="/kotlin/js-to-kotlin-interop#jsname-annotation">@JsName annotation</a> 为你需要调用的函数分配明确的名称。</p><p>动态调用总是返回 <code>dynamic</code> 作为结果，因此你可以自由地链式调用此类函数：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dyn.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().bar.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">baz</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>当你将 lambda 表达式传递给动态调用时，它的所有实参默认都具有 <code>dynamic</code> 类型：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dyn.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// x is dynamic</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>使用 <code>dynamic</code> 类型的值的表达式会“原样”翻译成 JavaScript，并且不使用 Kotlin 的操作符约定。支持以下操作符：</p><ul><li>二元操作符: <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code>, <code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&lt;=</code>, <code>==</code>, <code>!=</code>, <code>===</code>, <code>!==</code>, <code>&amp;&amp;</code>, <code>||</code></li><li>一元操作符 <ul><li>前缀: <code>-</code>, <code>+</code>, <code>!</code></li><li>前缀和后缀: <code>++</code>, <code>--</code></li></ul></li><li>赋值操作符: <code>+=</code>, <code>-=</code>, <code>*=</code>, <code>/=</code>, <code>%=</code></li><li>索引访问: <ul><li>读取: <code>d[a]</code>，多于一个实参是错误</li><li>写入: <code>d[a1] = a2</code>，<code>[]</code> 中多于一个实参是错误</li></ul></li></ul><p>禁止对 <code>dynamic</code> 类型的值使用 <code>in</code>、<code>!in</code> 和 <code>..</code> 操作。</p><p>有关更技术性的描述，请参阅 <a href="https://github.com/JetBrains/kotlin/blob/master/spec-docs/dynamic-types.md" target="_blank" rel="noreferrer">规范文档</a>。</p>`,18)]))}const E=s(d,[["render",n]]);export{r as __pageData,E as default};
