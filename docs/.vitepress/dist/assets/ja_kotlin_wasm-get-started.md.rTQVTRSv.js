import{_ as a,a as e,b as s,c as i}from"./chunks/wasm-composeapp-browser.n73x6mgF.js";import{_ as l,a as o,b as r}from"./chunks/wasm-composeapp-github-clickme.W2UAtuJ-.js";import{_ as p}from"./chunks/join-slack-channel.C908i2w7.js";import{_ as n,c as m,o as c,ag as h}from"./chunks/framework.Bksy39di.js";const I=JSON.parse('{"title":"Kotlin/WasmとCompose Multiplatformを使ってみる","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/wasm-get-started.md","filePath":"ja/kotlin/wasm-get-started.md","lastUpdated":1754307826000}'),d={name:"ja/kotlin/wasm-get-started.md"};function g(b,t,u,k,f,w){return c(),m("div",null,t[0]||(t[0]=[h('<h1 id="kotlin-wasmとcompose-multiplatformを使ってみる" tabindex="-1">Kotlin/WasmとCompose Multiplatformを使ってみる <a class="header-anchor" href="#kotlin-wasmとcompose-multiplatformを使ってみる" aria-label="Permalink to &quot;Kotlin/WasmとCompose Multiplatformを使ってみる&quot;">​</a></h1><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Kotlin/Wasmは<a href="/ja/kotlin/components-stability">アルファ版</a>です。これは予告なく変更される場合があります。 <a href="https://slack-chats.kotlinlang.org/c/webassembly" target="_blank" rel="noreferrer">Kotlin/Wasmコミュニティに参加しましょう。</a></p></div><p>このチュートリアルでは、IntelliJ IDEAで<a href="/ja/kotlin/wasm-overview">Kotlin/Wasm</a>を使用して<a href="https://www.jetbrains.com/lp/compose-multiplatform/" target="_blank" rel="noreferrer">Compose Multiplatform</a>アプリを実行し、<a href="https://pages.github.com/" target="_blank" rel="noreferrer">GitHub pages</a>上でサイトとして公開するためのアーティファクトを生成する方法を説明します。</p><h2 id="始める前に" tabindex="-1">始める前に <a class="header-anchor" href="#始める前に" aria-label="Permalink to &quot;始める前に&quot;">​</a></h2><p>Kotlin Multiplatformウィザードを使用してプロジェクトを作成します。</p><ol><li><p><a href="https://kmp.jetbrains.com/#newProject" target="_blank" rel="noreferrer">Kotlin Multiplatformウィザード</a>を開きます。</p></li><li><p><strong>New Project</strong>タブで、プロジェクト名とIDを任意のものに変更します。このチュートリアルでは、名前を「WasmDemo」、IDを「wasm.project.demo」に設定します。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>これらはプロジェクトディレクトリの名前とIDです。そのままにしておくこともできます。</p></div></li><li><p><strong>Web</strong>オプションを選択します。他のオプションが選択されていないことを確認してください。</p></li><li><p><strong>Download</strong>ボタンをクリックし、結果として得られるアーカイブを解凍します。</p><p><img src="'+a+'" alt="Kotlin Multiplatform wizard" width="400"></p></li></ol><h2 id="プロジェクトをintellij-ideaで開く" tabindex="-1">プロジェクトをIntelliJ IDEAで開く <a class="header-anchor" href="#プロジェクトをintellij-ideaで開く" aria-label="Permalink to &quot;プロジェクトをIntelliJ IDEAで開く&quot;">​</a></h2><ol><li><a href="https://www.jetbrains.com/idea/" target="_blank" rel="noreferrer">IntelliJ IDEA</a>の最新バージョンをダウンロードしてインストールします。</li><li>IntelliJ IDEAのようこそ画面で<strong>Open</strong>をクリックするか、メニューバーから<strong>File | Open</strong>を選択します。</li><li>解凍した「WasmDemo」フォルダに移動し、<strong>Open</strong>をクリックします。</li></ol><h2 id="アプリケーションを実行する" tabindex="-1">アプリケーションを実行する <a class="header-anchor" href="#アプリケーションを実行する" aria-label="Permalink to &quot;アプリケーションを実行する&quot;">​</a></h2><ol><li><p>IntelliJ IDEAで、<strong>View</strong> | <strong>Tool Windows</strong> | <strong>Gradle</strong>を選択して<strong>Gradle</strong>ツールウィンドウを開きます。</p><p>プロジェクトのロードが完了すると、GradleツールウィンドウでGradleタスクを見つけることができます。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>タスクを正常にロードするには、Gradle JVMとしてJava 11以上が必要です。</p></div></li><li><p><strong>wasmdemo</strong> | <strong>Tasks</strong> | <strong>kotlin browser</strong>で、<strong>wasmJsBrowserDevelopmentRun</strong>タスクを選択して実行します。</p><p><img src="'+e+'" alt="Run the Gradle task" width="400"></p><p>または、<code>WasmDemo</code>のルートディレクトリからターミナルで次のコマンドを実行することもできます。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wasmJsBrowserDevelopmentRun</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span></span></code></pre></div></li><li><p>アプリケーションが起動したら、ブラウザで次のURLを開きます。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">http://localhost:8080/</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>ポート番号は、8080ポートが利用できない場合があるため、異なることがあります。実際のポート番号はGradleビルドコンソールに表示されます。</p></div><p>「Click me!」ボタンが表示されます。これをクリックします。</p><p><img src="'+s+'" alt="Click me" width="650"></p><p>これでCompose Multiplatformのロゴが表示されます。</p><p><img src="'+i+'" alt="Compose app in browser" width="650"></p></li></ol><h2 id="アーティファクトを生成する" tabindex="-1">アーティファクトを生成する <a class="header-anchor" href="#アーティファクトを生成する" aria-label="Permalink to &quot;アーティファクトを生成する&quot;">​</a></h2><p><strong>wasmdemo</strong> | <strong>Tasks</strong> | <strong>kotlin browser</strong>で、<strong>wasmJsBrowserDistribution</strong>タスクを選択して実行します。</p><p><img src="'+l+'" alt="Run the Gradle task" width="400"></p><p>または、<code>WasmDemo</code>のルートディレクトリからターミナルで次のコマンドを実行することもできます。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wasmJsBrowserDistribution</span></span></code></pre></div><p>アプリケーションのタスクが完了すると、生成されたアーティファクトは<code>composeApp/build/dist/wasmJs/productionExecutable</code>ディレクトリにあります。</p><p><img src="'+o+'" alt="Artifacts directory" width="400"></p><h2 id="github-pagesで公開する" tabindex="-1">GitHub pagesで公開する <a class="header-anchor" href="#github-pagesで公開する" aria-label="Permalink to &quot;GitHub pagesで公開する&quot;">​</a></h2><ol><li><p><code>productionExecutable</code>ディレクトリ内のすべてのコンテンツを、サイトを作成したいリポジトリにコピーします。</p></li><li><p><a href="https://docs.github.com/en/pages/getting-started-with-github-pages/creating-a-github-pages-site#creating-your-site" target="_blank" rel="noreferrer">サイトの作成</a>に関するGitHubの手順に従ってください。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>変更をGitHubにプッシュした後、サイトに公開されるまでに最大10分かかる場合があります。</p></div></li><li><p>ブラウザで、GitHub pagesのドメインに移動します。</p><p><img src="'+r+'" alt="Navigate to GitHub pages" width="650"></p></li></ol><p>おめでとうございます！GitHub pagesにアーティファクトが公開されました。</p><h2 id="次のステップ" tabindex="-1">次のステップ <a class="header-anchor" href="#次のステップ" aria-label="Permalink to &quot;次のステップ&quot;">​</a></h2><ul><li><p><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/compose-multiplatform-create-first-app.html" target="_blank" rel="noreferrer">Compose Multiplatformを使用してiOSとAndroid間でUIを共有する方法を学ぶ</a></p></li><li><p>その他のKotlin/Wasmの例を試す:</p><ul><li><a href="https://github.com/Kotlin/kotlin-wasm-examples/tree/main/compose-imageviewer" target="_blank" rel="noreferrer">Compose image viewer</a></li><li><a href="https://github.com/Kotlin/kotlin-wasm-examples/tree/main/compose-jetsnack" target="_blank" rel="noreferrer">Jetsnack application</a></li><li><a href="https://github.com/Kotlin/kotlin-wasm-examples/tree/main/nodejs-example" target="_blank" rel="noreferrer">Node.js example</a></li><li><a href="https://github.com/Kotlin/kotlin-wasm-examples/tree/main/wasi-example" target="_blank" rel="noreferrer">WASI example</a></li><li><a href="https://github.com/Kotlin/kotlin-wasm-examples/tree/main/compose-example" target="_blank" rel="noreferrer">Compose example</a></li></ul></li><li><p>Kotlin SlackでKotlin/Wasmコミュニティに参加する:</p><p><a href="https://slack-chats.kotlinlang.org/c/webassembly"><img src="'+p+'" width="500" alt="Join the Kotlin/Wasm community" style=""></a></p></li></ul>',22)]))}const D=n(d,[["render",g]]);export{I as __pageData,D as default};
