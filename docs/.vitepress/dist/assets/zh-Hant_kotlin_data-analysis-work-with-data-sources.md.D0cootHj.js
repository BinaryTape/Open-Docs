import{_ as s,a,b as t,c as e,d as l}from"./chunks/refined-data.Bho3Y6Lq.js";import{_ as n,c as h,o as p,ag as k}from"./chunks/framework.Bksy39di.js";const u=JSON.parse('{"title":"從檔案擷取資料","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/data-analysis-work-with-data-sources.md","filePath":"zh-Hant/kotlin/data-analysis-work-with-data-sources.md","lastUpdated":1754307826000}'),r={name:"zh-Hant/kotlin/data-analysis-work-with-data-sources.md"};function o(d,i,E,g,c,y){return p(),h("div",null,i[0]||(i[0]=[k(`<h1 id="從檔案擷取資料" tabindex="-1">從檔案擷取資料 <a class="header-anchor" href="#從檔案擷取資料" aria-label="Permalink to &quot;從檔案擷取資料&quot;">​</a></h1><p><a href="/zh-Hant/kotlin/kotlin-notebook-overview">Kotlin Notebook</a> 與 <a href="https://kotlin.github.io/dataframe/gettingstarted.html" target="_blank" rel="noreferrer">Kotlin DataFrame library</a> 結合，使您能夠處理非結構化和結構化資料。這種組合提供了將非結構化資料 (例如 TXT 檔案中的資料) 轉換為結構化資料集的靈活性。</p><p>對於資料轉換，您可以使用諸如 <a href="https://kotlin.github.io/dataframe/adddf.html" target="_blank" rel="noreferrer"><code>add</code></a>、<a href="https://kotlin.github.io/dataframe/split.html" target="_blank" rel="noreferrer"><code>split</code></a>、<a href="https://kotlin.github.io/dataframe/convert.html" target="_blank" rel="noreferrer"><code>convert</code></a> 和 <a href="https://kotlin.github.io/dataframe/parse.html" target="_blank" rel="noreferrer"><code>parse</code></a> 等方法。此外，此工具集還能從各種結構化檔案格式 (包括 CSV、JSON、XLS、XLSX 和 Apache Arrow) 中擷取和操作資料。</p><p>在本指南中，您將透過多個範例學習如何擷取、精煉和處理資料。</p><h2 id="開始之前" tabindex="-1">開始之前 <a class="header-anchor" href="#開始之前" aria-label="Permalink to &quot;開始之前&quot;">​</a></h2><p>Kotlin Notebook 依賴於 <a href="https://plugins.jetbrains.com/plugin/16340-kotlin-notebook" target="_blank" rel="noreferrer">Kotlin Notebook plugin</a>，該外掛程式預設在 IntelliJ IDEA 中捆綁並啟用。</p><p>如果 Kotlin Notebook 功能不可用，請確保外掛程式已啟用。如需更多資訊，請參閱 <a href="/zh-Hant/kotlin/kotlin-notebook-set-up-env">設定環境</a>。</p><p>建立新的 Kotlin Notebook：</p><ol><li><p>選取 <strong>File</strong> | <strong>New</strong> | <strong>Kotlin Notebook</strong>。</p></li><li><p>在 Kotlin Notebook 中，透過執行以下命令匯入 Kotlin DataFrame library：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">use dataframe</span></span></code></pre></div></li></ol><h2 id="從檔案擷取資料-1" tabindex="-1">從檔案擷取資料 <a class="header-anchor" href="#從檔案擷取資料-1" aria-label="Permalink to &quot;從檔案擷取資料&quot;">​</a></h2><p>若要在 Kotlin Notebook 中從檔案擷取資料：</p><ol><li>開啟您的 Kotlin Notebook 檔案 (<code>.ipynb</code>)。</li><li>在您的筆記本開頭的程式碼儲存格中新增 <code>%use dataframe</code>，以匯入 Kotlin DataFrame library。<div class="note custom-block"><p class="custom-block-title">NOTE</p><p>確保在執行任何其他依賴於 Kotlin DataFrame library 的程式碼儲存格之前，先執行包含 <code>%use dataframe</code> 行的程式碼儲存格。</p></div></li><li>使用 Kotlin DataFrame library 的 <a href="https://kotlin.github.io/dataframe/read.html" target="_blank" rel="noreferrer"><code>.read()</code></a> 函式來擷取資料。例如，要讀取 CSV 檔案，請使用：<code>DataFrame.read(&quot;example.csv&quot;)</code>。</li></ol><p><code>.read()</code> 函式會根據檔案副檔名和內容自動偵測輸入格式。您也可以新增其他引數來自訂函式，例如使用 <code>delimiter = &#39;;&#39;</code> 指定分隔符號。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>如需其他檔案格式和各種讀取函式的全面概述，請參閱 <a href="https://kotlin.github.io/dataframe/read.html" target="_blank" rel="noreferrer">Kotlin DataFrame library 文件</a>。</p></div><h2 id="顯示資料" tabindex="-1">顯示資料 <a class="header-anchor" href="#顯示資料" aria-label="Permalink to &quot;顯示資料&quot;">​</a></h2><p>一旦您 <a href="#retrieve-data-from-a-file">在您的筆記本中擁有資料</a>，您就可以輕鬆地將其儲存在變數中，並透過在程式碼儲存格中執行以下內容來存取它：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dfJson </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DataFrame.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jsonFile.json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dfJson</span></span></code></pre></div><p>此程式碼會顯示您選擇的檔案中的資料，例如 CSV、JSON、XLS、XLSX 或 Apache Arrow。</p><p><img src="`+s+'" alt="顯示資料" width="700"></p><p>若要深入了解資料的結構或結構描述，請在您的 DataFrame 變數上套用 <code>.schema()</code> 函式。例如，<code>dfJson.schema()</code> 會列出您的 JSON 資料集中每個欄位的類型。</p><p><img src="'+a+'" alt="結構描述範例" width="700"></p><p>您還可以使用 Kotlin Notebook 中的自動補齊功能，快速存取和操作 DataFrame 的屬性。載入資料後，只需輸入 DataFrame 變數，後面接著一個點，即可查看可用欄位及其類型的列表。</p><p><img src="'+t+`" alt="可用屬性" width="700"></p><h2 id="精煉資料" tabindex="-1">精煉資料 <a class="header-anchor" href="#精煉資料" aria-label="Permalink to &quot;精煉資料&quot;">​</a></h2><p>在 Kotlin DataFrame library 中用於精煉資料集的各種操作中，主要範例包括 <a href="https://kotlin.github.io/dataframe/group.html" target="_blank" rel="noreferrer">分組</a>、<a href="https://kotlin.github.io/dataframe/filter.html" target="_blank" rel="noreferrer">篩選</a>、<a href="https://kotlin.github.io/dataframe/update.html" target="_blank" rel="noreferrer">更新</a> 和 <a href="https://kotlin.github.io/dataframe/add.html" target="_blank" rel="noreferrer">新增欄位</a>。這些函式對於資料分析至關重要，可讓您有效地組織、清理和轉換資料。</p><p>讓我們看一個範例，其中資料包含電影標題及其對應的發行年份在同一個儲存格中。目標是精煉此資料集以便於分析：</p><ol><li><p>使用 <code>.read()</code> 函式將資料載入到筆記本中。此範例涉及從名為 <code>movies.csv</code> 的 CSV 檔案中讀取資料並建立一個名為 <code>movies</code> 的 DataFrame：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> movies </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DataFrame.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;movies.csv&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></li><li><p>使用正規表達式從電影標題中提取發行年份，並將其新增為一個新欄位：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> moviesWithYear </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> movies</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;year&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">d{4}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toRegex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">findAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(title)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lastOrNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            ?.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            ?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            ?: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre></div></li><li><p>透過從每個標題中移除發行年份來修改電影標題。這會清理標題以保持一致性：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> moviesTitle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> moviesWithYear</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;title&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">s*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">d{4}</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">s*$&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toRegex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(title, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre></div></li><li><p>使用 <code>filter</code> 方法專注於特定資料。在此範例中，資料集被篩選以專注於 1996 年之後發行的電影：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> moviesNew </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> moviesWithYear.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { year </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1996</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">moviesNew</span></span></code></pre></div></li></ol><p>為了比較，以下是精煉前的資料集：</p><p><img src="`+e+'" alt="原始資料集" width="700"></p><p>精煉後的資料集：</p><p><img src="'+l+`" alt="資料精煉結果" width="700"></p><p>這是一個實際的演示，說明了您如何在 Kotlin 中使用 Kotlin DataFrame library 的方法 (例如 <code>add</code>、<code>update</code> 和 <code>filter</code>) 來有效地精煉和分析資料。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>如需其他使用案例和詳細範例，請參閱 <a href="https://github.com/Kotlin/dataframe/tree/master/examples" target="_blank" rel="noreferrer">Examples of Kotlin Dataframe</a>。</p></div><h2 id="儲存-dataframe" tabindex="-1">儲存 DataFrame <a class="header-anchor" href="#儲存-dataframe" aria-label="Permalink to &quot;儲存 DataFrame&quot;">​</a></h2><p>在 Kotlin Notebook 中使用 Kotlin DataFrame library <a href="#refine-data">精煉資料</a> 後，您可以輕鬆地匯出您處理過的資料。為此，您可以使用各種 <a href="https://kotlin.github.io/dataframe/write.html" target="_blank" rel="noreferrer"><code>.write()</code></a> 函式，它們支援以多種格式儲存，包括 CSV、JSON、XLS、XLSX、Apache Arrow，甚至是 HTML 表格。這對於分享您的發現、建立報告或使您的資料可用於進一步分析特別有用。</p><p>以下是您可以如何篩選 DataFrame、移除欄位、將精煉後的資料儲存到 JSON 檔案，以及在您的瀏覽器中開啟 HTML 表格：</p><ol><li><p>在 Kotlin Notebook 中，使用 <code>.read()</code> 函式將名為 <code>movies.csv</code> 的檔案載入到名為 <code>moviesDf</code> 的 DataFrame 中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> moviesDf </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DataFrame.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;movies.csv&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></li><li><p>使用 <code>.filter</code> 方法篩選 DataFrame，使其只包含屬於「動作」類型的電影：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> actionMoviesDf </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> moviesDf.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { genres.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Action&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span></code></pre></div></li><li><p>使用 <code>.remove</code> 從 DataFrame 中移除 <code>movieId</code> 欄位：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> refinedMoviesDf </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> actionMoviesDf.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">remove</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { movieId }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">refinedMoviesDf</span></span></code></pre></div></li><li><p>Kotlin DataFrame library 提供了各種寫入函式，可以以不同格式儲存資料。在此範例中，使用 <a href="https://kotlin.github.io/dataframe/write.html#writing-to-json" target="_blank" rel="noreferrer"><code>.writeJson()</code></a> 函式將修改後的 <code>movies.csv</code> 儲存為 JSON 檔案：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">refinedMoviesDf.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeJson</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;movies.json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></li><li><p>使用 <code>.toStandaloneHTML()</code> 函式將 DataFrame 轉換為獨立的 HTML 表格，並在您的預設網頁瀏覽器中開啟它：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">refinedMoviesDf.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toStandaloneHTML</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DisplayConfiguration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rowsLimit </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">openInBrowser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div></li></ol><h2 id="接下來" tabindex="-1">接下來 <a class="header-anchor" href="#接下來" aria-label="Permalink to &quot;接下來&quot;">​</a></h2><ul><li>使用 <a href="https://kotlin.github.io/kandy/examples.html" target="_blank" rel="noreferrer">Kandy library</a> 探索資料視覺化</li><li>在 <a href="/zh-Hant/kotlin/data-analysis-visualization">Data visualization in Kotlin Notebook with Kandy</a> 中尋找有關資料視覺化的更多資訊</li><li>如需 Kotlin 中可用於資料科學和分析的工具和資源的廣泛概述，請參閱 <a href="/zh-Hant/kotlin/data-analysis-libraries">Kotlin and Java libraries for data analysis</a></li></ul>`,39)]))}const b=n(r,[["render",o]]);export{u as __pageData,b as default};
