import{_ as h,C as r,c as k,o as c,j as i,G as l,ag as t,a as s,w as e}from"./chunks/framework.Bksy39di.js";const A=JSON.parse('{"title":"Kotlin Multiplatform 互換性ガイド","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kmp/multiplatform-compatibility-guide.md","filePath":"ja/kmp/multiplatform-compatibility-guide.md","lastUpdated":1755516278000}'),g={name:"ja/kmp/multiplatform-compatibility-guide.md"},E={colspan:"2"},u={colspan:"2"};function y(m,a,F,b,v,C){const d=r("show-structure"),n=r("code-block"),p=r("TabItem"),o=r("Tabs");return c(),k("div",null,[a[20]||(a[20]=i("h1",{id:"kotlin-multiplatform-互換性ガイド",tabindex:"-1"},[s("Kotlin Multiplatform 互換性ガイド "),i("a",{class:"header-anchor",href:"#kotlin-multiplatform-互換性ガイド","aria-label":'Permalink to "Kotlin Multiplatform 互換性ガイド"'},"​")],-1)),l(d,{depth:"1"}),a[21]||(a[21]=t(`<p>このガイドでは、Kotlin Multiplatform を使用してプロジェクトを開発する際に発生する可能性のある<a href="https://kotlinlang.org/docs/kotlin-evolution-principles.html#incompatible-changes" target="_blank" rel="noreferrer">非互換の変更点</a>をまとめています。</p><p>現在のKotlinの安定バージョンは 2.2.0 です。プロジェクトで使用しているKotlinのバージョンとの関連で、特定の変更の非推奨サイクルに留意してください。例：</p><ul><li>Kotlin 1.7.0 から Kotlin 1.9.0 にアップグレードする場合、<a href="#kotlin-1-9-0-1-9-25">Kotlin 1.9.0</a> と <a href="#kotlin-1-7-0-1-8-22">Kotlin 1.7.0−1.8.22</a> の両方で有効になった非互換の変更点を確認してください。</li><li>Kotlin 1.9.0 から Kotlin 2.0.0 にアップグレードする場合、<a href="#kotlin-2-0-0-and-later">Kotlin 2.0.0</a> と <a href="#kotlin-1-9-0-1-9-25">Kotlin 1.9.0−1.9.25</a> の両方で有効になった非互換の変更点を確認してください。</li></ul><h2 id="バージョンの互換性" tabindex="-1">バージョンの互換性 <a class="header-anchor" href="#バージョンの互換性" aria-label="Permalink to &quot;バージョンの互換性&quot;">​</a></h2><p>プロジェクトを設定する際には、使用しているKotlin Multiplatform Gradleプラグイン（プロジェクトのKotlinバージョンと同じ）のバージョンが、Gradle、Xcode、およびAndroid Gradleプラグインの各バージョンと互換性があることを確認してください。</p><table tabindex="0"><thead><tr><th>Kotlin Multiplatform プラグインバージョン</th><th>Gradle</th><th>Android Gradle プラグイン</th><th>Xcode</th></tr></thead><tbody><tr><td>2.2.0-2.2.10</td><td>7.6.3–8.14</td><td>7.3.1–8.10.0</td><td>16.3</td></tr><tr><td>2.1.21</td><td>7.6.3–8.12.1</td><td>7.3.1–8.7.2</td><td>16.3</td></tr><tr><td>2.1.20</td><td>7.6.3–8.11</td><td>7.4.2–8.7.2</td><td>16.0</td></tr><tr><td>2.1.0–2.1.10</td><td>7.6.3-8.10*</td><td>7.4.2–8.7.2</td><td>16.0</td></tr><tr><td>2.0.21</td><td>7.5-8.8*</td><td>7.4.2–8.5</td><td>16.0</td></tr><tr><td>2.0.20</td><td>7.5-8.8*</td><td>7.4.2–8.5</td><td>15.3</td></tr><tr><td>2.0.0</td><td>7.5-8.5</td><td>7.4.2–8.3</td><td>15.3</td></tr><tr><td>1.9.20</td><td>7.5-8.1.1</td><td>7.4.2–8.2</td><td>15.0</td></tr></tbody></table><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>*Kotlin 2.0.20–2.0.21 および Kotlin 2.1.0–2.1.10 は、Gradle 8.6まで完全に互換性があります。 Gradle バージョン 8.7–8.10 もサポートされていますが、1つだけ例外があります。Kotlin Multiplatform Gradleプラグインを使用している場合、JVMターゲットで <code>withJava()</code> 関数を呼び出す際に、マルチプラットフォームプロジェクトで非推奨の警告が表示されることがあります。 詳細については、<a href="#java-source-sets-created-by-default">デフォルトで作成されるJavaソースセット</a>を参照してください。</p></div><h2 id="kotlin-2-0-0-以降" tabindex="-1">Kotlin 2.0.0 以降 <a class="header-anchor" href="#kotlin-2-0-0-以降" aria-label="Permalink to &quot;Kotlin 2.0.0 以降&quot;">​</a></h2><p>このセクションでは、Kotlin 2.0.0−2.2.0 で非推奨サイクルを終了し、有効になる非互換の変更点について説明します。</p><h3 id="ビットコード埋め込みの非推奨化" tabindex="-1">ビットコード埋め込みの非推奨化 <a class="header-anchor" href="#ビットコード埋め込みの非推奨化" aria-label="Permalink to &quot;ビットコード埋め込みの非推奨化&quot;">​</a></h3><p><strong>変更点</strong></p><p>ビットコードの埋め込みは Xcode 14 で非推奨となり、Xcode 15 でAppleターゲットすべてから削除されました。これに伴い、フレームワーク設定の <code>embedBitcode</code> パラメーター、および <code>-Xembed-bitcode</code> と <code>-Xembed-bitcode-marker</code> コマンドライン引数は Kotlin で非推奨になりました。</p><p><strong>現在の推奨プラクティス</strong></p><p>以前のバージョンの Xcode を使用しているが、Kotlin 2.0.20 以降にアップグレードしたい場合は、Xcode プロジェクトでビットコードの埋め込みを無効にしてください。</p><p><strong>変更の適用時期</strong></p><p>計画されている非推奨サイクルは以下の通りです。</p><ul><li>2.0.20: Kotlin/Native コンパイラはビットコードの埋め込みをサポートしなくなります。</li><li>2.1.0: Kotlin Multiplatform Gradleプラグインで <code>embedBitcode</code> DSL が警告付きで非推奨になります。</li><li>2.2.0: 警告がエラーに格上げされます。</li><li>2.3.0: <code>embedBitcode</code> DSL が削除されます。</li></ul><h3 id="デフォルトで作成されるjavaソースセット" tabindex="-1">デフォルトで作成されるJavaソースセット <a class="header-anchor" href="#デフォルトで作成されるjavaソースセット" aria-label="Permalink to &quot;デフォルトで作成されるJavaソースセット&quot;">​</a></h3><p><strong>変更点</strong></p><p>Kotlin Multiplatform を Gradle の今後の変更に合わせるため、<code>withJava()</code> 関数の段階的な廃止を進めています。<code>withJava()</code> 関数は、必要なJavaソースセットを作成することで、GradleのJavaプラグインとの統合を可能にしました。Kotlin 2.1.20 以降、これらのJavaソースセットはデフォルトで作成されます。</p><p><strong>現在の推奨プラクティス</strong></p><p>以前は、<code>src/jvmMain/java</code> および <code>src/jvmTest/java</code> ソースセットを作成するために、明示的に <code>withJava()</code> 関数を使用する必要がありました。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        withJava</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Kotlin 2.1.20 以降、ビルドスクリプトから <code>withJava()</code> 関数を削除できます。</p><p>さらに、Gradle はJavaソースが存在する場合にのみJavaコンパイルタスクを実行するようになり、以前は実行されなかったJVM検証診断がトリガーされます。この診断は、<code>KotlinJvmCompile</code> タスクまたは <code>compilerOptions</code> 内で互換性のないJVMターゲットを明示的に設定した場合に失敗します。JVMターゲットの互換性を確保するためのガイダンスについては、<a href="https://kotlinlang.org/docs/gradle-configure-project.html#check-for-jvm-target-compatibility-of-related-compile-tasks" target="_blank" rel="noreferrer">関連するコンパイルタスクのJVMターゲット互換性を確認する</a>を参照してください。</p><p>プロジェクトが Gradle バージョン 8.7 より高く、<a href="https://docs.gradle.org/current/userguide/java_plugin.html" target="_blank" rel="noreferrer">Java</a>、<a href="https://docs.gradle.org/current/userguide/java_library_plugin.html" target="_blank" rel="noreferrer">Java Library</a>、<a href="https://docs.gradle.org/current/userguide/application_plugin.html" target="_blank" rel="noreferrer">Application</a> のようなGradle Javaプラグイン、またはGradle Javaプラグインに依存関係を持つサードパーティのGradleプラグインに依存していない場合、<code>withJava()</code> 関数を削除できます。</p><p>プロジェクトが<a href="https://docs.gradle.org/current/userguide/application_plugin.html" target="_blank" rel="noreferrer">Application</a> Gradle Javaプラグインを使用している場合、<a href="https://kotlinlang.org/docs/whatsnew2120.html#kotlin-multiplatform-new-dsl-to-replace-gradle-s-application-plugin" target="_blank" rel="noreferrer">新しい実験的なDSL</a>への移行をお勧めします。Gradle 8.7 以降、Applicationプラグインは Kotlin Multiplatform Gradleプラグインでは動作しなくなります。</p><p>マルチプラットフォームプロジェクトで Kotlin Multiplatform Gradleプラグインと他のGradle Javaプラグインの両方を使用したい場合は、<a href="./multiplatform-compatibility-guide#deprecated-compatibility-with-kotlin-multiplatform-gradle-plugin-and-gradle-java-plugins">Kotlin Multiplatform GradleプラグインとGradle Javaプラグインの非推奨の互換性</a>を参照してください。</p><p>Kotlin 2.1.20 と Gradle バージョン 8.7 より高いバージョンで <a href="https://docs.gradle.org/current/userguide/java_testing.html#sec:java_test_fixtures" target="_blank" rel="noreferrer">Java test fixtures</a> Gradleプラグインを使用すると、このプラグインは動作しません。代わりに、この問題が解決されている<a href="https://kotlinlang.org/docs/releases.html#release-details" target="_blank" rel="noreferrer">Kotlin 2.1.21</a>にアップグレードしてください。</p><p>問題が発生した場合は、<a href="https://kotl.in/issue" target="_blank" rel="noreferrer">課題トラッカー</a>に報告するか、<a href="https://kotlinlang.slack.com/archives/C19FD9681" target="_blank" rel="noreferrer">公開Slackチャンネル</a>でサポートを求めてください。</p><p><strong>変更の適用時期</strong></p><p>計画されている非推奨サイクルは以下の通りです。</p><ul><li>Gradle &gt;8.6: <code>withJava()</code> 関数を使用するマルチプラットフォームプロジェクトで、以前のKotlinバージョンに対する非推奨警告を導入します。</li><li>Gradle 9.0: この警告をエラーに格上げします。</li><li>2.1.20: どのGradleバージョンでも <code>withJava()</code> 関数を使用すると、非推奨警告を導入します。</li></ul><h3 id="android-ターゲットから-androidtarget-への名称変更" tabindex="-1"><code>android</code> ターゲットから <code>androidTarget</code> への名称変更 <a class="header-anchor" href="#android-ターゲットから-androidtarget-への名称変更" aria-label="Permalink to &quot;\`android\` ターゲットから \`androidTarget\` への名称変更&quot;">​</a></h3><p><strong>変更点</strong></p><p>Kotlin Multiplatform をより安定させるための取り組みを続けています。この方向性における重要なステップは、Android ターゲットに対するファーストクラスのサポートを提供することです。将来的には、このサポートはGoogleのAndroidチームによって開発される別のプラグインを通じて提供される予定です。</p><p>新しいソリューションへの道を開くため、現在のKotlin DSL で <code>android</code> ブロックを <code>androidTarget</code> に変更します。これは、Google から提供される今後のDSLのために短い <code>android</code> 名を空けるために必要な一時的な変更です。</p><p><strong>現在の推奨プラクティス</strong></p><p><code>android</code> ブロックのすべての出現箇所を <code>androidTarget</code> に変更してください。Android ターゲットサポートの新しいプラグインが利用可能になったら、Google のDSLに移行してください。これは、Kotlin Multiplatform プロジェクトで Android を操作するための推奨オプションとなります。</p><p><strong>変更の適用時期</strong></p><p>計画されている非推奨サイクルは以下の通りです。</p><ul><li>1.9.0: Kotlin Multiplatform プロジェクトで <code>android</code> 名が使用された場合に非推奨警告を導入します。</li><li>2.1.0: この警告をエラーに格上げします。</li><li>2.2.0: Kotlin Multiplatform Gradleプラグインから <code>android</code> ターゲットDSLを削除します。</li></ul><h3 id="類似する複数のターゲットの宣言" tabindex="-1">類似する複数のターゲットの宣言 <a class="header-anchor" href="#類似する複数のターゲットの宣言" aria-label="Permalink to &quot;類似する複数のターゲットの宣言&quot;">​</a></h3><p><strong>変更点</strong></p><p>単一のGradleプロジェクトで複数の類似するターゲットを宣言することは推奨されません。例えば：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jvmKtor&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jvmOkHttp&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Not recommended and produces a deprecation warning</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>一般的なケースとして、2つの関連するコードを一緒に持つことがあります。例えば、<code>:shared</code> Gradle プロジェクトで <code>jvm(&quot;jvmKtor&quot;)</code> と <code>jvm(&quot;jvmOkHttp&quot;)</code> を使用して、Ktor または OkHttp ライブラリを用いたネットワーキングを実装したい場合があります。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// shared/build.gradle.kts:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jvmKtor&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        attributes.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">attribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* ... */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jvmOkHttp&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        attributes.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">attribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* ... */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> commonMain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> getting</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> commonJvmMain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sourceSets.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">creating</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependsOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(commonMain)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // Shared dependencies</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jvmKtorMain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependsOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(commonJvmMain)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // Ktor dependencies</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jvmOkHttpMain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependsOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(commonJvmMain)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // OkHttp dependencies</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>この実装には、自明ではない設定の複雑さが伴います。</p><ul><li><code>:shared</code> 側と各コンシューマー側でGradle属性を設定する必要があります。そうしないと、追加情報がない場合、コンシューマーがKtorベースの実装を受け取るべきか、OkHttpベースの実装を受け取るべきかが不明確になるため、Gradleはそのようなプロジェクトの依存関係を解決できません。</li><li><code>commonJvmMain</code> ソースセットを手動で設定する必要があります。</li><li>この設定には、低レベルのGradleおよびKotlin Gradleプラグインの抽象化とAPIが多数含まれます。</li></ul><p><strong>現在の推奨プラクティス</strong></p><p>設定が複雑なのは、KtorベースとOkHttpベースの実装が_同じGradleプロジェクト内にある_ためです。多くの場合、これらの部分を別々のGradleプロジェクトに抽出することが可能です。そのようなリファクタリングの一般的な概要を以下に示します。</p><ol><li><p>元のプロジェクトから重複する2つのターゲットを単一のターゲットに置き換えます。これらのターゲット間で共有ソースセットがあった場合、そのソースと設定を新しく作成されたターゲットのデフォルトソースセットに移動します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// shared/build.gradle.kts:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        jvmMain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // Copy the configuration of jvmCommonMain here</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>通常、<code>settings.gradle.kts</code> ファイルで <code>include</code> を呼び出して、2つの新しいGradleプロジェクトを追加します。例えば：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">include</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;:okhttp-impl&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">include</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;:ktor-impl&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></li><li><p>各新しいGradleプロジェクトを設定します。</p><ul><li>これらのプロジェクトは1つのターゲットのみにコンパイルされるため、<code>kotlin(&quot;multiplatform&quot;)</code> プラグインを適用する必要はないでしょう。この例では、<code>kotlin(&quot;jvm&quot;)</code> を適用できます。</li><li>元のターゲット固有のソースセットの内容をそれぞれのプロジェクトに移動します。例えば、<code>jvmKtorMain</code> から <code>ktor-impl/src</code> へ。</li><li>ソースセットの設定（依存関係、コンパイラオプションなど）をコピーします。</li><li>新しいGradleプロジェクトから元のプロジェクトへの依存関係を追加します。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ktor-impl/build.gradle.kts:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jvm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    project</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;:shared&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Add dependency on the original project</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Copy dependencies of jvmKtorMain here</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Copy compiler options of jvmKtorMain here</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ol><p>このアプローチは初期設定に多くの作業を必要としますが、GradleおよびKotlin Gradleプラグインの低レベルのエンティティを使用しないため、結果として得られるビルドの利用と保守が容易になります。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>残念ながら、各ケースの詳細な移行手順を提供することはできません。上記の手順がうまくいかない場合は、この<a href="https://youtrack.jetbrains.com/issue/KT-59316" target="_blank" rel="noreferrer">YouTrack課題</a>でユースケースを説明してください。</p></div><p><strong>変更の適用時期</strong></p><p>計画されている非推奨サイクルは以下の通りです。</p><ul><li>1.9.20: Kotlin Multiplatform プロジェクトで複数の類似するターゲットが使用された場合に非推奨警告を導入します。</li><li>2.1.0: そのようなケースではエラーを報告します（Kotlin/JSターゲットを除く）。この例外の詳細については、<a href="https://youtrack.jetbrains.com/issue/KT-47038/KJS-MPP-Split-JS-target-into-JsBrowser-and-JsNode" target="_blank" rel="noreferrer">YouTrack</a>の課題を参照してください。</li></ul><h3 id="レガシーモードで公開されたマルチプラットフォームライブラリのサポート非推奨化" tabindex="-1">レガシーモードで公開されたマルチプラットフォームライブラリのサポート非推奨化 <a class="header-anchor" href="#レガシーモードで公開されたマルチプラットフォームライブラリのサポート非推奨化" aria-label="Permalink to &quot;レガシーモードで公開されたマルチプラットフォームライブラリのサポート非推奨化&quot;">​</a></h3><p><strong>変更点</strong></p><p>以前、Kotlin Multiplatform プロジェクトでは「レガシー」バイナリの公開を停止する<a href="#deprecated-gradle-properties-for-hierarchical-structure-support">レガシーモードを非推奨化し</a>、プロジェクトを<a href="./multiplatform-hierarchy">階層構造</a>に移行することを推奨していました。</p><p>エコシステムから「レガシー」バイナリを段階的に廃止し続けるため、Kotlin 1.9.0以降、レガシーライブラリの使用も推奨されません。プロジェクトがレガシーライブラリに依存している場合、以下の警告が表示されます。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>The dependency group:artifact:1.0 was published in the legacy mode. Support for such dependencies will be removed in the future</span></span></code></pre></div><p><strong>現在の推奨プラクティス</strong></p><p><em>マルチプラットフォームライブラリを使用している場合</em>、そのほとんどはすでに「階層構造」モードに移行しているため、ライブラリのバージョンを更新するだけで済みます。詳細については、各ライブラリのドキュメントを参照してください。</p><p>ライブラリがまだ非レガシーバイナリをサポートしていない場合、メンテナーに連絡し、この互換性問題について伝えることができます。</p><p><em>ライブラリの作成者である場合</em>、Kotlin Gradleプラグインを最新バージョンに更新し、<a href="#deprecated-gradle-properties-for-hierarchical-structure-support">非推奨のGradleプロパティ</a>を修正したことを確認してください。</p><p>Kotlinチームはエコシステムの移行を支援することに熱心ですので、何か問題に直面した場合は、遠慮なく<a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrackで課題</a>を作成してください。</p><p><strong>変更の適用時期</strong></p><p>計画されている非推奨サイクルは以下の通りです。</p><ul><li>1.9.0: レガシーライブラリへの依存関係に対する非推奨警告を導入します。</li><li>2.0.0: レガシーライブラリへの依存関係に対する警告をエラーに格上げします。</li><li><blockquote><p>2.0.0: レガシーライブラリへの依存関係のサポートを削除します。そのような依存関係を使用すると、ビルドが失敗する可能性があります。</p></blockquote></li></ul><h3 id="階層構造サポートのための非推奨gradleプロパティ" tabindex="-1">階層構造サポートのための非推奨Gradleプロパティ <a class="header-anchor" href="#階層構造サポートのための非推奨gradleプロパティ" aria-label="Permalink to &quot;階層構造サポートのための非推奨Gradleプロパティ&quot;">​</a></h3><p><strong>変更点</strong></p><p>Kotlinは進化の過程で、マルチプラットフォームプロジェクトにおける<a href="./multiplatform-hierarchy">階層構造</a>のサポートを徐々に導入してきました。これは、共通ソースセットの <code>commonMain</code> と任意のプラットフォーム固有のソースセット（例: <code>jvmMain</code>）の間に中間ソースセットを持つことができる機能です。</p><p>ツールチェーンが十分に安定していない移行期間中、きめ細かいオプトインとオプトアウトを可能にするいくつかのGradleプロパティが導入されました。</p><p>Kotlin 1.6.20以降、階層型プロジェクト構造のサポートはデフォルトで有効になっています。しかし、これらのプロパティは、ブロッキング問題が発生した場合のオプトアウトのために残されていました。すべてのフィードバックを処理した後、これらのプロパティの完全な段階的廃止を開始します。</p><p>以下のプロパティは非推奨になりました。</p><ul><li><code>kotlin.internal.mpp.hierarchicalStructureByDefault</code></li><li><code>kotlin.mpp.enableCompatibilityMetadataVariant</code></li><li><code>kotlin.mpp.hierarchicalStructureSupport</code></li><li><code>kotlin.mpp.enableGranularSourceSetsMetadata</code></li><li><code>kotlin.native.enableDependencyPropagation</code></li></ul><p><strong>現在の推奨プラクティス</strong></p><ul><li>これらのプロパティを <code>gradle.properties</code> および <code>local.properties</code> ファイルから削除します。</li><li>GradleビルドスクリプトやGradleプラグインで、これらをプログラムで設定することは避けてください。</li><li>ビルドで使用されているサードパーティのGradleプラグインによって非推奨プロパティが設定されている場合、プラグインのメンテナーにこれらのプロパティを設定しないように依頼してください。</li></ul><p>Kotlin 1.6.20以降、Kotlinツールチェーンのデフォルト動作にはそのようなプロパティが含まれていないため、重大な影響はないと予想されます。ほとんどの変更は、プロジェクトが再構築された直後に確認できます。</p><p>ライブラリの作者で、特に安全を期したい場合は、コンシューマーがあなたのライブラリを問題なく使用できるか確認してください。</p><p><strong>変更の適用時期</strong></p><p>計画されている非推奨サイクルは以下の通りです。</p><ul><li>1.8.20: 非推奨のGradleプロパティが使用された場合に警告を報告します。</li><li>1.9.20: この警告をエラーに格上げします。</li><li>2.0.0: 非推奨のプロパティを削除します。Kotlin Gradleプラグインはそれらの使用を無視します。</li></ul><p>これらのプロパティを削除した後に問題が発生する可能性は低いですが、万一問題が発生した場合は、<a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrackで課題</a>を作成してください。</p><h3 id="ターゲットプリセットapiの非推奨化" tabindex="-1">ターゲットプリセットAPIの非推奨化 <a class="header-anchor" href="#ターゲットプリセットapiの非推奨化" aria-label="Permalink to &quot;ターゲットプリセットAPIの非推奨化&quot;">​</a></h3><p><strong>変更点</strong></p><p>非常に初期の開発段階で、Kotlin Multiplatform は、いわゆる_ターゲットプリセット_を扱うためのAPIを導入しました。各ターゲットプリセットは、本質的にKotlin Multiplatformターゲットのファクトリとして機能していました。このAPIは、<code>jvm()</code> や <code>iosSimulatorArm64()</code> のようなDSL関数が同じユースケースをより直接的かつ簡潔にカバーできるため、ほとんど冗長であることが判明しました。</p><p>混乱を減らし、より明確なガイドラインを提供するため、Kotlin Gradleプラグインの公開APIにおいて、プリセット関連のすべてのAPIが非推奨になりました。これには以下が含まれます。</p><ul><li><code>org.jetbrains.kotlin.gradle.dsl.KotlinMultiplatformExtension</code> の <code>presets</code> プロパティ</li><li><code>org.jetbrains.kotlin.gradle.plugin.KotlinTargetPreset</code> インターフェースとそのすべての継承クラス</li><li><code>fromPreset</code> のオーバーロード</li></ul><p><strong>現在の推奨プラクティス</strong></p><p>代わりに、それぞれの<a href="./multiplatform-dsl-reference#targets">Kotlinターゲット</a>を使用してください。例：</p>`,93)),i("table",null,[a[0]||(a[0]=i("tr",null,[i("td",null,"変更前"),i("td",null,"変更後")],-1)),i("tr",null,[i("td",null,[l(n,{lang:"kotlin",code:`kotlin {
    targets {
        fromPreset(presets.iosArm64, 'ios')
    }
}`})]),i("td",null,[l(n,{lang:"kotlin",code:`kotlin {
    iosArm64()
}`})])])]),a[22]||(a[22]=t('<p><strong>変更の適用時期</strong></p><p>計画されている非推奨サイクルは以下の通りです。</p><ul><li>1.9.20: プリセット関連APIのすべての使用に対して警告を報告します。</li><li>2.0.0: この警告をエラーに格上げします。</li><li>2.2.0: Kotlin Gradleプラグインの公開APIからプリセット関連APIを削除します。まだそれを使用しているソースは「未解決の参照」エラーで失敗し、バイナリ（例：Gradleプラグイン）は、最新バージョンのKotlin Gradleプラグインに対して再コンパイルしない限り、リンケージエラーで失敗する可能性があります。</li></ul><h3 id="appleターゲットショートカットの非推奨化" tabindex="-1">Appleターゲットショートカットの非推奨化 <a class="header-anchor" href="#appleターゲットショートカットの非推奨化" aria-label="Permalink to &quot;Appleターゲットショートカットの非推奨化&quot;">​</a></h3><p><strong>変更点</strong></p><p>Kotlin Multiplatform DSL における <code>ios()</code>、<code>watchos()</code>、<code>tvos()</code> ターゲットショートカットを非推奨にします。これらはAppleターゲットのソースセット階層を部分的に作成するために設計されていました。しかし、これらは拡張が難しく、時には混乱を招くことが判明しました。</p><p>例えば、<code>ios()</code> ショートカットは <code>iosArm64</code> と <code>iosX64</code> の両方のターゲットを作成しましたが、Apple Mチップを搭載したホストで作業する際に必要な <code>iosSimulatorArm64</code> ターゲットは含まれていませんでした。しかし、このショートカットを変更することは実装が難しく、既存のユーザープロジェクトで問題を引き起こす可能性がありました。</p><p><strong>現在の推奨プラクティス</strong></p><p>Kotlin Gradleプラグインは現在、組み込みの階層テンプレートを提供しています。Kotlin 1.9.20以降、これはデフォルトで有効になっており、一般的なユースケース向けに事前定義された中間ソースセットが含まれています。</p><p>ショートカットの代わりに、ターゲットのリストを指定すると、プラグインがそのリストに基づいて自動的に中間ソースセットを設定します。</p><p>例えば、プロジェクトに <code>iosArm64</code> と <code>iosSimulatorArm64</code> ターゲットがある場合、プラグインは自動的に <code>iosMain</code> と <code>iosTest</code> の中間ソースセットを作成します。<code>iosArm64</code> と <code>macosArm64</code> ターゲットがある場合、<code>appleMain</code> と <code>appleTest</code> ソースセットが作成されます。</p><p>詳細については、<a href="./multiplatform-hierarchy">階層型プロジェクト構造</a>を参照してください。</p><p><strong>変更の適用時期</strong></p><p>計画されている非推奨サイクルは以下の通りです。</p><ul><li>1.9.20: <code>ios()</code>、<code>watchos()</code>、および <code>tvos()</code> ターゲットショートカットが使用された場合に警告を報告します。代わりに、デフォルトの階層テンプレートがデフォルトで有効になります。</li><li>2.1.0: ターゲットショートカットが使用された場合にエラーを報告します。</li><li>2.2.0: Kotlin Multiplatform GradleプラグインからターゲットショートカットDSLを削除します。</li></ul><h3 id="kotlin-アップグレード後のiosフレームワークのバージョン不正" tabindex="-1">Kotlin アップグレード後のiOSフレームワークのバージョン不正 <a class="header-anchor" href="#kotlin-アップグレード後のiosフレームワークのバージョン不正" aria-label="Permalink to &quot;Kotlin アップグレード後のiOSフレームワークのバージョン不正&quot;">​</a></h3><p><strong>問題点</strong></p><p>直接統合を使用している場合、Kotlin コードの変更が Xcode の iOS アプリに反映されないことがあります。直接統合は <code>embedAndSignAppleFrameworkForXcode</code> タスクで設定され、これによりマルチプラットフォームプロジェクトのiOSフレームワークがXcodeのiOSアプリに接続されます。</p><p>これは、マルチプラットフォームプロジェクトでKotlinのバージョンを1.9.2xから2.0.0にアップグレード（または2.0.0から1.9.2xにダウングレード）し、Kotlinファイルに変更を加えてアプリをビルドしようとすると発生する可能性があり、Xcodeが誤って以前のバージョンのiOSフレームワークを使用する場合があります。そのため、変更がXcodeのiOSアプリに表示されません。</p><p><strong>回避策</strong></p><ol><li><p>Xcodeで、<strong>Product</strong> | <strong>Clean Build Folder</strong> を使用してビルドディレクトリをクリーンアップします。</p></li><li><p>ターミナルで以下のコマンドを実行します。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>./gradlew clean</span></span></code></pre></div></li><li><p>アプリを再度ビルドして、新しいバージョンのiOSフレームワークが使用されていることを確認します。</p></li></ol><p><strong>いつ問題が修正されますか？</strong></p><p>この問題はKotlin 2.0.10で修正予定です。Kotlin 2.0.10 のプレビューバージョンが<a href="https://kotlinlang.org/docs/eap.html" target="_blank" rel="noreferrer">Kotlin Early Access Previewに参加する</a>セクションで既に利用可能かどうかを確認できます。</p><p>詳細については、<a href="https://youtrack.jetbrains.com/issue/KT-68257" target="_blank" rel="noreferrer">YouTrackの対応する課題</a>を参照してください。</p><h2 id="kotlin-1-9-0−1-9-25" tabindex="-1">Kotlin 1.9.0−1.9.25 <a class="header-anchor" href="#kotlin-1-9-0−1-9-25" aria-label="Permalink to &quot;Kotlin 1.9.0−1.9.25&quot;">​</a></h2><p>このセクションでは、Kotlin 1.9.0−1.9.25 で非推奨サイクルを終了し、有効になる非互換の変更点について説明します。</p>',26)),a[23]||(a[23]=i("h3",{"initial-collapse-state":"collapsed",collapsible:"true",id:"kotlinソースセットをkotlinコンパイルに直接追加するapiの非推奨化",tabindex:"-1"},[s("KotlinソースセットをKotlinコンパイルに直接追加するAPIの非推奨化 "),i("a",{class:"header-anchor",href:"#kotlinソースセットをkotlinコンパイルに直接追加するapiの非推奨化","aria-label":'Permalink to "KotlinソースセットをKotlinコンパイルに直接追加するAPIの非推奨化 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),a[24]||(a[24]=t(`<p><strong>変更点</strong></p><p><code>KotlinCompilation.source</code> へのアクセスが非推奨になりました。次のようなコードは非推奨警告を生成します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosSimulatorArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> commonMain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> getting</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myCustomIntermediateSourceSet </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> creating</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependsOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(commonMain)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        targets[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jvm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].compilations[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;main&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">source</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myCustomIntermediateSourceSet)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>現在の推奨プラクティス</strong></p><p><code>KotlinCompilation.source(someSourceSet)</code> を置き換えるには、<code>KotlinCompilation</code> のデフォルトソースセットから <code>someSourceSet</code> への <code>dependsOn</code> 関係を追加します。より短く読みやすい <code>by getting</code> を使用して、ソースを直接参照することをお勧めします。ただし、すべてのケースで適用できる <code>KotlinCompilation.defaultSourceSet.dependsOn(someSourceSet)</code> を使用することもできます。</p><p>上記のコードは以下のいずれかの方法で変更できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosSimulatorArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> commonMain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> getting</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myCustomIntermediateSourceSet </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> creating</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependsOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(commonMain)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // オプション #1. より短く読みやすいので、可能な場合に使用します。</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 通常、デフォルトのソースセット名は、ターゲット名とコンパイル名を単純に連結したものです。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jvmMain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependsOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myCustomIntermediateSourceSet)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // オプション #2. より高度なアプローチを必要とするビルドスクリプトの場合に使用する汎用ソリューション:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        targets[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jvm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].compilations[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;main&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].defaultSourceSet.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependsOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myCustomIntermediateSourceSet)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>変更の適用時期</strong></p><p>計画されている非推奨サイクルは以下の通りです。</p><ul><li>1.9.0: <code>KotlinComplation.source</code> が使用された場合に非推奨警告を導入します。</li><li>1.9.20: この警告をエラーに格上げします。</li><li>2.2.0: Kotlin Gradleプラグインから <code>KotlinComplation.source</code> を削除します。これを使用しようとすると、ビルドスクリプトのコンパイル中に「未解決の参照」エラーが発生します。</li></ul>`,10)),a[25]||(a[25]=i("h3",{"initial-collapse-state":"collapsed",collapsible:"true",id:"kotlin-js-gradleプラグインから-kotlin-multiplatform-gradleプラグインへの移行",tabindex:"-1"},[i("code",null,"kotlin-js"),s(" Gradleプラグインから "),i("code",null,"kotlin-multiplatform"),s(" Gradleプラグインへの移行 "),i("a",{class:"header-anchor",href:"#kotlin-js-gradleプラグインから-kotlin-multiplatform-gradleプラグインへの移行","aria-label":'Permalink to "`kotlin-js` Gradleプラグインから `kotlin-multiplatform` Gradleプラグインへの移行 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),a[26]||(a[26]=t("<p><strong>変更点</strong></p><p>Kotlin 1.9.0以降、<code>kotlin-js</code> Gradleプラグインは非推奨になりました。基本的に、これは <code>js()</code> ターゲットを持つ <code>kotlin-multiplatform</code> プラグインの機能を重複させ、内部で同じ実装を共有していました。このような重複は混乱を生み、Kotlinチームのメンテナンス負担を増やしました。代わりに、<code>js()</code> ターゲットを持つ <code>kotlin-multiplatform</code> Gradleプラグインへの移行をお勧めします。</p><p><strong>現在の推奨プラクティス</strong></p>",3)),i("ol",null,[i("li",null,[a[3]||(a[3]=i("p",null,[i("code",null,"pluginManagement {}"),s(" ブロックを使用している場合は、プロジェクトから "),i("code",null,"kotlin-js"),s(" Gradleプラグインを削除し、"),i("code",null,"settings.gradle.kts"),s(" ファイルで "),i("code",null,"kotlin-multiplatform"),s(" を適用します。")],-1)),l(o,null,{default:e(()=>[l(p,{title:"kotlin-js"},{default:e(()=>a[1]||(a[1]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// settings.gradle.kts:")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"pluginManagement"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    plugins"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"        // Remove the following line:")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"        kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"js"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") version "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"1.9.0"')]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    repositories"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"        // ...")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),l(p,{title:"kotlin-multiplatform"},{default:e(()=>a[2]||(a[2]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// settings.gradle.kts:")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"pluginManagement"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    plugins"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"        // Add the following line instead:")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"        kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"multiplatform"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") version "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"1.9.0"')]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    repositories"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"        // ...")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),a[4]||(a[4]=i("p",null,[s("プラグインの適用方法が異なる場合は、移行手順について"),i("a",{href:"https://docs.gradle.org/current/userguide/plugins.html",target:"_blank",rel:"noreferrer"},"Gradleドキュメント"),s("を参照してください。")],-1))]),a[8]||(a[8]=i("li",null,[i("p",null,[s("ソースファイルを "),i("code",null,"main"),s(" および "),i("code",null,"test"),s(" フォルダーから、同じディレクトリ内の "),i("code",null,"jsMain"),s(" および "),i("code",null,"jsTest"),s(" フォルダーに移動します。")])],-1)),i("li",null,[a[7]||(a[7]=t('<p>依存関係の宣言を調整します。</p><ul><li><p><code>sourceSets {}</code> ブロックを使用して、それぞれのソースセットの依存関係、つまり本番環境の依存関係には <code>jsMain {}</code>、テスト依存関係には <code>jsTest {}</code> を設定することをお勧めします。 詳細については、<a href="./multiplatform-add-dependencies">依存関係の追加</a>を参照してください。</p></li><li><p>ただし、トップレベルのブロックで依存関係を宣言したい場合は、<code>api(&quot;group:artifact:1.0&quot;)</code> から <code>add(&quot;jsMainApi&quot;, &quot;group:artifact:1.0&quot;)</code> などに宣言を変更します。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>この場合、トップレベルの <code>dependencies {}</code> ブロックが <code>kotlin {}</code> ブロックの<strong>後に</strong>来ることを確認してください。そうしないと、「Configuration not found」というエラーが表示されます。</p></div></li></ul><p>上記のコードは以下のいずれかの方法で変更できます。</p>',3)),l(o,null,{default:e(()=>[l(p,{title:"kotlin-js"},{default:e(()=>a[5]||(a[5]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// build.gradle.kts:")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"plugins"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"js"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") version "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"1.9.0"')]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"dependencies"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    testImplementation"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"test"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"))")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    implementation"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"org.jetbrains.kotlinx:kotlinx-html:0.8.0"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    js"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"        // ...")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),l(p,{title:"kotlin-multiplatform"},{default:e(()=>a[6]||(a[6]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// build.gradle.kts:")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"plugins"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"multiplatform"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") version "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"1.9.0"')]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    js"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"        // ...")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"    // オプション #1. sourceSets {} ブロックで依存関係を宣言する:")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    sourceSets"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"        val"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," jsMain "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"by"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," getting"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"            dependencies"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"                // ここでjsプレフィックスは不要です。トップレベルのブロックからコピー&ペーストできます。")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"                implementation"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"org.jetbrains.kotlinx:kotlinx-html:0.8.0"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"       }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),s(`
`),i("span",{class:"line"}),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"dependencies"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"    // オプション #2. 依存関係の宣言にjsプレフィックスを追加する:")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    add"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"jsTestImplementation"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"test"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"))")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1})]),a[9]||(a[9]=i("li",null,[i("p",null,[i("code",null,"kotlin {}"),s(" ブロック内でKotlin Gradleプラグインによって提供されるDSLは、ほとんどの場合変更されません。しかし、タスクや設定などの低レベルのGradleエンティティを名前で参照していた場合、通常は "),i("code",null,"js"),s(" プレフィックスを追加して調整する必要があります。例えば、"),i("code",null,"browserTest"),s(" タスクは "),i("code",null,"jsBrowserTest"),s(" という名前で見つけることができます。")])],-1))]),a[27]||(a[27]=i("p",null,[i("strong",null,"変更の適用時期")],-1)),a[28]||(a[28]=i("p",null,[s("1.9.0では、"),i("code",null,"kotlin-js"),s(" Gradleプラグインを使用すると非推奨警告が生成されます。")],-1)),a[29]||(a[29]=i("h3",{"initial-collapse-state":"collapsed",collapsible:"true",id:"jvmwithjavaプリセットの非推奨化",tabindex:"-1"},[i("code",null,"jvmWithJava"),s("プリセットの非推奨化 "),i("a",{class:"header-anchor",href:"#jvmwithjavaプリセットの非推奨化","aria-label":'Permalink to "`jvmWithJava`プリセットの非推奨化 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),a[30]||(a[30]=t('<p><strong>変更点</strong></p><p><code>targetPresets.jvmWithJava</code> は非推奨であり、その使用は推奨されません。</p><p><strong>現在の推奨プラクティス</strong></p><p>代わりに <code>jvm { withJava() }</code> ターゲットを使用してください。<code>jvm { withJava() }</code> に切り替えた後、<code>.java</code> ソースを含むソースディレクトリへのパスを調整する必要があることに注意してください。</p><p>例えば、デフォルト名「jvm」で <code>jvm</code> ターゲットを使用している場合：</p><table tabindex="0"><thead><tr><th>変更前</th><th>変更後</th></tr></thead><tbody><tr><td><code>src/main/java</code></td><td><code>src/jvmMain/java</code></td></tr><tr><td><code>src/test/java</code></td><td><code>src/jvmTest/java</code></td></tr></tbody></table><p><strong>変更の適用時期</strong></p><p>計画されている非推奨サイクルは以下の通りです。</p><ul><li>1.3.40: <code>targetPresets.jvmWithJava</code> が使用された場合に警告を導入します。</li><li>1.9.20: この警告をエラーに格上げします。</li><li><blockquote><p>1.9.20: <code>targetPresets.jvmWithJava</code> API を削除します。これを使用しようとすると、ビルドスクリプトのコンパイルが失敗します。</p></blockquote></li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p><code>targetPresets</code> API全体が非推奨になったとしても、<code>jvmWithJava</code>プリセットは異なる非推奨スケジュールを持っています。</p></div>',10)),a[31]||(a[31]=i("h3",{"initial-collapse-state":"collapsed",collapsible:"true",id:"レガシーandroidソースセットレイアウトの非推奨化",tabindex:"-1"},[s("レガシーAndroidソースセットレイアウトの非推奨化 "),i("a",{class:"header-anchor",href:"#レガシーandroidソースセットレイアウトの非推奨化","aria-label":'Permalink to "レガシーAndroidソースセットレイアウトの非推奨化 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),a[32]||(a[32]=t('<p><strong>変更点</strong></p><p>Kotlin 1.9.0以降、<a href="./multiplatform-android-layout">新しいAndroidソースセットレイアウト</a>がデフォルトで使用されます。レガシーレイアウトのサポートは非推奨になり、<code>kotlin.mpp.androidSourceSetLayoutVersion</code> Gradleプロパティの使用は現在、非推奨診断をトリガーします。</p><p><strong>変更の適用時期</strong></p><p>計画されている非推奨サイクルは以下の通りです。</p><ul><li>&lt;=1.9.0: <code>kotlin.mpp.androidSourceSetLayoutVersion=1</code> が使用された場合に警告を報告します。この警告は <code>kotlin.mpp.androidSourceSetLayoutVersion1.nowarn=true</code> Gradleプロパティで抑制できます。</li><li>1.9.20: この警告をエラーに格上げします。このエラーは<strong>抑制できません</strong>。</li><li><blockquote><p>1.9.20: <code>kotlin.mpp.androidSourceSetLayoutVersion=1</code> のサポートを削除します。Kotlin Gradleプラグインはこのプロパティを無視します。</p></blockquote></li></ul>',5)),a[33]||(a[33]=i("h3",{"initial-collapse-state":"collapsed",collapsible:"true",id:"カスタム-dependson-を持つ-commonmain-および-commontest-の非推奨化",tabindex:"-1"},[s("カスタム "),i("code",null,"dependsOn"),s(" を持つ "),i("code",null,"commonMain"),s(" および "),i("code",null,"commonTest"),s(" の非推奨化 "),i("a",{class:"header-anchor",href:"#カスタム-dependson-を持つ-commonmain-および-commontest-の非推奨化","aria-label":'Permalink to "カスタム `dependsOn` を持つ `commonMain` および `commonTest` の非推奨化 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),a[34]||(a[34]=t("<p><strong>変更点</strong></p><p><code>commonMain</code> と <code>commonTest</code> ソースセットは、それぞれ <code>main</code> と <code>test</code> ソースセット階層のルートを表すのが一般的です。しかし、これらのソースセットの <code>dependsOn</code> 関係を手動で設定することで、これをオーバーライドすることが可能でした。</p><p>このような設定を維持するには、マルチプラットフォームビルドの内部に関する追加の労力と知識が必要です。さらに、<code>commonMain</code> が <code>main</code> ソースセット階層のルートであるかどうかを確認するために、特定のビルドスクリプトを読み込む必要があるため、コードの可読性と再利用性が低下します。</p><p>したがって、<code>commonMain</code> および <code>commonTest</code> の <code>dependsOn</code> へのアクセスは非推奨になりました。</p><p><strong>現在の推奨プラクティス</strong></p><p><code>commonMain.dependsOn(customCommonMain)</code> を使用する <code>customCommonMain</code> ソースセットを1.9.20に移行する必要があるとします。ほとんどの場合、<code>customCommonMain</code> は <code>commonMain</code> と同じコンパイルに参加するため、<code>customCommonMain</code> を <code>commonMain</code> にマージできます。</p><ol><li><code>customCommonMain</code> のソースを <code>commonMain</code> にコピーします。</li><li><code>customCommonMain</code> のすべての依存関係を <code>commonMain</code> に追加します。</li><li><code>customCommonMain</code> のすべてのコンパイラオプション設定を <code>commonMain</code> に追加します。</li></ol><p>まれに、<code>customCommonMain</code> が <code>commonMain</code> よりも多くのコンパイルに参加している場合があります。このような設定には、ビルドスクリプトの追加の低レベル構成が必要です。それがあなたのユースケースであるかどうかわからない場合、おそらくそうではありません。</p><p>それがあなたのユースケースである場合、<code>customCommonMain</code> のソースと設定を <code>commonMain</code> に移動し、その逆を行うことで、これら2つのソースセットを「スワップ」してください。</p><p><strong>変更の適用時期</strong></p><p>計画されている非推奨サイクルは以下の通りです。</p><ul><li>1.9.0: <code>commonMain</code> で <code>dependsOn</code> が使用された場合に警告を報告します。</li><li><blockquote><p>=1.9.20: <code>commonMain</code> または <code>commonTest</code> で <code>dependsOn</code> が使用された場合にエラーを報告します。</p></blockquote></li></ul>",12)),a[35]||(a[35]=i("h3",{"initial-collapse-state":"collapsed",collapsible:"true",id:"フォワード宣言への新しいアプローチ",tabindex:"-1"},[s("フォワード宣言への新しいアプローチ "),i("a",{class:"header-anchor",href:"#フォワード宣言への新しいアプローチ","aria-label":'Permalink to "フォワード宣言への新しいアプローチ {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),a[36]||(a[36]=t(`<p><strong>変更点</strong></p><p>JetBrainsチームは、Kotlinにおけるフォワード宣言のアプローチを改訂し、その動作をより予測可能にしました。</p><ul><li>フォワード宣言は <code>cnames</code> または <code>objcnames</code> パッケージを使用してのみインポートできます。</li><li>対応するCおよびObjective-Cのフォワード宣言へのキャストを明示的に行う必要があります。</li></ul><p><strong>現在の推奨プラクティス</strong></p><ul><li><p><code>cstructName</code> フォワード宣言を宣言する <code>library.package</code> を持つCライブラリを考えてみましょう。 以前は、<code>import library.package.cstructName</code> を使ってライブラリから直接インポートすることが可能でした。 現在では、そのための特別なフォワード宣言パッケージを使用するしかありません: <code>import cnames.structs.cstructName</code>。 <code>objcnames</code> も同様です。</p></li><li><p>2つのobjcinteropライブラリを考えてみましょう。1つは <code>objcnames.protocols.ForwardDeclaredProtocolProtocol</code> を使用し、もう1つは実際の定義を持っています。</p><div class="language-ObjC vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ObjC</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// First objcinterop library</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;Foundation/Foundation.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@protocol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ForwardDeclaredProtocol;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NSString</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> consumeProtocol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;ForwardDeclaredProtocol&gt; </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NSString</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> stringWithUTF8String:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Protocol&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-ObjC vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ObjC</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Second objcinterop library</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Header:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;Foundation/Foundation.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@protocol</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ForwardDeclaredProtocol</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@end</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Implementation:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ForwardDeclaredProtocolImpl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NSObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;ForwardDeclaredProtocol&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;ForwardDeclaredProtocol&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">produceProtocol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ForwardDeclaredProtocolImpl </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>以前は、それらの間でオブジェクトをシームレスに転送することが可能でした。現在では、フォワード宣言には明示的な <code>as</code> キャストが必要です。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Kotlin code:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    consumeProtocol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">produceProtocol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> objcnames.protocols.ForwardDeclaredProtocolProtocol)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p><code>objcnames.protocols.ForwardDeclaredProtocolProtocol</code> へのキャストは、対応する実際のクラスからのみ可能です。そうしないとエラーが発生します。</p></div></li></ul><p><strong>変更の適用時期</strong></p><p>Kotlin 1.9.20 以降、対応するCおよびObjective-Cのフォワード宣言との間で明示的にキャストを行う必要があります。また、フォワード宣言は特別なパッケージを使用することによってのみインポートできるようになりました。</p><h2 id="kotlin-1-7-0−1-8-22" tabindex="-1">Kotlin 1.7.0−1.8.22 <a class="header-anchor" href="#kotlin-1-7-0−1-8-22" aria-label="Permalink to &quot;Kotlin 1.7.0−1.8.22&quot;">​</a></h2><p>このセクションでは、Kotlin 1.7.0−1.8.22 で非推奨サイクルを終了し、有効になる非互換の変更点について説明します。</p>`,9)),a[37]||(a[37]=i("h3",{"initial-collapse-state":"collapsed",collapsible:"true",id:"kotlin-multiplatform-gradleプラグインとgradle-javaプラグインの非推奨の互換性",tabindex:"-1"},[s("Kotlin Multiplatform GradleプラグインとGradle Javaプラグインの非推奨の互換性 "),i("a",{class:"header-anchor",href:"#kotlin-multiplatform-gradleプラグインとgradle-javaプラグインの非推奨の互換性","aria-label":'Permalink to "Kotlin Multiplatform GradleプラグインとGradle Javaプラグインの非推奨の互換性 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),a[38]||(a[38]=t(`<p><strong>変更点</strong></p><p>Kotlin Multiplatform Gradleプラグインと、<a href="https://docs.gradle.org/current/userguide/java_plugin.html" target="_blank" rel="noreferrer">Java</a>、<a href="https://docs.gradle.org/current/userguide/java_library_plugin.html" target="_blank" rel="noreferrer">Java Library</a>、<a href="https://docs.gradle.org/current/userguide/application_plugin.html" target="_blank" rel="noreferrer">Application</a>のGradleプラグインとの互換性問題により、これらのプラグインを同じプロジェクトに適用すると非推奨警告が表示されるようになりました。マルチプラットフォームプロジェクト内の別のGradleプラグインがGradle Javaプラグインを適用する場合にもこの警告が表示されます。例えば、<a href="https://docs.spring.io/spring-boot/gradle-plugin/index.html" target="_blank" rel="noreferrer">Spring Boot Gradle Plugin</a> は自動的に Application プラグインを適用します。</p><p>この非推奨警告は、Kotlin MultiplatformのプロジェクトモデルとGradleのJavaエコシステムプラグインとの間の根本的な互換性の問題のために追加されました。GradleのJavaエコシステムプラグインは現在、他のプラグインが以下の可能性があることを考慮していません。</p><ul><li>Javaエコシステムプラグインとは異なる方法でJVMターゲットを公開またはコンパイルする。</li><li>同じプロジェクト内にJVMとAndroidのように2つの異なるJVMターゲットを持つ。</li><li>複数の非JVMターゲットを持つ可能性のある複雑なマルチプラットフォームプロジェクト構造を持つ。</li></ul><p>残念ながら、Gradleは現在、これらの問題に対処するためのAPIを提供していません。</p><p>以前は、Javaエコシステムプラグインとの統合を支援するために、Kotlin Multiplatformでいくつかの回避策を使用していました。しかし、これらの回避策は互換性の問題を真に解決することはなく、Gradle 8.8のリリース以降、これらの回避策はもはや不可能です。詳細については、<a href="https://youtrack.jetbrains.com/issue/KT-66542/Gradle-JVM-target-with-withJava-produces-a-deprecation-warning" target="_blank" rel="noreferrer">YouTrackの課題</a>を参照してください。</p><p>この互換性問題を正確に解決する方法はまだ不明ですが、Kotlin MultiplatformプロジェクトにおけるJavaソースコンパイルの何らかの形式のサポートを継続することをお約束します。最低限、マルチプラットフォームプロジェクト内でJavaソースのコンパイルとGradleの<a href="https://docs.gradle.org/current/javadoc/org/gradle/api/plugins/JavaBasePlugin.html" target="_blank" rel="noreferrer"><code>java-base</code></a>プラグインの使用をサポートします。</p><p><strong>現在の推奨プラクティス</strong></p><p>マルチプラットフォームプロジェクトでこの非推奨警告が表示された場合、以下のことをお勧めします。</p><ol><li>プロジェクトでGradle Javaプラグインが実際に必要かどうかを判断します。必要ない場合は、削除を検討してください。</li><li>Gradle Javaプラグインが単一のタスクのみに使用されているか確認します。その場合、あまり労力をかけずにプラグインを削除できる可能性があります。例えば、タスクがJavadoc JARファイルを作成するためにGradle Javaプラグインを使用している場合、代わりにJavadocタスクを手動で定義できます。</li></ol><p>それ以外で、マルチプラットフォームプロジェクトでKotlin Multiplatform GradleプラグインとこれらのGradle Javaプラグインの両方を使用したい場合は、以下のことをお勧めします。</p><ol><li>Gradleプロジェクト内に別途サブプロジェクトを作成します。</li><li>そのサブプロジェクトで、Java用のGradleプラグインを適用します。</li><li>そのサブプロジェクトで、親のマルチプラットフォームプロジェクトへの依存関係を追加します。</li></ol><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>そのサブプロジェクトはマルチプラットフォームプロジェクトで<strong>あってはならず</strong>、マルチプラットフォームプロジェクトへの依存関係を設定するためだけに使用する必要があります。</p></div><p>例えば、<code>my-main-project</code> というマルチプラットフォームプロジェクトがあり、<a href="https://docs.gradle.org/current/userguide/java_library_plugin.html" target="_blank" rel="noreferrer">Java Library</a> Gradleプラグインを使用したいとします。</p><p>サブプロジェクト（仮に <code>subproject-A</code> とします）を作成すると、親プロジェクトの構造は以下のようになります。</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>.</span></span>
<span class="line"><span>├── build.gradle</span></span>
<span class="line"><span>├── settings.gradle.kts</span></span>
<span class="line"><span>├── subproject-A</span></span>
<span class="line"><span>    └── build.gradle.kts</span></span>
<span class="line"><span>    └── src</span></span>
<span class="line"><span>        └── Main.java</span></span></code></pre></div><p>サブプロジェクトの <code>build.gradle.kts</code> ファイルで、<code>plugins {}</code> ブロックにJava Libraryプラグインを適用します。</p>`,17)),l(o,{group:"build-script"},{default:e(()=>[l(p,{title:"Kotlin","group-key":"kotlin"},{default:e(()=>a[10]||(a[10]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"plugins"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    id"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"java-library"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),l(p,{title:"Groovy","group-key":"groovy"},{default:e(()=>a[11]||(a[11]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"plugins {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    id("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'java-library'"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),a[39]||(a[39]=i("p",null,[s("サブプロジェクトの "),i("code",null,"build.gradle.kts"),s(" ファイルで、親のマルチプラットフォームプロジェクトへの依存関係を追加します。")],-1)),l(o,{group:"build-script"},{default:e(()=>[l(p,{title:"Kotlin","group-key":"kotlin"},{default:e(()=>a[12]||(a[12]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"dependencies"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    implementation"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"project"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'":my-main-project"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")) "),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// The name of your parent multiplatform project")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),l(p,{title:"Groovy","group-key":"groovy"},{default:e(()=>a[13]||(a[13]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"dependencies {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    implementation project("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"':my-main-project'"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") "),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// The name of your parent multiplatform project")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),a[40]||(a[40]=i("p",null,"これで親プロジェクトは両方のプラグインで動作するように設定されました。",-1)),a[41]||(a[41]=i("h3",{"initial-collapse-state":"collapsed",collapsible:"true",id:"自動生成ターゲットへの新しいアプローチ",tabindex:"-1"},[s("自動生成ターゲットへの新しいアプローチ "),i("a",{class:"header-anchor",href:"#自動生成ターゲットへの新しいアプローチ","aria-label":'Permalink to "自動生成ターゲットへの新しいアプローチ {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),a[42]||(a[42]=t("<p><strong>変更点</strong></p><p>Gradleによって自動生成されるターゲットアクセサーは、<code>kotlin.targets {}</code> ブロック内では利用できなくなりました。代わりに <code>findByName(&quot;targetName&quot;)</code> メソッドを使用してください。</p><p>なお、このようなアクセサーは <code>kotlin.targets {}</code> の場合は、例えば <code>kotlin.targets.linuxX64</code> のように引き続き利用可能です。</p><p><strong>現在の推奨プラクティス</strong></p>",4)),i("table",null,[a[14]||(a[14]=i("tr",null,[i("td",null,"変更前"),i("td",null,"変更後")],-1)),i("tr",null,[i("td",null,[l(n,{lang:"kotlin",code:`kotlin {
    targets {
        configure(['windows',
            'linux']) {
        }
    }
}`})]),i("td",null,[l(n,{lang:"kotlin",code:`kotlin {
    targets {
        configure([findByName('windows'),
            findByName('linux')]) {
        }
    }
}`})])])]),a[43]||(a[43]=i("p",null,[i("strong",null,"変更の適用時期")],-1)),a[44]||(a[44]=i("p",null,[s("Kotlin 1.7.20では、"),i("code",null,"kotlin.targets {}"),s(" ブロック内でターゲットアクセサーを使用するとエラーが導入されます。")],-1)),a[45]||(a[45]=i("p",null,[s("詳細については、"),i("a",{href:"https://youtrack.jetbrains.com/issue/KT-47047",target:"_blank",rel:"noreferrer"},"YouTrackの対応する課題"),s("を参照してください。")],-1)),a[46]||(a[46]=i("h3",{"initial-collapse-state":"collapsed",collapsible:"true",id:"gradleの入力および出力コンパイルタスクの変更点",tabindex:"-1"},[s("Gradleの入力および出力コンパイルタスクの変更点 "),i("a",{class:"header-anchor",href:"#gradleの入力および出力コンパイルタスクの変更点","aria-label":'Permalink to "Gradleの入力および出力コンパイルタスクの変更点 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),a[47]||(a[47]=t('<p><strong>変更点</strong></p><p>Kotlinのコンパイルタスクは、<code>sourceCompatibility</code> および <code>targetCompatibility</code> 入力を持つGradleの <code>AbstractCompile</code> タスクを継承しなくなり、Kotlinユーザーのスクリプトからは利用できなくなりました。</p><p>コンパイルタスクにおけるその他の破壊的変更：</p><p><strong>現在の推奨プラクティス</strong></p><table tabindex="0"><thead><tr><th>変更前</th><th>変更後</th></tr></thead><tbody><tr><td><code>SourceTask.stableSources</code> 入力は利用できなくなりました。</td><td>代わりに <code>sources</code> 入力を使用してください。また、<code>setSource()</code> メソッドは引き続き利用可能です。</td></tr><tr><td><code>sourceFilesExtensions</code> 入力は削除されました。</td><td>コンパイルタスクは引き続き <code>PatternFilterable</code> インターフェースを実装しています。Kotlinソースのフィルタリングにはそのメソッドを使用してください。</td></tr><tr><td><code>Gradle destinationDir: File</code> 出力は非推奨になりました。</td><td>代わりに <code>destinationDirectory: DirectoryProperty</code> 出力を使用してください。</td></tr><tr><td><code>KotlinCompile</code> タスクの <code>classpath</code> プロパティは非推奨になりました。</td><td>すべてのコンパイルタスクは、コンパイルに必要なライブラリのリストに対して <code>libraries</code> 入力を使用します。</td></tr></tbody></table><p><strong>変更の適用時期</strong></p><p>Kotlin 1.7.20では、入力が利用できなくなり、出力が置き換えられ、<code>classpath</code> プロパティが非推奨になりました。</p><p>詳細については、<a href="https://youtrack.jetbrains.com/issue/KT-32805" target="_blank" rel="noreferrer">YouTrackの対応する課題</a>を参照してください。</p>',8)),a[48]||(a[48]=i("h3",{"initial-collapse-state":"collapsed",collapsible:"true",id:"コンパイルの依存関係の新しい設定名",tabindex:"-1"},[s("コンパイルの依存関係の新しい設定名 "),i("a",{class:"header-anchor",href:"#コンパイルの依存関係の新しい設定名","aria-label":'Permalink to "コンパイルの依存関係の新しい設定名 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),a[49]||(a[49]=t("<p><strong>変更点</strong></p><p>Kotlin Multiplatform Gradleプラグインによって作成されるコンパイル設定に新しい名前が付けられました。</p><p>Kotlin Multiplatform プロジェクトのターゲットには、<code>main</code> と <code>test</code> の2つのデフォルトコンパイルがあります。これらの各コンパイルには、例えば <code>jvmMain</code> や <code>jvmTest</code> のように独自のデフォルトソースセットがあります。以前は、テストコンパイルとそのデフォルトソースセットの設定名が同じであったため、プラットフォーム固有の属性を持つ設定が別の設定に含まれる場合に、名前の衝突による問題が発生する可能性がありました。</p><p>現在、コンパイル設定には追加の <code>Compilation</code> 接尾辞が付き、古いハードコードされた設定名を使用するプロジェクトやプラグインはコンパイルされなくなりました。</p><p>対応するソースセットへの依存関係の設定名は変更されません。</p><p><strong>現在の推奨プラクティス</strong></p>",6)),i("table",null,[a[19]||(a[19]=i("tr",null,[i("td"),i("td",null,"変更前"),i("td",null,"変更後")],-1)),i("tr",null,[a[15]||(a[15]=i("td",{rowspan:"2"},[i("code",null,"jvmMain"),s(" コンパイルの依存関係")],-1)),i("td",null,[l(n,{lang:"kotlin",code:"jvm<Scope>"})]),i("td",null,[l(n,{lang:"kotlin",code:"jvmCompilation<Scope>"})])]),i("tr",null,[i("td",null,[l(n,{lang:"kotlin",code:`dependencies {
    add("jvmImplementation",
        "foo.bar.baz:1.2.3")
}`})]),i("td",null,[l(n,{lang:"kotlin",code:`dependencies {
    add("jvmCompilationImplementation",
        "foo.bar.baz:1.2.3")
}`})])]),i("tr",null,[a[16]||(a[16]=i("td",null,[i("code",null,"jvmMain"),s(" ソースセットの依存関係")],-1)),i("td",E,[l(n,{lang:"kotlin",code:"jvmMain<Scope>"})])]),i("tr",null,[a[17]||(a[17]=i("td",null,[i("code",null,"jvmTest"),s(" コンパイルの依存関係")],-1)),i("td",null,[l(n,{lang:"kotlin",code:"jvmTest<Scope>"})]),i("td",null,[l(n,{lang:"kotlin",code:"jvmTestCompilation<Scope>"})])]),i("tr",null,[a[18]||(a[18]=i("td",null,[i("code",null,"jvmTest"),s(" ソースセットの依存関係")],-1)),i("td",u,[l(n,{lang:"kotlin",code:"jvmTest<Scope>"})])])]),a[50]||(a[50]=t('<p>利用可能なスコープは <code>Api</code>、<code>Implementation</code>、<code>CompileOnly</code>、<code>RuntimeOnly</code> です。</p><p><strong>変更の適用時期</strong></p><p>Kotlin 1.8.0では、ハードコードされた文字列で古い設定名を使用するとエラーが導入されます。</p><p>詳細については、<a href="https://youtrack.jetbrains.com/issue/KT-35916/" target="_blank" rel="noreferrer">YouTrackの対応する課題</a>を参照してください。</p>',4))])}const j=h(g,[["render",y]]);export{A as __pageData,j as default};
