import{_ as e,c as a,o as r,ag as l}from"./chunks/framework.Bksy39di.js";const d=JSON.parse('{"title":"构建适用于多平台的 Kotlin 库","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/api-guidelines-build-for-multiplatform.md","filePath":"kotlin/api-guidelines-build-for-multiplatform.md","lastUpdated":1754307826000}'),o={name:"kotlin/api-guidelines-build-for-multiplatform.md"};function i(n,t,p,s,m,c){return r(),a("div",null,t[0]||(t[0]=[l('<h1 id="构建适用于多平台的-kotlin-库" tabindex="-1">构建适用于多平台的 Kotlin 库 <a class="header-anchor" href="#构建适用于多平台的-kotlin-库" aria-label="Permalink to &quot;构建适用于多平台的 Kotlin 库&quot;">​</a></h1><p>当创建 Kotlin 库时，请考虑构建并<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-publish-lib-setup.html" target="_blank" rel="noreferrer">发布它以支持 Kotlin Multiplatform</a>。这会拓宽您的库的目标受众，使其与面向多个平台的项目兼容。</p><p>以下章节提供了帮助您有效构建 Kotlin Multiplatform 库的指南。</p><h2 id="扩大您的覆盖范围" tabindex="-1">扩大您的覆盖范围 <a class="header-anchor" href="#扩大您的覆盖范围" aria-label="Permalink to &quot;扩大您的覆盖范围&quot;">​</a></h2><p>为了使您的库作为依赖项可供最多的项目使用，请旨在支持尽可能多的 Kotlin Multiplatform <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-dsl-reference.html#targets" target="_blank" rel="noreferrer">目标平台</a>。</p><p>如果您的库不支持多平台项目（无论是库还是应用程序）所使用的平台，该项目将难以依赖您的库。在这种情况下，项目可以对某些平台使用您的库，而需要为其他平台实现单独的解决方案，或者它们将完全选择一个支持其所有平台的替代库。</p><p>为了简化构件生产，您可以尝试<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-publish-lib-setup.html#host-requirements" target="_blank" rel="noreferrer">实验性的交叉编译</a>，以便从任何主机发布 Kotlin Multiplatform 库。这允许您无需 Apple 机器即可为 Apple 目标生成 <code>.klib</code> 构件。我们计划在未来稳定化此特性并进一步改进库的发布。请在我们的问题跟踪器 <a href="https://youtrack.jetbrains.com/issue/KT-71290" target="_blank" rel="noreferrer">YouTrack</a> 中留下您对此特性的反馈。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>对于 Kotlin/Native 目标，请考虑使用<a href="/kotlin/native-target-support#for-library-authors">分层方法</a>来支持所有可能的目标。</p></div><h2 id="设计可从公共代码使用的-api" tabindex="-1">设计可从公共代码使用的 API <a class="header-anchor" href="#设计可从公共代码使用的-api" aria-label="Permalink to &quot;设计可从公共代码使用的 API&quot;">​</a></h2><p>创建库时，请将 API 设计为可从公共 Kotlin 代码使用，而不是编写平台特有的实现。</p><p>在可能的情况下提供合理的默认配置，并包含平台特有的配置选项。良好的默认值允许用户从公共 Kotlin 代码中使用库的 API，而无需编写平台特有的实现来配置库。</p><p>按照以下优先级将 API 放置在最广泛的相关源代码集中：</p><ul><li><strong><code>commonMain</code> 源代码集：</strong> <code>commonMain</code> 源代码集中的 API 可供库支持的所有平台使用。旨在将您库的大部分 API 放置在此处。</li><li><strong>中间源代码集：</strong> 如果某些平台不支持特定 API，请使用<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-discover-project.html#intermediate-source-sets" target="_blank" rel="noreferrer">中间源代码集</a>来面向特定平台。例如，您可以创建一个 <code>concurrent</code> 源代码集，用于支持多线程的目标，或者一个 <code>nonJvm</code> 源代码集，用于所有非 JVM 目标。</li><li><strong>平台特有的源代码集：</strong> 对于平台特有的 API，请使用 <code>androidMain</code> 等源代码集。</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>关于 Kotlin Multiplatform 项目的源代码集，请参见<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-hierarchy.html" target="_blank" rel="noreferrer">分层项目结构</a>。</p></div><h2 id="确保跨平台行为一致" tabindex="-1">确保跨平台行为一致 <a class="header-anchor" href="#确保跨平台行为一致" aria-label="Permalink to &quot;确保跨平台行为一致&quot;">​</a></h2><p>为了确保您的库在所有支持的平台上行为一致，多平台库中的 API 应在所有平台上接受相同范围的有效输入、执行相同的操作并返回相同的结果。同样，库应统一处理无效输入，并在所有平台上一致地报告错误或抛出异常。</p><p>不一致的行为会使库难以使用，并迫使用户在公共代码中添加条件逻辑来管理平台特有的差异。</p><p>您可以使用<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-expect-actual.html" target="_blank" rel="noreferrer"><code>expect</code> 和 <code>actual</code> 声明</a>来在公共代码中声明函数，这些函数具有平台特有的实现，可以完全访问每个平台的原生 API。这些实现也必须具有相同的行为，以确保它们可以从公共代码中可靠地使用。</p><p>当 API 在跨平台时行为一致时，它们只需在 <code>commonMain</code> 源代码集中文档化一次。</p><blockquote><p>如果平台差异不可避免，例如当一个平台 支持更广泛的输入集时，请尽可能减少它们。例如，您可能不想限制一个平台的功能以匹配其他平台。在这种情况下，请清晰地文档化具体差异。</p><p style=""></p></blockquote><h2 id="在所有平台上测试" tabindex="-1">在所有平台上测试 <a class="header-anchor" href="#在所有平台上测试" aria-label="Permalink to &quot;在所有平台上测试&quot;">​</a></h2><p>多平台库可以有<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-run-tests.html" target="_blank" rel="noreferrer">多平台测试</a>，这些测试用公共代码编写，并在所有平台上运行。定期在您支持的平台上执行此公共测试套件可以确保库行为正确且一致。</p><p>定期测试所有已发布平台上的 Kotlin/Native 目标可能具有挑战性。然而，为了确保更广泛的兼容性，请考虑为它能支持的所有目标发布库，并在测试兼容性时使用<a href="/kotlin/native-target-support#for-library-authors">分层方法</a>。</p><p>使用<a href="https://kotlinlang.org/api/latest/kotlin.test/" target="_blank" rel="noreferrer"><code>kotlin-test</code></a> 库在公共代码中编写测试，并使用平台特有的测试运行器执行它们。</p><h2 id="考虑非-kotlin-用户" tabindex="-1">考虑非 Kotlin 用户 <a class="header-anchor" href="#考虑非-kotlin-用户" aria-label="Permalink to &quot;考虑非 Kotlin 用户&quot;">​</a></h2><p>Kotlin Multiplatform 提供与其支持的目标平台上的原生 API 和语言的互操作性。创建 Kotlin Multiplatform 库时，请考虑用户是否可能需要从非 Kotlin 语言中使用您库的类型和声明。</p><p>例如，如果您的库中的某些类型将通过互操作性暴露给 Swift 代码，请将这些类型设计为可从 Swift 轻松访问。 <a href="https://github.com/kotlin-hands-on/kotlin-swift-interopedia" target="_blank" rel="noreferrer">Kotlin-Swift interopedia</a> 提供了关于从 Swift 调用时 Kotlin API 呈现方式的有用见解。</p><h2 id="推广您的库" tabindex="-1">推广您的库 <a class="header-anchor" href="#推广您的库" aria-label="Permalink to &quot;推广您的库&quot;">​</a></h2><p>您的库可以在 <a href="https://klibs.io/" target="_blank" rel="noreferrer">JetBrains 搜索平台</a>上展示。它旨在方便用户根据目标平台查找 Kotlin Multiplatform 库。</p><p>符合条件的库会自动添加。关于如何添加您的库的更多信息，请参见<a href="https://klibs.io/faq" target="_blank" rel="noreferrer">常见问题解答</a>。</p>',30)]))}const f=e(o,[["render",i]]);export{d as __pageData,f as default};
