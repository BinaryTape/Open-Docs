import{_ as a,c as t,o as i,ag as o}from"./chunks/framework.Bksy39di.js";const m=JSON.parse('{"title":"シンプルさ","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/api-guidelines-simplicity.md","filePath":"ja/kotlin/api-guidelines-simplicity.md","lastUpdated":1754307826000}'),r={name:"ja/kotlin/api-guidelines-simplicity.md"};function l(n,e,p,s,c,d){return i(),t("div",null,e[0]||(e[0]=[o('<h1 id="シンプルさ" tabindex="-1">シンプルさ <a class="header-anchor" href="#シンプルさ" aria-label="Permalink to &quot;シンプルさ&quot;">​</a></h1><p>ユーザーが理解する必要のある概念が少なく、それらがより明示的に伝達されるほど、彼らのメンタルモデルはよりシンプルになる可能性が高くなります。これは、APIにおける操作と抽象化の数を制限することによって達成できます。</p><p>ライブラリ内の宣言の<a href="/ja/kotlin/visibility-modifiers">可視性</a>が適切に設定され、内部実装の詳細が公開APIに含まれないようにしてください。公開利用のために明示的に設計およびドキュメント化されたAPIのみが、ユーザーにアクセス可能であるべきです。</p><p>ガイドの次のパートでは、シンプルさを促進するためのいくつかのガイドラインについて説明します。</p><h2 id="明示的なapiモードを使用する" tabindex="-1">明示的なAPIモードを使用する <a class="header-anchor" href="#明示的なapiモードを使用する" aria-label="Permalink to &quot;明示的なAPIモードを使用する&quot;">​</a></h2><p>ライブラリのAPIを設計する際に意図を明示的に示すことを強制する、Kotlinコンパイラの<a href="/ja/kotlin/whatsnew14#explicit-api-mode-for-library-authors">明示的なAPIモード</a>機能を使用することをお勧めします。</p><p>明示的なAPIモードでは、以下のことを行う必要があります。</p><ul><li>デフォルトの公開可視性に依存する代わりに、宣言に可視性修飾子を追加して公開にします。これにより、公開APIの一部として何を公開するかを検討したことが保証されます。</li><li>推論された型によってAPIに意図しない変更が加わるのを防ぐため、すべての公開関数とプロパティの型を定義します。</li></ul><h2 id="既存の概念を再利用する" tabindex="-1">既存の概念を再利用する <a class="header-anchor" href="#既存の概念を再利用する" aria-label="Permalink to &quot;既存の概念を再利用する&quot;">​</a></h2><p>APIのサイズを制限する1つの方法は、既存の型を再利用することです。例えば、期間のために新しい型を作成する代わりに、<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.time/-duration/" target="_blank" rel="noreferrer"><code>kotlin.time.Duration</code></a>を使用できます。このアプローチは、開発を効率化するだけでなく、他のライブラリとの相互運用性も向上させます。</p><p>サードパーティライブラリの型やプラットフォーム固有の型に依存する場合は注意が必要です。それらはあなたのライブラリをこれらの要素に結びつけてしまう可能性があります。そのような場合、コストがメリットを上回るかもしれません。</p><p><code>String</code>、<code>Long</code>、<code>Pair</code>、<code>Triple</code>のような一般的な型を再利用することは効果的ですが、それらがドメイン固有のロジックをより適切にカプセル化するのであれば、抽象データ型を開発することを妨げるべきではありません。</p><h2 id="コアapiを定義し、その上に構築する" tabindex="-1">コアAPIを定義し、その上に構築する <a class="header-anchor" href="#コアapiを定義し、その上に構築する" aria-label="Permalink to &quot;コアAPIを定義し、その上に構築する&quot;">​</a></h2><p>シンプルさへのもう一つの道は、限られた数のコア操作を中心とした小さな概念モデルを定義することです。これらの操作の振る舞いが明確にドキュメント化されれば、これらのコア関数に直接基づくか、それらを組み合わせる新しい操作を開発することでAPIを拡張できます。</p><p>例:</p><ul><li><a href="/ja/kotlin/flow">Kotlin Flows API</a>では、<a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/filter.html" target="_blank" rel="noreferrer"><code>filter</code></a>や<a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/map.html" target="_blank" rel="noreferrer"><code>map</code></a>のような一般的な操作は、<a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/transform.html" target="_blank" rel="noreferrer"><code>transform</code></a>操作の上に構築されています。</li><li><a href="/ja/kotlin/time-measurement">Kotlin Time API</a>では、<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.time/measure-time.html" target="_blank" rel="noreferrer"><code>measureTime</code></a>関数は<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.time/-time-source/-monotonic/" target="_blank" rel="noreferrer"><code>TimeSource.Monotonic</code></a>を利用しています。</li></ul><p>追加の操作をこれらのコアコンポーネントに基づいて構築することはしばしば有益ですが、常に必要というわけではありません。機能性を拡張したり、異なる入力により広範に適応したりする、最適化されたバリエーションやプラットフォーム固有のバリエーションを導入する機会を見つけるかもしれません。</p><p>ユーザーがコア操作で非自明な問題を解決でき、振る舞いを変更することなく追加の操作でソリューションをリファクタリングできる限り、概念モデルのシンプルさは維持されます。</p><h2 id="次のステップ" tabindex="-1">次のステップ <a class="header-anchor" href="#次のステップ" aria-label="Permalink to &quot;次のステップ&quot;">​</a></h2><p>ガイドの次のパートでは、可読性について学びます。</p><p><a href="/ja/kotlin/api-guidelines-readability">次のパートに進む</a></p>',21)]))}const u=a(r,[["render",l]]);export{m as __pageData,u as default};
