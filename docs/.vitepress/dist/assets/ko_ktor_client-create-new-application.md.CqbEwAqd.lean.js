import{_ as C,a as S,b as A,c as D,d as J,e as P,f as H,g as L}from"./chunks/client_get_started_run_output_with_logs.BLNUpoCH.js";import{_ as w}from"./chunks/intellij_idea_rerun_icon.tlG8QH6A.js";import{_ as N,C as e,c as x,o as j,G as n,w as i,j as o,a as t}from"./chunks/framework.Bksy39di.js";const Y=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ko/ktor/client-create-new-application.md","filePath":"ko/ktor/client-create-new-application.md","lastUpdated":1755457140000}'),T={name:"ko/ktor/client-create-new-application.md"};function R(q,l,M,O,$,G){const a=e("show-structure"),b=e("tldr"),I=e("link-summary"),s=e("Links"),m=e("chapter"),u=e("control"),v=e("ui-path"),r=e("step"),g=e("list"),f=e("procedure"),d=e("Path"),p=e("code-block"),E=e("note"),K=e("emphasis"),k=e("tip"),y=e("topic");return j(),x("div",null,[n(y,{"xsi:noNamespaceSchemaLocation":"https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd","xmlns:xsi":"http://www.w3.org/2001/XMLSchema-instance",title:"클라이언트 애플리케이션 생성",id:"client-create-new-application","help-id":"getting_started_ktor_client;client-getting-started;client-get-started;client-create-a-new-application"},{default:i(()=>[n(a,{for:"chapter",depth:"2"}),n(b,null,{default:i(()=>l[0]||(l[0]=[o("p",null,[o("b",null,"코드 예시"),t(": "),o("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/tutorial-client-get-started"}," tutorial-client-get-started ")],-1)])),_:1}),n(I,null,{default:i(()=>l[1]||(l[1]=[t(" 요청을 보내고 응답을 받는 첫 번째 클라이언트 애플리케이션을 생성합니다. ")])),_:1}),o("p",null,[l[7]||(l[7]=t(" Ktor는 다중 플랫폼 비동기 HTTP 클라이언트를 포함하며, 이를 통해 ")),n(s,{href:"/ktor/client-requests",summary:"요청 URL, HTTP 메서드, 헤더, 요청 본문 등 다양한 요청 매개변수를 지정하고 요청을 생성하는 방법을 알아봅니다."},{default:i(()=>l[2]||(l[2]=[t("요청을 생성하고")])),_:1}),l[8]||(l[8]=t()),n(s,{href:"/ktor/client-responses",summary:"응답을 받고, 응답 본문을 얻고, 응답 매개변수를 얻는 방법을 알아봅니다."},{default:i(()=>l[3]||(l[3]=[t("응답을 처리하며")])),_:1}),l[9]||(l[9]=t(", ")),n(s,{href:"/ktor/client-plugins",summary:"로깅, 직렬화, 권한 부여 등 일반적인 기능을 제공하는 플러그인에 대해 알아봅니다."},{default:i(()=>l[4]||(l[4]=[t("플러그인")])),_:1}),l[10]||(l[10]=t("(예: ")),n(s,{href:"/ktor/client-auth",summary:"Auth 플러그인은 클라이언트 애플리케이션에서 인증 및 권한 부여를 처리합니다."},{default:i(()=>l[5]||(l[5]=[t("인증")])),_:1}),l[11]||(l[11]=t(", ")),n(s,{href:"/ktor/client-serialization",summary:"ContentNegotiation 플러그인은 클라이언트와 서버 간 미디어 타입 협상, 요청 전송 및 응답 수신 시 특정 형식으로 콘텐츠 직렬화/역직렬화라는 두 가지 주요 목적을 제공합니다."},{default:i(()=>l[6]||(l[6]=[t("JSON 직렬화")])),_:1}),l[12]||(l[12]=t(" 등)으로 기능을 확장할 수 있습니다. "))]),l[141]||(l[141]=o("p",null," 이 튜토리얼에서는 요청을 보내고 응답을 출력하는 첫 번째 Ktor 클라이언트 애플리케이션을 생성하는 방법을 보여드립니다. ",-1)),n(m,{title:"사전 요구 사항",id:"prerequisites"},{default:i(()=>l[13]||(l[13]=[o("p",null,[t(" 이 튜토리얼을 시작하기 전에 "),o("a",{href:"https://www.jetbrains.com/help/idea/installation-guide.html"},"IntelliJ IDEA Community 또는 Ultimate를 설치"),t("하세요. ")],-1)])),_:1}),n(m,{title:"새 프로젝트 생성",id:"new-project"},{default:i(()=>[o("p",null,[l[15]||(l[15]=t(" 기존 프로젝트에서 Ktor 클라이언트를 수동으로 ")),n(s,{href:"/ktor/client-create-and-configure",summary:"Ktor 클라이언트를 생성하고 구성하는 방법을 알아봅니다."},{default:i(()=>l[14]||(l[14]=[t("생성하고 구성")])),_:1}),l[16]||(l[16]=t("할 수 있습니다. 그러나 처음부터 시작하는 편리한 방법은 IntelliJ IDEA에 번들된 Kotlin 플러그인을 사용하여 새 프로젝트를 생성하는 것입니다. "))]),l[45]||(l[45]=o("p",null,[t(" 새 Kotlin 프로젝트를 생성하려면 "),o("a",{href:"https://www.jetbrains.com/help/idea/run-for-the-first-time.html"},"IntelliJ IDEA를 열고"),t(" 다음 단계를 따르세요: ")],-1)),n(f,null,{default:i(()=>[n(r,null,{default:i(()=>[o("p",null,[l[18]||(l[18]=t(" 시작 화면에서 ")),n(u,null,{default:i(()=>l[17]||(l[17]=[t("New Project")])),_:1}),l[19]||(l[19]=t("를 클릭하세요. "))]),o("p",null,[l[21]||(l[21]=t(" 또는 주 메뉴에서 ")),n(v,null,{default:i(()=>l[20]||(l[20]=[t("File | New | Project")])),_:1}),l[22]||(l[22]=t("를 선택하세요. "))])]),_:1}),n(r,null,{default:i(()=>[o("p",null,[n(u,null,{default:i(()=>l[23]||(l[23]=[t("New Project")])),_:1}),l[25]||(l[25]=t(" 마법사에서 왼쪽 목록에서 ")),n(u,null,{default:i(()=>l[24]||(l[24]=[t("Kotlin")])),_:1}),l[26]||(l[26]=t(" 을 선택하세요. "))])]),_:1}),n(r,null,{default:i(()=>[l[41]||(l[41]=o("p",null," 오른쪽 창에서 다음 설정을 지정하세요: ",-1)),l[42]||(l[42]=o("img",{src:C,alt:"New Kotlin project window in intelliJ IDEA","border-effect":"rounded",width:"706"},null,-1)),n(g,{id:"kotlin_app_settings"},{default:i(()=>[o("li",null,[o("p",null,[n(u,null,{default:i(()=>l[27]||(l[27]=[t("Name")])),_:1}),l[28]||(l[28]=t(" : 프로젝트 이름을 지정하세요. "))])]),o("li",null,[o("p",null,[n(u,null,{default:i(()=>l[29]||(l[29]=[t("Location")])),_:1}),l[30]||(l[30]=t(" : 프로젝트 디렉터리를 지정하세요. "))])]),o("li",null,[o("p",null,[n(u,null,{default:i(()=>l[31]||(l[31]=[t("Build system")])),_:1}),l[33]||(l[33]=t(" : ")),n(u,null,{default:i(()=>l[32]||(l[32]=[t("Gradle")])),_:1}),l[34]||(l[34]=t(" 이 선택되었는지 확인하세요. "))])]),o("li",null,[o("p",null,[n(u,null,{default:i(()=>l[35]||(l[35]=[t("Gradle DSL")])),_:1}),l[37]||(l[37]=t(" : ")),n(u,null,{default:i(()=>l[36]||(l[36]=[t("Kotlin")])),_:1}),l[38]||(l[38]=t(" 을 선택하세요. "))])]),o("li",null,[o("p",null,[n(u,null,{default:i(()=>l[39]||(l[39]=[t("Add sample code")])),_:1}),l[40]||(l[40]=t(" : 생성된 프로젝트에 샘플 코드를 포함하려면 이 옵션을 선택하세요. "))])])]),_:1})]),_:1}),n(r,null,{default:i(()=>[o("p",null,[n(u,null,{default:i(()=>l[43]||(l[43]=[t("Create")])),_:1}),l[44]||(l[44]=t(" 를 클릭하고 IntelliJ IDEA가 프로젝트를 생성하고 의존성을 설치할 때까지 기다리세요. "))])]),_:1})]),_:1})]),_:1}),n(m,{title:"의존성 추가",id:"add-dependencies"},{default:i(()=>[l[61]||(l[61]=o("p",null," Ktor 클라이언트에 필요한 의존성을 추가해 보겠습니다. ",-1)),n(f,null,{default:i(()=>[n(r,null,{default:i(()=>[o("p",null,[n(d,null,{default:i(()=>l[46]||(l[46]=[t("gradle.properties")])),_:1}),l[47]||(l[47]=t(" 파일을 열고 Ktor 버전을 지정하기 위해 다음 줄을 추가하세요: "))]),n(p,{lang:"kotlin",code:"                    ktor_version=3.2.3"}),n(E,{id:"eap-note"},{default:i(()=>l[48]||(l[48]=[o("p",null,[t(" Ktor의 EAP 버전을 사용하려면 "),o("a",{href:"#repositories"},"Space 저장소"),t("를 추가해야 합니다. ")],-1)])),_:1})]),_:1}),n(r,null,{default:i(()=>[o("p",null,[n(d,null,{default:i(()=>l[49]||(l[49]=[t("build.gradle.kts")])),_:1}),l[50]||(l[50]=t(" 파일을 열고 다음 아티팩트를 의존성 블록에 추가하세요: "))]),n(p,{lang:"kotlin",code:`val ktor_version: String by project

dependencies {
    implementation("io.ktor:ktor-client-core:$ktor_version")
    implementation("io.ktor:ktor-client-cio:$ktor_version")
}`}),n(g,null,{default:i(()=>[l[55]||(l[55]=o("li",null,[o("code",null,"ktor-client-core"),t("는 주요 클라이언트 기능을 제공하는 핵심 의존성입니다. ")],-1)),o("li",null,[l[52]||(l[52]=o("code",null,"ktor-client-cio",-1)),l[53]||(l[53]=t("는 네트워크 요청을 처리하는 ")),n(s,{href:"/ktor/client-engines",summary:"네트워크 요청을 처리하는 엔진에 대해 알아봅니다."},{default:i(()=>l[51]||(l[51]=[t("엔진")])),_:1}),l[54]||(l[54]=t("을 위한 의존성입니다. "))])]),_:1})]),_:1}),n(r,null,{default:i(()=>[o("p",null,[n(d,null,{default:i(()=>l[56]||(l[56]=[t("build.gradle.kts")])),_:1}),l[58]||(l[58]=t(" 파일의 오른쪽 상단 모서리에 있는 ")),n(u,null,{default:i(()=>l[57]||(l[57]=[t("Load Gradle Changes")])),_:1}),l[59]||(l[59]=t(" 아이콘을 클릭하여 새로 추가된 의존성을 설치하세요. "))]),l[60]||(l[60]=o("img",{src:S,alt:"Load Gradle Changes",width:"706"},null,-1))]),_:1})]),_:1})]),_:1}),n(m,{title:"클라이언트 생성",id:"create-client"},{default:i(()=>[o("p",null,[l[63]||(l[63]=t(" 클라이언트 구현을 추가하려면 ")),n(d,null,{default:i(()=>l[62]||(l[62]=[t("src/main/kotlin")])),_:1}),l[64]||(l[64]=t(" 으로 이동하여 다음 단계를 따르세요: "))]),n(f,null,{default:i(()=>[n(r,null,{default:i(()=>[o("p",null,[n(d,null,{default:i(()=>l[65]||(l[65]=[t("Main.kt")])),_:1}),l[66]||(l[66]=t(" 파일을 열고 기존 코드를 다음 구현으로 교체하세요: "))]),n(p,{lang:"kotlin",code:`                    import io.ktor.client.*
                    import io.ktor.client.engine.cio.*

                    fun main() {
                        val client = HttpClient(CIO)
                    }`}),l[67]||(l[67]=o("p",null,[t(" Ktor에서 클라이언트는 "),o("a",{href:"https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client/-http-client/index.html"},"HttpClient"),t(" 클래스로 표현됩니다. ")],-1))]),_:1}),n(r,null,{default:i(()=>[o("p",null,[l[70]||(l[70]=o("a",{href:"https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.request/get.html"},[o("code",null,"HttpClient.get()")],-1)),l[71]||(l[71]=t(" 메서드를 사용하여 ")),n(s,{href:"/ktor/client-requests",summary:"요청 URL, HTTP 메서드, 헤더, 요청 본문 등 다양한 요청 매개변수를 지정하고 요청을 생성하는 방법을 알아봅니다."},{default:i(()=>l[68]||(l[68]=[t("GET 요청을 생성")])),_:1}),l[72]||(l[72]=t("하세요. ")),n(s,{href:"/ktor/client-responses",summary:"응답을 받고, 응답 본문을 얻고, 응답 매개변수를 얻는 방법을 알아봅니다."},{default:i(()=>l[69]||(l[69]=[t("응답")])),_:1}),l[73]||(l[73]=t("은 ")),l[74]||(l[74]=o("code",null,"HttpResponse",-1)),l[75]||(l[75]=t(" 클래스 객체로 수신됩니다. "))]),n(p,{lang:"kotlin",code:`                    import io.ktor.client.*
                    import io.ktor.client.engine.cio.*
                    import io.ktor.client.request.*
                    import io.ktor.client.statement.*

                    fun main() {
                        val client = HttpClient(CIO)
                        val response: HttpResponse = client.get("https://ktor.io/")
                    }`}),o("p",null,[l[77]||(l[77]=t(" 위 코드를 추가하면 IDE는 ")),l[78]||(l[78]=o("code",null,"get()",-1)),l[79]||(l[79]=t(" 함수에 대해 다음 오류를 표시합니다: ")),n(K,null,{default:i(()=>l[76]||(l[76]=[t("suspend 함수 'get'은 코루틴 또는 다른 suspend 함수에서만 호출되어야 합니다.")])),_:1})]),l[81]||(l[81]=o("img",{src:A,alt:"Suspend function error",width:"706"},null,-1)),l[82]||(l[82]=o("p",null,[t(" 이를 해결하려면 "),o("code",null,"main()"),t(" 함수를 suspend 함수로 만들어야 합니다. ")],-1)),n(k,null,{default:i(()=>l[80]||(l[80]=[o("code",null,"suspend",-1),t(" 함수 호출에 대한 자세한 내용은 "),o("a",{href:"https://kotlinlang.org/docs/coroutines-basics.html"},"코루틴 기본 사항",-1),t("을 참조하세요. ")])),_:1})]),_:1}),n(r,null,{default:i(()=>[o("p",null,[l[84]||(l[84]=t(" IntelliJ IDEA에서 정의 옆의 빨간 전구를 클릭하고 ")),n(u,null,{default:i(()=>l[83]||(l[83]=[t("Make main suspend")])),_:1}),l[85]||(l[85]=t(" 를 선택하세요. "))]),l[86]||(l[86]=o("img",{src:D,alt:"Make main suspend",width:"706"},null,-1))]),_:1}),n(r,null,{default:i(()=>[o("p",null,[l[88]||(l[88]=o("code",null,"println()",-1)),l[89]||(l[89]=t(" 함수를 사용하여 서버에서 반환된 ")),l[90]||(l[90]=o("a",{href:"#status"},"상태 코드",-1)),l[91]||(l[91]=t("를 출력하고, ")),l[92]||(l[92]=o("code",null,"close()",-1)),l[93]||(l[93]=t(" 함수를 사용하여 스트림을 닫고 연결된 모든 리소스를 해제합니다. ")),n(d,null,{default:i(()=>l[87]||(l[87]=[t("Main.kt")])),_:1}),l[94]||(l[94]=t(" 파일은 다음과 같아야 합니다: "))]),n(p,{lang:"kotlin",code:`import io.ktor.client.*
import io.ktor.client.engine.cio.*
import io.ktor.client.request.*
import io.ktor.client.statement.*

suspend fun main() {
    val client = HttpClient(CIO)
    val response: HttpResponse = client.get("https://ktor.io/")
    println(response.status)
    client.close()
}`})]),_:1})]),_:1})]),_:1}),n(m,{title:"애플리케이션 실행",id:"make-request"},{default:i(()=>[o("p",null,[l[96]||(l[96]=t(" 애플리케이션을 실행하려면 ")),n(d,null,{default:i(()=>l[95]||(l[95]=[t("Main.kt")])),_:1}),l[97]||(l[97]=t(" 파일로 이동하여 다음 단계를 따르세요: "))]),n(f,null,{default:i(()=>[n(r,null,{default:i(()=>[o("p",null,[l[99]||(l[99]=t(" IntelliJ IDEA에서 ")),l[100]||(l[100]=o("code",null,"main()",-1)),l[101]||(l[101]=t(" 함수 옆의 거터 아이콘을 클릭하고 ")),n(u,null,{default:i(()=>l[98]||(l[98]=[t("Run 'MainKt'")])),_:1}),l[102]||(l[102]=t(" 를 선택하세요. "))]),l[103]||(l[103]=o("img",{src:J,alt:"Run app",width:"706"},null,-1))]),_:1}),n(r,null,{default:i(()=>l[104]||(l[104]=[t(" IntelliJ IDEA가 애플리케이션을 실행할 때까지 기다리세요. ")])),_:1}),n(r,null,{default:i(()=>[o("p",null,[l[106]||(l[106]=t(" IDE 하단의 ")),n(u,null,{default:i(()=>l[105]||(l[105]=[t("Run")])),_:1}),l[107]||(l[107]=t(" 창에 출력이 표시됩니다. "))]),l[108]||(l[108]=o("img",{src:P,alt:"Server response",width:"706"},null,-1)),l[109]||(l[109]=o("p",null,[t(" 서버가 "),o("code",null,"200 OK"),t(" 메시지로 응답하더라도, SLF4J가 "),o("code",null,"StaticLoggerBinder"),t(" 클래스를 찾지 못해 no-operation (NOP) 로거 구현으로 기본 설정되었다는 오류 메시지가 표시됩니다. 이는 로깅이 비활성화되었음을 의미합니다. ")],-1)),l[110]||(l[110]=o("p",null,[t(" 이제 작동하는 클라이언트 애플리케이션이 있습니다. 그러나 이 경고를 수정하고 로깅을 통해 HTTP 호출을 디버그하려면 "),o("a",{href:"#enable-logging"},"추가 단계"),t("가 필요합니다. ")],-1))]),_:1})]),_:1})]),_:1}),n(m,{title:"로깅 활성화",id:"enable-logging"},{default:i(()=>[l[137]||(l[137]=o("p",null,[t(" Ktor는 JVM 로깅을 위해 SLF4J 추상화 계층을 사용하므로, 로깅을 활성화하려면 "),o("a",{href:"#jvm"},"로깅 프레임워크"),t("(예: "),o("a",{href:"https://logback.qos.ch/"},"Logback"),t(")를 제공해야 합니다. ")],-1)),n(f,{id:"enable-logging-procedure"},{default:i(()=>[n(r,null,{default:i(()=>[o("p",null,[n(d,null,{default:i(()=>l[111]||(l[111]=[t("gradle.properties")])),_:1}),l[112]||(l[112]=t(" 파일에서 로깅 프레임워크의 버전을 지정하세요: "))]),n(p,{lang:"kotlin",code:"                    logback_version=1.5.6"})]),_:1}),n(r,null,{default:i(()=>[o("p",null,[n(d,null,{default:i(()=>l[113]||(l[113]=[t("build.gradle.kts")])),_:1}),l[114]||(l[114]=t(" 파일을 열고 다음 아티팩트를 의존성 블록에 추가하세요: "))]),n(p,{lang:"kotlin",code:`                    //...
                    val logback_version: String by project

                    dependencies {
                        //...
                        implementation("ch.qos.logback:logback-classic:$logback_version")
                    }`})]),_:1}),n(r,null,{default:i(()=>[n(u,null,{default:i(()=>l[115]||(l[115]=[t("Load Gradle Changes")])),_:1}),l[116]||(l[116]=t(" 아이콘을 클릭하여 새로 추가된 의존성을 설치하세요. "))]),_:1}),n(r,null,{default:i(()=>l[117]||(l[117]=[o("p",null,[t(" IntelliJ IDEA에서 다시 실행 버튼("),o("img",{src:w,style:{},height:"16",width:"16",alt:"intelliJ IDEA rerun icon"}),t(")을 클릭하여 애플리케이션을 다시 시작하세요. ")],-1)])),_:1}),n(r,null,{default:i(()=>[o("p",null,[l[119]||(l[119]=t(" 더 이상 오류가 표시되지 않지만, IDE 하단의 ")),n(u,null,{default:i(()=>l[118]||(l[118]=[t("Run")])),_:1}),l[120]||(l[120]=t(" 창에는 동일한 ")),l[121]||(l[121]=o("code",null,"200 OK",-1)),l[122]||(l[122]=t(" 메시지가 표시됩니다. "))]),l[123]||(l[123]=o("img",{src:H,alt:"Server response",width:"706"},null,-1)),l[124]||(l[124]=o("p",null," 이로써 로깅을 활성화했습니다. 로그를 확인하려면 로깅 구성을 추가해야 합니다. ",-1))]),_:1}),n(r,null,{default:i(()=>[o("p",null,[n(d,null,{default:i(()=>l[125]||(l[125]=[t("src/main/resources")])),_:1}),l[127]||(l[127]=t(" 로 이동하여 다음 구현으로 새 ")),n(d,null,{default:i(()=>l[126]||(l[126]=[t("logback.xml")])),_:1}),l[128]||(l[128]=t(" 파일을 생성하세요: "))]),n(p,{lang:"xml","ignore-vars":"true",code:`                    <configuration>
                        <appender name="APPENDER" class="ch.qos.logback.core.ConsoleAppender">
                            <encoder>
                                <pattern>%d{YYYY-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
                            </encoder>
                        </appender>
                        <root level="trace">
                            undefined
                        </root>
                    </configuration>`})]),_:1}),n(r,null,{default:i(()=>l[129]||(l[129]=[o("p",null,[t(" IntelliJ IDEA에서 다시 실행 버튼("),o("img",{src:w,style:{},height:"16",width:"16",alt:"intelliJ IDEA rerun icon"}),t(")을 클릭하여 애플리케이션을 다시 시작하세요. ")],-1)])),_:1}),n(r,null,{default:i(()=>[o("p",null,[l[131]||(l[131]=t(" 이제 ")),n(u,null,{default:i(()=>l[130]||(l[130]=[t("Run")])),_:1}),l[132]||(l[132]=t(" 창에서 출력된 응답 위에 트레이스 로그가 표시될 것입니다: "))]),l[133]||(l[133]=o("img",{src:L,alt:"Server response",width:"706"},null,-1))]),_:1})]),_:1}),n(k,null,{default:i(()=>[l[135]||(l[135]=t(" Ktor는 ")),n(s,{href:"/ktor/client-logging",summary:"필수 의존성: io.ktor:ktor-client-logging 코드 예시: tutorial-client-get-started"},{default:i(()=>l[134]||(l[134]=[t("로깅")])),_:1}),l[136]||(l[136]=t(" 플러그인을 통해 HTTP 호출에 대한 로그를 추가하는 간단하고 직접적인 방법을 제공하는 반면, 구성 파일을 추가하면 복잡한 애플리케이션에서 로깅 동작을 세밀하게 조정할 수 있습니다. "))]),_:1})]),_:1}),n(m,{title:"다음 단계",id:"next-steps"},{default:i(()=>[o("p",null,[l[139]||(l[139]=t(" 이 구성을 더 잘 이해하고 확장하려면 ")),n(s,{href:"/ktor/client-create-and-configure",summary:"Ktor 클라이언트를 생성하고 구성하는 방법을 알아봅니다."},{default:i(()=>l[138]||(l[138]=[t("Ktor 클라이언트를 생성하고 구성하는 방법")])),_:1}),l[140]||(l[140]=t("을 살펴보세요. "))])]),_:1})]),_:1})])}const F=N(T,[["render",R]]);export{Y as __pageData,F as default};
