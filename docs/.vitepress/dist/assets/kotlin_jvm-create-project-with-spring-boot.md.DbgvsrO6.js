import{_ as d}from"./chunks/icon-1.K8qzZaho.js";import{_ as g}from"./chunks/icon-2-todo.CF_tKCD9.js";import{_ as E}from"./chunks/icon-3-todo.Gx4op1du.js";import{_ as c}from"./chunks/icon-4-todo.GaeEmerm.js";import{_ as u,a as m,b as y,c as F,d as b}from"./chunks/spring-application-response.CubByq9P.js";import{_ as C,C as p,c as B,o as f,j as s,G as a,ag as e,a as i,w as l}from"./chunks/framework.Bksy39di.js";const J=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/jvm-create-project-with-spring-boot.md","filePath":"kotlin/jvm-create-project-with-spring-boot.md","lastUpdated":1755514048000}'),A={name:"kotlin/jvm-create-project-with-spring-boot.md"};function S(_,n,q,v,D,w){const r=p("web-summary"),k=p("tldr"),t=p("def"),o=p("deflist"),h=p("code-block");return f(),B("div",null,[n[14]||(n[14]=s("h1",{id:"使用-kotlin-创建-spring-boot-项目",tabindex:"-1"},[i("使用 Kotlin 创建 Spring Boot 项目 "),s("a",{class:"header-anchor",href:"#使用-kotlin-创建-spring-boot-项目","aria-label":'Permalink to "使用 Kotlin 创建 Spring Boot 项目"'},"​")],-1)),a(r,null,{default:l(()=>n[0]||(n[0]=[i("使用 IntelliJ IDEA 和 Kotlin 创建 Spring Boot 应用程序。")])),_:1}),a(k,null,{default:l(()=>n[1]||(n[1]=[s("p",null,[i("这是 "),s("strong",null,"Spring Boot 和 Kotlin 入门"),i(" 教程的第一部分：")],-1),s("br",null,null,-1),s("p",null,[s("img",{src:d,width:"20",alt:"第一步"}),i(),s("strong",null,"使用 Kotlin 创建 Spring Boot 项目"),s("br"),s("img",{src:g,width:"20",alt:"第二步"}),i(" 向 Spring Boot 项目添加数据类"),s("br"),s("img",{src:E,width:"20",alt:"第三步"}),i(" 为 Spring Boot 项目添加数据库支持"),s("br"),s("img",{src:c,width:"20",alt:"第四步"}),i(" 使用 Spring Data CrudRepository 访问数据库"),s("br")],-1)])),_:1}),n[15]||(n[15]=e('<p>本教程的第一部分展示了如何使用 IntelliJ IDEA 中的项目向导，通过 Gradle 创建 Spring Boot 项目。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>本教程不需要使用 Gradle 作为构建系统。如果您使用 Maven，也可以遵循相同的步骤。</p></div><h2 id="开始之前" tabindex="-1">开始之前 <a class="header-anchor" href="#开始之前" aria-label="Permalink to &quot;开始之前&quot;">​</a></h2><p>下载并安装最新版本的 <a href="https://www.jetbrains.com/idea/download/index.html" target="_blank" rel="noreferrer">IntelliJ IDEA Ultimate Edition</a>。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>如果您使用 IntelliJ IDEA Community Edition 或其他 IDE，可以使用 <a href="https://start.spring.io/#!language=kotlin&amp;type=gradle-project-kotlin" target="_blank" rel="noreferrer">基于 Web 的项目生成器</a> 生成 Spring Boot 项目。</p></div><h2 id="创建-spring-boot-项目" tabindex="-1">创建 Spring Boot 项目 <a class="header-anchor" href="#创建-spring-boot-项目" aria-label="Permalink to &quot;创建 Spring Boot 项目&quot;">​</a></h2><p>使用 IntelliJ IDEA Ultimate Edition 中的项目向导，通过 Kotlin 创建一个新的 Spring Boot 项目：</p><ol><li><p>在 IntelliJ IDEA 中，选择 <strong>File</strong> | <strong>New</strong> | <strong>Project</strong>。</p></li><li><p>在左侧面板中，选择 <strong>New Project</strong> | <strong>Spring Boot</strong>。</p></li><li><p>在 <strong>New Project</strong> 窗口中指定以下字段和选项：</p><ul><li><p><strong>名称</strong>: demo</p></li><li><p><strong>语言</strong>: Kotlin</p></li><li><p><strong>类型</strong>: Gradle - Kotlin</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>此选项指定构建系统和 DSL。</p></div></li><li><p><strong>包名</strong>: com.example.demo</p></li><li><p><strong>JDK</strong>: Java JDK</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>本教程使用 <strong>Amazon Corretto version 23</strong>。如果您尚未安装 JDK，可以从下拉列表中下载。</p></div></li><li><p><strong>Java</strong>: 17</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>如果您尚未安装 Java 17，可以从 JDK 下拉列表中下载。</p></div></li></ul><p><img src="'+u+'" alt="创建 Spring Boot 项目" width="800"></p></li><li><p>确保已指定所有字段，然后点击 <strong>Next</strong>。</p></li><li><p>选择本教程所需的以下依赖项：</p><ul><li><strong>Web | Spring Web</strong></li><li><strong>SQL | Spring Data JDBC</strong></li><li><strong>SQL | H2 Database</strong></li></ul><p><img src="'+m+'" alt="设置 Spring Boot 项目" width="800"></p></li><li><p>点击 <strong>Create</strong> 以生成并设置项目。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>IDE 将生成并打开一个新项目。下载和导入项目依赖项可能需要一些时间。</p></div></li><li><p>之后，您可以在 <strong>Project</strong> 视图中观察到以下结构：</p><p><img src="'+y+'" alt="设置 Spring Boot 项目" width="400"></p><p>生成的 Gradle 项目对应于 Maven 的标准目录布局：</p><ul><li><code>main/kotlin</code> 文件夹下包含属于应用程序的包和类。</li><li>应用程序的入口点是 <code>DemoApplication.kt</code> 文件的 <code>main()</code> 方法。</li></ul></li></ol>',8)),n[16]||(n[16]=s("h2",{"initial-collapse-state":"collapsed",collapsible:"true",id:"探查项目-gradle-构建文件",tabindex:"-1"},[i("探查项目 Gradle 构建文件 "),s("a",{class:"header-anchor",href:"#探查项目-gradle-构建文件","aria-label":'Permalink to "探查项目 Gradle 构建文件 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),n[17]||(n[17]=e(`<p>打开 <code>build.gradle.kts</code> 文件：它是 Gradle Kotlin 构建脚本，其中包含应用程序所需的依赖项列表。</p><p>此 Gradle 文件是 Spring Boot 的标准配置，但它也包含必要的 Kotlin 依赖项，包括 kotlin-spring Gradle 插件 – <code>kotlin(&quot;plugin.spring&quot;)</code>。</p><p>以下是完整脚本以及所有部分和依赖项的解释：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jvm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) version </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.9.25&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // The version of Kotlin to use</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;plugin.spring&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) version </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.9.25&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // The Kotlin Spring plugin</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.springframework.boot&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) version </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;3.4.5&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;io.spring.dependency-management&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) version </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.1.7&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">group </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;com.example&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">version </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;0.0.1-SNAPSHOT&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">java</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    toolchain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        languageVersion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> JavaLanguageVersion.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">17</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">repositories</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    mavenCentral</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.springframework.boot:spring-boot-starter-data-jdbc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.springframework.boot:spring-boot-starter-web&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;com.fasterxml.jackson.module:jackson-module-kotlin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Jackson extensions for Kotlin for working with JSON</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.kotlin:kotlin-reflect&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Kotlin reflection library, required for working with Spring</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    runtimeOnly</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;com.h2database:h2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    testImplementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.springframework.boot:spring-boot-starter-test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    testImplementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.kotlin:kotlin-test-junit5&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    testRuntimeOnly</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.junit.platform:junit-platform-launcher&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        freeCompilerArgs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xjsr305=strict&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// \`-Xjsr305=strict\` enables the strict mode for JSR-305 annotations</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tasks.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    useJUnitPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>如您所见，Gradle 构建文件中添加了一些与 Kotlin 相关的 artifact：</p><ol><li><p>在 <code>plugins</code> 代码块中，有两个 Kotlin artifact：</p><ul><li><code>kotlin(&quot;jvm&quot;)</code> – 此插件定义了项目中使用的 Kotlin 版本</li><li><code>kotlin(&quot;plugin.spring&quot;)</code> – Kotlin Spring 编译器插件，用于为 Kotlin 类添加 <code>open</code> 修饰符，以便使其与 Spring Framework 特性兼容</li></ul></li><li><p>在 <code>dependencies</code> 代码块中，列出了一些与 Kotlin 相关的模块：</p><ul><li><code>com.fasterxml.jackson.module:jackson-module-kotlin</code> – 此模块增加了对 Kotlin 类和数据类的序列化和反序列化支持</li><li><code>org.jetbrains.kotlin:kotlin-reflect</code> – Kotlin 反射库</li></ul></li><li><p>在依赖项部分之后，您可以看到 <code>kotlin</code> 插件配置代码块。 您可以在此处向编译器添加额外的实参，以启用或禁用各种语言特性。</p></li></ol><p>关于 Kotlin 编译器选项的更多信息，请参见 <a href="/kotlin/gradle-compiler-options"></a>。</p><h2 id="探查生成的-spring-boot-应用程序" tabindex="-1">探查生成的 Spring Boot 应用程序 <a class="header-anchor" href="#探查生成的-spring-boot-应用程序" aria-label="Permalink to &quot;探查生成的 Spring Boot 应用程序&quot;">​</a></h2><p>打开 <code>DemoApplication.kt</code> 文件：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// DemoApplication.kt</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> com.example.demo</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.springframework.boot.autoconfigure.SpringBootApplication</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.springframework.boot.runApplication</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@SpringBootApplication</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DemoApplication</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    runApplication</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DemoApplication</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">args)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,10)),a(o,{collapsible:"true"},{default:l(()=>[a(t,{title:"声明类 – class DemoApplication"},{default:l(()=>n[2]||(n[2]=[s("p",null,[i("在包声明和导入语句之后，您会看到第一个类声明，"),s("code",null,"class DemoApplication"),i("。")],-1),s("p",null,[i("在 Kotlin 中，如果一个类不包含任何成员（属性或函数），您可以省略其类体（"),s("code",null,"{}"),i("）。")],-1)])),_:1}),a(t,{title:"@SpringBootApplication 注解"},{default:l(()=>n[3]||(n[3]=[s("p",null,[s("a",{href:"https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#using.using-the-springbootapplication-annotation"},[s("code",null,"@SpringBootApplication 注解")]),i(" 是 Spring Boot 应用程序中的一个便捷注解。 它启用 Spring Boot 的"),s("a",{href:"https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#using.auto-configuration"},"自动配置"),i("、"),s("a",{href:"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/ComponentScan.html"},"组件扫描"),i("，并能够在它们的“应用程序类”上定义额外的配置。 ")],-1)])),_:1}),a(t,{title:"程序入口点 – main()"},{default:l(()=>n[4]||(n[4]=[s("p",null,[s("code",null,"main()"),i(" 函数是应用程序的入口点。")],-1),s("p",null,[i("它被声明为 "),s("code",null,"DemoApplication"),i(" 类之外的"),s("a",{href:"/kotlin/functions#function-scope"},"顶层函数"),i("。"),s("code",null,"main()"),i(" 函数调用 Spring 的 "),s("code",null,"runApplication(*args)"),i(" 函数，以 Spring Framework 启动应用程序。")],-1)])),_:1}),a(t,{title:"可变实参 – args: Array<String>"},{default:l(()=>n[5]||(n[5]=[s("p",null,[i("如果您检测 "),s("code",null,"runApplication()"),i(" 函数的声明，会看到该函数的形参被 "),s("a",{href:"/kotlin/functions#variable-number-of-arguments-varargs"},[s("code",null,"vararg"),i(" 修饰符")]),i("标记："),s("code",null,"vararg args: String"),i("。 这意味着您可以向该函数传递可变数量的 String 实参。 ")],-1)])),_:1}),a(t,{title:"展开操作符 – (*args)"},{default:l(()=>n[6]||(n[6]=[s("p",null,[s("code",null,"args"),i(" 是 "),s("code",null,"main()"),i(" 函数的形参，被声明为 String 数组。 由于它是一个字符串数组，并且您希望将其内容传递给函数，请使用展开操作符（在数组前加上星号 "),s("code",null,"*"),i("）。 ")],-1)])),_:1})]),_:1}),n[18]||(n[18]=e(`<h2 id="创建控制器" tabindex="-1">创建控制器 <a class="header-anchor" href="#创建控制器" aria-label="Permalink to &quot;创建控制器&quot;">​</a></h2><p>应用程序已准备好运行，但我们先更新其逻辑。</p><p>在 Spring 应用程序中，控制器用于处理 Web 请求。 在与 <code>DemoApplication.kt</code> 文件相同的包中，创建 <code>MessageController.kt</code> 文件，其中包含 <code>MessageController</code> 类，如下所示：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// MessageController.kt</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> com.example.demo</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.springframework.web.bind.annotation.GetMapping</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.springframework.web.bind.annotation.RequestParam</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.springframework.web.bind.annotation.RestController</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@RestController</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MessageController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @GetMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@RequestParam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">!&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,4)),a(o,{collapsible:"true"},{default:l(()=>[a(t,{title:"@RestController 注解"},{default:l(()=>n[7]||(n[7]=[s("p",null,[i("您需要告诉 Spring "),s("code",null,"MessageController"),i(" 是一个 REST Controller，因此您应该使用 "),s("code",null,"@RestController"),i(" 注解对其进行标记。")],-1),s("p",null,[i("此注解意味着该类将被组件扫描识别，因为它与我们的 "),s("code",null,"DemoApplication"),i(" 类在同一个包中。")],-1)])),_:1}),a(t,{title:"@GetMapping 注解"},{default:l(()=>[n[9]||(n[9]=s("p",null,[s("code",null,"@GetMapping"),i(" 标记了实现与 HTTP GET 调用对应端点的 REST 控制器函数：")],-1)),a(h,{lang:"kotlin"},{default:l(()=>n[8]||(n[8]=[i(' @GetMapping("/") fun index(@RequestParam("name") name: String) = "Hello, $name!" ')])),_:1})]),_:1}),a(t,{title:"@RequestParam 注解"},{default:l(()=>n[10]||(n[10]=[s("p",null,[i("函数形参 "),s("code",null,"name"),i(" 被 "),s("code",null,"@RequestParam"),i(" 注解标记。此注解表明方法形参应绑定到 Web 请求形参。")],-1),s("p",null,[i("因此，如果您在根路径访问应用程序并提供名为“name”的请求形参，例如 "),s("code",null,"/?name=<your-value>"),i("，则该形参值将用作调用 "),s("code",null,"index()"),i(" 函数的实参。")],-1)])),_:1}),a(t,{title:"单表达式函数 – index()"},{default:l(()=>n[11]||(n[11]=[s("p",null,[i("由于 "),s("code",null,"index()"),i(" 函数只包含一个语句，您可以将其声明为"),s("a",{href:"/kotlin/functions#single-expression-functions"},"单表达式函数"),i("。")],-1),s("p",null,[i("这意味着可以省略花括号，并在等号 "),s("code",null,"="),i(" 之后指定函数体。")],-1)])),_:1}),a(t,{title:"函数返回类型的类型推断"},{default:l(()=>n[12]||(n[12]=[s("p",null,[s("code",null,"index()"),i(" 函数没有显式声明返回类型。相反，编译器通过查看等号 "),s("code",null,"="),i(" 右侧语句的结果来推断返回类型。")],-1),s("p",null,[s("code",null,"Hello, $name!"),i(" 表达式的类型是 "),s("code",null,"String"),i("，因此该函数的返回类型也是 "),s("code",null,"String"),i("。")],-1)])),_:1}),a(t,{title:"字符串模板 – $name"},{default:l(()=>n[13]||(n[13]=[s("p",null,[s("code",null,"Hello, $name!"),i(" 表达式在 Kotlin 中被称为"),s("a",{href:"/kotlin/strings#string-templates"},[s("i",null,"字符串模板")]),i("。")],-1),s("p",null,"字符串模板是包含嵌入表达式的字符串字面量。",-1),s("p",null,"这是 String 拼接操作的便捷替代方案。",-1)])),_:1})]),_:1}),n[19]||(n[19]=e('<h2 id="运行应用程序" tabindex="-1">运行应用程序 <a class="header-anchor" href="#运行应用程序" aria-label="Permalink to &quot;运行应用程序&quot;">​</a></h2><p>Spring 应用程序现已准备好运行：</p><ol><li><p>在 <code>DemoApplication.kt</code> 文件中，点击 <code>main()</code> 方法旁边的行槽中的绿色 <strong>Run</strong> 图标：</p><p><img src="'+F+'" alt="运行 Spring Boot 应用程序" width="706"></p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>您也可以在终端中运行 <code>./gradlew bootRun</code> 命令。</p></div><p>这将在您的计算机上启动本地服务器。</p></li><li><p>应用程序启动后，打开以下 URL：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>http://localhost:8080?name=John</span></span></code></pre></div><p>您应该会看到“Hello, John!”作为响应被打印出来：</p><p><img src="'+b+'" alt="Spring 应用程序响应" width="706"></p></li></ol><h2 id="下一步" tabindex="-1">下一步 <a class="header-anchor" href="#下一步" aria-label="Permalink to &quot;下一步&quot;">​</a></h2><p>在本教程的下一部分中，您将了解 Kotlin 数据类以及如何在应用程序中使用它们。</p><p><strong><a href="/kotlin/jvm-spring-boot-add-data-class">继续下一章</a></strong></p>',6))])}const R=C(A,[["render",S]]);export{J as __pageData,R as default};
