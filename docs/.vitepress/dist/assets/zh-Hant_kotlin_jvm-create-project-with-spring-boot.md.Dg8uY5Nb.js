import{_ as d}from"./chunks/icon-1.K8qzZaho.js";import{_ as g}from"./chunks/icon-2-todo.CF_tKCD9.js";import{_ as E}from"./chunks/icon-3-todo.Gx4op1du.js";import{_ as c}from"./chunks/icon-4-todo.GaeEmerm.js";import{_ as u,a as m,b as y,c as F,d as b}from"./chunks/spring-application-response.CubByq9P.js";import{_ as C,C as p,c as B,o as f,j as s,G as a,ag as e,a as i,w as t}from"./chunks/framework.Bksy39di.js";const J=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/jvm-create-project-with-spring-boot.md","filePath":"zh-Hant/kotlin/jvm-create-project-with-spring-boot.md","lastUpdated":1755514048000}'),S={name:"zh-Hant/kotlin/jvm-create-project-with-spring-boot.md"};function A(_,n,q,v,D,w){const r=p("web-summary"),k=p("tldr"),l=p("def"),o=p("deflist"),h=p("code-block");return f(),B("div",null,[n[14]||(n[14]=s("h1",{id:"使用-kotlin-建立-spring-boot-專案",tabindex:"-1"},[i("使用 Kotlin 建立 Spring Boot 專案 "),s("a",{class:"header-anchor",href:"#使用-kotlin-建立-spring-boot-專案","aria-label":'Permalink to "使用 Kotlin 建立 Spring Boot 專案"'},"​")],-1)),a(r,null,{default:t(()=>n[0]||(n[0]=[i("使用 IntelliJ IDEA 搭配 Kotlin 建立 Spring Boot 應用程式。")])),_:1}),a(k,null,{default:t(()=>n[1]||(n[1]=[s("p",null,[i("這是「"),s("strong",null,"Spring Boot 與 Kotlin 入門"),i("」教學的第一部分：")],-1),s("br",null,null,-1),s("p",null,[s("img",{src:d,width:"20",alt:"First step"}),i(),s("strong",null,"使用 Kotlin 建立 Spring Boot 專案"),s("br"),s("img",{src:g,width:"20",alt:"Second step"}),i(" 在 Spring Boot 專案中新增資料類別"),s("br"),s("img",{src:E,width:"20",alt:"Third step"}),i(" 為 Spring Boot 專案新增資料庫支援"),s("br"),s("img",{src:c,width:"20",alt:"Fourth step"}),i(" 使用 Spring Data CrudRepository 進行資料庫存取"),s("br")],-1)])),_:1}),n[15]||(n[15]=e('<p>本教學的第一部分將展示如何使用 IntelliJ IDEA 中的專案精靈 (Project Wizard) 透過 Gradle 建立一個 Spring Boot 專案。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>本教學不強制要求使用 Gradle 作為建構系統。如果您使用 Maven，也可以遵循相同的步驟。</p></div><h2 id="開始之前" tabindex="-1">開始之前 <a class="header-anchor" href="#開始之前" aria-label="Permalink to &quot;開始之前&quot;">​</a></h2><p>下載並安裝最新版本的 <a href="https://www.jetbrains.com/idea/download/index.html" target="_blank" rel="noreferrer">IntelliJ IDEA Ultimate Edition</a>。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>如果您使用 IntelliJ IDEA Community Edition 或其他 IDE，您可以透過 <a href="https://start.spring.io/#!language=kotlin&amp;type=gradle-project-kotlin" target="_blank" rel="noreferrer">基於網頁的專案產生器</a> 來產生 Spring Boot 專案。</p></div><h2 id="建立-spring-boot-專案" tabindex="-1">建立 Spring Boot 專案 <a class="header-anchor" href="#建立-spring-boot-專案" aria-label="Permalink to &quot;建立 Spring Boot 專案&quot;">​</a></h2><p>使用 IntelliJ IDEA Ultimate Edition 中的專案精靈來建立一個新的 Kotlin Spring Boot 專案：</p><ol><li><p>在 IntelliJ IDEA 中，選取 <strong>File</strong> | <strong>New</strong> | <strong>Project</strong>。</p></li><li><p>在左側面板中，選取 <strong>New Project</strong> | <strong>Spring Boot</strong>。</p></li><li><p>在 <strong>New Project</strong> 視窗中指定以下欄位和選項：</p><ul><li><p><strong>Name</strong> (名稱): demo</p></li><li><p><strong>Language</strong> (語言): Kotlin</p></li><li><p><strong>Type</strong> (類型): Gradle - Kotlin</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>此選項指定了建構系統和 DSL。</p></div></li><li><p><strong>Package name</strong> (套件名稱): com.example.demo</p></li><li><p><strong>JDK</strong>: Java JDK</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>本教學使用 <strong>Amazon Corretto 版本 23</strong>。 如果您沒有安裝 JDK，可以從下拉式選單中下載。</p></div></li><li><p><strong>Java</strong>: 17</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>如果您沒有安裝 Java 17，可以從 JDK 下拉式選單中下載。</p></div></li></ul><p><img src="'+u+'" alt="建立 Spring Boot 專案" width="800"></p></li><li><p>確保您已指定所有欄位，然後點擊 <strong>Next</strong> (下一步)。</p></li><li><p>選取教學所需的以下相依性 (dependencies)：</p><ul><li><strong>Web | Spring Web</strong></li><li><strong>SQL | Spring Data JDBC</strong></li><li><strong>SQL | H2 Database</strong></li></ul><p><img src="'+m+'" alt="設定 Spring Boot 專案" width="800"></p></li><li><p>點擊 <strong>Create</strong> (建立) 以產生並設定專案。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>IDE 將產生並開啟一個新專案。下載並匯入專案相依性可能需要一些時間。</p></div></li><li><p>完成後，您可以在 <strong>Project view</strong> (專案檢視) 中觀察到以下結構：</p><p><img src="'+y+'" alt="設定 Spring Boot 專案" width="400"></p><p>所產生的 Gradle 專案與 Maven 的標準目錄佈局相符：</p><ul><li>在 <code>main/kotlin</code> 資料夾下有屬於應用程式的套件和類別。</li><li>應用程式的進入點 (entry point) 是 <code>DemoApplication.kt</code> 檔案的 <code>main()</code> 方法。</li></ul></li></ol>',8)),n[16]||(n[16]=s("h2",{"initial-collapse-state":"collapsed",collapsible:"true",id:"探索專案的-gradle-建構檔",tabindex:"-1"},[i("探索專案的 Gradle 建構檔 "),s("a",{class:"header-anchor",href:"#探索專案的-gradle-建構檔","aria-label":'Permalink to "探索專案的 Gradle 建構檔 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),n[17]||(n[17]=e(`<p>開啟 <code>build.gradle.kts</code> 檔案：它是 Gradle Kotlin 建構腳本，其中包含應用程式所需相依性的列表。</p><p>此 Gradle 檔案對於 Spring Boot 來說是標準的，但它也包含必要的 Kotlin 相依性，包括 kotlin-spring Gradle 外掛程式 (plugin) – <code>kotlin(&quot;plugin.spring&quot;)</code>。</p><p>以下是完整腳本以及所有部分和相依性的解釋：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jvm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) version </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.9.25&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 要使用的 Kotlin 版本</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;plugin.spring&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) version </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.9.25&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Kotlin Spring 外掛程式</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.springframework.boot&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) version </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;3.4.5&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;io.spring.dependency-management&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) version </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.1.7&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">group </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;com.example&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">version </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;0.0.1-SNAPSHOT&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">java</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    toolchain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        languageVersion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> JavaLanguageVersion.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">17</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">repositories</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    mavenCentral</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.springframework.boot:spring-boot-starter-data-jdbc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.springframework.boot:spring-boot-starter-web&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;com.fasterxml.jackson.module:jackson-module-kotlin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 用於與 JSON 協作的 Kotlin Jackson 擴充功能</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.kotlin:kotlin-reflect&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Kotlin 反射函式庫，Spring 協作所需</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    runtimeOnly</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;com.h2database:h2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    testImplementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.springframework.boot:spring-boot-starter-test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    testImplementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.kotlin:kotlin-test-junit5&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    testRuntimeOnly</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.junit.platform:junit-platform-launcher&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        freeCompilerArgs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xjsr305=strict&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// \`-Xjsr305=strict\` 啟用 JSR-305 註解的嚴格模式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tasks.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    useJUnitPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>如您所見，Gradle 建構檔中新增了一些與 Kotlin 相關的 artifacts：</p><ol><li><p>在 <code>plugins</code> 區塊中，有兩個 Kotlin artifacts：</p><ul><li><code>kotlin(&quot;jvm&quot;)</code> – 此外掛程式定義了專案中使用的 Kotlin 版本</li><li><code>kotlin(&quot;plugin.spring&quot;)</code> – Kotlin Spring 編譯器外掛程式，用於向 Kotlin 類別新增 <code>open</code> 修飾符 (modifier)，使其與 Spring Framework 功能相容</li></ul></li><li><p>在 <code>dependencies</code> 區塊中，列出了一些與 Kotlin 相關的模組：</p><ul><li><code>com.fasterxml.jackson.module:jackson-module-kotlin</code> – 此模組增加了對 Kotlin 類別和資料類別的序列化 (serialization) 和反序列化 (deserialization) 支援</li><li><code>org.jetbrains.kotlin:kotlin-reflect</code> – Kotlin 反射函式庫 (reflection library)</li></ul></li><li><p>在相依性區段之後，您可以看到 <code>kotlin</code> 外掛程式的組態區塊。 您可以在此處為編譯器新增額外參數，以啟用或停用各種語言功能。</p></li></ol><p>了解更多關於 Kotlin 編譯器選項的資訊，請參閱 <a href="/zh-Hant/kotlin/gradle-compiler-options"></a>。</p><h2 id="探索已產生的-spring-boot-應用程式" tabindex="-1">探索已產生的 Spring Boot 應用程式 <a class="header-anchor" href="#探索已產生的-spring-boot-應用程式" aria-label="Permalink to &quot;探索已產生的 Spring Boot 應用程式&quot;">​</a></h2><p>開啟 <code>DemoApplication.kt</code> 檔案：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// DemoApplication.kt</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> com.example.demo</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.springframework.boot.autoconfigure.SpringBootApplication</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.springframework.boot.runApplication</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@SpringBootApplication</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DemoApplication</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    runApplication</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DemoApplication</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">args)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,10)),a(o,{collapsible:"true"},{default:t(()=>[a(l,{title:"宣告類別 – class DemoApplication"},{default:t(()=>n[2]||(n[2]=[s("p",null,[i("在套件宣告和匯入 (import) 語句之後，您會看到第一個類別宣告，"),s("code",null,"class DemoApplication"),i("。")],-1),s("p",null,[i("在 Kotlin 中，如果一個類別不包含任何成員（屬性或函數），您可以省略類別主體（"),s("code",null,"{}"),i("），以求簡潔。")],-1)])),_:1}),a(l,{title:"@SpringBootApplication 註解"},{default:t(()=>n[3]||(n[3]=[s("p",null,[s("a",{href:"https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#using.using-the-springbootapplication-annotation"},[s("code",null,"@SpringBootApplication 註解")]),i(" 是 Spring Boot 應用程式中的一個便利註解。 它啟用了 Spring Boot 的 "),s("a",{href:"https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#using.auto-configuration"},"自動組態 (auto-configuration)"),i("、"),s("a",{href:"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/ComponentScan.html"},"元件掃描 (component scan)"),i("，並且能夠在「應用程式類別」上定義額外組態。 ")],-1)])),_:1}),a(l,{title:"程式進入點 – main()"},{default:t(()=>n[4]||(n[4]=[s("p",null,[s("a",{href:"/zh-Hant/kotlin/basic-syntax#program-entry-point"},[s("code",null,"main()")]),i(" 函數是應用程式的進入點。")],-1),s("p",null,[i("它被宣告為 "),s("code",null,"DemoApplication"),i(" 類別之外的"),s("a",{href:"/zh-Hant/kotlin/functions#function-scope"},"頂層函數 (top-level function)"),i("。"),s("code",null,"main()"),i(" 函數呼叫 Spring 的 "),s("code",null,"runApplication(*args)"),i(" 函數，以啟動 Spring Framework 應用程式。")],-1)])),_:1}),a(l,{title:"可變引數 – args: Array<String>"},{default:t(()=>n[5]||(n[5]=[s("p",null,[i("如果您檢查 "),s("code",null,"runApplication()"),i(" 函數的宣告，您會看到函數的參數被標記為 "),s("a",{href:"/zh-Hant/kotlin/functions#variable-number-of-arguments-varargs"},[s("code",null,"vararg"),i(" 修飾符")]),i("："),s("code",null,"vararg args: String"),i("。 這意味著您可以向函數傳遞可變數量的 String 引數。 ")],-1)])),_:1}),a(l,{title:"展開運算子 – (*args)"},{default:t(()=>n[6]||(n[6]=[s("p",null,[s("code",null,"args"),i(" 是 "),s("code",null,"main()"),i(" 函數的一個參數，宣告為 String 陣列。 由於這是一個 String 陣列，並且您想將其內容傳遞給函數，因此請使用展開運算子 (spread operator)（在陣列前加上星號 "),s("code",null,"*"),i("）。 ")],-1)])),_:1})]),_:1}),n[18]||(n[18]=e(`<h2 id="建立控制器" tabindex="-1">建立控制器 <a class="header-anchor" href="#建立控制器" aria-label="Permalink to &quot;建立控制器&quot;">​</a></h2><p>應用程式已準備就緒可以執行，但讓我們先更新其邏輯。</p><p>在 Spring 應用程式中，控制器 (controller) 用於處理網頁請求。 在與 <code>DemoApplication.kt</code> 檔案相同的套件中，建立 <code>MessageController.kt</code> 檔案，其中包含 <code>MessageController</code> 類別，如下所示：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// MessageController.kt</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> com.example.demo</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.springframework.web.bind.annotation.GetMapping</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.springframework.web.bind.annotation.RequestParam</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.springframework.web.bind.annotation.RestController</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@RestController</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MessageController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @GetMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@RequestParam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">!&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,4)),a(o,{collapsible:"true"},{default:t(()=>[a(l,{title:"@RestController 註解"},{default:t(()=>n[7]||(n[7]=[s("p",null,[i("您需要告訴 Spring "),s("code",null,"MessageController"),i(" 是一個 REST 控制器 (REST Controller)，因此您應該用 "),s("code",null,"@RestController"),i(" 註解來標記它。")],-1),s("p",null,[i("這個註解表示這個類別將會被元件掃描 (component scan) 所識別，因為它與我們的 "),s("code",null,"DemoApplication"),i(" 類別位於同一個套件中。")],-1)])),_:1}),a(l,{title:"@GetMapping 註解"},{default:t(()=>[n[9]||(n[9]=s("p",null,[s("code",null,"@GetMapping"),i(" 標記了 REST 控制器中實作對應 HTTP GET 呼叫端點 (endpoints) 的函數：")],-1)),a(h,{lang:"kotlin"},{default:t(()=>n[8]||(n[8]=[i(' @GetMapping("/") fun index(@RequestParam("name") name: String) = "Hello, $name!" ')])),_:1})]),_:1}),a(l,{title:"@RequestParam 註解"},{default:t(()=>n[10]||(n[10]=[s("p",null,[i("函數參數 "),s("code",null,"name"),i(" 被標記為 "),s("code",null,"@RequestParam"),i(" 註解。這個註解表示方法參數應該綁定到網頁請求參數。")],-1),s("p",null,[i("因此，如果您在根目錄存取應用程式並提供一個名為「name」的請求參數，例如 "),s("code",null,"/?name=<your-value>"),i("，該參數值將被用作呼叫 "),s("code",null,"index()"),i(" 函數的引數。")],-1)])),_:1}),a(l,{title:"單一表達式函數 – index()"},{default:t(()=>n[11]||(n[11]=[s("p",null,[i("由於 "),s("code",null,"index()"),i(" 函數只包含一個語句，您可以將其宣告為"),s("a",{href:"/zh-Hant/kotlin/functions#single-expression-functions"},"單一表達式函數 (single-expression function)"),i("。")],-1),s("p",null,[i("這表示可以省略花括號 (curly braces)，並且函數主體在等號 "),s("code",null,"="),i(" 後面指定。")],-1)])),_:1}),a(l,{title:"函數回傳型別的型別推斷"},{default:t(()=>n[12]||(n[12]=[s("p",null,[s("code",null,"index()"),i(" 函數沒有明確宣告回傳型別。相反地，編譯器透過查看等號 "),s("code",null,"="),i(" 右側語句的結果來推斷回傳型別。")],-1),s("p",null,[i("表達式 "),s("code",null,"Hello, $name!"),i(" 的型別是 "),s("code",null,"String"),i("，因此函數的回傳型別也是 "),s("code",null,"String"),i("。")],-1)])),_:1}),a(l,{title:"字串模板 – $name"},{default:t(()=>n[13]||(n[13]=[s("p",null,[s("code",null,"Hello, $name!"),i(" 表達式在 Kotlin 中稱為"),s("a",{href:"/zh-Hant/kotlin/strings#string-templates"},[s("em",null,"字串模板 (String template)")]),i("。")],-1),s("p",null,"字串模板是包含嵌入式表達式的字串文字 (String literals)。",-1),s("p",null,"這是字串串聯 (String concatenation) 操作的便捷替代方案。",-1)])),_:1})]),_:1}),n[19]||(n[19]=e('<h2 id="執行應用程式" tabindex="-1">執行應用程式 <a class="header-anchor" href="#執行應用程式" aria-label="Permalink to &quot;執行應用程式&quot;">​</a></h2><p>Spring 應用程式現在已準備好執行：</p><ol><li><p>在 <code>DemoApplication.kt</code> 檔案中，點擊 <code>main()</code> 方法旁裝訂線 (gutter) 中的綠色 <strong>Run</strong> (執行) 圖示：</p><p><img src="'+F+'" alt="執行 Spring Boot 應用程式" width="706"></p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>您也可以在終端機中執行 <code>./gradlew bootRun</code> 命令。</p></div><p>這將在您的電腦上啟動本地伺服器。</p></li><li><p>應用程式啟動後，開啟以下 URL：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>http://localhost:8080?name=John</span></span></code></pre></div><p>您應該會看到「Hello, John!」作為回應：</p><p><img src="'+b+'" alt="Spring 應用程式回應" width="706"></p></li></ol><h2 id="下一步" tabindex="-1">下一步 <a class="header-anchor" href="#下一步" aria-label="Permalink to &quot;下一步&quot;">​</a></h2><p>在本教學的下一部分中，您將了解 Kotlin 資料類別以及如何在應用程式中使用它們。</p><p><strong><a href="/zh-Hant/kotlin/jvm-spring-boot-add-data-class">前往下一章</a></strong></p>',6))])}const R=C(S,[["render",A]]);export{J as __pageData,R as default};
