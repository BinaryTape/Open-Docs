import{_ as i,c as a,o as n,ag as l}from"./chunks/framework.Bksy39di.js";const c=JSON.parse('{"title":"相等性","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/equality.md","filePath":"kotlin/equality.md","lastUpdated":1754307826000}'),e={name:"kotlin/equality.md"};function t(h,s,p,k,d,r){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="相等性" tabindex="-1">相等性 <a class="header-anchor" href="#相等性" aria-label="Permalink to &quot;相等性&quot;">​</a></h1><p>在 Kotlin 中，存在两种类型的相等性：</p><ul><li><em>结构相等性</em> (<code>==</code>) - 对 <code>equals()</code> 函数的检测</li><li><em>引用相等性</em> (<code>===</code>) - 检测两个引用是否指向同一个对象</li></ul><h2 id="结构相等性" tabindex="-1">结构相等性 <a class="header-anchor" href="#结构相等性" aria-label="Permalink to &quot;结构相等性&quot;">​</a></h2><p>结构相等性验证两个对象是否具有相同的内容或结构。结构相等性通过 <code>==</code> 操作符及其取反操作符 <code>!=</code> 进行检测。 按照惯例，像 <code>a == b</code> 这样的表达式会被转换为：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(b) ?: (b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>如果 <code>a</code> 不是 <code>null</code>，它会调用 <code>equals(Any?)</code> 函数。否则（<code>a</code> 是 <code>null</code>），它会检测 <code>b</code> 是否与 <code>null</code> 引用相等：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;hello&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;hello&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // true</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // false</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>请注意，在显式地与 <code>null</code> 进行比较时，优化代码没有意义： <code>a == null</code> 会被自动转换为 <code>a === null</code>。</p><p>在 Kotlin 中，所有类都从 <code>Any</code> 类继承了 <code>equals()</code> 函数。默认情况下，<code>equals()</code> 函数实现了<a href="#referential-equality">引用相等性</a>。然而，Kotlin 中的类可以覆盖 <code>equals()</code> 函数以提供自定义的相等性逻辑，并通过这种方式实现结构相等性。</p><p>值类和数据类是两种特定的 Kotlin 类型，它们会自动覆盖 <code>equals()</code> 函数。因此，它们默认实现了结构相等性。</p><p>然而，对于数据类，如果 <code>equals()</code> 函数在父类中被标记为 <code>final</code>，则其行为保持不变。</p><p>与之不同的是，非数据类（即未用 <code>data</code> 修饰符声明的类）默认不覆盖 <code>equals()</code> 函数。相反，非数据类实现了从 <code>Any</code> 类继承的引用相等性行为。要实现结构相等性，非数据类需要自定义相等性逻辑来覆盖 <code>equals()</code> 函数。</p><p>要提供自定义的相等性检测实现，请覆盖 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/equals.html" target="_blank" rel="noreferrer"><code>equals(other: Any?): Boolean</code></a> 函数：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Point</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> equals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(other: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> other) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (other </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Point) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 比较属性以实现结构相等性</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> other.x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> other.y</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>当覆盖 <code>equals()</code> 函数时，您还应该覆盖 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-any/hash-code.html" target="_blank" rel="noreferrer"><code>hashCode()</code> 函数</a>，以保持相等性和哈希之间的行为一致性，并确保这些函数正确运行。</p></div><p>具有相同名称和其他签名（例如 <code>equals(other: Foo)</code>）的函数不会影响使用操作符 <code>==</code> 和 <code>!=</code> 的相等性检测。</p><p>结构相等性与 <code>Comparable&lt;...&gt;</code> 接口定义的比较无关，因此只有自定义的 <code>equals(Any?)</code> 实现才能影响操作符的行为。</p><h2 id="引用相等性" tabindex="-1">引用相等性 <a class="header-anchor" href="#引用相等性" aria-label="Permalink to &quot;引用相等性&quot;">​</a></h2><p>引用相等性通过验证两个对象的内存地址来确定它们是否是同一个实例。</p><p>引用相等性通过 <code>===</code> 操作符及其取反操作符 <code>!==</code> 进行检测。当且仅当 <code>a</code> 和 <code>b</code> 指向同一个对象时，<code>a === b</code> 求值为 true：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;world&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;world&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // true</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // false</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>对于运行时由原生类型（例如 <code>Int</code>）表示的值，<code>===</code> 相等性检测等同于 <code>==</code> 检测。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>引用相等性在 Kotlin/JS 中实现方式不同。关于相等性的更多信息，请参阅 <a href="/kotlin/js-interop#equality">Kotlin/JS</a> 文档。</p></div><h2 id="浮点数相等性" tabindex="-1">浮点数相等性 <a class="header-anchor" href="#浮点数相等性" aria-label="Permalink to &quot;浮点数相等性&quot;">​</a></h2><p>当相等性检测的操作数在静态已知为 <code>Float</code> 或 <code>Double</code> 类型时（可空或不可空），该检测遵循 <a href="https://en.wikipedia.org/wiki/IEEE_754" target="_blank" rel="noreferrer">IEEE 754 浮点数算术标准</a>。</p><p>对于未静态类型化为浮点数的其他操作数，其行为不同。在这些情况下，会实现结构相等性。因此，使用未静态类型化为浮点数的操作数进行的检测与 IEEE 标准不同。在这种场景下：</p><ul><li><code>NaN</code> 等于自身</li><li><code>NaN</code> 大于任何其他元素（包括 <code>POSITIVE_INFINITY</code>）</li><li><code>-0.0</code> 不等于 <code>0.0</code></li></ul><p>关于更多信息，请参阅 <a href="/kotlin/numbers#floating-point-numbers-comparison">浮点数比较</a>。</p><h2 id="数组相等性" tabindex="-1">数组相等性 <a class="header-anchor" href="#数组相等性" aria-label="Permalink to &quot;数组相等性&quot;">​</a></h2><p>要比较两个数组是否包含相同顺序的相同元素，请使用 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/content-equals.html" target="_blank" rel="noreferrer"><code>contentEquals()</code></a>。</p><p>关于更多信息，请参阅 <a href="/kotlin/arrays#compare-arrays">比较数组</a>。</p>`,32)]))}const E=i(e,[["render",t]]);export{c as __pageData,E as default};
