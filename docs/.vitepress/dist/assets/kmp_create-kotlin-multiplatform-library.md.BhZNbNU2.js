import{_ as p,a as l,b as h,c as k,d as r}from"./chunks/publish-maven-local-gradle-task.BGdngNQl.js";import{_ as o,a as d,b as c,c as g}from"./chunks/youtube.DH2NfHCv.js";import{_ as E,C as t,c as y,o as m,j as i,G as a,ag as u,a as b,w as F}from"./chunks/framework.Bksy39di.js";const q=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"kmp/create-kotlin-multiplatform-library.md","filePath":"kmp/create-kotlin-multiplatform-library.md","lastUpdated":1755516278000}'),f={name:"kmp/create-kotlin-multiplatform-library.md"};function v(C,s,A,D,B,_){const n=t("secondary-label"),e=t("tldr");return m(),y("div",null,[s[1]||(s[1]=i("h1",{id:"创建你的-kotlin-multiplatform-库-–-教程",tabindex:"-1"},[b("创建你的 Kotlin Multiplatform 库 – 教程 "),i("a",{class:"header-anchor",href:"#创建你的-kotlin-multiplatform-库-–-教程","aria-label":'Permalink to "创建你的 Kotlin Multiplatform 库 – 教程"'},"​")],-1)),a(n,{ref:"IntelliJ IDEA"},null,512),a(n,{ref:"Android Studio"},null,512),a(e,null,{default:F(()=>s[0]||(s[0]=[i("p",null,"本教程使用 IntelliJ IDEA，但你也可以在 Android Studio 中进行操作 — 两款 IDE 都拥有相同的核心功能和 Kotlin Multiplatform 支持。",-1)])),_:1}),s[2]||(s[2]=u('<p>在本教程中，你将学习如何在 IntelliJ IDEA 中创建一个多平台库，将该库发布到本地 Maven 版本库，并将其添加为另一个项目中的依赖项。</p><p>本教程基于我们的 <a href="https://github.com/Kotlin/multiplatform-library-template" target="_blank" rel="noreferrer">multiplatform library template</a>，这是一个包含用于生成 Fibonacci 序列的函数的简单库。</p><h2 id="设置环境" tabindex="-1">设置环境 <a class="header-anchor" href="#设置环境" aria-label="Permalink to &quot;设置环境&quot;">​</a></h2><p><a href="./quickstart">安装所有必要的工具并将其更新到最新版本</a>。</p><h2 id="创建项目" tabindex="-1">创建项目 <a class="header-anchor" href="#创建项目" aria-label="Permalink to &quot;创建项目&quot;">​</a></h2><ol><li><p>在 IntelliJ IDEA 中，选择 <strong>File</strong> | <strong>New</strong> | <strong>Project from Version Control</strong>。</p></li><li><p>输入 <a href="https://github.com/Kotlin/multiplatform-library-template" target="_blank" rel="noreferrer">multiplatform library template project</a> 的 URL：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>https://github.com/Kotlin/multiplatform-library-template</span></span></code></pre></div></li><li><p>点击 <strong>Clone</strong>。</p></li></ol><h2 id="检查项目结构" tabindex="-1">检查项目结构 <a class="header-anchor" href="#检查项目结构" aria-label="Permalink to &quot;检查项目结构&quot;">​</a></h2><p>Kotlin Multiplatform 库模板项目为开发 Kotlin Multiplatform 库提供了基础结构。此模板有助于创建可在各种平台运行的库。</p><p>在模板项目中，<code>library</code> 作为核心模块，包含 Multiplatform 库的主要源代码和构建资源。</p><p><img src="'+p+`" alt="Multiplatform library project structure" width="350"></p><p><code>library</code> 模块的结构旨在同时容纳共享代码和平台特有的实现。以下是其主要源代码（<code>src</code>）内容的分解：</p><ul><li><strong><code>commonMain</code></strong>：包含所有目标平台共享的 Kotlin 代码。你可以在此处放置不依赖于任何平台特有 API 的代码。</li><li><strong><code>androidMain</code>、<code>iosMain</code>、<code>jvmMain</code> 和 <code>linuxX64Main</code></strong>：包含 Android、iOS、JVM 和 Linux 平台特有的代码。你可以在此处实现这些平台独有的功能。</li><li><strong><code>commonTest</code>、<code>androidUnitTest</code>、<code>iosTest</code>、<code>jvmTest</code> 和 <code>linuxX64Test</code></strong>：分别包含共享 <code>commonMain</code> 代码的测试以及 Android、iOS、JVM 和 Linux 平台特有的测试。</li></ul><p>让我们关注 <code>library</code> 中跨所有平台共享的代码。在 <code>src/commonMain/kotlin</code> 目录下，你可以找到 <code>CustomFibi.kt</code> 文件，其中包含定义 Fibonacci 序列生成器的 Kotlin Multiplatform 代码：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.github.kotlin.fibonacci</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Defines the function to generate the Fibonacci sequence</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> generateFibi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sequence</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> firstElement</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    yield</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> secondElement</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    yield</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(b)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        yield</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(c)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Declares the expected values for \`firstElement\` and \`secondElement\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> firstElement: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> secondElement: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span></span></code></pre></div><p><code>firstElement</code> 和 <code>secondElement</code> 属性是平台特有代码可以实现的占位符。每个目标应通过在其各自的源代码集中使用 <code>actual</code> 关键字来提供实际值。</p><p><code>expect</code> 声明与 <code>actual</code> 实现<a href="./multiplatform-connect-to-apis#expected-and-actual-functions-and-properties">匹配</a>。这种机制在编写需要平台特有行为的跨平台代码时非常有用。</p><p>在这种情况下，多平台库模板包含了 <code>firstElement</code> 和 <code>secondElement</code> 属性的平台特有实现。<code>androidMain</code>、<code>iosMain</code>、<code>jvmMain</code> 和 <code>linuxX64Main</code> 目录包含为这些属性提供值的 <code>actual</code> 声明。</p><p>例如，以下是 <code>androidMain/kotlin/fibiprops.android.kt</code> 中包含的 Android 实现：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.github.kotlin.fibonacci</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> firstElement: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> secondElement: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span></code></pre></div><p>其他平台遵循相同的模式，<code>firstElement</code> 和 <code>secondElement</code> 属性的值有所不同。</p><h2 id="添加新平台" tabindex="-1">添加新平台 <a class="header-anchor" href="#添加新平台" aria-label="Permalink to &quot;添加新平台&quot;">​</a></h2><p>既然你已经熟悉了模板中共享代码和平台特有代码的工作方式，现在让我们通过添加对附加平台的支持来扩展项目。</p><p>使用 <a href="./multiplatform-connect-to-apis#expected-and-actual-functions-and-properties"><code>expect</code>/<code>actual</code> 机制</a>配置对 <a href="https://kotlinlang.org/docs/wasm-overview.html" target="_blank" rel="noreferrer">Kotlin/Wasm</a> 平台的支持。你可以为 <code>firstElement</code> 和 <code>secondElement</code> 属性实现平台特有功能。</p><h3 id="将-kotlin-wasm-目标添加到你的项目" tabindex="-1">将 Kotlin/Wasm 目标添加到你的项目 <a class="header-anchor" href="#将-kotlin-wasm-目标添加到你的项目" aria-label="Permalink to &quot;将 Kotlin/Wasm 目标添加到你的项目&quot;">​</a></h3><ol><li><p>在 <code>library/build.gradle.kts</code> 文件中，添加 Kotlin/Wasm 目标（<code>wasmJs</code>）和源代码集：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(org.jetbrains.kotlin.gradle.ExperimentalWasmDsl::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    wasmJs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        browser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        binaries.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        //...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wasmJsMain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // Wasm-specific dependencies</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>通过点击构建文件中出现的 <strong>Sync Gradle Changes</strong> 图标（<img src="`+l+'" alt="Gradle sync icon" width="30" type="joined">）来同步 Gradle 文件。或者，点击 Gradle 工具窗口中的刷新按钮。</p></li></ol><h3 id="为-wasm-创建平台特有代码" tabindex="-1">为 Wasm 创建平台特有代码 <a class="header-anchor" href="#为-wasm-创建平台特有代码" aria-label="Permalink to &quot;为 Wasm 创建平台特有代码&quot;">​</a></h3><p>添加 Wasm 目标后，你需要一个 Wasm 目录来存放 <code>firstElement</code> 和 <code>secondElement</code> 的平台特有实现：</p><ol><li><p>右键点击 <code>library/src</code> 目录，然后选择 <strong>New | Directory</strong>。</p></li><li><p>从 <strong>Gradle Source Sets</strong> 列表中选择 <strong>wasmJsMain/kotlin</strong>。</p><p><img src="'+h+`" alt="Gradle source sets list" width="450"></p></li><li><p>右键点击新创建的 <code>wasmJsMain/kotlin</code> 目录，然后选择 <strong>New | Kotlin Class/File</strong>。</p></li><li><p>输入 <strong>fibiprops.wasm</strong> 作为文件名并选择 <strong>File</strong>。</p></li><li><p>将以下代码添加到 <code>fibiprops.wasm.kt</code> 文件中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.github.kotlin.fibonacci</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> firstElement: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> secondElement: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span></span></code></pre></div><p>此代码设置了 Wasm 特有实现，将 <code>firstElement</code> 的 <code>actual</code> 值定义为 <code>3</code>，将 <code>secondElement</code> 定义为 <code>5</code>。</p></li></ol><h3 id="构建项目" tabindex="-1">构建项目 <a class="header-anchor" href="#构建项目" aria-label="Permalink to &quot;构建项目&quot;">​</a></h3><p>确保你的项目能用新平台正确编译：</p><ol><li><p>通过选择 <strong>View</strong> | <strong>Tool Windows</strong> | <strong>Gradle</strong> 打开 Gradle 工具窗口。</p></li><li><p>在 <strong>multiplatform-library-template</strong> | <strong>library</strong> | <strong>Tasks</strong> | <strong>build</strong> 中，运行 <strong>build</strong> 任务。</p><p><img src="`+k+`" alt="Gradle tool window" width="450"></p><p>或者，在 <code>multiplatform-library-template</code> 根目录的终端中运行以下命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span></code></pre></div></li></ol><p>你可以在 <strong>Build</strong> 工具窗口中看到成功的输出。</p><h2 id="将你的库发布到本地-maven-版本库" tabindex="-1">将你的库发布到本地 Maven 版本库 <a class="header-anchor" href="#将你的库发布到本地-maven-版本库" aria-label="Permalink to &quot;将你的库发布到本地 Maven 版本库&quot;">​</a></h2><p>你的多平台库已准备好在本地发布，以便你可以在同一台机器上的其他项目中引用它。</p><p>要发布你的库，请使用 <code>maven-publish</code> Gradle 插件，如下所示：</p><ol><li><p>在 <code>library/build.gradle.kts</code> 文件中，找到 <code>plugins { }</code> 代码块并应用 <code>maven-publish</code> 插件：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       // ...</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       // Add the following line:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">       id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;maven-publish&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span></code></pre></div></li><li><p>找到 <code>mavenPublishing { }</code> 代码块并注释掉 <code>signAllPublications()</code> 方法，以表明该发布仅限于本地：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mavenPublishing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Comment out the following method:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // signAllPublications()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>通过点击构建文件中出现的 <strong>Sync Gradle Changes</strong> 图标（<img src="`+l+'" alt="Gradle sync icon" width="30" type="joined">）来同步 Gradle 文件。或者，点击 Gradle 工具窗口中的刷新按钮。</p></li><li><p>在 Gradle 工具窗口中，转到 <strong>multiplatform-library-template</strong> | <strong>Tasks</strong> | <strong>publishing</strong> 并运行 <strong>publishToMavenLocal</strong> Gradle 任务。</p><p><img src="'+r+`" alt="Multiplatform library Gradle tool window" width="450"></p><p>或者，在 <code>multiplatform-library-template</code> 根目录的终端中运行以下命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> publishToMavenLocal</span></span></code></pre></div></li></ol><p>你的库已发布到本地 Maven 版本库。</p><p>要定位你发布的库，请使用你的文件浏览器或终端，并导航到用户主目录中的 <code>.m2\\repository\\io\\github\\kotlin\\library\\1.0.0\\</code>。</p><h2 id="将你的库添加为另一个项目的依赖项" tabindex="-1">将你的库添加为另一个项目的依赖项 <a class="header-anchor" href="#将你的库添加为另一个项目的依赖项" aria-label="Permalink to &quot;将你的库添加为另一个项目的依赖项&quot;">​</a></h2><p>将 Multiplatform 库发布到本地 Maven 版本库后，你可以在同一台机器上的其他 Kotlin 项目中使用它。</p><p>在你的消费者项目的 <code>build.gradle.kts</code> 文件中，添加对已发布库的依赖项：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">repositories</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    mavenLocal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;io.github.kotlin:library:1.0.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>repositories{}</code> 代码块告诉 Gradle 从本地 Maven 版本库解析库，并使其在共享代码中可用。</p><p><code>implementation</code> 依赖项包含你的库的 group 和版本，这些是在其 <code>build.gradle.kts</code> 文件中指定的。</p><p>如果你要将其添加到另一个多平台项目，可以将其添加到共享或平台特有源代码集：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // For all platforms</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> commonMain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;io.github.kotlin:library:1.0.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Or for specific platforms</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wasmJsMain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;io.github.kotlin:library:1.0.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>同步消费者项目并开始使用你的库！</p><h2 id="接下来" tabindex="-1">接下来 <a class="header-anchor" href="#接下来" aria-label="Permalink to &quot;接下来&quot;">​</a></h2><p>我们鼓励你进一步探索多平台开发：</p><ul><li><a href="./multiplatform-publish-libraries">将你的库发布到 Maven Central</a></li><li><a href="https://kotlinlang.org/docs/api-guidelines-introduction.html" target="_blank" rel="noreferrer">查阅库作者指南</a></li></ul><p>加入社区：</p><ul><li><img src="`+o+'" alt="GitHub" width="25" type="joined"> <strong>Compose Multiplatform GitHub</strong>：给<a href="https://github.com/JetBrains/compose-multiplatform" target="_blank" rel="noreferrer">版本库</a>加星并贡献</li><li><img src="'+d+'" alt="Slack" width="25" type="joined"> <strong>Kotlin Slack</strong>：获取<a href="https://surveys.jetbrains.com/s3/kotlin-slack-sign-up" target="_blank" rel="noreferrer">邀请</a>并加入<a href="https://kotlinlang.slack.com/archives/C3PQML5NU" target="_blank" rel="noreferrer">#multiplatform</a> 频道</li><li><img src="'+c+'" alt="Stack Overflow" width="25" type="joined"> <strong>Stack Overflow</strong>：订阅 <a href="https://stackoverflow.com/questions/tagged/kotlin-multiplatform" target="_blank" rel="noreferrer">&quot;kotlin-multiplatform&quot; 标签</a></li><li><img src="'+g+'" alt="YouTube" width="25" type="joined"> <strong>Kotlin YouTube channel</strong>：订阅并观看有关<a href="https://www.youtube.com/playlist?list=PLlFc5cFwUnmy_oVc9YQzjasSNoAk4hk_C" target="_blank" rel="noreferrer">Kotlin Multiplatform</a> 的视频</li></ul>',52))])}const P=E(f,[["render",v]]);export{q as __pageData,P as default};
