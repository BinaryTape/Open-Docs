import{_ as a,c as e,o as r,ag as l}from"./chunks/framework.Bksy39di.js";const d=JSON.parse('{"title":"Kotlin Multiplatformプロジェクトに最適なウェブターゲットを選択する","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kmp/choosing-web-target.md","filePath":"ja/kmp/choosing-web-target.md","lastUpdated":1755516278000}'),o={name:"ja/kmp/choosing-web-target.md"};function i(n,t,p,s,h,c){return r(),e("div",null,t[0]||(t[0]=[l('<h1 id="kotlin-multiplatformプロジェクトに最適なウェブターゲットを選択する" tabindex="-1">Kotlin Multiplatformプロジェクトに最適なウェブターゲットを選択する <a class="header-anchor" href="#kotlin-multiplatformプロジェクトに最適なウェブターゲットを選択する" aria-label="Permalink to &quot;Kotlin Multiplatformプロジェクトに最適なウェブターゲットを選択する&quot;">​</a></h1><p>Kotlin Multiplatform (KMP)は、ウェブ開発向けに2つのアプローチを提供します。</p><ul><li>JavaScriptベース（Kotlin/JSコンパイラを使用）</li><li>WebAssemblyベース（Kotlin/Wasmコンパイラを使用）</li></ul><p>どちらのオプションも、ウェブアプリケーションで共有コードを使用することを可能にします。 しかし、これらはパフォーマンス、相互運用性、アプリケーションサイズ、ターゲットブラウザのサポートなど、重要な点で異なります。 このガイドでは、それぞれのターゲットをいつ使用すべきか、そして適切な選択によって要件を満たす方法を説明します。</p><h3 id="クイックガイド" tabindex="-1">クイックガイド <a class="header-anchor" href="#クイックガイド" aria-label="Permalink to &quot;クイックガイド&quot;">​</a></h3><p>以下の表は、ユースケースに基づいて推奨されるターゲットをまとめたものです。</p><table tabindex="0"><thead><tr><th>ユースケース</th><th>推奨ターゲット</th><th>理由</th></tr></thead><tbody><tr><td>ビジネスロジックの共有、ただしネイティブUI</td><td>JS</td><td>JavaScriptとの容易な相互運用性と最小限のオーバーヘッドを提供します。</td></tr><tr><td>UIとビジネスロジックの両方を共有</td><td>Wasm</td><td><a href="https://www.jetbrains.com/compose-multiplatform/" target="_blank" rel="noreferrer">Compose Multiplatform</a>を使用したレンダリングで、より優れたパフォーマンスを提供します。</td></tr><tr><td>共有できないUI</td><td>JS</td><td><a href="https://kobweb.varabyte.com/" target="_blank" rel="noreferrer">Kobweb</a>、<a href="https://kilua.dev/" target="_blank" rel="noreferrer">Kilua</a>、<a href="https://kotlinlang.org/docs/js-react.html" target="_blank" rel="noreferrer">React</a>のようなHTMLベースのフレームワークを使用してUIを構築でき、既存のJSエコシステムとツールを活用できます。</td></tr></tbody></table><h2 id="kotlin-jsを選択する場合" tabindex="-1">Kotlin/JSを選択する場合 <a class="header-anchor" href="#kotlin-jsを選択する場合" aria-label="Permalink to &quot;Kotlin/JSを選択する場合&quot;">​</a></h2><p>Kotlin/JSは、以下の目標がある場合に優れたソリューションとなります。</p><ul><li><a href="#share-business-logic-with-a-javascript-typescript-codebase">JavaScript/TypeScriptコードベースとビジネスロジックを共有する</a></li><li><a href="#build-web-apps-with-kotlin-without-sharing-the-code">コードを共有せずにKotlinでウェブアプリを構築する</a></li></ul><h3 id="javascript-typescriptコードベースとビジネスロジックを共有する" tabindex="-1">JavaScript/TypeScriptコードベースとビジネスロジックを共有する <a class="header-anchor" href="#javascript-typescriptコードベースとビジネスロジックを共有する" aria-label="Permalink to &quot;JavaScript/TypeScriptコードベースとビジネスロジックを共有する&quot;">​</a></h3><p>Kotlinコードのチャンク（ドメインロジックやデータロジックなど）をネイティブなJavaScript/TypeScriptベースのアプリケーションと共有したい場合、 JSターゲットは以下のものを提供します。</p><ul><li>JavaScript/TypeScriptとの容易な相互運用性。</li><li>相互運用性における最小限のオーバーヘッド（例えば、不要なデータコピーがないなど）。これにより、コードがJSベースのワークフローにシームレスに統合されます。</li></ul><h3 id="コードを共有せずにkotlinでウェブアプリを構築する" tabindex="-1">コードを共有せずにKotlinでウェブアプリを構築する <a class="header-anchor" href="#コードを共有せずにkotlinでウェブアプリを構築する" aria-label="Permalink to &quot;コードを共有せずにKotlinでウェブアプリを構築する&quot;">​</a></h3><p>Kotlinを使用してウェブアプリ全体を構築しようとしているが、 他のプラットフォーム（iOS、Android、またはデスクトップ）とコードを共有する意図がないチームにとって、HTMLベースのソリューションはより良い選択肢となる可能性があります。 これはSEOとアクセシビリティを向上させ、デフォルトでシームレスなブラウザ統合を提供します（例：「ページ内検索」機能やページの翻訳）。 この場合、Kotlin/JSはいくつかのオプションを提供します。以下を行うことができます。</p><ul><li><a href="https://kobweb.varabyte.com/" target="_blank" rel="noreferrer">Kobweb</a>や<a href="https://kilua.dev/" target="_blank" rel="noreferrer">Kilua</a>のようなCompose HTMLベースのフレームワークを使用して、 お馴染みのCompose MultiplatformアーキテクチャでUIを構築します。</li><li>Kotlinラッパーを備えたReactベースのソリューションを活用し、<a href="https://kotlinlang.org/docs/js-react.html" target="_blank" rel="noreferrer">KotlinでReactコンポーネントを構築します</a>。</li></ul><h2 id="kotlin-wasmを選択する場合" tabindex="-1">Kotlin/Wasmを選択する場合 <a class="header-anchor" href="#kotlin-wasmを選択する場合" aria-label="Permalink to &quot;Kotlin/Wasmを選択する場合&quot;">​</a></h2><h3 id="compose-multiplatformでクロスプラットフォームアプリを構築する" tabindex="-1">Compose Multiplatformでクロスプラットフォームアプリを構築する <a class="header-anchor" href="#compose-multiplatformでクロスプラットフォームアプリを構築する" aria-label="Permalink to &quot;Compose Multiplatformでクロスプラットフォームアプリを構築する&quot;">​</a></h3><p>ウェブを含む複数のプラットフォーム間でロジックとUIの両方を共有したい場合、 Kotlin/Wasmと<a href="https://www.jetbrains.com/compose-multiplatform/" target="_blank" rel="noreferrer">Compose Multiplatform</a>の組み合わせが最適な方法です。</p><ul><li>UIエクスペリエンスがプラットフォーム間でより一貫します。</li><li>Wasmを活用して、レンダリングの向上とスムーズで応答性の高いアニメーションを実現できます。</li><li><a href="https://developer.chrome.com/blog/wasmgc" target="_blank" rel="noreferrer">WasmGC</a>のブラウザサポートが成熟し、 Kotlin/Wasmはすべての主要なモダンブラウザでネイティブに近いパフォーマンスで実行できるようになりました。</li></ul><p>古いブラウザバージョンのサポートを要件とするプロジェクトの場合、Compose Multiplatformの互換モードを使用できます。 モダンブラウザ向けにはWasmでUIを構築し、古いブラウザではJSに適切にフォールバックします。 プロジェクト内でWasmターゲットとJSターゲット間で共通ロジックを共有することも可能です。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>まだどの道を選ぶべきか迷っていますか？ 私たちの<a href="https://slack-chats.kotlinlang.org" target="_blank" rel="noreferrer">Slackコミュニティ</a>に参加して、 適切なターゲットを選択するための主な違い、パフォーマンスに関する考慮事項、ベストプラクティスについて質問してください。</p></div>',22)]))}const b=a(o,[["render",i]]);export{d as __pageData,b as default};
