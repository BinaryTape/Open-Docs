import{_ as i,a,b as n,c as t}from"./chunks/convert-java-to-kotlin.BPRm1iLF.js";import{_ as l,c as p,o as h,ag as e}from"./chunks/framework.Bksy39di.js";const m=JSON.parse('{"title":"在一個專案中混用 Java 與 Kotlin – 教學","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/mixing-java-kotlin-intellij.md","filePath":"zh-Hant/kotlin/mixing-java-kotlin-intellij.md","lastUpdated":1754307826000}'),k={name:"zh-Hant/kotlin/mixing-java-kotlin-intellij.md"};function r(o,s,E,d,g,c){return h(),p("div",null,s[0]||(s[0]=[e('<h1 id="在一個專案中混用-java-與-kotlin-–-教學" tabindex="-1">在一個專案中混用 Java 與 Kotlin – 教學 <a class="header-anchor" href="#在一個專案中混用-java-與-kotlin-–-教學" aria-label="Permalink to &quot;在一個專案中混用 Java 與 Kotlin – 教學&quot;">​</a></h1><p>Kotlin 提供了與 Java 的一流互通性，而現代 IDE 讓這點變得更好。 在本教學中，您將學習如何在 IntelliJ IDEA 的同一個專案中使用 Kotlin 和 Java 原始碼。 要了解如何在 IntelliJ IDEA 中啟動新的 Kotlin 專案，請參閱 <a href="/zh-Hant/kotlin/jvm-get-started">IntelliJ IDEA 入門</a>。</p><h2 id="將-java-原始碼新增至現有的-kotlin-專案" tabindex="-1">將 Java 原始碼新增至現有的 Kotlin 專案 <a class="header-anchor" href="#將-java-原始碼新增至現有的-kotlin-專案" aria-label="Permalink to &quot;將 Java 原始碼新增至現有的 Kotlin 專案&quot;">​</a></h2><p>將 Java 類別新增至 Kotlin 專案相當簡單。您只需建立一個新的 Java 檔案。 選取專案中的目錄或套件，然後前往 <strong>File</strong> | <strong>New</strong> | <strong>Java Class</strong> 或使用 <strong>Alt + Insert</strong>/<strong>Cmd + N</strong> 快捷鍵。</p><p><img src="'+i+`" alt="新增 Java 類別" width="400"></p><p>如果您已經有 Java 類別，只需將它們複製到專案目錄即可。</p><p>您現在可以從 Kotlin 中使用 Java 類別，反之亦然，而無需任何進一步動作。</p><p>例如，新增以下 Java 類別：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Customer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String name;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Customer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(String </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> placeOrder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        System.out.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;A new order is placed by &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>讓您可以像 Kotlin 中的任何其他類型一樣從 Kotlin 呼叫它。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> customer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Customer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Phase&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(customer.name)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(customer.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">placeOrder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><h2 id="將-kotlin-原始碼新增至現有的-java-專案" tabindex="-1">將 Kotlin 原始碼新增至現有的 Java 專案 <a class="header-anchor" href="#將-kotlin-原始碼新增至現有的-java-專案" aria-label="Permalink to &quot;將 Kotlin 原始碼新增至現有的 Java 專案&quot;">​</a></h2><p>將 Kotlin 檔案新增至現有的 Java 專案大致相同。</p><p><img src="`+a+'" alt="新增 Kotlin 檔案類別" width="400"></p><p>如果這是您首次將 Kotlin 檔案新增至此專案，IntelliJ IDEA 將會自動新增所需的 Kotlin 執行環境。</p><p><img src="'+n+'" alt="捆綁 Kotlin 執行環境" width="350"></p><p>您也可以從 <strong>Tools</strong> | <strong>Kotlin</strong> | <strong>Configure Kotlin in Project</strong> 手動開啟 Kotlin 執行環境配置。</p><h2 id="使用-j2k-將現有的-java-檔案轉換為-kotlin" tabindex="-1">使用 J2K 將現有的 Java 檔案轉換為 Kotlin <a class="header-anchor" href="#使用-j2k-將現有的-java-檔案轉換為-kotlin" aria-label="Permalink to &quot;使用 J2K 將現有的 Java 檔案轉換為 Kotlin&quot;">​</a></h2><p>Kotlin 外掛也捆綁了一個 Java 到 Kotlin 的轉換器（<em>J2K</em>），它會自動將 Java 檔案轉換為 Kotlin。 要在檔案上使用 J2K，請點擊其上下文選單或 IntelliJ IDEA 的 <strong>Code</strong> 選單中的 <strong>Convert Java File to Kotlin File</strong>。</p><p><img src="'+t+'" alt="將 Java 轉換為 Kotlin" width="500"></p><p>雖然這個轉換器並非萬無一失，但它在將大部分 Java 樣板程式碼轉換為 Kotlin 方面做得相當不錯。 不過，有時仍然需要一些手動調整。</p>',21)]))}const F=l(k,[["render",r]]);export{m as __pageData,F as default};
