import{_ as a,c as t,o,ag as r}from"./chunks/framework.Bksy39di.js";const m=JSON.parse('{"title":"Kotlin 用于 AI 驱动的应用程序开发","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/kotlin-ai-apps-development-overview.md","filePath":"kotlin/kotlin-ai-apps-development-overview.md","lastUpdated":1754307826000}'),i={name:"kotlin/kotlin-ai-apps-development-overview.md"};function l(n,e,s,p,h,c){return o(),t("div",null,e[0]||(e[0]=[r('<h1 id="kotlin-用于-ai-驱动的应用程序开发" tabindex="-1">Kotlin 用于 AI 驱动的应用程序开发 <a class="header-anchor" href="#kotlin-用于-ai-驱动的应用程序开发" aria-label="Permalink to &quot;Kotlin 用于 AI 驱动的应用程序开发&quot;">​</a></h1><p>Kotlin 为构建 AI 驱动的应用程序提供了一个现代且实用的基础。它可跨平台使用，与成熟的 AI 框架良好集成，并支持常见的 AI 开发模式。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>本页面介绍了 Kotlin 如何在实际 AI 场景中使用，并附带了 <a href="https://github.com/Kotlin/Kotlin-AI-Examples" target="_blank" rel="noreferrer">Kotlin-AI-Examples</a> 版本库中的工作示例。</p></div><h2 id="kotlin-ai-智能体框架-–-koog" tabindex="-1">Kotlin AI 智能体框架 – Koog <a class="header-anchor" href="#kotlin-ai-智能体框架-–-koog" aria-label="Permalink to &quot;Kotlin AI 智能体框架 – Koog&quot;">​</a></h2><p><a href="https://koog.ai" target="_blank" rel="noreferrer">Koog</a> 是一个基于 Kotlin 的框架，用于在本地创建和运行 AI 智能体，无需外部服务。Koog 是 JetBrains 创新的开源智能体框架，它使开发者能够在 JVM 生态系统内构建 AI 智能体。它提供了一个纯 Kotlin 实现，用于构建智能体，这些智能体可以与工具交互、处理复杂的工作流并与用户通信。</p><h2 id="更多用例" tabindex="-1">更多用例 <a class="header-anchor" href="#更多用例" aria-label="Permalink to &quot;更多用例&quot;">​</a></h2><p>Kotlin 在 AI 开发中还有许多其他用例。从将语言模型集成到后端服务，到构建 AI 驱动的用户界面，这些示例展示了 Kotlin 在各种 AI 应用程序中的多功能性。</p><h3 id="检索增强生成-retrieval-augmented-generation" tabindex="-1">检索增强生成 (Retrieval-augmented generation) <a class="header-anchor" href="#检索增强生成-retrieval-augmented-generation" aria-label="Permalink to &quot;检索增强生成 (Retrieval-augmented generation)&quot;">​</a></h3><p>使用 Kotlin 构建检索增强生成 (RAG) 流水线，将语言模型连接到外部源，例如文档、向量存储或 API。 例如：</p><ul><li><a href="https://github.com/Kotlin/Kotlin-AI-Examples/tree/master/projects/spring-ai/springAI-demo" target="_blank" rel="noreferrer"><code>springAI-demo</code></a>：一个 Spring Boot 应用，它将 Kotlin 标准库文档加载到向量存储中，并支持基于文档的问答。</li><li><a href="https://github.com/Kotlin/Kotlin-AI-Examples/tree/master/projects/langchain4j/langchain4j-spring-boot" target="_blank" rel="noreferrer"><code>langchain4j-spring-boot</code></a>：一个使用 LangChain4j 的最小 RAG 示例。</li></ul><h3 id="基于智能体的应用程序" tabindex="-1">基于智能体的应用程序 <a class="header-anchor" href="#基于智能体的应用程序" aria-label="Permalink to &quot;基于智能体的应用程序&quot;">​</a></h3><p>用 Kotlin 构建 AI 智能体，这些智能体能够使用语言模型和工具进行推理、规划和行动。 例如：</p><ul><li><a href="https://github.com/JetBrains/koog" target="_blank" rel="noreferrer"><code>koog</code></a>：展示了如何使用 Kotlin 智能体框架 Koog 来构建 AI 智能体。</li><li><a href="https://github.com/Kotlin/Kotlin-AI-Examples/tree/master/projects/langchain4j/langchain4j-spring-boot" target="_blank" rel="noreferrer"><code>langchain4j-spring-boot</code></a>：包含一个使用 LangChain4j 构建的简单工具使用智能体。</li></ul><h3 id="思维链提示" tabindex="-1">思维链提示 <a class="header-anchor" href="#思维链提示" aria-label="Permalink to &quot;思维链提示&quot;">​</a></h3><p>实现结构化提示技术，引导语言模型通过多步推理。 例如：</p><ul><li><a href="https://github.com/Kotlin/Kotlin-AI-Examples/blob/master/notebooks/langchain4j/LangChain4j_Overview.ipynb" target="_blank" rel="noreferrer"><code>LangChain4j_Overview.ipynb</code></a>：一个 Kotlin Notebook，演示了思维链和结构化输出。</li></ul><h3 id="llms-在后端服务中的应用" tabindex="-1">LLMs 在后端服务中的应用 <a class="header-anchor" href="#llms-在后端服务中的应用" aria-label="Permalink to &quot;LLMs 在后端服务中的应用&quot;">​</a></h3><p>使用 Kotlin 和 Spring 将 LLMs 集成到业务逻辑或 REST API 中。 例如：</p><ul><li><a href="https://github.com/Kotlin/Kotlin-AI-Examples/tree/master/projects/spring-ai/spring-ai-examples" target="_blank" rel="noreferrer"><code>spring-ai-examples</code></a>：包含分类、聊天和摘要示例。</li><li><a href="https://github.com/Kotlin/Kotlin-AI-Examples/tree/master/projects/spring-ai/springAI-demo" target="_blank" rel="noreferrer"><code>springAI-demo</code></a>：演示了 LLM 响应与应用程序逻辑的完整集成。</li></ul><h3 id="ai-驱动的多平台用户界面" tabindex="-1">AI 驱动的多平台用户界面 <a class="header-anchor" href="#ai-驱动的多平台用户界面" aria-label="Permalink to &quot;AI 驱动的多平台用户界面&quot;">​</a></h3><p>使用 Compose Multiplatform 在 Kotlin 中构建交互式的 AI 驱动 UI。 例如：</p><ul><li><a href="https://github.com/Kotlin/Kotlin-AI-Examples/tree/master/projects/mcp/mcp-demo" target="_blank" rel="noreferrer"><code>mcp-demo</code></a>：一个桌面 UI，它连接到 Claude 和 OpenAI，并使用 Compose Multiplatform 展示响应。</li></ul><h2 id="探索示例" tabindex="-1">探索示例 <a class="header-anchor" href="#探索示例" aria-label="Permalink to &quot;探索示例&quot;">​</a></h2><p>您可以探索并运行 <a href="https://github.com/Kotlin/Kotlin-AI-Examples" target="_blank" rel="noreferrer">Kotlin-AI-Examples</a> 版本库中的示例。每个项目都是独立的。您可以将每个项目用作参考或模板，用于构建基于 Kotlin 的 AI 应用程序。</p><h2 id="下一步" tabindex="-1">下一步 <a class="header-anchor" href="#下一步" aria-label="Permalink to &quot;下一步&quot;">​</a></h2><ul><li>完成 <a href="/kotlin/spring-ai-guide">构建一个 Kotlin 应用，它使用 Spring AI 回答基于存储在 Qdrant 中的文档的问题</a> 教程，了解如何在 IntelliJ IDEA 中使用 Spring AI 和 Kotlin 的更多信息</li><li>加入 <a href="https://kotlinlang.org/community/" target="_blank" rel="noreferrer">Kotlin 社区</a>，与其他使用 Kotlin 构建 AI 应用程序的开发者建立联系</li></ul>',26)]))}const g=a(i,[["render",l]]);export{m as __pageData,g as default};
