import{_ as c,C as t,c as E,o as u,j as i,G as a,ag as p,a as e,w as n}from"./chunks/framework.Bksy39di.js";const q=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ktor/server-basic-auth.md","filePath":"ktor/server-basic-auth.md","lastUpdated":1755457140000}'),g={name:"ktor/server-basic-auth.md"};function y(F,s,b,v,m,f){const r=t("show-structure"),o=t("Links"),k=t("tldr"),l=t("code-block"),h=t("TabItem"),d=t("Tabs");return u(),E("div",null,[s[4]||(s[4]=i("h1",{id:"ktor-服务器中的基本认证",tabindex:"-1"},[e("Ktor 服务器中的基本认证 "),i("a",{class:"header-anchor",href:"#ktor-服务器中的基本认证","aria-label":'Permalink to "Ktor 服务器中的基本认证"'},"​")],-1)),a(r,{for:"chapter",depth:"2"}),a(k,null,{default:n(()=>[s[2]||(s[2]=i("p",null,[i("b",null,"所需依赖项"),e(": "),i("code",null,"io.ktor:ktor-server-auth")],-1)),s[3]||(s[3]=i("p",null,[i("b",null,"代码示例"),e(": "),i("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/auth-basic"},"auth-basic"),e(", "),i("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/auth-basic-hash-table"},"auth-basic-hash-table")],-1)),i("p",null,[i("b",null,[a(o,{href:"/ktor/server-native",summary:"Ktor 支持 Kotlin/Native，允许您在没有额外运行时或虚拟机的情况下运行服务器。"},{default:n(()=>s[0]||(s[0]=[e("对原生服务器的支持")])),_:1})]),s[1]||(s[1]=e(": ✅ "))])]),_:1}),s[5]||(s[5]=p('<p>基本认证方案是 <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication" target="_blank" rel="noreferrer">HTTP 框架</a> 的一部分，用于访问控制和认证。在此方案中，用户凭据以使用 Base64 编码的用户名/密码对形式传输。</p><p>Ktor 允许您使用基本认证来登录用户和保护特定 <a href="./server-routing">路由</a>。您可以在 <a href="./server-auth">Ktor 服务器中的认证和授权</a> 部分获取有关 Ktor 认证的通用信息。</p><blockquote><p>鉴于基本认证以明文形式传输用户名和密码，您需要使用 <a href="./server-ssl">HTTPS/TLS</a> 来保护敏感信息。</p></blockquote><h2 id="add_dependencies" tabindex="-1">添加依赖项 <a class="header-anchor" href="#add_dependencies" aria-label="Permalink to &quot;添加依赖项 {id=&quot;add_dependencies&quot;}&quot;">​</a></h2><p>要启用 <code>basic</code> 认证，您需要在构建脚本中包含 <code>ktor-server-auth</code> artifact：</p>',5)),a(d,{group:"languages"},{default:n(()=>[a(h,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[a(l,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-server-auth:$ktor_version")'})]),_:1}),a(h,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[a(l,{lang:"Groovy",code:'            implementation "io.ktor:ktor-server-auth:$ktor_version"'})]),_:1}),a(h,{title:"Maven","group-key":"maven"},{default:n(()=>[a(l,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-server-auth-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),s[6]||(s[6]=p(`<h2 id="flow" tabindex="-1">基本认证流程 <a class="header-anchor" href="#flow" aria-label="Permalink to &quot;基本认证流程 {id=&quot;flow&quot;}&quot;">​</a></h2><p>基本认证流程如下所示：</p><ol><li>客户端向服务器应用程序中的特定 <a href="./server-routing">路由</a> 发出不带 <code>Authorization</code> 请求头的请求。</li><li>服务器以 <code>401</code> (Unauthorized) 响应状态响应客户端，并使用 <code>WWW-Authenticate</code> 响应头提供信息，表明该路由受到 basic 认证方案的保护。典型的 <code>WWW-Authenticate</code> 请求头如下所示：</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>WWW-Authenticate: Basic realm=&quot;Access to the &#39;/&#39; path&quot;, charset=&quot;UTF-8&quot;</span></span></code></pre></div><p>在 Ktor 中，您可以在 <a href="#configure-provider">配置</a> <code>basic</code> 认证提供者时，使用相应属性指定 <code>realm</code> 和 <code>charset</code>。</p><ol start="3"><li>通常，客户端会显示一个登录对话框，用户可以在其中输入凭据。然后，客户端发出一个包含使用 Base64 编码的用户名和密码对的 <code>Authorization</code> 请求头的请求，例如：</li></ol><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Authorization: Basic amV0YnJhaW5zOmZvb2Jhcg</span></span></code></pre></div><ol start="4"><li>服务器 <a href="#configure-provider">验证</a> 客户端发送的凭据，并响应请求的内容。</li></ol><h2 id="install" tabindex="-1">安装基本认证 <a class="header-anchor" href="#install" aria-label="Permalink to &quot;安装基本认证 {id=&quot;install&quot;}&quot;">​</a></h2><p>要安装 <code>basic</code> 认证提供者，请在 <code>install</code> 代码块中调用 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/basic.html" target="_blank" rel="noreferrer">basic</a> 函数：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.application.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.auth.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Authentication) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    basic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 配置基本认证</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>您可以可选地指定一个 <a href="./server-auth#provider-name">提供者名称</a>，该名称可用于 <a href="#authenticate-route">认证指定路由</a>。</p><h2 id="configure" tabindex="-1">配置基本认证 <a class="header-anchor" href="#configure" aria-label="Permalink to &quot;配置基本认证 {id=&quot;configure&quot;}&quot;">​</a></h2><p>要大致了解如何在 Ktor 中配置不同的认证提供者，请参见 <a href="./server-auth#configure">配置认证</a>。在本节中，我们将看到 <code>basic</code> 认证提供者的配置细节。</p><h3 id="configure-provider" tabindex="-1">步骤 1：配置 basic 提供者 <a class="header-anchor" href="#configure-provider" aria-label="Permalink to &quot;步骤 1：配置 basic 提供者 {id=&quot;configure-provider&quot;}&quot;">​</a></h3><p><code>basic</code> 认证提供者通过 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-basic-authentication-provider/-config/index.html" target="_blank" rel="noreferrer">BasicAuthenticationProvider.Configuration</a> 类暴露其设置。在以下示例中，指定了以下设置：</p><ul><li><code>realm</code> 属性设置要传递给 <code>WWW-Authenticate</code> 请求头的 <code>realm</code>。</li><li><code>validate</code> 函数验证用户名和密码。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Authentication) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    basic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-basic&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        realm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Access to the &#39;/&#39; path&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        validate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { credentials </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (credentials.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;jetbrains&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> credentials.password </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;foobar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                UserIdPrincipal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(credentials.name)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>validate</code> 函数检测 <code>UserPasswordCredential</code>，并在认证成功的情况下返回 <code>UserIdPrincipal</code>，如果认证失败则返回 <code>null</code>。</p><blockquote><p>您还可以使用 <a href="#validate-user-hash">UserHashedTableAuth</a> 来验证存储在保存用户名和密码哈希的内存表中的用户。</p></blockquote><h3 id="authenticate-route" tabindex="-1">步骤 2：保护特定资源 <a class="header-anchor" href="#authenticate-route" aria-label="Permalink to &quot;步骤 2：保护特定资源 {id=&quot;authenticate-route&quot;}&quot;">​</a></h3><p>配置 <code>basic</code> 提供者后，您可以使用 <strong><a href="./server-auth#authenticate-route">authenticate</a></strong> 函数保护应用程序中的特定资源。在认证成功的情况下，您可以使用 <code>call.principal</code> 函数在路由处理程序中检索已认证的 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-user-id-principal/index.html" target="_blank" rel="noreferrer">UserIdPrincipal</a>，并获取已认证用户的名称。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    authenticate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-basic&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, \${call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">principal</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserIdPrincipal</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&gt;()?.name}!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="validate-user-hash" tabindex="-1">使用 UserHashedTableAuth 进行验证 <a class="header-anchor" href="#validate-user-hash" aria-label="Permalink to &quot;使用 UserHashedTableAuth 进行验证 {id=&quot;validate-user-hash&quot;}&quot;">​</a></h2><p>Ktor 允许您使用 <a href="#validate-user-hash">UserHashedTableAuth</a> 来 <a href="#configure-provider">验证</a> 存储在保存用户名和密码哈希的内存表中的用户。如果您的数据源被泄露，这可以防止用户密码被泄露。</p><p>要使用 <code>UserHashedTableAuth</code> 验证用户，请遵循以下步骤：</p><ol><li>使用 <a href="https://api.ktor.io/ktor-utils/io.ktor.util/get-digest-function.html" target="_blank" rel="noreferrer">getDigestFunction</a> 函数创建具有指定算法和盐提供者的摘要函数：</li></ol><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> digestFunction </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getDigestFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;SHA-256&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ktor\${it.length}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div><ol start="2"><li>初始化 <code>UserHashedTableAuth</code> 的新实例并指定以下属性： <ul><li>使用 <code>table</code> 属性提供用户名和哈希密码表。</li><li>将摘要函数分配给 <code>digester</code> 属性。</li></ul></li></ol><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hashedUserTable </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserHashedTableAuth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    table </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mapOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;jetbrains&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> to </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">digestFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;foobar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;admin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> to </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">digestFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;password&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    digester </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> digestFunction</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><ol start="3"><li>在 <code>validate</code> 函数内部，调用 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-user-hashed-table-auth/authenticate.html" target="_blank" rel="noreferrer">UserHashedTableAuth.authenticate</a> 函数来认证用户，如果凭据有效则返回 <code>UserIdPrincipal</code> 的实例：</li></ol><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Authentication) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    basic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-basic-hashed&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        realm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Access to the &#39;/&#39; path&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        validate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { credentials </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            hashedUserTable.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">authenticate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(credentials)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,32))])}const A=c(g,[["render",y]]);export{q as __pageData,A as default};
