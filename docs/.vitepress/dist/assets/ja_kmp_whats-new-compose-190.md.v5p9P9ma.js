import{_ as r,a as h,b as d}from"./chunks/compose_expressive_theme.animated.Dd_wIje5.js";import{_ as k,C as s,c,o as E,ag as e,G as t,j as i,w as m,a as l}from"./chunks/framework.Bksy39di.js";const w=JSON.parse('{"title":"Compose Multiplatform 1.9.0-beta03 の新機能","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kmp/whats-new-compose-190.md","filePath":"ja/kmp/whats-new-compose-190.md","lastUpdated":1755516278000}'),g={name:"ja/kmp/whats-new-compose-190.md"};function u(b,a,y,f,v,C){const n=s("code-block"),p=s("list"),o=s("secondary-label");return E(),c("div",null,[a[1]||(a[1]=e('<h1 id="compose-multiplatform-1-9-0-beta03-の新機能" tabindex="-1">Compose Multiplatform 1.9.0-beta03 の新機能 <a class="header-anchor" href="#compose-multiplatform-1-9-0-beta03-の新機能" aria-label="Permalink to &quot;Compose Multiplatform 1.9.0-beta03 の新機能&quot;">​</a></h1><p>本 EAP (早期アクセスプログラム) 機能リリースの主な変更点は以下のとおりです。</p><ul><li><a href="#new-material-3-expressive-theme">Material 3 Expressive テーマ</a></li><li><a href="#customizable-shadows">カスタマイズ可能なシャドウ</a></li><li><a href="#parameters-for-the-preview-annotation"><code>@Preview</code> アノテーションのパラメータ</a></li><li><a href="#frame-rate-configuration">iOS でのフレームレート設定</a></li><li><a href="#accessibility-support">ウェブターゲットでのアクセシビリティサポート</a></li><li><a href="#new-api-for-embedding-html-content">HTML コンテンツ埋め込み用の新しい API</a></li></ul><p>このリリースでの変更点の完全なリストは <a href="https://github.com/JetBrains/compose-multiplatform/releases/tag/v1.9.0-beta01" target="_blank" rel="noreferrer">GitHub</a> を参照してください。</p><h2 id="dependencies" tabindex="-1">Dependencies <a class="header-anchor" href="#dependencies" aria-label="Permalink to &quot;Dependencies&quot;">​</a></h2><ul><li><p>Gradle プラグイン <code>org.jetbrains.compose</code>、バージョン 1.9.0-beta03。Jetpack Compose ライブラリに基づいています。</p><ul><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-runtime#1.9.0-rc01" target="_blank" rel="noreferrer">Runtime 1.9.0-rc01</a></li><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-ui#1.9.0-rc01" target="_blank" rel="noreferrer">UI 1.9.0-rc01</a></li><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-foundation#1.9.0-rc01" target="_blank" rel="noreferrer">Foundation 1.9.0-rc01</a></li><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-material#1.9.0-rc01" target="_blank" rel="noreferrer">Material 1.9.0-rc01</a></li><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-material3#1.3.2" target="_blank" rel="noreferrer">Material3 1.3.2</a></li></ul></li><li><p>Compose Material3 ライブラリ <code>org.jetbrains.compose.material3:1.9.0-beta03</code>。 <a href="https://developer.android.com/jetpack/androidx/releases/compose-material3#1.4.0-beta01" target="_blank" rel="noreferrer">Jetpack Material3 1.4.0-beta01</a> に基づいています。</p><p>共通の Material3 ライブラリの安定版は Jetpack Compose Material3 1.3.2 に基づいていますが、Compose Multiplatform と Material3 の<a href="#decoupled-material3-versioning">バージョン管理の分離</a>により、プロジェクトでより新しいプレリリースバージョンを選択できます。</p></li><li><p>Compose Material3 Adaptive ライブラリ <code>org.jetbrains.compose.material3.adaptive:adaptive*:1.2.0-alpha05</code>。 <a href="https://developer.android.com/jetpack/androidx/releases/compose-material3-adaptive#1.2.0-alpha10" target="_blank" rel="noreferrer">Jetpack Material3 Adaptive 1.2.0-alpha10</a> に基づいています。</p></li><li><p>Lifecycle ライブラリ <code>org.jetbrains.androidx.lifecycle:lifecycle-*:2.9.2</code>。 <a href="https://developer.android.com/jetpack/androidx/releases/lifecycle#2.9.2" target="_blank" rel="noreferrer">Jetpack Lifecycle 2.9.2</a> に基づいています。</p></li><li><p>Navigation ライブラリ <code>org.jetbrains.androidx.navigation:navigation-*:2.9.0-beta05</code>。 <a href="https://developer.android.com/jetpack/androidx/releases/navigation#2.9.1" target="_blank" rel="noreferrer">Jetpack Navigation 2.9.1</a> に基づいています。</p></li><li><p>Savedstate ライブラリ <code>org.jetbrains.androidx.savedstate:savedstate:1.3.2</code>。 <a href="https://developer.android.com/jetpack/androidx/releases/savedstate#1.3.1" target="_blank" rel="noreferrer">Jetpack Savedstate 1.3.1</a> に基づいています。</p></li><li><p>WindowManager Core ライブラリ <code>org.jetbrains.androidx.window:window-core:1.4.0-beta01</code>。 <a href="https://developer.android.com/jetpack/androidx/releases/window#1.4.0" target="_blank" rel="noreferrer">Jetpack WindowManager 1.4.0</a> に基づいています。</p></li></ul><h2 id="breaking-changes" tabindex="-1">Breaking changes <a class="header-anchor" href="#breaking-changes" aria-label="Permalink to &quot;Breaking changes&quot;">​</a></h2><p>Jetpack Material3 の <a href="https://developer.android.com/jetpack/androidx/releases/compose-material3#1.4.0-beta01" target="_blank" rel="noreferrer">1.4.0-beta01 リリース</a>に合わせて、Compose Multiplatform は <code>ExperimentalMaterial3ExpressiveApi</code> および <code>ExperimentalMaterial3ComponentOverrideApi</code> タグが付けられたすべての公開 API を削除しました。</p><p>これらの実験的な機能を引き続き使用したい場合は、以前の Material3 アルファバージョンを明示的に含めることができます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.compose.material3:material3:1.9.0-alpha04&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="across-platforms" tabindex="-1">Across platforms <a class="header-anchor" href="#across-platforms" aria-label="Permalink to &quot;Across platforms&quot;">​</a></h2><h3 id="preview-アノテーションのパラメータ" tabindex="-1"><code>@Preview</code> アノテーションのパラメータ <a class="header-anchor" href="#preview-アノテーションのパラメータ" aria-label="Permalink to &quot;`@Preview` アノテーションのパラメータ&quot;">​</a></h3><p>Compose Multiplatform の <code>@Preview</code> アノテーションには、デザイン時プレビューで <code>@Composable</code> 関数がどのようにレンダリングされるかを設定するための追加パラメータが含まれるようになりました。</p><ul><li><code>name</code>: プレビューの表示名。</li><li><code>group</code>: プレビューのグループ名。関連するプレビューを論理的に整理し、選択的に表示できます。</li><li><code>widthDp</code>: 最大幅 (dp)。</li><li><code>heightDp</code>: 最大高さ (dp)。</li><li><code>locale</code>: アプリケーションの現在のロケール。</li><li><code>showBackground</code>: プレビューにデフォルトの背景色を適用するためのフラグ。</li><li><code>backgroundColor</code>: プレビューの背景色を定義する 32 ビット ARGB カラー整数。</li></ul><p>これらの新しいプレビューパラメータは、IntelliJ IDEA と Android Studio の両方で認識され、機能します。</p><h3 id="カスタマイズ可能なシャドウ" tabindex="-1">カスタマイズ可能なシャドウ <a class="header-anchor" href="#カスタマイズ可能なシャドウ" aria-label="Permalink to &quot;カスタマイズ可能なシャドウ&quot;">​</a></h3><p>Compose Multiplatform 1.9.0-beta03 では、Jetpack Compose の新しいシャドウプリミティブと API を採用し、カスタマイズ可能なシャドウを導入しました。以前からサポートされていた <code>shadow</code> モディファイアに加えて、新しい API を使用して、より高度で柔軟なシャドウ効果を作成できるようになりました。</p><p>異なる種類のシャドウを作成するために、2 つの新しいプリミティブが利用可能です。 <code>DropShadowPainter()</code> と <code>InnerShadowPainter()</code>。</p><p>これらの新しいシャドウを UI コンポーネントに適用するには、<code>dropShadow</code> または <code>innerShadow</code> モディファイアでシャドウ効果を設定します。</p>',19)),t(p,{columns:"2"},{default:m(()=>[i("li",null,[t(n,{lang:"kotlin",code:`        Box(
            Modifier.size(120.dp)
                .dropShadow(
                    RectangleShape,
                    DropShadow(12.dp)
                )
                .background(Color.White)
        )
        Box(
            Modifier.size(120.dp)
                .innerShadow(
                    RectangleShape,
                    InnerShadow(12.dp)
                )
        )`})]),a[0]||(a[0]=i("li",null,[i("img",{src:r,type:"inline",alt:"Customizable shadows",width:"200"})],-1))]),_:1}),a[2]||(a[2]=i("p",null,"あらゆる形状と色のシャドウを描画したり、シャドウジオメトリをマスクとして使用して、内部グラデーションで塗りつぶされたシャドウを作成することもできます。",-1)),a[3]||(a[3]=i("img",{src:h,alt:"Expressive shadows",width:"244"},null,-1)),a[4]||(a[4]=i("p",null,[l("詳細については、"),i("a",{href:"https://developer.android.com/reference/kotlin/androidx/compose/ui/graphics/shadow/package-summary.html",target:"_blank",rel:"noreferrer"},"shadow API リファレンス"),l("を参照してください。")],-1)),a[5]||(a[5]=i("h3",{id:"新しい-material-3-expressive-テーマ",tabindex:"-1"},[l("新しい Material 3 Expressive テーマ "),i("a",{class:"header-anchor",href:"#新しい-material-3-expressive-テーマ","aria-label":'Permalink to "新しい Material 3 Expressive テーマ"'},"​")],-1)),t(o,{ref:"Experimental"},null,512),a[6]||(a[6]=e('<p>Compose Multiplatform は、Material 3 ライブラリの実験的な <a href="https://developer.android.com/reference/kotlin/androidx/compose/material3/package-summary?hl=en#MaterialExpressiveTheme(androidx.compose.material3.ColorScheme,androidx.compose.material3.MotionScheme,androidx.compose.material3.Shapes,androidx.compose.material3.Typography,kotlin.Function0)" target="_blank" rel="noreferrer"><code>MaterialExpressiveTheme</code></a> をサポートするようになりました。Expressive テーマを使用すると、Material Design アプリをカスタマイズして、よりパーソナライズされたエクスペリエンスを実現できます。</p><p>Expressive テーマを使用するには:</p><ol><li><p>最新バージョンの Material 3 を含めます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.compose.material3:material3:1.9.0-alpha04&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></li><li><p><code>@OptIn(ExperimentalMaterial3ExpressiveApi::class)</code> オプトインを付けて <code>MaterialExpressiveTheme()</code> 関数を使用し、<code>colorScheme</code>、<code>motionScheme</code>、<code>shapes</code>、<code>typography</code> パラメータを設定することで、UI 要素全体のテーマを設定します。</p></li></ol><p>その後、<a href="https://kotlinlang.org/api/compose-multiplatform/material3/androidx.compose.material3/-button.html" target="_blank" rel="noreferrer"><code>Button()</code></a> や <a href="https://kotlinlang.org/api/compose-multiplatform/material3/androidx.compose.material3/-checkbox.html" target="_blank" rel="noreferrer"><code>Checkbox()</code></a> などの Material コンポーネントは、提供された値を自動的に使用します。</p>',4)),a[7]||(a[7]=i("img",{src:d,alt:"Material 3 Expressive",width:"250","preview-src":"compose_expressive_theme.png"},null,-1)),a[8]||(a[8]=e(`<h3 id="androidx-compose-runtime-runtime-のマルチプラットフォームターゲット" tabindex="-1"><code>androidx.compose.runtime:runtime</code> のマルチプラットフォームターゲット <a class="header-anchor" href="#androidx-compose-runtime-runtime-のマルチプラットフォームターゲット" aria-label="Permalink to &quot;\`androidx.compose.runtime:runtime\` のマルチプラットフォームターゲット&quot;">​</a></h3><p>Compose Multiplatform と Jetpack Compose の整合性を向上させるため、すべてのターゲットを <code>androidx.compose.runtime:runtime</code> アーティファクトに直接サポートを追加しました。</p><p><code>org.jetbrains.compose.runtime:runtime</code> アーティファクトは引き続き完全に互換性があり、エイリアスとして機能します。</p><h3 id="suspend-ラムダを持つ-runcomposeuitest" tabindex="-1"><code>suspend</code> ラムダを持つ <code>runComposeUiTest()</code> <a class="header-anchor" href="#suspend-ラムダを持つ-runcomposeuitest" aria-label="Permalink to &quot;\`suspend\` ラムダを持つ \`runComposeUiTest()\`&quot;">​</a></h3><p><code>runComposeUiTest()</code> 関数は <code>suspend</code> ラムダを受け入れるようになり、<code>awaitIdle()</code> などのサスペンド関数を使用できるようになりました。</p><p>新しい API は、ウェブ環境での適切な非同期処理を含め、サポートされているすべてのプラットフォームで正しいテスト実行を保証します。</p><ul><li>JVM およびネイティブターゲットの場合、<code>runComposeUiTest()</code> は <code>runBlocking()</code> と同様に機能しますが、遅延をスキップします。</li><li>ウェブターゲット (Wasm および JS) の場合、<code>Promise</code> を返し、遅延をスキップしてテスト本体を実行します。</li></ul><h2 id="ios" tabindex="-1">iOS <a class="header-anchor" href="#ios" aria-label="Permalink to &quot;iOS&quot;">​</a></h2><h3 id="フレームレート設定" tabindex="-1">フレームレート設定 <a class="header-anchor" href="#フレームレート設定" aria-label="Permalink to &quot;フレームレート設定&quot;">​</a></h3><p>Compose Multiplatform for iOS は、コンポーザブルをレンダリングするための優先フレームレートの設定をサポートするようになりました。アニメーションがカクつく場合は、フレームレートを上げることを検討してください。一方、アニメーションが遅いまたは静止している場合は、電力消費を減らすために低いフレームレートで実行することを好むかもしれません。</p><p>優先フレームレートカテゴリは次のように設定できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Modifier.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">preferredFrameRate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(FrameRateCategory.High)</span></span></code></pre></div><p>または、コンポーザブルに特定のフレームレートが必要な場合は、非負の数値を使用して 1 秒あたりのフレーム数で優先フレームレートを定義できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Modifier.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">preferredFrameRate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="web" tabindex="-1">Web <a class="header-anchor" href="#web" aria-label="Permalink to &quot;Web&quot;">​</a></h2><h3 id="アクセシビリティサポート" tabindex="-1">アクセシビリティサポート <a class="header-anchor" href="#アクセシビリティサポート" aria-label="Permalink to &quot;アクセシビリティサポート&quot;">​</a></h3><p>Compose Multiplatform は、ウェブターゲットに対する初期のアクセシビリティサポートを提供するようになりました。このバージョンでは、スクリーンリーダーが説明ラベルにアクセスできるようになり、ユーザーはアクセシブルナビゲーションモードでボタンをナビゲートしてクリックできるようになります。</p><p>このバージョンでは、以下の機能はまだサポートされていません。</p><ul><li>スクロールとスライダーを持つ相互運用およびコンテナビューのアクセシビリティ。</li><li>トラバーサルインデックス。</li></ul><p>コンポーネントの<a href="./compose-accessibility#semantic-properties">セマンティックプロパティ</a>を定義して、コンポーネントのテキスト説明、機能タイプ、現在の状態、または一意の識別子など、さまざまな詳細をアクセシビリティサービスに提供できます。</p><p>たとえば、コンポーザブルに <code>Modifier.semantics { heading() }</code> を設定することで、この要素がドキュメント内の章やサブセクションのタイトルと同様に、見出しとして機能することをアクセシビリティサービスに通知します。スクリーンリーダーはこの情報をコンテンツナビゲーションに利用し、ユーザーが見出し間を直接移動できるようになります。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;This is heading&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    modifier </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Modifier.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">semantics</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">heading</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>アクセシビリティサポートはデフォルトで有効になっていますが、<code>isA11YEnabled</code> を調整することでいつでも無効にできます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ComposeViewport</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    viewportContainer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.body</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    configure </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { isA11YEnabled </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, Compose Multiplatform for web&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="html-コンテンツ埋め込み用の新しい-api" tabindex="-1">HTML コンテンツ埋め込み用の新しい API <a class="header-anchor" href="#html-コンテンツ埋め込み用の新しい-api" aria-label="Permalink to &quot;HTML コンテンツ埋め込み用の新しい API&quot;">​</a></h3><p>新しい <code>WebElementView()</code> コンポーザブル関数を使用すると、HTML 要素をウェブアプリケーションにシームレスに統合できます。</p><p>埋め込み HTML 要素は、Compose コードで定義されたサイズに基づいてキャンバス領域をオーバーレイします。この領域内の入力イベントをインターセプトし、それらのイベントが Compose Multiplatform によって受信されるのを防ぎます。</p><p>以下は、<code>WebElementView()</code> を使用して、Compose アプリケーション内にインタラクティブな地図ビューを表示する HTML 要素を作成および埋め込む例です。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ttOSM </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;https://www.openstreetmap.org/export/embed.html?bbox=4.890965223312379%2C52.33722052818563%2C4.893990755081177%2C52.33860862450587&amp;amp;layer=mapnik&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Composable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Box</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        modifier </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Modifier.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fillMaxWidth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fillMaxHeight</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        WebElementView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            factory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                (document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;iframe&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                        as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HTMLIFrameElement)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { src </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ttOSM }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            modifier </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Modifier.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fillMaxSize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            update </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { iframe </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> iframe.src </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> iframe.src }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>この関数は <code>ComposeViewport</code> エントリポイントでのみ使用できます。<code>CanvasBasedWindow</code> は非推奨です。</p><h3 id="コンテキストメニュー" tabindex="-1">コンテキストメニュー <a class="header-anchor" href="#コンテキストメニュー" aria-label="Permalink to &quot;コンテキストメニュー&quot;">​</a></h3><p>Compose Multiplatform 1.9.0-beta03 は、ウェブコンテキストメニューに関して以下の更新をもたらします。</p><ul><li><p>テキストコンテキストメニュー: 標準の Compose テキストコンテキストメニューが、モバイルモードとデスクトップモードの両方で完全にサポートされるようになりました。</p></li><li><p>新しいカスタマイズ可能なコンテキストメニュー: カスタムウェブコンテキストメニュー用の Jetpack Compose の新しい API を採用しました。 今のところ、デスクトップモードでのみ利用可能です。</p><p>この新しい API を有効にするには、アプリケーションのエントリポイントで次の設定を使用します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ComposeFoundationFlags.isNewContextMenuEnabled </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span></code></pre></div></li></ul><h3 id="ナビゲーショングラフへのバインディングのための簡易化された-api" tabindex="-1">ナビゲーショングラフへのバインディングのための簡易化された API <a class="header-anchor" href="#ナビゲーショングラフへのバインディングのための簡易化された-api" aria-label="Permalink to &quot;ナビゲーショングラフへのバインディングのための簡易化された API&quot;">​</a></h3><p>Compose Multiplatform は、ブラウザのナビゲーション状態を <code>NavController</code> にバインドするための新しい API を導入しました。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">suspend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NavController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bindToBrowserNavigation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>新しい関数は <code>window</code> API と直接対話する必要性を排除し、Kotlin/Wasm と Kotlin/JS の両方のソースセットを簡素化します。</p><p>以前使用されていた <code>Window.bindToNavigation()</code> 関数は、新しい <code>NavController.bindToBrowserNavigation()</code> 関数に有利なように非推奨になりました。</p><p>変更前:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LaunchedEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Unit) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Directly interacts with the window object</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bindToNavigation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(navController)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>変更後:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LaunchedEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Unit) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Implicitly accesses the window object</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    navController.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bindToBrowserNavigation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="gradle-plugin" tabindex="-1">Gradle plugin <a class="header-anchor" href="#gradle-plugin" aria-label="Permalink to &quot;Gradle plugin&quot;">​</a></h2><h3 id="material3-のバージョン管理の分離" tabindex="-1">Material3 のバージョン管理の分離 <a class="header-anchor" href="#material3-のバージョン管理の分離" aria-label="Permalink to &quot;Material3 のバージョン管理の分離&quot;">​</a></h3><p>Material3 ライブラリと Compose Multiplatform Gradle プラグインのバージョンと安定性レベルを合わせる必要がなくなりました。<code>compose.material3</code> DSL エイリアスは、以前の Jetpack Compose の安定版リリースからの Material3 1.8.2 を参照するようになりました。</p><p>Expressive デザインサポート付きのより新しい Material3 バージョンを使用したい場合は、<code>build.gradle.kts</code> の Material 3 依存関係を以下に置き換えてください。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.compose.material3:material3:1.9.0-alpha04&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div>`,47))])}const M=k(g,[["render",u]]);export{w as __pageData,M as default};
