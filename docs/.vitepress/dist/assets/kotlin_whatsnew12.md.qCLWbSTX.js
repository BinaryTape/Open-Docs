import{_ as i,c as a,o as n,ag as t}from"./chunks/framework.Bksy39di.js";const d=JSON.parse('{"title":"Kotlin 1.2 新特性","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/whatsnew12.md","filePath":"kotlin/whatsnew12.md","lastUpdated":1754307826000}'),l={name:"kotlin/whatsnew12.md"};function h(k,s,e,r,p,o){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="kotlin-1-2-新特性" tabindex="-1">Kotlin 1.2 新特性 <a class="header-anchor" href="#kotlin-1-2-新特性" aria-label="Permalink to &quot;Kotlin 1.2 新特性&quot;">​</a></h1><p><em>发布日期：2017 年 11 月 28 日</em></p><h2 id="目录" tabindex="-1">目录 <a class="header-anchor" href="#目录" aria-label="Permalink to &quot;目录&quot;">​</a></h2><ul><li><a href="#multiplatform-projects-experimental">多平台项目</a></li><li><a href="#other-language-features">其他语言特性</a></li><li><a href="#standard-library">标准库</a></li><li><a href="#jvm-backend">JVM 后端</a></li><li><a href="#javascript-backend">JavaScript 后端</a></li></ul><h2 id="多平台项目-实验性的" tabindex="-1">多平台项目 (实验性的) <a class="header-anchor" href="#多平台项目-实验性的" aria-label="Permalink to &quot;多平台项目 (实验性的)&quot;">​</a></h2><p>多平台项目是 Kotlin 1.2 中一项新的<strong>实验性的</strong>特性，它允许你在 Kotlin 支持的<strong>目标平台</strong>（JVM、JavaScript 和（未来会支持的）Native）之间复用代码。在多平台项目中，你有三种类型的模块：</p><ul><li><em>公共</em>模块包含不特定于任何平台的代码，以及没有实现依赖于平台的 API 的<strong>声明</strong>。</li><li><em>平台</em>模块包含<strong>公共模块</strong>中依赖于平台的<strong>声明</strong>针对特定平台的实现，以及其他依赖于平台的代码。</li><li>常规模块<strong>面向</strong>特定平台，可以作为平台模块的<strong>依赖项</strong>，也可以依赖于平台模块。</li></ul><p>当你针对特定平台<strong>编译</strong>多平台项目时，<strong>公共模块</strong>和<strong>平台特有</strong>部分的代码都会生成。</p><p>多平台项目支持的一个关键<strong>特性</strong>是，能够通过 <em>expected</em> 和 <em>actual</em> <strong>声明</strong>来表达<strong>公共代码</strong>对<strong>平台特有</strong>部分的<strong>依赖项</strong>。<em>expected</em> <strong>声明</strong>指定了一个 API（<strong>类</strong>、<strong>接口</strong>、<strong>注解</strong>、<strong>顶层****声明</strong>等）。<em>actual</em> <strong>声明</strong>要么是 API 的依赖于平台的实现，要么是引用外部库中 API 现有实现的类型别名。以下是一个<strong>示例</strong>：</p><p>在<strong>公共代码</strong>中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 预期的平台特有 API:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> hello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(world: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 预期的 API 用法：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> greeting </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> hello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;multiplatform world&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(greeting)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> URL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(spec: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    open</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getHost</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    open</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getPath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在 JVM 平台<strong>代码</strong>中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> hello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(world: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;Hello, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$world</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">, on the JVM platform!&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用现有平台特有实现：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typealias</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> URL</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.net.URL</span></span></code></pre></div><p>关于详细信息和<strong>构建</strong>多平台项目的<strong>步骤</strong>，请参见<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/get-started.html" target="_blank" rel="noreferrer">多平台编程<strong>文档</strong></a>。</p><h2 id="其他语言特性" tabindex="-1">其他语言特性 <a class="header-anchor" href="#其他语言特性" aria-label="Permalink to &quot;其他语言特性&quot;">​</a></h2><h3 id="注解中的数组字面值" tabindex="-1"><strong>注解</strong>中的<strong>数组</strong>字面值 <a class="header-anchor" href="#注解中的数组字面值" aria-label="Permalink to &quot;**注解**中的**数组**字面值&quot;">​</a></h3><p>从 Kotlin 1.2 开始，<strong>注解</strong>的<strong>数组****实参</strong>可以通过新的<strong>数组</strong>字面值语法传递，而不是使用 <code>arrayOf</code> <strong>函数</strong>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@CacheConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cacheNames </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;books&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;default&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BookRepositoryImpl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>数组</strong>字面值语法受限于<strong>注解****实参</strong>。</p><h3 id="lateinit-顶层属性和局部变量" tabindex="-1">lateinit 顶层属性和局部变量 <a class="header-anchor" href="#lateinit-顶层属性和局部变量" aria-label="Permalink to &quot;lateinit 顶层属性和局部变量&quot;">​</a></h3><p>现在，<code>lateinit</code> 修饰符可以用于<strong>顶层</strong>属性和局部变量。<strong>例如</strong>，后者可以用于当作为<strong>构造函数****实参</strong>传递给一个<strong>对象</strong>的 lambda <strong>表达式</strong>引用必须在之后<strong>定义</strong>的另一个<strong>对象</strong>时：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> next: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Node</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 三个节点循环：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    lateinit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> third: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> second </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, next </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { third })</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> first </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, next </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { second })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    third </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, next </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { first })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nodes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> generateSequence</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(first) { it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">next</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Values in the cycle: \${nodes.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">take</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">joinToString</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> { it.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">() }}, ...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="检测-lateinit-变量是否已初始化" tabindex="-1"><strong>检测</strong> lateinit 变量是否已初始化 <a class="header-anchor" href="#检测-lateinit-变量是否已初始化" aria-label="Permalink to &quot;**检测** lateinit 变量是否已初始化&quot;">​</a></h3><p>现在，你可以使用属性引用上的 <code>isInitialized</code> <strong>检测</strong> lateinit 变量是否已初始化：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    lateinit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lateinitVar: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> initializationLogic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;isInitialized before assignment: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lateinitVar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.isInitialized)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        lateinitVar </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;value&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;isInitialized after assignment: &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lateinitVar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.isInitialized)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">initializationLogic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="带默认函数形参的内联函数" tabindex="-1">带<strong>默认</strong>函数形参的内联<strong>函数</strong> <a class="header-anchor" href="#带默认函数形参的内联函数" aria-label="Permalink to &quot;带**默认**函数形参的内联**函数**&quot;">​</a></h3><p>现在内联<strong>函数</strong>允许为其内联的<strong>函数****形参</strong>设置<strong>默认值</strong>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">inline</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">E</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Iterable</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">E</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">strings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(transform: (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">E</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) -&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(it) }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> defaultStrings </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">strings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> customStrings </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">strings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$it</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;defaultStrings = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$defaultStrings</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;customStrings = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$customStrings</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="显式-类型转换的信息用于类型推断" tabindex="-1"><strong>显式****类型转换</strong>的信息用于<strong>类型推断</strong> <a class="header-anchor" href="#显式-类型转换的信息用于类型推断" aria-label="Permalink to &quot;**显式****类型转换**的信息用于**类型推断**&quot;">​</a></h3><p>Kotlin <strong>编译器</strong>现在可以在<strong>类型推断</strong>中使用<strong>类型转换</strong>中的信息。如果你正在调用一个返回类型<strong>形参</strong> <code>T</code> 的泛型<strong>方法</strong>，并将返回值<strong>类型转换</strong>为特定<strong>类型</strong> <code>Foo</code>，那么<strong>编译器</strong>现在<strong>理解</strong>此调用中的 <code>T</code> 需要绑定到<strong>类型</strong> <code>Foo</code> 上。</p><p>这对于 Android <strong>开发者</strong>尤其重要，因为<strong>编译器</strong>现在可以正确<strong>分析</strong> Android API 级别 26 中的泛型 <code>findViewById</code> 调用：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> button </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> findViewById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(R.id.button) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Button</span></span></code></pre></div><h3 id="智能类型转换改进" tabindex="-1">智能<strong>类型转换</strong>改进 <a class="header-anchor" href="#智能类型转换改进" aria-label="Permalink to &quot;智能**类型转换**改进&quot;">​</a></h3><p>当变量从安全调用表达式<strong>赋值</strong>并<strong>检测</strong>是否为 null 时，智能<strong>类型转换</strong>现在也会应用于安全调用<strong>接收者</strong>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> countFirst</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(s: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> firstChar </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? CharSequence)?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">firstOrNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (firstChar </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> firstChar } </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// s: Any 被智能类型转换到 CharSequence</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> firstItem </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? Iterable</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;*&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">firstOrNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (firstItem </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">count</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> firstItem } </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// s: Any 被智能类型转换到 Iterable&lt;*&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> string </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;abacaba&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> countInString </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> countFirst</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(string)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;called on </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;$string\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$countInString</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> list </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> countInList </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> countFirst</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(list)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;called on </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$list</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$countInList</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>此外，现在 lambda <strong>表达式</strong>中的智能<strong>类型转换</strong>允许用于只在 lambda <strong>表达式</strong>之前被修改的局部变量：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> flag </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> args.size </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (flag) x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Yahoo!&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x.length) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// x 被智能类型转换到 String</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="支持-foo-作为-this-foo-的缩写" tabindex="-1">支持 <code>::foo</code> 作为 <code>this::foo</code> 的缩写 <a class="header-anchor" href="#支持-foo-作为-this-foo-的缩写" aria-label="Permalink to &quot;支持 \`::foo\` 作为 \`this::foo\` 的缩写&quot;">​</a></h3><p>现在，对 <code>this</code> 的<strong>成员</strong>的绑定可调用引用可以写成 <code>::foo</code> 而不是 <code>this::foo</code>，无需<strong>显式****接收者</strong>。这也使得在 lambda <strong>表达式</strong>中引用外部<strong>接收者</strong>的<strong>成员</strong>时，可调用引用使用起来更加方便。</p><h3 id="破坏性变更-try-代码块后的可靠智能类型转换" tabindex="-1"><strong>破坏性变更</strong>：try <strong>代码块</strong>后的<strong>可靠</strong>智能<strong>类型转换</strong> <a class="header-anchor" href="#破坏性变更-try-代码块后的可靠智能类型转换" aria-label="Permalink to &quot;**破坏性变更**：try **代码块**后的**可靠**智能**类型转换**&quot;">​</a></h3><p>之前，Kotlin 使用在 <code>try</code> <strong>代码块</strong>内部进行的<strong>赋值</strong>用于<strong>代码块</strong>之后的智能<strong>类型转换</strong>，这可能会破坏<strong>类型安全</strong>和<strong>空安全</strong>并导致<strong>运行时****失败</strong>。此<strong>版本****修复</strong>了此<strong>问题</strong>，使得智能<strong>类型转换</strong>更严格，但会破坏一些依赖于此类智能<strong>类型转换</strong>的代码。</p><p>要切换到旧的智能<strong>类型转换****行为</strong>，请将回退<strong>标志</strong> <code>-Xlegacy-smart-cast-after-try</code> 作为<strong>编译器****实参</strong>传递。它将在 Kotlin 1.3 中被<strong>弃用</strong>。</p><h3 id="弃用-数据类覆盖-copy" tabindex="-1"><strong>弃用</strong>：<strong>数据类</strong>覆盖 copy <a class="header-anchor" href="#弃用-数据类覆盖-copy" aria-label="Permalink to &quot;**弃用**：**数据类**覆盖 copy&quot;">​</a></h3><p>当<strong>数据类</strong>派生自一个已经拥有同名<strong>同签名</strong> <code>copy</code> <strong>函数</strong>的<strong>类型</strong>时，为该<strong>数据类</strong>生成的 <code>copy</code> 实现会使用<strong>超类</strong>中的<strong>默认值</strong>，这会导致<strong>反直觉</strong>的<strong>行为</strong>，或者在<strong>超类</strong>中没有<strong>默认****形参</strong>时在<strong>运行时****失败</strong>。</p><p>导致 <code>copy</code> <strong>冲突</strong>的<strong>继承</strong>在 Kotlin 1.2 中已发出<strong>警告</strong>并被<strong>弃用</strong>，在 Kotlin 1.3 中将成为<strong>错误</strong>。</p><h3 id="弃用-枚举项中的嵌套类型" tabindex="-1"><strong>弃用</strong>：<strong>枚举项</strong>中的<strong>嵌套类型</strong> <a class="header-anchor" href="#弃用-枚举项中的嵌套类型" aria-label="Permalink to &quot;**弃用**：**枚举项**中的**嵌套类型**&quot;">​</a></h3><p>在<strong>枚举项</strong>内部，<strong>定义</strong>非 <code>inner class</code> 的<strong>嵌套类型</strong>因初始化逻辑中的<strong>问题</strong>已被<strong>弃用</strong>。这会在 Kotlin 1.2 中导致<strong>警告</strong>，并在 Kotlin 1.3 中成为<strong>错误</strong>。</p><h3 id="弃用-vararg-的单一命名实参" tabindex="-1"><strong>弃用</strong>：vararg 的单一命名<strong>实参</strong> <a class="header-anchor" href="#弃用-vararg-的单一命名实参" aria-label="Permalink to &quot;**弃用**：vararg 的单一命名**实参**&quot;">​</a></h3><p>为了与<strong>注解</strong>中的<strong>数组</strong>字面值保持一致，以命名形式 (<code>foo(items = i)</code>) 为 vararg <strong>形参</strong>传递单个<strong>项</strong>已被<strong>弃用</strong>。请使用展开<strong>操作符</strong>和相应的<strong>数组****工厂函数</strong>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(items </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">arrayOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><p>存在一项<strong>优化</strong>，可以消除此类<strong>情况</strong>下冗余的<strong>数组****创建</strong>，从而防止<strong>性能下降</strong>。单<strong>实参</strong>形式在 Kotlin 1.2 中会产生<strong>警告</strong>，并将在 Kotlin 1.3 中被<strong>移除</strong>。</p><h3 id="弃用-继承-throwable-的泛型类的内部类" tabindex="-1"><strong>弃用</strong>：<strong>继承</strong> Throwable 的泛型<strong>类</strong>的<strong>内部类</strong> <a class="header-anchor" href="#弃用-继承-throwable-的泛型类的内部类" aria-label="Permalink to &quot;**弃用**：**继承** Throwable 的泛型**类**的**内部类**&quot;">​</a></h3><p><strong>继承</strong>自 <code>Throwable</code> 的泛型<strong>类型</strong>的<strong>内部类</strong>可能在 throw-catch <strong>场景</strong>中违反<strong>类型安全</strong>，因此已被<strong>弃用</strong>，在 Kotlin 1.2 中发出<strong>警告</strong>，并在 Kotlin 1.3 中成为<strong>错误</strong>。</p><h3 id="弃用-修改-只读属性的幕后字段" tabindex="-1"><strong>弃用</strong>：<strong>修改****只读属性</strong>的<strong>幕后字段</strong> <a class="header-anchor" href="#弃用-修改-只读属性的幕后字段" aria-label="Permalink to &quot;**弃用**：**修改****只读属性**的**幕后字段**&quot;">​</a></h3><p>在<strong>自定义</strong> <strong>getter</strong> 中通过<strong>赋值</strong> <code>field = ...</code> <strong>修改****只读属性</strong>的<strong>幕后字段</strong>已被<strong>弃用</strong>，在 Kotlin 1.2 中发出<strong>警告</strong>，并在 Kotlin 1.3 中成为<strong>错误</strong>。</p><h2 id="标准库" tabindex="-1">标准库 <a class="header-anchor" href="#标准库" aria-label="Permalink to &quot;标准库&quot;">​</a></h2><h3 id="kotlin-标准库-artifact-和拆分-包" tabindex="-1">Kotlin 标准库 artifact 和<strong>拆分****包</strong> <a class="header-anchor" href="#kotlin-标准库-artifact-和拆分-包" aria-label="Permalink to &quot;Kotlin 标准库 artifact 和**拆分****包**&quot;">​</a></h3><p>Kotlin 标准库现在与 Java 9 <strong>模块系统</strong>完全兼容，后者禁止<strong>拆分****包</strong>（多个 jar <strong>文件</strong>在同一个<strong>包</strong>中<strong>声明****类</strong>）。为了支持这一点，引入了新的 artifact <code>kotlin-stdlib-jdk7</code> 和 <code>kotlin-stdlib-jdk8</code>，它们<strong>替换</strong>了旧的 <code>kotlin-stdlib-jre7</code> 和 <code>kotlin-stdlib-jre8</code>。</p><p>从 Kotlin 的<strong>角度</strong>来看，新 artifact 中的<strong>声明</strong>在相同的<strong>包名</strong>下可见，但对于 Java 来说<strong>包名</strong>不同。因此，切换到新的 artifact 不会对你的<strong>源代码</strong>造成任何更改。</p><p>为了确保与新的<strong>模块系统</strong>兼容而进行的另一个更改是，从 <code>kotlin-reflect</code> <strong>库</strong>中移除了 <code>kotlin.reflect</code> <strong>包</strong>中已<strong>弃用</strong>的<strong>声明</strong>。如果你一直在使用它们，你需要切换到使用在 <code>kotlin.reflect.full</code> <strong>包</strong>中的<strong>声明</strong>，这在 Kotlin 1.1 中已得到支持。</p><h3 id="windowed-chunked-zipwithnext" tabindex="-1">windowed, chunked, zipWithNext <a class="header-anchor" href="#windowed-chunked-zipwithnext" aria-label="Permalink to &quot;windowed, chunked, zipWithNext&quot;">​</a></h3><p>针对 <code>Iterable&lt;T&gt;</code>、<code>Sequence&lt;T&gt;</code> 和 <code>CharSequence</code> 的新<strong>扩展</strong>涵盖了诸如<strong>缓冲</strong>或<strong>批处理</strong> (<code>chunked</code>)、<strong>滑动窗口</strong>和<strong>计算****滑动平均值</strong> (<code>windowed</code>) 以及处理连续<strong>项</strong>的<strong>对</strong> (<code>zipWithNext</code>) 之类的使用<strong>场景</strong>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> items </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> it }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> chunkedIntoLists </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> items.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">chunked</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> points3d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> items.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">chunked</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { (x, y, z) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Triple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x, y, z) }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> windowed </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> items.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">windowed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> slidingAverage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> items.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">windowed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">average</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pairwiseDifferences </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> items.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">zipWithNext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { a, b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;items: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$items</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;chunked into lists: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$chunkedIntoLists</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;3D points: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$points3d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;windowed by 4: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$windowed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sliding average by 4: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$slidingAverage</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;pairwise differences: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$pairwiseDifferences</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="fill-replaceall-shuffle-shuffled" tabindex="-1">fill, replaceAll, shuffle/shuffled <a class="header-anchor" href="#fill-replaceall-shuffle-shuffled" aria-label="Permalink to &quot;fill, replaceAll, shuffle/shuffled&quot;">​</a></h3><p>为<strong>操作</strong> <strong>list</strong> 添加了一组<strong>扩展****函数</strong>：针对 <code>MutableList</code> 的 <code>fill</code>、<code>replaceAll</code> 和 <code>shuffle</code>，以及针对<strong>只读</strong> <code>List</code> 的 <code>shuffled</code>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> items </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toMutableList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    items.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">shuffle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Shuffled items: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$items</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    items.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replaceAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Items doubled: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$items</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    items.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fill</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Items filled with 5: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$items</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="kotlin-stdlib-中的数学运算" tabindex="-1">kotlin-stdlib 中的<strong>数学运算</strong> <a class="header-anchor" href="#kotlin-stdlib-中的数学运算" aria-label="Permalink to &quot;kotlin-stdlib 中的**数学运算**&quot;">​</a></h3><p>为满足长期以来的<strong>请求</strong>，Kotlin 1.2 添加了对 JVM 和 JS 通用的用于<strong>数学运算</strong>的 <code>kotlin.math</code> API，并包含以下<strong>内容</strong>：</p><ul><li><strong>常量</strong>：<code>PI</code> 和 <code>E</code></li><li><strong>三角函数</strong>：<code>cos</code>、<code>sin</code>、<code>tan</code> 及其反函数：<code>acos</code>、<code>asin</code>、<code>atan</code>、<code>atan2</code></li><li><strong>双曲函数</strong>：<code>cosh</code>、<code>sinh</code>、<code>tanh</code> 及其反函数：<code>acosh</code>、<code>asinh</code>、<code>atanh</code></li><li><strong>指数运算</strong>：<code>pow</code>（<strong>扩展****函数</strong>）、<code>sqrt</code>、<code>hypot</code>、<code>exp</code>、<code>expm1</code></li><li><strong>对数</strong>：<code>log</code>、<code>log2</code>、<code>log10</code>、<code>ln</code>、<code>ln1p</code></li><li><strong>舍入</strong>： <ul><li><code>ceil</code>、<code>floor</code>、<code>truncate</code>、<code>round</code>（四舍五入到偶数）<strong>函数</strong></li><li><code>roundToInt</code>、<code>roundToLong</code>（四舍五入到整数）<strong>扩展****函数</strong></li></ul></li><li><strong>符号</strong>和<strong>绝对值</strong>： <ul><li><code>abs</code> 和 <code>sign</code> <strong>函数</strong></li><li><code>absoluteValue</code> 和 <code>sign</code> <strong>扩展</strong>属性</li><li><code>withSign</code> <strong>扩展****函数</strong></li></ul></li><li>两个<strong>值</strong>中的 <code>max</code> 和 <code>min</code></li><li><strong>二进制表示</strong>： <ul><li><code>ulp</code> <strong>扩展</strong>属性</li><li><code>nextUp</code>、<code>nextDown</code>、<code>nextTowards</code> <strong>扩展****函数</strong></li><li><code>toBits</code>、<code>toRawBits</code>、<code>Double.fromBits</code>（这些在 <code>kotlin</code> <strong>包</strong>中）</li></ul></li></ul><p>相同一组<strong>函数</strong>（但没有<strong>常量</strong>）也可用于 <code>Float</code> <strong>实参</strong>。</p><h3 id="biginteger-和-bigdecimal-的操作符和转换" tabindex="-1">BigInteger 和 BigDecimal 的<strong>操作符</strong>和<strong>转换</strong> <a class="header-anchor" href="#biginteger-和-bigdecimal-的操作符和转换" aria-label="Permalink to &quot;BigInteger 和 BigDecimal 的**操作符**和**转换**&quot;">​</a></h3><p>Kotlin 1.2 引入了一组<strong>函数</strong>，用于<strong>操作</strong> <code>BigInteger</code> 和 <code>BigDecimal</code> 并从其他数值<strong>类型创建</strong>它们。这些是：</p><ul><li>针对 <code>Int</code> 和 <code>Long</code> 的 <code>toBigInteger</code></li><li>针对 <code>Int</code>、<code>Long</code>、<code>Float</code>、<code>Double</code> 和 <code>BigInteger</code> 的 <code>toBigDecimal</code></li><li><strong>算术</strong>和<strong>位<strong><strong>操作符</strong></strong>函数</strong>： <ul><li><strong>二元操作符</strong> <code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>、<code>%</code> 和中缀<strong>函数</strong> <code>and</code>、<code>or</code>、<code>xor</code>、<code>shl</code>、<code>shr</code></li><li><strong>一元操作符</strong> <code>-</code>、<code>++</code>、<code>--</code> 和<strong>函数</strong> <code>inv</code></li></ul></li></ul><h3 id="浮点数到位的转换" tabindex="-1">浮点数到<strong>位</strong>的<strong>转换</strong> <a class="header-anchor" href="#浮点数到位的转换" aria-label="Permalink to &quot;浮点数到**位**的**转换**&quot;">​</a></h3><p>添加了新的<strong>函数</strong>，用于将 <code>Double</code> 和 <code>Float</code> <strong>转换</strong>为它们的<strong>位表示</strong>以及从它们的<strong>位表示****转换</strong>：</p><ul><li>针对 <code>Double</code> 返回 <code>Long</code>、针对 <code>Float</code> 返回 <code>Int</code> 的 <code>toBits</code> 和 <code>toRawBits</code></li><li>用于从<strong>位表示</strong>创建浮点数的 <code>Double.fromBits</code> 和 <code>Float.fromBits</code></li></ul><h3 id="regex-现在可序列化" tabindex="-1">Regex 现在可<strong>序列化</strong> <a class="header-anchor" href="#regex-现在可序列化" aria-label="Permalink to &quot;Regex 现在可**序列化**&quot;">​</a></h3><p><code>kotlin.text.Regex</code> <strong>类</strong>已变为 <code>Serializable</code>，现在可以在可<strong>序列化</strong>的<strong>层级</strong>结构中使用。</p><h3 id="closeable-use-在可用时调用-throwable-addsuppressed" tabindex="-1">Closeable.use 在可用时调用 Throwable.addSuppressed <a class="header-anchor" href="#closeable-use-在可用时调用-throwable-addsuppressed" aria-label="Permalink to &quot;Closeable.use 在可用时调用 Throwable.addSuppressed&quot;">​</a></h3><p>当在抛出<strong>其他异常</strong>后，<strong>关闭****资源</strong>时发生<strong>异常</strong>，<code>Closeable.use</code> <strong>函数</strong>会调用 <code>Throwable.addSuppressed</code>。</p><p>要启用此<strong>行为</strong>，你需要在你的<strong>依赖项</strong>中包含 <code>kotlin-stdlib-jdk7</code>。</p><h2 id="jvm-后端" tabindex="-1">JVM 后端 <a class="header-anchor" href="#jvm-后端" aria-label="Permalink to &quot;JVM 后端&quot;">​</a></h2><h3 id="构造函数调用规范化" tabindex="-1"><strong>构造函数</strong>调用<strong>规范化</strong> <a class="header-anchor" href="#构造函数调用规范化" aria-label="Permalink to &quot;**构造函数**调用**规范化**&quot;">​</a></h3><p>从<strong>版本</strong> 1.0 开始，Kotlin 支持包含<strong>复杂****控制流</strong>的表达式，<strong>例如</strong> try-catch 表达式和内联<strong>函数</strong>调用。此类<strong>代码</strong>根据 Java 虚拟机<strong>规范</strong>是<strong>有效</strong>的。不幸的是，一些<strong>字节码</strong>处理<strong>工具</strong>在<strong>构造函数</strong>调用的<strong>实参</strong>中存在此类表达式时，处理<strong>得</strong>不<strong>太好</strong>。</p><p>为了缓解此<strong>问题</strong>，对于此类<strong>字节码</strong>处理<strong>工具</strong>的<strong>用户</strong>，我们添加了一个<strong>命令行<strong><strong>编译器</strong></strong>选项</strong> (<code>-Xnormalize-constructor-calls=MODE</code>)，它告诉<strong>编译器</strong>为此类<strong>构造</strong>生成更像 Java 的<strong>字节码</strong>。这里 <code>MODE</code> 是以下之一：</p><ul><li><code>disable</code>（<strong>默认</strong>）– 以与 Kotlin 1.0 和 1.1 相同的方式生成<strong>字节码</strong>。</li><li><code>enable</code> – 为<strong>构造函数</strong>调用生成类似 Java 的<strong>字节码</strong>。这可能会改变<strong>类</strong>的<strong>加载</strong>和初始化顺序。</li><li><code>preserve-class-initialization</code> – 为<strong>构造函数</strong>调用生成类似 Java 的<strong>字节码</strong>，确保保留<strong>类</strong>的初始化顺序。这可能会影响<strong>应用程序</strong>的<strong>整体****性能</strong>；仅在你有一些在多个<strong>类</strong>之间<strong>共享</strong>并在<strong>类</strong>初始化时更新的<strong>复杂****状态</strong>时使用它。</li></ul><p>“手动”<strong>变通方法</strong>是将带有<strong>控制流</strong>的子表达式的<strong>值</strong>存储在变量中，而不是在调用<strong>实参</strong>中直接<strong>求值</strong>它们。它类似于 <code>-Xnormalize-constructor-calls=enable</code>。</p><h3 id="java-默认方法调用" tabindex="-1">Java <strong>默认方法</strong>调用 <a class="header-anchor" href="#java-默认方法调用" aria-label="Permalink to &quot;Java **默认方法**调用&quot;">​</a></h3><p>在 Kotlin 1.2 之前，<strong>接口****成员</strong>在<strong>覆盖</strong> Java <strong>默认方法</strong>同时<strong>面向</strong> JVM 1.6 <strong>目标平台</strong>时，在 super 调用上会产生<strong>警告</strong>：<code>Super calls to Java default methods are deprecated in JVM target 1.6. Recompile with &#39;-jvm-target 1.8&#39;</code>。在 Kotlin 1.2 中，现在是<strong>错误</strong>，因此要求所有此类<strong>代码</strong>都使用 JVM <strong>目标平台</strong> 1.8 进行<strong>编译</strong>。</p><h3 id="破坏性变更-平台类型的-x-equals-null-的行为一致性" tabindex="-1"><strong>破坏性变更</strong>：<strong>平台类型</strong>的 x.equals(null) 的<strong>行为</strong>一致性 <a class="header-anchor" href="#破坏性变更-平台类型的-x-equals-null-的行为一致性" aria-label="Permalink to &quot;**破坏性变更**：**平台类型**的 x.equals(null) 的**行为**一致性&quot;">​</a></h3><p>对映射到 Java <strong>原生类型</strong>的<strong>平台类型</strong>（<code>Int!</code>, <code>Boolean!</code>, <code>Short</code>!, <code>Long!</code>, <code>Float!</code>, <code>Double!</code>, <code>Char!</code>) 调用 <code>x.equals(null)</code> 时，当 <code>x</code> 为 null 时错误地返回 <code>true</code>。从 Kotlin 1.2 开始，对<strong>平台类型</strong>的 null <strong>值</strong>调用 <code>x.equals(...)</code> <strong>会抛出</strong>一个 NPE（但 <code>x == ...</code> 不会）。</p><p>要回到 1.2 之前的<strong>行为</strong>，请将<strong>标志</strong> <code>-Xno-exception-on-explicit-equals-for-boxed-null</code> 传递给<strong>编译器</strong>。</p><h3 id="破坏性变更-修复平台-null-通过内联扩展接收者逸出的问题" tabindex="-1"><strong>破坏性变更</strong>：<strong>修复</strong>平台 null 通过内联<strong>扩展<strong><strong>接收者</strong></strong>逸出</strong>的<strong>问题</strong> <a class="header-anchor" href="#破坏性变更-修复平台-null-通过内联扩展接收者逸出的问题" aria-label="Permalink to &quot;**破坏性变更**：**修复**平台 null 通过内联**扩展****接收者****逸出**的**问题**&quot;">​</a></h3><p>在<strong>平台类型</strong>的 null <strong>值</strong>上调用时，内联<strong>扩展****函数</strong>没有<strong>检测****接收者</strong>是否为 null，因此允许 null <strong>逸出</strong>到<strong>其他****代码</strong>中。Kotlin 1.2 在调用<strong>位置</strong>强制进行此<strong>检测</strong>，如果<strong>接收者</strong>为 null 则<strong>抛出异常</strong>。</p><p>要切换到旧的<strong>行为</strong>，请将回退<strong>标志</strong> <code>-Xno-receiver-assertions</code> 传递给<strong>编译器</strong>。</p><h2 id="javascript-后端" tabindex="-1">JavaScript 后端 <a class="header-anchor" href="#javascript-后端" aria-label="Permalink to &quot;JavaScript 后端&quot;">​</a></h2><h3 id="typedarrays-支持-默认启用" tabindex="-1">TypedArrays <strong>支持****默认</strong>启用 <a class="header-anchor" href="#typedarrays-支持-默认启用" aria-label="Permalink to &quot;TypedArrays **支持****默认**启用&quot;">​</a></h3><p>JS <strong>类型化<strong><strong>数组</strong></strong>支持</strong>，它将 Kotlin <strong>原生类型****数组</strong>（<strong>例如</strong> <code>IntArray</code>、<code>DoubleArray</code>）<strong>转换</strong>为 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays" target="_blank" rel="noreferrer">JavaScript <strong>类型化****数组</strong></a>，这项之前是<strong>选择性****特性</strong>的<strong>功能</strong>已<strong>默认</strong>启用。</p><h2 id="工具" tabindex="-1"><strong>工具</strong> <a class="header-anchor" href="#工具" aria-label="Permalink to &quot;**工具**&quot;">​</a></h2><h3 id="警告视为错误" tabindex="-1"><strong>警告</strong>视为<strong>错误</strong> <a class="header-anchor" href="#警告视为错误" aria-label="Permalink to &quot;**警告**视为**错误**&quot;">​</a></h3><p><strong>编译器</strong>现在提供一个<strong>选项</strong>，可以将所有<strong>警告</strong>视为<strong>错误</strong>。在<strong>命令行</strong>中使用 <code>-Werror</code>，或使用以下 Gradle <strong>代码片段</strong>：</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compileKotlin {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    kotlinOptions</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">allWarningsAsErrors </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,102)]))}const E=i(l,[["render",h]]);export{d as __pageData,E as default};
