import{_ as o,a as k,b as d}from"./chunks/published_on_maven_central.BgjvbPaZ.js";import{_ as c,C as t,c as g,o as E,ag as n,G as e,j as s,w as l,a as i}from"./chunks/framework.Bksy39di.js";const A=JSON.parse('{"title":"ライブラリをMaven Centralに公開する – チュートリアル","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kmp/multiplatform-publish-libraries.md","filePath":"ja/kmp/multiplatform-publish-libraries.md","lastUpdated":1755516278000}'),u={name:"ja/kmp/multiplatform-publish-libraries.md"};function y(b,a,m,F,C,v){const p=t("TabItem"),r=t("Tabs"),h=t("shortcut");return E(),g("div",null,[a[8]||(a[8]=n('<h1 id="ライブラリをmaven-centralに公開する-–-チュートリアル" tabindex="-1">ライブラリをMaven Centralに公開する – チュートリアル <a class="header-anchor" href="#ライブラリをmaven-centralに公開する-–-チュートリアル" aria-label="Permalink to &quot;ライブラリをMaven Centralに公開する – チュートリアル&quot;">​</a></h1><p>このチュートリアルでは、Kotlin Multiplatformライブラリを<a href="https://central.sonatype.com/" target="_blank" rel="noreferrer">Maven Central</a>リポジトリに公開する方法を学習します。</p><p>ライブラリを公開するには、次の作業が必要です。</p><ol><li>Maven Centralのアカウントや署名用のPGP鍵など、クレデンシャルを設定する。</li><li>ライブラリのプロジェクトで公開プラグインを設定する。</li><li>公開プラグインにクレデンシャルを提供し、アーティファクトを署名してアップロードできるようにする。</li><li>ローカルまたは継続的インテグレーションを使用して、公開タスクを実行する。</li></ol><p>このチュートリアルは、以下の前提条件を満たしていることを想定しています。</p><ul><li>オープンソースライブラリを作成している。</li><li>ライブラリのコードをGitHubリポジトリに保存している。</li><li>macOSまたはLinuxを使用している。Windowsユーザーの場合は、<a href="https://gnupg.org/download" target="_blank" rel="noreferrer">GnuPGまたはGpg4win</a>を使用して鍵ペアを生成してください。</li><li>Maven Centralにまだ登録していないか、<a href="https://central.sonatype.org/publish-ea/publish-ea-guide/" target="_blank" rel="noreferrer">Central Portalへの公開</a>に適した既存のアカウント（2024年3月12日以降に作成された、またはサポートによってCentral Portalに移行されたもの）を所有している。</li><li>継続的インテグレーションにGitHub Actionsを使用している。</li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>ここでの手順のほとんどは、異なるセットアップを使用している場合でも適用できますが、考慮すべきいくつかの違いがある場合があります。 <a href="./multiplatform-publish-lib-setup#host-requirements">重要な制約</a>は、AppleターゲットはmacOSを搭載したマシンでビルドする必要があることです。</p></div><h2 id="サンプルライブラリ" tabindex="-1">サンプルライブラリ <a class="header-anchor" href="#サンプルライブラリ" aria-label="Permalink to &quot;サンプルライブラリ&quot;">​</a></h2><p>このチュートリアルでは、例として<a href="https://github.com/Kotlin/multiplatform-library-template/" target="_blank" rel="noreferrer">fibonacci</a>ライブラリを使用します。 このリポジトリのコードを参照して、公開設定がどのように機能するかを確認できます。</p><p>コードを再利用したい場合は、<strong>すべての例の値を</strong>プロジェクト固有の値に<strong>置き換える</strong>必要があります。</p><h2 id="アカウントとクレデンシャルの準備" tabindex="-1">アカウントとクレデンシャルの準備 <a class="header-anchor" href="#アカウントとクレデンシャルの準備" aria-label="Permalink to &quot;アカウントとクレデンシャルの準備&quot;">​</a></h2><p>Maven Centralへの公開を開始するには、<a href="https://central.sonatype.com/" target="_blank" rel="noreferrer">Maven Central</a>ポータルにサインイン（または新しいアカウントを作成）します。</p><h3 id="ネームスペースの選択と検証" tabindex="-1">ネームスペースの選択と検証 <a class="header-anchor" href="#ネームスペースの選択と検証" aria-label="Permalink to &quot;ネームスペースの選択と検証&quot;">​</a></h3><p>Maven Centralでライブラリのアーティファクトを一意に識別するには、検証済みのネームスペースが必要です。</p><p>Mavenアーティファクトは、その<a href="https://central.sonatype.org/publish/requirements/#correct-coordinates" target="_blank" rel="noreferrer">座標</a>によって識別されます。例えば、<code>com.example:fibonacci-library:1.0.0</code>です。これらの座標は、コロンで区切られた3つの部分で構成されています。</p><ul><li><code>groupId</code>: リバースDNS形式。例えば、<code>com.example</code></li><li><code>artifactId</code>: ライブラリ自体の一意の名前。例えば、<code>fibonacci-library</code></li><li><code>version</code>: バージョン文字列。例えば、<code>1.0.0</code>。バージョンは任意の文字列ですが、<code>-SNAPSHOT</code>で終わることはできません。</li></ul><p>登録済みのネームスペースを使用すると、Maven Centralでの<code>groupId</code>の形式を設定できます。例えば、<code>com.example</code>ネームスペースを登録した場合、<code>groupId</code>を<code>com.example</code>、<code>com.example.libraryname</code>、<code>com.example.module.feature</code>などに設定してアーティファクトを公開できます。</p><p>Maven Centralにサインインしたら、<a href="https://central.sonatype.com/publishing/namespaces" target="_blank" rel="noreferrer">Namespaces</a>ページに移動します。 次に、<strong>Add Namespace</strong>ボタンをクリックしてネームスペースを登録します。</p>',18)),e(r,null,{default:l(()=>[e(p,{id:"github",title:"GitHubリポジトリを使用する場合"},{default:l(()=>a[0]||(a[0]=[s("p",null,"GitHubアカウントを使用してネームスペースを作成することは、ドメイン名を所有していない場合に良い選択肢です。",-1),s("ol",null,[s("li",null,[i("ネームスペースとして"),s("code",null,"io.github.<あなたのユーザー名>"),i("を入力します（例: "),s("code",null,"io.github.kotlinhandson"),i("）。"),s("strong",null,"Submit"),i("をクリックします。")]),s("li",null,[i("新しく作成されたネームスペースの下に表示される"),s("strong",null,"Verification Key"),i("をコピーします。")]),s("li",null,[i("GitHubで、使用したユーザー名でログインし、検証キーをリポジトリ名とする新しい公開リポジトリを作成します（例: "),s("code",null,"http://github.com/kotlin-hands-on/ex4mpl3c0d"),i("）。")]),s("li",null,[i("Maven Centralに戻り、"),s("strong",null,"Verify Namespace"),i("ボタンをクリックします。検証が成功したら、作成したリポジトリを削除できます。")])],-1)])),_:1}),e(p,{id:"domain",title:"ドメイン名を使用する場合"},{default:l(()=>a[1]||(a[1]=[s("p",null,"所有するドメイン名をネームスペースとして使用するには:",-1),s("ol",null,[s("li",null,[s("p",null,[i("ドメインをリバースDNS形式でネームスペースとして入力します。ドメインが"),s("code",null,"example.com"),i("の場合、"),s("code",null,"com.example"),i("と入力します。")])]),s("li",null,[s("p",null,[i("表示された"),s("strong",null,"Verification Key"),i("をコピーします。")])]),s("li",null,[s("p",null,"検証キーを内容とする新しいTXT DNSレコードを作成します。"),s("p",null,[i("さまざまなドメイン登録業者での設定方法については、"),s("a",{href:"https://central.sonatype.org/faq/how-to-set-txt-record/",target:"_blank",rel:"noreferrer"},"Maven CentralのFAQ"),i("を参照してください。")])]),s("li",null,[s("p",null,[i("Maven Centralに戻り、"),s("strong",null,"Verify Namespace"),i("ボタンをクリックします。検証が成功したら、作成したTXTレコードを削除できます。")])])],-1)])),_:1})]),_:1}),a[9]||(a[9]=n('<h4 id="鍵ペアを生成する" tabindex="-1">鍵ペアを生成する <a class="header-anchor" href="#鍵ペアを生成する" aria-label="Permalink to &quot;鍵ペアを生成する&quot;">​</a></h4><p>Maven Centralに何かを公開する前に、アーティファクトを<a href="https://central.sonatype.org/publish/requirements/gpg/" target="_blank" rel="noreferrer">PGP署名</a>で署名する必要があります。これにより、ユーザーはアーティファクトの出所を検証できます。</p><p>署名を開始するには、鍵ペアを生成する必要があります。</p><ul><li>_秘密鍵_はアーティファクトの署名に使用され、他者と決して共有してはなりません。</li><li>_公開鍵_は他者と共有できるため、彼らはアーティファクトの署名を検証できます。</li></ul><p>署名を管理できる<code>gpg</code>ツールは、<a href="https://gnupg.org/download/index.html" target="_blank" rel="noreferrer">GnuPGウェブサイト</a>で入手できます。 <a href="https://brew.sh/" target="_blank" rel="noreferrer">Homebrew</a>などのパッケージマネージャーを使用してインストールすることもできます。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">brew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gpg</span></span></code></pre></div>',6)),s("ol",null,[a[6]||(a[6]=n('<li><p>次のコマンドを使用して鍵ペアの生成を開始し、プロンプトが表示されたら必要な詳細情報を提供します。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gpg</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --full-generate-key</span></span></code></pre></div></li>',1)),s("li",null,[s("p",null,[a[3]||(a[3]=i("作成する鍵の種類の推奨デフォルトを選択します。 選択を空のまま")),e(h,null,{default:l(()=>a[2]||(a[2]=[i("Enter")])),_:1}),a[4]||(a[4]=i("を押して、デフォルト値を受け入れることができます。"))]),a[5]||(a[5]=n(`<div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Please select what kind of key you want:</span></span>
<span class="line"><span>    (1) RSA and RSA</span></span>
<span class="line"><span>    (2) DSA and Elgamal</span></span>
<span class="line"><span>    (3) DSA (sign only)</span></span>
<span class="line"><span>    (4) RSA (sign only)</span></span>
<span class="line"><span>    (9) ECC (sign and encrypt) *default*</span></span>
<span class="line"><span>    (10) ECC (sign only)</span></span>
<span class="line"><span>    (14) Existing key from card</span></span>
<span class="line"><span>Your selection? 9</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Please select which elliptic curve you want:</span></span>
<span class="line"><span>    (1) Curve 25519 *default*</span></span>
<span class="line"><span>    (4) NIST P-384</span></span>
<span class="line"><span>    (6) Brainpool P-256</span></span>
<span class="line"><span>Your selection? 1</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>本稿執筆時点では、これは<code>Curve 25519</code>を使用した<code>ECC (sign and encrypt)</code>です。 古いバージョンの<code>gpg</code>では、<code>3072</code>ビットの鍵サイズを持つ<code>RSA</code>がデフォルトになる場合があります。</p></div>`,2))]),a[7]||(a[7]=n(`<li><p>鍵の有効期間を指定するよう求められたら、有効期限なしのデフォルトオプションを選択できます。</p><p>設定された期間後に自動的に期限切れになる鍵を作成することを選択した場合、期限切れになったときに<a href="https://central.sonatype.org/publish/requirements/gpg/#dealing-with-expired-keys" target="_blank" rel="noreferrer">その有効性を延長する</a>必要があります。</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Please specify how long the key should be valid.</span></span>
<span class="line"><span>    0 = key does not expire</span></span>
<span class="line"><span>    &lt;n&gt;  = key expires in n days</span></span>
<span class="line"><span>    &lt;n&gt;w = key expires in n weeks</span></span>
<span class="line"><span>    &lt;n&gt;m = key expires in n months</span></span>
<span class="line"><span>    &lt;n&gt;y = key expires in n years</span></span>
<span class="line"><span>Key is valid for? (0) 0</span></span>
<span class="line"><span>Key does not expire at all</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Is this correct? (y/N) y</span></span></code></pre></div></li><li><p>名前、メールアドレス、および鍵をIDに関連付けるためのオプションのコメントを入力します（コメントフィールドは空のままで構いません）。</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>GnuPG needs to construct a user ID to identify your key.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Real name: Jane Doe</span></span>
<span class="line"><span>Email address: janedoe@example.com</span></span>
<span class="line"><span>Comment:</span></span>
<span class="line"><span>You selected this USER-ID:</span></span>
<span class="line"><span>    &quot;Jane Doe &lt;janedoe@example.com&gt;&quot;</span></span></code></pre></div></li><li><p>鍵を暗号化するためのパスフレーズを入力し、プロンプトが表示されたらそれを繰り返します。</p><p>このパスフレーズは安全かつプライベートに保管してください。後でアーティファクトに署名する際に秘密鍵にアクセスするために必要になります。</p></li><li><p>次のコマンドを使用して、作成した鍵を確認します。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gpg</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --list-keys</span></span></code></pre></div></li>`,4))]),a[10]||(a[10]=n(`<p>出力は次のようになります。</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pub   ed25519 2024-10-06 [SC]</span></span>
<span class="line"><span>      F175482952A225BFD4A07A713EE6B5F76620B385CE</span></span>
<span class="line"><span>uid   [ultimate] Jane Doe &lt;janedoe@example.com&gt;</span></span>
<span class="line"><span>      sub   cv25519 2024-10-06 [E]</span></span></code></pre></div><p>次の手順では、出力に表示される鍵の長い英数字の識別子を使用する必要があります。</p><h4 id="公開鍵をアップロードする" tabindex="-1">公開鍵をアップロードする <a class="header-anchor" href="#公開鍵をアップロードする" aria-label="Permalink to &quot;公開鍵をアップロードする&quot;">​</a></h4><p>Maven Centralに承認されるためには、<a href="https://central.sonatype.org/publish/requirements/gpg/#distributing-your-public-key" target="_blank" rel="noreferrer">公開鍵をキーサーバーにアップロードする</a>必要があります。利用可能なキーサーバーは複数ありますが、ここではデフォルトの選択として<code>keyserver.ubuntu.com</code>を使用します。</p><p><code>gpg</code>を使用して公開鍵をアップロードするには、次のコマンドを実行します。パラメーター内の<strong>自身の鍵IDを置き換えて</strong>ください。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gpg</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --keyserver</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> keyserver.ubuntu.com</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --send-keys</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> F175482952A225BFC4A07A715EE6B5F76620B385CE</span></span></code></pre></div><h4 id="秘密鍵をエクスポートする" tabindex="-1">秘密鍵をエクスポートする <a class="header-anchor" href="#秘密鍵をエクスポートする" aria-label="Permalink to &quot;秘密鍵をエクスポートする&quot;">​</a></h4><p>Gradleプロジェクトから秘密鍵にアクセスできるようにするには、秘密鍵をバイナリファイルにエクスポートする必要があります。 鍵を作成した際に使用したパスフレーズを入力するよう求められます。</p><p>次のコマンドを使用し、<strong>自身の鍵IDをパラメーターとして渡して</strong>ください。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gpg</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --no-armor</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --export-secret-keys</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> F175482952A225BFC4A07A715EE6B5F76620B385CE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> key.gpg</span></span></code></pre></div><p>このコマンドは、秘密鍵を含む<code>key.gpg</code>バイナリファイルを作成します（プレーンテキストバージョンのみを作成する<code>--armor</code>フラグを<strong>使用しない</strong>ようにしてください）。</p><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>秘密鍵ファイルは誰とも共有しないでください。秘密鍵はあなたのクレデンシャルでファイルに署名することを可能にするため、あなただけがアクセスできるべきです。</p></div><h2 id="プロジェクトを設定する" tabindex="-1">プロジェクトを設定する <a class="header-anchor" href="#プロジェクトを設定する" aria-label="Permalink to &quot;プロジェクトを設定する&quot;">​</a></h2><h3 id="ライブラリプロジェクトを準備する" tabindex="-1">ライブラリプロジェクトを準備する <a class="header-anchor" href="#ライブラリプロジェクトを準備する" aria-label="Permalink to &quot;ライブラリプロジェクトを準備する&quot;">​</a></h3><p>テンプレートプロジェクトからライブラリの開発を開始した場合、プロジェクト内のデフォルトの名前をすべて、自身のライブラリの名前に合わせる良い機会です。これには、ライブラリモジュールの名前や、トップレベルの<code>build.gradle.kts</code>ファイル内のルートプロジェクトの名前が含まれます。</p><p>プロジェクトにAndroidターゲットがある場合は、<a href="https://developer.android.com/build/publish-library/prep-lib-release" target="_blank" rel="noreferrer">Androidライブラリリリースを準備するための手順</a>に従う必要があります。 最低限、このプロセスでは、リソースがコンパイルされる際に一意の<code>R</code>クラスが生成されるように、ライブラリの<a href="https://developer.android.com/build/publish-library/prep-lib-release#choose-namespace" target="_blank" rel="noreferrer">適切なネームスペースを指定する</a>必要があります。 このネームスペースは、<a href="#choose-and-verify-a-namespace">先に作成した</a>Mavenネームスペースとは異なることに注意してください。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">android</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    namespace </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;io.github.kotlinhandson.fibonacci&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="公開プラグインを設定する" tabindex="-1">公開プラグインを設定する <a class="header-anchor" href="#公開プラグインを設定する" aria-label="Permalink to &quot;公開プラグインを設定する&quot;">​</a></h3><p>このチュートリアルでは、Maven Centralへの公開を支援するために<a href="https://github.com/vanniktech/gradle-maven-publish-plugin" target="_blank" rel="noreferrer">vanniktech/gradle-maven-publish-plugin</a>を使用します。 プラグインの利点については<a href="https://vanniktech.github.io/gradle-maven-publish-plugin/#advantages-over-maven-publish" target="_blank" rel="noreferrer">こちら</a>をご覧ください。 使用法や利用可能な設定オプションについては、<a href="https://vanniktech.github.io/gradle-maven-publish-plugin/central/" target="_blank" rel="noreferrer">プラグインのドキュメント</a>を参照してください。</p><p>プロジェクトにプラグインを追加するには、ライブラリモジュールの<code>build.gradle.kts</code>ファイルの<code>plugins {}</code>ブロックに次の行を追加します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &lt;module directory&gt;/build.gradle.kts</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;com.vanniktech.maven.publish&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) version </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0.30.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>プラグインの最新の利用可能なバージョンについては、<a href="https://github.com/vanniktech/gradle-maven-publish-plugin/releases" target="_blank" rel="noreferrer">リリース</a>ページを確認してください。</p></div><p>同じファイルに、すべての値をライブラリに合わせてカスタマイズするように、次の設定を追加します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &lt;module directory&gt;/build.gradle.kts</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mavenPublishing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    publishToMavenCentral</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(SonatypeHost.CENTRAL_PORTAL)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    signAllPublications</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    coordinates</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(group.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;fibonacci&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, version.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    pom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Fibonacci library&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        description </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;A mathematics calculation library.&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        inceptionYear </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;2024&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        url </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://github.com/kotlin-hands-on/fibonacci/&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        licenses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            license</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;The Apache License, Version 2.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                url </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://www.apache.org/licenses/LICENSE-2.0.txt&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                distribution </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://www.apache.org/licenses/LICENSE-2.0.txt&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        developers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            developer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;kotlin-hands-on&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Kotlin Developer Advocate&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                url </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://github.com/kotlin-hands-on/&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        scm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            url </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://github.com/kotlin-hands-on/fibonacci/&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            connection </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;scm:git:git://github.com/kotlin-hands-on/fibonacci.git&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            developerConnection </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;scm:git:ssh://git@github.com/kotlin-hands-on/fibonacci.git&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>これを設定するには、<a href="https://docs.gradle.org/current/userguide/build_environment.html" target="_blank" rel="noreferrer">Gradle properties</a>を使用することもできます。</p></div><p>ここで最も重要な設定は次のとおりです。</p><ul><li>ライブラリの<code>groupId</code>、<code>artifactId</code>、および<code>version</code>を指定する<code>coordinates</code>。</li><li>ライブラリが公開される<a href="https://central.sonatype.org/publish/requirements/#license-information" target="_blank" rel="noreferrer">ライセンス</a>。</li><li>ライブラリの作者を一覧表示する<a href="https://central.sonatype.org/publish/requirements/#developer-information" target="_blank" rel="noreferrer">開発者情報</a>。</li><li>ライブラリのソースコードがホストされている場所を指定する<a href="https://central.sonatype.org/publish/requirements/#scm-information" target="_blank" rel="noreferrer">SCM（ソースコード管理）情報</a>。</li></ul><h2 id="継続的インテグレーションを使用してmaven-centralに公開する" tabindex="-1">継続的インテグレーションを使用してMaven Centralに公開する <a class="header-anchor" href="#継続的インテグレーションを使用してmaven-centralに公開する" aria-label="Permalink to &quot;継続的インテグレーションを使用してMaven Centralに公開する&quot;">​</a></h2><h3 id="ユーザー生成トークン" tabindex="-1">ユーザー生成トークン <a class="header-anchor" href="#ユーザー生成トークン" aria-label="Permalink to &quot;ユーザー生成トークン&quot;">​</a></h3><p>Maven Centralが公開リクエストを認証するために、Mavenアクセストークンが必要です。 <a href="https://central.sonatype.com/account" target="_blank" rel="noreferrer">Setup Token-Based Authentication</a>ページを開き、<strong>Generate User Token</strong>ボタンをクリックします。</p><p>出力は次の例のようになり、ユーザー名とパスワードが含まれています。 これらのクレデンシャルを紛失した場合、Maven Centralによって保存されないため、後で新しいものを生成する必要があります。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;\${server}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">username</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;l2nfaPmz&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">username</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">password</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;gh9jT9XfnGtUngWTZwTu/8141keYdmQpipqLPRKeDLTh&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">password</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="githubにシークレットを追加する" tabindex="-1">GitHubにシークレットを追加する <a class="header-anchor" href="#githubにシークレットを追加する" aria-label="Permalink to &quot;GitHubにシークレットを追加する&quot;">​</a></h3><p>公開に必要な鍵とクレデンシャルをGitHub Actionsワークフローで使用し、それらをプライベートに保つには、これらの値をシークレットとして保存する必要があります。</p><ol><li><p>GitHubリポジトリの<strong>Settings</strong>ページで、<strong>Security</strong> | <strong>Secrets and variables</strong> | <strong>Actions</strong>をクリックします。</p></li><li><p><code>New repository secret</code>ボタンをクリックし、次のシークレットを追加します。</p><ul><li><code>MAVEN_CENTRAL_USERNAME</code>と<code>MAVEN_CENTRAL_PASSWORD</code>は、Central Portalウェブサイトで<a href="#generate-the-user-token">ユーザー生成トークン用に生成された</a>値です。</li><li><code>SIGNING_KEY_ID</code>は、署名鍵の識別子の<strong>最後の8文字</strong>です。例えば、<code>F175482952A225BFC4A07A715EE6B5F76620B385CE</code>の場合は<code>20B385CE</code>です。</li><li><code>SIGNING_PASSWORD</code>は、GPG鍵を生成した際に提供したパスフレーズです。</li><li><code>GPG_KEY_CONTENTS</code>には、<a href="#export-your-private-key"><code>key.gpg</code>ファイル</a>の全内容を含める必要があります。</li></ul><p><img src="`+o+`" alt="GitHubにシークレットを追加" width="700"></p></li></ol><p>これらのシークレットの名前は、次のステップでCI設定に使用します。</p><h3 id="プロジェクトにgithub-actionsワークフローを追加する" tabindex="-1">プロジェクトにGitHub Actionsワークフローを追加する <a class="header-anchor" href="#プロジェクトにgithub-actionsワークフローを追加する" aria-label="Permalink to &quot;プロジェクトにGitHub Actionsワークフローを追加する&quot;">​</a></h3><p>ライブラリを自動的にビルドして公開するために、継続的インテグレーションを設定できます。 ここでは例として<a href="https://docs.github.com/en/actions" target="_blank" rel="noreferrer">GitHub Actions</a>を使用します。</p><p>開始するには、<code>.github/workflows/publish.yml</code>ファイルに次のワークフローをリポジトリに追加します。</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># .github/workflows/publish.yml</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Publish</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  release</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    types</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">released</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">prereleased</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">jobs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  publish</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Release build and publish</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    runs-on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">macOS-latest</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    steps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Check out code</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        uses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">actions/checkout@v4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Set up JDK 21</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        uses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">actions/setup-java@v4</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          distribution</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;zulu&#39;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          java-version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">21</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Publish to MavenCentral</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">./gradlew publishToMavenCentral --no-configuration-cache</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          ORG_GRADLE_PROJECT_mavenCentralUsername</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${{ secrets.MAVEN_CENTRAL_USERNAME }}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          ORG_GRADLE_PROJECT_mavenCentralPassword</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${{ secrets.MAVEN_CENTRAL_PASSWORD }}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          ORG_GRADLE_PROJECT_signingInMemoryKeyId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${{ secrets.SIGNING_KEY_ID }}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          ORG_GRADLE_PROJECT_signingInMemoryKeyPassword</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${{ secrets.SIGNING_PASSWORD }}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          ORG_GRADLE_PROJECT_signingInMemoryKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${{ secrets.GPG_KEY_CONTENTS }}</span></span></code></pre></div><p>このファイルをコミットしてプッシュすると、プロジェクトをホストするGitHubリポジトリでリリース（プレリリースを含む）を作成するたびに、ワークフローが自動的に実行されます。ワークフローは現在のコードバージョンをチェックアウトし、JDKをセットアップしてから、<code>publishToMavenCentral</code> Gradleタスクを実行します。</p><p><code>publishToMavenCentral</code>タスクを使用する場合でも、Maven Centralウェブサイトでデプロイメントを<a href="#create-a-release-on-github">手動で確認してリリースする</a>必要があります。あるいは、<code>publishAndReleaseToMavenCentral</code>タスクを使用すると、リリースプロセスを完全に自動化できます。</p><p>また、ワークフローを、タグがリポジトリにプッシュされたときに<a href="https://stackoverflow.com/a/61892639" target="_blank" rel="noreferrer">トリガーする</a>ように設定することもできます。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>上記のスクリプトは、公開プラグインが設定キャッシュをサポートしていないため（この<a href="https://github.com/gradle/gradle/issues/22779" target="_blank" rel="noreferrer">オープンな課題</a>を参照）、Gradleコマンドに<code>--no-configuration-cache</code>を追加することで、公開タスクのGradleの<a href="https://docs.gradle.org/current/userguide/configuration_cache.html" target="_blank" rel="noreferrer">設定キャッシュ</a>を無効にしています。</p></div><p>このアクションには、<a href="#add-secrets-to-github">リポジトリシークレット</a>として作成した署名の詳細とMaven Centralクレデンシャルが必要です。</p><p>ワークフロー設定はこれらのシークレットを自動的に環境変数に転送し、Gradleビルドプロセスで利用可能にします。</p><h3 id="githubでリリースを作成する" tabindex="-1">GitHubでリリースを作成する <a class="header-anchor" href="#githubでリリースを作成する" aria-label="Permalink to &quot;GitHubでリリースを作成する&quot;">​</a></h3><p>ワークフローとシークレットの設定が完了したら、ライブラリの公開をトリガーする<a href="https://docs.github.com/en/repositories/releasing-projects-on-github/managing-releases-in-a-repository#creating-a-release" target="_blank" rel="noreferrer">リリースを作成する</a>準備が整いました。</p><ol><li><p>ライブラリの<code>build.gradle.kts</code>ファイルで指定されているバージョン番号が、公開したいものであることを確認します。</p></li><li><p>GitHubリポジトリのメインページに移動します。</p></li><li><p>右側のサイドバーで、<strong>Releases</strong>をクリックします。</p></li><li><p><strong>Draft a new release</strong>ボタン（または、このリポジトリでまだリリースを作成していない場合は<strong>Create a new release</strong>ボタン）をクリックします。</p></li><li><p>各リリースにはタグがあります。タグのドロップダウンで新しいタグを作成し、リリースタイトルを設定します（タグ名とタイトルは同一で構いません）。</p><p>これらは、<code>build.gradle.kts</code>ファイルで指定したライブラリのバージョン番号と同じにしたいでしょう。</p><p><img src="`+k+'" alt="GitHubでリリースを作成" width="700"></p></li><li><p>リリース対象とするブランチを再確認し（特にデフォルトブランチではない場合）、新しいバージョンに適したリリースノートを追加します。</p></li><li><p>説明の下にあるチェックボックスを使用して、リリースをプレリリースとしてマークします（アルファ、ベータ、RCなどの早期アクセスバージョンに役立ちます）。</p><p>また、リリースを最新としてマークすることもできます（このリポジトリで以前にリリースを作成したことがある場合）。</p></li><li><p><strong>Publish release</strong>ボタンをクリックして、新しいリリースを作成します。</p></li><li><p>GitHubリポジトリページの上部にある<strong>Actions</strong>タブをクリックします。ここで、新しいリリースが公開ワークフローをトリガーしたことがわかります。</p><p>ワークフローをクリックすると、公開タスクの出力を確認できます。</p></li><li><p>ワークフローの実行が完了したら、Maven Centralの<a href="https://central.sonatype.com/publishing/deployments" target="_blank" rel="noreferrer">Deployments</a>ダッシュボードに移動します。ここに新しいデプロイメントが表示されるはずです。</p><p>このデプロイメントは、Maven Centralがチェックを実行している間、しばらくの間_pending_または_validating_状態のままになる場合があります。</p></li><li><p>デプロイメントが_validated_状態になったら、アップロードしたすべてのアーティファクトが含まれていることを確認します。 すべてが正しいように見える場合は、<strong>Publish</strong>ボタンをクリックしてこれらのアーティファクトをリリースします。</p><p><img src="'+d+'" alt="公開設定" width="700"></p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>リリース後、アーティファクトがMaven Centralリポジトリで公開に利用可能になるまでには時間がかかります（通常15〜30分）。<a href="https://central.sonatype.com/" target="_blank" rel="noreferrer">Maven Centralウェブサイト</a>でインデックス化され、検索可能になるまでにはさらに時間がかかる場合があります。</p></div></li></ol><p>デプロイメントが検証されたらアーティファクトを自動的にリリースするには、ワークフロー内の<code>publishToMavenCentral</code>タスクを<code>publishAndReleaseToMavenCentral</code>に置き換えます。</p><h2 id="次のステップ" tabindex="-1">次のステップ <a class="header-anchor" href="#次のステップ" aria-label="Permalink to &quot;次のステップ&quot;">​</a></h2><ul><li><a href="./multiplatform-publish-lib-setup">マルチプラットフォームライブラリの公開設定と要件について詳しく学ぶ</a></li><li><a href="https://shields.io/badges/maven-central-version" target="_blank" rel="noreferrer">READMEにshield.ioバッジを追加する</a></li><li><a href="https://kotl.in/dokka" target="_blank" rel="noreferrer">Dokkaを使用してプロジェクトのAPIドキュメントを共有する</a></li><li><a href="https://docs.renovatebot.com/" target="_blank" rel="noreferrer">Renovateを追加して依存関係を自動的に更新する</a></li><li><a href="https://klibs.io/" target="_blank" rel="noreferrer">JetBrainsの検索プラットフォームでライブラリを宣伝する</a></li><li><a href="https://kotlinlang.slack.com/" target="_blank" rel="noreferrer">Kotlin Slackチャンネルの<code>#feed</code>でコミュニティとライブラリを共有する</a> （サインアップするには、<a href="https://kotl.in/slack%E3%81%AB%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E3%81%97%E3%81%A6%E3%81%8F%E3%81%A0%E3%81%95%E3%81%84%EF%BC%89" target="_blank" rel="noreferrer">https://kotl.in/slackにアクセスしてください）</a></li></ul>',53))])}const D=c(u,[["render",y]]);export{A as __pageData,D as default};
