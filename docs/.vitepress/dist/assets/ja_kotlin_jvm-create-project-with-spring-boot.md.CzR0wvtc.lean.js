import{_ as d}from"./chunks/icon-1.K8qzZaho.js";import{_ as g}from"./chunks/icon-2-todo.CF_tKCD9.js";import{_ as E}from"./chunks/icon-3-todo.Gx4op1du.js";import{_ as c}from"./chunks/icon-4-todo.GaeEmerm.js";import{_ as u,a as m,b as y,c as F,d as C}from"./chunks/spring-application-response.CubByq9P.js";import{_ as b,C as p,c as B,o as f,j as s,G as a,ag as e,a as i,w as l}from"./chunks/framework.Bksy39di.js";const J=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/jvm-create-project-with-spring-boot.md","filePath":"ja/kotlin/jvm-create-project-with-spring-boot.md","lastUpdated":1754307826000}'),A={name:"ja/kotlin/jvm-create-project-with-spring-boot.md"};function S(_,n,q,D,v,j){const r=p("web-summary"),k=p("tldr"),t=p("def"),o=p("deflist"),h=p("code-block");return f(),B("div",null,[n[14]||(n[14]=s("h1",{id:"kotlinでspring-bootプロジェクトを作成する",tabindex:"-1"},[i("KotlinでSpring Bootプロジェクトを作成する "),s("a",{class:"header-anchor",href:"#kotlinでspring-bootプロジェクトを作成する","aria-label":'Permalink to "KotlinでSpring Bootプロジェクトを作成する"'},"​")],-1)),a(r,null,{default:l(()=>n[0]||(n[0]=[i("IntelliJ IDEAを使用してKotlinでSpring Bootアプリケーションを作成します。")])),_:1}),a(k,null,{default:l(()=>n[1]||(n[1]=[s("p",null,[i("これは、"),s("strong",null,"Spring BootとKotlin入門"),i("チュートリアルの最初のパートです。")],-1),s("br",null,null,-1),s("p",null,[s("img",{src:d,width:"20",alt:"最初のステップ"}),i(),s("strong",null,"KotlinでSpring Bootプロジェクトを作成する"),s("br"),s("img",{src:g,width:"20",alt:"2番目のステップ"}),i(" Spring Bootプロジェクトにデータクラスを追加する"),s("br"),s("img",{src:E,width:"20",alt:"3番目のステップ"}),i(" Spring Bootプロジェクトのデータベースサポートを追加する"),s("br"),s("img",{src:c,width:"20",alt:"4番目のステップ"}),i(" データベースアクセスにSpring Data CrudRepositoryを使用する"),s("br")],-1)])),_:1}),n[15]||(n[15]=e("",24)),n[16]||(n[16]=s("h2",{"initial-collapse-state":"collapsed",collapsible:"true",id:"プロジェクトのgradleビルドファイルを確認する",tabindex:"-1"},[i("プロジェクトのGradleビルドファイルを確認する "),s("a",{class:"header-anchor",href:"#プロジェクトのgradleビルドファイルを確認する","aria-label":'Permalink to "プロジェクトのGradleビルドファイルを確認する {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),n[17]||(n[17]=e("",14)),a(o,{collapsible:"true"},{default:l(()=>[a(t,{title:"クラスの宣言 – class DemoApplication"},{default:l(()=>n[2]||(n[2]=[s("p",null,[i("パッケージ宣言とインポート文の直後に、最初のクラス宣言である"),s("code",null,"class DemoApplication"),i("が表示されます。")],-1),s("p",null,[i("Kotlinでは、クラスにメンバー（プロパティや関数）が含まれていない場合、クラス本体（"),s("code",null,"{}"),i("）を省略することができます。")],-1)])),_:1}),a(t,{title:"@SpringBootApplicationアノテーション"},{default:l(()=>n[3]||(n[3]=[s("p",null,[s("a",{href:"https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#using.using-the-springbootapplication-annotation"},[s("code",null,"@SpringBootApplicationアノテーション")]),i("は、Spring Bootアプリケーションの便利なアノテーションです。 Spring Bootの"),s("a",{href:"https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#using.auto-configuration"},"自動構成"),i("、"),s("a",{href:"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/ComponentScan.html"},"コンポーネントスキャン"),i("を有効にし、その「アプリケーションクラス」に追加の構成を定義できるようにします。 ")],-1)])),_:1}),a(t,{title:"プログラムのエントリポイント – main()"},{default:l(()=>n[4]||(n[4]=[s("p",null,[s("a",{href:"/ja/kotlin/basic-syntax#program-entry-point"},[s("code",null,"main()")]),i("関数は、アプリケーションのエントリポイントです。")],-1),s("p",null,[i("これは、"),s("code",null,"DemoApplication"),i("クラスの外で"),s("a",{href:"/ja/kotlin/functions#function-scope"},"トップレベル関数"),i("として宣言されています。"),s("code",null,"main()"),i("関数は、Springの"),s("code",null,"runApplication(*args)"),i("関数を呼び出して、Spring Frameworkでアプリケーションを起動します。")],-1)])),_:1}),a(t,{title:"可変引数 – args: Array<String>"},{default:l(()=>n[5]||(n[5]=[s("p",null,[s("code",null,"runApplication()"),i("関数の宣言を確認すると、関数のパラメータが"),s("a",{href:"/ja/kotlin/functions#variable-number-of-arguments-varargs"},[s("code",null,"vararg"),i("修飾子")]),i("でマークされていることがわかります。"),s("code",null,"vararg args: String"),i("です。 これは、関数に可変数の"),s("code",null,"String"),i("引数を渡すことができることを意味します。 ")],-1)])),_:1}),a(t,{title:"スプレッド演算子 – (*args)"},{default:l(()=>n[6]||(n[6]=[s("p",null,[s("code",null,"args"),i("は、"),s("code",null,"main()"),i("関数へのパラメータであり、"),s("code",null,"String"),i("の配列として宣言されています。 "),s("code",null,"String"),i("の配列があり、その内容を関数に渡したい場合は、スプレッド演算子（配列の前にアスタリスク"),s("code",null,"*"),i("を付ける）を使用します。 ")],-1)])),_:1})]),_:1}),n[18]||(n[18]=e("",4)),a(o,{collapsible:"true"},{default:l(()=>[a(t,{title:"@RestControllerアノテーション"},{default:l(()=>n[7]||(n[7]=[s("p",null,[s("code",null,"MessageController"),i("がRESTコントローラーであることをSpringに伝える必要があるため、"),s("code",null,"@RestController"),i("アノテーションでマークする必要があります。")],-1),s("p",null,[i("このアノテーションは、このクラスが"),s("code",null,"DemoApplication"),i("クラスと同じパッケージにあるため、コンポーネントスキャンによって取得されることを意味します。")],-1)])),_:1}),a(t,{title:"@GetMappingアノテーション"},{default:l(()=>[n[9]||(n[9]=s("p",null,[s("code",null,"@GetMapping"),i("は、HTTP GET呼び出しに対応するエンドポイントを実装するRESTコントローラーの関数をマークします。")],-1)),a(h,{lang:"kotlin"},{default:l(()=>n[8]||(n[8]=[i(' @GetMapping("/") fun index(@RequestParam("name") name: String) = "Hello, $name!" ')])),_:1})]),_:1}),a(t,{title:"@RequestParamアノテーション"},{default:l(()=>n[10]||(n[10]=[s("p",null,[i("関数パラメータ"),s("code",null,"name"),i("は"),s("code",null,"@RequestParam"),i("アノテーションでマークされています。このアノテーションは、メソッドパラメータがWebリクエストパラメータにバインドされるべきであることを示します。")],-1),s("p",null,[i("したがって、ルートでアプリケーションにアクセスし、"),s("code",null,"/?name=&lt;your-value&gt;"),i("のように「name」というリクエストパラメータを提供すると、そのパラメータ値が"),s("code",null,"index()"),i("関数を呼び出すための引数として使用されます。")],-1)])),_:1}),a(t,{title:"単一式関数 – index()"},{default:l(()=>n[11]||(n[11]=[s("p",null,[s("code",null,"index()"),i("関数には1つのステートメントしか含まれていないため、"),s("a",{href:"/ja/kotlin/functions#single-expression-functions"},"単一式関数"),i("として宣言できます。")],-1),s("p",null,[i("これは、中括弧を省略でき、本文が等号"),s("code",null,"="),i("の後に指定されることを意味します。")],-1)])),_:1}),a(t,{title:"関数の戻り値の型の型推論"},{default:l(()=>n[12]||(n[12]=[s("p",null,[s("code",null,"index()"),i("関数は、戻り値の型を明示的に宣言していません。代わりに、コンパイラは等号"),s("code",null,"="),i("の右側のステートメントの結果を見て、戻り値の型を推論します。")],-1),s("p",null,[s("code",null,"Hello, $name!"),i("式の型は"),s("code",null,"String"),i("であるため、関数の戻り値の型も"),s("code",null,"String"),i("です。")],-1)])),_:1}),a(t,{title:"文字列テンプレート – $name"},{default:l(()=>n[13]||(n[13]=[s("p",null,[s("code",null,"Hello, $name!"),i("式は、Kotlinでは"),s("a",{href:"/ja/kotlin/strings#string-templates"},[s("i",null,"文字列テンプレート")]),i("と呼ばれます。")],-1),s("p",null,"文字列テンプレートは、埋め込み式を含む文字列リテラルです。",-1),s("p",null,"これは、文字列連結操作の便利な代替手段です。",-1)])),_:1})]),_:1}),n[19]||(n[19]=e("",6))])}const R=b(A,[["render",S]]);export{J as __pageData,R as default};
