import{_ as r,C as l,c as o,o as d,ag as h,j as i,G as t,w as n,a}from"./chunks/framework.Bksy39di.js";const C=JSON.parse('{"title":"Kotlin 1.6.0 の新機能","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/whatsnew16.md","filePath":"ja/kotlin/whatsnew16.md","lastUpdated":1754307826000}'),E={name:"ja/kotlin/whatsnew16.md"};function g(c,s,y,F,u,b){const e=l("tab"),k=l("tabs"),p=l("YouTubeVideo");return d(),o("div",null,[s[6]||(s[6]=h(`<h1 id="kotlin-1-6-0-の新機能" tabindex="-1">Kotlin 1.6.0 の新機能 <a class="header-anchor" href="#kotlin-1-6-0-の新機能" aria-label="Permalink to &quot;Kotlin 1.6.0 の新機能&quot;">​</a></h1><p>公開日: 2021年11月16日](releases.md#release-details)</p><p>Kotlin 1.6.0 では、新しい言語機能、既存機能の最適化と改善、そしてKotlin標準ライブラリへの多数の改善が導入されています。</p><p>変更点の概要については、<a href="https://blog.jetbrains.com/kotlin/2021/11/kotlin-1-6-0-is-released/" target="_blank" rel="noreferrer">リリースブログ記事</a>でもご確認いただけます。</p><h2 id="言語" tabindex="-1">言語 <a class="header-anchor" href="#言語" aria-label="Permalink to &quot;言語&quot;">​</a></h2><p>Kotlin 1.6.0 では、前回の1.5.30リリースでプレビューとして導入されたいくつかの言語機能が安定化されました。</p><ul><li><a href="#stable-exhaustive-when-statements-for-enum-sealed-and-boolean-subjects">enum、sealed、Boolean を対象とする when ステートメントの安定化</a></li><li><a href="#stable-suspending-functions-as-supertypes">サスペンド関数をスーパークラスとして使用する機能の安定化</a></li><li><a href="#stable-suspending-functions-as-supertypes">サスペンド変換の安定化</a></li><li><a href="#stable-instantiation-of-annotation-classes">アノテーションクラスのインスタンス化の安定化</a></li></ul><p>また、さまざまな型推論の改善と、クラス型パラメータに対するアノテーションのサポートも含まれています。</p><ul><li><a href="#improved-type-inference-for-recursive-generic-types">再帰ジェネリック型の型推論の改善</a></li><li><a href="#changes-to-builder-inference">ビルダー推論の変更</a></li><li><a href="#support-for-annotations-on-class-type-parameters">クラス型パラメータに対するアノテーションのサポート</a></li></ul><h3 id="enum、sealed、boolean-を対象とする-when-ステートメントの安定化" tabindex="-1">enum、sealed、Boolean を対象とする when ステートメントの安定化 <a class="header-anchor" href="#enum、sealed、boolean-を対象とする-when-ステートメントの安定化" aria-label="Permalink to &quot;enum、sealed、Boolean を対象とする when ステートメントの安定化&quot;">​</a></h3><p><code>_exhaustive_</code> (網羅的な) <a href="/ja/kotlin/control-flow#when-expressions-and-statements"><code>when</code></a> ステートメントには、その対象のすべての可能な型または値、あるいは一部の型と <code>else</code> ブランチの分岐が含まれます。これにより、すべての可能なケースがカバーされ、コードの安全性が向上します。</p><p><code>when</code> 式との動作の一貫性を保つため、網羅的でない <code>when</code> ステートメントはまもなく禁止されます。スムーズな移行を確実にするため、Kotlin 1.6.0 では、enum、sealed、または Boolean を対象とする網羅的でない <code>when</code> ステートメントに対して警告を報告します。これらの警告は、将来のリリースではエラーになります。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">sealed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Contact</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PhoneCall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> number: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Contact</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TextMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> number: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Contact</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Contact</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">messageCost</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    when</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// エラー: &#39;when&#39; 式は網羅的である必要があります</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Contact.PhoneCall </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 42</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sendMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(contact: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Contact</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, message: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 1.6.0 から</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 警告: Boolean に対する網羅的でない &#39;when&#39; ステートメントは</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 1.7 で禁止されます。代わりに &#39;false&#39; ブランチまたは &#39;else&#39; ブランチを追加してください</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    when</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(message.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isEmpty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        true</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> return</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 警告: sealed クラス/インターフェースに対する網羅的でない &#39;when&#39; ステートメントは</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 1.7 で禁止されます。代わりに &#39;is TextMessage&#39; ブランチまたは &#39;else&#39; ブランチを追加してください</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    when</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(contact) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Contact.PhoneCall </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TODO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>この変更とその影響に関する詳細な説明については、<a href="https://youtrack.jetbrains.com/issue/KT-47709" target="_blank" rel="noreferrer">こちらの YouTrack チケット</a>を参照してください。</p><h3 id="サスペンド関数をスーパークラスとして使用する機能の安定化" tabindex="-1">サスペンド関数をスーパークラスとして使用する機能の安定化 <a class="header-anchor" href="#サスペンド関数をスーパークラスとして使用する機能の安定化" aria-label="Permalink to &quot;サスペンド関数をスーパークラスとして使用する機能の安定化&quot;">​</a></h3><p>サスペンド関数型の実装は、Kotlin 1.6.0 で<a href="/ja/kotlin/components-stability">安定化</a>されました。<a href="/ja/kotlin/whatsnew1530#suspending-functions-as-supertypes">1.5.30 でプレビュー</a>として利用可能でした。</p><p>この機能は、Kotlin コルーチンを使用し、サスペンド関数型を受け入れる API を設計する際に役立ちます。サスペンド関数型を実装する別のクラスに必要な動作をカプセル化することで、コードを簡素化できるようになりました。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyClickAction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">suspend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> suspend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> invoke</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TODO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> launchOnClick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(action: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">suspend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Unit) {}</span></span></code></pre></div><p>以前はラムダとサスペンド関数参照のみが許可されていた場所で、このクラスのインスタンスを使用できます: <code>launchOnClick(MyClickAction())</code>。</p><p>現在、実装の詳細に起因する2つの制限があります。</p><ul><li>スーパークラスのリストで通常の関数型とサスペンド関数型を混在させることはできません。</li><li>複数のサスペンド関数スーパークラスを使用することはできません。</li></ul><h3 id="サスペンド変換の安定化" tabindex="-1">サスペンド変換の安定化 <a class="header-anchor" href="#サスペンド変換の安定化" aria-label="Permalink to &quot;サスペンド変換の安定化&quot;">​</a></h3><p>Kotlin 1.6.0 では、通常の関数型からサスペンド関数型への<a href="/ja/kotlin/components-stability">安定版</a>変換が導入されました。1.4.0 から、この機能は関数リテラルと callable 参照をサポートしていました。1.6.0 からは、あらゆる形式の式で動作します。呼び出し引数として、サスペンド型が期待される場所に、適切な通常の関数型のあらゆる式を渡すことができるようになりました。コンパイラが自動的に暗黙的な変換を実行します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getSuspending</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(suspending: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">suspend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Unit) {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> suspending</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(regular: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Unit) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    getSuspending</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { }           </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// OK</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    getSuspending</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">suspending</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// OK</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    getSuspending</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(regular)      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// OK</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="アノテーションクラスのインスタンス化の安定化" tabindex="-1">アノテーションクラスのインスタンス化の安定化 <a class="header-anchor" href="#アノテーションクラスのインスタンス化の安定化" aria-label="Permalink to &quot;アノテーションクラスのインスタンス化の安定化&quot;">​</a></h3><p>Kotlin 1.5.30 では、JVM プラットフォームでのアノテーションクラスのインスタンス化の試験的なサポートが<a href="/ja/kotlin/whatsnew1530#instantiation-of-annotation-classes">導入されました</a>。1.6.0 からは、Kotlin/JVM と Kotlin/JS の両方でこの機能がデフォルトで利用可能です。</p><p>アノテーションクラスのインスタンス化の詳細については、<a href="https://github.com/Kotlin/KEEP/blob/master/proposals/annotation-instantiation.md" target="_blank" rel="noreferrer">この KEEP</a> を参照してください。</p><h3 id="再帰ジェネリック型の型推論の改善" tabindex="-1">再帰ジェネリック型の型推論の改善 <a class="header-anchor" href="#再帰ジェネリック型の型推論の改善" aria-label="Permalink to &quot;再帰ジェネリック型の型推論の改善&quot;">​</a></h3><p>Kotlin 1.5.30 では、再帰ジェネリック型に対する型推論の改善が導入され、対応する型パラメータの上限のみに基づいて型引数を推論できるようになりました。この改善はコンパイラオプションで利用可能でした。バージョン 1.6.0 以降では、デフォルトで有効になっています。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Before 1.5.30</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> containerA </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PostgreSQLContainer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(DockerImageName.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;postgres:13-alpine&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  withDatabaseName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;db&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  withUsername</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  withPassword</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;password&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  withInitScript</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sql/schema.sql&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// With compiler option in 1.5.30 or by default starting with 1.6.0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> containerB </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PostgreSQLContainer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(DockerImageName.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;postgres:13-alpine&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withDatabaseName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;db&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withUsername</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withPassword</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;password&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withInitScript</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sql/schema.sql&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="ビルダー推論の変更" tabindex="-1">ビルダー推論の変更 <a class="header-anchor" href="#ビルダー推論の変更" aria-label="Permalink to &quot;ビルダー推論の変更&quot;">​</a></h3><p>ビルダー推論は、ジェネリックビルダー関数を呼び出す際に役立つ型推論の一種です。ラムダ引数内の呼び出しからの型情報を使用して、呼び出しの型引数を推論できます。</p><p>完全な安定版ビルダー推論に近づくための複数の変更を行っています。1.6.0 からの変更点:</p><ul><li><p>ビルダーラムダ内でまだ推論されていない型のインスタンスを返す呼び出しを行う際に、<a href="/ja/kotlin/whatsnew1530#eliminating-builder-inference-restrictions">1.5.30 で導入された</a> <code>-Xunrestricted-builder-inference</code> コンパイラオプションを指定する必要がなくなりました。</p></li><li><p><code>-Xenable-builder-inference</code> を使用すると、<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-builder-inference/" target="_blank" rel="noreferrer"><code>@BuilderInference</code></a> アノテーションを適用せずに独自のビルダーを作成できます。</p><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>これらのビルダーのクライアントは、同じ <code>-Xenable-builder-inference</code> コンパイラオプションを指定する必要があることに注意してください。</p></div></li><li><p><code>-Xenable-builder-inference</code> を使用すると、通常の型推論が型に関する十分な情報を取得できない場合、ビルダー推論が自動的に有効になります。</p></li></ul><p><a href="/ja/kotlin/using-builders-with-builder-inference">カスタムジェネリックビルダーの作成方法</a>を学びましょう。</p><h3 id="クラス型パラメータに対するアノテーションのサポート" tabindex="-1">クラス型パラメータに対するアノテーションのサポート <a class="header-anchor" href="#クラス型パラメータに対するアノテーションのサポート" aria-label="Permalink to &quot;クラス型パラメータに対するアノテーションのサポート&quot;">​</a></h3><p>クラス型パラメータに対するアノテーションのサポートは次のようになります。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(AnnotationTarget.TYPE_PARAMETER)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">annotation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BoxContent</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Box</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BoxContent</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {}</span></span></code></pre></div><p>すべての型パラメータに対するアノテーションは JVM バイトコードに出力されるため、アノテーションプロセッサがそれらを使用できます。</p><p>その動機となるユースケースについては、<a href="https://youtrack.jetbrains.com/issue/KT-43714" target="_blank" rel="noreferrer">こちらの YouTrack チケット</a>を読んでください。</p><p><a href="/ja/kotlin/annotations">アノテーション</a>について詳しく学びましょう。</p><h2 id="以前の-api-バージョンをより長期間サポート" tabindex="-1">以前の API バージョンをより長期間サポート <a class="header-anchor" href="#以前の-api-バージョンをより長期間サポート" aria-label="Permalink to &quot;以前の API バージョンをより長期間サポート&quot;">​</a></h2><p>Kotlin 1.6.0 からは、現在の安定版に加えて、以前の API バージョン2つではなく3つ分の開発をサポートします。現在、バージョン 1.3、1.4、1.5、1.6 をサポートしています。</p><h2 id="kotlin-jvm" tabindex="-1">Kotlin/JVM <a class="header-anchor" href="#kotlin-jvm" aria-label="Permalink to &quot;Kotlin/JVM&quot;">​</a></h2><p>Kotlin/JVM では、1.6.0 からコンパイラが JVM 17 に対応するバイトコードバージョンのクラスを生成できるようになりました。新しい言語バージョンには、最適化された委譲プロパティと、ロードマップに記載されていた反復可能アノテーションも含まれています。</p><ul><li><a href="#repeatable-annotations-with-runtime-retention-for-1-8-jvm-target">1.8 JVM ターゲット向けランタイムリテンションの反復可能アノテーション</a></li><li><a href="#optimize-delegated-properties-which-call-get-set-on-the-given-kproperty-instance">指定された KProperty インスタンスで get/set を呼び出す委譲プロパティの最適化</a></li></ul><h3 id="_1-8-jvm-ターゲット向けランタイムリテンションの反復可能アノテーション" tabindex="-1">1.8 JVM ターゲット向けランタイムリテンションの反復可能アノテーション <a class="header-anchor" href="#_1-8-jvm-ターゲット向けランタイムリテンションの反復可能アノテーション" aria-label="Permalink to &quot;1.8 JVM ターゲット向けランタイムリテンションの反復可能アノテーション&quot;">​</a></h3><p>Java 8 では、単一のコード要素に複数回適用できる<a href="https://docs.oracle.com/javase/tutorial/java/annotations/repeating.html" target="_blank" rel="noreferrer">反復可能アノテーション</a>が導入されました。この機能には、Java コード内に2つの宣言が必要です: <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/annotation/Repeatable.html" target="_blank" rel="noreferrer"><code>@java.lang.annotation.Repeatable</code></a> でマークされた反復可能アノテーション自体と、その値を保持するためのコンテナアノテーションです。</p><p>Kotlin にも反復可能アノテーションがありますが、アノテーション宣言で<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.annotation/-repeatable/" target="_blank" rel="noreferrer"><code>@kotlin.annotation.Repeatable</code></a> が存在することのみを要求し、それにより反復可能になります。1.6.0 より前は、この機能は <code>SOURCE</code> リテンションのみをサポートしており、Java の反復可能アノテーションとは互換性がありませんでした。Kotlin 1.6.0 はこれらの制限を解除します。<code>@kotlin.annotation.Repeatable</code> はあらゆるリテンションを受け入れるようになり、Kotlin と Java の両方でアノテーションを反復可能にします。Java の反復可能アノテーションも、Kotlin 側からサポートされるようになりました。</p><p>コンテナアノテーションを宣言することもできますが、必須ではありません。例えば:</p><ul><li><p>アノテーション <code>@Tag</code> が <code>@kotlin.annotation.Repeatable</code> でマークされている場合、Kotlin コンパイラは <code>@Tag.Container</code> という名前でコンテナアノテーションクラスを自動的に生成します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Repeatable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">annotation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Tag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// The compiler generates @Tag.Container containing annotation</span></span></code></pre></div></li><li><p>コンテナアノテーションにカスタム名を指定するには、<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.jvm/-jvmrepeatable/" target="_blank" rel="noreferrer"><code>@kotlin.jvm.JvmRepeatable</code></a> メタアノテーションを適用し、明示的に宣言されたコンテナアノテーションクラスを引数として渡します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JvmRepeatable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Tags::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">annotation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Tag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">annotation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Tags</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Tag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;)</span></span></code></pre></div></li></ul><p>Kotlin のリフレクションは、新しい関数 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect.full/find-annotations.html" target="_blank" rel="noreferrer"><code>KAnnotatedElement.findAnnotations()</code></a> を介して、Kotlin と Java の両方の反復可能アノテーションをサポートするようになりました。</p><p>Kotlin の反復可能アノテーションの詳細については、<a href="https://github.com/Kotlin/KEEP/blob/master/proposals/repeatable-annotations.md" target="_blank" rel="noreferrer">この KEEP</a> を参照してください。</p><h3 id="指定された-kproperty-インスタンスで-get-set-を呼び出す委譲プロパティの最適化" tabindex="-1">指定された KProperty インスタンスで get/set を呼び出す委譲プロパティの最適化 <a class="header-anchor" href="#指定された-kproperty-インスタンスで-get-set-を呼び出す委譲プロパティの最適化" aria-label="Permalink to &quot;指定された KProperty インスタンスで get/set を呼び出す委譲プロパティの最適化&quot;">​</a></h3><p>生成される JVM バイトコードは、<code>$delegate</code> フィールドを省略し、参照されるプロパティへの即時アクセスを生成することで最適化されました。</p><p>例えば、以下のコードでは</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Box</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> impl: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> content: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">impl</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Kotlin はフィールド <code>content$delegate</code> を生成しなくなりました。<code>content</code> 変数のプロパティアクセサーは <code>impl</code> 変数を直接呼び出し、委譲プロパティの <code>getValue</code>/<code>setValue</code> 演算子をスキップするため、<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/-k-property/index.html" target="_blank" rel="noreferrer"><code>KProperty</code></a> 型のプロパティ参照オブジェクトは不要になります。</p><p>実装にご協力いただいた Google の同僚に感謝します！</p><p><a href="/ja/kotlin/delegated-properties">委譲プロパティ</a>について詳しく学びましょう。</p><h2 id="kotlin-native" tabindex="-1">Kotlin/Native <a class="header-anchor" href="#kotlin-native" aria-label="Permalink to &quot;Kotlin/Native&quot;">​</a></h2><p>Kotlin/Native は複数の改善とコンポーネントアップデートを受けており、その一部はプレビュー状態です。</p><ul><li><a href="#preview-of-the-new-memory-manager">新しいメモリマネージャーのプレビュー</a></li><li><a href="#support-for-xcode-13">Xcode 13 のサポート</a></li><li><a href="#compilation-of-windows-targets-on-any-host">あらゆるホストでの Windows ターゲットのコンパイル</a></li><li><a href="#llvm-and-linker-updates">LLVM とリンカーのアップデート</a></li><li><a href="#performance-improvements">パフォーマンスの改善</a></li><li><a href="#unified-compiler-plugin-abi-with-jvm-and-js-ir-backends">JVM および JS IR バックエンドとの統一されたコンパイラプラグイン ABI</a></li><li><a href="#detailed-error-messages-for-klib-linkage-failures">klib リンク失敗の詳細なエラーメッセージ</a></li><li><a href="#reworked-unhandled-exception-handling-api">未処理例外処理 API の再設計</a></li></ul><h3 id="新しいメモリマネージャーのプレビュー" tabindex="-1">新しいメモリマネージャーのプレビュー <a class="header-anchor" href="#新しいメモリマネージャーのプレビュー" aria-label="Permalink to &quot;新しいメモリマネージャーのプレビュー&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>新しい Kotlin/Native メモリマネージャーは<a href="/ja/kotlin/components-stability">実験的</a>です。 これはいつでも廃止または変更される可能性があります。オプトインが必要です (詳細は下記参照)。評価目的でのみ使用してください。 <a href="https://youtrack.jetbrains.com/issue/KT-48525" target="_blank" rel="noreferrer">YouTrack</a> でフィードバックをいただけると幸いです。</p></div><p>Kotlin 1.6.0 では、新しい Kotlin/Native メモリマネージャーの開発プレビューを試すことができます。これにより、JVM と Native プラットフォーム間の違いをなくし、マルチプラットフォームプロジェクトで一貫した開発者エクスペリエンスを提供することに近づきます。</p><p>注目すべき変更点の1つは、Kotlin/JVM と同様に、トップレベルプロパティの遅延初期化です。トップレベルプロパティは、同じファイル内のトップレベルプロパティまたは関数に初めてアクセスされたときに初期化されます。このモードには、冗長な初期化チェックを削除するグローバルなプロシージャ間最適化 (リリースバイナリでのみ有効) も含まれています。</p><p>最近、新しいメモリマネージャーに関する<a href="https://blog.jetbrains.com/kotlin/2021/08/try-the-new-kotlin-native-memory-manager-development-preview/" target="_blank" rel="noreferrer">ブログ記事</a>を公開しました。新しいメモリマネージャーの現状について学び、デモプロジェクトを見つけるにはそちらをお読みいただくか、<a href="https://github.com/JetBrains/kotlin/blob/master/kotlin-native/NEW_MM.md" target="_blank" rel="noreferrer">移行手順</a>に直接進んでご自身でお試しください。新しいメモリマネージャーがご自身のプロジェクトでどのように機能するかをご確認いただき、課題トラッカーの <a href="https://youtrack.jetbrains.com/issue/KT-48525" target="_blank" rel="noreferrer">YouTrack</a> でフィードバックを共有してください。</p><h3 id="xcode-13-のサポート" tabindex="-1">Xcode 13 のサポート <a class="header-anchor" href="#xcode-13-のサポート" aria-label="Permalink to &quot;Xcode 13 のサポート&quot;">​</a></h3><p>Kotlin/Native 1.6.0 は、Xcode の最新バージョンである Xcode 13 をサポートしています。Xcode を自由にアップデートして、Apple オペレーティングシステム向けの Kotlin プロジェクトで作業を続けることができます。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Xcode 13 で追加された新しいライブラリは Kotlin 1.6.0 では使用できませんが、今後のバージョンでそれらのサポートを追加する予定です。</p></div><h3 id="あらゆるホストでの-windows-ターゲットのコンパイル" tabindex="-1">あらゆるホストでの Windows ターゲットのコンパイル <a class="header-anchor" href="#あらゆるホストでの-windows-ターゲットのコンパイル" aria-label="Permalink to &quot;あらゆるホストでの Windows ターゲットのコンパイル&quot;">​</a></h3><p>1.6.0 からは、Windows ターゲット <code>mingwX64</code> と <code>mingwX86</code> をコンパイルするために Windows ホストは必要ありません。Kotlin/Native をサポートするあらゆるホストでコンパイルできます。</p><h3 id="llvm-とリンカーのアップデート" tabindex="-1">LLVM とリンカーのアップデート <a class="header-anchor" href="#llvm-とリンカーのアップデート" aria-label="Permalink to &quot;LLVM とリンカーのアップデート&quot;">​</a></h3><p>Kotlin/Native が内部で使用する LLVM の依存関係を再設計しました。これにより、次のような様々な利点がもたらされます。</p><ul><li>LLVM のバージョンが 11.1.0 に更新されました。</li><li>依存関係のサイズが減少しました。例えば、macOS では以前のバージョンの 1200 MB から約 300 MB になりました。</li><li><a href="https://youtrack.jetbrains.com/issue/KT-42693" target="_blank" rel="noreferrer">現代の Linux ディストリビューションでは利用できない <code>ncurses5</code> ライブラリへの依存関係を除外しました</a>。</li></ul><p>LLVM のアップデートに加えて、Kotlin/Native は MingGW ターゲット向けに <a href="https://lld.llvm.org/" target="_blank" rel="noreferrer">LLD</a> リンカー (LLVM プロジェクトのリンカー) を使用するようになりました。これは以前使用されていた ld.bfd リンカーよりも様々な利点があり、生成されるバイナリのランタイムパフォーマンスを向上させ、MinGW ターゲットのコンパイラキャッシュをサポートできるようになります。LLD は <a href="/ja/kotlin/whatsnew1530#deprecation-of-linkage-against-dlls-without-import-libraries-for-mingw-targets">DLL リンクのためにインポートライブラリを必要とすることに注意してください</a>。詳細については、<a href="https://stackoverflow.com/questions/3573475/how-does-the-import-library-work-details/3573527/#3573527" target="_blank" rel="noreferrer">この Stack Overflow スレッド</a>を参照してください。</p><h3 id="パフォーマンスの改善" tabindex="-1">パフォーマンスの改善 <a class="header-anchor" href="#パフォーマンスの改善" aria-label="Permalink to &quot;パフォーマンスの改善&quot;">​</a></h3><p>Kotlin/Native 1.6.0 では、以下のパフォーマンス改善が提供されます。</p><ul><li>コンパイル時間: <code>linuxX64</code> および <code>iosArm64</code> ターゲットでは、コンパイラキャッシュがデフォルトで有効になりました。これにより、デバッグモードでのほとんどのコンパイルが高速化されます (初回を除く)。測定では、テストプロジェクトで約 200% の速度向上が示されました。これらのターゲットのコンパイラキャッシュは Kotlin 1.5.0 から<a href="/ja/kotlin/whatsnew15#performance-improvements">追加の Gradle プロパティ</a>を使用して利用可能でしたが、これで削除できます。</li><li>ランタイム: 生成される LLVM コードの最適化により、<code>for</code> ループでの配列の反復処理が最大 12% 高速化されました。</li></ul><h3 id="jvm-および-js-ir-バックエンドとの統一されたコンパイラプラグイン-abi" tabindex="-1">JVM および JS IR バックエンドとの統一されたコンパイラプラグイン ABI <a class="header-anchor" href="#jvm-および-js-ir-バックエンドとの統一されたコンパイラプラグイン-abi" aria-label="Permalink to &quot;JVM および JS IR バックエンドとの統一されたコンパイラプラグイン ABI&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>Kotlin/Native で共通の IR コンパイラプラグイン ABI を使用するオプションは<a href="/ja/kotlin/components-stability">実験的</a>です。 これはいつでも廃止または変更される可能性があります。オプトインが必要です (詳細は下記参照)。評価目的でのみ使用してください。 <a href="https://youtrack.jetbrains.com/issue/KT-48595" target="_blank" rel="noreferrer">YouTrack</a> でフィードバックをいただけると幸いです。</p></div><p>以前のバージョンでは、ABI の違いのため、コンパイラプラグインの作成者は Kotlin/Native 用に別々のアーティファクトを提供する必要がありました。</p><p>1.6.0 からは、Kotlin Multiplatform Gradle プラグインが、JVM および JS IR バックエンドで使用される埋め込み可能なコンパイラ jar を Kotlin/Native 用に使用できるようになりました。これにより、Native およびその他のサポートされているプラットフォームで同じコンパイラプラグインアーティファクトを使用できるため、コンパイラプラグイン開発エクスペリエンスの統一に向けた一歩となります。</p><p>これはこのようなサポートのプレビューバージョンであり、オプトインが必要です。Kotlin/Native 用の汎用コンパイラプラグインアーティファクトの使用を開始するには、<code>gradle.properties</code> に次の行を追加します: <code>kotlin.native.useEmbeddableCompilerJar=true</code>。</p><p>将来的には Kotlin/Native で埋め込み可能なコンパイラ jar をデフォルトで使用する予定ですので、プレビューがどのように機能するかについて皆様からのフィードバックをいただくことが非常に重要です。</p><p>コンパイラプラグインの作成者の方は、このモードを試してご自身のプラグインで動作するかどうかを確認してください。プラグインの構造によっては、移行手順が必要になる場合があります。<a href="https://youtrack.com/issue/KT-48595" target="_blank" rel="noreferrer">こちらの YouTrack Issue</a> で移行手順を確認し、コメントでフィードバックを残してください。</p><h3 id="klib-リンク失敗の詳細なエラーメッセージ" tabindex="-1">klib リンク失敗の詳細なエラーメッセージ <a class="header-anchor" href="#klib-リンク失敗の詳細なエラーメッセージ" aria-label="Permalink to &quot;klib リンク失敗の詳細なエラーメッセージ&quot;">​</a></h3><p>Kotlin/Native コンパイラは、klib リンクエラーに対して詳細なエラーメッセージを提供するようになりました。メッセージには明確なエラー説明が含まれ、考えられる原因と解決方法に関する情報も含まれるようになりました。</p><p>例:</p><ul><li><p>1.5.30:</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>e: java.lang.IllegalStateException: IrTypeAliasSymbol expected: Unbound public symbol for public kotlinx.coroutines/CancellationException|null[0]</span></span>
<span class="line"><span>&lt;stack trace&gt;</span></span></code></pre></div></li><li><p>1.6.0:</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>e: IR デシリアライズ中に予期しない型のシンボルが見つかりました: IrClassPublicSymbolImpl, kotlinx.coroutines/CancellationException|null[0]。</span></span>
<span class="line"><span>IrTypeAliasSymbol が予期されます。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>これは、プロジェクトで現在使用されている他のライブラリとは異なるバージョンのライブラリに対してコンパイルされた2つのライブラリが存在する場合に発生する可能性があります。</span></span>
<span class="line"><span>プロジェクト構成が正しく、依存関係のバージョンが一貫していることを確認してください。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&quot;org.jetbrains.kotlinx:kotlinx-coroutines-core (org.jetbrains.kotlinx:kotlinx-coroutines-core-macosx64)&quot; に依存し、競合を引き起こす可能性のあるライブラリのリスト:</span></span>
<span class="line"><span>&lt;ライブラリのリストと潜在的なバージョン不一致&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>プロジェクトの依存関係:</span></span>
<span class="line"><span>&lt;依存関係ツリー&gt;</span></span></code></pre></div></li></ul><h3 id="未処理例外処理-api-の再設計" tabindex="-1">未処理例外処理 API の再設計 <a class="header-anchor" href="#未処理例外処理-api-の再設計" aria-label="Permalink to &quot;未処理例外処理 API の再設計&quot;">​</a></h3><p>Kotlin/Native ランタイム全体で未処理例外の処理を統一し、デフォルトの処理を <code>processUnhandledException(throwable: Throwable)</code> 関数として公開しました。これは <code>kotlinx.coroutines</code> のようなカスタム実行環境で使用できます。</p><p>この処理は、<code>Worker.executeAfter()</code> での操作からエスケープする例外にも適用されますが、新しい<a href="#preview-of-the-new-memory-manager">メモリマネージャー</a>にのみ適用されます。</p><p>API の改善は、<code>setUnhandledExceptionHook()</code> によって設定されたフックにも影響を与えました。以前は、Kotlin/Native ランタイムが未処理例外でフックを呼び出した後、そのようなフックはリセットされ、プログラムは常に直後に終了していました。しかし今では、これらのフックは複数回使用できます。未処理例外時に常にプログラムを終了させたい場合は、未処理例外フック (<code>setUnhandledExceptionHook()</code>) を設定しないか、フックの最後に <code>terminateWithUnhandledException()</code> を呼び出すようにしてください。これにより、例外をサードパーティのクラッシュレポートサービス (Firebase Crashlytics など) に送信し、その後プログラムを終了させることができます。<code>main()</code> からエスケープする例外や、相互運用境界を越える例外は、フックが <code>terminateWithUnhandledException()</code> を呼び出さなかった場合でも、常にプログラムを終了させます。</p><h2 id="kotlin-js" tabindex="-1">Kotlin/JS <a class="header-anchor" href="#kotlin-js" aria-label="Permalink to &quot;Kotlin/JS&quot;">​</a></h2><p>Kotlin/JS コンパイラの IR バックエンドの安定化作業を継続しています。Kotlin/JS には、<a href="#option-to-use-pre-installed-node-js-and-yarn">Node.js と Yarn のダウンロードを無効にするオプション</a>が追加されました。</p><h3 id="プリインストールされた-node-js-と-yarn-を使用するオプション" tabindex="-1">プリインストールされた Node.js と Yarn を使用するオプション <a class="header-anchor" href="#プリインストールされた-node-js-と-yarn-を使用するオプション" aria-label="Permalink to &quot;プリインストールされた Node.js と Yarn を使用するオプション&quot;">​</a></h3><p>Kotlin/JS プロジェクトをビルドする際に Node.js と Yarn のダウンロードを無効にし、ホストにすでにインストールされているインスタンスを使用できるようになりました。これは、CI サーバーなど、インターネット接続のないサーバーでのビルドに役立ちます。</p><p>外部コンポーネントのダウンロードを無効にするには、<code>build.gradle(.kts)</code> に次の行を追加します。</p>`,100)),i("ul",null,[i("li",null,[s[2]||(s[2]=i("p",null,"Yarn:",-1)),t(k,{group:"build-script"},{default:n(()=>[t(e,{title:"Kotlin","group-key":"kotlin"},{default:n(()=>s[0]||(s[0]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"rootProject.plugins."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withType"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"org"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"jetbrains"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"gradle"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"targets"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"js"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"yarn"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"YarnPlugin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"> {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    rootProject."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"the"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"org"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"jetbrains"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"gradle"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"targets"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"js"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"yarn"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"YarnRootExtension"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},">().download "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," false"),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}}," // or true for default behavior")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),t(e,{title:"Groovy","group-key":"groovy"},{default:n(()=>s[1]||(s[1]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"rootProject"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"plugins"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"withType("),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"org.jetbrains.kotlin.gradle.targets.js.yarn.YarnPlugin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    rootProject"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"extensions"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"getByType("),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"org.jetbrains.kotlin.gradle.targets.js.yarn.YarnRootExtension"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"download "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," false")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1})]),i("li",null,[s[5]||(s[5]=i("p",null,"Node.js:",-1)),t(k,{group:"build-script"},{default:n(()=>[t(e,{title:"Kotlin","group-key":"kotlin"},{default:n(()=>s[3]||(s[3]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"rootProject.plugins."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withType"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"org"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"jetbrains"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"gradle"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"targets"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"js"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"nodejs"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"NodeJsRootPlugin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"> {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    rootProject."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"the"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"org"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"jetbrains"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"gradle"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"targets"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"js"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"nodejs"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"NodeJsRootExtension"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},">().download "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," false"),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}}," // or true for default behavior")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),t(e,{title:"Groovy","group-key":"groovy"},{default:n(()=>s[4]||(s[4]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"rootProject"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"plugins"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"withType("),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"org.jetbrains.kotlin.gradle.targets.js.nodejs.NodeJsRootPlugin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    rootProject"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"extensions"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"getByType("),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"org.jetbrains.kotlin.gradle.targets.js.nodejs.NodeJsRootExtension"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"download "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," false")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1})])]),s[7]||(s[7]=h(`<h2 id="kotlin-gradle-プラグイン" tabindex="-1">Kotlin Gradle プラグイン <a class="header-anchor" href="#kotlin-gradle-プラグイン" aria-label="Permalink to &quot;Kotlin Gradle プラグイン&quot;">​</a></h2><p>Kotlin 1.6.0 では、<code>KotlinGradleSubplugin</code> クラスの非推奨レベルを &#39;ERROR&#39; に変更しました。このクラスはコンパイラプラグインの記述に使用されていました。今後のリリースでは、このクラスを削除します。代わりに <code>KotlinCompilerPluginSupportPlugin</code> クラスを使用してください。</p><p><code>kotlin.useFallbackCompilerSearch</code> ビルドオプションと、<code>noReflect</code> および <code>includeRuntime</code> コンパイラオプションを削除しました。<code>useIR</code> コンパイラオプションは非表示になり、今後のリリースで削除される予定です。</p><p>Kotlin Gradle プラグインで<a href="/ja/kotlin/gradle-compiler-options">現在サポートされているコンパイラオプション</a>について詳しく学びましょう。</p><h2 id="標準ライブラリ" tabindex="-1">標準ライブラリ <a class="header-anchor" href="#標準ライブラリ" aria-label="Permalink to &quot;標準ライブラリ&quot;">​</a></h2><p>標準ライブラリの新しい 1.6.0 バージョンでは、実験的な機能が安定化され、新しい機能が導入され、プラットフォーム間での動作が統一されています。</p><ul><li><a href="#new-readline-functions">新しい readline 関数</a></li><li><a href="#stable-typeof">typeOf() の安定化</a></li><li><a href="#stable-collection-builders">コレクションビルダーの安定化</a></li><li><a href="#stable-duration-api">Duration API の安定化</a></li><li><a href="#splitting-regex-into-a-sequence">正規表現をシーケンスに分割</a></li><li><a href="#bit-rotation-operations-on-integers">整数のビット回転操作</a></li><li><a href="#changes-for-replace-and-replacefirst-in-js">JS の replace() と replaceFirst() の変更</a></li><li><a href="#improvements-to-the-existing-api">既存 API の改善</a></li><li><a href="#deprecations">非推奨</a></li></ul><h3 id="新しい-readline-関数" tabindex="-1">新しい readline 関数 <a class="header-anchor" href="#新しい-readline-関数" aria-label="Permalink to &quot;新しい readline 関数&quot;">​</a></h3><p>Kotlin 1.6.0 では、標準入力を処理するための新しい関数、<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.io/readln.html" target="_blank" rel="noreferrer"><code>readln()</code></a> と <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.io/readln-or-null.html" target="_blank" rel="noreferrer"><code>readlnOrNull()</code></a> が提供されます。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>現時点では、新しい関数は JVM および Native ターゲットプラットフォームでのみ利用可能です。</p></div><table tabindex="0"><thead><tr><th><strong>以前のバージョン</strong></th><th><strong>1.6.0 の代替</strong></th><th><strong>使用方法</strong></th></tr></thead><tbody><tr><td><code>readLine()!!</code></td><td><code>readln()</code></td><td>標準入力から行を読み取り、それを返します。EOF に達した場合、<code>RuntimeException</code> をスローします。</td></tr><tr><td><code>readLine()</code></td><td><code>readlnOrNull()</code></td><td>標準入力から行を読み取り、それを返します。EOF に達した場合、<code>null</code> を返します。</td></tr></tbody></table><p>行を読み取る際に <code>!!</code> を使用する必要をなくすことで、初心者にとっての体験が向上し、Kotlin の教育が簡素化されると信じています。読み取り操作の名前を <code>println()</code> と一貫させるため、新しい関数の名前を &#39;ln&#39; に短縮することにしました。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;What is your nickname?&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nickname </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> readln</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$nickname</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nextLine </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> readlnOrNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">takeUnless</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isNullOrEmpty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        } ?: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">break</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nextLine.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sum)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>既存の <code>readLine()</code> 関数は、IDE のコード補完で <code>readln()</code> および <code>readlnOrNull()</code> よりも優先度が低くなります。IDE のインスペクションも、従来の <code>readLine()</code> の代わりに新しい関数を使用することを推奨します。</p><p>今後のリリースで <code>readLine()</code> 関数を段階的に非推奨にする予定です。</p><h3 id="typeof-の安定化" tabindex="-1">typeOf() の安定化 <a class="header-anchor" href="#typeof-の安定化" aria-label="Permalink to &quot;typeOf() の安定化&quot;">​</a></h3><p>バージョン 1.6.0 では、<a href="/ja/kotlin/components-stability">安定版</a> <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/type-of.html" target="_blank" rel="noreferrer"><code>typeOf()</code></a> 関数が導入され、<a href="https://youtrack.jetbrains.com/issue/KT-45396" target="_blank" rel="noreferrer">主要なロードマップ項目</a>の1つが完了しました。</p><p><a href="https://blog.jetbrains.com/kotlin/2019/06/kotlin-1-3-40-released/" target="_blank" rel="noreferrer">1.3.40 以降</a>、<code>typeOf()</code> は JVM プラットフォームで実験的 API として利用可能でした。今では、あらゆる Kotlin プラットフォームでこれを使用し、コンパイラが推論できるあらゆる Kotlin 型の <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/-k-type/#kotlin.reflect.KType" target="_blank" rel="noreferrer"><code>KType</code></a> 表現を取得できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">inline</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reified</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">renderType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> typeOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> type.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fromExplicitType </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> typeOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fromReifiedType </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> renderType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt;()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="コレクションビルダーの安定化" tabindex="-1">コレクションビルダーの安定化 <a class="header-anchor" href="#コレクションビルダーの安定化" aria-label="Permalink to &quot;コレクションビルダーの安定化&quot;">​</a></h3><p>Kotlin 1.6.0 では、コレクションビルダー関数が<a href="/ja/kotlin/components-stability">安定版</a>に昇格しました。コレクションビルダーによって返されるコレクションは、読み取り専用状態でもシリアライズ可能になりました。</p><p>オプトインアノテーションなしで、<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/build-map.html" target="_blank" rel="noreferrer"><code>buildMap()</code></a>、<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/build-list.html" target="_blank" rel="noreferrer"><code>buildList()</code></a>、<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/build-set.html" target="_blank" rel="noreferrer"><code>buildSet()</code></a> を使用できるようになりました。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;b&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;c&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> buildList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        addAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;d&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [a, b, c, d]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="duration-api-の安定化" tabindex="-1">Duration API の安定化 <a class="header-anchor" href="#duration-api-の安定化" aria-label="Permalink to &quot;Duration API の安定化&quot;">​</a></h3><p>異なる時間単位で期間量を表現するための <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.time/-duration/" target="_blank" rel="noreferrer">Duration</a> クラスが<a href="/ja/kotlin/components-stability">安定版</a>に昇格しました。1.6.0 では、Duration API は以下の変更を受けました。</p><ul><li><p>期間を日、時間、分、秒、ナノ秒に分解する <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.time/-duration/to-components.html" target="_blank" rel="noreferrer"><code>toComponents()</code></a> 関数の最初のコンポーネントは、<code>Int</code> 型ではなく <code>Long</code> 型になりました。以前は、値が <code>Int</code> の範囲に収まらない場合、その範囲に強制されていました。<code>Long</code> 型を使用すると、<code>Int</code> に収まらない値を切り捨てることなく、期間範囲内のあらゆる値を分解できます。</p></li><li><p><code>DurationUnit</code> enum は独立したものとなり、JVM 上の <code>java.util.concurrent.TimeUnit</code> の型エイリアスではなくなりました。<code>typealias DurationUnit = TimeUnit</code> が役立つ説得力のあるケースは見つかりませんでした。また、型エイリアスを介して <code>TimeUnit</code> API を公開すると、<code>DurationUnit</code> のユーザーを混乱させる可能性があります。</p></li><li><p>コミュニティからのフィードバックに応え、<code>Int.seconds</code> のような拡張プロパティを復活させます。ただし、その適用範囲を制限したいため、<code>Duration</code> クラスのコンパニオンオブジェクトに配置しました。IDE は補完で拡張を提案し、コンパニオンからのインポートを自動的に挿入できますが、将来的にはこの動作を <code>Duration</code> 型が期待される場合に限定する予定です。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.time.Duration.Companion.seconds</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> duration </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10000</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;There are \${duration.seconds.inWholeMinutes} minutes in </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$duration</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> seconds&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // There are 166 minutes in 10000 seconds</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>以前導入された <code>Duration.seconds(Int)</code> のようなコンパニオン関数や、<code>Int.seconds</code> のような非推奨のトップレベル拡張を、<code>Duration.Companion</code> の新しい拡張に置き換えることを推奨します。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>このような置き換えは、古いトップレベル拡張と新しいコンパニオン拡張の間に曖昧さを引き起こす可能性があります。 自動移行を行う前に、kotlin.time パッケージのワイルドカードインポート — <code>import kotlin.time.*</code> — を必ず使用してください。</p></div></li></ul><h3 id="正規表現をシーケンスに分割" tabindex="-1">正規表現をシーケンスに分割 <a class="header-anchor" href="#正規表現をシーケンスに分割" aria-label="Permalink to &quot;正規表現をシーケンスに分割&quot;">​</a></h3><p><code>Regex.splitToSequence(CharSequence)</code> 関数と <code>CharSequence.splitToSequence(Regex)</code> 関数が<a href="/ja/kotlin/components-stability">安定版</a>に昇格しました。これらは指定された正規表現の一致箇所で文字列を分割しますが、結果を <a href="/ja/kotlin/sequences">Sequence</a> として返すため、この結果に対するすべての操作は遅延実行されます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> colorsText </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;green, red, brown&amp;blue, orange, pink&amp;green&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> regex </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;[,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">s]+&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toRegex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mixedColor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> regex.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">splitToSequence</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(colorsText)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // or</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // val mixedColor = colorsText.splitToSequence(regex)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(it) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">firstOrNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">contains</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&amp;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mixedColor) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;brown&amp;blue&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="整数のビット回転操作" tabindex="-1">整数のビット回転操作 <a class="header-anchor" href="#整数のビット回転操作" aria-label="Permalink to &quot;整数のビット回転操作&quot;">​</a></h3><p>Kotlin 1.6.0 では、ビット操作のための <code>rotateLeft()</code> および <code>rotateRight()</code> 関数が<a href="/ja/kotlin/components-stability">安定版</a>になりました。これらの関数は、数値のバイナリ表現を、指定されたビット数だけ左または右に回転させます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> number: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Short</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0b10001</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rotateRight</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(radix </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 100000000000100</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rotateLeft</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(radix </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1000100</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="js-の-replace-と-replacefirst-の変更" tabindex="-1">JS の replace() と replaceFirst() の変更 <a class="header-anchor" href="#js-の-replace-と-replacefirst-の変更" aria-label="Permalink to &quot;JS の replace() と replaceFirst() の変更&quot;">​</a></h3><p>Kotlin 1.6.0 より前は、置き換え文字列にグループ参照が含まれている場合、<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/-regex/replace.html" target="_blank" rel="noreferrer"><code>replace()</code></a> および <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/-regex/replace-first.html" target="_blank" rel="noreferrer"><code>replaceFirst()</code></a> Regex 関数は Java と JS で異なる動作をしていました。すべてのターゲットプラットフォームで動作の一貫性を保つため、JS での実装を変更しました。</p><p>置き換え文字列内の <code>\${name}</code> または <code>$index</code> の出現は、指定されたインデックスまたは名前を持つキャプチャされたグループに対応するサブシーケンスに置換されます。</p><ul><li><p><code>$index</code> – &#39;\`\`\` の後の最初の数字は、常にグループ参照の一部として扱われます。後続の数字は、有効なグループ参照を形成する場合にのみ <code>index</code> に組み込まれます。数字 &#39;0&#39;～&#39;9&#39; のみがグループ参照の潜在的なコンポーネントと見なされます。キャプチャされたグループのインデックスは &#39;1&#39; から始まることに注意してください。インデックス &#39;0&#39; のグループは、全体の一致を表します。</p></li><li><p><code>\${name}</code> – <code>name</code> は、ラテン文字 &#39;a&#39;～&#39;z&#39;、&#39;A&#39;～&#39;Z&#39;、または数字 &#39;0&#39;～&#39;9&#39; で構成できます。最初の文字は文字である必要があります。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>置き換えパターンにおける名前付きグループは、現在 JVM でのみサポートされています。</p></div></li><li><p>後続の文字を置き換え文字列にリテラルとして含めるには、バックスラッシュ文字 <code>\\</code> を使用します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Regex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;(.+)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Kotlin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\$</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> $1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// $ Kotlin</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Regex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;(.+)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replaceFirst</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.6.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> $1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// \\ 1.6.0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>置き換え文字列をリテラル文字列として扱う必要がある場合は、<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/-regex/escape-replacement.html" target="_blank" rel="noreferrer"><code>Regex.escapeReplacement()</code></a> を使用できます。</p></li></ul><h3 id="既存-api-の改善" tabindex="-1">既存 API の改善 <a class="header-anchor" href="#既存-api-の改善" aria-label="Permalink to &quot;既存 API の改善&quot;">​</a></h3><ul><li><p>バージョン 1.6.0 では、<code>Comparable.compareTo()</code> の中置拡張関数が追加されました。これで、2つのオブジェクトの順序を比較するために中置形式を使用できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WrappedText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> text: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Comparable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WrappedText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> compareTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(other: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WrappedText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">         this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.text compareTo other.text</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>JS の <code>Regex.replace()</code> も、すべてのプラットフォームで実装を統一するために、インライン化されなくなりました。</p></li><li><p><code>compareTo()</code> および <code>equals()</code> String 関数、ならびに <code>isBlank()</code> CharSequence 関数は、JS で JVM とまったく同じように動作するようになりました。以前は非 ASCII 文字に関して差異がありました。</p></li></ul><h3 id="非推奨" tabindex="-1">非推奨 <a class="header-anchor" href="#非推奨" aria-label="Permalink to &quot;非推奨&quot;">​</a></h3><p>Kotlin 1.6.0 では、一部の JS 専用 stdlib API に対する警告から非推奨サイクルを開始します。</p><h4 id="concat-、match-、matches-文字列関数" tabindex="-1">concat()、match()、matches() 文字列関数 <a class="header-anchor" href="#concat-、match-、matches-文字列関数" aria-label="Permalink to &quot;concat()、match()、matches() 文字列関数&quot;">​</a></h4><ul><li>文字列を別の与えられたオブジェクトの文字列表現と連結するには、<code>concat()</code> の代わりに <code>plus()</code> を使用してください。</li><li>入力内の正規表現のすべての出現箇所を見つけるには、<code>String.match(regex: String)</code> の代わりに Regex クラスの <code>findAll()</code> を使用してください。</li><li>正規表現が入力全体に一致するかどうかを確認するには、<code>String.matches(regex: String)</code> の代わりに Regex クラスの <code>matches()</code> を使用してください。</li></ul><h4 id="比較関数を受け取る配列の-sort" tabindex="-1">比較関数を受け取る配列の sort() <a class="header-anchor" href="#比較関数を受け取る配列の-sort" aria-label="Permalink to &quot;比較関数を受け取る配列の sort()&quot;">​</a></h4><p>比較関数によって渡された順序に従って配列をソートする <code>Array&lt;out T&gt;.sort()</code> 関数と、インライン関数 <code>ByteArray.sort()</code>、<code>ShortArray.sort()</code>、<code>IntArray.sort()</code>、<code>LongArray.sort()</code>、<code>FloatArray.sort()</code>、<code>DoubleArray.sort()</code>、<code>CharArray.sort()</code> を非推奨にしました。配列のソートには、他の標準ライブラリ関数を使用してください。</p><p>詳細については、<a href="/ja/kotlin/collection-ordering">コレクションの順序付け</a>セクションを参照してください。</p><h2 id="ツール" tabindex="-1">ツール <a class="header-anchor" href="#ツール" aria-label="Permalink to &quot;ツール&quot;">​</a></h2><h3 id="kover-–-kotlin-のコードカバレッジツール" tabindex="-1">Kover – Kotlin のコードカバレッジツール <a class="header-anchor" href="#kover-–-kotlin-のコードカバレッジツール" aria-label="Permalink to &quot;Kover – Kotlin のコードカバレッジツール&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>Kover Gradle プラグインは実験的です。<a href="https://github.com/Kotlin/kotlinx-kover/issues" target="_blank" rel="noreferrer">GitHub</a> でフィードバックをいただけると幸いです。</p></div><p>Kotlin 1.6.0 では、Kover を導入します。これは、<a href="https://github.com/JetBrains/intellij-coverage" target="_blank" rel="noreferrer">IntelliJ</a> および <a href="https://github.com/jacoco/jacoco" target="_blank" rel="noreferrer">JaCoCo</a> の Kotlin コードカバレッジエージェント用の Gradle プラグインです。インライン関数を含むすべての言語構成要素で動作します。</p><p>Kover の詳細については、<a href="https://github.com/Kotlin/kotlinx-kover" target="_blank" rel="noreferrer">GitHub リポジトリ</a>または以下のビデオを参照してください。</p>`,51)),t(p,{src:"https://www.youtube.com/v/jNu5LY9HIbw",title:"Kover – The Code Coverage Plugin"}),s[8]||(s[8]=h('<h2 id="coroutines-1-6-0-rc" tabindex="-1">Coroutines 1.6.0-RC <a class="header-anchor" href="#coroutines-1-6-0-rc" aria-label="Permalink to &quot;Coroutines 1.6.0-RC&quot;">​</a></h2><p><code>kotlinx.coroutines</code> <a href="https://github.com/Kotlin/kotlinx.coroutines/releases/tag/1.6.0-RC" target="_blank" rel="noreferrer">1.6.0-RC</a> がリリースされ、複数の機能と改善が含まれています。</p><ul><li><a href="#preview-of-the-new-memory-manager">新しい Kotlin/Native メモリマネージャーのサポート</a></li><li>追加のスレッドを作成せずに並列処理を制限できる、ディスパッチャーの <em>views</em> API の導入</li><li>Java 6 から Java 8 ターゲットへの移行</li><li>新しい再設計された API とマルチプラットフォームサポートを備えた <code>kotlinx-coroutines-test</code></li><li>コルーチンに <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/ThreadLocal.html" target="_blank" rel="noreferrer"><code>ThreadLocal</code></a> 変数へのスレッドセーフな書き込みアクセスを提供する <a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-copyable-thread-context-element/index.html" target="_blank" rel="noreferrer"><code>CopyableThreadContextElement</code></a> の導入</li></ul><p>詳細については、<a href="https://github.com/Kotlin/kotlinx.coroutines/releases/tag/1.6.0-RC" target="_blank" rel="noreferrer">変更履歴</a>を参照してください。</p><h2 id="kotlin-1-6-0-への移行" tabindex="-1">Kotlin 1.6.0 への移行 <a class="header-anchor" href="#kotlin-1-6-0-への移行" aria-label="Permalink to &quot;Kotlin 1.6.0 への移行&quot;">​</a></h2><p>IntelliJ IDEA と Android Studio は、Kotlin プラグインが利用可能になり次第、1.6.0 への更新を提案します。</p><p>既存のプロジェクトを Kotlin 1.6.0 に移行するには、Kotlin のバージョンを <code>1.6.0</code> に変更し、Gradle または Maven プロジェクトを再インポートします。<a href="/ja/kotlin/releases#update-to-a-new-kotlin-version">Kotlin 1.6.0 への更新方法</a>を学びましょう。</p><p>Kotlin 1.6.0 で新しいプロジェクトを開始するには、Kotlin プラグインを更新し、<strong>File</strong> | <strong>New</strong> | <strong>Project</strong> からプロジェクトウィザードを実行します。</p><p>新しいコマンドラインコンパイラは、<a href="https://github.com/JetBrains/kotlin/releases/tag/v1.6.0" target="_blank" rel="noreferrer">GitHub リリースページ</a>からダウンロードできます。</p><p>Kotlin 1.6.0 は<a href="/ja/kotlin/kotlin-evolution-principles#language-and-tooling-releases">機能リリース</a>であるため、以前のバージョンの言語用に記述されたコードと互換性のない変更をもたらす可能性があります。そのような変更点の詳細なリストは、<a href="/ja/kotlin/compatibility-guide-16">Kotlin 1.6 互換性ガイド</a>で確認できます。</p>',10))])}const f=r(E,[["render",g]]);export{C as __pageData,f as default};
