import{_ as s,c as a,o as n,ag as l}from"./chunks/framework.Bksy39di.js";const E=JSON.parse('{"title":"Koin을 사용하는 이유","description":"","frontmatter":{"title":"Koin을 사용하는 이유"},"headers":[],"relativePath":"ko/koin/setup/why.md","filePath":"ko/koin/setup/why.md","lastUpdated":1748365453000}'),t={name:"ko/koin/setup/why.md"};function p(e,i,h,o,k,r){return n(),a("div",null,i[0]||(i[0]=[l(`<h1 id="koin을-사용하는-이유" tabindex="-1">Koin을 사용하는 이유 <a class="header-anchor" href="#koin을-사용하는-이유" aria-label="Permalink to &quot;Koin을 사용하는 이유&quot;">​</a></h1><p>Koin은 모든 Kotlin 애플리케이션(멀티플랫폼, Android, 백엔드 등)에 의존성 주입을 쉽고 효율적으로 통합할 수 있는 방법을 제공합니다.</p><p>Koin의 목표는 다음과 같습니다:</p><ul><li>스마트한 API를 통해 의존성 주입 인프라를 간소화</li><li>읽기 쉽고 사용하기 쉬운 Kotlin DSL을 통해 모든 종류의 애플리케이션을 작성할 수 있도록 지원</li><li>Android 생태계부터 Ktor와 같은 백엔드 요구사항까지 다양한 종류의 통합 제공</li><li>어노테이션과 함께 사용할 수 있도록 허용</li></ul><h2 id="koin-간략-소개" tabindex="-1">Koin 간략 소개 <a class="header-anchor" href="#koin-간략-소개" aria-label="Permalink to &quot;Koin 간략 소개&quot;">​</a></h2><h3 id="kotlin-개발을-쉽고-생산적으로-만들기" tabindex="-1">Kotlin 개발을 쉽고 생산적으로 만들기 <a class="header-anchor" href="#kotlin-개발을-쉽고-생산적으로-만들기" aria-label="Permalink to &quot;Kotlin 개발을 쉽고 생산적으로 만들기&quot;">​</a></h3><p>Koin은 도구가 아닌 앱에 집중할 수 있도록 돕는 스마트한 Kotlin 의존성 주입 라이브러리입니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyRepository</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyPresenter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> repository : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyRepository</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// just declare it </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myModule </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  singleOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyPresenter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  singleOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyRepository</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Koin은 Kotlin 관련 기술을 애플리케이션에 구축하고 통합하여 비즈니스를 쉽게 확장할 수 있도록 간단한 도구와 API를 제공합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Just start Koin</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  startKoin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    modules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myModule)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="android-지원" tabindex="-1">Android 지원 <a class="header-anchor" href="#android-지원" aria-label="Permalink to &quot;Android 지원&quot;">​</a></h3><p>Kotlin 언어 덕분에 Koin은 Android 플랫폼을 확장하고, 원본 플랫폼의 일부로 새로운 기능을 제공합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyApplication</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onCreate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    super</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onCreate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    startKoin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      modules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myModule)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Koin은 <code>by inject()</code> 또는 <code>by viewModel()</code>을 사용하여 Android 컴포넌트 어디서든 의존성을 가져올 수 있는 쉽고 강력한 API를 제공합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyActivity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AppCompatActivity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myPresenter : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyPresenter</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> inject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="kotlin-multiplatform-강화" tabindex="-1">Kotlin Multiplatform 강화 <a class="header-anchor" href="#kotlin-multiplatform-강화" aria-label="Permalink to &quot;Kotlin Multiplatform 강화&quot;">​</a></h3><p>모바일 플랫폼 간 코드 공유는 Kotlin Multiplatform의 주요 사용 사례 중 하나입니다. Kotlin Multiplatform Mobile을 사용하면 크로스 플랫폼 모바일 애플리케이션을 구축하고 Android와 iOS 간 공통 코드를 공유할 수 있습니다.</p><p>Koin은 멀티플랫폼 의존성 주입을 제공하며, 네이티브 모바일 애플리케이션과 웹/백엔드 애플리케이션 전반에 걸쳐 컴포넌트를 구축하는 데 도움을 줍니다.</p><h3 id="성능-및-생산성" tabindex="-1">성능 및 생산성 <a class="header-anchor" href="#성능-및-생산성" aria-label="Permalink to &quot;성능 및 생산성&quot;">​</a></h3><p>Koin은 사용 및 실행 면에서 직관적으로 설계된 순수 Kotlin 프레임워크입니다. 사용하기 쉬우며 컴파일 시간에 영향을 주지 않으며, 추가 플러그인 구성이 필요하지 않습니다.</p><h2 id="koin-의존성-주입-프레임워크" tabindex="-1">Koin: 의존성 주입 프레임워크 <a class="header-anchor" href="#koin-의존성-주입-프레임워크" aria-label="Permalink to &quot;Koin: 의존성 주입 프레임워크&quot;">​</a></h2><p>Koin은 Kotlin을 위한 인기 있는 의존성 주입(DI) 프레임워크로, 최소한의 상용구 코드로 애플리케이션의 의존성을 관리할 수 있는 현대적이고 경량화된 솔루션을 제공합니다.</p><h3 id="의존성-주입-vs-서비스-로케이터" tabindex="-1">의존성 주입 vs. 서비스 로케이터 <a class="header-anchor" href="#의존성-주입-vs-서비스-로케이터" aria-label="Permalink to &quot;의존성 주입 vs. 서비스 로케이터&quot;">​</a></h3><p>Koin이 서비스 로케이터 패턴과 유사해 보일 수 있지만, Koin을 차별화하는 주요 차이점이 있습니다.</p><ul><li><p>서비스 로케이터: 서비스 로케이터는 본질적으로 사용 가능한 서비스의 레지스트리이며, 필요에 따라 서비스 인스턴스를 요청할 수 있는 곳입니다. 이는 종종 정적이고 전역적인 레지스트리를 사용하여 이러한 인스턴스를 생성하고 관리하는 역할을 합니다.</p></li><li><p>의존성 주입: 대조적으로, Koin은 순수 의존성 주입 프레임워크입니다. Koin을 사용하면 모듈에 의존성을 선언하고, Koin이 객체 생성 및 연결을 처리합니다. 이는 자체 스코프를 가진 여러 개의 독립적인 모듈을 생성할 수 있도록 하여, 의존성 관리를 더욱 모듈화하고 잠재적인 충돌을 방지합니다.</p></li></ul><h3 id="koin의-접근-방식-유연성과-모범-사례의-조화" tabindex="-1">Koin의 접근 방식: 유연성과 모범 사례의 조화 <a class="header-anchor" href="#koin의-접근-방식-유연성과-모범-사례의-조화" aria-label="Permalink to &quot;Koin의 접근 방식: 유연성과 모범 사례의 조화&quot;">​</a></h3><p>Koin은 DI와 서비스 로케이터 패턴을 모두 지원하여 개발자에게 유연성을 제공합니다. 그러나 의존성이 생성자 매개변수로 전달되는 생성자 주입과 같은 DI의 사용을 강력히 권장합니다. 이러한 접근 방식은 더 나은 테스트 용이성을 촉진하고 코드를 이해하기 쉽게 만듭니다.</p><p>Koin의 설계 철학은 단순성과 쉬운 설정에 중점을 두면서도, 필요할 경우 복잡한 구성도 가능하게 합니다. Koin을 사용함으로써 개발자들은 의존성을 효과적으로 관리할 수 있으며, 대부분의 시나리오에서 DI가 권장되고 선호되는 접근 방식입니다.</p><h3 id="투명성-및-설계-개요" tabindex="-1">투명성 및 설계 개요 <a class="header-anchor" href="#투명성-및-설계-개요" aria-label="Permalink to &quot;투명성 및 설계 개요&quot;">​</a></h3><p>Koin은 의존성 주입(DI)과 서비스 로케이터(SL) 패턴을 모두 지원하는 다재다능한 제어의 역전(IoC) 컨테이너로 설계되었습니다. Koin이 어떻게 작동하는지에 대한 명확한 이해를 제공하고 효과적으로 사용하는 방법을 안내하기 위해 다음 측면들을 살펴보겠습니다.</p><h4 id="koin은-di와-sl의-균형을-어떻게-맞추는가" tabindex="-1">Koin은 DI와 SL의 균형을 어떻게 맞추는가 <a class="header-anchor" href="#koin은-di와-sl의-균형을-어떻게-맞추는가" aria-label="Permalink to &quot;Koin은 DI와 SL의 균형을 어떻게 맞추는가&quot;">​</a></h4><p>Koin은 DI와 SL의 요소를 결합하며, 이는 프레임워크 사용 방식에 영향을 미칠 수 있습니다.</p><ol><li><p><strong>전역 컨텍스트 사용:</strong> 기본적으로 Koin은 서비스 로케이터처럼 작동하는 전역적으로 접근 가능한 컴포넌트를 제공합니다. 이를 통해 <code>KoinComponent</code> 또는 <code>inject</code> 함수를 사용하여 중앙 레지스트리에서 의존성을 가져올 수 있습니다.</p></li><li><p><strong>격리된 컴포넌트:</strong> Koin은 특히 생성자 주입과 같은 의존성 주입 사용을 권장하지만, 격리된 컴포넌트도 허용합니다. 이러한 유연성은 가장 적합한 곳에 DI를 사용하도록 애플리케이션을 구성할 수 있음을 의미하며, 동시에 특정 경우에는 SL의 이점을 활용할 수 있습니다.</p></li><li><p><strong>Android 컴포넌트에서의 SL:</strong> Android 개발에서 Koin은 설정의 용이성을 위해 <code>Application</code> 및 <code>Activity</code>와 같은 컴포넌트 내에서 내부적으로 SL을 사용하는 경우가 많습니다. 이 시점부터 Koin은 의존성을 보다 구조화된 방식으로 관리하기 위해 DI, 특히 생성자 주입을 권장합니다. 하지만 이는 강제되지 않으며, 개발자는 필요에 따라 SL을 사용할 유연성을 가집니다.</p></li></ol><h4 id="왜-이것이-중요한가" tabindex="-1">왜 이것이 중요한가 <a class="header-anchor" href="#왜-이것이-중요한가" aria-label="Permalink to &quot;왜 이것이 중요한가&quot;">​</a></h4><p>DI와 SL의 차이점을 이해하는 것은 애플리케이션의 의존성을 효과적으로 관리하는 데 도움이 됩니다.</p><ul><li><p><strong>의존성 주입:</strong> 테스트 용이성 및 유지보수성 측면에서의 이점으로 인해 Koin에서 권장됩니다. 생성자 주입은 의존성을 명시적으로 만들고 코드 가독성을 높이므로 선호됩니다.</p></li><li><p><strong>서비스 로케이터:</strong> Koin은 특히 Android 컴포넌트에서 편의를 위해 SL을 지원하지만, SL에만 의존하는 것은 더 강한 결합과 테스트 용이성 감소로 이어질 수 있습니다. Koin의 설계는 균형 잡힌 접근 방식을 제공하여 실용적인 곳에 SL을 사용할 수 있게 하지만, DI를 모범 사례로 권장합니다.</p></li></ul><h4 id="koin을-최대한-활용하기" tabindex="-1">Koin을 최대한 활용하기 <a class="header-anchor" href="#koin을-최대한-활용하기" aria-label="Permalink to &quot;Koin을 최대한 활용하기&quot;">​</a></h4><p>Koin을 효과적으로 사용하려면:</p><ul><li><p><strong>모범 사례 따르기:</strong> 가능한 한 생성자 주입을 사용하여 의존성 관리의 모범 사례에 따르십시오. 이 접근 방식은 테스트 용이성과 유지보수성을 향상시킵니다.</p></li><li><p><strong>Koin의 유연성 활용:</strong> 설정을 단순화하는 시나리오에서는 Koin의 SL 지원을 활용하십시오. 하지만 핵심 애플리케이션 의존성 관리는 DI에 의존하는 것을 목표로 하십시오.</p></li><li><p><strong>문서 및 예시 참조:</strong> Koin의 문서와 예시를 검토하여 프로젝트 요구사항에 따라 DI와 SL을 적절하게 구성하고 사용하는 방법을 이해하십시오.</p></li><li><p><strong>의존성 관리 시각화:</strong> 다이어그램과 예시는 Koin이 어떻게 의존성을 해결하고 다른 컨텍스트 내에서 관리하는지 설명하는 데 도움이 될 수 있습니다. 이러한 시각 자료는 Koin의 내부 작동 방식에 대한 더 명확한 이해를 제공할 수 있습니다.</p></li></ul><blockquote><p>이러한 지침을 제공함으로써 Koin의 기능과 설계 선택 사항을 효과적으로 탐색하도록 돕는 것을 목표로 하며, 의존성 관리의 모범 사례를 준수하면서 Koin의 잠재력을 최대한 활용할 수 있도록 보장합니다.</p></blockquote>`,40)]))}const c=s(t,[["render",p]]);export{E as __pageData,c as default};
