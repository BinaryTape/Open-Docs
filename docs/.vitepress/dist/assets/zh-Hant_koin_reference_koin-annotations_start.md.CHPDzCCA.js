import{_ as a,c as i,o as n,ag as t}from"./chunks/framework.Bksy39di.js";const c=JSON.parse('{"title":"Koin 註解使用入門","description":"","frontmatter":{"title":"Koin 註解使用入門"},"headers":[],"relativePath":"zh-Hant/koin/reference/koin-annotations/start.md","filePath":"zh-Hant/koin/reference/koin-annotations/start.md","lastUpdated":1750001831000}'),e={name:"zh-Hant/koin/reference/koin-annotations/start.md"};function l(p,s,h,o,k,r){return n(),i("div",null,s[0]||(s[0]=[t(`<p>Koin 註解專案的目標是幫助您以非常快速且直觀的方式宣告 Koin 定義，並為您生成所有底層的 Koin DSL。其目標是借助 Kotlin 編譯器，幫助開發者體驗實現擴展並快速開發 🚀。</p><h2 id="入門" tabindex="-1">入門 <a class="header-anchor" href="#入門" aria-label="Permalink to &quot;入門&quot;">​</a></h2><p>不熟悉 Koin？請先查看 <a href="https://insert-koin.io/docs/quickstart/kotlin" target="_blank" rel="noreferrer">Koin 入門指南</a></p><p>使用定義與模組註解標記您的元件，並使用慣用的 Koin API。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 標記您的元件以宣告定義</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Single</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyComponent</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 宣告模組並掃描註解</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Module</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@ComponentScan</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyModule</span></span></code></pre></div><p>請按照以下方式使用 <code>org.koin.ksp.generated.*</code> 導入，以便能夠使用生成的程式碼：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用 Koin 生成</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.koin.ksp.generated.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> koin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> startKoin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        printLogger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        modules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // 在此使用您的模組，搭配 Module 類別上生成的 &quot;.module&quot; 擴充功能</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          MyModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().module</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 像往常一樣使用您的 Koin API</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    koin.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>就是這樣，您可以使用 <a href="https://insert-koin.io/docs/reference/introduction" target="_blank" rel="noreferrer">慣用的 Koin API</a> 在 Koin 中使用您的新定義。</p><h2 id="ksp-選項" tabindex="-1">KSP 選項 <a class="header-anchor" href="#ksp-選項" aria-label="Permalink to &quot;KSP 選項&quot;">​</a></h2><p>Koin 編譯器提供了一些配置選項。根據官方文件，您可以將以下選項添加到您的專案中：<a href="https://kotlinlang.org/docs/ksp-quickstart.html#pass-options-to-processors" target="_blank" rel="noreferrer">KSP 快速入門文件</a></p><h3 id="編譯安全-在編譯時檢查您的-koin-配置-從-1-3-0-開始" tabindex="-1">編譯安全 - 在編譯時檢查您的 Koin 配置 (從 1.3.0 開始) <a class="header-anchor" href="#編譯安全-在編譯時檢查您的-koin-配置-從-1-3-0-開始" aria-label="Permalink to &quot;編譯安全 - 在編譯時檢查您的 Koin 配置 (從 1.3.0 開始)&quot;">​</a></h3><p>Koin 註解允許編譯器插件在編譯時驗證您的 Koin 配置。您可以透過將以下 KSP 選項添加到您的 Gradle 模組中來啟用此功能：</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在 build.gradle 或 build.gradle.kts</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ksp {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    arg(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;KOIN_CONFIG_CHECK&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;true&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>編譯器將檢查您配置中使用的所有依賴項是否已宣告，並且所有使用的模組都可被存取。</p><h3 id="使用-provided-繞過編譯安全-從-1-4-0-開始" tabindex="-1">使用 @Provided 繞過編譯安全 (從 1.4.0 開始) <a class="header-anchor" href="#使用-provided-繞過編譯安全-從-1-4-0-開始" aria-label="Permalink to &quot;使用 @Provided 繞過編譯安全 (從 1.4.0 開始)&quot;">​</a></h3><p>除了編譯器中忽略的類型 (Android 常見類型) 之外，編譯器插件可以驗證您的 Koin 配置。如果您想排除某個參數不被檢查，可以在參數上使用 <code>@Provided</code> 來指示此類型是從目前的 Koin 註解配置外部提供的。</p><p>以下表示 <code>MyProvidedComponent</code> 已在 Koin 中宣告：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyProvidedComponent</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Factory</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyPresenter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Provided</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> provided : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyProvidedComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="停用預設模組-從-1-3-0-開始" tabindex="-1">停用預設模組 (從 1.3.0 開始) <a class="header-anchor" href="#停用預設模組-從-1-3-0-開始" aria-label="Permalink to &quot;停用預設模組 (從 1.3.0 開始)&quot;">​</a></h3><p>預設情況下，Koin 編譯器會檢測任何未綁定到模組的定義，並將其放入一個「預設模組」中，該模組是生成在您專案根目錄的 Koin 模組。您可以使用以下選項停用預設模組的使用和生成：</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在 build.gradle 或 build.gradle.kts</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ksp {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    arg(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;KOIN_DEFAULT_MODULE&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;false&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="kotlin-kmp-設定" tabindex="-1">Kotlin KMP 設定 <a class="header-anchor" href="#kotlin-kmp-設定" aria-label="Permalink to &quot;Kotlin KMP 設定&quot;">​</a></h3><p>請按照官方文件所述的 KSP 設定：<a href="https://kotlinlang.org/docs/ksp-multiplatform.html" target="_blank" rel="noreferrer">KSP 與 Kotlin Multiplatform</a></p><p>您也可以查看 <a href="https://github.com/InsertKoinIO/hello-kmp/tree/annotations" target="_blank" rel="noreferrer">Hello Koin KMP</a> 專案，其中包含 Koin 註解的基本設定。</p><h3 id="proguard" tabindex="-1">ProGuard <a class="header-anchor" href="#proguard" aria-label="Permalink to &quot;ProGuard&quot;">​</a></h3><p>如果您打算將 Koin 註解應用程式作為 SDK 嵌入，請查看這些 ProGuard 規則：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># Keep annotation definitions</span></span>
<span class="line"><span>-keep class org.koin.core.annotation.** { *; }</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Keep classes annotated with Koin annotations  </span></span>
<span class="line"><span>-keep @org.koin.core.annotation.* class * { *; }</span></span></code></pre></div>`,28)]))}const g=a(e,[["render",l]]);export{c as __pageData,g as default};
