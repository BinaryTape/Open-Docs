import{_ as e,a as n,b as t,c as l,d as o,e as p,f as d,g as c,h}from"./chunks/multiplatform-executables-diagram.BuydVL0t.js";import{_ as r,c as k,o as m,ag as s,j as a,a as g}from"./chunks/framework.Bksy39di.js";const _=JSON.parse('{"title":"Kotlin Multiplatformプロジェクト構造の基本","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kmp/multiplatform-discover-project.md","filePath":"ja/kmp/multiplatform-discover-project.md","lastUpdated":1755516278000}'),E={name:"ja/kmp/multiplatform-discover-project.md"};function u(y,i,A,M,v,F){return m(),k("div",null,i[0]||(i[0]=[s(`<h1 id="kotlin-multiplatformプロジェクト構造の基本" tabindex="-1">Kotlin Multiplatformプロジェクト構造の基本 <a class="header-anchor" href="#kotlin-multiplatformプロジェクト構造の基本" aria-label="Permalink to &quot;Kotlin Multiplatformプロジェクト構造の基本&quot;">​</a></h1><p>Kotlin Multiplatformを使用すると、異なるプラットフォーム間でコードを共有できます。この記事では、共有コードの制約、コードの共有部分とプラットフォーム固有の部分を区別する方法、およびこの共有コードが動作するプラットフォームを指定する方法について説明します。</p><p>また、共通コード、ターゲット、プラットフォーム固有および中間ソースセット、テスト統合など、Kotlin Multiplatformプロジェクト設定のコアコンセプトについても学習します。これにより、将来的にマルチプラットフォームプロジェクトをセットアップするのに役立ちます。</p><p>ここで提示されるモデルは、Kotlinが使用するモデルと比較して簡略化されています。しかし、この基本的なモデルはほとんどの場合で十分であるはずです。</p><h2 id="共通コード" tabindex="-1">共通コード <a class="header-anchor" href="#共通コード" aria-label="Permalink to &quot;共通コード&quot;">​</a></h2><p>_共通コード_は、異なるプラットフォーム間で共有されるKotlinコードです。</p><p>単純な「Hello, World」の例を考えます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> greeting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, Kotlin Multiplatform!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>プラットフォーム間で共有されるKotlinコードは通常、<code>commonMain</code>ディレクトリに配置されます。コードファイルの場所は、このコードがコンパイルされるプラットフォームのリストに影響するため重要です。</p><p>Kotlinコンパイラはソースコードを入力として受け取り、その結果としてプラットフォーム固有のバイナリのセットを生成します。マルチプラットフォームプロジェクトをコンパイルする場合、同じコードから複数のバイナリを生成できます。たとえば、コンパイラは同じKotlinファイルからJVMの<code>.class</code>ファイルとネイティブ実行可能ファイルを生成できます。</p><p><img src="`+e+'" alt="共通コード" width="700"></p><p>すべてのKotlinコードがすべてのプラットフォームにコンパイルできるわけではありません。Kotlinコンパイラは、プラットフォーム固有の関数やクラスを共通コードで使用することを防ぎます。なぜなら、このコードは異なるプラットフォームにコンパイルできないためです。</p><p>たとえば、<code>java.io.File</code>の依存関係を共通コードから使用することはできません。これはJDKの一部ですが、共通コードはネイティブコードにもコンパイルされ、そこではJDKクラスは利用できません。</p><p><img src="'+n+`" alt="未解決のJava参照" width="500"></p><p>共通コードでは、Kotlin Multiplatformライブラリを使用できます。これらのライブラリは、異なるプラットフォームで異なる方法で実装できる共通APIを提供します。この場合、プラットフォーム固有のAPIは追加部分として機能し、共通コードでそのようなAPIを使用しようとするとエラーになります。</p><p>たとえば、<code>kotlinx.coroutines</code>はすべてのターゲットをサポートするKotlin Multiplatformライブラリですが、<code>fun CoroutinesDispatcher.asExecutor(): Executor</code>のように<code>kotlinx.coroutines</code>の並行プリミティブをJDKの並行プリミティブに変換するプラットフォーム固有の部分も持っています。このAPIの追加部分は<code>commonMain</code>では利用できません。</p><h2 id="ターゲット" tabindex="-1">ターゲット <a class="header-anchor" href="#ターゲット" aria-label="Permalink to &quot;ターゲット&quot;">​</a></h2><p>ターゲットは、Kotlinが共通コードをコンパイルするプラットフォームを定義します。これらは、たとえばJVM、JS、Android、iOS、またはLinuxである可能性があります。前の例では、共通コードをJVMとネイティブターゲットにコンパイルしました。</p><p>_Kotlinターゲット_は、コンパイルターゲットを記述する識別子です。それは、生成されるバイナリの形式、利用可能な言語構造、および許可される依存関係を定義します。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>ターゲットはプラットフォームとも呼ばれます。サポートされているターゲットの完全なリストは<a href="./multiplatform-dsl-reference#targets">こちら</a>をご覧ください。</p></div><p>特定のターゲットのコードをコンパイルするようにKotlinに指示するには、まずターゲットを_宣言_する必要があります。Gradleでは、<code>kotlin {}</code>ブロック内で定義済みのDSL呼び出しを使用してターゲットを宣言します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Declares a JVM target</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Declares a target that corresponds to 64-bit iPhones</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>このようにして、各マルチプラットフォームプロジェクトはサポートされるターゲットのセットを定義します。ビルドスクリプトでのターゲットの宣言について詳しく知るには、<a href="./multiplatform-hierarchy">階層型プロジェクト構造</a>セクションを参照してください。</p><p><code>jvm</code>と<code>iosArm64</code>ターゲットが宣言されている場合、<code>commonMain</code>内の共通コードはこれらのターゲットにコンパイルされます。</p><p><img src="`+t+'" alt="ターゲット" width="700"></p><p>特定のターゲットにどのコードがコンパイルされるかを理解するために、ターゲットをKotlinソースファイルに付加されたラベルとして考えることができます。Kotlinはこれらのラベルを使用して、コードをコンパイルする方法、生成するバイナリ、およびそのコードで許可される言語構造と依存関係を決定します。</p><p><code>greeting.kt</code>ファイルを<code>.js</code>にもコンパイルしたい場合は、JSターゲットを宣言するだけで済みます。その後、<code>commonMain</code>内のコードはJSターゲットに対応する追加の<code>js</code>ラベルを受け取り、Kotlinに<code>.js</code>ファイルを生成するように指示します。</p><p><img src="'+l+'" alt="ターゲットラベル" width="700"></p><p>これが、Kotlinコンパイラが宣言されたすべてのターゲットにコンパイルされる共通コードで動作する方法です。プラットフォーム固有のコードの記述方法については、<a href="#source-sets">ソースセット</a>を参照してください。</p><h2 id="ソースセット" tabindex="-1">ソースセット <a class="header-anchor" href="#ソースセット" aria-label="Permalink to &quot;ソースセット&quot;">​</a></h2><p>_Kotlinソースセット_は、独自のターゲット、依存関係、およびコンパイラオプションを持つソースファイルのセットです。これは、マルチプラットフォームプロジェクトでコードを共有する主要な方法です。</p><p>マルチプラットフォームプロジェクトの各ソースセットは次のとおりです。</p><ul><li>特定のプロジェクトで一意の名前を持ちます。</li><li>通常、ソースセットの名前が付いたディレクトリに保存されているソースファイルとリソースのセットを含みます。</li><li>このソースセットのコードがコンパイルされるターゲットのセットを指定します。</li><li>これらのターゲットは、このソースセットで利用可能な言語構造と依存関係に影響を与えます。</li><li>独自の依存関係とコンパイラオプションを定義します。</li></ul><p>Kotlinには、多数の事前定義されたソースセットが用意されています。そのうちの1つは<code>commonMain</code>で、すべてのマルチプラットフォームプロジェクトに存在し、宣言されたすべてのターゲットにコンパイルされます。</p><p>Kotlin Multiplatformプロジェクトでは、<code>src</code>内のディレクトリとしてソースセットを操作します。 たとえば、<code>commonMain</code>、<code>iosMain</code>、<code>jvmMain</code>のソースセットを持つプロジェクトは、次の構造を持ちます。</p><p><img src="'+o+`" alt="共有ソース" width="350"></p><p>Gradleスクリプトでは、<code>kotlin.sourceSets {}</code>ブロック内で名前によってソースセットにアクセスします。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Targets declaration:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // …</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Source set declaration:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        commonMain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // Configure the commonMain source set</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>commonMain</code>以外に、他のソースセットはプラットフォーム固有または中間である場合があります。</p><h3 id="プラットフォーム固有のソースセット" tabindex="-1">プラットフォーム固有のソースセット <a class="header-anchor" href="#プラットフォーム固有のソースセット" aria-label="Permalink to &quot;プラットフォーム固有のソースセット&quot;">​</a></h3><p>共通コードのみを持つことは便利ですが、常に可能であるとは限りません。<code>commonMain</code>内のコードは宣言されたすべてのターゲットにコンパイルされ、Kotlinはそこにプラットフォーム固有のAPIを使用することを許可しません。</p><p>ネイティブおよびJSターゲットを持つマルチプラットフォームプロジェクトでは、<code>commonMain</code>内の次のコードはコンパイルされません。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// commonMain/kotlin/common.kt</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Doesn&#39;t compile in common code</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> greeting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    java.io.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">File</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;greeting.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, Multiplatform!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>解決策として、Kotlinはプラットフォーム固有のソースセット（プラットフォームソースセットとも呼ばれる）を作成します。各ターゲットには、そのターゲットのみにコンパイルされる対応するプラットフォームソースセットがあります。たとえば、<code>jvm</code>ターゲットには、JVMのみにコンパイルされる対応する<code>jvmMain</code>ソースセットがあります。Kotlinは、これらのソースセットでプラットフォーム固有の依存関係を使用することを許可します。たとえば、<code>jvmMain</code>ではJDKを使用できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// jvmMain/kotlin/jvm.kt</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// You can use Java dependencies in the \`jvmMain\` source set</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> jvmGreeting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    java.io.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">File</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;greeting.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, Multiplatform!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="特定のターゲットへのコンパイル" tabindex="-1">特定のターゲットへのコンパイル <a class="header-anchor" href="#特定のターゲットへのコンパイル" aria-label="Permalink to &quot;特定のターゲットへのコンパイル&quot;">​</a></h3><p>特定のターゲットへのコンパイルは、複数のソースセットで機能します。Kotlinがマルチプラットフォームプロジェクトを特定のターゲットにコンパイルする場合、そのターゲットでラベル付けされたすべてのソースセットを収集し、それらからバイナリを生成します。</p><p><code>jvm</code>、<code>iosArm64</code>、および<code>js</code>ターゲットの例を考えます。Kotlinは、共通コード用の<code>commonMain</code>ソースセットと、特定のターゲットに対応する<code>jvmMain</code>、<code>iosArm64Main</code>、および<code>jsMain</code>ソースセットを作成します。</p><p><img src="`+p+'" alt="特定のターゲットへのコンパイル" width="700"></p><p>JVMへのコンパイル中、Kotlinは「JVM」とラベル付けされたすべてのソースセット、すなわち<code>jvmMain</code>と<code>commonMain</code>を選択します。その後、それらをまとめてJVMクラスファイルにコンパイルします。</p><p><img src="'+d+`" alt="JVMへのコンパイル" width="700"></p><p>Kotlinは<code>commonMain</code>と<code>jvmMain</code>を一緒にコンパイルするため、結果のバイナリには<code>commonMain</code>と<code>jvmMain</code>の両方からの宣言が含まれます。</p><p>マルチプラットフォームプロジェクトで作業する場合、次の点に注意してください。</p><ul><li>Kotlinに特定のプラットフォームにコードをコンパイルさせたい場合は、対応するターゲットを宣言します。</li><li>コードを保存するディレクトリまたはソースファイルを選択するには、まずどのターゲット間でコードを共有するかを決定します。 <ul><li>コードがすべてのターゲット間で共有される場合、<code>commonMain</code>で宣言する必要があります。</li><li>コードが1つのターゲットのみに使用される場合、そのターゲットのプラットフォーム固有のソースセット（たとえば、JVMの場合は<code>jvmMain</code>）で定義する必要があります。</li></ul></li><li>プラットフォーム固有のソースセットで記述されたコードは、共通ソースセットからの宣言にアクセスできます。たとえば、<code>jvmMain</code>内のコードは<code>commonMain</code>からのコードを使用できます。しかし、その逆は真ではありません。<code>commonMain</code>は<code>jvmMain</code>からのコードを使用できません。</li><li>プラットフォーム固有のソースセットで記述されたコードは、対応するプラットフォームの依存関係を使用できます。たとえば、<code>jvmMain</code>内のコードは、<a href="https://github.com/google/guava" target="_blank" rel="noreferrer">Guava</a>や<a href="https://spring.io/" target="_blank" rel="noreferrer">Spring</a>のようなJava専用ライブラリを使用できます。</li></ul><h3 id="中間ソースセット" tabindex="-1">中間ソースセット <a class="header-anchor" href="#中間ソースセット" aria-label="Permalink to &quot;中間ソースセット&quot;">​</a></h3><p>単純なマルチプラットフォームプロジェクトには、通常、共通コードとプラットフォーム固有のコードしかありません。<code>commonMain</code>ソースセットは、宣言されたすべてのターゲット間で共有される共通コードを表します。<code>jvmMain</code>のようなプラットフォーム固有のソースセットは、それぞれのターゲットのみにコンパイルされるプラットフォーム固有のコードを表します。</p><p>実際には、より詳細なコード共有が必要になることがよくあります。</p><p>すべての最新のAppleデバイスとAndroidデバイスをターゲットにする必要がある例を考えます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    androidTarget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 64-bit iPhone devices</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    macosArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Modern Apple Silicon-based Macs</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    watchosX64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Modern 64-bit Apple Watch devices</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    tvosArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Modern Apple TV devices  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>そして、すべてのAppleデバイス用のUUIDを生成する関数を追加するためのソースセットが必要です。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> platform.Foundation.NSUUID</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> randomUuidString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // You want to access Apple-specific APIs</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NSUUID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UUIDString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>この関数を<code>commonMain</code>に追加することはできません。<code>commonMain</code>はAndroidを含む宣言されたすべてのターゲットにコンパイルされますが、<code>platform.Foundation.NSUUID</code>はAndroidでは利用できないApple固有のAPIです。<code>commonMain</code>で<code>NSUUID</code>を参照しようとすると、Kotlinはエラーを表示します。</p><p>このコードを各Apple固有のソースセット、すなわち<code>iosArm64Main</code>、<code>macosArm64Main</code>、<code>watchosX64Main</code>、および<code>tvosArm64Main</code>にコピー＆ペーストすることもできます。しかし、このようにコードを複製する方法はエラーの原因となりやすいため、推奨されません。</p><p>この問題を解決するには、_中間ソースセット_を使用できます。中間ソースセットは、プロジェクト内のすべてのターゲットではなく、一部のターゲットにコンパイルされるKotlinソースセットです。中間ソースセットは、階層型ソースセット、または単に階層と呼ばれることもあります。</p><p>Kotlinは、デフォルトでいくつかの中間ソースセットを作成します。この特定の場合、結果のプロジェクト構造は次のようになります。</p><p><img src="`+c+'" alt="中間ソースセット" width="700"></p><p>ここで、下部の多色のブロックはプラットフォーム固有のソースセットです。分かりやすくするために、ターゲットラベルは省略されています。</p><p><code>appleMain</code>ブロックは、Apple固有のターゲットにコンパイルされるコードを共有するためにKotlinによって作成された中間ソースセットです。<code>appleMain</code>ソースセットはAppleターゲットのみにコンパイルされます。したがって、Kotlinは<code>appleMain</code>でApple固有のAPIを使用することを許可しており、<code>randomUUID()</code>関数をここに追加できます。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><a href="./multiplatform-hierarchy">階層型プロジェクト構造</a>を参照して、Kotlinがデフォルトで作成および設定するすべての中間ソースセットを見つけ、デフォルトで必要とする中間ソースセットがKotlinによって提供されない場合にどうすべきかを学びましょう。</p></div><p>特定のターゲットへのコンパイル中、Kotlinは、このターゲットでラベル付けされた中間ソースセットを含むすべてのソースセットを取得します。したがって、<code>commonMain</code>、<code>appleMain</code>、および<code>iosArm64Main</code>ソースセットに記述されたすべてのコードは、<code>iosArm64</code>プラットフォームターゲットへのコンパイル中に結合されます。</p><p><img src="'+h+'" alt="ネイティブ実行可能ファイル" width="700"></p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>一部のソースセットにソースがなくても問題ありません。たとえば、iOS開発では、通常、iOSデバイスに固有だがiOSシミュレーターには固有ではないコードを提供する必要はありません。したがって、<code>iosArm64Main</code>はめったに使用されません。</p></div>',72),a("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"appleデバイスとシミュレーターのターゲット",tabindex:"-1"},[g("Appleデバイスとシミュレーターのターゲット "),a("a",{class:"header-anchor",href:"#appleデバイスとシミュレーターのターゲット","aria-label":'Permalink to "Appleデバイスとシミュレーターのターゲット {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1),s('<p>Kotlin Multiplatformを使用してiOSモバイルアプリケーションを開発する場合、通常は<code>iosMain</code>ソースセットを使用します。<code>ios</code>ターゲットのプラットフォーム固有のソースセットだと考えるかもしれませんが、単一の<code>ios</code>ターゲットは存在しません。ほとんどのモバイルプロジェクトには、少なくとも2つのターゲットが必要です。</p><ul><li><strong>デバイスターゲット</strong>は、iOSデバイスで実行できるバイナリを生成するために使用されます。現在、iOSのデバイスターゲットは<code>iosArm64</code>のみです。</li><li><strong>シミュレーターターゲット</strong>は、お使いのマシンで起動されるiOSシミュレーター用のバイナリを生成するために使用されます。Apple silicon Macコンピューターをお持ちの場合は、<code>iosSimulatorArm64</code>をシミュレーターターゲットとして選択してください。IntelベースのMacコンピューターをお持ちの場合は、<code>iosX64</code>を使用してください。</li></ul><p><code>iosArm64</code>デバイスターゲットのみを宣言した場合、ローカルマシンでアプリケーションとテストを実行およびデバッグすることはできません。</p><p><code>iosArm64Main</code>、<code>iosSimulatorArm64Main</code>、<code>iosX64Main</code>のようなプラットフォーム固有のソースセットは、iOSデバイスとシミュレーター向けのKotlinコードが通常同じであるため、通常は空です。それらすべてでコードを共有するには、<code>iosMain</code>中間ソースセットのみを使用できます。</p><p>他のMac以外のAppleターゲットにも同じことが当てはまります。たとえば、Apple TV用の<code>tvosArm64</code>デバイスターゲットと、Apple siliconおよびIntelベースのデバイス上のApple TVシミュレーター用の<code>tvosSimulatorArm64</code>および<code>tvosX64</code>シミュレーターターゲットがある場合、それらすべてに<code>tvosMain</code>中間ソースセットを使用できます。</p><h2 id="テストとの統合" tabindex="-1">テストとの統合 <a class="header-anchor" href="#テストとの統合" aria-label="Permalink to &quot;テストとの統合&quot;">​</a></h2><p>実際のプロジェクトでは、主要なプロダクションコードに加えてテストも必要です。これが、デフォルトで作成されるすべてのソースセットに<code>Main</code>と<code>Test</code>のサフィックスが付いている理由です。<code>Main</code>にはプロダクションコードが含まれ、<code>Test</code>にはこのコードのテストが含まれます。それらの間の接続は自動的に確立され、テストは追加の構成なしで<code>Main</code>コードによって提供されるAPIを使用できます。</p><p><code>Test</code>に対応するものは、<code>Main</code>と同様にソースセットです。たとえば、<code>commonTest</code>は<code>commonMain</code>の対応物であり、宣言されたすべてのターゲットにコンパイルされるため、共通テストを記述できます。<code>jvmTest</code>のようなプラットフォーム固有のテストソースセットは、プラットフォーム固有のテスト、たとえばJVM固有のテストやJVM APIを必要とするテストを記述するために使用されます。</p><p>共通テストを記述するためのソースセットがあるだけでなく、マルチプラットフォームテストフレームワークも必要です。Kotlinは、<code>@kotlin.Test</code>アノテーションと<code>assertEquals</code>や<code>assertTrue</code>などのさまざまなアサーションメソッドが付属するデフォルトの<a href="https://kotlinlang.org/api/latest/kotlin.test/" target="_blank" rel="noreferrer"><code>kotlin.test</code></a>ライブラリを提供します。</p><p>各プラットフォームのプラットフォーム固有のテストを、それぞれのソースセットで通常のテストのように記述できます。メインコードと同様に、各ソースセットにプラットフォーム固有の依存関係を持つことができます。たとえば、JVMには<code>JUnit</code>、iOSには<code>XCTest</code>などです。特定のターゲットのテストを実行するには、<code>&lt;targetName&gt;Test</code>タスクを使用します。</p><p>マルチプラットフォームテストの作成と実行方法については、<a href="./multiplatform-run-tests">マルチプラットフォームアプリのテストチュートリアル</a>で学習してください。</p><h2 id="次のステップ" tabindex="-1">次のステップ <a class="header-anchor" href="#次のステップ" aria-label="Permalink to &quot;次のステップ&quot;">​</a></h2><ul><li><a href="./multiplatform-hierarchy">Gradleスクリプトで事前定義されたソースセットを宣言して使用する方法について詳しく学ぶ</a></li><li><a href="./multiplatform-advanced-project-structure">マルチプラットフォームプロジェクト構造の高度な概念を探求する</a></li><li><a href="./multiplatform-configure-compilations">ターゲットのコンパイルとカスタムコンパイルの作成について詳しく学ぶ</a></li></ul>',13)]))}const D=r(E,[["render",u]]);export{_ as __pageData,D as default};
