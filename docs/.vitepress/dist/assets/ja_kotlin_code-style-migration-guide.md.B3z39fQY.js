import{_ as o,a as e}from"./chunks/reformat-code.BxjpTpco.js";import{_ as n,c as a,o as l,ag as i}from"./chunks/framework.Bksy39di.js";const k=JSON.parse('{"title":"Kotlinコードスタイルへの移行","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/code-style-migration-guide.md","filePath":"ja/kotlin/code-style-migration-guide.md","lastUpdated":1754307826000}'),r={name:"ja/kotlin/code-style-migration-guide.md"};function s(d,t,p,c,g,h){return l(),a("div",null,t[0]||(t[0]=[i('<h1 id="kotlinコードスタイルへの移行" tabindex="-1">Kotlinコードスタイルへの移行 <a class="header-anchor" href="#kotlinコードスタイルへの移行" aria-label="Permalink to &quot;Kotlinコードスタイルへの移行&quot;">​</a></h1><h2 id="kotlinコーディング規約とintellij-ideaフォーマッタ" tabindex="-1">Kotlinコーディング規約とIntelliJ IDEAフォーマッタ <a class="header-anchor" href="#kotlinコーディング規約とintellij-ideaフォーマッタ" aria-label="Permalink to &quot;Kotlinコーディング規約とIntelliJ IDEAフォーマッタ&quot;">​</a></h2><p><a href="/ja/kotlin/coding-conventions">Kotlinコーディング規約</a>は、イディオマティックなKotlinの記述に関するいくつかの側面に影響を与え、その中にはKotlinコードの可読性を向上させることを目的とした一連のフォーマットに関する推奨事項が含まれています。</p><p>残念ながら、IntelliJ IDEAに組み込まれているコードフォーマッタは、このドキュメントがリリースされるはるか以前から機能しており、現在推奨されているものとは異なるフォーマットを生成するデフォルト設定になっています。</p><p>IntelliJ IDEAのデフォルト設定を切り替え、フォーマットをKotlinコーディング規約と一致させることで、この不明瞭さを解消することが論理的な次のステップに思えるかもしれません。しかし、これは既存のすべてのKotlinプロジェクトで、Kotlinプラグインがインストールされた瞬間に新しいコードスタイルが有効になることを意味します。プラグインの更新としては、あまり期待される結果ではありませんよね？</p><p>そのため、代わりに以下の移行計画を立てています。</p><ul><li>Kotlin 1.3以降、デフォルトで公式のコードスタイルフォーマットを有効にし、新しいプロジェクトにのみ適用します（古いフォーマットは手動で有効にできます）。</li><li>既存プロジェクトの作成者は、Kotlinコーディング規約に移行することを選択できます。</li><li>既存プロジェクトの作成者は、プロジェクトで古いコードスタイルを使用することを明示的に宣言することを選択できます（これにより、将来的にデフォルトへの切り替えによる影響を受けなくなります）。</li><li>Kotlin 1.4でデフォルトのフォーマットに切り替え、Kotlinコーディング規約と一致させます。</li></ul><h2 id="「kotlinコーディング規約」と「intellij-ideaのデフォルトコードスタイル」の違い" tabindex="-1">「Kotlinコーディング規約」と「IntelliJ IDEAのデフォルトコードスタイル」の違い <a class="header-anchor" href="#「kotlinコーディング規約」と「intellij-ideaのデフォルトコードスタイル」の違い" aria-label="Permalink to &quot;「Kotlinコーディング規約」と「IntelliJ IDEAのデフォルトコードスタイル」の違い&quot;">​</a></h2><p>最も注目すべき変更は、継続インデントのポリシーです。複数行の式が前の行で終了していないことを示すために、ダブルインデントを使用するという良い考え方があります。これは非常にシンプルで一般的なルールですが、この方法でフォーマットされると、いくつかのKotlinの構文は少し不格好に見えます。Kotlinコーディング規約では、以前に長い継続インデントが強制されていたケースでは、シングルインデントを使用することが推奨されています。</p><img src="'+o+`" alt="Code formatting" width="700"><p>実際には、かなり多くのコードが影響を受けるため、これは主要なコードスタイルの更新と見なすことができます。</p><h2 id="新しいコードスタイルへの移行に関する議論" tabindex="-1">新しいコードスタイルへの移行に関する議論 <a class="header-anchor" href="#新しいコードスタイルへの移行に関する議論" aria-label="Permalink to &quot;新しいコードスタイルへの移行に関する議論&quot;">​</a></h2><p>新しいコードスタイルの採用は、古い方法でフォーマットされたコードがない新しいプロジェクトから開始される場合、非常に自然なプロセスとなるでしょう。そのため、バージョン1.3以降、Kotlin IntelliJプラグインは、デフォルトで有効になっている<a href="/ja/kotlin/coding-conventions">コーディング規約</a>ドキュメントからのフォーマットで新しいプロジェクトを作成します。</p><p>既存のプロジェクトでフォーマットを変更することは、はるかに要求の厳しいタスクであり、チームとすべての注意点を議論することから始めるべきでしょう。</p><p>既存のプロジェクトでコードスタイルを変更する主な欠点は、blame/annotate VCS機能が無関係なコミットを指すことが多くなることです。各VCSにはこの問題に対処するための何らかの方法がありますが（IntelliJ IDEAでは<a href="https://www.jetbrains.com/help/idea/investigate-changes.html" target="_blank" rel="noreferrer">&quot;Annotate Previous Revision&quot;</a>を使用できます）、新しいスタイルがすべての労力に見合う価値があるかどうかを決定することが重要です。再フォーマットのコミットを意味のある変更から分離する慣行は、後続の調査に大いに役立ちます。</p><p>また、大規模なチームにとっては移行がより困難になる場合があります。複数のサブシステムで多数のファイルをコミットすると、個人のブランチでマージの競合が発生する可能性があるためです。各競合の解決は通常は些細なことですが、現在作業中の大規模な機能ブランチがあるかどうかを知ることは依然として賢明です。</p><p>一般的に、小規模なプロジェクトでは、すべてのファイルを一度に変換することをお勧めします。</p><p>中規模および大規模プロジェクトの場合、その決定は困難な場合があります。すぐに多くのファイルを更新する準備ができていない場合は、モジュールごとに移行するか、変更されたファイルのみを段階的に移行し続けることを決定できます。</p><h2 id="新しいコードスタイルへの移行" tabindex="-1">新しいコードスタイルへの移行 <a class="header-anchor" href="#新しいコードスタイルへの移行" aria-label="Permalink to &quot;新しいコードスタイルへの移行&quot;">​</a></h2><p>Kotlinコーディング規約のコードスタイルに切り替えるには、<strong>設定/環境設定</strong> | <strong>エディター</strong> | <strong>コードスタイル</strong> | <strong>Kotlin</strong> ダイアログで行えます。スキームを<strong>プロジェクト</strong>に切り替え、<strong>設定から...</strong> | <strong>Kotlinスタイルガイド</strong> を有効にしてください。</p><p>すべてのプロジェクト開発者とこれらの変更を共有するには、<code>.idea/codeStyle</code> フォルダーをVCSにコミットする必要があります。</p><p>外部ビルドシステムがプロジェクトの設定に使用されており、<code>.idea/codeStyle</code> フォルダーを共有しないと決定された場合、追加のプロパティを使用してKotlinコーディング規約を強制することができます。</p><h3 id="gradleの場合" tabindex="-1">Gradleの場合 <a class="header-anchor" href="#gradleの場合" aria-label="Permalink to &quot;Gradleの場合&quot;">​</a></h3><p>プロジェクトのルートにある <code>gradle.properties</code> ファイルに <code>kotlin.code.style=official</code> プロパティを追加し、そのファイルをVCSにコミットします。</p><h3 id="mavenの場合" tabindex="-1">Mavenの場合 <a class="header-anchor" href="#mavenの場合" aria-label="Permalink to &quot;Mavenの場合&quot;">​</a></h3><p>ルートの <code>pom.xml</code> プロジェクトファイルに <code>kotlin.code.style official</code> プロパティを追加します。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;properties&gt;</span></span>
<span class="line"><span>  &lt;kotlin.code.style&gt;official&lt;/kotlin.code.style&gt;</span></span>
<span class="line"><span>&lt;/properties&gt;</span></span></code></pre></div><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p><strong>kotlin.code.style</strong> オプションが設定されていると、プロジェクトのインポート中にコードスタイルスキームが変更され、コードスタイル設定が変わる可能性があります。</p></div><p>コードスタイル設定を更新した後、プロジェクトビューで目的のスコープに対して<strong>コードの再フォーマット</strong>を有効にしてください。</p><img src="`+e+'" alt="Reformat code" width="500"><p>段階的な移行のために、<strong>プロジェクト設定に従ってファイルがフォーマットされていません</strong>というインスペクションを有効にすることができます。これにより、再フォーマットすべき箇所がハイライトされます。<strong>変更されたファイルにのみ適用</strong>オプションを有効にした後、インスペクションは変更されたファイルのみでフォーマットの問題を表示します。そのようなファイルはいずれにせよすぐにコミットされる可能性が高いからです。</p><h2 id="プロジェクトに古いコードスタイルを保存する" tabindex="-1">プロジェクトに古いコードスタイルを保存する <a class="header-anchor" href="#プロジェクトに古いコードスタイルを保存する" aria-label="Permalink to &quot;プロジェクトに古いコードスタイルを保存する&quot;">​</a></h2><p>プロジェクトの正しいコードスタイルとしてIntelliJ IDEAのコードスタイルを明示的に設定することは常に可能です。</p><ol><li><strong>設定/環境設定</strong> | <strong>エディター</strong> | <strong>コードスタイル</strong> | <strong>Kotlin</strong> で、<strong>プロジェクト</strong>スキームに切り替えます。</li><li><strong>ロード/保存</strong>タブを開き、<strong>デフォルトを使用</strong>から<strong>Kotlin廃止済みIntelliJ IDEAコードスタイル</strong>を選択します。</li></ol><p>プロジェクト開発者間で変更を共有するには、<code>.idea/codeStyle</code> フォルダーをVCSにコミットする必要があります。あるいは、GradleまたはMavenで構成されたプロジェクトでは、<strong>kotlin.code.style</strong>=<strong>obsolete</strong>を使用することもできます。</p>',35)]))}const f=n(r,[["render",s]]);export{k as __pageData,f as default};
