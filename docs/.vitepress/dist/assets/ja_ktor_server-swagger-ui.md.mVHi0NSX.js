import{_ as u,C as a,c as E,o as y,G as e,ag as o,w as t,j as i,a as n}from"./chunks/framework.Bksy39di.js";const C=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ja/ktor/server-swagger-ui.md","filePath":"ja/ktor/server-swagger-ui.md","lastUpdated":1755457140000}'),m={name:"ja/ktor/server-swagger-ui.md"};function v(_,s,w,b,F,I){const p=a("TopicTitle"),k=a("primary-label"),g=a("Links"),h=a("tldr"),d=a("link-summary"),r=a("code-block"),l=a("TabItem"),c=a("Tabs");return y(),E("div",null,[e(p,{labelRef:"server-plugin",title:"Swagger UI"}),e(k,{ref:"server-plugin"},null,512),e(h,null,{default:t(()=>[s[3]||(s[3]=i("p",null,[i("b",null,"必要な依存関係"),n(": "),i("code",null,"io.ktor:ktor-server-swagger")],-1)),s[4]||(s[4]=i("p",null,[i("b",null,"コード例"),n(": "),i("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/json-kotlinx-openapi"}," json-kotlinx-openapi ")],-1)),i("p",null,[i("b",null,[e(g,{href:"/ktor/server-native",summary:"Ktor は Kotlin/Native をサポートしており、追加のランタイムや仮想マシンなしでサーバーを実行できます。"},{default:t(()=>s[0]||(s[0]=[n("Native サーバー")])),_:1}),s[1]||(s[1]=n(" のサポート"))]),s[2]||(s[2]=n(": ✖️ "))])]),_:1}),e(d,null,{default:t(()=>s[5]||(s[5]=[n(" Swagger UI プラグインを使用すると、プロジェクト用の Swagger UI を生成できます。 ")])),_:1}),s[6]||(s[6]=o('<p>Ktor は、既存の OpenAPI 仕様に基づいて、プロジェクト用の Swagger UI を生成して提供できます。Swagger UI を使用すると、API リソースを視覚化し、操作できます。</p><blockquote><p>コードから OpenAPI 定義を生成したり、その逆を行ったりするために、次のツールを利用できます。</p><ul><li>IntelliJ IDEA 用の <a href="https://www.jetbrains.com/help/idea/ktor.html#openapi" target="_blank" rel="noreferrer">Ktor プラグイン</a> は、サーバーサイド Ktor アプリケーションの OpenAPI ドキュメントを生成する機能を提供します。</li><li><a href="https://github.com/OpenAPITools/openapi-generator" target="_blank" rel="noreferrer">OpenAPI generator</a> を使用すると、<a href="./https://github.com/OpenAPITools/openapi-generator/blob/master/docs/generators/kotlin-server">kotlin-server</a> ジェネレーターを使って、API 定義から Ktor プロジェクトを作成できます。また、IntelliJ IDEA の<a href="https://www.jetbrains.com/help/idea/openapi.html#codegen" target="_blank" rel="noreferrer">機能</a>を使用することもできます。</li></ul></blockquote><p id="open-api-note"></p><h2 id="add_dependencies" tabindex="-1">依存関係を追加する <a class="header-anchor" href="#add_dependencies" aria-label="Permalink to &quot;依存関係を追加する {id=&quot;add_dependencies&quot;}&quot;">​</a></h2><p>Swagger UI を提供するには、ビルドスクリプトに <code>ktor-server-swagger</code> アーティファクトを追加する必要があります。</p>',5)),e(c,{group:"languages"},{default:t(()=>[e(l,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:t(()=>[e(r,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-server-swagger:$ktor_version")'})]),_:1}),e(l,{title:"Gradle (Groovy)","group-key":"groovy"},{default:t(()=>[e(r,{lang:"Groovy",code:'            implementation "io.ktor:ktor-server-swagger:$ktor_version"'})]),_:1}),e(l,{title:"Maven","group-key":"maven"},{default:t(()=>[e(r,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-server-swagger-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),s[7]||(s[7]=o(`<h2 id="configure-swagger" tabindex="-1">Swagger UI を設定する <a class="header-anchor" href="#configure-swagger" aria-label="Permalink to &quot;Swagger UI を設定する {id=&quot;configure-swagger&quot;}&quot;">​</a></h2><p>Swagger UI を提供するには、<code>swaggerFile</code> に配置された OpenAPI 仕様からレンダリングされる、<code>path</code> に Swagger UI を含む <code>GET</code> エンドポイントを作成する <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-swagger/io.ktor.server.plugins.swagger/swagger-u-i.html" target="_blank" rel="noreferrer">swaggerUI</a> メソッドを呼び出す必要があります。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.plugins.swagger.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    swaggerUI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;swagger&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, swaggerFile </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;openapi/documentation.yaml&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>このメソッドは、アプリケーションリソース内で OpenAPI 仕様を検索しようとします。それ以外の場合は、<code>java.io.File</code> を使用してファイルシステムから OpenAPI 仕様を読み込もうとします。</p><p>オプションで、<code>swaggerUI</code> ブロック内で Swagger UI をカスタマイズできます。たとえば、別の Swagger UI バージョンを使用したり、カスタムスタイルを適用したりできます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    swaggerUI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;swagger&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, swaggerFile </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;openapi/documentation.yaml&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        version </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;4.15.5&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>これでアプリケーションを<a href="./server-run">実行</a>し、<code>/swagger</code> ページを開いて利用可能なエンドポイントを確認し、テストできます。</p><h2 id="configure-cors" tabindex="-1">CORS を設定する <a class="header-anchor" href="#configure-cors" aria-label="Permalink to &quot;CORS を設定する {id=&quot;configure-cors&quot;}&quot;">​</a></h2><p>API が Swagger UI とうまく連携するようにするには、<a href="./server-cors">Cross-Origin Resource Sharing (CORS)</a> のポリシーを設定する必要があります。 以下の例は、次の CORS 設定を適用します。</p><ul><li><code>anyHost</code> は、任意のホストからのクロスオリジンリクエストを有効にします。</li><li><code>allowHeader</code> は、<a href="./server-serialization">コンテンツネゴシエーション</a>で使用される <code>Content-Type</code> クライアントヘッダーを許可します。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CORS) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    anyHost</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    allowHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HttpHeaders.ContentType)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,11))])}const S=u(m,[["render",v]]);export{C as __pageData,S as default};
