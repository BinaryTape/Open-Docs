import{_ as l,C as e,c as p,o as h,j as s,ag as a,G as k,a as t}from"./chunks/framework.Bksy39di.js";const u=JSON.parse('{"title":"针对库作者的向后兼容性指南","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/api-guidelines-backward-compatibility.md","filePath":"kotlin/api-guidelines-backward-compatibility.md","lastUpdated":1754307826000}'),d={name:"kotlin/api-guidelines-backward-compatibility.md"};function r(o,i,c,g,E,y){const n=e("TopicTitle");return h(),p("div",null,[i[0]||(i[0]=s("h1",{id:"针对库作者的向后兼容性指南",tabindex:"-1"},[t("针对库作者的向后兼容性指南 "),s("a",{class:"header-anchor",href:"#针对库作者的向后兼容性指南","aria-label":'Permalink to "针对库作者的向后兼容性指南"'},"​")],-1)),i[1]||(i[1]=s("p",null,"创建库最常见的动机是向更广泛的社区暴露功能性。这个社区可能是一个单个团队、一家公司、一个特定行业或一个技术平台。在每种情况下，向后兼容性都将是一个重要考量。社区越广泛，向后兼容性就越重要，因为你将越不清楚你的用户是谁以及他们工作所受的限制。",-1)),i[2]||(i[2]=s("p",null,"向后兼容性并非单一术语，而可以在二进制、源代码和行为层面定义。本节将提供关于这些类型的更多信息。",-1)),i[3]||(i[3]=s("p",null,"请注意：",-1)),i[4]||(i[4]=s("ul",null,[s("li",null,"在不破坏源代码兼容性的情况下，可能会破坏二进制兼容性，反之亦然。"),s("li",null,"保证源代码兼容性是期望的，但非常困难。作为库作者，你必须考虑库用户可能调用或实例化函数或类型的每种可能方式。源代码兼容性通常是一种愿望，而非承诺。")],-1)),i[5]||(i[5]=s("p",null,"本节的其余部分将描述你可以采取的行动以及可以使用的工具，以帮助确保不同类型的兼容性。",-1)),i[6]||(i[6]=s("h2",{"initial-collapse-state":"collapsed",collapsible:"true",id:"兼容性类型",tabindex:"-1"},[t("兼容性类型 "),s("a",{class:"header-anchor",href:"#兼容性类型","aria-label":'Permalink to "兼容性类型 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),i[7]||(i[7]=a('<p><strong>二进制兼容性</strong>意味着库的新版本可以替换之前编译的库版本。任何针对先前库版本编译的软件都应继续正常工作。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>关于二进制兼容性，请参阅 <a href="https://github.com/Kotlin/binary-compatibility-validator?tab=readme-ov-file#what-makes-an-incompatible-change-to-the-public-binary-api" target="_blank" rel="noreferrer">Binary compatibility validator 的 README</a> 或 <a href="https://github.com/eclipse-platform/eclipse.platform/blob/master/docs/Evolving-Java-based-APIs-2.md" target="_blank" rel="noreferrer">演进基于 Java 的 API</a> 文档。</p></div><p><strong>源代码兼容性</strong>意味着库的新版本可以替换旧版本，而无需修改使用该库的任何源代码。然而，编译此客户端代码的输出可能不再与编译库的输出兼容，因此客户端代码必须针对库的新版本重新构建以保证兼容性。</p><p><strong>行为兼容性</strong>意味着库的新版本不会修改现有功能性，除非是为了修复 bug。所涉及的特性保持不变，并且它们具有相同的语义。</p><h2 id="使用-binary-compatibility-validator" tabindex="-1">使用 Binary compatibility validator <a class="header-anchor" href="#使用-binary-compatibility-validator" aria-label="Permalink to &quot;使用 Binary compatibility validator&quot;">​</a></h2><p>JetBrains 提供了一个 <a href="https://github.com/Kotlin/binary-compatibility-validator" target="_blank" rel="noreferrer">Binary compatibility validator</a> 工具，可用于确保 API 不同版本间的二进制兼容性。</p><p>该工具实现为一个 Gradle 插件，它会为你的构建添加两个任务：</p><ul><li><code>apiDump</code> 任务创建一个人类可读的 <code>.api</code> 文件，用于描述你的 API。</li><li><code>apiCheck</code> 任务将已保存的 API 描述与当前构建中编译的类进行比较。</li></ul><p><code>apiCheck</code> 任务在构建时由标准 Gradle <code>check</code> 任务调用。当兼容性被破坏时，构建会失败。此时，你应该手动运行 <code>apiDump</code> 任务，并比较旧版本和新版本之间的差异。如果你对更改满意，可以更新位于你的版本控制系统中的现有 <code>.api</code> 文件。</p><p>该验证器对多平台库生成的 <a href="https://github.com/Kotlin/binary-compatibility-validator?tab=readme-ov-file#experimental-klib-abi-validation-support" target="_blank" rel="noreferrer">KLibs 验证提供了实验性支持</a>。</p>',10)),k(n,{id:"kotlin-gradle-插件中的二进制兼容性验证",level:"3",title:"Kotlin Gradle 插件中的二进制兼容性验证",labelRef:"experimental-general"}),i[8]||(i[8]=a(`<p>从 2.2.0 版本开始，Kotlin Gradle 插件支持二进制兼容性验证。关于更多信息，请参见 <a href="/kotlin/gradle-binary-compatibility-validation">Kotlin Gradle 插件中的二进制兼容性验证</a>。</p><h2 id="显式指定返回类型" tabindex="-1">显式指定返回类型 <a class="header-anchor" href="#显式指定返回类型" aria-label="Permalink to &quot;显式指定返回类型&quot;">​</a></h2><p>正如 <a href="/kotlin/coding-conventions#coding-conventions-for-libraries">Kotlin 编码规范</a> 中讨论的，你应该始终在 API 中显式指定函数返回类型和属性类型。另请参见关于 <a href="/kotlin/api-guidelines-simplicity#use-explicit-api-mode">显式 API 模式</a> 的部分。</p><p>考虑以下示例，其中库作者创建了一个 <code>JsonDeserializer</code>，并为了方便，使用一个扩展函数将其与 <code>Int</code> 类型关联：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> JsonDeserializer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fromJson: (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) -&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> deserialize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(input: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        ..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">defaultDeserializer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> JsonDeserializer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">. }</span></span></code></pre></div><p>假设作者将此实现替换为 <code>JsonOrXmlDeserializer</code>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> JsonOrXmlDeserializer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fromJson: (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) -&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fromXML: (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) -&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> deserialize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(input: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        ..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">defaultDeserializer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> JsonOrXmlDeserializer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">. }, { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">. })</span></span></code></pre></div><p>现有功能性将继续工作，并增加了反序列化 XML 的能力。然而，这会破坏二进制兼容性。</p><h2 id="避免向现有-api-函数添加实参" tabindex="-1">避免向现有 API 函数添加实参 <a class="header-anchor" href="#避免向现有-api-函数添加实参" aria-label="Permalink to &quot;避免向现有 API 函数添加实参&quot;">​</a></h2><p>向公共 API 添加非默认实参会破坏二进制兼容性<strong>和</strong>源代码兼容性，因为用户在调用时需要提供比以前更多的信息。然而，即使添加 <a href="/kotlin/functions#parameters-with-default-values">默认实参</a> 也可能破坏兼容性。</p><p>例如，假设你在 <code>lib.kt</code> 文件中有以下函数：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fib</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> … </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 返回零</span></span></code></pre></div><p>以及在 <code>client.kt</code> 文件中的以下函数：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fib</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 打印零</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在 JVM 上编译这两个文件将生成 <code>LibKt.class</code> 和 <code>ClientKt.class</code> 文件。</p><p>假设你重新实现并编译 <code>fib</code> 函数以表示斐波那契数列，使得 <code>fib(3)</code> 返回 2，<code>fib(4)</code> 返回 3，等等。你添加了一个形参，但赋予它一个默认值零以保留现有行为：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fib</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(input: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> … </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 返回斐波那契数列成员</span></span></code></pre></div><p>现在你需要重新编译 <code>lib.kt</code> 文件。你可能期望 <code>client.kt</code> 文件不需要重新编译，并且相关联的类文件可以按如下方式调用：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kotlin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ClientKt.class</span></span></code></pre></div><p>但是如果你尝试这样做，会发生 <code>NoSuchMethodError</code>：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Exception in thread &quot;main&quot; java.lang.NoSuchMethodError: &#39;int LibKt.fib()&#39;</span></span>
<span class="line"><span>       at LibKt.main(fib.kt:2)</span></span>
<span class="line"><span>       at LibKt.main(fib.kt)</span></span>
<span class="line"><span>       …</span></span></code></pre></div><p>这是因为该方法的签名在 Kotlin/JVM 编译器生成的字节码中发生了改变，从而破坏了二进制兼容性。</p><p>然而，源代码兼容性得以保留。如果你重新编译这两个文件，程序将像以前一样运行。</p>`,23)),i[9]||(i[9]=s("h3",{"initial-collapse-state":"collapsed",collapsible:"true",id:"使用重载保留兼容性",tabindex:"-1"},[t("使用重载保留兼容性 "),s("a",{class:"header-anchor",href:"#使用重载保留兼容性","aria-label":'Permalink to "使用重载保留兼容性 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),i[10]||(i[10]=a(`<p>在为 JVM 编写 Kotlin 代码时，你可以在带有默认实参的函数上使用 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.jvm/-jvm-overloads/" target="_blank" rel="noreferrer"><code>@JvmOverloads</code></a> 注解。这会为该函数生成重载，每个带有默认实参且可以从形参列表末尾省略的形参都对应一个重载。通过这些单独生成的函数，在形参列表末尾添加新形参可以保留二进制兼容性，因为它不会改变输出中任何现有函数，只是添加了一个新函数。</p><p>例如，上述函数可以像这样进行注解：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JvmOverloads</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fib</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(input: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> …</span></span></code></pre></div><p>这将在输出字节码中生成两个方法，一个没有形参，一个带有 <code>Int</code> 形参：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> static </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fib</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()I</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> static </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fib</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(I)I</span></span></code></pre></div><p>对于所有 Kotlin 目标平台，你可以选择手动创建函数的多个重载，而不是只创建一个接受默认实参的函数来保留二进制兼容性。在上面的示例中，这意味着为需要接受 <code>Int</code> 形参的情况创建一个单独的 <code>fib</code> 函数：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fib</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> …</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fib</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(input: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> …</span></span></code></pre></div><h2 id="避免拓宽或窄化返回类型" tabindex="-1">避免拓宽或窄化返回类型 <a class="header-anchor" href="#避免拓宽或窄化返回类型" aria-label="Permalink to &quot;避免拓宽或窄化返回类型&quot;">​</a></h2><p>在演进 API 时，通常会想要拓宽或窄化函数的返回类型。例如，在 API 的即将发布版本中，你可能希望将返回类型从 <code>List</code> 切换到 <code>Collection</code>，或从 <code>Collection</code> 切换到 <code>List</code>。</p><p>你可能希望将类型窄化为 <code>List</code> 以满足用户对索引支持的需求。相反地，你可能希望将类型拓宽为 <code>Collection</code>，因为你意识到你正在处理的数据没有自然顺序。</p><p>很容易理解为什么拓宽返回类型会破坏兼容性。例如，将返回类型从 <code>List</code> 转换为 <code>Collection</code> 会破坏所有使用索引的代码。</p><p>你可能认为窄化返回类型，例如从 <code>Collection</code> 到 <code>List</code>，会保留兼容性。不幸的是，虽然源代码兼容性得以保留，但二进制兼容性却被破坏了。</p><p>假设你在 <code>Library.kt</code> 文件中有一个演示函数：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> demo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Number</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span></span></code></pre></div><p>以及在 <code>Client.kt</code> 文件中该函数的客户端：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">demo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 打印 3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>设想一个场景，你改变了 <code>demo</code> 的返回类型，并且只重新编译 <code>Library.kt</code>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> demo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span></span></code></pre></div><p>当你重新运行客户端时，将发生以下错误（在 JVM 上）：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Exception in thread &quot;main&quot; java.lang.NoSuchMethodError: &#39;java.lang.Number Library.demo()&#39;</span></span>
<span class="line"><span>        at ClientKt.main(call.kt:2)</span></span>
<span class="line"><span>        at ClientKt.main(call.kt)</span></span>
<span class="line"><span>        …</span></span></code></pre></div><p>这发生是因为从 <code>main</code> 方法生成的字节码中包含以下指令：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>0: invokestatic  #12 // Method Library.demo:()Ljava/lang/Number;</span></span></code></pre></div><p>JVM 正在尝试调用一个名为 <code>demo</code> 且返回 <code>Number</code> 的静态方法。然而，由于此方法不再存在，你已破坏了二进制兼容性。</p><h2 id="避免在-api-中使用数据类" tabindex="-1">避免在 API 中使用数据类 <a class="header-anchor" href="#避免在-api-中使用数据类" aria-label="Permalink to &quot;避免在 API 中使用数据类&quot;">​</a></h2><p>在常规开发中，数据类的优点在于它会为你生成额外的函数。在 API 设计中，这个优点却变成了缺点。</p><p>例如，假设你在 API 中使用以下数据类：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> email: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>之后，你可能想要添加一个名为 <code>active</code> 的属性：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> email: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> active: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Boolean</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>这会以两种方式破坏二进制兼容性。首先，生成的构造函数将具有不同的签名。此外，生成的 <code>copy</code> 方法的签名也发生了变化。</p><p>原始签名（在 Kotlin/JVM 上）将是：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>public final User copy(java.lang.String, java.lang.String)</span></span></code></pre></div><p>添加 <code>active</code> 属性后，签名变为：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>public final User copy(java.lang.String, java.lang.String, boolean)</span></span></code></pre></div><p>与构造函数一样，这会破坏二进制兼容性。</p><p>通过手动编写辅助构造函数并覆盖 <code>copy</code> 方法，可以解决这些问题。然而，所涉及的努力抵消了使用数据类的便利性。</p><p>数据类的另一个问题是，改变构造函数实参的顺序会影响生成的 <code>componentX</code> 方法，这些方法用于解构。即使它不破坏二进制兼容性，改变顺序也肯定会破坏行为兼容性。</p><h2 id="使用-publishedapi-注解的考量" tabindex="-1">使用 PublishedApi 注解的考量 <a class="header-anchor" href="#使用-publishedapi-注解的考量" aria-label="Permalink to &quot;使用 PublishedApi 注解的考量&quot;">​</a></h2><p>Kotlin 允许内联函数成为库 API 的一部分。对这些函数的调用将被内联到用户编写的客户端代码中。这可能引入兼容性问题，因此这些函数不允许调用非公共 API 声明。</p><p>如果你需要从内联的公共函数中调用库的内部 API，你可以通过使用 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-published-api/" target="_blank" rel="noreferrer"><code>@PublishedApi</code></a> 注解来实现。这使得内部声明实际上成为公共的，因为对它的引用最终将出现在编译后的客户端代码中。因此，在对其进行更改时，必须将其视为与公共声明相同，因为这些更改可能会影响二进制兼容性。</p><h2 id="务实地演进-api" tabindex="-1">务实地演进 API <a class="header-anchor" href="#务实地演进-api" aria-label="Permalink to &quot;务实地演进 API&quot;">​</a></h2><p>在某些情况下，你可能需要随着时间的推移，通过删除或更改现有声明来对库的 API 进行破坏性更改。在本节中，我们将讨论如何务实地处理此类情况。</p><p>当用户升级到库的新版本时，他们不应在项目源代码中遇到对库 API 的未解析引用。与其立即从库的公共 API 中移除某些内容，不如遵循弃用周期。这样，你可以给用户时间迁移到替代方案。</p><p>在旧声明上使用 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-deprecated/" target="_blank" rel="noreferrer"><code>@Deprecated</code></a> 注解，以表明它正在被替换。此注解的形参提供了关于弃用的重要详细信息：</p><ul><li><code>message</code> 应解释正在更改什么以及为什么。</li><li>在可能的情况下，应使用 <code>replaceWith</code> 形参来提供到新 API 的自动迁移。</li><li>应使用弃用级别来逐步弃用 API。欲了解更多信息，请参见 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-deprecated/" target="_blank" rel="noreferrer">Kotlin 文档的 Deprecated 页面</a>。</li></ul><p>通常，弃用应首先产生警告，然后是错误，最后隐藏该声明。此过程应跨多个次要版本发生，给用户时间在其项目中进行任何所需的更改。破坏性更改，例如移除 API，应只发生在主要版本中。库可以采用不同的版本控制和弃用策略，但这必须告知其用户以设定正确的预期。</p><p>你可以在 <a href="/kotlin/kotlin-evolution-principles#libraries">Kotlin 演进原则文档</a> 或 Leonid Startsev 在 KotlinConf 2023 上发表的 <a href="https://www.youtube.com/watch?v=cCgXtpVPO-o&amp;t=1468s" target="_blank" rel="noreferrer">为客户端无痛演进你的 Kotlin API 演讲</a> 中了解更多信息。</p><h2 id="使用-requiresoptin-机制" tabindex="-1">使用 RequiresOptIn 机制 <a class="header-anchor" href="#使用-requiresoptin-机制" aria-label="Permalink to &quot;使用 RequiresOptIn 机制&quot;">​</a></h2><p>Kotlin 标准库 <a href="/kotlin/opt-in-requirements">提供了 opt-in 机制</a>，要求用户在使用你 API 的一部分之前显式同意。这基于创建标记注解，这些注解本身被 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-requires-opt-in/" target="_blank" rel="noreferrer"><code>@RequiresOptIn</code></a> 注解。你应该使用此机制来管理关于源代码和行为兼容性的预期，特别是在向库引入新 API 时。</p><p>如果你选择使用此机制，我们建议遵循以下最佳实践：</p><ul><li>使用 opt-in 机制为 API 的不同部分提供不同的保证。例如，你可以将特性标记为 <em>预览</em>、<em>实验性</em> 和 <em>敏感</em>。每个类别都应在你的文档和 <a href="/kotlin/kotlin-doc">KDoc 注释</a> 中清晰解释，并附带适当的警告消息。</li><li>如果你的库使用了实验性的 API，请 <a href="/kotlin/opt-in-requirements#propagate-opt-in-requirements">将注解传播</a> 给你的用户。这确保你的用户了解你存在仍在演进的依赖项。</li><li>避免使用 opt-in 机制弃用库中已存在的声明。相反，请使用 <code>@Deprecated</code>，正如 <a href="#evolve-apis-pragmatically">务实地演进 API</a> 部分中所述。</li></ul><h2 id="接下来" tabindex="-1">接下来 <a class="header-anchor" href="#接下来" aria-label="Permalink to &quot;接下来&quot;">​</a></h2><p>如果你还没有，请考虑查看以下页面：</p><ul><li>在 <a href="/kotlin/api-guidelines-minimizing-mental-complexity">最小化心智复杂性</a> 页面中探索最小化心智复杂性的策略。</li><li>关于有效文档实践的全面概述，请参见 <a href="/kotlin/api-guidelines-informative-documentation">信息丰富的文档</a>。</li></ul>`,54))])}const F=l(d,[["render",r]]);export{u as __pageData,F as default};
