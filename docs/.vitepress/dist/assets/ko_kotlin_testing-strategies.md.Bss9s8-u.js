import{_ as p}from"./chunks/counter-stress.dAkLADVR.js";import{_ as t,c as l,o as e,ag as i,j as s,a as n}from"./chunks/framework.Bksy39di.js";const F=JSON.parse('{"title":"스트레스 테스트 및 모델 검증","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kotlin/testing-strategies.md","filePath":"ko/kotlin/testing-strategies.md","lastUpdated":1754307826000}'),h={name:"ko/kotlin/testing-strategies.md"};function k(r,a,d,c,o,g){return e(),l("div",null,a[0]||(a[0]=[i(`<h1 id="스트레스-테스트-및-모델-검증" tabindex="-1">스트레스 테스트 및 모델 검증 <a class="header-anchor" href="#스트레스-테스트-및-모델-검증" aria-label="Permalink to &quot;스트레스 테스트 및 모델 검증&quot;">​</a></h1><p>Lincheck은 두 가지 테스트 전략을 제공합니다: 스트레스 테스트(stress testing)와 모델 검증(model checking). <a href="/ko/kotlin/introduction">이전 단계</a>의 <code>BasicCounterTest.kt</code> 파일에서 작성했던 <code>Counter</code>를 사용하여 두 접근 방식의 작동 방식을 자세히 알아보세요:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Counter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @Volatile</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> inc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ++value</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="스트레스-테스트" tabindex="-1">스트레스 테스트 <a class="header-anchor" href="#스트레스-테스트" aria-label="Permalink to &quot;스트레스 테스트&quot;">​</a></h2><h3 id="스트레스-테스트-작성" tabindex="-1">스트레스 테스트 작성 <a class="header-anchor" href="#스트레스-테스트-작성" aria-label="Permalink to &quot;스트레스 테스트 작성&quot;">​</a></h3><p>다음 단계에 따라 <code>Counter</code>에 대한 동시성 스트레스 테스트를 생성하세요:</p><ol><li><code>CounterTest</code> 클래스를 생성합니다.</li><li>이 클래스에 <code>Counter</code> 타입의 필드 <code>c</code>를 추가하고, 생성자에서 인스턴스를 생성합니다.</li><li>카운터 연산을 나열하고 <code>@Operation</code> 어노테이션으로 표시한 다음, 해당 구현을 <code>c</code>에 위임합니다.</li><li><code>StressOptions()</code>를 사용하여 스트레스 테스트 전략을 지정합니다.</li><li><code>StressOptions.check()</code> 함수를 호출하여 테스트를 실행합니다.</li></ol><p>완성된 코드는 다음과 같습니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.lincheck.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.lincheck.datastructures.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.junit.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CounterTest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Counter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Initial state</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Operations on the Counter</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @Operation</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> inc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">inc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @Operation</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @Test</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Run the test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> stressTest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> StressOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">check</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,9),s("h3",{"initial-collapse-state":"collapsed",collapsible:"true",id:"스트레스-테스트-작동-방식",tabindex:"-1"},[n("스트레스 테스트 작동 방식 "),s("a",{class:"header-anchor",href:"#스트레스-테스트-작동-방식","aria-label":'Permalink to "스트레스 테스트 작동 방식 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1),i('<p>먼저 Lincheck은 <code>@Operation</code>으로 표시된 연산을 사용하여 동시성 시나리오(concurrent scenario) 집합을 생성합니다. 그런 다음 네이티브 스레드(native thread)를 시작하고, 연산이 동시에 시작되도록 초기에 동기화합니다. 마지막으로 Lincheck은 생성된 각 시나리오를 이 네이티브 스레드에서 여러 번 실행하여 잘못된 결과를 생성하는 인터리빙(interleaving)을 찾아내려고 시도합니다.</p><p>아래 그림은 Lincheck이 생성된 시나리오를 실행하는 방식의 개요를 보여줍니다:</p><p><img src="'+p+`" alt="Stress execution of the Counter" width="700"></p><h2 id="모델-검증" tabindex="-1">모델 검증 <a class="header-anchor" href="#모델-검증" aria-label="Permalink to &quot;모델 검증&quot;">​</a></h2><p>스트레스 테스트의 주요 문제는 발견된 버그를 재현하는 방법을 이해하는 데 몇 시간을 보낼 수 있다는 점입니다. 이를 돕기 위해 Lincheck은 버그 재현을 위한 인터리빙을 자동으로 제공하는 경계 모델 검증(bounded model checking)을 지원합니다.</p><p>모델 검증 테스트는 스트레스 테스트와 동일한 방식으로 구성됩니다. 테스트 전략을 지정하는 <code>StressOptions()</code>를 <code>ModelCheckingOptions()</code>로 바꾸기만 하면 됩니다.</p><h3 id="모델-검증-테스트-작성" tabindex="-1">모델 검증 테스트 작성 <a class="header-anchor" href="#모델-검증-테스트-작성" aria-label="Permalink to &quot;모델 검증 테스트 작성&quot;">​</a></h3><p>스트레스 테스트 전략을 모델 검증으로 변경하려면 테스트에서 <code>StressOptions()</code>를 <code>ModelCheckingOptions()</code>로 바꾸세요:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.lincheck.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.lincheck.datastructures.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.junit.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CounterTest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Counter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Initial state</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Operations on the Counter</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @Operation</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> inc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">inc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @Operation</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @Test</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Run the test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> modelCheckingTest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ModelCheckingOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">check</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,9),s("h3",{"initial-collapse-state":"collapsed",collapsible:"true",id:"모델-검증-작동-방식",tabindex:"-1"},[n("모델 검증 작동 방식 "),s("a",{class:"header-anchor",href:"#모델-검증-작동-방식","aria-label":'Permalink to "모델 검증 작동 방식 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1),i(`<p>복잡한 동시성 알고리즘의 대부분의 버그는 한 스레드에서 다른 스레드로 실행을 전환하는 고전적인 인터리빙을 통해 재현할 수 있습니다. 게다가 약한 메모리 모델(weak memory model)을 위한 모델 검증기는 매우 복잡하므로, Lincheck은 <em>순차적 일관성 메모리 모델(sequential consistency memory model)</em> 하에서 경계 모델 검증을 사용합니다.</p><p>간단히 말해, Lincheck은 컨텍스트 스위치(context switch) 하나부터 시작하여 두 개, 그리고 지정된 수의 인터리빙이 검사될 때까지 프로세스를 계속하면서 모든 인터리빙을 분석합니다. 이 전략은 가장 적은 수의 컨텍스트 스위치로 잘못된 스케줄을 찾을 수 있게 하여, 버그 조사를 더 쉽게 만듭니다.</p><p>실행을 제어하기 위해 Lincheck은 테스트 코드에 특별한 스위치 지점(switch point)을 삽입합니다. 이 지점들은 컨텍스트 스위치가 수행될 수 있는 위치를 식별합니다. 기본적으로 이는 JVM에서 필드 및 배열 요소 읽기 또는 업데이트와 같은 공유 메모리 접근(shared memory access)과 <code>wait/notify</code> 및 <code>park/unpark</code> 호출입니다. 스위치 지점을 삽입하기 위해 Lincheck은 ASM 프레임워크를 사용하여 테스트 코드를 즉석에서 변환하며, 기존 코드에 내부 함수 호출을 추가합니다.</p><p>모델 검증 전략이 실행을 제어하므로, Lincheck은 잘못된 인터리빙으로 이어지는 트레이스(trace)를 제공할 수 있으며, 이는 실제 작업에서 매우 유용합니다. <a href="/ko/kotlin/introduction#trace-the-invalid-execution">Lincheck으로 첫 번째 테스트 작성하기</a> 튜토리얼에서 <code>Counter</code>의 잘못된 실행에 대한 트레이스 예시를 볼 수 있습니다.</p><h2 id="어떤-테스트-전략이-더-나은가요" tabindex="-1">어떤 테스트 전략이 더 나은가요? <a class="header-anchor" href="#어떤-테스트-전략이-더-나은가요" aria-label="Permalink to &quot;어떤 테스트 전략이 더 나은가요?&quot;">​</a></h2><p>_모델 검증 전략_은 순차적 일관성 메모리 모델 하에서 버그를 찾는 데 더 선호됩니다. 더 나은 커버리지를 보장하고 오류가 발견될 경우 실패 실행 트레이스를 제공하기 때문입니다.</p><p>_스트레스 테스트_는 어떤 커버리지도 보장하지 않지만, 누락된 <code>volatile</code> 한정자(modifier)와 같은 낮은 수준의 효과로 인해 발생하는 버그에 대해 알고리즘을 검사하는 데 여전히 유용합니다. 스트레스 테스트는 또한 재현하는 데 많은 컨텍스트 스위치가 필요한 드문 버그를 발견하는 데 큰 도움이 되며, 모델 검증 전략의 현재 제한으로 인해 모든 버그를 분석하는 것은 불가능합니다.</p><h2 id="테스트-전략-구성" tabindex="-1">테스트 전략 구성 <a class="header-anchor" href="#테스트-전략-구성" aria-label="Permalink to &quot;테스트 전략 구성&quot;">​</a></h2><p>테스트 전략을 구성하려면 <code>&lt;TestingMode&gt;Options</code> 클래스에서 옵션을 설정하세요.</p><ol><li><p><code>CounterTest</code>에 대한 시나리오 생성 및 실행 옵션을 설정합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.lincheck.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.lincheck.datastructures.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.junit.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CounterTest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Counter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @Operation</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> inc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">inc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @Operation</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> stressTest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> StressOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Stress testing options:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">actorsBefore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Number of operations before the parallel part</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">threads</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Number of threads in the parallel part</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">actorsPerThread</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Number of operations in each thread of the parallel part</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">actorsAfter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Number of operations after the parallel part</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">iterations</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Generate 100 random concurrent scenarios</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">invocationsPerIteration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Run each generated scenario 1000 times</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">check</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Run the test</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><code>stressTest()</code>를 다시 실행하면 Lincheck은 아래와 유사한 시나리오를 생성할 것입니다:</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>| ------------------- |</span></span>
<span class="line"><span>| Thread 1 | Thread 2 |</span></span>
<span class="line"><span>| ------------------- |</span></span>
<span class="line"><span>| inc()    |          |</span></span>
<span class="line"><span>| inc()    |          |</span></span>
<span class="line"><span>| ------------------- |</span></span>
<span class="line"><span>| get()    | inc()    |</span></span>
<span class="line"><span>| inc()    | get()    |</span></span>
<span class="line"><span>| ------------------- |</span></span>
<span class="line"><span>| inc()    |          |</span></span>
<span class="line"><span>| ------------------- |</span></span></code></pre></div><p>여기에는 병렬 부분(parallel part) 전에 두 개의 연산, 두 개의 연산 각각에 대한 두 개의 스레드, 그 뒤를 이어 마지막에 단일 연산이 있습니다.</p></li></ol><p>모델 검증 테스트도 동일한 방식으로 구성할 수 있습니다.</p><h2 id="시나리오-최소화" tabindex="-1">시나리오 최소화 <a class="header-anchor" href="#시나리오-최소화" aria-label="Permalink to &quot;시나리오 최소화&quot;">​</a></h2><p>감지된 오류는 일반적으로 테스트 구성에서 지정된 것보다 더 작은 시나리오로 표현된다는 것을 이미 알아챘을 수 있습니다. Lincheck은 오류를 최소화하기 위해, 테스트가 실패하지 않도록 하면서 연산을 적극적으로 제거하려고 시도합니다.</p><p>위 카운터 테스트에 대한 최소화된 시나리오는 다음과 같습니다:</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>= Invalid execution results =</span></span>
<span class="line"><span>| ------------------- |</span></span>
<span class="line"><span>| Thread 1 | Thread 2 |</span></span>
<span class="line"><span>| ------------------- |</span></span>
<span class="line"><span>| inc()    | inc()    |</span></span>
<span class="line"><span>| ------------------- |</span></span></code></pre></div><p>더 작은 시나리오를 분석하는 것이 더 쉽기 때문에, 시나리오 최소화(scenario minimization)는 기본적으로 활성화되어 있습니다. 이 기능을 비활성화하려면 <code>[Stress, ModelChecking]Options</code> 구성에 <code>minimizeFailedScenario(false)</code>를 추가하세요.</p><h2 id="데이터-구조-상태-로깅" tabindex="-1">데이터 구조 상태 로깅 <a class="header-anchor" href="#데이터-구조-상태-로깅" aria-label="Permalink to &quot;데이터 구조 상태 로깅&quot;">​</a></h2><p>디버깅을 위한 또 다른 유용한 기능은 _상태 로깅(state logging)_입니다. 오류로 이어지는 인터리빙을 분석할 때, 일반적으로 각 이벤트 후에 상태를 변경하면서 종이에 데이터 구조(data structure)의 변경 사항을 그립니다. 이 절차를 자동화하기 위해, 데이터 구조의 <code>String</code> 표현을 반환하는 특별한 메서드를 제공할 수 있습니다. 그러면 Lincheck은 데이터 구조를 수정하는 인터리빙의 각 이벤트 후에 해당 상태 표현을 출력합니다.</p><p>이를 위해 인수를 취하지 않고 <code>@StateRepresentation</code> 어노테이션으로 표시된 메서드를 정의하세요. 이 메서드는 스레드 안전(thread-safe)하고 논블로킹(non-blocking)이어야 하며 데이터 구조를 변경해서는 안 됩니다.</p><ol><li><p><code>Counter</code> 예시에서 <code>String</code> 표현은 단순히 카운터의 값입니다. 따라서 트레이스에 카운터 상태를 출력하려면 <code>CounterTest</code>에 <code>stateRepresentation()</code> 함수를 추가하세요:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.lincheck.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.jetbrains.lincheck.datastructures.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.junit.Test</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CounterTest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Counter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @Operation</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> inc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">inc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @Operation</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @StateRepresentation</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> stateRepresentation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> modelCheckingTest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ModelCheckingOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">check</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>이제 <code>modelCheckingTest()</code>를 실행하고 카운터 상태를 수정하는 스위치 지점(시작이 <code>STATE:</code>로 되어 있음)에서 출력되는 <code>Counter</code>의 상태를 확인하세요:</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>= Invalid execution results =</span></span>
<span class="line"><span>| ------------------- |</span></span>
<span class="line"><span>| Thread 1 | Thread 2 |</span></span>
<span class="line"><span>| ------------------- |</span></span>
<span class="line"><span>| STATE: 0            |</span></span>
<span class="line"><span>| ------------------- |</span></span>
<span class="line"><span>| inc(): 1 | inc(): 1 |</span></span>
<span class="line"><span>| ------------------- |</span></span>
<span class="line"><span>| STATE: 1            |</span></span>
<span class="line"><span>| ------------------- |</span></span>
<span class="line"><span></span></span>
<span class="line"><span>The following interleaving leads to the error:</span></span>
<span class="line"><span>| -------------------------------------------------------------------- |</span></span>
<span class="line"><span>| Thread 1 |                         Thread 2                          |</span></span>
<span class="line"><span>| -------------------------------------------------------------------- |</span></span>
<span class="line"><span>|          | inc()                                                     |</span></span>
<span class="line"><span>|          |   inc(): 1 at CounterTest.inc(CounterTest.kt:10)          |</span></span>
<span class="line"><span>|          |     value.READ: 0 at Counter.inc(BasicCounterTest.kt:10)  |</span></span>
<span class="line"><span>|          |     switch                                                |</span></span>
<span class="line"><span>| inc(): 1 |                                                           |</span></span>
<span class="line"><span>| STATE: 1 |                                                           |</span></span>
<span class="line"><span>|          |     value.WRITE(1) at Counter.inc(BasicCounterTest.kt:10) |</span></span>
<span class="line"><span>|          |     STATE: 1                                              |</span></span>
<span class="line"><span>|          |     value.READ: 1 at Counter.inc(BasicCounterTest.kt:10)  |</span></span>
<span class="line"><span>|          |   result: 1                                               |</span></span>
<span class="line"><span>| -------------------------------------------------------------------- |</span></span></code></pre></div></li></ol><p>스트레스 테스트의 경우, Lincheck은 시나리오의 병렬 부분 전후뿐만 아니라 마지막에도 상태 표현을 출력합니다.</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><ul><li><a href="https://github.com/JetBrains/lincheck/tree/master/src/jvm/test-lincheck-integration/org/jetbrains/lincheck_test/guide/CounterTest.kt" target="_blank" rel="noreferrer">이 예시들의 전체 코드</a>를 확인하세요. * 더 많은 <a href="https://github.com/JetBrains/lincheck/tree/master/src/jvm/test/org/jetbrains/lincheck_test/guide" target="_blank" rel="noreferrer">테스트 예시</a>를 확인하세요.</li></ul></div><h2 id="다음-단계" tabindex="-1">다음 단계 <a class="header-anchor" href="#다음-단계" aria-label="Permalink to &quot;다음 단계&quot;">​</a></h2><p><a href="/ko/kotlin/operation-arguments">연산에 전달되는 인수를 구성하는 방법</a>과 이것이 유용할 수 있는 시점을 알아보세요.</p>`,24)]))}const C=t(h,[["render",k]]);export{F as __pageData,C as default};
