import{_ as o,a,b as i}from"./chunks/publish-your-application-on-web.Dq0Z4N4Z.js";import{_ as t,c as r,o as l,ag as p}from"./chunks/framework.Bksy39di.js";const f=JSON.parse('{"title":"发布您的应用程序","description":"","frontmatter":{},"headers":[],"relativePath":"kmp/multiplatform-publish-apps.md","filePath":"kmp/multiplatform-publish-apps.md","lastUpdated":1755516278000}'),n={name:"kmp/multiplatform-publish-apps.md"};function s(d,e,c,u,h,m){return l(),r("div",null,e[0]||(e[0]=[p('<h1 id="发布您的应用程序" tabindex="-1">发布您的应用程序 <a class="header-anchor" href="#发布您的应用程序" aria-label="Permalink to &quot;发布您的应用程序&quot;">​</a></h1><p>当您的应用准备好发布时，是时候通过发布将它们交付给用户了。</p><p>对于移动应用，每个平台都有多个商店可用。然而，在本文中，我们将重点关注官方渠道： <a href="https://play.google.com/store" target="_blank" rel="noreferrer">Google Play Store</a> 和 <a href="https://www.apple.com/ios/app-store/" target="_blank" rel="noreferrer">Apple App Store</a>。对于 Web 应用，我们将使用 <a href="https://pages.github.com/" target="_blank" rel="noreferrer">GitHub pages</a>。</p><p>您将学习如何准备 Kotlin Multiplatform 应用程序以进行发布，我们将重点介绍 此过程中需要特别注意的部分。</p><h2 id="android-应用" tabindex="-1">Android 应用 <a class="header-anchor" href="#android-应用" aria-label="Permalink to &quot;Android 应用&quot;">​</a></h2><p>由于 <a href="https://developer.android.com/kotlin" target="_blank" rel="noreferrer">Kotlin 是 Android 开发的主要语言</a>， Kotlin Multiplatform 对项目编译和 Android 应用构建没有明显影响。从 共享模块生成的 Android 库以及 Android 应用本身都是典型的 Android Gradle 模块；它们与其他 Android 库和应用无异。因此，从 Kotlin Multiplatform 项目发布 Android 应用与 <a href="https://developer.android.com/studio/publish" target="_blank" rel="noreferrer">Android 开发者文档</a> 中描述的通常过程无异。</p><h2 id="ios-应用" tabindex="-1">iOS 应用 <a class="header-anchor" href="#ios-应用" aria-label="Permalink to &quot;iOS 应用&quot;">​</a></h2><p>Kotlin Multiplatform 项目中的 iOS 应用是基于典型的 Xcode 项目构建的，因此发布它所涉及的主要阶段 与 <a href="https://developer.apple.com/ios/submit/" target="_blank" rel="noreferrer">iOS 开发者文档</a> 中描述的相同。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>随着 Spring&#39;24 对 App Store 政策的更改，缺少或不完整的隐私清单可能会导致您的应用收到警告甚至被拒。 有关详细信息和变通方法，特别是针对 Kotlin Multiplatform 应用，请参阅 <a href="https://kotlinlang.org/docs/apple-privacy-manifest.html" target="_blank" rel="noreferrer">iOS 应用的隐私清单</a>。</p></div><p>Kotlin Multiplatform 项目的特殊之处在于，它会将共享的 Kotlin 模块编译成一个 framework 并将其链接到 Xcode 项目中。 通常，共享模块与 Xcode 项目之间的集成是由 <a href="https://plugins.jetbrains.com/plugin/14936-kotlin-multiplatform-mobile" target="_blank" rel="noreferrer">Kotlin Multiplatform plugin for Android Studio</a> 自动完成的。 但是，如果您不使用该插件，在 Xcode 中构建和打包 iOS 项目时请牢记以下几点：</p><ul><li>共享的 Kotlin 库会编译为原生 framework。</li><li>您需要将为特定平台编译的 framework 连接到 iOS 应用项目。</li><li>在 Xcode 项目设置中，指定 framework 的路径以供构建系统搜索。</li><li>构建项目后，您应该启动并测试应用，确保在运行时使用该 framework 没有问题。</li></ul><p>有两种方法可以将共享的 Kotlin 模块连接到 iOS 项目：</p><ul><li>使用 <a href="./multiplatform-cocoapods-overview">Kotlin CocoaPods Gradle plugin</a>，它允许您在 iOS 项目中使用带有原生目标的 Multiplatform 项目作为 CocoaPods 依赖项。</li><li>手动配置您的 Multiplatform 项目以创建 iOS framework，并配置 Xcode 项目以获取其最新版本。 Kotlin Multiplatform 向导或 Kotlin Multiplatform plugin for Android Studio 通常会执行此配置。 关于 <a href="./multiplatform-integrate-in-existing-app#configure-the-ios-project-to-use-a-kmp-framework">连接 framework 到您的 iOS 项目</a> 请参阅，了解如何在 Xcode 中直接添加该 framework。</li></ul><h3 id="配置您的-ios-应用程序" tabindex="-1">配置您的 iOS 应用程序 <a class="header-anchor" href="#配置您的-ios-应用程序" aria-label="Permalink to &quot;配置您的 iOS 应用程序&quot;">​</a></h3><p>您可以在不使用 Xcode 的情况下配置影响最终应用的基本属性。</p><h4 id="bundle-id" tabindex="-1">Bundle ID <a class="header-anchor" href="#bundle-id" aria-label="Permalink to &quot;Bundle ID&quot;">​</a></h4><p><a href="https://developer.apple.com/documentation/bundleresources/information_property_list/cfbundleidentifier#discussion" target="_blank" rel="noreferrer">bundle ID</a> 在操作系统中唯一标识您的应用。要更改它， 在 Android Studio 中打开 <code>iosApp/Configuration/Config.xcconfig</code> 文件并更新 <code>BUNDLE_ID</code>。</p><h4 id="应用名称" tabindex="-1">应用名称 <a class="header-anchor" href="#应用名称" aria-label="Permalink to &quot;应用名称&quot;">​</a></h4><p>应用名称设置目标可执行文件和应用程序 Bundle 名称。要更改您的应用名称：</p><ul><li><p>如果您尚未在 Android Studio 中打开过该项目，您可以直接在任何文本编辑器中更改 <code>iosApp/Configuration/Config.xcconfig</code> 文件中的 <code>APP_NAME</code> 选项。</p></li><li><p>如果您已经打开了 Android Studio 中的项目，请执行以下操作：</p><ol><li>关闭项目。</li><li>在任何文本编辑器中，更改 <code>iosApp/Configuration/Config.xcconfig</code> 文件中的 <code>APP_NAME</code> 选项。</li><li>重新在 Android Studio 中打开项目。</li></ol></li></ul><p>如果您需要配置其他设置，请使用 Xcode：在 Android Studio 中打开项目后， 在 Xcode 中打开 <code>iosApp/iosApp.xcworkspace</code> 文件并在其中进行更改。</p><h3 id="符号化崩溃报告" tabindex="-1">符号化崩溃报告 <a class="header-anchor" href="#符号化崩溃报告" aria-label="Permalink to &quot;符号化崩溃报告&quot;">​</a></h3><p>为了帮助开发者改进其应用，iOS 提供了一种分析应用崩溃的方法。为了进行详细的崩溃分析， 它使用特殊的调试符号 (<code>.dSYM</code>) 文件，将崩溃报告中的内存地址与源代码中的位置（例如函数或行号）进行匹配。</p><p>默认情况下，从共享 Kotlin 模块生成的 iOS framework 的发布版本都附带一个 <code>.dSYM</code> 文件。 这有助于您分析共享模块代码中发生的崩溃。</p><p>有关崩溃报告符号化的更多信息，请参阅 <a href="https://kotlinlang.org/docs/native-debugging.html#debug-ios-applications" target="_blank" rel="noreferrer">Kotlin/Native 文档</a>。</p><h2 id="web-应用" tabindex="-1">Web 应用 <a class="header-anchor" href="#web-应用" aria-label="Permalink to &quot;Web 应用&quot;">​</a></h2><p>要发布您的 Web 应用程序，请创建包含已编译文件 和组成您应用程序的资源的构件。这些构件是将您的应用程序部署到 GitHub Pages 等网络托管平台所需。</p><h3 id="生成构件" tabindex="-1">生成构件 <a class="header-anchor" href="#生成构件" aria-label="Permalink to &quot;生成构件&quot;">​</a></h3><p>创建用于运行 <strong>wasmJsBrowserDistribution</strong> 任务的运行配置：</p><ol><li><p>选择 <strong>运行 | 编辑配置</strong> 菜单项。</p></li><li><p>点击加号按钮，从下拉列表中选择 <strong>Gradle</strong>。</p></li><li><p>在 <strong>任务与参数</strong> 字段中，粘贴此命令：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wasmJsBrowserDistribution</span></span></code></pre></div></li><li><p>点击 <strong>OK</strong>。</p></li></ol><p>现在，您可以使用此配置来运行任务：</p><p><img src="'+o+'" alt="Run the Wasm distribution task" width="350"></p><p>任务完成后，您可以在 <code>composeApp/build/dist/wasmJs/productionExecutable</code> 目录中找到生成的构件：</p><p><img src="'+a+'" alt="Artifacts directory" width="400"></p><h3 id="在-github-pages-上发布您的应用程序" tabindex="-1">在 GitHub Pages 上发布您的应用程序 <a class="header-anchor" href="#在-github-pages-上发布您的应用程序" aria-label="Permalink to &quot;在 GitHub Pages 上发布您的应用程序&quot;">​</a></h3><p>构件准备就绪后，您可以在网络托管平台部署您的应用程序：</p><ol><li><p>将 <code>productionExecutable</code> 目录的内容复制到您想要创建站点的版本库中。</p></li><li><p>按照 GitHub 关于 <a href="https://docs.github.com/en/pages/getting-started-with-github-pages/creating-a-github-pages-site#creating-your-site" target="_blank" rel="noreferrer">创建您的站点</a> 的说明进行操作。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>在您将更改推送到 GitHub 后，您的站点可能需要长达 10 分钟才能发布。</p></div></li><li><p>在浏览器中，导航到您的 GitHub Pages 域名。</p><p><img src="'+i+'" alt="Navigate to GitHub pages" width="650"></p><p>恭喜！您已在 GitHub Pages 上发布了您的构件。</p></li></ol><h3 id="调试您的-web-应用程序" tabindex="-1">调试您的 Web 应用程序 <a class="header-anchor" href="#调试您的-web-应用程序" aria-label="Permalink to &quot;调试您的 Web 应用程序&quot;">​</a></h3><p>您可以开箱即用地在浏览器中调试您的 Web 应用程序，无需额外配置。要了解如何在浏览器中调试， 请参阅 Kotlin 文档中的 <a href="https://kotlinlang.org/docs/wasm-debugging.html#debug-in-your-browser" target="_blank" rel="noreferrer">在浏览器中调试</a> 指南。</p>',39)]))}const k=t(n,[["render",s]]);export{f as __pageData,k as default};
