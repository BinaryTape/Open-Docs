import{_ as i,c as a,o as e,ag as l}from"./chunks/framework.Bksy39di.js";const c=JSON.parse('{"title":"共通ViewModel","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kmp/compose-viewmodel.md","filePath":"ja/kmp/compose-viewmodel.md","lastUpdated":1755516278000}'),n={name:"ja/kmp/compose-viewmodel.md"};function t(p,s,h,k,o,d){return e(),a("div",null,s[0]||(s[0]=[l(`<h1 id="共通viewmodel" tabindex="-1">共通ViewModel <a class="header-anchor" href="#共通viewmodel" aria-label="Permalink to &quot;共通ViewModel&quot;">​</a></h1><p>UIを構築するためのAndroidの<a href="https://developer.android.com/topic/libraries/architecture/viewmodel" target="_blank" rel="noreferrer">ViewModel</a>アプローチは、Compose Multiplatform を使用して共通コードで実装できます。</p><h2 id="共通viewmodel-をプロジェクトに追加する" tabindex="-1">共通ViewModel をプロジェクトに追加する <a class="header-anchor" href="#共通viewmodel-をプロジェクトに追加する" aria-label="Permalink to &quot;共通ViewModel をプロジェクトに追加する&quot;">​</a></h2><p>マルチプラットフォームの <code>ViewModel</code> 実装を使用するには、次の依存関係を <code>commonMain</code> ソースセットに追加します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        commonMain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.androidx.lifecycle:lifecycle-viewmodel-compose:2.9.2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="共通コードでの-viewmodel-の使用" tabindex="-1">共通コードでの ViewModel の使用 <a class="header-anchor" href="#共通コードでの-viewmodel-の使用" aria-label="Permalink to &quot;共通コードでの ViewModel の使用&quot;">​</a></h2><p>Compose Multiplatform は共通の <code>ViewModelStoreOwner</code> インターフェースを実装しているため、一般的に共通コードで <code>ViewModel</code> クラスを使用することは、Android のベストプラクティスと大きく異なりません。</p><p><a href="https://github.com/JetBrains/compose-multiplatform/tree/0e38f58b42d23ff6d0ad30b119d34fa1cd6ccedb/examples/nav_cupcake" target="_blank" rel="noreferrer">ナビゲーションの例</a>を使用する場合：</p><ol><li>ViewModel クラスを宣言する：</li></ol><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> androidx.lifecycle.ViewModel</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> androidx.lifecycle.viewmodel.compose.viewModel</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OrderViewModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ViewModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _uiState </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MutableStateFlow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OrderUiState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pickupOptions </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> pickupOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uiState: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">StateFlow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OrderUiState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _uiState.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">asStateFlow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ol start="2"><li>ViewModel をコンポーザブル関数に追加する：</li></ol><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Composable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CupcakeApp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   viewModel: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OrderViewModel</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> viewModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OrderViewModel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>ViewModel</code> でコルーチンを実行する際、<code>ViewModel.viewModelScope</code> の値が <code>Dispatchers.Main.immediate</code> の値に紐付けられており、これがデスクトップ環境ではデフォルトで利用できない場合があることに注意してください。 Compose Multiplatform で ViewModel のコルーチンを正しく動作させるには、<code>kotlinx-coroutines-swing</code> 依存関係をプロジェクトに追加してください。 詳細は <a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-dispatchers/-main.html" target="_blank" rel="noreferrer"><code>Dispatchers.Main</code> ドキュメント</a>を参照してください。</p></div><p>非JVMプラットフォームでは、型リフレクションを使用してオブジェクトをインスタンス化することはできません。 したがって、共通コードではパラメータなしで <code>viewModel()</code> 関数を呼び出すことはできません。<code>ViewModel</code> インスタンスが作成されるたびに、少なくともイニシャライザを引数として提供する必要があります。</p><p>イニシャライザのみが提供された場合、ライブラリは内部でデフォルトのファクトリを作成します。 ただし、独自のファクトリを実装し、<a href="https://developer.android.com/topic/libraries/architecture/viewmodel#jetpack-compose" target="_blank" rel="noreferrer">Jetpack Compose</a> と同様に、共通の <code>viewModel(...)</code> 関数のより明示的なバージョンを呼び出すことができます。</p>`,15)]))}const E=i(n,[["render",t]]);export{c as __pageData,E as default};
