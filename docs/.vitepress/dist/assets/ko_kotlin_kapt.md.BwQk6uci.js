import{_ as o,C as h,c as r,o as d,ag as l,j as s,G as e,a,w as n}from"./chunks/framework.Bksy39di.js";const m=JSON.parse('{"title":"kapt 컴파일러 플러그인","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kotlin/kapt.md","filePath":"ko/kotlin/kapt.md","lastUpdated":1754307826000}'),c={name:"ko/kotlin/kapt.md"};function E(g,i,y,u,b,v){const t=h("tab"),p=h("tabs"),k=h("TopicTitle");return d(),r("div",null,[i[9]||(i[9]=l('<h1 id="kapt-컴파일러-플러그인" tabindex="-1">kapt 컴파일러 플러그인 <a class="header-anchor" href="#kapt-컴파일러-플러그인" aria-label="Permalink to &quot;kapt 컴파일러 플러그인&quot;">​</a></h1><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p><code>kapt</code>는 유지보수 모드입니다. 최신 Kotlin 및 Java 릴리스에 맞춰 업데이트를 지속하고 있지만, 새로운 기능을 구현할 계획은 없습니다. 어노테이션 프로세싱에는 <a href="/ko/kotlin/ksp-overview">Kotlin Symbol Processing API (KSP)</a>를 사용해 주세요. <a href="/ko/kotlin/ksp-overview#supported-libraries">KSP가 지원하는 라이브러리 목록</a>을 참조하세요.</p></div><p>어노테이션 프로세서(<a href="https://jcp.org/en/jsr/detail?id=269" target="_blank" rel="noreferrer">JSR 269</a> 참조)는 <em>kapt</em> 컴파일러 플러그인을 사용하여 Kotlin에서 지원됩니다.</p><p>간단히 말해, <code>kapt</code>는 Java 기반 어노테이션 프로세싱을 활성화하여 Kotlin 프로젝트에서 <a href="https://google.github.io/dagger/" target="_blank" rel="noreferrer">Dagger</a> 및 <a href="https://developer.android.com/topic/libraries/data-binding/index.html" target="_blank" rel="noreferrer">Data Binding</a>과 같은 라이브러리를 사용할 수 있도록 돕습니다.</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>K2 컴파일러와 함께 <code>kapt</code>를 사용할 때 문제가 발생하면 <a href="http://kotl.in/issue" target="_blank" rel="noreferrer">이슈 트래커</a>에 보고하고 <code>gradle.properties</code> 파일에서 K2 모드를 비활성화하세요. <code>kotlin kapt.use.k2=false </code></p></div><h2 id="gradle에서-사용" tabindex="-1">Gradle에서 사용 <a class="header-anchor" href="#gradle에서-사용" aria-label="Permalink to &quot;Gradle에서 사용&quot;">​</a></h2><p>Gradle에서 <code>kapt</code>를 사용하려면 다음 단계를 따르세요.</p>',7)),s("ol",null,[s("li",null,[i[2]||(i[2]=s("p",null,[a("빌드 스크립트 파일 "),s("code",null,"build.gradle(.kts)"),a("에 "),s("code",null,"kapt"),a(" Gradle 플러그인을 적용합니다.")],-1)),e(p,{group:"build-script"},{default:n(()=>[e(t,{title:"Kotlin","group-key":"kotlin"},{default:n(()=>i[0]||(i[0]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"plugins"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    kotlin"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"kapt"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") version "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"2.2.10"')]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),e(t,{title:"Groovy","group-key":"groovy"},{default:n(()=>i[1]||(i[1]=[s("div",{class:"language-groovy vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"groovy"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"plugins {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    id "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"org.jetbrains.kotlin.kapt"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," version "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"2.2.10"')]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1})]),s("li",null,[i[5]||(i[5]=s("p",null,[s("code",null,"dependencies {}"),a(" 블록에서 "),s("code",null,"kapt"),a(" 구성을 사용하여 해당 종속성을 추가합니다.")],-1)),e(p,{group:"build-script"},{default:n(()=>[e(t,{title:"Kotlin","group-key":"kotlin"},{default:n(()=>i[3]||(i[3]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"dependencies"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    kapt"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"groupId:artifactId:version"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),e(t,{title:"Groovy","group-key":"groovy"},{default:n(()=>i[4]||(i[4]=[s("div",{class:"language-groovy vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"groovy"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"dependencies {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    kapt "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'groupId:artifactId:version'")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1})]),i[6]||(i[6]=l('<li><p>이전에 어노테이션 프로세서에 <a href="https://developer.android.com/studio/build/gradle-plugin-3-0-0-migration.html#annotationProcessor_config" target="_blank" rel="noreferrer">Android 지원</a>을 사용했다면, <code>annotationProcessor</code> 구성 사용을 <code>kapt</code>로 대체하세요. 프로젝트에 Java 클래스가 포함되어 있다면, <code>kapt</code>가 해당 클래스도 처리합니다.</p><p><code>androidTest</code> 또는 <code>test</code> 소스에 어노테이션 프로세서를 사용하는 경우, 해당 <code>kapt</code> 구성은 <code>kaptAndroidTest</code> 및 <code>kaptTest</code>로 명명됩니다. <code>kaptAndroidTest</code>와 <code>kaptTest</code>가 <code>kapt</code>를 확장하므로, <code>kapt</code> 종속성을 제공하면 프로덕션 소스와 테스트 모두에서 사용할 수 있습니다.</p></li>',1))]),i[10]||(i[10]=l(`<h2 id="어노테이션-프로세서-인수" tabindex="-1">어노테이션 프로세서 인수 <a class="header-anchor" href="#어노테이션-프로세서-인수" aria-label="Permalink to &quot;어노테이션 프로세서 인수&quot;">​</a></h2><p>어노테이션 프로세서에 인수를 전달하려면 빌드 스크립트 파일 <code>build.gradle(.kts)</code>의 <code>arguments {}</code> 블록을 사용하세요.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kapt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    arguments</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        arg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;key&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;value&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="gradle-빌드-캐시-지원" tabindex="-1">Gradle 빌드 캐시 지원 <a class="header-anchor" href="#gradle-빌드-캐시-지원" aria-label="Permalink to &quot;Gradle 빌드 캐시 지원&quot;">​</a></h2><p><code>kapt</code> 어노테이션 프로세싱 작업은 기본적으로 <a href="https://guides.gradle.org/using-build-cache/" target="_blank" rel="noreferrer">Gradle에서 캐시됩니다</a>. 하지만 어노테이션 프로세서는 임의의 코드를 실행할 수 있으며, 이는 작업 입력을 출력으로 안정적으로 변환하지 못하거나 Gradle이 추적하지 않는 파일에 접근하고 수정할 수 있습니다. 빌드에 사용된 어노테이션 프로세서를 올바르게 캐시할 수 없는 경우, 빌드 스크립트에서 <code>useBuildCache</code> 속성을 지정하여 <code>kapt</code>에 대한 캐싱을 완전히 비활성화할 수 있습니다. 이는 <code>kapt</code> 작업에 대한 오탐 캐시 히트를 방지하는 데 도움이 됩니다.</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kapt {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    useBuildCache </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="kapt를-사용하는-빌드-속도-개선" tabindex="-1"><code>kapt</code>를 사용하는 빌드 속도 개선 <a class="header-anchor" href="#kapt를-사용하는-빌드-속도-개선" aria-label="Permalink to &quot;\`kapt\`를 사용하는 빌드 속도 개선&quot;">​</a></h2><h3 id="kapt-작업-병렬-실행" tabindex="-1"><code>kapt</code> 작업 병렬 실행 <a class="header-anchor" href="#kapt-작업-병렬-실행" aria-label="Permalink to &quot;\`kapt\` 작업 병렬 실행&quot;">​</a></h3><p><code>kapt</code>를 사용하는 빌드 속도를 개선하려면 <code>kapt</code> 작업에 <a href="https://guides.gradle.org/using-the-worker-api/" target="_blank" rel="noreferrer">Gradle Worker API</a>를 활성화할 수 있습니다. Worker API를 사용하면 Gradle이 단일 프로젝트에서 독립적인 어노테이션 프로세싱 작업을 병렬로 실행할 수 있으며, 이는 경우에 따라 실행 시간을 크게 단축시킵니다.</p><p>Kotlin Gradle 플러그인에서 <a href="/ko/kotlin/gradle-configure-project#gradle-java-toolchains-support">커스텀 JDK 홈</a> 기능을 사용할 때, <code>kapt</code> 작업 워커는 <a href="https://docs.gradle.org/current/userguide/worker_api.html#changing_the_isolation_mode" target="_blank" rel="noreferrer">프로세스 격리 모드</a>만 사용합니다. <code>kapt.workers.isolation</code> 속성은 무시됩니다.</p><p><code>kapt</code> 워커 프로세스에 추가 JVM 인수를 제공하려면 <code>KaptWithoutKotlincTask</code>의 입력 <code>kaptProcessJvmArgs</code>를 사용하세요.</p>`,11)),e(p,{group:"build-script"},{default:n(()=>[e(t,{title:"Kotlin","group-key":"kotlin"},{default:n(()=>i[7]||(i[7]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withType"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"org"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"jetbrains"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"gradle"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"internal"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"KaptWithoutKotlincTask"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},">()")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"configureEach"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        kaptProcessJvmArgs."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"add"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-Xmx512m"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")])])])],-1)])),_:1}),e(t,{title:"Groovy","group-key":"groovy"},{default:n(()=>i[8]||(i[8]=[s("div",{class:"language-groovy vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"groovy"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"withType("),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"org.jetbrains.kotlin.gradle.internal.KaptWithoutKotlincTask."),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"class)")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    .configureEach {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        kaptProcessJvmArgs"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"add("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'-Xmx512m'"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")])])])],-1)])),_:1})]),_:1}),e(k,{id:"어노테이션-프로세서-클래스-로더-캐싱",level:"3",title:"어노테이션 프로세서 클래스 로더 캐싱",labelRef:"experimental-general"}),i[11]||(i[11]=l(`<p>어노테이션 프로세서 클래스 로더 캐싱은 여러 Gradle 작업을 연속적으로 실행할 때 <code>kapt</code>의 성능을 향상시키는 데 도움이 됩니다.</p><p>이 기능을 활성화하려면 <code>gradle.properties</code> 파일에 다음 속성을 사용하세요.</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># gradle.properties</span></span>
<span class="line"><span>#</span></span>
<span class="line"><span># Any positive value enables caching</span></span>
<span class="line"><span># Use the same value as the number of modules that use kapt</span></span>
<span class="line"><span>kapt.classloaders.cache.size=5</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Disable for caching to work</span></span>
<span class="line"><span>kapt.include.compile.classpath=false</span></span></code></pre></div><p>어노테이션 프로세서 캐싱에 문제가 발생하면 다음과 같이 캐싱을 비활성화하세요.</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># Specify annotation processors&#39; full names to disable caching for them</span></span>
<span class="line"><span>kapt.classloaders.cache.disableForProcessors=[annotation processors full names]</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>이 기능에 문제가 발생하면 <a href="https://youtrack.jetbrains.com/issue/KT-28901" target="_blank" rel="noreferrer">YouTrack</a>에 피드백을 주시면 감사하겠습니다.</p></div><h3 id="어노테이션-프로세서-성능-측정" tabindex="-1">어노테이션 프로세서 성능 측정 <a class="header-anchor" href="#어노테이션-프로세서-성능-측정" aria-label="Permalink to &quot;어노테이션 프로세서 성능 측정&quot;">​</a></h3><p>어노테이션 프로세서 실행에 대한 성능 통계를 얻으려면 <code>-Kapt-show-processor-timings</code> 플러그인 옵션을 사용하세요. 예시 출력:</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Kapt Annotation Processing performance report:</span></span>
<span class="line"><span>com.example.processor.TestingProcessor: total: 133 ms, init: 36 ms, 2 round(s): 97 ms, 0 ms</span></span>
<span class="line"><span>com.example.processor.AnotherProcessor: total: 100 ms, init: 6 ms, 1 round(s): 93 ms</span></span></code></pre></div><p>플러그인 옵션 <a href="https://github.com/JetBrains/kotlin/pull/4280" target="_blank" rel="noreferrer"><code>-Kapt-dump-processor-timings</code> (<code>org.jetbrains.kotlin.kapt3:dumpProcessorTimings</code>)</a>를 사용하여 이 보고서를 파일로 덤프할 수 있습니다. 다음 명령은 <code>kapt</code>를 실행하고 통계를 <code>ap-perf-report.file</code> 파일로 덤프합니다.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlinc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -cp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $MY_CLASSPATH </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-Xplugin=kotlin-annotation-processing-SNAPSHOT.jar </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-P</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">plugin:org.jetbrains.kotlin.kapt3:aptMode=stubsAndApt,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">plugin:org.jetbrains.kotlin.kapt3:apclasspath=processor/build/libs/processor.jar,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">plugin:org.jetbrains.kotlin.kapt3:dumpProcessorTimings=ap-perf-report.file </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-Xplugin=$JAVA_HOME/lib/tools.jar </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-d </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">cli-tests/out</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-no-jdk </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-no-reflect</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -no-stdlib</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -verbose</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sample/src/main/</span></span></code></pre></div><h3 id="어노테이션-프로세서로-생성된-파일-수-측정" tabindex="-1">어노테이션 프로세서로 생성된 파일 수 측정 <a class="header-anchor" href="#어노테이션-프로세서로-생성된-파일-수-측정" aria-label="Permalink to &quot;어노테이션 프로세서로 생성된 파일 수 측정&quot;">​</a></h3><p><code>kapt</code> Gradle 플러그인은 각 어노테이션 프로세서에 대해 생성된 파일 수에 대한 통계를 보고할 수 있습니다.</p><p>이는 사용되지 않는 어노테이션 프로세서가 빌드에 포함되어 있는지 추적하는 데 도움이 됩니다. 생성된 보고서를 사용하여 불필요한 어노테이션 프로세서를 트리거하는 모듈을 찾아 해당 모듈을 업데이트하여 이를 방지할 수 있습니다.</p><p>통계 보고를 활성화하려면:</p><ol><li><p><code>build.gradle(.kts)</code>에서 <code>showProcessorStats</code> 속성 값을 <code>true</code>로 설정합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kapt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    showProcessorStats </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><code>gradle.properties</code>에서 <code>kapt.verbose</code> Gradle 속성을 <code>true</code>로 설정합니다.</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># gradle.properties</span></span>
<span class="line"><span>kapt.verbose=true</span></span></code></pre></div></li></ol><div class="note custom-block"><p class="custom-block-title">NOTE</p><p><a href="#use-in-cli">명령줄 옵션 <code>verbose</code></a>를 사용하여 자세한(verbose) 출력을 활성화할 수도 있습니다.</p></div><p>통계는 <code>info</code> 레벨로 로그에 나타납니다. <code>Annotation processor stats:</code> 라인과 그 뒤에 각 어노테이션 프로세서의 실행 시간에 대한 통계를 볼 수 있습니다. 이 라인들 다음에는 <code>Generated files report:</code> 라인과 그 뒤에 각 어노테이션 프로세서에 대해 생성된 파일 수에 대한 통계가 나타납니다. 예시:</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[INFO] Annotation processor stats:</span></span>
<span class="line"><span>[INFO] org.mapstruct.ap.MappingProcessor: total: 290 ms, init: 1 ms, 3 round(s): 289 ms, 0 ms, 0 ms</span></span>
<span class="line"><span>[INFO] Generated files report:</span></span>
<span class="line"><span>[INFO] org.mapstruct.ap.MappingProcessor: total sources: 2, sources per round: 2, 0, 0</span></span></code></pre></div><h2 id="kapt의-컴파일-회피" tabindex="-1"><code>kapt</code>의 컴파일 회피 <a class="header-anchor" href="#kapt의-컴파일-회피" aria-label="Permalink to &quot;\`kapt\`의 컴파일 회피&quot;">​</a></h2><p><code>kapt</code>를 사용하는 증분 빌드 시간을 개선하기 위해 Gradle의 <a href="https://docs.gradle.org/current/userguide/java_plugin.html#sec:java_compile_avoidance" target="_blank" rel="noreferrer">컴파일 회피</a> 기능을 사용할 수 있습니다. 컴파일 회피가 활성화되면 Gradle은 프로젝트를 재빌드할 때 어노테이션 프로세싱을 건너뛸 수 있습니다. 특히, 어노테이션 프로세싱은 다음 경우에 건너뜁니다.</p><ul><li>프로젝트의 소스 파일이 변경되지 않았을 때.</li><li>종속성의 변경 사항이 <a href="https://en.wikipedia.org/wiki/Application_binary_interface" target="_blank" rel="noreferrer">ABI</a> 호환될 때. 예를 들어, 변경 사항이 메서드 본문에만 있을 때.</li></ul><p>그러나 컴파일 클래스패스에서 발견된 어노테이션 프로세서에는 컴파일 회피를 사용할 수 없습니다. 이들은 <em>어떤 변경이든</em> 어노테이션 프로세싱 작업을 실행해야 하기 때문입니다.</p><p>컴파일 회피와 함께 <code>kapt</code>를 실행하려면:</p><ul><li><p><a href="#use-in-gradle">어노테이션 프로세서 종속성을 <code>kapt*</code> 구성에 수동으로 추가</a>합니다.</p></li><li><p><code>gradle.properties</code> 파일에서 컴파일 클래스패스 내 어노테이션 프로세서 검색을 끕니다.</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># gradle.properties</span></span>
<span class="line"><span>kapt.include.compile.classpath=false</span></span></code></pre></div></li></ul><h2 id="증분-어노테이션-프로세싱" tabindex="-1">증분 어노테이션 프로세싱 <a class="header-anchor" href="#증분-어노테이션-프로세싱" aria-label="Permalink to &quot;증분 어노테이션 프로세싱&quot;">​</a></h2><p><code>kapt</code>는 기본적으로 증분 어노테이션 프로세싱을 지원합니다. 현재, 사용 중인 모든 어노테이션 프로세서가 증분형인 경우에만 어노테이션 프로세싱을 증분형으로 할 수 있습니다.</p><p>증분 어노테이션 프로세싱을 비활성화하려면 <code>gradle.properties</code> 파일에 다음 줄을 추가하세요.</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kapt.incremental.apt=false</span></span></code></pre></div><p>증분 어노테이션 프로세싱은 <a href="/ko/kotlin/gradle-compilation-and-caches#incremental-compilation">증분 컴파일</a>도 활성화되어 있어야 합니다.</p><h2 id="상위-구성으로부터-어노테이션-프로세서-상속" tabindex="-1">상위 구성으로부터 어노테이션 프로세서 상속 <a class="header-anchor" href="#상위-구성으로부터-어노테이션-프로세서-상속" aria-label="Permalink to &quot;상위 구성으로부터 어노테이션 프로세서 상속&quot;">​</a></h2><p>별도의 Gradle 구성에 어노테이션 프로세서의 공통 집합을 상위 구성으로 정의하고, 이를 서브프로젝트의 <code>kapt</code> 특정 구성에서 확장할 수 있습니다.</p><p>예를 들어, <a href="https://dagger.dev/" target="_blank" rel="noreferrer">Dagger</a>를 사용하는 서브프로젝트의 경우 <code>build.gradle(.kts)</code> 파일에서 다음 구성을 사용하세요.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> commonAnnotationProcessors </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> configurations.creating</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">configurations.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">named</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;kapt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">extendsFrom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(commonAnnotationProcessors) }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;com.google.dagger:dagger:2.48.1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    commonAnnotationProcessors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;com.google.dagger:dagger-compiler:2.48.1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>이 예시에서 <code>commonAnnotationProcessors</code> Gradle 구성은 모든 프로젝트에 사용하고자 하는 어노테이션 프로세싱을 위한 공통 상위 구성입니다. <a href="https://docs.gradle.org/current/dsl/org.gradle.api.artifacts.Configuration.html#org.gradle.api.artifacts.Configuration:extendsFrom" target="_blank" rel="noreferrer"><code>extendsFrom()</code></a> 메서드를 사용하여 <code>commonAnnotationProcessors</code>를 상위 구성으로 추가합니다. <code>kapt</code>는 <code>commonAnnotationProcessors</code> Gradle 구성이 Dagger 어노테이션 프로세서에 대한 종속성을 가지고 있음을 감지합니다. 따라서 <code>kapt</code>는 Dagger 어노테이션 프로세서를 어노테이션 프로세싱을 위한 구성에 포함합니다.</p><h2 id="java-컴파일러-옵션" tabindex="-1">Java 컴파일러 옵션 <a class="header-anchor" href="#java-컴파일러-옵션" aria-label="Permalink to &quot;Java 컴파일러 옵션&quot;">​</a></h2><p><code>kapt</code>는 어노테이션 프로세서를 실행하기 위해 Java 컴파일러를 사용합니다. <code>javac</code>에 임의의 옵션을 전달하는 방법은 다음과 같습니다.</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kapt {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    javacOptions {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Increase the max count of errors from annotation processors.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Default is 100.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        option(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xmaxerrs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="존재하지-않는-타입-보정" tabindex="-1">존재하지 않는 타입 보정 <a class="header-anchor" href="#존재하지-않는-타입-보정" aria-label="Permalink to &quot;존재하지 않는 타입 보정&quot;">​</a></h2><p>일부 어노테이션 프로세서(<code>AutoFactory</code>와 같은)는 선언 시그니처에서 정확한 타입에 의존합니다. 기본적으로 <code>kapt</code>는 모든 알 수 없는 타입(생성된 클래스의 타입 포함)을 <code>NonExistentClass</code>로 대체하지만, 이 동작을 변경할 수 있습니다. 스텁에서 오류 타입 추론을 활성화하려면 <code>build.gradle(.kts)</code> 파일에 다음 옵션을 추가하세요.</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kapt {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    correctErrorTypes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="maven에서-사용" tabindex="-1">Maven에서 사용 <a class="header-anchor" href="#maven에서-사용" aria-label="Permalink to &quot;Maven에서 사용&quot;">​</a></h2><p><code>compile</code> 전에 kotlin-maven-plugin에서 <code>kapt</code> 골(goal) 실행을 추가하세요.</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">execution</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;kapt&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">goals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">goal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;kapt&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">goal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- You can skip the &lt;goals&gt; element</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        if you enable extensions for the plugin --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">goals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">configuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">sourceDirs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">sourceDir</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;src/main/kotlin&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">sourceDir</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">sourceDir</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;src/main/java&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">sourceDir</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">sourceDirs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">annotationProcessorPaths</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            &lt;!-- Specify your annotation processors here --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">annotationProcessorPath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;com.google.dagger&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;dagger-compiler&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;2.9&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">annotationProcessorPath</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">annotationProcessorPaths</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">configuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">execution</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>어노테이션 프로세싱 레벨을 구성하려면 <code>&lt;configuration&gt;</code> 블록에 다음 중 하나를 <code>aptMode</code>로 설정하세요.</p><ul><li><code>stubs</code> – 어노테이션 프로세싱에 필요한 스텁만 생성합니다.</li><li><code>apt</code> – 어노테이션 프로세싱만 실행합니다.</li><li><code>stubsAndApt</code> – (기본값) 스텁을 생성하고 어노테이션 프로세싱을 실행합니다.</li></ul><p>예시:</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">configuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">aptMode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;stubs&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">aptMode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">configuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="intellij-빌드-시스템에서-사용" tabindex="-1">IntelliJ 빌드 시스템에서 사용 <a class="header-anchor" href="#intellij-빌드-시스템에서-사용" aria-label="Permalink to &quot;IntelliJ 빌드 시스템에서 사용&quot;">​</a></h2><p><code>kapt</code>는 IntelliJ IDEA 자체 빌드 시스템에서는 지원되지 않습니다. 어노테이션 프로세싱을 다시 실행하고 싶을 때마다 &quot;Maven Projects&quot; 툴바에서 빌드를 시작하세요.</p><h2 id="cli에서-사용" tabindex="-1">CLI에서 사용 <a class="header-anchor" href="#cli에서-사용" aria-label="Permalink to &quot;CLI에서 사용&quot;">​</a></h2><p><code>kapt</code> 컴파일러 플러그인은 Kotlin 컴파일러의 바이너리 배포판에서 사용할 수 있습니다.</p><p><code>Xplugin</code> <code>kotlinc</code> 옵션을 사용하여 플러그인의 JAR 파일 경로를 제공함으로써 플러그인을 첨부할 수 있습니다.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-Xplugin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$KOTLIN_HOME</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/lib/kotlin-annotation-processing.jar</span></span></code></pre></div><p>사용 가능한 옵션 목록은 다음과 같습니다.</p><ul><li><code>sources</code> (<em>필수</em>): 생성된 파일의 출력 경로입니다.</li><li><code>classes</code> (<em>필수</em>): 생성된 클래스 파일 및 리소스의 출력 경로입니다.</li><li><code>stubs</code> (<em>필수</em>): 스텁 파일의 출력 경로입니다. 즉, 임시 디렉터리입니다.</li><li><code>incrementalData</code>: 바이너리 스텁의 출력 경로입니다.</li><li><code>apclasspath</code> (<em>반복 가능</em>): 어노테이션 프로세서 JAR 파일의 경로입니다. 보유한 JAR 파일 수만큼 <code>apclasspath</code> 옵션을 전달하세요.</li><li><code>apoptions</code>: base64로 인코딩된 어노테이션 프로세서 옵션 목록입니다. 자세한 내용은 <a href="#ap-javac-options-encoding">AP/javac 옵션 인코딩</a>을 참조하세요.</li><li><code>javacArguments</code>: <code>javac</code>에 전달되는 옵션의 base64로 인코딩된 목록입니다. 자세한 내용은 <a href="#ap-javac-options-encoding">AP/javac 옵션 인코딩</a>을 참조하세요.</li><li><code>processors</code>: 쉼표로 구분된 어노테이션 프로세서의 정규화된 클래스 이름 목록입니다. 지정된 경우, <code>kapt</code>는 <code>apclasspath</code>에서 어노테이션 프로세서를 찾으려고 시도하지 않습니다.</li><li><code>verbose</code>: 자세한(verbose) 출력을 활성화합니다.</li><li><code>aptMode</code> (<em>필수</em>) <ul><li><code>stubs</code> – 어노테이션 프로세싱에 필요한 스텁만 생성합니다.</li><li><code>apt</code> – 어노테이션 프로세싱만 실행합니다.</li><li><code>stubsAndApt</code> – 스텁을 생성하고 어노테이션 프로세싱을 실행합니다.</li></ul></li><li><code>correctErrorTypes</code>: 자세한 내용은 <a href="#non-existent-type-correction">존재하지 않는 타입 보정</a>을 참조하세요. 기본적으로 비활성화되어 있습니다.</li><li><code>dumpFileReadHistory</code>: 각 파일에 대해 어노테이션 프로세싱 중에 사용된 클래스 목록을 덤프할 출력 경로입니다.</li></ul><p>플러그인 옵션 형식은 <code>-P plugin:&lt;plugin id&gt;:&lt;key&gt;=&lt;value&gt;</code>입니다. 옵션은 반복될 수 있습니다.</p><p>예시:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-P</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> plugin:org.jetbrains.kotlin.kapt3:sources=build/kapt/sources</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-P</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> plugin:org.jetbrains.kotlin.kapt3:classes=build/kapt/classes</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-P</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> plugin:org.jetbrains.kotlin.kapt3:stubs=build/kapt/stubs</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-P</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> plugin:org.jetbrains.kotlin.kapt3:apclasspath=lib/ap.jar</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-P</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> plugin:org.jetbrains.kotlin.kapt3:apclasspath=lib/anotherAp.jar</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-P</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> plugin:org.jetbrains.kotlin.kapt3:correctErrorTypes=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span></code></pre></div><h2 id="kotlin-소스-생성" tabindex="-1">Kotlin 소스 생성 <a class="header-anchor" href="#kotlin-소스-생성" aria-label="Permalink to &quot;Kotlin 소스 생성&quot;">​</a></h2><p><code>kapt</code>는 Kotlin 소스를 생성할 수 있습니다. 생성된 Kotlin 소스 파일을 <code>processingEnv.options[&quot;kapt.kotlin.generated&quot;]</code>로 지정된 디렉터리에 작성하면, 이 파일들은 메인 소스와 함께 컴파일됩니다.</p><p><code>kapt</code>는 생성된 Kotlin 파일에 대한 다중 라운드를 지원하지 않습니다.</p><h2 id="ap-javac-옵션-인코딩" tabindex="-1">AP/Javac 옵션 인코딩 <a class="header-anchor" href="#ap-javac-옵션-인코딩" aria-label="Permalink to &quot;AP/Javac 옵션 인코딩&quot;">​</a></h2><p><code>apoptions</code> 및 <code>javacArguments</code> CLI 옵션은 인코딩된 옵션 맵을 허용합니다. 다음은 직접 옵션을 인코딩하는 방법입니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> encodeList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(options: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> os </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ByteArrayOutputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> oos </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ObjectOutputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(os)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    oos.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(options.size)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ((key, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> options.entries) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        oos.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeUTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        oos.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeUTF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    oos.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">flush</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Base64.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getEncoder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">encodeToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(os.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toByteArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="java-컴파일러의-어노테이션-프로세서-유지" tabindex="-1">Java 컴파일러의 어노테이션 프로세서 유지 <a class="header-anchor" href="#java-컴파일러의-어노테이션-프로세서-유지" aria-label="Permalink to &quot;Java 컴파일러의 어노테이션 프로세서 유지&quot;">​</a></h2><p>기본적으로 <code>kapt</code>는 모든 어노테이션 프로세서를 실행하고 <code>javac</code>에 의한 어노테이션 프로세싱을 비활성화합니다. 하지만 <code>javac</code>의 일부 어노테이션 프로세서가 작동해야 할 수도 있습니다(예: <a href="https://projectlombok.org/" target="_blank" rel="noreferrer">Lombok</a>).</p><p>Gradle 빌드 파일에서 <code>keepJavacAnnotationProcessors</code> 옵션을 사용하세요.</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kapt {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    keepJavacAnnotationProcessors </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Maven을 사용하는 경우, 구체적인 플러그인 설정을 지정해야 합니다. <a href="/ko/kotlin/lombok#using-with-kapt">Lombok 컴파일러 플러그인 설정 예시</a>를 참조하세요.</p>`,70))])}const C=o(c,[["render",E]]);export{m as __pageData,C as default};
