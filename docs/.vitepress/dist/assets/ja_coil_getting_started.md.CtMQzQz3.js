import{_ as s,c as a,o as e,ag as t}from"./chunks/framework.Bksy39di.js";const c=JSON.parse('{"title":"はじめに","description":"","frontmatter":{},"headers":[],"relativePath":"ja/coil/getting_started.md","filePath":"ja/coil/getting_started.md","lastUpdated":1753369988000}'),l={name:"ja/coil/getting_started.md"};function o(n,i,p,h,k,d){return e(),a("div",null,i[0]||(i[0]=[t(`<h1 id="はじめに" tabindex="-1">はじめに <a class="header-anchor" href="#はじめに" aria-label="Permalink to &quot;はじめに&quot;">​</a></h1><h2 id="compose-ui" tabindex="-1">Compose UI <a class="header-anchor" href="#compose-ui" aria-label="Permalink to &quot;Compose UI&quot;">​</a></h2><p>一般的なCompose UIプロジェクトでは、以下をインポートする必要があります。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;io.coil-kt.coil3:coil-compose:3.3.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;io.coil-kt.coil3:coil-network-okhttp:3.3.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>インポート後、<code>AsyncImage</code> を使用してネットワークから画像を読み込むことができます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AsyncImage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://example.com/image.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    contentDescription </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>::: Note Compose Multiplatformを使用する場合、OkHttpの代わりにKtorを使用する必要があります。その方法については<a href="./network#ktor-network-engines">こちら</a>を参照してください。</p><p>:::</p><h2 id="android-views" tabindex="-1">Android Views <a class="header-anchor" href="#android-views" aria-label="Permalink to &quot;Android Views&quot;">​</a></h2><p>Compose UIの代わりにAndroid Viewsを使用する場合は、以下をインポートします。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;io.coil-kt.coil3:coil:3.3.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;io.coil-kt.coil3:coil-network-okhttp:3.3.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>インポート後、<code>ImageView.load</code> 拡張関数を使用してネットワークから画像を読み込むことができます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">imageView.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://example.com/image.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="シングルトン-imageloader-の構成" tabindex="-1">シングルトン ImageLoader の構成 <a class="header-anchor" href="#シングルトン-imageloader-の構成" aria-label="Permalink to &quot;シングルトン ImageLoader の構成&quot;">​</a></h2><p>デフォルトでは、Coilにはシングルトン<code>ImageLoader</code>が含まれています。<code>ImageLoader</code>は、<code>ImageRequest</code>の取得、デコード、キャッシュ、および結果の返却を行うことで、受信する<code>ImageRequest</code>を実行します。<code>ImageLoader</code>を構成する必要はありません。構成しない場合、Coilはデフォルト設定でシングルトン<code>ImageLoader</code>を作成します。</p><p>いくつかの方法で構成できます（<strong>いずれか1つを選択してください</strong>）。</p><ul><li>アプリのエントリポイント（アプリのルート<code>@Composable</code>）付近で<code>setSingletonImageLoaderFactory</code>を呼び出す。<strong>これはCompose Multiplatformアプリに最適です。</strong></li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setSingletonImageLoaderFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ImageLoader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">crossfade</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>Androidで、<a href="https://developer.android.com/reference/android/app/Application" target="_blank" rel="noreferrer"><code>Application</code></a>に<code>SingletonImageLoader.Factory</code>を実装する。<strong>これはAndroidアプリに最適です。</strong></li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CustomApplication</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), SingletonImageLoader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Factory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> newImageLoader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ImageLoader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ImageLoader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">crossfade</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>アプリのエントリポイント（例：Androidの<code>Application.onCreate</code>）付近で<code>SingletonImageLoader.setSafe</code>を呼び出す。これが最も柔軟な方法です。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SingletonImageLoader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setSafe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ImageLoader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">crossfade</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>::: Note Coilに依存するライブラリを作成している場合、シングルトン<code>ImageLoader</code>を取得/設定<strong>すべきではありません</strong>。代わりに、<code>io.coil-kt.coil3:coil-core</code>に依存し、独自の<code>ImageLoader</code>を作成して手動で渡す必要があります。ライブラリ内でシングルトン<code>ImageLoader</code>を設定すると、そのライブラリを使用しているアプリがCoilも使用している場合に、アプリによって設定された<code>ImageLoader</code>を上書きしてしまう可能性があります。</p><p>:::</p><h2 id="アーティファクト" tabindex="-1">アーティファクト <a class="header-anchor" href="#アーティファクト" aria-label="Permalink to &quot;アーティファクト&quot;">​</a></h2><p>Coilが<code>mavenCentral()</code>に公開している主要なアーティファクトのリストを以下に示します。</p><ul><li><code>io.coil-kt.coil3:coil</code>: <code>io.coil-kt.coil3:coil-core</code>に依存するデフォルトのアーティファクトです。シングルトン<code>ImageLoader</code>と関連する拡張関数が含まれています。</li><li><code>io.coil-kt.coil3:coil-core</code>: <code>io.coil-kt.coil3:coil</code>のサブセットで、シングルトン<code>ImageLoader</code>および関連する拡張関数は<strong>含まれていません</strong>。</li><li><code>io.coil-kt.coil3:coil-compose</code>: <code>io.coil-kt.coil3:coil</code>と<code>io.coil-kt.coil3:coil-compose-core</code>に依存するデフォルトの<a href="https://www.jetbrains.com/compose-multiplatform/" target="_blank" rel="noreferrer">Compose UI</a>アーティファクトです。シングルトン<code>ImageLoader</code>を使用する<code>AsyncImage</code>、<code>rememberAsyncImagePainter</code>、<code>SubcomposeAsyncImage</code>のオーバーロードが含まれています。</li><li><code>io.coil-kt.coil3:coil-compose-core</code>: <code>io.coil-kt.coil3:coil-compose</code>のサブセットで、シングルトン<code>ImageLoader</code>に依存する関数は含まれていません。</li><li><code>io.coil-kt.coil3:coil-network-okhttp</code>: <a href="https://github.com/square/okhttp" target="_blank" rel="noreferrer">OkHttp</a>を使用してネットワークから画像をフェッチするサポートが含まれています。</li><li><code>io.coil-kt.coil3:coil-network-ktor2</code>: <a href="https://github.com/ktorio/ktor" target="_blank" rel="noreferrer">Ktor 2</a>を使用してネットワークから画像をフェッチするサポートが含まれています。</li><li><code>io.coil-kt.coil3:coil-network-ktor3</code>: <a href="https://github.com/ktorio/ktor" target="_blank" rel="noreferrer">Ktor 3</a>を使用してネットワークから画像をフェッチするサポートが含まれています。</li><li><code>io.coil-kt.coil3:coil-network-cache-control</code>: ネットワークから画像をフェッチする際に、<a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control" target="_blank" rel="noreferrer"><code>Cache-Control</code>ヘッダー</a>を尊重するサポートが含まれています。</li><li><code>io.coil-kt.coil3:coil-gif</code>: GIFのデコードをサポートするための2つの<a href="https://coil-kt.github.io/coil/api/coil-core/coil3.decode/-decoder" target="_blank" rel="noreferrer">デコーダー</a>が含まれています。詳細については<a href="./gifs">GIFs</a>を参照してください。</li><li><code>io.coil-kt.coil3:coil-svg</code>: SVGのデコードをサポートするための<a href="https://coil-kt.github.io/coil/api/coil-core/coil3.decode/-decoder" target="_blank" rel="noreferrer">デコーダー</a>が含まれています。詳細については<a href="./svgs">SVGs</a>を参照してください。</li><li><code>io.coil-kt.coil3:coil-video</code>: <a href="https://developer.android.com/guide/topics/media/media-formats#video-codecs" target="_blank" rel="noreferrer">Androidがサポートする任意のビデオ形式</a>からフレームをデコードするサポートのための<a href="https://coil-kt.github.io/coil/api/coil-core/coil3.decode/-decoder" target="_blank" rel="noreferrer">デコーダー</a>が含まれています。詳細については<a href="./videos">videos</a>を参照してください。</li><li><code>io.coil-kt.coil3:coil-test</code>: テストをサポートするためのクラスが含まれています。詳細については<a href="./testing">testing</a>を参照してください。</li><li><code>io.coil-kt.coil3:coil-bom</code>: <a href="https://docs.gradle.org/7.2/userguide/platforms.html#sub:bom_import" target="_blank" rel="noreferrer">ビルオブマテリアル</a>が含まれています。<code>coil-bom</code>をインポートすると、バージョンを指定せずに他のCoilアーティファクトに依存できるようになります。</li></ul>`,27)]))}const g=s(l,[["render",o]]);export{c as __pageData,g as default};
