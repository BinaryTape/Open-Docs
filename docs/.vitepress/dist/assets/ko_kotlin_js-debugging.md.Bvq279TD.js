import{_ as t,a as r,b as o,c as a,d as l}from"./chunks/ide-console-output.D95j1GLN.js";import{_ as i,c as n,o as s,ag as d}from"./chunks/framework.Bksy39di.js";const k=JSON.parse('{"title":"Kotlin/JS 코드 디버그","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kotlin/js-debugging.md","filePath":"ko/kotlin/js-debugging.md","lastUpdated":1754307826000}'),p={name:"ko/kotlin/js-debugging.md"};function c(g,e,h,m,u,b){return s(),n("div",null,e[0]||(e[0]=[d('<h1 id="kotlin-js-코드-디버그" tabindex="-1">Kotlin/JS 코드 디버그 <a class="header-anchor" href="#kotlin-js-코드-디버그" aria-label="Permalink to &quot;Kotlin/JS 코드 디버그&quot;">​</a></h1><p>JavaScript 소스 맵은 번들러나 미니파이어가 생성하는 난독화된 코드와 개발자가 작업하는 실제 소스 코드 간의 매핑을 제공합니다. 이러한 방식으로 소스 맵은 코드 실행 중 디버깅을 지원합니다.</p><p>Kotlin Multiplatform Gradle 플러그인은 프로젝트 빌드를 위한 소스 맵을 자동으로 생성하여 추가 구성 없이 사용할 수 있도록 합니다.</p><h2 id="브라우저에서-디버그" tabindex="-1">브라우저에서 디버그 <a class="header-anchor" href="#브라우저에서-디버그" aria-label="Permalink to &quot;브라우저에서 디버그&quot;">​</a></h2><p>대부분의 최신 브라우저는 페이지 콘텐츠를 검사하고 해당 페이지에서 실행되는 코드를 디버그할 수 있는 도구를 제공합니다. 자세한 내용은 브라우저의 문서를 참조하세요.</p><p>브라우저에서 Kotlin/JS를 디버그하려면:</p><ol><li>사용 가능한 <code>_run_</code> Gradle 태스크 중 하나를 호출하여 프로젝트를 실행합니다. 예를 들어, 멀티플랫폼 프로젝트에서는 <code>browserDevelopmentRun</code> 또는 <code>jsBrowserDevelopmentRun</code>을 호출합니다. <a href="/ko/kotlin/running-kotlin-js#run-the-browser-target">Kotlin/JS 실행</a>에 대해 자세히 알아보세요.</li><li>브라우저에서 페이지로 이동한 다음 개발자 도구를 실행합니다(예: 마우스 오른쪽 버튼을 클릭하고 <strong>검사</strong> 동작 선택). 인기 있는 브라우저에서 <a href="https://balsamiq.com/support/faqs/browserconsole/" target="_blank" rel="noreferrer">개발자 도구를 찾는 방법</a>을 알아보세요.</li><li>프로그램이 콘솔에 정보를 로깅하는 경우, 이 출력을 확인하려면 <strong>콘솔</strong> 탭으로 이동하세요. 브라우저에 따라 이러한 로그는 해당 로그가 생성된 Kotlin 소스 파일과 줄 번호를 참조할 수 있습니다.</li></ol><p><img src="'+t+'" alt="Chrome DevTools 콘솔" width="600"></p><ol start="4"><li>오른쪽에 있는 파일 참조를 클릭하여 해당 코드 줄로 이동합니다. 또는 수동으로 <strong>소스</strong> 탭으로 전환하여 파일 트리에서 필요한 파일을 찾을 수 있습니다. Kotlin 파일로 이동하면 (난독화된 JavaScript와는 달리) 일반 Kotlin 코드가 표시됩니다.</li></ol><p><img src="'+r+'" alt="Chrome DevTools에서 디버깅" width="600"></p><p>이제 프로그램 디버깅을 시작할 수 있습니다. 줄 번호 중 하나를 클릭하여 중단점을 설정합니다. 개발자 도구는 구문 내에서 중단점을 설정하는 것도 지원합니다. 일반 JavaScript 코드와 마찬가지로, 설정된 모든 중단점은 페이지를 다시 로드해도 유지됩니다. 또한 이는 스크립트가 처음 로드될 때 실행되는 Kotlin의 <code>main()</code> 메서드를 디버그하는 것도 가능하게 합니다.</p><h2 id="ide에서-디버그" tabindex="-1">IDE에서 디버그 <a class="header-anchor" href="#ide에서-디버그" aria-label="Permalink to &quot;IDE에서 디버그&quot;">​</a></h2><p><a href="https://www.jetbrains.com/idea/" target="_blank" rel="noreferrer">IntelliJ IDEA Ultimate</a>는 개발 중 코드 디버깅을 위한 강력한 도구 모음을 제공합니다.</p><p>IntelliJ IDEA에서 Kotlin/JS를 디버그하려면 <strong>JavaScript 디버그</strong> 구성이 필요합니다. 이러한 디버그 구성을 추가하려면:</p><ol><li><strong>실행 | 구성 편집</strong>으로 이동합니다.</li><li>**+**를 클릭하고 <strong>JavaScript 디버그</strong>를 선택합니다.</li><li>구성 <strong>이름</strong>을 지정하고 프로젝트가 실행되는 <strong>URL</strong>(<code>http://localhost:8080</code>이 기본값)을 제공합니다.</li></ol><p><img src="'+o+'" alt="JavaScript 디버그 구성" width="700"></p><ol start="4"><li>구성을 저장합니다.</li></ol><p><a href="https://www.jetbrains.com/help/idea/configuring-javascript-debugger.html" target="_blank" rel="noreferrer">JavaScript 디버그 구성 설정</a>에 대해 자세히 알아보세요.</p><p>이제 프로젝트를 디버그할 준비가 되었습니다!</p><ol><li>사용 가능한 <code>_run_</code> Gradle 태스크 중 하나를 호출하여 프로젝트를 실행합니다. 예를 들어, 멀티플랫폼 프로젝트에서는 <code>browserDevelopmentRun</code> 또는 <code>jsBrowserDevelopmentRun</code>을 호출합니다. <a href="/ko/kotlin/running-kotlin-js#run-the-browser-target">Kotlin/JS 실행</a>에 대해 자세히 알아보세요.</li><li>이전에 생성한 JavaScript 디버그 구성을 실행하여 디버깅 세션을 시작합니다.</li></ol><p><img src="'+a+'" alt="JavaScript 디버그 구성" width="700"></p><ol start="3"><li>IntelliJ IDEA의 <strong>디버그</strong> 창에서 프로그램의 콘솔 출력을 확인할 수 있습니다. 출력 항목은 해당 출력 항목이 생성된 Kotlin 소스 파일과 줄 번호를 참조합니다.</li></ol><p><img src="'+l+'" alt="IDE의 JavaScript 디버그 출력" width="700"></p><ol start="4"><li>오른쪽에 있는 파일 참조를 클릭하여 해당 코드 줄로 이동합니다.</li></ol><p>이제 IDE가 제공하는 중단점, 스텝 실행, 표현식 평가 등 모든 도구 모음을 사용하여 프로그램을 디버그할 수 있습니다. <a href="https://www.jetbrains.com/help/idea/debugging-javascript-in-chrome.html" target="_blank" rel="noreferrer">IntelliJ IDEA에서 디버깅</a>에 대해 자세히 알아보세요.</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>IntelliJ IDEA의 현재 JavaScript 디버거의 한계로 인해, 실행이 중단점에서 멈추도록 하려면 JavaScript 디버그를 다시 실행해야 할 수도 있습니다.</p></div><h2 id="node-js에서-디버그" tabindex="-1">Node.js에서 디버그 <a class="header-anchor" href="#node-js에서-디버그" aria-label="Permalink to &quot;Node.js에서 디버그&quot;">​</a></h2><p>프로젝트가 Node.js를 대상으로 하는 경우 이 런타임에서 디버그할 수 있습니다.</p><p>Node.js를 대상으로 하는 Kotlin/JS 애플리케이션을 디버그하려면:</p><ol><li><code>build</code> Gradle 태스크를 실행하여 프로젝트를 빌드합니다.</li><li>프로젝트 디렉터리 내의 <code>build/js/packages/your-module/kotlin/</code> 디렉터리에서 Node.js용 결과 <code>.js</code> 파일을 찾습니다.</li><li><a href="https://nodejs.org/en/docs/guides/debugging-getting-started/#jetbrains-webstorm-2017-1-and-other-jetbrains-ides" target="_blank" rel="noreferrer">Node.js 디버깅 가이드</a>에 설명된 대로 Node.js에서 디버그합니다.</li></ol><h2 id="다음-단계" tabindex="-1">다음 단계 <a class="header-anchor" href="#다음-단계" aria-label="Permalink to &quot;다음 단계&quot;">​</a></h2><p>이제 Kotlin/JS 프로젝트로 디버그 세션을 시작하는 방법을 알았으니, 디버깅 도구를 효율적으로 사용하는 방법을 알아보세요.</p><ul><li><a href="https://developer.chrome.com/docs/devtools/javascript/" target="_blank" rel="noreferrer">Google Chrome에서 JavaScript 디버그</a></li><li><a href="https://www.jetbrains.com/help/idea/debugging-javascript-in-chrome.html" target="_blank" rel="noreferrer">IntelliJ IDEA JavaScript 디버거</a>에 익숙해지기</li><li><a href="https://nodejs.org/en/docs/guides/debugging-getting-started/" target="_blank" rel="noreferrer">Node.js에서 디버그</a></li></ul><h2 id="문제-발생-시" tabindex="-1">문제 발생 시 <a class="header-anchor" href="#문제-발생-시" aria-label="Permalink to &quot;문제 발생 시&quot;">​</a></h2><p>Kotlin/JS 디버깅 관련 문제가 발생하는 경우, 저희 이슈 트래커인 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a>에 보고해주세요.</p>',35)]))}const j=i(p,[["render",c]]);export{k as __pageData,j as default};
