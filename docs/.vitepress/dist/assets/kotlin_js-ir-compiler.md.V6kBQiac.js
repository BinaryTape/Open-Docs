import{_ as n,c as l,o as t,ag as a,j as i,a as e}from"./chunks/framework.Bksy39di.js";const g=JSON.parse('{"title":"Kotlin/JS IR 编译器","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/js-ir-compiler.md","filePath":"kotlin/js-ir-compiler.md","lastUpdated":1754307826000}'),p={name:"kotlin/js-ir-compiler.md"};function o(r,s,d,h,c,k){return t(),l("div",null,s[0]||(s[0]=[a(`<h1 id="kotlin-js-ir-编译器" tabindex="-1">Kotlin/JS IR 编译器 <a class="header-anchor" href="#kotlin-js-ir-编译器" aria-label="Permalink to &quot;Kotlin/JS IR 编译器&quot;">​</a></h1><p>Kotlin/JS IR 编译器后端是 Kotlin/JS 创新的主要焦点，为该技术的发展铺平了道路。</p><p>相较于直接从 Kotlin 源代码生成 JavaScript 代码，Kotlin/JS IR 编译器后端采用了一种新方法。Kotlin 源代码首先被转换为 <a href="/kotlin/whatsnew14#unified-backends-and-extensibility">Kotlin 中间表示 (IR)</a>，随后编译为 JavaScript。对于 Kotlin/JS 而言，这实现了积极的优化，并改进了之前编译器中存在的痛点，例如生成的代码大小（通过<a href="#dead-code-elimination">无用代码消除</a>）以及 JavaScript 和 TypeScript 生态系统的互操作性，仅举几个例子。</p><p>IR 编译器后端从 Kotlin 1.4.0 开始通过 Kotlin Multiplatform Gradle 插件提供。要在您的项目中启用它，请在 Gradle 构建脚本中将编译器类型传递给 <code>js</code> 函数：</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kotlin {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    js(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">IR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 或：LEGACY, BOTH</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        binaries</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">executable() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 不适用于 BOTH，详见下方</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><code>IR</code> 使用 Kotlin/JS 的新 IR 编译器后端。</li><li><code>LEGACY</code> 使用旧的编译器后端。</li><li><code>BOTH</code> 使用新的 IR 编译器和默认编译器后端编译您的项目。使用此模式<a href="#authoring-libraries-for-the-ir-compiler-with-backwards-compatibility">编写兼容两种后端（的库）</a>。</li></ul><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>旧的编译器后端自 Kotlin 1.8.0 起已弃用。从 Kotlin 1.9.0 开始，使用编译器类型 <code>LEGACY</code> 或 <code>BOTH</code> 将导致错误。</p></div><p>编译器类型也可以在 <code>gradle.properties</code> 文件中设置，键为 <code>kotlin.js.compiler=ir</code>。然而，此行为将被 <code>build.gradle(.kts)</code> 中的任何设置覆盖。</p><h2 id="顶层属性的惰性初始化" tabindex="-1">顶层属性的惰性初始化 <a class="header-anchor" href="#顶层属性的惰性初始化" aria-label="Permalink to &quot;顶层属性的惰性初始化&quot;">​</a></h2><p>为了更好的应用程序启动性能，Kotlin/JS IR 编译器会惰性初始化顶层属性。通过这种方式，应用程序加载时无需初始化其代码中使用的所有顶层属性。它只初始化启动时需要的属性；其他属性在使用它们的代码实际运行时才获得其值。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 密集计算</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    result</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 值在首次使用时计算</span></span></code></pre></div>`,11),i("p",null,[e("如果由于某种原因，您需要急切地初始化属性（在应用程序启动时），请使用 "),i("a",{href:"https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.js/-eager-initialization/",nullable:"true",target:"_blank",rel:"noreferrer"},[i("code",null,"@EagerInitialization")]),e(" 注解标记它。")],-1),a(`<h2 id="用于开发二进制文件的增量编译" tabindex="-1">用于开发二进制文件的增量编译 <a class="header-anchor" href="#用于开发二进制文件的增量编译" aria-label="Permalink to &quot;用于开发二进制文件的增量编译&quot;">​</a></h2><p>JS IR 编译器提供了_用于开发二进制文件的增量编译模式_，可加快开发过程。在此模式下，编译器在模块级别缓存 <code>compileDevelopmentExecutableKotlinJs</code> Gradle 任务的结果。它在后续编译期间对未更改的源文件使用缓存的编译结果，使其更快完成，特别是对于小型更改。</p><p>增量编译默认启用。要禁用开发二进制文件的增量编译，请将以下行添加到项目的 <code>gradle.properties</code> 或 <code>local.properties</code> 中：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.incremental.js.ir=false // 默认为 true</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>增量编译模式下的清理构建通常会更慢，因为需要创建和填充缓存。</p></div><h2 id="输出模式" tabindex="-1">输出模式 <a class="header-anchor" href="#输出模式" aria-label="Permalink to &quot;输出模式&quot;">​</a></h2><p>您可以选择 JS IR 编译器在项目中输出 <code>.js</code> 文件的方式：</p><ul><li><p><strong>每个模块一个</strong>。默认情况下，JS 编译器会为项目的每个模块输出单独的 <code>.js</code> 文件作为编译结果。</p></li><li><p><strong>每个项目一个</strong>。您可以通过向 <code>gradle.properties</code> 添加以下行，将整个项目编译成单个 <code>.js</code> 文件：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.js.ir.output.granularity=whole-program // &#39;per-module&#39; 为默认值</span></span></code></pre></div></li><li><p><strong>每个文件一个</strong>。您可以设置更精细的输出，为每个 Kotlin 文件生成一个（如果文件包含导出的声明，则为两个）JavaScript 文件。要启用按文件编译模式：</p><ol><li><p>将 <code>useEsModules()</code> 函数添加到您的构建文件中，以支持 ECMAScript 模块：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(IR) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        useEsModules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 启用 ES2015 模块</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        browser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>或者，您可以使用 <code>es2015</code> <a href="/kotlin/js-project-setup#support-for-es2015-features">编译目标</a> 以在您的项目中支持 ES2015 特性。</p></li><li><p>应用 <code>-Xir-per-file</code> 编译器选项或使用以下内容更新您的 <code>gradle.properties</code> 文件：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># gradle.properties</span></span>
<span class="line"><span>kotlin.js.ir.output.granularity=per-file // &#39;per-module&#39; 为默认值</span></span></code></pre></div></li></ol></li></ul><h2 id="生产环境中成员名称的混淆" tabindex="-1">生产环境中成员名称的混淆 <a class="header-anchor" href="#生产环境中成员名称的混淆" aria-label="Permalink to &quot;生产环境中成员名称的混淆&quot;">​</a></h2><p>Kotlin/JS IR 编译器利用其关于 Kotlin 类和函数之间关系的内部信息，应用更高效的混淆，缩短函数、属性和类的名称。这减少了生成的捆绑应用程序的大小。</p><p>当您在<a href="/kotlin/js-project-setup#building-executables">生产</a>模式下构建 Kotlin/JS 应用程序时，此类混淆会自动应用，并默认启用。要禁用成员名称混淆，请使用 <code>-Xir-minimized-member-names</code> 编译器选项：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(IR) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        compilations.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            compileTaskProvider.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                compilerOptions.freeCompilerArgs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xir-minimized-member-names=false&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="无用代码消除" tabindex="-1">无用代码消除 <a class="header-anchor" href="#无用代码消除" aria-label="Permalink to &quot;无用代码消除&quot;">​</a></h2><p><a href="https://wikipedia.org/wiki/Dead_code_elimination" target="_blank" rel="noreferrer">无用代码消除</a> (DCE) 通过移除未使用的属性、函数和类，减少生成的 JavaScript 代码的大小。</p><p>未使用的声明可能出现在以下情况：</p><ul><li>函数被内联且从不直接调用（除了少数情况外，这种情况总是发生）。</li><li>模块使用共享库。如果没有 DCE，即使您不使用库的某些部分，它们仍会包含在生成的捆绑包中。例如，Kotlin 标准库包含用于操作 list、数组、字符序列、DOM 适配器等的函数。所有这些功能性大约需要 1.3 MB 的 JavaScript 文件大小。而一个简单的“Hello, world”应用程序只依赖控制台例程，整个文件只有几千字节。</li></ul><p>在 Kotlin/JS 编译器中，DCE 会自动处理：</p><ul><li><p>DCE 在 <em>开发</em> 捆绑任务中被禁用，这对应于以下 Gradle 任务：</p><ul><li><code>jsBrowserDevelopmentRun</code></li><li><code>jsBrowserDevelopmentWebpack</code></li><li><code>jsNodeDevelopmentRun</code></li><li><code>compileDevelopmentExecutableKotlinJs</code></li><li><code>compileDevelopmentLibraryKotlinJs</code></li><li>名称中包含“development”的其他 Gradle 任务</li></ul></li><li><p>如果您构建 <em>生产</em> 捆绑包，DCE 则会启用，这对应于以下 Gradle 任务：</p><ul><li><code>jsBrowserProductionRun</code></li><li><code>jsBrowserProductionWebpack</code></li><li><code>compileProductionExecutableKotlinJs</code></li><li><code>compileProductionLibraryKotlinJs</code></li><li>名称中包含“production”的其他 Gradle 任务</li></ul></li></ul><p>通过 <a href="/kotlin/js-to-kotlin-interop#jsexport-annotation"><code>@JsExport</code></a> 注解，您可以指定希望 DCE 视为根的声明。</p><h2 id="预览-typescript-声明文件-d-ts-的生成" tabindex="-1">预览：TypeScript 声明文件（d.ts）的生成 <a class="header-anchor" href="#预览-typescript-声明文件-d-ts-的生成" aria-label="Permalink to &quot;预览：TypeScript 声明文件（d.ts）的生成&quot;">​</a></h2><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>TypeScript 声明文件（<code>d.ts</code>）的生成是<a href="/kotlin/components-stability">实验性的</a>。它随时可能被放弃或更改。需要选择启用（详见下方），并且您应仅将其用于求值目的。我们非常感谢您在 <a href="https://youtrack.jetbrains.com/issues?q=%23%7BKJS:%20d.ts%20generation%7D" target="_blank" rel="noreferrer">YouTrack</a> 上提供反馈。</p></div><p>Kotlin/JS IR 编译器能够从您的 Kotlin 代码生成 TypeScript 定义。这些定义可供 JavaScript 工具和 IDE 在开发混合应用时使用，以提供自动补全、支持静态分析器，并使 Kotlin 代码更容易包含在 JavaScript 和 TypeScript 项目中。</p><p>如果您的项目生成可执行文件（<code>binaries.executable()</code>），Kotlin/JS IR 编译器会收集任何用 <a href="/kotlin/js-to-kotlin-interop#jsexport-annotation"><code>@JsExport</code></a> 标记的顶层声明，并自动在 <code>.d.ts</code> 文件中生成 TypeScript 定义。</p><p>如果您想生成 TypeScript 定义，您必须在 Gradle 构建文件中显式配置此项。将 <code>generateTypeScriptDefinitions()</code> 添加到您的 <code>build.gradle.kts</code> 文件中的 <a href="/kotlin/js-project-setup#execution-environments"><code>js</code> 部分</a>。例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        binaries.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        browser</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        generateTypeScriptDefinitions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这些定义可以在 <code>build/js/packages/&lt;package_name&gt;/kotlin</code> 中找到，及其对应的未打包 JavaScript 代码旁边。</p><h2 id="ir-编译器当前的局限性" tabindex="-1">IR 编译器当前的局限性 <a class="header-anchor" href="#ir-编译器当前的局限性" aria-label="Permalink to &quot;IR 编译器当前的局限性&quot;">​</a></h2><p>新 IR 编译器后端的一个主要变化是与默认后端<strong>缺少二进制兼容性</strong>。用新 IR 编译器创建的库使用 <a href="/kotlin/native-libraries#library-format"><code>klib</code> 格式</a>，无法在默认后端中使用。同时，用旧编译器创建的库是一个包含 <code>.js</code> 文件的 <code>jar</code> 包，无法在 IR 后端中使用。</p><p>如果您的项目想使用 IR 编译器后端，您需要<strong>将所有 Kotlin 依赖项更新到支持此新后端的版本</strong>。JetBrains 针对 Kotlin 1.4+ 面向 Kotlin/JS 发布的库已包含与新 IR 编译器后端一起使用所需的所有 artifact。</p><p><strong>如果您是库作者</strong>，希望提供与当前编译器后端以及新 IR 编译器后端兼容性，另外请查看<a href="#authoring-libraries-for-the-ir-compiler-with-backwards-compatibility">为 IR 编译器编写具有向后兼容性（的库）</a>部分。</p><p>IR 编译器后端与默认后端相比也存在一些差异。在试用新后端时，最好留意这些可能的陷阱。</p><ul><li>一些<strong>依赖于默认后端特定特性</strong>的库，例如 <code>kotlin-wrappers</code>，可能会出现一些问题。您可以在 <a href="https://youtrack.jetbrains.com/issue/KT-40525" target="_blank" rel="noreferrer">YouTrack</a> 上关注调查和进展。</li><li>IR 后端默认情况下根本<strong>不将 Kotlin 声明暴露给 JavaScript</strong>。要使 Kotlin 声明对 JavaScript 可见，它们<strong>必须</strong>使用 <a href="/kotlin/js-to-kotlin-interop#jsexport-annotation"><code>@JsExport</code></a> 注解。</li></ul><h2 id="将现有项目迁移到-ir-编译器" tabindex="-1">将现有项目迁移到 IR 编译器 <a class="header-anchor" href="#将现有项目迁移到-ir-编译器" aria-label="Permalink to &quot;将现有项目迁移到 IR 编译器&quot;">​</a></h2><p>由于两种 Kotlin/JS 编译器之间的显著差异，使您的 Kotlin/JS 代码与 IR 编译器协同工作可能需要一些调整。请在 <a href="/kotlin/js-ir-migration">Kotlin/JS IR 编译器迁移指南</a>中了解如何将现有 Kotlin/JS 项目迁移到 IR 编译器。</p><h2 id="编写具有向后兼容性的-ir-编译器库" tabindex="-1">编写具有向后兼容性的 IR 编译器库 <a class="header-anchor" href="#编写具有向后兼容性的-ir-编译器库" aria-label="Permalink to &quot;编写具有向后兼容性的 IR 编译器库&quot;">​</a></h2><p>如果您是库维护者，希望提供与默认后端以及新 IR 编译器后端兼容性，则提供了编译器选择设置，允许您为两种后端创建 artifact，使您能够保持现有用户的兼容性，同时为下一代 Kotlin 编译器提供支持。这种所谓的 <code>both</code> 模式可以通过使用 <code>gradle.properties</code> 文件中的 <code>kotlin.js.compiler=both</code> 设置开启，或者可以作为 <code>build.gradle(.kts)</code> 文件中 <code>js</code> 代码块内的项目特有选项之一进行设置：</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kotlin {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    js(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BOTH</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在 <code>both</code> 模式下，从您的源代码构建库时，IR 编译器后端和默认编译器后端都会被使用（因此得名）。这意味着将生成包含 Kotlin IR 的 <code>klib</code> 文件以及用于默认编译器的 <code>jar</code> 文件。当在相同的 Maven 坐标下发布时，Gradle 将根据用例自动选择正确的 artifact——旧编译器使用 <code>js</code>，新编译器使用 <code>klib</code>。这使您能够为使用这两种编译器后端中任意一种的项目编译和发布您的库。</p>`,38)]))}const u=n(p,[["render",o]]);export{g as __pageData,u as default};
