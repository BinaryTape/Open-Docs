import{_ as i,c as a,o as e,ag as t}from"./chunks/framework.Bksy39di.js";const d=JSON.parse('{"title":"可访问性","description":"","frontmatter":{},"headers":[],"relativePath":"kmp/compose-accessibility.md","filePath":"kmp/compose-accessibility.md","lastUpdated":1755516278000}'),n={name:"kmp/compose-accessibility.md"};function l(p,s,h,o,k,r){return e(),a("div",null,s[0]||(s[0]=[t(`<h1 id="可访问性" tabindex="-1">可访问性 <a class="header-anchor" href="#可访问性" aria-label="Permalink to &quot;可访问性&quot;">​</a></h1><p>Compose Multiplatform 提供了满足可访问性标准所必需的特性，例如语义属性、可访问性 API，以及对包括屏幕阅读器和键盘导航在内的辅助技术的支持。</p><p>该框架使得应用程序的设计能够符合 <a href="https://eur-lex.europa.eu/legal-content/EN/TXT/?uri=CELEX%3A32019L0882" target="_blank" rel="noreferrer">欧洲可访问性法案</a> (EAA) 和 <a href="https://www.w3.org/TR/WCAG21/" target="_blank" rel="noreferrer">Web 内容可访问性指南</a> (WCAG) 的要求。</p><h2 id="语义属性" tabindex="-1">语义属性 <a class="header-anchor" href="#语义属性" aria-label="Permalink to &quot;语义属性&quot;">​</a></h2><p>为了给可访问性、自动填充和测试等服务提供上下文，你可以使用语义属性定义组件的含义和作用。</p><p>语义属性是语义树的构建块，语义树是 UI 的简化表示。当你在 composables 中定义语义属性时，它们会自动添加到语义树。辅助技术通过遍历语义树而不是整个 UI 树来与应用交互。</p><p>针对可访问性的关键语义属性：</p><ul><li><p><code>contentDescription</code> 为 <a href="https://kotlinlang.org/api/compose-multiplatform/material3/androidx.compose.material3/-icon-button.html" target="_blank" rel="noreferrer"><code>IconButton</code></a> 和 <a href="https://kotlinlang.org/api/compose-multiplatform/material3/androidx.compose.material3/-floating-action-button.html" target="_blank" rel="noreferrer"><code>FloatingActionButton</code></a> 等非文本或模糊的 UI 元素提供描述。 它是主要的可访问性 API，用于提供屏幕阅读器会播报的文本标签。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Modifier.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">semantics</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { contentDescription </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Description of the image&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div></li><li><p><code>role</code> 告知可访问性服务 UI 组件的功能类型，例如按钮、复选框或图像。这有助于屏幕阅读器解释交互模型并正确播报该元素。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Modifier.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">semantics</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { role </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Role.Button }</span></span></code></pre></div></li><li><p><code>stateDescription</code> 描述了交互式 UI 元素的当前状态。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Modifier.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">semantics</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { stateDescription </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (isChecked) </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Checked&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> else</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Unchecked&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div></li><li><p><code>testTag</code> 为 composable 元素分配一个唯一标识符，以便在 Android 上使用 Espresso 框架或在 iOS 上使用 XCUITest 进行 UI 测试。你也可以使用 <code>testTag</code> 进行调试或在需要组件标识符的特定自动化场景中使用。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Modifier.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">testTag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my_unique_element_id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></li></ul><p>关于语义属性的完整列表，请参见 <a href="https://developer.android.com/reference/kotlin/androidx/compose/ui/semantics/SemanticsProperties" target="_blank" rel="noreferrer">Jetpack Compose API 参考</a> 中的 <a href="https://developer.android.com/reference/kotlin/androidx/compose/ui/semantics/SemanticsProperties" target="_blank" rel="noreferrer"><code>SemanticsProperties</code></a>。</p><h2 id="遍历顺序" tabindex="-1">遍历顺序 <a class="header-anchor" href="#遍历顺序" aria-label="Permalink to &quot;遍历顺序&quot;">​</a></h2><p>默认情况下，屏幕阅读器会以固定顺序遍历 UI 元素，按照从左到右、从上到下的布局顺序。然而，对于复杂布局，屏幕阅读器可能无法自动确定正确的阅读顺序。这对于包含容器视图（例如表格和嵌套视图）的布局至关重要，这些布局支持其中包含视图的滚动和缩放。</p><p>为了确保在复杂视图中滚动和轻扫时具有正确的阅读顺序，请定义遍历语义属性。这也确保了在使用向上或向下轻扫的可访问性手势时，在不同的遍历组之间进行正确的导航。</p><p>组件的遍历索引默认值为 <code>0f</code>。组件的遍历索引值越低，其内容描述被读取的顺序相对于其他组件而言就越靠前。</p><p>例如，如果你希望屏幕阅读器优先处理浮动操作按钮，可以将其遍历索引设置为 <code>-1f</code>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Composable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FloatingBox</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Box</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        modifier </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Modifier.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">semantics</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            isTraversalGroup </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 设置一个负索引，使其优先于默认索引的元素</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            traversalIndex </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1f</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        FloatingActionButton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(onClick </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            Icon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                imageVector </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Icons.Default.Add,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                contentDescription </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Icon of floating action button&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="后续步骤" tabindex="-1">后续步骤 <a class="header-anchor" href="#后续步骤" aria-label="Permalink to &quot;后续步骤&quot;">​</a></h2><p>了解更多关于 iOS 可访问性特性的信息：</p><ul><li><a href="./compose-ios-accessibility#high-contrast-theme">高对比度主题</a></li><li><a href="./compose-ios-accessibility#test-accessibility-with-xctest-framework">使用 XCTest framework 测试可访问性</a></li><li><a href="./compose-ios-accessibility#control-via-trackpad-and-keyboard">通过触控板和键盘控制</a></li><li><a href="./compose-ios-accessibility#choose-the-tree-synchronization-option">将语义树与 iOS 可访问性树同步</a> （适用于 Compose Multiplatform 1.7.3 及更早版本）</li></ul><p>了解更多关于桌面平台可访问性特性的信息：</p><ul><li><a href="./compose-desktop-accessibility#enabling-accessibility-on-windows">在 Windows 上启用可访问性</a></li><li><a href="./compose-desktop-accessibility#example-custom-button-with-semantic-rules">使用 macOS 和 Windows 工具测试你的应用</a></li></ul><p>关于实现细节，请参见 <a href="https://developer.android.com/develop/ui/compose/accessibility" target="_blank" rel="noreferrer">Jetpack Compose 文档</a>。</p>`,21)]))}const E=i(n,[["render",l]]);export{d as __pageData,E as default};
