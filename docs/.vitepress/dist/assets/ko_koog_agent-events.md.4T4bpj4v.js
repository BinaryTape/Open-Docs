import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.Bksy39di.js";const o=JSON.parse('{"title":"에이전트 이벤트","description":"","frontmatter":{},"headers":[],"relativePath":"ko/koog/agent-events.md","filePath":"ko/koog/agent-events.md","lastUpdated":1755146406000}'),t={name:"ko/koog/agent-events.md"};function l(h,s,p,k,r,d){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="에이전트-이벤트" tabindex="-1">에이전트 이벤트 <a class="header-anchor" href="#에이전트-이벤트" aria-label="Permalink to &quot;에이전트 이벤트&quot;">​</a></h1><p>에이전트 이벤트는 에이전트 워크플로의 일부로 발생하는 동작 또는 상호 작용입니다. 다음을 포함합니다:</p><ul><li>에이전트 라이프사이클 이벤트</li><li>전략 이벤트</li><li>노드 이벤트</li><li>LLM 호출 이벤트</li><li>도구 호출 이벤트</li></ul><h2 id="이벤트-핸들러" tabindex="-1">이벤트 핸들러 <a class="header-anchor" href="#이벤트-핸들러" aria-label="Permalink to &quot;이벤트 핸들러&quot;">​</a></h2><p>로깅, 테스트, 디버깅, 그리고 에이전트 동작 확장을 위해 에이전트 워크플로 중에 이벤트 핸들러를 사용하여 특정 이벤트를 모니터링하고 응답할 수 있습니다.</p><p><code>EventHandler</code> 기능은 다양한 에이전트 이벤트에 연결할 수 있도록 합니다. 이는 다음과 같은 이벤트 위임 메커니즘으로 작동합니다:</p><ul><li>AI 에이전트 작업의 라이프사이클을 관리합니다.</li><li>워크플로의 다양한 단계에서 모니터링하고 응답하기 위한 훅(hook)을 제공합니다.</li><li>오류 처리 및 복구를 가능하게 합니다.</li><li>도구 호출 추적 및 결과 처리를 용이하게 합니다.</li></ul><h3 id="설치-및-구성" tabindex="-1">설치 및 구성 <a class="header-anchor" href="#설치-및-구성" aria-label="Permalink to &quot;설치 및 구성&quot;">​</a></h3><p><code>EventHandler</code> 기능은 <code>EventHandler</code> 클래스를 통해 에이전트 워크플로와 통합됩니다. 이 클래스는 다양한 에이전트 이벤트에 대한 콜백을 등록하는 방법을 제공하며, 에이전트 구성에 기능으로 설치될 수 있습니다. 자세한 내용은 <a href="https://api.koog.ai/agents/agents-features/agents-features-event-handler/ai.koog.agents.local.features.eventHandler.feature/-event-handler/index.html" target="_blank" rel="noreferrer">API 참조</a>를 참조하세요.</p><p>에이전트에 기능을 설치하고 이벤트 핸들러를 구성하려면 다음을 수행하세요.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">handleEvents</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 도구 호출 처리</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    onToolCall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { eventContext </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Tool called: \${eventContext.tool} with args \${eventContext.toolArgs}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 에이전트 실행 완료 시 트리거되는 이벤트 처리</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    onAgentFinished</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { eventContext </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Agent finished with result: \${eventContext.result}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 다른 이벤트 핸들러</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>이벤트 핸들러 구성에 대한 자세한 내용은 <a href="https://api.koog.ai/agents/agents-features/agents-features-event-handler/ai.koog.agents.local.features.eventHandler.feature/-event-handler-config/index.html" target="_blank" rel="noreferrer">API 참조</a>를 참조하세요.</p><p>에이전트를 생성할 때 <code>handleEvents</code> 확장 함수를 사용하여 이벤트 핸들러를 설정할 수도 있습니다. 이 함수는 또한 이벤트 핸들러 기능을 설치하고 에이전트에 대한 이벤트 핸들러를 구성합니다. 다음은 예시입니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> agent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AIAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    executor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> simpleOllamaAIExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    llmModel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> OllamaModels.Meta.LLAMA_3_2,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    handleEvents</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 도구 호출 처리</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        onToolCall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { eventContext </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Tool called: \${eventContext.tool} with args \${eventContext.toolArgs}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 에이전트 실행 완료 시 트리거되는 이벤트 처리</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        onAgentFinished</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { eventContext </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Agent finished with result: \${eventContext.result}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 다른 이벤트 핸들러</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,14)]))}const g=i(t,[["render",l]]);export{o as __pageData,g as default};
