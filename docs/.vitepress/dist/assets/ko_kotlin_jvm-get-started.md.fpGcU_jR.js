import{_ as p,a as d,b as k,c as h,d as g}from"./chunks/jvm-output-2.g0xuV-An.js";import{_ as u,C as o,c,o as m,ag as a,j as i,a as s,G as l,w as n}from"./chunks/framework.Bksy39di.js";const T=JSON.parse('{"title":"Kotlin/JVM 시작하기","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kotlin/jvm-get-started.md","filePath":"ko/kotlin/jvm-get-started.md","lastUpdated":1754307826000}'),_={name:"ko/kotlin/jvm-get-started.md"},E={class:"note custom-block"};function b(y,t,v,f,K,C){const e=o("tab"),r=o("tabs");return m(),c("div",null,[t[11]||(t[11]=a('<h1 id="kotlin-jvm-시작하기" tabindex="-1">Kotlin/JVM 시작하기 <a class="header-anchor" href="#kotlin-jvm-시작하기" aria-label="Permalink to &quot;Kotlin/JVM 시작하기&quot;">​</a></h1><p>이 튜토리얼에서는 IntelliJ IDEA를 사용하여 콘솔 애플리케이션을 만드는 방법을 보여줍니다.</p><p>시작하려면 먼저 <a href="https://www.jetbrains.com/idea/download/index.html" target="_blank" rel="noreferrer">IntelliJ IDEA</a> 최신 버전을 다운로드하여 설치하세요.</p><h2 id="프로젝트-생성하기" tabindex="-1">프로젝트 생성하기 <a class="header-anchor" href="#프로젝트-생성하기" aria-label="Permalink to &quot;프로젝트 생성하기&quot;">​</a></h2>',4)),i("ol",null,[t[10]||(t[10]=a('<li><p>IntelliJ IDEA에서 <strong>File</strong> | <strong>New</strong> | <strong>Project</strong>를 선택합니다.</p></li><li><p>왼쪽 목록에서 <strong>Kotlin</strong>을 선택합니다.</p></li><li><p>새 프로젝트의 이름을 지정하고 필요한 경우 위치를 변경합니다.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>새 프로젝트를 버전 관리에 두려면 <strong>Create Git repository</strong> 체크박스를 선택합니다. 이 작업은 나중에 언제든지 수행할 수 있습니다.</p></div><p><img src="'+p+'" alt="Create a console application" width="700"></p></li><li><p><strong>IntelliJ</strong> 빌드 시스템을 선택합니다. 추가 아티팩트(artifacts) 다운로드가 필요 없는 네이티브 빌더입니다.</p><p>추가 구성이 필요한 더 복잡한 프로젝트를 생성하려면 Maven 또는 Gradle을 선택합니다. Gradle의 경우 빌드 스크립트 언어로 Kotlin 또는 Groovy를 선택하세요.</p></li><li><p><strong>JDK</strong> 목록에서 프로젝트에서 사용할 <a href="https://www.oracle.com/java/technologies/downloads/" target="_blank" rel="noreferrer">JDK</a>를 선택합니다.</p><ul><li>JDK가 컴퓨터에 설치되어 있지만 IDE에 정의되어 있지 않은 경우, <strong>Add JDK</strong>를 선택하고 JDK 홈 디렉터리 경로를 지정합니다.</li><li>필요한 JDK가 컴퓨터에 없는 경우, <strong>Download JDK</strong>를 선택합니다.</li></ul></li><li><p>샘플 <code>&quot;Hello World!&quot;</code> 애플리케이션 파일 생성을 위해 <strong>Add sample code</strong> 옵션을 활성화합니다.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>샘플 코드에 유용한 주석을 추가하려면 <strong>Generate code with onboarding tips</strong> 옵션도 활성화할 수 있습니다.</p></div></li>',6)),i("li",null,[t[9]||(t[9]=i("p",null,[i("strong",null,"Create"),s("를 클릭합니다.")],-1)),i("div",E,[t[8]||(t[8]=i("p",{class:"custom-block-title"},"NOTE",-1)),i("p",null,[t[3]||(t[3]=s("Gradle 빌드 시스템을 선택했다면, 프로젝트에 빌드 스크립트 파일 ")),t[4]||(t[4]=i("code",null,"build.gradle(.kts)",-1)),t[5]||(t[5]=s("이 있습니다. 이 파일에는 콘솔 애플리케이션에 필요한 ")),t[6]||(t[6]=i("code",null,'kotlin("jvm")',-1)),t[7]||(t[7]=s(" 플러그인과 종속성(dependencies)이 포함되어 있습니다. 플러그인의 최신 버전을 사용하는지 확인하세요: ")),l(r,{group:"build-script"},{default:n(()=>[l(e,{title:"Kotlin","group-key":"kotlin"},{default:n(()=>t[0]||(t[0]=[i("code",null,'kotlin plugins { kotlin("jvm") version "2.2.10" application } ',-1)])),_:1}),t[2]||(t[2]=s()),l(e,{title:"Groovy","group-key":"groovy"},{default:n(()=>t[1]||(t[1]=[i("code",null,"groovy plugins { id 'org.jetbrains.kotlin.jvm' version '2.2.10' id 'application' } ",-1)])),_:1})]),_:1})])])])]),t[12]||(t[12]=a('<h2 id="애플리케이션-생성하기" tabindex="-1">애플리케이션 생성하기 <a class="header-anchor" href="#애플리케이션-생성하기" aria-label="Permalink to &quot;애플리케이션 생성하기&quot;">​</a></h2><ol><li><p><code>src/main/kotlin</code>에서 <code>Main.kt</code> 파일을 엽니다.<br><code>src</code> 디렉터리에는 Kotlin 소스 파일과 리소스가 포함되어 있습니다. <code>Main.kt</code> 파일에는 <code>Hello, Kotlin!</code>을 출력하는 샘플 코드와 사이클 반복자(cycle iterator) 값의 여러 줄이 포함되어 있습니다.</p><p><img src="'+d+`" alt="Main.kt with main fun" width="700"></p></li><li><p>코드를 수정하여 이름을 요청하고 <code>&quot;Hello&quot;</code>라고 말하도록 만드세요:</p><ul><li>입력 프롬프트(input prompt)를 생성하고 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.io/readln.html" target="_blank" rel="noreferrer"><code>readln()</code></a> 함수가 반환하는 값을 <code>name</code> 변수에 할당합니다.</li><li>문자열 연결 대신 문자열 템플릿을 사용하여 텍스트 출력에서 변수 이름 앞에 <code>$name</code>처럼 달러 기호(<code>$</code>)를 직접 추가해 보세요.</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;What&#39;s your name?&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> readln</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ol><h2 id="애플리케이션-실행하기" tabindex="-1">애플리케이션 실행하기 <a class="header-anchor" href="#애플리케이션-실행하기" aria-label="Permalink to &quot;애플리케이션 실행하기&quot;">​</a></h2><p>이제 애플리케이션을 실행할 준비가 되었습니다. 가장 쉬운 방법은 거터(gutter)에 있는 녹색 <strong>Run</strong> 아이콘을 클릭하고 **Run &#39;MainKt&#39;**를 선택하는 것입니다.</p><p><img src="`+k+'" alt="Running a console app" width="350"></p><p>결과는 <strong>Run</strong> 도구 창에서 확인할 수 있습니다.</p><p><img src="'+h+'" alt="Kotlin run output" width="600"></p><p>이름을 입력하고 애플리케이션의 환영 인사를 받아보세요!</p><p><img src="'+g+'" alt="Kotlin run output" width="600"></p><p>축하합니다! 첫 번째 Kotlin 애플리케이션을 성공적으로 실행했습니다.</p><h2 id="다음-단계는" tabindex="-1">다음 단계는? <a class="header-anchor" href="#다음-단계는" aria-label="Permalink to &quot;다음 단계는?&quot;">​</a></h2><p>이 애플리케이션을 생성했다면, 이제 Kotlin 문법을 더 깊이 탐구할 수 있습니다:</p><ul><li><a href="https://play.kotlinlang.org/byExample/overview" target="_blank" rel="noreferrer">Kotlin 예제</a>에서 샘플 코드를 추가하세요.</li><li>IDEA용 <a href="https://plugins.jetbrains.com/plugin/10081-jetbrains-academy" target="_blank" rel="noreferrer">JetBrains Academy 플러그인</a>을 설치하고 <a href="https://plugins.jetbrains.com/plugin/10081-jetbrains-academy/docs/learner-start-guide.html?section=Kotlin%20Koans" target="_blank" rel="noreferrer">Kotlin Koans 코스</a>의 연습 문제를 완료하세요.</li></ul>',13))])}const A=u(_,[["render",b]]);export{T as __pageData,A as default};
