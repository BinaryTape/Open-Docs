import{_ as E,C as a,c,o as f,G as s,ag as p,j as e,w as t,a as n}from"./chunks/framework.Bksy39di.js";const S=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ktor/server-conditional-headers.md","filePath":"ktor/server-conditional-headers.md","lastUpdated":1755457140000}'),m={name:"ktor/server-conditional-headers.md"};function y(v,i,C,_,F,b){const k=a("TopicTitle"),h=a("primary-label"),r=a("Links"),g=a("tldr"),o=a("code-block"),l=a("TabItem"),d=a("Tabs"),u=a("list");return f(),c("div",null,[s(k,{labelRef:"server-plugin",title:"条件标头"}),s(h,{ref:"server-plugin"},null,512),s(g,null,{default:t(()=>[i[3]||(i[3]=e("p",null,[e("b",null,"所需依赖项"),n(": "),e("code",null,"io.ktor:ktor-server-conditional-headers")],-1)),i[4]||(i[4]=e("p",null,[e("b",null,"代码示例"),n(": "),e("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/conditional-headers"}," conditional-headers ")],-1)),e("p",null,[e("b",null,[s(r,{href:"/ktor/server-native",summary:"Ktor 支持 Kotlin/Native，允许你在没有额外运行时或虚拟机的情况下运行服务器。"},{default:t(()=>i[0]||(i[0]=[n("原生服务器")])),_:1}),i[1]||(i[1]=n("支持"))]),i[2]||(i[2]=n(": ✅ "))])]),_:1}),i[17]||(i[17]=p('<p><a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-conditional-headers/io.ktor.server.plugins.conditionalheaders/-conditional-headers.html" target="_blank" rel="noreferrer">ConditionalHeaders</a> 插件避免在内容自上次请求以来未更改时发送其正文。这是通过使用以下标头实现的：</p><ul><li><code>Last-Modified</code> 响应标头包含资源修改时间。例如，如果客户端请求包含 <code>If-Modified-Since</code> 值，Ktor 将仅在资源在给定日期之后被修改时发送完整响应。请注意，对于<a href="./server-static-content">静态文件</a>，Ktor 会在<a href="#install_plugin">安装</a> <code>ConditionalHeaders</code> 后自动附加 <code>Last-Modified</code> 标头。</li><li><code>Etag</code> 响应标头是特定资源版本的标识符。例如，如果客户端请求包含 <code>If-None-Match</code> 值，并且此值与 <code>Etag</code> 匹配，Ktor 将不会发送完整响应。你可以在<a href="#configure">配置</a> <code>ConditionalHeaders</code> 时指定 <code>Etag</code> 值。</li></ul><h2 id="add_dependencies" tabindex="-1">添加依赖项 <a class="header-anchor" href="#add_dependencies" aria-label="Permalink to &quot;添加依赖项 {id=&quot;add_dependencies&quot;}&quot;">​</a></h2><p> 要使用 <code>ConditionalHeaders</code>，你需要将 <code>ktor-server-conditional-headers</code> artifact 包含在构建脚本中： </p>',4)),s(d,{group:"languages"},{default:t(()=>[s(l,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:t(()=>[s(o,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-server-conditional-headers:$ktor_version")'})]),_:1}),s(l,{title:"Gradle (Groovy)","group-key":"groovy"},{default:t(()=>[s(o,{lang:"Groovy",code:'            implementation "io.ktor:ktor-server-conditional-headers:$ktor_version"'})]),_:1}),s(l,{title:"Maven","group-key":"maven"},{default:t(()=>[s(o,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-server-conditional-headers-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),i[18]||(i[18]=e("h2",{id:"install_plugin",tabindex:"-1"},[n("安装 ConditionalHeaders "),e("a",{class:"header-anchor",href:"#install_plugin","aria-label":'Permalink to "安装 ConditionalHeaders {id="install_plugin"}"'},"​")],-1)),e("p",null,[i[6]||(i[6]=n(" 要将 ")),i[7]||(i[7]=e("code",null,"ConditionalHeaders",-1)),i[8]||(i[8]=n(" 插件")),i[9]||(i[9]=e("a",{href:"#install"},"安装",-1)),i[10]||(i[10]=n("到应用程序， 请将其传递给指定")),s(r,{href:"/ktor/server-modules",summary:"模块允许你通过对路由进行分组来组织你的应用程序。"},{default:t(()=>i[5]||(i[5]=[n("模块")])),_:1}),i[11]||(i[11]=n("中的 ")),i[12]||(i[12]=e("code",null,"install",-1)),i[13]||(i[13]=n(" 函数。 下面的代码片段展示了如何安装 ")),i[14]||(i[14]=e("code",null,"ConditionalHeaders",-1)),i[15]||(i[15]=n(" ... "))]),s(u,null,{default:t(()=>i[16]||(i[16]=[e("li",null,[n(" ... 在 "),e("code",null,"embeddedServer"),n(" 函数调用内部。 ")],-1),e("li",null,[n(" ... 在显式定义的 "),e("code",null,"module"),n(" 内部，它是 "),e("code",null,"Application"),n(" 类的扩展函数。 ")],-1)])),_:1}),s(d,null,{default:t(()=>[s(l,{title:"embeddedServer"},{default:t(()=>[s(o,{lang:"kotlin",code:`            import io.ktor.server.engine.*
            import io.ktor.server.netty.*
            import io.ktor.server.application.*
            import io.ktor.server.plugins.conditionalheaders.*

            fun main() {
                embeddedServer(Netty, port = 8080) {
                    install(ConditionalHeaders)
                    // ...
                }.start(wait = true)
            }`})]),_:1}),s(l,{title:"module"},{default:t(()=>[s(o,{lang:"kotlin",code:`            import io.ktor.server.application.*
            import io.ktor.server.plugins.conditionalheaders.*
            // ...
            fun Application.module() {
                install(ConditionalHeaders)
                // ...
            }`})]),_:1})]),_:1}),i[19]||(i[19]=p(`<p><code>ConditionalHeaders</code> 插件也可以<a href="#install-route">安装到特定路由</a>。 如果你需要为不同的应用程序资源使用不同的 <code>ConditionalHeaders</code> 配置，这可能会很有用。 </p><h2 id="configure" tabindex="-1">配置标头 <a class="header-anchor" href="#configure" aria-label="Permalink to &quot;配置标头 {id=&quot;configure&quot;}&quot;">​</a></h2><p>要配置 <code>ConditionalHeaders</code>，你需要在 <code>install</code> 代码块内调用 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-conditional-headers/io.ktor.server.plugins.conditionalheaders/-conditional-headers-config/version.html" target="_blank" rel="noreferrer">version</a> 函数。此函数提供了对给定 <code>ApplicationCall</code> 和 <code>OutgoingContent</code> 的资源版本列表的访问权限。你可以通过使用 <a href="https://api.ktor.io/ktor-http/io.ktor.http.content/-entity-tag-version/index.html" target="_blank" rel="noreferrer">EntityTagVersion</a> 和 <a href="https://api.ktor.io/ktor-http/io.ktor.http.content/-last-modified-version/index.html" target="_blank" rel="noreferrer">LastModifiedVersion</a> 类对象来指定所需的版本。</p><p>下面的代码片段展示了如何为 CSS 添加 <code>Etag</code> 和 <code>Last-Modified</code> 标头：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ConditionalHeaders) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> file </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> File</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;src/main/kotlin/com/example/Application.kt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { call, outgoingContent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        when</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (outgoingContent.contentType?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withoutParameters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            ContentType.Text.CSS </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                EntityTagVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(file.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lastModified</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hashCode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                LastModifiedVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(file.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lastModified</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            )</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> emptyList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>你可以在这里找到完整示例：<a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/conditional-headers" target="_blank" rel="noreferrer">conditional-headers</a>。</p>`,6))])}const A=E(m,[["render",y]]);export{S as __pageData,A as default};
