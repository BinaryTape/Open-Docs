import{_ as a,c as i,o as e,ag as t}from"./chunks/framework.Bksy39di.js";const E=JSON.parse('{"title":"OpenTelemetry 支持","description":"","frontmatter":{},"headers":[],"relativePath":"koog/opentelemetry-support.md","filePath":"koog/opentelemetry-support.md","lastUpdated":1755146406000}'),n={name:"koog/opentelemetry-support.md"};function l(p,s,h,r,k,d){return e(),i("div",null,s[0]||(s[0]=[t(`<h1 id="opentelemetry-支持" tabindex="-1">OpenTelemetry 支持 <a class="header-anchor" href="#opentelemetry-支持" aria-label="Permalink to &quot;OpenTelemetry 支持&quot;">​</a></h1><p>本页面详细介绍了 Koog 代理框架对 OpenTelemetry 的支持，用于跟踪和监控您的 AI 代理。</p><h2 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h2><p>OpenTelemetry 是一个可观测性框架，它提供工具用于从应用程序生成、收集和导出遥测数据（跟踪）。Koog 的 OpenTelemetry 特性允许您对 AI 代理进行插桩以收集遥测数据，这可以帮助您：</p><ul><li>监控代理性能和行为</li><li>调试复杂代理工作流中的问题</li><li>可视化代理的执行流</li><li>跟踪 LLM 调用和工具使用</li><li>分析代理行为模式</li></ul><h2 id="opentelemetry-关键概念" tabindex="-1">OpenTelemetry 关键概念 <a class="header-anchor" href="#opentelemetry-关键概念" aria-label="Permalink to &quot;OpenTelemetry 关键概念&quot;">​</a></h2><ul><li><strong>Span</strong>：Span 表示分布式跟踪中的单个工作单元或操作。它们指示应用程序中特定活动的开始和结束，例如代理执行、函数调用、LLM 调用或工具调用。</li><li><strong>属性</strong>：属性提供关于遥测相关项（例如 Span）的元数据。属性以键值对的形式表示。</li><li><strong>事件</strong>：事件是 Span 生命周期中特定时间点发生的、可能值得注意的事情。</li><li><strong>导出器</strong>：导出器是负责将收集到的遥测数据发送到各种后端或目标位置的组件。</li><li><strong>收集器</strong>：收集器接收、处理和导出遥测数据。它们充当应用程序与可观测性后端之间的中介。</li><li><strong>采样器</strong>：采样器根据采样策略决定是否应记录跟踪。它们用于管理遥测数据的量。</li><li><strong>资源</strong>：资源表示生成遥测数据的实体。它们通过资源属性进行标识，这些属性是提供有关资源的键值对。</li></ul><p>Koog 中的 OpenTelemetry 特性会自动为各种代理事件创建 Span，包括：</p><ul><li>代理执行的开始和结束</li><li>节点执行</li><li>LLM 调用</li><li>工具调用</li></ul><h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h2><p>要在 Koog 中使用 OpenTelemetry，请将 OpenTelemetry 特性添加到您的代理中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> agent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AIAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    executor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> simpleOpenAIExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(apiKey),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    llmModel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> OpenAIModels.Chat.GPT4o,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    systemPrompt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;You are a helpful assistant.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    installFeatures </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(OpenTelemetry) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 配置选项在此处</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="配置" tabindex="-1">配置 <a class="header-anchor" href="#配置" aria-label="Permalink to &quot;配置&quot;">​</a></h2><h3 id="基本配置" tabindex="-1">基本配置 <a class="header-anchor" href="#基本配置" aria-label="Permalink to &quot;基本配置&quot;">​</a></h3><p>以下是在代理中配置 OpenTelemetry 特性时可设置的全部可用属性列表：</p><table tabindex="0"><thead><tr><th>Name</th><th>数据类型</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td><code>serviceName</code></td><td><code>String</code></td><td><code>ai.koog</code></td><td>正在插桩的服务名称。</td></tr><tr><td><code>serviceVersion</code></td><td><code>String</code></td><td>当前 Koog 库版本</td><td>正在插桩的服务版本。</td></tr><tr><td><code>isVerbose</code></td><td><code>Boolean</code></td><td><code>false</code></td><td>是否为 OpenTelemetry 配置调试启用详细日志记录。</td></tr><tr><td><code>sdk</code></td><td><code>OpenTelemetrySdk</code></td><td></td><td>用于遥测数据收集的 OpenTelemetry SDK 实例。</td></tr><tr><td><code>tracer</code></td><td><code>Tracer</code></td><td></td><td>用于创建 Span 的 OpenTelemetry tracer 实例。</td></tr></tbody></table><div class="note custom-block"><p class="custom-block-title">NOTE</p><p><code>sdk</code> 和 <code>tracer</code> 属性是您可以访问的公共属性，但只能使用下面列出的公共方法进行设置。</p></div><p><code>OpenTelemetryConfig</code> 类还包含表示与不同配置项相关的操作的方法。以下是安装 OpenTelemetry 特性并使用一组基本配置项的示例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(OpenTelemetry) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 设置您的服务配置</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    setServiceInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my-agent-service&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.0.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 添加日志记录导出器</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    addSpanExporter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(LoggingSpanExporter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>有关可用方法的参考，请参阅以下章节。</p><h4 id="setserviceinfo" tabindex="-1">setServiceInfo <a class="header-anchor" href="#setserviceinfo" aria-label="Permalink to &quot;setServiceInfo&quot;">​</a></h4><p>设置服务信息，包括名称和版本。接受以下实参：</p><table tabindex="0"><thead><tr><th>Name</th><th>数据类型</th><th>必需的</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td><code>serviceName</code></td><td>String</td><td>Yes</td><td></td><td>正在插桩的服务名称。</td></tr><tr><td><code>serviceVersion</code></td><td>String</td><td>Yes</td><td></td><td>正在插桩的服务版本。</td></tr></tbody></table><h4 id="addspanexporter" tabindex="-1">addSpanExporter <a class="header-anchor" href="#addspanexporter" aria-label="Permalink to &quot;addSpanExporter&quot;">​</a></h4><p>添加 Span 导出器以将遥测数据发送到外部系统。接受以下实参：</p><table tabindex="0"><thead><tr><th>Name</th><th>数据类型</th><th>必需的</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td><code>exporter</code></td><td><code>SpanExporter</code></td><td>Yes</td><td></td><td>要添加到自定义 Span 导出器列表的 <code>SpanExporter</code> 实例。</td></tr></tbody></table><h4 id="addspanprocessor" tabindex="-1">addSpanProcessor <a class="header-anchor" href="#addspanprocessor" aria-label="Permalink to &quot;addSpanProcessor&quot;">​</a></h4><p>添加 Span 处理器以在导出 Span 之前对其进行处理。接受以下实参：</p><table tabindex="0"><thead><tr><th>Name</th><th>数据类型</th><th>必需的</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td><code>processor</code></td><td><code>SpanProcessor</code></td><td>Yes</td><td></td><td>包含用于在导出前处理遥测数据的自定义逻辑的 Span 处理器。</td></tr></tbody></table><h4 id="addresourceattributes" tabindex="-1">addResourceAttributes <a class="header-anchor" href="#addresourceattributes" aria-label="Permalink to &quot;addResourceAttributes&quot;">​</a></h4><p>添加资源属性以提供有关服务的额外上下文。接受以下实参：</p><table tabindex="0"><thead><tr><th>Name</th><th>数据类型</th><th>必需的</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td><code>attributes</code></td><td><code>Map&lt;AttributeKey&lt;T&gt;, T&gt;</code></td><td>Yes</td><td></td><td>提供有关服务的额外详细信息的键值对。</td></tr></tbody></table><h4 id="setsampler" tabindex="-1">setSampler <a class="header-anchor" href="#setsampler" aria-label="Permalink to &quot;setSampler&quot;">​</a></h4><p>设置采样策略以控制收集哪些 Span。接受以下实参：</p><table tabindex="0"><thead><tr><th>Name</th><th>数据类型</th><th>必需的</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td><code>sampler</code></td><td><code>Sampler</code></td><td>Yes</td><td></td><td>为 OpenTelemetry 配置设置的采样器实例。</td></tr></tbody></table><h4 id="setverbose" tabindex="-1">setVerbose <a class="header-anchor" href="#setverbose" aria-label="Permalink to &quot;setVerbose&quot;">​</a></h4><p>启用或禁用用于调试 OpenTelemetry 配置的详细日志记录。接受以下实参：</p><table tabindex="0"><thead><tr><th>Name</th><th>数据类型</th><th>必需的</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td><code>verbose</code></td><td><code>Boolean</code></td><td>Yes</td><td><code>false</code></td><td>如果为 true，应用程序将收集更详细的遥测数据。</td></tr></tbody></table><h3 id="高级配置" tabindex="-1">高级配置 <a class="header-anchor" href="#高级配置" aria-label="Permalink to &quot;高级配置&quot;">​</a></h3><p>对于更高级的配置，您还可以自定义以下配置选项：</p><ul><li>采样器：配置采样策略以调整收集数据的频率和数量。</li><li>资源属性：添加有关生成遥测数据的进程的更多信息。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(OpenTelemetry) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 设置您的服务配置</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    setServiceInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my-agent-service&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.0.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 添加日志记录导出器</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    addSpanExporter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(LoggingSpanExporter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 设置采样器 </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    setSampler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Sampler.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">traceIdRatioBased</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 添加资源属性</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    addResourceAttributes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mapOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        AttributeKey.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;custom.attribute&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) to </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;custom-value&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="采样器" tabindex="-1">采样器 <a class="header-anchor" href="#采样器" aria-label="Permalink to &quot;采样器&quot;">​</a></h4><p>要定义采样器，请使用 <code>opentelemetry-java</code> SDK 中 <code>Sampler</code> 类 (<code>io.opentelemetry.sdk.trace.samplers.Sampler</code>) 的相应方法，该方法表示您要使用的采样策略。</p><p>默认采样策略如下：</p><ul><li><code>Sampler.alwaysOn()</code>：默认采样策略，其中每个 Span（跟踪）都被采样。</li></ul><p>有关可用采样器和采样策略的更多信息，请参阅 OpenTelemetry <a href="https://opentelemetry.io/docs/languages/java/sdk/#sampler" target="_blank" rel="noreferrer">采样器</a>文档。</p><h4 id="资源属性" tabindex="-1">资源属性 <a class="header-anchor" href="#资源属性" aria-label="Permalink to &quot;资源属性&quot;">​</a></h4><p>资源属性表示有关生成遥测数据的进程的额外信息。Koog 包含一组默认设置的资源属性：</p><ul><li><code>service.name</code></li><li><code>service.version</code></li><li><code>service.instance.time</code></li><li><code>os.type</code></li><li><code>os.version</code></li><li><code>os.arch</code></li></ul><p><code>service.name</code> 属性的默认值为 <code>ai.koog</code>，而 <code>service.version</code> 的默认值是当前使用的 Koog 库版本。</p><p>除了默认资源属性外，您还可以添加自定义属性。要在 Koog 的 OpenTelemetry 配置中添加自定义属性，请在 OpenTelemetry 配置中使用 <code>addResourceAttributes()</code> 方法，该方法接受键和值作为其实参。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addResourceAttributes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mapOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    AttributeKey.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stringKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;custom.attribute&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) to </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;custom-value&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="span-类型和属性" tabindex="-1">Span 类型和属性 <a class="header-anchor" href="#span-类型和属性" aria-label="Permalink to &quot;Span 类型和属性&quot;">​</a></h2><p>OpenTelemetry 特性会自动创建不同类型的 Span 以跟踪代理中的各种操作：</p><ul><li><strong>CreateAgentSpan</strong>：在您运行代理时创建，在代理关闭或进程终止时关闭。</li><li><strong>InvokeAgentSpan</strong>：代理的调用。</li><li><strong>NodeExecuteSpan</strong>：代理策略中节点的执行。这是一个自定义的、Koog 特有的 Span。</li><li><strong>InferenceSpan</strong>：LLM 调用。</li><li><strong>ExecuteToolSpan</strong>：工具调用。</li></ul><p>Span 以嵌套的、分层的结构组织。以下是 Span 结构的示例：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CreateAgentSpan</span></span>
<span class="line"><span>    InvokeAgentSpan</span></span>
<span class="line"><span>        NodeExecuteSpan</span></span>
<span class="line"><span>            InferenceSpan</span></span>
<span class="line"><span>        NodeExecuteSpan</span></span>
<span class="line"><span>            ExecuteToolSpan</span></span>
<span class="line"><span>        NodeExecuteSpan</span></span>
<span class="line"><span>            InferenceSpan</span></span></code></pre></div><h3 id="span-属性" tabindex="-1">Span 属性 <a class="header-anchor" href="#span-属性" aria-label="Permalink to &quot;Span 属性&quot;">​</a></h3><p>Span 属性提供与 Span 相关的元数据。每个 Span 都有自己的一组属性，而有些 Span 也可以重复属性。</p><p>Koog 支持遵循 OpenTelemetry <a href="https://opentelemetry.io/docs/specs/semconv/gen-ai/gen-ai-spans/" target="_blank" rel="noreferrer">生成式 AI 事件语义约定</a>的预定义属性列表。例如，这些约定定义了一个名为 <code>gen_ai.conversation.id</code> 的属性，这通常是 Span 的必需属性。在 Koog 中，此属性的值是代理运行的唯一标识符，当您调用 <code>agent.run()</code> 方法时会自动设置。</p><p>此外，Koog 还包括自定义的、Koog 特有的属性。您可以通过 <code>koog.</code> 前缀识别其中大多数属性。以下是可用的自定义属性：</p><ul><li><code>koog.agent.strategy.name</code>：代理策略的名称。策略是与 Koog 相关的实体，描述代理的用途。用于 <code>InvokeAgentSpan</code> Span。</li><li><code>koog.node.name</code>：正在运行的节点的名称。用于 <code>NodeExecuteSpan</code> Span。</li></ul><h3 id="事件" tabindex="-1">事件 <a class="header-anchor" href="#事件" aria-label="Permalink to &quot;事件&quot;">​</a></h3><p>Span 也可以附加一个_事件_。事件描述了在特定时间点发生的相关事情。例如，LLM 调用开始或结束时。事件也具有属性，并且还包含事件_正文字段_。</p><p>以下事件类型符合 OpenTelemetry <a href="https://opentelemetry.io/docs/specs/semconv/gen-ai/gen-ai-events/" target="_blank" rel="noreferrer">生成式 AI 事件语义约定</a>的要求：</p><ul><li><strong>SystemMessageEvent</strong>：传递给模型的系统指令。</li><li><strong>UserMessageEvent</strong>：传递给模型的用户消息。</li><li><strong>AssistantMessageEvent</strong>：传递给模型的助手消息。</li><li><strong>ToolMessageEvent</strong>：从工具或函数调用返回并传递给模型的响应。</li><li><strong>ChoiceEvent</strong>：从模型返回的响应消息。</li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p><code>optentelemetry-java</code> SDK 在添加事件时不支持事件正文字段实参。因此，在 Koog 的 OpenTelemetry 支持中，事件正文字段是一个单独的属性，其键为 <code>body</code>，值类型为字符串。该字符串包含事件正文字段的内容或载荷，通常是类似 JSON 的对象。有关事件正文字段的示例，请参阅 <a href="https://opentelemetry.io/docs/specs/semconv/gen-ai/gen-ai-events/#examples" target="_blank" rel="noreferrer">OpenTelemetry 文档</a>。有关 <code>opentelemetry-java</code> 中事件正文字段支持状态的信息，请参阅相关的 <a href="https://github.com/open-telemetry/semantic-conventions/issues/1870" target="_blank" rel="noreferrer">GitHub 议题</a>。</p></div><h2 id="导出器" tabindex="-1">导出器 <a class="header-anchor" href="#导出器" aria-label="Permalink to &quot;导出器&quot;">​</a></h2><p>导出器将收集到的遥测数据发送到 OpenTelemetry Collector 或其他类型的目标位置或后端实现。要添加导出器，请在安装 OpenTelemetry 特性时使用 <code>addSpanExporter()</code> 方法。该方法接受以下实参：</p><table tabindex="0"><thead><tr><th>Name</th><th>数据类型</th><th>必需的</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td><code>exporter</code></td><td>SpanExporter</td><td>Yes</td><td></td><td>要添加到自定义 Span 导出器列表的 SpanExporter 实例。</td></tr></tbody></table><p>以下章节提供了有关 <code>opentelemetry-java</code> SDK 中一些最常用导出器的信息。</p><h3 id="日志记录导出器" tabindex="-1">日志记录导出器 <a class="header-anchor" href="#日志记录导出器" aria-label="Permalink to &quot;日志记录导出器&quot;">​</a></h3><p>一个日志记录导出器，将跟踪信息输出到控制台。<code>LoggingSpanExporter</code> (<code>io.opentelemetry.exporter.logging.LoggingSpanExporter</code>) 是 <code>opentelemetry-java</code> SDK 的一部分。</p><p>这种类型的导出对于开发和调试目的非常有用。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(OpenTelemetry) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 添加日志记录导出器</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    addSpanExporter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(LoggingSpanExporter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 根据需要添加更多导出器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="opentelemetry-http-导出器" tabindex="-1">OpenTelemetry HTTP 导出器 <a class="header-anchor" href="#opentelemetry-http-导出器" aria-label="Permalink to &quot;OpenTelemetry HTTP 导出器&quot;">​</a></h3><p>OpenTelemetry HTTP 导出器 (<code>OtlpHttpSpanExporter</code>) 是 <code>opentelemetry-java</code> SDK (<code>io.opentelemetry.exporter.otlp.http.trace.OtlpHttpSpanExporter</code>) 的一部分，通过 HTTP 将 Span 数据发送到后端。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(OpenTelemetry) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 添加 OpenTelemetry HTTP 导出器 </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   addSpanExporter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      OtlpHttpSpanExporter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         // 设置等待收集器处理导出的 Span 批次的最长时间 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, TimeUnit.SECONDS)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         // 设置要连接的 OpenTelemetry 端点</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setEndpoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://localhost:3000/api/public/otel/v1/traces&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         // 添加授权请求头</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Authorization&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Basic </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$AUTH_STRING</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="opentelemetry-grpc-导出器" tabindex="-1">OpenTelemetry gRPC 导出器 <a class="header-anchor" href="#opentelemetry-grpc-导出器" aria-label="Permalink to &quot;OpenTelemetry gRPC 导出器&quot;">​</a></h3><p>OpenTelemetry gRPC 导出器 (<code>OtlpGrpcSpanExporter</code>) 是 <code>opentelemetry-java</code> SDK (<code>io.opentelemetry.exporter.otlp.trace.OtlpGrpcSpanExporter</code>) 的一部分。它通过 gRPC 将遥测数据导出到后端，并允许您定义接收数据的后端、收集器或端点的主机和端口。默认端口是 <code>4317</code>。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(OpenTelemetry) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 添加 OpenTelemetry gRPC 导出器 </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   addSpanExporter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      OtlpGrpcSpanExporter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // 设置主机和端口</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setEndpoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://localhost:4317&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="与-jaeger-集成" tabindex="-1">与 Jaeger 集成 <a class="header-anchor" href="#与-jaeger-集成" aria-label="Permalink to &quot;与 Jaeger 集成&quot;">​</a></h2><p>Jaeger 是一个流行的分布式跟踪系统，可与 OpenTelemetry 配合使用。Koog 版本库中 <code>examples</code> 目录下的 <code>opentelemetry</code> 目录包含一个将 OpenTelemetry 与 Jaeger 和 Koog 代理结合使用的示例。</p><h3 id="先决条件" tabindex="-1">先决条件 <a class="header-anchor" href="#先决条件" aria-label="Permalink to &quot;先决条件&quot;">​</a></h3><p>要测试 OpenTelemetry 与 Koog 和 Jaeger 的集成，请使用提供的 <code>docker-compose.yaml</code> 文件，通过运行以下命令来启动 Jaeger OpenTelemetry 一体化进程：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compose</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> up</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span></span></code></pre></div><p>提供的 Docker Compose YAML 文件包含以下内容：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># docker-compose.yaml</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">services</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  jaeger-all-in-one</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">jaegertracing/all-in-one:1.39</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    container_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">jaeger-all-in-one</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    environment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">COLLECTOR_OTLP_ENABLED=true</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    ports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;4317:4317&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;16686:16686&quot;</span></span></code></pre></div><p>要访问 Jaeger UI 并查看您的跟踪，请打开 <code>http://localhost:16686</code>。</p><h3 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h3><p>为了将遥测数据导出到 Jaeger 中使用，该示例使用了 <code>opentelemetry-java</code> SDK 中的 <code>LoggingSpanExporter</code> (<code>io.opentelemetry.exporter.logging.LoggingSpanExporter</code>) 和 <code>OtlpGrpcSpanExporter</code> (<code>io.opentelemetry.exporter.otlp.trace.OtlpGrpcSpanExporter</code>)。</p><p>以下是完整的代码样本：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    runBlocking</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> agent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AIAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            executor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> simpleOpenAIExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(openAIApiKey),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            llmModel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> OpenAIModels.Reasoning.GPT4oMini,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            systemPrompt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;You are a code assistant. Provide concise code examples.&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(OpenTelemetry) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // 添加用于本地调试的控制台日志记录器</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                addSpanExporter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(LoggingSpanExporter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // 将跟踪发送到 OpenTelemetry 收集器</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                addSpanExporter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    OtlpGrpcSpanExporter.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setEndpoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://localhost:4317&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        agent.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { agent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;正在运行带有 OpenTelemetry 跟踪的代理...&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> agent.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Tell me a joke about programming&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;代理运行完成，结果为：&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$result</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;。&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">                    &quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">请访问 http://localhost:16686 上的 Jaeger UI 查看跟踪&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="故障排除" tabindex="-1">故障排除 <a class="header-anchor" href="#故障排除" aria-label="Permalink to &quot;故障排除&quot;">​</a></h2><h3 id="常见问题" tabindex="-1">常见问题 <a class="header-anchor" href="#常见问题" aria-label="Permalink to &quot;常见问题&quot;">​</a></h3><ol><li><p><strong>Jaeger 或 Langfuse 中未出现跟踪</strong></p><ul><li>确保服务正在运行且 OpenTelemetry 端口 (4317) 可访问。</li><li>检查 OpenTelemetry 导出器是否配置了正确的端点。</li><li>确保在代理执行后等待几秒钟，以便导出跟踪。</li></ul></li><li><p><strong>Span 缺失或跟踪不完整</strong></p><ul><li>验证代理执行是否成功完成。</li><li>确保您没有在代理执行后过快地关闭应用程序。</li><li>在代理执行后添加延迟，以便有时间导出 Span。</li></ul></li><li><p><strong>Span 数量过多</strong></p><ul><li>考虑通过配置 <code>sampler</code> 属性来使用不同的采样策略。</li><li>例如，使用 <code>Sampler.traceIdRatioBased(0.1)</code> 仅对 10% 的跟踪进行采样。</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span></code></pre></div></li></ol>`,97)]))}const c=a(n,[["render",l]]);export{E as __pageData,c as default};
