import{_ as i,c as a,o as t,ag as e}from"./chunks/framework.Bksy39di.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"sqldelight/common/types_sqlite.md","filePath":"sqldelight/common/types_sqlite.md","lastUpdated":1748435462000}'),l={name:"sqldelight/common/types_sqlite.md"};function n(p,s,h,o,d,k){return t(),a("div",null,s[0]||(s[0]=[e(`<h2 id="sqlite-类型" tabindex="-1">SQLite 类型 <a class="header-anchor" href="#sqlite-类型" aria-label="Permalink to &quot;SQLite 类型&quot;">​</a></h2><p>SQLDelight 列定义与常规 SQLite 列定义相同，但支持一个<a href="#custom-column-types">额外的列约束</a>，该约束指定了生成接口中列的 Kotlin 类型。</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> TABLE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> some_types</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  some_long </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INTEGER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,           </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 在数据库中存储为 INTEGER，检索时为 Long</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  some_double </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">REAL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,            </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 在数据库中存储为 REAL，检索时为 Double</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  some_string </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">TEXT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,            </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 在数据库中存储为 TEXT，检索时为 String</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  some_blob BLOB               </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- 在数据库中存储为 BLOB，检索时为 ByteArray</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="基本类型" tabindex="-1">基本类型 <a class="header-anchor" href="#基本类型" aria-label="Permalink to &quot;基本类型&quot;">​</a></h2><p>一个兄弟模块，用于适配基本类型以方便您使用。</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-nHHq9" id="tab-iwhCjsL" checked><label data-title="Kotlin" for="tab-iwhCjsL">Kotlin</label><input type="radio" name="group-nHHq9" id="tab-281cqYq"><label data-title="Groovy" for="tab-281cqYq">Groovy</label></div><div class="blocks"><div class="language-kotlin vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;app.cash.sqldelight:primitive-adapters:2.1.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dependencies {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  implementation </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;app.cash.sqldelight:primitive-adapters:2.1.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></div></div><p>存在以下适配器：</p><ul><li><code>FloatColumnAdapter</code> — 为一个隐式存储为 <code>kotlin.Double</code> 的 SQL 类型检索 <code>kotlin.Float</code></li><li><code>IntColumnAdapter</code> — 为一个隐式存储为 <code>kotlin.Long</code> 的 SQL 类型检索 <code>kotlin.Int</code></li><li><code>ShortColumnAdapter</code> — 为一个隐式存储为 <code>kotlin.Long</code> 的 SQL 类型检索 <code>kotlin.Short</code></li></ul>`,8)]))}const E=i(l,[["render",n]]);export{c as __pageData,E as default};
