import{_ as l,C as e,c as n,o as t,ag as i,G as p}from"./chunks/framework.Bksy39di.js";const E=JSON.parse('{"title":"멀티플랫폼 라이브러리 게시 설정","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kmp/multiplatform-publish-lib-setup.md","filePath":"ko/kmp/multiplatform-publish-lib-setup.md","lastUpdated":1755516278000}'),h={name:"ko/kmp/multiplatform-publish-lib-setup.md"};function r(o,s,d,k,c,g){const a=e("secondary-label");return t(),n("div",null,[s[0]||(s[0]=i(`<h1 id="멀티플랫폼-라이브러리-게시-설정" tabindex="-1">멀티플랫폼 라이브러리 게시 설정 <a class="header-anchor" href="#멀티플랫폼-라이브러리-게시-설정" aria-label="Permalink to &quot;멀티플랫폼 라이브러리 게시 설정&quot;">​</a></h1><p>멀티플랫폼 라이브러리를 다양한 위치에 게시하도록 설정할 수 있습니다:</p><ul><li><a href="#publishing-to-a-local-maven-repository">로컬 Maven 저장소로</a></li><li>Maven Central 저장소로. 계정 자격 증명 설정, 라이브러리 메타데이터 사용자 지정 및 게시 플러그인 구성 방법에 대한 자세한 내용은 <a href="./multiplatform-publish-libraries">튜토리얼</a>을 참조하세요.</li><li>GitHub 저장소로. 자세한 내용은 GitHub의 <a href="https://docs.github.com/en/packages" target="_blank" rel="noreferrer">GitHub Packages</a> 문서를 참조하세요.</li></ul><h2 id="로컬-maven-저장소로-게시" tabindex="-1">로컬 Maven 저장소로 게시 <a class="header-anchor" href="#로컬-maven-저장소로-게시" aria-label="Permalink to &quot;로컬 Maven 저장소로 게시&quot;">​</a></h2><p><code>maven-publish</code> Gradle 플러그인을 사용하여 멀티플랫폼 라이브러리를 로컬 Maven 저장소에 게시할 수 있습니다:</p><ol><li><p><code>shared/build.gradle.kts</code> 파일에 <a href="https://docs.gradle.org/current/userguide/publishing_maven.html" target="_blank" rel="noreferrer"><code>maven-publish</code> Gradle 플러그인</a>을 추가합니다.</p></li><li><p>라이브러리의 그룹과 버전을 지정하고, <a href="https://docs.gradle.org/current/userguide/publishing_maven.html#publishing_maven:repositories" target="_blank" rel="noreferrer">게시해야 할 저장소</a>도 지정합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;maven-publish&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">group </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;com.example&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">version </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1.0&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">publishing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    repositories</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        maven</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            //...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ol><p><code>maven-publish</code>와 함께 사용될 때, Kotlin 플러그인은 현재 호스트에서 빌드할 수 있는 각 타겟에 대해 자동으로 게시물을 생성합니다. 단, Android 타겟은 <a href="#publish-an-android-library">게시를 구성하기 위한 추가 단계</a>가 필요합니다.</p><h2 id="게시물의-구조" tabindex="-1">게시물의 구조 <a class="header-anchor" href="#게시물의-구조" aria-label="Permalink to &quot;게시물의 구조&quot;">​</a></h2><p>Kotlin Multiplatform 라이브러리의 게시물은 여러 Maven 게시물을 포함하며, 각 게시물은 특정 타겟에 해당합니다. 또한, 전체 라이브러리를 나타내는 통합 <em>루트</em> 게시물인 <code>kotlinMultiplatform</code>도 게시됩니다.</p><p>공통 소스 세트에 <a href="./multiplatform-add-dependencies">의존성</a>으로 추가될 때, 루트 게시물은 자동으로 적절한 플랫폼별 아티팩트로 해결됩니다.</p><h3 id="타겟별-게시물-및-루트-게시물" tabindex="-1">타겟별 게시물 및 루트 게시물 <a class="header-anchor" href="#타겟별-게시물-및-루트-게시물" aria-label="Permalink to &quot;타겟별 게시물 및 루트 게시물&quot;">​</a></h3><p>Kotlin Multiplatform Gradle 플러그인은 각 타겟에 대해 별도의 게시물을 구성합니다. 다음 프로젝트 구성을 고려해보세요:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// projectName = &quot;lib&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">group </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;test&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">version </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1.0&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosX64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>이 설정은 다음 Maven 게시물을 생성합니다:</p><p><strong>타겟별 게시물</strong></p><ul><li><code>jvm</code> 타겟의 경우: <code>test:lib-jvm:1.0</code></li><li><code>iosX64</code> 타겟의 경우: <code>test:lib-iosx64:1.0</code></li><li><code>iosArm64</code> 타겟의 경우: <code>test:lib-iosarm64:1.0</code></li></ul><p>각 타겟별 게시물은 독립적입니다. 예를 들어, <code>publishJvmPublicationTo&lt;MavenRepositoryName&gt;</code>을 실행하면 JVM 모듈만 게시되고 다른 모듈은 게시되지 않습니다.</p><p><strong>루트 게시물</strong></p><p><code>kotlinMultiplatform</code> 루트 게시물: <code>test:lib:1.0</code>.</p><p>루트 게시물은 모든 타겟별 게시물을 참조하는 진입점 역할을 합니다. 이것은 메타데이터 아티팩트를 포함하며, 다른 게시물에 대한 참조(개별 플랫폼 아티팩트의 예상 URL 및 좌표)를 포함함으로써 적절한 의존성 해결을 보장합니다.</p><ul><li><p>Maven Central과 같은 일부 저장소는 루트 모듈이 분류자(classifier)가 없는 JAR 아티팩트(예: <code>kotlinMultiplatform-1.0.jar</code>)를 포함하도록 요구합니다. Kotlin Multiplatform 플러그인은 포함된 메타데이터 아티팩트와 함께 필요한 아티팩트를 자동으로 생성합니다. 이는 저장소 요구 사항을 충족하기 위해 라이브러리의 루트 모듈에 빈 아티팩트를 추가할 필요가 없음을 의미합니다.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><a href="./multiplatform-configure-compilations#compilation-for-jvm">Gradle</a> 및 <a href="https://kotlinlang.org/docs/maven.html#create-jar-file" target="_blank" rel="noreferrer">Maven</a> 빌드 시스템으로 JAR 아티팩트 생성에 대해 자세히 알아보세요.</p></div></li><li><p><code>kotlinMultiplatform</code> 게시물은 저장소에서 요구하는 경우 소스 및 문서 아티팩트도 필요할 수 있습니다. 이 경우 게시 범위 내에서 <a href="https://docs.gradle.org/current/javadoc/org/gradle/api/publish/maven/MavenPublication.html#artifact-java.lang.Object-" target="_blank" rel="noreferrer"><code>artifact()</code></a>를 사용하세요.</p></li></ul><h3 id="전체-라이브러리-게시" tabindex="-1">전체 라이브러리 게시 <a class="header-anchor" href="#전체-라이브러리-게시" aria-label="Permalink to &quot;전체 라이브러리 게시&quot;">​</a></h3><p>한 번에 필요한 모든 아티팩트를 게시하려면 <code>publishAllPublicationsTo&lt;MavenRepositoryName&gt;</code> 통합 작업을 사용하세요. 예시:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> publishAllPublicationsToGithubPackagesRepository</span></span></code></pre></div><p>Maven Local에 게시할 때는 특별한 작업을 사용할 수 있습니다:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> publishToMavenLocal</span></span></code></pre></div><p>이 작업들은 모든 타겟별 및 루트 게시물이 함께 게시되도록 하여, 의존성 해결을 위해 라이브러리를 완전히 사용할 수 있도록 보장합니다.</p><p>또는, 개별 게시 작업을 사용할 수도 있습니다. 먼저 루트 게시물을 실행하세요:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> publishKotlinMultiplatformPublicationToMavenLocal</span></span></code></pre></div><p>이 작업은 타겟별 게시물에 대한 정보가 포함된 <code>*.module</code> 파일을 게시하지만, 타겟 자체는 게시되지 않은 상태로 남습니다. 프로세스를 완료하려면 각 타겟별 게시물을 별도로 게시해야 합니다:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> publish</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">TargetNam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">PublicationToMavenLocal</span></span></code></pre></div><p>이는 모든 아티팩트가 사용 가능하고 올바르게 참조되도록 보장합니다.</p><h2 id="호스트-요구-사항" tabindex="-1">호스트 요구 사항 <a class="header-anchor" href="#호스트-요구-사항" aria-label="Permalink to &quot;호스트 요구 사항&quot;">​</a></h2><p>Kotlin/Native는 크로스 컴파일을 지원하므로 모든 호스트가 필요한 <code>.klib</code> 아티팩트를 생성할 수 있습니다. 그러나 몇 가지 주의해야 할 특정 사항이 있습니다.</p><h3 id="apple-타겟용-컴파일" tabindex="-1">Apple 타겟용 컴파일 <a class="header-anchor" href="#apple-타겟용-컴파일" aria-label="Permalink to &quot;Apple 타겟용 컴파일&quot;">​</a></h3>`,35)),p(a,{ref:"Experimental"},null,512),s[1]||(s[1]=i(`<p>Apple 타겟이 있는 프로젝트의 아티팩트를 생성하려면 일반적으로 Apple 머신이 필요합니다. 그러나 다른 호스트를 사용하려면 <code>gradle.properties</code> 파일에 이 옵션을 설정하세요:</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.native.enableKlibsCrossCompilation=true</span></span></code></pre></div><p>크로스 컴파일은 현재 실험적(Experimental)이며 몇 가지 제한 사항이 있습니다. 다음 경우에는 여전히 Mac 머신을 사용해야 합니다:</p><ul><li>라이브러리에 <a href="https://kotlinlang.org/docs/native-c-interop.html" target="_blank" rel="noreferrer">cinterop 의존성</a>이 있는 경우.</li><li>프로젝트에 <a href="./multiplatform-cocoapods-overview">CocoaPods 통합</a>이 설정된 경우.</li><li>Apple 타겟용 <a href="./multiplatform-build-native-binaries">최종 바이너리</a>를 빌드하거나 테스트해야 하는 경우.</li></ul><h3 id="게시물-중복-방지" tabindex="-1">게시물 중복 방지 <a class="header-anchor" href="#게시물-중복-방지" aria-label="Permalink to &quot;게시물 중복 방지&quot;">​</a></h3><p>게시 중 발생할 수 있는 문제를 방지하려면, 저장소에 게시물이 중복되지 않도록 모든 아티팩트를 단일 호스트에서 게시하세요. 예를 들어, Maven Central은 중복 게시물을 명시적으로 금지하며 프로세스를 실패시킵니다.</p><h2 id="android-라이브러리-게시" tabindex="-1">Android 라이브러리 게시 <a class="header-anchor" href="#android-라이브러리-게시" aria-label="Permalink to &quot;Android 라이브러리 게시&quot;">​</a></h2><p>Android 라이브러리를 게시하려면 추가 구성을 제공해야 합니다.</p><p>기본적으로 Android 라이브러리의 아티팩트는 게시되지 않습니다. Android <a href="https://developer.android.com/build/build-variants" target="_blank" rel="noreferrer">빌드 베리언트</a> 세트에 의해 생성된 아티팩트를 게시하려면, <code>shared/build.gradle.kts</code> 파일의 Android 타겟 블록에 베리언트 이름을 지정합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    androidTarget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        publishLibraryVariants</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;release&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>이 예시는 <a href="https://developer.android.com/build/build-variants#product-flavors" target="_blank" rel="noreferrer">제품 플레이버</a>가 없는 Android 라이브러리에 적용됩니다. 제품 플레이버가 있는 라이브러리의 경우, 베리언트 이름에는 <code>fooBarDebug</code> 또는 <code>fooBarRelease</code>와 같이 플레이버도 포함됩니다.</p><p>기본 게시 설정은 다음과 같습니다:</p><ul><li>게시된 베리언트가 동일한 빌드 타입(예: 모두 <code>release</code> 또는 <code>debug</code>)을 갖는 경우, 모든 소비자 빌드 타입과 호환됩니다.</li><li>게시된 베리언트가 다른 빌드 타입을 갖는 경우, 릴리스 베리언트만 게시된 베리언트에 포함되지 않는 소비자 빌드 타입과 호환됩니다. 다른 모든 베리언트(예: <code>debug</code>)는 소비자 측에서 동일한 빌드 타입만 일치시키며, 소비 프로젝트가 <a href="https://developer.android.com/reference/tools/gradle-api/4.2/com/android/build/api/dsl/BuildType" target="_blank" rel="noreferrer">매칭 폴백</a>을 지정하지 않는 한 그렇습니다.</li></ul><p>게시된 모든 Android 베리언트가 라이브러리 소비자가 사용하는 동일한 빌드 타입하고만 호환되도록 하려면, 다음 Gradle 프로퍼티를 설정하세요: <code>kotlin.android.buildTypeAttribute.keep=true</code>.</p><p>또한 제품 플레이버별로 그룹화된 베리언트를 게시하여, 다른 빌드 타입의 결과물이 단일 모듈에 배치되고 빌드 타입이 아티팩트의 분류자(classifier)가 되도록 할 수 있습니다(릴리스 빌드 타입은 여전히 분류자 없이 게시됩니다). 이 모드는 기본적으로 비활성화되어 있으며, <code>shared/build.gradle.kts</code> 파일에서 다음과 같이 활성화할 수 있습니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    androidTarget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        publishLibraryVariantsGroupedByFlavor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>다른 의존성을 가질 경우 제품 플레이버별로 그룹화된 베리언트를 게시하는 것은 권장되지 않습니다. 의존성 목록이 하나로 병합될 수 있기 때문입니다.</p></div><h2 id="소스-게시-비활성화" tabindex="-1">소스 게시 비활성화 <a class="header-anchor" href="#소스-게시-비활성화" aria-label="Permalink to &quot;소스 게시 비활성화&quot;">​</a></h2><p>기본적으로 Kotlin Multiplatform Gradle 플러그인은 지정된 모든 타겟에 대해 소스를 게시합니다. 그러나 <code>shared/build.gradle.kts</code> 파일에서 <code>withSourcesJar()</code> API를 사용하여 소스 게시를 구성하고 비활성화할 수 있습니다:</p><ul><li><p>모든 타겟에 대한 소스 게시를 비활성화하려면:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    withSourcesJar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(publish </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    linuxX64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>지정된 타겟에 대해서만 소스 게시를 비활성화하려면:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     // JVM에 대해서만 소스 게시 비활성화:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        withSourcesJar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(publish </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    linuxX64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>지정된 타겟을 제외한 모든 타겟에 대한 소스 게시를 비활성화하려면:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // JVM을 제외한 모든 타겟에 대한 소스 게시 비활성화:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    withSourcesJar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(publish </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        withSourcesJar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(publish </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    linuxX64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><h2 id="jvm-환경-속성-게시-비활성화" tabindex="-1">JVM 환경 속성 게시 비활성화 <a class="header-anchor" href="#jvm-환경-속성-게시-비활성화" aria-label="Permalink to &quot;JVM 환경 속성 게시 비활성화&quot;">​</a></h2><p>Kotlin 2.0.0부터 Gradle 속성 <a href="https://docs.gradle.org/current/userguide/variant_attributes.html#sub:jvm_default_attributes" target="_blank" rel="noreferrer"><code>org.gradle.jvm.environment</code></a>은 Kotlin Multiplatform 라이브러리의 JVM 및 Android 베리언트를 구별하는 데 도움이 되도록 모든 Kotlin 베리언트와 함께 자동으로 게시됩니다. 이 속성은 어떤 라이브러리 베리언트가 어떤 JVM 환경에 적합한지 나타내며, Gradle은 이 정보를 사용하여 프로젝트의 의존성 해결을 돕습니다. 대상 환경은 &quot;android&quot;, &quot;standard-jvm&quot; 또는 &quot;no-jvm&quot;일 수 있습니다.</p><p><code>gradle.properties</code> 파일에 다음 Gradle 프로퍼티를 추가하여 이 속성의 게시를 비활성화할 수 있습니다:</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.publishJvmEnvironmentAttribute=false</span></span></code></pre></div><h2 id="라이브러리-홍보" tabindex="-1">라이브러리 홍보 <a class="header-anchor" href="#라이브러리-홍보" aria-label="Permalink to &quot;라이브러리 홍보&quot;">​</a></h2><p>귀하의 라이브러리는 <a href="https://klibs.io/" target="_blank" rel="noreferrer">JetBrains 검색 플랫폼</a>에 소개될 수 있습니다. 이 플랫폼은 타겟 플랫폼을 기반으로 Kotlin Multiplatform 라이브러리를 쉽게 찾을 수 있도록 설계되었습니다.</p><p>기준을 충족하는 라이브러리는 자동으로 추가됩니다. 라이브러리 추가 방법에 대한 자세한 내용은 <a href="https://klibs.io/faq" target="_blank" rel="noreferrer">FAQ</a>를 참조하세요.</p><h2 id="다음-단계" tabindex="-1">다음 단계 <a class="header-anchor" href="#다음-단계" aria-label="Permalink to &quot;다음 단계&quot;">​</a></h2><ul><li><a href="./multiplatform-publish-libraries">Kotlin Multiplatform 라이브러리를 Maven Central 저장소에 게시하는 방법 알아보기</a></li><li><a href="https://kotlinlang.org/docs/api-guidelines-build-for-multiplatform.html" target="_blank" rel="noreferrer">Kotlin Multiplatform용 라이브러리 설계에 대한 모범 사례 및 팁은 라이브러리 저자 가이드라인 참조</a></li></ul>`,29))])}const b=l(h,[["render",r]]);export{E as __pageData,b as default};
