import{_ as i,c as a,o as e,ag as p}from"./chunks/framework.Bksy39di.js";const c=JSON.parse('{"title":"Compose コンパイラのオプションDSL","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/compose-compiler-options.md","filePath":"ja/kotlin/compose-compiler-options.md","lastUpdated":1754307826000}'),l={name:"ja/kotlin/compose-compiler-options.md"};function n(t,s,o,r,h,k){return e(),a("div",null,s[0]||(s[0]=[p(`<h1 id="compose-コンパイラのオプションdsl" tabindex="-1">Compose コンパイラのオプションDSL <a class="header-anchor" href="#compose-コンパイラのオプションdsl" aria-label="Permalink to &quot;Compose コンパイラのオプションDSL&quot;">​</a></h1><p>Compose コンパイラ Gradle プラグインは、さまざまなコンパイラオプションのDSLを提供します。 これを使用して、プラグインを適用するモジュールの <code>build.gradle.kts</code> ファイル内の <code>composeCompiler {}</code> ブロックでコンパイラを設定できます。</p><p>指定できるオプションには2種類あります。</p><ul><li>一般的なコンパイラ設定。これらは、どのプロジェクトでも必要に応じて無効または有効にできます。</li><li>新しい実験的な機能を有効または無効にするフィーチャーフラグ。これらは最終的にベースラインの一部となる予定です。</li></ul><p>利用可能な一般的な設定のリストと、サポートされているフィーチャーフラグのリストは、Compose コンパイラ Gradle プラグインのAPIリファレンスで確認できます。 <a href="https://kotlinlang.org/api/kotlin-gradle-plugin/compose-compiler-gradle-plugin/org.jetbrains.kotlin.compose.compiler.gradle/-compose-compiler-gradle-plugin-extension/" target="_blank" rel="noreferrer">利用可能な一般的な設定のリスト</a> および<a href="https://kotlinlang.org/api/kotlin-gradle-plugin/compose-compiler-gradle-plugin/org.jetbrains.kotlin.compose.compiler.gradle/-compose-feature-flag/-companion/" target="_blank" rel="noreferrer">サポートされているフィーチャーフラグのリスト</a></p><p>設定例を以下に示します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">composeCompiler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    includeSourceInformation </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    featureFlags </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ComposeFeatureFlag.StrongSkipping.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">disabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ComposeFeatureFlag.OptimizeNonSkippingGroups</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>Gradle プラグインは、Kotlin 2.0以前は手動でしか指定できなかったいくつかのComposeコンパイラオプションのデフォルト値を提供します。 たとえば、それらのいずれかを <code>freeCompilerArgs</code> で設定している場合、Gradle はオプションの重複エラーを報告します。</p></div><h2 id="フィーチャーフラグの目的と使用方法" tabindex="-1">フィーチャーフラグの目的と使用方法 <a class="header-anchor" href="#フィーチャーフラグの目的と使用方法" aria-label="Permalink to &quot;フィーチャーフラグの目的と使用方法&quot;">​</a></h2><p>フィーチャーフラグは、新しいフラグが継続的に導入され非推奨になるにつれて、トップレベルのプロパティへの変更を最小限に抑えるために、オプションの個別のセットとして整理されています。</p><p>デフォルトで無効になっているフィーチャーフラグを有効にするには、セットで指定します。例:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">featureFlags </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ComposeFeatureFlag.OptimizeNonSkippingGroups)</span></span></code></pre></div><p>デフォルトで有効になっているフィーチャーフラグを無効にするには、その <code>disabled()</code> 関数を呼び出します。例:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">featureFlags </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ComposeFeatureFlag.StrongSkipping.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">disabled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><p>Compose コンパイラを直接設定する場合、次の構文を使用してフィーチャーフラグを渡します。</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>-P plugin:androidx.compose.compiler.plugins.kotlin:featureFlag=&lt;flag name&gt;</span></span></code></pre></div><p>サポートされているフィーチャーフラグのリストは、Compose コンパイラ Gradle プラグインのAPIリファレンスで確認してください。 <a href="https://kotlinlang.org/api/kotlin-gradle-plugin/compose-compiler-gradle-plugin/org.jetbrains.kotlin.compose.compiler.gradle/-compose-feature-flag/-companion/" target="_blank" rel="noreferrer">サポートされているフィーチャーフラグのリスト</a></p>`,17)]))}const g=i(l,[["render",n]]);export{c as __pageData,g as default};
