import{_ as h}from"./chunks/icon-1-done.B5D6C9SU.js";import{_ as k}from"./chunks/icon-2.D_3lm1kb.js";import{_ as o}from"./chunks/icon-3-todo.aEuKIG4W.js";import{_ as d}from"./chunks/icon-4-todo.DqbNYzPe.js";import{_ as E}from"./chunks/icon-5-todo.DJgVODZv.js";import{_ as g,a as c}from"./chunks/first-multiplatform-project-on-ios-2.CLUQ81d4.js";import{_ as y,C as t,c as u,o as m,j as i,G as n,ag as F,a,w as e}from"./chunks/framework.Bksy39di.js";const P=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kmp/multiplatform-update-ui.md","filePath":"ko/kmp/multiplatform-update-ui.md","lastUpdated":1755516278000}'),f={name:"ko/kmp/multiplatform-update-ui.md"};function C(b,s,A,B,v,S){const l=t("secondary-label"),p=t("Links"),r=t("tldr");return m(),u("div",null,[s[21]||(s[21]=i("h1",{id:"사용자-인터페이스-업데이트",tabindex:"-1"},[a("사용자 인터페이스 업데이트 "),i("a",{class:"header-anchor",href:"#사용자-인터페이스-업데이트","aria-label":'Permalink to "사용자 인터페이스 업데이트"'},"​")],-1)),n(l,{ref:"IntelliJ IDEA"},null,512),n(l,{ref:"Android Studio"},null,512),n(r,null,{default:e(()=>[s[18]||(s[18]=i("p",null,"이 튜토리얼은 IntelliJ IDEA를 사용하지만, Android Studio에서도 따라 할 수 있습니다. 두 IDE 모두 동일한 핵심 기능과 Kotlin Multiplatform 지원을 공유합니다.",-1)),s[19]||(s[19]=i("br",null,null,-1)),s[20]||(s[20]=i("p",null,[a("이것은 "),i("strong",null,"공유 로직과 네이티브 UI로 Kotlin Multiplatform 앱 만들기"),a(" 튜토리얼의 두 번째 파트입니다. 계속하기 전에 이전 단계를 완료했는지 확인하세요.")],-1)),i("p",null,[s[1]||(s[1]=i("img",{src:h,width:"20",alt:"첫 번째 단계"},null,-1)),s[2]||(s[2]=a()),n(p,{href:"/kmp/multiplatform-create-first-app",summary:"This tutorial uses IntelliJ IDEA, but you can also follow it in Android Studio – both IDEs share the same core functionality and Kotlin Multiplatform support. This is the first part of the Create a Kotlin Multiplatform app with shared logic and native UI tutorial. Create your Kotlin Multiplatform app Update the user interface Add dependencies Share more logic Wrap up your project"},{default:e(()=>s[0]||(s[0]=[a("Kotlin Multiplatform 앱 만들기")])),_:1}),s[3]||(s[3]=i("br",null,null,-1)),s[4]||(s[4]=i("img",{src:k,width:"20",alt:"두 번째 단계"},null,-1)),s[5]||(s[5]=a()),s[6]||(s[6]=i("strong",null,"사용자 인터페이스 업데이트",-1)),s[7]||(s[7]=i("br",null,null,-1)),s[8]||(s[8]=i("img",{src:o,width:"20",alt:"세 번째 단계"},null,-1)),s[9]||(s[9]=a(" 종속성 추가")),s[10]||(s[10]=i("br",null,null,-1)),s[11]||(s[11]=i("br",null,null,-1)),s[12]||(s[12]=i("img",{src:d,width:"20",alt:"네 번째 단계"},null,-1)),s[13]||(s[13]=a(" 더 많은 로직 공유")),s[14]||(s[14]=i("br",null,null,-1)),s[15]||(s[15]=i("img",{src:E,width:"20",alt:"다섯 번째 단계"},null,-1)),s[16]||(s[16]=a(" 프로젝트 마무리")),s[17]||(s[17]=i("br",null,null,-1))])]),_:1}),s[22]||(s[22]=F(`<p>사용자 인터페이스를 구축하려면 프로젝트의 Android 부분에는 <a href="https://www.jetbrains.com/lp/compose-multiplatform/" target="_blank" rel="noreferrer">Compose Multiplatform</a> 툴킷을, iOS 부분에는 <a href="https://developer.apple.com/xcode/swiftui/" target="_blank" rel="noreferrer">SwiftUI</a>를 사용합니다. 이 둘은 모두 선언형 UI 프레임워크이며, UI 구현에서 유사점을 발견할 수 있을 것입니다. 두 경우 모두 <code>phrases</code> 변수에 데이터를 저장하고, 나중에 이 데이터를 반복하여 <code>Text</code> 항목 목록을 생성합니다.</p><h2 id="android-부분-업데이트" tabindex="-1">Android 부분 업데이트 <a class="header-anchor" href="#android-부분-업데이트" aria-label="Permalink to &quot;Android 부분 업데이트&quot;">​</a></h2><p><code>composeApp</code> 모듈은 Android 애플리케이션을 포함하고, 해당 메인 액티비티와 UI 뷰를 정의하며, <code>shared</code> 모듈을 일반 Android 라이브러리로 사용합니다. 애플리케이션의 UI는 Compose Multiplatform 프레임워크를 사용합니다.</p><p>몇 가지 변경 사항을 적용하고 UI에 어떻게 반영되는지 확인해 보세요:</p><ol><li><p><code>composeApp/src/androidMain/kotlin</code> 경로의 <code>App.kt</code> 파일로 이동합니다.</p></li><li><p><code>Greeting</code> 클래스 호출을 찾습니다. <code>greet()</code> 함수를 선택하고 마우스 오른쪽 버튼을 클릭한 다음 <strong>Go To</strong> | <strong>Declaration or Usages</strong>를 선택합니다. 이것이 이전 단계에서 편집했던 <code>shared</code> 모듈의 동일한 클래스임을 알 수 있습니다.</p></li><li><p><code>Greeting.kt</code> 파일에서 <code>greet()</code> 함수를 업데이트합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.random.Random</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> buildList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Random.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nextBoolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hi!&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> else</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Guess what this is! &gt; \${platform.name.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reversed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">()}!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>이제 문자열 목록을 반환합니다.</p></li><li><p><code>App.kt</code> 파일로 돌아가서 <code>App()</code> 구현을 업데이트합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Composable</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Preview</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    MaterialTheme</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> greeting </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> remember</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Greeting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        Column</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            modifier </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Modifier</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">padding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(all </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.dp)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">safeContentPadding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fillMaxSize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            verticalArrangement </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Arrangement.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">spacedBy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.dp),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            greeting.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { greeting </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(greeting)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                HorizontalDivider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>여기서 <code>Column</code> 컴포저블(composable)은 각 <code>Text</code> 항목을 표시하며, 주변에 패딩을 추가하고 항목들 사이에 공간을 둡니다.</p></li><li><p>IntelliJ IDEA의 제안에 따라 누락된 종속성을 임포트합니다.</p></li><li><p>이제 Android 앱을 실행하여 문자열 목록이 어떻게 표시되는지 확인할 수 있습니다:</p><p><img src="`+g+`" alt="업데이트된 Android 멀티플랫폼 앱 UI" width="300"></p></li></ol><h2 id="ios-모듈-작업" tabindex="-1">iOS 모듈 작업 <a class="header-anchor" href="#ios-모듈-작업" aria-label="Permalink to &quot;iOS 모듈 작업&quot;">​</a></h2><p><code>iosApp</code> 디렉터리는 iOS 애플리케이션으로 빌드됩니다. 이 디렉터리는 <code>shared</code> 모듈을 iOS 프레임워크로 의존하고 사용합니다. 앱의 UI는 Swift로 작성되었습니다.</p><p>Android 앱에서와 동일한 변경 사항을 구현합니다:</p><ol><li><p>IntelliJ IDEA에서 <strong>Project</strong> 툴 창에서 프로젝트 루트에 있는 <code>iosApp</code> 폴더를 찾습니다.</p></li><li><p><code>ContentView.swift</code> 파일을 열고, <code>Greeting().greet()</code> 호출을 마우스 오른쪽 버튼으로 클릭한 다음 <strong>Go To</strong> | <strong>Definition</strong>을 선택합니다.</p><p><code>shared</code> 모듈에 정의된 Kotlin 함수의 Objective-C 선언을 볼 수 있습니다. Kotlin 타입은 Objective-C/Swift에서 사용될 때 Objective-C 타입으로 표현됩니다. 여기서 <code>greet()</code> 함수는 Kotlin에서는 <code>List&lt;String&gt;</code>을 반환하고, Swift에서는 <code>NSArray&lt;NSString&gt;</code>을 반환하는 것으로 보입니다. 타입 매핑에 대한 자세한 내용은 <a href="https://kotlinlang.org/docs/native-objc-interop.html" target="_blank" rel="noreferrer">Swift/Objective-C와의 상호 운용성(Interoperability)</a>을 참조하세요.</p></li><li><p>Android 앱과 동일한 방식으로 항목 목록을 표시하도록 SwiftUI 코드를 업데이트합니다:</p><div class="language-Swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ContentView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> phrases </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Greeting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">       List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(phrases, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: \\.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">           Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><code>greet()</code> 호출 결과는 <code>phrases</code> 변수에 저장됩니다 (Swift의 <code>let</code>은 Kotlin의 <code>val</code>과 유사합니다).</li><li><code>List</code> 함수는 <code>Text</code> 항목 목록을 생성합니다.</li></ul></li><li><p>변경 사항을 확인하려면 iOS 실행 구성을 시작합니다:</p><p><img src="`+c+'" alt="업데이트된 iOS 멀티플랫폼 앱 UI" width="300"></p></li></ol><h2 id="발생-가능한-문제-및-해결책" tabindex="-1">발생 가능한 문제 및 해결책 <a class="header-anchor" href="#발생-가능한-문제-및-해결책" aria-label="Permalink to &quot;발생 가능한 문제 및 해결책&quot;">​</a></h2><h3 id="xcode가-공유-프레임워크를-호출하는-코드에서-오류를-보고하는-경우" tabindex="-1">Xcode가 공유 프레임워크를 호출하는 코드에서 오류를 보고하는 경우 <a class="header-anchor" href="#xcode가-공유-프레임워크를-호출하는-코드에서-오류를-보고하는-경우" aria-label="Permalink to &quot;Xcode가 공유 프레임워크를 호출하는 코드에서 오류를 보고하는 경우&quot;">​</a></h3><p>Xcode를 사용하는 경우, Xcode 프로젝트가 여전히 이전 버전의 프레임워크를 사용하고 있을 수 있습니다. 이 문제를 해결하려면 IntelliJ IDEA로 돌아가 프로젝트를 재빌드하거나 iOS 실행 구성을 시작하세요.</p><h3 id="xcode가-공유-프레임워크-임포트-시-오류를-보고하는-경우" tabindex="-1">Xcode가 공유 프레임워크 임포트 시 오류를 보고하는 경우 <a class="header-anchor" href="#xcode가-공유-프레임워크-임포트-시-오류를-보고하는-경우" aria-label="Permalink to &quot;Xcode가 공유 프레임워크 임포트 시 오류를 보고하는 경우&quot;">​</a></h3><p>Xcode를 사용하는 경우, 캐시된 바이너리를 지워야 할 수 있습니다. 메인 메뉴에서 <strong>Product | Clean Build Folder</strong>를 선택하여 환경을 초기화해 보세요.</p><h2 id="다음-단계" tabindex="-1">다음 단계 <a class="header-anchor" href="#다음-단계" aria-label="Permalink to &quot;다음 단계&quot;">​</a></h2><p>튜토리얼의 다음 부분에서는 종속성(dependencies)에 대해 배우고, 프로젝트의 기능을 확장하기 위해 서드 파티 라이브러리를 추가할 것입니다.</p><p><strong><a href="./multiplatform-dependencies">다음 파트로 이동</a></strong></p><h2 id="도움-받기" tabindex="-1">도움 받기 <a class="header-anchor" href="#도움-받기" aria-label="Permalink to &quot;도움 받기&quot;">​</a></h2><ul><li><strong>Kotlin Slack</strong>. <a href="https://surveys.jetbrains.com/s3/kotlin-slack-sign-up" target="_blank" rel="noreferrer">초대장</a>을 받아 <a href="https://kotlinlang.slack.com/archives/C3PQML5NU" target="_blank" rel="noreferrer">#multiplatform</a> 채널에 참여하세요.</li><li><strong>Kotlin 이슈 트래커</strong>. <a href="https://youtrack.jetbrains.com/newIssue?project=KT" target="_blank" rel="noreferrer">새로운 이슈 보고</a>.</li></ul>',19))])}const K=y(f,[["render",C]]);export{P as __pageData,K as default};
