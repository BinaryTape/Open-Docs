import{_ as d,C as r,c as p,o as h,ag as o,G as s,j as i,w as l,a}from"./chunks/framework.Bksy39di.js";const v=JSON.parse('{"title":"Kotlin Gradle 插件中的编译与缓存","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/gradle-compilation-and-caches.md","filePath":"kotlin/gradle-compilation-and-caches.md","lastUpdated":1754307826000}'),c={name:"kotlin/gradle-compilation-and-caches.md"};function k(g,e,u,m,E,b){const t=r("tab"),n=r("tabs");return h(),p("div",null,[e[8]||(e[8]=o('<h1 id="kotlin-gradle-插件中的编译与缓存" tabindex="-1">Kotlin Gradle 插件中的编译与缓存 <a class="header-anchor" href="#kotlin-gradle-插件中的编译与缓存" aria-label="Permalink to &quot;Kotlin Gradle 插件中的编译与缓存&quot;">​</a></h1><p>在此页面上，你可以了解以下主题：</p><ul><li><a href="#incremental-compilation">增量编译</a></li><li><a href="#gradle-build-cache-support">Gradle 构建缓存支持</a></li><li><a href="#gradle-configuration-cache-support">Gradle 配置缓存支持</a></li><li><a href="#the-kotlin-daemon-and-how-to-use-it-with-gradle">Kotlin daemon 及其在 Gradle 中的使用</a></li><li><a href="#rolling-back-to-the-previous-compiler">回滚到之前的编译器</a></li><li><a href="#defining-kotlin-compiler-execution-strategy">定义 Kotlin 编译器执行策略</a></li><li><a href="#kotlin-compiler-fallback-strategy">Kotlin 编译器回退策略</a></li><li><a href="#trying-the-latest-language-version">尝试最新的语言版本</a></li><li><a href="#build-reports">构建报告</a></li></ul><h2 id="增量编译" tabindex="-1">增量编译 <a class="header-anchor" href="#增量编译" aria-label="Permalink to &quot;增量编译&quot;">​</a></h2><p>Kotlin Gradle 插件支持增量编译，此功能默认已为 Kotlin/JVM 和 Kotlin/JS 项目启用。 增量编译会跟踪构建之间类路径中文件的更改，以便只编译受这些更改影响的文件。 此方法适用于 <a href="#gradle-build-cache-support">Gradle 的构建缓存</a> 并支持 <a href="https://docs.gradle.org/current/userguide/java_plugin.html#sec:java_compile_avoidance" target="_blank" rel="noreferrer">避免编译</a>。</p><p>对于 Kotlin/JVM，增量编译依赖于类路径快照， 这些快照捕获模块的 API 结构，以确定何时需要重新编译。 为了优化整体流水线，Kotlin 编译器使用两种类型的类路径快照：</p><ul><li><strong>细粒度快照：</strong> 包含有关类成员（例如属性或函数）的详细信息。 当检测到成员级别更改时，Kotlin 编译器仅重新编译依赖于修改后成员的类。 为了保持性能，Kotlin Gradle 插件会为 Gradle 缓存中的 <code>.jar</code> 文件创建粗粒度快照。</li><li><strong>粗粒度快照：</strong> 仅包含类 <a href="https://en.wikipedia.org/wiki/Application_binary_interface" target="_blank" rel="noreferrer">ABI</a> 散列值。 当 ABI 的一部分发生更改时，Kotlin 编译器会重新编译所有依赖于已更改类的类。 这对于不经常更改的类（例如外部库）非常有用。</li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Kotlin/JS 项目使用一种基于历史文件的不同增量编译方法。</p></div><p>有几种方法可以禁用增量编译：</p><ul><li><p>为 Kotlin/JVM 设置 <code>kotlin.incremental=false</code>。</p></li><li><p>为 Kotlin/JS 项目设置 <code>kotlin.incremental.js=false</code>。</p></li><li><p>使用 <code>-Pkotlin.incremental=false</code> 或 <code>-Pkotlin.incremental.js=false</code> 作为命令行参数。</p><p>此参数应添加到每个后续构建中。</p></li></ul><p>禁用增量编译后，增量缓存将在构建后失效。首次构建永远不会是增量的。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>有时，增量编译的问题会在故障发生数轮后才显现出来。使用<a href="#build-reports">构建报告</a> 来追踪更改和编译的历史记录。这有助于你提供可复现的 Bug 报告。</p></div><p>关于我们当前增量编译方法的运作方式以及与之前方法的比较的更多信息， 请参见我们的<a href="https://blog.jetbrains.com/kotlin/2022/07/a-new-approach-to-incremental-compilation-in-kotlin/" target="_blank" rel="noreferrer">博客文章</a>。</p><h2 id="gradle-构建缓存支持" tabindex="-1">Gradle 构建缓存支持 <a class="header-anchor" href="#gradle-构建缓存支持" aria-label="Permalink to &quot;Gradle 构建缓存支持&quot;">​</a></h2><p>Kotlin 插件使用 <a href="https://docs.gradle.org/current/userguide/build_cache.html" target="_blank" rel="noreferrer">Gradle 构建缓存</a>，它存储 构建输出以供未来构建复用。</p><p>要禁用所有 Kotlin 任务的缓存，请将系统属性 <code>kotlin.caching.enabled</code> 设置为 <code>false</code> （使用参数 <code>-Dkotlin.caching.enabled=false</code> 运行构建）。</p><h2 id="gradle-配置缓存支持" tabindex="-1">Gradle 配置缓存支持 <a class="header-anchor" href="#gradle-配置缓存支持" aria-label="Permalink to &quot;Gradle 配置缓存支持&quot;">​</a></h2><p>Kotlin 插件使用 <a href="https://docs.gradle.org/current/userguide/configuration_cache.html" target="_blank" rel="noreferrer">Gradle 配置缓存</a>， 它通过复用配置阶段的结果来加速后续构建的构建过程。</p><p>关于如何启用配置缓存，请参见 <a href="https://docs.gradle.org/current/userguide/configuration_cache.html#config_cache:usage" target="_blank" rel="noreferrer">Gradle 文档</a>。启用此特性后，Kotlin Gradle 插件将自动 开始使用它。</p><h2 id="kotlin-daemon-及其在-gradle-中的使用" tabindex="-1">Kotlin daemon 及其在 Gradle 中的使用 <a class="header-anchor" href="#kotlin-daemon-及其在-gradle-中的使用" aria-label="Permalink to &quot;Kotlin daemon 及其在 Gradle 中的使用&quot;">​</a></h2><p>Kotlin daemon：</p><ul><li>与 Gradle daemon 一起运行以编译项目。</li><li>当你使用 IntelliJ IDEA 内置构建系统编译项目时，它会与 Gradle daemon 分开运行。</li></ul><p>Kotlin daemon 在 Gradle <a href="https://docs.gradle.org/current/userguide/build_lifecycle.html#sec:build_phases" target="_blank" rel="noreferrer">执行阶段</a>启动， 此时其中一个 Kotlin 编译任务开始编译源代码。 Kotlin daemon 会随 Gradle daemon 一起停止，或者在没有 Kotlin 编译的两个空闲小时后停止。</p><p>Kotlin daemon 使用与 Gradle daemon 相同的 JDK。</p><h3 id="设置-kotlin-daemon-的-jvm-实参" tabindex="-1">设置 Kotlin daemon 的 JVM 实参 <a class="header-anchor" href="#设置-kotlin-daemon-的-jvm-实参" aria-label="Permalink to &quot;设置 Kotlin daemon 的 JVM 实参&quot;">​</a></h3><p>以下每种设置实参的方式都会覆盖之前设置的方式：</p><ul><li><a href="#gradle-daemon-arguments-inheritance">Gradle daemon 实参继承</a></li><li><a href="#kotlin-daemon-jvm-options-system-property"><code>kotlin.daemon.jvm.options</code> 系统属性</a></li><li><a href="#kotlin-daemon-jvmargs-property"><code>kotlin.daemon.jvmargs</code> 属性</a></li><li><a href="#kotlin-extension"><code>kotlin</code> 扩展</a></li><li><a href="#specific-task-definition">特定任务定义</a></li></ul><h4 id="gradle-daemon-实参继承" tabindex="-1">Gradle daemon 实参继承 <a class="header-anchor" href="#gradle-daemon-实参继承" aria-label="Permalink to &quot;Gradle daemon 实参继承&quot;">​</a></h4><p>默认情况下，Kotlin daemon 从 Gradle daemon 继承一组特定实参，但会用为 Kotlin daemon 直接指定的任何 JVM 实参覆盖它们。例如，如果你在 <code>gradle.properties</code> 文件中添加以下 JVM 实参：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>org.gradle.jvmargs=-Xmx1500m -Xms500m -XX:MaxMetaspaceSize=1g</span></span></code></pre></div><p>这些实参随后会被添加到 Kotlin daemon 的 JVM 实参中：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>-Xmx1500m -XX:ReservedCodeCacheSize=320m -XX:MaxMetaspaceSize=1g -XX:UseParallelGC -ea -XX:+UseCodeCacheFlushing -XX:+HeapDumpOnOutOfMemoryError -Djava.awt.headless=true -Djava.rmi.server.hostname=127.0.0.1 --add-exports=java.base/sun.nio.ch=ALL-UNNAMED</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>关于 Kotlin daemon 的 JVM 实参默认行为的更多信息，请参见<a href="#kotlin-daemon-s-behavior-with-jvm-arguments">Kotlin daemon 的 JVM 实参行为</a>。</p></div><h4 id="kotlin-daemon-jvm-options-系统属性" tabindex="-1">kotlin.daemon.jvm.options 系统属性 <a class="header-anchor" href="#kotlin-daemon-jvm-options-系统属性" aria-label="Permalink to &quot;kotlin.daemon.jvm.options 系统属性&quot;">​</a></h4><p>如果 Gradle daemon 的 JVM 实参包含 <code>kotlin.daemon.jvm.options</code> 系统属性，则在 <code>gradle.properties</code> 文件中使用它：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>org.gradle.jvmargs=-Dkotlin.daemon.jvm.options=-Xmx1500m,Xms500m</span></span></code></pre></div><p>传递实参时，请遵循以下规则：</p><ul><li>仅在实参 <code>Xmx</code>、<code>XX:MaxMetaspaceSize</code> 和 <code>XX:ReservedCodeCacheSize</code> 前使用减号 <code>-</code>。</li><li>使用逗号 (<code>,</code>) 分隔实参，<strong>不要</strong>留有空格。空格后的实参将用于 Gradle daemon，而不是 Kotlin daemon。</li></ul><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>如果满足以下所有条件，Gradle 将忽略这些属性： * Gradle 正在使用 JDK 1.9 或更高版本。 * Gradle 的版本在 7.0 到 7.1.1 之间（含）。 * Gradle 正在编译 Kotlin DSL 脚本。 * Kotlin daemon 未运行。 为了解决此问题，请将 Gradle 升级到 7.2 版（或更高版本），或使用 <code>kotlin.daemon.jvmargs</code> 属性——请参见下一节。</p></div><h4 id="kotlin-daemon-jvmargs-属性" tabindex="-1">kotlin.daemon.jvmargs 属性 <a class="header-anchor" href="#kotlin-daemon-jvmargs-属性" aria-label="Permalink to &quot;kotlin.daemon.jvmargs 属性&quot;">​</a></h4><p>你可以在 <code>gradle.properties</code> 文件中添加 <code>kotlin.daemon.jvmargs</code> 属性：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.daemon.jvmargs=-Xmx1500m -Xms500m</span></span></code></pre></div><p>请注意，如果你在此处或 Gradle 的 JVM 实参中未指定 <code>ReservedCodeCacheSize</code> 实参，Kotlin Gradle 插件将应用默认值 <code>320m</code>：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>-Xmx1500m -XX:ReservedCodeCacheSize=320m -Xms500m</span></span></code></pre></div><h4 id="kotlin-扩展" tabindex="-1">kotlin 扩展 <a class="header-anchor" href="#kotlin-扩展" aria-label="Permalink to &quot;kotlin 扩展&quot;">​</a></h4><p>你可以在 <code>kotlin</code> 扩展中指定实参：</p>',46)),s(n,{group:"build-script"},{default:l(()=>[s(t,{title:"Kotlin","group-key":"kotlin"},{default:l(()=>e[0]||(e[0]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    kotlinDaemonJvmArgs "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," listOf"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-Xmx486m"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-Xms256m"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-XX:+UseParallelGC"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),s(t,{title:"Groovy","group-key":"groovy"},{default:l(()=>e[1]||(e[1]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"kotlin {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    kotlinDaemonJvmArgs "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," ["),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-Xmx486m"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-Xms256m"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-XX:+UseParallelGC"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"]")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),e[9]||(e[9]=i("h4",{id:"特定任务定义",tabindex:"-1"},[a("特定任务定义 "),i("a",{class:"header-anchor",href:"#特定任务定义","aria-label":'Permalink to "特定任务定义"'},"​")],-1)),e[10]||(e[10]=i("p",null,"你可以为特定任务指定实参：",-1)),s(n,{group:"build-script"},{default:l(()=>[s(t,{title:"Kotlin","group-key":"kotlin"},{default:l(()=>e[2]||(e[2]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withType"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"CompileUsingKotlinDaemon"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},">()."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"configureEach"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    kotlinDaemonJvmArguments."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"set"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"listOf"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-Xmx486m"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-Xms256m"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-XX:+UseParallelGC"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"))")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),s(t,{title:"Groovy","group-key":"groovy"},{default:l(()=>e[3]||(e[3]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"withType("),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"CompileUsingKotlinDaemon"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"configureEach { "),i("span",{style:{"--shiki-light":"#E36209","--shiki-dark":"#FFAB70"}},"task"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," ->")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    task"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"kotlinDaemonJvmArguments "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," ["),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-Xmx1g"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-Xms512m"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"]")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),e[11]||(e[11]=o('<div class="note custom-block"><p class="custom-block-title">NOTE</p><p>在这种情况下，任务执行时可能会启动新的 Kotlin daemon 实例。关于<a href="#kotlin-daemon-s-behavior-with-jvm-arguments">Kotlin daemon 的 JVM 实参行为</a>的更多信息，请参阅。</p></div><h3 id="kotlin-daemon-的-jvm-实参行为" tabindex="-1">Kotlin daemon 的 JVM 实参行为 <a class="header-anchor" href="#kotlin-daemon-的-jvm-实参行为" aria-label="Permalink to &quot;Kotlin daemon 的 JVM 实参行为&quot;">​</a></h3><p>配置 Kotlin daemon 的 JVM 实参时，请注意：</p><ul><li>当不同的子项目或任务具有不同的 JVM 实参集时，可能会有多个 Kotlin daemon 实例同时运行。</li><li>仅当 Gradle 运行相关编译任务且现有 Kotlin daemons 不具有相同的 JVM 实参集时，才会启动新的 Kotlin daemon 实例。 假设你的项目有很多子项目。其中大多数都需要一些堆内存用于 Kotlin daemon，但有一个模块需要很多（尽管很少编译）。 在这种情况下，你应该为此模块提供不同的 JVM 实参集，这样具有更大堆大小的 Kotlin daemon 将仅为接触此特定模块的开发者启动。<div class="note custom-block"><p class="custom-block-title">NOTE</p><p>如果你已在运行一个具有足够堆大小来处理编译请求的 Kotlin daemon， 即使其他请求的 JVM 实参不同，此 daemon 也将被复用，而不是启动新的。</p></div></li></ul><p>如果未指定以下实参，Kotlin daemon 将从 Gradle daemon 继承它们：</p><ul><li><code>-Xmx</code></li><li><code>-XX:MaxMetaspaceSize</code></li><li><code>-XX:ReservedCodeCacheSize</code>。如果未指定或继承，默认值为 <code>320m</code>。</li></ul><p>Kotlin daemon 具有以下默认 JVM 实参：</p><ul><li><code>-XX:UseParallelGC</code>。此实参仅在未指定其他垃圾收集器时应用。</li><li><code>-ea</code></li><li><code>-XX:+UseCodeCacheFlushing</code></li><li><code>-Djava.awt.headless=true</code></li><li><code>-D{java.servername.property}={localhostip}</code></li><li><code>--add-exports=java.base/sun.nio.ch=ALL-UNNAMED</code>。此实参仅适用于 JDK 16 或更高版本。</li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Kotlin daemon 的默认 JVM 实参列表可能因版本而异。你可以使用 <a href="https://visualvm.github.io/" target="_blank" rel="noreferrer">VisualVM</a> 等工具来检查正在运行的 JVM 进程（例如 Kotlin daemon）的实际设置。</p></div><h2 id="回滚到之前的编译器" tabindex="-1">回滚到之前的编译器 <a class="header-anchor" href="#回滚到之前的编译器" aria-label="Permalink to &quot;回滚到之前的编译器&quot;">​</a></h2><p>从 Kotlin 2.0.0 开始，K2 编译器默认启用。</p><p>要从 Kotlin 2.0.0 起使用之前的编译器，可以：</p><ul><li><p>在 <code>build.gradle.kts</code> 文件中，将<a href="/kotlin/gradle-compiler-options#example-of-setting-languageversion">语言版本</a>设置为 <code>1.9</code>。</p><p>或者</p></li><li><p>使用以下编译器选项：<code>-language-version 1.9</code>。</p></li></ul><p>关于 K2 编译器优点的更多信息，请参见 <a href="/kotlin/k2-compiler-migration-guide">K2 编译器迁移指南</a>。</p><h2 id="定义-kotlin-编译器执行策略" tabindex="-1">定义 Kotlin 编译器执行策略 <a class="header-anchor" href="#定义-kotlin-编译器执行策略" aria-label="Permalink to &quot;定义 Kotlin 编译器执行策略&quot;">​</a></h2><p><em>Kotlin 编译器执行策略</em> 定义了 Kotlin 编译器的执行位置以及每种情况下是否支持增量编译。</p><p>共有三种编译器执行策略：</p><table tabindex="0"><thead><tr><th>策略</th><th>Kotlin 编译器执行位置</th><th>增量编译</th><th>其他特点和注意事项</th></tr></thead><tbody><tr><td>Daemon</td><td>在其自己的 daemon 进程内</td><td>是</td><td><em>默认且最快的策略</em>。可在不同的 Gradle daemon 和多个并行编译之间共享。</td></tr><tr><td>进程内</td><td>在 Gradle daemon 进程内</td><td>否</td><td>可能与 Gradle daemon 共享堆。“进程内”执行策略_比“Daemon”执行策略慢_。每个 <a href="https://docs.gradle.org/current/userguide/worker_api.html" target="_blank" rel="noreferrer">worker</a> 为每次编译创建一个单独的 Kotlin 编译器类加载器。</td></tr><tr><td>进程外</td><td>为每次编译创建单独的进程</td><td>否</td><td>最慢的执行策略。类似于“进程内”策略，但额外在 Gradle worker 中为每次编译创建一个单独的 Java 进程。</td></tr></tbody></table><p>要定义 Kotlin 编译器执行策略，可以使用以下属性之一：</p><ul><li><code>kotlin.compiler.execution.strategy</code> Gradle 属性。</li><li><code>compilerExecutionStrategy</code> 编译任务属性。</li></ul><p>任务属性 <code>compilerExecutionStrategy</code> 的优先级高于 Gradle 属性 <code>kotlin.compiler.execution.strategy</code>。</p><p><code>kotlin.compiler.execution.strategy</code> 属性的可用值有：</p><ol><li><code>daemon</code> （默认）</li><li><code>in-process</code></li><li><code>out-of-process</code></li></ol><p>在 <code>gradle.properties</code> 中使用 Gradle 属性 <code>kotlin.compiler.execution.strategy</code>：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.compiler.execution.strategy=out-of-process</span></span></code></pre></div><p><code>compilerExecutionStrategy</code> 任务属性的可用值有：</p><ol><li><code>org.jetbrains.kotlin.gradle.tasks.KotlinCompilerExecutionStrategy.DAEMON</code> （默认）</li><li><code>org.jetbrains.kotlin.gradle.tasks.KotlinCompilerExecutionStrategy.IN_PROCESS</code></li><li><code>org.jetbrains.kotlin.gradle.tasks.KotlinCompilerExecutionStrategy.OUT_OF_PROCESS</code></li></ol><p>在构建脚本中使用任务属性 <code>compilerExecutionStrategy</code>：</p>',28)),s(n,{group:"build-script"},{default:l(()=>[s(t,{title:"Kotlin","group-key":"kotlin"},{default:l(()=>e[4]||(e[4]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," org.jetbrains.kotlin.gradle.tasks.CompileUsingKotlinDaemon")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," org.jetbrains.kotlin.gradle.tasks.KotlinCompilerExecutionStrategy")]),a(`
`),i("span",{class:"line"}),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// ...")]),a(`
`),i("span",{class:"line"}),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withType"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"CompileUsingKotlinDaemon"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},">()."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"configureEach"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    compilerExecutionStrategy."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"set"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(KotlinCompilerExecutionStrategy.IN_PROCESS)")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),s(t,{title:"Groovy","group-key":"groovy"},{default:l(()=>e[5]||(e[5]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," org.jetbrains.kotlin.gradle.tasks.CompileUsingKotlinDaemon")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," org.jetbrains.kotlin.gradle.tasks.KotlinCompilerExecutionStrategy")]),a(`
`),i("span",{class:"line"}),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// ...")]),a(`
`),i("span",{class:"line"}),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"withType("),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"CompileUsingKotlinDaemon"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    .configureEach {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        compilerExecutionStrategy "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}}," KotlinCompilerExecutionStrategy."),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"IN_PROCESS")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")])])])],-1)])),_:1})]),_:1}),e[12]||(e[12]=o(`<h2 id="kotlin-编译器回退策略" tabindex="-1">Kotlin 编译器回退策略 <a class="header-anchor" href="#kotlin-编译器回退策略" aria-label="Permalink to &quot;Kotlin 编译器回退策略&quot;">​</a></h2><p>Kotlin 编译器的回退策略是，如果 daemon 出现故障，则在 Kotlin daemon 之外运行编译。 如果 Gradle daemon 已开启，编译器将使用“进程内”策略。 如果 Gradle daemon 已关闭，编译器将使用“进程外”策略。</p><p>当发生此回退时，你会在 Gradle 的构建输出中看到以下警告行：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Failed to compile with Kotlin daemon: java.lang.RuntimeException: Could not connect to Kotlin compile daemon</span></span>
<span class="line"><span>[异常堆栈跟踪]</span></span>
<span class="line"><span>Using fallback strategy: Compile without Kotlin daemon</span></span>
<span class="line"><span>Try ./gradlew --stop if this issue persists.</span></span></code></pre></div><p>然而，静默回退到另一种策略可能会消耗大量系统资源或导致非确定性构建。 关于此问题的更多信息，请参见此 <a href="https://youtrack.jetbrains.com/issue/KT-48843/Add-ability-to-disable-Kotlin-daemon-fallback-strategy" target="_blank" rel="noreferrer">YouTrack 问题</a>。 为避免此问题，有一个 Gradle 属性 <code>kotlin.daemon.useFallbackStrategy</code>，其默认值为 <code>true</code>。 当值为 <code>false</code> 时，构建会在 daemon 启动或通信出现问题时失败。在 <code>gradle.properties</code> 中声明此属性：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.daemon.useFallbackStrategy=false</span></span></code></pre></div><p>Kotlin 编译任务中还有一个 <code>useDaemonFallbackStrategy</code> 属性，如果你同时使用这两个属性，此任务属性的优先级更高。</p>`,7)),s(n,{group:"build-script"},{default:l(()=>[s(t,{title:"Kotlin","group-key":"kotlin"},{default:l(()=>e[6]||(e[6]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"tasks"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    compileKotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        useDaemonFallbackStrategy."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"set"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"false"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }   ")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),s(t,{title:"Groovy","group-key":"groovy"},{default:l(()=>e[7]||(e[7]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"named("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"compileKotlin"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"configure {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    useDaemonFallbackStrategy "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," false")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),e[13]||(e[13]=o(`<p>如果运行编译的内存不足，你可以在日志中看到相关消息。</p><h2 id="尝试最新的语言版本" tabindex="-1">尝试最新的语言版本 <a class="header-anchor" href="#尝试最新的语言版本" aria-label="Permalink to &quot;尝试最新的语言版本&quot;">​</a></h2><p>从 Kotlin 2.0.0 开始，要尝试最新的语言版本，请在 <code>gradle.properties</code> 文件中设置 <code>kotlin.experimental.tryNext</code> 属性。 当你使用此属性时，Kotlin Gradle 插件会将语言版本增加到高于你的 Kotlin 版本的默认值。 例如，在 Kotlin 2.0.0 中，默认语言版本是 2.0，因此该属性将配置语言版本 2.1。</p><p>或者，你可以运行以下命令：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> assemble</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -Pkotlin.experimental.tryNext=true</span></span></code></pre></div><p>在<a href="#build-reports">构建报告</a>中，你可以找到用于编译每个任务的语言版本。</p><h2 id="构建报告" tabindex="-1">构建报告 <a class="header-anchor" href="#构建报告" aria-label="Permalink to &quot;构建报告&quot;">​</a></h2><p>构建报告包含不同编译阶段的持续时间以及编译无法增量的任何原因。 当编译时间过长或对于同一项目而言编译时间不同时，可以使用构建报告来调查性能问题。</p><p>Kotlin 构建报告可以帮助你更高效地调查构建性能问题，相比之下，<a href="https://scans.gradle.com/" target="_blank" rel="noreferrer">Gradle 构建扫描</a> 的粒度单位是单个 Gradle 任务，效率较低。</p><p>分析长时间运行的编译的构建报告可以帮助你解决两种常见情况：</p><ul><li>构建不是增量的。分析原因并修复潜在问题。</li><li>构建是增量的但耗时过长。尝试重组源文件——拆分大文件， 将单独的类保存在不同文件中，重构大型类，在不同文件中声明顶层函数等等。</li></ul><p>构建报告还会显示项目中使用的 Kotlin 版本。此外，从 Kotlin 1.9.0 开始， 你可以在 <a href="https://scans.gradle.com/" target="_blank" rel="noreferrer">Gradle 构建扫描</a> 中看到用于编译代码的编译器。</p><p>了解<a href="https://blog.jetbrains.com/kotlin/2022/06/introducing-kotlin-build-reports/#how_to_read_build_reports" target="_blank" rel="noreferrer">如何阅读构建报告</a> 以及 <a href="https://blog.jetbrains.com/kotlin/2022/06/introducing-kotlin-build-reports/#how_we_use_build_reports_in_jetbrains" target="_blank" rel="noreferrer">JetBrains 如何使用构建报告</a>。</p><h3 id="启用构建报告" tabindex="-1">启用构建报告 <a class="header-anchor" href="#启用构建报告" aria-label="Permalink to &quot;启用构建报告&quot;">​</a></h3><p>要启用构建报告，请在 <code>gradle.properties</code> 中声明构建报告输出的保存位置：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.build.report.output=file</span></span></code></pre></div><p>以下值及其组合可用于输出：</p><table tabindex="0"><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td><code>file</code></td><td>将构建报告以人类可读的格式保存到本地文件。默认情况下，它是 <code>\${project_folder}/build/reports/kotlin-build/\${project_name}-timestamp.txt</code></td></tr><tr><td><code>single_file</code></td><td>将构建报告以对象格式保存到指定的本地文件。</td></tr><tr><td><code>build_scan</code></td><td>将构建报告保存到 <a href="https://scans.gradle.com/" target="_blank" rel="noreferrer">构建扫描</a> 的 <code>custom values</code> 部分。请注意，Gradle Enterprise 插件限制了自定义值的数量和长度。在大型项目中，一些值可能会丢失。</td></tr><tr><td><code>http</code></td><td>使用 HTTP(S) 发布构建报告。POST 方法以 JSON 格式发送指标。你可以在 <a href="https://github.com/JetBrains/kotlin/blob/master/libraries/tools/kotlin-gradle-plugin/src/common/kotlin/org/jetbrains/kotlin/gradle/report/data/GradleCompileStatisticsData.kt" target="_blank" rel="noreferrer">Kotlin 版本库</a> 中查看发送数据的当前版本。你可以在<a href="https://blog.jetbrains.com/kotlin/2022/06/introducing-kotlin-build-reports/#enable_build_reports" target="_blank" rel="noreferrer">这篇博客文章</a>中找到 HTTP 端点示例。</td></tr><tr><td><code>json</code></td><td>将构建报告以 JSON 格式保存到本地文件。在 <code>kotlin.build.report.json.directory</code> 中设置构建报告的位置（参见下文）。默认情况下，其名称为 <code>\${project_name}-build-&lt;date-time&gt;-&lt;index&gt;.json</code>。</td></tr></tbody></table><p>以下是 <code>kotlin.build.report</code> 的可用选项列表：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 必选输出。允许任意组合</span></span>
<span class="line"><span>kotlin.build.report.output=file,single_file,http,build_scan,json</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 如果使用 single_file 输出，则此项为必填。报告存放位置 </span></span>
<span class="line"><span># 用此项替代已弃用的 \`kotlin.internal.single.build.metrics.file\` 属性</span></span>
<span class="line"><span>kotlin.build.report.single_file=some_filename</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 如果使用 json 输出，则此项为必填。报告存放位置 </span></span>
<span class="line"><span>kotlin.build.report.json.directory=my/directory/path</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 可选。基于文件的报告输出目录。默认值：build/reports/kotlin-build/</span></span>
<span class="line"><span>kotlin.build.report.file.output_dir=kotlin-reports</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 可选。用于标记构建报告的标签（例如，调试参数）</span></span>
<span class="line"><span>kotlin.build.report.label=some_label</span></span></code></pre></div><p>仅适用于 HTTP 的选项：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 必填。HTTP(S) 报告的发布位置</span></span>
<span class="line"><span>kotlin.build.report.http.url=http://127.0.0.1:8080</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 可选。如果 HTTP 端点需要认证，则为用户和密码</span></span>
<span class="line"><span>kotlin.build.report.http.user=someUser</span></span>
<span class="line"><span>kotlin.build.report.http.password=somePassword</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 可选。将构建的 Git 分支名称添加到构建报告</span></span>
<span class="line"><span>kotlin.build.report.http.include_git_branch.name=true|false</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 可选。将编译器实参添加到构建报告</span></span>
<span class="line"><span># 如果一个项目包含多个模块，其报告中的编译器实参可能非常庞大且帮助不大</span></span>
<span class="line"><span>kotlin.build.report.include_compiler_arguments=true|false</span></span></code></pre></div><h3 id="自定义值限制" tabindex="-1">自定义值限制 <a class="header-anchor" href="#自定义值限制" aria-label="Permalink to &quot;自定义值限制&quot;">​</a></h3><p>为了收集构建扫描的统计信息，Kotlin 构建报告使用 <a href="https://docs.gradle.com/enterprise/tutorials/extending-build-scans/" target="_blank" rel="noreferrer">Gradle 的自定义值</a>。 你和不同的 Gradle 插件都可以将数据写入自定义值。自定义值的数量有上限。 请参见 <a href="https://docs.gradle.com/enterprise/gradle-plugin/#adding_custom_values" target="_blank" rel="noreferrer">Build scan plugin docs</a> 中当前最大自定义值计数。</p><p>如果你有一个大型项目，此类自定义值的数量可能相当大。如果此数量超过限制， 你可能会在日志中看到以下消息：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Maximum number of custom values (1,000) exceeded</span></span></code></pre></div><p>为了减少 Kotlin 插件生成的自定义值数量，你可以在 <code>gradle.properties</code> 中使用以下属性：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.build.report.build_scan.custom_values_limit=500</span></span></code></pre></div><h3 id="关闭项目和系统属性收集" tabindex="-1">关闭项目和系统属性收集 <a class="header-anchor" href="#关闭项目和系统属性收集" aria-label="Permalink to &quot;关闭项目和系统属性收集&quot;">​</a></h3><p>HTTP 构建统计日志可能包含一些项目和系统属性。这些属性可以更改构建的行为， 因此将它们记录在构建统计信息中很有用。 这些属性可能存储敏感数据，例如密码或项目的完整路径。</p><p>你可以通过在 <code>gradle.properties</code> 中添加 <code>kotlin.build.report.http.verbose_environment</code> 属性来禁用这些统计信息的收集。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>JetBrains 不收集这些统计信息。你选择一个<a href="#enabling-build-reports">存储报告的位置</a>。</p></div><h2 id="下一步" tabindex="-1">下一步？ <a class="header-anchor" href="#下一步" aria-label="Permalink to &quot;下一步？&quot;">​</a></h2><p>了解更多关于：</p><ul><li><a href="https://docs.gradle.org/current/userguide/userguide.html" target="_blank" rel="noreferrer">Gradle 基础知识与特性</a>。</li><li><a href="/kotlin/gradle-plugin-variants">对 Gradle 插件变体的支持</a>。</li></ul>`,35))])}const f=d(c,[["render",k]]);export{v as __pageData,f as default};
