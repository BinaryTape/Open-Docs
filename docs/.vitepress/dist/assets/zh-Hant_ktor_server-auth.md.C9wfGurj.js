import{_ as y,C as n,c as v,o as F,G as i,ag as p,j as a,w as e,a as t}from"./chunks/framework.Bksy39di.js";const D=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/ktor/server-auth.md","filePath":"zh-Hant/ktor/server-auth.md","lastUpdated":1755457140000}'),b={name:"zh-Hant/ktor/server-auth.md"};function m(f,s,q,A,C,B){const o=n("TopicTitle"),k=n("show-structure"),d=n("primary-label"),c=n("tldr"),u=n("link-summary"),l=n("code-block"),r=n("TabItem"),h=n("Tabs"),E=n("Links"),g=n("list");return F(),v("div",null,[i(o,{labelRef:"server-plugin",title:"Ktor 伺服器中的認證與授權"}),i(k,{for:"chapter",depth:"2"}),i(d,{ref:"server-plugin"},null,512),i(c,null,{default:e(()=>s[0]||(s[0]=[a("p",null,[a("b",null,"所需相依性"),t("："),a("code",null,"io.ktor:ktor-server-auth")],-1)])),_:1}),i(u,null,{default:e(()=>s[1]||(s[1]=[t(" Authentication 外掛程式處理 Ktor 中的認證與授權。 ")])),_:1}),s[14]||(s[14]=p('<p>Ktor 提供 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-authentication/index.html" target="_blank" rel="noreferrer">Authentication</a> 外掛程式來處理認證與授權。典型的使用情境包括登入使用者、授予對特定資源的存取權限以及在各方之間安全地傳輸資訊。您也可以將 <code>Authentication</code> 與 <a href="./server-sessions">Sessions</a> 搭配使用，以在請求之間保留使用者的資訊。</p><blockquote><p>在客戶端，Ktor 提供 <a href="./client-auth">Authentication</a> 外掛程式來處理認證與授權。</p></blockquote><h2 id="supported" tabindex="-1">支援的認證類型 <a class="header-anchor" href="#supported" aria-label="Permalink to &quot;支援的認證類型 {id=&quot;supported&quot;}&quot;">​</a></h2><p>Ktor 支援以下認證與授權方案：</p><h3 id="http-auth" tabindex="-1">HTTP 認證 <a class="header-anchor" href="#http-auth" aria-label="Permalink to &quot;HTTP 認證 {id=&quot;http-auth&quot;}&quot;">​</a></h3><p>HTTP 提供了一個用於存取控制與認證的<a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication" target="_blank" rel="noreferrer">通用框架</a>。在 Ktor 中，您可以使用以下 HTTP 認證方案：</p><ul><li><a href="./server-basic-auth">Basic</a> - 使用 <code>Base64</code> 編碼提供使用者名稱與密碼。如果未與 HTTPS 結合使用，通常不建議。</li><li><a href="./server-digest-auth">Digest</a> - 一種認證方法，透過對使用者名稱和密碼應用雜湊函數，以加密形式傳輸使用者憑證。</li><li><a href="./server-bearer-auth">Bearer</a> - 一種涉及稱為 Bearer token 的安全令牌的認證方案。 Bearer 認證方案作為 <a href="./server-oauth">OAuth</a> 或 <a href="./server-jwt">JWT</a> 的一部分使用，但您也可以提供自訂邏輯來授權 Bearer token。</li></ul><h3 id="form-auth" tabindex="-1">基於表單的認證 <a class="header-anchor" href="#form-auth" aria-label="Permalink to &quot;基於表單的認證 {id=&quot;form-auth&quot;}&quot;">​</a></h3><p><a href="./server-form-based-auth">基於表單的</a>認證使用<a href="https://developer.mozilla.org/en-US/docs/Learn/Forms" target="_blank" rel="noreferrer">網路表單</a>來收集憑證資訊並驗證使用者。</p><h3 id="jwt" tabindex="-1">JSON Web Token (JWT) <a class="header-anchor" href="#jwt" aria-label="Permalink to &quot;JSON Web Token (JWT) {id=&quot;jwt&quot;}&quot;">​</a></h3><p><a href="./server-jwt">JSON Web Token</a> 是一種用於在各方之間安全傳輸資訊的開放標準，以 JSON 物件形式呈現。您可以將 JSON Web Token 用於授權：當使用者登入後，每個請求都將包含一個 token，允許使用者存取該 token 允許的資源。在 Ktor 中，您可以使用 <code>jwt</code> 認證來驗證 token 並驗證其中包含的 claims。</p><h3 id="ldap" tabindex="-1">LDAP <a class="header-anchor" href="#ldap" aria-label="Permalink to &quot;LDAP {id=&quot;ldap&quot;}&quot;">​</a></h3><p><a href="./server-ldap">LDAP</a> 是一種開放且跨平台的協議，用於目錄服務認證。Ktor 提供 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth-ldap/io.ktor.server.auth.ldap/ldap-authenticate.html" target="_blank" rel="noreferrer">ldapAuthenticate</a> 函數，用於根據指定的 LDAP 伺服器驗證使用者憑證。</p><h3 id="oauth" tabindex="-1">OAuth <a class="header-anchor" href="#oauth" aria-label="Permalink to &quot;OAuth {id=&quot;oauth&quot;}&quot;">​</a></h3><p><a href="./server-oauth">OAuth</a> 是一種用於保護 API 存取的開放標準。Ktor 中的 <code>oauth</code> 供應器允許您使用 Google、Facebook、Twitter 等外部供應器來實作認證。</p><h3 id="sessions" tabindex="-1">會話 <a class="header-anchor" href="#sessions" aria-label="Permalink to &quot;會話 {id=&quot;sessions&quot;}&quot;">​</a></h3><p><a href="./server-sessions">會話</a> 提供一種機制，用於在不同 HTTP 請求之間持久化資料。典型的使用情境包括儲存已登入使用者的 ID、購物籃的內容或在客戶端保留使用者偏好設定。在 Ktor 中，已具有關聯會話的使用者可以使用 <code>session</code> 供應器進行認證。從 <a href="./server-session-auth">Ktor 伺服器中的會話認證</a>了解如何執行此操作。</p><h3 id="custom" tabindex="-1">自訂 <a class="header-anchor" href="#custom" aria-label="Permalink to &quot;自訂 {id=&quot;custom&quot;}&quot;">​</a></h3><p>Ktor 還提供一個用於建立<a href="./server-custom-plugins">自訂外掛程式</a>的 API，可用於實作您自己的外掛程式來處理認證與授權。 例如，<code>AuthenticationChecked</code> <a href="./server-custom-plugins#call-handling">鉤點</a> 在認證憑證檢查後執行，它允許您實作授權：<a href="https://github.com/ktorio/ktor-documentation/blob/3.2.3/codeSnippets/snippets/custom-plugin-authorization" target="_blank" rel="noreferrer">custom-plugin-authorization</a>。</p><h2 id="add_dependencies" tabindex="-1">新增相依性 <a class="header-anchor" href="#add_dependencies" aria-label="Permalink to &quot;新增相依性 {id=&quot;add_dependencies&quot;}&quot;">​</a></h2><p> 若要使用 <code>Authentication</code>，您需要在建置腳本中包含 <code>ktor-server-auth</code> artifact： </p>',21)),i(h,{group:"languages"},{default:e(()=>[i(r,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:e(()=>[i(l,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-server-auth:$ktor_version")'})]),_:1}),i(r,{title:"Gradle (Groovy)","group-key":"groovy"},{default:e(()=>[i(l,{lang:"Groovy",code:'            implementation "io.ktor:ktor-server-auth:$ktor_version"'})]),_:1}),i(r,{title:"Maven","group-key":"maven"},{default:e(()=>[i(l,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-server-auth-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),s[15]||(s[15]=a("p",null,[t("請注意，某些認證供應器，例如 "),a("a",{href:"./server-jwt"},"JWT"),t(" 和 "),a("a",{href:"./server-ldap"},"LDAP"),t("，需要額外的 artifact。")],-1)),s[16]||(s[16]=a("h2",{id:"install",tabindex:"-1"},[t("安裝 Authentication "),a("a",{class:"header-anchor",href:"#install","aria-label":'Permalink to "安裝 Authentication {id="install"}"'},"​")],-1)),a("p",null,[s[3]||(s[3]=t(" 若要將 ")),s[4]||(s[4]=a("code",null,"Authentication",-1)),s[5]||(s[5]=t(" 外掛程式")),s[6]||(s[6]=a("a",{href:"#install"},"安裝",-1)),s[7]||(s[7]=t("到應用程式， 請在指定的")),i(E,{href:"/ktor/server-modules",summary:"Modules allow you to structure your application by grouping routes."},{default:e(()=>s[2]||(s[2]=[t("模組")])),_:1}),s[8]||(s[8]=t("中將其傳遞給 ")),s[9]||(s[9]=a("code",null,"install",-1)),s[10]||(s[10]=t(" 函數。 以下程式碼片段展示了如何安裝 ")),s[11]||(s[11]=a("code",null,"Authentication",-1)),s[12]||(s[12]=t(" ... "))]),i(g,null,{default:e(()=>s[13]||(s[13]=[a("li",null,[t(" ... 在 "),a("code",null,"embeddedServer"),t(" 函數呼叫內部。 ")],-1),a("li",null,[t(" ... 在明確定義的 "),a("code",null,"module"),t(" 內部，該 "),a("code",null,"module"),t(" 是 "),a("code",null,"Application"),t(" 類別的擴展函數。 ")],-1)])),_:1}),i(h,null,{default:e(()=>[i(r,{title:"embeddedServer"},{default:e(()=>[i(l,{lang:"kotlin",code:`            import io.ktor.server.engine.*
            import io.ktor.server.netty.*
            import io.ktor.server.application.*
            import io.ktor.server.auth.*

            fun main() {
                embeddedServer(Netty, port = 8080) {
                    install(Authentication)
                    // ...
                }.start(wait = true)
            }`})]),_:1}),i(r,{title:"module"},{default:e(()=>[i(l,{lang:"kotlin",code:`            import io.ktor.server.application.*
            import io.ktor.server.auth.*
            // ...
            fun Application.module() {
                install(Authentication)
                // ...
            }`})]),_:1})]),_:1}),s[17]||(s[17]=p(`<h2 id="configure" tabindex="-1">設定 Authentication <a class="header-anchor" href="#configure" aria-label="Permalink to &quot;設定 Authentication {id=&quot;configure&quot;}&quot;">​</a></h2><p>在<a href="#install">安裝 Authentication</a> 之後，您可以如下設定和使用 <code>Authentication</code>：</p><h3 id="choose-provider" tabindex="-1">步驟 1：選擇認證供應器 <a class="header-anchor" href="#choose-provider" aria-label="Permalink to &quot;步驟 1：選擇認證供應器 {id=&quot;choose-provider&quot;}&quot;">​</a></h3><p>若要使用特定的認證 供應器，例如 <a href="./server-basic-auth">basic</a>、<a href="./server-digest-auth">digest</a> 或 <a href="./server-form-based-auth">form</a>， 您需要在 <code>install</code> 區塊內呼叫對應的函數。例如，要使用基本認證， 請呼叫 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/basic.html" target="_blank" rel="noreferrer"><code>.basic()</code></a> 函數：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.application.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.auth.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Authentication) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    basic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Configure basic authentication</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在此函數內部，您可以<a href="#configure-provider">設定</a>此供應器特有的設定。</p><h3 id="provider-name" tabindex="-1">步驟 2：指定供應器名稱 <a class="header-anchor" href="#provider-name" aria-label="Permalink to &quot;步驟 2：指定供應器名稱 {id=&quot;provider-name&quot;}&quot;">​</a></h3><p><a href="#choose-provider">使用特定供應器</a>的函數允許您選擇性地指定供應器名稱。下面的程式碼範例分別使用 <code>&quot;auth-basic&quot;</code> 和 <code>&quot;auth-form&quot;</code> 名稱安裝 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/basic.html" target="_blank" rel="noreferrer">basic</a> 和 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/form.html" target="_blank" rel="noreferrer">form</a> 供應器：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Authentication) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    basic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-basic&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Configure basic authentication</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    form</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-form&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Configure form authentication</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>這些名稱稍後可用於使用不同供應器<a href="#authenticate-route">驗證不同的路由</a>。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>請注意，供應器名稱應該是唯一的，並且您只能定義一個沒有名稱的供應器。</p></div><h3 id="configure-provider" tabindex="-1">步驟 3：設定供應器 <a class="header-anchor" href="#configure-provider" aria-label="Permalink to &quot;步驟 3：設定供應器 {id=&quot;configure-provider&quot;}&quot;">​</a></h3><p>每個<a href="#choose-provider">供應器類型</a>都有其自己的設定。例如， <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-basic-authentication-provider/-config/index.html" target="_blank" rel="noreferrer"><code>BasicAuthenticationProvider.Config</code></a> 類別為 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/basic.html" target="_blank" rel="noreferrer"><code>.basic()</code></a> 函數提供了選項。此類別中的關鍵函數是 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-basic-authentication-provider/-config/validate.html" target="_blank" rel="noreferrer"><code>validate()</code></a>， 它負責驗證使用者名稱和密碼。以下程式碼範例展示了其用法：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Authentication) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    basic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-basic&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        realm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Access to the &#39;/&#39; path&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        validate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { credentials </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (credentials.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;jetbrains&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> credentials.password </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;foobar&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                UserIdPrincipal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(credentials.name)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>為了理解 <code>validate()</code> 函數如何運作，我們需要介紹兩個術語：</p><ul><li><em>主體</em> 是一個可以被認證的實體：使用者、電腦、服務等。在 Ktor 中，各種 認證供應器可能會使用不同的主體。例如，<code>basic</code>、<code>digest</code> 和 <code>form</code> 供應器 認證 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-user-id-principal/index.html" target="_blank" rel="noreferrer"><code>UserIdPrincipal</code></a>， 而 <code>jwt</code> 供應器 驗證 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth-jwt/io.ktor.server.auth.jwt/-j-w-t-principal/index.html" target="_blank" rel="noreferrer"><code>JWTPrincipal</code></a>。 <blockquote><p>您也可以建立自訂主體。這在以下情況中可能很有用：</p><ul><li>將憑證映射到自訂主體允許您在<a href="#get-principal">路由處理器</a>內部擁有關於已認證主體的額外資訊。</li><li>如果您使用<a href="./server-session-auth">會話認證</a>，主體可能是一個儲存會話資料的資料類別。</li></ul></blockquote></li><li><em>憑證</em> 是一組用於伺服器認證主體的屬性：使用者/密碼對、API 金鑰等等。例如，<code>basic</code> 和 <code>form</code> 供應器 使用 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-user-password-credential/index.html" target="_blank" rel="noreferrer"><code>UserPasswordCredential</code></a> 來驗證使用者名稱和密碼，而 <code>jwt</code> 驗證 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth-jwt/io.ktor.server.auth.jwt/-j-w-t-credential/index.html" target="_blank" rel="noreferrer"><code>JWTCredential</code></a>。</li></ul><p>因此，<code>validate()</code> 函數檢查指定的憑證，並在認證成功時傳回一個 <code>Any</code> 主體，如果認證失敗則傳回 <code>null</code>。</p><blockquote><p>若要根據特定條件跳過認證， 請使用 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-authentication-provider/-config/skip-when.html" target="_blank" rel="noreferrer"><code>skipWhen()</code></a>。 例如，如果<a href="./server-sessions">會話</a>已存在，您可以跳過 <code>basic</code> 認證：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">basic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    skipWhen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { call </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> call.sessions.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></blockquote><h3 id="authenticate-route" tabindex="-1">步驟 4：保護特定資源 <a class="header-anchor" href="#authenticate-route" aria-label="Permalink to &quot;步驟 4：保護特定資源 {id=&quot;authenticate-route&quot;}&quot;">​</a></h3><p>最後一步是保護應用程式中的特定資源。您可以使用 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/authenticate.html" target="_blank" rel="noreferrer"><code>authenticate()</code></a> 函數來完成此操作。此函數接受兩個可選參數：</p><ul><li><p>用於認證巢狀路由的<a href="#provider-name">供應器名稱</a>。 以下程式碼片段使用名為 <em>auth-basic</em> 的供應器來保護 <code>/login</code> 和 <code>/orders</code> 路由：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    authenticate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-basic&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/login&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/orders&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }    </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>用於解析巢狀認證供應器的策略。 此策略由 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-auth/io.ktor.server.auth/-authentication-strategy/index.html" target="_blank" rel="noreferrer"><code>AuthenticationStrategy</code></a> 列舉值表示。</p><p>例如，客戶端應為所有使用 <code>AuthenticationStrategy.Required</code> 策略註冊的供應器提供認證資料。 在以下程式碼片段中，只有通過<a href="./server-session-auth">會話認證</a>的使用者 才能嘗試使用基本認證存取 <code>/admin</code> 路由：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    authenticate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-session&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, strategy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AuthenticationStrategy.Required) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }    </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        authenticate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-basic&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, strategy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AuthenticationStrategy.Required) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/admin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }  </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><blockquote><p>有關完整範例，請參閱 <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/auth-form-session-nested" target="_blank" rel="noreferrer">auth-form-session-nested</a>。</p></blockquote><h3 id="get-principal" tabindex="-1">步驟 5：在路由處理器內部取得主體 <a class="header-anchor" href="#get-principal" aria-label="Permalink to &quot;步驟 5：在路由處理器內部取得主體 {id=&quot;get-principal&quot;}&quot;">​</a></h3><p>認證成功後，您可以使用 <code>call.principal()</code> 函數在路由處理器內部檢索已認證的主體。此函數接受由 <a href="#configure-provider">已設定的認證供應器</a>傳回的特定主體類型。在以下範例中， <code>call.principal()</code> 用於取得 <code>UserIdPrincipal</code> 並獲取已認證使用者的名稱。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    authenticate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-basic&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, \${call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">principal</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserIdPrincipal</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&gt;()?.name}!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>如果您使用<a href="./server-session-auth">會話認證</a>，主體可能是一個儲存會話資料的資料類別。 因此，您需要將此資料類別傳遞給 <code>call.principal()</code>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">authenticate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-session&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userSession </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">principal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在<a href="#authenticate-route">巢狀認證供應器</a>的情況下， 您可以將<a href="#provider-name">供應器名稱</a>傳遞給 <code>call.principal()</code> 以取得所需供應器的主體。</p><p>在下面的範例中，將 <code>&quot;auth-session&quot;</code> 值傳遞給 <code>call.principal()</code> 以取得最上層會話供應器的主體：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">authenticate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-session&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, strategy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AuthenticationStrategy.Required) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    authenticate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-basic&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, strategy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AuthenticationStrategy.Required) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/admin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userSession </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">principal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;auth-session&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,30))])}const T=y(b,[["render",m]]);export{D as __pageData,T as default};
