import{_ as r,a as h,b as d}from"./chunks/compose_expressive_theme.animated.Dd_wIje5.js";import{_ as k,C as s,c,o as E,ag as e,G as t,j as i,w as m,a as l}from"./chunks/framework.Bksy39di.js";const w=JSON.parse('{"title":"Compose Multiplatform 1.9.0-beta03 中的新特性","description":"","frontmatter":{},"headers":[],"relativePath":"kmp/whats-new-compose-190.md","filePath":"kmp/whats-new-compose-190.md","lastUpdated":1755516278000}'),g={name:"kmp/whats-new-compose-190.md"};function u(b,a,y,f,C,v){const n=s("code-block"),p=s("list"),o=s("secondary-label");return E(),c("div",null,[a[1]||(a[1]=e('<h1 id="compose-multiplatform-1-9-0-beta03-中的新特性" tabindex="-1">Compose Multiplatform 1.9.0-beta03 中的新特性 <a class="header-anchor" href="#compose-multiplatform-1-9-0-beta03-中的新特性" aria-label="Permalink to &quot;Compose Multiplatform 1.9.0-beta03 中的新特性&quot;">​</a></h1><p>以下是本次抢先体验预览特性发布的亮点：</p><ul><li><a href="#new-material-3-expressive-theme">Material 3 表现力主题</a></li><li><a href="#customizable-shadows">可定制的阴影</a></li><li><a href="#parameters-for-the-preview-annotation">@Preview 注解的参数</a></li><li><a href="#frame-rate-configuration">iOS 上的帧率配置</a></li><li><a href="#accessibility-support">Web 目标平台上的辅助功能支持</a></li><li><a href="#new-api-for-embedding-html-content">嵌入 HTML 内容的新 API</a></li></ul><p>关于此版本的所有更改列表，请参见 <a href="https://github.com/JetBrains/compose-multiplatform/releases/tag/v1.9.0-beta01" target="_blank" rel="noreferrer">GitHub</a>。</p><h2 id="依赖项" tabindex="-1">依赖项 <a class="header-anchor" href="#依赖项" aria-label="Permalink to &quot;依赖项&quot;">​</a></h2><ul><li><p>Gradle 插件 <code>org.jetbrains.compose</code>，版本 <code>1.9.0-beta03</code>。基于 Jetpack Compose 库：</p><ul><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-runtime#1.9.0-rc01" target="_blank" rel="noreferrer">Runtime 1.9.0-rc01</a></li><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-ui#1.9.0-rc01" target="_blank" rel="noreferrer">UI 1.9.0-rc01</a></li><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-foundation#1.9.0-rc01" target="_blank" rel="noreferrer">Foundation 1.9.0-rc01</a></li><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-material#1.9.0-rc01" target="_blank" rel="noreferrer">Material 1.9.0-rc01</a></li><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-material3#1.3.2" target="_blank" rel="noreferrer">Material3 1.3.2</a></li></ul></li><li><p>Compose Material3 库 <code>org.jetbrains.compose.material3:1.9.0-beta03</code>。基于 <a href="https://developer.android.com/jetpack/androidx/releases/compose-material3#1.4.0-beta01" target="_blank" rel="noreferrer">Jetpack Material3 1.4.0-beta01</a>。</p><p>公共 Material3 库的稳定版本基于 Jetpack Compose Material3 1.3.2，但得益于 Compose Multiplatform 和 Material3 的<a href="#decoupled-material3-versioning">解耦版本控制</a>，你可以为你的项目选择更新的预发布版本。</p></li><li><p>Compose Material3 Adaptive 库 <code>org.jetbrains.compose.material3.adaptive:adaptive*:1.2.0-alpha05</code>。基于 <a href="https://developer.android.com/jetpack/androidx/releases/compose-material3-adaptive#1.2.0-alpha10" target="_blank" rel="noreferrer">Jetpack Material3 Adaptive 1.2.0-alpha10</a></p></li><li><p>Lifecycle 库 <code>org.jetbrains.androidx.lifecycle:lifecycle-*:2.9.2</code>。基于 <a href="https://developer.android.com/jetpack/androidx/releases/lifecycle#2.9.2" target="_blank" rel="noreferrer">Jetpack Lifecycle 2.9.2</a></p></li><li><p>Navigation 库 <code>org.jetbrains.androidx.navigation:navigation-*:2.9.0-beta05</code>。基于 <a href="https://developer.android.com/jetpack/androidx/releases/navigation#2.9.1" target="_blank" rel="noreferrer">Jetpack Navigation 2.9.1</a></p></li><li><p>Savedstate 库 <code>org.jetbrains.androidx.savedstate:savedstate:1.3.2</code>。基于 <a href="https://developer.android.com/jetpack/androidx/releases/savedstate#1.3.1" target="_blank" rel="noreferrer">Jetpack Savedstate 1.3.1</a></p></li><li><p>WindowManager Core 库 <code>org.jetbrains.androidx.window:window-core:1.4.0-beta01</code>。基于 <a href="https://developer.android.com/jetpack/androidx/releases/window#1.4.0" target="_blank" rel="noreferrer">Jetpack WindowManager 1.4.0</a></p></li></ul><h2 id="重大变更" tabindex="-1">重大变更 <a class="header-anchor" href="#重大变更" aria-label="Permalink to &quot;重大变更&quot;">​</a></h2><p>为与 Jetpack Material3 <a href="https://developer.android.com/jetpack/androidx/releases/compose-material3#1.4.0-beta01" target="_blank" rel="noreferrer">1.4.0-beta01 版本</a>保持一致，Compose Multiplatform 移除了所有带有 <code>ExperimentalMaterial3ExpressiveApi</code> 和 <code>ExperimentalMaterial3ComponentOverrideApi</code> 标签的公共 API。</p><p>如果你想继续使用这些实验性特性，可以显式包含先前的 Material3 alpha 版本：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.compose.material3:material3:1.9.0-alpha04&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="跨平台" tabindex="-1">跨平台 <a class="header-anchor" href="#跨平台" aria-label="Permalink to &quot;跨平台&quot;">​</a></h2><h3 id="preview-注解的参数" tabindex="-1">@Preview 注解的参数 <a class="header-anchor" href="#preview-注解的参数" aria-label="Permalink to &quot;@Preview 注解的参数&quot;">​</a></h3><p>Compose Multiplatform 中的 <code>@Preview</code> 注解现在包含额外参数，用于配置 <code>@Composable</code> 函数在设计时预览中的渲染方式：</p><ul><li><code>name</code>：预览的显示名称。</li><li><code>group</code>：预览的分组名称，可用于相关预览的逻辑组织和选择性显示。</li><li><code>widthDp</code>：最大宽度（单位 dp）。</li><li><code>heightDp</code>：最大高度（单位 dp）。</li><li><code>locale</code>：应用程序的当前区域设置。</li><li><code>showBackground</code>：一个标志，用于将默认背景色应用于预览。</li><li><code>backgroundColor</code>：一个 32 位 ARGB 整数颜色，定义预览的背景色。</li></ul><p>这些新的预览参数在 IntelliJ IDEA 和 Android Studio 中都能识别并生效。</p><h3 id="可定制的阴影" tabindex="-1">可定制的阴影 <a class="header-anchor" href="#可定制的阴影" aria-label="Permalink to &quot;可定制的阴影&quot;">​</a></h3><p>在 Compose Multiplatform 1.9.0-beta03 中，我们引入了可定制的阴影，采用了 Jetpack Compose 新的阴影原语和 API。除了先前支持的 <code>shadow</code> 修饰符，你现在可以使用新 API 创建更高级、更灵活的阴影效果。</p><p>两种新的原语可用于创建不同类型的阴影：<code>DropShadowPainter()</code> 和 <code>InnerShadowPainter()</code>。</p><p>要将这些新阴影应用于 UI 组件，请使用 <code>dropShadow</code> 或 <code>innerShadow</code> 修饰符配置阴影效果：</p>',19)),t(p,{columns:"2"},{default:m(()=>[i("li",null,[t(n,{lang:"kotlin",code:`        Box(
            Modifier.size(120.dp)
                .dropShadow(
                    RectangleShape,
                    DropShadow(12.dp)
                )
                .background(Color.White)
        )
        Box(
            Modifier.size(120.dp)
                .innerShadow(
                    RectangleShape,
                    InnerShadow(12.dp)
                )
        )`})]),a[0]||(a[0]=i("li",null,[i("img",{src:r,type:"inline",alt:"Customizable shadows",width:"200"})],-1))]),_:1}),a[2]||(a[2]=i("p",null,"你可以绘制任意形状和颜色的阴影，甚至可以使用阴影几何形状作为遮罩来创建内部渐变填充阴影：",-1)),a[3]||(a[3]=i("img",{src:h,alt:"Expressive shadows",width:"244"},null,-1)),a[4]||(a[4]=i("p",null,[l("有关详细信息，请参见 "),i("a",{href:"https://developer.android.com/reference/kotlin/androidx/compose/ui/graphics/shadow/package-summary.html",target:"_blank",rel:"noreferrer"},"阴影 API 参考"),l("。")],-1)),a[5]||(a[5]=i("h3",{id:"新的-material-3-表现力主题",tabindex:"-1"},[l("新的 Material 3 表现力主题 "),i("a",{class:"header-anchor",href:"#新的-material-3-表现力主题","aria-label":'Permalink to "新的 Material 3 表现力主题"'},"​")],-1)),t(o,{ref:"Experimental"},null,512),a[6]||(a[6]=e('<p>Compose Multiplatform 现在支持来自 Material 3 库的实验性 <a href="https://developer.android.com/reference/kotlin/androidx/compose/material3/package-summary?hl=en#MaterialExpressiveTheme(androidx.compose.material3.ColorScheme,androidx.compose.material3.MotionScheme,androidx.compose.material3.Shapes,androidx.compose.material3.Typography,kotlin.Function0)" target="_blank" rel="noreferrer"><code>MaterialExpressiveTheme</code></a>。表现力主题化允许你定制 Material Design 应用，以获得更个性化的体验。</p><p>使用表现力主题：</p><ol><li><p>包含最新版本的 Material 3：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.compose.material3:material3:1.9.0-alpha04&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></li><li><p>使用 <code>MaterialExpressiveTheme()</code> 函数，并带有 <code>@OptIn(ExperimentalMaterial3ExpressiveApi::class)</code> opt-in，通过设置 <code>colorScheme</code>、<code>motionScheme</code>、<code>shapes</code> 和 <code>typography</code> 参数来配置 UI 元素的整体主题。</p></li></ol><p>Material 组件，例如 <a href="https://kotlinlang.org/api/compose-multiplatform/material3/androidx.compose.material3/-button.html" target="_blank" rel="noreferrer"><code>Button()</code></a> 和 <a href="https://kotlinlang.org/api/compose-multiplatform/material3/androidx.compose.material3/-checkbox.html" target="_blank" rel="noreferrer"><code>Checkbox()</code></a>，随后将自动使用你提供的值。</p>',4)),a[7]||(a[7]=i("img",{src:d,alt:"Material 3 Expressive",width:"250","preview-src":"compose_expressive_theme.png"},null,-1)),a[8]||(a[8]=e(`<h3 id="androidx-compose-runtime-runtime-中的多平台目标" tabindex="-1">androidx.compose.runtime:runtime 中的多平台目标 <a class="header-anchor" href="#androidx-compose-runtime-runtime-中的多平台目标" aria-label="Permalink to &quot;androidx.compose.runtime:runtime 中的多平台目标&quot;">​</a></h3><p>为了改善 Compose Multiplatform 与 Jetpack Compose 的对齐，我们已将所有目标的支持直接添加到 <code>androidx.compose.runtime:runtime</code> 构件中。</p><p><code>org.jetbrains.compose.runtime:runtime</code> 构件保持完全兼容，现在作为别名。</p><h3 id="runcomposeuitest-与挂起-lambda" tabindex="-1"><code>runComposeUiTest()</code> 与挂起 lambda <a class="header-anchor" href="#runcomposeuitest-与挂起-lambda" aria-label="Permalink to &quot;\`runComposeUiTest()\` 与挂起 lambda&quot;">​</a></h3><p><code>runComposeUiTest()</code> 函数现在接受一个 <code>suspend</code> lambda，允许你使用 <code>awaitIdle()</code> 等挂起函数。</p><p>新 API 保证在所有支持的平台上正确执行测试，包括对 Web 环境的适当异步处理：</p><ul><li>对于 JVM 和原生目标平台，<code>runComposeUiTest()</code> 的功能类似于 <code>runBlocking()</code>，但跳过延迟。</li><li>对于 Web 目标平台 (Wasm 和 JS)，它返回一个 <code>Promise</code> 并执行测试体，同时跳过延迟。</li></ul><h2 id="ios" tabindex="-1">iOS <a class="header-anchor" href="#ios" aria-label="Permalink to &quot;iOS&quot;">​</a></h2><h3 id="帧率配置" tabindex="-1">帧率配置 <a class="header-anchor" href="#帧率配置" aria-label="Permalink to &quot;帧率配置&quot;">​</a></h3><p>Compose Multiplatform for iOS 现在支持配置渲染可组合项的首选帧率。如果动画卡顿，你可能希望提高帧率。另一方面，如果动画缓慢或静态，你可能希望以较低帧率运行它以降低功耗。</p><p>你可以按如下方式设置首选帧率类别：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Modifier.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">preferredFrameRate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(FrameRateCategory.High)</span></span></code></pre></div><p>另外，如果你需要可组合项的特定帧率，可以使用非负数以每秒帧数定义首选帧率：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Modifier.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">preferredFrameRate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="web" tabindex="-1">Web <a class="header-anchor" href="#web" aria-label="Permalink to &quot;Web&quot;">​</a></h2><h3 id="辅助功能支持" tabindex="-1">辅助功能支持 <a class="header-anchor" href="#辅助功能支持" aria-label="Permalink to &quot;辅助功能支持&quot;">​</a></h3><p>Compose Multiplatform 现在为 Web 目标平台提供初步的辅助功能支持。此版本使屏幕阅读器能够访问描述标签，并允许用户在辅助功能导航模式下导航和点击按钮。</p><p>在此版本中，以下特性尚不受支持：</p><ul><li>带滚动条和滑块的互操作和容器视图的辅助功能。</li><li>遍历索引。</li></ul><p>你可以定义组件的<a href="./compose-accessibility#semantic-properties">语义属性</a>，为辅助功能服务提供各种详细信息，例如组件的文本描述、功能类型、当前状态或唯一标识符。</p><p>例如，通过在可组合项上设置 <code>Modifier.semantics { heading() }</code>，你将通知辅助功能服务此元素作为标题，类似于文档中的章节或小节标题。屏幕阅读器随后可以使用此信息进行内容导航，允许用户直接跳转到不同标题之间。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;This is heading&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    modifier </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Modifier.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">semantics</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">heading</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>辅助功能支持现在默认启用，但你可以随时通过调整 <code>isA11YEnabled</code> 来禁用它：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ComposeViewport</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    viewportContainer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.body</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    configure </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { isA11YEnabled </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, Compose Multiplatform for web&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="嵌入-html-内容的新-api" tabindex="-1">嵌入 HTML 内容的新 API <a class="header-anchor" href="#嵌入-html-内容的新-api" aria-label="Permalink to &quot;嵌入 HTML 内容的新 API&quot;">​</a></h3><p>借助新的 <code>WebElementView()</code> 可组合函数，你可以将 HTML 元素无缝集成到你的 Web 应用程序中。</p><p>嵌入的 HTML 元素会根据 Compose 代码中定义的大小覆盖画布区域。它会拦截该区域内的输入事件，阻止这些事件被 Compose Multiplatform 接收。</p><p>以下是 <code>WebElementView()</code> 用于创建和嵌入 HTML 元素的一个示例，该元素在你的 Compose 应用程序中显示交互式地图视图：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ttOSM </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;https://www.openstreetmap.org/export/embed.html?bbox=4.890965223312379%2C52.33722052818563%2C4.893990755081177%2C52.33860862450587&amp;amp;layer=mapnik&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Composable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Box</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        modifier </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Modifier.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fillMaxWidth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fillMaxHeight</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        WebElementView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            factory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                (document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;iframe&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                        as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HTMLIFrameElement)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { src </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ttOSM }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            modifier </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Modifier.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fillMaxSize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            update </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { iframe </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> iframe.src </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> iframe.src }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>请注意，你只能将此函数与 <code>ComposeViewport</code> 入口点一起使用，因为 <code>CanvasBasedWindow</code> 已弃用。</p><h3 id="上下文菜单" tabindex="-1">上下文菜单 <a class="header-anchor" href="#上下文菜单" aria-label="Permalink to &quot;上下文菜单&quot;">​</a></h3><p>Compose Multiplatform 1.9.0-beta03 为 Web 上下文菜单带来了以下更新：</p><ul><li><p>文本上下文菜单：标准的 Compose 文本上下文菜单现在在移动和桌面模式下都完全支持。</p></li><li><p>新的可定制上下文菜单：我们采用了 Jetpack Compose 新的 API 来实现自定义 Web 上下文菜单。目前，它仅在桌面模式下可用。</p><p>要启用此新 API，请在应用程序入口点使用以下设置：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ComposeFoundationFlags.isNewContextMenuEnabled </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span></code></pre></div></li></ul><h3 id="简化导航图绑定-api" tabindex="-1">简化导航图绑定 API <a class="header-anchor" href="#简化导航图绑定-api" aria-label="Permalink to &quot;简化导航图绑定 API&quot;">​</a></h3><p>Compose Multiplatform 引入了一个新 API，用于将浏览器的导航状态绑定到 <code>NavController</code>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">suspend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NavController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bindToBrowserNavigation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>新函数消除了直接与 <code>window</code> API 交互的需要，简化了 Kotlin/Wasm 和 Kotlin/JS 源代码集。</p><p>先前使用的 <code>Window.bindToNavigation()</code> 函数已弃用，取而代之的是新的 <code>NavController.bindToBrowserNavigation()</code> 函数。</p><p>之前：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LaunchedEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Unit) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Directly interacts with the window object</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bindToNavigation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(navController)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>之后：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LaunchedEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Unit) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Implicitly accesses the window object</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    navController.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bindToBrowserNavigation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="gradle-插件" tabindex="-1">Gradle 插件 <a class="header-anchor" href="#gradle-插件" aria-label="Permalink to &quot;Gradle 插件&quot;">​</a></h2><h3 id="material3-版本解耦" tabindex="-1">Material3 版本解耦 <a class="header-anchor" href="#material3-版本解耦" aria-label="Permalink to &quot;Material3 版本解耦&quot;">​</a></h3><p>Material3 库和 Compose Multiplatform Gradle 插件的版本和稳定级别不再需要对齐。<code>compose.material3</code> DSL 别名现在引用 Jetpack Compose 之前稳定版本中的 Material3 1.8.2。</p><p>如果你想使用支持表现力设计的更新 Material3 版本，请将 <code>build.gradle.kts</code> 中的 Material 3 依赖项替换为以下内容：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.compose.material3:material3:1.9.0-alpha04&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div>`,47))])}const M=k(g,[["render",u]]);export{w as __pageData,M as default};
