import{_ as r,C as n,c as d,o as g,j as l,G as s,ag as p,a as h,w as a}from"./chunks/framework.Bksy39di.js";const C=JSON.parse('{"title":"클라이언트 플러그인","description":"","frontmatter":{},"headers":[],"relativePath":"ko/ktor/client-plugins.md","filePath":"ko/ktor/client-plugins.md","lastUpdated":1755457140000}'),c={name:"ko/ktor/client-plugins.md"};function E(u,i,y,_,F,m){const k=n("link-summary"),t=n("code-block"),e=n("TabItem"),o=n("Tabs");return g(),d("div",null,[i[1]||(i[1]=l("h1",{id:"클라이언트-플러그인",tabindex:"-1"},[h("클라이언트 플러그인 "),l("a",{class:"header-anchor",href:"#클라이언트-플러그인","aria-label":'Permalink to "클라이언트 플러그인"'},"​")],-1)),s(k,null,{default:a(()=>i[0]||(i[0]=[h(" 로깅, 직렬화, 인증 등과 같이 공통 기능을 제공하는 플러그인에 대해 알아봅니다. ")])),_:1}),i[2]||(i[2]=p('<p>많은 애플리케이션은 애플리케이션 로직 범위를 벗어나는 공통 기능을 필요로 합니다. 예를 들어, <a href="./client-logging">로깅</a>, <a href="./client-serialization">직렬화</a>, 또는 <a href="./client-auth">인증</a> 등이 있습니다. 이 모든 기능은 Ktor에서 <strong>플러그인</strong>이라고 부르는 수단을 통해 제공됩니다.</p><h2 id="plugin-dependency" tabindex="-1">플러그인 의존성 추가 <a class="header-anchor" href="#plugin-dependency" aria-label="Permalink to &quot;플러그인 의존성 추가 {id=&quot;plugin-dependency&quot;}&quot;">​</a></h2><p>플러그인은 별도의 <a href="./client-dependencies">의존성</a>을 필요로 할 수 있습니다. 예를 들어, <a href="./client-logging">로깅</a> 플러그인은 빌드 스크립트에 <code>ktor-client-logging</code> 아티팩트를 추가해야 합니다:</p>',3)),s(o,{group:"languages"},{default:a(()=>[s(e,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:a(()=>[s(t,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-client-logging:$ktor_version")'})]),_:1}),s(e,{title:"Gradle (Groovy)","group-key":"groovy"},{default:a(()=>[s(t,{lang:"Groovy",code:'            implementation "io.ktor:ktor-client-logging:$ktor_version"'})]),_:1}),s(e,{title:"Maven","group-key":"maven"},{default:a(()=>[s(t,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-client-logging-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),i[3]||(i[3]=p(`<p>필요한 플러그인에 대한 토픽에서 어떤 의존성이 필요한지 확인할 수 있습니다.</p><h2 id="install" tabindex="-1">플러그인 설치 <a class="header-anchor" href="#install" aria-label="Permalink to &quot;플러그인 설치 {id=&quot;install&quot;}&quot;">​</a></h2><p>플러그인을 설치하려면, <a href="./client-create-and-configure#configure-client">클라이언트 구성 블록</a> 내부의 <code>install</code> 함수에 플러그인을 전달해야 합니다. 예를 들어, <code>Logging</code> 플러그인을 설치하는 방법은 다음과 같습니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.engine.cio.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.plugins.logging.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Logging)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="configure_plugin" tabindex="-1">플러그인 구성 <a class="header-anchor" href="#configure_plugin" aria-label="Permalink to &quot;플러그인 구성 {id=&quot;configure_plugin&quot;}&quot;">​</a></h2><p><code>install</code> 블록 내에서 플러그인을 구성할 수 있습니다. 예를 들어, <a href="./client-logging">로깅</a> 플러그인의 경우 로거, 로깅 레벨, 그리고 로그 메시지 필터링 조건을 지정할 수 있습니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">runBlocking</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Logging) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            logger </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Logger.DEFAULT</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            level </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LogLevel.HEADERS</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { request </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                request.url.host.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">contains</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ktor.io&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            sanitizeHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { header </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> header </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HttpHeaders.Authorization }</span></span></code></pre></div><h2 id="custom" tabindex="-1">사용자 지정 플러그인 생성 <a class="header-anchor" href="#custom" aria-label="Permalink to &quot;사용자 지정 플러그인 생성 {id=&quot;custom&quot;}&quot;">​</a></h2><p>사용자 지정 플러그인을 생성하는 방법을 배우려면, <a href="./client-custom-plugins">사용자 지정 클라이언트 플러그인</a>을 참조하세요.</p>`,9))])}const v=r(c,[["render",E]]);export{C as __pageData,v as default};
