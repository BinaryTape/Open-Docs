import{_ as r,a as h,b as d}from"./chunks/compose_expressive_theme.animated.Dd_wIje5.js";import{_ as k,C as s,c,o as E,ag as e,G as t,j as i,w as m,a as l}from"./chunks/framework.Bksy39di.js";const M=JSON.parse('{"title":"Compose Multiplatform의 새로운 기능 1.9.0-beta03","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kmp/whats-new-compose-190.md","filePath":"ko/kmp/whats-new-compose-190.md","lastUpdated":1755516278000}'),g={name:"ko/kmp/whats-new-compose-190.md"};function u(b,a,y,f,v,C){const n=s("code-block"),p=s("list"),o=s("secondary-label");return E(),c("div",null,[a[1]||(a[1]=e('<h1 id="compose-multiplatform의-새로운-기능-1-9-0-beta03" tabindex="-1">Compose Multiplatform의 새로운 기능 1.9.0-beta03 <a class="header-anchor" href="#compose-multiplatform의-새로운-기능-1-9-0-beta03" aria-label="Permalink to &quot;Compose Multiplatform의 새로운 기능 1.9.0-beta03&quot;">​</a></h1><p>이번 EAP 기능 릴리스의 주요 내용은 다음과 같습니다.</p><ul><li><a href="#new-material-3-expressive-theme">Material 3 Expressive 테마</a></li><li><a href="#customizable-shadows">사용자 정의 가능한 그림자</a></li><li><a href="#parameters-for-the-preview-annotation"><code>@Preview</code> 어노테이션을 위한 파라미터</a></li><li><a href="#frame-rate-configuration">iOS에서의 프레임 속도 설정</a></li><li><a href="#accessibility-support">웹 타겟에서의 접근성 지원</a></li><li><a href="#new-api-for-embedding-html-content">HTML 콘텐츠 임베딩을 위한 새로운 API</a></li></ul><p>이번 릴리스의 전체 변경 사항 목록은 <a href="https://github.com/JetBrains/compose-multiplatform/releases/tag/v1.9.0-beta01" target="_blank" rel="noreferrer">GitHub</a>에서 확인할 수 있습니다.</p><h2 id="의존성" tabindex="-1">의존성 <a class="header-anchor" href="#의존성" aria-label="Permalink to &quot;의존성&quot;">​</a></h2><ul><li><p>Gradle 플러그인 <code>org.jetbrains.compose</code>, 버전 1.9.0-beta03. Jetpack Compose 라이브러리 기반:</p><ul><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-runtime#1.9.0-rc01" target="_blank" rel="noreferrer">Runtime 1.9.0-rc01</a></li><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-ui#1.9.0-rc01" target="_blank" rel="noreferrer">UI 1.9.0-rc01</a></li><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-foundation#1.9.0-rc01" target="_blank" rel="noreferrer">Foundation 1.9.0-rc01</a></li><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-material#1.9.0-rc01" target="_blank" rel="noreferrer">Material 1.9.0-rc01</a></li><li><a href="https://developer.android.com/jetpack/androidx/releases/compose-material3#1.3.2" target="_blank" rel="noreferrer">Material3 1.3.2</a></li></ul></li><li><p>Compose Material3 라이브러리 <code>org.jetbrains.compose.material3:1.9.0-beta03</code>. <a href="https://developer.android.com/jetpack/androidx/releases/compose-material3#1.4.0-beta01" target="_blank" rel="noreferrer">Jetpack Material3 1.4.0-beta01</a> 기반.</p><p>공통 Material3 라이브러리의 안정 버전은 Jetpack Compose Material3 1.3.2를 기반으로 하지만, Compose Multiplatform와 Material3의 <a href="#decoupled-material3-versioning">분리된 버전 관리</a> 덕분에 프로젝트에 더 새로운 프리릴리스(pre-release) 버전을 선택할 수 있습니다.</p></li><li><p>Compose Material3 Adaptive 라이브러리 <code>org.jetbrains.compose.material3.adaptive:adaptive*:1.2.0-alpha05</code>. <a href="https://developer.android.com/jetpack/androidx/releases/compose-material3-adaptive#1.2.0-alpha10" target="_blank" rel="noreferrer">Jetpack Material3 Adaptive 1.2.0-alpha10</a> 기반</p></li><li><p>Lifecycle 라이브러리 <code>org.jetbrains.androidx.lifecycle:lifecycle-*:2.9.2</code>. <a href="https://developer.android.com/jetpack/androidx/releases/lifecycle#2.9.2" target="_blank" rel="noreferrer">Jetpack Lifecycle 2.9.2</a> 기반</p></li><li><p>Navigation 라이브러리 <code>org.jetbrains.androidx.navigation:navigation-*:2.9.0-beta05</code>. <a href="https://developer.android.com/jetpack/androidx/releases/navigation#2.9.1" target="_blank" rel="noreferrer">Jetpack Navigation 2.9.1</a> 기반</p></li><li><p>Savedstate 라이브러리 <code>org.jetbrains.androidx.savedstate:savedstate:1.3.2</code>. <a href="https://developer.android.com/jetpack/androidx/releases/savedstate#1.3.1" target="_blank" rel="noreferrer">Jetpack Savedstate 1.3.1</a> 기반</p></li><li><p>WindowManager Core 라이브러리 <code>org.jetbrains.androidx.window:window-core:1.4.0-beta01</code>. <a href="https://developer.android.com/jetpack/androidx/releases/window#1.4.0" target="_blank" rel="noreferrer">Jetpack WindowManager 1.4.0</a> 기반</p></li></ul><h2 id="호환성-변경" tabindex="-1">호환성 변경 <a class="header-anchor" href="#호환성-변경" aria-label="Permalink to &quot;호환성 변경&quot;">​</a></h2><p>Jetpack Material3 <a href="https://developer.android.com/jetpack/androidx/releases/compose-material3#1.4.0-beta01" target="_blank" rel="noreferrer">1.4.0-beta01 릴리스</a>에 맞춰, Compose Multiplatform은 <code>ExperimentalMaterial3ExpressiveApi</code> 및 <code>ExperimentalMaterial3ComponentOverrideApi</code> 태그가 지정된 모든 공개 API를 제거했습니다.</p><p>이러한 실험적 기능을 계속 사용하려면, 이전 Material3 알파 버전을 명시적으로 포함할 수 있습니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.compose.material3:material3:1.9.0-alpha04&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="모든-플랫폼에서" tabindex="-1">모든 플랫폼에서 <a class="header-anchor" href="#모든-플랫폼에서" aria-label="Permalink to &quot;모든 플랫폼에서&quot;">​</a></h2><h3 id="preview-어노테이션을-위한-파라미터" tabindex="-1"><code>@Preview</code> 어노테이션을 위한 파라미터 <a class="header-anchor" href="#preview-어노테이션을-위한-파라미터" aria-label="Permalink to &quot;`@Preview` 어노테이션을 위한 파라미터&quot;">​</a></h3><p>Compose Multiplatform의 <code>@Preview</code> 어노테이션은 이제 <code>@Composable</code> 함수가 디자인 타임 미리보기에서 렌더링되는 방식을 구성하기 위한 추가 파라미터를 포함합니다.</p><ul><li><code>name</code>: 미리보기의 표시 이름입니다.</li><li><code>group</code>: 미리보기의 그룹 이름으로, 관련 미리보기의 논리적 구성 및 선택적 표시를 가능하게 합니다.</li><li><code>widthDp</code>: 최대 너비(dp 단위)입니다.</li><li><code>heightDp</code>: 최대 높이(dp 단위)입니다.</li><li><code>locale</code>: 애플리케이션의 현재 로케일입니다.</li><li><code>showBackground</code>: 기본 배경색을 미리보기에 적용하는 플래그입니다.</li><li><code>backgroundColor</code>: 미리보기의 배경색을 정의하는 32비트 ARGB 색상 정수입니다.</li></ul><p>이 새로운 미리보기 파라미터는 IntelliJ IDEA와 Android Studio 모두에서 인식되고 작동합니다.</p><h3 id="사용자-정의-가능한-그림자" tabindex="-1">사용자 정의 가능한 그림자 <a class="header-anchor" href="#사용자-정의-가능한-그림자" aria-label="Permalink to &quot;사용자 정의 가능한 그림자&quot;">​</a></h3><p>Compose Multiplatform 1.9.0-beta03에서는 Jetpack Compose의 새로운 그림자 프리미티브와 API를 도입하여 사용자 정의 가능한 그림자를 제공합니다. 이전에 지원되던 <code>shadow</code> 한정자(modifier) 외에도, 이제 새로운 API를 사용하여 더 고급스럽고 유연한 그림자 효과를 만들 수 있습니다.</p><p>두 가지 새로운 프리미티브를 사용하여 다른 유형의 그림자를 만들 수 있습니다: <code>DropShadowPainter()</code> 및 <code>InnerShadowPainter()</code>.</p><p>이 새로운 그림자를 UI 컴포넌트에 적용하려면, <code>dropShadow</code> 또는 <code>innerShadow</code> 한정자로 그림자 효과를 구성합니다.</p>',19)),t(p,{columns:"2"},{default:m(()=>[i("li",null,[t(n,{lang:"kotlin",code:`        Box(
            Modifier.size(120.dp)
                .dropShadow(
                    RectangleShape,
                    DropShadow(12.dp)
                )
                .background(Color.White)
        )
        Box(
            Modifier.size(120.dp)
                .innerShadow(
                    RectangleShape,
                    InnerShadow(12.dp)
                )
        )`})]),a[0]||(a[0]=i("li",null,[i("img",{src:r,type:"inline",alt:"Customizable shadows",width:"200"})],-1))]),_:1}),a[2]||(a[2]=i("p",null,"어떤 모양과 색상의 그림자도 그릴 수 있으며, 그림자 지오메트리를 마스크로 사용하여 내부 그라디언트 채워진 그림자를 생성할 수도 있습니다.",-1)),a[3]||(a[3]=i("img",{src:h,alt:"Expressive shadows",width:"244"},null,-1)),a[4]||(a[4]=i("p",null,[l("자세한 내용은 "),i("a",{href:"https://developer.android.com/reference/kotlin/androidx/compose/ui/graphics/shadow/package-summary.html",target:"_blank",rel:"noreferrer"},"그림자 API 참조"),l("를 참조하십시오.")],-1)),a[5]||(a[5]=i("h3",{id:"새로운-material-3-expressive-테마",tabindex:"-1"},[l("새로운 Material 3 Expressive 테마 "),i("a",{class:"header-anchor",href:"#새로운-material-3-expressive-테마","aria-label":'Permalink to "새로운 Material 3 Expressive 테마"'},"​")],-1)),t(o,{ref:"Experimental"},null,512),a[6]||(a[6]=e('<p>Compose Multiplatform은 이제 Material 3 라이브러리의 실험적 <a href="https://developer.android.com/reference/kotlin/androidx/compose/material3/package-summary?hl=en#MaterialExpressiveTheme(androidx.compose.material3.ColorScheme,androidx.compose.material3.MotionScheme,androidx.compose.material3.Shapes,androidx.compose.material3.Typography,kotlin.Function0)" target="_blank" rel="noreferrer"><code>MaterialExpressiveTheme</code></a>를 지원합니다. 표현형 테마를 사용하면 Material Design 앱을 사용자 정의하여 더욱 개인화된 경험을 제공할 수 있습니다.</p><p>Expressive 테마를 사용하려면:</p><ol><li><p>Material 3의 최신 버전을 포함합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.compose.material3:material3:1.9.0-alpha04&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></li><li><p><code>@OptIn(ExperimentalMaterial3ExpressiveApi::class)</code> 옵트인(opt-in)과 함께 <code>MaterialExpressiveTheme()</code> 함수를 사용하여 <code>colorScheme</code>, <code>motionScheme</code>, <code>shapes</code>, <code>typography</code> 파라미터를 설정하여 UI 요소의 전반적인 테마를 구성합니다.</p></li></ol><p>그런 다음 <a href="https://kotlinlang.org/api/compose-multiplatform/material3/androidx.compose.material3/-button.html" target="_blank" rel="noreferrer"><code>Button()</code></a> 및 <a href="https://kotlinlang.org/api/compose-multiplatform/material3/androidx.compose.material3/-checkbox.html" target="_blank" rel="noreferrer"><code>Checkbox()</code></a>와 같은 Material 컴포넌트가 제공한 값을 자동으로 사용합니다.</p>',4)),a[7]||(a[7]=i("img",{src:d,alt:"Material 3 Expressive",width:"250","preview-src":"compose_expressive_theme.png"},null,-1)),a[8]||(a[8]=e(`<h3 id="androidx-compose-runtime-runtime의-멀티플랫폼-타겟" tabindex="-1"><code>androidx.compose.runtime:runtime</code>의 멀티플랫폼 타겟 <a class="header-anchor" href="#androidx-compose-runtime-runtime의-멀티플랫폼-타겟" aria-label="Permalink to &quot;\`androidx.compose.runtime:runtime\`의 멀티플랫폼 타겟&quot;">​</a></h3><p>Compose Multiplatform와 Jetpack Compose의 정렬을 개선하기 위해, 모든 타겟에 대한 지원을 <code>androidx.compose.runtime:runtime</code> 아티팩트에 직접 추가했습니다.</p><p><code>org.jetbrains.compose.runtime:runtime</code> 아티팩트는 완벽하게 호환되며 이제 별칭으로 사용됩니다.</p><h3 id="suspend-람다를-사용하는-runcomposeuitest" tabindex="-1"><code>suspend</code> 람다를 사용하는 <code>runComposeUiTest()</code> <a class="header-anchor" href="#suspend-람다를-사용하는-runcomposeuitest" aria-label="Permalink to &quot;\`suspend\` 람다를 사용하는 \`runComposeUiTest()\`&quot;">​</a></h3><p><code>runComposeUiTest()</code> 함수는 이제 <code>suspend</code> 람다를 허용하여 <code>awaitIdle()</code>과 같은 <code>suspend</code> 함수를 사용할 수 있도록 합니다.</p><p>새로운 API는 웹 환경을 위한 적절한 비동기 처리를 포함하여 모든 지원 플랫폼에서 올바른 테스트 실행을 보장합니다.</p><ul><li>JVM 및 네이티브 타겟의 경우, <code>runComposeUiTest()</code>는 <code>runBlocking()</code>과 유사하게 작동하지만 지연을 건너뜁니다.</li><li>웹 타겟(Wasm 및 JS)의 경우, <code>Promise</code>를 반환하고 지연을 건너뛰고 테스트 본문을 실행합니다.</li></ul><h2 id="ios" tabindex="-1">iOS <a class="header-anchor" href="#ios" aria-label="Permalink to &quot;iOS&quot;">​</a></h2><h3 id="프레임-속도-설정" tabindex="-1">프레임 속도 설정 <a class="header-anchor" href="#프레임-속도-설정" aria-label="Permalink to &quot;프레임 속도 설정&quot;">​</a></h3><p>iOS용 Compose Multiplatform은 이제 컴포저블 렌더링을 위한 선호 프레임 속도 설정을 지원합니다. 애니메이션이 끊긴다면 프레임 속도를 높이고 싶을 수 있습니다. 반면에 애니메이션이 느리거나 정적이라면 전력 소비를 줄이기 위해 낮은 프레임 속도로 실행하는 것을 선호할 수 있습니다.</p><p>선호 프레임 속도 카테고리는 다음과 같이 설정할 수 있습니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Modifier.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">preferredFrameRate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(FrameRateCategory.High)</span></span></code></pre></div><p>또는 컴포저블에 대한 특정 프레임 속도가 필요한 경우, 음이 아닌 숫자를 사용하여 초당 프레임(fps) 단위로 선호 프레임 속도를 정의할 수 있습니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Modifier.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">preferredFrameRate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">30f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="웹" tabindex="-1">웹 <a class="header-anchor" href="#웹" aria-label="Permalink to &quot;웹&quot;">​</a></h2><h3 id="접근성-지원" tabindex="-1">접근성 지원 <a class="header-anchor" href="#접근성-지원" aria-label="Permalink to &quot;접근성 지원&quot;">​</a></h3><p>Compose Multiplatform은 이제 웹 타겟을 위한 초기 접근성 지원을 제공합니다. 이 버전은 스크린 리더가 설명 레이블에 접근할 수 있도록 하며, 사용자가 접근 가능한 내비게이션 모드에서 버튼을 탐색하고 클릭할 수 있도록 합니다.</p><p>이 버전에서는 다음 기능이 아직 지원되지 않습니다.</p><ul><li>스크롤 및 슬라이더가 있는 상호 운용성 및 컨테이너 뷰를 위한 접근성.</li><li>순회 인덱스.</li></ul><p>컴포넌트의 <a href="./compose-accessibility#semantic-properties">시맨틱 속성</a>을 정의하여 컴포넌트의 텍스트 설명, 기능 유형, 현재 상태 또는 고유 식별자와 같은 다양한 세부 정보를 접근성 서비스에 제공할 수 있습니다.</p><p>예를 들어, 컴포저블에 <code>Modifier.semantics { heading() }</code>을 설정하면, 이 요소가 문서의 챕터나 하위 섹션 제목처럼 제목 역할을 한다고 접근성 서비스에 알립니다. 그러면 스크린 리더는 이 정보를 콘텐츠 내비게이션에 사용하여 사용자가 제목 사이를 직접 이동할 수 있도록 합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;This is heading&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    modifier </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Modifier.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">semantics</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">heading</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>접근성 지원은 이제 기본적으로 활성화되어 있지만, <code>isA11YEnabled</code>를 조정하여 언제든지 비활성화할 수 있습니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ComposeViewport</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    viewportContainer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.body</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    configure </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { isA11YEnabled </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, Compose Multiplatform for web&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="html-콘텐츠-임베딩을-위한-새로운-api" tabindex="-1">HTML 콘텐츠 임베딩을 위한 새로운 API <a class="header-anchor" href="#html-콘텐츠-임베딩을-위한-새로운-api" aria-label="Permalink to &quot;HTML 콘텐츠 임베딩을 위한 새로운 API&quot;">​</a></h3><p>새로운 <code>WebElementView()</code> 컴포저블 함수를 사용하면 HTML 요소를 웹 애플리케이션에 원활하게 통합할 수 있습니다.</p><p>임베딩된 HTML 요소는 Compose 코드에서 정의된 크기에 따라 캔버스 영역을 오버레이합니다. 이는 해당 영역 내에서 입력 이벤트를 가로채어, Compose Multiplatform에서 해당 이벤트를 수신하지 못하게 합니다.</p><p>다음은 <code>WebElementView()</code>가 HTML 요소를 생성하고 임베딩하여 Compose 애플리케이션 내에 대화형 지도 뷰를 표시하는 예시입니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ttOSM </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;https://www.openstreetmap.org/export/embed.html?bbox=4.890965223312379%2C52.33722052818563%2C4.893990755081177%2C52.33860862450587&amp;amp;layer=mapnik&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Composable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Box</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        modifier </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Modifier.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fillMaxWidth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fillMaxHeight</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        WebElementView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            factory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                (document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;iframe&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                        as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HTMLIFrameElement)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { src </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ttOSM }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            modifier </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Modifier.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fillMaxSize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            update </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { iframe </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> iframe.src </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> iframe.src }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>이 함수는 <code>ComposeViewport</code> 진입점에서만 사용할 수 있으며, <code>CanvasBasedWindow</code>는 더 이상 사용되지 않습니다.</p><h3 id="컨텍스트-메뉴" tabindex="-1">컨텍스트 메뉴 <a class="header-anchor" href="#컨텍스트-메뉴" aria-label="Permalink to &quot;컨텍스트 메뉴&quot;">​</a></h3><p>Compose Multiplatform 1.9.0-beta03는 웹 컨텍스트 메뉴에 대한 다음 업데이트를 제공합니다.</p><ul><li><p>텍스트 컨텍스트 메뉴: 표준 Compose 텍스트 컨텍스트 메뉴는 이제 모바일 및 데스크톱 모드 모두에서 완전히 지원됩니다.</p></li><li><p>새로운 사용자 정의 가능한 컨텍스트 메뉴: 사용자 정의 웹 컨텍스트 메뉴를 위한 Jetpack Compose의 새로운 API를 채택했습니다. 현재는 데스크톱 모드에서만 사용할 수 있습니다.</p><p>이 새로운 API를 활성화하려면 애플리케이션 진입점에서 다음 설정을 사용하십시오.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ComposeFoundationFlags.isNewContextMenuEnabled </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span></code></pre></div></li></ul><h3 id="내비게이션-그래프-바인딩을-위한-간소화된-api" tabindex="-1">내비게이션 그래프 바인딩을 위한 간소화된 API <a class="header-anchor" href="#내비게이션-그래프-바인딩을-위한-간소화된-api" aria-label="Permalink to &quot;내비게이션 그래프 바인딩을 위한 간소화된 API&quot;">​</a></h3><p>Compose Multiplatform은 브라우저의 내비게이션 상태를 <code>NavController</code>에 바인딩하기 위한 새로운 API를 도입했습니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">suspend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NavController</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bindToBrowserNavigation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>새로운 함수는 <code>window</code> API와 직접 상호 작용할 필요성을 없애주어 Kotlin/Wasm 및 Kotlin/JS 소스 세트 모두를 간소화합니다.</p><p>이전에 사용되던 <code>Window.bindToNavigation()</code> 함수는 새로운 <code>NavController.bindToBrowserNavigation()</code> 함수를 위해 더 이상 사용되지 않습니다.</p><p>이전:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LaunchedEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Unit) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Directly interacts with the window object</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    window.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bindToNavigation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(navController)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>이후:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LaunchedEffect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Unit) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Implicitly accesses the window object</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    navController.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bindToBrowserNavigation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="gradle-플러그인" tabindex="-1">Gradle 플러그인 <a class="header-anchor" href="#gradle-플러그인" aria-label="Permalink to &quot;Gradle 플러그인&quot;">​</a></h2><h3 id="분리된-material3-버전-관리" tabindex="-1">분리된 Material3 버전 관리 <a class="header-anchor" href="#분리된-material3-버전-관리" aria-label="Permalink to &quot;분리된 Material3 버전 관리&quot;">​</a></h3><p>Material3 라이브러리 및 Compose Multiplatform Gradle 플러그인의 버전과 안정성 수준이 더 이상 일치할 필요가 없습니다. <code>compose.material3</code> DSL 별칭은 이제 Jetpack Compose의 이전 안정 릴리스에서 제공되는 Material3 1.8.2를 참조합니다.</p><p>Expressive 디자인 지원이 포함된 최신 Material3 버전을 사용하려면 <code>build.gradle.kts</code>의 Material 3 의존성을 다음으로 대체하십시오.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.compose.material3:material3:1.9.0-alpha04&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div>`,47))])}const w=k(g,[["render",u]]);export{M as __pageData,w as default};
