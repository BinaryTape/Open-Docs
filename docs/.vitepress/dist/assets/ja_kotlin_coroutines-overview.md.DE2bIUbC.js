import{_ as e}from"./chunks/get-started-coroutines.DKuC7weC.js";import{_ as t,c as r,o as a,ag as n}from"./chunks/framework.Bksy39di.js";const f=JSON.parse('{"title":"コルーチン","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/coroutines-overview.md","filePath":"ja/kotlin/coroutines-overview.md","lastUpdated":1754307826000}'),i={name:"ja/kotlin/coroutines-overview.md"};function l(c,o,s,h,u,d){return a(),r("div",null,o[0]||(o[0]=[n('<h1 id="コルーチン" tabindex="-1">コルーチン <a class="header-anchor" href="#コルーチン" aria-label="Permalink to &quot;コルーチン&quot;">​</a></h1><p>アプリケーションは、ユーザー入力への応答、データの読み込み、画面の更新など、複数のタスクを同時に実行する必要があることがよくあります。 これをサポートするために、アプリケーションは並行処理に依存します。これにより、操作は互いにブロックすることなく独立して実行できます。</p><p>タスクを並行して実行する最も一般的な方法はスレッドを使用することです。スレッドは、オペレーティングシステムによって管理される独立した実行パスです。 しかし、スレッドは比較的重く、多数作成するとパフォーマンス上の問題につながる可能性があります。</p><p>効率的な並行処理をサポートするために、Kotlinは_コルーチン_を中心に構築された非同期プログラミングを使用しています。コルーチンを使用すると、サスペンド関数を使って非同期コードを自然なシーケンシャルスタイルで記述できます。 コルーチンは、スレッドに代わる軽量な手段です。 これらはシステムリソースをブロックすることなくサスペンドでき、リソースに優しいため、細粒度の並行処理に適しています。</p><p>ほとんどのコルーチン機能は、<a href="https://github.com/Kotlin/kotlinx.coroutines" target="_blank" rel="noreferrer"><code>kotlinx.coroutines</code></a>ライブラリによって提供されています。 このライブラリには、コルーチンの起動、並行処理の管理、非同期ストリームの操作などを行うためのツールが含まれています。</p><p>Kotlinのコルーチンを初めて使用する場合は、より複雑なトピックに進む前に、<a href="/ja/kotlin/coroutines-basics">コルーチンの基本</a>ガイドから始めてください。 このガイドでは、サスペンド関数、コルーチンビルダー、構造化された並行処理の主要な概念を簡単な例を通して紹介します。</p><p><a href="/ja/kotlin/coroutines-basics"><img src="'+e+'" width="700" alt="Get started with coroutines" style=""></a></p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>コルーチンが実際にどのように使用されているかについては、<a href="https://github.com/JetBrains/kotlinconf-app" target="_blank" rel="noreferrer">KotlinConf アプリ</a>のサンプルプロジェクトを確認してください。</p></div><h2 id="コルーチンの概念" tabindex="-1">コルーチンの概念 <a class="header-anchor" href="#コルーチンの概念" aria-label="Permalink to &quot;コルーチンの概念&quot;">​</a></h2><p><code>kotlinx.coroutines</code>ライブラリは、タスクを並行して実行し、コルーチン実行を構造化し、共有状態を管理するためのコアとなる構成要素を提供します。</p><h3 id="サスペンド関数とコルーチンビルダー" tabindex="-1">サスペンド関数とコルーチンビルダー <a class="header-anchor" href="#サスペンド関数とコルーチンビルダー" aria-label="Permalink to &quot;サスペンド関数とコルーチンビルダー&quot;">​</a></h3><p>Kotlinのコルーチンはサスペンド関数に基づいて構築されており、これによりコードはスレッドをブロックすることなく一時停止および再開できます。 <code>suspend</code>キーワードは、長時間実行される処理を非同期的に実行できる関数をマークします。</p><p>新しいコルーチンを起動するには、<a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/launch.html" target="_blank" rel="noreferrer"><code>.launch()</code></a>や<a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/async.html" target="_blank" rel="noreferrer"><code>.async()</code></a>のようなコルーチンビルダーを使用します。 これらのビルダーは、<a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-scope/" target="_blank" rel="noreferrer"><code>CoroutineScope</code></a>の拡張関数であり、 コルーチンのライフサイクルを定義し、コルーチンコンテキストを提供します。</p><p>これらのビルダーの詳細については、<a href="/ja/kotlin/coroutines-basics">コルーチンの基本</a>と<a href="/ja/kotlin/coroutines-and-channels">サスペンド関数の組み合わせ</a>を参照してください。</p><h3 id="コルーチンコンテキストと動作" tabindex="-1">コルーチンコンテキストと動作 <a class="header-anchor" href="#コルーチンコンテキストと動作" aria-label="Permalink to &quot;コルーチンコンテキストと動作&quot;">​</a></h3><p><code>CoroutineScope</code>からコルーチンを起動すると、その実行を制御するコンテキストが作成されます。 <code>.launch()</code>や<code>.async()</code>などのビルダー関数は、コルーチンがどのように動作するかを定義する一連の要素を自動的に作成します。</p><ul><li><a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-job/" target="_blank" rel="noreferrer"><code>Job</code></a>インターフェースは、コルーチンのライフサイクルを追跡し、構造化された並行処理を可能にします。</li><li><a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-dispatcher/" target="_blank" rel="noreferrer"><code>CoroutineDispatcher</code></a>は、コルーチンがどこで実行されるかを制御します。例えば、バックグラウンドスレッドやUIアプリケーションのメインスレッドなどです。</li><li><a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-coroutine-exception-handler/" target="_blank" rel="noreferrer"><code>CoroutineExceptionHandler</code></a>は、キャッチされない例外を処理します。</li></ul><p>これらは、その他の可能な要素とともに、<a href="/ja/kotlin/coroutine-context-and-dispatchers"><em>コルーチンコンテキスト</em></a>を構成します。これはデフォルトでコルーチンの親から継承されます。 このコンテキストは、構造化された並行処理を可能にする階層を形成します。これにより、関連するコルーチンをまとめて<a href="/ja/kotlin/cancellation-and-timeouts">キャンセル</a>したり、グループとして<a href="/ja/kotlin/exception-handling">例外を処理</a>したりできます。</p><h3 id="非同期フローと共有可変状態" tabindex="-1">非同期フローと共有可変状態 <a class="header-anchor" href="#非同期フローと共有可変状態" aria-label="Permalink to &quot;非同期フローと共有可変状態&quot;">​</a></h3><p>Kotlinは、コルーチンが通信するためのいくつかの方法を提供します。 コルーチン間で値を共有する方法に応じて、次のいずれかのオプションを使用します。</p><ul><li><a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/-flow/" target="_blank" rel="noreferrer"><code>Flow</code></a>は、コルーチンがアクティブに値を収集した場合にのみ値を生成します。</li><li><a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.channels/-channel/" target="_blank" rel="noreferrer"><code>Channel</code></a>は、複数のコルーチンが値を送受信できるようにし、各値は厳密に1つのコルーチンに配信されます。</li><li><a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/-shared-flow/" target="_blank" rel="noreferrer"><code>SharedFlow</code></a>は、すべてのアクティブな収集中のコルーチンとすべての値を継続的に共有します。</li></ul><p>複数のコルーチンが同じデータにアクセスまたは更新する必要がある場合、それらは_可変状態を共有_します。 連携がなければ、予測不可能な方法で操作が互いに干渉する競合状態につながる可能性があります。 共有可変状態を安全に管理するには、<a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.flow/-state-flow/#" target="_blank" rel="noreferrer"><code>StateFlow</code></a>を使用して共有データをラップします。 その後、1つのコルーチンから更新し、他のコルーチンからその最新の値を収集できます。</p><p>詳細については、<a href="/ja/kotlin/flow">非同期フロー</a>、<a href="/ja/kotlin/channels">チャネル</a>、および<a href="/ja/kotlin/coroutines-and-channels">コルーチンとチャネルのチュートリアル</a>を参照してください。</p><h2 id="次のステップ" tabindex="-1">次のステップ <a class="header-anchor" href="#次のステップ" aria-label="Permalink to &quot;次のステップ&quot;">​</a></h2><ul><li><a href="/ja/kotlin/coroutines-basics">コルーチンの基本ガイド</a>で、コルーチン、サスペンド関数、およびビルダーの基本を学びます。</li><li><a href="/ja/kotlin/coroutine-context-and-dispatchers">サスペンド関数の組み合わせ</a>で、サスペンド関数を組み合わせてコルーチンパイプラインを構築する方法を探求します。</li><li>IntelliJ IDEAの組み込みツールを使用して<a href="/ja/kotlin/debug-coroutines-with-idea">コルーチンをデバッグする</a>方法を学びます。</li><li>Flowに特化したデバッグについては、<a href="/ja/kotlin/debug-flow-with-idea">IntelliJ IDEA を使用して Kotlin Flow をデバッグする</a>チュートリアルを参照してください。</li><li>コルーチンベースのUI開発については、<a href="https://github.com/Kotlin/kotlinx.coroutines/blob/master/ui/coroutines-guide-ui.md" target="_blank" rel="noreferrer">コルーチンを使用したUIプログラミングガイド</a>を読んでください。</li><li><a href="https://developer.android.com/kotlin/coroutines/coroutines-best-practices" target="_blank" rel="noreferrer">Androidでコルーチンを使用するためのベストプラクティス</a>を確認してください。</li><li><a href="https://kotlinlang.org/api/kotlinx.coroutines/" target="_blank" rel="noreferrer"><code>kotlinx.coroutines</code> APIリファレンス</a>を確認してください。</li></ul>',25)]))}const x=t(i,[["render",l]]);export{f as __pageData,x as default};
