import{_ as d,a as E,b as g}from"./chunks/plugin-pipeline-routing.fgYqhUxB.js";import{_ as c,C as a,c as y,o as u,j as e,G as s,ag as p,a as h,w as n}from"./chunks/framework.Bksy39di.js";const A=JSON.parse('{"title":"서버 플러그인","description":"","frontmatter":{},"headers":[],"relativePath":"ko/ktor/server-plugins.md","filePath":"ko/ktor/server-plugins.md","lastUpdated":1755457140000}'),F={name:"ko/ktor/server-plugins.md"};function C(m,i,_,v,b,B){const k=a("show-structure"),r=a("link-summary"),t=a("code-block"),l=a("TabItem"),o=a("Tabs");return u(),y("div",null,[i[1]||(i[1]=e("h1",{id:"서버-플러그인",tabindex:"-1"},[h("서버 플러그인 "),e("a",{class:"header-anchor",href:"#서버-플러그인","aria-label":'Permalink to "서버 플러그인"'},"​")],-1)),s(k,{for:"chapter",depth:"2"}),s(r,null,{default:n(()=>i[0]||(i[0]=[h(" 플러그인은 직렬화, 콘텐츠 인코딩, 압축 등과 같은 공통 기능을 제공합니다. ")])),_:1}),i[2]||(i[2]=p('<p>Ktor의 일반적인 요청/응답 파이프라인은 다음과 같습니다.</p><p><img src="'+d+'" alt="Request Response Pipeline" width="600"></p><p>요청으로 시작하여 특정 핸들러로 라우팅되고, 애플리케이션 로직에 의해 처리된 다음, 최종적으로 응답됩니다.</p><h2 id="add_functionality" tabindex="-1">플러그인으로 기능 추가 <a class="header-anchor" href="#add_functionality" aria-label="Permalink to &quot;플러그인으로 기능 추가 {id=&quot;add_functionality&quot;}&quot;">​</a></h2><p>많은 애플리케이션은 애플리케이션 로직 범위 외의 공통 기능을 필요로 합니다. 이는 직렬화 및 콘텐츠 인코딩, 압축, 헤더, 쿠키 지원 등일 수 있습니다. 이 모든 것은 Ktor에서 우리가 <strong>플러그인</strong>이라고 부르는 수단을 통해 제공됩니다.</p><p>이전 파이프라인 다이어그램을 보면 플러그인은 요청/응답과 애플리케이션 로직 사이에 위치합니다.</p><p><img src="'+E+'" alt="Plugin pipeline" width="600"></p><p>요청이 들어오면:</p><ul><li>라우팅 메커니즘을 통해 올바른 핸들러로 라우팅됩니다.</li><li>핸들러에 전달되기 전에 하나 이상의 플러그인을 거칩니다.</li><li>핸들러(애플리케이션 로직)가 요청을 처리합니다.</li><li>응답이 클라이언트에 전송되기 전에 하나 이상의 플러그인을 거칩니다.</li></ul><h2 id="routing" tabindex="-1">라우팅은 플러그인입니다 <a class="header-anchor" href="#routing" aria-label="Permalink to &quot;라우팅은 플러그인입니다 {id=&quot;routing&quot;}&quot;">​</a></h2><p>플러그인은 최대한의 유연성을 제공하도록 설계되었으며, 요청/응답 파이프라인의 모든 세그먼트에 존재할 수 있습니다. 사실, 지금까지 <code>routing</code>이라고 불렀던 것은 플러그인에 지나지 않습니다.</p><p><img src="'+g+'" alt="Routing as a Plugin" width="600"></p><h2 id="dependency" tabindex="-1">플러그인 의존성 추가 <a class="header-anchor" href="#dependency" aria-label="Permalink to &quot;플러그인 의존성 추가 {id=&quot;dependency&quot;}&quot;">​</a></h2><p>대부분의 플러그인은 특정 의존성을 필요로 합니다. 예를 들어, <code>CORS</code> 플러그인은 빌드 스크립트에 <code>ktor-server-cors</code> 아티팩트를 추가해야 합니다:</p>',14)),s(o,{group:"languages"},{default:n(()=>[s(l,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[s(t,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-server-cors:$ktor_version")'})]),_:1}),s(l,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[s(t,{lang:"Groovy",code:'            implementation "io.ktor:ktor-server-cors:$ktor_version"'})]),_:1}),s(l,{title:"Maven","group-key":"maven"},{default:n(()=>[s(t,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-server-cors-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),i[3]||(i[3]=p(`<h2 id="install" tabindex="-1">플러그인 설치 <a class="header-anchor" href="#install" aria-label="Permalink to &quot;플러그인 설치 {id=&quot;install&quot;}&quot;">​</a></h2><p>플러그인은 일반적으로 서버 초기화 단계에서 <code>Plugin</code>을 매개변수로 받는 <code>install</code> 함수를 사용하여 구성됩니다. <a href="./server-create-and-configure">서버를 생성</a>한 방식에 따라 <code>embeddedServer</code> 호출 내에서 플러그인을 설치할 수 있습니다...</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.application.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.plugins.cors.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.plugins.compression.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    embeddedServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Netty, port </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8080</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CORS)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Compression)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(wait </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>... 또는 지정된 <a href="./server-modules">모듈</a>에서:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.application.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.plugins.cors.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.plugins.compression.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CORS)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Compression)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>요청과 응답을 가로채는 것 외에도, 플러그인은 이 단계에서 구성되는 선택적 구성 섹션을 가질 수 있습니다.</p><p>예를 들어, <a href="./server-sessions#cookie">쿠키</a>를 설치할 때 쿠키를 저장할 위치 또는 쿠키 이름과 같은 특정 매개변수를 설정할 수 있습니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Sessions) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    cookie</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyCookie</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MY_COOKIE&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="install-route" tabindex="-1">특정 라우트에 플러그인 설치 <a class="header-anchor" href="#install-route" aria-label="Permalink to &quot;특정 라우트에 플러그인 설치 {id=&quot;install-route&quot;}&quot;">​</a></h3><p>Ktor에서는 플러그인을 전역적으로 설치할 수 있을 뿐만 아니라 특정 <a href="./server-routing">라우트</a>에도 설치할 수 있습니다. 이는 다른 애플리케이션 리소스에 대해 다른 플러그인 구성이 필요한 경우 유용할 수 있습니다. 예를 들어, 아래 <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/caching-headers-routes" target="_blank" rel="noreferrer">예시</a>는 <code>/index</code> 라우트에 지정된 <a href="./server-caching-headers">캐싱 헤더</a>를 추가하는 방법을 보여줍니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">route</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CachingHeaders) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { call, content </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CachingOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CacheControl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MaxAge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(maxAgeSeconds </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1800</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Index page&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>동일한 플러그인의 여러 설치에 다음 규칙이 적용됩니다:</p><ul><li>특정 라우트에 설치된 플러그인의 구성은 해당 <a href="#install">전역 구성</a>을 재정의합니다.</li><li>라우팅은 동일한 라우트에 대한 설치를 병합하며, 마지막 설치가 우선합니다. 예를 들어, 이러한 애플리케이션의 경우...</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    route</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CachingHeaders) { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* First configuration */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    route</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CachingHeaders) { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* Second configuration */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;b&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>&quot;}</p><p>... <code>/index/a</code> 및 <code>/index/b</code>에 대한 두 호출 모두 두 번째 플러그인 설치에서만 처리됩니다.</p><h2 id="default_available_custom" tabindex="-1">기본, 제공 및 사용자 지정 플러그인 <a class="header-anchor" href="#default_available_custom" aria-label="Permalink to &quot;기본, 제공 및 사용자 지정 플러그인 {id=&quot;default_available_custom&quot;}&quot;">​</a></h2><p>기본적으로 Ktor는 어떤 플러그인도 활성화하지 않으므로, 애플리케이션에 필요한 기능을 위해 플러그인을 설치하는 것은 사용자에게 달려 있습니다.</p><p>하지만 Ktor는 기본으로 제공되는 다양한 플러그인을 제공합니다. <a href="https://github.com/ktorio/ktor-plugin-registry/tree/main/plugins/server" target="_blank" rel="noreferrer">Ktor 플러그인 레지스트리</a>에서 이들의 전체 목록을 확인할 수 있습니다.</p><p>또한 자신만의 <a href="./server-custom-plugins">사용자 지정 플러그인</a>을 생성할 수도 있습니다.</p>`,20))])}const D=c(F,[["render",C]]);export{A as __pageData,D as default};
