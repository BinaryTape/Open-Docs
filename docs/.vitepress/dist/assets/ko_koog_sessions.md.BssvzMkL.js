import{_ as i,c as a,o as n,ag as l}from"./chunks/framework.Bksy39di.js";const E=JSON.parse('{"title":"LLM 세션 및 수동 기록 관리","description":"","frontmatter":{},"headers":[],"relativePath":"ko/koog/sessions.md","filePath":"ko/koog/sessions.md","lastUpdated":1755146406000}'),e={name:"ko/koog/sessions.md"};function t(p,s,h,k,r,o){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="llm-세션-및-수동-기록-관리" tabindex="-1">LLM 세션 및 수동 기록 관리 <a class="header-anchor" href="#llm-세션-및-수동-기록-관리" aria-label="Permalink to &quot;LLM 세션 및 수동 기록 관리&quot;">​</a></h1><p>이 페이지에서는 LLM 세션에 대한 자세한 정보를 제공하며, 읽기 및 쓰기 세션으로 작업하는 방법, 대화 기록을 관리하는 방법, 언어 모델에 요청을 보내는 방법을 포함합니다.</p><h2 id="소개" tabindex="-1">소개 <a class="header-anchor" href="#소개" aria-label="Permalink to &quot;소개&quot;">​</a></h2><p>LLM 세션은 언어 모델(LLM)과 상호작용하는 구조화된 방법을 제공하는 기본적인 개념입니다. 이들은 대화 기록을 관리하고, LLM에 대한 요청을 처리하며, 도구를 실행하고 응답을 처리하기 위한 일관된 인터페이스를 제공합니다.</p><h2 id="llm-세션-이해하기" tabindex="-1">LLM 세션 이해하기 <a class="header-anchor" href="#llm-세션-이해하기" aria-label="Permalink to &quot;LLM 세션 이해하기&quot;">​</a></h2><p>LLM 세션은 언어 모델과 상호작용하기 위한 컨텍스트를 나타냅니다. 다음을 캡슐화합니다:</p><ul><li>대화 기록 (프롬프트)</li><li>사용 가능한 도구</li><li>LLM에 요청을 보내는 메서드</li><li>대화 기록을 업데이트하는 메서드</li><li>도구를 실행하는 메서드</li></ul><p>세션은 <code>AIAgentLLMContext</code> 클래스에 의해 관리되며, 이 클래스는 읽기 및 쓰기 세션을 생성하기 위한 메서드를 제공합니다.</p><h3 id="세션-유형" tabindex="-1">세션 유형 <a class="header-anchor" href="#세션-유형" aria-label="Permalink to &quot;세션 유형&quot;">​</a></h3><p>Koog 프레임워크는 두 가지 유형의 세션을 제공합니다:</p><ol><li><p><strong>쓰기 세션</strong> (<code>AIAgentLLMWriteSession</code>): 프롬프트와 도구를 수정하고, LLM 요청을 보내고, 도구를 실행할 수 있도록 허용합니다. 쓰기 세션에서 변경된 내용은 LLM 컨텍스트에 다시 유지됩니다.</p></li><li><p><strong>읽기 세션</strong> (<code>AIAgentLLMReadSession</code>): 프롬프트와 도구에 대한 읽기 전용 접근을 제공합니다. 이는 변경 없이 현재 상태를 검사하는 데 유용합니다.</p></li></ol><p>주요 차이점은 쓰기 세션은 대화 기록을 수정할 수 있는 반면, 읽기 세션은 수정할 수 없다는 것입니다.</p><h3 id="세션-라이프사이클" tabindex="-1">세션 라이프사이클 <a class="header-anchor" href="#세션-라이프사이클" aria-label="Permalink to &quot;세션 라이프사이클&quot;">​</a></h3><p>세션에는 정의된 라이프사이클이 있습니다:</p><ol><li><strong>생성</strong>: <code>llm.writeSession { ... }</code> 또는 <code>llm.readSession { ... }</code>을 사용하여 세션이 생성됩니다.</li><li><strong>활성 단계</strong>: 람다 블록이 실행되는 동안 세션이 활성화됩니다.</li><li><strong>종료</strong>: 람다 블록이 완료되면 세션이 자동으로 닫힙니다.</li></ol><p>세션은 <code>AutoCloseable</code> 인터페이스를 구현하여 예외가 발생하더라도 제대로 정리되도록 보장합니다.</p><h2 id="llm-세션-사용하기" tabindex="-1">LLM 세션 사용하기 <a class="header-anchor" href="#llm-세션-사용하기" aria-label="Permalink to &quot;LLM 세션 사용하기&quot;">​</a></h2><h3 id="세션-생성하기" tabindex="-1">세션 생성하기 <a class="header-anchor" href="#세션-생성하기" aria-label="Permalink to &quot;세션 생성하기&quot;">​</a></h3><p>세션은 <code>AIAgentLLMContext</code> 클래스의 확장 함수를 사용하여 생성됩니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Creating a write session</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">llm.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Session code here</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Creating a read session</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">llm.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Session code here</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>이 함수들은 세션의 컨텍스트 내에서 실행되는 람다 블록을 받습니다. 블록이 완료되면 세션은 자동으로 닫힙니다.</p><h3 id="세션-스코프-및-스레드-안정성" tabindex="-1">세션 스코프 및 스레드 안정성 <a class="header-anchor" href="#세션-스코프-및-스레드-안정성" aria-label="Permalink to &quot;세션 스코프 및 스레드 안정성&quot;">​</a></h3><p>세션은 스레드 안정성을 보장하기 위해 읽기-쓰기 잠금(read-write lock)을 사용합니다:</p><ul><li>여러 읽기 세션이 동시에 활성화될 수 있습니다.</li><li>한 번에 하나의 쓰기 세션만 활성화될 수 있습니다.</li><li>쓰기 세션은 다른 모든 세션(읽기 및 쓰기 모두)을 차단합니다.</li></ul><p>이는 동시 수정으로 인해 대화 기록이 손상되지 않도록 보장합니다.</p><h3 id="세션-속성-접근하기" tabindex="-1">세션 속성 접근하기 <a class="header-anchor" href="#세션-속성-접근하기" aria-label="Permalink to &quot;세션 속성 접근하기&quot;">​</a></h3><p>세션 내에서 프롬프트와 도구에 접근할 수 있습니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">llm.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> messageCount </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> prompt.messages.size</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> availableTools </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tools.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.name }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>쓰기 세션에서는 이러한 속성을 수정할 수도 있습니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">llm.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Modify the prompt</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    updatePrompt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;New user message&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Modify the tools</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    tools </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newTools</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>자세한 내용은 <a href="https://api.koog.ai/agents/agents-core/ai.koog.agents.core.agent.session/-a-i-agent-l-l-m-read-session/index.html" target="_blank" rel="noreferrer">AIAgentLLMReadSession</a> 및 <a href="https://api.koog.ai/agents/agents-core/ai.koog.agents.core.agent.session/-a-i-agent-l-l-m-write-session/index.html" target="_blank" rel="noreferrer">AIAgentLLMWriteSession</a>의 상세 API 레퍼런스를 참조하십시오.</p><h2 id="llm-요청-보내기" tabindex="-1">LLM 요청 보내기 <a class="header-anchor" href="#llm-요청-보내기" aria-label="Permalink to &quot;LLM 요청 보내기&quot;">​</a></h2><h3 id="기본-요청-메서드" tabindex="-1">기본 요청 메서드 <a class="header-anchor" href="#기본-요청-메서드" aria-label="Permalink to &quot;기본 요청 메서드&quot;">​</a></h3><p>LLM 요청을 보내는 가장 일반적인 메서드는 다음과 같습니다:</p><ol><li><p><code>requestLLM()</code>: 현재 프롬프트와 도구로 LLM에 요청을 보내 단일 응답을 반환합니다.</p></li><li><p><code>requestLLMMultiple()</code>: 현재 프롬프트와 도구로 LLM에 요청을 보내 여러 응답을 반환합니다.</p></li><li><p><code>requestLLMWithoutTools()</code>: 현재 프롬프트로 LLM에 요청을 보내지만 도구 없이 단일 응답을 반환합니다.</p></li><li><p><code>requestLLMForceOneTool</code>: 현재 프롬프트와 도구로 LLM에 요청을 보내 하나의 도구 사용을 강제합니다.</p></li><li><p><code>requestLLMOnlyCallingTools</code>: 도구만 사용하여 처리되어야 하는 LLM에 요청을 보냅니다.</p></li></ol><p>예시:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">llm.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Make a request with tools enabled</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> requestLLM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Make a request without tools</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> responseWithoutTools </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> requestLLMWithoutTools</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Make a request that returns multiple responses</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> responses </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> requestLLMMultiple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="요청-작동-방식" tabindex="-1">요청 작동 방식 <a class="header-anchor" href="#요청-작동-방식" aria-label="Permalink to &quot;요청 작동 방식&quot;">​</a></h3><p>LLM 요청은 요청 메서드 중 하나를 명시적으로 호출할 때 이루어집니다. 이해해야 할 핵심 사항은 다음과 같습니다:</p><ol><li><strong>명시적 호출</strong>: 요청은 <code>requestLLM()</code>, <code>requestLLMWithoutTools()</code> 등과 같은 메서드를 호출할 때만 발생합니다.</li><li><strong>즉시 실행</strong>: 요청 메서드를 호출하면 요청이 즉시 이루어지며, 응답이 수신될 때까지 메서드는 블록됩니다.</li><li><strong>자동 기록 업데이트</strong>: 쓰기 세션에서는 응답이 대화 기록에 자동으로 추가됩니다.</li><li><strong>암시적 요청 없음</strong>: 시스템은 암시적 요청을 하지 않습니다. 요청 메서드를 명시적으로 호출해야 합니다.</li></ol><h3 id="도구를-사용한-요청-메서드" tabindex="-1">도구를 사용한 요청 메서드 <a class="header-anchor" href="#도구를-사용한-요청-메서드" aria-label="Permalink to &quot;도구를 사용한 요청 메서드&quot;">​</a></h3><p>도구를 활성화한 상태에서 요청을 보낼 때, LLM은 텍스트 응답 대신 도구 호출로 응답할 수 있습니다. 요청 메서드는 이를 투명하게 처리합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">llm.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> requestLLM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // The response might be a tool call or a text response</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (response </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Message.Tool.Call) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Handle tool call</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Handle text response</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>실제로 에이전트 그래프가 이 라우팅을 자동으로 처리하므로 응답 유형을 수동으로 확인할 필요는 없습니다.</p><h3 id="구조화된-및-스트리밍-요청" tabindex="-1">구조화된 및 스트리밍 요청 <a class="header-anchor" href="#구조화된-및-스트리밍-요청" aria-label="Permalink to &quot;구조화된 및 스트리밍 요청&quot;">​</a></h3><p>더 고급 사용 사례를 위해 플랫폼은 구조화된 및 스트리밍 요청을 위한 메서드를 제공합니다:</p><ol><li><p><code>requestLLMStructured()</code>: LLM이 특정 구조화된 형식으로 응답을 제공하도록 요청합니다.</p></li><li><p><code>requestLLMStructuredOneShot()</code>: <code>requestLLMStructured()</code>와 유사하지만 재시도나 수정이 없습니다.</p></li><li><p><code>requestLLMStreaming()</code>: LLM에 스트리밍 요청을 보내 응답 청크의 흐름을 반환합니다.</p></li></ol><p>예시:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">llm.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Make a structured request</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> structuredResponse </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> requestLLMStructured</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">JokeRating</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Make a streaming request</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> responseStream </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> requestLLMStreaming</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    responseStream.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">collect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { chunk </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Process each chunk as it arrives</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="대화-기록-관리하기" tabindex="-1">대화 기록 관리하기 <a class="header-anchor" href="#대화-기록-관리하기" aria-label="Permalink to &quot;대화 기록 관리하기&quot;">​</a></h2><h3 id="프롬프트-업데이트하기" tabindex="-1">프롬프트 업데이트하기 <a class="header-anchor" href="#프롬프트-업데이트하기" aria-label="Permalink to &quot;프롬프트 업데이트하기&quot;">​</a></h3><p>쓰기 세션에서는 <code>updatePrompt</code> 메서드를 사용하여 프롬프트(대화 기록)를 업데이트할 수 있습니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">llm.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    updatePrompt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Add a system message</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        system</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;You are a helpful assistant.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Add a user message</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, can you help me with a coding question?&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Add an assistant message</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        assistant</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Of course! What&#39;s your question?&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Add a tool result</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        tool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            result</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myToolResult)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>또한 <code>rewritePrompt</code> 메서드를 사용하여 프롬프트를 완전히 다시 작성할 수도 있습니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">llm.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    rewritePrompt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { oldPrompt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Create a new prompt based on the old one</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        oldPrompt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">copy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(messages </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> filteredMessages)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="응답-시-자동-기록-업데이트" tabindex="-1">응답 시 자동 기록 업데이트 <a class="header-anchor" href="#응답-시-자동-기록-업데이트" aria-label="Permalink to &quot;응답 시 자동 기록 업데이트&quot;">​</a></h3><p>쓰기 세션에서 LLM 요청을 보내면 응답이 대화 기록에 자동으로 추가됩니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">llm.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Add a user message</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    updatePrompt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;What&#39;s the capital of France?&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Make a request – the response is automatically added to the history</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> requestLLM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // The prompt now includes both the user message and the model&#39;s response</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>이러한 자동 기록 업데이트는 쓰기 세션의 핵심 기능으로, 대화가 자연스럽게 흘러가도록 보장합니다.</p><h3 id="기록-압축" tabindex="-1">기록 압축 <a class="header-anchor" href="#기록-압축" aria-label="Permalink to &quot;기록 압축&quot;">​</a></h3><p>장기 실행 대화의 경우, 기록이 커져 많은 토큰을 소비할 수 있습니다. 플랫폼은 기록 압축을 위한 메서드를 제공합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">llm.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Compress the history using a TLDR approach</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    replaceHistoryWithTLDR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HistoryCompressionStrategy.WholeHistory, preserveMemory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>또한 전략 그래프에서 <code>nodeLLMCompressHistory</code> 노드를 사용하여 특정 지점에서 기록을 압축할 수도 있습니다.</p><p>기록 압축 및 압축 전략에 대한 자세한 내용은 <a href="./history-compression">기록 압축</a>을 참조하십시오.</p><h2 id="세션에서-도구-실행하기" tabindex="-1">세션에서 도구 실행하기 <a class="header-anchor" href="#세션에서-도구-실행하기" aria-label="Permalink to &quot;세션에서 도구 실행하기&quot;">​</a></h2><h3 id="도구-호출하기" tabindex="-1">도구 호출하기 <a class="header-anchor" href="#도구-호출하기" aria-label="Permalink to &quot;도구 호출하기&quot;">​</a></h3><p>쓰기 세션은 도구 호출을 위한 여러 메서드를 제공합니다:</p><ol><li><p><code>callTool(tool, args)</code>: 참조로 도구를 호출합니다.</p></li><li><p><code>callTool(toolName, args)</code>: 이름으로 도구를 호출합니다.</p></li><li><p><code>callTool(toolClass, args)</code>: 클래스로 도구를 호출합니다.</p></li><li><p><code>callToolRaw(toolName, args)</code>: 이름으로 도구를 호출하고 원시 문자열 결과를 반환합니다.</p></li></ol><p>예시:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">llm.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Call a tool by reference</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> callTool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myTool, myArgs)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Call a tool by name</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> callTool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;myToolName&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, myArgs)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Call a tool by class</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> callTool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MyTool::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, myArgs)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Call a tool and get the raw result</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rawResult </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> callToolRaw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;myToolName&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, myArgs)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="병렬-도구-실행" tabindex="-1">병렬 도구 실행 <a class="header-anchor" href="#병렬-도구-실행" aria-label="Permalink to &quot;병렬 도구 실행&quot;">​</a></h3><p>여러 도구를 병렬로 실행하려면 쓰기 세션은 <code>Flow</code>에 대한 확장 함수를 제공합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">llm.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Run tools in parallel</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    parseDataToArgs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toParallelToolCalls</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MyTool::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">collect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Process each result</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Run tools in parallel and get raw results</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    parseDataToArgs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toParallelToolCallsRaw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(MyTool::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">collect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { rawResult </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Process each raw result</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>이는 많은 양의 데이터를 효율적으로 처리하는 데 유용합니다.</p><h2 id="모범-사례" tabindex="-1">모범 사례 <a class="header-anchor" href="#모범-사례" aria-label="Permalink to &quot;모범 사례&quot;">​</a></h2><p>LLM 세션을 사용할 때는 다음 모범 사례를 따르십시오:</p><ol><li><p><strong>올바른 세션 유형 사용</strong>: 대화 기록을 수정해야 할 때는 쓰기 세션을 사용하고, 읽기만 필요할 때는 읽기 세션을 사용하십시오.</p></li><li><p><strong>세션을 짧게 유지</strong>: 세션은 특정 작업에 집중하고 가능한 한 빨리 닫아 리소스를 해제해야 합니다.</p></li><li><p><strong>예외 처리</strong>: 리소스 누수를 방지하기 위해 세션 내에서 예외를 처리해야 합니다.</p></li><li><p><strong>기록 크기 관리</strong>: 장기 실행 대화의 경우 토큰 사용량을 줄이기 위해 기록 압축을 사용하십시오.</p></li><li><p><strong>고수준 추상화 선호</strong>: 가능하면 노드 기반 API를 사용하십시오. 예를 들어, 세션과 직접 작업하는 대신 <code>nodeLLMRequest</code>를 사용하십시오.</p></li><li><p><strong>스레드 안정성 유의</strong>: 쓰기 세션은 다른 세션을 차단하므로 쓰기 작업을 가능한 한 짧게 유지해야 합니다.</p></li><li><p><strong>복잡한 데이터에는 구조화된 요청 사용</strong>: LLM이 구조화된 데이터를 반환하도록 해야 할 경우, 자유 형식 텍스트를 파싱하는 대신 <code>requestLLMStructured</code>를 사용하십시오.</p></li><li><p><strong>긴 응답에는 스트리밍 사용</strong>: 긴 응답의 경우, 응답이 도착하는 대로 처리하기 위해 <code>requestLLMStreaming</code>을 사용하십시오.</p></li></ol><h2 id="문제-해결" tabindex="-1">문제 해결 <a class="header-anchor" href="#문제-해결" aria-label="Permalink to &quot;문제 해결&quot;">​</a></h2><h3 id="세션이-이미-닫힘" tabindex="-1">세션이 이미 닫힘 <a class="header-anchor" href="#세션이-이미-닫힘" aria-label="Permalink to &quot;세션이 이미 닫힘&quot;">​</a></h3><p>만약 <code>Cannot use session after it was closed</code>와 같은 오류가 발생한다면, 이는 람다 블록이 완료된 후에 세션을 사용하려고 시도하고 있다는 의미입니다. 모든 세션 작업이 세션 블록 내에서 수행되는지 확인하십시오.</p><h3 id="기록이-너무-큼" tabindex="-1">기록이 너무 큼 <a class="header-anchor" href="#기록이-너무-큼" aria-label="Permalink to &quot;기록이 너무 큼&quot;">​</a></h3><p>기록이 너무 커져 너무 많은 토큰을 소비하는 경우, 기록 압축 기술을 사용하십시오:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">llm.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    replaceHistoryWithTLDR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(HistoryCompressionStrategy.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FromLastNMessages</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), preserveMemory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>자세한 내용은 <a href="./history-compression">기록 압축</a>을 참조하십시오.</p><h3 id="도구를-찾을-수-없음" tabindex="-1">도구를 찾을 수 없음 <a class="header-anchor" href="#도구를-찾을-수-없음" aria-label="Permalink to &quot;도구를 찾을 수 없음&quot;">​</a></h3><p>도구를 찾을 수 없다는 오류가 발생하면 다음을 확인하십시오:</p><ul><li>도구가 도구 레지스트리에 올바르게 등록되어 있는지.</li><li>올바른 도구 이름 또는 클래스를 사용하고 있는지.</li></ul><h2 id="api-문서" tabindex="-1">API 문서 <a class="header-anchor" href="#api-문서" aria-label="Permalink to &quot;API 문서&quot;">​</a></h2><p>자세한 내용은 <a href="https://api.koog.ai/agents/agents-core/ai.koog.agents.core.agent.session/-a-i-agent-l-l-m-session/index.html" target="_blank" rel="noreferrer">AIAgentLLMSession</a> 및 <a href="https://api.koog.ai/agents/agents-core/ai.koog.agents.core.agent.context/-a-i-agent-l-l-m-context/index.html" target="_blank" rel="noreferrer">AIAgentLLMContext</a> 전체 레퍼런스를 참조하십시오.</p>`,89)]))}const g=i(e,[["render",t]]);export{E as __pageData,g as default};
