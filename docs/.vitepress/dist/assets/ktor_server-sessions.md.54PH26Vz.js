import{_ as y,C as t,c as F,o as m,G as e,ag as o,j as i,w as n,a}from"./chunks/framework.Bksy39di.js";const A=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ktor/server-sessions.md","filePath":"ktor/server-sessions.md","lastUpdated":1755457140000}'),v={name:"ktor/server-sessions.md"};function b(C,s,f,q,_,S){const r=t("TopicTitle"),d=t("show-structure"),E=t("primary-label"),p=t("Links"),g=t("tldr"),c=t("link-summary"),l=t("code-block"),h=t("TabItem"),k=t("Tabs"),u=t("list");return m(),F("div",null,[e(r,{labelRef:"server-plugin",title:"会话"}),e(d,{for:"chapter",depth:"2"}),e(E,{ref:"server-plugin"},null,512),e(g,null,{default:n(()=>[s[3]||(s[3]=i("p",null,[i("b",null,"所需依赖项"),a(": "),i("code",null,"io.ktor:ktor-server-sessions")],-1)),s[4]||(s[4]=i("p",null,[i("b",null,"代码示例"),a(": "),i("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/session-cookie-client"},"session-cookie-client"),a(", "),i("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/session-cookie-server"},"session-cookie-server"),a(", "),i("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/session-header-server"},"session-header-server")],-1)),i("p",null,[i("b",null,[e(p,{href:"/ktor/server-native",summary:"Ktor 支持 Kotlin/Native，并且允许您在没有额外运行时或虚拟机的情况下运行服务器。"},{default:n(()=>s[0]||(s[0]=[a("原生服务器")])),_:1}),s[1]||(s[1]=a("支持"))]),s[2]||(s[2]=a(": ✅ "))])]),_:1}),e(c,null,{default:n(()=>s[5]||(s[5]=[a(" Sessions 插件提供了一种在不同 HTTP 请求之间持久化数据的机制。 ")])),_:1}),s[16]||(s[16]=o('<p><code>Sessions</code> 插件提供了一种在不同 HTTP 请求之间持久化数据的机制。典型用例包括存储已登录用户的 ID、购物车内容或在客户端保存用户偏好设置。在 Ktor 中，您可以使用 Cookie 或自定义头部（header）来实现会话，选择是在服务器端存储会话数据还是将其传递给客户端，对会话数据进行签名和加密等。</p><p>在本主题中，我们将探讨如何安装 <code>Sessions</code> 插件、配置它，以及在<a href="./server-routing#define_route">路由处理器</a>内部访问会话数据。</p><h2 id="add_dependencies" tabindex="-1">添加依赖项 <a class="header-anchor" href="#add_dependencies" aria-label="Permalink to &quot;添加依赖项 {id=&quot;add_dependencies&quot;}&quot;">​</a></h2><p>为了启用会话支持，您需要在构建脚本中包含 <code>ktor-server-sessions</code> 构件：</p>',4)),e(k,{group:"languages"},{default:n(()=>[e(h,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[e(l,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-server-sessions:$ktor_version")'})]),_:1}),e(h,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[e(l,{lang:"Groovy",code:'            implementation "io.ktor:ktor-server-sessions:$ktor_version"'})]),_:1}),e(h,{title:"Maven","group-key":"maven"},{default:n(()=>[e(l,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-server-sessions-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),s[17]||(s[17]=i("h2",{id:"install_plugin",tabindex:"-1"},[a("安装 Sessions "),i("a",{class:"header-anchor",href:"#install_plugin","aria-label":'Permalink to "安装 Sessions {id="install_plugin"}"'},"​")],-1)),i("p",null,[s[7]||(s[7]=a(" 要将 `Sessions` 插件")),s[8]||(s[8]=i("a",{href:"#install"},"安装",-1)),s[9]||(s[9]=a("到应用程序中， 请在指定的")),e(p,{href:"/ktor/server-modules",summary:"模块允许您通过分组路由来组织应用程序。"},{default:n(()=>s[6]||(s[6]=[a("模块")])),_:1}),s[10]||(s[10]=a("中将其传递给 ")),s[11]||(s[11]=i("code",null,"install",-1)),s[12]||(s[12]=a(" 函数。 以下代码片段展示了如何安装 ")),s[13]||(s[13]=i("code",null,"Sessions",-1)),s[14]||(s[14]=a(" ... "))]),e(u,null,{default:n(()=>s[15]||(s[15]=[i("li",null,[a(" ... 在 "),i("code",null,"embeddedServer"),a(" 函数调用内部。 ")],-1),i("li",null,[a(" ... 在显式定义的 "),i("code",null,"module"),a(" 内部，"),i("code",null,"module"),a(" 是 "),i("code",null,"Application"),a(" 类的一个扩展函数。 ")],-1)])),_:1}),e(k,null,{default:n(()=>[e(h,{title:"embeddedServer"},{default:n(()=>[e(l,{lang:"kotlin",code:`            import io.ktor.server.engine.*
            import io.ktor.server.netty.*
            import io.ktor.server.application.*
            import io.ktor.server.sessions.*

            fun main() {
                embeddedServer(Netty, port = 8080) {
                    install(Sessions)
                    // ...
                }.start(wait = true)
            }`})]),_:1}),e(h,{title:"module"},{default:n(()=>[e(l,{lang:"kotlin",code:`            import io.ktor.server.application.*
            import io.ktor.server.sessions.*
            // ...
            fun Application.module() {
                install(Sessions)
                // ...
            }`})]),_:1})]),_:1}),s[18]||(s[18]=o(`<p><code>Sessions</code> 插件也可以<a href="#install-route">安装到特定的路由</a>。 如果您需要为不同的应用程序资源使用不同的 <code>Sessions</code> 配置，这可能会很有用。 </p><h2 id="configuration_overview" tabindex="-1">会话配置概述 <a class="header-anchor" href="#configuration_overview" aria-label="Permalink to &quot;会话配置概述 {id=&quot;configuration_overview&quot;}&quot;">​</a></h2><p>要配置 <code>Sessions</code> 插件，您需要执行以下步骤：</p><ol><li><p><em><a href="#data_class">创建数据类</a></em>：在配置会话之前，您需要创建一个 <a href="https://kotlinlang.org/docs/data-classes.html" target="_blank" rel="noreferrer">data class</a> 用于存储会话数据。</p></li><li><p><em><a href="#cookie_header">选择服务器和客户端之间的数据传递方式</a></em>：使用 Cookie 或自定义头部。Cookie 更适合纯 HTML 应用程序，而自定义头部适用于 API。</p></li><li><p><em><a href="#client_server">选择会话负载的存储位置</a></em>：在客户端或服务器端。您可以使用 Cookie/头部值将序列化的会话数据传递给客户端，或者将负载存储在服务器上，只传递会话标识符。</p><p>如果您想将会话负载存储在服务器上，您可以*<a href="#storages">选择如何存储它</a>*：在服务器内存中或在一个文件夹中。您还可以实现自定义存储以保留会话数据。</p></li><li><p><em><a href="#protect_session">保护会话数据</a></em>：为了保护传递给客户端的敏感会话数据，您需要对会话负载进行签名和加密。</p></li></ol><p>配置 <code>Sessions</code> 后，您可以在<a href="./server-routing#define_route">路由处理器</a>内部<a href="#use_sessions">获取和设置会话数据</a>。</p><h2 id="data_class" tabindex="-1">创建数据类 <a class="header-anchor" href="#data_class" aria-label="Permalink to &quot;创建数据类 {id=&quot;data_class&quot;}&quot;">​</a></h2><p>在配置会话之前，您需要创建一个 <a href="https://kotlinlang.org/docs/data-classes.html" target="_blank" rel="noreferrer">data class</a> 用于存储会话数据。 例如，下面的 <code>UserSession</code> 类将用于存储会话 ID 和页面浏览次数：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Serializable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> count: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>如果您打算使用多个会话，则需要创建多个数据类。</p><h2 id="cookie_header" tabindex="-1">传递会话数据：Cookie vs 头部 <a class="header-anchor" href="#cookie_header" aria-label="Permalink to &quot;传递会话数据：Cookie vs 头部 {id=&quot;cookie_header&quot;}&quot;">​</a></h2><h3 id="cookie" tabindex="-1">Cookie <a class="header-anchor" href="#cookie" aria-label="Permalink to &quot;Cookie {id=&quot;cookie&quot;}&quot;">​</a></h3><p>要使用 Cookie 传递会话数据，请在 <code>install(Sessions)</code> 代码块内调用 <code>cookie</code> 函数，并指定名称和数据类：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Sessions) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    cookie</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user_session&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在上面的示例中，会话数据将通过添加到 <code>Set-Cookie</code> 头部 的 <code>user_session</code> 属性传递给客户端。您可以通过在 <code>cookie</code> 代码块内传递其他 Cookie 属性来配置它们。例如，以下代码片段展示了如何指定 Cookie 的路径和过期时间：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Sessions) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    cookie</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user_session&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        cookie.path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        cookie.maxAgeInSeconds </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>如果所需属性没有显式暴露，请使用 <code>extensions</code> 属性。例如，您可以通过以下方式传递 <code>SameSite</code> 属性：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Sessions) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    cookie</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user_session&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        cookie.extensions[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;SameSite&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;lax&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>要了解更多可用的配置设置，请参见 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-sessions/io.ktor.server.sessions/-cookie-configuration/index.html" target="_blank" rel="noreferrer">CookieConfiguration</a>。</p><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>在将应用程序<a href="./server-deployment">部署</a>到生产环境之前，请确保将 <code>secure</code> 属性设置为 <code>true</code>。这会启用仅通过<a href="./server-ssl">安全连接</a>传输 Cookie，并保护会话数据免受 HTTPS 降级攻击。</p></div><h3 id="header" tabindex="-1">头部 <a class="header-anchor" href="#header" aria-label="Permalink to &quot;头部 {id=&quot;header&quot;}&quot;">​</a></h3><p>要使用自定义头部传递会话数据，请在 <code>install(Sessions)</code> 代码块内调用 <code>header</code> 函数，并指定名称和数据类：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Sessions) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    header</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CartSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cart_session&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在上面的示例中，会话数据将通过 <code>cart_session</code> 自定义头部传递给客户端。 在客户端，您需要将此头部附加到每个请求中以获取会话数据。</p><blockquote><p>如果您使用 <a href="./server-cors">CORS</a> 插件处理跨域请求，请将您的自定义头部添加到 <code>CORS</code> 配置中，如下所示：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CORS) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    allowHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cart_session&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    exposeHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cart_session&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></blockquote><h2 id="client_server" tabindex="-1">存储会话负载：客户端 vs 服务器 <a class="header-anchor" href="#client_server" aria-label="Permalink to &quot;存储会话负载：客户端 vs 服务器 {id=&quot;client_server&quot;}&quot;">​</a></h2><p>在 Ktor 中，您可以通过两种方式管理会话数据：</p><ul><li><p><em>在客户端和服务器之间传递会话数据</em>。</p><p>如果您只将会话名称传递给 <a href="#cookie_header">cookie 或 header</a> 函数，会话数据将在客户端和服务器之间传递。在这种情况下，您需要对会话负载进行<a href="#protect_session">签名和加密</a>，以保护传递给客户端的敏感会话数据。</p></li><li><p><em>将数据存储在服务器上，并且只在客户端和服务器之间传递会话 ID</em>。</p><p>在这种情况下，您可以选择<a href="#storages">在服务器上存储负载的位置</a>。例如，您可以将会话数据存储在内存中、指定的文件夹中，或者您可以实现自己的自定义存储。</p></li></ul><h2 id="storages" tabindex="-1">在服务器上存储会话负载 <a class="header-anchor" href="#storages" aria-label="Permalink to &quot;在服务器上存储会话负载 {id=&quot;storages&quot;}&quot;">​</a></h2><p>Ktor 允许您<a href="#client_server">在服务器上</a>存储会话数据，并且只在服务器和客户端之间传递会话 ID。在这种情况下，您可以选择在服务器上保留负载的位置。</p><h3 id="in_memory_storage" tabindex="-1">内存存储 <a class="header-anchor" href="#in_memory_storage" aria-label="Permalink to &quot;内存存储 {id=&quot;in_memory_storage&quot;}&quot;">​</a></h3><p><a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-sessions/io.ktor.server.sessions/-session-storage-memory/index.html" target="_blank" rel="noreferrer">SessionStorageMemory</a> 能够将会话内容存储在内存中。此存储在服务器运行时保留数据，并在服务器停止后丢弃信息。例如，您可以如下所示在服务器内存中存储 Cookie：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cookie</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CartSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cart_session&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SessionStorageMemory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>您可以在此处找到完整示例：<a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/session-cookie-server" target="_blank" rel="noreferrer">session-cookie-server</a>。</p><blockquote><p>请注意，<code>SessionStorageMemory</code> 仅用于开发目的。</p></blockquote><h3 id="directory_storage" tabindex="-1">目录存储 <a class="header-anchor" href="#directory_storage" aria-label="Permalink to &quot;目录存储 {id=&quot;directory_storage&quot;}&quot;">​</a></h3><p><a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-sessions/io.ktor.server.sessions/directory-session-storage.html" target="_blank" rel="noreferrer">directorySessionStorage</a> 可用于将会话数据存储在指定目录下的文件中。例如，要将会在 <code>build/.sessions</code> 目录下的文件中存储会话数据，请以这种方式创建 <code>directorySessionStorage</code>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">header</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CartSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cart_session&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">directorySessionStorage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">File</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;build/.sessions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>您可以在此处找到完整示例：<a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/session-header-server" target="_blank" rel="noreferrer">session-header-server</a>。</p><h3 id="custom_storage" tabindex="-1">自定义存储 <a class="header-anchor" href="#custom_storage" aria-label="Permalink to &quot;自定义存储 {id=&quot;custom_storage&quot;}&quot;">​</a></h3><p>Ktor 提供了 <a href="https://api.ktor.io/ktor-server/ktor-server-plugins/ktor-server-sessions/io.ktor.server.sessions/-session-storage/index.html" target="_blank" rel="noreferrer">SessionStorage</a> 接口，允许您实现自定义存储。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SessionStorage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    suspend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> invalidate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(id: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    suspend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(id: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    suspend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(id: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>所有这三个函数都是<a href="https://kotlinlang.org/docs/composing-suspending-functions.html" target="_blank" rel="noreferrer">挂起函数</a>。您可以使用 <a href="https://github.com/ktorio/ktor/blob/main/ktor-server/ktor-server-plugins/ktor-server-sessions/common/src/io/ktor/server/sessions/SessionStorageMemory.kt" target="_blank" rel="noreferrer">SessionStorageMemory</a> 作为参考。</p><h2 id="protect_session" tabindex="-1">保护会话数据 <a class="header-anchor" href="#protect_session" aria-label="Permalink to &quot;保护会话数据 {id=&quot;protect_session&quot;}&quot;">​</a></h2><h3 id="sign_session" tabindex="-1">签名会话数据 <a class="header-anchor" href="#sign_session" aria-label="Permalink to &quot;签名会话数据 {id=&quot;sign_session&quot;}&quot;">​</a></h3><p>签名会话数据可以防止修改会话内容，但允许用户查看此内容。 要对会话进行签名，请将签名密钥传递给 <code>SessionTransportTransformerMessageAuthentication</code> 构造函数，并将此实例传递给 <code>transform</code> 函数：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Sessions) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> secretSignKey </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> hex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;6819b57a326945c1968f45236589&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    cookie</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CartSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cart_session&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SessionStorageMemory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        cookie.path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SessionTransportTransformerMessageAuthentication</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(secretSignKey))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>SessionTransportTransformerMessageAuthentication</code> 默认使用 <code>HmacSHA256</code> 作为认证算法，该算法可以更改。</p><h3 id="sign_encrypt_session" tabindex="-1">签名并加密会话数据 <a class="header-anchor" href="#sign_encrypt_session" aria-label="Permalink to &quot;签名并加密会话数据 {id=&quot;sign_encrypt_session&quot;}&quot;">​</a></h3><p>签名和加密会话数据可以防止读取和修改会话内容。 要对会话进行签名和加密，请将签名/加密密钥传递给 <code>SessionTransportTransformerEncrypt</code> 构造函数，并将此实例传递给 <code>transform</code> 函数：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Sessions) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> secretEncryptKey </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> hex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;00112233445566778899aabbccddeeff&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> secretSignKey </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> hex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;6819b57a326945c1968f45236589&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    cookie</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user_session&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        cookie.path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;/&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        cookie.maxAgeInSeconds </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SessionTransportTransformerEncrypt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(secretEncryptKey, secretSignKey))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>请注意，Ktor <code>3.0.0</code> 版本中<a href="./migrating-3#session-encryption-method-update">加密方法已更新</a>。如果您是从早期版本迁移，请在 <code>SessionTransportTransformerEncrypt</code> 的构造函数中使用 <code>backwardCompatibleRead</code> 属性，以确保与现有会话的兼容性。</p></div><p>默认情况下，<code>SessionTransportTransformerEncrypt</code> 使用 <code>AES</code> 和 <code>HmacSHA256</code> 算法，这些算法可以更改。</p><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>请注意，签名/加密密钥不应在代码中指定。您可以使用<a href="./server-configuration-file#configuration-file-overview">配置文件</a>中的自定义组来存储签名/加密密钥，并使用<a href="./server-configuration-file#environment-variables">环境变量</a>初始化它们。</p></div><h2 id="use_sessions" tabindex="-1">获取和设置会话内容 <a class="header-anchor" href="#use_sessions" aria-label="Permalink to &quot;获取和设置会话内容 {id=&quot;use_sessions&quot;}&quot;">​</a></h2><p>要为特定<a href="./server-routing">路由</a>设置会话内容，请使用 <code>call.sessions</code> 属性。<code>set</code> 方法允许您创建新的会话实例：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/login&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    call.sessions.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;123abc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondRedirect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/user&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>要获取会话内容，您可以调用 <code>get</code>，并将其中一个已注册的会话类型作为类型参数传入：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/user&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userSession </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> call.sessions.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (userSession </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>要修改会话，例如，递增计数器，您需要调用数据类的 <code>copy</code> 方法：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/user&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userSession </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> call.sessions.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (userSession </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        call.sessions.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(userSession.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">copy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> userSession.count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Session ID is \${userSession.id}. Reload count is \${userSession.count}.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Session doesn&#39;t exist or is expired.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>当您因任何原因需要清除会话时（例如，用户登出时），请调用 <code>clear</code> 函数：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/logout&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    call.sessions.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">clear</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UserSession</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondRedirect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/user&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>您可以在此处找到完整示例：<a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/session-cookie-client" target="_blank" rel="noreferrer">session-cookie-client</a>。</p><h2 id="延迟会话检索" tabindex="-1">延迟会话检索 <a class="header-anchor" href="#延迟会话检索" aria-label="Permalink to &quot;延迟会话检索&quot;">​</a></h2><p>默认情况下，Ktor 会尝试为每个包含会话的请求从存储中读取会话，无论路由是否实际需要它。这种行为可能会导致不必要的开销 —— 特别是对于使用自定义会话存储的应用程序。</p><p>您可以通过启用 <code>io.ktor.server.sessions.deferred</code> 系统属性来延迟会话加载：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;io.ktor.server.sessions.deferred&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;true&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="examples" tabindex="-1">示例 <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;示例 {id=&quot;examples&quot;}&quot;">​</a></h2><p>以下可运行示例展示了如何使用 <code>Sessions</code> 插件：</p><ul><li><a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/session-cookie-client" target="_blank" rel="noreferrer">session-cookie-client</a> 展示了如何使用 <a href="#cookie">Cookie</a> 将<a href="#sign_encrypt_session">签名并加密</a>的会话负载传递给<a href="#client_server">客户端</a>。</li><li><a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/session-cookie-server" target="_blank" rel="noreferrer">session-cookie-server</a> 展示了如何将会话负载保存在<a href="#in_memory_storage">服务器内存</a>中，并使用 <a href="#cookie">Cookie</a> 将<a href="#sign_session">签名</a>的会话 ID 传递给客户端。</li><li><a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/session-header-server" target="_blank" rel="noreferrer">session-header-server</a> 展示了如何将负载保存在服务器的<a href="#directory_storage">目录存储</a>中，并使用<a href="#header">自定义头部</a>将<a href="#sign_session">签名</a>的会话 ID 传递给客户端。</li></ul>`,70))])}const x=y(v,[["render",b]]);export{A as __pageData,x as default};
