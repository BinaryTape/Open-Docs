import{_ as r}from"./chunks/direct-integration-scheme.Cw1ubqmC.js";import{_ as d,a as k,b as h,c as g}from"./chunks/xcode-spm-usage.Dn1odtN3.js";import{_ as c,C as p,c as m,o as u,j as i,G as l,ag as t,a,w as n}from"./chunks/framework.Bksy39di.js";const B=JSON.parse('{"title":"在本地 Swift 包中使用 Kotlin","description":"","frontmatter":{},"headers":[],"relativePath":"kmp/multiplatform-spm-local-integration.md","filePath":"kmp/multiplatform-spm-local-integration.md","lastUpdated":1755516278000}'),E={name:"kmp/multiplatform-spm-local-integration.md"};function F(y,s,f,C,b,S){const o=p("tldr"),e=p("shortcut");return u(),m("div",null,[s[17]||(s[17]=i("h1",{id:"在本地-swift-包中使用-kotlin",tabindex:"-1"},[a("在本地 Swift 包中使用 Kotlin "),i("a",{class:"header-anchor",href:"#在本地-swift-包中使用-kotlin","aria-label":'Permalink to "在本地 Swift 包中使用 Kotlin"'},"​")],-1)),l(o,null,{default:n(()=>s[0]||(s[0]=[a(" 这是一种本地集成方法。如果符合以下情况，它可能对您有用："),i("br",null,null,-1),i("ul",null,[i("li",null,"您的 iOS 应用包含本地 SPM 模块。"),i("li",null,"您已在本地机器上设置了一个面向 iOS 的 Kotlin Multiplatform 项目。"),i("li",null,[a("您现有的 iOS 项目采用静态链接类型。"),i("br")])],-1),i("p",null,[i("a",{href:"./multiplatform-ios-integration-overview"},"选择最适合您的集成方法")],-1)])),_:1}),s[18]||(s[18]=t('<p>在本教程中，您将学习如何使用 Swift package manager (SPM) 将 Kotlin Multiplatform 项目中的 Kotlin framework 集成到本地包中。</p><p><img src="'+r+'" alt="Direct integration diagram" width="700"></p><p>为了设置集成，您将添加一个特殊脚本，该脚本在您项目的构建设置中将 <code>embedAndSignAppleFrameworkForXcode</code> Gradle task 用作预操作。要查看通用代码中的更改在您的 Xcode 项目中得到反映，您只需重新构建 Kotlin Multiplatform 项目。</p><p>通过这种方式，您可以轻松地在本地 Swift 包中使用 Kotlin 代码，与常规的直接集成方法（该方法将脚本添加到构建阶段并需要重新构建 Kotlin Multiplatform 和 iOS 项目以获取通用代码中的更改）相比，更为便捷。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>如果您不熟悉 Kotlin Multiplatform，请先了解如何<a href="./quickstart">设置环境</a>以及<a href="./compose-multiplatform-create-first-app">从零开始创建跨平台应用程序</a>。</p></div><h2 id="设置项目" tabindex="-1">设置项目 <a class="header-anchor" href="#设置项目" aria-label="Permalink to &quot;设置项目&quot;">​</a></h2><p>此特性自 Kotlin 2.0.0 起可用。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>要检测 Kotlin 版本，请导航到 Kotlin Multiplatform 项目根目录下的 <code>build.gradle(.kts)</code> 文件。您将在文件顶部的 <code>plugins {}</code> 代码块中看到当前版本。 或者，查看 <code>gradle/libs.versions.toml</code> 文件中的版本目录。</p></div><p>本教程假定您的项目使用<a href="./multiplatform-direct-integration">直接集成</a>方法，并在项目的构建阶段使用 <code>embedAndSignAppleFrameworkForXcode</code> task。如果您通过 CocoaPods 插件或带有 <code>binaryTarget</code> 的 Swift 包连接 Kotlin framework，请先进行迁移。</p>',9)),s[19]||(s[19]=i("h3",{"initial-collapse-state":"collapsed",collapsible:"true",id:"从-spm-binarytarget-集成迁移",tabindex:"-1"},[a("从 SPM binaryTarget 集成迁移 "),i("a",{class:"header-anchor",href:"#从-spm-binarytarget-集成迁移","aria-label":'Permalink to "从 SPM binaryTarget 集成迁移 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),s[20]||(s[20]=i("p",null,[a("要从带有 "),i("code",null,"binaryTarget"),a(" 的 SPM 集成迁移：")],-1)),i("ol",null,[i("li",null,[s[2]||(s[2]=a("在 Xcode 中，使用 ")),s[3]||(s[3]=i("strong",null,"Product",-1)),s[4]||(s[4]=a(" | ")),s[5]||(s[5]=i("strong",null,"Clean Build Folder",-1)),s[6]||(s[6]=a(" 或快捷键 ")),l(e,null,{default:n(()=>s[1]||(s[1]=[a("Cmd + Shift + K")])),_:1}),s[7]||(s[7]=a(" 清理构建目录。"))]),s[8]||(s[8]=i("li",null,[a("在每个 "),i("code",null,"Package.swift"),a(" 文件中，移除对包含 Kotlin framework 的包的依赖项，以及对产品的目标依赖项。")],-1))]),s[21]||(s[21]=i("h3",{"initial-collapse-state":"collapsed",collapsible:"true",id:"从-cocoapods-插件迁移",tabindex:"-1"},[a("从 CocoaPods 插件迁移 "),i("a",{class:"header-anchor",href:"#从-cocoapods-插件迁移","aria-label":'Permalink to "从 CocoaPods 插件迁移 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),s[22]||(s[22]=i("div",{class:"danger custom-block"},[i("p",{class:"custom-block-title"},"WARNING"),i("p",null,[a("如果您的 "),i("code",null,"cocoapods {}"),a(" 代码块中存在对其他 Pod 的依赖项，则必须采用 CocoaPods 集成方法。目前，在多模态 SPM 项目中，不可能同时依赖 Pod 和 Kotlin framework。")])],-1)),s[23]||(s[23]=i("p",null,"要从 CocoaPods 插件迁移：",-1)),i("ol",null,[i("li",null,[i("p",null,[s[10]||(s[10]=a("在 Xcode 中，使用 ")),s[11]||(s[11]=i("strong",null,"Product",-1)),s[12]||(s[12]=a(" | ")),s[13]||(s[13]=i("strong",null,"Clean Build Folder",-1)),s[14]||(s[14]=a(" 或快捷键 ")),l(e,null,{default:n(()=>s[9]||(s[9]=[a("Cmd + Shift + K")])),_:1}),s[15]||(s[15]=a(" 清理构建目录。"))])]),s[16]||(s[16]=t('<li><p>在 Podfile 所在目录中，运行以下命令：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pod deintegrate</span></span></code></pre></div></li><li><p>从您的 <code>build.gradle(.kts)</code> 文件中移除 <code>cocoapods {}</code> 代码块。</p></li><li><p>删除 <code>.podspec</code> 文件和 Podfile。</p></li>',3))]),s[24]||(s[24]=t('<h2 id="将-framework-连接到您的项目" tabindex="-1">将 framework 连接到您的项目 <a class="header-anchor" href="#将-framework-连接到您的项目" aria-label="Permalink to &quot;将 framework 连接到您的项目&quot;">​</a></h2><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>目前不支持集成到 <code>swift build</code>。</p></div><p>为了能够在本地 Swift 包中使用 Kotlin 代码，请将从 multiplatform 项目生成的 Kotlin framework 连接到您的 Xcode 项目：</p><ol><li><p>在 Xcode 中，转到 <strong>Product</strong> | <strong>Scheme</strong> | <strong>Edit scheme</strong>，或点击顶部栏中的 scheme 图标并选择 <strong>Edit scheme</strong>：</p><p><img src="'+d+'" alt="Edit scheme" width="700"></p></li><li><p>选择 <strong>Build</strong> | <strong>Pre-actions</strong> 项，然后点击 <strong>+</strong> | <strong>New Run Script Action</strong>：</p><p><img src="'+k+`" alt="New run script action" width="700"></p></li><li><p>调整以下脚本并将其添加为操作：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&lt;Path to the root of the multiplatform project&gt;&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> :</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Shared</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> module</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> nam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">:embedAndSignAppleFrameworkForXcode</span></span></code></pre></div><ul><li>在 <code>cd</code> 命令中，指定 Kotlin Multiplatform 项目的根目录路径，例如 <code>$SRCROOT/..</code>。</li><li>在 <code>./gradlew</code> 命令中，指定共享模块的名称，例如 <code>:shared</code> 或 <code>:composeApp</code>。</li></ul></li><li><p>在 <strong>Provide build settings from</strong> 部分中选择您的应用目标：</p><p><img src="`+h+`" alt="Filled run script action" width="700"></p></li><li><p>现在您可以将共享模块导入到本地 Swift 包中并使用 Kotlin 代码。</p><p>在 Xcode 中，导航到您的本地 Swift 包并定义一个包含模块导入的函数，例如：</p><div class="language-Swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Shared</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> greetingsFromSpmLocalPackage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Greeting.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><img src="`+g+`" alt="SPM usage" width="700"></p></li><li><p>在您的 iOS 项目的 <code>ContentView.swift</code> 文件中，现在可以通过导入本地包来使用此函数：</p><div class="language-Swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SwiftUI</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SpmLocalPackage</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ContentView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        Vstack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            Image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">systemName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;globe&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">imageScale</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.large)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">foregroundStyle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.tint)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">greetingsFromSpmLocalPackage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">padding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">#Preview</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    ContentView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>在 Xcode 中构建项目。如果一切设置正确，项目构建将成功。</p></li></ol><p>还有几个值得考虑的因素：</p><ul><li>如果您有不同于默认 <code>Debug</code> 或 <code>Release</code> 的自定义构建配置，请在 <strong>Build Settings</strong> 选项卡上，在 <strong>User-Defined</strong> 下添加 <code>KOTLIN_FRAMEWORK_BUILD_TYPE</code> 设置，并将其设置为 <code>Debug</code> 或 <code>Release</code>。</li><li>如果您遇到脚本沙盒错误，请双击项目名称打开 iOS 项目设置，然后在 <strong>Build Settings</strong> 选项卡上，在 <strong>Build Options</strong> 下禁用 <strong>User Script Sandboxing</strong>。</li></ul><h2 id="后续步骤" tabindex="-1">后续步骤 <a class="header-anchor" href="#后续步骤" aria-label="Permalink to &quot;后续步骤&quot;">​</a></h2><ul><li><a href="./multiplatform-ios-integration-overview">选择您的集成方法</a></li><li><a href="./multiplatform-spm-export">了解如何设置 Swift 包导出</a></li></ul>`,8))])}const A=c(E,[["render",F]]);export{B as __pageData,A as default};
