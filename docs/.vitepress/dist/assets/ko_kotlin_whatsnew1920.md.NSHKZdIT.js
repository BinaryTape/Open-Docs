import{_ as l}from"./chunks/default-hierarchy-example.DgJqkpuk.js";import{_ as t,a as p}from"./chunks/full-template-hierarchy.DK23XVrY.js";import{_ as o,a as r}from"./chunks/multiplatform-create-project-button.ihqOV7P4.js";import{_ as h,C as k,c as d,o as c,ag as s,G as g,j as i,a as n}from"./chunks/framework.Bksy39di.js";const x=JSON.parse('{"title":"Kotlin 1.9.20의 새로운 기능","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kotlin/whatsnew1920.md","filePath":"ko/kotlin/whatsnew1920.md","lastUpdated":1754307826000}'),E={name:"ko/kotlin/whatsnew1920.md"};function m(u,a,y,b,f,v){const e=k("YouTubeVideo");return c(),d("div",null,[a[0]||(a[0]=s('<h1 id="kotlin-1-9-20의-새로운-기능" tabindex="-1">Kotlin 1.9.20의 새로운 기능 <a class="header-anchor" href="#kotlin-1-9-20의-새로운-기능" aria-label="Permalink to &quot;Kotlin 1.9.20의 새로운 기능&quot;">​</a></h1><p><a href="/ko/kotlin/releases#release-details">릴리스: 2023년 11월 1일</a></p><p>Kotlin 1.9.20 릴리스가 나왔습니다. <a href="#new-kotlin-k2-compiler-updates">모든 타겟을 위한 K2 컴파일러가 이제 베타(Beta) 단계에 진입했습니다</a>하며, <a href="#kotlin-multiplatform-is-stable">Kotlin Multiplatform이 이제 안정화(Stable)되었습니다</a>. 이 외에도 주요 내용은 다음과 같습니다:</p><ul><li><a href="#template-for-configuring-multiplatform-projects">멀티플랫폼 프로젝트 설정을 위한 새로운 기본 계층 템플릿</a></li><li><a href="#full-support-for-the-gradle-configuration-cache-in-kotlin-multiplatform">Kotlin Multiplatform에서 Gradle 설정 캐시(configuration cache) 완벽 지원</a></li><li><a href="#custom-memory-allocator-enabled-by-default">Kotlin/Native에서 커스텀 메모리 할당자(memory allocator) 기본 활성화</a></li><li><a href="#performance-improvements-for-the-garbage-collector">Kotlin/Native에서 가비지 컬렉터(garbage collector) 성능 향상</a></li><li><a href="#new-wasm-wasi-target-and-the-renaming-of-the-wasm-target-to-wasm-js">Kotlin/Wasm의 새로운 타겟 및 타겟 이름 변경</a></li><li><a href="#support-for-the-wasi-api-in-the-standard-library">Kotlin/Wasm 표준 라이브러리의 WASI API 지원</a></li></ul><p>다음 영상에서 업데이트에 대한 간략한 개요를 확인할 수 있습니다:</p>',5)),g(e,{src:"https://www.youtube.com/v/Ol_96CHKqg8",title:"Kotlin 1.9.20의 새로운 기능"}),a[1]||(a[1]=s(`<h2 id="ide-지원" tabindex="-1">IDE 지원 <a class="header-anchor" href="#ide-지원" aria-label="Permalink to &quot;IDE 지원&quot;">​</a></h2><p>1.9.20을 지원하는 Kotlin 플러그인은 다음에서 사용할 수 있습니다:</p><table tabindex="0"><thead><tr><th>IDE</th><th>지원 버전</th></tr></thead><tbody><tr><td>IntelliJ IDEA</td><td>2023.1.x, 2023.2.x, 2023.x</td></tr><tr><td>Android Studio</td><td>Hedgehog (2023.1.1), Iguana (2023.2.1)</td></tr></tbody></table><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>IntelliJ IDEA 2023.3.x 및 Android Studio Iguana (2023.2.1) Canary 15부터 Kotlin 플러그인은 자동으로 포함되고 업데이트됩니다. 프로젝트의 Kotlin 버전만 업데이트하면 됩니다.</p></div><h2 id="새로운-kotlin-k2-컴파일러-업데이트" tabindex="-1">새로운 Kotlin K2 컴파일러 업데이트 <a class="header-anchor" href="#새로운-kotlin-k2-컴파일러-업데이트" aria-label="Permalink to &quot;새로운 Kotlin K2 컴파일러 업데이트&quot;">​</a></h2><p>JetBrains의 Kotlin 팀은 새로운 K2 컴파일러의 안정화 작업을 계속하고 있습니다. 이 컴파일러는 주요 성능 향상을 가져오고, 새로운 언어 기능 개발 속도를 높이며, Kotlin이 지원하는 모든 플랫폼을 통합하고, 멀티플랫폼 프로젝트를 위한 더 나은 아키텍처를 제공할 것입니다.</p><p>K2는 현재 모든 타겟에서 <strong>베타(Beta)</strong> 상태입니다. <a href="https://blog.jetbrains.com/kotlin/2023/11/kotlin-1-9-20-released/" target="_blank" rel="noreferrer">릴리스 블로그 게시물에서 자세히 읽어보기</a></p><h3 id="kotlin-wasm-지원" tabindex="-1">Kotlin/Wasm 지원 <a class="header-anchor" href="#kotlin-wasm-지원" aria-label="Permalink to &quot;Kotlin/Wasm 지원&quot;">​</a></h3><p>이번 릴리스부터 Kotlin/Wasm은 새로운 K2 컴파일러를 지원합니다. <a href="#how-to-enable-the-kotlin-k2-compiler">프로젝트에서 활성화하는 방법을 알아보세요</a>.</p><h3 id="k2와-함께-kapt-컴파일러-플러그인-미리보기" tabindex="-1">K2와 함께 kapt 컴파일러 플러그인 미리보기 <a class="header-anchor" href="#k2와-함께-kapt-컴파일러-플러그인-미리보기" aria-label="Permalink to &quot;K2와 함께 kapt 컴파일러 플러그인 미리보기&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>kapt 컴파일러 플러그인의 K2 지원은 <a href="/ko/kotlin/components-stability">Experimental</a> (실험적 기능)입니다. 옵트인(opt-in)이 필요하며(자세한 내용은 아래 참조), 평가 목적으로만 사용해야 합니다.</p></div><p>1.9.20에서는 K2 컴파일러와 함께 <a href="/ko/kotlin/kapt">kapt 컴파일러 플러그인</a>을 사용할 수 있습니다. 프로젝트에서 K2 컴파일러를 사용하려면 <code>gradle.properties</code> 파일에 다음 옵션을 추가하세요:</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.experimental.tryK2=true</span></span>
<span class="line"><span>kapt.use.k2=true</span></span></code></pre></div><p>또는 다음 단계를 완료하여 kapt에 K2를 활성화할 수 있습니다:</p><ol><li><code>build.gradle.kts</code> 파일에서 <a href="/ko/kotlin/gradle-compiler-options#example-of-setting-languageversion">언어 버전</a>을 <code>2.0</code>으로 설정하세요.</li><li><code>gradle.properties</code> 파일에 <code>kapt.use.k2=true</code>를 추가하세요.</li></ol><p>K2 컴파일러와 함께 kapt를 사용할 때 문제가 발생하면 <a href="http://kotl.in/issue" target="_blank" rel="noreferrer">이슈 트래커</a>에 보고해 주세요.</p><h3 id="kotlin-k2-컴파일러-활성화-방법" tabindex="-1">Kotlin K2 컴파일러 활성화 방법 <a class="header-anchor" href="#kotlin-k2-컴파일러-활성화-방법" aria-label="Permalink to &quot;Kotlin K2 컴파일러 활성화 방법&quot;">​</a></h3><h4 id="gradle에서-k2-활성화" tabindex="-1">Gradle에서 K2 활성화 <a class="header-anchor" href="#gradle에서-k2-활성화" aria-label="Permalink to &quot;Gradle에서 K2 활성화&quot;">​</a></h4><p>Kotlin K2 컴파일러를 활성화하고 테스트하려면 다음 컴파일러 옵션과 함께 새 언어 버전을 사용하세요:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">-language-version</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2.0</span></span></code></pre></div><p><code>build.gradle.kts</code> 파일에 지정할 수 있습니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    sourceSets.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        languageSettings</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            languageVersion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;2.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="maven에서-k2-활성화" tabindex="-1">Maven에서 K2 활성화 <a class="header-anchor" href="#maven에서-k2-활성화" aria-label="Permalink to &quot;Maven에서 K2 활성화&quot;">​</a></h4><p>Kotlin K2 컴파일러를 활성화하고 테스트하려면 <code>pom.xml</code> 파일의 <code>&lt;project/&gt;</code> 섹션을 업데이트하세요:</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">properties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">kotlin.compiler.languageVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;2.0&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">kotlin.compiler.languageVersion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">properties</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h4 id="intellij-idea에서-k2-활성화" tabindex="-1">IntelliJ IDEA에서 K2 활성화 <a class="header-anchor" href="#intellij-idea에서-k2-활성화" aria-label="Permalink to &quot;IntelliJ IDEA에서 K2 활성화&quot;">​</a></h4><p>IntelliJ IDEA에서 Kotlin K2 컴파일러를 활성화하고 테스트하려면 <strong>Settings</strong> | <strong>Build, Execution, Deployment</strong> | <strong>Compiler</strong> | <strong>Kotlin Compiler</strong>로 이동하여 <strong>Language Version</strong> 필드를 <code>2.0 (experimental)</code>로 업데이트하세요.</p><h3 id="새로운-k2-컴파일러에-대한-피드백-남기기" tabindex="-1">새로운 K2 컴파일러에 대한 피드백 남기기 <a class="header-anchor" href="#새로운-k2-컴파일러에-대한-피드백-남기기" aria-label="Permalink to &quot;새로운 K2 컴파일러에 대한 피드백 남기기&quot;">​</a></h3><p>어떤 피드백이라도 감사히 받겠습니다!</p><ul><li>Kotlin Slack에서 K2 개발자에게 직접 피드백을 제공하세요. <a href="https://surveys.jetbrains.com/s3/kotlin-slack-sign-up?_gl=1*ju6cbn*_ga*MTA3MTk5NDkzMC4xNjQ2MDY3MDU4*_ga_9J976DJZ68*MTY1ODMzNzA3OS4xMDAuMS4xNjU4MzQwODEwLjYw" target="_blank" rel="noreferrer">초대받아</a> <a href="https://kotlinlang.slack.com/archives/C03PK0PE257" target="_blank" rel="noreferrer">#k2-early-adopters</a> 채널에 참여하세요.</li><li>새로운 K2 컴파일러 사용 중 발생한 문제는 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">이슈 트래커</a>에 보고해 주세요.</li><li>JetBrains가 K2 사용에 대한 익명 데이터를 수집하도록 <a href="https://www.jetbrains.com/help/idea/settings-usage-statistics.html" target="_blank" rel="noreferrer">사용 통계 전송 옵션</a>을 활성화하세요.</li></ul><h2 id="kotlin-jvm" tabindex="-1">Kotlin/JVM <a class="header-anchor" href="#kotlin-jvm" aria-label="Permalink to &quot;Kotlin/JVM&quot;">​</a></h2><p>버전 1.9.20부터 컴파일러는 Java 21 바이트코드를 포함하는 클래스를 생성할 수 있습니다.</p><h2 id="kotlin-native" tabindex="-1">Kotlin/Native <a class="header-anchor" href="#kotlin-native" aria-label="Permalink to &quot;Kotlin/Native&quot;">​</a></h2><p>Kotlin 1.9.20에는 새로운 메모리 할당자가 기본으로 활성화된 안정적인 메모리 관리자, 가비지 컬렉터 성능 향상 및 기타 업데이트가 포함되어 있습니다:</p><ul><li><a href="#custom-memory-allocator-enabled-by-default">커스텀 메모리 할당자 기본 활성화</a></li><li><a href="#performance-improvements-for-the-garbage-collector">가비지 컬렉터 성능 향상</a></li><li><a href="#incremental-compilation-of-klib-artifacts"><code>klib</code> 아티팩트의 점진적 컴파일</a></li><li><a href="#managing-library-linkage-issues">라이브러리 연결(linkage) 문제 관리</a></li><li><a href="#companion-object-initialization-on-class-constructor-calls">클래스 생성자 호출 시 컴패니언 객체 초기화</a></li><li><a href="#opt-in-requirement-for-all-cinterop-declarations">모든 cinterop 선언에 대한 옵트인(opt-in) 요구 사항</a></li><li><a href="#custom-message-for-linker-errors">링커 오류에 대한 커스텀 메시지</a></li><li><a href="#removal-of-the-legacy-memory-manager">레거시 메모리 관리자 제거</a></li><li><a href="#change-to-our-target-tiers-policy">타겟 티어(tier) 정책 변경</a></li></ul><h3 id="커스텀-메모리-할당자-기본-활성화" tabindex="-1">커스텀 메모리 할당자 기본 활성화 <a class="header-anchor" href="#커스텀-메모리-할당자-기본-활성화" aria-label="Permalink to &quot;커스텀 메모리 할당자 기본 활성화&quot;">​</a></h3><p>Kotlin 1.9.20에는 새로운 메모리 할당자가 기본으로 활성화되어 제공됩니다. 이 할당자는 이전 기본 할당자인 <code>mimalloc</code>을 대체하도록 설계되었으며, 가비지 컬렉션을 더 효율적으로 만들고 <a href="/ko/kotlin/native-memory-manager">Kotlin/Native 메모리 관리자</a>의 런타임 성능을 향상시킵니다.</p><p>새로운 커스텀 할당자는 시스템 메모리를 페이지로 나누어 순차적으로 독립적인 스위핑(sweeping)을 허용합니다. 각 할당은 페이지 내의 메모리 블록이 되며, 페이지는 블록 크기를 추적합니다. 다양한 페이지 유형은 여러 할당 크기에 최적화되어 있습니다. 메모리 블록의 순차적인 배열은 할당된 모든 블록을 효율적으로 반복할 수 있도록 합니다.</p><p>스레드가 메모리를 할당할 때, 할당 크기에 따라 적절한 페이지를 찾습니다. 스레드는 다양한 크기 범주에 대한 페이지 세트를 유지합니다. 일반적으로 주어진 크기에 대한 현재 페이지는 할당을 수용할 수 있습니다. 그렇지 않으면 스레드는 공유 할당 공간에서 다른 페이지를 요청합니다. 이 페이지는 이미 사용 가능하거나, 스위핑이 필요하거나, 먼저 생성해야 할 수 있습니다.</p><p>새로운 할당자는 여러 개의 독립적인 할당 공간을 동시에 허용하여, Kotlin 팀이 성능을 더욱 향상시키기 위해 다양한 페이지 레이아웃을 실험할 수 있도록 할 것입니다.</p><h4 id="커스텀-메모리-할당자-활성화-방법" tabindex="-1">커스텀 메모리 할당자 활성화 방법 <a class="header-anchor" href="#커스텀-메모리-할당자-활성화-방법" aria-label="Permalink to &quot;커스텀 메모리 할당자 활성화 방법&quot;">​</a></h4><p>Kotlin 1.9.20부터 새로운 메모리 할당자가 기본으로 설정됩니다. 추가 설정은 필요 없습니다.</p><p>메모리 소비가 높다고 판단되면, Gradle 빌드 스크립트에서 <code>-Xallocator=mimalloc</code> 또는 <code>-Xallocator=std</code> 옵션을 사용하여 <code>mimalloc</code> 또는 시스템 할당자로 다시 전환할 수 있습니다. 새로운 메모리 할당자 개선에 도움을 주시려면 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a>에 해당 문제를 보고해 주세요.</p><p>새로운 할당자 설계에 대한 기술적인 내용은 이 <a href="https://github.com/JetBrains/kotlin/blob/master/kotlin-native/runtime/src/alloc/custom/README.md" target="_blank" rel="noreferrer">README</a>를 참조하세요.</p><h3 id="가비지-컬렉터-성능-향상" tabindex="-1">가비지 컬렉터 성능 향상 <a class="header-anchor" href="#가비지-컬렉터-성능-향상" aria-label="Permalink to &quot;가비지 컬렉터 성능 향상&quot;">​</a></h3><p>Kotlin 팀은 새로운 Kotlin/Native 메모리 관리자의 성능과 안정성을 지속적으로 개선하고 있습니다. 이번 릴리스에서는 가비지 컬렉터(GC)에 몇 가지 중요한 변경 사항이 적용되었으며, 1.9.20의 주요 내용은 다음과 같습니다:</p><ul><li><a href="#full-parallel-mark-to-reduce-the-pause-time-for-the-gc">GC 일시 중지 시간 단축을 위한 완전 병렬 마크</a></li><li><a href="#tracking-memory-in-big-chunks-to-improve-the-allocation-performance">할당 성능 향상을 위해 메모리를 큰 청크로 추적</a></li></ul><h4 id="gc-일시-중지-시간-단축을-위한-완전-병렬-마크" tabindex="-1">GC 일시 중지 시간 단축을 위한 완전 병렬 마크 <a class="header-anchor" href="#gc-일시-중지-시간-단축을-위한-완전-병렬-마크" aria-label="Permalink to &quot;GC 일시 중지 시간 단축을 위한 완전 병렬 마크&quot;">​</a></h4><p>이전에는 기본 가비지 컬렉터가 부분적인 병렬 마크만 수행했습니다. 뮤테이터(mutator) 스레드가 일시 중지되면, 스레드 로컬 변수 및 호출 스택과 같은 자체 루트에서 GC 시작을 마크했습니다. 그 동안 별도의 GC 스레드는 전역 루트와, 네이티브 코드를 활발히 실행 중이어서 일시 중지되지 않은 모든 뮤테이터의 루트를 마크하는 역할을 했습니다.</p><p>이러한 접근 방식은 전역 객체의 수가 제한적이고 뮤테이터 스레드가 Kotlin 코드를 실행하는 실행 가능 상태에서 상당한 시간을 보내는 경우에 잘 작동했습니다. 하지만 일반적인 iOS 애플리케이션의 경우는 그렇지 않습니다.</p><p>이제 GC는 일시 중지된 뮤테이터, GC 스레드 및 선택적 마커 스레드를 결합하여 마크 큐를 처리하는 완전 병렬 마크를 사용합니다. 기본적으로 마킹(marking) 프로세스는 다음을 통해 수행됩니다:</p><ul><li>일시 중지된 뮤테이터. 자신의 루트를 처리한 후 코드를 활발히 실행하지 않을 때 유휴 상태로 있는 대신, 전체 마킹 프로세스에 기여합니다.</li><li>GC 스레드. 이는 최소한 하나의 스레드가 마킹을 수행하도록 보장합니다.</li></ul><p>이 새로운 접근 방식은 마킹 프로세스를 더 효율적으로 만들어 GC의 일시 중지 시간을 단축합니다.</p><h4 id="할당-성능-향상을-위해-메모리를-큰-청크로-추적" tabindex="-1">할당 성능 향상을 위해 메모리를 큰 청크로 추적 <a class="header-anchor" href="#할당-성능-향상을-위해-메모리를-큰-청크로-추적" aria-label="Permalink to &quot;할당 성능 향상을 위해 메모리를 큰 청크로 추적&quot;">​</a></h4><p>이전에는 GC 스케줄러가 각 객체의 할당을 개별적으로 추적했습니다. 그러나 새로운 기본 커스텀 할당자나 <code>mimalloc</code> 메모리 할당자 모두 각 객체에 대해 별도의 저장 공간을 할당하지 않습니다. 이들은 여러 객체를 위해 한 번에 큰 영역을 할당합니다.</p><p>Kotlin 1.9.20에서는 GC가 개별 객체 대신 영역을 추적합니다. 이는 각 할당에서 수행되는 작업 수를 줄여 작은 객체 할당 속도를 높이고, 따라서 가비지 컬렉터의 메모리 사용량을 최소화하는 데 도움이 됩니다.</p><h3 id="klib-아티팩트의-점진적-컴파일" tabindex="-1"><code>klib</code> 아티팩트의 점진적 컴파일 <a class="header-anchor" href="#klib-아티팩트의-점진적-컴파일" aria-label="Permalink to &quot;\`klib\` 아티팩트의 점진적 컴파일&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>이 기능은 <a href="/ko/kotlin/components-stability#stability-levels-explained">Experimental</a> (실험적 기능)입니다. 언제든지 삭제되거나 변경될 수 있습니다. 옵트인(opt-in)이 필요합니다(자세한 내용은 아래 참조). 평가 목적으로만 사용해야 합니다. <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a>에 대한 피드백을 주시면 감사하겠습니다.</p></div><p>Kotlin 1.9.20은 Kotlin/Native를 위한 새로운 컴파일 시간 최적화를 도입합니다. <code>klib</code> 아티팩트의 네이티브 코드 컴파일은 이제 부분적으로 점진적입니다.</p><p>디버그 모드에서 Kotlin 소스 코드를 네이티브 바이너리로 컴파일할 때, 컴파일은 두 단계를 거칩니다:</p><ol><li>소스 코드는 <code>klib</code> 아티팩트로 컴파일됩니다.</li><li><code>klib</code> 아티팩트는 의존성과 함께 바이너리로 컴파일됩니다.</li></ol><p>두 번째 단계의 컴파일 시간을 최적화하기 위해 팀은 이미 의존성에 대한 컴파일러 캐시를 구현했습니다. 이들은 네이티브 코드로 한 번만 컴파일되며, 그 결과는 바이너리가 컴파일될 때마다 재사용됩니다. 하지만 프로젝트 소스에서 빌드된 <code>klib</code> 아티팩트는 프로젝트 변경 시 항상 네이티브 코드로 완전히 재컴파일되었습니다.</p><p>새로운 점진적 컴파일을 사용하면, 프로젝트 모듈 변경이 소스 코드의 <code>klib</code> 아티팩트 부분 재컴파일만 유발하는 경우, <code>klib</code>의 일부만 바이너리로 다시 컴파일됩니다.</p><p>점진적 컴파일을 활성화하려면 <code>gradle.properties</code> 파일에 다음 옵션을 추가하세요:</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.incremental.native=true</span></span></code></pre></div><p>문제가 발생하면 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a>에 보고해 주세요.</p><h3 id="라이브러리-연결-linkage-문제-관리" tabindex="-1">라이브러리 연결(linkage) 문제 관리 <a class="header-anchor" href="#라이브러리-연결-linkage-문제-관리" aria-label="Permalink to &quot;라이브러리 연결(linkage) 문제 관리&quot;">​</a></h3><p>이번 릴리스에서는 Kotlin/Native 컴파일러가 Kotlin 라이브러리 내의 연결(linkage) 문제를 처리하는 방식이 개선되었습니다. 이제 오류 메시지에 해시(hash) 대신 시그니처 이름(signature name)을 사용하여 더 읽기 쉬운 선언이 포함되어 문제를 더 쉽게 찾고 해결할 수 있습니다. 다음은 예시입니다:</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>No function found for symbol &#39;org.samples/MyClass.removedFunction|removedFunction(kotlin.Int;kotlin.String){}[0]&#39;</span></span></code></pre></div><p>Kotlin/Native 컴파일러는 서드파티 Kotlin 라이브러리 간의 연결(linkage) 문제를 감지하고 런타임에 오류를 보고합니다. 한 서드파티 Kotlin 라이브러리의 작성자가 다른 서드파티 Kotlin 라이브러리가 사용하는 실험적 API에 호환되지 않는 변경을 가하는 경우 이러한 문제가 발생할 수 있습니다.</p><p>Kotlin 1.9.20부터 컴파일러는 기본적으로 연결 문제를 자동으로 감지합니다. 프로젝트에서 이 설정을 조정할 수 있습니다:</p><ul><li>이러한 문제를 컴파일 로그에 기록하려면 <code>-Xpartial-linkage-loglevel=WARNING</code> 컴파일러 옵션을 사용하여 경고를 활성화하세요.</li><li>또한 <code>-Xpartial-linkage-loglevel=ERROR</code>를 사용하여 보고된 경고의 심각도를 컴파일 오류로 높일 수도 있습니다. 이 경우 컴파일이 실패하고 컴파일 로그에 모든 오류가 표시됩니다. 이 옵션을 사용하여 연결 문제를 더 자세히 검토하세요.</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// An example of passing compiler options in a Gradle build file:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    macosX64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;native&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        binaries.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        compilations.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configureEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            compilerOptions.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // To report linkage issues as warnings:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                freeCompilerArgs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xpartial-linkage-loglevel=WARNING&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // To raise linkage warnings to errors:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                freeCompilerArgs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-Xpartial-linkage-loglevel=ERROR&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>이 기능에 예상치 못한 문제가 발생하면 언제든지 <code>-Xpartial-linkage=disable</code> 컴파일러 옵션을 사용하여 옵트아웃(opt out)할 수 있습니다. 이러한 경우 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">이슈 트래커</a>에 주저하지 말고 보고해 주세요.</p><h3 id="클래스-생성자-호출-시-컴패니언-객체-초기화" tabindex="-1">클래스 생성자 호출 시 컴패니언 객체 초기화 <a class="header-anchor" href="#클래스-생성자-호출-시-컴패니언-객체-초기화" aria-label="Permalink to &quot;클래스 생성자 호출 시 컴패니언 객체 초기화&quot;">​</a></h3><p>Kotlin 1.9.20부터 Kotlin/Native 백엔드는 클래스 생성자에서 컴패니언 객체에 대한 정적 초기화자(static initializer)를 호출합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Greeting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    companion</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, Kotlin!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> start </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Greeting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;Hello, Kotlin!&quot; 출력</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>이제 이 동작은 Kotlin/JVM과 통일되었습니다. Kotlin/JVM에서는 Java 정적 초기화자의 의미 체계와 일치하는 해당 클래스가 로드(해결)될 때 컴패니언 객체가 초기화됩니다.</p><p>이제 이 기능의 구현이 플랫폼 간에 더 일관성이 있어 Kotlin Multiplatform 프로젝트에서 코드를 공유하기가 더 쉬워졌습니다.</p><h3 id="모든-cinterop-선언에-대한-옵트인-opt-in-요구-사항" tabindex="-1">모든 cinterop 선언에 대한 옵트인(opt-in) 요구 사항 <a class="header-anchor" href="#모든-cinterop-선언에-대한-옵트인-opt-in-요구-사항" aria-label="Permalink to &quot;모든 cinterop 선언에 대한 옵트인(opt-in) 요구 사항&quot;">​</a></h3><p>Kotlin 1.9.20부터 <code>cinterop</code> 도구가 C 및 Objective-C 라이브러리(예: libcurl, libxml)에서 생성한 모든 Kotlin 선언은 <code>@ExperimentalForeignApi</code>로 표시됩니다. 옵트인 어노테이션이 없으면 코드가 컴파일되지 않습니다.</p><p>이 요구 사항은 C 및 Objective-C 라이브러리 임포트의 <a href="/ko/kotlin/components-stability#stability-levels-explained">Experimental</a> 상태를 반영합니다. 프로젝트의 특정 영역으로 사용을 제한하는 것이 좋습니다. 이는 임포트 안정화 작업이 시작되면 마이그레이션을 더 쉽게 해줄 것입니다.</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Kotlin/Native와 함께 제공되는 네이티브 플랫폼 라이브러리(예: Foundation, UIKit, POSIX)의 경우, 일부 API에만 <code>@ExperimentalForeignApi</code>를 통한 옵트인(opt-in)이 필요합니다. 이 경우, 옵트인 요구 사항에 대한 경고가 표시됩니다.</p></div><h3 id="링커-오류에-대한-커스텀-메시지" tabindex="-1">링커 오류에 대한 커스텀 메시지 <a class="header-anchor" href="#링커-오류에-대한-커스텀-메시지" aria-label="Permalink to &quot;링커 오류에 대한 커스텀 메시지&quot;">​</a></h3><p>라이브러리 작성자인 경우, 이제 커스텀 메시지를 통해 사용자가 링커 오류를 해결하도록 도울 수 있습니다.</p><p>Kotlin 라이브러리가 C 또는 Objective-C 라이브러리에 의존하는 경우(예: <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-cocoapods-overview.html" target="_blank" rel="noreferrer">CocoaPods 통합</a> 사용), 해당 라이브러리 사용자는 이러한 종속 라이브러리를 로컬 머신에 가지고 있거나 프로젝트 빌드 스크립트에 명시적으로 구성해야 합니다. 그렇지 않은 경우, 사용자는 혼란스러운 &quot;Framework not found&quot; 메시지를 받곤 했습니다.</p><p>이제 컴파일 실패 메시지에 특정 지침이나 링크를 제공할 수 있습니다. 이를 위해 <code>-Xuser-setup-hint</code> 컴파일러 옵션을 <code>cinterop</code>에 전달하거나, <code>.def</code> 파일에 <code>userSetupHint=message</code> 속성을 추가하세요.</p><h3 id="레거시-메모리-관리자-제거" tabindex="-1">레거시 메모리 관리자 제거 <a class="header-anchor" href="#레거시-메모리-관리자-제거" aria-label="Permalink to &quot;레거시 메모리 관리자 제거&quot;">​</a></h3><p><a href="/ko/kotlin/native-memory-manager">새로운 메모리 관리자</a>는 Kotlin 1.6.20에서 도입되어 1.7.20에서 기본값이 되었습니다. 그 이후로 추가 업데이트 및 성능 개선이 이루어졌으며, 이제 안정화되었습니다.</p><p>이제 사용 중단 주기를 완료하고 레거시 메모리 관리자를 제거할 때가 되었습니다. 아직 사용 중이라면, <code>gradle.properties</code>에서 <code>kotlin.native.binary.memoryModel=strict</code> 옵션을 제거하고 <a href="/ko/kotlin/native-migration-guide">마이그레이션 가이드</a>에 따라 필요한 변경 사항을 적용하세요.</p><h3 id="타겟-티어-tier-정책-변경" tabindex="-1">타겟 티어(tier) 정책 변경 <a class="header-anchor" href="#타겟-티어-tier-정책-변경" aria-label="Permalink to &quot;타겟 티어(tier) 정책 변경&quot;">​</a></h3><p>저희는 <a href="/ko/kotlin/native-target-support#tier-1">티어 1 지원</a>에 대한 요구 사항을 업그레이드하기로 결정했습니다. Kotlin 팀은 이제 티어 1에 해당하는 타겟에 대해 컴파일러 릴리스 간 소스 및 바이너리 호환성을 제공하는 데 전념하고 있습니다. 또한 컴파일 및 실행이 가능하도록 CI 도구로 정기적으로 테스트되어야 합니다. 현재 티어 1에는 macOS 호스트를 위한 다음 타겟이 포함됩니다:</p><ul><li><code>macosX64</code></li><li><code>macosArm64</code></li><li><code>iosSimulatorArm64</code></li><li><code>iosX64</code></li></ul><p>Kotlin 1.9.20에서는 이전에 사용이 중단된 여러 타겟도 제거했습니다. 즉,</p><ul><li><code>iosArm32</code></li><li><code>watchosX86</code></li><li><code>wasm32</code></li><li><code>mingwX86</code></li><li><code>linuxMips32</code></li><li><code>linuxMipsel32</code></li></ul><p>현재 <a href="/ko/kotlin/native-target-support">지원되는 타겟</a>의 전체 목록을 참조하세요.</p><h2 id="kotlin-multiplatform" tabindex="-1">Kotlin Multiplatform <a class="header-anchor" href="#kotlin-multiplatform" aria-label="Permalink to &quot;Kotlin Multiplatform&quot;">​</a></h2><p>Kotlin 1.9.20은 Kotlin Multiplatform의 안정화에 중점을 두고 있으며, 새로운 프로젝트 위자드 및 기타 주목할 만한 기능으로 개발자 경험을 개선하기 위한 새로운 단계를 밟고 있습니다:</p><ul><li><a href="#kotlin-multiplatform-is-stable">Kotlin Multiplatform 안정화(Stable)</a></li><li><a href="#template-for-configuring-multiplatform-projects">멀티플랫폼 프로젝트 구성을 위한 템플릿</a></li><li><a href="#new-project-wizard">새로운 프로젝트 위자드</a></li><li><a href="#full-support-for-the-gradle-configuration-cache-in-kotlin-multiplatform">Gradle 설정 캐시(Configuration cache) 완벽 지원</a></li><li><a href="#easier-configuration-of-new-standard-library-versions-in-gradle">Gradle에서 새로운 표준 라이브러리 버전 더 쉽게 구성</a></li><li><a href="#default-support-for-third-party-cinterop-libraries">서드파티 cinterop 라이브러리 기본 지원</a></li><li><a href="#support-for-kotlin-native-compilation-caches-in-compose-multiplatform-projects">Compose Multiplatform 프로젝트에서 Kotlin/Native 컴파일 캐시 지원</a></li><li><a href="#compatibility-guidelines">호환성 가이드라인</a></li></ul><h3 id="kotlin-multiplatform-안정화-stable" tabindex="-1">Kotlin Multiplatform 안정화(Stable) <a class="header-anchor" href="#kotlin-multiplatform-안정화-stable" aria-label="Permalink to &quot;Kotlin Multiplatform 안정화(Stable)&quot;">​</a></h3><p>1.9.20 릴리스는 Kotlin의 발전에 있어 중요한 이정표를 세웠습니다: <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/get-started.html" target="_blank" rel="noreferrer">Kotlin Multiplatform</a>이 드디어 안정화(Stable)되었습니다. 이는 이 기술이 프로젝트에서 안전하게 사용될 수 있으며, 프로덕션 준비가 100% 완료되었음을 의미합니다. 또한 Kotlin Multiplatform의 향후 개발은 엄격한 <a href="https://kotlinfoundation.org/language-committee-guidelines/" target="_blank" rel="noreferrer">하위 호환성 규칙</a>에 따라 계속될 것임을 의미합니다.</p><p>Kotlin Multiplatform의 일부 고급 기능은 아직 발전 중임을 유의하세요. 이러한 기능을 사용할 때, 사용 중인 기능의 현재 안정화 상태를 설명하는 경고가 표시될 것입니다. IntelliJ IDEA에서 실험적 기능을 사용하기 전에, <strong>Settings</strong> | <strong>Advanced Settings</strong> | <strong>Kotlin</strong> | <strong>Experimental Multiplatform</strong>에서 명시적으로 활성화해야 합니다.</p><ul><li>Kotlin Multiplatform 안정화 및 향후 계획에 대해 자세히 알아보려면 <a href="https://blog.jetbrains.com/kotlin/2023/11/kotlin-multiplatform-stable/" target="_blank" rel="noreferrer">Kotlin 블로그</a>를 방문하세요.</li><li>안정화 과정에서 어떤 중요한 변경 사항이 있었는지 확인하려면 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-compatibility-guide.html" target="_blank" rel="noreferrer">멀티플랫폼 호환성 가이드</a>를 참조하세요.</li><li>이번 릴리스에서 부분적으로 안정화된 Kotlin Multiplatform의 중요한 부분인 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-expect-actual.html" target="_blank" rel="noreferrer">expected 및 actual 선언 메커니즘</a>에 대해 읽어보세요.</li></ul><h3 id="멀티플랫폼-프로젝트-구성을-위한-템플릿" tabindex="-1">멀티플랫폼 프로젝트 구성을 위한 템플릿 <a class="header-anchor" href="#멀티플랫폼-프로젝트-구성을-위한-템플릿" aria-label="Permalink to &quot;멀티플랫폼 프로젝트 구성을 위한 템플릿&quot;">​</a></h3><p>Kotlin 1.9.20부터 Kotlin Gradle 플러그인은 인기 있는 멀티플랫폼 시나리오를 위해 공유 소스 세트를 자동으로 생성합니다. 프로젝트 설정이 이러한 시나리오 중 하나인 경우, 소스 세트 계층을 수동으로 구성할 필요가 없습니다. 프로젝트에 필요한 타겟을 명시적으로 지정하기만 하면 됩니다.</p><p>이제 Kotlin Gradle 플러그인의 새로운 기능인 기본 계층 템플릿 덕분에 설정이 더 쉬워졌습니다. 이것은 플러그인에 내장된 사전 정의된 소스 세트 계층 템플릿입니다. 선언한 타겟에 대해 Kotlin이 자동으로 생성하는 중간 소스 세트를 포함합니다. <a href="#see-the-full-hierarchy-template">전체 템플릿을 참조하세요</a>.</p><h4 id="더-쉽게-프로젝트-생성" tabindex="-1">더 쉽게 프로젝트 생성 <a class="header-anchor" href="#더-쉽게-프로젝트-생성" aria-label="Permalink to &quot;더 쉽게 프로젝트 생성&quot;">​</a></h4><p>Android 및 iPhone 기기를 모두 타겟팅하고 Apple 실리콘 MacBook에서 개발되는 멀티플랫폼 프로젝트를 고려해 보세요. 다양한 Kotlin 버전 간에 이 프로젝트가 어떻게 설정되는지 비교해 보세요:</p><table><tr><td>Kotlin 1.9.0 및 이전 버전 (표준 설정)</td><td>Kotlin 1.9.20</td></tr><tr><td><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    androidTarget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosSimulatorArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> commonMain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> getting</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> iosMain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> creating</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependsOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(commonMain)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> iosArm64Main </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependsOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(iosMain)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> iosSimulatorArm64Main </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependsOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(iosMain)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></td><td><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    androidTarget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosSimulatorArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // The iosMain source set is created automatically</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></td></tr></table><p>기본 계층 템플릿을 사용하면 프로젝트를 설정하는 데 필요한 상용구 코드의 양이 상당히 줄어드는 것을 확인할 수 있습니다.</p><p>코드에서 <code>androidTarget</code>, <code>iosArm64</code>, <code>iosSimulatorArm64</code> 타겟을 선언하면 Kotlin Gradle 플러그인은 템플릿에서 적합한 공유 소스 세트를 찾아 자동으로 생성해 줍니다. 결과적인 계층 구조는 다음과 같습니다:</p>`,111)),a[2]||(a[2]=i("p",null,[i("img",{src:l,alt:"An example of the default target hierarchy in use",thumbnail:"true",width:"350","thumbnail-same-file":"true"})],-1)),a[3]||(a[3]=i("p",null,"녹색 소스 세트는 실제로 프로젝트에 생성되어 포함되며, 기본 템플릿의 회색 소스 세트는 무시됩니다.",-1)),a[4]||(a[4]=i("h4",{id:"소스-세트에-대한-자동-완성-사용",tabindex:"-1"},[n("소스 세트에 대한 자동 완성 사용 "),i("a",{class:"header-anchor",href:"#소스-세트에-대한-자동-완성-사용","aria-label":'Permalink to "소스 세트에 대한 자동 완성 사용"'},"​")],-1)),a[5]||(a[5]=i("p",null,"생성된 프로젝트 구조로 작업하기 쉽게 하기 위해, IntelliJ IDEA는 이제 기본 계층 템플릿으로 생성된 소스 세트에 대해 자동 완성을 제공합니다:",-1)),a[6]||(a[6]=i("img",{src:t,alt:"IDE completion for source set names",width:"350","preview-src":"multiplatform-hierarchy-completion.png"},null,-1)),a[7]||(a[7]=s(`<p>또한 Kotlin은 해당 타겟을 선언하지 않아 존재하지 않는 소스 세트에 접근하려고 하면 경고를 표시합니다. 아래 예시에는 JVM 타겟이 없습니다 (동일하지 않은 <code>androidTarget</code>만 있음). 하지만 <code>jvmMain</code> 소스 세트를 사용해보고 어떤 일이 발생하는지 확인해 봅시다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    androidTarget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosSimulatorArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        jvmMain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>이 경우, Kotlin은 빌드 로그에 경고를 보고합니다:</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>w: Accessed &#39;source set jvmMain&#39; without registering the jvm target:</span></span>
<span class="line"><span>  kotlin {</span></span>
<span class="line"><span>      jvm() /* &lt;- register the &#39;jvm&#39; target */</span></span>
<span class="line"><span></span></span>
<span class="line"><span>      sourceSets.jvmMain.dependencies {</span></span>
<span class="line"><span></span></span>
<span class="line"><span>      }</span></span>
<span class="line"><span>  }</span></span></code></pre></div><h4 id="타겟-계층-설정" tabindex="-1">타겟 계층 설정 <a class="header-anchor" href="#타겟-계층-설정" aria-label="Permalink to &quot;타겟 계층 설정&quot;">​</a></h4><p>Kotlin 1.9.20부터 기본 계층 템플릿이 자동으로 활성화됩니다. 대부분의 경우 추가 설정은 필요하지 않습니다.</p><p>그러나 1.9.20 이전에 생성된 기존 프로젝트를 마이그레이션하는 경우, 이전에 <code>dependsOn()</code> 호출을 사용하여 중간 소스를 수동으로 도입했다면 경고가 발생할 수 있습니다. 이 문제를 해결하려면 다음을 수행하세요:</p><ul><li><p>중간 소스 세트가 현재 기본 계층 템플릿에 의해 커버되는 경우, 모든 수동 <code>dependsOn()</code> 호출과 <code>by creating</code> 구문으로 생성된 소스 세트를 제거하세요.</p><p>모든 기본 소스 세트 목록을 확인하려면 <a href="#see-the-full-hierarchy-template">전체 계층 템플릿</a>을 참조하세요.</p></li><li><p>기본 계층 템플릿이 제공하지 않는 추가 소스 세트(예: macOS와 JVM 타겟 간에 코드를 공유하는 소스 세트)를 사용하고 싶다면, <code>applyDefaultHierarchyTemplate()</code>을 사용하여 템플릿을 명시적으로 다시 적용하고 <code>dependsOn()</code>을 사용하여 평소와 같이 추가 소스 세트를 수동으로 구성하여 계층 구조를 조정하세요:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    macosArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosSimulatorArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Apply the default hierarchy explicitly. It&#39;ll create, for example, the iosMain source set:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    applyDefaultHierarchyTemplate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Create an additional jvmAndMacos source set</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jvmAndMacos </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> creating</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependsOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(commonMain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        macosArm64Main.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependsOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(jvmAndMacos)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        jvmMain.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependsOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(jvmAndMacos)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>프로젝트에 템플릿에서 생성된 것과 정확히 같은 이름을 가지지만 서로 다른 타겟 세트 간에 공유되는 소스 세트가 이미 있는 경우, 현재 템플릿의 소스 세트 간 기본 <code>dependsOn</code> 관계를 수정할 방법이 없습니다.</p><p>이 경우, 기본 계층 템플릿이나 수동으로 생성된 소스 세트 중에서 목적에 맞는 다른 소스 세트를 찾는 방법이 있습니다. 다른 방법은 템플릿에서 완전히 옵트아웃(opt out)하는 것입니다.</p><p>옵트아웃하려면 <code>gradle.properties</code>에 <code>kotlin.mpp.applyDefaultHierarchyTemplate=false</code>를 추가하고 다른 모든 소스 세트를 수동으로 구성하세요.</p><p>저희는 현재 이러한 경우의 설정 프로세스를 간소화하기 위해 자신만의 계층 템플릿을 생성하기 위한 API를 개발 중입니다.</p></li></ul>`,8)),a[8]||(a[8]=i("h4",{"initial-collapse-state":"collapsed",collapsible:"true",id:"전체-계층-템플릿-보기",tabindex:"-1"},[n("전체 계층 템플릿 보기 "),i("a",{class:"header-anchor",href:"#전체-계층-템플릿-보기","aria-label":'Permalink to "전체 계층 템플릿 보기 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),a[9]||(a[9]=s('<p>프로젝트가 컴파일될 타겟을 선언하면, 플러그인은 템플릿에서 해당하는 공유 소스 세트를 선택하여 프로젝트에 생성합니다.</p><p><img src="'+p+'" alt="Default hierarchy template"></p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>이 예시는 프로젝트의 프로덕션 부분만 보여주며, <code>Main</code> 접미사를 생략했습니다 (예: <code>commonMain</code> 대신 <code>common</code> 사용). 하지만 <code>*Test</code> 소스에서도 모든 것이 동일합니다.</p></div><h3 id="새로운-프로젝트-위자드" tabindex="-1">새로운 프로젝트 위자드 <a class="header-anchor" href="#새로운-프로젝트-위자드" aria-label="Permalink to &quot;새로운 프로젝트 위자드&quot;">​</a></h3><p>JetBrains 팀은 크로스 플랫폼 프로젝트를 생성하는 새로운 방법인 <a href="https://kmp.jetbrains.com" target="_blank" rel="noreferrer">Kotlin Multiplatform 웹 위자드</a>를 소개합니다.</p><p>새로운 Kotlin Multiplatform 위자드의 첫 번째 구현은 가장 인기 있는 Kotlin Multiplatform 사용 사례를 다룹니다. 이전 프로젝트 템플릿에 대한 모든 피드백을 통합하여 아키텍처를 가능한 한 견고하고 신뢰할 수 있게 만들었습니다.</p><p>새로운 위자드는 통합된 백엔드와 다양한 프론트엔드를 가질 수 있는 분산 아키텍처를 가지고 있으며, 웹 버전이 첫 단계입니다. 저희는 향후 IDE 버전 구현과 명령줄 도구 생성을 모두 고려하고 있습니다. 웹에서는 항상 위자드의 최신 버전을 사용할 수 있지만, IDE에서는 다음 릴리스를 기다려야 합니다.</p><p>새로운 위자드를 사용하면 프로젝트 설정이 그 어느 때보다 쉬워집니다. 모바일, 서버, 데스크톱 개발을 위한 타겟 플랫폼을 선택하여 필요에 맞게 프로젝트를 맞춤 설정할 수 있습니다. 향후 릴리스에서는 웹 개발 지원도 추가할 계획입니다.</p><img src="'+o+'" alt="Multiplatform web wizard" width="400"><p>새로운 프로젝트 위자드는 이제 Kotlin으로 크로스 플랫폼 프로젝트를 생성하는 선호되는 방법입니다. 1.9.20부터 Kotlin 플러그인은 IntelliJ IDEA에서 더 이상 <strong>Kotlin Multiplatform</strong> 프로젝트 위자드를 제공하지 않습니다.</p><p>새로운 위자드는 초기 설정을 쉽게 안내하여 온보딩 프로세스를 훨씬 원활하게 만듭니다. 문제가 발생하면 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a>에 보고하여 위자드 사용 경험을 개선하는 데 도움을 주세요.</p><a href="https://kmp.jetbrains.com"><img src="'+r+`" alt="Create a project" style=""></a><h3 id="kotlin-multiplatform에서-gradle-설정-캐시-configuration-cache-완벽-지원" tabindex="-1">Kotlin Multiplatform에서 Gradle 설정 캐시(Configuration cache) 완벽 지원 <a class="header-anchor" href="#kotlin-multiplatform에서-gradle-설정-캐시-configuration-cache-완벽-지원" aria-label="Permalink to &quot;Kotlin Multiplatform에서 Gradle 설정 캐시(Configuration cache) 완벽 지원&quot;">​</a></h3><p>이전에는 Kotlin 멀티플랫폼 라이브러리에서 사용할 수 있었던 Gradle 설정 캐시의 <a href="/ko/kotlin/whatsnew19#preview-of-the-gradle-configuration-cache">미리보기</a>를 도입했습니다. 1.9.20에서는 Kotlin Multiplatform 플러그인이 한 단계 더 나아갑니다.</p><p>이제 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-cocoapods-dsl-reference.html" target="_blank" rel="noreferrer">Kotlin CocoaPods Gradle 플러그인</a>뿐만 아니라 <code>embedAndSignAppleFrameworkForXcode</code>와 같이 Xcode 빌드에 필요한 통합 작업에서도 Gradle 설정 캐시를 지원합니다.</p><p>이제 모든 멀티플랫폼 프로젝트에서 개선된 빌드 시간을 활용할 수 있습니다. Gradle 설정 캐시는 구성 단계의 결과를 후속 빌드에 재사용하여 빌드 프로세스를 가속화합니다. 자세한 내용과 설정 지침은 <a href="https://docs.gradle.org/current/userguide/configuration_cache.html#config_cache:usage" target="_blank" rel="noreferrer">Gradle 문서</a>를 참조하세요.</p><h3 id="gradle에서-새로운-표준-라이브러리-버전-더-쉽게-구성" tabindex="-1">Gradle에서 새로운 표준 라이브러리 버전 더 쉽게 구성 <a class="header-anchor" href="#gradle에서-새로운-표준-라이브러리-버전-더-쉽게-구성" aria-label="Permalink to &quot;Gradle에서 새로운 표준 라이브러리 버전 더 쉽게 구성&quot;">​</a></h3><p>멀티플랫폼 프로젝트를 생성하면 표준 라이브러리(<code>stdlib</code>)에 대한 의존성이 각 소스 세트에 자동으로 추가됩니다. 이는 멀티플랫폼 프로젝트를 시작하는 가장 쉬운 방법입니다.</p><p>이전에는 표준 라이브러리에 대한 의존성을 수동으로 구성하려면 각 소스 세트에 대해 개별적으로 구성해야 했습니다. <code>kotlin-stdlib:1.9.20</code>부터는 <code>commonMain</code> 루트 소스 세트에서 의존성을 <strong>한 번만</strong> 구성하면 됩니다:</p><table><tr><td>표준 라이브러리 버전 1.9.10 및 이전</td><td>표준 라이브러리 버전 1.9.20</td></tr><tr><td><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // For the common source set</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> commonMain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.kotlin:kotlin-stdlib-common:1.9.10&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // For the JVM source set</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jvmMain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.kotlin:kotlin-stdlib:1.9.10&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // For the JS source set</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jsMain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.kotlin:kotlin-stdlib-js:1.9.10&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></td><td><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        commonMain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                implementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;org.jetbrains.kotlin:kotlin-stdlib:1.9.20&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></td></tr></table><p>이러한 변경은 표준 라이브러리의 Gradle 메타데이터에 새로운 정보가 포함됨으로써 가능해졌습니다. 이를 통해 Gradle은 다른 소스 세트에 대한 올바른 표준 라이브러리 아티팩트를 자동으로 해결할 수 있습니다.</p><h3 id="서드파티-cinterop-라이브러리-기본-지원" tabindex="-1">서드파티 cinterop 라이브러리 기본 지원 <a class="header-anchor" href="#서드파티-cinterop-라이브러리-기본-지원" aria-label="Permalink to &quot;서드파티 cinterop 라이브러리 기본 지원&quot;">​</a></h3><p>Kotlin 1.9.20은 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-cocoapods-overview.html" target="_blank" rel="noreferrer">Kotlin CocoaPods Gradle</a> 플러그인이 적용된 프로젝트에서 모든 cinterop 의존성에 대해 기본 지원(옵트인 지원 대신)을 추가합니다.</p><p>이는 이제 플랫폼별 의존성에 제한받지 않고 더 많은 네이티브 코드를 공유할 수 있음을 의미합니다. 예를 들어, <code>iosMain</code> 공유 소스 세트에 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-cocoapods-libraries.html" target="_blank" rel="noreferrer">Pod 라이브러리에 대한 의존성</a>을 추가할 수 있습니다.</p><p>이전에는 Kotlin/Native 배포판과 함께 제공되는 <a href="/ko/kotlin/native-platform-libs">플랫폼별 라이브러리</a>(예: Foundation, UIKit, POSIX)에서만 작동했습니다. 이제 모든 서드파티 Pod 라이브러리는 기본적으로 공유 소스 세트에서 사용할 수 있습니다. 더 이상 별도의 Gradle 속성을 지정하여 지원할 필요가 없습니다.</p><h3 id="compose-multiplatform-프로젝트에서-kotlin-native-컴파일-캐시-지원" tabindex="-1">Compose Multiplatform 프로젝트에서 Kotlin/Native 컴파일 캐시 지원 <a class="header-anchor" href="#compose-multiplatform-프로젝트에서-kotlin-native-컴파일-캐시-지원" aria-label="Permalink to &quot;Compose Multiplatform 프로젝트에서 Kotlin/Native 컴파일 캐시 지원&quot;">​</a></h3><p>이번 릴리스는 Compose Multiplatform 컴파일러 플러그인과의 호환성 문제를 해결하며, 주로 iOS용 Compose Multiplatform 프로젝트에 영향을 미쳤습니다.</p><p>이 문제를 해결하기 위해 <code>kotlin.native.cacheKind=none</code> Gradle 속성을 사용하여 캐싱을 비활성화해야 했습니다. 그러나 이 해결 방법은 성능 저하를 초래했습니다. Kotlin/Native 컴파일러에서 캐싱이 작동하지 않아 컴파일 시간이 느려졌습니다.</p><p>이제 문제가 해결되었으므로, <code>gradle.properties</code> 파일에서 <code>kotlin.native.cacheKind=none</code>을 제거하고 Compose Multiplatform 프로젝트에서 개선된 컴파일 시간을 누릴 수 있습니다.</p><p>컴파일 시간 개선에 대한 더 많은 팁은 <a href="/ko/kotlin/native-improving-compilation-time">Kotlin/Native 문서</a>를 참조하세요.</p><h3 id="호환성-가이드라인" tabindex="-1">호환성 가이드라인 <a class="header-anchor" href="#호환성-가이드라인" aria-label="Permalink to &quot;호환성 가이드라인&quot;">​</a></h3><p>프로젝트를 구성할 때, Kotlin Multiplatform Gradle 플러그인과 사용 가능한 Gradle, Xcode, Android Gradle 플러그인(AGP) 버전의 호환성을 확인하세요:</p><table tabindex="0"><thead><tr><th>Kotlin Multiplatform Gradle 플러그인</th><th>Gradle</th><th>Android Gradle 플러그인</th><th>Xcode</th></tr></thead><tbody><tr><td>1.9.20</td><td>7.5 및 이후</td><td>7.4.2–8.2</td><td>15.0. 자세한 내용은 아래 참조</td></tr></tbody></table><p>이번 릴리스부터 Xcode의 권장 버전은 15.0입니다. Xcode 15.0과 함께 제공되는 라이브러리는 완전히 지원되며, Kotlin 코드의 어느 곳에서든 접근할 수 있습니다.</p><p>그러나 Xcode 14.3은 대부분의 경우 여전히 작동해야 합니다. 로컬 머신에서 버전 14.3을 사용하는 경우, Xcode 15와 함께 제공되는 라이브러리는 보이지만 접근할 수 없다는 점을 명심하세요.</p><h2 id="kotlin-wasm" tabindex="-1">Kotlin/Wasm <a class="header-anchor" href="#kotlin-wasm" aria-label="Permalink to &quot;Kotlin/Wasm&quot;">​</a></h2><p>1.9.20에서 Kotlin Wasm은 안정화 <a href="/ko/kotlin/components-stability">알파(Alpha) 수준</a>에 도달했습니다.</p><ul><li><a href="#compatibility-with-wasm-gc-phase-4-and-final-opcodes">Wasm GC 4단계 및 최종 Opcode와의 호환성</a></li><li><a href="#new-wasm-wasi-target-and-the-renaming-of-the-wasm-target-to-wasm-js">새로운 <code>wasm-wasi</code> 타겟 및 <code>wasm</code> 타겟의 <code>wasm-js</code>로 이름 변경</a></li><li><a href="#support-for-the-wasi-api-in-the-standard-library">표준 라이브러리에서 WASI API 지원</a></li><li><a href="#kotlin-wasm-api-improvements">Kotlin/Wasm API 개선</a></li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Kotlin Wasm은 <a href="/ko/kotlin/components-stability">Alpha</a> (알파 버전)입니다. 언제든지 변경될 수 있습니다. 평가 목적으로만 사용해야 합니다. <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a>에 대한 피드백을 주시면 감사하겠습니다.</p></div><h3 id="wasm-gc-4단계-및-최종-opcode와의-호환성" tabindex="-1">Wasm GC 4단계 및 최종 Opcode와의 호환성 <a class="header-anchor" href="#wasm-gc-4단계-및-최종-opcode와의-호환성" aria-label="Permalink to &quot;Wasm GC 4단계 및 최종 Opcode와의 호환성&quot;">​</a></h3><p>Wasm GC가 최종 단계로 진행되면서 바이너리 표현에 사용되는 상수 숫자(opcode)에 대한 업데이트가 필요합니다. Kotlin 1.9.20은 최신 opcode를 지원하므로, Wasm 프로젝트를 최신 Kotlin 버전으로 업데이트하는 것을 강력히 권장합니다. 또한 Wasm 환경을 갖춘 최신 버전의 브라우저를 사용하는 것을 권장합니다:</p><ul><li>Chrome 및 Chromium 기반 브라우저의 경우 119 버전 이상.</li><li>Firefox의 경우 119 버전 이상. Firefox 119에서는 <a href="/ko/kotlin/wasm-troubleshooting">Wasm GC를 수동으로 켜야 합니다</a>.</li></ul><h3 id="새로운-wasm-wasi-타겟-및-wasm-타겟의-wasm-js로-이름-변경" tabindex="-1">새로운 <code>wasm-wasi</code> 타겟 및 <code>wasm</code> 타겟의 <code>wasm-js</code>로 이름 변경 <a class="header-anchor" href="#새로운-wasm-wasi-타겟-및-wasm-타겟의-wasm-js로-이름-변경" aria-label="Permalink to &quot;새로운 \`wasm-wasi\` 타겟 및 \`wasm\` 타겟의 \`wasm-js\`로 이름 변경&quot;">​</a></h3><p>이번 릴리스에서는 Kotlin/Wasm을 위한 새로운 타겟인 <code>wasm-wasi</code>를 소개합니다. 또한 <code>wasm</code> 타겟을 <code>wasm-js</code>로 변경합니다. Gradle DSL에서는 이 타겟들을 각각 <code>wasmWasi {}</code>와 <code>wasmJs {}</code>로 사용할 수 있습니다.</p><p>프로젝트에서 이 타겟들을 사용하려면 <code>build.gradle.kts</code> 파일을 업데이트하세요:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    wasmWasi</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    wasmJs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>이전에 도입된 <code>wasm {}</code> 블록은 <code>wasmJs {}</code> 블록으로 대체되어 사용이 중단되었습니다.</p><p>기존 Kotlin/Wasm 프로젝트를 마이그레이션하려면 다음을 수행하세요:</p><ul><li><code>build.gradle.kts</code> 파일에서 <code>wasm {}</code> 블록의 이름을 <code>wasmJs {}</code>로 변경하세요.</li><li>프로젝트 구조에서 <code>wasmMain</code> 디렉토리의 이름을 <code>wasmJsMain</code>으로 변경하세요.</li></ul><h3 id="표준-라이브러리에서-wasi-api-지원" tabindex="-1">표준 라이브러리에서 WASI API 지원 <a class="header-anchor" href="#표준-라이브러리에서-wasi-api-지원" aria-label="Permalink to &quot;표준 라이브러리에서 WASI API 지원&quot;">​</a></h3><p>이번 릴리스에서는 Wasm 플랫폼을 위한 시스템 인터페이스인 <a href="https://github.com/WebAssembly/WASI" target="_blank" rel="noreferrer">WASI</a>를 지원합니다. WASI 지원은 Kotlin/Wasm을 브라우저 외부(예: 서버 측 애플리케이션)에서 사용하기 더 쉽게 만들어주며, 시스템 리소스에 접근하기 위한 표준화된 API 세트를 제공합니다. 또한 WASI는 외부 리소스 접근 시 또 다른 보안 계층인 역량 기반 보안(capability-based security)을 제공합니다.</p><p>Kotlin/Wasm 애플리케이션을 실행하려면 Wasm 가비지 컬렉션(GC)을 지원하는 VM(예: Node.js 또는 Deno)이 필요합니다. Wasmtime, WasmEdge 등은 아직 완전한 Wasm GC 지원을 위해 노력 중입니다.</p><p>WASI 함수를 임포트하려면 <code>@WasmImport</code> 어노테이션을 사용하세요:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.wasm.WasmImport</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@WasmImport</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;wasi_snapshot_preview1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;clock_time_get&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> external</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> wasiRawClockTimeGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(clockId: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, precision: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Long</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, resultPtr: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span></span></code></pre></div><p><a href="https://github.com/Kotlin/kotlin-wasm-examples/tree/main/wasi-example" target="_blank" rel="noreferrer">전체 예시는 GitHub 리포지토리</a>에서 확인할 수 있습니다.</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p><code>wasmWasi</code>를 타겟팅하는 동안에는 <a href="/ko/kotlin/wasm-js-interop">JavaScript와의 상호 운용성</a>을 사용할 수 없습니다.</p></div><h3 id="kotlin-wasm-api-개선" tabindex="-1">Kotlin/Wasm API 개선 <a class="header-anchor" href="#kotlin-wasm-api-개선" aria-label="Permalink to &quot;Kotlin/Wasm API 개선&quot;">​</a></h3><p>이번 릴리스는 Kotlin/Wasm API에 몇 가지 편의성 개선을 제공합니다. 예를 들어, DOM 이벤트 리스너에 값을 반환할 필요가 없습니다:</p><table><tr><td>1.9.20 이전</td><td>1.9.20에서</td></tr><tr><td><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    window.onload </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        document.body?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sayHello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></td><td><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    window.onload </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { document.body?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sayHello</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></td></tr></table><h2 id="gradle" tabindex="-1">Gradle <a class="header-anchor" href="#gradle" aria-label="Permalink to &quot;Gradle&quot;">​</a></h2><p>Kotlin 1.9.20은 Gradle 6.8.3부터 8.1까지 완전히 호환됩니다. 최신 Gradle 릴리스까지의 Gradle 버전을 사용할 수도 있지만, 그렇게 할 경우 사용 중단 경고가 발생하거나 일부 새로운 Gradle 기능이 작동하지 않을 수 있다는 점을 유의하세요.</p><p>이 버전에는 다음과 같은 변경 사항이 있습니다:</p><ul><li><a href="#support-for-test-fixtures-to-access-internal-declarations">내부 선언에 접근하기 위한 테스트 픽스처(test fixtures) 지원</a></li><li><a href="#new-property-to-configure-paths-to-konan-directories">Konan 디렉토리 경로 구성을 위한 새로운 속성</a></li><li><a href="#new-build-report-metrics-for-kotlin-native-tasks">Kotlin/Native 작업에 대한 새로운 빌드 보고서 메트릭</a></li></ul><h3 id="내부-선언에-접근하기-위한-테스트-픽스처-test-fixtures-지원" tabindex="-1">내부 선언에 접근하기 위한 테스트 픽스처(test fixtures) 지원 <a class="header-anchor" href="#내부-선언에-접근하기-위한-테스트-픽스처-test-fixtures-지원" aria-label="Permalink to &quot;내부 선언에 접근하기 위한 테스트 픽스처(test fixtures) 지원&quot;">​</a></h3><p>Kotlin 1.9.20에서 Gradle의 <code>java-test-fixtures</code> 플러그인을 사용하는 경우, <a href="https://docs.gradle.org/current/userguide/java_testing.html#sec:java_test_fixtures" target="_blank" rel="noreferrer">테스트 픽스처</a>는 이제 주 소스 세트 클래스 내의 <code>internal</code> 선언에 접근할 수 있습니다. 또한 모든 테스트 소스는 테스트 픽스처 클래스 내의 <code>internal</code> 선언도 볼 수 있습니다.</p><h3 id="konan-디렉토리-경로-구성을-위한-새로운-속성" tabindex="-1">Konan 디렉토리 경로 구성을 위한 새로운 속성 <a class="header-anchor" href="#konan-디렉토리-경로-구성을-위한-새로운-속성" aria-label="Permalink to &quot;Konan 디렉토리 경로 구성을 위한 새로운 속성&quot;">​</a></h3><p>Kotlin 1.9.20에서는 <code>kotlin.data.dir</code> Gradle 속성을 사용하여 <code>~/.konan</code> 디렉토리 경로를 사용자 지정할 수 있으므로, 환경 변수 <code>KONAN_DATA_DIR</code>을 통해 구성할 필요가 없습니다.</p><p>또는 <code>-Xkonan-data-dir</code> 컴파일러 옵션을 사용하여 <code>cinterop</code> 및 <code>konanc</code> 도구를 통해 <code>~/.konan</code> 디렉토리에 대한 사용자 지정 경로를 구성할 수 있습니다.</p><h3 id="kotlin-native-작업에-대한-새로운-빌드-보고서-메트릭" tabindex="-1">Kotlin/Native 작업에 대한 새로운 빌드 보고서 메트릭 <a class="header-anchor" href="#kotlin-native-작업에-대한-새로운-빌드-보고서-메트릭" aria-label="Permalink to &quot;Kotlin/Native 작업에 대한 새로운 빌드 보고서 메트릭&quot;">​</a></h3><p>Kotlin 1.9.20부터 Gradle 빌드 보고서에 Kotlin/Native 작업에 대한 메트릭이 포함됩니다. 다음은 이러한 메트릭을 포함하는 빌드 보고서의 예시입니다:</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Total time for Kotlin tasks: 20.81 s (93.1 % of all tasks time)</span></span>
<span class="line"><span>Time   |% of Kotlin time|Task                            </span></span>
<span class="line"><span>15.24 s|73.2 %          |:compileCommonMainKotlinMetadata</span></span>
<span class="line"><span>5.57 s |26.8 %          |:compileNativeMainKotlinMetadata</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Task &#39;:compileCommonMainKotlinMetadata&#39; finished in 15.24 s</span></span>
<span class="line"><span>Task info:</span></span>
<span class="line"><span>  Kotlin language version: 2.0</span></span>
<span class="line"><span>Time metrics:</span></span>
<span class="line"><span>  Total Gradle task time: 15.24 s</span></span>
<span class="line"><span>  Spent time before task action: 0.16 s</span></span>
<span class="line"><span>  Task action before worker execution: 0.21 s</span></span>
<span class="line"><span>  Run native in process: 2.70 s</span></span>
<span class="line"><span>    Run entry point: 2.64 s</span></span>
<span class="line"><span>Size metrics:</span></span>
<span class="line"><span>  Start time of task action: 2023-07-27T11:04:17</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Task &#39;:compileNativeMainKotlinMetadata&#39; finished in 5.57 s</span></span>
<span class="line"><span>Task info:</span></span>
<span class="line"><span>  Kotlin language version: 2.0</span></span>
<span class="line"><span>Time metrics:</span></span>
<span class="line"><span>  Total Gradle task time: 5.57 s</span></span>
<span class="line"><span>  Spent time before task action: 0.04 s</span></span>
<span class="line"><span>  Task action before worker execution: 0.02 s</span></span>
<span class="line"><span>  Run native in process: 1.48 s</span></span>
<span class="line"><span>    Run entry point: 1.47 s</span></span>
<span class="line"><span>Size metrics:</span></span>
<span class="line"><span>  Start time of task action: 2023-07-27T11:04:32</span></span></code></pre></div><p>또한 <code>kotlin.experimental.tryK2</code> 빌드 보고서는 컴파일된 모든 Kotlin/Native 작업을 포함하고 사용된 언어 버전을 나열합니다:</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>##### &#39;kotlin.experimental.tryK2&#39; results #####</span></span>
<span class="line"><span>:lib:compileCommonMainKotlinMetadata: 2.0 language version</span></span>
<span class="line"><span>:lib:compileKotlinJvm: 2.0 language version</span></span>
<span class="line"><span>:lib:compileKotlinIosArm64: 2.0 language version</span></span>
<span class="line"><span>:lib:compileKotlinIosSimulatorArm64: 2.0 language version</span></span>
<span class="line"><span>:lib:compileKotlinLinuxX64: 2.0 language version</span></span>
<span class="line"><span>:lib:compileTestKotlinJvm: 2.0 language version</span></span>
<span class="line"><span>:lib:compileTestKotlinIosSimulatorArm64: 2.0 language version</span></span>
<span class="line"><span>:lib:compileTestKotlinLinuxX64: 2.0 language version</span></span>
<span class="line"><span>##### 100% (8/8) tasks have been compiled with Kotlin 2.0 #####</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Gradle 8.0을 사용하는 경우, 특히 Gradle 설정 캐싱이 활성화된 경우 빌드 보고서에 일부 문제가 발생할 수 있습니다. 이는 알려진 문제이며, Gradle 8.1 이상에서 수정되었습니다.</p></div><h2 id="표준-라이브러리" tabindex="-1">표준 라이브러리 <a class="header-anchor" href="#표준-라이브러리" aria-label="Permalink to &quot;표준 라이브러리&quot;">​</a></h2><p>Kotlin 1.9.20에서는 <a href="#the-kotlin-native-standard-library-becomes-stable">Kotlin/Native 표준 라이브러리가 안정화</a>되며, 몇 가지 새로운 기능이 있습니다:</p><ul><li><a href="#replacement-of-the-enum-class-values-generic-function">Enum 클래스 values 제네릭 함수 대체</a></li><li><a href="#improved-performance-of-hashmap-operations-in-kotlin-js">Kotlin/JS에서 HashMap 작업 성능 향상</a></li></ul><h3 id="enum-클래스-values-제네릭-함수-대체" tabindex="-1">Enum 클래스 values 제네릭 함수 대체 <a class="header-anchor" href="#enum-클래스-values-제네릭-함수-대체" aria-label="Permalink to &quot;Enum 클래스 values 제네릭 함수 대체&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>이 기능은 <a href="/ko/kotlin/components-stability#stability-levels-explained">Experimental</a> (실험적 기능)입니다. 언제든지 삭제되거나 변경될 수 있습니다. 옵트인(opt-in)이 필요합니다(자세한 내용은 아래 참조). 평가 목적으로만 사용해야 합니다. <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a>에 대한 피드백을 주시면 감사하겠습니다.</p></div><p>Kotlin 1.9.0에서 enum 클래스의 <code>entries</code> 속성이 안정화되었습니다. <code>entries</code> 속성은 합성 <code>values()</code> 함수를 대체하는 현대적이고 성능이 우수한 기능입니다. Kotlin 1.9.20의 일환으로 제네릭 <code>enumValues&lt;T&gt;()</code> 함수를 대체하는 <code>enumEntries&lt;T&gt;()</code>가 도입되었습니다.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>enumValues&lt;T&gt;()</code> 함수는 여전히 지원되지만, 성능 영향이 적으므로 <code>enumEntries&lt;T&gt;()</code> 함수를 대신 사용하는 것이 좋습니다. <code>enumValues&lt;T&gt;()</code>를 호출할 때마다 새 배열이 생성되는 반면, <code>enumEntries&lt;T&gt;()</code>를 호출할 때마다 동일한 리스트가 반환되므로 훨씬 효율적입니다.</p></div><p>예시:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">enum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RGB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { RED, GREEN, BLUE }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalStdlibApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">inline</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reified</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Enum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printAllValues</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">enumEntries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">joinToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.name })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printAllValues</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">RGB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// RED, GREEN, BLUE</span></span></code></pre></div><h4 id="enumentries-함수-활성화-방법" tabindex="-1">enumEntries 함수 활성화 방법 <a class="header-anchor" href="#enumentries-함수-활성화-방법" aria-label="Permalink to &quot;enumEntries 함수 활성화 방법&quot;">​</a></h4><p>이 기능을 사용하려면 <code>@OptIn(ExperimentalStdlibApi)</code>로 옵트인(opt-in)하고 언어 버전 1.9 이상을 사용하세요. 최신 버전의 Kotlin Gradle 플러그인을 사용하는 경우, 이 기능을 테스트하기 위해 언어 버전을 지정할 필요가 없습니다.</p><h3 id="kotlin-native-표준-라이브러리-안정화-stable" tabindex="-1">Kotlin/Native 표준 라이브러리 안정화(Stable) <a class="header-anchor" href="#kotlin-native-표준-라이브러리-안정화-stable" aria-label="Permalink to &quot;Kotlin/Native 표준 라이브러리 안정화(Stable)&quot;">​</a></h3><p>Kotlin 1.9.0에서 저희는 Kotlin/Native 표준 라이브러리를 안정화 목표에 더 가깝게 만들기 위해 취한 조치들을 <a href="/ko/kotlin/whatsnew19#the-kotlin-native-standard-library-s-journey-towards-stabilization">설명했습니다</a>. Kotlin 1.9.20에서는 마침내 이 작업을 완료하고 Kotlin/Native 표준 라이브러리를 안정화(Stable)합니다. 다음은 이번 릴리스의 주요 내용입니다:</p><ul><li><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlinx.cinterop/-vector128/" target="_blank" rel="noreferrer"><code>Vector128</code></a> 클래스가 <code>kotlin.native</code> 패키지에서 <code>kotlinx.cinterop</code> 패키지로 이동했습니다.</li><li>Kotlin 1.9.0의 일부로 도입된 <code>ExperimentalNativeApi</code> 및 <code>NativeRuntimeApi</code> 어노테이션에 대한 옵트인(opt-in) 요구 사항 수준이 <code>WARNING</code>에서 <code>ERROR</code>로 상향 조정되었습니다.</li><li>Kotlin/Native 컬렉션은 이제 동시 수정(concurrent modification)을 감지합니다. 예를 들어, <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-array-list/" target="_blank" rel="noreferrer"><code>ArrayList</code></a> 및 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/-hash-map/" target="_blank" rel="noreferrer"><code>HashMap</code></a> 컬렉션에서 그렇습니다.</li><li><code>Throwable</code> 클래스의 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-throwable/print-stack-trace.html" target="_blank" rel="noreferrer"><code>printStackTrace()</code></a> 함수는 이제 <code>STDOUT</code> 대신 <code>STDERR</code>로 출력합니다.</li></ul><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p><code>printStackTrace()</code>의 출력 형식은 안정화(Stable)되지 않았으며 변경될 수 있습니다.</p></div><h4 id="atomics-api-개선" tabindex="-1">Atomics API 개선 <a class="header-anchor" href="#atomics-api-개선" aria-label="Permalink to &quot;Atomics API 개선&quot;">​</a></h4><p>Kotlin 1.9.0에서 저희는 Atomics API가 Kotlin/Native 표준 라이브러리가 안정화될 때 안정화될 준비가 될 것이라고 말씀드렸습니다. Kotlin 1.9.20에는 다음과 같은 추가 변경 사항이 포함되어 있습니다:</p><ul><li>실험적인 <code>AtomicIntArray</code>, <code>AtomicLongArray</code>, <code>AtomicArray&lt;T&gt;</code> 클래스가 도입되었습니다. 이 새로운 클래스들은 Java의 아토믹 배열(atomic array)과 일관성을 유지하도록 특별히 설계되어, 향후 공통 표준 라이브러리에 포함될 수 있습니다.</li></ul><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p><code>AtomicIntArray</code>, <code>AtomicLongArray</code>, <code>AtomicArray&lt;T&gt;</code> 클래스는 <a href="/ko/kotlin/components-stability#stability-levels-explained">Experimental</a> (실험적 기능)입니다. 언제든지 삭제되거나 변경될 수 있습니다. 사용하려면 <code>@OptIn(ExperimentalStdlibApi)</code>로 옵트인(opt-in)하세요. 평가 목적으로만 사용해야 합니다. <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack</a>에 대한 피드백을 주시면 감사하겠습니다.</p></div><ul><li><code>kotlin.native.concurrent</code> 패키지에서 Kotlin 1.9.0에서 <code>WARNING</code> 사용 중단 수준으로 사용 중단되었던 Atomics API의 사용 중단 수준이 <code>ERROR</code>로 상향 조정되었습니다.</li><li><code>kotlin.concurrent</code> 패키지에서 사용 중단 수준이 <code>ERROR</code>였던 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.concurrent/-atomic-int/index.html" target="_blank" rel="noreferrer"><code>AtomicInt</code></a> 및 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.concurrent/-atomic-long/index.html" target="_blank" rel="noreferrer"><code>AtomicLong</code></a> 클래스의 멤버 함수가 제거되었습니다.</li><li><code>AtomicReference</code> 클래스의 모든 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.concurrent/-atomic-reference/#functions" target="_blank" rel="noreferrer">멤버 함수</a>는 이제 아토믹 내장 함수(atomic intrinsic function)를 사용합니다.</li></ul><p>Kotlin 1.9.20의 모든 변경 사항에 대한 자세한 내용은 <a href="https://youtrack.jetbrains.com/issue/KT-61028/Behavioural-changes-to-the-Native-stdlib-API" target="_blank" rel="noreferrer">YouTrack 티켓</a>을 참조하세요.</p><h3 id="kotlin-js에서-hashmap-작업-성능-향상" tabindex="-1">Kotlin/JS에서 HashMap 작업 성능 향상 <a class="header-anchor" href="#kotlin-js에서-hashmap-작업-성능-향상" aria-label="Permalink to &quot;Kotlin/JS에서 HashMap 작업 성능 향상&quot;">​</a></h3><p>Kotlin 1.9.20은 Kotlin/JS에서 <code>HashMap</code> 작업의 성능을 향상시키고 메모리 사용량을 줄입니다. 내부적으로 Kotlin/JS는 내부 구현을 오픈 어드레싱(open addressing)으로 변경했습니다. 이는 다음과 같은 경우 성능 향상을 확인할 수 있음을 의미합니다:</p><ul><li><code>HashMap</code>에 새 요소를 삽입할 때.</li><li><code>HashMap</code>에서 기존 요소를 검색할 때.</li><li><code>HashMap</code>의 키 또는 값을 반복할 때.</li></ul><h2 id="문서-업데이트" tabindex="-1">문서 업데이트 <a class="header-anchor" href="#문서-업데이트" aria-label="Permalink to &quot;문서 업데이트&quot;">​</a></h2><p>Kotlin 문서에 몇 가지 주목할 만한 변경 사항이 있었습니다:</p><ul><li><a href="https://kotlinlang.org/api/kotlinx-metadata-jvm/" target="_blank" rel="noreferrer">JVM Metadata</a> API 참조 – Kotlin/JVM으로 메타데이터를 파싱하는 방법을 살펴보세요.</li><li><a href="/ko/kotlin/time-measurement">시간 측정 가이드</a> – Kotlin에서 시간을 계산하고 측정하는 방법을 알아보세요.</li><li><a href="/ko/kotlin/kotlin-tour-welcome">Kotlin 둘러보기</a>의 개선된 컬렉션(Collections) 챕터 – 이론과 실습이 모두 포함된 챕터를 통해 Kotlin 프로그래밍 언어의 기본을 배우세요.</li><li><a href="/ko/kotlin/generics#definitely-non-nullable-types">확정적으로 non-nullable한 타입</a> – 확정적으로 non-nullable한 제네릭 타입에 대해 알아보세요.</li><li>개선된 <a href="/ko/kotlin/arrays">배열(Arrays) 페이지</a> – 배열과 배열을 사용해야 할 때를 알아보세요.</li><li><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-expect-actual.html" target="_blank" rel="noreferrer">Kotlin Multiplatform의 expected 및 actual 선언</a> – Kotlin Multiplatform의 expected 및 actual 선언 메커니즘에 대해 알아보세요.</li></ul><h2 id="kotlin-1-9-20-설치" tabindex="-1">Kotlin 1.9.20 설치 <a class="header-anchor" href="#kotlin-1-9-20-설치" aria-label="Permalink to &quot;Kotlin 1.9.20 설치&quot;">​</a></h2><h3 id="ide-버전-확인" tabindex="-1">IDE 버전 확인 <a class="header-anchor" href="#ide-버전-확인" aria-label="Permalink to &quot;IDE 버전 확인&quot;">​</a></h3><p><a href="https://www.jetbrains.com/idea/download/" target="_blank" rel="noreferrer">IntelliJ IDEA</a> 2023.1.x 및 2023.2.x는 Kotlin 플러그인을 1.9.20 버전으로 업데이트하도록 자동으로 제안합니다. IntelliJ IDEA 2023.3에는 Kotlin 1.9.20 플러그인이 포함될 예정입니다.</p><p>Android Studio Hedgehog (231) 및 Iguana (232)는 다가오는 릴리스에서 Kotlin 1.9.20을 지원할 예정입니다.</p><p>새로운 명령줄 컴파일러는 <a href="https://github.com/JetBrains/kotlin/releases/tag/v1.9.20" target="_blank" rel="noreferrer">GitHub 릴리스 페이지</a>에서 다운로드할 수 있습니다.</p><h3 id="gradle-설정-구성" tabindex="-1">Gradle 설정 구성 <a class="header-anchor" href="#gradle-설정-구성" aria-label="Permalink to &quot;Gradle 설정 구성&quot;">​</a></h3><p>Kotlin 아티팩트 및 의존성을 다운로드하려면 <code>settings.gradle(.kts)</code> 파일을 업데이트하여 Maven Central 저장소를 사용하도록 하세요:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pluginManagement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    repositories</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        mavenCentral</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        gradlePluginPortal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>저장소가 지정되지 않으면 Gradle은 사용 중단된 JCenter 저장소를 사용하므로 Kotlin 아티팩트에 문제가 발생할 수 있습니다.</p>`,110))])}const w=h(E,[["render",m]]);export{x as __pageData,w as default};
