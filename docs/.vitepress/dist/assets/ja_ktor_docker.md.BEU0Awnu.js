import{_ as u,C as t,c as y,o as m,j as s,G as e,ag as p,a,w as l}from"./chunks/framework.Bksy39di.js";const R=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ja/ktor/docker.md","filePath":"ja/ktor/docker.md","lastUpdated":1755457140000}'),F={name:"ja/ktor/docker.md"};function b(C,i,v,D,f,_){const k=t("show-structure"),r=t("tldr"),o=t("web-summary"),d=t("link-summary"),n=t("TabItem"),h=t("Tabs"),g=t("code-block"),E=t("list"),c=t("tip");return m(),y("div",null,[i[10]||(i[10]=s("h1",{id:"docker",tabindex:"-1"},[a("Docker "),s("a",{class:"header-anchor",href:"#docker","aria-label":'Permalink to "Docker"'},"​")],-1)),e(k,{for:"chapter",depth:"2"}),e(r,null,{default:l(()=>i[0]||(i[0]=[s("p",null,[s("b",null,"コード例"),a(": "),s("a",{href:"https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/deployment-ktor-plugin"}," deployment-ktor-plugin ")],-1)])),_:1}),e(o,null,{default:l(()=>i[1]||(i[1]=[a(" KtorアプリケーションをDockerコンテナにデプロイし、ローカルまたは任意のクラウドプロバイダーで実行する方法を学びます。 ")])),_:1}),e(d,null,{default:l(()=>i[2]||(i[2]=[a(" アプリケーションをDockerコンテナにデプロイする方法を学びます。 ")])),_:1}),i[11]||(i[11]=p('<p>このセクションでは、<a href="https://github.com/ktorio/ktor-build-plugins" target="_blank" rel="noreferrer">Ktor Gradle プラグイン</a> を使って、<a href="https://www.docker.com" target="_blank" rel="noreferrer">Docker</a> を用いてアプリケーションをパッケージ化、実行、デプロイする方法を説明します。</p><h2 id="install-plugin" tabindex="-1">Ktorプラグインのインストール <a class="header-anchor" href="#install-plugin" aria-label="Permalink to &quot;Ktorプラグインのインストール {id=&quot;install-plugin&quot;}&quot;">​</a></h2><p>Ktorプラグインをインストールするには、<code>build.gradle.(kts)</code>ファイルの<code>plugins</code>ブロックに追加します。</p>',3)),e(h,{group:"languages"},{default:l(()=>[e(n,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:l(()=>i[3]||(i[3]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"plugins"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    id"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"io.ktor.plugin"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") version "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"3.2.3"')]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1),s("p",{"interpolate-variables":"true"},null,-1)])),_:1}),e(n,{title:"Gradle (Groovy)","group-key":"groovy"},{default:l(()=>i[4]||(i[4]=[s("div",{class:"language-groovy vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"groovy"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"plugins {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    id "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"io.ktor.plugin"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," version "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"3.2.3"')]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1),s("p",{"interpolate-variables":"true"},null,-1)])),_:1})]),_:1}),i[12]||(i[12]=p(`<div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>Kotlin Multiplatform Gradle プラグインと Ktor Gradle プラグインを一緒に適用すると、Docker の統合は自動的に無効になります。 それらを一緒に使用するには: 1. 上記のように Ktor Gradle プラグインを適用した JVM 専用プロジェクトを作成します。 2. その JVM 専用プロジェクトに Kotlin Multiplatform プロジェクトを依存関係として追加します。 この回避策で問題が解決しない場合は、<a href="https://youtrack.jetbrains.com/issue/KTOR-8464" target="_blank" rel="noreferrer">KTOR-8464</a> にコメントを残してご連絡ください。</p></div><h2 id="tasks" tabindex="-1">プラグインタスク <a class="header-anchor" href="#tasks" aria-label="Permalink to &quot;プラグインタスク {id=&quot;tasks&quot;}&quot;">​</a></h2><p>プラグインを<a href="#install-plugin">インストール</a>すると、アプリケーションのパッケージ化、実行、デプロイに以下のタスクが利用可能になります。</p><ul><li><code>buildImage</code>: プロジェクトのDockerイメージをtarballとしてビルドします。このタスクは<code>build</code>ディレクトリに<code>jib-image.tar</code>ファイルを生成します。このイメージは、<a href="https://docs.docker.com/engine/reference/commandline/load/" target="_blank" rel="noreferrer">docker load</a>コマンドを使用してDockerデーモンにロードできます。<div class="language-Bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> load</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build/jib-image.tar</span></span></code></pre></div></li><li><code>publishImageToLocalRegistry</code>: プロジェクトのDockerイメージをビルドし、ローカルレジストリに公開します。</li><li><code>runDocker</code>: プロジェクトのイメージをDockerデーモンにビルドし、実行します。このタスクを実行するとKtorサーバーが起動し、デフォルトで<code>http://0.0.0.0:8080</code>に応答します。サーバーが別のポートを使用するように構成されている場合は、<a href="#port-mapping">ポートマッピング</a>を調整できます。</li><li><code>publishImage</code>: プロジェクトのDockerイメージを<a href="https://hub.docker.com/" target="_blank" rel="noreferrer">Docker Hub</a>や<a href="https://cloud.google.com/container-registry" target="_blank" rel="noreferrer">Google Container Registry</a>などの外部レジストリにビルドして公開します。このタスクでは、<strong><a href="#external-registry">ktor.docker.externalRegistry</a></strong> プロパティを使用して外部レジストリを構成する必要があることに注意してください。</li></ul><p>デフォルトでは、これらのタスクは<code>ktor-docker-image</code>という名前と<code>latest</code>タグでイメージをビルドします。これらの値は<a href="#name-tag">プラグイン構成</a>でカスタマイズできます。</p><h2 id="configure-plugin" tabindex="-1">Ktorプラグインの構成 <a class="header-anchor" href="#configure-plugin" aria-label="Permalink to &quot;Ktorプラグインの構成 {id=&quot;configure-plugin&quot;}&quot;">​</a></h2><p>Dockerタスクに関連するKtorプラグインの設定を構成するには、<code>build.gradle.(kts)</code>ファイルで<code>ktor.docker</code>拡張機能を使用します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ktor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    docker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="jre-version" tabindex="-1">JREバージョン <a class="header-anchor" href="#jre-version" aria-label="Permalink to &quot;JREバージョン {id=&quot;jre-version&quot;}&quot;">​</a></h3><p><code>jreVersion</code>プロパティは、イメージで使用するJREのバージョンを指定します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ktor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    docker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        jreVersion.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(JavaVersion.VERSION_17)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="name-tag" tabindex="-1">イメージ名とタグ <a class="header-anchor" href="#name-tag" aria-label="Permalink to &quot;イメージ名とタグ {id=&quot;name-tag&quot;}&quot;">​</a></h3><p>イメージ名とタグをカスタマイズする必要がある場合は、それぞれ<code>localImageName</code>および<code>imageTag</code>プロパティを使用します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ktor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    docker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        localImageName.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sample-docker-image&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        imageTag.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0.0.1-preview&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="port-mapping" tabindex="-1">ポートマッピング <a class="header-anchor" href="#port-mapping" aria-label="Permalink to &quot;ポートマッピング {id=&quot;port-mapping&quot;}&quot;">​</a></h3><p>デフォルトでは、<a href="#tasks">runDocker</a>タスクは<code>8080</code>コンテナポートを<code>8080</code>Dockerホストポートに公開します。 必要に応じて、<code>portMappings</code>プロパティを使用してこれらのポートを変更できます。 これは、サーバーが別のポートを使用するように<a href="./server-configuration-file#predefined-properties">構成されている</a>場合に役立つことがあります。</p><p>以下の例は、<code>8080</code>コンテナポートを<code>80</code>Dockerホストポートにマッピングする方法を示しています。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ktor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    docker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        portMappings.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            io.ktor.plugin.features.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DockerPortMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                80</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                8080</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                io.ktor.plugin.features.DockerPortMappingProtocol.TCP</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>この場合、<code>http://0.0.0.0:80</code>でサーバーにアクセスできます。</p><h3 id="external-registry" tabindex="-1">外部レジストリ <a class="header-anchor" href="#external-registry" aria-label="Permalink to &quot;外部レジストリ {id=&quot;external-registry&quot;}&quot;">​</a></h3><p>**<a href="#tasks">publishImage</a>**タスクを使用してプロジェクトのDockerイメージを外部レジストリに公開する前に、<code>ktor.docker.externalRegistry</code>プロパティを使用して外部レジストリを構成する必要があります。このプロパティは、必要なレジストリタイプの構成を提供する<code>DockerImageRegistry</code>インスタンスを受け入れます。</p><ul><li><code>DockerImageRegistry.dockerHub</code>: <a href="https://hub.docker.com/" target="_blank" rel="noreferrer">Docker Hub</a>用の<code>DockerImageRegistry</code>を作成します。</li><li><code>DockerImageRegistry.googleContainerRegistry</code>: <a href="https://cloud.google.com/container-registry" target="_blank" rel="noreferrer">Google Container Registry</a>用の<code>DockerImageRegistry</code>を作成します。</li></ul><p>以下の例は、Docker Hubレジストリを構成する方法を示しています。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ktor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    docker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        externalRegistry.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            io.ktor.plugin.features.DockerImageRegistry.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dockerHub</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                appName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> provider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ktor-app&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                username </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> providers.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">environmentVariable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;DOCKER_HUB_USERNAME&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                password </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> providers.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">environmentVariable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;DOCKER_HUB_PASSWORD&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Docker Hubのユーザー名とパスワードは環境変数から取得されるため、<code>publishImage</code>タスクを実行する前にこれらの値を設定する必要があります。</p>`,25)),e(h,{group:"os"},{default:l(()=>[e(n,{title:"Linux/macOS","group-key":"unix"},{default:l(()=>i[5]||(i[5]=[s("div",{class:"language-Bash vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"Bash"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"export"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," DOCKER_HUB_USERNAME"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"yourHubUsername")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"export"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," DOCKER_HUB_PASSWORD"),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"yourHubPassword")])])])],-1)])),_:1}),e(n,{title:"Windows","group-key":"windows"},{default:l(()=>i[6]||(i[6]=[s("div",{class:"language-Bash vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"Bash"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"setx"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," DOCKER_HUB_USERNAME"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," yourHubUsername")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"setx"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," DOCKER_HUB_PASSWORD"),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," yourHubPassword")])])])],-1)])),_:1})]),_:1}),i[13]||(i[13]=p('<h2 id="manual" tabindex="-1">手動イメージ構成 <a class="header-anchor" href="#manual" aria-label="Permalink to &quot;手動イメージ構成 {id=&quot;manual&quot;}&quot;">​</a></h2><p>必要に応じて、独自の<code>Dockerfile</code>を提供してKtorアプリケーションを含むイメージを組み立てることができます。</p><h3 id="packagea-pp" tabindex="-1">アプリケーションのパッケージ化 <a class="header-anchor" href="#packagea-pp" aria-label="Permalink to &quot;アプリケーションのパッケージ化 {id=&quot;packagea-pp&quot;}&quot;">​</a></h3><p>最初のステップとして、アプリケーションをその依存関係と共にパッケージ化する必要があります。 例えば、これは<a href="./server-fatjar">fat JAR</a>または<a href="./server-packaging">実行可能なJVMアプリケーション</a>である場合があります。</p><h3 id="prepare-docker" tabindex="-1">Dockerイメージの準備 <a class="header-anchor" href="#prepare-docker" aria-label="Permalink to &quot;Dockerイメージの準備 {id=&quot;prepare-docker&quot;}&quot;">​</a></h3><p>アプリケーションをDocker化するには、<a href="https://docs.docker.com/develop/develop-images/multistage-build/" target="_blank" rel="noreferrer">マルチステージビルド</a>を使用します。</p><ol><li>まず、Gradle/Mavenの依存関係のキャッシュを設定します。このステップは任意ですが、ビルド全体の速度が向上するため推奨されます。</li><li>次に、<code>gradle</code>/<code>maven</code>イメージを使用して、アプリケーションを含むfat JARを生成します。</li><li>最後に、生成されたディストリビューションは、JDKイメージに基づいて作成された環境で実行されます。</li></ol><p>プロジェクトのルートフォルダーに、<code>Dockerfile</code>という名前のファイルを作成し、以下の内容を記述します。</p>',8)),e(h,{group:"languages"},{default:l(()=>[e(n,{title:"Gradle","group-key":"kotlin"},{default:l(()=>[e(g,{lang:"Docker",code:`# Stage 1: Cache Gradle dependencies
FROM gradle:latest AS cache
RUN mkdir -p /home/gradle/cache_home
ENV GRADLE_USER_HOME=/home/gradle/cache_home
COPY build.gradle.* gradle.properties /home/gradle/app/
COPY gradle /home/gradle/app/gradle
WORKDIR /home/gradle/app
RUN gradle clean build -i --stacktrace

# Stage 2: Build Application
FROM gradle:latest AS build
COPY --from=cache /home/gradle/cache_home /home/gradle/.gradle
COPY --chown=gradle:gradle . /home/gradle/src
WORKDIR /home/gradle/src
# Build the fat JAR, Gradle also supports shadow
# and boot JAR by default.
RUN gradle buildFatJar --no-daemon

# Stage 3: Create the Runtime Image
FROM amazoncorretto:22 AS runtime
EXPOSE 8080
RUN mkdir /app
COPY --from=build /home/gradle/src/build/libs/*.jar /app/ktor-docker-sample.jar
ENTRYPOINT ["java","-jar","/app/ktor-docker-sample.jar"]`})]),_:1}),e(n,{title:"Maven","group-key":"maven"},{default:l(()=>i[7]||(i[7]=[s("div",{class:"language-Docker vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"Docker"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"# Stage 1: Cache Maven dependencies")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"FROM"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," maven:3.8-amazoncorretto-21 "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"AS"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," cache")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"WORKDIR"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," /app")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"COPY"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," pom.xml .")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"RUN"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," mvn dependency:go-offline")]),a(`
`),s("span",{class:"line"}),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"# Stage 2: Build Application")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"FROM"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," maven:3.8-amazoncorretto-21 "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"AS"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," build")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"WORKDIR"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," /app")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"COPY"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," --from=cache /root/.m2 /root/.m2")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"COPY"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," . .")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"RUN"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," mvn clean package")]),a(`
`),s("span",{class:"line"}),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"# Stage 3: Create the Runtime Image")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"FROM"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," amazoncorretto:21-slim "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"AS"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," runtime")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"EXPOSE"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," 8080")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"WORKDIR"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," /app")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"COPY"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," --from=build /app/target/*-with-dependencies.jar app.jar")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"ENTRYPOINT"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," ["),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"java"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"-jar"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"app.jar"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"]")])])])],-1)])),_:1})]),_:1}),i[14]||(i[14]=s("p",null,"最初のステージは、ビルド関連のファイルに変更があった場合にのみ依存関係が再ダウンロードされるようにします。最初のステージを使用しない場合、または他のステージで依存関係がキャッシュされない場合、依存関係はすべてのビルドでインストールされます。",-1)),i[15]||(i[15]=s("p",null,"2番目のステージではfat JARがビルドされます。Gradleはデフォルトでshadow JARとboot JARもサポートしていることに注意してください。",-1)),i[16]||(i[16]=s("p",null,"ビルドの3番目のステージは次のように機能します。",-1)),i[17]||(i[17]=s("ul",null,[s("li",null,"使用するイメージを示します。"),s("li",null,"公開するポートを指定します（これは、コンテナの実行時に行われるポートの自動公開ではありません）。"),s("li",null,"ビルド出力からフォルダにコンテンツをコピーします。"),s("li",null,[a("アプリケーションを実行します（"),s("code",null,"ENTRYPOINT"),a("）。")])],-1)),e(c,{id:"jdk_image_replacement_tip"},{default:l(()=>[i[9]||(i[9]=s("p",null," この例ではAmazon Corretto Docker Imageを使用していますが、以下のようないくつかの適切な代替イメージと置き換えることができます。 ",-1)),e(E,null,{default:l(()=>i[8]||(i[8]=[s("li",null,[s("a",{href:"https://hub.docker.com/_/eclipse-temurin"},"Eclipse Temurin")],-1),s("li",null,[s("a",{href:"https://hub.docker.com/_/ibm-semeru-runtimes"},"IBM Semeru")],-1),s("li",null,[s("a",{href:"https://hub.docker.com/_/ibmjava"},"IBM Java")],-1),s("li",null,[s("a",{href:"https://hub.docker.com/_/sapmachine"},"SAP Machine JDK")],-1)])),_:1})]),_:1}),i[18]||(i[18]=p('<h3 id="build-run" tabindex="-1">Dockerイメージのビルドと実行 <a class="header-anchor" href="#build-run" aria-label="Permalink to &quot;Dockerイメージのビルドと実行 {id=&quot;build-run&quot;}&quot;">​</a></h3><p>次のステップは、Dockerイメージをビルドしてタグ付けすることです。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -t</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-application</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .</span></span></code></pre></div><p>最後に、イメージを起動します。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 8080:8080</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my-application</span></span></code></pre></div><p>これにより、Ktorサーバーが起動し、<code>https://0.0.0.0:8080</code>に応答します。</p>',6))])}const A=u(F,[["render",b]]);export{R as __pageData,A as default};
