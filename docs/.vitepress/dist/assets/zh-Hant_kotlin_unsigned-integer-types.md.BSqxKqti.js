import{_ as i,c as a,o as t,ag as e}from"./chunks/framework.Bksy39di.js";const c=JSON.parse('{"title":"無符號整數類型","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/unsigned-integer-types.md","filePath":"zh-Hant/kotlin/unsigned-integer-types.md","lastUpdated":1754307826000}'),n={name:"zh-Hant/kotlin/unsigned-integer-types.md"};function l(h,s,p,d,k,o){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="無符號整數類型" tabindex="-1">無符號整數類型 <a class="header-anchor" href="#無符號整數類型" aria-label="Permalink to &quot;無符號整數類型&quot;">​</a></h1><p>除了<a href="/zh-Hant/kotlin/numbers#integer-types">整數類型</a>之外，Kotlin 還提供了以下無符號整數類型：</p><table tabindex="0"><thead><tr><th>Type</th><th>Size (bits)</th><th>Min value</th><th>Max value</th></tr></thead><tbody><tr><td><code>UByte</code></td><td>8</td><td>0</td><td>255</td></tr><tr><td><code>UShort</code></td><td>16</td><td>0</td><td>65,535</td></tr><tr><td><code>UInt</code></td><td>32</td><td>0</td><td>4,294,967,295 (2<sup>32</sup> - 1)</td></tr><tr><td><code>ULong</code></td><td>64</td><td>0</td><td>18,446,744,073,709,551,615 (2<sup>64</sup> - 1)</td></tr></tbody></table><p>無符號類型支援其對應帶符號類型的大部分操作。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>無符號數字實作為<a href="/zh-Hant/kotlin/inline-classes">內聯類</a>，只有一個儲存屬性，其中包含相同寬度的對應帶符號類型。如果您想在無符號和帶符號整數類型之間轉換，請確保您更新程式碼，以使任何函數呼叫和操作支援新類型。</p></div><h2 id="無符號陣列與範圍" tabindex="-1">無符號陣列與範圍 <a class="header-anchor" href="#無符號陣列與範圍" aria-label="Permalink to &quot;無符號陣列與範圍&quot;">​</a></h2><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>無符號陣列及其操作處於 <a href="/zh-Hant/kotlin/components-stability">Beta</a> 階段。它們可能隨時發生不相容的變更。 需要選擇啟用（詳情請見下文）。</p></div><p>與基本類型一樣，每個無符號類型都有一個對應的類型，用於表示該類型的陣列：</p><ul><li><code>UByteArray</code>: 無符號位元組的陣列。</li><li><code>UShortArray</code>: 無符號 short 的陣列。</li><li><code>UIntArray</code>: 無符號 int 的陣列。</li><li><code>ULongArray</code>: 無符號 long 的陣列。</li></ul><p>與帶符號整數陣列一樣，它們提供了與 <code>Array</code> 類別相似的 API，且沒有裝箱開銷。</p><p>當您使用無符號陣列時，會收到一個警告，指示此功能尚未穩定。 若要移除警告，請使用 <code>@ExperimentalUnsignedTypes</code> 註解選擇啟用。 由您決定您的客戶是否必須明確選擇啟用您的 API 使用，但請記住，無符號陣列並非穩定功能，因此使用它們的 API 可能會因語言變更而中斷。 <a href="/zh-Hant/kotlin/opt-in-requirements">深入了解選擇啟用要求</a>。</p><p><code>UInt</code> 和 <code>ULong</code> 支援<a href="/zh-Hant/kotlin/ranges">範圍與進度</a>，透過 <code>UIntRange</code>、<code>UIntProgression</code>、<code>ULongRange</code> 和 <code>ULongProgression</code> 類別實現。這些類別與無符號整數類型一同處於穩定狀態。</p><h2 id="無符號整數字面值" tabindex="-1">無符號整數字面值 <a class="header-anchor" href="#無符號整數字面值" aria-label="Permalink to &quot;無符號整數字面值&quot;">​</a></h2><p>為了使無符號整數更易於使用，您可以為整數字面值附加字尾，以指定特定的無符號類型（類似於 <code>F</code> 用於 <code>Float</code> 或 <code>L</code> 用於 <code>Long</code>）：</p><ul><li><p><code>u</code> 和 <code>U</code> 字元表示無符號字面值，但未指定確切類型。 如果未提供預期類型，編譯器會根據字面值的大小使用 <code>UInt</code> 或 <code>ULong</code>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UByte</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1u</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // UByte, expected type provided</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UShort</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1u</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // UShort, expected type provided</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> l: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ULong</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1u</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ULong, expected type provided</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 42u</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // UInt: no expected type provided, constant fits in UInt</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0xFFFF_FFFF_FFFFu</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // ULong: no expected type provided, constant doesn&#39;t fit in UInt</span></span></code></pre></div></li><li><p><code>uL</code> 和 <code>UL</code> 明確指定字面值應為無符號 long：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1UL</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // ULong, even though no expected type provided and the constant fits into UInt</span></span></code></pre></div></li></ul><h2 id="使用案例" tabindex="-1">使用案例 <a class="header-anchor" href="#使用案例" aria-label="Permalink to &quot;使用案例&quot;">​</a></h2><p>無符號數字的主要使用案例是利用整數的完整位元範圍來表示正數值。 例如，表示不符合帶符號類型的十六進位常數，如 32 位元 <code>AARRGGBB</code> 格式的顏色：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> representation: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">UInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> yellow </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0xFFCC00CCu</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>您可以使用無符號數字初始化位元組陣列，而無需明確的 <code>toByte()</code> 字面值型別轉換：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> byteOrderMarkUtf8 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ubyteArrayOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0xEFu</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0xBBu</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0xBFu</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>另一個使用案例是與原生 API 的互操作性。Kotlin 允許表示簽名中包含無符號類型的原生宣告。映射不會用帶符號整數替代無符號整數，從而保持語義不變。</p><h3 id="非目標" tabindex="-1">非目標 <a class="header-anchor" href="#非目標" aria-label="Permalink to &quot;非目標&quot;">​</a></h3><p>雖然無符號整數只能表示正數和零，但將其用於應用程式領域需要非負整數的場景並非目標。例如，作為集合大小或集合索引值的類型。</p><p>有幾個原因：</p><ul><li>使用帶符號整數可以幫助檢測意外溢位並指示錯誤條件，例如空列表的 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/last-index.html" target="_blank" rel="noreferrer"><code>List.lastIndex</code></a> 為 -1。</li><li>無符號整數不能被視為帶符號整數的範圍受限版本，因為它們的值範圍不是帶符號整數範圍的子集。帶符號和無符號整數彼此都不是子類型。<div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span></code></pre></div></li></ul>`,25)]))}const g=i(n,[["render",l]]);export{c as __pageData,g as default};
