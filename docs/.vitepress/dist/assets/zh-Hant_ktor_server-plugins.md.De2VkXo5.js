import{_ as d,a as E,b as g}from"./chunks/plugin-pipeline-routing.fgYqhUxB.js";import{_ as c,C as a,c as y,o as u,j as e,G as s,ag as p,a as h,w as n}from"./chunks/framework.Bksy39di.js";const q=JSON.parse('{"title":"伺服器插件","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/ktor/server-plugins.md","filePath":"zh-Hant/ktor/server-plugins.md","lastUpdated":1755457140000}'),F={name:"zh-Hant/ktor/server-plugins.md"};function C(m,i,_,v,b,B){const k=a("show-structure"),r=a("link-summary"),t=a("code-block"),l=a("TabItem"),o=a("Tabs");return u(),y("div",null,[i[1]||(i[1]=e("h1",{id:"伺服器插件",tabindex:"-1"},[h("伺服器插件 "),e("a",{class:"header-anchor",href:"#伺服器插件","aria-label":'Permalink to "伺服器插件"'},"​")],-1)),s(k,{for:"chapter",depth:"2"}),s(r,null,{default:n(()=>i[0]||(i[0]=[h(" 插件提供常見功能，例如序列化、內容編碼、壓縮等等。 ")])),_:1}),i[2]||(i[2]=p('<p>Ktor 中典型的請求/回應管道如下所示：</p><p><img src="'+d+'" alt="請求回應管道" width="600"></p><p>它始於一個請求，該請求被路由到特定的處理器，由我們的應用程式邏輯處理，並最終作出回應。</p><h2 id="add_functionality" tabindex="-1">使用插件新增功能 <a class="header-anchor" href="#add_functionality" aria-label="Permalink to &quot;使用插件新增功能 {id=&quot;add_functionality&quot;}&quot;">​</a></h2><p>許多應用程式需要超出應用程式邏輯範圍的常見功能。這可能包括序列化和內容編碼、壓縮、標頭、Cookie 支援等。所有這些都在 Ktor 中透過我們稱之為 <strong>插件</strong> 的方式提供。</p><p>如果我們查看先前的管道圖，插件位於請求/回應與應用程式邏輯之間：</p><p><img src="'+E+'" alt="插件管道" width="600"></p><p>當請求進來時：</p><ul><li>它透過路由機制被路由到正確的處理器</li><li>在交給處理器之前，它會經過一個或多個插件</li><li>處理器（應用程式邏輯）處理請求</li><li>在回應傳送給客戶端之前，它會經過一個或多個插件</li></ul><h2 id="routing" tabindex="-1">路由是一種插件 <a class="header-anchor" href="#routing" aria-label="Permalink to &quot;路由是一種插件 {id=&quot;routing&quot;}&quot;">​</a></h2><p>插件的設計方式旨在提供最大的靈活性，並允許它們存在於請求/回應管道的任何部分。事實上，我們直到現在一直稱之為 <code>routing</code> 的，不過就是一個插件。</p><p><img src="'+g+'" alt="路由作為插件" width="600"></p><h2 id="dependency" tabindex="-1">添加插件依賴 <a class="header-anchor" href="#dependency" aria-label="Permalink to &quot;添加插件依賴 {id=&quot;dependency&quot;}&quot;">​</a></h2><p>大多數插件都需要特定的依賴項。例如，<code>CORS</code> 插件需要在建構腳本中添加 <code>ktor-server-cors</code> 構件：</p>',14)),s(o,{group:"languages"},{default:n(()=>[s(l,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[s(t,{lang:"Kotlin",code:'            implementation("io.ktor:ktor-server-cors:$ktor_version")'})]),_:1}),s(l,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[s(t,{lang:"Groovy",code:'            implementation "io.ktor:ktor-server-cors:$ktor_version"'})]),_:1}),s(l,{title:"Maven","group-key":"maven"},{default:n(()=>[s(t,{lang:"XML",code:`            <dependency>
                <groupId>io.ktor</groupId>
                <artifactId>ktor-server-cors-jvm</artifactId>
                <version>\${ktor_version}</version>
            </dependency>`})]),_:1})]),_:1}),i[3]||(i[3]=p(`<h2 id="install" tabindex="-1">安裝插件 <a class="header-anchor" href="#install" aria-label="Permalink to &quot;安裝插件 {id=&quot;install&quot;}&quot;">​</a></h2><p>插件通常在伺服器的初始化階段使用 <code>install</code> 函式進行配置，該函式將一個插件作為參數。根據您 <a href="./server-create-and-configure">建立伺服器</a> 的方式，您可以在 <code>embeddedServer</code> 呼叫內部安裝插件...</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.application.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.plugins.cors.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.plugins.compression.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    embeddedServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Netty, port </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8080</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CORS)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Compression)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(wait </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>... 或指定的 <a href="./server-modules">模組</a>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.application.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.plugins.cors.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.server.plugins.compression.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Application</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CORS)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Compression)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>除了攔截請求和回應之外，插件還可以有一個可選的配置區塊，在此步驟中進行配置。</p><p>例如，在安裝 <a href="./server-sessions#cookie">Cookies</a> 時，我們可以設定某些參數，例如我們希望 Cookie 儲存在何處，或者它們的名稱：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Sessions) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    cookie</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyCookie</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MY_COOKIE&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="install-route" tabindex="-1">安裝插件到特定路由 <a class="header-anchor" href="#install-route" aria-label="Permalink to &quot;安裝插件到特定路由 {id=&quot;install-route&quot;}&quot;">​</a></h3><p>在 Ktor 中，您不僅可以全域安裝插件，還可以將其安裝到特定的 <a href="./server-routing">路由</a>。如果您需要針對不同的應用程式資源使用不同的插件配置，這可能很有用。例如，以下 <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/caching-headers-routes" target="_blank" rel="noreferrer">範例</a> 顯示如何為 <code>/index</code> 路由添加指定的 <a href="./server-caching-headers">快取標頭</a>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">route</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CachingHeaders) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { call, content </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CachingOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CacheControl.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MaxAge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(maxAgeSeconds </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1800</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        call.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">respondText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Index page&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>請注意，以下規則適用於同一個插件的多個安裝：</p><ul><li><p>安裝到特定路由的插件配置會覆寫其 <a href="#install">全域配置</a>。</p></li><li><p>路由會合併相同路由的安裝，且最後一次安裝會生效。例如，對於這樣的應用程式...</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">routing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    route</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CachingHeaders) { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* First configuration */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    route</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CachingHeaders) { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* Second configuration */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;b&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><p>&quot;}</p><p>... 對 <code>/index/a</code> 和 <code>/index/b</code> 的兩個呼叫都僅由插件的第二次安裝處理。</p><h2 id="default_available_custom" tabindex="-1">預設、可用和自訂插件 <a class="header-anchor" href="#default_available_custom" aria-label="Permalink to &quot;預設、可用和自訂插件 {id=&quot;default_available_custom&quot;}&quot;">​</a></h2><p>預設情況下，Ktor 不會啟用任何插件，因此您需要根據應用程式所需的功能自行安裝插件。</p><p>然而，Ktor 確實提供各種隨附的插件。您可以在 <a href="https://github.com/ktorio/ktor-plugin-registry/tree/main/plugins/server" target="_blank" rel="noreferrer">Ktor 插件註冊表</a> 中查看這些插件的完整列表。</p><p>此外，您還可以建立自己的 <a href="./server-custom-plugins">自訂插件</a>。</p>`,19))])}const D=c(F,[["render",C]]);export{q as __pageData,D as default};
