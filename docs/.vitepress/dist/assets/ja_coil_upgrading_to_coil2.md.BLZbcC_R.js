import{_ as i,c as a,o as e,ag as n}from"./chunks/framework.Bksy39di.js";const E=JSON.parse('{"title":"Coil 2.x へのアップグレード","description":"","frontmatter":{},"headers":[],"relativePath":"ja/coil/upgrading_to_coil2.md","filePath":"ja/coil/upgrading_to_coil2.md","lastUpdated":1753369988000}'),l={name:"ja/coil/upgrading_to_coil2.md"};function t(h,s,p,k,d,o){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="coil-2-x-へのアップグレード" tabindex="-1">Coil 2.x へのアップグレード <a class="header-anchor" href="#coil-2-x-へのアップグレード" aria-label="Permalink to &quot;Coil 2.x へのアップグレード&quot;">​</a></h1><p>これは、Coil 1.x から 2.x へのアップグレード時に発生する主な変更点と、それらにどう対応するかを重点的に説明する短いガイドです。このアップグレードガイドは、すべてのバイナリ互換性のない変更やソース互換性のない変更を網羅するものではありませんが、最も重要な変更点についてはカバーしています。</p><h2 id="最小-api-21" tabindex="-1">最小 API 21 <a class="header-anchor" href="#最小-api-21" aria-label="Permalink to &quot;最小 API 21&quot;">​</a></h2><p>Coil 2.x は最小 API 21 を要求します。これはComposeおよびOkHttp 4.xでも要求される最小APIです。</p><h2 id="imagerequest-のデフォルトスケール" tabindex="-1">ImageRequest のデフォルトスケール <a class="header-anchor" href="#imagerequest-のデフォルトスケール" aria-label="Permalink to &quot;ImageRequest のデフォルトスケール&quot;">​</a></h2><p>Coil 2.x では、<code>ImageRequest</code> のデフォルトのスケールが <code>Scale.FILL</code> から <code>Scale.FIT</code> に変更されました。これは、<code>ImageView</code> のデフォルト <code>ScaleType</code> および <code>Image</code> のデフォルト <code>ContentScale</code> と一貫性を持たせるためです。<code>ImageView</code> を <code>ImageRequest.target</code> として設定した場合、スケールは引き続き自動検出されます。</p><h2 id="size-のリファクタリング" tabindex="-1">Size のリファクタリング <a class="header-anchor" href="#size-のリファクタリング" aria-label="Permalink to &quot;Size のリファクタリング&quot;">​</a></h2><p><code>Size</code> の <code>width</code> と <code>height</code> は、<code>Int</code> のピクセル値ではなく、2つの <code>Dimension</code> になりました。<code>Dimension</code> はピクセル値、または未定義/無制限の制約を表す <code>Dimension.Undefined</code> のいずれかです。例えば、サイズが <code>Size(400, Dimension.Undefined)</code> の場合、その画像は高さに関係なく幅が 400 ピクセルになるようにスケーリングされるべきであることを意味します。ピクセル値（存在する場合）を取得するには <code>pxOrElse</code> 拡張関数を使用できます。それ以外の場合はフォールバックを使用します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> width </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> size.width.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pxOrElse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (width </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Use the pixel value.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>この変更は、ターゲットが1つの非境界寸法（例: <code>View</code> の <code>ViewGroup.LayoutParams.WRAP_CONTENT</code>、またはComposeの <code>Constraints.Infinity</code>）を持つケースのサポートを改善するために行われました。</p><h2 id="compose" tabindex="-1">Compose <a class="header-anchor" href="#compose" aria-label="Permalink to &quot;Compose&quot;">​</a></h2><p>Coil 2.x は、機能の追加、安定性の向上、パフォーマンスの改善のために Compose の統合を大幅に再構築しました。</p><p>Coil 1.x では、画像を読み込むために <code>rememberImagePainter</code> を使用していました。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> painter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rememberImagePainter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://example.com/image.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    crossfade</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    painter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> painter,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    contentDescription </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    contentScale </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ContentScale.Crop</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Coil 2.x では、<code>rememberImagePainter</code> が <code>rememberAsyncImagePainter</code> に変更され、以下の変更点があります。</p><ul><li><code>ImageRequest</code> を構成するための末尾ラムダ引数が削除されました。</li><li>Coil 2.x では、<code>rememberAsyncImagePainter</code> は <code>Image</code> と一貫性を持たせるためにデフォルトで <code>ContentScale.Fit</code> を使用しますが、Coil 1.x ではデフォルトで <code>ContentScale.Crop</code> を使用していました。そのため、<code>Image</code> でカスタムの <code>ContentScale</code> を設定する場合、それを <code>rememberAsyncImagePainter</code> にも渡す必要があります。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> painter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rememberAsyncImagePainter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ImageRequest.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(LocalContext.current)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://example.com/image.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">crossfade</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    contentScale </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ContentScale.Crop</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    painter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> painter,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    contentDescription </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    contentScale </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ContentScale.Crop</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>さらに、Coil には <code>AsyncImage</code> と <code>SubcomposeAsyncImage</code> のコンポーザブル関数が追加され、新機能が追加され、<code>rememberAsyncImagePainter</code> の設計上の制約の一部を回避できるようになりました。Compose の完全なドキュメントは<a href="./compose">こちら</a>で確認してください。</p><h2 id="ディスクキャッシュ" tabindex="-1">ディスクキャッシュ <a class="header-anchor" href="#ディスクキャッシュ" aria-label="Permalink to &quot;ディスクキャッシュ&quot;">​</a></h2><p>Coil 2.x は独自の公開ディスクキャッシュクラスを持ち、<code>imageLoader.diskCache</code> を使用してアクセスできます。Coil 1.x は OkHttp のディスクキャッシュに依存していましたが、もはや必要ありません。</p><p>1.x でディスクキャッシュを構成するには、<code>CoilUtils.createDefaultCache</code> を使用していました。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ImageLoader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">okHttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        OkHttpClient.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cache</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CoilUtils.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createDefaultCache</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context)).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>Coil 2.x では、<code>ImageLoader</code> と共に使用する場合、<code>OkHttpClient</code> に <code>Cache</code> オブジェクトを設定すべきではありません。代わりに、以下のようにディスクキャッシュオブジェクトを構成してください。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ImageLoader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">diskCache</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        DiskCache.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">directory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context.cacheDir.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;image_cache&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>この変更は、機能を追加し、パフォーマンスを向上させるために行われました。</p><ul><li>画像のデコード中にスレッド中断をサポート。 <ul><li>スレッド中断によりデコード操作を高速にキャンセルできます。これはリストを素早くスクロールする際に特に重要です。</li><li>カスタムディスクキャッシュを使用することで、Coil はネットワークソースがデコード前に完全にディスクに読み込まれることを保証できます。これは、データをディスクに書き込む処理は中断できないため必要です。デコードステップのみが中断可能です。OkHttp の <code>Cache</code> は Coil 2.0 では使用すべきではありません。なぜなら、すべてのデータがデコード前にディスクに書き込まれることを保証できないためです。</li></ul></li><li><code>InputStream</code> をサポートしない、または <code>File</code> への直接アクセスを必要とするデコード API（例: <code>ImageDecoder</code>、<code>MediaMetadataRetriever</code>）のために、バッファリング/一時ファイルの作成を避ける。</li><li>公開された読み書き可能な <code>DiskCache</code> API を追加。</li></ul><p>Coil 2.x では、<code>Cache-Control</code> およびその他のキャッシュヘッダーは引き続きサポートされますが、<code>Vary</code> ヘッダーは除外されます。これは、キャッシュが URL の一致のみをチェックするためです。さらに、応答コードが [200..300) の範囲にある応答のみがキャッシュされます。</p><p>Coil 1.x から 2.x へアップグレードする際、内部フォーマットが変更されたため、既存のディスクキャッシュはすべてクリアされます。</p><h2 id="画像パイプラインのリファクタリング" tabindex="-1">画像パイプラインのリファクタリング <a class="header-anchor" href="#画像パイプラインのリファクタリング" aria-label="Permalink to &quot;画像パイプラインのリファクタリング&quot;">​</a></h2><p>Coil 2.x では、画像パイプラインクラスがより柔軟になるようにリファクタリングされました。変更点の概要リストを以下に示します。</p><ul><li>新しいクラス <code>Keyer</code> が導入され、リクエストのメモリキャッシュキーを計算します。これは <code>Fetcher.key</code> を置き換えます。</li><li><code>Mapper</code>、<code>Keyer</code>、<code>Fetcher</code>、および <code>Decoder</code> は <code>null</code> を返すことで、コンポーネントリストの次の要素に処理を委譲できます。</li><li><code>Mapper.map</code> のシグネチャに <code>Options</code> を追加。</li><li><code>Fetcher.Factory</code> と <code>Decoder.Factory</code> を導入。これらのファクトリを使用して、特定の <code>Fetcher</code>/<code>Decoder</code> が適用可能かどうかを判断します。適用可能でない場合は <code>null</code> を返します。</li></ul><h2 id="ビットマッププーリングの削除" tabindex="-1">ビットマッププーリングの削除 <a class="header-anchor" href="#ビットマッププーリングの削除" aria-label="Permalink to &quot;ビットマッププーリングの削除&quot;">​</a></h2><p>Coil 2.x では、ビットマッププーリングおよびそれに関連するクラス（<code>BitmapPool</code>、<code>PoolableViewTarget</code>）が削除されました。削除された理由については<a href="https://github.com/coil-kt/coil/discussions/1186#discussioncomment-2305528" target="_blank" rel="noreferrer">こちら</a>を参照してください。</p>`,33)]))}const r=i(l,[["render",t]]);export{E as __pageData,r as default};
