import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.Bksy39di.js";const g=JSON.parse('{"title":"アノテーションによる定義","description":"","frontmatter":{"title":"アノテーションによる定義"},"headers":[],"relativePath":"ja/koin/reference/koin-annotations/definitions.md","filePath":"ja/koin/reference/koin-annotations/definitions.md","lastUpdated":1748365453000}'),l={name:"ja/koin/reference/koin-annotations/definitions.md"};function t(p,s,h,k,o,d){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="アノテーションによる定義" tabindex="-1">アノテーションによる定義 <a class="header-anchor" href="#アノテーションによる定義" aria-label="Permalink to &quot;アノテーションによる定義&quot;">​</a></h1><p>Koinアノテーションを使用すると、通常のKoin DSLと同じ種類の定義を宣言できますが、アノテーションを使って行います。クラスに必要なアノテーションをタグ付けするだけで、すべてが自動的に生成されます！</p><p>例えば、<code>single { MyComponent(get()) }</code>というDSL宣言に相当するものは、次のように<code>@Single</code>でタグ付けするだけで実現できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Single</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myDependency : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyDependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Koinアノテーションは、Koin DSLと同じセマンティクスを維持します。以下の定義でコンポーネントを宣言できます。</p><ul><li><code>@Single</code> - シングルトンインスタンス（DSLでは<code>single { }</code>として宣言されます）</li><li><code>@Factory</code> - ファクトリーインスタンス。インスタンスが必要になるたびに再作成されるインスタンス用。（DSLでは<code>factory { }</code>として宣言されます）</li><li><code>@KoinViewModel</code> - Android ViewModelインスタンス（DSLでは<code>viewModel { }</code>として宣言されます）</li><li><code>@KoinWorker</code> - Android Worker Workmanagerインスタンス（DSLでは<code>worker { }</code>として宣言されます）</li></ul><p>スコープについては、<a href="/ja/koin/reference/koin-core/scopes">Declaring Scopes</a>セクションを参照してください。</p><h3 id="kotlin-multipaltform向けcompose-viewmodelの生成-1-4-0以降" tabindex="-1">Kotlin Multipaltform向けCompose ViewModelの生成 (1.4.0以降) <a class="header-anchor" href="#kotlin-multipaltform向けcompose-viewmodelの生成-1-4-0以降" aria-label="Permalink to &quot;Kotlin Multipaltform向けCompose ViewModelの生成 (1.4.0以降)&quot;">​</a></h3><p><code>@KoinViewModel</code>アノテーションは、AndroidまたはCompsoe KMP ViewModelのいずれかを生成するために使用できます。通常の<code>org.koin.androidx.viewmodel.dsl.viewModel</code>の代わりに<code>org.koin.compose.viewmodel.dsl.viewModel</code>を使用して<code>viewModel</code> Koin定義を生成するには、<code>KOIN_USE_COMPOSE_VIEWMODEL</code>オプションを有効にする必要があります。</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ksp {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    arg(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;KOIN_USE_COMPOSE_VIEWMODEL&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;true&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p><code>USE_COMPOSE_VIEWMODEL</code>キーは、<code>KOIN_USE_COMPOSE_VIEWMODEL</code>の使用が推奨されるため、非推奨です。</p></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Koin 4.0では、ViewModel型argiumentが同じライブラリから提供されるため、これら2つのViewModel DSLが1つに統合される予定です。</p></div><h2 id="自動バインディングまたは特定バインディング" tabindex="-1">自動バインディングまたは特定バインディング <a class="header-anchor" href="#自動バインディングまたは特定バインディング" aria-label="Permalink to &quot;自動バインディングまたは特定バインディング&quot;">​</a></h2><p>コンポーネントを宣言する際、検出されたすべての「バインディング」（関連するスーパークラス）は、すでに準備されています。例えば、以下の定義の場合：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Single</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myDependency : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyDependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyInterface</span></span></code></pre></div><p>Koinは、<code>MyComponent</code>コンポーネントが<code>MyInterface</code>にも紐付けられることを宣言します。DSLでは<code>single { MyComponent(get()) } bind MyInterface::class</code>に相当します。</p><p>Koinに自動で検出させる代わりに、<code>binds</code>アノテーションパラメータを使用して、実際にバインドしたい型を指定することもできます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Single</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(binds </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [MyBoundType::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span></code></pre></div><h2 id="nullableな依存関係" tabindex="-1">Nullableな依存関係 <a class="header-anchor" href="#nullableな依存関係" aria-label="Permalink to &quot;Nullableな依存関係&quot;">​</a></h2><p>コンポーネントがnullableな依存関係を使用している場合、心配はいりません、自動的に処理されます。定義アノテーションを使い続けるだけで、Koinが何をすべきかを推測します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Single</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myDependency : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyDependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?)</span></span></code></pre></div><p>生成されるDSLの等価なものは<code>single { MyComponent(getOrNull()) }</code>となります。</p><blockquote><p>これは、注入されたパラメータとプロパティにも機能することに注意してください。</p></blockquote><h2 id="namedによるqualifier" tabindex="-1"><code>@Named</code>によるQualifier <a class="header-anchor" href="#namedによるqualifier" aria-label="Permalink to &quot;\`@Named\`によるQualifier&quot;">​</a></h2><p>同じ型に対する複数の定義を区別するために、<code>@Named</code>アノテーションを使用して、定義に「名前」（qualifierとも呼ばれる）を追加することができます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Single</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Named</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;InMemoryLogger&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LoggerInMemoryDataSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LoggerDataSource</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Single</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Named</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;DatabaseLogger&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LoggerLocalDataSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> logDao: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LogDao</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LoggerDataSource</span></span></code></pre></div><p>依存関係を解決する際、<code>named</code>関数でqualifierを使用するだけです。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> logger: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LoggerDataSource</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> inject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">named</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;InMemoryLogger&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><p>カスタムQualifierアノテーションを作成することも可能です。前の例を使用すると：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Named</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">annotation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> InMemoryLogger</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Named</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">annotation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DatabaseLogger</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Single</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@InMemoryLogger</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LoggerInMemoryDataSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LoggerDataSource</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Single</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@DatabaseLogger</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LoggerLocalDataSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> logDao: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LogDao</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LoggerDataSource</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> logger: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LoggerDataSource</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> inject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">named</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">InMemoryLogger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;())</span></span></code></pre></div><h2 id="injectedparamによる注入パラメータ" tabindex="-1"><code>@InjectedParam</code>による注入パラメータ <a class="header-anchor" href="#injectedparamによる注入パラメータ" aria-label="Permalink to &quot;\`@InjectedParam\`による注入パラメータ&quot;">​</a></h2><p>コンストラクタのメンバーを「注入パラメータ」としてタグ付けできます。これは、解決を呼び出す際に依存関係がグラフに渡されることを意味します。</p><p>例えば：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Single</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@InjectedParam</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myDependency : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyDependency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>その後、<code>MyComponent</code>を呼び出し、<code>MyDependency</code>のインスタンスを渡すことができます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MyDependency</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Resolve MyComponent while passing  MyDependency</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">koin.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parametersOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(m) }</span></span></code></pre></div><p>生成されるDSLの等価なものは<code>single { params -&gt; MyComponent(params.get()) }</code>となります。</p><h2 id="遅延依存関係の注入-lazy-t" tabindex="-1">遅延依存関係の注入 - <code>Lazy&lt;T&gt;</code> <a class="header-anchor" href="#遅延依存関係の注入-lazy-t" aria-label="Permalink to &quot;遅延依存関係の注入 - \`Lazy&lt;T&gt;\`&quot;">​</a></h2><p>Koinは遅延依存関係を自動的に検出して解決できます。例えば、ここでは<code>LoggerDataSource</code>の定義を遅延解決したいとします。<code>Lazy</code> Kotlin型を次のように使用するだけです。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Single</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LoggerInMemoryDataSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LoggerDataSource</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Single</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LoggerAggregator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lazyLogger : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Lazy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LoggerDataSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;)</span></span></code></pre></div><p>内部的には、<code>get()</code>の代わりに<code>inject()</code>を使用したDSLが生成されます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">single</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LoggerAggregator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">inject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) }</span></span></code></pre></div><h2 id="依存関係のリストの注入-list-t" tabindex="-1">依存関係のリストの注入 - <code>List&lt;T&gt;</code> <a class="header-anchor" href="#依存関係のリストの注入-list-t" aria-label="Permalink to &quot;依存関係のリストの注入 - \`List&lt;T&gt;\`&quot;">​</a></h2><p>Koinは、すべての依存関係のリストを自動的に検出して解決できます。例えば、ここではすべての<code>LoggerDataSource</code>定義を解決したいとします。<code>List</code> Kotlin型を次のように使用するだけです。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Single</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Named</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;InMemoryLogger&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LoggerInMemoryDataSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LoggerDataSource</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Single</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Named</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;DatabaseLogger&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LoggerLocalDataSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> logDao: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LogDao</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LoggerDataSource</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Single</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LoggerAggregator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> datasource : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LoggerDataSource</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;)</span></span></code></pre></div><p>内部的には、<code>getAll()</code>関数を使用したDSLが生成されます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">single</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">LoggerAggregator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) }</span></span></code></pre></div><h2 id="propertyによるプロパティ" tabindex="-1"><code>@Property</code>によるプロパティ <a class="header-anchor" href="#propertyによるプロパティ" aria-label="Permalink to &quot;\`@Property\`によるプロパティ&quot;">​</a></h2><p>定義内のKoinプロパティを解決するには、コンストラクタのメンバーに<code>@Property</code>をタグ付けするだけです。これにより、アノテーションに渡された値に基づいてKoinプロパティが解決されます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Factory</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ComponentWithProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @Property</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>生成されるDSLの等価なものは<code>factory { ComponentWithProps(getProperty(&quot;id&quot;)) }</code>となります。</p><h3 id="propertyvalue-デフォルト値を持つプロパティ-1-4以降" tabindex="-1"><code>@PropertyValue</code> - デフォルト値を持つプロパティ (1.4以降) <a class="header-anchor" href="#propertyvalue-デフォルト値を持つプロパティ-1-4以降" aria-label="Permalink to &quot;\`@PropertyValue\` - デフォルト値を持つプロパティ (1.4以降)&quot;">​</a></h3><p>Koinアノテーションは、<code>@PropertyValue</code>アノテーションを使用して、コードから直接プロパティのデフォルト値を定義する機能を提供します。 例を見てみましょう：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Factory</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ComponentWithProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @Property</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">){</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> companion</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        @PropertyValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DEFAULT_ID : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;_empty_id&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>生成されるDSLの等価なものは<code>factory { ComponentWithProps(getProperty(&quot;id&quot;, ComponentWithProps.DEFAAULT_ID)) }</code>となります。</p>`,56)]))}const c=i(l,[["render",t]]);export{g as __pageData,c as default};
