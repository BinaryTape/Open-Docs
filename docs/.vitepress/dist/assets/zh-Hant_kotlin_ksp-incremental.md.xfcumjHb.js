import{_ as i,c as a,o as e,ag as l}from"./chunks/framework.Bksy39di.js";const c=JSON.parse('{"title":"增量處理","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/ksp-incremental.md","filePath":"zh-Hant/kotlin/ksp-incremental.md","lastUpdated":1754307826000}'),t={name:"zh-Hant/kotlin/ksp-incremental.md"};function n(p,s,h,k,o,d){return e(),a("div",null,s[0]||(s[0]=[l(`<h1 id="增量處理" tabindex="-1">增量處理 <a class="header-anchor" href="#增量處理" aria-label="Permalink to &quot;增量處理&quot;">​</a></h1><p>增量處理是一種盡可能避免重新處理源碼的處理技術。增量處理的主要目標是縮短典型變更-編譯-測試週期的週轉時間。有關一般資訊，請參閱維基百科關於<a href="https://en.wikipedia.org/wiki/Incremental_computing" target="_blank" rel="noreferrer">增量計算</a>的文章。</p><p>為了判斷哪些源碼是_髒污的_（即需要重新處理的），KSP 需要處理器（processor）的協助來識別哪些輸入源碼對應哪些生成的輸出。為了協助處理這個經常繁瑣且容易出錯的過程，KSP 的設計旨在只要求最少量的_根源碼_，處理器將其用作導航程式碼結構的起始點。換句話說，如果 <code>KSNode</code> 是從以下任何一個方法獲得的，處理器需要將輸出與對應 <code>KSNode</code> 的源碼關聯起來：</p><ul><li><code>Resolver.getAllFiles</code></li><li><code>Resolver.getSymbolsWithAnnotation</code></li><li><code>Resolver.getClassDeclarationByName</code></li><li><code>Resolver.getDeclarationsFromPackage</code></li></ul><p>增量處理目前預設為啟用。要停用它，請將 Gradle 屬性 <code>ksp.incremental=false</code> 設定。要啟用日誌，以根據依賴項和輸出傾印髒污集，請使用 <code>ksp.incremental.log=true</code>。您可以在 <code>build</code> 輸出目錄中找到這些副檔名為 <code>.log</code> 的日誌檔案。</p><p>在 JVM 上，類別路徑變更以及 Kotlin 和 Java 源碼變更預設會被追蹤。要僅追蹤 Kotlin 和 Java 源碼變更，請透過設定 <code>ksp.incremental.intermodule=false</code> Gradle 屬性來停用類別路徑追蹤。</p><h2 id="聚合式與隔離式" tabindex="-1">聚合式與隔離式 <a class="header-anchor" href="#聚合式與隔離式" aria-label="Permalink to &quot;聚合式與隔離式&quot;">​</a></h2><p>類似於<a href="https://docs.gradle.org/current/userguide/java_plugin.html#sec:incremental_annotation_processing" target="_blank" rel="noreferrer">Gradle 註解處理</a>中的概念，KSP 同時支援_聚合式_和_隔離式_模式。請注意，與 Gradle 註解處理不同，KSP 將每個輸出歸類為聚合式或隔離式，而不是將整個處理器歸類。</p><p>聚合式輸出可能會受到任何輸入變更的影響，除了移除不影響其他檔案的檔案。這意味著任何輸入變更都會導致所有聚合式輸出被重建，進而意味著所有對應的已註冊、新增和修改的源碼檔案都會被重新處理。</p><p>例如，一個收集所有帶有特定註解符號的輸出被視為聚合式輸出。</p><p>隔離式輸出僅依賴於其指定的源碼。其他源碼的變更不會影響隔離式輸出。請注意，與 Gradle 註解處理不同，您可以為給定的輸出定義多個源碼檔案。</p><p>例如，一個專用於它所實作的介面的生成類別被視為隔離式。</p><p>總結來說，如果一個輸出可能依賴於新的或任何已變更的源碼，它就被視為聚合式。否則，該輸出是隔離式。</p><p>以下是為熟悉 Java 註解處理的讀者提供的摘要：</p><ul><li>在隔離式 Java 註解處理器中，所有輸出在 KSP 中都是隔離式。</li><li>在聚合式 Java 註解處理器中，某些輸出可以是隔離式，某些可以是聚合式。</li></ul><h3 id="如何實作" tabindex="-1">如何實作 <a class="header-anchor" href="#如何實作" aria-label="Permalink to &quot;如何實作&quot;">​</a></h3><p>依賴項是透過輸入和輸出檔案的關聯來計算的，而不是透過註解。這是一種多對多關係。</p><p>由於輸入-輸出關聯所造成的髒污傳播規則如下：</p><ol><li>如果輸入檔案被變更，它將總是會被重新處理。</li><li>如果輸入檔案被變更，且它與某個輸出相關聯，那麼與該相同輸出相關聯的所有其他輸入檔案也將被重新處理。這是遞移的，也就是說，失效會重複發生，直到沒有新的髒污檔案為止。</li><li>所有與一個或多個聚合式輸出相關聯的輸入檔案都將被重新處理。換句話說，如果一個輸入檔案未與任何聚合式輸出相關聯，它將不會被重新處理（除非它符合上述第 1 或第 2 點）。</li></ol><p>原因如下：</p><ol><li>如果輸入被變更，可能會引入新資訊，因此處理器需要再次以該輸入執行。</li><li>輸出是由一組輸入構成的。處理器可能需要所有輸入才能重新生成輸出。</li><li><code>aggregating=true</code> 意味著輸出可能依賴於新資訊，這些資訊可以來自新檔案，或已變更的現有檔案。 <code>aggregating=false</code> 意味著處理器確定資訊僅來自某些輸入檔案，而不會來自其他或新的檔案。</li></ol><h2 id="範例-1" tabindex="-1">範例 1 <a class="header-anchor" href="#範例-1" aria-label="Permalink to &quot;範例 1&quot;">​</a></h2><p>處理器在讀取 <code>A.kt</code> 中的類別 <code>A</code> 和 <code>B.kt</code> 中的類別 <code>B</code> 之後生成 <code>outputForA</code>，其中 <code>A</code> 繼承 <code>B</code>。處理器透過 <code>Resolver.getSymbolsWithAnnotation</code> 獲得 <code>A</code>，然後從 <code>A</code> 的 <code>KSClassDeclaration.superTypes</code> 獲得 <code>B</code>。因為包含 <code>B</code> 是由於 <code>A</code>，所以 <code>B.kt</code> 不需要為 <code>outputForA</code> 在 <code>dependencies</code> 中指定。在這種情況下，您仍然可以指定 <code>B.kt</code>，但這是沒有必要的。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// A.kt</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Interesting</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">B</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// B.kt</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">open</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> B</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Example1Processor.kt</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Example1Processor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SymbolProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> process</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(resolver: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Resolver</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> declA </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> resolver.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getSymbolsWithAnnotation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Interesting&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">first</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> KSClassDeclaration</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> declB </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> declA.superTypes.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">first</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().declaration</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // B.kt 不是必需的，因為它可以被 KSP 推斷為依賴項</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dependencies </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(aggregating </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, declA.containingFile</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // outputForA.kt</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> outputName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;outputFor\${declA.simpleName.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">asString</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">()}&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // outputForA 依賴於 A.kt 和 B.kt</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> output </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> codeGenerator.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createNewFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dependencies, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;com.example&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, outputName, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;kt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        output.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;// </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$declA</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> : </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$declB</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toByteArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        output.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="範例-2" tabindex="-1">範例 2 <a class="header-anchor" href="#範例-2" aria-label="Permalink to &quot;範例 2&quot;">​</a></h2><p>假設處理器在讀取 <code>sourceA</code> 後生成 <code>outputA</code>，且在讀取 <code>sourceB</code> 後生成 <code>outputB</code>。</p><p>當 <code>sourceA</code> 變更時：</p><ul><li>如果 <code>outputB</code> 是聚合式，<code>sourceA</code> 和 <code>sourceB</code> 都會被重新處理。</li><li>如果 <code>outputB</code> 是隔離式，只有 <code>sourceA</code> 會被重新處理。</li></ul><p>當 <code>sourceC</code> 被新增時：</p><ul><li>如果 <code>outputB</code> 是聚合式，<code>sourceC</code> 和 <code>sourceB</code> 都會被重新處理。</li><li>如果 <code>outputB</code> 是隔離式，只有 <code>sourceC</code> 會被重新處理。</li></ul><p>當 <code>sourceA</code> 被移除時，無需重新處理。</p><p>當 <code>sourceB</code> 被移除時，無需重新處理。</p><h2 id="檔案髒污是如何判斷的" tabindex="-1">檔案髒污是如何判斷的 <a class="header-anchor" href="#檔案髒污是如何判斷的" aria-label="Permalink to &quot;檔案髒污是如何判斷的&quot;">​</a></h2><p>髒污檔案要麼是使用者直接_變更_，要麼是受到其他髒污檔案間接_影響_。KSP 分兩步傳播髒污：</p><ul><li>透過_解析追蹤_傳播： 解析類型引用（隱式或顯式）是從一個檔案導航到另一個檔案的唯一方式。當處理器解析類型引用時，一個包含可能影響解析結果的變更的已變更或受影響的檔案將影響包含該引用的檔案。</li><li>透過_輸入-輸出對應_傳播： 如果源碼檔案被變更或受影響，所有與該檔案有共同輸出的其他源碼檔案都會受到影響。</li></ul><p>請注意，它們兩者都是遞移的，並且第二種形式構成等價類別。</p><h2 id="報告錯誤" tabindex="-1">報告錯誤 <a class="header-anchor" href="#報告錯誤" aria-label="Permalink to &quot;報告錯誤&quot;">​</a></h2><p>要報告錯誤，請設定 Gradle 屬性 <code>ksp.incremental=true</code> 和 <code>ksp.incremental.log=true</code>，並執行一次乾淨的建置。此建置會產生兩個日誌檔案：</p><ul><li><code>build/kspCaches/&lt;source set&gt;/logs/kspDirtySet.log</code></li><li><code>build/kspCaches/&lt;source set&gt;/logs/kspSourceToOutputs.log</code></li></ul><p>然後您可以執行連續的增量建置，這將產生另外兩個日誌檔案：</p><ul><li><code>build/kspCaches/&lt;source set&gt;/logs/kspDirtySetByDeps.log</code></li><li><code>build/kspCaches/&lt;source set&gt;/logs/kspDirtySetByOutputs.log</code></li></ul><p>這些日誌包含源碼和輸出的檔案名稱，加上建置的時間戳記。</p>`,42)]))}const E=i(t,[["render",n]]);export{c as __pageData,E as default};
