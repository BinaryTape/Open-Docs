import{_ as h,a as o,b as r,c as d}from"./chunks/test-failed.BxM9HXpM.js";import{_ as E}from"./chunks/create-test.CrrH3ADr.js";import{_ as g,C as p,c,o as y,ag as k,j as s,a,G as t,w as l}from"./chunks/framework.Bksy39di.js";const D=JSON.parse('{"title":"JVM에서 JUnit을 사용한 테스트 코드 – 튜토리얼","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kotlin/jvm-test-using-junit.md","filePath":"ko/kotlin/jvm-test-using-junit.md","lastUpdated":1755514048000}'),u={name:"ko/kotlin/jvm-test-using-junit.md"};function F(m,i,C,b,v,f){const n=p("tab"),e=p("tabs");return y(),c("div",null,[i[7]||(i[7]=k('<h1 id="jvm에서-junit을-사용한-테스트-코드-–-튜토리얼" tabindex="-1">JVM에서 JUnit을 사용한 테스트 코드 – 튜토리얼 <a class="header-anchor" href="#jvm에서-junit을-사용한-테스트-코드-–-튜토리얼" aria-label="Permalink to &quot;JVM에서 JUnit을 사용한 테스트 코드 – 튜토리얼&quot;">​</a></h1><p>이 튜토리얼은 Kotlin/JVM 프로젝트에서 간단한 단위 테스트를 작성하고 Gradle 빌드 도구를 사용하여 실행하는 방법을 보여줍니다.</p><p>이 프로젝트에서는 <a href="https://kotlinlang.org/api/latest/kotlin.test/index.html" target="_blank" rel="noreferrer"><code>kotlin.test</code></a> 라이브러리를 사용하고 JUnit을 사용하여 테스트를 실행합니다. 멀티플랫폼 앱에서 작업하는 경우 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-run-tests.html" target="_blank" rel="noreferrer">Kotlin Multiplatform 튜토리얼</a>을 참조하세요.</p><p>시작하려면 먼저 최신 버전의 <a href="https://www.jetbrains.com/idea/download/index.html" target="_blank" rel="noreferrer">IntelliJ IDEA</a>를 다운로드하여 설치합니다.</p><h2 id="의존성-추가" tabindex="-1">의존성 추가 <a class="header-anchor" href="#의존성-추가" aria-label="Permalink to &quot;의존성 추가&quot;">​</a></h2>',5)),s("ol",null,[i[6]||(i[6]=s("li",null,[s("p",null,[a("IntelliJ IDEA에서 Kotlin 프로젝트를 엽니다. 프로젝트가 없다면, "),s("a",{href:"https://www.jetbrains.com/help/idea/create-your-first-kotlin-app.html#create-project",target:"_blank",rel:"noreferrer"},"새로 생성합니다"),a(".")])],-1)),s("li",null,[i[2]||(i[2]=s("p",null,[s("code",null,"build.gradle(.kts)"),a(" 파일을 열고 "),s("code",null,"testImplementation"),a(" 의존성이 있는지 확인합니다. 이 의존성은 "),s("code",null,"kotlin.test"),a(" 및 "),s("code",null,"JUnit"),a("과 함께 작업할 수 있도록 합니다.")],-1)),t(e,{group:"build-script"},{default:l(()=>[t(n,{title:"Kotlin","group-key":"kotlin"},{default:l(()=>i[0]||(i[0]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"dependencies"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"    // Other dependencies.")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    testImplementation"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"test"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"))")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),t(n,{title:"Groovy","group-key":"groovy"},{default:l(()=>i[1]||(i[1]=[s("div",{class:"language-groovy vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"groovy"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"dependencies {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"    // Other dependencies.")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    testImplementation "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'org.jetbrains.kotlin:kotlin-test'")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1})]),s("li",null,[i[5]||(i[5]=s("p",null,[s("code",null,"test"),a(" 태스크를 "),s("code",null,"build.gradle(.kts)"),a(" 파일에 추가합니다.")],-1)),t(e,{group:"build-script"},{default:l(()=>[t(n,{title:"Kotlin","group-key":"kotlin"},{default:l(()=>i[3]||(i[3]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"tasks."),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"test"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    useJUnitPlatform"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),t(n,{title:"Groovy","group-key":"groovy"},{default:l(()=>i[4]||(i[4]=[s("div",{class:"language-groovy vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"groovy"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"test {")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    useJUnitPlatform()")]),a(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1})])]),i[8]||(i[8]=k(`<div class="note custom-block"><p class="custom-block-title">NOTE</p><p>빌드 스크립트에서 <code>useJUnitPlatform()</code> 함수를 사용하면, <code>kotlin-test</code> 라이브러리가 JUnit 5를 자동으로 의존성으로 포함합니다. 이 설정은 JVM 전용 프로젝트와 Kotlin 멀티플랫폼(KMP) 프로젝트의 JVM 테스트에서 모든 JUnit 5 API와 <code>kotlin-test</code> API에 접근할 수 있도록 합니다.</p></div><p>다음은 <code>build.gradle.kts</code>의 전체 코드입니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jvm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) version </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2.2.10&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">group </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;org.example&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">version </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1.0-SNAPSHOT&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">repositories</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    mavenCentral</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    testImplementation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">tasks.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    useJUnitPlatform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="테스트할-코드-추가" tabindex="-1">테스트할 코드 추가 <a class="header-anchor" href="#테스트할-코드-추가" aria-label="Permalink to &quot;테스트할 코드 추가&quot;">​</a></h2><ol><li><p><code>src/main/kotlin</code>에 있는 <code>Main.kt</code> 파일을 엽니다.</p><p><code>src</code> 디렉터리에는 Kotlin 소스 파일과 리소스가 포함되어 있습니다. <code>Main.kt</code> 파일에는 <code>Hello, World!</code>를 출력하는 샘플 코드가 포함되어 있습니다.</p></li><li><p>두 정수를 더하는 <code>sum()</code> 함수를 가진 <code>Sample</code> 클래스를 생성합니다.</p></li></ol><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Sample</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, b: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="테스트-생성" tabindex="-1">테스트 생성 <a class="header-anchor" href="#테스트-생성" aria-label="Permalink to &quot;테스트 생성&quot;">​</a></h2><ol><li>IntelliJ IDEA에서 <code>Sample</code> 클래스에 대해 <strong>Code</strong> | <strong>Generate</strong> | **Test...**를 선택합니다.</li></ol><p><img src="`+h+'" alt="Generate a test"></p><ol start="2"><li>테스트 클래스의 이름을 지정합니다. 예를 들어, <code>SampleTest</code>입니다.</li></ol><p><img src="'+E+`" alt="Create a test"></p><p>IntelliJ IDEA가 <code>test</code> 디렉터리에 <code>SampleTest.kt</code> 파일을 생성합니다. 이 디렉터리에는 Kotlin 테스트 소스 파일과 리소스가 포함되어 있습니다.</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p><code>src/test/kotlin</code>에 테스트용 <code>*.kt</code> 파일을 수동으로 생성할 수도 있습니다.</p></div><ol start="3"><li><p><code>SampleTest.kt</code> 파일에 <code>sum()</code> 함수를 위한 테스트 코드를 추가합니다.</p><ul><li><a href="https://kotlinlang.org/api/latest/kotlin.test/kotlin.test/-test/index.html" target="_blank" rel="noreferrer"><code>@Test</code> 어노테이션</a>을 사용하여 테스트 <code>testSum()</code> 함수를 정의합니다.</li><li><a href="https://kotlinlang.org/api/latest/kotlin.test/kotlin.test/assert-equals.html" target="_blank" rel="noreferrer"><code>assertEquals()</code> 함수</a>를 사용하여 <code>sum()</code> 함수가 예상 값을 반환하는지 확인합니다.</li></ul></li></ol><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.example.Sample</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.junit.jupiter.api.Assertions.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.test.Test</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SampleTest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> testSample: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Sample</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Sample</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    @Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> testSum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> expected </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 42</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        assertEquals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(expected, testSample.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">40</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="테스트-실행" tabindex="-1">테스트 실행 <a class="header-anchor" href="#테스트-실행" aria-label="Permalink to &quot;테스트 실행&quot;">​</a></h2><ol><li>거터 아이콘을 사용하여 테스트를 실행합니다.</li></ol><p><img src="`+o+'" alt="Run the test"></p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p><code>./gradlew check</code> 명령어를 사용하여 커맨드 라인 인터페이스를 통해 모든 프로젝트 테스트를 실행할 수도 있습니다.</p></div><ol start="2"><li><strong>Run</strong> 도구 창에서 결과를 확인합니다.</li></ol><p><img src="'+r+`" alt="Check the test result. The test passed successfully"></p><p>테스트 함수가 성공적으로 실행되었습니다.</p><ol start="3"><li><code>expected</code> 변수 값을 43으로 변경하여 테스트가 올바르게 작동하는지 확인합니다.</li></ol><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Test</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> testSum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> expected </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 43</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    assertEquals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(expected, classForTesting.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">40</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ol start="4"><li>테스트를 다시 실행하고 결과를 확인합니다.</li></ol><p><img src="`+d+'" alt="Check the test result. The test has failed"></p><p>테스트 실행이 실패했습니다.</p><h2 id="다음-단계" tabindex="-1">다음 단계 <a class="header-anchor" href="#다음-단계" aria-label="Permalink to &quot;다음 단계&quot;">​</a></h2><p>첫 번째 테스트를 완료한 후 다음을 수행할 수 있습니다.</p><ul><li>다른 <a href="https://kotlinlang.org/api/latest/kotlin.test/kotlin.test/" target="_blank" rel="noreferrer"><code>kotlin.test</code></a> 함수를 사용하여 더 많은 테스트를 작성합니다. 예를 들어, <a href="https://kotlinlang.org/api/latest/kotlin.test/kotlin.test/assert-not-equals.html" target="_blank" rel="noreferrer"><code>assertNotEquals()</code></a> 함수를 사용합니다.</li><li><a href="/ko/kotlin/power-assert">Kotlin Power-assert 컴파일러 플러그인</a>을 사용하여 테스트 출력을 개선합니다. 이 플러그인은 테스트 출력에 상황별 정보를 추가합니다.</li><li>Kotlin과 Spring Boot로 <a href="/ko/kotlin/jvm-get-started-spring-boot">첫 번째 서버 측 애플리케이션을 생성합니다</a>.</li></ul>',30))])}const T=g(u,[["render",F]]);export{D as __pageData,T as default};
