import{_ as a,c as s,o as t,ag as n}from"./chunks/framework.Bksy39di.js";const c=JSON.parse('{"title":"テスト容易性","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/api-guidelines-testability.md","filePath":"ja/kotlin/api-guidelines-testability.md","lastUpdated":1754307826000}'),e={name:"ja/kotlin/api-guidelines-testability.md"};function l(p,i,h,k,o,d){return t(),s("div",null,i[0]||(i[0]=[n(`<h1 id="テスト容易性" tabindex="-1">テスト容易性 <a class="header-anchor" href="#テスト容易性" aria-label="Permalink to &quot;テスト容易性&quot;">​</a></h1><p><a href="/ja/kotlin/api-guidelines-consistency#maintain-conventions-and-quality">ライブラリのテスト</a>に加えて、ライブラリを使用するコードもテスト可能であることを確認してください。</p><h2 id="グローバル状態と状態を持つトップレベル関数を避ける" tabindex="-1">グローバル状態と状態を持つトップレベル関数を避ける <a class="header-anchor" href="#グローバル状態と状態を持つトップレベル関数を避ける" aria-label="Permalink to &quot;グローバル状態と状態を持つトップレベル関数を避ける&quot;">​</a></h2><p>ライブラリは、グローバル変数内の状態に依存したり、パブリックAPIの一部として状態を持つトップレベル関数を提供したりするべきではありません。 このような変数や関数は、テストがこれらのグローバル値を制御する方法を見つける必要があるため、ライブラリを使用するコードのテストを困難にします。</p><p>たとえば、ライブラリは現在時刻へのアクセスを提供するグローバルにアクセス可能な関数を定義するかもしれません：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> instant: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Instant</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Clock.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">now</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(instant)</span></span></code></pre></div><p>このAPIを使用するコードはテストが困難になります。なぜなら、<code>now()</code> 関数の呼び出しは常に実際の現在時刻を返しますが、テストでは偽の値を返すことが望ましい場合が多いためです。</p><p>テスト容易性を有効にするため、<a href="https://github.com/Kotlin/kotlinx-datetime" target="_blank" rel="noreferrer"><code>kotlinx-datetime</code></a> ライブラリは、ユーザーが <code>Clock</code> インスタンスを取得し、それを使用して現在時刻を取得できるAPIを持っています：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clock: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Clock</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Clock.System</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> instant: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Instant</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clock.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">now</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(instant)</span></span></code></pre></div><p>これにより、ライブラリのユーザーは自身のクラスに <code>Clock</code> インスタンスを注入し、テスト中に実際の実装を偽の実装に置き換えることができます。</p><h2 id="次のステップ" tabindex="-1">次のステップ <a class="header-anchor" href="#次のステップ" aria-label="Permalink to &quot;次のステップ&quot;">​</a></h2><p>まだ行っていない場合は、これらのページも確認することを検討してください：</p><ul><li><a href="/ja/kotlin/api-guidelines-backward-compatibility">後方互換性</a>ページで、後方互換性の維持について学びましょう。</li><li>効果的なドキュメント作成のプラクティスに関する広範な概要については、<a href="/ja/kotlin/api-guidelines-informative-documentation">有益なドキュメント</a>を参照してください。</li></ul>`,13)]))}const g=a(e,[["render",l]]);export{c as __pageData,g as default};
