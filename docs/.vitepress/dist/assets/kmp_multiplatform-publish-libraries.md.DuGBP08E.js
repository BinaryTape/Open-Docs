import{_ as o,a as k,b as d}from"./chunks/published_on_maven_central.BgjvbPaZ.js";import{_ as c,C as t,c as g,o as E,ag as n,G as e,j as s,w as l,a as i}from"./chunks/framework.Bksy39di.js";const A=JSON.parse('{"title":"将你的库发布到 Maven Central – 教程","description":"","frontmatter":{},"headers":[],"relativePath":"kmp/multiplatform-publish-libraries.md","filePath":"kmp/multiplatform-publish-libraries.md","lastUpdated":1755516278000}'),u={name:"kmp/multiplatform-publish-libraries.md"};function y(b,a,m,F,C,v){const p=t("TabItem"),r=t("Tabs"),h=t("shortcut");return E(),g("div",null,[a[8]||(a[8]=n('<h1 id="将你的库发布到-maven-central-–-教程" tabindex="-1">将你的库发布到 Maven Central – 教程 <a class="header-anchor" href="#将你的库发布到-maven-central-–-教程" aria-label="Permalink to &quot;将你的库发布到 Maven Central – 教程&quot;">​</a></h1><p>本教程将介绍如何将你的 Kotlin Multiplatform 库发布到 <a href="https://central.sonatype.com/" target="_blank" rel="noreferrer">Maven Central</a> 版本库。</p><p>要发布你的库，你需要：</p><ol><li>设置凭据，包括 Maven Central 账户和用于签名的 PGP 密钥。</li><li>在库的项目中配置发布插件。</li><li>向发布插件提供你的凭据，以便它可以签署和上传你的 artifact。</li><li>运行发布任务，无论是在本地还是使用持续集成。</li></ol><p>本教程假设你：</p><ul><li>正在创建一个开源库。</li><li>将库的代码存储在 GitHub 版本库中。</li><li>使用的是 macOS 或 Linux。如果你是 Windows 用户，请使用 <a href="https://gnupg.org/download" target="_blank" rel="noreferrer">GnuPG 或 Gpg4win</a> 生成密钥对。</li><li>尚未在 Maven Central 注册，或者已有一个适合<a href="https://central.sonatype.org/publish-ea/publish-ea-guide/" target="_blank" rel="noreferrer">发布到 Central Portal</a> 的现有账户（在 2024 年 3 月 12 日之后创建，或已由其支持迁移到 Central Portal）。</li><li>使用 GitHub Actions 进行持续集成。</li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>即使你使用的是不同的设置，这里的大多数步骤仍然适用，但可能需要考虑一些差异。 一个<a href="./multiplatform-publish-lib-setup#host-requirements">重要限制</a>是 Apple 目标平台必须在 macOS 机器上构建。</p></div><h2 id="示例库" tabindex="-1">示例库 <a class="header-anchor" href="#示例库" aria-label="Permalink to &quot;示例库&quot;">​</a></h2><p>在本教程中，你将使用 <a href="https://github.com/Kotlin/multiplatform-library-template/" target="_blank" rel="noreferrer">fibonacci</a> 库作为示例。 你可以参考该版本库的代码，了解发布设置的工作原理。</p><p>如果你想重用代码，<strong>必须将所有示例值替换</strong>为你项目特有的值。</p><h2 id="准备账户和凭据" tabindex="-1">准备账户和凭据 <a class="header-anchor" href="#准备账户和凭据" aria-label="Permalink to &quot;准备账户和凭据&quot;">​</a></h2><p>要开始发布到 Maven Central，请在 <a href="https://central.sonatype.com/" target="_blank" rel="noreferrer">Maven Central</a> portal 上登录（或创建新账户）。</p><h3 id="选择并验证命名空间" tabindex="-1">选择并验证命名空间 <a class="header-anchor" href="#选择并验证命名空间" aria-label="Permalink to &quot;选择并验证命名空间&quot;">​</a></h3><p>你需要一个已验证的命名空间，以唯一标识你的库在 Maven Central 上的 artifact。</p><p>Maven artifact 通过其<a href="https://central.sonatype.org/publish/requirements/#correct-coordinates" target="_blank" rel="noreferrer">坐标</a>进行标识，例如 <code>com.example:fibonacci-library:1.0.0</code>。这些坐标由三个部分组成，以冒号分隔：</p><ul><li><code>groupId</code> 以反向 DNS 形式表示，例如 <code>com.example</code></li><li><code>artifactId</code>：库本身的唯一名称，例如 <code>fibonacci-library</code></li><li><code>version</code>：版本字符串，例如 <code>1.0.0</code>。版本可以是任何字符串，但不能以 <code>-SNAPSHOT</code> 结尾</li></ul><p>你注册的命名空间允许你设置 Maven Central 上 <code>groupId</code> 的格式。例如，如果你注册 <code>com.example</code> 命名空间，则可以发布 <code>groupId</code> 设置为 <code>com.example</code>、<code>com.example.libraryname</code>、<code>com.example.module.feature</code> 等的 artifact。</p><p>登录 Maven Central 后，导航到<a href="https://central.sonatype.com/publishing/namespaces" target="_blank" rel="noreferrer">命名空间</a>页面。 然后，点击 <strong>Add Namespace</strong> 按钮并注册你的命名空间：</p>',18)),e(r,null,{default:l(()=>[e(p,{id:"github",title:"使用 GitHub 版本库"},{default:l(()=>a[0]||(a[0]=[s("p",null,"如果你没有域名，使用 GitHub 账户创建命名空间是一个不错的选择：",-1),s("ol",null,[s("li",null,[i("输入 "),s("code",null,"io.github.<你的用户名>"),i(" 作为你的命名空间，例如 "),s("code",null,"io.github.kotlinhandson"),i("，然后点击 "),s("strong",null,"Submit"),i("。")]),s("li",null,[i("复制新创建命名空间下方显示的"),s("strong",null,"验证密钥"),i("。")]),s("li",null,[i("在 GitHub 上，使用你使用的用户名登录，并创建一个新的公共版本库，将验证密钥作为版本库的名称，例如 "),s("code",null,"http://github.com/kotlin-hands-on/ex4mpl3c0d"),i("。")]),s("li",null,[i("返回 Maven Central 并点击 "),s("strong",null,"Verify Namespace"),i(" 按钮。验证成功后，你可以删除你创建的版本库。")])],-1)])),_:1}),e(p,{id:"domain",title:"使用域名"},{default:l(()=>a[1]||(a[1]=[s("p",null,"要使用你拥有的域名作为命名空间：",-1),s("ol",null,[s("li",null,[i("以反向 DNS 形式输入你的域名作为命名空间。如果你的域名是 "),s("code",null,"example.com"),i("，请输入 "),s("code",null,"com.example"),i("。")]),s("li",null,[i("复制显示的"),s("strong",null,"验证密钥"),i("。")]),s("li",null,"创建一个新的 TXT DNS 记录，其内容为验证密钥。")],-1),s("p",null,[i("有关如何使用各种域名注册商执行此操作的更多信息，请参阅 "),s("a",{href:"https://central.sonatype.org/faq/how-to-set-txt-record/",target:"_blank",rel:"noreferrer"},"Maven Central 的常见问题"),i("。 4. 返回 Maven Central 并点击 "),s("strong",null,"Verify Namespace"),i(" 按钮。验证成功后，你可以删除你创建的 TXT 记录。")],-1)])),_:1})]),_:1}),a[9]||(a[9]=n('<h4 id="生成密钥对" tabindex="-1">生成密钥对 <a class="header-anchor" href="#生成密钥对" aria-label="Permalink to &quot;生成密钥对&quot;">​</a></h4><p>在发布内容到 Maven Central 之前，你需要使用 <a href="https://central.sonatype.org/publish/requirements/gpg/" target="_blank" rel="noreferrer">PGP 签名</a>签署你的 artifact，这允许用户验证 artifact 的来源。</p><p>要开始签名，你需要生成一个密钥对：</p><ul><li><em>私钥</em> 用于签署你的 artifact，绝不应与他人共享。</li><li><em>公钥</em> 可以与他人共享，以便他们可以验证你的 artifact 的签名。</li></ul><p>用于管理签名的 <code>gpg</code> 工具可在 <a href="https://gnupg.org/download/index.html" target="_blank" rel="noreferrer">GnuPG 网站</a>上获取。 你也可以使用 <a href="https://brew.sh/" target="_blank" rel="noreferrer">Homebrew</a> 等包管理器安装它：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">brew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gpg</span></span></code></pre></div>',6)),s("ol",null,[a[6]||(a[6]=n('<li><p>使用以下命令开始生成密钥对，并在提示时提供所需详细信息：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gpg</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --full-generate-key</span></span></code></pre></div></li>',1)),s("li",null,[s("p",null,[a[3]||(a[3]=i("为要创建的密钥类型选择推荐的默认值。 你可以留空并按 ")),e(h,null,{default:l(()=>a[2]||(a[2]=[i("Enter")])),_:1}),a[4]||(a[4]=i(" 接受默认值。"))]),a[5]||(a[5]=n(`<div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Please select what kind of key you want:</span></span>
<span class="line"><span>    (1) RSA and RSA</span></span>
<span class="line"><span>    (2) DSA and Elgamal</span></span>
<span class="line"><span>    (3) DSA (sign only)</span></span>
<span class="line"><span>    (4) RSA (sign only)</span></span>
<span class="line"><span>    (9) ECC (sign and encrypt) *default*</span></span>
<span class="line"><span>    (10) ECC (sign only)</span></span>
<span class="line"><span>    (14) Existing key from card</span></span>
<span class="line"><span>Your selection? 9</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Please select which elliptic curve you want:</span></span>
<span class="line"><span>    (1) Curve 25519 *default*</span></span>
<span class="line"><span>    (4) NIST P-384</span></span>
<span class="line"><span>    (6) Brainpool P-256</span></span>
<span class="line"><span>Your selection? 1</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>在撰写本文时，这是 <code>ECC (签名和加密)</code>，使用 <code>Curve 25519</code>。 较旧的 <code>gpg</code> 版本可能默认为 <code>RSA</code>，密钥大小为 <code>3072</code> 位。</p></div>`,2))]),a[7]||(a[7]=s("li",null,[s("p",null,"当提示指定密钥有效期时，你可以选择不设置过期日期的默认选项。")],-1))]),a[10]||(a[10]=n(`<p>如果你选择创建在设定的时间后自动过期的密钥，则在密钥过期时需要<a href="https://central.sonatype.org/publish/requirements/gpg/#dealing-with-expired-keys" target="_blank" rel="noreferrer">延长其有效期</a>。</p><pre><code>\`\`\`text
Please specify how long the key should be valid.
    0 = key does not expire
    &lt;n&gt;  = key expires in n days
    &lt;n&gt;w = key expires in n weeks
    &lt;n&gt;m = key expires in n months
    &lt;n&gt;y = key expires in n years
Key is valid for? (0) 0
Key does not expire at all

Is this correct? (y/N) y
\`\`\`
</code></pre><ol start="4"><li><p>输入你的姓名、电子邮件和可选注释，以将密钥与身份关联（注释字段可以留空）：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>GnuPG needs to construct a user ID to identify your key.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Real name: Jane Doe</span></span>
<span class="line"><span>Email address: janedoe@example.com</span></span>
<span class="line"><span>Comment:</span></span>
<span class="line"><span>You selected this USER-ID:</span></span>
<span class="line"><span>    &quot;Jane Doe &lt;janedoe@example.com&gt;&quot;</span></span></code></pre></div></li><li><p>输入密码短语来加密密钥，并在提示时重复输入。</p></li></ol><p>请妥善安全地保管此密码短语。稍后签署 artifact 时，你需要它来访问私钥。</p><ol start="6"><li>使用以下命令查看你创建的密钥：</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gpg</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --list-keys</span></span></code></pre></div><p>输出将类似于：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pub   ed25519 2024-10-06 [SC]</span></span>
<span class="line"><span>      F175482952A225BFD4A07A713EE6B5F76620B385CE</span></span>
<span class="line"><span>uid   [ultimate] Jane Doe &lt;janedoe@example.com&gt;</span></span>
<span class="line"><span>      sub   cv25519 2024-10-06 [E]</span></span></code></pre></div><p>在接下来的步骤中，你需要使用输出中出现的密钥长字母数字标识符。</p><h4 id="上传公钥" tabindex="-1">上传公钥 <a class="header-anchor" href="#上传公钥" aria-label="Permalink to &quot;上传公钥&quot;">​</a></h4><p>你需要<a href="https://central.sonatype.org/publish/requirements/gpg/#distributing-your-public-key" target="_blank" rel="noreferrer">将公钥上传到密钥服务器</a>，以便 Maven Central 接受它。有多个可用密钥服务器，我们选择 <code>keyserver.ubuntu.com</code> 作为默认选项。</p><p>运行以下命令，使用 <code>gpg</code> 上传你的公钥，<strong>在参数中替换为你自己的密钥 ID</strong>：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gpg</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --keyserver</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> keyserver.ubuntu.com</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --send-keys</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> F175482952A225BFC4A07A715EE6B5F76620B385CE</span></span></code></pre></div><h4 id="导出私钥" tabindex="-1">导出私钥 <a class="header-anchor" href="#导出私钥" aria-label="Permalink to &quot;导出私钥&quot;">​</a></h4><p>为了让你的 Gradle 项目访问你的私钥，你需要将其导出为二进制文件。 系统将提示你输入创建密钥时使用的密码短语。</p><p>使用以下命令，<strong>将你自己的密钥 ID 作为参数传入</strong>：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gpg</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --no-armor</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --export-secret-keys</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> F175482952A225BFC4A07A715EE6B5F76620B385CE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> key.gpg</span></span></code></pre></div><p>此命令将创建一个包含你私钥的 <code>key.gpg</code> 二进制文件（请确保<strong>不要</strong>使用 <code>--armor</code> 标志，因为它只会创建密钥的纯文本版本）。</p><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>切勿与任何人分享你的私钥文件 – 只有你才能访问它，因为私钥能让你使用凭据签署文件。</p></div><h2 id="配置项目" tabindex="-1">配置项目 <a class="header-anchor" href="#配置项目" aria-label="Permalink to &quot;配置项目&quot;">​</a></h2><h3 id="准备你的库项目" tabindex="-1">准备你的库项目 <a class="header-anchor" href="#准备你的库项目" aria-label="Permalink to &quot;准备你的库项目&quot;">​</a></h3><p>如果你从模板项目开始开发库，现在是更改项目中所有默认名称以匹配你自己的库名称的好时机。这包括你的库模块名称和顶层 <code>build.gradle.kts</code> 文件中根项目的名称。</p><p>如果你的项目中包含 Android 目标平台，你应该遵循<a href="https://developer.android.com/build/publish-library/prep-lib-release" target="_blank" rel="noreferrer">准备 Android 库发布</a>的步骤。 至少，此过程要求你为库<a href="https://developer.android.com/build/publish-library/prep-lib-release#choose-namespace" target="_blank" rel="noreferrer">指定适当的命名空间</a>，以便在编译其资源时生成唯一的 <code>R</code> 类。 请注意，该命名空间与<a href="#choose-and-verify-a-namespace">之前创建的</a> Maven 命名空间不同。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradle.kts</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">android</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    namespace </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;io.github.kotlinhandson.fibonacci&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="设置发布插件" tabindex="-1">设置发布插件 <a class="header-anchor" href="#设置发布插件" aria-label="Permalink to &quot;设置发布插件&quot;">​</a></h3><p>本教程使用 <a href="https://github.com/vanniktech/gradle-maven-publish-plugin" target="_blank" rel="noreferrer">vanniktech/gradle-maven-publish-plugin</a> 帮助发布到 Maven Central。 你可以在<a href="https://vanniktech.github.io/gradle-maven-publish-plugin/#advantages-over-maven-publish" target="_blank" rel="noreferrer">这里</a>阅读更多关于该插件的优势。 请参阅<a href="https://vanniktech.github.io/gradle-maven-publish-plugin/central/" target="_blank" rel="noreferrer">插件文档</a>，了解有关其用法和可用配置选项的更多信息。</p><p>要将插件添加到你的项目，请将以下行添加到你的库模块的 <code>build.gradle.kts</code> 文件的 <code>plugins {}</code> 代码块中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &lt;module directory&gt;/build.gradle.kts</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;com.vanniktech.maven.publish&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) version </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0.30.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>有关插件的最新可用版本，请查看其 <a href="https://github.com/vanniktech/gradle-maven-publish-plugin/releases" target="_blank" rel="noreferrer">Releases 页面</a>。</p></div><p>在同一文件中，添加以下配置，确保为你的库自定义所有值：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &lt;module directory&gt;/build.gradle.kts</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mavenPublishing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    publishToMavenCentral</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(SonatypeHost.CENTRAL_PORTAL)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    signAllPublications</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    coordinates</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(group.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;fibonacci&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, version.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    pom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Fibonacci library&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        description </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;A mathematics calculation library.&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        inceptionYear </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;2024&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        url </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://github.com/kotlin-hands-on/fibonacci/&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        licenses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            license</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;The Apache License, Version 2.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                url </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://www.apache.org/licenses/LICENSE-2.0.txt&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                distribution </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://www.apache.org/licenses/LICENSE-2.0.txt&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        developers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            developer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;kotlin-hands-on&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Kotlin Developer Advocate&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                url </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://github.com/kotlin-hands-on/&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        scm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            url </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;https://github.com/kotlin-hands-on/fibonacci/&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            connection </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;scm:git:git://github.com/kotlin-hands-on/fibonacci.git&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            developerConnection </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;scm:git:ssh://git@github.com/kotlin-hands-on/fibonacci.git&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>要配置此项，你还可以使用 <a href="https://docs.gradle.org/current/userguide/build_environment.html" target="_blank" rel="noreferrer">Gradle 属性</a>。</p></div><p>这里最重要的设置是：</p><ul><li><code>coordinates</code>，它指定库的 <code>groupId</code>、<code>artifactId</code> 和 <code>version</code>。</li><li><a href="https://central.sonatype.org/publish/requirements/#license-information" target="_blank" rel="noreferrer">许可</a>，你的库在此许可下发布。</li><li><a href="https://central.sonatype.org/publish/requirements/#developer-information" target="_blank" rel="noreferrer">开发者信息</a>，列出库的作者。</li><li><a href="https://central.sonatype.org/publish/requirements/#scm-information" target="_blank" rel="noreferrer">SCM（源代码管理）信息</a>，它指定库源代码的托管位置。</li></ul><h2 id="使用持续集成发布到-maven-central" tabindex="-1">使用持续集成发布到 Maven Central <a class="header-anchor" href="#使用持续集成发布到-maven-central" aria-label="Permalink to &quot;使用持续集成发布到 Maven Central&quot;">​</a></h2><h3 id="生成用户令牌" tabindex="-1">生成用户令牌 <a class="header-anchor" href="#生成用户令牌" aria-label="Permalink to &quot;生成用户令牌&quot;">​</a></h3><p>你需要一个 Maven 访问令牌，以便 Maven Central 授权你的发布请求。 打开<a href="https://central.sonatype.com/account" target="_blank" rel="noreferrer">设置基于令牌的身份验证</a>页面，然后点击 <strong>Generate User Token</strong> 按钮。</p><p>输出类似于以下示例，包含用户名和密码。 如果你丢失了这些凭据，稍后需要生成新的凭据，因为 Maven Central 不会存储它们。</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;\${server}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">username</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;l2nfaPmz&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">username</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">password</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;gh9jT9XfnGtUngWTZwTu/8141keYdmQpipqLPRKeDLTh&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">password</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">server</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="将密钥添加到-github" tabindex="-1">将密钥添加到 GitHub <a class="header-anchor" href="#将密钥添加到-github" aria-label="Permalink to &quot;将密钥添加到 GitHub&quot;">​</a></h3><p>为了在 GitHub Actions 工作流中使用发布所需的密钥和凭据，同时保持其私密性，你需要将这些值存储为密钥。</p><ol><li>在你的 GitHub 版本库的<strong>设置</strong>页面上，点击 <strong>Security</strong> | <strong>Secrets and variables</strong> | <strong>Actions</strong>。</li><li>点击 <code>New repository secret</code> 按钮并添加以下密钥：</li></ol><ul><li><code>MAVEN_CENTRAL_USERNAME</code> 和 <code>MAVEN_CENTRAL_PASSWORD</code> 是由 Central Portal 网站<a href="#generate-the-user-token">为用户令牌生成的值</a>。</li><li><code>SIGNING_KEY_ID</code> 是你的签名密钥标识符的<strong>最后 8 个字符</strong>，例如，<code>F175482952A225BFC4A07A715EE6B5F76620B385CE</code> 的 <code>20B385CE</code>。</li><li><code>SIGNING_PASSWORD</code> 是你生成 GPG 密钥时提供的密码短语。</li><li><code>GPG_KEY_CONTENTS</code> 应包含<a href="#export-your-private-key">你的 <code>key.gpg</code> 文件</a>的全部内容。</li></ul><p><img src="`+o+`" alt="Add secrets to GitHub" width="700"></p><p>你将在下一步的 CI 配置中使用这些密钥的名称。</p><h3 id="将-github-actions-工作流添加到你的项目" tabindex="-1">将 GitHub Actions 工作流添加到你的项目 <a class="header-anchor" href="#将-github-actions-工作流添加到你的项目" aria-label="Permalink to &quot;将 GitHub Actions 工作流添加到你的项目&quot;">​</a></h3><p>你可以设置持续集成来自动构建和发布你的库。 我们将使用 <a href="https://docs.github.com/en/actions" target="_blank" rel="noreferrer">GitHub Actions</a> 作为示例。</p><p>首先，将以下工作流添加到你的版本库中的 <code>.github/workflows/publish.yml</code> 文件：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># .github/workflows/publish.yml</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Publish</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  release</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    types</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">released</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">prereleased</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">jobs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  publish</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Release build and publish</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    runs-on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">macOS-latest</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    steps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Check out code</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        uses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">actions/checkout@v4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Set up JDK 21</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        uses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">actions/setup-java@v4</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          distribution</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;zulu&#39;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          java-version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">21</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Publish to MavenCentral</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">./gradlew publishToMavenCentral --no-configuration-cache</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          ORG_GRADLE_PROJECT_mavenCentralUsername</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${{ secrets.MAVEN_CENTRAL_USERNAME }}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          ORG_GRADLE_PROJECT_mavenCentralPassword</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${{ secrets.MAVEN_CENTRAL_PASSWORD }}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          ORG_GRADLE_PROJECT_signingInMemoryKeyId</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${{ secrets.SIGNING_KEY_ID }}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          ORG_GRADLE_PROJECT_signingInMemoryKeyPassword</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${{ secrets.SIGNING_PASSWORD }}</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          ORG_GRADLE_PROJECT_signingInMemoryKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${{ secrets.GPG_KEY_CONTENTS }}</span></span></code></pre></div><p>提交并推送此文件后，每当你在托管项目的 GitHub 版本库中创建发布（包括预发布版本）时，工作流将自动运行。该工作流会检出你当前版本的代码，设置 JDK，然后运行 <code>publishToMavenCentral</code> Gradle 任务。</p><p>使用 <code>publishToMavenCentral</code> 任务时，你仍然需要在 Maven Central 网站上<a href="#create-a-release-on-github">手动检测并发布你的部署</a>。或者，你可以使用 <code>publishAndReleaseToMavenCentral</code> 任务来完全自动化发布过程。</p><p>你还可以配置工作流以<a href="https://stackoverflow.com/a/61892639" target="_blank" rel="noreferrer">在推送标签时触发</a>到你的版本库。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>上述脚本通过在 Gradle 命令中添加 <code>--no-configuration-cache</code> 来禁用发布任务的 Gradle <a href="https://docs.gradle.org/current/userguide/configuration_cache.html" target="_blank" rel="noreferrer">配置缓存</a>，因为发布插件不支持它（参见此<a href="https://github.com/gradle/gradle/issues/22779" target="_blank" rel="noreferrer">开放问题</a>）。</p></div><p>此 action 需要你的签名详细信息和 Maven Central 凭据，这些凭据是你作为<a href="#add-secrets-to-github">版本库密钥</a>创建的。</p><p>工作流配置会自动将这些密钥传输到环境变量中，使它们可供 Gradle 构建过程使用。</p><h3 id="在-github-上创建发布" tabindex="-1">在 GitHub 上创建发布 <a class="header-anchor" href="#在-github-上创建发布" aria-label="Permalink to &quot;在 GitHub 上创建发布&quot;">​</a></h3><p>设置好工作流和密钥后，你现在可以<a href="https://docs.github.com/en/repositories/releasing-projects-on-github/managing-releases-in-a-repository#creating-a-release" target="_blank" rel="noreferrer">创建发布</a>，这将触发你的库的发布。</p><ol><li>确保你的库的 <code>build.gradle.kts</code> 文件中指定的版本号是你想要发布的版本。</li><li>进入你的 GitHub 版本库主页。</li><li>在右侧边栏中，点击 <strong>Releases</strong>。</li><li>点击 <code>Draft a new release</code> 按钮（如果你以前从未为此版本库创建过发布，则点击 <code>Create a new release</code> 按钮）。</li><li>每个发布都有一个标签。在标签下拉菜单中创建一个新标签，并设置发布标题（标签名称和标题可以相同）。</li></ol><p>你可能希望它们与你在 <code>build.gradle.kts</code> 文件中指定的库版本号相同。</p><p><img src="`+k+`" alt="在 GitHub 上创建发布" width="700"></p><ol start="6"><li>仔细检查你想要发布的目标分支（尤其如果它不是默认分支），并为你的新版本添加适当的发布说明。</li><li>使用描述下方的复选框将发布标记为预发布版本（对于抢先体验版本如 alpha、beta 或 RC 很有用）。</li></ol><p>你也可以将发布标记为最新版本（如果你之前已经为这个版本库创建过发布）。 8. 点击 <strong>Publish release</strong> 按钮以创建新发布。 9. 点击你的 GitHub 版本库页面顶部的 <strong>Actions</strong> 选项卡。在这里，你将看到新发布触发了你的发布工作流。</p><p>你可以点击工作流查看发布任务的输出。 10. 工作流运行完成后，导航到 Maven Central 上的<a href="https://central.sonatype.com/publishing/deployments" target="_blank" rel="noreferrer">部署</a>仪表板。你应该会在这里看到一个新部署。</p><pre><code>在 Maven Central 执行检测时，此部署可能会在 _pending_ 或 _validating_ 状态下停留一段时间。
</code></pre><ol start="11"><li><p>一旦你的部署进入 <em>validated</em> 状态，检查它是否包含你上传的所有 artifact。 如果一切看起来正确，点击 <strong>Publish</strong> 按钮以发布这些 artifact。</p><p><img src="`+d+'" alt="发布设置" width="700"></p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>发布后，artifact 需要一些时间（通常约为 15-30 分钟）才能在 Maven Central 版本库中公开可用。它们可能需要更长时间才能被索引并在 <a href="https://central.sonatype.com/" target="_blank" rel="noreferrer">Maven Central 网站</a>上可搜索。</p></div></li></ol><p>要一旦部署验证完成就自动发布 artifact，请将工作流中的 <code>publishToMavenCentral</code> 任务替换为 <code>publishAndReleaseToMavenCentral</code>。</p><h2 id="下一步" tabindex="-1">下一步 <a class="header-anchor" href="#下一步" aria-label="Permalink to &quot;下一步&quot;">​</a></h2><ul><li><a href="./multiplatform-publish-lib-setup">了解更多关于设置多平台库发布和要求的信息</a></li><li><a href="https://shields.io/badges/maven-central-version" target="_blank" rel="noreferrer">将 shield.io 徽章添加到你的 README</a></li><li><a href="https://kotl.in/dokka" target="_blank" rel="noreferrer">使用 Dokka 分享你项目的 API 文档</a></li><li><a href="https://docs.renovatebot.com/" target="_blank" rel="noreferrer">添加 Renovate 自动更新依赖项</a></li><li><a href="https://klibs.io/" target="_blank" rel="noreferrer">在 JetBrains 搜索平台上推广你的库</a></li><li><a href="https://kotlinlang.slack.com/" target="_blank" rel="noreferrer">在 <code>#feed</code> Kotlin Slack 频道中与社区分享你的库</a> （要注册，请访问 <a href="https://kotl.in/slack%EF%BC%89" target="_blank" rel="noreferrer">https://kotl.in/slack）</a></li></ul>',68))])}const D=c(u,[["render",y]]);export{A as __pageData,D as default};
