import{_ as a,c as i,o,ag as l}from"./chunks/framework.Bksy39di.js";const u=JSON.parse('{"title":"キーワードと演算子","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/keyword-reference.md","filePath":"ja/kotlin/keyword-reference.md","lastUpdated":1754307826000}'),t={name:"ja/kotlin/keyword-reference.md"};function n(r,e,c,d,s,f){return o(),i("div",null,e[0]||(e[0]=[l('<h1 id="キーワードと演算子" tabindex="-1">キーワードと演算子 <a class="header-anchor" href="#キーワードと演算子" aria-label="Permalink to &quot;キーワードと演算子&quot;">​</a></h1><h2 id="ハードキーワード" tabindex="-1">ハードキーワード <a class="header-anchor" href="#ハードキーワード" aria-label="Permalink to &quot;ハードキーワード&quot;">​</a></h2><p>以下のトークンは常にキーワードとして解釈され、識別子として使用することはできません。</p><ul><li><code>as</code><ul><li><a href="/ja/kotlin/typecasts#unsafe-cast-operator">型キャスト</a>に使用されます。</li><li><a href="/ja/kotlin/packages#imports">インポートのエイリアス</a>を指定します。</li></ul></li><li><code>as?</code> は<a href="/ja/kotlin/typecasts#safe-nullable-cast-operator">安全な型キャスト</a>に使用されます。</li><li><code>break</code> は<a href="/ja/kotlin/returns">ループの実行を終了します</a>。</li><li><code>class</code> は<a href="/ja/kotlin/classes">クラス</a>を宣言します。</li><li><code>continue</code> は<a href="/ja/kotlin/returns">最も近い囲むループの次のステップに進みます</a>。</li><li><code>do</code> は<a href="/ja/kotlin/control-flow#while-loops">do/whileループ</a>（後置条件付きループ）を開始します。</li><li><code>else</code> は、条件がfalseの場合に実行される<a href="/ja/kotlin/control-flow#if-expression">if式</a>のブランチを定義します。</li><li><code>false</code> は<a href="/ja/kotlin/booleans">Boolean型</a>の「false」値を指定します。</li><li><code>for</code> は<a href="/ja/kotlin/control-flow#for-loops">forループ</a>を開始します。</li><li><code>fun</code> は<a href="/ja/kotlin/functions">関数</a>を宣言します。</li><li><code>if</code> は<a href="/ja/kotlin/control-flow#if-expression">if式</a>を開始します。</li><li><code>in</code><ul><li><a href="/ja/kotlin/control-flow#for-loops">forループ</a>で反復されるオブジェクトを指定します。</li><li>値が<a href="/ja/kotlin/ranges">範囲</a>、コレクション、または<a href="/ja/kotlin/operator-overloading#in-operator">「contains」メソッド</a>を定義する他のエンティティに属するかどうかをチェックするためのinfix演算子として使用されます。</li><li><a href="/ja/kotlin/control-flow#when-expressions-and-statements">when式</a>でも同じ目的で使用されます。</li><li>型パラメータを<a href="/ja/kotlin/generics#declaration-site-variance">反変</a>としてマークします。</li></ul></li><li><code>!in</code><ul><li>値が<a href="/ja/kotlin/ranges">範囲</a>、コレクション、または<a href="/ja/kotlin/operator-overloading#in-operator">「contains」メソッド</a>を定義する他のエンティティに属さないことをチェックするための演算子として使用されます。</li><li><a href="/ja/kotlin/control-flow#when-expressions-and-statements">when式</a>でも同じ目的で使用されます。</li></ul></li><li><code>interface</code> は<a href="/ja/kotlin/interfaces">インターフェース</a>を宣言します。</li><li><code>is</code><ul><li><a href="/ja/kotlin/typecasts#is-and-is-operators">値が特定の型であるか</a>をチェックします。</li><li><a href="/ja/kotlin/control-flow#when-expressions-and-statements">when式</a>でも同じ目的で使用されます。</li></ul></li><li><code>!is</code><ul><li><a href="/ja/kotlin/typecasts#is-and-is-operators">値が特定の型ではないか</a>をチェックします。</li><li><a href="/ja/kotlin/control-flow#when-expressions-and-statements">when式</a>でも同じ目的で使用されます。</li></ul></li><li><code>null</code> は、どのオブジェクトも指さないオブジェクト参照を表す定数です。</li><li><code>object</code> は<a href="/ja/kotlin/object-declarations">クラスとそのインスタンスを同時に宣言します</a>。</li><li><code>package</code> は<a href="/ja/kotlin/packages">現在のファイルのパッケージ</a>を指定します。</li><li><code>return</code> は<a href="/ja/kotlin/returns">最も近い囲む関数または匿名関数から戻ります</a>。</li><li><code>super</code><ul><li><a href="/ja/kotlin/inheritance#calling-the-superclass-implementation">メソッドまたはプロパティのスーパークラス実装を参照します</a>。</li><li><a href="/ja/kotlin/classes#inheritance">セカンダリコンストラクタからスーパークラスコンストラクタを呼び出します</a>。</li></ul></li><li><code>this</code><ul><li><a href="/ja/kotlin/this-expressions">現在のレシーバー</a>を参照します。</li><li><a href="/ja/kotlin/classes#constructors">セカンダリコンストラクタから同じクラスの別のコンストラクタを呼び出します</a>。</li></ul></li><li><code>throw</code> は<a href="/ja/kotlin/exceptions">例外をスローします</a>。</li><li><code>true</code> は<a href="/ja/kotlin/booleans">Boolean型</a>の「true」値を指定します。</li><li><code>try</code> は<a href="/ja/kotlin/exceptions">例外処理ブロックを開始します</a>。</li><li><code>typealias</code> は<a href="/ja/kotlin/type-aliases">型エイリアス</a>を宣言します。</li><li><code>typeof</code> は将来の使用のために予約されています。</li><li><code>val</code> は読み取り専用の<a href="/ja/kotlin/properties">プロパティ</a>または<a href="/ja/kotlin/basic-syntax#variables">ローカル変数</a>を宣言します。</li><li><code>var</code> は可変の<a href="/ja/kotlin/properties">プロパティ</a>または<a href="/ja/kotlin/basic-syntax#variables">ローカル変数</a>を宣言します。</li><li><code>when</code> は<a href="/ja/kotlin/control-flow#when-expressions-and-statements">when式</a>（与えられたブランチのいずれかを実行）を開始します。</li><li><code>while</code> は<a href="/ja/kotlin/control-flow#while-loops">whileループ</a>（前置条件付きループ）を開始します。</li></ul><h2 id="ソフトキーワード" tabindex="-1">ソフトキーワード <a class="header-anchor" href="#ソフトキーワード" aria-label="Permalink to &quot;ソフトキーワード&quot;">​</a></h2><p>以下のトークンは、適用可能なコンテキストではキーワードとして機能しますが、それ以外のコンテキストでは識別子として使用できます。</p><ul><li><code>by</code><ul><li><a href="/ja/kotlin/delegation">インターフェースの実装を別のオブジェクトに委譲します</a>。</li><li><a href="/ja/kotlin/delegated-properties">プロパティのアクセサの実装を別のオブジェクトに委譲します</a>。</li></ul></li><li><code>catch</code> は<a href="/ja/kotlin/exceptions">特定の例外型を処理する</a>ブロックを開始します。</li><li><code>constructor</code> は<a href="/ja/kotlin/classes#constructors">プライマリまたはセカンダリコンストラクタ</a>を宣言します。</li><li><code>delegate</code> は<a href="/ja/kotlin/annotations#annotation-use-site-targets">アノテーションの使用サイトターゲット</a>として使用されます。</li><li><code>dynamic</code> はKotlin/JSコードで<a href="/ja/kotlin/dynamic-type">動的型</a>を参照します。</li><li><code>field</code> は<a href="/ja/kotlin/annotations#annotation-use-site-targets">アノテーションの使用サイトターゲット</a>として使用されます。</li><li><code>file</code> は<a href="/ja/kotlin/annotations#annotation-use-site-targets">アノテーションの使用サイトターゲット</a>として使用されます。</li><li><code>finally</code> は<a href="/ja/kotlin/exceptions">tryブロックが終了するときに常に実行される</a>ブロックを開始します。</li><li><code>get</code><ul><li><a href="/ja/kotlin/properties#getters-and-setters">プロパティのゲッター</a>を宣言します。</li><li><a href="/ja/kotlin/annotations#annotation-use-site-targets">アノテーションの使用サイトターゲット</a>として使用されます。</li></ul></li><li><code>import</code> は<a href="/ja/kotlin/packages">別のパッケージからの宣言を現在のファイルにインポートします</a>。</li><li><code>init</code> は<a href="/ja/kotlin/classes#constructors">イニシャライザブロック</a>を開始します。</li><li><code>param</code> は<a href="/ja/kotlin/annotations#annotation-use-site-targets">アノテーションの使用サイトターゲット</a>として使用されます。</li><li><code>property</code> は<a href="/ja/kotlin/annotations#annotation-use-site-targets">アノテーションの使用サイトターゲット</a>として使用されます。</li><li><code>receiver</code> は<a href="/ja/kotlin/annotations#annotation-use-site-targets">アノテーションの使用サイトターゲット</a>として使用されます。</li><li><code>set</code><ul><li><a href="/ja/kotlin/properties#getters-and-setters">プロパティのセッター</a>を宣言します。</li><li><a href="/ja/kotlin/annotations#annotation-use-site-targets">アノテーションの使用サイトターゲット</a>として使用されます。</li></ul></li><li><code>setparam</code> は<a href="/ja/kotlin/annotations#annotation-use-site-targets">アノテーションの使用サイトターゲット</a>として使用されます。</li><li><code>value</code> は<code>class</code>キーワードと共に<a href="/ja/kotlin/inline-classes">インラインクラス</a>を宣言します。</li><li><code>where</code> は<a href="/ja/kotlin/generics#upper-bounds">ジェネリック型パラメータの制約</a>を指定します。</li></ul><h2 id="修飾子キーワード" tabindex="-1">修飾子キーワード <a class="header-anchor" href="#修飾子キーワード" aria-label="Permalink to &quot;修飾子キーワード&quot;">​</a></h2><p>以下のトークンは、宣言の修飾子リストでキーワードとして機能しますが、それ以外のコンテキストでは識別子として使用できます。</p><ul><li><code>abstract</code> はクラスまたはメンバーを<a href="/ja/kotlin/classes#abstract-classes">抽象</a>としてマークします。</li><li><code>actual</code> は<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-expect-actual.html" target="_blank" rel="noreferrer">マルチプラットフォームプロジェクト</a>におけるプラットフォーム固有の実装を示します。</li><li><code>annotation</code> は<a href="/ja/kotlin/annotations">アノテーションクラス</a>を宣言します。</li><li><code>companion</code> は<a href="/ja/kotlin/object-declarations#companion-objects">コンパニオンオブジェクト</a>を宣言します。</li><li><code>const</code> はプロパティを<a href="/ja/kotlin/properties#compile-time-constants">コンパイル時定数</a>としてマークします。</li><li><code>crossinline</code> は<a href="/ja/kotlin/inline-functions#returns">インライン関数に渡されるラムダ内の非ローカルリターン</a>を禁止します。</li><li><code>data</code> はコンパイラに<a href="/ja/kotlin/data-classes">クラスの標準メンバーを生成する</a>よう指示します。</li><li><code>enum</code> は<a href="/ja/kotlin/enum-classes">列挙</a>を宣言します。</li><li><code>expect</code> は宣言を<a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-expect-actual.html" target="_blank" rel="noreferrer">プラットフォーム固有</a>としてマークし、プラットフォームモジュールでの実装を期待します。</li><li><code>external</code> は宣言をKotlinの外部で実装されるものとしてマークします（<a href="/ja/kotlin/java-interop#using-jni-with-kotlin">JNI</a>または<a href="/ja/kotlin/js-interop#external-modifier">JavaScript</a>を介してアクセス可能）。</li><li><code>final</code> は<a href="/ja/kotlin/inheritance#overriding-methods">メンバーのオーバーライド</a>を禁止します。</li><li><code>infix</code> は<a href="/ja/kotlin/functions#infix-notation">infix記法</a>を使用して関数を呼び出すことを許可します。</li><li><code>inline</code> はコンパイラに<a href="/ja/kotlin/inline-functions">関数とその関数に渡されるラムダを呼び出しサイトでインライン化する</a>よう指示します。</li><li><code>inner</code> は<a href="/ja/kotlin/nested-classes">ネストされたクラス</a>から外側のクラスインスタンスを参照することを許可します。</li><li><code>internal</code> は宣言を<a href="/ja/kotlin/visibility-modifiers">現在のモジュール内で可視</a>としてマークします。</li><li><code>lateinit</code> は<a href="/ja/kotlin/properties#late-initialized-properties-and-variables">コンストラクタの外部で非null許容プロパティを初期化する</a>ことを許可します。</li><li><code>noinline</code> は<a href="/ja/kotlin/inline-functions#noinline">インライン関数に渡されるラムダのインライン化</a>をオフにします。</li><li><code>open</code> は<a href="/ja/kotlin/classes#inheritance">クラスのサブクラス化またはメンバーのオーバーライド</a>を許可します。</li><li><code>operator</code> は関数を<a href="/ja/kotlin/operator-overloading">演算子をオーバーロードするか規約を実装する</a>ものとしてマークします。</li><li><code>out</code> は型パラメータを<a href="/ja/kotlin/generics#declaration-site-variance">共変</a>としてマークします。</li><li><code>override</code> はメンバーを<a href="/ja/kotlin/inheritance#overriding-methods">スーパークラスメンバーのオーバーライド</a>としてマークします。</li><li><code>private</code> は宣言を<a href="/ja/kotlin/visibility-modifiers">現在のクラスまたはファイル内で可視</a>としてマークします。</li><li><code>protected</code> は宣言を<a href="/ja/kotlin/visibility-modifiers">現在のクラスとそのサブクラス内で可視</a>としてマークします。</li><li><code>public</code> は宣言を<a href="/ja/kotlin/visibility-modifiers">どこでも可視</a>としてマークします。</li><li><code>reified</code> はインライン関数の型パラメータを<a href="/ja/kotlin/inline-functions#reified-type-parameters">実行時にアクセス可能</a>としてマークします。</li><li><code>sealed</code> は<a href="/ja/kotlin/sealed-classes">sealedクラス</a>（サブクラス化が制限されたクラス）を宣言します。</li><li><code>suspend</code> は関数またはラムダを中断可能（<a href="/ja/kotlin/coroutines-overview">コルーチン</a>として使用可能）としてマークします。</li><li><code>tailrec</code> は関数を<a href="/ja/kotlin/functions#tail-recursive-functions">末尾再帰</a>としてマークします（コンパイラが再帰を反復に置き換えることを許可します）。</li><li><code>vararg</code> は<a href="/ja/kotlin/functions#variable-number-of-arguments-varargs">パラメータに可変数の引数を渡す</a>ことを許可します。</li></ul><h2 id="特殊識別子" tabindex="-1">特殊識別子 <a class="header-anchor" href="#特殊識別子" aria-label="Permalink to &quot;特殊識別子&quot;">​</a></h2><p>以下の識別子は、特定のコンテキストでコンパイラによって定義され、それ以外のコンテキストでは通常の識別子として使用できます。</p><ul><li><code>field</code> はプロパティアクセサ内で<a href="/ja/kotlin/properties#backing-fields">プロパティのバッキングフィールド</a>を参照するために使用されます。</li><li><code>it</code> はラムダ内で<a href="/ja/kotlin/lambdas#it-implicit-name-of-a-single-parameter">そのパラメータを暗黙的に参照する</a>ために使用されます。</li></ul><h2 id="演算子と特殊記号" tabindex="-1">演算子と特殊記号 <a class="header-anchor" href="#演算子と特殊記号" aria-label="Permalink to &quot;演算子と特殊記号&quot;">​</a></h2><p>Kotlinは以下の演算子と特殊記号をサポートしています。</p><ul><li><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code> – 数学的演算子 <ul><li><code>*</code> は<a href="/ja/kotlin/functions#variable-number-of-arguments-varargs">配列をvarargパラメータに渡す</a>ためにも使用されます。</li></ul></li><li><code>=</code><ul><li>代入演算子。</li><li><a href="/ja/kotlin/functions#parameters-with-default-values">パラメータのデフォルト値</a>を指定するために使用されます。</li></ul></li><li><code>+=</code>, <code>-=</code>, <code>*=</code>, <code>/=</code>, <code>%=</code> – <a href="/ja/kotlin/operator-overloading#augmented-assignments">複合代入演算子</a>。</li><li><code>++</code>, <code>--</code> – <a href="/ja/kotlin/operator-overloading#increments-and-decrements">インクリメントおよびデクリメント演算子</a>。</li><li><code>&amp;&amp;</code>, <code>||</code>, <code>!</code> – 論理「and」、「or」、「not」演算子（ビット演算には、対応する<a href="/ja/kotlin/numbers#operations-on-numbers">infix関数</a>を使用します）。</li><li><code>==</code>, <code>!=</code> – <a href="/ja/kotlin/operator-overloading#equality-and-inequality-operators">等値演算子</a>（非プリミティブ型では<code>equals()</code>の呼び出しに変換されます）。</li><li><code>===</code>, <code>!==</code> – <a href="/ja/kotlin/equality#referential-equality">参照等価演算子</a>。</li><li><code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code> – <a href="/ja/kotlin/operator-overloading#comparison-operators">比較演算子</a>（非プリミティブ型では<code>compareTo()</code>の呼び出しに変換されます）。</li><li><code>[</code>, <code>]</code> – <a href="/ja/kotlin/operator-overloading#indexed-access-operator">インデックスアクセス演算子</a>（<code>get</code>および<code>set</code>の呼び出しに変換されます）。</li><li><code>!!</code> は<a href="/ja/kotlin/null-safety#not-null-assertion-operator">式がnull非許容であることをアサートします</a>。</li><li><code>?.</code> は<a href="/ja/kotlin/null-safety#safe-call-operator">安全呼び出し</a>を実行します（レシーバーがnull非許容の場合にメソッドを呼び出すかプロパティにアクセスします）。</li><li><code>?:</code> は左辺値がnullの場合に右辺値を取ります（<a href="/ja/kotlin/null-safety#elvis-operator">エルビス演算子</a>）。</li><li><code>::</code> は<a href="/ja/kotlin/reflection#function-references">メンバー参照</a>または<a href="/ja/kotlin/reflection#class-references">クラス参照</a>を作成します。</li><li><code>..</code>, <code>..&lt;</code> は<a href="/ja/kotlin/ranges">範囲</a>を作成します。</li><li><code>:</code> は宣言で名前を型から分離します。</li><li><code>?</code> は型を<a href="/ja/kotlin/null-safety#nullable-types-and-non-nullable-types">null許容</a>としてマークします。</li><li><code>-&gt;</code><ul><li><a href="/ja/kotlin/lambdas#lambda-expression-syntax">ラムダ式</a>のパラメータと本体を分離します。</li><li><a href="/ja/kotlin/lambdas#function-types">関数型</a>のパラメータと戻り値の型宣言を分離します。</li><li><a href="/ja/kotlin/control-flow#when-expressions-and-statements">when式</a>ブランチの条件と本体を分離します。</li></ul></li><li><code>@</code><ul><li><a href="/ja/kotlin/annotations#usage">アノテーション</a>を導入します。</li><li><a href="/ja/kotlin/returns#break-and-continue-labels">ループラベル</a>を導入または参照します。</li><li><a href="/ja/kotlin/returns#return-to-labels">ラムダラベル</a>を導入または参照します。</li><li><a href="/ja/kotlin/this-expressions#qualified-this">外側のスコープからの「this」式</a>を参照します。</li><li><a href="/ja/kotlin/inheritance#calling-the-superclass-implementation">外側のスーパークラス</a>を参照します。</li></ul></li><li><code>;</code> は同じ行上の複数のステートメントを分離します。</li><li><code>$</code> は<a href="/ja/kotlin/strings#string-templates">文字列テンプレート</a>内の変数または式を参照します。</li><li><code>_</code><ul><li><a href="/ja/kotlin/lambdas#underscore-for-unused-variables">ラムダ式</a>で使用されないパラメータの代わりに使用されます。</li><li><a href="/ja/kotlin/destructuring-declarations#underscore-for-unused-variables">分割宣言</a>で使用されないパラメータの代わりに使用されます。</li></ul></li></ul><p>演算子の優先順位については、Kotlin文法の<a href="https://kotlinlang.org/docs/reference/grammar.html#expressions" target="_blank" rel="noreferrer">このリファレンス</a>を参照してください。</p>',17)]))}const k=a(t,[["render",n]]);export{u as __pageData,k as default};
