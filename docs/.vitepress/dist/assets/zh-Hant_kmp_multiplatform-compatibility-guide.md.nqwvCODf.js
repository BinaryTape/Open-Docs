import{_ as h,C as d,c as k,o as c,j as s,G as l,ag as t,a as i,w as e}from"./chunks/framework.Bksy39di.js";const f=JSON.parse('{"title":"Kotlin Multiplatform 相容性指南","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kmp/multiplatform-compatibility-guide.md","filePath":"zh-Hant/kmp/multiplatform-compatibility-guide.md","lastUpdated":1755516278000}'),g={name:"zh-Hant/kmp/multiplatform-compatibility-guide.md"},E={colspan:"2"},u={colspan:"2"};function y(m,a,F,b,v,C){const r=d("show-structure"),n=d("code-block"),p=d("TabItem"),o=d("Tabs");return c(),k("div",null,[a[20]||(a[20]=s("h1",{id:"kotlin-multiplatform-相容性指南",tabindex:"-1"},[i("Kotlin Multiplatform 相容性指南 "),s("a",{class:"header-anchor",href:"#kotlin-multiplatform-相容性指南","aria-label":'Permalink to "Kotlin Multiplatform 相容性指南"'},"​")],-1)),l(r,{depth:"1"}),a[21]||(a[21]=t(`<p>本指南總結了您在使用 Kotlin Multiplatform 開發專案時可能會遇到的<a href="https://kotlinlang.org/docs/kotlin-evolution-principles.html#incompatible-changes" target="_blank" rel="noreferrer">不相容變更</a>。</p><p>Kotlin 目前的穩定版本是 2.2.0。請注意特定變更的棄用週期與您專案中 Kotlin 版本的關係，例如：</p><ul><li>從 Kotlin 1.7.0 升級到 Kotlin 1.9.0 時，請檢查在 <a href="#kotlin-1-9-0-1-9-25">Kotlin 1.9.0</a> 和 <a href="#kotlin-1-7-0-1-8-22">Kotlin 1.7.0−1.8.22</a> 中生效的不相容變更。</li><li>從 Kotlin 1.9.0 升級到 Kotlin 2.0.0 時，請檢查在 <a href="#kotlin-2-0-0-and-later">Kotlin 2.0.0 及更高版本</a> 和 <a href="#kotlin-1-9-0-1-9-25">Kotlin 1.9.0−1.9.25</a> 中生效的不相容變更。</li></ul><h2 id="版本相容性" tabindex="-1">版本相容性 <a class="header-anchor" href="#版本相容性" aria-label="Permalink to &quot;版本相容性&quot;">​</a></h2><p>設定專案時，請檢查特定版本的 Kotlin Multiplatform Gradle 外掛程式（與您專案中的 Kotlin 版本相同）與 Gradle、Xcode 和 Android Gradle 外掛程式版本的相容性：</p><table tabindex="0"><thead><tr><th>Kotlin Multiplatform 外掛程式版本</th><th>Gradle</th><th>Android Gradle 外掛程式</th><th>Xcode</th></tr></thead><tbody><tr><td>2.2.0-2.2.10</td><td>7.6.3–8.14</td><td>7.3.1–8.10.0</td><td>16.3</td></tr><tr><td>2.1.21</td><td>7.6.3–8.12.1</td><td>7.3.1–8.7.2</td><td>16.3</td></tr><tr><td>2.1.20</td><td>7.6.3–8.11</td><td>7.4.2–8.7.2</td><td>16.0</td></tr><tr><td>2.1.0–2.1.10</td><td>7.6.3-8.10*</td><td>7.4.2–8.7.2</td><td>16.0</td></tr><tr><td>2.0.21</td><td>7.5-8.8*</td><td>7.4.2–8.5</td><td>16.0</td></tr><tr><td>2.0.20</td><td>7.5-8.8*</td><td>7.4.2–8.5</td><td>15.3</td></tr><tr><td>2.0.0</td><td>7.5-8.5</td><td>7.4.2–8.3</td><td>15.3</td></tr><tr><td>1.9.20</td><td>7.5-8.1.1</td><td>7.4.2–8.2</td><td>15.0</td></tr></tbody></table><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>*Kotlin 2.0.20–2.0.21 和 Kotlin 2.1.0–2.1.10 完全相容於 Gradle 8.6 及更早版本。 Gradle 8.7–8.10 版本也受支援，但只有一個例外：如果您在 JVM 目標中使用 <code>withJava()</code> 函數呼叫 Kotlin Multiplatform Gradle 外掛程式，您可能會在您的多平台專案中看到棄用警告。 更多資訊請參閱 <a href="#java-source-sets-created-by-default">預設建立的 Java 來源集</a>。</p></div><h2 id="kotlin-2-0-0-及更高版本" tabindex="-1">Kotlin 2.0.0 及更高版本 <a class="header-anchor" href="#kotlin-2-0-0-及更高版本" aria-label="Permalink to &quot;Kotlin 2.0.0 及更高版本&quot;">​</a></h2><p>本節涵蓋了在 Kotlin 2.0.0−2.2.0 中結束棄用週期並生效的不相容變更。</p><h3 id="位元碼嵌入已棄用" tabindex="-1">位元碼嵌入已棄用 <a class="header-anchor" href="#位元碼嵌入已棄用" aria-label="Permalink to &quot;位元碼嵌入已棄用&quot;">​</a></h3><p><strong>有什麼變更？</strong></p><p>Bitcode embedding 在 Xcode 14 中被棄用，並在 Xcode 15 中針對所有 Apple 目標移除。因此，框架組態的 <code>embedBitcode</code> 參數，以及 <code>-Xembed-bitcode</code> 和 <code>-Xembed-bitcode-marker</code> 命令列參數在 Kotlin 中已棄用。</p><p><strong>現在的最佳實踐是什麼？</strong></p><p>如果您仍在使用較早版本的 Xcode 但想要升級到 Kotlin 2.0.20 或更高版本，請在您的 Xcode 專案中禁用 bitcode embedding。</p><p><strong>這些變更何時生效？</strong></p><p>以下是計劃的棄用週期：</p><ul><li>2.0.20: Kotlin/Native 編譯器不再支援位元碼嵌入</li><li>2.1.0: 在 Kotlin Multiplatform Gradle 外掛程式中，<code>embedBitcode</code> DSL 被棄用並發出警告</li><li>2.2.0: 警告提升為錯誤</li><li>2.3.0: <code>embedBitcode</code> DSL 被移除</li></ul><h3 id="預設建立的-java-來源集" tabindex="-1">預設建立的 Java 來源集 <a class="header-anchor" href="#預設建立的-java-來源集" aria-label="Permalink to &quot;預設建立的 Java 來源集&quot;">​</a></h3><p><strong>有什麼變更？</strong></p><p>為了使 Kotlin Multiplatform 與 Gradle 即將進行的變更保持一致，我們正在逐步淘汰 <code>withJava()</code> 函數。<code>withJava()</code> 函數透過建立必要的 Java 來源集來實現與 Gradle Java 外掛程式的整合。從 Kotlin 2.1.20 開始，這些 Java 來源集將預設建立。</p><p><strong>現在的最佳實踐是什麼？</strong></p><p>以前，您必須明確使用 <code>withJava()</code> 函數來建立 <code>src/jvmMain/java</code> 和 <code>src/jvmTest/java</code> 來源集：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        withJava</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>從 Kotlin 2.1.20 開始，您可以從建置腳本中移除 <code>withJava()</code> 函數。</p><p>此外，Gradle 現在只有在存在 Java 來源時才會執行 Java 編譯任務，這會觸發以前未執行的 JVM 驗證診斷。如果您為 <code>KotlinJvmCompile</code> 任務或在 <code>compilerOptions</code> 內部明確配置了不相容的 JVM 目標，此診斷將會失敗。有關確保 JVM 目標相容性的指南，請參閱 <a href="https://kotlinlang.org/docs/gradle-configure-project.html#check-for-jvm-target-compatibility-of-related-compile-tasks" target="_blank" rel="noreferrer">檢查相關編譯任務的 JVM 目標相容性</a>。</p><p>如果您的專案使用的 Gradle 版本高於 8.7 且不依賴 Gradle Java 外掛程式，例如 <a href="https://docs.gradle.org/current/userguide/java_plugin.html" target="_blank" rel="noreferrer">Java</a>、<a href="https://docs.gradle.org/current/userguide/java_library_plugin.html" target="_blank" rel="noreferrer">Java Library</a> 或 <a href="https://docs.gradle.org/current/userguide/application_plugin.html" target="_blank" rel="noreferrer">Application</a>，或依賴於 Gradle Java 外掛程式的第三方 Gradle 外掛程式，您可以移除 <code>withJava()</code> 函數。</p><p>如果您的專案使用 <a href="https://docs.gradle.org/current/userguide/application_plugin.html" target="_blank" rel="noreferrer">Application</a> Gradle Java 外掛程式，我們建議遷移到 <a href="https://kotlinlang.org/docs/whatsnew2120.html#kotlin-multiplatform-new-dsl-to-replace-gradle-s-application-plugin" target="_blank" rel="noreferrer">新的實驗性 DSL</a>。從 Gradle 8.7 開始，Application 外掛程式將不再與 Kotlin Multiplatform Gradle 外掛程式一起使用。</p><p>如果您想在多平台專案中同時使用 Kotlin Multiplatform Gradle 外掛程式和其他 Gradle Java 外掛程式，請參閱 <a href="#deprecated-compatibility-with-kotlin-multiplatform-gradle-plugin-and-gradle-java-plugins">棄用 Kotlin Multiplatform Gradle 外掛程式與 Gradle Java 外掛程式的相容性</a>。</p><p>如果您在 Kotlin 2.1.20 和高於 8.7 的 Gradle 版本中使用 <a href="https://docs.gradle.org/current/userguide/java_testing.html#sec:java_test_fixtures" target="_blank" rel="noreferrer">Java 測試夾具</a> Gradle 外掛程式，則該外掛程式將無法運作。此問題已在 <a href="https://kotlinlang.org/docs/releases.html#release-details" target="_blank" rel="noreferrer">Kotlin 2.1.21</a> 中解決，請升級到該版本。</p><p>如果您遇到任何問題，請在我們的 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">問題追蹤器</a> 中回報，或在我們的 <a href="https://kotlinlang.slack.com/archives/C19FD9681" target="_blank" rel="noreferrer">公開 Slack 頻道</a> 尋求協助。</p><p><strong>這些變更何時生效？</strong></p><p>以下是計劃的棄用週期：</p><ul><li>Gradle &gt;8.6: 在使用 <code>withJava()</code> 函數的多平台專案中，針對任何先前版本的 Kotlin 引入棄用警告。</li><li>Gradle 9.0: 將此警告提升為錯誤。</li><li>2.1.20: 在任何版本的 Gradle 中使用 <code>withJava()</code> 函數時引入棄用警告。</li></ul><h3 id="將-android-目標重新命名為-androidtarget" tabindex="-1">將 <code>android</code> 目標重新命名為 <code>androidTarget</code> <a class="header-anchor" href="#將-android-目標重新命名為-androidtarget" aria-label="Permalink to &quot;將 \`android\` 目標重新命名為 \`androidTarget\`&quot;">​</a></h3><p><strong>有什麼變更？</strong></p><p>我們持續努力使 Kotlin Multiplatform 更穩定。朝此方向邁出的重要一步是為 Android 目標提供一流支援。未來，這項支援將透過由 Google 的 Android 團隊開發的獨立外掛程式提供。</p><p>為了為新的解決方案鋪平道路，我們在目前的 Kotlin DSL 中將 <code>android</code> 區塊重新命名為 <code>androidTarget</code>。這是一個臨時變更，是為了釋放 <code>android</code> 這個簡短名稱以供 Google 即將推出的 DSL 使用。</p><p><strong>現在的最佳實踐是什麼？</strong></p><p>將所有出現 <code>android</code> 區塊的地方重新命名為 <code>androidTarget</code>。當 Android 目標支援的新外掛程式可用時，請遷移到 Google 的 DSL。這將是在 Kotlin Multiplatform 專案中使用 Android 的首選選項。</p><p><strong>這些變更何時生效？</strong></p><p>以下是計劃的棄用週期：</p><ul><li>1.9.0: 在 Kotlin Multiplatform 專案中使用 <code>android</code> 名稱時引入棄用警告</li><li>2.1.0: 將此警告提升為錯誤</li><li>2.2.0: 從 Kotlin Multiplatform Gradle 外掛程式中移除 <code>android</code> 目標 DSL</li></ul><h3 id="宣告多個相似目標" tabindex="-1">宣告多個相似目標 <a class="header-anchor" href="#宣告多個相似目標" aria-label="Permalink to &quot;宣告多個相似目標&quot;">​</a></h3><p><strong>有什麼變更？</strong></p><p>我們不鼓勵在單一 Gradle 專案中宣告多個相似目標。例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jvmKtor&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jvmOkHttp&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 不建議且會產生棄用警告</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>一個常見的案例是將兩個相關的程式碼片段放在一起。例如，您可能希望在您的 <code>:shared</code> Gradle 專案中使用 <code>jvm(&quot;jvmKtor&quot;)</code> 和 <code>jvm(&quot;jvmOkHttp&quot;)</code> 來實作使用 Ktor 或 OkHttp 程式庫的網路功能：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// shared/build.gradle.kts:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jvmKtor&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        attributes.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">attribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* ... */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jvmOkHttp&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        attributes.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">attribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* ... */</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> commonMain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> getting</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> commonJvmMain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sourceSets.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">creating</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependsOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(commonMain)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // 共享依賴項</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jvmKtorMain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependsOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(commonJvmMain)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // Ktor 依賴項</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jvmOkHttpMain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependsOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(commonJvmMain)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // OkHttp 依賴項</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>此實作帶來了非平凡的組態複雜性：</p><ul><li>您必須在 <code>:shared</code> 端和每個消費者端設定 Gradle 屬性。否則，Gradle 無法在此類專案中解析依賴項，因為沒有額外資訊，不清楚消費者應該接收基於 Ktor 還是基於 OkHttp 的實作。</li><li>您必須手動設定 <code>commonJvmMain</code> 來源集。</li><li>組態涉及許多低階 Gradle 和 Kotlin Gradle 外掛程式的抽象概念和 API。</li></ul><p><strong>現在的最佳實踐是什麼？</strong></p><p>組態之所以複雜，是因為基於 Ktor 和基於 OkHttp 的實作位於<strong>同一個 Gradle 專案</strong>中。在許多情況下，可以將這些部分提取到獨立的 Gradle 專案中。以下是此類重構的一般概述：</p><ol><li><p>將原始專案中的兩個重複目標替換為單一目標。如果您在這些目標之間有共享來源集，請將其來源和組態移至新建立目標的預設來源集：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// shared/build.gradle.kts:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        jvmMain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 在此複製 jvmCommonMain 的組態</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>新增兩個新的 Gradle 專案，通常透過在您的 <code>settings.gradle.kts</code> 檔案中呼叫 <code>include</code>。例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">include</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;:okhttp-impl&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">include</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;:ktor-impl&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></li><li><p>組態每個新的 Gradle 專案：</p><ul><li>您很可能不需要套用 <code>kotlin(&quot;multiplatform&quot;)</code> 外掛程式，因為這些專案只編譯到一個目標。在此範例中，您可以套用 <code>kotlin(&quot;jvm&quot;)</code>。</li><li>將原始目標特定來源集的內容移至其各自的專案，例如，從 <code>jvmKtorMain</code> 移至 <code>ktor-impl/src</code>。</li><li>複製來源集的組態：依賴項、編譯器選項等等。</li><li>從新 Gradle 專案新增對原始專案的依賴項。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ktor-impl/build.gradle.kts:</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jvm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    project</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;:shared&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 新增對原始專案的依賴項</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 在此複製 jvmKtorMain 的依賴項</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    compilerOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 在此複製 jvmKtorMain 的編譯器選項</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ol><p>儘管這種方法在初始設定上需要更多工作，但它不使用任何 Gradle 和 Kotlin Gradle 外掛程式的低階實體，從而使結果建置更易於使用和維護。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>遺憾的是，我們無法為每個案例提供詳細的遷移步驟。如果上述說明不適用於您，請在此 <a href="https://youtrack.jetbrains.com/issue/KT-59316" target="_blank" rel="noreferrer">YouTrack 問題</a> 中描述您的使用案例。</p></div><p><strong>這些變更何時生效？</strong></p><p>以下是計劃的棄用週期：</p><ul><li>1.9.20: 在 Kotlin Multiplatform 專案中使用多個相似目標時引入棄用警告</li><li>2.1.0: 在此類情況下報告錯誤，除了 Kotlin/JS 目標；要了解有關此例外的更多資訊，請參閱 <a href="https://youtrack.jetbrains.com/issue/KT-47038/KJS-MPP-Split-JS-target-into-JsBrowser-and-JsNode" target="_blank" rel="noreferrer">YouTrack</a> 中的問題</li></ul><h3 id="棄用對以舊版模式發佈的多平台程式庫的支援" tabindex="-1">棄用對以舊版模式發佈的多平台程式庫的支援 <a class="header-anchor" href="#棄用對以舊版模式發佈的多平台程式庫的支援" aria-label="Permalink to &quot;棄用對以舊版模式發佈的多平台程式庫的支援&quot;">​</a></h3><p><strong>有什麼變更？</strong></p><p>此前，我們<a href="#deprecated-gradle-properties-for-hierarchical-structure-support">已棄用多平台專案中的舊版模式</a>，以防止發佈「舊版」二進位檔，並鼓勵您將專案遷移到<a href="./multiplatform-hierarchy">分層結構</a>。</p><p>為了繼續逐步淘汰生態系統中的「舊版」二進位檔，從 Kotlin 1.9.0 開始，也不鼓勵使用舊版程式庫。如果您的專案使用對舊版程式庫的依賴項，您將會看到以下警告：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>The dependency group:artifact:1.0 was published in the legacy mode. Support for such dependencies will be removed in the future</span></span></code></pre></div><p><strong>現在的最佳實踐是什麼？</strong></p><p><em>如果您使用多平台程式庫</em>，其中大多數都已遷移到「分層結構」模式，因此您只需要更新程式庫版本。有關詳細資訊，請參閱相應程式庫的文件。</p><p>如果該程式庫尚不支援非舊版二進位檔，您可以聯繫維護者並告知他們此相容性問題。</p><p><em>如果您是程式庫作者</em>，請將 Kotlin Gradle 外掛程式更新到最新版本，並確保您已修復<a href="#deprecated-gradle-properties-for-hierarchical-structure-support">已棄用的 Gradle 屬性</a>。</p><p>Kotlin 團隊熱衷於幫助生態系統遷移，因此如果您遇到任何問題，請隨時在 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack 中建立一個問題</a>。</p><p><strong>這些變更何時生效？</strong></p><p>以下是計劃的棄用週期：</p><ul><li>1.9.0: 針對對舊版程式庫的依賴項引入棄用警告</li><li>2.0.0: 將對舊版程式庫的依賴項警告提升為錯誤</li><li><blockquote><p>2.0.0: 移除對舊版程式庫的依賴項支援；使用此類依賴項可能導致建置失敗</p></blockquote></li></ul><h3 id="棄用對分層結構支援的-gradle-屬性" tabindex="-1">棄用對分層結構支援的 Gradle 屬性 <a class="header-anchor" href="#棄用對分層結構支援的-gradle-屬性" aria-label="Permalink to &quot;棄用對分層結構支援的 Gradle 屬性&quot;">​</a></h3><p><strong>有什麼變更？</strong></p><p>在其演進過程中，Kotlin 逐漸引入了對多平台專案中<a href="./multiplatform-hierarchy">分層結構</a>的支援，這是一種在通用來源集 <code>commonMain</code> 和任何特定平台來源集（例如 <code>jvmMain</code>）之間擁有中間來源集的能力。</p><p>在工具鏈不夠穩定的過渡期間，引入了一些 Gradle 屬性，允許細粒度選擇加入和選擇退出。</p><p>自 Kotlin 1.6.20 起，分層專案結構支援已預設啟用。然而，這些屬性在出現阻擋性問題時仍保留用於選擇退出。在處理完所有回饋後，我們現在開始完全淘汰這些屬性。</p><p>以下屬性現已棄用：</p><ul><li><code>kotlin.internal.mpp.hierarchicalStructureByDefault</code></li><li><code>kotlin.mpp.enableCompatibilityMetadataVariant</code></li><li><code>kotlin.mpp.hierarchicalStructureSupport</code></li><li><code>kotlin.mpp.enableGranularSourceSetsMetadata</code></li><li><code>kotlin.native.enableDependencyPropagation</code></li></ul><p><strong>現在的最佳實踐是什麼？</strong></p><ul><li>從您的 <code>gradle.properties</code> 和 <code>local.properties</code> 檔案中移除這些屬性。</li><li>避免在 Gradle 建置腳本或您的 Gradle 外掛程式中以程式設計方式設定它們。</li><li>如果棄用屬性是由您的建置中使用的某些第三方 Gradle 外掛程式設定的，請要求外掛程式維護者不要設定這些屬性。</li></ul><p>由於 Kotlin 工具鏈的預設行為自 Kotlin 1.6.20 起不包含此類屬性，我們預計不會產生任何嚴重影響。大多數後果將在專案重建後立即顯示。</p><p>如果您是程式庫作者，並希望格外安全，請檢查消費者是否可以使用您的程式庫。</p><p><strong>這些變更何時生效？</strong></p><p>以下是計劃的棄用週期：</p><ul><li>1.8.20: 在使用已棄用的 Gradle 屬性時報告警告</li><li>1.9.20: 將此警告提升為錯誤</li><li>2.0.0: 移除已棄用屬性；Kotlin Gradle 外掛程式將忽略其用法</li></ul><p>萬一您在移除這些屬性後遇到問題，請在 <a href="https://kotl.in/issue" target="_blank" rel="noreferrer">YouTrack 中建立一個問題</a>。</p><h3 id="棄用目標預設-api" tabindex="-1">棄用目標預設 API <a class="header-anchor" href="#棄用目標預設-api" aria-label="Permalink to &quot;棄用目標預設 API&quot;">​</a></h3><p><strong>有什麼變更？</strong></p><p>在非常早期的開發階段，Kotlin Multiplatform 引入了用於處理所謂「目標預設」（target presets）的 API。每個目標預設本質上都代表了 Kotlin Multiplatform 目標的工廠。這個 API 結果證明大部分是多餘的，因為像 <code>jvm()</code> 或 <code>iosSimulatorArm64()</code> 這樣的 DSL 函數涵蓋了相同的使用案例，同時更直接和簡潔。</p><p>為了減少混淆並提供更清晰的指南，所有與預設相關的 API 現已在 Kotlin Gradle 外掛程式的公共 API 中棄用。這包括：</p><ul><li><code>org.jetbrains.kotlin.gradle.dsl.KotlinMultiplatformExtension</code> 中的 <code>presets</code> 屬性</li><li><code>org.jetbrains.kotlin.gradle.plugin.KotlinTargetPreset</code> 介面及其所有繼承者</li><li><code>fromPreset</code> 多載</li></ul><p><strong>現在的最佳實踐是什麼？</strong></p><p>改用相應的 <a href="./multiplatform-dsl-reference#targets">Kotlin 目標</a>，例如：</p>`,93)),s("table",null,[a[0]||(a[0]=s("tr",null,[s("td",null,"之前"),s("td",null,"現在")],-1)),s("tr",null,[s("td",null,[l(n,{lang:"kotlin",code:`kotlin {
    targets {
        fromPreset(presets.iosArm64, 'ios')
    }
}`})]),s("td",null,[l(n,{lang:"kotlin",code:`kotlin {
    iosArm64()
}`})])])]),a[22]||(a[22]=t('<p><strong>這些變更何時生效？</strong></p><p>以下是計劃的棄用週期：</p><ul><li>1.9.20: 報告任何預設相關 API 用法上的警告</li><li>2.0.0: 將此警告提升為錯誤</li><li>2.2.0: 從 Kotlin Gradle 外掛程式的公共 API 中移除預設相關 API；仍然使用它的來源將因「未解析的引用」錯誤而失敗，而二進位檔（例如 Gradle 外掛程式）則可能因連結錯誤而失敗，除非針對最新版本的 Kotlin Gradle 外掛程式重新編譯</li></ul><h3 id="棄用-apple-目標捷徑" tabindex="-1">棄用 Apple 目標捷徑 <a class="header-anchor" href="#棄用-apple-目標捷徑" aria-label="Permalink to &quot;棄用 Apple 目標捷徑&quot;">​</a></h3><p><strong>有什麼變更？</strong></p><p>我們正在棄用 Kotlin Multiplatform DSL 中的 <code>ios()</code>、<code>watchos()</code> 和 <code>tvos()</code> 目標捷徑。它們旨在部分建立 Apple 目標的來源集階層。然而，它們被證明難以擴展，有時令人困惑。</p><p>例如，<code>ios()</code> 捷徑同時建立 <code>iosArm64</code> 和 <code>iosX64</code> 目標，但沒有包含 <code>iosSimulatorArm64</code> 目標，而這在具有 Apple M 晶片的主機上工作時是必需的。然而，改變這個捷徑很難實作，並可能在現有的使用者專案中引起問題。</p><p><strong>現在的最佳實踐是什麼？</strong></p><p>Kotlin Gradle 外掛程式現在提供了一個內建的階層範本。自 Kotlin 1.9.20 起，它預設啟用，並包含適用於常見使用案例的預定義中間來源集。</p><p>您應該指定目標列表，而不是使用捷徑，然後外掛程式會根據此列表自動設定中間來源集。</p><p>例如，如果您的專案中有 <code>iosArm64</code> 和 <code>iosSimulatorArm64</code> 目標，外掛程式會自動建立 <code>iosMain</code> 和 <code>iosTest</code> 中間來源集。如果您的專案中有 <code>iosArm64</code> 和 <code>macosArm64</code> 目標，則會建立 <code>appleMain</code> 和 <code>appleTest</code> 來源集。</p><p>更多資訊請參閱 <a href="./multiplatform-hierarchy">分層專案結構</a></p><p><strong>這些變更何時生效？</strong></p><p>以下是計劃的棄用週期：</p><ul><li>1.9.20: 在使用 <code>ios()</code>、<code>watchos()</code> 和 <code>tvos()</code> 目標捷徑時報告警告；預設階層範本改為預設啟用</li><li>2.1.0: 在使用目標捷徑時報告錯誤</li><li>2.2.0: 從 Kotlin Multiplatform Gradle 外掛程式中移除目標捷徑 DSL</li></ul><h3 id="kotlin-升級後-ios-框架版本不正確" tabindex="-1">Kotlin 升級後 iOS 框架版本不正確 <a class="header-anchor" href="#kotlin-升級後-ios-框架版本不正確" aria-label="Permalink to &quot;Kotlin 升級後 iOS 框架版本不正確&quot;">​</a></h3><p><strong>問題是什麼？</strong></p><p>當使用直接整合時，Kotlin 程式碼的變更可能不會反映在 Xcode 中的 iOS 應用程式中。直接整合是透過 <code>embedAndSignAppleFrameworkForXcode</code> 任務設定的，該任務將您的多平台專案中的 iOS 框架連接到 Xcode 中的 iOS 應用程式。</p><p>當您將多平台專案中的 Kotlin 版本從 1.9.2x 升級到 2.0.0（或從 2.0.0 降級到 1.9.2x），然後在 Kotlin 檔案中進行變更並嘗試建置應用程式時，Xcode 可能會錯誤地使用舊版本的 iOS 框架。因此，變更將不會在 Xcode 的 iOS 應用程式中可見。</p><p><strong>解決方案是什麼？</strong></p><ol><li><p>在 Xcode 中，使用 <strong>Product</strong> | <strong>Clean Build Folder</strong> 清理建置目錄。</p></li><li><p>在終端機中，執行以下命令：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>./gradlew clean</span></span></code></pre></div></li><li><p>再次建置應用程式以確保使用新版本的 iOS 框架。</p></li></ol><p><strong>問題何時會修復？</strong></p><p>我們計劃在 Kotlin 2.0.10 中修復此問題。您可以查看 <a href="https://kotlinlang.org/docs/eap.html" target="_blank" rel="noreferrer">參與 Kotlin 搶先體驗預覽</a> 部分是否有 Kotlin 2.0.10 的任何預覽版本可用。</p><p>更多資訊請參閱 <a href="https://youtrack.jetbrains.com/issue/KT-68257" target="_blank" rel="noreferrer">YouTrack 中的對應問題</a>。</p><h2 id="kotlin-1-9-0−1-9-25" tabindex="-1">Kotlin 1.9.0−1.9.25 <a class="header-anchor" href="#kotlin-1-9-0−1-9-25" aria-label="Permalink to &quot;Kotlin 1.9.0−1.9.25&quot;">​</a></h2><p>本節涵蓋了在 Kotlin 1.9.0−1.9.25 中結束棄用週期並生效的不相容變更。</p>',26)),a[23]||(a[23]=s("h3",{"initial-collapse-state":"collapsed",collapsible:"true",id:"棄用直接將-kotlin-來源集新增到-kotlin-編譯的-api",tabindex:"-1"},[i("棄用直接將 Kotlin 來源集新增到 Kotlin 編譯的 API "),s("a",{class:"header-anchor",href:"#棄用直接將-kotlin-來源集新增到-kotlin-編譯的-api","aria-label":'Permalink to "棄用直接將 Kotlin 來源集新增到 Kotlin 編譯的 API {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),a[24]||(a[24]=t(`<p><strong>有什麼變更？</strong></p><p>對 <code>KotlinCompilation.source</code> 的訪問已棄用。以下程式碼將產生棄用警告：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosSimulatorArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> commonMain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> getting</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myCustomIntermediateSourceSet </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> creating</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependsOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(commonMain)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        targets[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jvm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].compilations[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;main&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">source</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myCustomIntermediateSourceSet)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>現在的最佳實踐是什麼？</strong></p><p>要替換 <code>KotlinCompilation.source(someSourceSet)</code>，請從 <code>KotlinCompilation</code> 的預設來源集新增 <code>dependsOn</code> 關係到 <code>someSourceSet</code>。我們建議使用 <code>by getting</code> 直接引用來源，這樣更短且更具可讀性。但是，您也可以使用 <code>KotlinCompilation.defaultSourceSet.dependsOn(someSourceSet)</code>，這適用於所有情況。</p><p>您可以透過以下方式之一變更上述程式碼：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    js</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    iosSimulatorArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    sourceSets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> commonMain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> getting</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myCustomIntermediateSourceSet </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> creating</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependsOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(commonMain)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 選項 #1。更短且更具可讀性，盡可能使用。 </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 通常，預設來源集的名稱 </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 是目標名稱和編譯名稱的簡單串聯：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jvmMain </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            dependsOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myCustomIntermediateSourceSet)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 選項 #2。通用解決方案，如果您的建置腳本需要更進階的方法，請使用它：</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        targets[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;jvm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].compilations[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;main&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].defaultSourceSet.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependsOn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myCustomIntermediateSourceSet)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>這些變更何時生效？</strong></p><p>以下是計劃的棄用週期：</p><ul><li>1.9.0: 在使用 <code>KotlinComplation.source</code> 時引入棄用警告</li><li>1.9.20: 將此警告提升為錯誤</li><li>2.2.0: 從 Kotlin Gradle 外掛程式中移除 <code>KotlinComplation.source</code>，嘗試使用它會導致建置腳本編譯期間出現「未解析的引用」錯誤</li></ul>`,10)),a[25]||(a[25]=s("h3",{"initial-collapse-state":"collapsed",collapsible:"true",id:"從-kotlin-js-gradle-外掛程式遷移到-kotlin-multiplatform-gradle-外掛程式",tabindex:"-1"},[i("從 "),s("code",null,"kotlin-js"),i(" Gradle 外掛程式遷移到 "),s("code",null,"kotlin-multiplatform"),i(" Gradle 外掛程式 "),s("a",{class:"header-anchor",href:"#從-kotlin-js-gradle-外掛程式遷移到-kotlin-multiplatform-gradle-外掛程式","aria-label":'Permalink to "從 `kotlin-js` Gradle 外掛程式遷移到 `kotlin-multiplatform` Gradle 外掛程式 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),a[26]||(a[26]=t("<p><strong>有什麼變更？</strong></p><p>從 Kotlin 1.9.0 開始，<code>kotlin-js</code> Gradle 外掛程式已棄用。基本上，它重複了 <code>kotlin-multiplatform</code> 外掛程式的功能，帶有 <code>js()</code> 目標並在底層共用相同的實作。這種重疊造成了混淆，並增加了 Kotlin 團隊的維護負擔。我們鼓勵您改用帶有 <code>js()</code> 目標的 <code>kotlin-multiplatform</code> Gradle 外掛程式。</p><p><strong>現在的最佳實踐是什麼？</strong></p>",3)),s("ol",null,[s("li",null,[a[3]||(a[3]=s("p",null,[i("從您的專案中移除 "),s("code",null,"kotlin-js"),i(" Gradle 外掛程式，並在 "),s("code",null,"settings.gradle.kts"),i(" 檔案中套用 "),s("code",null,"kotlin-multiplatform"),i("，如果您使用的是 "),s("code",null,"pluginManagement {}"),i(" 區塊：")],-1)),l(o,null,{default:e(()=>[l(p,{title:"kotlin-js"},{default:e(()=>a[1]||(a[1]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// settings.gradle.kts:")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"pluginManagement"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    plugins"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"        // 移除以下行：")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"        kotlin"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"js"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") version "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"1.9.0"')]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    repositories"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"        // ...")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),l(p,{title:"kotlin-multiplatform"},{default:e(()=>a[2]||(a[2]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// settings.gradle.kts:")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"pluginManagement"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    plugins"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"        // 改為新增以下行：")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"        kotlin"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"multiplatform"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") version "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"1.9.0"')]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    repositories"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"        // ...")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),a[4]||(a[4]=s("p",null,[i("如果您使用不同的方式套用外掛程式，請參閱 "),s("a",{href:"https://docs.gradle.org/current/userguide/plugins.html",target:"_blank",rel:"noreferrer"},"Gradle 文件"),i(" 以獲取遷移說明。")],-1))]),a[8]||(a[8]=s("li",null,[s("p",null,[i("將您的來源檔案從 "),s("code",null,"main"),i(" 和 "),s("code",null,"test"),i(" 資料夾移動到同一目錄中的 "),s("code",null,"jsMain"),i(" 和 "),s("code",null,"jsTest"),i(" 資料夾。")])],-1)),s("li",null,[a[7]||(a[7]=t('<p>調整依賴項宣告：</p><ul><li>我們建議使用 <code>sourceSets {}</code> 區塊並配置相應來源集的依賴項，<code>jsMain {}</code> 用於生產依賴項，<code>jsTest {}</code> 用於測試依賴項。有關更多詳細資訊，請參閱 <a href="./multiplatform-add-dependencies">新增依賴項</a>。</li><li>但是，如果您想在頂層區塊中宣告依賴項，請將宣告從 <code>api(&quot;group:artifact:1.0&quot;)</code> 變更為 <code>add(&quot;jsMainApi&quot;, &quot;group:artifact:1.0&quot;)</code> 等等。</li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>在這種情況下，請確保頂層的 <code>dependencies {}</code> 區塊位於 <code>kotlin {}</code> 區塊<strong>之後</strong>。否則，您將收到「Configuration not found」錯誤。</p></div><p>您可以透過以下方式之一變更 <code>build.gradle.kts</code> 檔案中的程式碼：</p>',4)),l(o,null,{default:e(()=>[l(p,{title:"kotlin-js"},{default:e(()=>a[5]||(a[5]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// build.gradle.kts:")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"plugins"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    kotlin"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"js"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") version "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"1.9.0"')]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),i(`
`),s("span",{class:"line"}),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"dependencies"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    testImplementation"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"test"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"))")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    implementation"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"org.jetbrains.kotlinx:kotlinx-html:0.8.0"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),i(`
`),s("span",{class:"line"}),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    js"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"        // ...")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),l(p,{title:"kotlin-multiplatform"},{default:e(()=>a[6]||(a[6]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// build.gradle.kts:")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"plugins"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    kotlin"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"multiplatform"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") version "),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"1.9.0"')]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),i(`
`),s("span",{class:"line"}),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    js"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"        // ...")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"    // 選項 #1。在 sourceSets {} 區塊中宣告依賴項：")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    sourceSets"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"        val"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," jsMain "),s("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"by"),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," getting"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"            dependencies"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"                // 此處不需要 js 前綴，您可以直接從頂層區塊複製貼上")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"                implementation"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"org.jetbrains.kotlinx:kotlinx-html:0.8.0"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            }")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"       }")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")]),i(`
`),s("span",{class:"line"}),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"dependencies"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"    // 選項 #2。在依賴項宣告中新增 js 前綴：")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    add"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"jsTestImplementation"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"test"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"))")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1})]),a[9]||(a[9]=s("li",null,[s("p",null,[i("Kotlin Gradle 外掛程式在 "),s("code",null,"kotlin {}"),i(" 區塊中提供的 DSL 在大多數情況下保持不變。但是，如果您按名稱引用低階 Gradle 實體，例如任務和配置，您現在需要調整它們，通常是透過新增 "),s("code",null,"js"),i(" 前綴。例如，您可以在 "),s("code",null,"jsBrowserTest"),i(" 名稱下找到 "),s("code",null,"browserTest"),i(" 任務。")])],-1))]),a[27]||(a[27]=s("p",null,[s("strong",null,"這些變更何時生效？")],-1)),a[28]||(a[28]=s("p",null,[i("在 1.9.0 中，使用 "),s("code",null,"kotlin-js"),i(" Gradle 外掛程式會產生棄用警告。")],-1)),a[29]||(a[29]=s("h3",{"initial-collapse-state":"collapsed",collapsible:"true",id:"棄用-jvmwithjava-預設",tabindex:"-1"},[i("棄用 "),s("code",null,"jvmWithJava"),i(" 預設 "),s("a",{class:"header-anchor",href:"#棄用-jvmwithjava-預設","aria-label":'Permalink to "棄用 `jvmWithJava` 預設 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),a[30]||(a[30]=t('<p><strong>有什麼變更？</strong></p><p><code>targetPresets.jvmWithJava</code> 已棄用，不鼓勵使用。</p><p><strong>現在的最佳實踐是什麼？</strong></p><p>改用 <code>jvm { withJava() }</code> 目標。請注意，切換到 <code>jvm { withJava() }</code> 後，您需要調整帶有 <code>.java</code> 來源的來源目錄路徑。</p><p>例如，如果您使用名稱為「jvm」的 <code>jvm</code> 目標：</p><table tabindex="0"><thead><tr><th>之前</th><th>現在</th></tr></thead><tbody><tr><td><code>src/main/java</code></td><td><code>src/jvmMain/java</code></td></tr><tr><td><code>src/test/java</code></td><td><code>src/jvmTest/java</code></td></tr></tbody></table><p><strong>這些變更何時生效？</strong></p><p>以下是計劃的棄用週期：</p><ul><li>1.3.40: 在使用 <code>targetPresets.jvmWithJava</code> 時引入警告</li><li>1.9.20: 將此警告提升為錯誤</li><li><blockquote><p>1.9.20: 移除 <code>targetPresets.jvmWithJava</code> API；嘗試使用它會導致建置腳本編譯失敗</p></blockquote></li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>儘管整個 <code>targetPresets</code> API 已棄用，但 <code>jvmWithJava</code> 預設有不同的棄用時間表。</p></div>',10)),a[31]||(a[31]=s("h3",{"initial-collapse-state":"collapsed",collapsible:"true",id:"棄用舊版-android-來源集佈局",tabindex:"-1"},[i("棄用舊版 Android 來源集佈局 "),s("a",{class:"header-anchor",href:"#棄用舊版-android-來源集佈局","aria-label":'Permalink to "棄用舊版 Android 來源集佈局 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),a[32]||(a[32]=t('<p><strong>有什麼變更？</strong></p><p><a href="./multiplatform-android-layout">新的 Android 來源集佈局</a> 自 Kotlin 1.9.0 起預設啟用。對舊版佈局的支援已棄用，使用 <code>kotlin.mpp.androidSourceSetLayoutVersion</code> Gradle 屬性現在會觸發棄用診斷。</p><p><strong>這些變更何時生效？</strong></p><p>以下是計劃的棄用週期：</p><ul><li>&lt;=1.9.0: 在使用 <code>kotlin.mpp.androidSourceSetLayoutVersion=1</code> 時報告警告；警告可以透過 <code>kotlin.mpp.androidSourceSetLayoutVersion1.nowarn=true</code> Gradle 屬性抑制</li><li>1.9.20: 將此警告提升為錯誤；此錯誤<strong>無法</strong>抑制</li><li><blockquote><p>1.9.20: 移除對 <code>kotlin.mpp.androidSourceSetLayoutVersion=1</code> 的支援；Kotlin Gradle 外掛程式將忽略該屬性</p></blockquote></li></ul>',5)),a[33]||(a[33]=s("h3",{"initial-collapse-state":"collapsed",collapsible:"true",id:"棄用帶有自定義-dependson-的-commonmain-和-commontest",tabindex:"-1"},[i("棄用帶有自定義 "),s("code",null,"dependsOn"),i(" 的 "),s("code",null,"commonMain"),i(" 和 "),s("code",null,"commonTest"),i(),s("a",{class:"header-anchor",href:"#棄用帶有自定義-dependson-的-commonmain-和-commontest","aria-label":'Permalink to "棄用帶有自定義 `dependsOn` 的 `commonMain` 和 `commonTest` {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),a[34]||(a[34]=t("<p><strong>有什麼變更？</strong></p><p><code>commonMain</code> 和 <code>commonTest</code> 來源集通常分別代表 <code>main</code> 和 <code>test</code> 來源集階層的根。但是，可以透過手動配置這些來源集的 <code>dependsOn</code> 關係來覆蓋此行為。</p><p>維護此類配置需要額外的努力和有關多平台建置內部的知識。此外，它會降低程式碼的可讀性和可重用性，因為您需要閱讀特定的建置腳本才能確定 <code>commonMain</code> 是否為 <code>main</code> 來源集階層的根。</p><p>因此，訪問 <code>commonMain</code> 和 <code>commonTest</code> 上的 <code>dependsOn</code> 現已棄用。</p><p><strong>現在的最佳實踐是什麼？</strong></p><p>假設您需要將使用 <code>commonMain.dependsOn(customCommonMain)</code> 的 <code>customCommonMain</code> 來源集遷移到 1.9.20。在大多數情況下，<code>customCommonMain</code> 參與與 <code>commonMain</code> 相同的編譯，因此您可以將 <code>customCommonMain</code> 合併到 <code>commonMain</code> 中：</p><ol><li>將 <code>customCommonMain</code> 的來源複製到 <code>commonMain</code> 中。</li><li>將 <code>customCommonMain</code> 的所有依賴項新增到 <code>commonMain</code> 中。</li><li>將 <code>customCommonMain</code> 的所有編譯器選項設定新增到 <code>commonMain</code> 中。</li></ol><p>在極少數情況下，<code>customCommonMain</code> 可能會參與比 <code>commonMain</code> 更多的編譯。此類配置需要建置腳本的額外低階組態。如果您不確定這是否是您的使用案例，那麼它很可能不是。</p><p>如果是您的使用案例，請透過將 <code>customCommonMain</code> 的來源和設定移動到 <code>commonMain</code>，反之亦然，來「交換」這兩個來源集。</p><p><strong>這些變更何時生效？</strong></p><p>以下是計劃的棄用週期：</p><ul><li>1.9.0: 在 <code>commonMain</code> 中使用 <code>dependsOn</code> 時報告警告</li><li><blockquote><p>=1.9.20: 在 <code>commonMain</code> 或 <code>commonTest</code> 中使用 <code>dependsOn</code> 時報告錯誤</p></blockquote></li></ul>",12)),a[35]||(a[35]=s("h3",{"initial-collapse-state":"collapsed",collapsible:"true",id:"轉發宣告的新方法",tabindex:"-1"},[i("轉發宣告的新方法 "),s("a",{class:"header-anchor",href:"#轉發宣告的新方法","aria-label":'Permalink to "轉發宣告的新方法 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),a[36]||(a[36]=t(`<p><strong>有什麼變更？</strong></p><p>JetBrains 團隊改進了 Kotlin 中轉發宣告的方法，使其行為更可預測：</p><ul><li>您只能使用 <code>cnames</code> 或 <code>objcnames</code> 套件匯入轉發宣告。</li><li>您需要明確地對應的 C 和 Objective-C 轉發宣告進行轉換（<code>cast</code>）。</li></ul><p><strong>現在的最佳實踐是什麼？</strong></p><ul><li><p>考慮一個帶有 <code>library.package</code> 並宣告 <code>cstructName</code> 轉發宣告的 C 程式庫。以前，可以直接從程式庫匯入：<code>import library.package.cstructName</code>。現在，您只能為此使用一個特殊的轉發宣告套件：<code>import cnames.structs.cstructName</code>。對於 <code>objcnames</code> 也是如此。</p></li><li><p>考慮兩個 <code>objcinterop</code> 程式庫：一個使用 <code>objcnames.protocols.ForwardDeclaredProtocolProtocol</code>，另一個具有實際定義：</p><div class="language-ObjC vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ObjC</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 第一個 objcinterop 程式庫</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;Foundation/Foundation.h&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@protocol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ForwardDeclaredProtocol;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NSString</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> consumeProtocol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;ForwardDeclaredProtocol&gt; </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">s</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NSString</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> stringWithUTF8String:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Protocol&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-ObjC vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ObjC</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 第二個 objcinterop 程式庫</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 標頭：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;Foundation/Foundation.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@protocol</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ForwardDeclaredProtocol</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@end</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 實作：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ForwardDeclaredProtocolImpl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NSObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;ForwardDeclaredProtocol&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;ForwardDeclaredProtocol&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">produceProtocol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [ForwardDeclaredProtocolImpl </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>以前，可以在它們之間無縫傳輸物件。現在，對於轉發宣告，需要明確的 <code>as</code> 轉換：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Kotlin 程式碼：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    consumeProtocol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">produceProtocol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> objcnames.protocols.ForwardDeclaredProtocolProtocol)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>您只能將 <code>objcnames.protocols.ForwardDeclaredProtocolProtocol</code> 轉換為對應的真實類別。否則，您將收到錯誤。</p></div></li></ul><p><strong>這些變更何時生效？</strong></p><p>從 Kotlin 1.9.20 開始，您需要明確地對應的 C 和 Objective-C 轉發宣告進行轉換。此外，現在只能透過使用特殊套件來匯入轉發宣告。</p><h2 id="kotlin-1-7-0−1-8-22" tabindex="-1">Kotlin 1.7.0−1.8.22 <a class="header-anchor" href="#kotlin-1-7-0−1-8-22" aria-label="Permalink to &quot;Kotlin 1.7.0−1.8.22&quot;">​</a></h2><p>本節涵蓋了在 Kotlin 1.7.0−1.8.22 中結束棄用週期並生效的不相容變更。</p>`,9)),a[37]||(a[37]=s("h3",{"initial-collapse-state":"collapsed",collapsible:"true",id:"棄用-kotlin-multiplatform-gradle-外掛程式與-gradle-java-外掛程式的相容性",tabindex:"-1"},[i("棄用 Kotlin Multiplatform Gradle 外掛程式與 Gradle Java 外掛程式的相容性 "),s("a",{class:"header-anchor",href:"#棄用-kotlin-multiplatform-gradle-外掛程式與-gradle-java-外掛程式的相容性","aria-label":'Permalink to "棄用 Kotlin Multiplatform Gradle 外掛程式與 Gradle Java 外掛程式的相容性 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),a[38]||(a[38]=t(`<p><strong>有什麼變更？</strong></p><p>由於 Kotlin Multiplatform Gradle 外掛程式與 Gradle 外掛程式 <a href="https://docs.gradle.org/current/userguide/java_plugin.html" target="_blank" rel="noreferrer">Java</a>、<a href="https://docs.gradle.org/current/userguide/java_library_plugin.html" target="_blank" rel="noreferrer">Java Library</a> 和 <a href="https://docs.gradle.org/current/userguide/application_plugin.html" target="_blank" rel="noreferrer">Application</a> 之間存在相容性問題，現在當您將這些外掛程式套用至同一個專案時，會出現棄用警告。當您的多平台專案中的另一個 Gradle 外掛程式套用 Gradle Java 外掛程式時，也會出現此警告。例如，<a href="https://docs.spring.io/spring-boot/gradle-plugin/index.html" target="_blank" rel="noreferrer">Spring Boot Gradle 外掛程式</a> 會自動套用 Application 外掛程式。</p><p>我們新增此棄用警告是為了應對 Kotlin Multiplatform 的專案模型與 Gradle 的 Java 生態系統外掛程式之間存在的根本相容性問題。Gradle 的 Java 生態系統外掛程式目前沒有考量到其他外掛程式可能：</p><ul><li>也以與 Java 生態系統外掛程式不同的方式發佈或編譯 JVM 目標。</li><li>在同一個專案中有兩個不同的 JVM 目標，例如 JVM 和 Android。</li><li>具有複雜的多平台專案結構，可能有多個非 JVM 目標。</li></ul><p>遺憾的是，Gradle 目前沒有提供任何 API 來解決這些問題。</p><p>我們以前在 Kotlin Multiplatform 中使用了一些變通方法來幫助整合 Java 生態系統外掛程式。然而，這些變通方法從未真正解決相容性問題，而且自 Gradle 8.8 發佈以來，這些變通方法已不再可能。更多資訊請參閱我們的 <a href="https://youtrack.jetbrains.com/issue/KT-66542/Gradle-JVM-target-with-withJava-produces-a-deprecation-warning" target="_blank" rel="noreferrer">YouTrack 問題</a>。</p><p>雖然我們尚不清楚如何確切解決此相容性問題，但我們仍致力於繼續支援您的 Kotlin Multiplatform 專案中某些形式的 Java 來源編譯。至少，我們將支援 Java 來源的編譯以及在您的多平台專案中使用 Gradle 的 <a href="https://docs.gradle.org/current/javadoc/org/gradle/api/plugins/JavaBasePlugin.html" target="_blank" rel="noreferrer"><code>java-base</code></a> 外掛程式。</p><p><strong>現在的最佳實踐是什麼？</strong></p><p>如果您的多平台專案中出現此棄用警告，我們建議您：</p><ol><li>判斷您是否實際需要在專案中使用 Gradle Java 外掛程式。如果不需要，請考慮移除它。</li><li>檢查 Gradle Java 外掛程式是否僅用於單個任務。如果是這樣，您可能可以在不費太多力氣的情況下移除該外掛程式。例如，如果任務使用 Gradle Java 外掛程式來建立 Javadoc JAR 檔案，您可以手動定義 Javadoc 任務。</li></ol><p>否則，如果您想在您的多平台專案中同時使用 Kotlin Multiplatform Gradle 外掛程式和這些 Gradle Java 外掛程式，我們建議您：</p><ol><li>在您的 Gradle 專案中建立一個獨立的子專案。</li><li>在獨立的子專案中，套用 Gradle Java 外掛程式。</li><li>在獨立的子專案中，新增對父多平台專案的依賴項。</li></ol><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>獨立子專案<strong>不得</strong>是多平台專案，且您只能使用它來設定對多平台專案的依賴項。</p></div><p>例如，您有一個名為 <code>my-main-project</code> 的多平台專案，並且您想使用 <a href="https://docs.gradle.org/current/userguide/java_library_plugin.html" target="_blank" rel="noreferrer">Java Library</a> Gradle 外掛程式。</p><p>一旦您建立了一個子專案，我們稱之為 <code>subproject-A</code>，您的父專案結構應如下所示：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>.</span></span>
<span class="line"><span>├── build.gradle</span></span>
<span class="line"><span>├── settings.gradle.kts</span></span>
<span class="line"><span>├── subproject-A</span></span>
<span class="line"><span>    └── build.gradle.kts</span></span>
<span class="line"><span>    └── src</span></span>
<span class="line"><span>        └── Main.java</span></span></code></pre></div><p>在您的子專案的 <code>build.gradle.kts</code> 檔案中，在 <code>plugins {}</code> 區塊中套用 Java Library 外掛程式：</p>`,17)),l(o,{group:"build-script"},{default:e(()=>[l(p,{title:"Kotlin","group-key":"kotlin"},{default:e(()=>a[10]||(a[10]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"plugins"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    id"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"java-library"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),l(p,{title:"Groovy","group-key":"groovy"},{default:e(()=>a[11]||(a[11]=[s("div",{class:"language-groovy vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"groovy"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"plugins {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    id("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'java-library'"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),a[39]||(a[39]=s("p",null,[i("在您的子專案的 "),s("code",null,"build.gradle.kts"),i(" 檔案中，新增對父多平台專案的依賴項：")],-1)),l(o,{group:"build-script"},{default:e(()=>[l(p,{title:"Kotlin","group-key":"kotlin"},{default:e(()=>a[12]||(a[12]=[s("div",{class:"language-kotlin vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"kotlin"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"dependencies"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    implementation"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"project"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'":my-main-project"'),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")) "),s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// 您的父多平台專案的名稱")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),l(p,{title:"Groovy","group-key":"groovy"},{default:e(()=>a[13]||(a[13]=[s("div",{class:"language-groovy vp-adaptive-theme"},[s("button",{title:"Copy Code",class:"copy"}),s("span",{class:"lang"},"groovy"),s("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[s("code",null,[s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"dependencies {")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    implementation project("),s("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"':my-main-project'"),s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") "),s("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"// 您的父多平台專案的名稱")]),i(`
`),s("span",{class:"line"},[s("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),a[40]||(a[40]=s("p",null,"您的父專案現在已設定為可與兩個外掛程式一起使用。",-1)),a[41]||(a[41]=s("h3",{"initial-collapse-state":"collapsed",collapsible:"true",id:"自動生成目標的新方法",tabindex:"-1"},[i("自動生成目標的新方法 "),s("a",{class:"header-anchor",href:"#自動生成目標的新方法","aria-label":'Permalink to "自動生成目標的新方法 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),a[42]||(a[42]=t("<p><strong>有什麼變更？</strong></p><p>由 Gradle 自動生成的目標存取器在 <code>kotlin.targets {}</code> 區塊內部不再可用。請改用 <code>findByName(&quot;targetName&quot;)</code> 方法。</p><p>請注意，此類存取器在 <code>kotlin.targets {}</code> 情況下仍然可用，例如 <code>kotlin.targets.linuxX64</code>。</p><p><strong>現在的最佳實踐是什麼？</strong></p>",4)),s("table",null,[a[14]||(a[14]=s("tr",null,[s("td",null,"之前"),s("td",null,"現在")],-1)),s("tr",null,[s("td",null,[l(n,{lang:"kotlin",code:`kotlin {
    targets {
        configure(['windows',
            'linux']) {
        }
    }
}`})]),s("td",null,[l(n,{lang:"kotlin",code:`kotlin {
    targets {
        configure([findByName('windows'),
            findByName('linux')]) {
        }
    }
}`})])])]),a[43]||(a[43]=s("p",null,[s("strong",null,"這些變更何時生效？")],-1)),a[44]||(a[44]=s("p",null,[i("在 Kotlin 1.7.20 中，當在 "),s("code",null,"kotlin.targets {}"),i(" 區塊中使用目標存取器時，會引入錯誤。")],-1)),a[45]||(a[45]=s("p",null,[i("更多資訊請參閱 "),s("a",{href:"https://youtrack.jetbrains.com/issue/KT-47047",target:"_blank",rel:"noreferrer"},"YouTrack 中的對應問題"),i("。")],-1)),a[46]||(a[46]=s("h3",{"initial-collapse-state":"collapsed",collapsible:"true",id:"gradle-輸入和輸出編譯任務的變更",tabindex:"-1"},[i("Gradle 輸入和輸出編譯任務的變更 "),s("a",{class:"header-anchor",href:"#gradle-輸入和輸出編譯任務的變更","aria-label":'Permalink to "Gradle 輸入和輸出編譯任務的變更 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),a[47]||(a[47]=t('<p><strong>有什麼變更？</strong></p><p>Kotlin 編譯任務不再繼承具有 <code>sourceCompatibility</code> 和 <code>targetCompatibility</code> 輸入的 Gradle <code>AbstractCompile</code> 任務，使其在 Kotlin 使用者腳本中不可用。</p><p>編譯任務中的其他破壞性變更：</p><p><strong>現在的最佳實踐是什麼？</strong></p><table tabindex="0"><thead><tr><th>之前</th><th>現在</th></tr></thead><tbody><tr><td><code>SourceTask.stableSources</code> 輸入不再可用。</td><td>改用 <code>sources</code> 輸入。此外，<code>setSource()</code> 方法仍然可用。</td></tr><tr><td><code>sourceFilesExtensions</code> 輸入已移除。</td><td>編譯任務仍實作 <code>PatternFilterable</code> 介面。使用其方法篩選 Kotlin 來源。</td></tr><tr><td><code>Gradle destinationDir: File</code> 輸出已棄用。</td><td>改用 <code>destinationDirectory: DirectoryProperty</code> 輸出。</td></tr><tr><td><code>KotlinCompile</code> 任務的 <code>classpath</code> 屬性已棄用。</td><td>所有編譯任務現在都使用 <code>libraries</code> 輸入來取得編譯所需的程式庫列表。</td></tr></tbody></table><p><strong>這些變更何時生效？</strong></p><p>在 Kotlin 1.7.20 中，輸入不可用，輸出被替換，並且 <code>classpath</code> 屬性已棄用。</p><p>更多資訊請參閱 <a href="https://youtrack.jetbrains.com/issue/KT-32805" target="_blank" rel="noreferrer">YouTrack 中的對應問題</a>。</p>',8)),a[48]||(a[48]=s("h3",{"initial-collapse-state":"collapsed",collapsible:"true",id:"編譯依賴項的新配置名稱",tabindex:"-1"},[i("編譯依賴項的新配置名稱 "),s("a",{class:"header-anchor",href:"#編譯依賴項的新配置名稱","aria-label":'Permalink to "編譯依賴項的新配置名稱 {initial-collapse-state="collapsed" collapsible="true"}"'},"​")],-1)),a[49]||(a[49]=t("<p><strong>有什麼變更？</strong></p><p>Kotlin Multiplatform Gradle 外掛程式建立的編譯配置獲得了新名稱。</p><p>Kotlin Multiplatform 專案中的目標有兩個預設編譯：<code>main</code> 和 <code>test</code>。這些編譯中的每一個都有自己的預設來源集，例如 <code>jvmMain</code> 和 <code>jvmTest</code>。以前，測試編譯及其預設來源集的配置名稱相同，這可能導致名稱衝突，進而導致當標記有平台特定屬性的配置包含在另一個配置中時出現問題。</p><p>現在，編譯配置帶有額外的 <code>Compilation</code> 後綴，而使用舊硬編碼配置名稱的專案和外掛程式將不再編譯。</p><p>對應來源集依賴項的配置名稱保持不變。</p><p><strong>現在的最佳實踐是什麼？</strong></p>",6)),s("table",null,[a[19]||(a[19]=s("tr",null,[s("td"),s("td",null,"之前"),s("td",null,"現在")],-1)),s("tr",null,[a[15]||(a[15]=s("td",{rowspan:"2"},[s("code",null,"jvmMain"),i(" 編譯的依賴項")],-1)),s("td",null,[l(n,{lang:"kotlin",code:"jvm<Scope>"})]),s("td",null,[l(n,{lang:"kotlin",code:"jvmCompilation<Scope>"})])]),s("tr",null,[s("td",null,[l(n,{lang:"kotlin",code:`dependencies {
    add("jvmImplementation",
        "foo.bar.baz:1.2.3")
}`})]),s("td",null,[l(n,{lang:"kotlin",code:`dependencies {
    add("jvmCompilationImplementation",
        "foo.bar.baz:1.2.3")
}`})])]),s("tr",null,[a[16]||(a[16]=s("td",null,[s("code",null,"jvmMain"),i(" 來源集的依賴項")],-1)),s("td",E,[l(n,{lang:"kotlin",code:"jvmMain<Scope>"})])]),s("tr",null,[a[17]||(a[17]=s("td",null,[s("code",null,"jvmTest"),i(" 編譯的依賴項")],-1)),s("td",null,[l(n,{lang:"kotlin",code:"jvmTest<Scope>"})]),s("td",null,[l(n,{lang:"kotlin",code:"jvmTestCompilation<Scope>"})])]),s("tr",null,[a[18]||(a[18]=s("td",null,[s("code",null,"jvmTest"),i(" 來源集的依賴項")],-1)),s("td",u,[l(n,{lang:"kotlin",code:"jvmTest<Scope>"})])])]),a[50]||(a[50]=t('<p>可用範圍為 <code>Api</code>、<code>Implementation</code>、<code>CompileOnly</code> 和 <code>RuntimeOnly</code>。</p><p><strong>這些變更何時生效？</strong></p><p>在 Kotlin 1.8.0 中，當在硬編碼字串中使用舊配置名稱時，會引入錯誤。</p><p>更多資訊請參閱 <a href="https://youtrack.jetbrains.com/issue/KT-35916/" target="_blank" rel="noreferrer">YouTrack 中的對應問題</a>。</p>',4))])}const j=h(g,[["render",y]]);export{f as __pageData,j as default};
