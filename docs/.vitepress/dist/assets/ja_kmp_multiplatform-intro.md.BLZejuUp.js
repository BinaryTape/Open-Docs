import{_ as t}from"./chunks/kotlin-multiplatform.Bawkfuuo.js";import{_ as l,c as i,o as e,ag as o}from"./chunks/framework.Bksy39di.js";const s=JSON.parse('{"title":"Kotlin Multiplatform 入門","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kmp/multiplatform-intro.md","filePath":"ja/kmp/multiplatform-intro.md","lastUpdated":1755516278000}'),r={name:"ja/kmp/multiplatform-intro.md"};function p(n,a,m,d,u,f){return e(),i("div",null,a[0]||(a[0]=[o('<h1 id="kotlin-multiplatform-入門" tabindex="-1">Kotlin Multiplatform 入門 <a class="header-anchor" href="#kotlin-multiplatform-入門" aria-label="Permalink to &quot;Kotlin Multiplatform 入門&quot;">​</a></h1><p>マルチプラットフォームプログラミングのサポートは、Kotlinの主要な利点の一つです。これは、<a href="./multiplatform-dsl-reference#targets">異なるプラットフォーム</a>向けに同じコードを記述・保守する時間を削減しつつ、ネイティブプログラミングの柔軟性と利点を維持します。</p><p><img src="'+t+'" alt="Kotlin Multiplatform" width="700"></p><h2 id="主要な概念を学ぶ" tabindex="-1">主要な概念を学ぶ <a class="header-anchor" href="#主要な概念を学ぶ" aria-label="Permalink to &quot;主要な概念を学ぶ&quot;">​</a></h2><p>Kotlin Multiplatform を使用すると、モバイル、ウェブ、デスクトップといった様々なプラットフォーム間でコードを共有できます。コードがコンパイルされるプラットフォームは、<em>ターゲット</em> のリストによって定義されます。</p><p>各ターゲットには対応する_ソースセット_があり、これは独自の依存関係とコンパイラオプションを持つソースファイルのセットを表します。例えば JVM 用の <code>jvmMain</code> のようなプラットフォーム固有のソースセットは、プラットフォーム固有のライブラリや API を利用できます。</p><p>ターゲットのサブセット間でコードを共有するために、中間ソースセットが使用されます。例えば、<code>appleMain</code> ソースセットは、すべての Apple プラットフォーム間で共有されるコードを表します。すべてのプラットフォーム間で共有され、宣言されたすべてのターゲットにコンパイルされるコードは、独自のソースセット <code>commonMain</code> を持ちます。これはプラットフォーム固有の API を使用することはできませんが、マルチプラットフォームライブラリを利用できます。</p><p>特定のターゲット向けにコンパイルする場合、Kotlin は共通ソースセット、関連する中間ソースセット、およびターゲット固有のソースセットを結合します。</p><p>このトピックの詳細については、以下を参照してください:</p><ul><li><a href="./multiplatform-discover-project">Kotlin Multiplatform プロジェクト構造の基本</a></li><li><a href="./multiplatform-advanced-project-structure">マルチプラットフォームプロジェクト構造の高度な概念</a></li></ul><h2 id="コード共有メカニズムを使用する" tabindex="-1">コード共有メカニズムを使用する <a class="header-anchor" href="#コード共有メカニズムを使用する" aria-label="Permalink to &quot;コード共有メカニズムを使用する&quot;">​</a></h2><p>類似のターゲットのサブセット間でコードを共有する方が便利な場合があります。Kotlin Multiplatform は、<em>デフォルト階層テンプレート</em> を使用して、その作成を簡素化する方法を提供します。これには、プロジェクトで指定したターゲットに基づいて作成される、事前定義された中間ソースセットのリストが含まれます。</p><p>共有コードからプラットフォーム固有の API にアクセスするには、もう一つの Kotlin メカニズムである <em>expected および actual 宣言</em> を使用できます。これにより、共通コードでプラットフォーム固有の API を <code>expect</code> することを宣言し、各ターゲットプラットフォーム向けに個別の <code>actual</code> 実装を提供できます。このメカニズムは、関数、クラス、インターフェースを含む様々な Kotlin の概念で使用できます。例えば、共通コードで関数を定義し、対応するソースセットでプラットフォーム固有のライブラリを使用してその実装を提供できます。</p><p>このトピックの詳細については、以下を参照してください:</p><ul><li><a href="./multiplatform-share-on-platforms">プラットフォームでコードを共有する</a></li><li><a href="./multiplatform-expect-actual">Expected および actual 宣言</a></li><li><a href="./multiplatform-hierarchy">階層型プロジェクト構造</a></li></ul><h2 id="依存関係を追加する" tabindex="-1">依存関係を追加する <a class="header-anchor" href="#依存関係を追加する" aria-label="Permalink to &quot;依存関係を追加する&quot;">​</a></h2><p>Kotlin Multiplatform プロジェクトは、外部ライブラリや他のマルチプラットフォームプロジェクトに依存できます。共通コードの場合、共通ソースセットにマルチプラットフォームライブラリへの依存関係を追加できます。Kotlin は、適切なプラットフォーム固有の部品を他のソースセットに自動的に解決し、追加します。プラットフォーム固有の API のみが要求される場合は、対応するソースセットに依存関係を追加してください。</p><p>Kotlin Multiplatform プロジェクトに Android 固有の依存関係を追加することは、純粋な Android プロジェクトに追加するのと似ています。iOS 固有の依存関係を扱う場合、追加の設定なしで Apple SDK フレームワークをシームレスに統合できます。外部ライブラリやフレームワークに対しては、Kotlin は Objective-C および Swift との相互運用性を提供します。</p><p>このトピックの詳細については、以下を参照してください:</p><ul><li><a href="./multiplatform-add-dependencies">マルチプラットフォームライブラリに依存関係を追加する</a></li><li><a href="./multiplatform-android-dependencies">Android ライブラリに依存関係を追加する</a></li><li><a href="./multiplatform-ios-dependencies">iOS ライブラリに依存関係を追加する</a></li></ul><h2 id="ios-との統合を設定する" tabindex="-1">iOS との統合を設定する <a class="header-anchor" href="#ios-との統合を設定する" aria-label="Permalink to &quot;iOS との統合を設定する&quot;">​</a></h2><p>マルチプラットフォームプロジェクトが iOS をターゲットとする場合、Kotlin Multiplatform 共有モジュールと iOS アプリとの統合を設定できます。</p><p>そのためには、iOS フレームワークを生成し、それをローカルまたはリモートの依存関係として iOS プロジェクトに追加します:</p><ul><li><strong>ローカル統合</strong>: 特別なスクリプトを使用してマルチプラットフォームプロジェクトと Xcode プロジェクトを直接接続するか、ローカル Pod 依存関係を含むセットアップでは CocoaPods 依存関係マネージャーを使用します。</li><li><strong>リモート統合</strong>: XCFramework を使用して SPM 依存関係を設定するか、CocoaPods を介して共有モジュールを配布します。</li></ul><p>このトピックの詳細については、<a href="./multiplatform-ios-integration-overview">iOS 統合方法</a>を参照してください。</p><h2 id="コンパイルを設定する" tabindex="-1">コンパイルを設定する <a class="header-anchor" href="#コンパイルを設定する" aria-label="Permalink to &quot;コンパイルを設定する&quot;">​</a></h2><p>各ターゲットは、異なる目的のために複数のコンパイルを持つことができ、通常はプロダクションまたはテスト用ですが、カスタムコンパイルを定義することもできます。</p><p>Kotlin Multiplatform を使用すると、プロジェクト内のすべてのコンパイルを設定したり、ターゲット内で特定のコンパイルを設定したり、個別のコンパイルを作成することさえできます。コンパイルを設定する際、コンパイラオプションを変更したり、依存関係を管理したり、ネイティブ言語との相互運用性を設定したりできます。</p><p>このトピックの詳細については、<a href="./multiplatform-configure-compilations">コンパイルを設定する</a>を参照してください。</p><h2 id="最終的なバイナリをビルドする" tabindex="-1">最終的なバイナリをビルドする <a class="header-anchor" href="#最終的なバイナリをビルドする" aria-label="Permalink to &quot;最終的なバイナリをビルドする&quot;">​</a></h2><p>デフォルトでは、ターゲットは <code>.klib</code> アーティファクトにコンパイルされ、これは Kotlin/Native 自体によって依存関係として消費できますが、実行したり、ネイティブライブラリとして使用したりすることはできません。しかし、Kotlin Multiplatform は最終的なネイティブバイナリをビルドするための追加メカニズムを提供します。</p><p>実行可能バイナリ、共有ライブラリ、静的ライブラリ、または Objective-C フレームワークを作成でき、それぞれ異なるビルドタイプ向けに設定可能です。Kotlin はまた、iOS 統合のためのユニバーサル (fat) フレームワークおよび XCFramework をビルドする方法も提供します。</p><p>このトピックの詳細については、<a href="./multiplatform-build-native-binaries">ネイティブバイナリをビルドする</a>を参照してください。</p><h2 id="マルチプラットフォームライブラリを作成する" tabindex="-1">マルチプラットフォームライブラリを作成する <a class="header-anchor" href="#マルチプラットフォームライブラリを作成する" aria-label="Permalink to &quot;マルチプラットフォームライブラリを作成する&quot;">​</a></h2><p>共通コードと、JVM、ウェブ、ネイティブプラットフォーム向けのプラットフォーム固有の実装を持つマルチプラットフォームライブラリを作成できます。</p><p>Kotlin Multiplatform ライブラリを公開するには、Gradle ビルドスクリプトでの特定の設定が必要です。公開には Maven リポジトリと <code>maven-publish</code> プラグインを使用できます。一度公開されたマルチプラットフォームライブラリは、他のクロスプラットフォームプロジェクトで依存関係として使用できます。</p><p>このトピックの詳細については、<a href="./multiplatform-publish-lib-setup">マルチプラットフォームライブラリを公開する</a>を参照してください。</p><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><a href="./multiplatform-dsl-reference">Kotlin Multiplatform Gradle プラグインの DSL リファレンス</a></li><li><a href="./multiplatform-compatibility-guide">Kotlin Multiplatform 互換性ガイド</a></li></ul>',39)]))}const b=l(r,[["render",p]]);export{s as __pageData,b as default};
