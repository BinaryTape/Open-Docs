import{_ as a,c as i,o as t,ag as n}from"./chunks/framework.Bksy39di.js";const o=JSON.parse('{"title":"트레이싱","description":"","frontmatter":{},"headers":[],"relativePath":"ko/koog/tracing.md","filePath":"ko/koog/tracing.md","lastUpdated":1755146406000}'),e={name:"ko/koog/tracing.md"};function l(h,s,p,d,k,r){return t(),i("div",null,s[0]||(s[0]=[n(`<h1 id="트레이싱" tabindex="-1">트레이싱 <a class="header-anchor" href="#트레이싱" aria-label="Permalink to &quot;트레이싱&quot;">​</a></h1><p>이 페이지는 AI 에이전트를 위한 포괄적인 트레이싱 기능을 제공하는 트레이싱 기능에 대한 세부 정보를 포함합니다.</p><h2 id="기능-개요" tabindex="-1">기능 개요 <a class="header-anchor" href="#기능-개요" aria-label="Permalink to &quot;기능 개요&quot;">​</a></h2><p>트레이싱 기능은 에이전트 실행에 대한 상세 정보를 캡처하는 강력한 모니터링 및 디버깅 도구입니다. 포함하는 정보는 다음과 같습니다:</p><ul><li>전략 실행</li><li>LLM 호출</li><li>도구 호출</li><li>에이전트 그래프 내 노드 실행</li></ul><p>이 기능은 에이전트 파이프라인의 주요 이벤트를 가로채어 구성 가능한 메시지 처리기로 전달하는 방식으로 작동합니다. 이 처리기들은 트레이스 정보를 로그 파일 또는 파일 시스템의 다른 유형 파일과 같은 다양한 대상으로 출력할 수 있으며, 이를 통해 개발자는 에이전트 동작에 대한 통찰력을 얻고 문제를 효과적으로 해결할 수 있습니다.</p><h3 id="이벤트-흐름" tabindex="-1">이벤트 흐름 <a class="header-anchor" href="#이벤트-흐름" aria-label="Permalink to &quot;이벤트 흐름&quot;">​</a></h3><ol><li>트레이싱 기능은 에이전트 파이프라인의 이벤트를 가로챕니다.</li><li>이벤트는 구성된 메시지 필터를 기반으로 필터링됩니다.</li><li>필터링된 이벤트는 등록된 메시지 처리기로 전달됩니다.</li><li>메시지 처리기는 이벤트를 포맷하고 각 대상에 출력합니다.</li></ol><h2 id="구성-및-초기화" tabindex="-1">구성 및 초기화 <a class="header-anchor" href="#구성-및-초기화" aria-label="Permalink to &quot;구성 및 초기화&quot;">​</a></h2><h3 id="기본-설정" tabindex="-1">기본 설정 <a class="header-anchor" href="#기본-설정" aria-label="Permalink to &quot;기본 설정&quot;">​</a></h3><p>트레이싱 기능을 사용하려면 다음이 필요합니다:</p><ol><li>하나 이상의 메시지 처리기가 있어야 합니다(기존 처리기를 사용하거나 직접 생성할 수 있습니다).</li><li>에이전트에 <code>Tracing</code>을(를) 설치합니다.</li><li>메시지 필터를 구성합니다(선택 사항).</li><li>기능에 메시지 처리기를 추가합니다.</li></ol><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 트레이스 메시지의 대상으로 사용될 로거/파일 정의 </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> logger </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> KotlinLogging.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">logger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> outputPath </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/path/to/trace.log&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 에이전트 생성</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> agent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AIAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   executor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> simpleOllamaAIExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   llmModel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> OllamaModels.Meta.LLAMA_3_2,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Tracing) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 트레이스 이벤트를 처리하도록 메시지 처리기 구성</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      addMessageProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TraceFeatureMessageLogWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(logger))</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      addMessageProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         TraceFeatureMessageFileWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            outputPath,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            { path: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> -&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SystemFileSystem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sink</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(path).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">buffered</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      )</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 선택적으로 메시지 필터링</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      messageFilter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         // LLM 호출 및 도구 호출만 트레이스</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AfterLLMCallEvent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ToolCallEvent</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="메시지-필터링" tabindex="-1">메시지 필터링 <a class="header-anchor" href="#메시지-필터링" aria-label="Permalink to &quot;메시지 필터링&quot;">​</a></h3><p>모든 기존 이벤트를 처리하거나 특정 기준에 따라 일부 이벤트를 선택할 수 있습니다. 메시지 필터를 사용하면 처리할 이벤트를 제어할 수 있습니다. 이는 에이전트 실행의 특정 측면에 집중하는 데 유용합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// LLM 관련 이벤트만 필터링</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">messageFilter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BeforeLLMCallEvent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AfterLLMCallEvent</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 도구 관련 이벤트만 필터링</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">messageFilter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ToolCallEvent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ToolCallResultEvent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ToolValidationErrorEvent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ToolCallFailureEvent</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 노드 실행 이벤트만 필터링</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">messageFilter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AIAgentNodeExecutionStartEvent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AIAgentNodeExecutionEndEvent</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="대량-트레이스-볼륨" tabindex="-1">대량 트레이스 볼륨 <a class="header-anchor" href="#대량-트레이스-볼륨" aria-label="Permalink to &quot;대량 트레이스 볼륨&quot;">​</a></h3><p>복잡한 전략이나 장기 실행 에이전트의 경우 트레이스 이벤트의 볼륨이 상당할 수 있습니다. 이벤트 볼륨을 관리하려면 다음 방법을 사용하는 것을 고려하십시오:</p><ul><li>특정 메시지 필터를 사용하여 이벤트 수를 줄입니다.</li><li>버퍼링 또는 샘플링 기능이 있는 사용자 지정 메시지 처리기를 구현합니다.</li><li>로그 파일이 너무 커지는 것을 방지하기 위해 파일 로테이션을 사용합니다.</li></ul><h3 id="의존성-그래프" tabindex="-1">의존성 그래프 <a class="header-anchor" href="#의존성-그래프" aria-label="Permalink to &quot;의존성 그래프&quot;">​</a></h3><p>트레이싱 기능은 다음 의존성을 가집니다:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Tracing</span></span>
<span class="line"><span>├── AIAgentPipeline (for intercepting events)</span></span>
<span class="line"><span>├── TraceFeatureConfig</span></span>
<span class="line"><span>│   └── FeatureConfig</span></span>
<span class="line"><span>├── Message Processors</span></span>
<span class="line"><span>│   ├── TraceFeatureMessageLogWriter</span></span>
<span class="line"><span>│   │   └── FeatureMessageLogWriter</span></span>
<span class="line"><span>│   ├── TraceFeatureMessageFileWriter</span></span>
<span class="line"><span>│   │   └── FeatureMessageFileWriter</span></span>
<span class="line"><span>│   └── TraceFeatureMessageRemoteWriter</span></span>
<span class="line"><span>│       └── FeatureMessageRemoteWriter</span></span>
<span class="line"><span>└── Event Types (from ai.koog.agents.core.feature.model)</span></span>
<span class="line"><span>    ├── AIAgentStartedEvent</span></span>
<span class="line"><span>    ├── AIAgentFinishedEvent</span></span>
<span class="line"><span>    ├── AIAgentRunErrorEvent</span></span>
<span class="line"><span>    ├── AIAgentStrategyStartEvent</span></span>
<span class="line"><span>    ├── AIAgentStrategyFinishedEvent</span></span>
<span class="line"><span>    ├── AIAgentNodeExecutionStartEvent</span></span>
<span class="line"><span>    ├── AIAgentNodeExecutionEndEvent</span></span>
<span class="line"><span>    ├── LLMCallStartEvent</span></span>
<span class="line"><span>    ├── LLMCallWithToolsStartEvent</span></span>
<span class="line"><span>    ├── LLMCallEndEvent</span></span>
<span class="line"><span>    ├── LLMCallWithToolsEndEvent</span></span>
<span class="line"><span>    ├── ToolCallEvent</span></span>
<span class="line"><span>    ├── ToolValidationErrorEvent</span></span>
<span class="line"><span>    ├── ToolCallFailureEvent</span></span>
<span class="line"><span>    └── ToolCallResultEvent</span></span></code></pre></div><h2 id="예시-및-빠른-시작" tabindex="-1">예시 및 빠른 시작 <a class="header-anchor" href="#예시-및-빠른-시작" aria-label="Permalink to &quot;예시 및 빠른 시작&quot;">​</a></h2><h3 id="로거로-기본-트레이싱" tabindex="-1">로거로 기본 트레이싱 <a class="header-anchor" href="#로거로-기본-트레이싱" aria-label="Permalink to &quot;로거로 기본 트레이싱&quot;">​</a></h3><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 로거 생성</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> logger </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> KotlinLogging.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">logger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    runBlocking</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       // 트레이싱을 사용하여 에이전트 생성</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> agent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AIAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          executor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> simpleOllamaAIExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          llmModel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> OllamaModels.Meta.LLAMA_3_2,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       ) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Tracing) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">             addMessageProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TraceFeatureMessageLogWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(logger))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       // 에이전트 실행</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       agent.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, agent!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="오류-처리-및-예외-상황" tabindex="-1">오류 처리 및 예외 상황 <a class="header-anchor" href="#오류-처리-및-예외-상황" aria-label="Permalink to &quot;오류 처리 및 예외 상황&quot;">​</a></h2><h3 id="메시지-처리기-없음" tabindex="-1">메시지 처리기 없음 <a class="header-anchor" href="#메시지-처리기-없음" aria-label="Permalink to &quot;메시지 처리기 없음&quot;">​</a></h3><p>트레이싱 기능에 메시지 처리기가 추가되지 않으면 경고가 기록됩니다:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Tracing Feature. No feature out stream providers are defined. Trace streaming has no target.</span></span></code></pre></div><p>이 기능은 여전히 이벤트를 가로채지만, 어디에서도 처리되거나 출력되지 않습니다.</p><h3 id="리소스-관리" tabindex="-1">리소스 관리 <a class="header-anchor" href="#리소스-관리" aria-label="Permalink to &quot;리소스 관리&quot;">​</a></h3><p>메시지 처리기는 적절히 해제되어야 하는 리소스(예: 파일 핸들)를 보유할 수 있습니다. <code>use</code> 확장 함수를 사용하여 적절한 정리를 보장하십시오:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 에이전트 생성</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> agent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AIAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    executor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> simpleOllamaAIExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    llmModel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> OllamaModels.Meta.LLAMA_3_2,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> writer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TraceFeatureMessageFileWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        outputPath,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        { path: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> -&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SystemFileSystem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sink</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(path).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">buffered</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Tracing) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        addMessageProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(writer)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 에이전트 실행</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">agent.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(input)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 블록이 종료될 때 작성기가 자동으로 닫힙니다.</span></span></code></pre></div><h3 id="특정-이벤트를-파일로-트레이싱" tabindex="-1">특정 이벤트를 파일로 트레이싱 <a class="header-anchor" href="#특정-이벤트를-파일로-트레이싱" aria-label="Permalink to &quot;특정 이벤트를 파일로 트레이싱&quot;">​</a></h3><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Tracing) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // LLM 호출만 트레이스</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    messageFilter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BeforeLLMCallEvent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AfterLLMCallEvent</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    addMessageProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(writer)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="특정-이벤트를-원격-엔드포인트로-트레이싱" tabindex="-1">특정 이벤트를 원격 엔드포인트로 트레이싱 <a class="header-anchor" href="#특정-이벤트를-원격-엔드포인트로-트레이싱" aria-label="Permalink to &quot;특정 이벤트를 원격 엔드포인트로 트레이싱&quot;">​</a></h3><p>네트워크를 통해 이벤트 데이터를 보내야 할 때 원격 엔드포인트로 트레이싱을 사용합니다. 일단 시작되면, 원격 엔드포인트로의 트레이싱은 지정된 포트 번호에서 경량 서버를 시작하고 Kotlin 서버-센트 이벤트(SSE)를 통해 이벤트를 전송합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 에이전트 생성</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> agent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AIAgent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    executor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> simpleOllamaAIExecutor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    llmModel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> OllamaModels.Meta.LLAMA_3_2,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> connectionConfig </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AIAgentFeatureServerConnectionConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(host </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> host, port </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> port)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> writer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TraceFeatureMessageRemoteWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        connectionConfig </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> connectionConfig</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Tracing) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        addMessageProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(writer)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 에이전트 실행</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">agent.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(input)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 블록이 종료될 때 작성기가 자동으로 닫힙니다.</span></span></code></pre></div><p>클라이언트 측에서는 <code>FeatureMessageRemoteClient</code>를 사용하여 이벤트를 수신하고 역직렬화할 수 있습니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clientConfig </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AIAgentFeatureClientConnectionConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(host </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> host, port </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> port, protocol </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> URLProtocol.HTTP)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> agentEvents </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mutableListOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DefinedFeatureEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clientJob </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> launch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    FeatureMessageRemoteClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(connectionConfig </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clientConfig, scope </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> collectEventsJob </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> launch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            client.receivedMessages.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">consumeAsFlow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">collect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { event </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // 서버에서 이벤트 수집</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                agentEvents.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(event </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DefinedFeatureEvent)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // 에이전트 완료 시 이벤트 수집 중지</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (event </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AIAgentFinishedEvent) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    cancel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">connect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        collectEventsJob.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">healthCheck</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(clientJob).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">joinAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><h2 id="api-문서" tabindex="-1">API 문서 <a class="header-anchor" href="#api-문서" aria-label="Permalink to &quot;API 문서&quot;">​</a></h2><p>트레이싱 기능은 다음 핵심 구성 요소를 가진 모듈식 아키텍처를 따릅니다:</p><ol><li><a href="https://api.koog.ai/agents/agents-features/agents-features-trace/ai.koog.agents.features.tracing.feature/-tracing/index.html" target="_blank" rel="noreferrer">Tracing</a>: 에이전트 파이프라인의 이벤트를 가로채는 주요 기능 클래스.</li><li><a href="https://api.koog.ai/agents/agents-features/agents-features-trace/ai.koog.agents.features.tracing.feature/-trace-feature-config/index.html" target="_blank" rel="noreferrer">TraceFeatureConfig</a>: 기능 동작을 사용자 지정하기 위한 구성 클래스.</li><li>메시지 처리기: 트레이스 이벤트를 처리하고 출력하는 구성 요소: <ul><li><a href="https://api.koog.ai/agents/agents-features/agents-features-trace/ai.koog.agents.features.tracing.writer/-trace-feature-message-log-writer/index.html" target="_blank" rel="noreferrer">TraceFeatureMessageLogWriter</a>: 트레이스 이벤트를 로거에 기록합니다.</li><li><a href="https://api.koog.ai/agents/agents-features/agents-features-trace/ai.koog.agents.features.tracing.writer/-trace-feature-message-file-writer/index.html" target="_blank" rel="noreferrer">TraceFeatureMessageFileWriter</a>: 트레이스 이벤트를 파일에 기록합니다.</li><li><a href="https://api.koog.ai/agents/agents-features/agents-features-trace/ai.koog.agents.features.tracing.writer/-trace-feature-message-remote-writer/index.html" target="_blank" rel="noreferrer">TraceFeatureMessageRemoteWriter</a>: 트레이스 이벤트를 원격 서버로 보냅니다.</li></ul></li></ol><h2 id="faq-및-문제-해결" tabindex="-1">FAQ 및 문제 해결 <a class="header-anchor" href="#faq-및-문제-해결" aria-label="Permalink to &quot;FAQ 및 문제 해결&quot;">​</a></h2><p>다음 섹션에는 트레이싱 기능과 관련된 자주 묻는 질문과 답변이 포함되어 있습니다.</p><h3 id="에이전트-실행의-특정-부분만-트레이스하려면-어떻게-해야-합니까" tabindex="-1">에이전트 실행의 특정 부분만 트레이스하려면 어떻게 해야 합니까? <a class="header-anchor" href="#에이전트-실행의-특정-부분만-트레이스하려면-어떻게-해야-합니까" aria-label="Permalink to &quot;에이전트 실행의 특정 부분만 트레이스하려면 어떻게 해야 합니까?&quot;">​</a></h3><p><code>messageFilter</code> 속성을 사용하여 이벤트를 필터링합니다. 예를 들어, LLM 호출만 트레이스하려면:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Tracing) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // LLM 호출만 트레이스</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   messageFilter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BeforeLLMCallEvent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AfterLLMCallEvent</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   addMessageProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(writer)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="여러-메시지-처리기를-사용할-수-있습니까" tabindex="-1">여러 메시지 처리기를 사용할 수 있습니까? <a class="header-anchor" href="#여러-메시지-처리기를-사용할-수-있습니까" aria-label="Permalink to &quot;여러 메시지 처리기를 사용할 수 있습니까?&quot;">​</a></h3><p>예, 여러 메시지 처리기를 추가하여 동시에 다른 대상으로 트레이스할 수 있습니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Tracing) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    addMessageProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TraceFeatureMessageLogWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(logger))</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    addMessageProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TraceFeatureMessageFileWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(outputPath, syncOpener))</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    addMessageProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TraceFeatureMessageRemoteWriter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(connectionConfig))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="사용자-지정-메시지-처리기를-어떻게-생성할-수-있습니까" tabindex="-1">사용자 지정 메시지 처리기를 어떻게 생성할 수 있습니까? <a class="header-anchor" href="#사용자-지정-메시지-처리기를-어떻게-생성할-수-있습니까" aria-label="Permalink to &quot;사용자 지정 메시지 처리기를 어떻게 생성할 수 있습니까?&quot;">​</a></h3><p><code>FeatureMessageProcessor</code> 인터페이스를 구현하십시오:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CustomTraceProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FeatureMessageProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 처리기의 현재 열린 상태</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _isOpen </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MutableStateFlow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isOpen: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">StateFlow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> _isOpen.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">asStateFlow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> suspend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> processMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(message: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FeatureMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 사용자 지정 처리 로직</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        when</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (message) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AIAgentNodeExecutionStartEvent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // 노드 시작 이벤트 처리</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AfterLLMCallEvent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                // LLM 호출 종료 이벤트 처리</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 다른 이벤트 유형 처리 </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> suspend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> close</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 설정된 연결 닫기</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 사용자 지정 처리기 사용</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">install</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Tracing) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    addMessageProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CustomTraceProcessor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>메시지 처리기가 처리할 수 있는 기존 이벤트 유형에 대한 자세한 내용은 <a href="#predefined-event-types">사전 정의된 이벤트 유형</a>을 참조하십시오.</p><h2 id="사전-정의된-이벤트-유형" tabindex="-1">사전 정의된 이벤트 유형 <a class="header-anchor" href="#사전-정의된-이벤트-유형" aria-label="Permalink to &quot;사전 정의된 이벤트 유형&quot;">​</a></h2><p>Koog는 사용자 지정 메시지 처리기에서 사용할 수 있는 사전 정의된 이벤트 유형을 제공합니다. 사전 정의된 이벤트는 관련 엔티티에 따라 여러 범주로 분류될 수 있습니다:</p><ul><li><a href="#agent-events">에이전트 이벤트</a></li><li><a href="#strategy-events">전략 이벤트</a></li><li><a href="#node-events">노드 이벤트</a></li><li><a href="#llm-call-events">LLM 호출 이벤트</a></li><li><a href="#tool-call-events">도구 호출 이벤트</a></li></ul><h3 id="에이전트-이벤트" tabindex="-1">에이전트 이벤트 <a class="header-anchor" href="#에이전트-이벤트" aria-label="Permalink to &quot;에이전트 이벤트&quot;">​</a></h3><h4 id="aiagentstartedevent" tabindex="-1">AIAgentStartedEvent <a class="header-anchor" href="#aiagentstartedevent" aria-label="Permalink to &quot;AIAgentStartedEvent&quot;">​</a></h4><p>에이전트 실행의 시작을 나타냅니다. 다음 필드를 포함합니다:</p><table tabindex="0"><thead><tr><th>이름</th><th>데이터 타입</th><th>필수 여부</th><th>기본값</th><th>설명</th></tr></thead><tbody><tr><td><code>strategyName</code></td><td>String</td><td>Yes</td><td></td><td>에이전트가 따라야 할 전략의 이름입니다.</td></tr><tr><td><code>eventId</code></td><td>String</td><td>No</td><td><code>AIAgentStartedEvent</code></td><td>이벤트 식별자. 일반적으로 이벤트 클래스의 <code>simpleName</code>입니다.</td></tr></tbody></table><h4 id="aiagentfinishedevent" tabindex="-1">AIAgentFinishedEvent <a class="header-anchor" href="#aiagentfinishedevent" aria-label="Permalink to &quot;AIAgentFinishedEvent&quot;">​</a></h4><p>에이전트 실행의 종료를 나타냅니다. 다음 필드를 포함합니다:</p><table tabindex="0"><thead><tr><th>이름</th><th>데이터 타입</th><th>필수 여부</th><th>기본값</th><th>설명</th></tr></thead><tbody><tr><td><code>strategyName</code></td><td>String</td><td>Yes</td><td></td><td>에이전트가 따른 전략의 이름입니다.</td></tr><tr><td><code>result</code></td><td>String</td><td>Yes</td><td></td><td>에이전트 실행 결과. 결과가 없으면 <code>null</code>일 수 있습니다.</td></tr><tr><td><code>eventId</code></td><td>String</td><td>No</td><td><code>AIAgentFinishedEvent</code></td><td>이벤트 식별자. 일반적으로 이벤트 클래스의 <code>simpleName</code>입니다.</td></tr></tbody></table><h4 id="aiagentrunerrorevent" tabindex="-1">AIAgentRunErrorEvent <a class="header-anchor" href="#aiagentrunerrorevent" aria-label="Permalink to &quot;AIAgentRunErrorEvent&quot;">​</a></h4><p>에이전트 실행 중 오류 발생을 나타냅니다. 다음 필드를 포함합니다:</p><table tabindex="0"><thead><tr><th>이름</th><th>데이터 타입</th><th>필수 여부</th><th>기본값</th><th>설명</th></tr></thead><tbody><tr><td><code>strategyName</code></td><td>String</td><td>Yes</td><td></td><td>에이전트가 따른 전략의 이름입니다.</td></tr><tr><td><code>error</code></td><td>AIAgentError</td><td>Yes</td><td></td><td>에이전트 실행 중 발생한 특정 오류. 자세한 내용은 <a href="#aiagenterror">AIAgentError</a>를 참조하십시오.</td></tr><tr><td><code>eventId</code></td><td>String</td><td>No</td><td><code>AIAgentRunErrorEvent</code></td><td>이벤트 식별자. 일반적으로 이벤트 클래스의 <code>simpleName</code>입니다.</td></tr></tbody></table><p><a id="aiagenterror"></a><code>AIAgentError</code> 클래스는 에이전트 실행 중 발생한 오류에 대한 자세한 정보를 제공합니다. 다음 필드를 포함합니다:</p><table tabindex="0"><thead><tr><th>이름</th><th>데이터 타입</th><th>필수 여부</th><th>기본값</th><th>설명</th></tr></thead><tbody><tr><td><code>message</code></td><td>String</td><td>Yes</td><td></td><td>특정 오류에 대한 자세한 정보를 제공하는 메시지입니다.</td></tr><tr><td><code>stackTrace</code></td><td>String</td><td>Yes</td><td></td><td>마지막으로 실행된 코드까지의 스택 기록 모음입니다.</td></tr><tr><td><code>cause</code></td><td>String</td><td>No</td><td>null</td><td>오류의 원인(있는 경우).</td></tr></tbody></table><h3 id="전략-이벤트" tabindex="-1">전략 이벤트 <a class="header-anchor" href="#전략-이벤트" aria-label="Permalink to &quot;전략 이벤트&quot;">​</a></h3><h4 id="aiagentstrategystartevent" tabindex="-1">AIAgentStrategyStartEvent <a class="header-anchor" href="#aiagentstrategystartevent" aria-label="Permalink to &quot;AIAgentStrategyStartEvent&quot;">​</a></h4><p>전략 실행의 시작을 나타냅니다. 다음 필드를 포함합니다:</p><table tabindex="0"><thead><tr><th>이름</th><th>데이터 타입</th><th>필수 여부</th><th>기본값</th><th>설명</th></tr></thead><tbody><tr><td><code>strategyName</code></td><td>String</td><td>Yes</td><td></td><td>전략의 이름입니다.</td></tr><tr><td><code>eventId</code></td><td>String</td><td>No</td><td><code>AIAgentStrategyStartEvent</code></td><td>이벤트 식별자. 일반적으로 이벤트 클래스의 <code>simpleName</code>입니다.</td></tr></tbody></table><h4 id="aiagentstrategyfinishedevent" tabindex="-1">AIAgentStrategyFinishedEvent <a class="header-anchor" href="#aiagentstrategyfinishedevent" aria-label="Permalink to &quot;AIAgentStrategyFinishedEvent&quot;">​</a></h4><p>전략 실행의 종료를 나타냅니다. 다음 필드를 포함합니다:</p><table tabindex="0"><thead><tr><th>이름</th><th>데이터 타입</th><th>필수 여부</th><th>기본값</th><th>설명</th></tr></thead><tbody><tr><td><code>strategyName</code></td><td>String</td><td>Yes</td><td></td><td>전략의 이름입니다.</td></tr><tr><td><code>result</code></td><td>String</td><td>Yes</td><td></td><td>실행 결과.</td></tr><tr><td><code>eventId</code></td><td>String</td><td>No</td><td><code>AIAgentStrategyFinishedEvent</code></td><td>이벤트 식별자. 일반적으로 이벤트 클래스의 <code>simpleName</code>입니다.</td></tr></tbody></table><h3 id="노드-이벤트" tabindex="-1">노드 이벤트 <a class="header-anchor" href="#노드-이벤트" aria-label="Permalink to &quot;노드 이벤트&quot;">​</a></h3><h4 id="aiagentnodeexecutionstartevent" tabindex="-1">AIAgentNodeExecutionStartEvent <a class="header-anchor" href="#aiagentnodeexecutionstartevent" aria-label="Permalink to &quot;AIAgentNodeExecutionStartEvent&quot;">​</a></h4><p>노드 실행의 시작을 나타냅니다. 다음 필드를 포함합니다:</p><table tabindex="0"><thead><tr><th>이름</th><th>데이터 타입</th><th>필수 여부</th><th>기본값</th><th>설명</th></tr></thead><tbody><tr><td><code>nodeName</code></td><td>String</td><td>Yes</td><td></td><td>실행이 시작된 노드의 이름입니다.</td></tr><tr><td><code>input</code></td><td>String</td><td>Yes</td><td></td><td>노드에 대한 입력 값입니다.</td></tr><tr><td><code>eventId</code></td><td>String</td><td>No</td><td><code>AIAgentNodeExecutionStartEvent</code></td><td>이벤트 식별자. 일반적으로 이벤트 클래스의 <code>simpleName</code>입니다.</td></tr></tbody></table><h4 id="aiagentnodeexecutionendevent" tabindex="-1">AIAgentNodeExecutionEndEvent <a class="header-anchor" href="#aiagentnodeexecutionendevent" aria-label="Permalink to &quot;AIAgentNodeExecutionEndEvent&quot;">​</a></h4><p>노드 실행의 종료를 나타냅니다. 다음 필드를 포함합니다:</p><table tabindex="0"><thead><tr><th>이름</th><th>데이터 타입</th><th>필수 여부</th><th>기본값</th><th>설명</th></tr></thead><tbody><tr><td><code>nodeName</code></td><td>String</td><td>Yes</td><td></td><td>실행이 종료된 노드의 이름입니다.</td></tr><tr><td><code>input</code></td><td>String</td><td>Yes</td><td></td><td>노드에 대한 입력 값입니다.</td></tr><tr><td><code>output</code></td><td>String</td><td>Yes</td><td></td><td>노드에 의해 생성된 출력 값입니다.</td></tr><tr><td><code>eventId</code></td><td>String</td><td>No</td><td><code>AIAgentNodeExecutionEndEvent</code></td><td>이벤트 식별자. 일반적으로 이벤트 클래스의 <code>simpleName</code>입니다.</td></tr></tbody></table><h3 id="llm-호출-이벤트" tabindex="-1">LLM 호출 이벤트 <a class="header-anchor" href="#llm-호출-이벤트" aria-label="Permalink to &quot;LLM 호출 이벤트&quot;">​</a></h3><h4 id="llmcallstartevent" tabindex="-1">LLMCallStartEvent <a class="header-anchor" href="#llmcallstartevent" aria-label="Permalink to &quot;LLMCallStartEvent&quot;">​</a></h4><p>LLM 호출의 시작을 나타냅니다. 다음 필드를 포함합니다:</p><table tabindex="0"><thead><tr><th>이름</th><th>데이터 타입</th><th>필수 여부</th><th>기본값</th><th>설명</th></tr></thead><tbody><tr><td><code>prompt</code></td><td>Prompt</td><td>Yes</td><td></td><td>모델로 전송되는 프롬프트. 자세한 내용은 <a href="#prompt">Prompt</a>를 참조하십시오.</td></tr><tr><td><code>tools</code></td><td>List&lt;String&gt;</td><td>Yes</td><td></td><td>모델이 호출할 수 있는 도구 목록입니다.</td></tr><tr><td><code>eventId</code></td><td>String</td><td>No</td><td><code>LLMCallStartEvent</code></td><td>이벤트 식별자. 일반적으로 이벤트 클래스의 <code>simpleName</code>입니다.</td></tr></tbody></table><p><a id="prompt"></a><code>Prompt</code> 클래스는 메시지 목록, 고유 식별자 및 언어 모델 설정에 대한 선택적 매개변수로 구성된 프롬프트의 데이터 구조를 나타냅니다. 다음 필드를 포함합니다:</p><table tabindex="0"><thead><tr><th>이름</th><th>데이터 타입</th><th>필수 여부</th><th>기본값</th><th>설명</th></tr></thead><tbody><tr><td><code>messages</code></td><td>List&lt;Message&gt;</td><td>Yes</td><td></td><td>프롬프트가 구성되는 메시지 목록입니다.</td></tr><tr><td><code>id</code></td><td>String</td><td>Yes</td><td></td><td>프롬프트의 고유 식별자입니다.</td></tr><tr><td><code>params</code></td><td>LLMParams</td><td>No</td><td>LLMParams()</td><td>LLM이 콘텐츠를 생성하는 방식을 제어하는 설정입니다.</td></tr></tbody></table><h4 id="llmcallendevent" tabindex="-1">LLMCallEndEvent <a class="header-anchor" href="#llmcallendevent" aria-label="Permalink to &quot;LLMCallEndEvent&quot;">​</a></h4><p>LLM 호출의 종료를 나타냅니다. 다음 필드를 포함합니다:</p><table tabindex="0"><thead><tr><th>이름</th><th>데이터 타입</th><th>필수 여부</th><th>기본값</th><th>설명</th></tr></thead><tbody><tr><td><code>responses</code></td><td>List&lt;Message.Response&gt;</td><td>Yes</td><td></td><td>모델이 반환한 하나 이상의 응답입니다.</td></tr><tr><td><code>eventId</code></td><td>String</td><td>No</td><td><code>LLMCallEndEvent</code></td><td>이벤트 식별자. 일반적으로 이벤트 클래스의 <code>simpleName</code>입니다.</td></tr></tbody></table><h3 id="도구-호출-이벤트" tabindex="-1">도구 호출 이벤트 <a class="header-anchor" href="#도구-호출-이벤트" aria-label="Permalink to &quot;도구 호출 이벤트&quot;">​</a></h3><h4 id="toolcallevent" tabindex="-1">ToolCallEvent <a class="header-anchor" href="#toolcallevent" aria-label="Permalink to &quot;ToolCallEvent&quot;">​</a></h4><p>모델이 도구를 호출하는 이벤트를 나타냅니다. 다음 필드를 포함합니다:</p><table tabindex="0"><thead><tr><th>이름</th><th>데이터 타입</th><th>필수 여부</th><th>기본값</th><th>설명</th></tr></thead><tbody><tr><td><code>toolName</code></td><td>String</td><td>Yes</td><td></td><td>도구의 이름입니다.</td></tr><tr><td><code>toolArgs</code></td><td>Tool.Args</td><td>Yes</td><td></td><td>도구에 제공되는 인수입니다.</td></tr><tr><td><code>eventId</code></td><td>String</td><td>No</td><td><code>ToolCallEvent</code></td><td>이벤트 식별자. 일반적으로 이벤트 클래스의 <code>simpleName</code>입니다.</td></tr></tbody></table><h4 id="toolvalidationerrorevent" tabindex="-1">ToolValidationErrorEvent <a class="header-anchor" href="#toolvalidationerrorevent" aria-label="Permalink to &quot;ToolValidationErrorEvent&quot;">​</a></h4><p>도구 호출 중 유효성 검사 오류 발생을 나타냅니다. 다음 필드를 포함합니다:</p><table tabindex="0"><thead><tr><th>이름</th><th>데이터 타입</th><th>필수 여부</th><th>기본값</th><th>설명</th></tr></thead><tbody><tr><td><code>toolName</code></td><td>String</td><td>Yes</td><td></td><td>유효성 검사에 실패한 도구의 이름입니다.</td></tr><tr><td><code>toolArgs</code></td><td>Tool.Args</td><td>Yes</td><td></td><td>도구에 제공되는 인수입니다.</td></tr><tr><td><code>errorMessage</code></td><td>String</td><td>Yes</td><td></td><td>유효성 검사 오류 메시지입니다.</td></tr><tr><td><code>eventId</code></td><td>String</td><td>No</td><td><code>ToolValidationErrorEvent</code></td><td>이벤트 식별자. 일반적으로 이벤트 클래스의 <code>simpleName</code>입니다.</td></tr></tbody></table><h4 id="toolcallfailureevent" tabindex="-1">ToolCallFailureEvent <a class="header-anchor" href="#toolcallfailureevent" aria-label="Permalink to &quot;ToolCallFailureEvent&quot;">​</a></h4><p>도구 호출 실패를 나타냅니다. 다음 필드를 포함합니다:</p><table tabindex="0"><thead><tr><th>이름</th><th>데이터 타입</th><th>필수 여부</th><th>기본값</th><th>설명</th></tr></thead><tbody><tr><td><code>toolName</code></td><td>String</td><td>Yes</td><td></td><td>도구의 이름입니다.</td></tr><tr><td><code>toolArgs</code></td><td>Tool.Args</td><td>Yes</td><td></td><td>도구에 제공되는 인수입니다.</td></tr><tr><td><code>error</code></td><td>AIAgentError</td><td>Yes</td><td></td><td>도구를 호출하려 할 때 발생한 특정 오류. 자세한 내용은 <a href="#aiagenterror">AIAgentError</a>를 참조하십시오.</td></tr><tr><td><code>eventId</code></td><td>String</td><td>No</td><td><code>ToolCallFailureEvent</code></td><td>이벤트 식별자. 일반적으로 이벤트 클래스의 <code>simpleName</code>입니다.</td></tr></tbody></table><h4 id="toolcallresultevent" tabindex="-1">ToolCallResultEvent <a class="header-anchor" href="#toolcallresultevent" aria-label="Permalink to &quot;ToolCallResultEvent&quot;">​</a></h4><p>결과 반환과 함께 성공적인 도구 호출을 나타냅니다. 다음 필드를 포함합니다:</p><table tabindex="0"><thead><tr><th>이름</th><th>데이터 타입</th><th>필수 여부</th><th>기본값</th><th>설명</th></tr></thead><tbody><tr><td><code>toolName</code></td><td>String</td><td>Yes</td><td></td><td>도구의 이름입니다.</td></tr><tr><td><code>toolArgs</code></td><td>Tool.Args</td><td>Yes</td><td></td><td>도구에 제공되는 인수입니다.</td></tr><tr><td><code>result</code></td><td>ToolResult</td><td>Yes</td><td></td><td>도구 호출 결과.</td></tr><tr><td><code>eventId</code></td><td>String</td><td>No</td><td><code>ToolCallResultEvent</code></td><td>이벤트 식별자. 일반적으로 이벤트 클래스의 <code>simpleName</code>입니다.</td></tr></tbody></table>`,106)]))}const g=a(e,[["render",l]]);export{o as __pageData,g as default};
