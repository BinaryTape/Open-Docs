import{_ as e,c as s,o as t,ag as i}from"./chunks/framework.Bksy39di.js";const d=JSON.parse('{"title":"疑難排解","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/wasm-troubleshooting.md","filePath":"zh-Hant/kotlin/wasm-troubleshooting.md","lastUpdated":1754307826000}'),o={name:"zh-Hant/kotlin/wasm-troubleshooting.md"};function l(r,a,n,p,c,h){return t(),s("div",null,a[0]||(a[0]=[i(`<h1 id="疑難排解" tabindex="-1">疑難排解 <a class="header-anchor" href="#疑難排解" aria-label="Permalink to &quot;疑難排解&quot;">​</a></h1><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Kotlin/Wasm 處於 <a href="/zh-Hant/kotlin/components-stability">Alpha</a> 階段。它可能隨時變更。請在非生產環境場景下使用。 我們很樂意收到您在 <a href="https://youtrack.jetbrains.com/issue/KT-56492" target="_blank" rel="noreferrer">YouTrack</a> 中的回饋。</p></div><p>Kotlin/Wasm 依賴於新的 <a href="https://webassembly.org/roadmap/" target="_blank" rel="noreferrer">WebAssembly 提案</a>，例如 <a href="#garbage-collection-proposal">垃圾回收</a> 和 <a href="#exception-handling-proposal">例外處理</a>，以引入 WebAssembly 中的改進和新功能。</p><p>然而，為了確保這些功能正常運作，您需要一個支援這些新提案的環境。在某些情況下，您可能需要設定環境以使其與提案相容。</p><h2 id="瀏覽器版本" tabindex="-1">瀏覽器版本 <a class="header-anchor" href="#瀏覽器版本" aria-label="Permalink to &quot;瀏覽器版本&quot;">​</a></h2><p>要在瀏覽器中執行使用 Kotlin/Wasm 建置的應用程式，您需要一個支援新的 <a href="https://github.com/WebAssembly/gc" target="_blank" rel="noreferrer">WebAssembly 垃圾回收 (WasmGC) 功能</a> 的瀏覽器版本。請檢查您的瀏覽器版本是否預設支援新的 WasmGC，或者您是否需要對環境進行更改。</p><h3 id="chrome" tabindex="-1">Chrome <a class="header-anchor" href="#chrome" aria-label="Permalink to &quot;Chrome&quot;">​</a></h3><ul><li><p><strong>對於版本 119 或更高版本：</strong></p><p>預設情況下即可運作。</p></li><li><p><strong>對於舊版本：</strong></p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>若要在較舊的瀏覽器中執行應用程式，您需要使用 1.9.20 之前的 Kotlin 版本。</p></div><ol><li>在瀏覽器中，前往 <code>chrome://flags/#enable-webassembly-garbage-collection</code>。</li><li>啟用 <strong>WebAssembly 垃圾回收</strong>。</li><li>重新啟動瀏覽器。</li></ol></li></ul><h3 id="基於-chromium-的瀏覽器" tabindex="-1">基於 Chromium 的瀏覽器 <a class="header-anchor" href="#基於-chromium-的瀏覽器" aria-label="Permalink to &quot;基於 Chromium 的瀏覽器&quot;">​</a></h3><p>包括基於 Chromium 的瀏覽器，例如 Edge、Brave、Opera 或 Samsung Internet。</p><ul><li><p><strong>對於版本 119 或更高版本：</strong></p><p>預設情況下即可運作。</p></li><li><p><strong>對於舊版本：</strong></p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>若要在較舊的瀏覽器中執行應用程式，您需要使用 1.9.20 之前的 Kotlin 版本。</p></div><p>使用 <code>--js-flags=--experimental-wasm-gc</code> 命令列引數執行應用程式。</p></li></ul><h3 id="firefox" tabindex="-1">Firefox <a class="header-anchor" href="#firefox" aria-label="Permalink to &quot;Firefox&quot;">​</a></h3><ul><li><p><strong>對於版本 120 或更高版本：</strong></p><p>預設情況下即可運作。</p></li><li><p><strong>對於版本 119：</strong></p><ol><li>在瀏覽器中，前往 <code>about:config</code>。</li><li>啟用 <code>javascript.options.wasm_gc</code> 選項。</li><li>重新整理頁面。</li></ol></li></ul><h3 id="safari-webkit" tabindex="-1">Safari/WebKit <a class="header-anchor" href="#safari-webkit" aria-label="Permalink to &quot;Safari/WebKit&quot;">​</a></h3><ul><li><p><strong>對於版本 18.2 或更高版本：</strong></p><p>預設情況下即可運作。</p></li><li><p><strong>對於舊版本：</strong></p><p>不支援。</p></li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Safari 18.2 適用於 iOS 18.2、iPadOS 18.2、visionOS 2.2、macOS 15.2、macOS Sonoma 和 macOS Ventura。 在 iOS 和 iPadOS 上，Safari 18.2 隨作業系統綑綁。若要取得它，請將您的裝置更新至版本 18.2 或更高版本。 更多資訊請參閱 <a href="https://developer.apple.com/documentation/safari-release-notes/safari-18_2-release-notes#Overview" target="_blank" rel="noreferrer">Safari 發行說明</a>。</p></div><h2 id="wasm-提案支援" tabindex="-1">Wasm 提案支援 <a class="header-anchor" href="#wasm-提案支援" aria-label="Permalink to &quot;Wasm 提案支援&quot;">​</a></h2><p>Kotlin/Wasm 的改進基於 <a href="https://webassembly.org/roadmap/" target="_blank" rel="noreferrer">WebAssembly 提案</a>。您可以在此處找到有關 WebAssembly 垃圾回收和 (傳統) 例外處理提案支援的詳細資訊。</p><h3 id="垃圾回收提案" tabindex="-1">垃圾回收提案 <a class="header-anchor" href="#垃圾回收提案" aria-label="Permalink to &quot;垃圾回收提案&quot;">​</a></h3><p>自 Kotlin 1.9.20 起，Kotlin 工具鏈使用最新版本的 <a href="https://github.com/WebAssembly/gc" target="_blank" rel="noreferrer">Wasm 垃圾回收</a> (WasmGC) 提案。</p><p>因此，我們強烈建議您將 Wasm 專案更新到最新版本的 Kotlin。我們也建議您使用搭配 Wasm 環境的最新版本瀏覽器。</p><h3 id="例外處理提案" tabindex="-1">例外處理提案 <a class="header-anchor" href="#例外處理提案" aria-label="Permalink to &quot;例外處理提案&quot;">​</a></h3><p>Kotlin 工具鏈預設使用 <a href="https://github.com/WebAssembly/exception-handling/blob/master/proposals/exception-handling/legacy/Exceptions.md" target="_blank" rel="noreferrer">傳統例外處理提案</a>，這允許在更廣泛的環境中執行生成的 Wasm 二進位檔。</p><p>自 Kotlin 2.0.0 起，我們在 Kotlin/Wasm 中引入了對新版本 Wasm <a href="https://github.com/WebAssembly/exception-handling/blob/main/proposals/exception-handling/Exceptions.md" target="_blank" rel="noreferrer">例外處理提案</a> 的支援。</p><p>此更新確保新的例外處理提案與 Kotlin 要求保持一致，使得能夠在僅支援該提案最新版本的虛擬機器上使用 Kotlin/Wasm。</p><p>新的例外處理提案使用 <code>-Xwasm-use-new-exception-proposal</code> 編譯器選項啟用。它預設為關閉狀態。</p><p> </p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>透過我們的 <a href="https://github.com/Kotlin/kotlin-wasm-examples#readme" target="_blank" rel="noreferrer">Kotlin/Wasm 範例</a> 了解更多關於專案設定、使用依賴項和其他任務的資訊。</p></div><h2 id="使用預設導入" tabindex="-1">使用預設導入 <a class="header-anchor" href="#使用預設導入" aria-label="Permalink to &quot;使用預設導入&quot;">​</a></h2><p><a href="/zh-Hant/kotlin/wasm-js-interop">將 Kotlin/Wasm 程式碼導入 JavaScript</a> 已轉向具名匯出，不再使用預設匯出。</p><p>如果您仍然想使用預設導入，請生成一個新的 JavaScript 包裝模組。建立一個 <code>.mjs</code> 檔案，其中包含以下程式碼片段：</p><div class="language-Javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 指定主 .mjs 檔案的路徑</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> moduleExports </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;./wasm-test.mjs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { moduleExports </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span></code></pre></div><p>您可以將新的 <code>.mjs</code> 檔案放置在資源資料夾中，它將在建置過程中自動放置在主 <code>.mjs</code> 檔案旁。</p><p>您也可以將 <code>.mjs</code> 檔案放置在自訂位置。在這種情況下，您需要手動將其移動到主 <code>.mjs</code> 檔案旁，或調整導入陳述式中的路徑以匹配其位置。</p><h2 id="kotlin-wasm-編譯速度緩慢" tabindex="-1">Kotlin/Wasm 編譯速度緩慢 <a class="header-anchor" href="#kotlin-wasm-編譯速度緩慢" aria-label="Permalink to &quot;Kotlin/Wasm 編譯速度緩慢&quot;">​</a></h2><p>在處理 Kotlin/Wasm 專案時，您可能會遇到編譯時間緩慢的問題。這是因為 Kotlin/Wasm 工具鏈會在您每次進行更改時重新編譯整個程式碼庫。</p><p>為了緩解這個問題，Kotlin/Wasm 目標支援增量編譯，這使編譯器能夠僅重新編譯與上次編譯以來的更改相關的檔案。</p><p>使用增量編譯縮短了編譯時間。它目前將開發速度提高了一倍，並計劃在未來版本中進一步改進。</p><p>在目前設定中，Wasm 目標的增量編譯預設是停用的。 若要啟用它，請將以下行新增到您的專案的 <code>local.properties</code> 或 <code>gradle.properties</code> 檔案中：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>kotlin.incremental.wasm=true</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>試用 Kotlin/Wasm 增量編譯並 <a href="https://youtrack.jetbrains.com/issue/KT-72158/Kotlin-Wasm-incremental-compilation-feedback" target="_blank" rel="noreferrer">分享您的回饋</a>。您的見解有助於使該功能更穩定並更快地預設啟用。</p></div>`,41)]))}const b=e(o,[["render",l]]);export{d as __pageData,b as default};
