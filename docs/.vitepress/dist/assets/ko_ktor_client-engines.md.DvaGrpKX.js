import{_ as d,C as h,c as g,o as c,j as i,G as t,ag as p,a,w as n}from"./chunks/framework.Bksy39di.js";const f=JSON.parse('{"title":"클라이언트 엔진","description":"","frontmatter":{},"headers":[],"relativePath":"ko/ktor/client-engines.md","filePath":"ko/ktor/client-engines.md","lastUpdated":1755457140000}'),E={name:"ko/ktor/client-engines.md"};function y(F,s,u,C,v,m){const r=h("show-structure"),o=h("link-summary"),e=h("code-block"),l=h("TabItem"),k=h("Tabs");return c(),g("div",null,[s[28]||(s[28]=i("h1",{id:"클라이언트-엔진",tabindex:"-1"},[a("클라이언트 엔진 "),i("a",{class:"header-anchor",href:"#클라이언트-엔진","aria-label":'Permalink to "클라이언트 엔진"'},"​")],-1)),t(r,{for:"chapter",depth:"2"}),t(o,null,{default:n(()=>s[0]||(s[0]=[a(" 네트워크 요청을 처리하는 엔진에 대해 알아봅니다. ")])),_:1}),s[29]||(s[29]=p(`<p><a href="./client-create-and-configure">Ktor HTTP 클라이언트</a>는 JVM, <a href="https://kotlinlang.org/docs/android-overview.html" target="_blank" rel="noreferrer">Android</a>, <a href="https://kotlinlang.org/docs/js-overview.html" target="_blank" rel="noreferrer">JavaScript</a>, <a href="https://kotlinlang.org/docs/native-overview.html" target="_blank" rel="noreferrer">Native</a>를 포함한 다양한 플랫폼에서 사용할 수 있습니다. 특정 플랫폼에서는 네트워크 요청을 처리하는 특정 엔진이 필요할 수 있습니다. 예를 들어, JVM 애플리케이션에는 <code>Apache</code> 또는 <code>Jetty</code>를, Android에는 <code>OkHttp</code> 또는 <code>Android</code>를, Kotlin/Native를 대상으로 하는 데스크톱 애플리케이션에는 <code>Curl</code> 등을 사용할 수 있습니다. 엔진마다 특정 기능이 다를 수 있으며 다른 구성 옵션을 제공할 수 있습니다.</p><h2 id="requirements" tabindex="-1">요구 사항 및 제한 사항 <a class="header-anchor" href="#requirements" aria-label="Permalink to &quot;요구 사항 및 제한 사항 {id=&quot;requirements&quot;}&quot;">​</a></h2><h3 id="platforms" tabindex="-1">지원되는 플랫폼 <a class="header-anchor" href="#platforms" aria-label="Permalink to &quot;지원되는 플랫폼 {id=&quot;platforms&quot;}&quot;">​</a></h3><p>아래 표는 각 엔진이 <a href="./client-supported-platforms">지원하는 플랫폼</a>을 나열합니다:</p><table tabindex="0"><thead><tr><th>엔진</th><th>플랫폼</th></tr></thead><tbody><tr><td>Apache</td><td><a href="#jvm">JVM</a></td></tr><tr><td>Java</td><td><a href="#jvm">JVM</a></td></tr><tr><td>Jetty</td><td><a href="#jvm">JVM</a></td></tr><tr><td>Android</td><td><a href="#jvm">JVM</a>, <a href="#jvm-android">Android</a></td></tr><tr><td>OkHttp</td><td><a href="#jvm">JVM</a>, <a href="#jvm-android">Android</a></td></tr><tr><td>Darwin</td><td><a href="#native">Native</a></td></tr><tr><td>WinHttp</td><td><a href="#native">Native</a></td></tr><tr><td>Curl</td><td><a href="#native">Native</a></td></tr><tr><td>CIO</td><td><a href="#jvm">JVM</a>, <a href="#jvm-android">Android</a>, <a href="#native">Native</a></td></tr><tr><td>Js</td><td><a href="#js">JavaScript</a></td></tr></tbody></table><h3 id="minimal-version" tabindex="-1">지원되는 Android/Java 버전 <a class="header-anchor" href="#minimal-version" aria-label="Permalink to &quot;지원되는 Android/Java 버전 {id=&quot;minimal-version&quot;}&quot;">​</a></h3><p>JVM 또는 JVM과 Android를 모두 대상으로 하는 클라이언트 엔진은 다음 Android/Java 버전을 지원합니다:</p><table tabindex="0"><thead><tr><th>엔진</th><th>Android 버전</th><th>Java 버전</th></tr></thead><tbody><tr><td>Apache</td><td></td><td>8+</td></tr><tr><td>Java</td><td></td><td>11+</td></tr><tr><td>Jetty</td><td></td><td>11+</td></tr><tr><td>CIO</td><td>7.0+ <sup>*</sup></td><td>8+</td></tr><tr><td>Android</td><td>1.x+</td><td>8+</td></tr><tr><td>OkHttp</td><td>5.0+</td><td>8+</td></tr></tbody></table><p><em>* 구형 Android 버전에서 CIO 엔진을 사용하려면 <a href="https://developer.android.com/studio/write/java8-support" target="_blank" rel="noreferrer">Java 8 API desugaring</a>을 활성화해야 합니다.</em></p><h3 id="limitations" tabindex="-1">제한 사항 <a class="header-anchor" href="#limitations" aria-label="Permalink to &quot;제한 사항 {id=&quot;limitations&quot;}&quot;">​</a></h3><p>아래 표는 특정 엔진이 HTTP/2 및 <a href="./client-websockets">WebSockets</a>를 지원하는지 여부를 보여줍니다:</p><table tabindex="0"><thead><tr><th>엔진</th><th>HTTP/2</th><th>WebSockets</th></tr></thead><tbody><tr><td>Apache</td><td>✅️ <em>(Apache5용)</em></td><td>✖️</td></tr><tr><td>Java</td><td>✅</td><td>✅️</td></tr><tr><td>Jetty</td><td>✅</td><td>✖️</td></tr><tr><td>CIO</td><td>✖️</td><td>✅</td></tr><tr><td>Android</td><td>✖️</td><td>✖️</td></tr><tr><td>OkHttp</td><td>✅</td><td>✅</td></tr><tr><td>Js</td><td>✅</td><td>✅</td></tr><tr><td>Darwin</td><td>✅</td><td>✅</td></tr><tr><td>WinHttp</td><td>✅</td><td>✅</td></tr><tr><td>Curl</td><td>✅</td><td>✅</td></tr></tbody></table><p>또한 일반 클라이언트 구성 및 특정 플러그인 사용에 영향을 미치는 다음 제한 사항을 고려해야 합니다.</p><ul><li>엔진이 HTTP/2를 지원하는 경우, 엔진 구성을 사용자 지정하여 활성화할 수 있습니다(<a href="#java">Java</a> 엔진 예시 참조).</li><li>Ktor 클라이언트에서 <a href="./client-ssl">SSL</a>을 구성하려면 선택한 엔진의 구성을 사용자 지정해야 합니다.</li><li>일부 엔진은 <a href="./client-proxy#supported_engines">프록시</a>를 지원하지 않습니다.</li><li><a href="./client-logging">로깅</a> 플러그인은 다른 플랫폼에 대해 다른 로거 유형을 제공합니다.</li><li><a href="./client-timeout#limitations">HttpTimeout</a> 플러그인은 특정 엔진에 대해 일부 제한 사항이 있습니다.</li></ul><h2 id="dependencies" tabindex="-1">엔진 종속성 추가 <a class="header-anchor" href="#dependencies" aria-label="Permalink to &quot;엔진 종속성 추가 {id=&quot;dependencies&quot;}&quot;">​</a></h2><p><a href="./client-dependencies">ktor-client-core</a> 아티팩트 외에도 Ktor 클라이언트는 각 엔진에 대한 특정 종속성을 추가해야 합니다. 지원되는 각 플랫폼에 대해 해당 섹션에서 사용 가능한 엔진 및 필요한 종속성을 확인할 수 있습니다:</p><ul><li><a href="#jvm">JVM</a></li><li><a href="#jvm-android">JVM 및 Android</a></li><li><a href="#js">JavaScript</a></li><li><a href="#native">네이티브</a></li></ul><blockquote type="note"><p>다양한 엔진을 위해 Ktor는 예를 들어 <code>ktor-client-cio-jvm</code>과 같이 <code>-jvm</code> 또는 <code>-js</code>와 같은 접미사가 붙은 플랫폼별 아티팩트를 제공합니다. Gradle은 주어진 플랫폼에 적합한 아티팩트를 해결하지만, Maven은 이 기능을 지원하지 않습니다. 즉, Maven의 경우 플랫폼별 접미사를 수동으로 추가해야 합니다.</p></blockquote><h2 id="create" tabindex="-1">지정된 엔진으로 클라이언트 생성 <a class="header-anchor" href="#create" aria-label="Permalink to &quot;지정된 엔진으로 클라이언트 생성 {id=&quot;create&quot;}&quot;">​</a></h2><p>특정 엔진으로 HTTP 클라이언트를 생성하려면 <code>HttpClient</code> 생성자의 인수로 엔진 클래스를 전달합니다. 예를 들어, <code>CIO</code> 엔진으로 클라이언트를 다음과 같이 생성할 수 있습니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.engine.cio.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO)</span></span></code></pre></div><h3 id="default" tabindex="-1">기본 엔진 <a class="header-anchor" href="#default" aria-label="Permalink to &quot;기본 엔진 {id=&quot;default&quot;}&quot;">​</a></h3><p><code>HttpClient</code> 생성자를 인자 없이 호출하면, 클라이언트는 <a href="#dependencies">빌드 스크립트에 추가된</a> 아티팩트에 따라 자동으로 엔진을 선택합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>이는 멀티플랫폼 프로젝트에 유용할 수 있습니다. 예를 들어, <a href="./client-create-multiplatform-application">Android 및 iOS</a>를 모두 대상으로 하는 프로젝트의 경우, <code>androidMain</code> 소스 세트에 <a href="#jvm-android">Android</a> 종속성을 추가하고 <code>iosMain</code> 소스 세트에 <a href="#darwin">Darwin</a> 종속성을 추가할 수 있습니다. 필요한 종속성은 컴파일 시점에 선택됩니다.</p><h2 id="configure" tabindex="-1">엔진 구성 <a class="header-anchor" href="#configure" aria-label="Permalink to &quot;엔진 구성 {id=&quot;configure&quot;}&quot;">​</a></h2><p><code>engine</code> 메서드를 사용하여 엔진을 구성할 수 있습니다. 모든 엔진은 <code>HttpClientEngineConfig</code>에 의해 노출되는 몇 가지 공통 속성을 공유합니다. 예를 들면 다음과 같습니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    engine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // this: HttpClientEngineConfig</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        threadsCount </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        pipelining </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>특정 엔진을 구성하는 방법을 알아보려면 아래 해당 섹션을 참조하십시오.</p><h2 id="jvm" tabindex="-1">JVM <a class="header-anchor" href="#jvm" aria-label="Permalink to &quot;JVM {id=&quot;jvm&quot;}&quot;">​</a></h2><p>이 섹션에서는 JVM에서 사용할 수 있는 엔진을 살펴보겠습니다.</p><h3 id="apache" tabindex="-1">Apache <a class="header-anchor" href="#apache" aria-label="Permalink to &quot;Apache {id=&quot;apache&quot;}&quot;">​</a></h3><p><code>Apache</code> 엔진은 HTTP/1.1을 지원하며 다양한 구성 옵션을 제공합니다. HTTP/2 지원이 필요한 경우 <code>Apache5</code> 엔진을 사용할 수도 있으며, 이 엔진은 기본적으로 HTTP/2가 활성화되어 있습니다.</p>`,33)),i("ol",null,[i("li",null,[s[1]||(s[1]=i("p",null,[i("code",null,"ktor-client-apache5"),a(" 또는 "),i("code",null,"ktor-client-apache"),a(" 종속성을 추가합니다:")],-1)),t(k,{group:"languages"},{default:n(()=>[t(l,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[t(e,{lang:"Kotlin",code:'               implementation("io.ktor:ktor-client-apache5:$ktor_version")'})]),_:1}),t(l,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[t(e,{lang:"Groovy",code:'               implementation "io.ktor:ktor-client-apache5:$ktor_version"'})]),_:1}),t(l,{title:"Maven","group-key":"maven"},{default:n(()=>[t(e,{lang:"XML",code:`               <dependency>
                   <groupId>io.ktor</groupId>
                   <artifactId>ktor-client-apache5-jvm</artifactId>
                   <version>\${ktor_version}</version>
               </dependency>`})]),_:1})]),_:1})]),i("li",null,[s[4]||(s[4]=i("p",null,[i("code",null,"HttpClient"),a(" 생성자의 인수로 "),i("code",null,"Apache5"),a("/"),i("code",null,"Apache"),a(" 클래스를 전달합니다:")],-1)),t(k,{group:"apache_version"},{default:n(()=>[t(l,{title:"Apache5","group-key":"5"},{default:n(()=>s[2]||(s[2]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," io.ktor.client."),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"*")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," io.ktor.client.engine.apache5."),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"*")]),a(`
`),i("span",{class:"line"}),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"val"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," client "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," HttpClient"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(Apache5)")])])])],-1)])),_:1}),t(l,{title:"Apache","group-key":"4"},{default:n(()=>s[3]||(s[3]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," io.ktor.client."),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"*")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," io.ktor.client.engine.apache."),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"*")]),a(`
`),i("span",{class:"line"}),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"val"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," client "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," HttpClient"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(Apache)")])])])],-1)])),_:1})]),_:1})]),i("li",null,[s[7]||(s[7]=i("p",null,[a("엔진을 구성하려면 "),i("code",null,"engine"),a(" 메서드에 "),i("code",null,"Apache5EngineConfig"),a("/"),i("code",null,"ApacheEngineConfig"),a("에 의해 노출되는 설정을 전달합니다:")],-1)),t(k,{group:"apache_version"},{default:n(()=>[t(l,{title:"Apache5","group-key":"5"},{default:n(()=>s[5]||(s[5]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," io.ktor.client."),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"*")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," io.ktor.client.engine.apache5."),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"*")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," org.apache.hc.core5.http."),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"*")]),a(`
`),i("span",{class:"line"}),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"val"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," client "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," HttpClient"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(Apache5) {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    engine"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"        // this: Apache5EngineConfig")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        followRedirects "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," true")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        socketTimeout "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," 10_000")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        connectTimeout "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," 10_000")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        connectionRequestTimeout "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," 20_000")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"        customizeClient"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"            // this: HttpAsyncClientBuilder")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"            setProxy"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"HttpHost"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"127.0.0.1"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"8080"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"))")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"            // ...")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"        customizeRequest"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"            // this: RequestConfig.Builder")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),t(l,{title:"Apache","group-key":"4"},{default:n(()=>s[6]||(s[6]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," io.ktor.client."),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"*")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," io.ktor.client.engine.apache."),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"*")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"import"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," org.apache.http.HttpHost")]),a(`
`),i("span",{class:"line"}),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"val"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," client "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," HttpClient"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(Apache) {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    engine"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"        // this: ApacheEngineConfig")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        followRedirects "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," true")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        socketTimeout "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," 10_000")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        connectTimeout "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," 10_000")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        connectionRequestTimeout "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," 20_000")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"        customizeClient"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"            // this: HttpAsyncClientBuilder")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"            setProxy"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"HttpHost"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"127.0.0.1"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},", "),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"8080"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"))")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"            setMaxConnTotal"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"1000"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"            setMaxConnPerRoute"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}},"100"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"            // ...")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"        customizeRequest"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"            // this: RequestConfig.Builder")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1})])]),s[30]||(s[30]=i("h3",{id:"java",tabindex:"-1"},[a("Java "),i("a",{class:"header-anchor",href:"#java","aria-label":'Permalink to "Java {id="java"}"'},"​")],-1)),s[31]||(s[31]=i("p",null,[i("code",null,"Java"),a(" 엔진은 Java 11에 도입된 "),i("a",{href:"https://openjdk.java.net/groups/net/httpclient/intro.html",target:"_blank",rel:"noreferrer"},"Java HTTP 클라이언트"),a("를 사용합니다. 사용하려면 다음 단계를 따르십시오:")],-1)),i("ol",null,[i("li",null,[s[8]||(s[8]=i("p",null,[i("code",null,"ktor-client-java"),a(" 종속성을 추가합니다:")],-1)),t(k,{group:"languages"},{default:n(()=>[t(l,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[t(e,{lang:"Kotlin",code:'               implementation("io.ktor:ktor-client-java:$ktor_version")'})]),_:1}),t(l,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[t(e,{lang:"Groovy",code:'               implementation "io.ktor:ktor-client-java:$ktor_version"'})]),_:1}),t(l,{title:"Maven","group-key":"maven"},{default:n(()=>[t(e,{lang:"XML",code:`               <dependency>
                   <groupId>io.ktor</groupId>
                   <artifactId>ktor-client-java-jvm</artifactId>
                   <version>\${ktor_version}</version>
               </dependency>`})]),_:1})]),_:1})]),s[9]||(s[9]=p(`<li><p><code>HttpClient</code> 생성자의 인수로 <a href="https://api.ktor.io/ktor-client/ktor-client-java/io.ktor.client.engine.java/-java/index.html" target="_blank" rel="noreferrer">Java</a> 클래스를 전달합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.engine.java.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Java)</span></span></code></pre></div></li><li><p>엔진을 구성하려면 <code>engine</code> 메서드에 <a href="https://api.ktor.io/ktor-client/ktor-client-java/io.ktor.client.engine.java/-java-http-config/index.html" target="_blank" rel="noreferrer">JavaHttpConfig</a>에 의해 노출되는 설정을 전달합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.engine.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.engine.java.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Java) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    engine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // this: JavaHttpConfig</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        threadsCount </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        pipelining </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        proxy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ProxyBuilder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">http</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://proxy-server.com/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        protocolVersion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> java.net.http.HttpClient.Version.HTTP_2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li>`,2))]),s[32]||(s[32]=i("h3",{id:"jetty",tabindex:"-1"},[a("Jetty "),i("a",{class:"header-anchor",href:"#jetty","aria-label":'Permalink to "Jetty {id="jetty"}"'},"​")],-1)),s[33]||(s[33]=i("p",null,[i("code",null,"Jetty"),a(" 엔진은 HTTP/2만 지원하며 다음과 같이 구성할 수 있습니다:")],-1)),i("ol",null,[i("li",null,[s[10]||(s[10]=i("p",null,[i("code",null,"ktor-client-jetty-jakarta"),a(" 종속성을 추가합니다:")],-1)),t(k,{group:"languages"},{default:n(()=>[t(l,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[t(e,{lang:"Kotlin",code:'               implementation("io.ktor:ktor-client-jetty-jakarta:$ktor_version")'})]),_:1}),t(l,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[t(e,{lang:"Groovy",code:'               implementation "io.ktor:ktor-client-jetty-jakarta:$ktor_version"'})]),_:1}),t(l,{title:"Maven","group-key":"maven"},{default:n(()=>[t(e,{lang:"XML",code:`               <dependency>
                   <groupId>io.ktor</groupId>
                   <artifactId>ktor-client-jetty-jakarta-jvm</artifactId>
                   <version>\${ktor_version}</version>
               </dependency>`})]),_:1})]),_:1})]),s[11]||(s[11]=p(`<li><p><code>HttpClient</code> 생성자의 인수로 <a href="https://api.ktor.io/ktor-client/ktor-client-jetty-jakarta/io.ktor.client.engine.jetty.jakarta/-jetty/index.html" target="_blank" rel="noreferrer">Jetty</a> 클래스를 전달합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.engine.jetty.jakarta.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Jetty)</span></span></code></pre></div></li><li><p>엔진을 구성하려면 <code>engine</code> 메서드에 <a href="https://api.ktor.io/ktor-client/ktor-client-jetty-jakarta/io.ktor.client.engine.jetty.jakarta/-jetty-engine-config/index.html" target="_blank" rel="noreferrer">JettyEngineConfig</a>에 의해 노출되는 설정을 전달합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.engine.jetty.jakarta.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.eclipse.jetty.util.ssl.SslContextFactory</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Jetty) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    engine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // this: JettyEngineConfig</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        sslContextFactory </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SslContextFactory.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Client</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        clientCacheSize </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 12</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li>`,2))]),s[34]||(s[34]=i("h2",{id:"jvm-android",tabindex:"-1"},[a("JVM 및 Android "),i("a",{class:"header-anchor",href:"#jvm-android","aria-label":'Permalink to "JVM 및 Android {id="jvm-android"}"'},"​")],-1)),s[35]||(s[35]=i("p",null,"이 섹션에서는 JVM/Android에서 사용할 수 있는 엔진과 해당 구성을 살펴보겠습니다.",-1)),s[36]||(s[36]=i("h3",{id:"android",tabindex:"-1"},[a("Android "),i("a",{class:"header-anchor",href:"#android","aria-label":'Permalink to "Android {id="android"}"'},"​")],-1)),s[37]||(s[37]=i("p",null,[i("code",null,"Android"),a(" 엔진은 Android를 대상으로 하며 다음과 같이 구성할 수 있습니다:")],-1)),i("ol",null,[i("li",null,[s[12]||(s[12]=i("p",null,[i("code",null,"ktor-client-android"),a(" 종속성을 추가합니다:")],-1)),t(k,{group:"languages"},{default:n(()=>[t(l,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[t(e,{lang:"Kotlin",code:'               implementation("io.ktor:ktor-client-android:$ktor_version")'})]),_:1}),t(l,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[t(e,{lang:"Groovy",code:'               implementation "io.ktor:ktor-client-android:$ktor_version"'})]),_:1}),t(l,{title:"Maven","group-key":"maven"},{default:n(()=>[t(e,{lang:"XML",code:`               <dependency>
                   <groupId>io.ktor</groupId>
                   <artifactId>ktor-client-android-jvm</artifactId>
                   <version>\${ktor_version}</version>
               </dependency>`})]),_:1})]),_:1})]),s[13]||(s[13]=p(`<li><p><code>HttpClient</code> 생성자의 인수로 <a href="https://api.ktor.io/ktor-client/ktor-client-android/io.ktor.client.engine.android/-android/index.html" target="_blank" rel="noreferrer">Android</a> 클래스를 전달합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.engine.android.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Android)</span></span></code></pre></div></li><li><p>엔진을 구성하려면 <code>engine</code> 메서드에 <a href="https://api.ktor.io/ktor-client/ktor-client-android/io.ktor.client.engine.android/-android-engine-config/index.html" target="_blank" rel="noreferrer">AndroidEngineConfig</a>에 의해 노출되는 설정을 전달합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.engine.android.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> java.net.Proxy</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> java.net.InetSocketAddress</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Android) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    engine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // this: AndroidEngineConfig</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        connectTimeout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100_000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        socketTimeout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100_000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        proxy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Proxy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Proxy.Type.HTTP, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">InetSocketAddress</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;localhost&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8080</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li>`,2))]),s[38]||(s[38]=i("h3",{id:"okhttp",tabindex:"-1"},[a("OkHttp "),i("a",{class:"header-anchor",href:"#okhttp","aria-label":'Permalink to "OkHttp {id="okhttp"}"'},"​")],-1)),s[39]||(s[39]=i("p",null,[i("code",null,"OkHttp"),a(" 엔진은 OkHttp 기반이며 다음과 같이 구성할 수 있습니다:")],-1)),i("ol",null,[i("li",null,[s[14]||(s[14]=i("p",null,[i("code",null,"ktor-client-okhttp"),a(" 종속성을 추가합니다:")],-1)),t(k,{group:"languages"},{default:n(()=>[t(l,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[t(e,{lang:"Kotlin",code:'               implementation("io.ktor:ktor-client-okhttp:$ktor_version")'})]),_:1}),t(l,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[t(e,{lang:"Groovy",code:'               implementation "io.ktor:ktor-client-okhttp:$ktor_version"'})]),_:1}),t(l,{title:"Maven","group-key":"maven"},{default:n(()=>[t(e,{lang:"XML",code:`               <dependency>
                   <groupId>io.ktor</groupId>
                   <artifactId>ktor-client-okhttp-jvm</artifactId>
                   <version>\${ktor_version}</version>
               </dependency>`})]),_:1})]),_:1})]),s[15]||(s[15]=p(`<li><p><code>HttpClient</code> 생성자의 인수로 <a href="https://api.ktor.io/ktor-client/ktor-client-okhttp/io.ktor.client.engine.okhttp/-ok-http/index.html" target="_blank" rel="noreferrer">OkHttp</a> 클래스를 전달합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.engine.okhttp.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(OkHttp)</span></span></code></pre></div></li><li><p>엔진을 구성하려면 <code>engine</code> 메서드에 <a href="https://api.ktor.io/ktor-client/ktor-client-okhttp/io.ktor.client.engine.okhttp/-ok-http-config/index.html" target="_blank" rel="noreferrer">OkHttpConfig</a>에 의해 노출되는 설정을 전달합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.engine.okhttp.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(OkHttp) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    engine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // this: OkHttpConfig</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // this: OkHttpClient.Builder</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            followRedirects</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        addInterceptor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(interceptor)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        addNetworkInterceptor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(interceptor)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        preconfigured </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> okHttpClientInstance</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li>`,2))]),s[40]||(s[40]=p('<h2 id="native" tabindex="-1">네이티브 <a class="header-anchor" href="#native" aria-label="Permalink to &quot;네이티브 {id=&quot;native&quot;}&quot;">​</a></h2><p>이 섹션에서는 <a href="https://kotlinlang.org/docs/native-overview.html" target="_blank" rel="noreferrer">Kotlin/Native</a>를 대상으로 하는 엔진을 구성하는 방법을 살펴보겠습니다.</p><blockquote id="newmm-note"><p>Kotlin/Native 프로젝트에서 Ktor를 사용하려면 <a href="https://kotlinlang.org/docs/native-memory-manager.html" target="_blank" rel="noreferrer">새로운 메모리 관리자</a>가 필요하며, 이는 Kotlin 1.7.20부터 기본적으로 활성화됩니다.</p></blockquote><h3 id="darwin" tabindex="-1">Darwin <a class="header-anchor" href="#darwin" aria-label="Permalink to &quot;Darwin {id=&quot;darwin&quot;}&quot;">​</a></h3><p><code>Darwin</code> 엔진은 macOS, iOS, tvOS 등 <a href="https://en.wikipedia.org/wiki/Darwin_(operating_system)" target="_blank" rel="noreferrer">Darwin 기반</a> 운영 체제를 대상으로 하며 내부적으로 <a href="https://developer.apple.com/documentation/foundation/nsurlsession" target="_blank" rel="noreferrer">NSURLSession</a>을 사용합니다. <code>Darwin</code> 엔진을 사용하려면 다음 단계를 따르십시오:</p>',5)),i("ol",null,[i("li",null,[s[16]||(s[16]=i("p",null,[i("code",null,"ktor-client-darwin"),a(" 종속성을 추가합니다:")],-1)),t(k,{group:"languages"},{default:n(()=>[t(l,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[t(e,{lang:"Kotlin",code:'               implementation("io.ktor:ktor-client-darwin:$ktor_version")'})]),_:1}),t(l,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[t(e,{lang:"Groovy",code:'               implementation "io.ktor:ktor-client-darwin:$ktor_version"'})]),_:1}),t(l,{title:"Maven","group-key":"maven"},{default:n(()=>[t(e,{lang:"XML",code:`               <dependency>
                   <groupId>io.ktor</groupId>
                   <artifactId>ktor-client-darwin-macosx64</artifactId>
                   <version>\${ktor_version}</version>
               </dependency>`})]),_:1})]),_:1})]),s[17]||(s[17]=p(`<li><p><code>HttpClient</code> 생성자의 인수로 <code>Darwin</code> 클래스를 전달합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.engine.darwin.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Darwin)</span></span></code></pre></div></li><li><p>엔진을 구성하려면 <code>engine</code> 함수에 <a href="https://api.ktor.io/ktor-client/ktor-client-darwin/io.ktor.client.engine.darwin/-darwin-client-engine-config/index.html" target="_blank" rel="noreferrer">DarwinClientEngineConfig</a>에 의해 노출되는 설정을 전달합니다. 예를 들어, <code>configureRequest</code> 함수를 사용하여 <code>NSMutableURLRequest</code>에 액세스하거나 <code>configureSession</code>을 사용하여 세션 구성을 사용자 지정할 수 있습니다. 아래 코드 스니펫은 <code>configureRequest</code>를 사용하는 방법을 보여줍니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Darwin) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    engine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        configureRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            setAllowsCellularAccess</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>전체 예제는 다음에서 확인할 수 있습니다: <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/client-engine-darwin" target="_blank" rel="noreferrer">client-engine-darwin</a>.</p></li>`,2))]),s[41]||(s[41]=i("h3",{id:"winhttp",tabindex:"-1"},[a("WinHttp "),i("a",{class:"header-anchor",href:"#winhttp","aria-label":'Permalink to "WinHttp {id="winhttp"}"'},"​")],-1)),s[42]||(s[42]=i("p",null,[i("code",null,"WinHttp"),a(" 엔진은 Windows 기반 운영 체제를 대상으로 합니다. "),i("code",null,"WinHttp"),a(" 엔진을 사용하려면 다음 단계를 따르십시오:")],-1)),i("ol",null,[i("li",null,[s[18]||(s[18]=i("p",null,[i("code",null,"ktor-client-winhttp"),a(" 종속성을 추가합니다:")],-1)),t(k,{group:"languages"},{default:n(()=>[t(l,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[t(e,{lang:"Kotlin",code:'               implementation("io.ktor:ktor-client-winhttp:$ktor_version")'})]),_:1}),t(l,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[t(e,{lang:"Groovy",code:'               implementation "io.ktor:ktor-client-winhttp:$ktor_version"'})]),_:1}),t(l,{title:"Maven","group-key":"maven"},{default:n(()=>[t(e,{lang:"XML",code:`               <dependency>
                   <groupId>io.ktor</groupId>
                   <artifactId>ktor-client-winhttp-mingwx64</artifactId>
                   <version>\${ktor_version}</version>
               </dependency>`})]),_:1})]),_:1})]),s[19]||(s[19]=p(`<li><p><code>HttpClient</code> 생성자의 인수로 <code>WinHttp</code> 클래스를 전달합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.engine.winhttp.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(WinHttp)</span></span></code></pre></div></li><li><p>엔진을 구성하려면 <code>engine</code> 함수에 <a href="https://api.ktor.io/ktor-client/ktor-client-winhttp/io.ktor.client.engine.winhttp/-winhttp-client-engine-config/index.html" target="_blank" rel="noreferrer">WinHttpClientEngineConfig</a>에 의해 노출되는 설정을 전달합니다. 예를 들어, <code>protocolVersion</code> 속성을 사용하여 HTTP 버전을 변경할 수 있습니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(WinHttp) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    engine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        protocolVersion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> HttpProtocolVersion.HTTP_1_1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>전체 예제는 다음에서 확인할 수 있습니다: <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/client-engine-winhttp" target="_blank" rel="noreferrer">client-engine-winhttp</a>.</p></li>`,2))]),s[43]||(s[43]=p('<h3 id="curl" tabindex="-1">Curl <a class="header-anchor" href="#curl" aria-label="Permalink to &quot;Curl {id=&quot;curl&quot;}&quot;">​</a></h3><p>데스크톱 플랫폼을 위해 Ktor는 <code>Curl</code> 엔진도 제공합니다. 이 엔진은 <code>linuxX64</code>, <code>linuxArm64</code>, <code>macosX64</code>, <code>macosArm64</code>, <code>mingwX64</code> 플랫폼에서 지원됩니다. <code>Curl</code> 엔진을 사용하려면 다음 단계를 따르십시오:</p>',2)),i("ol",null,[s[21]||(s[21]=p('<li><p><a href="https://curl.se/libcurl/" target="_blank" rel="noreferrer">libcurl 라이브러리</a>를 설치합니다.</p><blockquote><p>Linux에서는 <code>libcurl</code>의 <code>gnutls</code> 버전을 설치해야 합니다. Ubuntu에 이 버전을 설치하려면 다음을 실행할 수 있습니다:</p></blockquote><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apt-get</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> libcurl4-gnutls-dev</span></span></code></pre></div><blockquote><p>Windows에서는 <a href="./FAQ#native-curl">MinGW/MSYS2</a> <code>curl</code> 바이너리를 고려할 수 있습니다.</p></blockquote></li>',1)),i("li",null,[s[20]||(s[20]=i("p",null,[i("code",null,"ktor-client-curl"),a(" 종속성을 추가합니다:")],-1)),t(k,{group:"languages"},{default:n(()=>[t(l,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[t(e,{lang:"Kotlin",code:'               implementation("io.ktor:ktor-client-curl:$ktor_version")'})]),_:1}),t(l,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[t(e,{lang:"Groovy",code:'               implementation "io.ktor:ktor-client-curl:$ktor_version"'})]),_:1}),t(l,{title:"Maven","group-key":"maven"},{default:n(()=>[t(e,{lang:"XML",code:`               <dependency>
                   <groupId>io.ktor</groupId>
                   <artifactId>ktor-client-curl-macosx64</artifactId>
                   <version>\${ktor_version}</version>
               </dependency>`})]),_:1})]),_:1})]),s[22]||(s[22]=p(`<li><p><code>HttpClient</code> 생성자의 인수로 <code>Curl</code> 클래스를 전달합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.engine.curl.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Curl)</span></span></code></pre></div></li><li><p>엔진을 구성하려면 <code>engine</code> 메서드에 <code>CurlClientEngineConfig</code>에 의해 노출되는 설정을 전달합니다. 아래 코드 스니펫은 테스트 목적으로 SSL 확인을 비활성화하는 방법을 보여줍니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Curl) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    engine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        sslVerify </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>전체 예제는 다음에서 확인할 수 있습니다: <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/client-engine-curl" target="_blank" rel="noreferrer">client-engine-curl</a>.</p></li>`,2))]),s[44]||(s[44]=i("h2",{id:"jvm-android-native",tabindex:"-1"},[a("JVM, Android, 및 네이티브 "),i("a",{class:"header-anchor",href:"#jvm-android-native","aria-label":'Permalink to "JVM, Android, 및 네이티브 {id="jvm-android-native"}"'},"​")],-1)),s[45]||(s[45]=i("h3",{id:"cio",tabindex:"-1"},[a("CIO "),i("a",{class:"header-anchor",href:"#cio","aria-label":'Permalink to "CIO {id="cio"}"'},"​")],-1)),s[46]||(s[46]=i("p",null,"CIO는 완전한 비동기 코루틴 기반 엔진으로, JVM, Android 및 네이티브 플랫폼에서 사용할 수 있습니다. 현재는 HTTP/1.x만 지원합니다. 사용하려면 다음 단계를 따르십시오:",-1)),i("ol",null,[i("li",null,[s[23]||(s[23]=i("p",null,[i("code",null,"ktor-client-cio"),a(" 종속성을 추가합니다:")],-1)),t(k,{group:"languages"},{default:n(()=>[t(l,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[t(e,{lang:"Kotlin",code:'               implementation("io.ktor:ktor-client-cio:$ktor_version")'})]),_:1}),t(l,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[t(e,{lang:"Groovy",code:'               implementation "io.ktor:ktor-client-cio:$ktor_version"'})]),_:1}),t(l,{title:"Maven","group-key":"maven"},{default:n(()=>[t(e,{lang:"XML",code:`               <dependency>
                   <groupId>io.ktor</groupId>
                   <artifactId>ktor-client-cio-jvm</artifactId>
                   <version>\${ktor_version}</version>
               </dependency>`})]),_:1})]),_:1})]),s[24]||(s[24]=p(`<li><p><code>HttpClient</code> 생성자의 인수로 <a href="https://api.ktor.io/ktor-client/ktor-client-cio/io.ktor.client.engine.cio/-c-i-o/index.html" target="_blank" rel="noreferrer">CIO</a> 클래스를 전달합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.engine.cio.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO)</span></span></code></pre></div></li><li><p>엔진을 구성하려면 <code>engine</code> 메서드에 <a href="https://api.ktor.io/ktor-client/ktor-client-cio/io.ktor.client.engine.cio/-c-i-o-engine-config/index.html" target="_blank" rel="noreferrer">CIOEngineConfig</a>에 의해 노출되는 설정을 전달합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.engine.cio.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.network.tls.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    engine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // this: CIOEngineConfig</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        maxConnectionsCount </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        endpoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // this: EndpointConfig</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            maxConnectionsPerRoute </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            pipelineMaxSize </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            keepAliveTime </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            connectTimeout </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            connectAttempts </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        https</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // this: TLSConfigBuilder</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            serverName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;api.ktor.io&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            cipherSuites </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CIOCipherSuites.SupportedSuites</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            trustManager </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myCustomTrustManager</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            random </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mySecureRandom</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            addKeyStore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myKeyStore, myKeyStorePassword)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li>`,2))]),s[47]||(s[47]=i("h2",{id:"js",tabindex:"-1"},[a("JavaScript "),i("a",{class:"header-anchor",href:"#js","aria-label":'Permalink to "JavaScript {id="js"}"'},"​")],-1)),s[48]||(s[48]=i("p",null,[i("code",null,"Js"),a(" 엔진은 "),i("a",{href:"https://kotlinlang.org/docs/js-overview.html",target:"_blank",rel:"noreferrer"},"JavaScript 프로젝트"),a("에 사용할 수 있습니다. 이 엔진은 브라우저 애플리케이션용으로 "),i("a",{href:"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API",target:"_blank",rel:"noreferrer"},"fetch API"),a("를 사용하고 Node.js용으로 "),i("code",null,"node-fetch"),a("를 사용합니다. 사용하려면 다음 단계를 따르십시오:")],-1)),i("ol",null,[i("li",null,[s[25]||(s[25]=i("p",null,[i("code",null,"ktor-client-js"),a(" 종속성을 추가합니다:")],-1)),s[26]||(s[26]=i("var",{name:"target",value:""},null,-1)),t(k,{group:"languages"},{default:n(()=>[t(l,{title:"Gradle (Kotlin)","group-key":"kotlin"},{default:n(()=>[t(e,{lang:"Kotlin",code:'               implementation("io.ktor:ktor-client-js:$ktor_version")'})]),_:1}),t(l,{title:"Gradle (Groovy)","group-key":"groovy"},{default:n(()=>[t(e,{lang:"Groovy",code:'               implementation "io.ktor:ktor-client-js:$ktor_version"'})]),_:1}),t(l,{title:"Maven","group-key":"maven"},{default:n(()=>[t(e,{lang:"XML",code:`               <dependency>
                   <groupId>io.ktor</groupId>
                   <artifactId>ktor-client-js-macosx64</artifactId>
                   <version>\${ktor_version}</version>
               </dependency>`})]),_:1})]),_:1})]),s[27]||(s[27]=p(`<li><p><code>HttpClient</code> 생성자의 인수로 <code>Js</code> 클래스를 전달합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.engine.js.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Js)</span></span></code></pre></div><p><code>Js</code> 엔진 싱글톤을 가져오기 위해 <code>JsClient</code> 함수를 호출할 수도 있습니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.engine.js.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> JsClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div></li>`,1))]),s[49]||(s[49]=p(`<p>전체 예제는 다음에서 확인할 수 있습니다: <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/client-engine-js" target="_blank" rel="noreferrer">client-engine-js</a>.</p><h2 id="mpp-config" tabindex="-1">예시: 멀티플랫폼 모바일 프로젝트에서 엔진을 구성하는 방법 <a class="header-anchor" href="#mpp-config" aria-label="Permalink to &quot;예시: 멀티플랫폼 모바일 프로젝트에서 엔진을 구성하는 방법 {id=&quot;mpp-config&quot;}&quot;">​</a></h2><p>멀티플랫폼 모바일 프로젝트에서 엔진별 옵션을 구성하려면 <a href="https://kotlinlang.org/docs/multiplatform-mobile-connect-to-platform-specific-apis.html" target="_blank" rel="noreferrer">expect/actual 선언</a>을 사용할 수 있습니다. <a href="./client-create-multiplatform-application">크로스 플랫폼 모바일 애플리케이션 생성</a> 튜토리얼에서 생성된 프로젝트를 사용하여 이를 달성하는 방법을 보여드리겠습니다:</p><ol><li><p><code>shared/src/commonMain/kotlin/com/example/kmmktor/Platform.kt</code> 파일을 열고 최상위 <code>httpClient</code> 함수를 추가합니다. 이 함수는 클라이언트 구성을 받아 <code>HttpClient</code>를 반환합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expect </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> httpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(config: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HttpClientConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;*&gt;.() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Unit </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HttpClient</span></span></code></pre></div></li><li><p><code>shared/src/androidMain/kotlin/com/example/kmmktor/Platform.kt</code>를 열고 Android 모듈용 <code>httpClient</code> 함수의 actual 선언을 추가합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.engine.okhttp.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> java.util.concurrent.TimeUnit</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> httpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(config: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HttpClientConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;*&gt;.() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Unit) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(OkHttp) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   engine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         retryOnConnectionFailure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         connectTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, TimeUnit.SECONDS)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>이 예제는 <a href="#okhttp">OkHttp</a> 엔진을 구성하는 방법을 보여주지만, <a href="#jvm-android">Android에서 지원되는</a> 다른 엔진도 사용할 수 있습니다.</p></li><li><p><code>shared/src/iosMain/kotlin/com/example/kmmktor/Platform.kt</code>를 열고 iOS 모듈용 <code>httpClient</code> 함수의 actual 선언을 추가합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.engine.darwin.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">actual </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> httpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(config: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HttpClientConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;*&gt;.() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Unit) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Darwin) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   config</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   engine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      configureRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">         setAllowsCellularAccess</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>마지막으로 <code>shared/src/commonMain/kotlin/com/example/kmmktor/Greeting.kt</code>를 열고 <code>HttpClient()</code> 생성자를 <code>httpClient</code> 함수 호출로 대체합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> httpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div></li></ol>`,4))])}const b=d(E,[["render",y]]);export{f as __pageData,b as default};
