import{_ as o,c as t,o as r,ag as a}from"./chunks/framework.Bksy39di.js";const u=JSON.parse('{"title":"Kotlin 2.1 호환성 가이드","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kotlin/compatibility-guide-21.md","filePath":"ko/kotlin/compatibility-guide-21.md","lastUpdated":1754307826000}'),n={name:"ko/kotlin/compatibility-guide-21.md"};function l(i,e,s,p,c,g){return r(),t("div",null,e[0]||(e[0]=[a('<h1 id="kotlin-2-1-호환성-가이드" tabindex="-1">Kotlin 2.1 호환성 가이드 <a class="header-anchor" href="#kotlin-2-1-호환성-가이드" aria-label="Permalink to &quot;Kotlin 2.1 호환성 가이드&quot;">​</a></h1><p><em><a href="/ko/kotlin/kotlin-evolution-principles">언어 현대성 유지</a></em> 및 _<a href="/ko/kotlin/kotlin-evolution-principles">원활한 업데이트</a>_는 코틀린 언어 설계의 기본 원칙 중 하나입니다. 전자는 언어 발전을 저해하는 구조가 제거되어야 하며, 후자는 코드 마이그레이션을 가능한 한 원활하게 하기 위해 이러한 제거가 사전에 충분히 공지되어야 한다고 명시합니다.</p><p>대부분의 언어 변경 사항이 업데이트 변경 로그나 컴파일러 경고와 같은 다른 채널을 통해 이미 발표되었지만, 이 문서는 Kotlin 2.0에서 Kotlin 2.1으로의 마이그레이션을 위한 완전한 참조를 제공하며 이러한 모든 변경 사항을 요약합니다.</p><h2 id="기본-용어" tabindex="-1">기본 용어 <a class="header-anchor" href="#기본-용어" aria-label="Permalink to &quot;기본 용어&quot;">​</a></h2><p>이 문서에서는 몇 가지 유형의 호환성을 소개합니다:</p><ul><li><em>소스</em>: 소스 비호환 변경은 이전에는 (오류나 경고 없이) 잘 컴파일되던 코드가 더 이상 컴파일되지 않게 만듭니다.</li><li><em>바이너리</em>: 두 개의 바이너리 아티팩트는 서로 교환할 때 로딩 또는 링크 오류가 발생하지 않는 경우 바이너리 호환된다고 합니다.</li><li><em>동작</em>: 변경 사항을 적용하기 전과 후 동일한 프로그램이 다른 동작을 보이는 경우 동작 비호환이라고 합니다.</li></ul><p>이러한 정의는 순수 Kotlin에 대해서만 제공된다는 점을 기억하십시오. 다른 언어(예: Java) 관점에서 Kotlin 코드의 호환성은 이 문서의 범위를 벗어납니다.</p><h2 id="언어" tabindex="-1">언어 <a class="header-anchor" href="#언어" aria-label="Permalink to &quot;언어&quot;">​</a></h2><h3 id="언어-버전-1-4-및-1-5-제거" tabindex="-1">언어 버전 1.4 및 1.5 제거 <a class="header-anchor" href="#언어-버전-1-4-및-1-5-제거" aria-label="Permalink to &quot;언어 버전 1.4 및 1.5 제거&quot;">​</a></h3><blockquote><p><strong>이슈</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-60521" target="_blank" rel="noreferrer">KT-60521</a></p><p><strong>구성 요소</strong>: 코어 언어</p><p><strong>비호환 변경 유형</strong>: 소스</p><p><strong>요약</strong>: Kotlin 2.1은 언어 버전 2.1을 도입하고 언어 버전 1.4 및 1.5에 대한 지원을 제거합니다. 언어 버전 1.6 및 1.7은 사용 중단되었습니다.</p><p><strong>사용 중단 주기</strong>:</p><ul><li>1.6.0: 언어 버전 1.4에 대한 경고 보고</li><li>1.9.0: 언어 버전 1.5에 대한 경고 보고</li><li>2.1.0: 언어 버전 1.6 및 1.7에 대한 경고 보고; 언어 버전 1.4 및 1.5에 대한 경고를 오류로 상향</li></ul></blockquote><h3 id="kotlin-native에서-typeof-함수-동작-변경" tabindex="-1">Kotlin/Native에서 typeOf() 함수 동작 변경 <a class="header-anchor" href="#kotlin-native에서-typeof-함수-동작-변경" aria-label="Permalink to &quot;Kotlin/Native에서 typeOf() 함수 동작 변경&quot;">​</a></h3><blockquote><p><strong>이슈</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-70754" target="_blank" rel="noreferrer">KT-70754</a></p><p><strong>구성 요소</strong>: 코어 언어</p><p><strong>비호환 변경 유형</strong>: 동작</p><p><strong>요약</strong>: Kotlin/Native의 <code>typeOf()</code> 함수의 동작이 Kotlin/JVM과 일치하도록 변경되어 플랫폼 전반의 일관성이 보장됩니다.</p><p><strong>사용 중단 주기</strong>:</p><ul><li>2.1.0: Kotlin/Native에서 <code>typeOf()</code> 함수 동작을 일치시킵니다.</li></ul></blockquote><h3 id="타입-파라미터-경계를-통해-유형-노출-금지" tabindex="-1">타입 파라미터 경계를 통해 유형 노출 금지 <a class="header-anchor" href="#타입-파라미터-경계를-통해-유형-노출-금지" aria-label="Permalink to &quot;타입 파라미터 경계를 통해 유형 노출 금지&quot;">​</a></h3><blockquote><p><strong>이슈</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-69653" target="_blank" rel="noreferrer">KT-69653</a></p><p><strong>구성 요소</strong>: 코어 언어</p><p><strong>비호환 변경 유형</strong>: 소스</p><p><strong>요약</strong>: 접근성이 낮은 유형을 타입 파라미터 경계를 통해 노출하는 것이 이제 금지됩니다. 이는 유형 가시성 규칙의 불일치를 해결합니다. 이 변경 사항은 타입 파라미터의 경계가 클래스와 동일한 가시성 규칙을 따르도록 하여 JVM에서 IR 유효성 검사 오류와 같은 문제를 방지합니다.</p><p><strong>사용 중단 주기</strong>:</p><ul><li>2.1.0: 접근성이 낮은 타입 파라미터 경계를 통해 유형을 노출하는 경우 경고 보고</li><li>2.2.0: 경고를 오류로 상향</li></ul></blockquote><h3 id="추상-var-프로퍼티와-동일한-이름의-val-프로퍼티-상속-금지" tabindex="-1">추상 var 프로퍼티와 동일한 이름의 val 프로퍼티 상속 금지 <a class="header-anchor" href="#추상-var-프로퍼티와-동일한-이름의-val-프로퍼티-상속-금지" aria-label="Permalink to &quot;추상 var 프로퍼티와 동일한 이름의 val 프로퍼티 상속 금지&quot;">​</a></h3><blockquote><p><strong>이슈</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-58659" target="_blank" rel="noreferrer">KT-58659</a></p><p><strong>구성 요소</strong>: 코어 언어</p><p><strong>비호환 변경 유형</strong>: 소스</p><p><strong>요약</strong>: 클래스가 인터페이스에서 추상 <code>var</code> 프로퍼티를 상속하고 슈퍼클래스에서 동일한 이름의 <code>val</code> 프로퍼티를 상속하는 경우, 이제 컴파일 오류가 발생합니다. 이는 이러한 경우에 setter가 누락되어 발생하는 런타임 충돌을 해결합니다.</p><p><strong>사용 중단 주기</strong>:</p><ul><li>2.1.0: 클래스가 인터페이스에서 추상 <code>var</code> 프로퍼티를 상속하고 슈퍼클래스에서 동일한 이름의 <code>val</code> 프로퍼티를 상속할 때 경고(또는 프로그레시브 모드에서는 오류)를 보고합니다.</li><li>2.2.0: 경고를 오류로 상향</li></ul></blockquote><h3 id="초기화되지-않은-enum-항목에-접근-시-오류-보고" tabindex="-1">초기화되지 않은 enum 항목에 접근 시 오류 보고 <a class="header-anchor" href="#초기화되지-않은-enum-항목에-접근-시-오류-보고" aria-label="Permalink to &quot;초기화되지 않은 enum 항목에 접근 시 오류 보고&quot;">​</a></h3><blockquote><p><strong>이슈</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-68451" target="_blank" rel="noreferrer">KT-68451</a></p><p><strong>구성 요소</strong>: 코어 언어</p><p><strong>비호환 변경 유형</strong>: 소스</p><p><strong>요약</strong>: 이제 컴파일러는 enum 클래스 또는 항목 초기화 중에 초기화되지 않은 enum 항목에 접근할 때 오류를 보고합니다. 이는 멤버 프로퍼티 초기화 규칙과 동작을 일치시켜 런타임 예외를 방지하고 일관된 로직을 보장합니다.</p><p><strong>사용 중단 주기</strong>:</p><ul><li>2.1.0: 초기화되지 않은 enum 항목에 접근할 때 오류 보고</li></ul></blockquote><h3 id="k2-스마트-캐스트-전파-변경" tabindex="-1">K2 스마트 캐스트 전파 변경 <a class="header-anchor" href="#k2-스마트-캐스트-전파-변경" aria-label="Permalink to &quot;K2 스마트 캐스트 전파 변경&quot;">​</a></h3><blockquote><p><strong>이슈</strong>: <a href="https://youtrack.jetbrains.com/issue/KTLC-34" target="_blank" rel="noreferrer">KTLC-34</a></p><p><strong>구성 요소</strong>: 코어 언어</p><p><strong>비호환 변경 유형</strong>: 동작</p><p><strong>요약</strong>: K2 컴파일러는 <code>val x = y</code>와 같이 추론된 변수에 대한 타입 정보의 양방향 전파를 도입하여 스마트 캐스트 전파 동작을 변경합니다. <code>val x: T = y</code>와 같이 명시적으로 타입이 지정된 변수는 더 이상 타입 정보를 전파하지 않아 선언된 타입에 대한 엄격한 준수를 보장합니다.</p><p><strong>사용 중단 주기</strong>:</p><ul><li>2.1.0: 새로운 동작 활성화</li></ul></blockquote><h3 id="java-서브클래스에서-멤버-확장-프로퍼티-오버라이드-처리-수정" tabindex="-1">Java 서브클래스에서 멤버 확장 프로퍼티 오버라이드 처리 수정 <a class="header-anchor" href="#java-서브클래스에서-멤버-확장-프로퍼티-오버라이드-처리-수정" aria-label="Permalink to &quot;Java 서브클래스에서 멤버 확장 프로퍼티 오버라이드 처리 수정&quot;">​</a></h3><blockquote><p><strong>이슈</strong>: <a href="https://youtrack.jetbrains.com/issue/KTLC-35" target="_blank" rel="noreferrer">KTLC-35</a></p><p><strong>구성 요소</strong>: 코어 언어</p><p><strong>비호환 변경 유형</strong>: 동작</p><p><strong>요약</strong>: Java 서브클래스에 의해 오버라이드된 멤버 확장 프로퍼티의 getter는 이제 서브클래스의 스코프에서 숨겨져 일반 Kotlin 프로퍼티의 동작과 일치합니다.</p><p><strong>사용 중단 주기</strong>:</p><ul><li>2.1.0: 새로운 동작 활성화</li></ul></blockquote><h3 id="protected-val을-오버라이드하는-var-프로퍼티의-getter-및-setter에-대한-가시성-정렬-수정" tabindex="-1">protected val을 오버라이드하는 var 프로퍼티의 getter 및 setter에 대한 가시성 정렬 수정 <a class="header-anchor" href="#protected-val을-오버라이드하는-var-프로퍼티의-getter-및-setter에-대한-가시성-정렬-수정" aria-label="Permalink to &quot;protected val을 오버라이드하는 var 프로퍼티의 getter 및 setter에 대한 가시성 정렬 수정&quot;">​</a></h3><blockquote><p><strong>이슈</strong>: <a href="https://youtrack.jetbrains.com/issue/KTLC-36" target="_blank" rel="noreferrer">KTLC-36</a></p><p><strong>구성 요소</strong>: 코어 언어</p><p><strong>비호환 변경 유형</strong>: 바이너리</p><p><strong>요약</strong>: <code>protected val</code> 프로퍼티를 오버라이드하는 <code>var</code> 프로퍼티의 getter 및 setter의 가시성은 이제 일관성을 유지하며, 둘 다 오버라이드된 <code>val</code> 프로퍼티의 가시성을 상속합니다.</p><p><strong>사용 중단 주기</strong>:</p><ul><li>2.1.0: K2에서 getter와 setter 모두에 대해 일관된 가시성 적용; K1은 영향을 받지 않습니다.</li></ul></blockquote><h3 id="jspecify-널-null-허용성-불일치-진단-심각도를-오류로-상향" tabindex="-1">JSpecify 널(Null) 허용성 불일치 진단 심각도를 오류로 상향 <a class="header-anchor" href="#jspecify-널-null-허용성-불일치-진단-심각도를-오류로-상향" aria-label="Permalink to &quot;JSpecify 널(Null) 허용성 불일치 진단 심각도를 오류로 상향&quot;">​</a></h3><blockquote><p><strong>이슈</strong>: <a href="https://youtrack.jetbrains.com/issue/KTLC-11" target="_blank" rel="noreferrer">KTLC-11</a></p><p><strong>구성 요소</strong>: 코어 언어</p><p><strong>비호환 변경 유형</strong>: 소스</p><p><strong>요약</strong>: <code>@NonNull</code>, <code>@Nullable</code>, <code>@NullMarked</code>와 같은 <code>org.jspecify.annotations</code>의 널(Null) 허용성 불일치는 이제 경고 대신 오류로 처리되어 Java 상호 운용성을 위한 더 엄격한 타입 안전성을 적용합니다. 이러한 진단의 심각도를 조정하려면 <code>-Xnullability-annotations</code> 컴파일러 옵션을 사용하십시오.</p><p><strong>사용 중단 주기</strong>:</p><ul><li>1.6.0: 잠재적인 널(Null) 허용성 불일치에 대한 경고 보고</li><li>1.8.20: <code>@Nullable</code>, <code>@NullnessUnspecified</code>, <code>@NullMarked</code> 및 <code>org.jspecify.nullness</code>의 레거시 어노테이션(JSpecify 0.2 및 이전 버전)을 포함한 특정 JSpecify 어노테이션으로 경고 확장</li><li>2.0.0: <code>@NonNull</code> 어노테이션에 대한 지원 추가</li><li>2.1.0: JSpecify 어노테이션에 대한 기본 모드를 <code>strict</code>로 변경하여 경고를 오류로 변환; 기본 동작을 재정의하려면 <code>-Xnullability-annotations=@org.jspecify.annotations:warning</code> 또는 <code>-Xnullability-annotations=@org.jspecify.annotations:ignore</code>를 사용합니다.</li></ul></blockquote><h3 id="모호한-경우-오버로드-해석에서-invoke-호출보다-확장-함수에-우선순위-부여로-변경" tabindex="-1">모호한 경우 오버로드 해석에서 invoke 호출보다 확장 함수에 우선순위 부여로 변경 <a class="header-anchor" href="#모호한-경우-오버로드-해석에서-invoke-호출보다-확장-함수에-우선순위-부여로-변경" aria-label="Permalink to &quot;모호한 경우 오버로드 해석에서 invoke 호출보다 확장 함수에 우선순위 부여로 변경&quot;">​</a></h3><blockquote><p><strong>이슈</strong>: <a href="https://youtrack.jetbrains.com/issue/KTLC-37" target="_blank" rel="noreferrer">KTLC-37</a></p><p><strong>구성 요소</strong>: 코어 언어</p><p><strong>비호환 변경 유형</strong>: 동작</p><p><strong>요약</strong>: 오버로드 해석은 이제 모호한 경우에 <code>invoke</code> 호출보다 확장 함수를 일관되게 우선순위로 둡니다. 이는 로컬 함수 및 프로퍼티의 해석 로직 불일치를 해결합니다. 이 변경 사항은 재컴파일 후에만 적용되며, 사전 컴파일된 바이너리에는 영향을 미치지 않습니다.</p><p><strong>사용 중단 주기</strong>:</p><ul><li>2.1.0: 오버로드 해석을 변경하여 일치하는 시그니처를 가진 확장 함수에 대한 <code>invoke</code> 호출보다 확장 함수를 일관되게 우선순위로 둡니다; 이 변경 사항은 재컴파일 후에만 적용되며 사전 컴파일된 바이너리에는 영향을 미치지 않습니다.</li></ul></blockquote><h3 id="jdk-함수-인터페이스의-sam-생성자에서-람다가-널-null-허용-값을-반환하는-것-금지" tabindex="-1">JDK 함수 인터페이스의 SAM 생성자에서 람다가 널(Null) 허용 값을 반환하는 것 금지 <a class="header-anchor" href="#jdk-함수-인터페이스의-sam-생성자에서-람다가-널-null-허용-값을-반환하는-것-금지" aria-label="Permalink to &quot;JDK 함수 인터페이스의 SAM 생성자에서 람다가 널(Null) 허용 값을 반환하는 것 금지&quot;">​</a></h3><blockquote><p><strong>이슈</strong>: <a href="https://youtrack.jetbrains.com/issue/KTLC-42" target="_blank" rel="noreferrer">KTLC-42</a></p><p><strong>구성 요소</strong>: 코어 언어</p><p><strong>비호환 변경 유형</strong>: 소스</p><p><strong>요약</strong>: JDK 함수 인터페이스의 SAM 생성자에서 람다로부터 널(null) 허용 값을 반환하는 것은 이제 지정된 타입 인자가 널(null) 불허인 경우 컴파일 오류를 발생시킵니다. 이는 널(null) 허용성 불일치가 런타임 예외로 이어질 수 있는 문제를 해결하여 더 엄격한 타입 안전성을 보장합니다.</p><p><strong>사용 중단 주기</strong>:</p><ul><li>2.0.0: JDK 함수 인터페이스의 SAM 생성자에서 널(null) 허용 반환 값에 대한 사용 중단 경고 보고</li><li>2.1.0: 기본적으로 새로운 동작 활성화</li></ul></blockquote><h3 id="kotlin-native에서-public-멤버와-충돌하는-private-멤버-처리-수정" tabindex="-1">Kotlin/Native에서 public 멤버와 충돌하는 private 멤버 처리 수정 <a class="header-anchor" href="#kotlin-native에서-public-멤버와-충돌하는-private-멤버-처리-수정" aria-label="Permalink to &quot;Kotlin/Native에서 public 멤버와 충돌하는 private 멤버 처리 수정&quot;">​</a></h3><blockquote><p><strong>이슈</strong>: <a href="https://youtrack.jetbrains.com/issue/KTLC-43" target="_blank" rel="noreferrer">KTLC-43</a></p><p><strong>구성 요소</strong>: 코어 언어</p><p><strong>비호환 변경 유형</strong>: 동작</p><p><strong>요약</strong>: Kotlin/Native에서 private 멤버는 더 이상 슈퍼클래스의 public 멤버를 오버라이드하거나 충돌하지 않아 Kotlin/JVM과 동작이 일치합니다. 이는 오버라이드 해석의 불일치를 해결하고 개별 컴파일로 인해 발생하는 예기치 않은 동작을 제거합니다.</p><p><strong>사용 중단 주기</strong>:</p><ul><li>2.1.0: Kotlin/Native의 private 함수 및 프로퍼티는 더 이상 슈퍼클래스의 public 멤버를 오버라이드하거나 영향을 미치지 않으며, JVM 동작과 일치합니다.</li></ul></blockquote><h3 id="public-inline-함수에서-private-연산자-함수-접근-금지" tabindex="-1">public inline 함수에서 private 연산자 함수 접근 금지 <a class="header-anchor" href="#public-inline-함수에서-private-연산자-함수-접근-금지" aria-label="Permalink to &quot;public inline 함수에서 private 연산자 함수 접근 금지&quot;">​</a></h3><blockquote><p><strong>이슈</strong>: <a href="https://youtrack.jetbrains.com/issue/KTLC-71" target="_blank" rel="noreferrer">KTLC-71</a></p><p><strong>구성 요소</strong>: 코어 언어</p><p><strong>비호환 변경 유형</strong>: 소스</p><p><strong>요약</strong>: <code>getValue()</code>, <code>setValue()</code>, <code>provideDelegate()</code>, <code>hasNext()</code>, <code>next()</code>와 같은 private 연산자 함수는 더 이상 public inline 함수에서 접근할 수 없습니다.</p><p><strong>사용 중단 주기</strong>:</p><ul><li>2.0.0: public inline 함수에서 private 연산자 함수에 접근하는 경우 사용 중단 경고 보고</li><li>2.1.0: 경고를 오류로 상향</li></ul></blockquote><h3 id="unsafevariance로-어노테이션된-불변-파라미터에-유효하지-않은-인자-전달-금지" tabindex="-1">@UnsafeVariance로 어노테이션된 불변 파라미터에 유효하지 않은 인자 전달 금지 <a class="header-anchor" href="#unsafevariance로-어노테이션된-불변-파라미터에-유효하지-않은-인자-전달-금지" aria-label="Permalink to &quot;@UnsafeVariance로 어노테이션된 불변 파라미터에 유효하지 않은 인자 전달 금지&quot;">​</a></h3><blockquote><p><strong>이슈</strong>: <a href="https://youtrack.jetbrains.com/issue/KTLC-72" target="_blank" rel="noreferrer">KTLC-72</a></p><p><strong>구성 요소</strong>: 코어 언어</p><p><strong>비호환 변경 유형</strong>: 소스</p><p><strong>요약</strong>: 컴파일러는 이제 타입 검사 중에 <code>@UnsafeVariance</code> 어노테이션을 무시하여 불변 타입 파라미터에 대한 더 엄격한 타입 안전성을 적용합니다. 이는 예상되는 타입 검사를 우회하기 위해 <code>@UnsafeVariance</code>에 의존하는 잘못된 호출을 방지합니다.</p><p><strong>사용 중단 주기</strong>:</p><ul><li>2.1.0: 새로운 동작 활성화</li></ul></blockquote><h3 id="경고-수준-java-타입의-오류-수준-널-null-허용-인자에-대한-널-null-허용성-오류-보고" tabindex="-1">경고 수준 Java 타입의 오류 수준 널(Null) 허용 인자에 대한 널(Null) 허용성 오류 보고 <a class="header-anchor" href="#경고-수준-java-타입의-오류-수준-널-null-허용-인자에-대한-널-null-허용성-오류-보고" aria-label="Permalink to &quot;경고 수준 Java 타입의 오류 수준 널(Null) 허용 인자에 대한 널(Null) 허용성 오류 보고&quot;">​</a></h3><blockquote><p><strong>이슈</strong>: <a href="https://youtrack.jetbrains.com/issue/KTLC-100" target="_blank" rel="noreferrer">KTLC-100</a></p><p><strong>구성 요소</strong>: 코어 언어</p><p><strong>비호환 변경 유형</strong>: 소스</p><p><strong>요약</strong>: 컴파일러는 이제 경고 수준의 널(null) 허용 타입이 더 엄격한 오류 수준의 널(null) 허용성 타입 인자를 포함하는 Java 메서드에서 널(null) 허용성 불일치를 감지합니다. 이는 이전에 무시되었던 타입 인자 오류가 올바르게 보고되도록 보장합니다.</p><p><strong>사용 중단 주기</strong>:</p><ul><li>2.0.0: 더 엄격한 타입 인자를 가진 Java 메서드에서 널(null) 허용성 불일치에 대한 사용 중단 경고 보고</li><li>2.1.0: 경고를 오류로 상향</li></ul></blockquote><h3 id="접근-불가능한-유형의-암시적-사용-보고" tabindex="-1">접근 불가능한 유형의 암시적 사용 보고 <a class="header-anchor" href="#접근-불가능한-유형의-암시적-사용-보고" aria-label="Permalink to &quot;접근 불가능한 유형의 암시적 사용 보고&quot;">​</a></h3><blockquote><p><strong>이슈</strong>: <a href="https://youtrack.jetbrains.com/issue/KTLC-3" target="_blank" rel="noreferrer">KTLC-3</a></p><p><strong>구성 요소</strong>: 코어 언어</p><p><strong>비호환 변경 유형</strong>: 소스</p><p><strong>요약</strong>: 컴파일러는 이제 함수 리터럴 및 타입 인자에서 접근 불가능한 유형의 사용을 보고하여, 불완전한 타입 정보로 인해 발생하는 컴파일 및 런타임 오류를 방지합니다.</p><p><strong>사용 중단 주기</strong>:</p><ul><li>2.0.0: 접근 불가능한 비제네릭 타입의 파라미터 또는 리시버를 가진 함수 리터럴 및 접근 불가능한 타입 인자를 가진 타입에 대해 경고 보고; 특정 시나리오에서 접근 불가능한 제네릭 타입의 파라미터 또는 리시버를 가진 함수 리터럴 및 접근 불가능한 제네릭 타입 인자를 가진 타입에 대해 오류 보고</li><li>2.1.0: 접근 불가능한 비제네릭 타입의 파라미터 및 리시버를 가진 함수 리터럴에 대한 경고를 오류로 상향</li><li>2.2.0: 접근 불가능한 타입 인자를 가진 타입에 대한 경고를 오류로 상향</li></ul></blockquote><h2 id="표준-라이브러리" tabindex="-1">표준 라이브러리 <a class="header-anchor" href="#표준-라이브러리" aria-label="Permalink to &quot;표준 라이브러리&quot;">​</a></h2><h3 id="char-및-string의-로케일-민감-대소문자-변환-함수-사용-중단" tabindex="-1">Char 및 String의 로케일 민감 대소문자 변환 함수 사용 중단 <a class="header-anchor" href="#char-및-string의-로케일-민감-대소문자-변환-함수-사용-중단" aria-label="Permalink to &quot;Char 및 String의 로케일 민감 대소문자 변환 함수 사용 중단&quot;">​</a></h3><blockquote><p><strong>이슈</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-43023" target="_blank" rel="noreferrer">KT-43023</a></p><p><strong>구성 요소</strong>: kotlin-stdlib</p><p><strong>비호환 변경 유형</strong>: 소스</p><p><strong>요약</strong>: 다른 Kotlin 표준 라이브러리 API 중에서도 <code>Char.toUpperCase()</code> 및 <code>String.toLowerCase()</code>와 같은 <code>Char</code> 및 <code>String</code>의 로케일(Locale)에 민감한 대소문자 변환 함수가 사용 중단되었습니다. 이를 <code>String.lowercase()</code>와 같은 로케일 독립적인 대안으로 바꾸거나, <code>String.lowercase(Locale.getDefault())</code>와 같이 로케일 민감 동작을 위해 로케일을 명시적으로 지정하십시오. Kotlin 2.1.0에서 사용 중단된 Kotlin 표준 라이브러리 API의 전체 목록은 <a href="https://youtrack.jetbrains.com/issue/KT-71628" target="_blank" rel="noreferrer">KT-71628</a>을 참조하십시오.</p><p><strong>사용 중단 주기</strong>:</p><ul><li>1.4.30: 로케일 독립적인 대안을 실험적 API로 도입</li><li>1.5.0: 로케일 민감 대소문자 변환 함수를 경고와 함께 사용 중단</li><li>2.1.0: 경고를 오류로 상향</li></ul></blockquote><h3 id="kotlin-stdlib-common-jar-아티팩트-제거" tabindex="-1">kotlin-stdlib-common JAR 아티팩트 제거 <a class="header-anchor" href="#kotlin-stdlib-common-jar-아티팩트-제거" aria-label="Permalink to &quot;kotlin-stdlib-common JAR 아티팩트 제거&quot;">​</a></h3><blockquote><p><strong>이슈</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-62159" target="_blank" rel="noreferrer">KT-62159</a></p><p><strong>구성 요소</strong>: kotlin-stdlib</p><p><strong>비호환 변경 유형</strong>: 바이너리</p><p><strong>요약</strong>: 이전에 레거시 멀티플랫폼 선언 메타데이터에 사용되었던 <code>kotlin-stdlib-common.jar</code> 아티팩트는 사용 중단되었으며, 공통 멀티플랫폼 선언 메타데이터의 표준 형식으로 <code>.klib</code> 파일로 대체됩니다. 이 변경 사항은 주요 <code>kotlin-stdlib.jar</code> 또는 <code>kotlin-stdlib-all.jar</code> 아티팩트에는 영향을 미치지 않습니다.</p><p><strong>사용 중단 주기</strong>:</p><ul><li>2.1.0: <code>kotlin-stdlib-common.jar</code> 아티팩트 사용 중단 및 제거</li></ul></blockquote><h3 id="appendln-대신-appendline-사용-중단" tabindex="-1">appendln() 대신 appendLine() 사용 중단 <a class="header-anchor" href="#appendln-대신-appendline-사용-중단" aria-label="Permalink to &quot;appendln() 대신 appendLine() 사용 중단&quot;">​</a></h3><blockquote><p><strong>이슈</strong>: <a href="https://youtrack.jetbrains.com/issue/KTLC-27" target="_blank" rel="noreferrer">KTLC-27</a></p><p><strong>구성 요소</strong>: kotlin-stdlib</p><p><strong>비호환 변경 유형</strong>: 소스</p><p><strong>요약</strong>: <code>StringBuilder.appendln()</code>는 <code>StringBuilder.appendLine()</code>로 대체되어 사용 중단되었습니다.</p><p><strong>사용 중단 주기</strong>:</p><ul><li>1.4.0: <code>appendln()</code> 함수는 사용 중단되었습니다; 사용 시 경고 보고</li><li>2.1.0: 경고를 오류로 상향</li></ul></blockquote><h3 id="kotlin-native에서-동결-freezing-관련-api-사용-중단" tabindex="-1">Kotlin/Native에서 동결(Freezing) 관련 API 사용 중단 <a class="header-anchor" href="#kotlin-native에서-동결-freezing-관련-api-사용-중단" aria-label="Permalink to &quot;Kotlin/Native에서 동결(Freezing) 관련 API 사용 중단&quot;">​</a></h3><blockquote><p><strong>이슈</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-69545" target="_blank" rel="noreferrer">KT-69545</a></p><p><strong>구성 요소</strong>: kotlin-stdlib</p><p><strong>비호환 변경 유형</strong>: 소스</p><p><strong>요약</strong>: 이전에 <code>@FreezingIsDeprecated</code> 어노테이션으로 표시되었던 Kotlin/Native의 동결(Freezing) 관련 API가 이제 사용 중단되었습니다. 이는 스레드 공유를 위해 객체를 동결할 필요를 없앤 새로운 메모리 관리자 도입과 일치합니다. 마이그레이션 세부 정보는 <a href="/ko/kotlin/native-migration-guide#update-your-code">Kotlin/Native 마이그레이션 가이드</a>를 참조하십시오.</p><p><strong>사용 중단 주기</strong>:</p><ul><li>1.7.20: 동결 관련 API를 경고와 함께 사용 중단</li><li>2.1.0: 경고를 오류로 상향</li></ul></blockquote><h3 id="map-entry-동작을-구조적-수정-시-fail-fast로-변경" tabindex="-1">Map.Entry 동작을 구조적 수정 시 fail-fast로 변경 <a class="header-anchor" href="#map-entry-동작을-구조적-수정-시-fail-fast로-변경" aria-label="Permalink to &quot;Map.Entry 동작을 구조적 수정 시 fail-fast로 변경&quot;">​</a></h3><blockquote><p><strong>이슈</strong>: <a href="https://youtrack.jetbrains.com/issue/KTLC-23" target="_blank" rel="noreferrer">KTLC-23</a></p><p><strong>구성 요소</strong>: kotlin-stdlib</p><p><strong>비호환 변경 유형</strong>: 동작</p><p><strong>요약</strong>: 관련 맵이 구조적으로 변경된 후 <code>Map.Entry</code> 키-값 쌍에 접근하면 이제 <code>ConcurrentModificationException</code>이 발생합니다.</p><p><strong>사용 중단 주기</strong>:</p><ul><li>2.1.0: 맵의 구조적 변경이 감지되면 예외 발생</li></ul></blockquote><h2 id="도구" tabindex="-1">도구 <a class="header-anchor" href="#도구" aria-label="Permalink to &quot;도구&quot;">​</a></h2><h3 id="kotlincompilationoutput-resourcesdirprovider-사용-중단" tabindex="-1">KotlinCompilationOutput#resourcesDirProvider 사용 중단 <a class="header-anchor" href="#kotlincompilationoutput-resourcesdirprovider-사용-중단" aria-label="Permalink to &quot;KotlinCompilationOutput#resourcesDirProvider 사용 중단&quot;">​</a></h3><blockquote><p><strong>이슈</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-69255" target="_blank" rel="noreferrer">KT-69255</a></p><p><strong>구성 요소</strong>: Gradle</p><p><strong>비호환 변경 유형</strong>: 소스</p><p><strong>요약</strong>: <code>KotlinCompilationOutput#resourcesDirProvider</code> 필드는 사용 중단되었습니다. 추가 리소스 디렉토리를 추가하려면 대신 Gradle 빌드 스크립트에서 <code>KotlinSourceSet.resources</code>를 사용하십시오.</p><p><strong>사용 중단 주기</strong>:</p><ul><li>2.1.0: <code>KotlinCompilationOutput#resourcesDirProvider</code>가 사용 중단되었습니다.</li></ul></blockquote><h3 id="registerkotlinjvmcompiletask-taskname-modulename-함수-사용-중단" tabindex="-1">registerKotlinJvmCompileTask(taskName, moduleName) 함수 사용 중단 <a class="header-anchor" href="#registerkotlinjvmcompiletask-taskname-modulename-함수-사용-중단" aria-label="Permalink to &quot;registerKotlinJvmCompileTask(taskName, moduleName) 함수 사용 중단&quot;">​</a></h3><blockquote><p><strong>이슈</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-69927" target="_blank" rel="noreferrer">KT-69927</a></p><p><strong>구성 요소</strong>: Gradle</p><p><strong>비호환 변경 유형</strong>: 소스</p><p><strong>요약</strong>: <code>registerKotlinJvmCompileTask(taskName, moduleName)</code> 함수는 이제 <code>KotlinJvmCompilerOptions</code>를 허용하는 새로운 <code>registerKotlinJvmCompileTask(taskName, compilerOptions, explicitApiMode)</code> 함수로 대체되어 사용 중단되었습니다. 이를 통해 일반적으로 확장 또는 대상에서 가져온 <code>compilerOptions</code> 인스턴스를 작업 옵션에 대한 규칙으로 사용되는 값과 함께 전달할 수 있습니다.</p><p><strong>사용 중단 주기</strong>:</p><ul><li>2.1.0: <code>registerKotlinJvmCompileTask(taskName, moduleName)</code> 함수가 사용 중단되었습니다.</li></ul></blockquote><h3 id="registerkaptgeneratestubstask-taskname-함수-사용-중단" tabindex="-1">registerKaptGenerateStubsTask(taskName) 함수 사용 중단 <a class="header-anchor" href="#registerkaptgeneratestubstask-taskname-함수-사용-중단" aria-label="Permalink to &quot;registerKaptGenerateStubsTask(taskName) 함수 사용 중단&quot;">​</a></h3><blockquote><p><strong>이슈</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-70383" target="_blank" rel="noreferrer">KT-70383</a></p><p><strong>구성 요소</strong>: Gradle</p><p><strong>비호환 변경 유형</strong>: 소스</p><p><strong>요약</strong>: <code>registerKaptGenerateStubsTask(taskName)</code> 함수는 사용 중단되었습니다. 대신 새로운 <code>registerKaptGenerateStubsTask(compileTask, kaptExtension, explicitApiMode)</code> 함수를 사용하십시오. 이 새로운 버전은 관련 <code>KotlinJvmCompile</code> 작업에서 값을 규칙으로 연결할 수 있도록 하여 두 작업이 동일한 옵션 세트를 사용하도록 보장합니다.</p><p><strong>사용 중단 주기</strong>:</p><ul><li>2.1.0: <code>registerKaptGenerateStubsTask(taskName)</code> 함수가 사용 중단되었습니다.</li></ul></blockquote><h3 id="kotlintoplevelextension-및-kotlintoplevelextensionconfig-인터페이스-사용-중단" tabindex="-1">KotlinTopLevelExtension 및 KotlinTopLevelExtensionConfig 인터페이스 사용 중단 <a class="header-anchor" href="#kotlintoplevelextension-및-kotlintoplevelextensionconfig-인터페이스-사용-중단" aria-label="Permalink to &quot;KotlinTopLevelExtension 및 KotlinTopLevelExtensionConfig 인터페이스 사용 중단&quot;">​</a></h3><blockquote><p><strong>이슈</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-71602" target="_blank" rel="noreferrer">KT-71602</a></p><p><strong>구성 요소</strong>: Gradle</p><p><strong>비호환 변경 유형</strong>: 동작</p><p><strong>요약</strong>: <code>KotlinTopLevelExtension</code> 및 <code>KotlinTopLevelExtensionConfig</code> 인터페이스는 새로운 <code>KotlinTopLevelExtension</code> 인터페이스로 대체되어 사용 중단되었습니다. 이 인터페이스는 <code>KotlinTopLevelExtensionConfig</code>, <code>KotlinTopLevelExtension</code>, <code>KotlinProjectExtension</code>을 병합하여 API 계층을 간소화하고 JVM 툴체인 및 컴파일러 프로퍼티에 대한 공식적인 접근을 제공합니다.</p><p><strong>사용 중단 주기</strong>:</p><ul><li>2.1.0: <code>KotlinTopLevelExtension</code> 및 <code>KotlinTopLevelExtensionConfig</code> 인터페이스가 사용 중단되었습니다.</li></ul></blockquote><h3 id="빌드-런타임-의존성에서-kotlin-compiler-embeddable-제거" tabindex="-1">빌드 런타임 의존성에서 kotlin-compiler-embeddable 제거 <a class="header-anchor" href="#빌드-런타임-의존성에서-kotlin-compiler-embeddable-제거" aria-label="Permalink to &quot;빌드 런타임 의존성에서 kotlin-compiler-embeddable 제거&quot;">​</a></h3><blockquote><p><strong>이슈</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-61706" target="_blank" rel="noreferrer">KT-61706</a></p><p><strong>구성 요소</strong>: Gradle</p><p><strong>비호환 변경 유형</strong>: 소스</p><p><strong>요약</strong>: <code>kotlin-compiler-embeddable</code> 의존성은 Kotlin Gradle 플러그인(KGP)의 런타임에서 제거되었습니다. 필요한 모듈은 이제 KGP 아티팩트에 직접 포함되며, 8.2 미만 버전의 Gradle Kotlin 런타임과의 호환성을 지원하기 위해 Kotlin 언어 버전은 2.0으로 제한됩니다.</p><p><strong>사용 중단 주기</strong>:</p><ul><li>2.1.0: <code>kotlin-compiler-embeddable</code> 사용 시 경고 보고</li><li>2.2.0: 경고를 오류로 상향</li></ul></blockquote><h3 id="kotlin-gradle-플러그인-api에서-컴파일러-심볼-숨기기" tabindex="-1">Kotlin Gradle 플러그인 API에서 컴파일러 심볼 숨기기 <a class="header-anchor" href="#kotlin-gradle-플러그인-api에서-컴파일러-심볼-숨기기" aria-label="Permalink to &quot;Kotlin Gradle 플러그인 API에서 컴파일러 심볼 숨기기&quot;">​</a></h3><blockquote><p><strong>이슈</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-70251" target="_blank" rel="noreferrer">KT-70251</a></p><p><strong>구성 요소</strong>: Gradle</p><p><strong>비호환 변경 유형</strong>: 소스</p><p><strong>요약</strong>: Kotlin Gradle 플러그인(KGP)에 번들된 <code>KotlinCompilerVersion</code>과 같은 컴파일러 모듈 심볼은 빌드 스크립트에서 의도치 않은 접근을 방지하기 위해 공용 API에서 숨겨졌습니다.</p><p><strong>사용 중단 주기</strong>:</p><ul><li>2.1.0: 이러한 심볼 접근 시 경고 보고</li><li>2.2.0: 경고를 오류로 상향</li></ul></blockquote><h3 id="여러-안정성-구성-파일-지원-추가" tabindex="-1">여러 안정성 구성 파일 지원 추가 <a class="header-anchor" href="#여러-안정성-구성-파일-지원-추가" aria-label="Permalink to &quot;여러 안정성 구성 파일 지원 추가&quot;">​</a></h3><blockquote><p><strong>이슈</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-68345" target="_blank" rel="noreferrer">KT-68345</a></p><p><strong>구성 요소</strong>: Gradle</p><p><strong>비호환 변경 유형</strong>: 소스</p><p><strong>요약</strong>: Compose 확장 기능의 <code>stabilityConfigurationFile</code> 프로퍼티는 여러 구성 파일을 지정할 수 있는 새로운 <code>stabilityConfigurationFiles</code> 프로퍼티로 대체되어 사용 중단되었습니다.</p><p><strong>사용 중단 주기</strong>:</p><ul><li>2.1.0: <code>stabilityConfigurationFile</code> 프로퍼티가 사용 중단되었습니다.</li></ul></blockquote><h3 id="사용-중단된-플랫폼-플러그인-id-제거" tabindex="-1">사용 중단된 플랫폼 플러그인 ID 제거 <a class="header-anchor" href="#사용-중단된-플랫폼-플러그인-id-제거" aria-label="Permalink to &quot;사용 중단된 플랫폼 플러그인 ID 제거&quot;">​</a></h3><blockquote><p><strong>이슈</strong>: <a href="https://youtrack.jetbrains.com/issue/KT-65565" target="_blank" rel="noreferrer">KT-65565</a></p><p><strong>구성 요소</strong>: Gradle</p><p><strong>비호환 변경 유형</strong>: 소스</p><p><strong>요약</strong>: 다음 플랫폼 플러그인 ID에 대한 지원이 제거되었습니다:</p><ul><li><code>kotlin-platform-common</code></li><li><code>org.jetbrains.kotlin.platform.common</code></li></ul><p><strong>사용 중단 주기</strong>:</p><ul><li>1.3: 플랫폼 플러그인 ID가 사용 중단되었습니다.</li><li>2.1.0: 플랫폼 플러그인 ID는 더 이상 지원되지 않습니다.</li></ul></blockquote>',68)]))}const k=o(n,[["render",l]]);export{u as __pageData,k as default};
