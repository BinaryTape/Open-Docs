import{_ as i,c as a,o as n,ag as l}from"./chunks/framework.Bksy39di.js";const r=JSON.parse('{"title":"布尔类型","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/booleans.md","filePath":"kotlin/booleans.md","lastUpdated":1754307826000}'),e={name:"kotlin/booleans.md"};function p(t,s,h,k,o,d){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="布尔类型" tabindex="-1">布尔类型 <a class="header-anchor" href="#布尔类型" aria-label="Permalink to &quot;布尔类型&quot;">​</a></h1><p><code>Boolean</code> 类型表示布尔对象，它可以拥有两个值：<code>true</code> 和 <code>false</code>。 <code>Boolean</code> 有一个 <a href="/kotlin/null-safety">可空</a> 的对应类型，声明为 <code>Boolean?</code>。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>在 JVM 上，存储为原生 <code>boolean</code> 类型的布尔值通常使用 8 位。</p></div><p>布尔值的内置操作包括：</p><ul><li><code>||</code> – 析取（逻辑 <em>或</em>）</li><li><code>&amp;&amp;</code> – 合取（逻辑 <em>与</em>）</li><li><code>!</code> – 否定（逻辑 <em>非</em>）</li></ul><p>例如：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myTrue: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Boolean</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myFalse: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Boolean</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> boolNull: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myTrue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myFalse)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // true</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myTrue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myFalse)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // false</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">myTrue)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // false</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(boolNull)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>||</code> 和 <code>&amp;&amp;</code> 操作符以惰性方式工作，这意味着：</p><ul><li>如果第一个操作数为 <code>true</code>，<code>||</code> 操作符不会对第二个操作数求值。</li><li>如果第一个操作数为 <code>false</code>，<code>&amp;&amp;</code> 操作符不会对第二个操作数求值。</li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>在 JVM 上，可空引用到布尔对象会被装箱为 Java 类，就像 <a href="/kotlin/numbers#boxing-and-caching-numbers-on-the-java-virtual_machine">数字</a> 那样。</p></div>`,10)]))}const E=i(e,[["render",p]]);export{r as __pageData,E as default};
