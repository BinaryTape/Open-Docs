import{_ as i,c as a,o as t,ag as n}from"./chunks/framework.Bksy39di.js";const E=JSON.parse('{"title":"KSP 与 Kotlin 多平台","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/ksp-multiplatform.md","filePath":"kotlin/ksp-multiplatform.md","lastUpdated":1754307826000}'),e={name:"kotlin/ksp-multiplatform.md"};function l(p,s,k,h,o,d){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="ksp-与-kotlin-多平台" tabindex="-1">KSP 与 Kotlin 多平台 <a class="header-anchor" href="#ksp-与-kotlin-多平台" aria-label="Permalink to &quot;KSP 与 Kotlin 多平台&quot;">​</a></h1><p>为了快速入门，请参见一个定义 KSP 处理器的 <a href="https://github.com/google/ksp/tree/main/examples/multiplatform" target="_blank" rel="noreferrer">Kotlin 多平台示例项目</a>。</p><p>从 KSP 1.0.1 开始，在多平台项目上应用 KSP 与在单平台 JVM 项目上应用类似。主要区别在于，不再是在依赖项中编写 <code>ksp(...)</code> 配置，而是使用 <code>add(ksp&lt;Target&gt;)</code> 或 <code>add(ksp&lt;SourceSet&gt;)</code> 来在编译前指定哪些编译目标需要符号处理。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;multiplatform&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;com.google.devtools.ksp&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    jvm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    linuxX64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        binaries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;kspCommonMainMetadata&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">project</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;:test-processor&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;kspJvm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">project</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;:test-processor&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;kspJvmTest&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">project</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;:test-processor&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Not doing anything because there&#39;s no test source set for JVM</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // There is no processing for the Linux x64 main source set, because kspLinuxX64 isn&#39;t specified</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // add(&quot;kspLinuxX64Test&quot;, project(&quot;:test-processor&quot;))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="编译与处理" tabindex="-1">编译与处理 <a class="header-anchor" href="#编译与处理" aria-label="Permalink to &quot;编译与处理&quot;">​</a></h2><p>在多平台项目中，Kotlin 编译可能会针对每个平台发生多次（<code>main</code>、<code>test</code> 或其他构建变体）。符号处理也是如此。每当存在 Kotlin 编译任务且指定了对应的 <code>ksp&lt;Target&gt;</code> 或 <code>ksp&lt;SourceSet&gt;</code> 配置时，就会创建一个符号处理任务。</p><p>例如，在上述 <code>build.gradle.kts</code> 中，有 4 个编译任务：common/metadata、JVM main、Linux x64 main、Linux x64 test，以及 3 个符号处理任务：common/metadata、JVM main、Linux x64 test。</p><h2 id="避免在-ksp-1-0-1-中使用-ksp-配置" tabindex="-1">避免在 KSP 1.0.1+ 中使用 ksp(...) 配置 <a class="header-anchor" href="#避免在-ksp-1-0-1-中使用-ksp-配置" aria-label="Permalink to &quot;避免在 KSP 1.0.1+ 中使用 ksp(...) 配置&quot;">​</a></h2><p>在 KSP 1.0.1 之前，只有一个统一的 <code>ksp(...)</code> 配置可用。因此，处理器要么应用于所有编译目标，要么完全不适用。请注意，<code>ksp(...)</code> 配置不仅应用于主源代码集，如果测试源代码集存在，它也适用于测试源代码集，即使是在传统的非多平台项目中也是如此。这给构建时间带来了不必要的开销。</p><p>从 KSP 1.0.1 开始，提供了针对每个目标的配置，如上例所示。将来：</p><ol><li>对于多平台项目，<code>ksp(...)</code> 配置将被弃用和移除。</li><li>对于单平台项目，<code>ksp(...)</code> 配置将只应用于主要的默认编译项。其他目标（例如 <code>test</code>）将需要指定 <code>kspTest(...)</code> 以应用处理器。</li></ol><p>从 KSP 1.0.1 开始，有一个抢先体验标志 <code>-DallowAllTargetConfiguration=false</code> 可以切换到更高效的行为。如果当前行为导致性能问题，请尝试一下。在 KSP 2.0 中，该标志的默认值将从 <code>true</code> 反转为 <code>false</code>。</p>`,12)]))}const c=i(e,[["render",l]]);export{E as __pageData,c as default};
