import{_ as i,c as a,o as t,ag as l}from"./chunks/framework.Bksy39di.js";const c=JSON.parse('{"title":"Kotlin 命令列編譯器","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/command-line.md","filePath":"zh-Hant/kotlin/command-line.md","lastUpdated":1754307826000}'),e={name:"zh-Hant/kotlin/command-line.md"};function n(h,s,p,k,o,r){return t(),a("div",null,s[0]||(s[0]=[l(`<h1 id="kotlin-命令列編譯器" tabindex="-1">Kotlin 命令列編譯器 <a class="header-anchor" href="#kotlin-命令列編譯器" aria-label="Permalink to &quot;Kotlin 命令列編譯器&quot;">​</a></h1><p>每個 Kotlin 版本都附帶一個獨立的編譯器版本。您可以手動或透過套件管理員下載最新版本。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>安裝命令列編譯器並非使用 Kotlin 的必要步驟。 常見的方法是使用具備官方 Kotlin 支援的 IDE 或程式碼編輯器來編寫 Kotlin 應用程式， 例如 <a href="https://www.jetbrains.com/idea/" target="_blank" rel="noreferrer">IntelliJ IDEA</a> 或 <a href="https://developer.android.com/studio" target="_blank" rel="noreferrer">Android Studio</a>。 它們提供開箱即用的完整 Kotlin 支援。 了解如何在 <a href="/zh-Hant/kotlin/getting-started">IDE 中開始使用 Kotlin</a>。</p></div><h2 id="安裝編譯器" tabindex="-1">安裝編譯器 <a class="header-anchor" href="#安裝編譯器" aria-label="Permalink to &quot;安裝編譯器&quot;">​</a></h2><h3 id="手動安裝" tabindex="-1">手動安裝 <a class="header-anchor" href="#手動安裝" aria-label="Permalink to &quot;手動安裝&quot;">​</a></h3><p>若要手動安裝 Kotlin 編譯器：</p><ol><li>從 <a href="https://github.com/JetBrains/kotlin/releases/tag/v2.2.10" target="_blank" rel="noreferrer">GitHub Releases</a> 下載最新版本 (<code>kotlin-compiler-2.2.10.zip</code>)。</li><li>將獨立編譯器解壓縮到一個目錄中，並可選擇將 <code>bin</code> 目錄新增至系統路徑。 <code>bin</code> 目錄包含在 Windows、macOS 和 Linux 上編譯及執行 Kotlin 所需的腳本。</li></ol><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>如果您想在 Windows 上使用 Kotlin 命令列編譯器，建議您手動安裝。</p></div><h3 id="sdkman" tabindex="-1">SDKMAN! <a class="header-anchor" href="#sdkman" aria-label="Permalink to &quot;SDKMAN!&quot;">​</a></h3><p>在諸如 macOS、Linux、Cygwin、FreeBSD 和 Solaris 等基於 UNIX 的系統上，安裝 Kotlin 更簡單的方法是 <a href="https://sdkman.io" target="_blank" rel="noreferrer">SDKMAN!</a>。它也適用於 Bash 和 ZSH shell。 <a href="https://sdkman.io/install" target="_blank" rel="noreferrer">了解如何安裝 SDKMAN!</a>。</p><p>若要透過 SDKMAN! 安裝 Kotlin 編譯器，請在終端機中執行以下命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sdk</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kotlin</span></span></code></pre></div><h3 id="homebrew" tabindex="-1">Homebrew <a class="header-anchor" href="#homebrew" aria-label="Permalink to &quot;Homebrew&quot;">​</a></h3><p>或者，在 macOS 上您可以透過 <a href="https://brew.sh/" target="_blank" rel="noreferrer">Homebrew</a> 安裝編譯器：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">brew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> update</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">brew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kotlin</span></span></code></pre></div><h3 id="snap-套件" tabindex="-1">Snap 套件 <a class="header-anchor" href="#snap-套件" aria-label="Permalink to &quot;Snap 套件&quot;">​</a></h3><p>如果您在 Ubuntu 16.04 或更高版本上使用 <a href="https://snapcraft.io/" target="_blank" rel="noreferrer">Snap</a>，您可以從命令列安裝編譯器：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> snap</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --classic</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> kotlin</span></span></code></pre></div><h2 id="建立並執行應用程式" tabindex="-1">建立並執行應用程式 <a class="header-anchor" href="#建立並執行應用程式" aria-label="Permalink to &quot;建立並執行應用程式&quot;">​</a></h2><ol><li><p>建立一個簡單的 Kotlin 主控台 JVM 應用程式，顯示 <code>&quot;Hello, World!&quot;</code>。 在程式碼編輯器中，建立一個名為 <code>hello.kt</code> 的新檔案，並包含以下程式碼：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, World!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>使用 Kotlin 編譯器編譯應用程式：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlinc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.kt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -include-runtime</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.jar</span></span></code></pre></div><ul><li><code>-d</code> 選項表示產生類別檔案的輸出路徑，該路徑可以是目錄或一個 <strong>.jar</strong> 檔案。</li><li><code>-include-runtime</code> 選項透過將 Kotlin 執行時函式庫包含在內，使產生的 <strong>.jar</strong> 檔案成為獨立且可執行的。</li></ul><p>若要查看所有可用選項，請執行：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlinc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -help</span></span></code></pre></div></li><li><p>執行應用程式：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">java</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -jar</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.jar</span></span></code></pre></div></li></ol><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>若要編譯 Kotlin/Native 應用程式，請使用 <a href="/zh-Hant/kotlin/native-get-started#using-the-command-line-compiler">Kotlin/Native 編譯器</a>。</p></div><h2 id="編譯函式庫" tabindex="-1">編譯函式庫 <a class="header-anchor" href="#編譯函式庫" aria-label="Permalink to &quot;編譯函式庫&quot;">​</a></h2><p>如果您正在開發一個供其他 Kotlin 應用程式使用的函式庫，您可以在不包含 Kotlin 執行時的情況下建構該 <strong>.jar</strong> 檔案：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlinc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.kt</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.jar</span></span></code></pre></div><p>由於以此方式編譯的二進位檔依賴於 Kotlin 執行時， 因此您應確保每次使用編譯後的函式庫時，它都存在於類別路徑中。</p><p>您也可以使用 <code>kotlin</code> 腳本來執行由 Kotlin 編譯器產生的二進位檔：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -classpath</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.jar</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> HelloKt</span></span></code></pre></div><p><code>HelloKt</code> 是 Kotlin 編譯器為名為 <code>hello.kt</code> 的檔案產生主類別名稱。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>若要編譯 Kotlin/Native 函式庫，請使用 <a href="/zh-Hant/kotlin/native-libraries#kotlin-compiler-specifics">Kotlin/Native 編譯器</a>。</p></div><h2 id="執行-repl" tabindex="-1">執行 REPL <a class="header-anchor" href="#執行-repl" aria-label="Permalink to &quot;執行 REPL&quot;">​</a></h2><p>使用 <a href="/zh-Hant/kotlin/compiler-reference#xrepl"><code>-Xrepl</code> 編譯器選項</a> 執行編譯器以獲得一個互動式 shell。在此 shell 中，您可以輸入任何有效的 Kotlin 程式碼並查看結果。</p><h2 id="執行腳本" tabindex="-1">執行腳本 <a class="header-anchor" href="#執行腳本" aria-label="Permalink to &quot;執行腳本&quot;">​</a></h2><p>您可以將 Kotlin 用作腳本語言。 Kotlin 腳本是一個包含頂層可執行程式碼的 Kotlin 原始碼檔案 (<code>.kts</code>)。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> java.io.File</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Get the passed in path, i.e. &quot;-d some/path&quot; or use the current path.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (args.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">contains</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-d&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) args[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> args.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">indexOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-d&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">           else</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;.&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> folders </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> File</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(path).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listFiles</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { file </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> file.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isDirectory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">folders?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { folder </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(folder) }</span></span></code></pre></div><p>若要執行腳本，請將 <code>-script</code> 選項與對應的腳本檔案傳遞給編譯器：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlinc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -script</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> list_folders.kts</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">path_to_folder_to_inspec</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>Kotlin 為腳本自訂提供了實驗性支援，例如新增外部屬性、提供靜態或動態依賴項等。 自訂功能由所謂的 <em>腳本定義</em> 定義，這些是帶有適當支援程式碼的註解 Kotlin 類別。 腳本副檔名用於選擇適當的定義。 了解更多關於 <a href="/zh-Hant/kotlin/custom-script-deps-tutorial">Kotlin 自訂腳本</a> 的資訊。</p><p>適當準備的腳本定義會在編譯類別路徑中包含相應的 JARs 時，自動偵測並套用。或者，您可以透過將 <code>-script-templates</code> 選項傳遞給編譯器來手動指定定義：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlinc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -script-templates</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> org.example.CustomScriptDefinition</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -script</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> custom.script1.kts</span></span></code></pre></div><p>有關更多詳細資訊，請參閱 <a href="https://github.com/Kotlin/KEEP/blob/master/proposals/scripting-support.md" target="_blank" rel="noreferrer">KEEP-75</a>。</p>`,40)]))}const g=i(e,[["render",n]]);export{c as __pageData,g as default};
