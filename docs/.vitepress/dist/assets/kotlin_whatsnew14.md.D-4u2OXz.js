import{_ as p,a as r,b as d,c as o,d as E,e as g,f as c,g as y,h as F,i as u,j as C}from"./chunks/migration-inspection-wn.BTS-bWVS.js";import{_ as m,C as k,c as b,o as f,ag as e,G as n,w as l,j as i,a as s}from"./chunks/framework.Bksy39di.js";const P=JSON.parse('{"title":"Kotlin 1.4.0 的新特性","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/whatsnew14.md","filePath":"kotlin/whatsnew14.md","lastUpdated":1754307826000}'),B={name:"kotlin/whatsnew14.md"};function A(v,a,D,q,x,S){const t=k("tab"),h=k("tabs");return f(),b("div",null,[a[6]||(a[6]=e(`<h1 id="kotlin-1-4-0-的新特性" tabindex="-1">Kotlin 1.4.0 的新特性 <a class="header-anchor" href="#kotlin-1-4-0-的新特性" aria-label="Permalink to &quot;Kotlin 1.4.0 的新特性&quot;">​</a></h1><p><em><a href="/kotlin/releases#release-details">发布日期：2020 年 8 月 17 日</a></em></p><p>在 Kotlin 1.4.0 中，我们对所有组件进行了一系列改进，<a href="https://blog.jetbrains.com/kotlin/2020/08/kotlin-1-4-released-with-a-focus-on-quality-and-performance/" target="_blank" rel="noreferrer">专注于质量和性能</a>。 下面你将找到 Kotlin 1.4.0 中最重要的变更列表。</p><h2 id="语言特性和改进" tabindex="-1">语言特性和改进 <a class="header-anchor" href="#语言特性和改进" aria-label="Permalink to &quot;语言特性和改进&quot;">​</a></h2><p>Kotlin 1.4.0 带来了各种不同的语言特性和改进。它们包括：</p><ul><li><a href="#sam-conversions-for-kotlin-interfaces">Kotlin 接口的 SAM 转换</a></li><li><a href="#explicit-api-mode-for-library-authors">库作者的显式 API 模式</a></li><li><a href="#mixing-named-and-positional-arguments">混合使用命名实参和位置实参</a></li><li><a href="#trailing-comma">尾部逗号</a></li><li><a href="#callable-reference-improvements">可调用引用改进</a></li><li><a href="#using-break-and-continue-inside-when-expressions-included-in-loops">在循环中包含的 when 表达式中使用 break 和 continue</a></li></ul><h3 id="kotlin-接口的-sam-转换" tabindex="-1">Kotlin 接口的 SAM 转换 <a class="header-anchor" href="#kotlin-接口的-sam-转换" aria-label="Permalink to &quot;Kotlin 接口的 SAM 转换&quot;">​</a></h3><p>在 Kotlin 1.4.0 之前，你只能在 <a href="/kotlin/java-interop#sam-conversions">Kotlin 中使用 Java 方法和 Java 接口时</a> 应用 SAM（单一抽象方法）转换。从现在开始，你也可以将 SAM 转换用于 Kotlin 接口。 为此，请使用 <code>fun</code> 修饰符将 Kotlin 接口显式标记为函数式接口。</p><p>当需要一个仅包含一个单一抽象方法的接口作为形参时，传入一个 lambda 表达式作为实参，此时 SAM 转换即可应用。在这种情况下，编译器会自动将该 lambda 表达式转换为实现该抽象成员函数的类实例。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IntPredicate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> accept</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Boolean</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isEven </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IntPredicate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Is 7 even? - \${isEven.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">accept</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="/kotlin/fun-interfaces">了解更多关于 Kotlin 函数式接口和 SAM 转换的信息</a>。</p><h3 id="库作者的显式-api-模式" tabindex="-1">库作者的显式 API 模式 <a class="header-anchor" href="#库作者的显式-api-模式" aria-label="Permalink to &quot;库作者的显式 API 模式&quot;">​</a></h3><p>Kotlin 编译器为库作者提供了_显式 API 模式_。在此模式下，编译器执行额外的检测，有助于使库的 API 更清晰、更一致。它对暴露到库公共 API 的声明添加以下要求：</p><ul><li>如果声明的默认可见性将其暴露给公共 API，则需要为其指定可见性修饰符。这有助于确保没有声明被无意中暴露到公共 API。</li><li>对于暴露到公共 API 的属性和函数，需要显式指定类型。这保证了 API 用户清楚他们所使用的 API 成员的类型。</li></ul><p>根据你的配置，这些显式 API 可以产生错误（_严格_模式）或警告（_警告_模式）。出于可读性和常识的考虑，某些类型的声明被排除在此类检测之外：</p><ul><li>主构造函数</li><li>数据类的属性</li><li>属性 getter 和 setter</li><li><code>override</code> 方法</li></ul><p>显式 API 模式仅分析模块的生产源代码。</p><p>要在显式 API 模式下编译你的模块，请将以下行添加到你的 Gradle 构建脚本中：</p>`,18)),n(h,{group:"build-script"},{default:l(()=>[n(t,{title:"Kotlin","group-key":"kotlin"},{default:l(()=>a[0]||(a[0]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {    ")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"    // for strict mode")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    explicitApi"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"() ")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"    // or")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    explicitApi "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," ExplicitApiMode.Strict")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"    // for warning mode")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    explicitApiWarning"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"    // or")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    explicitApi "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," ExplicitApiMode.Warning")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),n(t,{title:"Groovy","group-key":"groovy"},{default:l(()=>a[1]||(a[1]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"kotlin {    ")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"    // for strict mode")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    explicitApi() ")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"    // or")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    explicitApi "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," 'strict'")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    ")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"    // for warning mode")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    explicitApiWarning()")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}},"    // or")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    explicitApi "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}}," 'warning'")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),a[7]||(a[7]=e(`<p>当使用命令行编译器时，通过添加 <code>-Xexplicit-api</code> 编译器选项并将其值设置为 <code>strict</code> 或 <code>warning</code> 来切换到显式 API 模式。</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-Xexplicit-api</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">strict</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">warning}</span></span></code></pre></div><p><a href="https://github.com/Kotlin/KEEP/blob/master/proposals/explicit-api-mode.md" target="_blank" rel="noreferrer">在 KEEP 中查找更多关于显式 API 模式的详细信息</a>。</p><h3 id="混合使用命名实参和位置实参" tabindex="-1">混合使用命名实参和位置实参 <a class="header-anchor" href="#混合使用命名实参和位置实参" aria-label="Permalink to &quot;混合使用命名实参和位置实参&quot;">​</a></h3><p>在 Kotlin 1.3 中，当你使用 <a href="/kotlin/functions#named-arguments">命名实参</a> 调用函数时，你必须将所有未命名的实参（位置实参）放在第一个命名实参之前。例如，你可以调用 <code>f(1, y = 2)</code>，但不能调用 <code>f(x = 1, 2)</code>。</p><p>当所有实参都处于正确位置，但你想要为中间的一个实参指定名称时，这真的很令人烦恼。这对于明确布尔值或 <code>null</code> 值属于哪个属性特别有用。</p><p>在 Kotlin 1.4 中，没有这样的限制——你现在可以在一组位置实参中间为实参指定名称。此外，你可以随意混合位置实参和命名实参，只要它们保持正确的顺序。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> reformat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    str: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    uppercaseFirstLetter: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Boolean</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    wordSeparator: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Char</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39; &#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//中间带有命名实参的函数调用</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reformat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;This is a String!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, uppercaseFirstLetter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> , </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;-&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="尾部逗号" tabindex="-1">尾部逗号 <a class="header-anchor" href="#尾部逗号" aria-label="Permalink to &quot;尾部逗号&quot;">​</a></h3><p>使用 Kotlin 1.4，你现在可以在枚举中添加尾部逗号，例如实参和形参列表、<code>when</code> 条目以及解构声明的组件。 通过尾部逗号，你可以添加新项或更改其顺序，而无需添加或删除逗号。</p><p>如果你使用多行语法来定义形参或值，这会特别有用。添加尾部逗号后，你可以轻松交换形参或值的行。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> reformat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    str: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    uppercaseFirstLetter: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Boolean</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    wordSeparator: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Character</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39; &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//尾部逗号</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> colors </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;red&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;green&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;blue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//尾部逗号</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="可调用引用改进" tabindex="-1">可调用引用改进 <a class="header-anchor" href="#可调用引用改进" aria-label="Permalink to &quot;可调用引用改进&quot;">​</a></h3><p>Kotlin 1.4 支持更多使用可调用引用的情况：</p><ul><li>对包含默认值形参的函数的引用</li><li>在返回 <code>Unit</code> 的函数中的函数引用</li><li>根据函数中实参数量进行调整的引用</li><li>可调用引用上的挂起转换</li></ul><h4 id="对包含默认值形参的函数的引用" tabindex="-1">对包含默认值形参的函数的引用 <a class="header-anchor" href="#对包含默认值形参的函数的引用" aria-label="Permalink to &quot;对包含默认值形参的函数的引用&quot;">​</a></h4><p>现在你可以使用可调用引用指向包含默认值形参的函数。如果函数 <code>foo</code> 的可调用引用不带任何实参，则使用默认值 <code>0</code>。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$i</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">!&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(func: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>以前，你必须为 <code>apply</code> 或 <code>foo</code> 函数编写额外的重载。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// some new overload</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> applyInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(func: (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) -&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> func</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h4 id="在返回-unit-的函数中的函数引用" tabindex="-1">在返回 Unit 的函数中的函数引用 <a class="header-anchor" href="#在返回-unit-的函数中的函数引用" aria-label="Permalink to &quot;在返回 Unit 的函数中的函数引用&quot;">​</a></h4><p>在 Kotlin 1.4 中，你可以在返回 <code>Unit</code> 的函数中，使用可调用引用指向返回任何类型的函数。在 Kotlin 1.4 之前，在这种情况下你只能使用 lambda 实参。现在你可以同时使用 lambda 实参和可调用引用。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Unit) { }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> returnsInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 42</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">returnsInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() } </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这是 1.4 之前唯一的方法</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">returnsInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 从 1.4 开始，这也能工作</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="根据函数中实参数量进行调整的引用" tabindex="-1">根据函数中实参数量进行调整的引用 <a class="header-anchor" href="#根据函数中实参数量进行调整的引用" aria-label="Permalink to &quot;根据函数中实参数量进行调整的引用&quot;">​</a></h4><p>现在，在传递可变数量实参 (<code>vararg</code>) 时，你可以调整函数的可调用引用。在传递的实参列表末尾，可以传递任意数量的同类型形参。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">vararg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> use0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f: (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) -&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> use1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f: (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) -&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> use2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f: (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) -&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    use0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    use1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    use2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="可调用引用上的挂起转换" tabindex="-1">可调用引用上的挂起转换 <a class="header-anchor" href="#可调用引用上的挂起转换" aria-label="Permalink to &quot;可调用引用上的挂起转换&quot;">​</a></h4><p>除了 lambda 表达式上的挂起转换之外，Kotlin 从 1.4.0 版本开始还支持可调用引用上的挂起转换。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> takeSuspend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(f: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">suspend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Unit) {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    takeSuspend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() } </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1.4 之前可行</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    takeSuspend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在 Kotlin 1.4 中，这也能工作</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="在循环中包含的-when-表达式中使用-break-和-continue" tabindex="-1">在循环中包含的 when 表达式中使用 break 和 continue <a class="header-anchor" href="#在循环中包含的-when-表达式中使用-break-和-continue" aria-label="Permalink to &quot;在循环中包含的 when 表达式中使用 break 和 continue&quot;">​</a></h3><p>在 Kotlin 1.3 中，你不能在循环中包含的 <code>when</code> 表达式中使用未限定的 <code>break</code> 和 <code>continue</code>。原因是这些关键字被保留用于 <code>when</code> 表达式中可能的 <a href="https://en.wikipedia.org/wiki/Switch_statement#Fallthrough" target="_blank" rel="noreferrer">贯穿行为</a>。</p><p>因此，如果你想在循环中包含的 <code>when</code> 表达式中使用 <code>break</code> 和 <code>continue</code>，你必须为它们 <a href="/kotlin/returns#break-and-continue-labels">加标签</a>，这变得相当麻烦。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(xs: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    LOOP@</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> xs) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        when</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> continue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@LOOP</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            17</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> break</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@LOOP</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在 Kotlin 1.4 中，你可以在循环中包含的 <code>when</code> 表达式内部无需标签即可使用 <code>break</code> 和 <code>continue</code>。它们将按预期行为终止最近的封闭循环或进入其下一步。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(xs: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> xs) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        when</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> continue</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            17</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> break</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>when</code> 内部的贯穿行为有待进一步设计。</p><h2 id="ide-中的新工具" tabindex="-1">IDE 中的新工具 <a class="header-anchor" href="#ide-中的新工具" aria-label="Permalink to &quot;IDE 中的新工具&quot;">​</a></h2><p>使用 Kotlin 1.4，你可以使用 IntelliJ IDEA 中的新工具来简化 Kotlin 开发：</p><ul><li><a href="#new-flexible-project-wizard">灵活的新项目向导</a></li><li><a href="#coroutine-debugger">协程调试器</a></li></ul><h3 id="灵活的新项目向导" tabindex="-1">灵活的新项目向导 <a class="header-anchor" href="#灵活的新项目向导" aria-label="Permalink to &quot;灵活的新项目向导&quot;">​</a></h3><p>通过灵活的新 Kotlin 项目向导，你可以轻松创建和配置不同类型的 Kotlin 项目，包括多平台项目，这些项目在没有 UI 的情况下可能难以配置。</p><p><img src="`+p+'" alt="Kotlin 项目向导 – 多平台项目"></p><p>新的 Kotlin 项目向导既简单又灵活：</p><ol><li><em>选择项目模板</em>，具体取决于你想要做什么。未来将添加更多模板。</li><li><em>选择构建系统</em> – Gradle (Kotlin 或 Groovy DSL)、Maven 或 IntelliJ IDEA。 Kotlin 项目向导将只显示所选项目模板支持的构建系统。</li><li><em>直接在主屏幕上预览项目结构</em>。</li></ol><p>然后，你可以完成项目创建，或者选择性地，在下一屏幕<em>配置项目</em>：</p><ol start="4"><li><em>添加/移除</em>此项目模板支持的模块和目标。</li><li><em>配置模块和目标设置</em>，例如目标 JVM 版本、目标模板和测试框架。</li></ol><p><img src="'+r+'" alt="Kotlin 项目向导 - 配置目标"></p><p>未来，我们将通过添加更多配置选项和模板，使 Kotlin 项目向导更加灵活。</p><p>你可以通过以下教程试用新的 Kotlin 项目向导：</p><ul><li><a href="/kotlin/jvm-get-started">创建基于 Kotlin/JVM 的控制台应用程序</a></li><li><a href="/kotlin/js-react">为 React 创建 Kotlin/JS 应用程序</a></li><li><a href="/kotlin/native-get-started">创建 Kotlin/Native 应用程序</a></li></ul><h3 id="协程调试器" tabindex="-1">协程调试器 <a class="header-anchor" href="#协程调试器" aria-label="Permalink to &quot;协程调试器&quot;">​</a></h3><p>许多人已经使用<a href="/kotlin/coroutines-guide">协程</a>进行异步编程。 但就调试而言，在 Kotlin 1.4 之前，处理协程可能是一个真正的难题。由于协程在线程之间跳转，因此很难理解特定协程在做什么并检查其上下文。在某些情况下，在断点处跟踪步骤根本不起作用。结果，你不得不依赖日志记录或心智努力来调试使用协程的代码。</p><p>在 Kotlin 1.4 中，由于 Kotlin 插件附带的新功能，调试协程现在方便得多。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>调试适用于 <code>kotlinx-coroutines-core</code> 的 1.3.8 或更高版本。</p></div><p><strong>调试工具窗口</strong>现在包含一个新的 <strong>Coroutines</strong> 标签页。在此标签页中，你可以找到有关当前运行和挂起协程的信息。协程按其运行的调度器分组。</p><p><img src="'+d+'" alt="调试协程"></p><p>现在你可以：</p><ul><li>轻松检测每个协程的状态。</li><li>查看运行中和挂起协程的局部变量和捕获变量的值。</li><li>查看完整的协程创建堆栈以及协程内部的调用堆栈。堆栈包含所有带有变量值的帧，即使是那些在标准调试期间会丢失的帧。</li></ul><p>如果你需要包含每个协程状态及其堆栈的完整报告，请右键单击 <strong>Coroutines</strong> 标签页，然后单击 <strong>Get Coroutines Dump</strong>。目前，协程转储（dump）相当简单，但我们将在未来的 Kotlin 版本中使其更具可读性和实用性。</p><p><img src="'+o+`" alt="协程转储"></p><p>在 <a href="https://blog.jetbrains.com/kotlin/2020/07/kotlin-1-4-rc-debugging-coroutines/" target="_blank" rel="noreferrer">这篇博客文章</a> 和 <a href="https://www.jetbrains.com/help/idea/debug-kotlin-coroutines.html" target="_blank" rel="noreferrer">IntelliJ IDEA 文档</a> 中了解更多关于调试协程的信息。</p><h2 id="新编译器" tabindex="-1">新编译器 <a class="header-anchor" href="#新编译器" aria-label="Permalink to &quot;新编译器&quot;">​</a></h2><p>新的 Kotlin 编译器将非常快速；它将统一所有支持的平台并为编译器扩展提供 API。这是一个长期项目，我们已经在 Kotlin 1.4.0 中完成了几个步骤：</p><ul><li><a href="#new-more-powerful-type-inference-algorithm">新的、更强大的类型推断算法</a> 已默认启用。</li><li><a href="#unified-backends-and-extensibility">新的 JVM 和 JS IR 后端</a>。一旦我们将其稳定下来，它们将成为默认设置。</li></ul><h3 id="新的、更强大的类型推断算法" tabindex="-1">新的、更强大的类型推断算法 <a class="header-anchor" href="#新的、更强大的类型推断算法" aria-label="Permalink to &quot;新的、更强大的类型推断算法&quot;">​</a></h3><p>Kotlin 1.4 使用新的、更强大的类型推断算法。这个新算法在 Kotlin 1.3 中通过指定编译器选项即可试用，现在已默认启用。你可以在 <a href="https://youtrack.jetbrains.com/issues/KT?q=Tag:%20fixed-in-new-inference%20" target="_blank" rel="noreferrer">YouTrack</a> 中查找新算法修复的完整问题列表。这里有一些最显著的改进：</p><ul><li><a href="#more-cases-where-type-is-inferred-automatically">更多自动推断类型的情况</a></li><li><a href="#smart-casts-for-a-lambda-s-last-expression">lambda 表达式最后一个表达式的智能转换</a></li><li><a href="#smart-casts-for-callable-references">可调用引用的智能转换</a></li><li><a href="#better-inference-for-delegated-properties">委派属性的更优推断</a></li><li><a href="#sam-conversion-for-java-interfaces-with-different-arguments">具有不同实参的 Java 接口的 SAM 转换</a></li><li><a href="#java-sam-interfaces-in-kotlin">Kotlin 中的 Java SAM 接口</a></li></ul><h4 id="更多自动推断类型的情况" tabindex="-1">更多自动推断类型的情况 <a class="header-anchor" href="#更多自动推断类型的情况" aria-label="Permalink to &quot;更多自动推断类型的情况&quot;">​</a></h4><p>新推断算法在许多旧算法需要你显式指定类型的情况下，会自动推断类型。例如，在下面的例子中，lambda 形参 <code>it</code> 的类型被正确推断为 <code>String?</code>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rulesMap: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?) -&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Boolean</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mapOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;weak&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;medium&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isNullOrBlank</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() },</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;strong&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;^[a-zA-Z0-9]+$&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toRegex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">matches</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(it) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rulesMap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;weak&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;abc!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rulesMap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;strong&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;abc&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(rulesMap.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;strong&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;abc!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在 Kotlin 1.3 中，你需要引入显式 lambda 形参或用带有显式泛型实参的 <code>Pair</code> 构造函数替换 <code>to</code> 才能使其工作。</p><h4 id="lambda-表达式最后一个表达式的智能转换" tabindex="-1">lambda 表达式最后一个表达式的智能转换 <a class="header-anchor" href="#lambda-表达式最后一个表达式的智能转换" aria-label="Permalink to &quot;lambda 表达式最后一个表达式的智能转换&quot;">​</a></h4><p>在 Kotlin 1.3 中，lambda 表达式内部的最后一个表达式不会被智能转换，除非你指定了预期类型。因此，在下面的例子中，Kotlin 1.3 推断 <code>String?</code> 为 <code>result</code> 变量的类型：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> currentValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;test&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    str </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Kotlin 编译器知道此处 str 不为 null</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在 Kotlin 1.3 中，&#39;result&#39; 的类型是 String?，在 Kotlin 1.4 中是 String</span></span></code></pre></div><p>在 Kotlin 1.4 中，得益于新推断算法，lambda 表达式内部的最后一个表达式会获得智能转换，并且这个新的、更精确的类型被用于推断最终的 lambda 类型。因此，<code>result</code> 变量的类型变为 <code>String</code>。</p><p>在 Kotlin 1.3 中，你通常需要添加显式转换（无论是 <code>!!</code> 还是像 <code>as String</code> 这样的类型转换）才能使此类情况正常工作，现在这些转换已变得不必要。</p><h4 id="可调用引用的智能转换" tabindex="-1">可调用引用的智能转换 <a class="header-anchor" href="#可调用引用的智能转换" aria-label="Permalink to &quot;可调用引用的智能转换&quot;">​</a></h4><p>在 Kotlin 1.3 中，你无法访问智能转换类型的成员引用。现在在 Kotlin 1.4 中可以了：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.reflect.KFunction</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">sealed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Animal</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Cat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Animal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> meow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;meow&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Dog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Animal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> woof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;woof&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> perform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(animal: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Animal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> kFunction: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KFunction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;*&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> when</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (animal) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Cat </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> animal::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">meow</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Dog </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> animal::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">woof</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    kFunction.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    perform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Cat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在 <code>animal</code> 变量被智能转换为特定类型 <code>Cat</code> 和 <code>Dog</code> 后，可以使用不同的成员引用 <code>animal::meow</code> 和 <code>animal::woof</code>。类型检测后，你可以访问与子类型对应的成员引用。</p><h4 id="委派属性的更优推断" tabindex="-1">委派属性的更优推断 <a class="header-anchor" href="#委派属性的更优推断" aria-label="Permalink to &quot;委派属性的更优推断&quot;">​</a></h4><p>在分析 <code>by</code> 关键字后的委托表达式时，没有考虑委托属性的类型。例如，下面的代码以前无法编译，但现在编译器正确推断 <code>old</code> 和 <code>new</code> 形参的类型为 <code>String?</code>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.properties.Delegates</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> prop: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Delegates</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">observable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { p, old, new </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$old</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> → </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$new</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    prop </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;abc&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    prop </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;xyz&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="具有不同实参的-java-接口的-sam-转换" tabindex="-1">具有不同实参的 Java 接口的 SAM 转换 <a class="header-anchor" href="#具有不同实参的-java-接口的-sam-转换" aria-label="Permalink to &quot;具有不同实参的 Java 接口的 SAM 转换&quot;">​</a></h4><p>Kotlin 从一开始就支持 Java 接口的 SAM 转换，但有一种情况不被支持，这在使用现有 Java 库时有时会很烦人。如果你调用的 Java 方法将两个 SAM 接口作为形参，那么两个实参都需要是 lambda 表达式或普通对象。你不能将一个实参作为 lambda 表达式传入，另一个作为对象传入。</p><p>新算法修复了这个问题，你现在在任何情况下都可以传入 lambda 表达式来代替 SAM 接口，这正是你自然期望的工作方式。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// FILE: A.java</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Runnable </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">r1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Runnable </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">r2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// FILE: test.kt</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(r1: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Runnable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    A.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(r1) {}  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在 Kotlin 1.4 中可用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="kotlin-中的-java-sam-接口" tabindex="-1">Kotlin 中的 Java SAM 接口 <a class="header-anchor" href="#kotlin-中的-java-sam-接口" aria-label="Permalink to &quot;Kotlin 中的 Java SAM 接口&quot;">​</a></h4><p>在 Kotlin 1.4 中，你可以在 Kotlin 中使用 Java SAM 接口并对其应用 SAM 转换。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> java.lang.Runnable</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(r: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Runnable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { } </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 可以</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在 Kotlin 1.3 中，你必须在 Java 代码中声明上述函数 <code>foo</code> 才能执行 SAM 转换。</p><h3 id="统一的后端和可扩展性" tabindex="-1">统一的后端和可扩展性 <a class="header-anchor" href="#统一的后端和可扩展性" aria-label="Permalink to &quot;统一的后端和可扩展性&quot;">​</a></h3><p>在 Kotlin 中，我们有三个生成可执行文件的后端：Kotlin/JVM、Kotlin/JS 和 Kotlin/Native。Kotlin/JVM 和 Kotlin/JS 之间没有太多代码共享，因为它们是独立开发的。Kotlin/Native 基于围绕 Kotlin 代码的中间表示 (IR) 构建的新基础设施。</p><p>我们正在将 Kotlin/JVM 和 Kotlin/JS 迁移到相同的 IR。因此，所有三个后端共享大量逻辑并拥有统一的流水线。这使得我们只需为所有平台实现一次大多数特性、优化和错误修复。两个新的基于 IR 的后端都处于 <a href="/kotlin/components-stability">Alpha</a> 阶段。</p><p>共同的后端基础设施也为多平台编译器扩展打开了大门。你将能够插入流水线并添加自定义处理和转换，这些处理和转换将自动适用于所有平台。</p><p>我们鼓励你使用我们新的 <a href="#new-jvm-ir-backend">JVM IR</a> 和 <a href="#new-js-ir-backend">JS IR</a> 后端（目前处于 Alpha 阶段），并与我们分享你的反馈。</p><h2 id="kotlin-jvm" tabindex="-1">Kotlin/JVM <a class="header-anchor" href="#kotlin-jvm" aria-label="Permalink to &quot;Kotlin/JVM&quot;">​</a></h2><p>Kotlin 1.4.0 包含许多 JVM 特有的改进，例如：</p><ul><li><a href="#new-jvm-ir-backend">新的 JVM IR 后端</a></li><li><a href="#new-modes-for-generating-default-methods">在接口中生成默认方法的新模式</a></li><li><a href="#unified-exception-type-for-null-checks">用于空检测的统一异常类型</a></li><li><a href="#type-annotations-in-the-jvm-bytecode">JVM 字节码中的类型注解</a></li></ul><h3 id="新的-jvm-ir-后端" tabindex="-1">新的 JVM IR 后端 <a class="header-anchor" href="#新的-jvm-ir-后端" aria-label="Permalink to &quot;新的 JVM IR 后端&quot;">​</a></h3><p>与 Kotlin/JS 一样，我们正在将 Kotlin/JVM 迁移到 <a href="#unified-backends-and-extensibility">统一的 IR 后端</a>，这使我们能够为所有平台实现一次大多数特性和错误修复。你也将通过创建适用于所有平台的多平台扩展来从中受益。</p><p>Kotlin 1.4.0 尚未为此类扩展提供公共 API，但我们正在与我们的合作伙伴（包括 <a href="https://developer.android.com/jetpack/compose" target="_blank" rel="noreferrer">Jetpack Compose</a>）紧密合作，他们已在使用我们的新后端构建编译器插件。</p><p>我们鼓励你试用新的 Kotlin/JVM 后端（目前处于 Alpha 阶段），并向我们的 <a href="https://youtrack.jetbrains.com/issues/KT" target="_blank" rel="noreferrer">问题跟踪器</a> 提交任何问题和特性请求。这将帮助我们统一编译器流水线，并更快地将 Jetpack Compose 等编译器扩展引入 Kotlin 社区。</p><p>要启用新的 JVM IR 后端，请在你的 Gradle 构建脚本中指定一个额外的编译器选项：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kotlinOptions.useIR </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span></code></pre></div><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>如果你 <a href="https://developer.android.com/jetpack/compose/setup?hl=en" target="_blank" rel="noreferrer">启用 Jetpack Compose</a>，你将自动选择使用新的 JVM 后端，而无需在 <code>kotlinOptions</code> 中指定编译器选项。</p></div><p>当使用命令行编译器时，添加编译器选项 <code>-Xuse-ir</code>。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>你只能在使用新后端的情况下使用由新 JVM IR 后端编译的代码。否则，你将收到错误。考虑到这一点，我们不建议库作者在生产环境中切换到新后端。</p></div><h3 id="在接口中生成默认方法的新模式" tabindex="-1">在接口中生成默认方法的新模式 <a class="header-anchor" href="#在接口中生成默认方法的新模式" aria-label="Permalink to &quot;在接口中生成默认方法的新模式&quot;">​</a></h3><p>将 Kotlin 代码编译为 JVM 1.8 及以上目标时，你可以将 Kotlin 接口的非抽象方法编译为 Java 的 <code>default</code> 方法。为此，有一个机制，包括用于标记此类方法的 <code>@JvmDefault</code> 注解和启用该注解处理的 <code>-Xjvm-default</code> 编译器选项。</p><p>在 1.4.0 中，我们添加了一种生成默认方法的新模式：<code>-Xjvm-default=all</code> 将 Kotlin 接口的<em>所有</em>非抽象方法编译为 <code>default</code> Java 方法。为了与使用未带 <code>default</code> 编译的接口的代码兼容，我们还添加了 <code>all-compatibility</code> 模式。</p><p>有关 Java 互操作中默认方法的更多信息，请参见<a href="/kotlin/java-to-kotlin-interop#default-methods-in-interfaces">互操作文档</a>和<a href="https://blog.jetbrains.com/kotlin/2020/07/kotlin-1-4-m3-generating-default-methods-in-interfaces/" target="_blank" rel="noreferrer">这篇博客文章</a>。</p><h3 id="用于空检测的统一异常类型" tabindex="-1">用于空检测的统一异常类型 <a class="header-anchor" href="#用于空检测的统一异常类型" aria-label="Permalink to &quot;用于空检测的统一异常类型&quot;">​</a></h3><p>从 Kotlin 1.4.0 开始，所有运行时空检测都将抛出 <code>java.lang.NullPointerException</code>，而不是 <code>KotlinNullPointerException</code>、<code>IllegalStateException</code>、<code>IllegalArgumentException</code> 和 <code>TypeCastException</code>。这适用于：<code>!!</code> 操作符、方法前导中的形参空检测、平台类型表达式空检测以及带有非空类型的使用 <code>as</code> 操作符。这不适用于 <code>lateinit</code> 空检测和显式库函数调用，如 <code>checkNotNull</code> 或 <code>requireNotNull</code>。</p><p>此更改增加了 Kotlin 编译器或各种字节码处理工具（例如 Android <a href="https://developer.android.com/studio/build/shrink-code" target="_blank" rel="noreferrer">R8 优化器</a>）可以执行的空检测优化次数。</p><p>请注意，从开发者的角度来看，情况不会有太大变化：Kotlin 代码将像以前一样抛出带有相同错误消息的异常。异常类型改变了，但传递的信息保持不变。</p><h3 id="jvm-字节码中的类型注解" tabindex="-1">JVM 字节码中的类型注解 <a class="header-anchor" href="#jvm-字节码中的类型注解" aria-label="Permalink to &quot;JVM 字节码中的类型注解&quot;">​</a></h3><p>Kotlin 现在可以在 JVM 字节码（目标版本 1.8+）中生成类型注解，以便它们在运行时通过 Java 反射可用。 要在字节码中发出类型注解，请遵循以下步骤：</p><ol><li>确保你声明的注解具有正确的注解目标（Java 的 <code>ElementType.TYPE_USE</code> 或 Kotlin 的 <code>AnnotationTarget.TYPE</code>）和保留策略（<code>AnnotationRetention.RUNTIME</code>）。</li><li>将注解类声明编译到 JVM 字节码目标版本 1.8+。你可以使用 <code>-jvm-target=1.8</code> 编译器选项来指定它。</li><li>将使用注解的代码编译到 JVM 字节码目标版本 1.8+ (<code>-jvm-target=1.8</code>)，并添加 <code>-Xemit-jvm-type-annotations</code> 编译器选项。</li></ol><p>请注意，标准库中的类型注解目前不会在字节码中发出，因为标准库是使用目标版本 1.6 编译的。</p><p>目前只支持基本情况：</p><ul><li>方法形参、方法返回类型和属性类型上的类型注解；</li><li>类型实参的不型变投影，例如 <code>Smth&lt;@Ann Foo&gt;</code>、<code>Array&lt;@Ann Foo&gt;</code>。</li></ul><p>在下面的例子中，<code>String</code> 类型上的 <code>@Foo</code> 注解可以发出到字节码，然后被库代码使用：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(AnnotationTarget.TYPE)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">annotation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Foo</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> String </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;OK&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="kotlin-js" tabindex="-1">Kotlin/JS <a class="header-anchor" href="#kotlin-js" aria-label="Permalink to &quot;Kotlin/JS&quot;">​</a></h2><p>在 JS 平台上，Kotlin 1.4.0 提供了以下改进：</p><ul><li><a href="#new-gradle-dsl">新的 Gradle DSL</a></li><li><a href="#new-js-ir-backend">新的 JS IR 后端</a></li></ul><h3 id="新的-gradle-dsl" tabindex="-1">新的 Gradle DSL <a class="header-anchor" href="#新的-gradle-dsl" aria-label="Permalink to &quot;新的 Gradle DSL&quot;">​</a></h3><p><code>kotlin.js</code> Gradle 插件附带了调整后的 Gradle DSL，它提供了一些新的配置选项，并且与 <code>kotlin-multiplatform</code> 插件使用的 DSL 更紧密地对齐。一些最有影响力的变更包括：</p><ul><li>通过 <code>binaries.executable()</code> 显式切换可执行文件的创建。在此处阅读更多关于 <a href="/kotlin/js-project-setup#execution-environments">执行 Kotlin/JS 及其环境的信息</a>。</li><li>通过 <code>cssSupport</code> 从 Gradle 配置内部配置 webpack 的 CSS 和样式加载器。在此处阅读更多关于 <a href="/kotlin/js-project-setup#css">使用 CSS 和样式加载器</a> 的信息。</li><li>改进了 npm 依赖项管理，强制要求版本号或 <a href="https://docs.npmjs.com/about-semantic-versioning" target="_blank" rel="noreferrer">semver</a> 版本范围，以及使用 <code>devNpm</code>、<code>optionalNpm</code> 和 <code>peerNpm</code> 支持_开发_、<em>对等_和_可选</em> npm 依赖项。<a href="/kotlin/js-project-setup#npm-dependencies">在此处阅读更多关于直接从 Gradle 管理 npm 包依赖项</a> 的信息。</li><li>与 <a href="https://github.com/Kotlin/dukat" target="_blank" rel="noreferrer">Dukat</a>（Kotlin 外部声明生成器）更强的集成。外部声明现在可以在构建时生成，也可以通过 Gradle 任务手动生成。</li></ul><h3 id="新的-js-ir-后端" tabindex="-1">新的 JS IR 后端 <a class="header-anchor" href="#新的-js-ir-后端" aria-label="Permalink to &quot;新的 JS IR 后端&quot;">​</a></h3><p>Kotlin/JS 的 <a href="/kotlin/js-ir-compiler">IR 后端</a> 目前处于 <a href="/kotlin/components-stability">Alpha</a> 稳定级别，它提供了一些 Kotlin/JS 目标特有的新功能，主要关注通过无用代码消除来优化生成的代码大小，以及改进与 JavaScript 和 TypeScript 的互操作等。</p><p>要启用 Kotlin/JS IR 后端，请在 <code>gradle.properties</code> 中设置键 <code>kotlin.js.compiler=ir</code>，或者将 <code>IR</code> 编译器类型传递给 Gradle 构建脚本的 <code>js</code> 函数：</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kotlin {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    js(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">IR</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// or: LEGACY, BOTH</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    binaries</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">executable()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>有关如何配置新后端的更详细信息，请查看 <a href="/kotlin/js-ir-compiler">Kotlin/JS IR 编译器文档</a>。</p><p>通过新的 <a href="/kotlin/js-to-kotlin-interop#jsexport-annotation">@JsExport</a> 注解和从 Kotlin 代码中**<a href="/kotlin/js-ir-compiler#preview-generation-of-typescript-declaration-files-d-ts">生成 TypeScript 定义</a>** 的能力，Kotlin/JS IR 编译器后端改进了 JavaScript 和 TypeScript 的互操作性。这使得将 Kotlin/JS 代码与现有工具集成、创建<strong>混合应用程序</strong>并在多平台项目中利用代码共享功能变得更加容易。</p><p><a href="/kotlin/js-ir-compiler">了解更多关于 Kotlin/JS IR 编译器后端中的可用特性</a>。</p><h2 id="kotlin-native" tabindex="-1">Kotlin/Native <a class="header-anchor" href="#kotlin-native" aria-label="Permalink to &quot;Kotlin/Native&quot;">​</a></h2><p>在 1.4.0 中，Kotlin/Native 获得了大量新特性和改进，包括：</p><ul><li><a href="#support-for-kotlin-s-suspending-functions-in-swift-and-objective-c">在 Swift 和 Objective-C 中支持挂起函数</a></li><li><a href="#objective-c-generics-support-by-default">默认支持 Objective-C 泛型</a></li><li><a href="#exception-handling-in-objective-c-swift-interop">Objective-C/Swift 互操作中的异常处理</a></li><li><a href="#generate-release-dsyms-on-apple-targets-by-default">默认在 Apple 目标上生成 release .dSYMs</a></li><li><a href="#performance-improvements">性能改进</a></li><li><a href="#simplified-management-of-cocoapods-dependencies">简化 CocoaPods 依赖项管理</a></li></ul><h3 id="在-swift-和-objective-c-中支持-kotlin-的挂起函数" tabindex="-1">在 Swift 和 Objective-C 中支持 Kotlin 的挂起函数 <a class="header-anchor" href="#在-swift-和-objective-c-中支持-kotlin-的挂起函数" aria-label="Permalink to &quot;在 Swift 和 Objective-C 中支持 Kotlin 的挂起函数&quot;">​</a></h3><p>在 1.4.0 中，我们添加了对 Swift 和 Objective-C 中挂起函数的基本支持。现在，当你将 Kotlin 模块编译成 Apple framework 时，挂起函数在其中作为带有回调的函数（在 Swift/Objective-C 术语中为 <code>completionHandler</code>）可用。当你在生成的 framework 头文件中拥有此类函数时，你可以从 Swift 或 Objective-C 代码中调用它们，甚至覆盖它们。</p><p>例如，如果你编写以下 Kotlin 函数：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">suspend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> queryData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(id: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span></span></code></pre></div><p>……然后你可以在 Swift 中这样调用它：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">queryData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">17</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { result, error </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> error {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">       print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ERROR: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(e)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">       print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="/kotlin/native-objc-interop">了解更多关于在 Swift 和 Objective-C 中使用挂起函数的信息</a>。</p><h3 id="默认支持-objective-c-泛型" tabindex="-1">默认支持 Objective-C 泛型 <a class="header-anchor" href="#默认支持-objective-c-泛型" aria-label="Permalink to &quot;默认支持 Objective-C 泛型&quot;">​</a></h3><p>Kotlin 的早期版本为 Objective-C 互操作中的泛型提供了实验性支持。从 1.4.0 开始，Kotlin/Native 默认从 Kotlin 代码生成带有泛型的 Apple framework。在某些情况下，这可能会破坏调用 Kotlin framework 的现有 Objective-C 或 Swift 代码。要使 framework 头文件不带泛型，请添加 <code>-Xno-objc-generics</code> 编译器选项。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    targets.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">org</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jetbrains</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gradle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mpp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KotlinNativeTarget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        binaries.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            freeCompilerArgs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;-Xno-objc-generics&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>请注意，<a href="/kotlin/native-objc-interop#generics">与 Objective-C 互操作文档</a> 中列出的所有细节和限制仍然有效。</p><h3 id="objective-c-swift-互操作中的异常处理" tabindex="-1">Objective-C/Swift 互操作中的异常处理 <a class="header-anchor" href="#objective-c-swift-互操作中的异常处理" aria-label="Permalink to &quot;Objective-C/Swift 互操作中的异常处理&quot;">​</a></h3><p>在 1.4.0 中，我们稍微改变了从 Kotlin 生成的 Swift API，这涉及到异常的翻译方式。Kotlin 和 Swift 在错误处理上存在根本区别。所有 Kotlin 异常都是非受检的，而 Swift 只有受检错误。因此，为了让 Swift 代码感知预期的异常，Kotlin 函数应该使用 <code>@Throws</code> 注解标记，指定潜在的异常类列表。</p><p>当编译到 Swift 或 Objective-C framework 时，具有或继承 <code>@Throws</code> 注解的函数在 Objective-C 中表示为生成 <code>NSError*</code> 的方法，在 Swift 中表示为 <code>throws</code> 方法。</p><p>以前，除了 <code>RuntimeException</code> 和 <code>Error</code> 之外的任何异常都作为 <code>NSError</code> 传播。现在此行为改变了：现在 <code>NSError</code> 只针对作为 <code>@Throws</code> 注解形参（或其子类）指定类的实例的异常抛出。到达 Swift/Objective-C 的其他 Kotlin 异常被视为未处理，并导致程序终止。</p><h3 id="默认在-apple-目标上生成-release-dsyms" tabindex="-1">默认在 Apple 目标上生成 release .dSYMs <a class="header-anchor" href="#默认在-apple-目标上生成-release-dsyms" aria-label="Permalink to &quot;默认在 Apple 目标上生成 release .dSYMs&quot;">​</a></h3><p>从 1.4.0 开始，Kotlin/Native 编译器默认在 Darwin 平台上为发布二进制文件生成 <a href="https://developer.apple.com/documentation/xcode/building_your_app_to_include_debugging_information" target="_blank" rel="noreferrer">调试符号文件</a> (<code>.dSYM</code>)。这可以使用 <code>-Xadd-light-debug=disable</code> 编译器选项禁用。在其他平台上，此选项默认禁用。要在 Gradle 中切换此选项，请使用：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    targets.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">org</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">jetbrains</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gradle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">mpp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">KotlinNativeTarget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        binaries.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            freeCompilerArgs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;-Xadd-light-debug={enable|disable}&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="/kotlin/native-ios-symbolication">了解更多关于崩溃报告符号化的信息</a>。</p><h3 id="性能改进" tabindex="-1">性能改进 <a class="header-anchor" href="#性能改进" aria-label="Permalink to &quot;性能改进&quot;">​</a></h3><p>Kotlin/Native 获得了一系列性能改进，加速了开发过程和执行。 以下是一些例子：</p><ul><li><p>为了提高对象分配的速度，我们现在提供 <a href="https://github.com/microsoft/mimalloc" target="_blank" rel="noreferrer">mimalloc</a> 内存分配器作为系统分配器的替代品。mimalloc 在一些基准测试中速度提高多达两倍。目前，在 Kotlin/Native 中使用 mimalloc 尚属实验性的；你可以使用 <code>-Xallocator=mimalloc</code> 编译器选项切换到它。</p></li><li><p>我们重新设计了 C 互操作库的构建方式。使用新工具，Kotlin/Native 生成互操作库的速度比以前快 4 倍，且构件大小是原来的 25% 到 30%。</p></li><li><p>由于 GC 的优化，整体运行时性能得到改善。在具有大量长生命周期对象的项目中，这种改进将特别明显。<code>HashMap</code> 和 <code>HashSet</code> 集合现在通过避免冗余装箱工作得更快。</p></li><li><p>在 1.3.70 中，我们引入了两项新特性以提高 Kotlin/Native 编译性能：<a href="https://blog.jetbrains.com/kotlin/2020/03/kotlin-1-3-70-released/#kotlin-native" target="_blank" rel="noreferrer">缓存项目依赖项和从 Gradle 守护进程运行编译器</a>。从那时起，我们设法修复了许多问题并提高了这些特性的整体稳定性。</p></li></ul><h3 id="简化-cocoapods-依赖项管理" tabindex="-1">简化 CocoaPods 依赖项管理 <a class="header-anchor" href="#简化-cocoapods-依赖项管理" aria-label="Permalink to &quot;简化 CocoaPods 依赖项管理&quot;">​</a></h3><p>以前，一旦你将项目与 CocoaPods 依赖项管理器集成，你只能在 Xcode 中构建项目的 iOS、macOS、watchOS 或 tvOS 部分，而不能与多平台项目的其他部分一起构建。这些其他部分可以在 IntelliJ IDEA 中构建。</p><p>而且，每当你添加对存储在 CocoaPods 中的 Objective-C 库（Pod 库）的依赖项时，你都必须从 IntelliJ IDEA 切换到 Xcode，调用 <code>pod install</code>，并在那里运行 Xcode 构建。</p><p>现在你可以在 IntelliJ IDEA 中直接管理 Pod 依赖项，同时享受它在代码工作方面提供的便利，例如代码高亮和补全。你还可以使用 Gradle 构建整个 Kotlin 项目，无需切换到 Xcode。这意味着你只需在需要编写 Swift/Objective-C 代码或在模拟器或设备上运行应用程序时才需要前往 Xcode。</p><p>你也可以处理本地存储的 Pod 库。</p><p>根据你的需求，你可以在以下两者之间添加依赖项：</p><ul><li>Kotlin 项目与存储在 CocoaPods 版本库中或本地机器上的 Pod 库之间。</li><li>Kotlin Pod（用作 CocoaPods 依赖项的 Kotlin 项目）与带有一个或多个目标的 Xcode 项目之间。</li></ul><p>完成初始配置后，当你向 <code>cocoapods</code> 添加新的依赖项时，只需在 IntelliJ IDEA 中重新导入项目。新依赖项将自动添加。无需额外步骤。</p><p><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-cocoapods-libraries.html" target="_blank" rel="noreferrer">了解如何添加依赖项</a>。</p><h2 id="kotlin-多平台" tabindex="-1">Kotlin 多平台 <a class="header-anchor" href="#kotlin-多平台" aria-label="Permalink to &quot;Kotlin 多平台&quot;">​</a></h2><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>多平台项目支持目前处于 <a href="/kotlin/components-stability">Alpha</a> 阶段。未来可能会发生不兼容的更改，并需要手动迁移。我们感谢你在 <a href="https://youtrack.jetbrains.com/issues/KT" target="_blank" rel="noreferrer">YouTrack</a> 上提供反馈。</p></div><p><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/get-started.html" target="_blank" rel="noreferrer">Kotlin 多平台</a> 减少了为 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-dsl-reference.html#targets" target="_blank" rel="noreferrer">不同平台</a> 编写和维护相同代码的时间，同时保留了原生编程的灵活性和优势。我们继续投入精力在多平台特性和改进上：</p><ul><li><a href="#sharing-code-in-several-targets-with-the-hierarchical-project-structure">通过分层项目结构在多个目标之间共享代码</a></li><li><a href="#leveraging-native-libs-in-the-hierarchical-structure">在分层结构中利用原生库</a></li><li><a href="#specifying-dependencies-only-once">只指定一次 kotlinx 依赖项</a></li></ul><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>多平台项目需要 Gradle 6.0 或更高版本。</p></div><h3 id="通过分层项目结构在多个目标之间共享代码" tabindex="-1">通过分层项目结构在多个目标之间共享代码 <a class="header-anchor" href="#通过分层项目结构在多个目标之间共享代码" aria-label="Permalink to &quot;通过分层项目结构在多个目标之间共享代码&quot;">​</a></h3><p>通过新的分层项目结构支持，你可以在 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-discover-project.html" target="_blank" rel="noreferrer">多平台项目</a> 中，在 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-dsl-reference.html#targets" target="_blank" rel="noreferrer">多个平台</a> 之间共享代码。</p><p>以前，添加到多平台项目中的任何代码都可以放在平台特有的源代码集（仅限于一个目标且不能被任何其他平台复用）中，或者放在公共源代码集（例如 <code>commonMain</code> 或 <code>commonTest</code>，在项目中的所有平台之间共享）中。在公共源代码集中，你只能通过使用需要平台特有 <code>actual</code> 实现的 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-expect-actual.html" target="_blank" rel="noreferrer"><code>expect</code> 声明</a> 来调用平台特有 API。</p><p>这使得在 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-share-on-platforms.html#share-code-on-all-platforms" target="_blank" rel="noreferrer">所有平台</a> 上共享代码变得容易，但在 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-share-on-platforms.html#share-code-on-similar-platforms" target="_blank" rel="noreferrer">部分目标之间</a> 共享代码就不那么容易了，特别是那些可能复用大量公共逻辑和第三方 API 的相似平台。</p><p>例如，在典型的面向 iOS 的多平台项目中，有两个与 iOS 相关的目标：一个用于 iOS ARM64 设备，另一个用于 x64 模拟器。它们有独立的平台特有源代码集，但实际上，设备和模拟器的代码很少需要不同，它们的依赖项也大同小异。因此 iOS 特有代码可以在它们之间共享。</p><p>在这种设置下，最好能有一个<em>供两个 iOS 目标共享的源代码集</em>，其中包含的 Kotlin/Native 代码仍然可以直接调用 iOS 设备和模拟器共有的任何 API。</p><p><img src="`+E+`" alt="iOS 目标共享的代码" width="300"></p><p>现在你可以通过 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-share-on-platforms.html#share-code-on-similar-platforms" target="_blank" rel="noreferrer">分层项目结构支持</a> 来实现，它根据哪些目标使用它们来推断和调整每个源代码集中可用的 API 和语言特性。</p><p>对于常见的目标组合，你可以创建带有目标快捷方式的分层结构。 例如，使用 <code>ios()</code> 快捷方式创建两个 iOS 目标和上面所示的共享源代码集：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    ios</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// iOS 设备和模拟器目标；iosMain 和 iosTest 源代码集</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>对于其他目标组合，可以通过 <code>dependsOn</code> 关系连接源代码集来 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-hierarchy.html#manual-configuration" target="_blank" rel="noreferrer">手动创建层次结构</a>。</p><p><img src="`+g+'" alt="分层结构"></p>',190)),n(h,{group:"build-script"},{default:l(()=>[n(t,{title:"Kotlin","group-key":"kotlin"},{default:l(()=>a[2]||(a[2]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"{")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    sourceSets"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"        val"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," desktopMain "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"by"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," creating"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"            dependsOn"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(commonMain)")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"        val"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," linuxX64Main "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"by"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," getting"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"            dependsOn"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(desktopMain)")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"        val"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," mingwX64Main "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"by"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," getting"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"            dependsOn"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(desktopMain)")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"        val"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," macosX64Main "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"by"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," getting"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"            dependsOn"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"(desktopMain)")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),n(t,{title:"Groovy","group-key":"groovy"},{default:l(()=>a[3]||(a[3]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"kotlin {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    sourceSets {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        desktopMain {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            dependsOn(commonMain)")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        linuxX64Main {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            dependsOn(desktopMain)")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        mingwX64Main {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            dependsOn(desktopMain)")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        macosX64Main {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            dependsOn(desktopMain)")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),a[8]||(a[8]=e('<p>得益于分层项目结构，库也可以为目标的子集提供公共 API。了解更多关于 <a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-share-on-platforms.html#share-code-in-libraries" target="_blank" rel="noreferrer">在库中共享代码</a> 的信息。</p><h3 id="在分层结构中利用原生库" tabindex="-1">在分层结构中利用原生库 <a class="header-anchor" href="#在分层结构中利用原生库" aria-label="Permalink to &quot;在分层结构中利用原生库&quot;">​</a></h3><p>在多个原生目标之间共享的源代码集中，你可以使用平台依赖库，例如 Foundation、UIKit 和 POSIX。这可以帮助你共享更多原生代码，而不受平台特有依赖项的限制。</p><p>无需额外步骤 – 一切都是自动完成的。IntelliJ IDEA 将帮助你检测可以在共享代码中使用的公共声明。</p><p><a href="https://www.jetbrains.com/help/kotlin-multiplatform-dev/multiplatform-share-on-platforms.html#connect-platform-specific-libraries" target="_blank" rel="noreferrer">了解更多关于平台依赖库使用方法的信息</a>。</p><h3 id="只指定一次-kotlinx-依赖项" tabindex="-1">只指定一次 kotlinx 依赖项 <a class="header-anchor" href="#只指定一次-kotlinx-依赖项" aria-label="Permalink to &quot;只指定一次 kotlinx 依赖项&quot;">​</a></h3><p>从现在开始，在使用共享和平台特有源代码集时，你只需指定一次对同一库的不同变体的依赖项，而无需多次指定。</p>',7)),n(h,{group:"build-script"},{default:l(()=>[n(t,{title:"Kotlin","group-key":"kotlin"},{default:l(()=>a[4]||(a[4]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"    sourceSets"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"        val"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," commonMain "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"by"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}}," getting"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"            dependencies"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}}," {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"                implementation"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"("),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},'"org.jetbrains.kotlinx:kotlinx-coroutines-core:1.10.2"'),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),n(t,{title:"Groovy","group-key":"groovy"},{default:l(()=>a[5]||(a[5]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"kotlin {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    sourceSets {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        commonMain {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            dependencies {")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"                implementation "),i("span",{style:{"--shiki-light":"#032F62","--shiki-dark":"#9ECBFF"}},"'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.10.2'")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"            }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"        }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    }")]),s(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1}),a[9]||(a[9]=e('<p>不要再使用带有指定平台后缀的 kotlinx 库构件名称，例如 <code>-common</code>、<code>-native</code> 或类似名称，因为它们不再受支持。请使用库的基础构件名称，在上面的例子中是 <code>kotlinx-coroutines-core</code>。</p><p>然而，此更改目前不影响：</p><ul><li><code>stdlib</code> 库 – 从 Kotlin 1.4.0 开始，<a href="#dependency-on-the-standard-library-added-by-default">stdlib 依赖项会自动添加</a>。</li><li><code>kotlin.test</code> 库 – 你仍然应该使用 <code>test-common</code> 和 <code>test-annotations-common</code>。这些依赖项将在稍后处理。</li></ul><p>如果你只对特定平台需要依赖项，仍然可以使用带有 <code>-jvm</code> 或 <code>-js</code> 等后缀的标准和 kotlinx 库的平台特有变体，例如 <code>kotlinx-coroutines-core-jvm</code>。</p><p><a href="/kotlin/gradle-configure-project#configure-dependencies">了解更多关于配置依赖项的信息</a>。</p><h2 id="gradle-项目改进" tabindex="-1">Gradle 项目改进 <a class="header-anchor" href="#gradle-项目改进" aria-label="Permalink to &quot;Gradle 项目改进&quot;">​</a></h2><p>除了 <a href="#kotlin-multiplatform">Kotlin 多平台</a>、<a href="#kotlin-jvm">Kotlin/JVM</a>、<a href="#kotlin-native">Kotlin/Native</a> 和 <a href="#kotlin-js">Kotlin/JS</a> 特有的 Gradle 项目特性和改进之外，还有一些适用于所有 Kotlin Gradle 项目的更改：</p><ul><li><a href="#dependency-on-the-standard-library-added-by-default">标准库依赖项现在默认添加</a></li><li><a href="#minimum-gradle-version-for-kotlin-projects">Kotlin 项目需要最新版本的 Gradle</a></li><li><a href="#improved-gradle-kts-support-in-the-ide">改进了 IDE 对 Kotlin Gradle DSL 的支持</a></li></ul><h3 id="标准库依赖项现在默认添加" tabindex="-1">标准库依赖项现在默认添加 <a class="header-anchor" href="#标准库依赖项现在默认添加" aria-label="Permalink to &quot;标准库依赖项现在默认添加&quot;">​</a></h3><p>你不再需要在任何 Kotlin Gradle 项目（包括多平台项目）中声明对 <code>stdlib</code> 库的依赖项。该依赖项默认添加。</p><p>自动添加的标准库将与 Kotlin Gradle 插件版本相同，因为它们具有相同的版本控制。</p><p>对于平台特有源代码集，将使用库的相应平台特有变体，而公共标准库则添加到其余部分。Kotlin Gradle 插件将根据 Gradle 构建脚本的 <code>kotlinOptions.jvmTarget</code> <a href="/kotlin/gradle-compiler-options">编译器选项</a> 选择合适的 JVM 标准库。</p><p><a href="/kotlin/gradle-configure-project#dependency-on-the-standard-library">了解如何更改默认行为</a>。</p><h3 id="kotlin-项目需要最新版本的-gradle" tabindex="-1">Kotlin 项目需要最新版本的 Gradle <a class="header-anchor" href="#kotlin-项目需要最新版本的-gradle" aria-label="Permalink to &quot;Kotlin 项目需要最新版本的 Gradle&quot;">​</a></h3><p>要在你的 Kotlin 项目中享受新特性，请将 Gradle 更新到 <a href="https://gradle.org/releases/" target="_blank" rel="noreferrer">最新版本</a>。多平台项目需要 Gradle 6.0 或更高版本，而其他 Kotlin 项目则适用于 Gradle 5.4 或更高版本。</p><h3 id="改进了-ide-对-gradle-kts-的支持" tabindex="-1">改进了 IDE 对 *.gradle.kts 的支持 <a class="header-anchor" href="#改进了-ide-对-gradle-kts-的支持" aria-label="Permalink to &quot;改进了 IDE 对 *.gradle.kts 的支持&quot;">​</a></h3><p>在 1.4.0 中，我们继续改进 IDE 对 Gradle Kotlin DSL 脚本（<code>*.gradle.kts</code> 文件）的支持。新版本带来了：</p><ul><li><p>_显式加载脚本配置_以获得更好的性能。以前，你对构建脚本所做的更改会在后台自动加载。为了提高性能，我们在 1.4.0 中禁用了构建脚本配置的自动加载。现在 IDE 只在你显式应用更改时加载它们。</p><p>在 Gradle 6.0 之前的版本中，你需要通过在编辑器中单击 <strong>Load Configuration</strong>（加载配置）来手动加载脚本配置。</p><p><img src="'+c+'" alt="*.gradle.kts – 加载配置"></p><p>在 Gradle 6.0 及更高版本中，你可以通过单击 <strong>Load Gradle Changes</strong>（加载 Gradle 更改）或重新导入 Gradle 项目来显式应用更改。</p><p>在 IntelliJ IDEA 2020.1 中（Gradle 6.0 及更高版本），我们新增了一个操作——<strong>Load Script Configurations</strong>（加载脚本配置），它加载脚本配置的更改而无需更新整个项目。这比重新导入整个项目所需时间少得多。</p><p><img src="'+y+'" alt="*.gradle.kts – 加载脚本更改和加载 Gradle 更改"></p><p>对于新创建的脚本，或者当你首次使用新的 Kotlin 插件打开项目时，你也应该<strong>加载脚本配置</strong>。</p><p>在 Gradle 6.0 及更高版本，你现在可以一次性加载所有脚本，而不是像以前那样单独加载。由于每个请求都需要执行 Gradle 配置阶段，这对于大型 Gradle 项目来说可能会占用大量资源。</p><p>目前，此类加载仅限于 <code>build.gradle.kts</code> 和 <code>settings.gradle.kts</code> 文件（请为相关 <a href="https://github.com/gradle/gradle/issues/12640" target="_blank" rel="noreferrer">问题</a> 投票）。 要为 <code>init.gradle.kts</code> 或应用的 <a href="https://docs.gradle.org/current/userguide/plugins.html#sec:script_plugins" target="_blank" rel="noreferrer">脚本插件</a> 启用高亮显示，请使用旧机制——将它们添加到独立脚本中。这些脚本的配置将在你需要时单独加载。 你还可以为这些脚本启用自动重载。</p><p><img src="'+F+`" alt="*.gradle.kts – 添加到独立脚本"></p></li><li><p><em>更好的错误报告</em>。以前你只能在单独的日志文件中看到 Gradle Daemon 的错误。现在 Gradle Daemon 直接返回所有错误信息，并在构建工具窗口中显示。这为你节省了时间和精力。</p></li></ul><h2 id="标准库" tabindex="-1">标准库 <a class="header-anchor" href="#标准库" aria-label="Permalink to &quot;标准库&quot;">​</a></h2><p>以下是 Kotlin 1.4.0 中 Kotlin 标准库最显著的变更列表：</p><ul><li><a href="#common-exception-processing-api">通用异常处理 API</a></li><li><a href="#new-functions-for-arrays-and-collections">数组和集合的新函数</a></li><li><a href="#functions-for-string-manipulations">字符串操作函数</a></li><li><a href="#bit-operations">位操作</a></li><li><a href="#delegated-properties-improvements">委派属性改进</a></li><li><a href="#converting-from-ktype-to-java-type">从 KType 到 Java Type 的转换</a></li><li><a href="#proguard-configurations-for-kotlin-reflection">Kotlin 反射的 Proguard 配置</a></li><li><a href="#improving-the-existing-api">改进现有 API</a></li><li><a href="#module-info-descriptors-for-stdlib-artifacts">stdlib 构件的 module-info 描述符</a></li><li><a href="#deprecations">弃用</a></li><li><a href="#exclusion-of-the-deprecated-experimental-coroutines">排除已弃用的实验性协程</a></li></ul><h3 id="通用异常处理-api" tabindex="-1">通用异常处理 API <a class="header-anchor" href="#通用异常处理-api" aria-label="Permalink to &quot;通用异常处理 API&quot;">​</a></h3><p>以下 API 元素已移至公共库：</p><ul><li><code>Throwable.stackTraceToString()</code> 扩展函数，它返回此可抛出对象及其堆栈跟踪的详细描述；以及 <code>Throwable.printStackTrace()</code>，它将此描述打印到标准错误输出。</li><li><code>Throwable.addSuppressed()</code> 函数，它允许你指定为传递异常而被抑制的异常；以及 <code>Throwable.suppressedExceptions</code> 属性，它返回所有被抑制异常的列表。</li><li><code>@Throws</code> 注解，它列出了当函数编译为平台方法（在 JVM 或原生平台上）时将进行检测的异常类型。</li></ul><h3 id="数组和集合的新函数" tabindex="-1">数组和集合的新函数 <a class="header-anchor" href="#数组和集合的新函数" aria-label="Permalink to &quot;数组和集合的新函数&quot;">​</a></h3><h4 id="集合" tabindex="-1">集合 <a class="header-anchor" href="#集合" aria-label="Permalink to &quot;集合&quot;">​</a></h4><p>在 1.4.0 中，标准库包含许多用于处理<strong>集合</strong>的有用函数：</p><ul><li><p><code>setOfNotNull()</code>，它创建一个由所提供实参中所有非空项组成的 set。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> set</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setOfNotNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>序列的 <code>shuffled()</code>。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> numbers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> until </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">asSequence</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> numbers.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">shuffled</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">take</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//小于 100 的五个随机偶数</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><code>onEach()</code> 和 <code>flatMap()</code> 的 <code>*Indexed()</code> 对应函数。 它们应用于集合元素的操作以元素索引作为形参。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;b&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;d&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onEachIndexed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        index, item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(index.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;:&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> item)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> list </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;kot&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;lin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;world&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">          val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> kotlin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> list.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">flatMapIndexed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { index, item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">              if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) item.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> emptyList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(kotlin)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><code>randomOrNull()</code>、<code>reduceOrNull()</code> 和 <code>reduceIndexedOrNull()</code> 的 <code>*OrNull()</code> 对应函数。 它们在空集合上返回 <code>null</code>。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> empty </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> emptyList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     empty.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reduceOrNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { a, b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">     //empty.reduce { a, b -&gt; a + b }</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 异常：空集合无法归约。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><code>runningFold()</code>、其同义词 <code>scan()</code> 和 <code>runningReduce()</code> 顺序地对集合元素应用给定操作，类似于 <code>fold()</code> 和 <code>reduce()</code>；不同之处在于这些新函数返回整个中间结果序列。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> numbers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mutableListOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> runningReduceSum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> numbers.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">runningReduce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { sum, item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> item }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> runningFoldSum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> numbers.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">runningFold</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { sum, item </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> item }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(runningReduceSum.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(runningFoldSum.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><code>sumOf()</code> 接受一个选择器函数，并返回集合所有元素的函数值的总和。 <code>sumOf()</code> 可以生成 <code>Int</code>、<code>Long</code>、<code>Double</code>、<code>UInt</code> 和 <code>ULong</code> 类型的总和。在 JVM 上，<code>BigInteger</code> 和 <code>BigDecimal</code> 也可用。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OrderItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> price: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> count: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> order </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OrderItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        OrderItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Cake&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, price </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        OrderItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Coffee&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, price </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        OrderItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Tea&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, price </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> total </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> order.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sumOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.price </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> it.count } </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Double</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> order.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sumOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.count } </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Int</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;你总共订购了 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$count</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 件商品，总价为 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$total</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><code>min()</code> 和 <code>max()</code> 函数已重命名为 <code>minOrNull()</code> 和 <code>maxOrNull()</code>，以符合 Kotlin 集合 API 中使用的命名约定。函数名中的 <code>*OrNull</code> 后缀表示如果接收集合为空，它将返回 <code>null</code>。同样适用于 <code>minBy()</code>、<code>maxBy()</code>、<code>minWith()</code>、<code>maxWith()</code> – 在 1.4 中，它们具有 <code>*OrNull()</code> 同义词。</p></li><li><p>新的 <code>minOf()</code> 和 <code>maxOf()</code> 扩展函数返回给定选择器函数在集合项上的最小值和最大值。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OrderItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> price: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> count: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> order </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">OrderItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        OrderItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Cake&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, price </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        OrderItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Coffee&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, price </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        OrderItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Tea&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, price </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> highestPrice </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> order.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">maxOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.price }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;订单中最贵的商品价格为 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$highestPrice</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>还有 <code>minOfWith()</code> 和 <code>maxOfWith()</code>，它们接受一个 <code>Comparator</code> 作为实参，以及所有四个函数的 <code>*OrNull()</code> 版本，它们在空集合上返回 <code>null</code>。</p></li><li><p><code>flatMap</code> 和 <code>flatMapTo</code> 的新重载允许你使用返回类型与接收者类型不匹配的转换，即：</p><ul><li>在 <code>Iterable</code>、<code>Array</code> 和 <code>Map</code> 上转换为 <code>Sequence</code></li><li>在 <code>Sequence</code> 上转换为 <code>Iterable</code></li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> list </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;kot&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;lin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lettersList </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> list.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">flatMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">asSequence</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lettersSeq </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> list.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">asSequence</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">flatMap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }    </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lettersList)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(lettersSeq.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>用于从可变 list 中移除元素的 <code>removeFirst()</code> 和 <code>removeLast()</code> 快捷方式，以及这些函数的 <code>*orNull()</code> 对应函数。</p></li></ul><h4 id="数组" tabindex="-1">数组 <a class="header-anchor" href="#数组" aria-label="Permalink to &quot;数组&quot;">​</a></h4><p>为了在处理不同容器类型时提供一致的体验，我们还为<strong>数组</strong>添加了新函数：</p><ul><li><code>shuffle()</code> 将数组元素按随机顺序排列。</li><li><code>onEach()</code> 对每个数组元素执行给定操作并返回数组本身。</li><li><code>associateWith()</code> 和 <code>associateWithTo()</code> 以数组元素作为键构建 map。</li><li>数组子区间的 <code>reverse()</code> 反转子区间中元素的顺序。</li><li>数组子区间的 <code>sortDescending()</code> 以降序对子区间中的元素进行排序。</li><li>数组子区间的 <code>sort()</code> 和 <code>sortWith()</code> 现在在公共库中可用。</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> language </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> letters </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> arrayOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;k&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;o&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;t&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;l&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;i&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;n&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fileExt </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> letters.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { language </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> it }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">filterNot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;aeuio&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">take</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">joinToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(prefix </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, separator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(language) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;kotlin&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fileExt) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;.kt&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    letters.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">shuffle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    letters.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reverse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    letters.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sortDescending</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(letters.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">contentToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [k, o, t, l, i, n]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>此外，还有用于 <code>CharArray</code>/<code>ByteArray</code> 和 <code>String</code> 之间转换的新函数：</p><ul><li><code>ByteArray.decodeToString()</code> 和 <code>String.encodeToByteArray()</code></li><li><code>CharArray.concatToString()</code> 和 <code>String.toCharArray()</code></li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;kotlin&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> array </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toCharArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(array.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">concatToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="arraydeque" tabindex="-1">ArrayDeque <a class="header-anchor" href="#arraydeque" aria-label="Permalink to &quot;ArrayDeque&quot;">​</a></h4><p>我们还添加了 <code>ArrayDeque</code> 类 – 双端队列的实现。 双端队列允许你在队列的开头或结尾以分摊的常数时间添加或移除元素。当你的代码中需要队列或堆栈时，你可以默认使用双端队列。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> deque </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ArrayDeque</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    deque.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addFirst</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    deque.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addLast</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(deque) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [0, 1, 2, 3, 4]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(deque.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">first</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 0</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(deque.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">last</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 4</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    deque.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">removeFirst</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    deque.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">removeLast</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(deque) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [1, 2, 3]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>ArrayDeque</code> 实现底层使用了一个可变大小的数组：它将内容存储在循环缓冲区（一个 <code>Array</code>）中，并且仅当 <code>Array</code> 满了时才调整其大小。</p><h3 id="字符串操作函数" tabindex="-1">字符串操作函数 <a class="header-anchor" href="#字符串操作函数" aria-label="Permalink to &quot;字符串操作函数&quot;">​</a></h3><p>标准库在 1.4.0 中包含字符串操作 API 中的多项改进：</p><ul><li><p><code>StringBuilder</code> 具有有用的新扩展函数：<code>set()</code>、<code>setRange()</code>、<code>deleteAt()</code>、<code>deleteRange()</code>、<code>appendRange()</code> 等。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sb </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> StringBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Bye Kotlin 1.3.72&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        sb.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">deleteRange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        sb.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">insertRange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        sb.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">15</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;4&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        sb.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setRange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">17</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">19</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sb.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre></div></li><li><p><code>StringBuilder</code> 的一些现有函数在公共库中可用。其中包括 <code>append()</code>、<code>insert()</code>、<code>substring()</code>、<code>setLength()</code> 等。</p></li><li><p>新的 <code>Appendable.appendLine()</code> 和 <code>StringBuilder.appendLine()</code> 函数已添加到公共库中。它们替换了这些类的仅 JVM 可用的 <code>appendln()</code> 函数。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">buildString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        appendLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello,&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        appendLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;world&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><h3 id="位操作" tabindex="-1">位操作 <a class="header-anchor" href="#位操作" aria-label="Permalink to &quot;位操作&quot;">​</a></h3><p>位操作的新函数：</p><ul><li><code>countOneBits()</code></li><li><code>countLeadingZeroBits()</code></li><li><code>countTrailingZeroBits()</code></li><li><code>takeHighestOneBit()</code></li><li><code>takeLowestOneBit()</code></li><li><code>rotateLeft()</code> 和 <code>rotateRight()</code>（实验性的）</li></ul><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> number </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1010000&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(radix </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(number.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">countOneBits</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(number.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">countTrailingZeroBits</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(number.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">takeHighestOneBit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="委派属性改进" tabindex="-1">委派属性改进 <a class="header-anchor" href="#委派属性改进" aria-label="Permalink to &quot;委派属性改进&quot;">​</a></h3><p>在 1.4.0 中，我们添加了新特性以改善你在 Kotlin 中使用委派属性的体验：</p><ul><li>一个属性可以委派给另一个属性。</li><li>新的 <code>PropertyDelegateProvider</code> 接口有助于在单个声明中创建委托提供者。</li><li><code>ReadWriteProperty</code> 现在继承 <code>ReadOnlyProperty</code>，因此你可以将它们都用于只读属性。</li></ul><p>除了新的 API，我们还进行了一些优化，减少了生成的字节码大小。这些优化在 <a href="https://blog.jetbrains.com/kotlin/2019/12/what-to-expect-in-kotlin-1-4-and-beyond/#delegated-properties" target="_blank" rel="noreferrer">这篇博客文章</a> 中有所描述。</p><p><a href="/kotlin/delegated-properties">了解更多关于委派属性的信息</a>。</p><h3 id="从-ktype-到-java-type-的转换" tabindex="-1">从 KType 到 Java Type 的转换 <a class="header-anchor" href="#从-ktype-到-java-type-的转换" aria-label="Permalink to &quot;从 KType 到 Java Type 的转换&quot;">​</a></h3><p>stdlib 中新的扩展属性 <code>KType.javaType</code>（目前为实验性的）可帮助你在不使用整个 <code>kotlin-reflect</code> 依赖项的情况下，从 Kotlin 类型中获取 <code>java.lang.reflect.Type</code>。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.reflect.javaType</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.reflect.typeOf</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalStdlibApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">inline</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reified</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">accessReifiedTypeArg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> kType </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> typeOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Kotlin type: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$kType</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Java type: \${kType.javaType}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalStdlibApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   accessReifiedTypeArg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // Kotlin type: kotlin.String</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // Java type: class java.lang.String</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   accessReifiedTypeArg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt;()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // Kotlin type: kotlin.collections.List&lt;kotlin.String&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // Java type: java.util.List&lt;java.lang.String&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="kotlin-反射的-proguard-配置" tabindex="-1">Kotlin 反射的 Proguard 配置 <a class="header-anchor" href="#kotlin-反射的-proguard-配置" aria-label="Permalink to &quot;Kotlin 反射的 Proguard 配置&quot;">​</a></h3><p>从 1.4.0 开始，我们已在 <code>kotlin-reflect.jar</code> 中嵌入了 Kotlin 反射的 Proguard/R8 配置。这样，大多数使用 R8 或 Proguard 的 Android 项目在使用 kotlin-reflect 时无需任何额外配置即可工作。你不再需要复制粘贴 kotlin-reflect 内部的 Proguard 规则。但请注意，你仍然需要显式列出所有你将要反射的 API。</p><h3 id="改进现有-api" tabindex="-1">改进现有 API <a class="header-anchor" href="#改进现有-api" aria-label="Permalink to &quot;改进现有 API&quot;">​</a></h3><ul><li><p>一些函数现在可以在空接收者上工作，例如：</p><ul><li>字符串上的 <code>toBoolean()</code></li><li>数组上的 <code>contentEquals()</code>、<code>contentHashcode()</code>、<code>contentToString()</code></li></ul></li><li><p><code>Double</code> 和 <code>Float</code> 中的 <code>NaN</code>、<code>NEGATIVE_INFINITY</code> 和 <code>POSITIVE_INFINITY</code> 现在定义为 <code>const</code>，因此你可以将它们用作注解实参。</p></li><li><p><code>Double</code> 和 <code>Float</code> 中的新常量 <code>SIZE_BITS</code> 和 <code>SIZE_BYTES</code> 包含用于以二进制形式表示类型实例的位数和字节数。</p></li><li><p><code>maxOf()</code> 和 <code>minOf()</code> 顶层函数可以接受可变数量的实参 (<code>vararg</code>)。</p></li></ul><h3 id="stdlib-构件的-module-info-描述符" tabindex="-1">stdlib 构件的 module-info 描述符 <a class="header-anchor" href="#stdlib-构件的-module-info-描述符" aria-label="Permalink to &quot;stdlib 构件的 module-info 描述符&quot;">​</a></h3><p>Kotlin 1.4.0 为默认标准库构件添加了 <code>module-info.java</code> 模块信息。这使你可以将它们与 <a href="https://docs.oracle.com/en/java/javase/11/tools/jlink.html" target="_blank" rel="noreferrer">jlink 工具</a> 一起使用，该工具生成仅包含应用程序所需平台模块的自定义 Java 运行时镜像。 你已经可以使用 jlink 与 Kotlin 标准库构件，但你必须为此使用单独的构件——带有“modular”分类器的构件——并且整个设置并不简单。 在 Android 中，请确保使用 Android Gradle 插件版本 3.2 或更高版本，它能正确处理带有 module-info 的 jar 文件。</p><h3 id="弃用" tabindex="-1">弃用 <a class="header-anchor" href="#弃用" aria-label="Permalink to &quot;弃用&quot;">​</a></h3><h4 id="double-和-float-的-toshort-和-tobyte" tabindex="-1">Double 和 Float 的 toShort() 和 toByte() <a class="header-anchor" href="#double-和-float-的-toshort-和-tobyte" aria-label="Permalink to &quot;Double 和 Float 的 toShort() 和 toByte()&quot;">​</a></h4><p>我们已弃用 <code>Double</code> 和 <code>Float</code> 上的 <code>toShort()</code> 和 <code>toByte()</code> 函数，因为它们可能由于值范围窄和变量大小小而导致意外结果。</p><p>要将浮点数转换为 <code>Byte</code> 或 <code>Short</code>，请使用两步转换：首先，将它们转换为 <code>Int</code>，然后再次将它们转换为目标类型。</p><h4 id="浮点数组上的-contains-、indexof-和-lastindexof" tabindex="-1">浮点数组上的 contains()、indexOf() 和 lastIndexOf() <a class="header-anchor" href="#浮点数组上的-contains-、indexof-和-lastindexof" aria-label="Permalink to &quot;浮点数组上的 contains()、indexOf() 和 lastIndexOf()&quot;">​</a></h4><p>我们已弃用 <code>FloatArray</code> 和 <code>DoubleArray</code> 的 <code>contains()</code>、<code>indexOf()</code> 和 <code>lastIndexOf()</code> 扩展函数，因为它们使用了 <a href="https://en.wikipedia.org/wiki/IEEE_754" target="_blank" rel="noreferrer">IEEE 754</a> 标准相等性，这在某些特殊情况下与全序相等性相矛盾。有关详细信息，请参见 <a href="https://youtrack.jetbrains.com/issue/KT-28753" target="_blank" rel="noreferrer">此问题</a>。</p><h4 id="min-和-max-集合函数" tabindex="-1">min() 和 max() 集合函数 <a class="header-anchor" href="#min-和-max-集合函数" aria-label="Permalink to &quot;min() 和 max() 集合函数&quot;">​</a></h4><p>我们已弃用 <code>min()</code> 和 <code>max()</code> 集合函数，转而使用 <code>minOrNull()</code> 和 <code>maxOrNull()</code>，它们更能正确反映其行为——在空集合上返回 <code>null</code>。 有关详细信息，请参见 <a href="https://youtrack.jetbrains.com/issue/KT-38854" target="_blank" rel="noreferrer">此问题</a>。</p><h3 id="排除已弃用的实验性协程" tabindex="-1">排除已弃用的实验性协程 <a class="header-anchor" href="#排除已弃用的实验性协程" aria-label="Permalink to &quot;排除已弃用的实验性协程&quot;">​</a></h3><p><code>kotlin.coroutines.experimental</code> API 在 1.3.0 中已弃用，取而代之的是 kotlin.coroutines。在 1.4.0 中，我们通过从标准库中移除 <code>kotlin.coroutines.experimental</code> 来完成其弃用周期。对于仍然在 JVM 上使用它的开发者，我们提供了一个兼容构件 <code>kotlin-coroutines-experimental-compat.jar</code>，其中包含所有实验性协程 API。我们已将其发布到 Maven，并将其与标准库一起包含在 Kotlin 发行版中。</p><h2 id="稳定的-json-序列化" tabindex="-1">稳定的 JSON 序列化 <a class="header-anchor" href="#稳定的-json-序列化" aria-label="Permalink to &quot;稳定的 JSON 序列化&quot;">​</a></h2><p>随着 Kotlin 1.4.0 的发布，我们将推出 <a href="https://github.com/Kotlin/kotlinx.serialization" target="_blank" rel="noreferrer">kotlinx.serialization</a> 的第一个稳定版本 - 1.0.0-RC。现在我们很高兴声明 <code>kotlinx-serialization-core</code>（以前称为 <code>kotlinx-serialization-runtime</code>）中的 JSON 序列化 API 已稳定。其他序列化格式的库以及核心库的一些高级部分仍处于实验性阶段。</p><p>我们大幅重构了 JSON 序列化的 API，使其更一致、更易于使用。从现在开始，我们将继续以向后兼容的方式开发 JSON 序列化 API。 然而，如果你使用过之前的版本，在迁移到 1.0.0-RC 时，你需要重写一些代码。为了帮助你解决此问题，我们还提供了 <strong><a href="https://github.com/Kotlin/kotlinx.serialization/blob/master/docs/serialization-guide.md" target="_blank" rel="noreferrer">Kotlin 序列化指南</a></strong> – <code>kotlinx.serialization</code> 的完整文档集。它将指导你使用最重要的特性，并帮助你解决可能遇到的任何问题。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p><strong>注意</strong>：<code>kotlinx-serialization</code> 1.0.0-RC 仅适用于 Kotlin 编译器 1.4。早期编译器版本不兼容。</p></div><h2 id="脚本和-repl" tabindex="-1">脚本和 REPL <a class="header-anchor" href="#脚本和-repl" aria-label="Permalink to &quot;脚本和 REPL&quot;">​</a></h2><p>在 1.4.0 中，Kotlin 中的脚本功能受益于多项功能和性能改进以及其他更新。 以下是一些主要变更：</p><ul><li><a href="#new-dependencies-resolution-api">新的依赖项解析 API</a></li><li><a href="#new-repl-api">新的 REPL API</a></li><li><a href="#compiled-scripts-cache">编译后的脚本缓存</a></li><li><a href="#artifacts-renaming">构件重命名</a></li></ul><p>为了帮助你更熟悉 Kotlin 中的脚本功能，我们准备了一个 <a href="https://github.com/Kotlin/kotlin-script-examples" target="_blank" rel="noreferrer">示例项目</a>。 它包含标准脚本（<code>*.main.kts</code>）的示例，以及 Kotlin Scripting API 和自定义脚本定义的用法示例。请试用并使用我们的 <a href="https://youtrack.jetbrains.com/issues/KT" target="_blank" rel="noreferrer">问题跟踪器</a> 分享你的反馈。</p><h3 id="新的依赖项解析-api" tabindex="-1">新的依赖项解析 API <a class="header-anchor" href="#新的依赖项解析-api" aria-label="Permalink to &quot;新的依赖项解析 API&quot;">​</a></h3><p>在 1.4.0 中，我们引入了用于解析外部依赖项（例如 Maven 构件）的新 API 及其实现。该 API 发布在新的构件 <code>kotlin-scripting-dependencies</code> 和 <code>kotlin-scripting-dependencies-maven</code> 中。 <code>kotlin-script-util</code> 库中之前的依赖项解析功能现已弃用。</p><h3 id="新的-repl-api" tabindex="-1">新的 REPL API <a class="header-anchor" href="#新的-repl-api" aria-label="Permalink to &quot;新的 REPL API&quot;">​</a></h3><p>新的实验性 REPL API 现在是 Kotlin Scripting API 的一部分。已发布的构件中也有它的几种实现，有些具有高级功能，例如代码补全。我们在 <a href="https://blog.jetbrains.com/kotlin/2020/05/kotlin-kernel-for-jupyter-notebook-v0-8/" target="_blank" rel="noreferrer">Kotlin Jupyter 内核</a> 中使用此 API，现在你可以在自己的自定义 shell 和 REPL 中试用它。</p><h3 id="编译后的脚本缓存" tabindex="-1">编译后的脚本缓存 <a class="header-anchor" href="#编译后的脚本缓存" aria-label="Permalink to &quot;编译后的脚本缓存&quot;">​</a></h3><p>Kotlin Scripting API 现在提供了实现编译脚本缓存的能力，显著加快了未更改脚本的后续执行速度。我们默认的高级脚本实现 <code>kotlin-main-kts</code> 已经拥有自己的缓存。</p><h3 id="构件重命名" tabindex="-1">构件重命名 <a class="header-anchor" href="#构件重命名" aria-label="Permalink to &quot;构件重命名&quot;">​</a></h3><p>为了避免构件名称上的混淆，我们将 <code>kotlin-scripting-jsr223-embeddable</code> 和 <code>kotlin-scripting-jvm-host-embeddable</code> 重命名为 <code>kotlin-scripting-jsr223</code> 和 <code>kotlin-scripting-jvm-host</code>。这些构件依赖于 <code>kotlin-compiler-embeddable</code> 构件，后者对捆绑的第三方库进行了重打包，以避免使用冲突。我们将 <code>kotlin-compiler-embeddable</code>（通常更安全）的使用设置为脚本构件的默认设置。 如果出于某种原因，你需要依赖于未重打包的 <code>kotlin-compiler</code> 的构件，请使用带有 <code>-unshaded</code> 后缀的构件版本，例如 <code>kotlin-scripting-jsr223-unshaded</code>。请注意，此重命名仅影响应该直接使用的脚本构件；其他构件的名称保持不变。</p><h2 id="迁移到-kotlin-1-4-0" tabindex="-1">迁移到 Kotlin 1.4.0 <a class="header-anchor" href="#迁移到-kotlin-1-4-0" aria-label="Permalink to &quot;迁移到 Kotlin 1.4.0&quot;">​</a></h2><p>Kotlin 插件的迁移工具可帮助你将项目从早期 Kotlin 版本迁移到 1.4.0。</p><p>只需将 Kotlin 版本更改为 <code>1.4.0</code> 并重新导入你的 Gradle 或 Maven 项目。IDE 随后会询问你关于迁移的事宜。</p><p>如果你同意，它将运行迁移代码检查，这些检查将检测你的代码并建议对任何不工作或在 1.4.0 中不推荐的代码进行更正。</p><p><img src="`+u+'" alt="运行迁移" width="300"></p><p>代码检查具有不同的 <a href="https://www.jetbrains.com/help/idea/configuring-inspection-severities.html" target="_blank" rel="noreferrer">严重级别</a>，以帮助你决定接受哪些建议以及忽略哪些建议。</p><p><img src="'+C+'" alt="迁移检查"></p><p>Kotlin 1.4.0 是一个 <a href="/kotlin/kotlin-evolution-principles#language-and-tooling-releases">特性发布</a>，因此可能会给语言带来不兼容的更改。在 <strong><a href="/kotlin/compatibility-guide-14">Kotlin 1.4 兼容性指南</a></strong> 中查找此类更改的详细列表。</p>',94))])}const w=m(B,[["render",A]]);export{P as __pageData,w as default};
