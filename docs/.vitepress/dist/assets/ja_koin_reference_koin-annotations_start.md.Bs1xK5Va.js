import{_ as i,c as a,o as n,ag as t}from"./chunks/framework.Bksy39di.js";const c=JSON.parse('{"title":"Koin Annotationsを始める","description":"","frontmatter":{"title":"Koin Annotationsを始める"},"headers":[],"relativePath":"ja/koin/reference/koin-annotations/start.md","filePath":"ja/koin/reference/koin-annotations/start.md","lastUpdated":1750001831000}'),e={name:"ja/koin/reference/koin-annotations/start.md"};function l(p,s,h,o,k,r){return n(),a("div",null,s[0]||(s[0]=[t(`<p>Koin Annotationsプロジェクトの目的は、Koinの定義を非常に高速かつ直感的な方法で宣言できるよう支援し、基盤となるすべてのKoin DSLを自動生成することです。これは、Kotlinコンパイラのおかげで、開発者エクスペリエンスを拡大し、迅速な開発を可能にすることを目的としています 🚀。</p><h2 id="はじめに" tabindex="-1">はじめに <a class="header-anchor" href="#はじめに" aria-label="Permalink to &quot;はじめに&quot;">​</a></h2><p>Koinに馴染みがないですか？まずは<a href="https://insert-koin.io/docs/quickstart/kotlin" target="_blank" rel="noreferrer">Koin入門</a>をご覧ください。</p><p>コンポーネントを定義（definition）およびモジュール（module）アノテーションでタグ付けし、通常のKoin APIを使用します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// コンポーネントにタグを付けて定義を宣言します</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Single</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyComponent</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// モジュールを宣言し、アノテーションをスキャンします</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Module</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@ComponentScan</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyModule</span></span></code></pre></div><p>生成されたコードを使用できるように、<code>org.koin.ksp.generated.*</code>のインポートを次のように使用してください。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Koin Generationを使用</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> org.koin.ksp.generated.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> koin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> startKoin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        printLogger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        modules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // モジュールクラスに生成された「.module」拡張子を付けて、ここでモジュールを使用します</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">          MyModule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().module</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 通常のKoin APIとして使用するだけです</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    koin.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>これで完了です。通常のKoin APIを使って、Koinで新しい定義を使用できます。</p><h2 id="kspオプション" tabindex="-1">KSPオプション <a class="header-anchor" href="#kspオプション" aria-label="Permalink to &quot;KSPオプション&quot;">​</a></h2><p>Koinコンパイラにはいくつかの設定オプションがあります。公式ドキュメントに従い、次のオプションをプロジェクトに追加できます：<a href="https://kotlinlang.org/docs/ksp-quickstart.html#pass-options-to-processors" target="_blank" rel="noreferrer">Ksp Quickstart Doc</a></p><h3 id="コンパイル時の安全性-コンパイル時にkoin設定をチェックする-バージョン1-3-0以降" tabindex="-1">コンパイル時の安全性 - コンパイル時にKoin設定をチェックする（バージョン1.3.0以降） <a class="header-anchor" href="#コンパイル時の安全性-コンパイル時にkoin設定をチェックする-バージョン1-3-0以降" aria-label="Permalink to &quot;コンパイル時の安全性 - コンパイル時にKoin設定をチェックする（バージョン1.3.0以降）&quot;">​</a></h3><p>Koin Annotationsを使用すると、コンパイラプラグインがコンパイル時にKoin設定を検証できます。これは、Gradleモジュールに追加する次のKSPオプションで有効にできます。</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradleまたはbuild.gradle.kts内</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ksp {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    arg(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;KOIN_CONFIG_CHECK&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;true&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>コンパイラは、設定で使用されているすべての依存関係が宣言されていること、および使用されているすべてのモジュールがアクセス可能であることを確認します。</p><h3 id="providedによるコンパイル時の安全性バイパス-バージョン1-4-0以降" tabindex="-1">@Providedによるコンパイル時の安全性バイパス（バージョン1.4.0以降） <a class="header-anchor" href="#providedによるコンパイル時の安全性バイパス-バージョン1-4-0以降" aria-label="Permalink to &quot;@Providedによるコンパイル時の安全性バイパス（バージョン1.4.0以降）&quot;">​</a></h3><p>コンパイラが無視する型（Androidの一般的な型など）を除き、コンパイラプラグインはコンパイル時にKoin設定を検証できます。パラメータをチェック対象から除外したい場合は、そのパラメータに<code>@Provided</code>を使用することで、その型が現在のKoin Annotations設定の外部から提供されていることを示すことができます。</p><p>以下は、<code>MyProvidedComponent</code>がKoinですでに宣言されていることを示します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyProvidedComponent</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Factory</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyPresenter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Provided</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> provided : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyProvidedComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="デフォルトモジュールの無効化-バージョン1-3-0以降" tabindex="-1">デフォルトモジュールの無効化（バージョン1.3.0以降） <a class="header-anchor" href="#デフォルトモジュールの無効化-バージョン1-3-0以降" aria-label="Permalink to &quot;デフォルトモジュールの無効化（バージョン1.3.0以降）&quot;">​</a></h3><p>デフォルトでは、Koinコンパイラはモジュールにバインドされていない定義を検出し、プロジェクトのルートに生成される「デフォルトモジュール」と呼ばれるKoinモジュールに配置します。次のオプションを使用すると、デフォルトモジュールの使用と生成を無効にできます。</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// build.gradleまたはbuild.gradle.kts内</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ksp {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    arg(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;KOIN_DEFAULT_MODULE&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;false&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="kotlin-kmpのセットアップ" tabindex="-1">Kotlin KMPのセットアップ <a class="header-anchor" href="#kotlin-kmpのセットアップ" aria-label="Permalink to &quot;Kotlin KMPのセットアップ&quot;">​</a></h3><p>公式ドキュメントに記載されているKSPのセットアップに従ってください：<a href="https://kotlinlang.org/docs/ksp-multiplatform.html" target="_blank" rel="noreferrer">KSP with Kotlin Multiplatform</a></p><p>Koin Annotationsの基本的なセットアップが施された<a href="https://github.com/InsertKoinIO/hello-kmp/tree/annotations" target="_blank" rel="noreferrer">Hello Koin KMP</a>プロジェクトも参照できます。</p><h3 id="pro-guard" tabindex="-1">Pro-Guard <a class="header-anchor" href="#pro-guard" aria-label="Permalink to &quot;Pro-Guard&quot;">​</a></h3><p>Koin AnnotationsアプリケーションをSDKとして組み込む場合は、次のPro-Guardルールを参照してください。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># アノテーション定義を保持</span></span>
<span class="line"><span>-keep class org.koin.core.annotation.** { *; }</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Koinアノテーションが付与されたクラスを保持  </span></span>
<span class="line"><span>-keep @org.koin.core.annotation.* class * { *; }</span></span></code></pre></div>`,28)]))}const g=i(e,[["render",l]]);export{c as __pageData,g as default};
