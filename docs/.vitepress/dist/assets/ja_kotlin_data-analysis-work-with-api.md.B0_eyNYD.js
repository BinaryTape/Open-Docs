import{_ as i,a,b as t}from"./chunks/kotlin-analysis.DmuGV0qM.js";import{_ as n,c as l,o as e,ag as h}from"./chunks/framework.Bksy39di.js";const u=JSON.parse('{"title":"ウェブソースとAPIからデータを取得する","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/data-analysis-work-with-api.md","filePath":"ja/kotlin/data-analysis-work-with-api.md","lastUpdated":1754307826000}'),p={name:"ja/kotlin/data-analysis-work-with-api.md"};function k(r,s,o,d,E,g){return e(),l("div",null,s[0]||(s[0]=[h(`<h1 id="ウェブソースとapiからデータを取得する" tabindex="-1">ウェブソースとAPIからデータを取得する <a class="header-anchor" href="#ウェブソースとapiからデータを取得する" aria-label="Permalink to &quot;ウェブソースとAPIからデータを取得する&quot;">​</a></h1><p><a href="/ja/kotlin/kotlin-notebook-overview">Kotlin Notebook</a>は、様々なウェブソースやAPIからデータにアクセスし、操作するための強力なプラットフォームを提供します。各ステップを可視化して明確にするための反復的な環境を提供することで、データ抽出と分析のタスクを簡素化します。これにより、慣れていないAPIを探索する際に特に役立ちます。</p><p><a href="https://kotlin.github.io/dataframe/gettingstarted.html" target="_blank" rel="noreferrer">Kotlin DataFrameライブラリ</a>と組み合わせて使用すると、Kotlin NotebookはAPIへの接続やJSONデータの取得を可能にするだけでなく、包括的な分析と視覚化のためにこのデータを整形するのにも役立ちます。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Kotlin Notebookの例については、<a href="https://github.com/Kotlin/dataframe/blob/master/examples/notebooks/youtube/Youtube.ipynb" target="_blank" rel="noreferrer">GitHubのDataFrameの例</a>を参照してください。</p></div><h2 id="始める前に" tabindex="-1">始める前に <a class="header-anchor" href="#始める前に" aria-label="Permalink to &quot;始める前に&quot;">​</a></h2><p>Kotlin Notebookは<a href="https://plugins.jetbrains.com/plugin/16340-kotlin-notebook" target="_blank" rel="noreferrer">Kotlin Notebookプラグイン</a>に依存しており、このプラグインはIntelliJ IDEAにデフォルトでバンドルされ、有効になっています。</p><p>Kotlin Notebookの機能が利用できない場合は、プラグインが有効になっていることを確認してください。詳細については、<a href="/ja/kotlin/kotlin-notebook-set-up-env">環境のセットアップ</a>を参照してください。</p><p>新しいKotlin Notebookを作成するには：</p><ol><li><p><strong>File</strong> | <strong>New</strong> | <strong>Kotlin Notebook</strong> を選択します。</p></li><li><p>Kotlin Notebookで、以下のコマンドを実行してKotlin DataFrameライブラリをインポートします。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">use dataframe</span></span></code></pre></div></li></ol><h2 id="apiからデータを取得する" tabindex="-1">APIからデータを取得する <a class="header-anchor" href="#apiからデータを取得する" aria-label="Permalink to &quot;APIからデータを取得する&quot;">​</a></h2><p>Kotlin NotebookとKotlin DataFrameライブラリを使用してAPIからデータを取得するには、<a href="https://kotlin.github.io/dataframe/read.html" target="_blank" rel="noreferrer"><code>.read()</code></a>関数を使用します。これは、CSVやJSONなどの<a href="/ja/kotlin/data-analysis-work-with-data-sources#retrieve-data-from-a-file">ファイルからデータを取得する</a>のと似ています。ただし、ウェブベースのソースを扱う場合、生APIデータを構造化された形式に変換するために、追加のフォーマットが必要になる場合があります。</p><p><a href="https://console.cloud.google.com/apis/library/youtube.googleapis.com" target="_blank" rel="noreferrer">YouTube Data API</a>からデータを取得する例を見てみましょう。</p><ol><li><p>Kotlin Notebookファイル（<code>.ipynb</code>）を開きます。</p></li><li><p>データ操作タスクに不可欠なKotlin DataFrameライブラリをインポートします。これはコードセルで以下のコマンドを実行して行います。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">use dataframe</span></span></code></pre></div></li><li><p>YouTube Data APIへのリクエストを認証するために必要なAPIキーを新しいコードセルに安全に追加します。APIキーは<a href="https://console.cloud.google.com/apis/credentials" target="_blank" rel="noreferrer">認証情報タブ</a>から取得できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> apiKey </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;YOUR-API_KEY&quot;</span></span></code></pre></div></li><li><p>パスを文字列として受け取り、DataFrameの<code>.read()</code>関数を使用してYouTube Data APIからデータを取得するロード関数を作成します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(path: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AnyRow</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DataRow.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">read</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://www.googleapis.com/youtube/v3/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$path</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&amp;key=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$apiKey</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></li><li><p>取得したデータを各行に整理し、YouTube APIのページネーションを<code>nextPageToken</code>で処理します。これにより、複数のページにわたってデータを収集できます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(path: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, maxPages: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AnyFrame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Initializes a mutable list to store rows of data.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rows </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mutableListOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AnyRow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Sets the initial page path for data loading.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pagePath </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> path</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    do</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Loads data from the current page path.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> row </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pagePath)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Adds the loaded data as a row to the list.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        rows.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(row)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Retrieves the token for the next page, if available.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> next </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> row.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getValueOrNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;nextPageToken&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Updates the page path for the next iteration, including the new token.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        pagePath </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> path </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&amp;pageToken=&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> next</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Continues loading pages until there&#39;s no next page.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (next </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rows.size </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> maxPages) </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Concatenates and returns all loaded rows as a DataFrame.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rows.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">concat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>以前に定義した<code>load()</code>関数を使用してデータを取得し、新しいコードセルにDataFrameを作成します。この例では、Kotlinに関連するデータ、この場合は動画を、1ページあたり最大50件、最大5ページまで取得します。結果は<code>df</code>変数に格納されます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> df </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;search?q=kotlin&amp;maxResults=50&amp;part=snippet&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">df</span></span></code></pre></div></li><li><p>最後に、DataFrameからアイテムを抽出し、連結します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> items </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> df.items.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">concat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">items</span></span></code></pre></div></li></ol><h2 id="データのクリーンアップと整形" tabindex="-1">データのクリーンアップと整形 <a class="header-anchor" href="#データのクリーンアップと整形" aria-label="Permalink to &quot;データのクリーンアップと整形&quot;">​</a></h2><p>データのクリーンアップと整形は、分析のためにデータセットを準備する上で非常に重要なステップです。<a href="https://kotlin.github.io/dataframe/gettingstarted.html" target="_blank" rel="noreferrer">Kotlin DataFrameライブラリ</a>は、これらのタスクに強力な機能を提供します。<a href="https://kotlin.github.io/dataframe/move.html" target="_blank" rel="noreferrer"><code>move</code></a>、<a href="https://kotlin.github.io/dataframe/concatdf.html" target="_blank" rel="noreferrer"><code>concat</code></a>、<a href="https://kotlin.github.io/dataframe/select.html" target="_blank" rel="noreferrer"><code>select</code></a>、<a href="https://kotlin.github.io/dataframe/parse.html" target="_blank" rel="noreferrer"><code>parse</code></a>、<a href="https://kotlin.github.io/dataframe/join.html" target="_blank" rel="noreferrer"><code>join</code></a>などのメソッドは、データの整理と変換に役立ちます。</p><p>データがすでに<a href="#fetch-data-from-an-api">YouTubeのData APIを使用して取得されている</a>例を見てみましょう。目標は、詳細な分析のためにデータセットをクリーンアップし、再構築することです。</p><ol><li><p>データを再編成し、クリーンアップすることから始められます。これには、特定の列を新しいヘッダーの下に移動したり、明確にするために不要な列を削除したりすることが含まれます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> videos </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> items.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dropNulls</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { id.videoId }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { id.videoId named </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> and snippet }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">distinct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">videos</span></span></code></pre></div></li><li><p>クリーンアップされたデータからチャンクIDを抽出し、対応する動画の統計情報をロードします。これには、データをより小さなバッチに分割し、追加の詳細情報を取得することが含まれます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> statPages </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clean.id.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">chunked</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ids </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">joinToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;%2C&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    load</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;videos?part=statistics&amp;id=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$ids</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">statPages</span></span></code></pre></div></li><li><p>取得した統計情報を連結し、関連する列を選択します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> stats </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> statPages.items.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">concat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">select</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { id and statistics.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">all</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">stats</span></span></code></pre></div></li><li><p>既存のクリーンアップされたデータを新しく取得した統計情報と結合します。これにより、2つのデータセットが包括的なDataFrameにマージされます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> joined </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> clean.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">join</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(stats)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">joined</span></span></code></pre></div></li></ol><p>この例は、Kotlin DataFrameの様々な関数を使用してデータセットをクリーンアップ、再編成、および強化する方法を示しています。各ステップは、データを洗練し、<a href="#analyze-data-in-kotlin-notebook">詳細な分析</a>により適したものにするように設計されています。</p><h2 id="kotlin-notebookでデータを分析する" tabindex="-1">Kotlin Notebookでデータを分析する <a class="header-anchor" href="#kotlin-notebookでデータを分析する" aria-label="Permalink to &quot;Kotlin Notebookでデータを分析する&quot;">​</a></h2><p><a href="https://kotlin.github.io/dataframe/gettingstarted.html" target="_blank" rel="noreferrer">Kotlin DataFrameライブラリ</a>の関数を使用して、データを正常に<a href="#fetch-data-from-an-api">取得</a>し、<a href="#clean-and-refine-data">クリーンアップおよび整形</a>した後、次のステップは、準備されたデータセットを分析して意味のある洞察を抽出することです。</p><p>データの分類には<a href="https://kotlin.github.io/dataframe/groupby.html" target="_blank" rel="noreferrer"><code>groupBy</code></a>、<a href="https://kotlin.github.io/dataframe/summarystatistics.html" target="_blank" rel="noreferrer">要約統計量</a>の計算には<a href="https://kotlin.github.io/dataframe/sum.html" target="_blank" rel="noreferrer"><code>sum</code></a>や<a href="https://kotlin.github.io/dataframe/maxby.html" target="_blank" rel="noreferrer"><code>maxBy</code></a>、データの順序付けには<a href="https://kotlin.github.io/dataframe/sortby.html" target="_blank" rel="noreferrer"><code>sortBy</code></a>といったメソッドが特に役立ちます。これらのツールを使用すると、複雑なデータ分析タスクを効率的に実行できます。</p><p><code>groupBy</code>を使用して動画をチャンネル別に分類し、<code>sum</code>を使用してカテゴリごとの総視聴回数を計算し、<code>maxBy</code>を使用して各グループで最新または最も視聴された動画を見つける例を見てみましょう。</p><ol><li><p>参照を設定することで、特定の列へのアクセスを簡素化します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> view </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> column</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span></code></pre></div></li><li><p><code>groupBy</code>メソッドを使用して、<code>channel</code>列でデータをグループ化し、ソートします。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> channels </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> joined.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">groupBy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { channel }.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sortByCount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div></li></ol><p>結果のテーブルでは、データをインタラクティブに探索できます。チャンネルに対応する行の<code>group</code>フィールドをクリックすると、その行が展開され、そのチャンネルの動画に関する詳細が表示されます。</p><p><img src="`+i+'" alt="行を展開して詳細を表示" width="700"></p><p>左下のテーブルアイコンをクリックすると、グループ化されたデータセットに戻ることができます。</p><p><img src="'+a+`" alt="左下のテーブルアイコンをクリックして戻る" width="700"></p><ol start="3"><li><p><code>aggregate</code>、<code>sum</code>、<code>maxBy</code>、<code>flatten</code>を使用して、各チャンネルの総視聴回数とその最新または最も視聴された動画の詳細をまとめたDataFrameを作成します。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> aggregated </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> channels.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">aggregate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    viewCount.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() into view</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> last </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> maxBy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { publishedAt }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    last.title into </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;last title&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    last.publishedAt into </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;time&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    last.viewCount into </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;viewCount&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Sorts the DataFrame in descending order by view count and transform it into a flat structure.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sortByDesc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(view).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">flatten</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">aggregated</span></span></code></pre></div></li></ol><p>分析結果：</p><p><img src="`+t+'" alt="分析結果" width="700"></p><p>より高度なテクニックについては、<a href="https://kotlin.github.io/dataframe/gettingstarted.html" target="_blank" rel="noreferrer">Kotlin DataFrameのドキュメント</a>を参照してください。</p><h2 id="次に行うこと" tabindex="-1">次に行うこと <a class="header-anchor" href="#次に行うこと" aria-label="Permalink to &quot;次に行うこと&quot;">​</a></h2><ul><li><a href="https://kotlin.github.io/kandy/examples.html" target="_blank" rel="noreferrer">Kandyライブラリ</a>を使用したデータ視覚化を探索する</li><li><a href="/ja/kotlin/data-analysis-visualization">Kandyを使用したKotlin Notebookでのデータ視覚化</a>でデータ視覚化に関する追加情報を見つける</li><li>Kotlinでデータサイエンスと分析に利用できるツールとリソースの広範な概要については、<a href="/ja/kotlin/data-analysis-libraries">データ分析のためのKotlinおよびJavaライブラリ</a>を参照してください</li></ul>',33)]))}const F=n(p,[["render",k]]);export{u as __pageData,F as default};
