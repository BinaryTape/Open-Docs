import{_ as l,C as i,c as k,o as p,j as a,G as t,ag as r,a as n,w as o}from"./chunks/framework.Bksy39di.js";const B=JSON.parse('{"title":"응답 받기","description":"","frontmatter":{},"headers":[],"relativePath":"ko/ktor/client-responses.md","filePath":"ko/ktor/client-responses.md","lastUpdated":1755457140000}'),d={name:"ko/ktor/client-responses.md"};function E(g,s,y,c,F,u){const e=i("show-structure"),h=i("link-summary");return p(),k("div",null,[s[1]||(s[1]=a("h1",{id:"응답-받기",tabindex:"-1"},[n("응답 받기 "),a("a",{class:"header-anchor",href:"#응답-받기","aria-label":'Permalink to "응답 받기"'},"​")],-1)),t(e,{for:"chapter",depth:"2"}),t(h,null,{default:o(()=>s[0]||(s[0]=[n(" 응답을 받고, 응답 본문을 얻으며, 응답 파라미터를 획득하는 방법을 학습합니다. ")])),_:1}),s[2]||(s[2]=r(`<p><a href="./client-requests">HTTP 요청을 수행</a>하는 데 사용되는 모든 함수(<code>request</code>, <code>get</code>, <code>post</code> 등)는 <a href="https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.statement/-http-response/index.html" target="_blank" rel="noreferrer"><code>HttpResponse</code></a> 객체로 응답을 받을 수 있도록 합니다.</p><p><code>HttpResponse</code>는 <a href="#body">응답 본문</a>을 다양한 방식(원시 바이트, JSON 객체 등)으로 얻고, 상태 코드, 콘텐츠 타입, 헤더와 같은 <a href="#parameters">응답 파라미터</a>를 획득하는 데 필요한 API를 노출합니다. 예를 들어, 파라미터 없는 <code>GET</code> 요청에 대한 <code>HttpResponse</code>는 다음과 같이 받을 수 있습니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HttpResponse</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://ktor.io/docs/welcome.html&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="parameters" tabindex="-1">응답 파라미터 받기 <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;응답 파라미터 받기 {id=&quot;parameters&quot;}&quot;">​</a></h2><p><a href="https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.statement/-http-response/index.html" target="_blank" rel="noreferrer"><code>HttpResponse</code></a> 클래스를 사용하면 상태 코드, 헤더, HTTP 버전 등과 같은 다양한 응답 파라미터를 얻을 수 있습니다.</p><h3 id="status" tabindex="-1">상태 코드 <a class="header-anchor" href="#status" aria-label="Permalink to &quot;상태 코드 {id=&quot;status&quot;}&quot;">​</a></h3><p>응답의 상태 코드를 얻으려면 <a href="https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.statement/-http-response/status.html" target="_blank" rel="noreferrer"><code>HttpResponse.status</code></a> 속성을 사용하세요:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.call.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.client.request.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> io.ktor.http.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> httpResponse: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HttpResponse</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://ktor.io/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (httpResponse.status.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 200</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">299</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Successful response!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="headers" tabindex="-1">헤더 <a class="header-anchor" href="#headers" aria-label="Permalink to &quot;헤더 {id=&quot;headers&quot;}&quot;">​</a></h3><p><a href="https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.statement/-http-response/index.html" target="_blank" rel="noreferrer"><code>HttpResponse.headers</code></a> 속성을 사용하면 모든 응답 헤더를 포함하는 <a href="https://api.ktor.io/ktor-http/io.ktor.http/-headers/index.html" target="_blank" rel="noreferrer">Headers</a> 맵을 얻을 수 있습니다. 또한, <code>HttpResponse</code>는 특정 헤더 값을 받기 위한 다음 함수들을 노출합니다:</p><ul><li><code>contentType</code> for the <code>Content-Type</code> header value</li><li><code>charset</code> for a charset from the <code>Content-Type</code> header value.</li><li><code>etag</code> for the <code>E-Tag</code> header value.</li><li><code>setCookie</code> for the <code>Set-Cookie</code> header value.</li></ul><blockquote><p>Ktor는 또한 호출 간에 쿠키를 유지할 수 있는 <a href="./client-cookies">HttpCookies</a> 플러그인을 제공합니다.</p></blockquote><h2 id="body" tabindex="-1">응답 본문 받기 <a class="header-anchor" href="#body" aria-label="Permalink to &quot;응답 본문 받기 {id=&quot;body&quot;}&quot;">​</a></h2><h3 id="raw" tabindex="-1">원시 본문 <a class="header-anchor" href="#raw" aria-label="Permalink to &quot;원시 본문 {id=&quot;raw&quot;}&quot;">​</a></h3><p>응답의 원시 본문을 받으려면 <code>body</code> 함수를 호출하고 필요한 타입을 파라미터로 전달하세요. 아래 코드 스니펫은 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-string/" target="_blank" rel="noreferrer"><code>String</code></a>으로 원시 본문을 받는 방법을 보여줍니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> httpResponse: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HttpResponse</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://ktor.io/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> stringBody: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> httpResponse.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>마찬가지로, <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-byte-array/" target="_blank" rel="noreferrer"><code>ByteArray</code></a>로 본문을 얻을 수 있습니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> httpResponse: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HttpResponse</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://ktor.io/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> byteArrayBody: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ByteArray</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> httpResponse.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>아래 <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/client-download-file" target="_blank" rel="noreferrer">실행 가능한 예제</a>는 <code>ByteArray</code>로 응답을 받아 파일에 저장하는 방법을 보여줍니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> file </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> File.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createTempFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;files&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    runBlocking</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> httpResponse: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HttpResponse</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://ktor.io/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            onDownload</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { bytesSentTotal, contentLength </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Received </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$bytesSentTotal</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bytes from </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$contentLength</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> responseBody: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ByteArray</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> httpResponse.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        file.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeBytes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(responseBody)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;A file saved to \${file.path}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre></div><p>위 예제의 <a href="https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.plugins/on-download.html" target="_blank" rel="noreferrer"><code>onDownload()</code></a> 확장 함수는 다운로드 진행 상황을 표시하는 데 사용됩니다.</p><p>비 스트리밍 요청의 경우, 응답 본문은 자동으로 메모리에 로드되고 캐시되어 반복적인 접근을 허용합니다. 이는 작은 페이로드에는 효율적이지만, 큰 응답에서는 높은 메모리 사용량을 초래할 수 있습니다.</p><p>큰 응답을 효율적으로 처리하려면, 응답을 메모리에 저장하지 않고 증분적으로 처리하는 <a href="#streaming">스트리밍 방식</a>을 사용하세요.</p><h3 id="json" tabindex="-1">JSON 객체 <a class="header-anchor" href="#json" aria-label="Permalink to &quot;JSON 객체 {id=&quot;json&quot;}&quot;">​</a></h3><p><a href="./client-serialization">ContentNegotiation</a> 플러그인이 설치된 경우, 응답을 받을 때 JSON 데이터를 데이터 클래스로 역직렬화할 수 있습니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> customer: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Customer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://localhost:8080/customer/3&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>더 자세히 알아보려면 <a href="./client-serialization#receive_send_data">데이터 주고받기</a>를 참조하세요.</p><blockquote><p>ContentNegotiation 플러그인은 <a href="./client-serialization">클라이언트</a>와 <a href="./server-serialization">서버</a> 모두에서 사용할 수 있습니다. 사용 사례에 맞는 것을 사용해야 합니다.</p></blockquote><h3 id="streaming" tabindex="-1">데이터 스트리밍 <a class="header-anchor" href="#streaming" aria-label="Permalink to &quot;데이터 스트리밍 {id=&quot;streaming&quot;}&quot;">​</a></h3><p><code>HttpResponse.body</code> 함수를 호출하여 본문을 얻을 때, Ktor는 응답을 메모리에서 처리하고 전체 응답 본문을 반환합니다. 전체 응답을 기다리는 대신 응답의 청크를 순차적으로 받아야 하는 경우, 스코프가 지정된 <a href="https://api.ktor.io/ktor-client/ktor-client-core/io.ktor.client.statement/-http-statement/execute.html" target="_blank" rel="noreferrer">execute</a> 블록과 함께 <code>HttpStatement</code>를 사용하세요. 아래 <a href="https://github.com/ktorio/ktor-documentation/tree/3.2.3/codeSnippets/snippets/client-download-streaming" target="_blank" rel="noreferrer">실행 가능한 예제</a>는 응답 콘텐츠를 청크(바이트 패킷) 단위로 받아 파일에 저장하는 방법을 보여줍니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HttpClient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CIO)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> file </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> File.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createTempFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;files&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;index&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> stream </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> file.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">outputStream</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">asSink</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fileSize </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1024</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1024</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    runBlocking</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">prepareGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://httpbin.org/bytes/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$fileSize</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { httpResponse </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> channel: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ByteReadChannel</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> httpResponse.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0L</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            stream.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">channel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">exhausted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> chunk </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> channel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readRemaining</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> chunk.remaining</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    chunk.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">transferTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(stream)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">                    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Received </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$count</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bytes from \${httpResponse.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">contentLength</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">()}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;A file saved to \${file.path}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span></code></pre></div><p>이 예제에서는 <a href="https://api.ktor.io/ktor-io/io.ktor.utils.io/-byte-read-channel/index.html" target="_blank" rel="noreferrer"><code>ByteReadChannel</code></a>이 데이터를 비동기적으로 읽는 데 사용됩니다. <code>ByteReadChannel.readRemaining()</code>을 사용하면 채널의 모든 사용 가능한 바이트를 가져오고, <code>Source.transferTo()</code>는 데이터를 파일에 직접 써서 불필요한 할당을 줄입니다.</p><p>추가 처리 없이 응답 본문을 파일에 저장하려면, 대신 <a href="https://api.ktor.io/ktor-io/io.ktor.utils.io/copy-and-close.html" target="_blank" rel="noreferrer"><code>ByteReadChannel.copyAndClose()</code></a> 함수를 사용할 수 있습니다:</p><div class="language-Kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">client.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">prepareGet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://httpbin.org/bytes/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$fileSize</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { httpResponse </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> channel: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ByteReadChannel</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> httpResponse.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    channel.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">copyAndClose</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(file.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">writeChannel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;A file saved to \${file.path}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,34))])}const b=l(d,[["render",E]]);export{B as __pageData,b as default};
