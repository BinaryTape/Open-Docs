import{_ as i,a,b as n,c as t,d as l}from"./chunks/halt-tostring-result.BEv2IleX.js";import{_ as p,c as h,o as k,ag as e}from"./chunks/framework.Bksy39di.js";const C=JSON.parse('{"title":"可调试性","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/api-guidelines-debuggability.md","filePath":"kotlin/api-guidelines-debuggability.md","lastUpdated":1754307826000}'),r={name:"kotlin/api-guidelines-debuggability.md"};function d(E,s,g,o,c,y){return k(),h("div",null,s[0]||(s[0]=[e(`<h1 id="可调试性" tabindex="-1">可调试性 <a class="header-anchor" href="#可调试性" aria-label="Permalink to &quot;可调试性&quot;">​</a></h1><p>你的库的用户将基于其功能进行构建，而他们构建的特性将包含需要识别和解决的错误。此错误解决过程可能在开发期间在调试器中进行，也可能在生产环境中使用日志记录和可观测性工具进行。你的库可以遵循这些最佳实践，使其调试起来更容易。</p><h2 id="为有状态类型提供-tostring-方法" tabindex="-1">为有状态类型提供 toString 方法 <a class="header-anchor" href="#为有状态类型提供-tostring-方法" aria-label="Permalink to &quot;为有状态类型提供 toString 方法&quot;">​</a></h2><p>对于每个包含状态的类型，都应提供一个有意义的 <code>toString</code> 实现。此实现应返回实例当前内容的易于理解的表示，即使对于内部类型也是如此。</p><p>由于类型的 <code>toString</code> 表示通常会写入日志，因此在实现此方法时请考虑安全性，并避免返回敏感用户数据。</p><p>确保用于描述状态的格式在库中不同类型之间尽可能保持一致。当此格式是你的 API 实现的契约的一部分时，应显式描述并充分文档化。你的 <code>toString</code> 方法的输出可能支持解析，例如在自动化测试套件中。</p><p>例如，考虑一个支持服务订阅的库中的以下类型：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">enum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SubscriptionResultReason</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Success, InsufficientFunds, IncompatibleAccount</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SubscriptionResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> reason: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SubscriptionResultReason</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> description: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>如果没有 <code>toString</code> 方法，打印 <code>SubscriptionResult</code> 实例的作用不大：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SubscriptionResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">       false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       IncompatibleAccount,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       &quot;Users account does not support this type of subscription&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //prints &#39;org.example.SubscriptionResult@13221655&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>信息在调试器中也无法方便地显示：</p><p><img src="`+i+`" alt="调试器中的结果" width="500"></p><p>添加一个简单的 <code>toString</code> 实现可以显著改善这两种情况下的输出：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//prints &#39;Subscription failed (reason=IncompatibleAccount, description=&quot;Users </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// account does not support this type of subscription&quot;)&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> resultText </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result) </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;succeeded&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> else</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;failed&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Subscription </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$resultText</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> (reason=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$reason</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">, description=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;$description\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><img src="`+a+`" alt="添加 toString 后结果显著改善" width="700"></p><p>尽管使用 <code>data class</code> 自动获得 <code>toString</code> 方法可能很诱人，但出于向后兼容性原因，不建议这样做。有关 <code>data class</code> 的更多详细信息，请参见<a href="/kotlin/api-guidelines-backward-compatibility#avoid-using-data-classes-in-your-api">避免在你的 API 中使用 <code>data class</code></a> 部分。</p><p>请注意，<code>toString</code> 方法中描述的状态无需是来自问题域的信息。它可以与进行中请求的状态（如上述示例）、外部服务连接的健康状况，或进行中操作中的中间状态相关。</p><p>例如，考虑以下构建器类型：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> children: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;Person(name=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">, age=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$age</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">, children=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$children</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PersonBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> children </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> arrayListOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> child</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(personBuilder: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PersonBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Unit </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       children.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(personBuilder))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Person</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name, age, children)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(personBuilder: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PersonBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Unit </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Person</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    PersonBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(personBuilder).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>你将这样使用此类型：</p><p><img src="`+n+'" alt="使用构建器类型示例" width="500"></p><p>如果你将代码在上面图片中显示的断点处暂停，显示的信息将没有帮助：</p><p><img src="'+t+`" alt="在断点处暂停代码的结果" width="500"></p><p>添加一个简单的 <code>toString</code> 实现会带来更有用的输出：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;PersonBuilder(name=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">, age=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$age</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">, children=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$children</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)&quot;</span></span></code></pre></div><p>添加此实现后，调试器显示：</p><p><img src="`+l+'" alt="向暂停点添加 toString" width="700"></p><p>这样，你可以立即可见哪些字段已设置，哪些未设置。</p><h2 id="采纳并文档化异常处理策略" tabindex="-1">采纳并文档化异常处理策略 <a class="header-anchor" href="#采纳并文档化异常处理策略" aria-label="Permalink to &quot;采纳并文档化异常处理策略&quot;">​</a></h2><p>正如在<a href="/kotlin/api-guidelines-consistency#choose-the-appropriate-error-handling-mechanism">选择适当的错误处理机制</a> 部分中讨论的，有时你的库抛出异常以发出错误信号是适当的。你可以为此目的创建自己的异常类型。</p><p>抽象和简化低级 API 的库也需要处理由其依赖项抛出的异常。一个库可能会选择抑制异常、按原样传递异常、将其转换为不同类型的异常，或者以不同方式向用户发出错误信号。</p><p>这些选项中的任何一个都可能是有效的，具体取决于上下文。例如：</p><ul><li>如果用户采用库 A 纯粹是为了简化库 B 的便利，那么库 A 重新抛出由库 B 生成的任何异常而不加修改可能是适当的。</li><li>如果库 A 采用库 B 纯粹作为内部实现细节，那么由库 B 抛出的库特有的异常绝不应暴露给库 A 的用户。</li></ul><p>你必须采纳并文档化一致的异常处理方法，以便用户可以高效使用你的库。这对于调试尤其重要。你的库的用户应该能够在调试器和日志中识别出异常何时源自你的库。</p><p>异常的类型应表明错误的类型，而异常中的数据应帮助用户定位问题的根本原因。一种常见模式是将低级异常包装在库特有的异常中，原始异常可作为 <code>cause</code> 访问。</p><h2 id="下一步" tabindex="-1">下一步 <a class="header-anchor" href="#下一步" aria-label="Permalink to &quot;下一步&quot;">​</a></h2><p>在指南的下一部分中，你将了解可测试性。</p><p><a href="/kotlin/api-guidelines-testability">继续到下一部分</a></p>',38)]))}const B=p(r,[["render",d]]);export{C as __pageData,B as default};
