import{_ as a,c as e,o,ag as i}from"./chunks/framework.Bksy39di.js";const d=JSON.parse('{"title":"更新 Compose 編譯器","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kmp/compose-compiler.md","filePath":"zh-Hant/kmp/compose-compiler.md","lastUpdated":1755516278000}'),p={name:"zh-Hant/kmp/compose-compiler.md"};function n(l,s,t,r,c,h){return o(),e("div",null,s[0]||(s[0]=[i(`<h1 id="更新-compose-編譯器" tabindex="-1">更新 Compose 編譯器 <a class="header-anchor" href="#更新-compose-編譯器" aria-label="Permalink to &quot;更新 Compose 編譯器&quot;">​</a></h1><p>Compose 編譯器由一個 Gradle 外掛程式輔助，該外掛程式簡化了設定並提供了更方便的編譯器選項存取。 當與 Android Gradle plugin (AGP) 一同應用時，這個 Compose 編譯器外掛程式將覆寫由 AGP 自動提供的 Compose 編譯器座標。</p><p>從 Kotlin 2.0.0 開始，Compose 編譯器已合併到 Kotlin 儲存庫中。 這有助於您將專案順利遷移到 Kotlin 2.0.0 及更高版本，因為 Compose 編譯器與 Kotlin 同步發佈，並且始終與相同版本的 Kotlin 相容。</p><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>強烈建議您將使用 Kotlin 2.0.0 建立的 Compose Multiplatform 應用程式更新至 2.0.10 或更高版本。Compose 編譯器 2.0.0 有一個問題，它有時會錯誤地推斷具有非 JVM 目標的多平台專案中類型的穩定性，這可能導致不必要（甚至無限）的重新組合 (recomposition)。 如果您的應用程式是使用 Compose 編譯器 2.0.10 或更高版本構建的，但使用了使用 Compose 編譯器 2.0.0 構建的依賴項，這些舊的依賴項仍可能導致重新組合問題。 為防止此情況，請將您的依賴項更新到與您的應用程式使用相同 Compose 編譯器構建的版本。</p></div><p>若要在專案中使用新的 Compose 編譯器外掛程式，請為每個使用 Compose 的模組應用它。 請繼續閱讀有關如何 <a href="#migrating-a-compose-multiplatform-project">遷移 Compose Multiplatform 專案</a> 的詳細資訊。對於 Jetpack Compose 專案，請參考 <a href="https://kotlinlang.org/docs/compose-compiler-migration-guide.html#migrating-a-jetpack-compose-project" target="_blank" rel="noreferrer">遷移指南</a>。</p><h2 id="遷移-compose-multiplatform-專案" tabindex="-1">遷移 Compose Multiplatform 專案 <a class="header-anchor" href="#遷移-compose-multiplatform-專案" aria-label="Permalink to &quot;遷移 Compose Multiplatform 專案&quot;">​</a></h2><p>從 Compose Multiplatform 1.6.10 開始，您應該將 <code>org.jetbrains.kotlin.plugin.compose</code> Gradle 外掛程式應用於每個使用 <code>org.jetbrains.compose</code> 外掛程式的模組：</p><ol><li><p>將 Compose 編譯器 Gradle 外掛程式新增到 <a href="https://docs.gradle.org/current/userguide/platforms.html#sub:conventional-dependencies-toml" target="_blank" rel="noreferrer">Gradle 版本目錄</a> 中：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[versions]</span></span>
<span class="line"><span># ...</span></span>
<span class="line"><span>kotlin = &quot;2.2.0&quot;</span></span>
<span class="line"><span>compose-plugin = &quot;1.8.2&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[plugins]</span></span>
<span class="line"><span># ...</span></span>
<span class="line"><span>jetbrainsCompose = { id = &quot;org.jetbrains.compose&quot;, version.ref = &quot;compose-plugin&quot; }</span></span>
<span class="line"><span>kotlinMultiplatform = { id = &quot;org.jetbrains.kotlin.multiplatform&quot;, version.ref = &quot;kotlin&quot; }</span></span>
<span class="line"><span>compose-compiler = { id = &quot;org.jetbrains.kotlin.plugin.compose&quot;, version.ref = &quot;kotlin&quot; }</span></span></code></pre></div></li><li><p>將 Gradle 外掛程式新增到根 <code>build.gradle.kts</code> 檔案中：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> alias</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(libs.plugins.jetbrainsCompose) apply </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> alias</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(libs.plugins.compose.compiler) apply </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>將外掛程式應用於每個使用 Compose Multiplatform 的模組：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">plugins</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    alias</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(libs.plugins.jetbrainsCompose)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    alias</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(libs.plugins.compose.compiler)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>如果您正在使用 Jetpack Compose 編譯器的編譯器選項，請在 <code>composeCompiler {}</code> 區塊中設定它們。 請參考 <a href="https://kotlinlang.org/docs/compose-compiler-options.html" target="_blank" rel="noreferrer">Compose 編譯器選項 DSL</a>。</p></li></ol><h4 id="可能的問題-「缺少路徑資源」" tabindex="-1">可能的問題：「缺少路徑資源」 <a class="header-anchor" href="#可能的問題-「缺少路徑資源」" aria-label="Permalink to &quot;可能的問題：「缺少路徑資源」&quot;">​</a></h4><p>當從 Kotlin 1.9.0 切換到 2.0.0，或從 2.0.0 切換到 1.9.0 時，您可能會遇到以下錯誤：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>org.jetbrains.compose.resources.MissingResourceException: Missing resource with path: ...</span></span></code></pre></div><p>若要解決此問題，請刪除所有 <code>build</code> 目錄：在您的專案根目錄和每個模組中。</p><h2 id="後續步驟" tabindex="-1">後續步驟 <a class="header-anchor" href="#後續步驟" aria-label="Permalink to &quot;後續步驟&quot;">​</a></h2><ul><li>請參閱 <a href="https://android-developers.googleblog.com/2024/04/jetpack-compose-compiler-moving-to-kotlin-repository.html" target="_blank" rel="noreferrer">Google 的公告</a>，了解 Compose 編譯器將遷移至 Kotlin 儲存庫的資訊。</li><li>請參考 <a href="https://kotlinlang.org/docs/compose-compiler-options.html" target="_blank" rel="noreferrer">Compose 編譯器選項 DSL</a>。</li><li>若要遷移 Jetpack Compose 應用程式，請查看 <a href="https://kotlinlang.org/docs/compose-compiler-migration-guide.html" target="_blank" rel="noreferrer">Compose 編譯器文件</a>。</li></ul>`,14)]))}const k=a(p,[["render",n]]);export{d as __pageData,k as default};
