import{_ as m}from"./chunks/compose-multiplatform-and-jetpack-compose.CSURSSFa.js";import{_ as s,C as r,c as i,o as c,j as o,G as a,ag as n,a as t,w as p}from"./chunks/framework.Bksy39di.js";const J=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kmp/compose-multiplatform-and-jetpack-compose.md","filePath":"ja/kmp/compose-multiplatform-and-jetpack-compose.md","lastUpdated":1755516278000}'),f={name:"ja/kmp/compose-multiplatform-and-jetpack-compose.md"};function u(h,e,k,C,b,g){const d=r("web-summary"),l=r("tldr");return c(),i("div",null,[e[2]||(e[2]=o("h1",{id:"compose-multiplatform-と-jetpack-compose",tabindex:"-1"},[t("Compose Multiplatform と Jetpack Compose "),o("a",{class:"header-anchor",href:"#compose-multiplatform-と-jetpack-compose","aria-label":'Permalink to "Compose Multiplatform と Jetpack Compose"'},"​")],-1)),a(d,null,{default:p(()=>e[0]||(e[0]=[t("この記事では、Compose MultiplatformとJetpack Composeの関係を説明します。2つのツールキットについて、それぞれがどのように連携しているかを詳しく解説します。")])),_:1}),e[3]||(e[3]=o("p",null,[o("img",{src:m,alt:"Compose Multiplatform created by JetBrains, Jetpack Compose created by Google",width:"730"})],-1)),a(l,null,{default:p(()=>e[1]||(e[1]=[t("この記事では、Compose MultiplatformとJetpack Composeの関係を説明します。 2つのツールキットがどのように連携しているか、ターゲット間でのライブラリの扱い方、 そしてマルチプラットフォームプロジェクト用に独自のUIライブラリを作成または適応させる方法を学びます。")])),_:1}),e[4]||(e[4]=n('<p>Compose Multiplatformは、JetBrainsが開発したクロスプラットフォームUIツールキットです。 GoogleのAndroid向け<a href="https://developer.android.com/jetpack/compose" target="_blank" rel="noreferrer">Jetpack Compose</a>ツールキットを拡張し、 追加のターゲットプラットフォームをサポートしています。</p><p>Compose Multiplatformは、<a href="./multiplatform-discover-project#common-code">共通Kotlinコード</a>からCompose APIを利用可能にし、 Android、iOS、デスクトップ、およびウェブで実行できる共通のCompose UIコードを記述できるようにします。</p><table tabindex="0"><thead><tr><th></th><th><strong>Compose Multiplatform</strong></th><th><strong>Jetpack Compose</strong></th></tr></thead><tbody><tr><td><strong>Platforms</strong></td><td>Android, iOS, desktop, web</td><td>Android</td></tr><tr><td><strong>Supported by</strong></td><td>JetBrains</td><td>Google</td></tr></tbody></table><h2 id="jetpack-compose-とコンポーザブル" tabindex="-1">Jetpack Compose とコンポーザブル <a class="header-anchor" href="#jetpack-compose-とコンポーザブル" aria-label="Permalink to &quot;Jetpack Compose とコンポーザブル&quot;">​</a></h2><p>Jetpack Composeは、Androidネイティブインターフェースを構築するための宣言型UIツールキットです。 その基盤は、<code>@Composable</code>アノテーションでマークされた_コンポーザブル関数_です。 これらの関数はUIの一部を定義し、基となるデータが変更されると自動的に更新されます。 コンポーザブルを組み合わせて、レイアウトを構築したり、ユーザー入力を処理したり、状態を管理したり、アニメーションを適用したりできます。 Jetpack Composeには、<code>Text</code>、<code>Button</code>、<code>Row</code>、<code>Column</code>などの共通UIコンポーネントが含まれており、モディファイアでカスタマイズできます。</p><p>Compose Multiplatformも同じ原則に基づいて構築されています。 Jetpack Composeと同じComposeコンパイラとランタイムを共有し、同じAPI（<code>@Composable</code>関数、 <code>remember</code>のような状態管理ツール、レイアウトコンポーネント、モディファイア、アニメーションサポート）を使用します。 これは、Android、iOS、デスクトップ、ウェブ向けのクロスプラットフォームUIを構築するために、 Jetpack Composeの知識をCompose Multiplatformで再利用できることを意味します。</p><h2 id="compose-multiplatform-と-jetpack-compose-の機能" tabindex="-1">Compose Multiplatform と Jetpack Compose の機能 <a class="header-anchor" href="#compose-multiplatform-と-jetpack-compose-の機能" aria-label="Permalink to &quot;Compose Multiplatform と Jetpack Compose の機能&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>両方のUIフレームワークの基本については、<a href="https://developer.android.com/jetpack/compose/documentation" target="_blank" rel="noreferrer">Googleの公式ドキュメント</a>を含む、 ほぼすべてのJetpack Compose資料から学ぶことができます。</p></div><p>当然ながら、Compose Multiplatformにはプラットフォーム固有の機能と考慮事項があります。</p><ul><li><a href="./compose-android-only-components">Androidのみのコンポーネント</a>ページには、 Androidプラットフォームに密接に結びついており、 そのため共通のCompose Multiplatformコードからは利用できないAPIがリストされています。</li><li>デスクトップ用のウィンドウ処理APIやiOS用のUIKit互換APIなど、一部のプラットフォーム固有APIは、 それぞれのプラットフォームでのみ利用可能です。</li></ul><p>一般的なコンポーネントとAPIの提供状況の概要を以下に示します。</p><table tabindex="0"><thead><tr><th></th><th><strong>Compose Multiplatform</strong></th><th><strong>Jetpack Compose</strong></th></tr></thead><tbody><tr><td><a href="https://developer.android.com/jetpack/androidx/releases/compose-animation" target="_blank" rel="noreferrer">Compose Animation</a></td><td>はい</td><td>はい</td></tr><tr><td><a href="https://developer.android.com/jetpack/androidx/releases/compose-compiler" target="_blank" rel="noreferrer">Compose Compiler</a></td><td>はい</td><td>はい</td></tr><tr><td><a href="https://developer.android.com/jetpack/androidx/releases/compose-foundation" target="_blank" rel="noreferrer">Compose Foundation</a></td><td>はい</td><td>はい</td></tr><tr><td><a href="https://developer.android.com/jetpack/androidx/releases/compose-material" target="_blank" rel="noreferrer">Compose Material</a></td><td>はい</td><td>はい</td></tr><tr><td><a href="https://developer.android.com/jetpack/androidx/releases/compose-material30" target="_blank" rel="noreferrer">Compose Material 3</a></td><td>はい</td><td>はい</td></tr><tr><td><a href="https://developer.android.com/jetpack/androidx/releases/compose-runtime" target="_blank" rel="noreferrer">Compose Runtime</a></td><td>はい（<code>androidx.compose.runtime.rxjava2</code>および<code>androidx.compose.runtime.rxjava3</code>を除く）</td><td>はい</td></tr><tr><td><a href="https://developer.android.com/jetpack/androidx/releases/compose-ui" target="_blank" rel="noreferrer">Compose UI</a></td><td>はい</td><td>はい</td></tr><tr><td><a href="https://developer.android.com/jetpack/androidx/releases/lifecycle" target="_blank" rel="noreferrer">Jetpack Lifecycle</a></td><td><a href="./compose-lifecycle">はい</a></td><td>はい</td></tr><tr><td><a href="https://developer.android.com/topic/libraries/architecture/viewmodel" target="_blank" rel="noreferrer">Jetpack ViewModel</a></td><td><a href="./compose-viewmodel">はい</a></td><td>はい</td></tr><tr><td><a href="https://developer.android.com/jetpack/androidx/releases/navigation" target="_blank" rel="noreferrer">Jetpack Navigation Compose</a></td><td><a href="./compose-navigation-routing">はい</a></td><td>はい</td></tr><tr><td>Resources</td><td><code>Res</code>クラスを使用する<a href="./compose-multiplatform-resources">Compose Multiplatformリソースライブラリ</a></td><td><code>R</code>クラスを使用する<a href="https://developer.android.com/jetpack/compose/resources" target="_blank" rel="noreferrer">Androidリソースシステム</a></td></tr><tr><td><a href="https://developers.google.com/maps/documentation/android-sdk/maps-compose" target="_blank" rel="noreferrer">Maps Compose</a></td><td>いいえ</td><td>はい</td></tr><tr><td><a href="#libraries-for-compose-multiplatform">サードパーティライブラリ</a>（UIコンポーネント、ナビゲーション、アーキテクチャなど）</td><td><a href="https://github.com/terrakok/kmp-awesome?tab=readme-ov-file#-compose-ui" target="_blank" rel="noreferrer">Compose Multiplatformライブラリ</a></td><td>Jetpack ComposeおよびCompose Multiplatformライブラリ</td></tr></tbody></table><h2 id="技術的な詳細" tabindex="-1">技術的な詳細 <a class="header-anchor" href="#技術的な詳細" aria-label="Permalink to &quot;技術的な詳細&quot;">​</a></h2><p>Compose Multiplatformは、Googleが公開しているコードとリリースに基づいて構築されています。 GoogleはAndroid向けJetpack Composeに注力していますが、 Compose Multiplatformを可能にするためにGoogleとJetBrainsの間で緊密な連携が行われています。</p><p>Jetpackには、FoundationやMaterialのようなファーストパーティライブラリが含まれており、 これらはGoogleがAndroid向けに公開しています。 <a href="https://github.com/JetBrains/compose-multiplatform-core" target="_blank" rel="noreferrer">これらのライブラリ</a>が提供するAPIを共通コードから利用できるようにするため、 JetBrainsはこれらのライブラリのマルチプラットフォームバージョンを管理しており、Android以外のターゲット向けに公開されています。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>リリースサイクルについては、<a href="./compose-compatibility-and-versioning#jetpack-compose-and-compose-multiplatform-release-cycles">互換性とバージョン</a>ページで詳しく学ぶことができます。</p></div><p>Compose MultiplatformアプリケーションをAndroid向けにビルドする場合、Googleが公開しているJetpack Composeアーティファクトを使用します。 例えば、<code>compose.material3</code>を依存関係に追加すると、プロジェクトはAndroidターゲットでは<code>androidx.compose.material3:material3</code>を、 他のターゲットでは<code>org.jetbrains.compose.material3:material3</code>を使用します。 これは、マルチプラットフォームアーティファクトのGradle Module Metadataに基づいて自動的に行われます。</p><h2 id="compose-multiplatform向けライブラリ" tabindex="-1">Compose Multiplatform向けライブラリ <a class="header-anchor" href="#compose-multiplatform向けライブラリ" aria-label="Permalink to &quot;Compose Multiplatform向けライブラリ&quot;">​</a></h2><p>Compose Multiplatformを使用することで、Compose APIを使用するライブラリを<a href="./multiplatform-publish-lib-setup">Kotlin Multiplatformライブラリ</a>として公開できます。 これにより、複数のプラットフォームをターゲットとする共通Kotlinコードから利用可能になります。</p><p>したがって、Compose APIを使用して新しいライブラリを構築している場合は、その利点を活かしてCompose Multiplatformを使用してマルチプラットフォームライブラリとして構築することを検討してください。 すでにAndroid向けにJetpack Composeライブラリを構築している場合は、そのライブラリをマルチプラットフォーム対応にすることを検討してください。 エコシステムには、すでに<a href="https://github.com/terrakok/kmp-awesome#-compose-ui" target="_blank" rel="noreferrer">多くのCompose Multiplatformライブラリ</a>が利用可能です。</p><p>ライブラリがCompose Multiplatformで公開されると、Jetpack Composeのみを使用するアプリでもシームレスに利用できます。 それらのアプリは、単にライブラリのAndroidアーティファクトを使用するだけです。</p><h2 id="次のステップ" tabindex="-1">次のステップ <a class="header-anchor" href="#次のステップ" aria-label="Permalink to &quot;次のステップ&quot;">​</a></h2><p>以下のコンポーネントのCompose Multiplatform実装について、さらに詳しくお読みください。</p><ul><li><a href="./compose-lifecycle">ライフサイクル</a></li><li><a href="./compose-multiplatform-resources">リソース</a></li><li><a href="./compose-viewmodel">共通ViewModel</a></li><li><a href="./compose-navigation-routing">ナビゲーションとルーティング</a></li></ul>',24))])}const v=s(f,[["render",u]]);export{J as __pageData,v as default};
