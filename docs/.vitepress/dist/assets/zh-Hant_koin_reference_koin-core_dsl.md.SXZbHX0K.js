import{_ as a,c as e,o as s,ag as n}from"./chunks/framework.Bksy39di.js";const k=JSON.parse('{"title":"Koin DSL","description":"","frontmatter":{"title":"Koin DSL"},"headers":[],"relativePath":"zh-Hant/koin/reference/koin-core/dsl.md","filePath":"zh-Hant/koin/reference/koin-core/dsl.md","lastUpdated":1750001831000}'),l={name:"zh-Hant/koin/reference/koin-core/dsl.md"};function o(t,i,d,p,c,h){return s(),e("div",null,i[0]||(i[0]=[n(`<h1 id="koin-dsl" tabindex="-1">Koin DSL <a class="header-anchor" href="#koin-dsl" aria-label="Permalink to &quot;Koin DSL&quot;">​</a></h1><p>憑藉 Kotlin 語言的強大功能，Koin 提供了一個 DSL，幫助您描述應用程式，而不是透過註解或產生程式碼來實現。透過其 Kotlin DSL，Koin 提供了一個智慧型函式式 API，用於準備您的依賴注入。</p><h2 id="應用程式與模組-dsl" tabindex="-1">應用程式與模組 DSL <a class="header-anchor" href="#應用程式與模組-dsl" aria-label="Permalink to &quot;應用程式與模組 DSL&quot;">​</a></h2><p>Koin 提供了幾個關鍵字，讓您可以描述 Koin 應用程式中的元素：</p><ul><li>應用程式 DSL，用於描述 Koin 容器組態</li><li>模組 DSL，用於描述需要注入的元件</li></ul><h2 id="應用程式-dsl" tabindex="-1">應用程式 DSL <a class="header-anchor" href="#應用程式-dsl" aria-label="Permalink to &quot;應用程式 DSL&quot;">​</a></h2><p>一個 <code>KoinApplication</code> 實例就是一個 Koin 容器實例組態。這將讓您配置日誌記錄、載入屬性以及模組。</p><p>若要建立新的 <code>KoinApplication</code>，請使用以下函式：</p><ul><li><code>koinApplication { }</code> - 建立一個 <code>KoinApplication</code> 容器組態</li><li><code>startKoin { }</code> - 建立一個 <code>KoinApplication</code> 容器組態並將其註冊到 <code>GlobalContext</code> 中，以允許使用 GlobalContext API</li></ul><p>若要配置您的 <code>KoinApplication</code> 實例，您可以使用以下任何函式：</p><ul><li><code>logger( )</code> - 指定要使用的日誌級別和 Logger 實作 (預設使用 EmptyLogger)</li><li><code>modules( )</code> - 設定要載入到容器中的 Koin 模組列表 (列表或可變引數列表)</li><li><code>properties()</code> - 將 HashMap 屬性載入到 Koin 容器中</li><li><code>fileProperties( )</code> - 從指定檔案載入屬性到 Koin 容器中</li><li><code>environmentProperties( )</code> - 從作業系統環境載入屬性到 Koin 容器中</li><li><code>createEagerInstances()</code> - 建立即時實例 (標記為 <code>createdAtStart</code> 的單例定義)</li></ul><h2 id="koinapplication-實例-全域與局部" tabindex="-1">KoinApplication 實例：全域與局部 <a class="header-anchor" href="#koinapplication-實例-全域與局部" aria-label="Permalink to &quot;KoinApplication 實例：全域與局部&quot;">​</a></h2><p>如您所見，我們可以用兩種方式描述 Koin 容器組態：<code>koinApplication</code> 或 <code>startKoin</code> 函式。</p><ul><li><code>koinApplication</code> 描述一個 Koin 容器實例</li><li><code>startKoin</code> 描述一個 Koin 容器實例並將其註冊到 Koin <code>GlobalContext</code> 中</li></ul><p>透過將您的容器組態註冊到 <code>GlobalContext</code> 中，全域 API 可以直接使用它。任何 <code>KoinComponent</code> 都會參考一個 <code>Koin</code> 實例。預設情況下，我們使用 <code>GlobalContext</code> 中的實例。</p><p>有關更多資訊，請查閱關於自訂 Koin 實例的章節。</p><h2 id="啟動-koin" tabindex="-1">啟動 Koin <a class="header-anchor" href="#啟動-koin" aria-label="Permalink to &quot;啟動 Koin&quot;">​</a></h2><p>啟動 Koin 意味著在 <code>GlobalContext</code> 中執行一個 <code>KoinApplication</code> 實例。</p><p>若要使用模組啟動 Koin 容器，我們只需像這樣使用 <code>startKoin</code> 函式：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// start a KoinApplication in Global context</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startKoin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // declare used logger</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    logger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // declare used modules</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    modules</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(coffeeAppModule)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="模組-dsl" tabindex="-1">模組 DSL <a class="header-anchor" href="#模組-dsl" aria-label="Permalink to &quot;模組 DSL&quot;">​</a></h2><p>一個 Koin 模組集合了您將為應用程式注入/組合的定義。若要建立新模組，只需使用以下函式：</p><ul><li><code>module { // 模組內容 }</code> - 建立一個 Koin 模組</li></ul><p>若要在模組中描述您的內容，您可以使用以下函式：</p><ul><li><code>factory { //definition }</code> - 提供一個工廠 bean 定義</li><li><code>single { //definition }</code> - 提供一個單例 bean 定義 (亦可別名為 <code>bean</code>)</li><li><code>get()</code> - 解析元件依賴 (亦可使用名稱、作用域或參數)</li><li><code>bind()</code> - 為給定的 bean 定義添加要綁定的類型</li><li><code>binds()</code> - 為給定的 bean 定義添加類型陣列</li><li><code>scope { // 作用域群組 }</code> - 定義 <code>scoped</code> 定義的邏輯群組</li><li><code>scoped { //definition }</code>- 提供一個僅存在於一個作用域內的 bean 定義</li></ul><p>注意：<code>named()</code> 函式允許您透過字串、列舉或類型來提供限定詞。它用於為您的定義命名。</p><h3 id="編寫模組" tabindex="-1">編寫模組 <a class="header-anchor" href="#編寫模組" aria-label="Permalink to &quot;編寫模組&quot;">​</a></h3><p>Koin 模組是您<em>宣告所有元件的空間</em>。使用 <code>module</code> 函式來宣告一個 Koin 模組：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> myModule </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // your dependencies here</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在此模組中，您可以按照下方描述來宣告元件。</p><h3 id="withoptions-dsl-選項-自-3-2-版起" tabindex="-1">withOptions - DSL 選項 (自 3.2 版起) <a class="header-anchor" href="#withoptions-dsl-選項-自-3-2-版起" aria-label="Permalink to &quot;withOptions - DSL 選項 (自 3.2 版起)&quot;">​</a></h3><p>與新的 <a href="/zh-Hant/koin/reference/koin-core/dsl-update">Constructor DSL</a> 定義一樣，您可以使用 <code>withOptions</code> 運算子在「常規」定義上指定定義選項：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    single</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ClassA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) } </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        named</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;qualifier&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        createdAtStart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在此選項 lambda 中，您可以指定以下選項：</p><ul><li><code>named(&quot;a_qualifier&quot;)</code> - 為定義提供一個字串限定詞</li><li><code>named&lt;MyType&gt;()</code> - 為定義提供一個類型限定詞</li><li><code>bind&lt;MyInterface&gt;()</code> - 為給定的 bean 定義添加要綁定的類型</li><li><code>binds(arrayOf(...))</code> - 為給定的 bean 定義添加類型陣列</li><li><code>createdAtStart()</code> - 在 Koin 啟動時建立單例實例</li></ul>`,35)]))}const E=a(l,[["render",o]]);export{k as __pageData,E as default};
