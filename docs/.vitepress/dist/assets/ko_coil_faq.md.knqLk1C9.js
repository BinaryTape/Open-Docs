import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.Bksy39di.js";const E=JSON.parse('{"title":"자주 묻는 질문","description":"","frontmatter":{},"headers":[],"relativePath":"ko/coil/faq.md","filePath":"ko/coil/faq.md","lastUpdated":1753369988000}'),t={name:"ko/coil/faq.md"};function l(p,s,h,k,r,o){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="자주-묻는-질문" tabindex="-1">자주 묻는 질문 <a class="header-anchor" href="#자주-묻는-질문" aria-label="Permalink to &quot;자주 묻는 질문&quot;">​</a></h1><p>FAQ에 없는 질문이 있으신가요? <a href="https://stackoverflow.com/questions/tagged/coil" target="_blank" rel="noreferrer">StackOverflow</a>에서 <code>#coil</code> 태그로 확인하거나 <a href="https://github.com/coil-kt/coil/discussions" target="_blank" rel="noreferrer">Github discussions</a>를 검색해 보세요.</p><h2 id="coil은-자바-프로젝트-또는-코틀린-자바-혼합-프로젝트에서-사용할-수-있나요" tabindex="-1">Coil은 자바 프로젝트 또는 코틀린/자바 혼합 프로젝트에서 사용할 수 있나요? <a class="header-anchor" href="#coil은-자바-프로젝트-또는-코틀린-자바-혼합-프로젝트에서-사용할-수-있나요" aria-label="Permalink to &quot;Coil은 자바 프로젝트 또는 코틀린/자바 혼합 프로젝트에서 사용할 수 있나요?&quot;">​</a></h2><p>네! <a href="./java_compatibility">여기서 확인하세요</a>.</p><h2 id="이미지를-미리-로드하려면-어떻게-해야-하나요" tabindex="-1">이미지를 미리 로드하려면 어떻게 해야 하나요? <a class="header-anchor" href="#이미지를-미리-로드하려면-어떻게-해야-하나요" aria-label="Permalink to &quot;이미지를 미리 로드하려면 어떻게 해야 하나요?&quot;">​</a></h2><p>타겟 없이 이미지 요청을 시작하세요:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> request </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ImageRequest.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://example.com/image.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">imageLoader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">enqueue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(request)</span></span></code></pre></div><p>이렇게 하면 이미지가 미리 로드되어 디스크 및 메모리 캐시에 저장됩니다.</p><p>디스크 캐시에만 미리 로드하려면 디코딩 및 메모리 캐시 저장을 건너뛸 수 있습니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> request </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ImageRequest.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Builder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://example.com/image.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 메모리 캐시 쓰기를 비활성화합니다.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">memoryCachePolicy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CachePolicy.DISABLED)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 디코딩 단계를 건너뛰어 이미지를 메모리로 디코딩하는 데 시간/메모리를 낭비하지 않습니다.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">decoderFactory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(BlackholeDecoder.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Factory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">imageLoader.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">enqueue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(request)</span></span></code></pre></div><h2 id="로깅을-활성화하려면-어떻게-해야-하나요" tabindex="-1">로깅을 활성화하려면 어떻게 해야 하나요? <a class="header-anchor" href="#로깅을-활성화하려면-어떻게-해야-하나요" aria-label="Permalink to &quot;로깅을 활성화하려면 어떻게 해야 하나요?&quot;">​</a></h2><p><a href="./getting_started#configuring-the-singleton-imageloader"><code>ImageLoader</code>를 구성할 때</a> <code>logger(DebugLogger())</code>를 설정하세요.</p><p>!!! 참고 <code>DebugLogger</code>는 디버그 빌드에서만 사용해야 합니다.</p><h2 id="자바-8-또는-자바-11을-타겟팅하려면-어떻게-해야-하나요" tabindex="-1">자바 8 또는 자바 11을 타겟팅하려면 어떻게 해야 하나요? <a class="header-anchor" href="#자바-8-또는-자바-11을-타겟팅하려면-어떻게-해야-하나요" aria-label="Permalink to &quot;자바 8 또는 자바 11을 타겟팅하려면 어떻게 해야 하나요?&quot;">​</a></h2><p>Coil은 <a href="https://developer.android.com/studio/write/java8-support" target="_blank" rel="noreferrer">자바 8 바이트코드</a>를 필요로 합니다. 이것은 Android Gradle Plugin <code>4.2.0</code> 이상 버전과 Kotlin Gradle Plugin <code>1.5.0</code> 이상 버전에서 기본적으로 활성화됩니다. 이전 버전의 플러그인을 사용하는 경우 Gradle 빌드 스크립트에 다음을 추가하세요:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">android</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    compileOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        sourceCompatibility </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> JavaVersion.VERSION_1_8</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        targetCompatibility </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> JavaVersion.VERSION_1_8</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    kotlinOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        jvmTarget </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;1.8&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Coil <code>3.2.0</code>부터는 <code>coil-compose</code> 및 <code>coil-compose-core</code>에 자바 11 바이트코드가 필요합니다:</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">android</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    compileOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        sourceCompatibility </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> JavaVersion.VERSION_11</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        targetCompatibility </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> JavaVersion.VERSION_11</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    kotlinOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        jvmTarget </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;11&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="개발-스냅샷은-어떻게-얻나요" tabindex="-1">개발 스냅샷은 어떻게 얻나요? <a class="header-anchor" href="#개발-스냅샷은-어떻게-얻나요" aria-label="Permalink to &quot;개발 스냅샷은 어떻게 얻나요?&quot;">​</a></h2><p>저장소 목록에 스냅샷 저장소를 추가하세요:</p><p>Gradle (<code>.gradle</code>):</p><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">allprojects {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    repositories {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        maven { url </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;https://oss.sonatype.org/content/repositories/snapshots&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Gradle Kotlin DSL (<code>.gradle.kts</code>):</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">allprojects</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    repositories</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        maven</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://oss.sonatype.org/content/repositories/snapshots&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>그 다음 <a href="https://github.com/coil-kt/coil/blob/main/gradle.properties#L34" target="_blank" rel="noreferrer">최신 스냅샷 버전</a>으로 동일한 아티팩트에 의존하세요.</p><p>!!! 참고 스냅샷은 CI를 통과하는 <code>main</code> 브랜치의 각 새 커밋에 대해 배포됩니다. 이는 잠재적으로 호환성을 깨는 변경 사항을 포함하거나 불안정할 수 있습니다. 사용 시 주의하시기 바랍니다.</p><h2 id="coil과-함께-proguard를-어떻게-사용하나요" tabindex="-1">Coil과 함께 Proguard를 어떻게 사용하나요? <a class="header-anchor" href="#coil과-함께-proguard를-어떻게-사용하나요" aria-label="Permalink to &quot;Coil과 함께 Proguard를 어떻게 사용하나요?&quot;">​</a></h2><p>Coil과 함께 Proguard를 사용하려면 설정에 다음 규칙을 추가하세요:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>-keep class * extends coil3.util.DecoderServiceLoaderTarget { *; }</span></span>
<span class="line"><span>-keep class * extends coil3.util.FetcherServiceLoaderTarget { *; }</span></span></code></pre></div><p>Ktor, OkHttp, Coroutines에 대한 사용자 지정 규칙을 추가해야 할 수도 있습니다.</p><p>!!! 참고 <strong>R8을 사용하는 경우 Coil에 대한 사용자 지정 규칙을 추가할 필요가 없습니다</strong>. R8은 Android의 기본 코드 축소기입니다. 규칙은 자동으로 추가됩니다.</p>`,31)]))}const c=i(t,[["render",l]]);export{E as __pageData,c as default};
