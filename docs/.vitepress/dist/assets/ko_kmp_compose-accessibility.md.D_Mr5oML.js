import{_ as i,c as a,o as e,ag as t}from"./chunks/framework.Bksy39di.js";const d=JSON.parse('{"title":"접근성","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kmp/compose-accessibility.md","filePath":"ko/kmp/compose-accessibility.md","lastUpdated":1755516278000}'),n={name:"ko/kmp/compose-accessibility.md"};function l(p,s,h,o,k,r){return e(),a("div",null,s[0]||(s[0]=[t(`<h1 id="접근성" tabindex="-1">접근성 <a class="header-anchor" href="#접근성" aria-label="Permalink to &quot;접근성&quot;">​</a></h1><p>Compose Multiplatform은 시맨틱 속성, 접근성 API, 화면 판독기 및 키보드 탐색을 포함한 보조 기술 지원 등 접근성 표준을 충족하는 데 필수적인 기능을 제공합니다.</p><p>이 프레임워크는 <a href="https://eur-lex.europa.eu/legal-content/EN/TXT/?uri=CELEX%3A32019L0882" target="_blank" rel="noreferrer">유럽 접근성 법</a> (EAA) 및 <a href="https://www.w3.org/TR/WCAG21/" target="_blank" rel="noreferrer">웹 콘텐츠 접근성 가이드라인</a> (WCAG)의 요구 사항을 준수하는 애플리케이션 설계를 가능하게 합니다.</p><h2 id="시맨틱-속성" tabindex="-1">시맨틱 속성 <a class="header-anchor" href="#시맨틱-속성" aria-label="Permalink to &quot;시맨틱 속성&quot;">​</a></h2><p>접근성, 자동 완성 및 테스트와 같은 서비스에 컨텍스트를 제공하기 위해 시맨틱 속성을 사용하여 컴포넌트의 의미와 역할을 정의할 수 있습니다.</p><p>시맨틱 속성은 UI의 단순화된 표현인 시맨틱 트리의 구성 요소입니다. 컴포저블에서 시맨틱 속성을 정의하면 시맨틱 트리에 자동으로 추가됩니다. 보조 기술은 전체 UI 트리가 아닌 시맨틱 트리를 탐색하여 앱과 상호 작용합니다.</p><p>접근성을 위한 주요 시맨틱 속성:</p><ul><li><p><code>contentDescription</code>은 <a href="https://kotlinlang.org/api/compose-multiplatform/material3/androidx.compose.material3/-icon-button.html" target="_blank" rel="noreferrer"><code>IconButton</code></a> 및 <a href="https://kotlinlang.org/api/compose-multiplatform/material3/androidx.compose.material3/-floating-action-button.html" target="_blank" rel="noreferrer"><code>FloatingActionButton</code></a>과 같은 비텍스트 또는 모호한 UI 요소에 대한 설명을 제공합니다. 이는 기본 접근성 API이며, 화면 판독기가 알리는 텍스트 레이블을 제공하는 데 사용됩니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Modifier.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">semantics</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { contentDescription </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Description of the image&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div></li><li><p><code>role</code>은 UI 컴포넌트의 기능적 유형(예: 버튼, 체크박스, 이미지)을 접근성 서비스에 알립니다. 이는 화면 판독기가 상호 작용 모델을 해석하고 요소를 적절하게 알리는 데 도움이 됩니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Modifier.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">semantics</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { role </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Role.Button }</span></span></code></pre></div></li><li><p><code>stateDescription</code>은 상호 작용하는 UI 요소의 현재 상태를 설명합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Modifier.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">semantics</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { stateDescription </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (isChecked) </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Checked&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> else</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Unchecked&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div></li><li><p><code>testTag</code>는 Android의 Espresso 프레임워크 또는 iOS의 XCUITest를 사용한 UI 테스트를 위해 컴포저블 요소에 고유 식별자를 할당합니다. <code>testTag</code>는 디버깅 또는 컴포넌트 식별자가 필요한 특정 자동화 시나리오에서도 사용할 수 있습니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Modifier.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">testTag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;my_unique_element_id&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></li></ul><p>시맨틱 속성의 전체 목록은 Jetpack Compose API 참조의 <a href="https://developer.android.com/reference/kotlin/androidx/compose/ui/semantics/SemanticsProperties" target="_blank" rel="noreferrer"><code>SemanticsProperties</code></a>를 참조하세요.</p><h2 id="순회-순서" tabindex="-1">순회 순서 <a class="header-anchor" href="#순회-순서" aria-label="Permalink to &quot;순회 순서&quot;">​</a></h2><p>기본적으로 화면 판독기는 UI 요소를 왼쪽에서 오른쪽, 위에서 아래로 레이아웃에 따라 고정된 순서로 탐색합니다. 그러나 복잡한 레이아웃의 경우 화면 판독기가 올바른 읽기 순서를 자동으로 결정하지 못할 수 있습니다. 이는 포함된 뷰의 스크롤 및 확대/축소를 지원하는 테이블 및 중첩 뷰와 같은 컨테이너 뷰가 있는 레이아웃에 중요합니다.</p><p>복잡한 뷰를 스크롤하고 스와이프할 때 올바른 읽기 순서를 보장하려면 순회 시맨틱 속성을 정의하십시오. 이는 또한 위로 스와이프 또는 아래로 스와이프 접근성 제스처를 사용하여 다른 순회 그룹 간의 올바른 탐색을 보장합니다.</p><p>컴포넌트의 순회 인덱스 기본값은 <code>0f</code>입니다. 컴포넌트의 순회 인덱스 값이 낮을수록 다른 컴포넌트와 비교하여 해당 contentDescription이 더 일찍 읽힐 것입니다.</p><p>예를 들어, 화면 판독기가 플로팅 액션 버튼에 우선순위를 부여하도록 하려면 해당 순회 인덱스를 <code>-1f</code>로 설정할 수 있습니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Composable</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FloatingBox</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Box</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        modifier </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Modifier.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">semantics</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            isTraversalGroup </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 기본 인덱스를 가진 요소보다 우선순위를 높이기 위해 음수 인덱스 설정</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            traversalIndex </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1f</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        FloatingActionButton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(onClick </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            Icon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                imageVector </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Icons.Default.Add,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                contentDescription </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Icon of floating action button&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="다음-단계" tabindex="-1">다음 단계 <a class="header-anchor" href="#다음-단계" aria-label="Permalink to &quot;다음 단계&quot;">​</a></h2><p>iOS용 접근성 기능에 대해 자세히 알아보십시오:</p><ul><li><a href="./compose-ios-accessibility#high-contrast-theme">고대비 테마</a></li><li><a href="./compose-ios-accessibility#test-accessibility-with-xctest-framework">XCTest 프레임워크로 접근성 테스트</a></li><li><a href="./compose-ios-accessibility#control-via-trackpad-and-keyboard">트랙패드 및 키보드를 통한 제어</a></li><li><a href="./compose-ios-accessibility#choose-the-tree-synchronization-option">시맨틱 트리를 iOS 접근성 트리와 동기화</a> (Compose Multiplatform 1.7.3 및 이전 버전에 해당)</li></ul><p>데스크톱용 접근성 기능에 대해 자세히 알아보십시오:</p><ul><li><a href="./compose-desktop-accessibility#enabling-accessibility-on-windows">Windows에서 접근성 활성화</a></li><li><a href="./compose-desktop-accessibility#example-custom-button-with-semantic-rules">macOS 및 Windows 도구로 앱 테스트</a></li></ul><p>구현 세부 정보는 <a href="https://developer.android.com/develop/ui/compose/accessibility" target="_blank" rel="noreferrer">Jetpack Compose 문서</a>를 참조하십시오.</p>`,21)]))}const E=i(n,[["render",l]]);export{d as __pageData,E as default};
