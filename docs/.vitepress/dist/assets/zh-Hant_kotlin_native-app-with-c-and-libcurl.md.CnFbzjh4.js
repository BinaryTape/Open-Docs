import{_ as h,a as e}from"./chunks/native-output.D4sfb-sK.js";import{_ as k,C as r,c as d,o as E,ag as n,j as i,a,G as t,w as p}from"./chunks/framework.Bksy39di.js";const v=JSON.parse('{"title":"使用 C 互通性與 libcurl 建立應用程式 – 教學","description":"","frontmatter":{},"headers":[],"relativePath":"zh-Hant/kotlin/native-app-with-c-and-libcurl.md","filePath":"zh-Hant/kotlin/native-app-with-c-and-libcurl.md","lastUpdated":1754307826000}'),o={name:"zh-Hant/kotlin/native-app-with-c-and-libcurl.md"};function g(c,s,y,u,F,m){const l=r("shortcut");return E(),d("div",null,[s[12]||(s[12]=n('<h1 id="使用-c-互通性與-libcurl-建立應用程式-–-教學" tabindex="-1">使用 C 互通性與 libcurl 建立應用程式 – 教學 <a class="header-anchor" href="#使用-c-互通性與-libcurl-建立應用程式-–-教學" aria-label="Permalink to &quot;使用 C 互通性與 libcurl 建立應用程式 – 教學&quot;">​</a></h1><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>C 程式庫匯入功能目前為 <a href="/zh-Hant/kotlin/native-c-interop-stability">Beta</a> 版。所有由 cinterop 工具從 C 程式庫產生的 Kotlin 宣告 都應具備 <code>@ExperimentalForeignApi</code> 註解。 Kotlin/Native 隨附的原生平台程式庫（例如 Foundation、UIKit 和 POSIX） 僅需針對部分 API 選擇加入 (opt-in)。</p></div><p>本教學示範如何使用 IntelliJ IDEA 建立一個命令列應用程式。您將學習如何使用 Kotlin/Native 和 libcurl 程式庫，建立一個可以在指定平台上原生執行的簡單 HTTP 用戶端。</p><p>輸出將是一個可執行的命令列應用程式，您可以在 macOS 和 Linux 上執行它，並發出簡單的 HTTP GET 請求。</p><p>您可以使用命令列來產生 Kotlin 程式庫，可以直接進行，或透過指令碼檔案（例如 <code>.sh</code> 或 <code>.bat</code> 檔案）進行。 然而，對於包含數百個檔案和程式庫的大型專案，這種方法的可擴展性不佳。 使用建置系統可以簡化流程，透過下載和快取 Kotlin/Native 編譯器二進位檔以及具有遞移依賴的程式庫，並執行編譯器和測試。 Kotlin/Native 可以透過 <a href="/zh-Hant/kotlin/gradle-configure-project#targeting-multiple-platforms">Kotlin Multiplatform plugin</a> 使用 <a href="https://gradle.org" target="_blank" rel="noreferrer">Gradle</a> 建置系統。</p><h2 id="開始之前" tabindex="-1">開始之前 <a class="header-anchor" href="#開始之前" aria-label="Permalink to &quot;開始之前&quot;">​</a></h2><ol><li><p>下載並安裝最新版 <a href="https://www.jetbrains.com/idea/" target="_blank" rel="noreferrer">IntelliJ IDEA</a>。</p></li><li><p>在 IntelliJ IDEA 中，透過選取 <strong>File</strong> | <strong>New</strong> | <strong>Project from Version Control</strong> 並使用此 URL，來複製 (clone) <a href="https://github.com/Kotlin/kmp-native-wizard" target="_blank" rel="noreferrer">專案範本</a>：</p><div class="language-none vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">none</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>https://github.com/Kotlin/kmp-native-wizard</span></span></code></pre></div></li><li><p>探索專案結構：</p><p><img src="'+e+`" alt="Native application project structure" width="700"></p><p>此範本包含一個專案，其中包含您入門所需的檔案和資料夾。重要的是要理解，如果程式碼沒有平台特定要求，則以 Kotlin/Native 撰寫的應用程式可以針對不同的平台。您的程式碼位於 <code>nativeMain</code> 目錄中，並有對應的 <code>nativeTest</code>。對於本教學，請保持資料夾結構不變。</p></li><li><p>開啟 <code>build.gradle.kts</code> 檔案，這是包含專案設定的建置指令碼。請特別注意建置檔案中的以下內容：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kotlin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hostOs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;os.name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isArm64 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> System.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;os.arch&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;aarch64&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isMingwX64 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hostOs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">startsWith</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Windows&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nativeTarget </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> when</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        hostOs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Mac OS X&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isArm64 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> macosArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;native&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        hostOs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Mac OS X&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">isArm64 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> macosX64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;native&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        hostOs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Linux&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isArm64 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> linuxArm64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;native&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        hostOs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Linux&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">isArm64 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> linuxX64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;native&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        isMingwX64 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mingwX64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;native&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> throw</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GradleException</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Host OS is not supported in Kotlin/Native.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    nativeTarget.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        binaries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                entryPoint </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;main&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li>目標是使用 <code>macosArm64</code>、<code>macosX64</code>、<code>linuxArm64</code>、<code>linuxX64</code> 和 <code>mingwX64</code> 針對 macOS、Linux 和 Windows 定義的。請參閱 <a href="/zh-Hant/kotlin/native-target-support">支援平台</a> 的完整列表。</li><li><code>binaries {}</code> 區塊定義了二進位檔的產生方式和應用程式的進入點。 這些可以保留為預設值。</li><li>C 互通性在建置中配置為一個額外步驟。預設情況下，來自 C 的所有符號都會匯入到 <code>interop</code> 套件中。您可能希望在 <code>.kt</code> 檔案中匯入整個套件。了解更多關於 <a href="/zh-Hant/kotlin/gradle-configure-project#targeting-multiple-platforms">如何配置</a> 的資訊。</li></ul></li></ol><h2 id="建立定義檔案" tabindex="-1">建立定義檔案 <a class="header-anchor" href="#建立定義檔案" aria-label="Permalink to &quot;建立定義檔案&quot;">​</a></h2><p>在撰寫原生應用程式時，您通常需要存取 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/" target="_blank" rel="noreferrer">Kotlin 標準函式庫</a> 中未包含的某些功能，例如發出 HTTP 請求、從磁碟讀取和寫入等等。</p><p>Kotlin/Native 有助於使用標準 C 程式庫，開啟了幾乎您可能需要的任何功能的完整生態系統。Kotlin/Native 已隨附一組預先建置的 <a href="/zh-Hant/kotlin/native-platform-libs">平台程式庫</a>， 它們為標準函式庫提供了一些額外的通用功能。</p><p>互通性 (interop) 的理想情境是像呼叫 Kotlin 函數一樣呼叫 C 函數，遵循相同的簽章和慣例。這就是 cinterop 工具派上用場的時候。它接收一個 C 程式庫並產生對應的 Kotlin 繫結，以便該程式庫可以像 Kotlin 程式碼一樣使用。</p><p>為了產生這些繫結，每個程式庫都需要一個定義檔案，通常與程式庫同名。 這是一個屬性檔案，精確描述了程式庫應如何被使用。</p><p>在此應用程式中，您將需要 libcurl 程式庫來進行一些 HTTP 呼叫。要建立其定義檔案：</p><ol><li><p>選取 <code>src</code> 資料夾並透過 <strong>File | New | Directory</strong> 建立一個新目錄。</p></li><li><p>將新目錄命名為 <strong>nativeInterop/cinterop</strong>。這是標頭檔位置的預設慣例， 儘管如果您使用不同的位置，可以在 <code>build.gradle.kts</code> 檔案中覆寫此設定。</p></li><li><p>選取此新子資料夾並透過 <strong>File | New | File</strong> 建立一個新的 <code>libcurl.def</code> 檔案。</p></li><li><p>使用以下程式碼更新您的檔案：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">headers </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> curl</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">curl.h</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">headerFilter </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> curl</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">compilerOpts.linux = -I/usr/include -I/usr/include/x86_64-linux-gnu</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">linkerOpts.osx = -L/opt/local/lib -L/usr/local/opt/curl/lib -lcurl</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">linkerOpts.linux = -L/usr/lib/x86_64-linux-gnu -lcurl</span></span></code></pre></div><ul><li><p><code>headers</code> 是要為其產生 Kotlin 存根的標頭檔列表。您可以在此處新增多個檔案， 每個檔案之間用空格分隔。在本例中，它只有 <code>curl.h</code>。引用的檔案需要在指定路徑（在本例中為 <code>/usr/include/curl</code>）上可用。</p></li><li><p><code>headerFilter</code> 顯示了確切包含的內容。在 C 語言中，當一個檔案使用 <code>#include</code> 指示詞引用另一個檔案時，所有標頭也會被包含。有時這是不必要的，您可以 <a href="https://en.wikipedia.org/wiki/Glob_(programming)" target="_blank" rel="noreferrer">使用 glob 模式</a> 加入此參數進行調整。</p><p>如果您不想將外部依賴（例如系統 <code>stdint.h</code> 標頭）引入互通程式庫，可以使用 <code>headerFilter</code>。此外，它可能對程式庫大小最佳化以及解決系統與所提供的 Kotlin/Native 編譯環境之間的潛在衝突很有用。</p></li><li><p>如果需要修改特定平台的行為，您可以使用類似 <code>compilerOpts.osx</code> 或 <code>compilerOpts.linux</code> 的格式為選項提供平台特定值。在本例中，它們是 macOS（<code>.osx</code> 後綴）和 Linux（<code>.linux</code> 後綴）。 不帶後綴的參數也是可行的（例如 <code>linkerOpts=</code>），並適用於所有平台。</p></li></ul><p>有關可用選項的完整列表，請參閱 <a href="/zh-Hant/kotlin/native-definition-file#properties">定義檔案</a>。</p></li></ol><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>您需要系統上擁有 <code>curl</code> 程式庫二進位檔才能使範例運作。在 macOS 和 Linux 上，它們通常已包含在內。在 Windows 上，您可以從 <a href="https://curl.se/download.html" target="_blank" rel="noreferrer">原始碼</a> 建置它（您需要 Microsoft Visual Studio 或 Windows SDK 命令列工具）。有關更多詳細資訊，請參閱 <a href="https://jonnyzzz.com/blog/2018/10/29/kn-libcurl-windows/" target="_blank" rel="noreferrer">相關部落格文章</a>。 或者，您可能想考慮使用 <a href="https://www.msys2.org/" target="_blank" rel="noreferrer">MinGW/MSYS2</a> 的 <code>curl</code> 二進位檔。</p></div><h2 id="將互通性加入建置流程" tabindex="-1">將互通性加入建置流程 <a class="header-anchor" href="#將互通性加入建置流程" aria-label="Permalink to &quot;將互通性加入建置流程&quot;">​</a></h2><p>要使用標頭檔，請確保它們作為建置流程的一部分產生。為此，請將以下 <code>compilations {}</code> 區塊加入 <code>build.gradle.kts</code> 檔案：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">nativeTarget.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    compilations.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getByName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;main&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        cinterops</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> libcurl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> creating</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    binaries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        executable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            entryPoint </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;main&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>首先，加入 <code>cinterops</code>，然後是定義檔案的條目。預設情況下，使用檔案的名稱。 您可以使用額外參數覆寫此設定：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cinterops</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> libcurl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">by</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> creating</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        definitionFile.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(project.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;src/nativeInterop/cinterop/libcurl.def&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        packageName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;com.jetbrains.handson.http&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        compilerOpts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;-I/path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        includeDirs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">allHeaders</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="編寫應用程式碼" tabindex="-1">編寫應用程式碼 <a class="header-anchor" href="#編寫應用程式碼" aria-label="Permalink to &quot;編寫應用程式碼&quot;">​</a></h2><p>現在您擁有了程式庫和對應的 Kotlin 存根，您可以在應用程式中使用它們。 對於本教學，請將 <a href="https://curl.se/libcurl/c/simple.html" target="_blank" rel="noreferrer">simple.c</a> 範例轉換為 Kotlin。</p><p>在 <code>src/nativeMain/kotlin/</code> 資料夾中，使用以下程式碼更新您的 <code>Main.kt</code> 檔案：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlinx.cinterop.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> libcurl.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@OptIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ExperimentalForeignApi::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> curl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> curl_easy_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (curl </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        curl_easy_setopt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(curl, CURLOPT_URL, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://example.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        curl_easy_setopt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(curl, CURLOPT_FOLLOWLOCATION, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1L</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> res </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> curl_easy_perform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(curl)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (res </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CURLE_OK) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">            println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;curl_easy_perform() failed \${</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">curl_easy_strerror</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(res)?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toKString</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">()}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        curl_easy_cleanup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(curl)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>如您所見，Kotlin 版本中消除了明確的變數宣告，但其他一切與 C 版本大致相同。您在 libcurl 程式庫中期望的所有呼叫都可在 Kotlin 等效項中取得。</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>這是一個逐行直譯。您也可以用更符合 Kotlin 慣用方式來編寫。</p></div><h2 id="編譯並執行應用程式" tabindex="-1">編譯並執行應用程式 <a class="header-anchor" href="#編譯並執行應用程式" aria-label="Permalink to &quot;編譯並執行應用程式&quot;">​</a></h2>`,27)),i("ol",null,[s[11]||(s[11]=n('<li><p>編譯應用程式。為此，請從任務列表執行 <code>runDebugExecutableNative</code> Gradle 工作，或在終端機中使用以下命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./gradlew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> runDebugExecutableNative</span></span></code></pre></div><p>在本例中，由 cinterop 工具產生的一部分已隱含包含在建置中。</p></li>',1)),i("li",null,[i("p",null,[s[2]||(s[2]=a("如果編譯期間沒有錯誤，請點擊 ")),s[3]||(s[3]=i("code",null,"main()",-1)),s[4]||(s[4]=a(" 函數旁邊側邊欄中的綠色 ")),s[5]||(s[5]=i("strong",null,"Run",-1)),s[6]||(s[6]=a(" 圖示，或 使用 ")),t(l,null,{default:p(()=>s[0]||(s[0]=[a("Shift + Cmd + R")])),_:1}),s[7]||(s[7]=a("/")),t(l,null,{default:p(()=>s[1]||(s[1]=[a("Shift + F10")])),_:1}),s[8]||(s[8]=a(" 快速鍵。"))]),s[9]||(s[9]=i("p",null,[a("IntelliJ IDEA 將開啟 "),i("strong",null,"Run"),a(" 分頁並顯示輸出 — 即 "),i("a",{href:"https://example.com/",target:"_blank",rel:"noreferrer"},"example.com"),a(" 的內容：")],-1)),s[10]||(s[10]=i("p",null,[i("img",{src:h,alt:"Application output with HTML-code",width:"700"})],-1))])]),s[13]||(s[13]=n('<p>您可以看到實際輸出，因為 <code>curl_easy_perform</code> 呼叫會將結果列印到標準輸出。您可以使用 <code>curl_easy_setopt</code> 隱藏此內容。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>您可以在我們的 <a href="https://github.com/Kotlin/kotlin-hands-on-intro-kotlin-native" target="_blank" rel="noreferrer">GitHub 儲存庫</a> 中取得完整的專案程式碼。</p></div><h2 id="下一步" tabindex="-1">下一步 <a class="header-anchor" href="#下一步" aria-label="Permalink to &quot;下一步&quot;">​</a></h2><p>了解更多關於 <a href="/zh-Hant/kotlin/native-c-interop">Kotlin 與 C 的互通性</a> 的資訊。</p>',4))])}const A=k(o,[["render",g]]);export{v as __pageData,A as default};
