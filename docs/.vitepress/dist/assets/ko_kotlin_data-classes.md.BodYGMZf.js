import{_ as i,c as a,o as n,ag as h}from"./chunks/framework.Bksy39di.js";const E=JSON.parse('{"title":"데이터 클래스","description":"","frontmatter":{},"headers":[],"relativePath":"ko/kotlin/data-classes.md","filePath":"ko/kotlin/data-classes.md","lastUpdated":1754307826000}'),l={name:"ko/kotlin/data-classes.md"};function t(e,s,k,p,d,o){return n(),a("div",null,s[0]||(s[0]=[h(`<h1 id="데이터-클래스" tabindex="-1">데이터 클래스 <a class="header-anchor" href="#데이터-클래스" aria-label="Permalink to &quot;데이터 클래스&quot;">​</a></h1><p>코틀린의 데이터 클래스는 주로 데이터를 담는 데 사용됩니다. 각 데이터 클래스에 대해 컴파일러는 인스턴스를 읽기 쉬운 출력으로 인쇄하고, 인스턴스를 비교하고, 인스턴스를 복사하는 등의 추가적인 멤버 함수를 자동으로 생성합니다. 데이터 클래스는 <code>data</code>로 표시됩니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>컴파일러는 주 생성자에 선언된 모든 프로퍼티로부터 다음 멤버를 자동으로 파생시킵니다.</p><ul><li><code>equals()</code>/<code>hashCode()</code> 쌍.</li><li><code>&quot;User(name=John, age=42)&quot;</code> 형태의 <code>toString()</code>.</li><li>선언 순서에 따라 프로퍼티에 해당하는 <a href="/ko/kotlin/destructuring-declarations"><code>componentN()</code> 함수</a>.</li><li><code>copy()</code> 함수 (아래 참조).</li></ul><p>생성된 코드의 일관성과 의미 있는 동작을 보장하기 위해 데이터 클래스는 다음 요구 사항을 충족해야 합니다.</p><ul><li>주 생성자는 하나 이상의 매개변수를 가져야 합니다.</li><li>모든 주 생성자 매개변수는 <code>val</code> 또는 <code>var</code>로 표시되어야 합니다.</li><li>데이터 클래스는 <code>abstract</code>, <code>open</code>, <code>sealed</code>, <code>inner</code>일 수 없습니다.</li></ul><p>또한, 데이터 클래스 멤버 생성은 멤버의 상속과 관련하여 다음 규칙을 따릅니다.</p><ul><li>데이터 클래스 본문에 <code>equals()</code>, <code>hashCode()</code>, 또는 <code>toString()</code>의 명시적 구현이 있거나 슈퍼클래스에 <code>final</code> 구현이 있는 경우, 이 함수들은 생성되지 않고 기존 구현이 사용됩니다.</li><li>상위 타입에 <code>open</code>이며 호환 가능한 타입을 반환하는 <code>componentN()</code> 함수가 있는 경우, 해당 함수는 데이터 클래스용으로 생성되고 상위 타입의 함수를 오버라이드합니다. 상위 타입의 함수가 호환되지 않는 시그니처 또는 <code>final</code>이기 때문에 오버라이드될 수 없는 경우, 오류가 보고됩니다.</li><li><code>componentN()</code> 및 <code>copy()</code> 함수에 대한 명시적 구현을 제공하는 것은 허용되지 않습니다.</li></ul><p>데이터 클래스는 다른 클래스를 상속할 수 있습니다(예시는 <a href="/ko/kotlin/sealed-classes">봉인된 클래스</a>를 참조하세요).</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>JVM에서, 생성된 클래스가 매개변수 없는 생성자를 가져야 하는 경우, 프로퍼티의 기본값이 지정되어야 합니다(<a href="/ko/kotlin/classes#constructors">생성자</a> 참조). <code>kotlin data class User(val name: String = &quot;&quot;, val age: Int = 0) </code></p></div><h2 id="클래스-본문에-선언된-프로퍼티" tabindex="-1">클래스 본문에 선언된 프로퍼티 <a class="header-anchor" href="#클래스-본문에-선언된-프로퍼티" aria-label="Permalink to &quot;클래스 본문에 선언된 프로퍼티&quot;">​</a></h2><p>컴파일러는 자동으로 생성된 함수에 대해 주 생성자 내부에 정의된 프로퍼티만 사용합니다. 생성된 구현에서 프로퍼티를 제외하려면 클래스 본문 내부에 선언하십시오.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>아래 예시에서 <code>toString()</code>, <code>equals()</code>, <code>hashCode()</code>, <code>copy()</code> 구현 내부에서는 기본적으로 <code>name</code> 프로퍼티만 사용되며, <code>component1()</code>이라는 컴포넌트 함수가 하나만 있습니다. <code>age</code> 프로퍼티는 클래스 본문 내부에 선언되었으며 제외됩니다. 따라서 <code>equals()</code>가 주 생성자의 프로퍼티만 평가하기 때문에 <code>name</code>은 같지만 <code>age</code> 값은 다른 두 <code>Person</code> 객체는 동일하게 간주됩니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> person1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;John&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> person2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;John&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    person1.age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    person2.age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;person1 == person2: \${person1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> person2}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // person1 == person2: true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;person1 with age \${person1.age}: \${person1}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // person1 with age 10: Person(name=John)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;person2 with age \${person2.age}: \${person2}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // person2 with age 20: Person(name=John)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="복사" tabindex="-1">복사 <a class="header-anchor" href="#복사" aria-label="Permalink to &quot;복사&quot;">​</a></h2><p><code>copy()</code> 함수를 사용하여 객체를 복사하면 프로퍼티 중 _일부_를 변경하면서 나머지는 변경되지 않은 상태로 유지할 수 있습니다. 위의 <code>User</code> 클래스에 대한 이 함수의 구현은 다음과 같습니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> copy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name, age: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.age) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name, age)</span></span></code></pre></div><p>그러면 다음과 같이 작성할 수 있습니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jack </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Jack&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> olderJack </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jack.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">copy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(age </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="데이터-클래스와-구조-분해-선언" tabindex="-1">데이터 클래스와 구조 분해 선언 <a class="header-anchor" href="#데이터-클래스와-구조-분해-선언" aria-label="Permalink to &quot;데이터 클래스와 구조 분해 선언&quot;">​</a></h2><p>데이터 클래스용으로 생성된 _컴포넌트 함수_는 <a href="/ko/kotlin/destructuring-declarations">구조 분해 선언</a>에서 사용할 수 있게 합니다.</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jane </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Jane&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">35</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (name, age) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jane</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$age</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> years of age&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Jane, 35 years of age</span></span></code></pre></div><h2 id="표준-데이터-클래스" tabindex="-1">표준 데이터 클래스 <a class="header-anchor" href="#표준-데이터-클래스" aria-label="Permalink to &quot;표준 데이터 클래스&quot;">​</a></h2><p>표준 라이브러리는 <code>Pair</code> 및 <code>Triple</code> 클래스를 제공합니다. 하지만 대부분의 경우, 이름 있는 데이터 클래스는 프로퍼티에 의미 있는 이름을 제공하여 코드를 더 읽기 쉽게 만들기 때문에 더 나은 설계 선택입니다.</p>`,26)]))}const c=i(l,[["render",t]]);export{E as __pageData,c as default};
