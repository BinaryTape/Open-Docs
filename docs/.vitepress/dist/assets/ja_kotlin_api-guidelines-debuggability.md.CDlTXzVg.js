import{_ as i,a,b as n,c as t,d as l}from"./chunks/halt-tostring-result.BEv2IleX.js";import{_ as p,c as h,o as k,ag as e}from"./chunks/framework.Bksy39di.js";const C=JSON.parse('{"title":"デバッグの容易性","description":"","frontmatter":{},"headers":[],"relativePath":"ja/kotlin/api-guidelines-debuggability.md","filePath":"ja/kotlin/api-guidelines-debuggability.md","lastUpdated":1754307826000}'),r={name:"ja/kotlin/api-guidelines-debuggability.md"};function d(E,s,g,o,y,c){return k(),h("div",null,s[0]||(s[0]=[e(`<h1 id="デバッグの容易性" tabindex="-1">デバッグの容易性 <a class="header-anchor" href="#デバッグの容易性" aria-label="Permalink to &quot;デバッグの容易性&quot;">​</a></h1><p>あなたのライブラリのユーザーは、その機能の上に構築を行い、彼らが構築する機能には特定して解決する必要があるエラーが含まれるでしょう。このエラー解決プロセスは、開発中にデバッガー内で行われることもあれば、本番環境でロギングおよび可観測性ツールを使用することもあります。あなたのライブラリは、デバッグを容易にするために以下のベストプラクティスに従うことができます。</p><h2 id="状態を持つ型にtostringメソッドを提供する" tabindex="-1">状態を持つ型にtoStringメソッドを提供する <a class="header-anchor" href="#状態を持つ型にtostringメソッドを提供する" aria-label="Permalink to &quot;状態を持つ型にtoStringメソッドを提供する&quot;">​</a></h2><p>状態を持つすべての型について、意味のある <code>toString</code> 実装を提供してください。この実装は、たとえ内部的な型であっても、インスタンスの現在の内容を分かりやすく表現するものを返すようにすべきです。</p><p>型の <code>toString</code> 表現はしばしばログに書き込まれるため、このメソッドを実装する際にはセキュリティを考慮し、機密性の高いユーザーデータを返さないようにしてください。</p><p>状態を記述するために使用される形式は、ライブラリ内の異なる型間で可能な限り一貫性があるようにしてください。この形式は、APIによって実装されるコントラクトの一部である場合、明示的に記述され、十分に文書化されるべきです。<code>toString</code> メソッドからの出力は、例えば自動テストスイートで、パースをサポートする可能性があります。</p><p>例えば、サービス購読をサポートするライブラリの以下の型を考えてみましょう。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">enum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SubscriptionResultReason</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Success, InsufficientFunds, IncompatibleAccount</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SubscriptionResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> reason: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SubscriptionResultReason</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> description: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><code>toString</code> メソッドがない場合、<code>SubscriptionResult</code> インスタンスをそのまま表示しても、あまり有用ではありません。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SubscriptionResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">       false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       IncompatibleAccount,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">       &quot;Users account does not support this type of subscription&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //prints &#39;org.example.SubscriptionResult@13221655&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>デバッガーでも、情報がすぐには表示されません。</p><p><img src="`+i+`" alt="Results in the debugger" width="500"></p><p>シンプルな <code>toString</code> 実装を追加すると、どちらの場合でも出力が大幅に改善されます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//prints &#39;Subscription failed (reason=IncompatibleAccount, description=&quot;Users </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// account does not support this type of subscription&quot;)&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> resultText </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result) </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;succeeded&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> else</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;failed&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Subscription </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$resultText</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> (reason=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$reason</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">, description=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;$description\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><img src="`+a+`" alt="Adding toString results in a much better result" width="700"></p><p><code>toString</code> メソッドを自動的に得るためにデータクラスを使用することは魅力的かもしれませんが、後方互換性の理由から推奨されません。データクラスについては、<a href="/ja/kotlin/api-guidelines-backward-compatibility#avoid-using-data-classes-in-your-api">APIでのデータクラスの使用を避ける</a>セクションで詳しく説明されています。</p><p><code>toString</code> メソッドで記述される状態は、問題領域からの情報である必要はないことに注意してください。それは、進行中のリクエストのステータス（上記の例のように）、外部サービスへの接続の健全性、または進行中の操作における中間状態に関連する可能性があります。</p><p>例えば、以下のビルダー型を考えてみましょう。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">?,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> children: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &quot;Person(name=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">, age=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$age</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">, children=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$children</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PersonBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> age: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> children </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> arrayListOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> child</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(personBuilder: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PersonBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Unit </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       children.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(personBuilder))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Person</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name, age, children)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(personBuilder: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PersonBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Unit </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Person</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    PersonBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(personBuilder).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>この型の使用例は次のとおりです。</p><p><img src="`+n+'" alt="Using the builder type example" width="500"></p><p>上記の画像に表示されているブレークポイントでコードを停止させると、表示される情報はあまり有用ではありません。</p><p><img src="'+t+`" alt="Halting code at the breakpoint result" width="500"></p><p>シンプルな <code>toString</code> 実装を追加すると、はるかに有用な出力が得られます。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;PersonBuilder(name=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">, age=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$age</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">, children=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$children</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)&quot;</span></span></code></pre></div><p>この追加により、デバッガーは次のように表示します。</p><p><img src="`+l+'" alt="Adding toString to the halt point" width="700"></p><p>これにより、どのフィールドが設定されており、どれが設定されていないかを即座に確認できます。</p><h2 id="例外処理のポリシーを採用し、文書化する" tabindex="-1">例外処理のポリシーを採用し、文書化する <a class="header-anchor" href="#例外処理のポリシーを採用し、文書化する" aria-label="Permalink to &quot;例外処理のポリシーを採用し、文書化する&quot;">​</a></h2><p><a href="/ja/kotlin/api-guidelines-consistency#choose-the-appropriate-error-handling-mechanism">適切なエラー処理メカニズムの選択</a>セクションで議論されているように、ライブラリがエラーを通知するために例外をスローすることが適切な場合があります。この目的のために、独自の例外型を作成することもできます。</p><p>低レベルAPIを抽象化および簡素化するライブラリは、その依存関係によってスローされる例外も処理する必要があります。ライブラリは、例外を抑制するか、そのまま渡すか、異なる型の例外に変換するか、または異なる方法でユーザーにエラーを通知するかを選択できます。</p><p>これらのオプションのいずれも、コンテキストによっては有効です。例えば、</p><ul><li>ユーザーがライブラリBを簡素化する利便性のためだけにライブラリAを採用する場合、ライブラリAがライブラリBによって生成された例外を修正せずに再スローすることが適切である場合があります。</li><li>ライブラリAがライブラリBを純粋に内部的な実装の詳細として採用する場合、ライブラリBによってスローされるライブラリ固有の例外は、ライブラリAのユーザーに決して公開されるべきではありません。</li></ul><p>ユーザーがあなたのライブラリを効果的に使用できるように、例外処理に対する一貫したアプローチを採用し、文書化する必要があります。これはデバッグにとって特に重要です。ライブラリのユーザーは、デバッガーやログにおいて、例外があなたのライブラリから発生したものであることを認識できるべきです。</p><p>例外の型はエラーの種類を示すべきであり、例外に含まれるデータはユーザーが問題の根本原因を特定するのに役立つべきです。一般的なパターンは、低レベルの例外をライブラリ固有の例外でラップし、元の例外が <code>cause</code> としてアクセスできるようにすることです。</p><h2 id="次のステップ" tabindex="-1">次のステップ <a class="header-anchor" href="#次のステップ" aria-label="Permalink to &quot;次のステップ&quot;">​</a></h2><p>ガイドの次のパートでは、テスト容易性について学びます。</p><p><a href="/ja/kotlin/api-guidelines-testability">次のパートに進む</a></p>',38)]))}const B=p(r,[["render",d]]);export{C as __pageData,B as default};
