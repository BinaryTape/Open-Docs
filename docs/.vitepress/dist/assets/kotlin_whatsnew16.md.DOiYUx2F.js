import{_ as r,C as l,c as o,o as d,ag as h,j as i,G as t,w as n,a}from"./chunks/framework.Bksy39di.js";const C=JSON.parse('{"title":"Kotlin 1.6.0 新特性","description":"","frontmatter":{},"headers":[],"relativePath":"kotlin/whatsnew16.md","filePath":"kotlin/whatsnew16.md","lastUpdated":1754307826000}'),E={name:"kotlin/whatsnew16.md"};function g(c,s,y,F,u,b){const e=l("tab"),k=l("tabs"),p=l("YouTubeVideo");return d(),o("div",null,[s[6]||(s[6]=h(`<h1 id="kotlin-1-6-0-新特性" tabindex="-1">Kotlin 1.6.0 新特性 <a class="header-anchor" href="#kotlin-1-6-0-新特性" aria-label="Permalink to &quot;Kotlin 1.6.0 新特性&quot;">​</a></h1><p><a href="/kotlin/releases#release-details">发布日期：2021 年 11 月 16 日</a></p><p>Kotlin 1.6.0 引入了新的语言特性、对现有特性的优化和改进，以及对 Kotlin 标准库的诸多改进。</p><p>你也可以在<a href="https://blog.jetbrains.com/kotlin/2021/11/kotlin-1-6-0-is-released/" target="_blank" rel="noreferrer">发布博客文章</a>中找到这些变更的概述。</p><h2 id="语言" tabindex="-1">语言 <a class="header-anchor" href="#语言" aria-label="Permalink to &quot;语言&quot;">​</a></h2><p>Kotlin 1.6.0 将在上一个 1.5.30 版本中作为预览引入的若干语言特性提升至稳定版：</p><ul><li><a href="#stable-exhaustive-when-statements-for-enum-sealed-and-boolean-subjects">枚举、密封类和布尔类型主体的稳定穷尽式 when 语句</a></li><li><a href="#stable-suspending-functions-as-supertypes">作为超类型的稳定挂起函数</a></li><li><a href="#stable-suspend-conversions">稳定的挂起转换</a></li><li><a href="#stable-instantiation-of-annotation-classes">注解类的稳定实例化</a></li></ul><p>它还包括各种类型推断改进以及对类类型形参的注解支持：</p><ul><li><a href="#improved-type-inference-for-recursive-generic-types">递归泛型类型的改进类型推断</a></li><li><a href="#changes-to-builder-inference">构建器推断的变更</a></li><li><a href="#support-for-annotations-on-class-type-parameters">类类型形参的注解支持</a></li></ul><h3 id="枚举、密封类和布尔类型主体的稳定穷尽式-when-语句" tabindex="-1">枚举、密封类和布尔类型主体的稳定穷尽式 when 语句 <a class="header-anchor" href="#枚举、密封类和布尔类型主体的稳定穷尽式-when-语句" aria-label="Permalink to &quot;枚举、密封类和布尔类型主体的稳定穷尽式 when 语句&quot;">​</a></h3><p>一个_穷尽式_ <a href="/kotlin/control-flow#when-expressions-and-statements"><code>when</code></a> 语句包含针对其主体所有可能的类型或值的分支，或者针对某些类型加上一个 <code>else</code> 分支。它涵盖了所有可能的情况，使你的代码更安全。</p><p>我们很快将禁止非穷尽式 <code>when</code> 语句，以使其行为与 <code>when</code> 表达式保持一致。为确保平稳迁移，Kotlin 1.6.0 会对使用枚举、密封类或布尔类型主体的非穷尽式 <code>when</code> 语句报告警告。这些警告将在未来版本中变为错误。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">sealed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Contact</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PhoneCall</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> number: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Contact</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TextMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> number: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Contact</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Contact</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">messageCost</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    when</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Error: &#39;when&#39; expression must be exhaustive</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Contact.PhoneCall </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 42</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sendMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(contact: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Contact</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, message: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Starting with 1.6.0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 警告：针对布尔类型的非穷尽式 &#39;when&#39; 语句将在 1.7 中被禁止，请添加 &#39;false&#39; 分支或 &#39;else&#39; 分支</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    when</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(message.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isEmpty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        true</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> return</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 警告：针对密封类/接口的非穷尽式 &#39;when&#39; 语句将在 1.7 中被禁止，请添加 &#39;is TextMessage&#39; 分支或 &#39;else&#39; 分支</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    when</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(contact) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        is</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Contact.PhoneCall </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TODO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>关于此变更及其影响的更详细解释，请参见<a href="https://youtrack.jetbrains.com/issue/KT-47709" target="_blank" rel="noreferrer">此 YouTrack 工单</a>。</p><h3 id="作为超类型的稳定挂起函数" tabindex="-1">作为超类型的稳定挂起函数 <a class="header-anchor" href="#作为超类型的稳定挂起函数" aria-label="Permalink to &quot;作为超类型的稳定挂起函数&quot;">​</a></h3><p>挂起函数类型的实现已在 Kotlin 1.6.0 中<a href="/kotlin/components-stability">稳定</a>。<a href="/kotlin/whatsnew1530#suspending-functions-as-supertypes">1.5.30</a> 中提供了预览版。</p><p>此特性在设计使用 Kotlin 协程并接受挂起函数类型的 API 时非常有用。你现在可以将所需行为封装在一个实现挂起函数类型的单独类中，从而简化代码。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyClickAction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">suspend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Unit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> suspend</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> invoke</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TODO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> launchOnClick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(action: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">suspend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Unit) {}</span></span></code></pre></div><p>你可以在之前只允许 lambda 表达式和挂起函数引用的地方使用此类的实例：<code>launchOnClick(MyClickAction())</code>。</p><p>目前，由于实现细节，存在两个限制：</p><ul><li>你不能在超类型列表中混合使用普通函数类型和挂起函数类型。</li><li>你不能使用多个挂起函数超类型。</li></ul><h3 id="稳定的挂起转换" tabindex="-1">稳定的挂起转换 <a class="header-anchor" href="#稳定的挂起转换" aria-label="Permalink to &quot;稳定的挂起转换&quot;">​</a></h3><p>Kotlin 1.6.0 引入了从普通函数类型到挂起函数类型的<a href="/kotlin/components-stability">稳定</a>转换。从 1.4.0 开始，此特性支持函数字面量和可调用引用。在 1.6.0 中，它适用于任何形式的表达式。现在，你可以将合适普通函数类型的任何表达式作为调用实参传递给需要挂起类型的地方。编译器将自动执行隐式转换。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getSuspending</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(suspending: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">suspend</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Unit) {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> suspending</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(regular: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Unit) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    getSuspending</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { }           </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// OK</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    getSuspending</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">suspending</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// OK</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    getSuspending</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(regular)      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// OK</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="注解类的稳定实例化" tabindex="-1">注解类的稳定实例化 <a class="header-anchor" href="#注解类的稳定实例化" aria-label="Permalink to &quot;注解类的稳定实例化&quot;">​</a></h3><p>Kotlin 1.5.30 <a href="/kotlin/whatsnew1530#instantiation-of-annotation-classes">引入了</a>在 JVM 平台上注解类实例化的实验性支持。在 1.6.0 中，此特性默认在 Kotlin/JVM 和 Kotlin/JS 上都可用。</p><p>关于注解类实例化的更多信息，请参见<a href="https://github.com/Kotlin/KEEP/blob/master/proposals/annotation-instantiation.md" target="_blank" rel="noreferrer">此 KEEP</a>。</p><h3 id="递归泛型类型的改进类型推断" tabindex="-1">递归泛型类型的改进类型推断 <a class="header-anchor" href="#递归泛型类型的改进类型推断" aria-label="Permalink to &quot;递归泛型类型的改进类型推断&quot;">​</a></h3><p>Kotlin 1.5.30 引入了一项针对递归泛型类型的类型推断改进，该改进允许仅根据相应类型形参的上界来推断其类型实参。此改进之前需要通过编译器选项启用。在 1.6.0 及更高版本中，它默认启用。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Before 1.5.30</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> containerA </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PostgreSQLContainer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(DockerImageName.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;postgres:13-alpine&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apply</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  withDatabaseName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;db&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  withUsername</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  withPassword</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;password&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  withInitScript</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sql/schema.sql&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// With compiler option in 1.5.30 or by default starting with 1.6.0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> containerB </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PostgreSQLContainer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(DockerImageName.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;postgres:13-alpine&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withDatabaseName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;db&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withUsername</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;user&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withPassword</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;password&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">withInitScript</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;sql/schema.sql&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="构建器推断的变更" tabindex="-1">构建器推断的变更 <a class="header-anchor" href="#构建器推断的变更" aria-label="Permalink to &quot;构建器推断的变更&quot;">​</a></h3><p>构建器推断是一种类型推断形式，在调用泛型构建器函数时很有用。它可以借助其 lambda 表达式实参内部调用中的类型信息来推断调用的类型实参。</p><p>我们正在进行多项变更，使我们更接近完全稳定的构建器推断。从 1.6.0 开始：</p><ul><li><p>你可以在构建器 lambda 表达式中调用返回尚未推断类型实例的函数，而无需指定 <a href="/kotlin/whatsnew1530#eliminating-builder-inference-restrictions">1.5.30 中引入的</a> <code>-Xunrestricted-builder-inference</code> 编译器选项。</p></li><li><p>通过 <code>-Xenable-builder-inference</code>，你可以编写自己的构建器而无需应用 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-builder-inference/" target="_blank" rel="noreferrer"><code>@BuilderInference</code></a> 注解。</p><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>请注意，这些构建器的客户端将需要指定相同的 <code>-Xenable-builder-inference</code> 编译器选项。</p></div></li><li><p>通过 <code>-Xenable-builder-inference</code>，如果常规类型推断无法获得足够关于类型的信息，构建器推断将自动激活。</p></li></ul><p><a href="/kotlin/using-builders-with-builder-inference">了解如何编写自定义泛型构建器</a>。</p><h3 id="类类型形参的注解支持" tabindex="-1">类类型形参的注解支持 <a class="header-anchor" href="#类类型形参的注解支持" aria-label="Permalink to &quot;类类型形参的注解支持&quot;">​</a></h3><p>对类类型形参的注解支持如下所示：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Target</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(AnnotationTarget.TYPE_PARAMETER)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">annotation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BoxContent</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Box</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;@</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BoxContent</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {}</span></span></code></pre></div><p>所有类型形参上的注解都会被生成到 JVM 字节码中，以便注解处理器能够使用它们。</p><p>关于促成此功能的用例，请参阅<a href="https://youtrack.jetbrains.com/issue/KT-43714" target="_blank" rel="noreferrer">此 YouTrack 工单</a>。</p><p>了解更多关于<a href="/kotlin/annotations">注解</a>的信息。</p><h2 id="更长时间地支持旧-api-版本" tabindex="-1">更长时间地支持旧 API 版本 <a class="header-anchor" href="#更长时间地支持旧-api-版本" aria-label="Permalink to &quot;更长时间地支持旧 API 版本&quot;">​</a></h2><p>从 Kotlin 1.6.0 开始，我们将支持针对三个而非两个旧 API 版本的开发，并同时支持当前稳定版本。目前，我们支持 1.3、1.4、1.5 和 1.6 版本。</p><h2 id="kotlin-jvm" tabindex="-1">Kotlin/JVM <a class="header-anchor" href="#kotlin-jvm" aria-label="Permalink to &quot;Kotlin/JVM&quot;">​</a></h2><p>对于 Kotlin/JVM，从 1.6.0 开始，编译器可以生成对应 JVM 17 字节码版本的类。新语言版本还包括优化的委托属性和可重复注解，这些都已列入我们的路线图：</p><ul><li><a href="#repeatable-annotations-with-runtime-retention-for-1-8-jvm-target">用于 1.8 JVM 目标的具有运行时保留策略的可重复注解</a></li><li><a href="#optimize-delegated-properties-which-call-get-set-on-the-given-kproperty-instance">优化对给定 KProperty 实例调用 getter/setter 的委托属性</a></li></ul><h3 id="用于-1-8-jvm-目标的具有运行时保留策略的可重复注解" tabindex="-1">用于 1.8 JVM 目标的具有运行时保留策略的可重复注解 <a class="header-anchor" href="#用于-1-8-jvm-目标的具有运行时保留策略的可重复注解" aria-label="Permalink to &quot;用于 1.8 JVM 目标的具有运行时保留策略的可重复注解&quot;">​</a></h3><p>Java 8 引入了<a href="https://docs.oracle.com/javase/tutorial/java/annotations/repeating.html" target="_blank" rel="noreferrer">可重复注解</a>，它们可以多次应用于单个代码元素。此特性要求 Java 代码中存在两个声明：标记有 <a href="https://docs.oracle.com/javase/8/docs/api/java/lang/annotation/Repeatable.html" target="_blank" rel="noreferrer"><code>@java.lang.annotation.Repeatable</code></a> 的可重复注解本身，以及用于存储其值的包含注解。</p><p>Kotlin 也有可重复注解，但只要求在注解声明上存在 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.annotation/-repeatable/" target="_blank" rel="noreferrer"><code>@kotlin.annotation.Repeatable</code></a> 即可使其可重复。在 1.6.0 之前，此特性仅支持 <code>SOURCE</code> 保留策略，并且与 Java 的可重复注解不兼容。Kotlin 1.6.0 移除了这些限制。<code>@kotlin.annotation.Repeatable</code> 现在接受任何保留策略，并使注解在 Kotlin 和 Java 中都可重复。Java 的可重复注解现在也得到了 Kotlin 侧的支持。</p><p>虽然你可以声明包含注解，但这并非必需。例如：</p><ul><li><p>如果注解 <code>@Tag</code> 标记有 <code>@kotlin.annotation.Repeatable</code>，Kotlin 编译器会自动生成一个名为 <code>@Tag.Container</code> 的包含注解类：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@Repeatable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">annotation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Tag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// The compiler generates @Tag.Container containing annotation</span></span></code></pre></div></li><li><p>要为包含注解设置自定义名称，请应用 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.jvm/-jvmrepeatable/" target="_blank" rel="noreferrer"><code>@kotlin.jvm.JvmRepeatable</code></a> 元注解，并传递显式声明的包含注解类作为实参：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@JvmRepeatable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Tags::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">annotation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Tag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">annotation</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Tags</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Tag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;)</span></span></code></pre></div></li></ul><p>Kotlin 反射现在通过一个新函数 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect.full/find-annotations.html" target="_blank" rel="noreferrer"><code>KAnnotatedElement.findAnnotations()</code></a> 同时支持 Kotlin 和 Java 的可重复注解。</p><p>关于 Kotlin 可重复注解的更多信息，请参见<a href="https://github.com/Kotlin/KEEP/blob/master/proposals/repeatable-annotations.md" target="_blank" rel="noreferrer">此 KEEP</a>。</p><h3 id="优化对给定-kproperty-实例调用-getter-setter-的委托属性" tabindex="-1">优化对给定 KProperty 实例调用 getter/setter 的委托属性 <a class="header-anchor" href="#优化对给定-kproperty-实例调用-getter-setter-的委托属性" aria-label="Permalink to &quot;优化对给定 KProperty 实例调用 getter/setter 的委托属性&quot;">​</a></h3><p>我们通过省略 <code>$delegate</code> 字段并生成对引用属性的直接访问，优化了生成的 JVM 字节码。</p><p>例如，在以下代码中</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Box</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> impl: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ..</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> content: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ::</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">impl</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Kotlin 不再生成 <code>content$delegate</code> 字段。<code>content</code> 变量的属性访问器直接调用 <code>impl</code> 变量，跳过了委托属性的 <code>getValue</code>/<code>setValue</code> 操作符，从而避免了对 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/-k-property/index.html" target="_blank" rel="noreferrer"><code>KProperty</code></a> 类型的属性引用对象的需求。</p><p>感谢我们的 Google 同事提供了此实现！</p><p>了解更多关于<a href="/kotlin/delegated-properties">委托属性</a>的信息。</p><h2 id="kotlin-native" tabindex="-1">Kotlin/Native <a class="header-anchor" href="#kotlin-native" aria-label="Permalink to &quot;Kotlin/Native&quot;">​</a></h2><p>Kotlin/Native 获得了多项改进和组件更新，其中一些处于预览状态：</p><ul><li><a href="#preview-of-the-new-memory-manager">新内存管理器的预览</a></li><li><a href="#support-for-xcode-13">支持 Xcode 13</a></li><li><a href="#compilation-of-windows-targets-on-any-host">在任何主机上编译 Windows 目标</a></li><li><a href="#llvm-and-linker-updates">LLVM 和链接器更新</a></li><li><a href="#performance-improvements">性能改进</a></li><li><a href="#unified-compiler-plugin-abi-with-jvm-and-js-ir-backends">与 JVM 和 JS IR 后端统一的编译器插件 ABI</a></li><li><a href="#detailed-error-messages-for-klib-linkage-failures">klib 链接失败的详细错误消息</a></li><li><a href="#reworked-unhandled-exception-handling-api">重新设计的未处理异常处理 API</a></li></ul><h3 id="新内存管理器的预览" tabindex="-1">新内存管理器的预览 <a class="header-anchor" href="#新内存管理器的预览" aria-label="Permalink to &quot;新内存管理器的预览&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>新的 Kotlin/Native 内存管理器是<a href="/kotlin/components-stability">实验性的</a>。 它可能在任何时候被移除或更改。需要选择启用（详情见下文），并且你只能将其用于评估目的。 如果你能就此在 <a href="https://youtrack.jetbrains.com/issue/KT-48525" target="_blank" rel="noreferrer">YouTrack</a> 中提供反馈，我们将不胜感激。</p></div><p>通过 Kotlin 1.6.0，你可以试用新的 Kotlin/Native 内存管理器的开发预览版。这使我们更接近于消除 JVM 和原生平台之间的差异，以便在多平台项目中提供一致的开发者体验。</p><p>其中一个显著变更与 Kotlin/JVM 中类似，是顶层属性的惰性初始化。当首次访问同一文件中的顶层属性或函数时，顶层属性会被初始化。此模式还包括全局过程间优化（仅针对发布二进制文件启用），它会移除冗余的初始化检测。</p><p>我们最近发布了一篇关于新内存管理器的<a href="https://blog.jetbrains.com/kotlin/2021/08/try-the-new-kotlin-native-memory-manager-development-preview/" target="_blank" rel="noreferrer">博客文章</a>。参阅它以了解新内存管理器的当前状态并找到一些演示项目，或者直接跳转到<a href="https://github.com/JetBrains/kotlin/blob/master/kotlin-native/NEW_MM.md" target="_blank" rel="noreferrer">迁移说明</a>亲自试用。请检查新内存管理器在你的项目中的工作情况，并在我们的问题跟踪器 <a href="https://youtrack.jetbrains.com/issue/KT-48525" target="_blank" rel="noreferrer">YouTrack</a> 中分享反馈。</p><h3 id="支持-xcode-13" tabindex="-1">支持 Xcode 13 <a class="header-anchor" href="#支持-xcode-13" aria-label="Permalink to &quot;支持 Xcode 13&quot;">​</a></h3><p>Kotlin/Native 1.6.0 支持 Xcode 13 – Xcode 的最新版本。你可以随意更新 Xcode 并继续开发针对苹果操作系统的 Kotlin 项目。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>Xcode 13 中添加的新库在 Kotlin 1.6.0 中尚不可用，但我们将在即将推出的版本中添加对它们的支持。</p></div><h3 id="在任何主机上编译-windows-目标" tabindex="-1">在任何主机上编译 Windows 目标 <a class="header-anchor" href="#在任何主机上编译-windows-目标" aria-label="Permalink to &quot;在任何主机上编译 Windows 目标&quot;">​</a></h3><p>从 1.6.0 开始，你不再需要 Windows 主机来编译 Windows 目标 <code>mingwX64</code> 和 <code>mingwX86</code>。它们可以在任何支持 Kotlin/Native 的主机上编译。</p><h3 id="llvm-和链接器更新" tabindex="-1">LLVM 和链接器更新 <a class="header-anchor" href="#llvm-和链接器更新" aria-label="Permalink to &quot;LLVM 和链接器更新&quot;">​</a></h3><p>我们重新设计了 Kotlin/Native 底层使用的 LLVM 依赖项。这带来了多项好处，包括：</p><ul><li>LLVM 版本更新到 11.1.0。</li><li>依赖项大小减小。例如，在 macOS 上，它现在约为 300 MB，而之前版本为 1200 MB。</li><li><a href="https://youtrack.jetbrains.com/issue/KT-42693" target="_blank" rel="noreferrer">排除了对 <code>ncurses5</code> 库的依赖</a>，该库在现代 Linux 发行版中不可用。</li></ul><p>除了 LLVM 更新之外，Kotlin/Native 现在为 MinGW 目标使用了 <a href="https://lld.llvm.org/" target="_blank" rel="noreferrer">LLD</a> 链接器（一个来自 LLVM 项目的链接器）。与之前使用的 ld.bfd 链接器相比，它提供了多项好处，并将使我们能够改进生成二进制文件的运行时性能，并支持 MinGW 目标的编译器缓存。请注意，LLD <a href="/kotlin/whatsnew1530#deprecation-of-linkage-against-dlls-without-import-libraries-for-mingw-targets">要求 DLL 链接导入库</a>。在<a href="https://stackoverflow.com/questions/3573475/how-does-the-import-library-work-details/3573527/#3573527" target="_blank" rel="noreferrer">此 Stack Overflow 帖子</a>中了解更多信息。</p><h3 id="性能改进" tabindex="-1">性能改进 <a class="header-anchor" href="#性能改进" aria-label="Permalink to &quot;性能改进&quot;">​</a></h3><p>Kotlin/Native 1.6.0 带来了以下性能改进：</p><ul><li>编译时间：编译器缓存默认对 <code>linuxX64</code> 和 <code>iosArm64</code> 目标启用。这加速了调试模式下的大多数编译（第一次除外）。测量显示我们的测试项目速度提升了约 200%。编译器缓存从 Kotlin 1.5.0 开始已可用于这些目标，但当时需要<a href="/kotlin/whatsnew15#performance-improvements">额外的 Gradle 属性</a>；现在你可以移除这些属性了。</li><li>运行时：由于生成的 LLVM 代码中的优化，使用 <code>for</code> 循环遍历数组现在快了高达 12%。</li></ul><h3 id="与-jvm-和-js-ir-后端统一的编译器插件-abi" tabindex="-1">与 JVM 和 JS IR 后端统一的编译器插件 ABI <a class="header-anchor" href="#与-jvm-和-js-ir-后端统一的编译器插件-abi" aria-label="Permalink to &quot;与 JVM 和 JS IR 后端统一的编译器插件 ABI&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>为 Kotlin/Native 使用通用 IR 编译器插件 ABI 的选项是<a href="/kotlin/components-stability">实验性的</a>。 它可能在任何时候被移除或更改。需要选择启用（详情见下文），并且你只能将其用于评估目的。 如果你能就此在 <a href="https://youtrack.com/issue/KT-48595" target="_blank" rel="noreferrer">YouTrack</a> 中提供反馈，我们将不胜感激。</p></div><p>在之前版本中，编译器插件的作者必须为 Kotlin/Native 提供单独的 artifact，因为 ABI 存在差异。</p><p>从 1.6.0 开始，Kotlin 多平台 Gradle 插件能够为 Kotlin/Native 使用可嵌入式编译器 jar — 这是用于 JVM 和 JS IR 后端的 jar。这是迈向统一编译器插件开发体验的一步，因为你现在可以为 Native 和其他支持的平台使用相同的编译器插件 artifact。</p><p>这是此类支持的预览版本，并且需要选择启用。 要开始为 Kotlin/Native 使用通用编译器插件 artifact，请将以下行添加到你的 <code>gradle.properties</code>：<code>kotlin.native.useEmbeddableCompilerJar=true</code>。</p><p>我们计划未来默认使用可嵌入式编译器 jar 用于 Kotlin/Native，因此听取你关于预览版工作情况的反馈对我们至关重要。</p><p>如果你是编译器插件的作者，请尝试此模式并检查它是否适用于你的插件。请注意，根据你的插件结构，可能需要迁移步骤。关于迁移说明，请参见<a href="https://youtrack.jetbrains.com/issue/KT-48595" target="_blank" rel="noreferrer">此 YouTrack 问题</a>，并在评论中留下你的反馈。</p><h3 id="klib-链接失败的详细错误消息" tabindex="-1">klib 链接失败的详细错误消息 <a class="header-anchor" href="#klib-链接失败的详细错误消息" aria-label="Permalink to &quot;klib 链接失败的详细错误消息&quot;">​</a></h3><p>Kotlin/Native 编译器现在为 klib 链接错误提供详细的错误消息。这些消息现在具有清晰的错误描述，并且还包括有关可能原因和修复方法的信息。</p><p>例如：</p><ul><li><p>1.5.30：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>e: java.lang.IllegalStateException: IrTypeAliasSymbol expected: Unbound public symbol for public kotlinx.coroutines/CancellationException|null[0]</span></span>
<span class="line"><span>&lt;stack trace&gt;</span></span></code></pre></div></li><li><p>1.6.0：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>e: The symbol of unexpected type encountered during IR deserialization: IrClassPublicSymbolImpl, kotlinx.coroutines/CancellationException|null[0].</span></span>
<span class="line"><span>IrTypeAliasSymbol is expected.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>This could happen if there are two libraries, where one library was compiled against the different version of the other library than the one currently used in the project.</span></span>
<span class="line"><span>Please check that the project configuration is correct and has consistent versions of dependencies.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>The list of libraries that depend on &quot;org.jetbrains.kotlinx:kotlinx-coroutines-core (org.jetbrains.kotlinx:kotlinx-coroutines-core-macosx64)&quot; and may lead to conflicts:</span></span>
<span class="line"><span>&lt;list of libraries and potential version mismatches&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Project dependencies:</span></span>
<span class="line"><span>&lt;dependencies tree&gt;</span></span></code></pre></div></li></ul><h3 id="重新设计的未处理异常处理-api" tabindex="-1">重新设计的未处理异常处理 API <a class="header-anchor" href="#重新设计的未处理异常处理-api" aria-label="Permalink to &quot;重新设计的未处理异常处理 API&quot;">​</a></h3><p>我们统一了 Kotlin/Native 运行时中未处理异常的处理，并将默认处理暴露为 <code>processUnhandledException(throwable: Throwable)</code> 函数，供 <code>kotlinx.coroutines</code> 等自定义执行环境使用。此处理也适用于在 <code>Worker.executeAfter()</code> 操作中逃逸的异常，但仅适用于新的<a href="#preview-of-the-new-memory-manager">内存管理器</a>。</p><p>API 改进也影响了通过 <code>setUnhandledExceptionHook()</code> 设置的 hook。以前，当 Kotlin/Native 运行时使用未处理异常调用 hook 后，这些 hook 会被重置，并且程序会立即终止。现在，这些 hook 可以多次使用，如果你希望程序在未处理异常时始终终止，那么要么不设置未处理异常 hook (<code>setUnhandledExceptionHook()</code>)，要么确保在 hook 结束时调用 <code>terminateWithUnhandledException()</code>。这将帮助你将异常发送到第三方崩溃报告服务（如 Firebase Crashlytics），然后终止程序。从 <code>main()</code> 逃逸的异常和跨越互操作边界的异常将始终终止程序，即使 hook 没有调用 <code>terminateWithUnhandledException()</code>。</p><h2 id="kotlin-js" tabindex="-1">Kotlin/JS <a class="header-anchor" href="#kotlin-js" aria-label="Permalink to &quot;Kotlin/JS&quot;">​</a></h2><p>我们正在继续致力于 Kotlin/JS 编译器的 IR 后端稳定化。 Kotlin/JS 现在有一个<a href="#option-to-use-pre-installed-node-js-and-yarn">禁用下载 Node.js 和 Yarn 的选项</a>。</p><h3 id="禁用下载-node-js-和-yarn-的选项" tabindex="-1">禁用下载 Node.js 和 Yarn 的选项 <a class="header-anchor" href="#禁用下载-node-js-和-yarn-的选项" aria-label="Permalink to &quot;禁用下载 Node.js 和 Yarn 的选项&quot;">​</a></h3><p>你现在可以在构建 Kotlin/JS 项目时禁用 Node.js 和 Yarn 的下载，并使用主机上已安装的实例。这对于在没有互联网连接的服务器上进行构建非常有用，例如 CI 服务器。</p><p>要禁用外部组件下载，请将以下行添加到你的 <code>build.gradle(.kts)</code> 中：</p>`,99)),i("ul",null,[i("li",null,[s[2]||(s[2]=i("p",null,"Yarn：",-1)),t(k,{group:"build-script"},{default:n(()=>[t(e,{title:"Kotlin","group-key":"kotlin"},{default:n(()=>s[0]||(s[0]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"rootProject.plugins."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withType"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"org"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"jetbrains"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"gradle"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"targets"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"js"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"yarn"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"YarnPlugin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"> {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    rootProject."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"the"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"org"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"jetbrains"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"gradle"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"targets"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"js"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"yarn"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"YarnRootExtension"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},">().download "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," false"),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}}," // or true for default behavior")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),t(e,{title:"Groovy","group-key":"groovy"},{default:n(()=>s[1]||(s[1]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"rootProject"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"plugins"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"withType("),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"org.jetbrains.kotlin.gradle.targets.js.yarn.YarnPlugin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    rootProject"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"extensions"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"getByType("),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"org.jetbrains.kotlin.gradle.targets.js.yarn.YarnRootExtension"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"download "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," false")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1})]),i("li",null,[s[5]||(s[5]=i("p",null,"Node.js：",-1)),t(k,{group:"build-script"},{default:n(()=>[t(e,{title:"Kotlin","group-key":"kotlin"},{default:n(()=>s[3]||(s[3]=[i("div",{class:"language-kotlin vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"kotlin"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"rootProject.plugins."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"withType"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"org"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"jetbrains"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"gradle"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"targets"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"js"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"nodejs"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"NodeJsRootPlugin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"> {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    rootProject."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"the"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"<"),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"org"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"jetbrains"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"kotlin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"gradle"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"targets"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"js"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"nodejs"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"."),i("span",{style:{"--shiki-light":"#6F42C1","--shiki-dark":"#B392F0"}},"NodeJsRootExtension"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},">().download "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," false"),i("span",{style:{"--shiki-light":"#6A737D","--shiki-dark":"#6A737D"}}," // or true for default behavior")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1}),t(e,{title:"Groovy","group-key":"groovy"},{default:n(()=>s[4]||(s[4]=[i("div",{class:"language-groovy vp-adaptive-theme"},[i("button",{title:"Copy Code",class:"copy"}),i("span",{class:"lang"},"groovy"),i("pre",{class:"shiki shiki-themes github-light github-dark vp-code",tabindex:"0"},[i("code",null,[i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"rootProject"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"plugins"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"withType("),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"org.jetbrains.kotlin.gradle.targets.js.nodejs.NodeJsRootPlugin"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},") {")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"    rootProject"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"extensions"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"getByType("),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"org.jetbrains.kotlin.gradle.targets.js.nodejs.NodeJsRootExtension"),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},")"),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"."),i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"download "),i("span",{style:{"--shiki-light":"#D73A49","--shiki-dark":"#F97583"}},"="),i("span",{style:{"--shiki-light":"#005CC5","--shiki-dark":"#79B8FF"}}," false")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#24292E","--shiki-dark":"#E1E4E8"}},"}")])])])],-1)])),_:1})]),_:1})])]),s[7]||(s[7]=h(`<h2 id="kotlin-gradle-插件" tabindex="-1">Kotlin Gradle 插件 <a class="header-anchor" href="#kotlin-gradle-插件" aria-label="Permalink to &quot;Kotlin Gradle 插件&quot;">​</a></h2><p>在 Kotlin 1.6.0 中，我们将 <code>KotlinGradleSubplugin</code> 类的弃用级别更改为 &#39;ERROR&#39;。此类曾用于编写编译器插件。在随后的版本中，我们将移除此，请改用 <code>KotlinCompilerPluginSupportPlugin</code> 类。</p><p>我们移除了 <code>kotlin.useFallbackCompilerSearch</code> 构建选项以及 <code>noReflect</code> 和 <code>includeRuntime</code> 编译器选项。<code>useIR</code> 编译器选项已被隐藏，并将在即将推出的版本中移除。</p><p>了解更多关于 Kotlin Gradle 插件中<a href="/kotlin/gradle-compiler-options">当前支持的编译器选项</a>的信息。</p><h2 id="标准库" tabindex="-1">标准库 <a class="header-anchor" href="#标准库" aria-label="Permalink to &quot;标准库&quot;">​</a></h2><p>标准库的新 1.6.0 版本稳定化了实验性特性，引入了新特性，并统一了其在不同平台上的行为：</p><ul><li><a href="#new-readline-functions">新的 readline 函数</a></li><li><a href="#stable-typeof">稳定的 typeOf()</a></li><li><a href="#stable-collection-builders">稳定的集合构建器</a></li><li><a href="#stable-duration-api">稳定的 Duration API</a></li><li><a href="#splitting-regex-into-a-sequence">将 Regex 拆分为序列</a></li><li><a href="#bit-rotation-operations-on-integers">整数上的位旋转操作</a></li><li><a href="#changes-for-replace-and-replacefirst-in-js">JS 中 replace() 和 replaceFirst() 的变更</a></li><li><a href="#improvements-to-the-existing-api">现有 API 的改进</a></li><li><a href="#deprecations">弃用</a></li></ul><h3 id="新的-readline-函数" tabindex="-1">新的 readline 函数 <a class="header-anchor" href="#新的-readline-函数" aria-label="Permalink to &quot;新的 readline 函数&quot;">​</a></h3><p>Kotlin 1.6.0 提供了用于处理标准输入的新函数：<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.io/readln.html" target="_blank" rel="noreferrer"><code>readln()</code></a> 和 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.io/readln-or-null.html" target="_blank" rel="noreferrer"><code>readlnOrNull()</code></a>。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>目前，新函数仅适用于 JVM 和 Native 目标平台。</p></div><table tabindex="0"><thead><tr><th><strong>早期版本</strong></th><th><strong>1.6.0 替代方案</strong></th><th><strong>用法</strong></th></tr></thead><tbody><tr><td><code>readLine()!!</code></td><td><code>readln()</code></td><td>从标准输入读取一行并返回，如果已到达文件末尾（EOF）则抛出 <code>RuntimeException</code>。</td></tr><tr><td><code>readLine()</code></td><td><code>readlnOrNull()</code></td><td>从标准输入读取一行并返回，如果已到达文件末尾（EOF）则返回 <code>null</code>。</td></tr></tbody></table><p>我们相信消除读取行时使用 <code>!!</code> 的需要将改善新手的体验并简化 Kotlin 的教学。为了使读行操作的名称与其 <code>println()</code> 对应物保持一致，我们决定将新函数名称缩短为 &#39;ln&#39;。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;What is your nickname?&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nickname </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> readln</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$nickname</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nextLine </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> readlnOrNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">().</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">takeUnless</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isNullOrEmpty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        } ?: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">break</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        sum </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nextLine.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(sum)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>现有 <code>readLine()</code> 函数在你的 IDE 代码补全中将获得比 <code>readln()</code> 和 <code>readlnOrNull()</code> 更低的优先级。IDE 检查也将推荐使用新函数而非旧版 <code>readLine()</code>。</p><p>我们计划在未来版本中逐步弃用 <code>readLine()</code> 函数。</p><h3 id="稳定的-typeof" tabindex="-1">稳定的 typeOf() <a class="header-anchor" href="#稳定的-typeof" aria-label="Permalink to &quot;稳定的 typeOf()&quot;">​</a></h3><p>1.6.0 版本带来了<a href="/kotlin/components-stability">稳定</a>的 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/type-of.html" target="_blank" rel="noreferrer"><code>typeOf()</code></a> 函数，完成了<a href="https://youtrack.jetbrains.com/issue/KT-45396" target="_blank" rel="noreferrer">路线图上</a>的一个主要项目。</p><p><a href="https://blog.jetbrains.com/kotlin/2019/06/kotlin-1-3-40-released/" target="_blank" rel="noreferrer">自 1.3.40 版起</a>，<code>typeOf()</code> 在 JVM 平台作为实验性 API 提供。现在你可以在任何 Kotlin 平台中使用它，并获取编译器可以推断的任何 Kotlin 类型的 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/-k-type/#kotlin.reflect.KType" target="_blank" rel="noreferrer"><code>KType</code></a> 表示形式：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">inline</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reified</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">renderType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> typeOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> type.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fromExplicitType </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> typeOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fromReifiedType </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> renderType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt;()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="稳定的集合构建器" tabindex="-1">稳定的集合构建器 <a class="header-anchor" href="#稳定的集合构建器" aria-label="Permalink to &quot;稳定的集合构建器&quot;">​</a></h3><p>在 Kotlin 1.6.0 中，集合构建器函数已提升为<a href="/kotlin/components-stability">稳定</a>版。集合构建器返回的集合现在在其只读状态下可序列化。</p><p>你现在可以无需选择启用注解即可使用 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/build-map.html" target="_blank" rel="noreferrer"><code>buildMap()</code></a>、<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/build-list.html" target="_blank" rel="noreferrer"><code>buildList()</code></a> 和 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/build-set.html" target="_blank" rel="noreferrer"><code>buildSet()</code></a>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;b&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;c&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> buildList</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        addAll</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;d&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [a, b, c, d]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="稳定的-duration-api" tabindex="-1">稳定的 Duration API <a class="header-anchor" href="#稳定的-duration-api" aria-label="Permalink to &quot;稳定的 Duration API&quot;">​</a></h3><p>用于表示不同时间单位持续时间量的 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.time/-duration/" target="_blank" rel="noreferrer">Duration</a> 类已提升为<a href="/kotlin/components-stability">稳定</a>版。在 1.6.0 中，Duration API 获得了以下变更：</p><ul><li><p><a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.time/-duration/to-components.html" target="_blank" rel="noreferrer"><code>toComponents()</code></a> 函数的第一个组件（将持续时间分解为天、小时、分钟、秒和纳秒）现在是 <code>Long</code> 类型而不是 <code>Int</code>。之前，如果值不适合 <code>Int</code> 范围，它会被强制转换为该范围。使用 <code>Long</code> 类型，你可以在持续时间范围内分解任何值，而不会截断不适合 <code>Int</code> 的值。</p></li><li><p><code>DurationUnit</code> 枚举现在是独立的，而不是 JVM 上 <code>java.util.concurrent.TimeUnit</code> 的类型别名。我们没有发现任何有说服力的案例表明 <code>typealias DurationUnit = TimeUnit</code> 会有用。此外，通过类型别名暴露 <code>TimeUnit</code> API 可能会混淆 <code>DurationUnit</code> 用户。</p></li><li><p>响应社区反馈，我们重新引入了 <code>Int.seconds</code> 等扩展属性。但我们希望限制它们的适用性，因此我们将它们放入了 <code>Duration</code> 类的伴生对象中。虽然 IDE 仍然可以在补全中建议扩展并自动从伴生对象插入导入，但未来我们计划将此行为限制在预期 <code>Duration</code> 类型的情况下。</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> kotlin.time.Duration.Companion.seconds</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> duration </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10000</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;There are \${duration.seconds.inWholeMinutes} minutes in </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$duration</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> seconds&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // There are 166 minutes in 10000 seconds</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>我们建议使用 <code>Duration.Companion</code> 中的新扩展来替换之前引入的伴生函数（例如 <code>Duration.seconds(Int)）以及已弃用的顶层扩展（例如 </code>Int.seconds\`）。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>这种替换可能会在旧的顶层扩展和新的伴生扩展之间造成歧义。 在进行自动化迁移之前，请务必使用 <code>kotlin.time</code> 包的通配符导入 — <code>import kotlin.time.*</code>。</p></div></li></ul><h3 id="将-regex-拆分为序列" tabindex="-1">将 Regex 拆分为序列 <a class="header-anchor" href="#将-regex-拆分为序列" aria-label="Permalink to &quot;将 Regex 拆分为序列&quot;">​</a></h3><p><code>Regex.splitToSequence(CharSequence)</code> 和 <code>CharSequence.splitToSequence(Regex)</code> 函数已提升为<a href="/kotlin/components-stability">稳定</a>。它们根据给定正则表达式的匹配项拆分字符串，但将结果作为<a href="/kotlin/sequences">序列</a>返回，以便对该结果的所有操作都惰性执行：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> colorsText </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;green, red, brown&amp;blue, orange, pink&amp;green&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> regex </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;[,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">s]+&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toRegex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mixedColor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> regex.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">splitToSequence</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(colorsText)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // or</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // val mixedColor = colorsText.splitToSequence(regex)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(it) }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">firstOrNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { it.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">contains</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&amp;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mixedColor) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;brown&amp;blue&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="整数上的位旋转操作" tabindex="-1">整数上的位旋转操作 <a class="header-anchor" href="#整数上的位旋转操作" aria-label="Permalink to &quot;整数上的位旋转操作&quot;">​</a></h3><p>在 Kotlin 1.6.0 中，用于位操作的 <code>rotateLeft()</code> 和 <code>rotateRight()</code> 函数已变得<a href="/kotlin/components-stability">稳定</a>。这些函数将数字的二进制表示向左或向右旋转指定的位数：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> number: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Short</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0b10001</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rotateRight</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(radix </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 100000000000100</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rotateLeft</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(radix </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1000100</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="js-中-replace-和-replacefirst-的变更" tabindex="-1">JS 中 replace() 和 replaceFirst() 的变更 <a class="header-anchor" href="#js-中-replace-和-replacefirst-的变更" aria-label="Permalink to &quot;JS 中 replace() 和 replaceFirst() 的变更&quot;">​</a></h3><p>在 Kotlin 1.6.0 之前，当替换字符串包含组引用时，<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/-regex/replace.html" target="_blank" rel="noreferrer"><code>replace()</code></a> 和 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/-regex/replace-first.html" target="_blank" rel="noreferrer"><code>replaceFirst()</code></a> Regex 函数在 Java 和 JS 中的行为不同。为了使行为在所有目标平台保持一致，我们更改了它们在 JS 中的实现。</p><p>替换字符串中 <code>\${name}</code> 或 <code>$index</code> 的出现会被替换为与指定索引或名称的捕获组对应的子序列：</p><ul><li><p><code>$index</code> – 字符 &#39;</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>后的第一个数字始终被视为组引用的一部分。随后的数字仅在其形成有效组引用时才被合并到 \`index\` 中。只有数字 &#39;0&#39;–&#39;9&#39; 被认为是组引用的潜在组成部分。请注意，捕获组的索引从 &#39;1&#39; 开始。</span></span>
<span class="line"><span>索引为 &#39;0&#39; 的组代表整个匹配项。</span></span></code></pre></div></li><li><p><code>\${name}</code> – <code>name</code> 可以由拉丁字母 &#39;a&#39;–&#39;z&#39;、&#39;A&#39;–&#39;Z&#39; 或数字 &#39;0&#39;–&#39;9&#39; 组成。第一个字符必须是字母。</p><div class="note custom-block"><p class="custom-block-title">NOTE</p><p>命名组在替换模式中目前仅在 JVM 上支持。</p></div></li><li><p>要在替换字符串中将后续字符作为字面量包含，请使用反斜杠字符 <code>\\</code>：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Regex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;(.+)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Kotlin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\$</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> $1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// $ Kotlin</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Regex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;(.+)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replaceFirst</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1.6.0&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> $1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// \\ 1.6.0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>如果替换字符串必须被视为字面字符串，你可以使用 <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.text/-regex/escape-replacement.html" target="_blank" rel="noreferrer"><code>Regex.escapeReplacement()</code></a>。</p></li></ul><h3 id="现有-api-的改进" tabindex="-1">现有 API 的改进 <a class="header-anchor" href="#现有-api-的改进" aria-label="Permalink to &quot;现有 API 的改进&quot;">​</a></h3><ul><li><p>1.6.0 版本为 <code>Comparable.compareTo()</code> 添加了中缀扩展函数。你现在可以使用中缀形式来比较两个对象的顺序：</p><div class="language-kotlin vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">kotlin</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WrappedText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">val</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> text: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Comparable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WrappedText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fun</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> compareTo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(other: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WrappedText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">): </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">         this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.text compareTo other.text</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>JS 中的 <code>Regex.replace()</code> 现在也变为非内联的，以统一其在所有平台上的实现。</p></li><li><p><code>compareTo()</code> 和 <code>equals()</code> String 函数，以及 <code>isBlank()</code> CharSequence 函数现在在 JS 中的行为与它们在 JVM 上的行为完全相同。以前，在处理非 ASCII 字符时存在偏差。</p></li></ul><h3 id="弃用" tabindex="-1">弃用 <a class="header-anchor" href="#弃用" aria-label="Permalink to &quot;弃用&quot;">​</a></h3><p>在 Kotlin 1.6.0 中，我们开始对一些仅限 JS 的标准库 API 进行弃用，并发出警告。</p><h4 id="concat-、match-和-matches-字符串函数" tabindex="-1">concat()、match() 和 matches() 字符串函数 <a class="header-anchor" href="#concat-、match-和-matches-字符串函数" aria-label="Permalink to &quot;concat()、match() 和 matches() 字符串函数&quot;">​</a></h4><ul><li>要将字符串与给定其他对象的字符串表示拼接，请使用 <code>plus()</code> 代替 <code>concat()</code>。</li><li>要在输入中查找正则表达式的所有出现，请使用 Regex 类的 <code>findAll()</code> 代替 <code>String.match(regex: String)</code>。</li><li>要检测正则表达式是否匹配整个输入，请使用 Regex 类的 <code>matches()</code> 代替 <code>String.matches(regex: String)</code>。</li></ul><h4 id="接受比较函数的数组-sort" tabindex="-1">接受比较函数的数组 sort() <a class="header-anchor" href="#接受比较函数的数组-sort" aria-label="Permalink to &quot;接受比较函数的数组 sort()&quot;">​</a></h4><p>我们弃用了 <code>Array&lt;out T&gt;.sort()</code> 函数以及内联函数 <code>ByteArray.sort()</code>、<code>ShortArray.sort()</code>、<code>IntArray.sort()</code>、<code>LongArray.sort()</code>、<code>FloatArray.sort()</code>、<code>DoubleArray.sort()</code> 和 <code>CharArray.sort()</code>，它们根据比较函数传递的顺序对数组进行排序。请使用其他标准库函数进行数组排序。</p><p>关于集合排序，请参见<a href="/kotlin/collection-ordering">集合排序</a>章节。</p><h2 id="工具" tabindex="-1">工具 <a class="header-anchor" href="#工具" aria-label="Permalink to &quot;工具&quot;">​</a></h2><h3 id="kover-–-kotlin-的代码覆盖率工具" tabindex="-1">Kover – Kotlin 的代码覆盖率工具 <a class="header-anchor" href="#kover-–-kotlin-的代码覆盖率工具" aria-label="Permalink to &quot;Kover – Kotlin 的代码覆盖率工具&quot;">​</a></h3><div class="danger custom-block"><p class="custom-block-title">WARNING</p><p>Kover Gradle 插件是实验性的。如果你能就此在 <a href="https://github.com/Kotlin/kotlinx-kover/issues" target="_blank" rel="noreferrer">GitHub</a> 中提供反馈，我们将不胜感激。</p></div><p>通过 Kotlin 1.6.0，我们引入了 Kover – 一个用于 <a href="https://github.com/JetBrains/intellij-coverage" target="_blank" rel="noreferrer">IntelliJ</a> 和 <a href="https://github.com/jacoco/jacoco" target="_blank" rel="noreferrer">JaCoCo</a> Kotlin 代码覆盖率代理的 Gradle 插件。它适用于所有语言构造，包括内联函数。</p><p>关于 Kover 的更多信息，请在其 <a href="https://github.com/Kotlin/kotlinx-kover" target="_blank" rel="noreferrer">GitHub 版本库</a> 或此视频中了解：</p>`,51)),t(p,{src:"https://www.youtube.com/v/jNu5LY9HIbw",title:"Kover – The Code Coverage Plugin"}),s[8]||(s[8]=h('<h2 id="coroutines-1-6-0-rc" tabindex="-1">Coroutines 1.6.0-RC <a class="header-anchor" href="#coroutines-1-6-0-rc" aria-label="Permalink to &quot;Coroutines 1.6.0-RC&quot;">​</a></h2><p><code>kotlinx.coroutines</code> <a href="https://github.com/Kotlin/kotlinx.coroutines/releases/tag/1.6.0-RC" target="_blank" rel="noreferrer">1.6.0-RC</a> 已发布，带来了多项特性和改进：</p><ul><li><a href="#preview-of-the-new-memory-manager">支持新的 Kotlin/Native 内存管理器</a></li><li>引入 dispatcher <em>视图</em> API，它允许限制并行性而无需创建额外线程</li><li>从 Java 6 迁移到 Java 8 目标</li><li>具有新重新设计 API 和多平台支持的 <code>kotlinx-coroutines-test</code></li><li>引入 <a href="https://kotlinlang.org/api/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines/-copyable-thread-context-element/index.html" target="_blank" rel="noreferrer"><code>CopyableThreadContextElement</code></a>，它为协程提供了对 <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/ThreadLocal.html" target="_blank" rel="noreferrer"><code>ThreadLocal</code></a> 变量的线程安全写入访问</li></ul><p>在<a href="https://github.com/Kotlin/kotlinx.coroutines/releases/tag/1.6.0-RC" target="_blank" rel="noreferrer">变更日志</a>中了解更多。</p><h2 id="迁移到-kotlin-1-6-0" tabindex="-1">迁移到 Kotlin 1.6.0 <a class="header-anchor" href="#迁移到-kotlin-1-6-0" aria-label="Permalink to &quot;迁移到 Kotlin 1.6.0&quot;">​</a></h2><p>IntelliJ IDEA 和 Android Studio 一旦可用，将建议将 Kotlin 插件更新到 1.6.0。</p><p>要将现有项目迁移到 Kotlin 1.6.0，请将 Kotlin 版本更改为 <code>1.6.0</code> 并重新导入你的 Gradle 或 Maven 项目。<a href="/kotlin/releases#update-to-a-new-kotlin-version">了解如何更新到 Kotlin 1.6.0</a>。</p><p>要使用 Kotlin 1.6.0 启动新项目，请更新 Kotlin 插件并从 <strong>File</strong> | <strong>New</strong> | <strong>Project</strong> 运行项目向导。</p><p>新的命令行编译器可在 <a href="https://github.com/JetBrains/kotlin/releases/tag/v1.6.0" target="_blank" rel="noreferrer">GitHub 发布页面</a>下载。</p><p>Kotlin 1.6.0 是一个<a href="/kotlin/kotlin-evolution-principles#language-and-tooling-releases">特性发布</a>版本，因此可能带来与你为早期语言版本编写的代码不兼容的变更。在 <a href="/kotlin/compatibility-guide-16">Kotlin 1.6 兼容性指南</a>中查找此类变更的详细列表。</p>',10))])}const f=r(E,[["render",g]]);export{C as __pageData,f as default};
