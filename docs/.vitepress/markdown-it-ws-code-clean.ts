export default function markdownItWsCodeClean(md) {

  function processTokens(state) {
    // Iterate over all tokens generated by Markdown-it
    state.tokens.forEach(token => {
      // Check if the current token is a fenced code block
      if (token.type === 'fence') {
        // Split the content of the code block into individual lines
        const lines = token.content.split('\n');

        // Filter out the lines that match '//sampleStart' or '//sampleEnd'
        const newLines = lines.filter(line => {
          // Trim whitespace from the line to ensure accurate comparison
          const trimmedLine = line.trim();
          // Keep the line if it's NOT a sample start or end tag
          return trimmedLine !== '//sampleStart' && trimmedLine !== '//sampleEnd';
        });

        // Join the filtered lines back into a single string
        token.content = newLines.join('\n');
      }
    });
  }

  // Add the rule to the core ruler.
  // 'sample_tag_remover' is a unique name for this rule.
  // This rule will run after block tokenization (like code blocks) is complete
  // and before the renderer processes the tokens.
  md.core.ruler.push('sample_tag_remover', processTokens);
}