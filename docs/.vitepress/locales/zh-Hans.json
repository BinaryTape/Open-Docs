{
  "homepage.hero.subtitle": "开发者友好的文档中心，一站式解决您的技术文档需求",
  "homepage.card.koin.description": "专为 Kotlin 应用程序设计的轻量级依赖注入框架",
  "homepage.card.kotlin.description": "一门现代、简洁且安全的编程语言",
  "homepage.card.kotlin.tag.language": "语言",
  "homepage.card.kotlin.tag.crossplatform": "跨平台",
  "homepage.badge.comingSoon": "敬请期待",
  "homepage.card.ktor.description": "专为 Kotlin 打造的异步 Web 框架",
  "homepage.card.ktor.tag.web": "Web",
  "homepage.card.ktor.tag.async": "异步",
  "homepage.card.sqldelight.description": "从 SQL 语句生成类型安全的 Kotlin 代码",
  "homepage.card.sqldelight.tag.sql": "SQL",
  "homepage.card.sqldelight.tag.database": "数据库",
  "homepage.card.coil.description": "适用于 Android 和 Compose Multiplatform 的图片加载库。",
  "homepage.card.coil.tag.crossplatform": "跨平台",
  "homepage.card.coil.tag.imageloadder": "图片加载",
  "homepage.card.kmp.description": "在 Android、iOS、Web、桌面和服务器端之间重用 Kotlin 代码，同时根据需要保留原生代码。",
  "homepage.card.kmp.tag.1": "Kotlin",
  "homepage.card.kmp.tag.2": "跨平台",
  "homepage.card.koog.description": "Koog 是一个基于 Kotlin 的框架，旨在完全使用地道的 Kotlin 构建和运行 AI 代理。",
  "homepage.card.koog.tag.1": "AI 代理",
  "homepage.card.koog.tag.2": "Kotlin",
  "homepage.banner.title": "开始探索文档",
  "homepage.banner.description": "选择上方任一技术栈，开始探索详尽的文档和示例",
  "homepage.ad.description": "通过创新咨询和解决方案连接全球与亚洲技术社区，利用我们在移动基础设施和新兴 AI 领域的专业知识，促进全球范围内的开源协作。",
  "homepage.ad.contact": "联系方式：hi@binarytape.com",
  "homepage.ad.sponsor": "Open AIDoc 由 BinaryTape 赞助支持",
  "koin.setup": "配置",
  "koin.tutorial": "教程",
  "koin.core.test": "核心与测试",
  "koin.android": "Android",
  "koin.compose": "Compose",
  "koin.annotation": "注解",
  "koin.multiplatform": "多平台",
  "koin.ktor": "Ktor",
  "sqldelight.sqldelight": "SQLDelight",
  "sqldelight.overview": "概览",
  "sqldelight.upgrading-to-2-0": "升级到 2.0",
  "sqldelight.changelog": "更新日志",
  "sqldelight.contributing": "贡献",
  "sqldelight.code-of-conduct": "行为准则",
  "sqldelight.sqlite-android": "SQLite (Android)",
  "sqldelight.getting-started": "入门",
  "sqldelight.sql": "SQL",
  "sqldelight.foreign-keys": "外键",
  "sqldelight.type-projections": "类型投射",
  "sqldelight.arguments": "实参",
  "sqldelight.types": "类型",
  "sqldelight.transactions": "事务",
  "sqldelight.grouping-statements": "语句分组",
  "sqldelight.extensions": "扩展",
  "sqldelight.rxjava": "RxJava",
  "sqldelight.coroutines": "协程",
  "sqldelight.androidx-paging": "AndroidX Paging",
  "sqldelight.migrations": "迁移",
  "sqldelight.testing": "测试",
  "sqldelight.intellij-plugin": "IntelliJ 插件",
  "sqldelight.gradle": "Gradle",
  "sqldelight._2-x-api": "2.x API",
  "sqldelight.coroutines-extensions": "coroutines-extensions",
  "sqldelight.rxjava2-extensions": "rxjava2-extensions",
  "sqldelight.rxjava3-extensions": "rxjava3-extensions",
  "sqldelight.androidx-paging3": "androidx-paging3",
  "sqldelight.android-driver": "android-driver",
  "sqldelight.runtime": "运行时",
  "sqldelight.resources": "资源",
  "sqldelight.sqlite-multiplatform": "SQLite (多平台)",
  "sqldelight.mysql-jvm": "MySQL (JVM)",
  "sqldelight.jdbc-driver": "jdbc-driver",
  "sqldelight.postgresql-jvm": "PostgreSQL (JVM)",
  "sqldelight.hsql-jvm": "HSQL (JVM)",
  "sqldelight.sqlite-native": "SQLite (原生)",
  "sqldelight.native-driver": "native-driver",
  "sqldelight.sqlite-jvm": "SQLite (JVM)",
  "sqldelight.sqlite-driver": "sqlite-driver",
  "sqldelight.sqlite-js": "SQLite (JS)",
  "sqldelight.multiplatform": "多平台",
  "sqldelight.web-workers": "Web Workers",
  "sqldelight.sql-js-worker": "SQL.js Worker",
  "sqldelight.custom-workers": "自定义 Workers",
  "sqldelight.sqljs-driver": "sqljs-driver",
  "kotlin.home": "主页",
  "kotlin.getting-started": "入门",
  "kotlin.kotlin-tour-welcome": "体验 Kotlin 导览",
  "kotlin.kotlin-overview": "Kotlin 概览",
  "kotlin.what-s-new-in-kotlin": "Kotlin 新特性",
  "kotlin.whatsnew22": "Kotlin 2.2.0",
  "kotlin.whatsnew-eap": "Kotlin 2.3.0-Beta1",
  "kotlin.earlier-versions": "更早版本",
  "kotlin.whatsnew2120": "Kotlin 2.1.20",
  "kotlin.whatsnew21": "Kotlin 2.1.0",
  "kotlin.whatsnew2020": "Kotlin 2.0.20",
  "kotlin.whatsnew20": "Kotlin 2.0.0",
  "kotlin.whatsnew1920": "Kotlin 1.9.20",
  "kotlin.whatsnew19": "Kotlin 1.9.0",
  "kotlin.whatsnew1820": "Kotlin 1.8.20",
  "kotlin.whatsnew18": "Kotlin 1.8.0",
  "kotlin.whatsnew1720": "Kotlin 1.7.20",
  "kotlin.whatsnew17": "Kotlin 1.7.0",
  "kotlin.whatsnew1620": "Kotlin 1.6.20",
  "kotlin.whatsnew16": "Kotlin 1.6.0",
  "kotlin.whatsnew1530": "Kotlin 1.5.30",
  "kotlin.whatsnew1520": "Kotlin 1.5.20",
  "kotlin.whatsnew15": "Kotlin 1.5.0",
  "kotlin.whatsnew1430": "Kotlin 1.4.30",
  "kotlin.whatsnew1420": "Kotlin 1.4.20",
  "kotlin.whatsnew14": "Kotlin 1.4.0",
  "kotlin.whatsnew13": "Kotlin 1.3",
  "kotlin.whatsnew12": "Kotlin 1.2",
  "kotlin.whatsnew11": "Kotlin 1.1",
  "kotlin.kotlin-evolution-and-roadmap": "Kotlin 演进与路线图",
  "kotlin.kotlin-language-features-and-proposals": "语言特性与提案",
  "kotlin.kotlin-evolution-principles": "语言演进原则",
  "kotlin.basics": "基础",
  "kotlin.kotlin-by-example": "Kotlin 示例",
  "kotlin.concepts": "概念",
  "kotlin.types": "类型",
  "kotlin.basic-types": "基本类型",
  "kotlin.control-flow": "控制流",
  "kotlin.classes-and-objects": "类与对象",
  "kotlin.functions": "函数",
  "kotlin.lambdas": "lambda 表达式",
  "kotlin.builders": "构建器",
  "kotlin.data-analysis": "数据分析",
  "kotlin.get-started-with-kotlin-notebook": "Kotlin Notebook 入门",
  "kotlin.get-started-with-kotlin-notebooks": "Kotlin Notebooks 入门",
  "kotlin.kotlin-notebook-set-up-env": "1. 设置环境",
  "kotlin.kotlin-notebook-create": "2. 创建你的第一个 Kotlin Notebook",
  "kotlin.kotlin-notebook-add-dependencies": "3. 为你的 Kotlin Notebook 添加依赖项",
  "kotlin.kotlin-notebook-share": "分享你的 Kotlin Notebook",
  "kotlin.data-analysis-notebooks-output-formats": "Kotlin Notebooks 中的输出格式",
  "kotlin.working-with-data-sources": "使用数据源",
  "kotlin.data-analysis-visualization": "Kotlin Notebook 中的数据可视化",
  "kotlin.data-analysis-libraries": "数据分析库",
  "kotlin.platforms": "平台",
  "kotlin.jvm": "JVM",
  "kotlin.spring": "Spring",
  "kotlin.create-a-restful-web-service-with-a-database-using-spring-boot": "使用 Spring Boot 创建基于数据库的 RESTful Web 服务",
  "kotlin.jvm-create-project-with-spring-boot": "创建 Spring Boot 项目",
  "kotlin.jvm-spring-boot-using-crudrepository": "使用 Spring Data CrudRepository",
  "kotlin.spring-framework-documentation-for-kotlin": "Kotlin 的 Spring Framework 文档",
  "kotlin.build-a-web-application-with-spring-boot-and-kotlin-–-tutorial": "使用 Spring Boot 和 Kotlin 构建 Web 应用程序 – 教程",
  "kotlin.create-a-chat-application-with-kotlin-coroutines-and-rsocket-–-tutorial": "使用 Kotlin 协程和 RSocket 创建聊天应用程序 – 教程",
  "kotlin.java-to-kotlin-migration-guides": "Java 到 Kotlin 迁移指南",
  "kotlin.java-to-kotlin-idioms-strings": "字符串",
  "kotlin.java-to-kotlin-collections-guide": "集合",
  "kotlin.java-to-kotlin-nullability-guide": "可空性",
  "kotlin.native": "原生",
  "kotlin.native-c-interop-stability": "C 和 Objective-C 库互操作稳定性",
  "kotlin.c-interop": "C 互操作",
  "kotlin.objective-c-interop": "Objective-C 互操作",
  "kotlin.memory-manager": "内存管理器",
  "kotlin.native-arc-integration": "与 ARC 集成",
  "kotlin.native-migration-guide": "迁移指南",
  "kotlin.reference-and-tips": "参考与提示",
  "kotlin.native-target-support": "目标平台支持",
  "kotlin.native-improving-compilation-time": "优化编译时间",
  "kotlin.native-llvm-passes": "自定义 LLVM passes",
  "kotlin.native-binary-licenses": "二进制许可",
  "kotlin.webassembly-wasm": "WebAssembly (Wasm)",
  "kotlin.javascript": "JavaScript",
  "kotlin.js-ir-compiler": "IR 编译器",
  "kotlin.kotlin-for-the-js-platform": "适用于 JS 平台的 Kotlin",
  "kotlin.scripting": "脚本",
  "kotlin.develop-with-kotlin-multiplatform": "使用 Kotlin Multiplatform 进行开发",
  "kotlin.standard-library": "标准库",
  "kotlin.collections": "集合",
  "kotlin.collections-overview": "概览",
  "kotlin.collection-operations": "操作概览",
  "kotlin.collection-transformations": "转换",
  "kotlin.collection-filtering": "过滤",
  "kotlin.collection-grouping": "分组元素",
  "kotlin.collection-write": "写入操作",
  "kotlin.official-libraries": "官方库",
  "kotlin.coroutines-kotlinx-coroutines": "协程 (kotlinx.coroutines)",
  "kotlin.serialization": "序列化 (kotlinx.serialization)",
  "kotlin.metadata-jvm": "Kotlin Metadata JVM (kotlin-metadata-jvm)",
  "kotlin.lincheck-kotlinx-lincheck": "Lincheck (kotlinx.lincheck)",
  "kotlin.ktor": "Ktor",
  "kotlin.api-reference": "API 参考",
  "kotlin.api-references": "概览",
  "kotlin.standard-library-stdlib": "标准库 (stdlib)",
  "kotlin.test-library-kotlin-test": "测试库 (kotlin.test)",
  "kotlin.serialization-kotlinx-serialization": "序列化 (kotlinx.serialization)",
  "kotlin.kotlin-i-o-library-kotlinx-io": "Kotlin I/O 库 (kotlinx-io)",
  "kotlin.date-and-time-kotlinx-datetime": "日期和时间 (kotlinx-datetime)",
  "kotlin.jvm-metadata-kotlin-metadata-jvm": "JVM Metadata (kotlin-metadata-jvm)",
  "kotlin.kotlin-gradle-plugins-kotlin-gradle-plugin": "Kotlin Gradle 插件 (kotlin-gradle-plugin)",
  "kotlin.language-reference": "语言参考",
  "kotlin.grammar": "语法",
  "kotlin.language-specification": "语言规范",
  "kotlin.tools": "工具",
  "kotlin.build-tools": "构建工具",
  "kotlin.gradle": "概览",
  "kotlin.get-started-with-jvm-gradle-project": "JVM Gradle 项目入门 – 教程",
  "kotlin.gradle-compiler-options": "KGP 中的编译器选项",
  "kotlin.gradle-compilation-and-caches": "KGP 中的编译与缓存",
  "kotlin.gradle-binary-compatibility-validation": "KGP 中的二进制兼容性验证",
  "kotlin.dokka": "Dokka",
  "kotlin.kotlin-ide": "Kotlin 开发 IDE",
  "kotlin.code-style-migration-guide": "使用 IntelliJ IDEA 迁移到 Kotlin 代码风格",
  "kotlin.lets-plot": "Kotlin 的 Lets-Plot",
  "kotlin.kotlin-and-ci": "TeamCity",
  "kotlin.kotlin-doc": "KDoc",
  "kotlin.kotlin-osgi": "OSGi",
  "kotlin.compiler-and-plugins": "编译器与插件",
  "kotlin.kotlin-compiler": "Kotlin 编译器",
  "kotlin.command-line": "命令行编译器",
  "kotlin.compiler-reference": "编译器选项",
  "kotlin.kotlin-compiler-plugins": "Kotlin 编译器插件",
  "kotlin.all-open-plugin": "All-open",
  "kotlin.no-arg-plugin": "No-arg",
  "kotlin.sam-with-receiver-plugin": "SAM with receiver",
  "kotlin.kapt": "kapt",
  "kotlin.lombok": "Lombok",
  "kotlin.power-assert": "Power-assert",
  "kotlin.compose-compiler": "Compose 编译器",
  "kotlin.compose-compiler-migration-guide": "编译器迁移指南",
  "kotlin.compose-compiler-options": "编译器选项",
  "kotlin.kotlin-symbol-processing-api": "Kotlin Symbol Processing API",
  "kotlin.ksp-overview": "KSP 概览",
  "kotlin.ksp-quickstart": "快速入门",
  "kotlin.ksp-examples": "示例",
  "kotlin.ksp-reference": "Java 注解处理器作者参考",
  "kotlin.ksp-faq": "常见问题",
  "kotlin.learning-materials": "学习材料",
  "kotlin.learning-materials-overview": "概览",
  "kotlin.kotlin-core-track": "Kotlin 核心课程",
  "kotlin.advent-of-code": "Advent of Code 谜题",
  "kotlin.learn-in-ide-jetbrains-academy": "在 IDE 中学习 (JetBrains Academy)",
  "kotlin.edu-tools-learner": "学习 Kotlin",
  "kotlin.edu-tools-educator": "教授 Kotlin",
  "kotlin.library-authors-guidelines": "库作者指南",
  "kotlin.early-access-preview-eap": "抢先体验预览 (EAP)",
  "kotlin.eap": "参与",
  "kotlin.other-resources": "其他资源",
  "kotlin.kotlin-compatibility-guides": "Kotlin 兼容性指南",
  "kotlin.kotlin-foundation": "Kotlin 基金会",
  "kotlin.language-committee-guidelines": "语言委员会指南",
  "kotlin.submitting-incompatible-changes": "提交不兼容的变更",
  "kotlin.brand-usage": "品牌使用",
  "kotlin.kotlin-foundation-faq": "Kotlin 基金会常见问题",
  "kotlin.google-summer-of-code": "Google 夏日代码之约",
  "kotlin.gsoc-overview": "概览",
  "kotlin.gsoc-2025": "GSoC 2025",
  "kotlin.gsoc-2024": "GSoC 2024",
  "kotlin.gsoc-2023": "GSoC 2023",
  "kotlin.community": "社区",
  "kotlin.press-kit": "媒体资料包",
  "dokka.run-dokka": "运行 Dokka",
  "dokka.output-formats": "输出格式",
  "lincheck.testing-strategies": "测试策略",
  "api-guidelines.api-guidelines-introduction": "简介",
  "api-guidelines.minimizing-mental-complexity": "最小化心智负担",
  "api-guidelines.api-guidelines-minimizing-mental-complexity": "概览",
  "api-guidelines.api-guidelines-backward-compatibility": "向后兼容性",
  "api-guidelines.api-guidelines-informative-documentation": "信息性文档",
  "api-guidelines.api-guidelines-build-for-multiplatform": "为多平台构建",
  "kmp.get-started": "入门",
  "kmp.kotlin-multiplatform-overview": "Kotlin Multiplatform 概览",
  "kmp.why-kotlin-multiplatform": "为何选择 Kotlin Multiplatform",
  "kmp.supported-platforms": "支持的平台",
  "kmp.multiplatform-samples": "多平台示例",
  "kmp.kotlin-multiplatform-roadmap": "KMP 路线图",
  "kmp.compose-multiplatform-ui-framework": "Compose Multiplatform UI 框架",
  "kmp.what-s-new-in-compose-multiplatform": "Compose Multiplatform 新特性",
  "kmp.compose-platform-specifics": "平台差异",
  "kmp.implementing-layouts": "实现布局",
  "kmp.multiplatform-resources": "多平台资源",
  "kmp.compose-multiplatform-resources-setup": "设置与配置",
  "kmp.compose-multiplatform-resources-usage": "访问与使用",
  "kmp.compose-resource-environment": "本地资源环境",
  "kmp.navigation": "导航",
  "kmp.localization": "本地化",
  "kmp.compose-regional-format": "区域格式设置",
  "kmp.compose-rtl": "RTL 语言",
  "kmp.ios-specific-features": "iOS 特有特性",
  "kmp.compose-swiftui-integration": "与 SwiftUI 集成",
  "kmp.compose-uikit-integration": "与 UIKit 集成",
  "kmp.compose-ios-touch": "处理原生 UI 元素的触控",
  "kmp.compose-ios-accessibility": "无障碍支持",
  "kmp.compose-android-only-components": "Android 特有组件",
  "kmp.desktop-specific-components": "桌面特有组件",
  "kmp.compose-desktop-components": "概览",
  "kmp.compose-desktop-mouse-events": "鼠标事件",
  "kmp.compose-desktop-accessibility": "无障碍支持",
  "kmp.compose-desktop-ui-testing": "使用 JUnit 测试 UI",
  "kmp.compose-multiplatform-for-web": "适用于 Web 的 Compose Multiplatform",
  "kmp.releases": "发布",
  "kmp.choose-your-use-case": "选择你的用例",
  "kmp.create-an-app-with-shared-logic-and-ui": "创建共享逻辑和 UI 的应用",
  "kmp.compose-multiplatform-create-first-app": "1. 创建你的 Compose Multiplatform 应用",
  "kmp.compose-multiplatform-explore-composables": "2. 探索可组合项",
  "kmp.compose-multiplatform-modify-project": "3. 修改项目",
  "kmp.compose-multiplatform-new-project": "4. 创建你自己的应用程序",
  "kmp.create-an-app-with-shared-logic-and-native-ui": "创建共享逻辑和原生 UI 的应用",
  "kmp.multiplatform-create-first-app": "1. 创建你的 Kotlin Multiplatform 应用",
  "kmp.multiplatform-update-ui": "2. 更新 UI",
  "kmp.multiplatform-dependencies": "3. 添加依赖项",
  "kmp.multiplatform-upgrade-app": "4. 共享更多逻辑",
  "kmp.multiplatform-wrap-up": "5. 完成你的项目",
  "kmp.multiplatform-integrate-in-existing-app": "让你的应用多平台化",
  "kmp.multiplatform-ktor-sqldelight": "共享数据访问层",
  "kmp.create-kotlin-multiplatform-library": "创建 Kotlin Multiplatform 库",
  "kmp.explore-project-structure": "探索项目结构",
  "kmp.multiplatform-discover-project": "基本项目结构",
  "kmp.multiplatform-advanced-project-structure": "高级项目结构",
  "kmp.multiplatform-project-configuration": "项目配置选项",
  "kmp.share-code": "共享代码",
  "kmp.multiplatform-connect-to-apis": "平台特有 API",
  "kmp.add-dependencies": "添加依赖项",
  "kmp.multiplatform-add-dependencies": "关于多平台库",
  "kmp.multiplatform-android-dependencies": "适用于 Android 目标平台",
  "kmp.multiplatform-ios-dependencies": "适用于 iOS 目标平台",
  "kmp.set-up-ios-integration": "设置 iOS 集成",
  "kmp.multiplatform-ios-integration-overview": "选择集成方法",
  "kmp.multiplatform-spm-export": "远程 SPM 导出",
  "kmp.cocoapods-integration": "CocoaPods 集成",
  "kmp.multiplatform-spm-local-integration": "与 SPM 的本地集成",
  "kmp.compile-artifacts": "编译构件",
  "kmp.multiplatform-run-tests": "测试你的多平台应用",
  "kmp.publish-your-multiplatform-project": "发布你的多平台项目",
  "kmp.multiplatform-publish-lib-setup": "设置库发布",
  "kmp.multiplatform-privacy-manifest": "App Store 隐私清单",
  "kmp.tools": "工具",
  "kmp.multiplatform-dsl-reference": "多平台 Gradle DSL",
  "kmp.amper": "Amper 配置工具",
  "kmp.compatibility": "兼容性",
  "kmp.multiplatform-compatibility-guide": "兼容性指南",
  "kmp.multiplatform-journal": "多平台日志",
  "kmp.cross-platform-mobile-development": "跨平台移动开发",
  "kmp.native-and-cross-platform": "原生与跨平台移动开发",
  "kmp.cross-platform-frameworks": "六个流行的跨平台应用开发框架",
  "kmp.use-cases-examples": "团队如何在生产环境中使用 Kotlin Multiplatform",
  "kmp.multiplatform-reasons-to-try": "采用 Kotlin Multiplatform 的理由",
  "kmp.kotlin-multiplatform-flutter": "Kotlin Multiplatform 与 Flutter",
  "kmp.programming-languages-cross-platform": "跨平台开发编程语言",
  "kmp.choosing-web-target": "选择你的 Web 目标",
  "koog.documentation": "文档",
  "koog.overview": "概览",
  "koog.key-concepts": "关键概念",
  "koog.getting-started": "入门",
  "koog.single-run-agents": "单次运行代理",
  "koog.complex-workflow-agents": "复杂工作流代理",
  "koog.prompt-api": "Prompt API",
  "koog.tools": "工具",
  "koog.built-in-tools": "内置工具",
  "koog.annotation-based-tools": "基于注解的工具",
  "koog.advanced-implementation": "高级实现",
  "koog.agent-events": "代理事件",
  "koog.custom-strategy-graphs": "自定义策略图",
  "koog.pre-defined-nodes-and-components": "预定义节点与组件",
  "koog.history-compression": "历史压缩",
  "koog.model-context-protocol": "模型上下文协议",
  "koog.advanced-usage": "高级用法",
  "koog.structured-data": "结构化数据",
  "koog.streaming-api": "Streaming API",
  "koog.custom-nodes": "自定义节点",
  "koog.llm-sessions-and-manual-history-management": "LLM 会话与手动历史管理",
  "koog.subgraphs": "子图",
  "koog.custom-subgraphs": "自定义子图",
  "koog.embeddings": "嵌入",
  "koog.features": "特性",
  "koog.tracing": "追踪",
  "koog.memory": "内存",
  "koog.testing": "测试",
  "koog.examples": "示例",
  "koog.api-reference": "API 参考",
  "coil.overview": "概览",
  "coil.getting-started": "入门",
  "coil.compose": "Compose",
  "coil.network-images": "网络图片",
  "coil.image-loaders": "图片加载器",
  "coil.image-requests": "图片请求",
  "coil.extending-the-image-pipeline": "扩展图像流水线",
  "coil.gifs": "GIF 图像",
  "coil.svgs": "SVG 图像",
  "coil.video-frames": "视频帧",
  "coil.testing": "测试",
  "coil.recipes": "示例方案",
  "coil.faq": "常见问题",
  "coil.java-compatibility": "Java 兼容性",
  "coil.migrating-from-glide/picasso": "从 Glide/Picasso 迁移",
  "coil.upgrading-to-coil2": "升级到 Coil 2.x",
  "coil.upgrading-to-Coil3": "升级到 Coil 3.x",
  "coil.works-with-coil": "与 Coil 配合使用",
  "coil.api": "API ⏏",
  "coil.wasm-sample": "Wasm 示例 ⏏",
  "coil.changelog": "更新日志",
  "coil.code-of-conduct": "行为准则",
  "ktor.ktor-server": "Ktor Server",
  "ktor.getting-started-with-ktor-server": "Ktor Server 入门",
  "ktor.server-requests-and-responses": "处理请求与生成响应",
  "ktor.server-create-restful-apis": "创建 RESTful API",
  "ktor.server-create-website": "创建网站",
  "ktor.server-create-websocket-application": "创建 WebSocket 应用程序",
  "ktor.server-integrate-database": "集成数据库",
  "ktor.developing-applications": "开发应用程序",
  "ktor.creating-and-configuring-a-server": "创建与配置服务器",
  "ktor.server-dependencies": "添加依赖项",
  "ktor.server-engines": "引擎",
  "ktor.server-plugins": "插件",
  "ktor.server-ssl": "SSL 与证书",
  "ktor.server-logging": "日志",
  "ktor.routing": "路由",
  "ktor.requests": "请求",
  "ktor.responses": "响应",
  "ktor.server-serialization": "内容协商与序列化",
  "ktor.serving-content": "内容服务",
  "ktor.server-auth": "认证与授权",
  "ktor.server-basic-auth": "基本认证",
  "ktor.server-digest-auth": "摘要认证",
  "ktor.server-bearer-auth": "Bearer 认证",
  "ktor.server-form-based-auth": "基于表单的认证",
  "ktor.server-session-auth": "会话认证",
  "ktor.http": "HTTP",
  "ktor.server-websockets": "WebSockets",
  "ktor.server-websocket-serialization": "WebSockets 序列化",
  "ktor.server-server-sent-events": "Server-Sent Events",
  "ktor.monitoring": "监控",
  "ktor.server-call-id": "追踪请求",
  "ktor.administration": "管理",
  "ktor.running-and-debugging": "运行与调试",
  "ktor.server-testing": "测试",
  "ktor.packaging": "打包",
  "ktor.creating-fat-jars": "创建 Fat JAR",
  "ktor.containerizing": "容器化",
  "ktor.publishing": "发布",
  "ktor.extending-ktor": "扩展 Ktor",
  "ktor.server-custom-plugins": "自定义插件",
  "ktor.ktor-client": "Ktor Client",
  "ktor.getting-started-with-ktor-client": "Ktor Client 入门",
  "ktor.setting-up-a-client": "设置客户端",
  "ktor.client-dependencies": "添加依赖项",
  "ktor.client-engines": "引擎",
  "ktor.client-plugins": "插件",
  "ktor.client-ssl": "SSL",
  "ktor.client-serialization": "内容协商与序列化",
  "ktor.client-auth": "认证与授权",
  "ktor.client-basic-auth": "基本认证",
  "ktor.client-digest-auth": "摘要认证",
  "ktor.client-bearer-auth": "Bearer 认证",
  "ktor.client-logging": "日志",
  "ktor.client-websockets": "WebSockets",
  "ktor.client-websocket-serialization": "WebSockets 序列化",
  "ktor.client-server-sent-events": "Server-Sent Events",
  "ktor.client-call-id": "追踪请求",
  "ktor.client-custom-plugins": "自定义插件",
  "ktor.client-testing": "测试",
  "ktor.integrations": "集成",
  "ktor.releases": "发布",
  "ktor.migrating-from-other-frameworks": "从其他框架迁移",
  "ktor.other-resources": "其他资源",
  "ktor.community-resources": "社区资源",
  "koog.class-based-tools": "基于类的工具",
  "koog.agent-strategies": "代理策略",
  "koog.parallel-node-execution": "并行节点执行",
  "koog.model-capabilities": "模型能力",
  "koog.content-moderation": "内容审核",
  "koog.ranked-document-storage": "排序文档存储",
  "koog.agent-persistency": "代理持久性",
  "koog.opentelemetry": "OpenTelemetry",
  "kotlin.native-binary-options": "二进制选项",
  "kotlin.kotlin-tour": "Kotlin 导览",
  "kmp.what-s-next-for-kmp": "KMP 的后续发展",
  "kmp.what-s-new": "新特性",
  "kmp.whats-new-compose-190": "Compose Multiplatform 1.9.1",
  "kmp.whats-new-compose-180": "Compose Multiplatform 1.8.2",
  "kmp.whats-new-compose-170": "Compose Multiplatform 1.7.3",
  "kmp.whats-new-compose-1610": "Compose Multiplatform 1.6.10",
  "kmp.whats-new-compose-160": "Compose Multiplatform 1.6.0",
  "koog.predefined-strategies": "预定义策略",
  "koog.data-transfer-between-nodes": "节点间数据传输",
  "koog.backend-framework-integrations": "后端框架集成",
  "koog.ktor": "Ktor",
  "koog.spring-boot": "Spring Boot",
  "koog.langfuse-exporter": "Langfuse Exporter",
  "koog.weave-exporter": "Weave Exporter",
  "koog.attachments": "附件",
  "koog.banking": "银行",
  "koog.bedrockagent": "BedrockAgent",
  "koog.calculator": "计算器",
  "koog.chess": "国际象棋",
  "koog.guesser": "猜谜者",
  "koog.langfuse": "Langfuse",
  "koog.mcp-google-maps": "MCP - Google Maps",
  "koog.mcp-playwright": "MCP - Playwright",
  "koog.mcp-unity": "MCP - Unity",
  "koog.vaccumagent": "VaccumAgent",
  "koog.weave": "Weave",
  "kotlin.whatsnew2220": "Kotlin 2.2.20",
  "kotlin.native-swift-export": "Swift 互操作",
  "ktor.server-opentelemetry": "使用 OpenTelemetry 进行分布式追踪",
  "ktor.client-opentelemetry": "使用 OpenTelemetry 进行分布式追踪",
  "kmp.kotlin-multiplatform-react-native": "Kotlin Multiplatform 与 React Native",
  "koog.act-agent-api": "Act Agent API",
  "koog.structured-output": "结构化输出",
  "koog.why-koog": "为何选择 Koog",
  "koog.functional-agents": "函数式代理",
  "koog.a2a-protocol": "A2A Protocol",
  "koog.a2a-server-implementation": "A2A server implementation",
  "koog.a2a-client-implementation": "A2A client implementation",
  "koog.a2a-and-koog-integration": "A2A and Koog integration",
  "koog.agent-persistence": "代理持久性"
}