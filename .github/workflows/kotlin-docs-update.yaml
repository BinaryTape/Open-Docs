name: Kotlin docs update

on:
  schedule:
    - cron: '0 0 * * 0'  # Run every Sunday at 0:00 UTC (Manual trigger right now because of the convertion is unstable)
  workflow_dispatch:  # Allow manual trigger

permissions:
  contents: write

jobs:
  kotlin-docs-update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref || github.ref_name }}
          fetch-depth: 0  # Get complete history for diff comparison

      - name: Checkout Kotlin repository
        uses: actions/checkout@v4
        with:
          repository: JetBrains/kotlin-web-site
          path: kotlin-repo

      - name: Checkout Kotlinx.Coroutines repository
        uses: actions/checkout@v4
        with:
          repository: Kotlin/kotlinx.coroutines
          path: coroutines-repo

      - name: Checkout Dokka repository
        uses: actions/checkout@v4
        with:
          repository: Kotlin/dokka
          path: dokka-repo

      - name: Checkout Lincheck repository
        uses: actions/checkout@v4
        with:
          repository: JetBrains/lincheck
          path: lincheck-repo

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install @google/genai

      # CHECK

      - name: Check last run timestamp for Kotlin
        id: last-run-kotlin
        run: |
          if [ -f ".github/last_check_kotlin.txt" ]; then
            echo "first_run=false" >> $GITHUB_OUTPUT
            echo "last_commit=$(cat .github/last_check_kotlin.txt)" >> $GITHUB_OUTPUT
          else
            echo "first_run=true" >> $GITHUB_OUTPUT
          fi

      - name: Check last run timestamp for Kotlinx.Coroutines
        id: last-run-coroutines
        run: |
          if [ -f ".github/last_check_coroutines.txt" ]; then
            echo "first_run=false" >> $GITHUB_OUTPUT
            echo "last_commit=$(cat .github/last_check_coroutines.txt)" >> $GITHUB_OUTPUT
          else
            echo "first_run=true" >> $GITHUB_OUTPUT
          fi

      - name: Check last run timestamp for Dokka
        id: last-run-dokka
        run: |
          if [ -f ".github/last_check_dokka.txt" ]; then
            echo "first_run=false" >> $GITHUB_OUTPUT
            echo "last_commit=$(cat .github/last_check_dokka.txt)" >> $GITHUB_OUTPUT
          else
            echo "first_run=true" >> $GITHUB_OUTPUT
          fi

      - name: Check last run timestamp for Lincheck
        id: last-run-lincheck
        run: |
          if [ -f ".github/last_check_lincheck.txt" ]; then
            echo "first_run=false" >> $GITHUB_OUTPUT
            echo "last_commit=$(cat .github/last_check_lincheck.txt)" >> $GITHUB_OUTPUT
          else
            echo "first_run=true" >> $GITHUB_OUTPUT
          fi

      # GET COMMIT

      - name: Get current commit for Kotlin
        id: current-commit-kotlin
        run: |
          cd kotlin-repo
          echo "current_commit=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: Get current commit for Kotlinx.Coroutines
        id: current-commit-coroutines
        run: |
          cd coroutines-repo
          echo "current_commit=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: Get current commit for Dokka
        id: current-commit-dokka
        run: |
          cd dokka-repo
          echo "current_commit=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      - name: Get current commit for Lincheck
        id: current-commit-lincheck
        run: |
          cd lincheck-repo
          echo "current_commit=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      # GET MARKDOWN

      - name: Get changed markdown files for Kotlin
        id: changed-files-kotlin
        if: steps.last-run-kotlin.outputs.first_run == 'false' || steps.last-run-kotlin.outputs.last_commit != steps.current-commit-kotlin.outputs.current_commit
        uses: tj-actions/changed-files@v46.0.3
        with:
          path: kotlin-repo
          base_sha: ${{ steps.last-run-kotlin.outputs.last_commit }}
          files: |
            docs/topics/**/*.md

      - name: Get changed markdown files for Kotlinx.Coroutines
        id: changed-files-coroutines
        if: steps.last-run-coroutines.outputs.first_run == 'false' || steps.last-run-coroutines.outputs.last_commit != steps.current-commit-coroutines.outputs.current_commit
        uses: tj-actions/changed-files@v46.0.3
        with:
          path: coroutines-repo
          base_sha: ${{ steps.last-run-coroutines.outputs.last_commit }}
          files: |
            docs/topics/**/*.md

      - name: Get changed markdown files for Dokka
        id: changed-files-dokka
        if: steps.last-run-dokka.outputs.first_run == 'false' || steps.last-run-dokka.outputs.last_commit != steps.current-commit-dokka.outputs.current_commit
        uses: tj-actions/changed-files@v46.0.3
        with:
          path: dokka-repo
          base_sha: ${{ steps.last-run-dokka.outputs.last_commit }}
          files: |
            docs/topics/**/*.md

      - name: Get changed markdown files for Lincheck
        id: changed-files-lincheck
        if: steps.last-run-lincheck.outputs.first_run == 'false' || steps.last-run-lincheck.outputs.last_commit != steps.current-commit-lincheck.outputs.current_commit
        uses: tj-actions/changed-files@v46.0.3
        with:
          path: lincheck-repo
          base_sha: ${{ steps.last-run-lincheck.outputs.last_commit }}
          files: |
            docs/topics/**/*.md

      # GET MARKDOWN (FIRST)

      - name: Get all markdown files for Kotlin (first run)
        id: all-files-kotlin
        if: steps.last-run-kotlin.outputs.first_run == 'true'
        run: |
          cd kotlin-repo
          ALL_FILES=$(find docs/topics -name "*.md" | tr '\n' ' ' | sed 's/ $//')
          echo "all_changed_files=$ALL_FILES" >>  $GITHUB_OUTPUT

      - name: Get all markdown files for Kotlinx.Coroutines (first run)
        id: all-files-coroutines
        if: steps.last-run-coroutines.outputs.first_run == 'true'
        run: |
          cd coroutines-repo
          ALL_FILES=$(find docs/topics -name "*.md" | tr '\n' ' ' | sed 's/ $//')
          echo "all_changed_files=$ALL_FILES" >>  $GITHUB_OUTPUT

      - name: Get all markdown files for Dokka (first run)
        id: all-files-dokka
        if: steps.last-run-dokka.outputs.first_run == 'true'
        run: |
          cd dokka-repo
          ALL_FILES=$(find docs/topics -name "*.md" | tr '\n' ' ' | sed 's/ $//')
          echo "all_changed_files=$ALL_FILES" >>  $GITHUB_OUTPUT

      - name: Get all markdown files for Lincheck (first run)
        id: all-files-lincheck
        if: steps.last-run-lincheck.outputs.first_run == 'true'
        run: |
          cd lincheck-repo
          ALL_FILES=$(find docs/topics -name "*.md" | tr '\n' ' ' | sed 's/ $//')
          echo "all_changed_files=$ALL_FILES" >>  $GITHUB_OUTPUT

      # PREPARE

      - name: Prepare files for translation
        id: prepare-translation
        run: |
          # Process Kotlin repository files
          if [ "${{ steps.last-run-kotlin.outputs.first_run }}" == "true" ]; then
            # First run - use all files
            echo "KOTLIN_CHANGED_FILES=${{ steps.all-files-kotlin.outputs.all_changed_files }}" >> $GITHUB_ENV
            echo "kotlin_any_changed=true" >> $GITHUB_OUTPUT
          else
            # Subsequent runs - use changed files
            echo "KOTLIN_CHANGED_FILES=${{ steps.changed-files-kotlin.outputs.all_changed_files }}" >> $GITHUB_ENV
          
            if [ -n "${{ steps.changed-files-kotlin.outputs.all_changed_files }}" ]; then
              echo "kotlin_any_changed=true" >> $GITHUB_OUTPUT
            else
              echo "kotlin_any_changed=false" >> $GITHUB_OUTPUT
            fi
          fi
          
          # Process Kotlinx.Coroutines repository files
          if [ "${{ steps.last-run-coroutines.outputs.first_run }}" == "true" ]; then
            # First run - use all files
            echo "COROUTINES_CHANGED_FILES=${{ steps.all-files-coroutines.outputs.all_changed_files }}" >> $GITHUB_ENV
            echo "coroutines_any_changed=true" >> $GITHUB_OUTPUT
          else
            # Subsequent runs - use changed files
            echo "COROUTINES_CHANGED_FILES=${{ steps.changed-files-coroutines.outputs.all_changed_files }}" >> $GITHUB_ENV
          
            if [ -n "${{ steps.changed-files-coroutines.outputs.all_changed_files }}" ]; then
              echo "coroutines_any_changed=true" >> $GITHUB_OUTPUT
            else
              echo "coroutines_any_changed=false" >> $GITHUB_OUTPUT
            fi
          fi
          
          # Process Dokka repository files
          if [ "${{ steps.last-run-dokka.outputs.first_run }}" == "true" ]; then
            # First run - use all files
            echo "DOKKA_CHANGED_FILES=${{ steps.all-files-dokka.outputs.all_changed_files }}" >> $GITHUB_ENV
            echo "dokka_any_changed=true" >> $GITHUB_OUTPUT
          else
            # Subsequent runs - use changed files
            echo "DOKKA_CHANGED_FILES=${{ steps.changed-files-dokka.outputs.all_changed_files }}" >> $GITHUB_ENV
          
            if [ -n "${{ steps.changed-files-dokka.outputs.all_changed_files }}" ]; then
              echo "dokka_any_changed=true" >> $GITHUB_OUTPUT
            else
              echo "dokka_any_changed=false" >> $GITHUB_OUTPUT
            fi
          fi
          
          # Process Lincheck repository files
          if [ "${{ steps.last-run-lincheck.outputs.first_run }}" == "true" ]; then
            # First run - use all files
            echo "LINCHECK_CHANGED_FILES=${{ steps.all-files-lincheck.outputs.all_changed_files }}" >> $GITHUB_ENV
            echo "lincheck_any_changed=true" >> $GITHUB_OUTPUT
          else
            # Subsequent runs - use changed files
            echo "LINCHECK_CHANGED_FILES=${{ steps.changed-files-lincheck.outputs.all_changed_files }}" >> $GITHUB_ENV
          
            if [ -n "${{ steps.changed-files-lincheck.outputs.all_changed_files }}" ]; then
              echo "lincheck_any_changed=true" >> $GITHUB_OUTPUT
            else
              echo "lincheck_any_changed=false" >> $GITHUB_OUTPUT
            fi
          fi
          
          # Save current commit SHA for future updates
          echo "kotlin_last_commit_sha=${{ steps.current-commit-kotlin.outputs.current_commit }}" >> $GITHUB_OUTPUT
          echo "coroutines_last_commit_sha=${{ steps.current-commit-coroutines.outputs.current_commit }}" >> $GITHUB_OUTPUT
          echo "dokka_last_commit_sha=${{ steps.current-commit-dokka.outputs.current_commit }}" >> $GITHUB_OUTPUT
          echo "lincheck_last_commit_sha=${{ steps.current-commit-lincheck.outputs.current_commit }}" >> $GITHUB_OUTPUT

      # TRANSLATE

      - name: Translate Kotlin docs
        if: steps.prepare-translation.outputs.kotlin_any_changed == 'true'
        env:
          DOC_TYPE: kotlin
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
          CHANGED_FILES: ${{ env.KOTLIN_CHANGED_FILES }}
          REPO_PATH: kotlin-repo
        run: node .github/workflows/translate.mjs

      - name: Translate Kotlinx.Coroutines docs
        if: steps.prepare-translation.outputs.coroutines_any_changed == 'true'
        env:
          DOC_TYPE: kotlin
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
          CHANGED_FILES: ${{ env.COROUTINES_CHANGED_FILES }}
          REPO_PATH: coroutines-repo
        run: node .github/workflows/translate.mjs

      - name: Translate Dokka docs
        if: steps.prepare-translation.outputs.dokka_any_changed == 'true'
        env:
          DOC_TYPE: kotlin
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
          CHANGED_FILES: ${{ env.DOKKA_CHANGED_FILES }}
          REPO_PATH: dokka-repo
        run: node .github/workflows/translate.mjs

      - name: Translate Lincheck docs
        if: steps.prepare-translation.outputs.lincheck_any_changed == 'true'
        env:
          DOC_TYPE: kotlin
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
          CHANGED_FILES: ${{ env.LINCHECK_CHANGED_FILES }}
          REPO_PATH: lincheck-repo
        run: node .github/workflows/translate.mjs

      - name: Create necessary directories
        if: steps.prepare-translation.outputs.kotlin_any_changed == 'true' || steps.prepare-translation.outputs.coroutines_any_changed == 'true' || steps.prepare-translation.outputs.dokka_any_changed == 'true' || steps.prepare-translation.outputs.lincheck_any_changed == 'true'
        run: |
          # Create directories for all languages if they don't exist
          mkdir -p docs/kotlin
          mkdir -p docs/zh-Hant/kotlin
          mkdir -p docs/ko/kotlin
          mkdir -p docs/ja/kotlin
          mkdir -p docs/public/kotlin

      # REORGANIZE

      - name: Reorganize Chinese simplified files
        if: steps.prepare-translation.outputs.kotlin_any_changed == 'true' || steps.prepare-translation.outputs.coroutines_any_changed == 'true' || steps.prepare-translation.outputs.dokka_any_changed == 'true' || steps.prepare-translation.outputs.lincheck_any_changed == 'true'
        run: |
          # Move all Markdown files under topics to the docs directory, flattening the directory structure
          echo "Moving Chinese simplified Markdown files..."
          if [ -d "docs/kotlin/topics" ]; then
            find docs/kotlin/topics -name "*.md" | while read file; do
              # Extract filename (without path)
              filename=$(basename "$file")
              # Move file to target location, overwrite if exists
              echo "Moving: $file -> docs/kotlin/$filename"
              mv -f "$file" "docs/kotlin/$filename"
            done
            # Remove empty topics directory
            rm -rf docs/kotlin/topics
          else
            echo "Directory docs/kotlin/topics does not exist, skipping."
          fi

      - name: Reorganize Chinese traditional files
        if: steps.prepare-translation.outputs.kotlin_any_changed == 'true' || steps.prepare-translation.outputs.coroutines_any_changed == 'true' || steps.prepare-translation.outputs.dokka_any_changed == 'true' || steps.prepare-translation.outputs.lincheck_any_changed == 'true'
        run: |
          # Move all Markdown files under zh-Hant/topics to the docs directory, flattening the directory structure
          echo "Moving Chinese traditional Markdown files..."
          if [ -d "docs/zh-Hant/kotlin/topics" ]; then
            find docs/zh-Hant/kotlin/topics -name "*.md" | while read file; do
              # Extract filename (without path)
              filename=$(basename "$file")
              # Move file to target location, overwrite if exists
              echo "Moving: $file -> docs/zh-Hant/kotlin/$filename"
              mv -f "$file" "docs/zh-Hant/kotlin/$filename"
            done
            # Remove empty topics directory
            rm -rf docs/zh-Hant/kotlin/topics
          else
            echo "Directory docs/zh-Hant/kotlin/topics does not exist, skipping."
          fi

      - name: Reorganize Korean files
        if: steps.prepare-translation.outputs.kotlin_any_changed == 'true' || steps.prepare-translation.outputs.coroutines_any_changed == 'true' || steps.prepare-translation.outputs.dokka_any_changed == 'true' || steps.prepare-translation.outputs.lincheck_any_changed == 'true'
        run: |
          # Move all Markdown files under ko/topics to the docs directory, flattening the directory structure
          echo "Moving Korean Markdown files..."
          if [ -d "docs/ko/kotlin/topics" ]; then
            find docs/ko/kotlin/topics -name "*.md" | while read file; do
              # Extract filename (without path)
              filename=$(basename "$file")
              # Move file to target location, overwrite if exists
              echo "Moving: $file -> docs/ko/kotlin/$filename"
              mv -f "$file" "docs/ko/kotlin/$filename"
            done
            # Remove empty topics directory
            rm -rf docs/ko/kotlin/topics
          else
            echo "Directory docs/ko/kotlin/topics does not exist, skipping."
          fi

      - name: Reorganize Japanese files
        if: steps.prepare-translation.outputs.kotlin_any_changed == 'true' || steps.prepare-translation.outputs.coroutines_any_changed == 'true' || steps.prepare-translation.outputs.dokka_any_changed == 'true' || steps.prepare-translation.outputs.lincheck_any_changed == 'true'
        run: |
          # Move all Markdown files under ja/topics to the docs directory, flattening the directory structure
          echo "Moving Japanese Markdown files..."
          if [ -d "docs/ja/kotlin/topics" ]; then
            find docs/ja/kotlin/topics -name "*.md" | while read file; do
              # Extract filename (without path)
              filename=$(basename "$file")
              # Move file to target location, overwrite if exists
              echo "Moving: $file -> docs/ja/kotlin/$filename"
              mv -f "$file" "docs/ja/kotlin/$filename"
            done
            # Remove empty topics directory
            rm -rf docs/ja/kotlin/topics
          else
            echo "Directory docs/ja/kotlin/topics does not exist, skipping."
          fi


      - name: Copy image files
        if: steps.prepare-translation.outputs.kotlin_any_changed == 'true' || steps.prepare-translation.outputs.coroutines_any_changed == 'true' || steps.prepare-translation.outputs.dokka_any_changed == 'true' || steps.prepare-translation.outputs.lincheck_any_changed == 'true'
        run: |
          # 创建目标目录
          mkdir -p docs/public/kotlin

          # 复制 Kotlin 仓库图片
          if [ "${{ steps.prepare-translation.outputs.kotlin_any_changed }}" == "true" ]; then
            echo "Copying Kotlin image files..."
            if [ -d "kotlin-repo/docs/images" ]; then
              # 查找所有图片文件并复制到目标目录，扁平化目录结构
              find kotlin-repo/docs/images -type f | while read img_file; do
                # 提取文件名（不含路径）
                img_filename=$(basename "$img_file")
                # 复制文件到目标位置，如果存在则覆盖
                echo "Copying: $img_file -> docs/public/kotlin/$img_filename"
                cp -f "$img_file" "docs/public/kotlin/$img_filename"
              done
              echo "Copied Kotlin image files to docs/public/kotlin/"
            else
              echo "Warning: kotlin-repo/docs/images directory does not exist"
            fi
          fi

          # 复制 Kotlinx.Coroutines 仓库图片
          if [ "${{ steps.prepare-translation.outputs.coroutines_any_changed }}" == "true" ]; then
            echo "Copying Kotlinx.Coroutines image files..."
            if [ -d "coroutines-repo/docs/images" ]; then
              # 查找所有图片文件并复制到目标目录
              find coroutines-repo/docs/images -type f | while read img_file; do
                img_filename=$(basename "$img_file")
                echo "Copying: $img_file -> docs/public/kotlin/$img_filename"
                cp -f "$img_file" "docs/public/kotlin/$img_filename"
              done
              echo "Copied Kotlinx.Coroutines image files to docs/public/kotlin/"
            else
              echo "Warning: coroutines-repo/docs/images directory does not exist"
            fi
          fi

          # 复制 Dokka 仓库图片
          if [ "${{ steps.prepare-translation.outputs.dokka_any_changed }}" == "true" ]; then
            echo "Copying Dokka image files..."
            if [ -d "dokka-repo/docs/images" ]; then
              # 查找所有图片文件并复制到目标目录
              find dokka-repo/docs/images -type f | while read img_file; do
                img_filename=$(basename "$img_file")
                echo "Copying: $img_file -> docs/public/kotlin/$img_filename"
                cp -f "$img_file" "docs/public/kotlin/$img_filename"
              done
              echo "Copied Dokka image files to docs/public/kotlin/"
            else
              echo "Warning: dokka-repo/docs/images directory does not exist"
            fi
          fi

          # 复制 Lincheck 仓库图片
          if [ "${{ steps.prepare-translation.outputs.lincheck_any_changed }}" == "true" ]; then
            echo "Copying Lincheck image files..."
            if [ -d "lincheck-repo/docs/images" ]; then
              # 查找所有图片文件并复制到目标目录
              find lincheck-repo/docs/images -type f | while read img_file; do
                img_filename=$(basename "$img_file")
                echo "Copying: $img_file -> docs/public/kotlin/$img_filename"
                cp -f "$img_file" "docs/public/kotlin/$img_filename"
              done
              echo "Copied Lincheck image files to docs/public/kotlin/"
            else
              echo "Warning: lincheck-repo/docs/images directory does not exist"
            fi
          fi

          echo "File reorganization complete"

      - name: Update last check timestamps
        if: success() && (steps.prepare-translation.outputs.kotlin_any_changed == 'true' || steps.prepare-translation.outputs.coroutines_any_changed == 'true' || steps.prepare-translation.outputs.dokka_any_changed == 'true' || steps.prepare-translation.outputs.lincheck_any_changed == 'true')
        run: |
          # Only update the last checked commit if all previous steps were successful

          # Update Kotlin timestamp if needed
          if [ "${{ steps.prepare-translation.outputs.kotlin_any_changed }}" == "true" ]; then
            echo "${{ steps.current-commit-kotlin.outputs.current_commit }}" > .github/last_check_kotlin.txt
            echo "Updated Kotlin check record timestamp"
          fi

          # Update Kotlinx.Coroutines timestamp if needed
          if [ "${{ steps.prepare-translation.outputs.coroutines_any_changed }}" == "true" ]; then
            echo "${{ steps.current-commit-coroutines.outputs.current_commit }}" > .github/last_check_coroutines.txt
            echo "Updated Kotlinx.Coroutines check record timestamp"
          fi

          # Update Dokka timestamp if needed
          if [ "${{ steps.prepare-translation.outputs.dokka_any_changed }}" == "true" ]; then
            echo "${{ steps.current-commit-dokka.outputs.current_commit }}" > .github/last_check_dokka.txt
            echo "Updated Dokka check record timestamp"
          fi

          # Update Lincheck timestamp if needed
          if [ "${{ steps.prepare-translation.outputs.lincheck_any_changed }}" == "true" ]; then
            echo "${{ steps.current-commit-lincheck.outputs.current_commit }}" > .github/last_check_lincheck.txt
            echo "Updated Lincheck check record timestamp"
          fi


      - name: Commit and push changes
        if: steps.prepare-translation.outputs.kotlin_any_changed == 'true' || steps.prepare-translation.outputs.coroutines_any_changed == 'true' || steps.prepare-translation.outputs.dokka_any_changed == 'true' || steps.prepare-translation.outputs.lincheck_any_changed == 'true'
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          # Exclude files and directories that don't need to be committed
          git add . ':!package.json' ':!package-lock.json' ':!kotlin-repo' ':!kotlin-repo/**' ':!docs/*/kotlin/kotlin-mascot.md' ':!docs/kotlin/kotlin-mascot.md' ':!docs/*/kotlin/debugging.md' ':!docs/kotlin/debugging.md' 
          git commit -m 'Add translated files and update check record'
          git push origin HEAD:${{ github.head_ref || github.ref_name }}

      - name: Create summary
        if: always()
        run: |
          echo "## Documentation Update Detection" >> $GITHUB_STEP_SUMMARY
          
          # Check if commit changed
          echo "### Commit Change Detection" >> $GITHUB_STEP_SUMMARY
          echo "- Kotlin repository: ${{ steps.prepare-translation.outputs.kotlin_any_changed }}" >> $GITHUB_STEP_SUMMARY
          
          # Kotlin repository summary
          echo "### Kotlin Repository" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.last-run-kotlin.outputs.first_run }}" == "true" ]; then
            echo "First run - processed all documentation files" >> $GITHUB_STEP_SUMMARY
            FILES="${{ steps.all-files-kotlin.outputs.all_changed_files }}"
            COUNT=$(echo "$FILES" | wc -w)
            echo "Processed $COUNT files in total" >> $GITHUB_STEP_SUMMARY
          else
            if [ -z "${{ steps.changed-files-kotlin.outputs.all_changed_files }}" ]; then
              echo "No document changes detected" >> $GITHUB_STEP_SUMMARY
            else
              CHANGED_FILES="${{ steps.changed-files-kotlin.outputs.all_changed_files }}"
              COUNT=$(echo "$CHANGED_FILES" | wc -w)
              echo "Detected $COUNT file changes:" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              echo "$CHANGED_FILES" | tr ' ' '\n' >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
            fi
          fi
