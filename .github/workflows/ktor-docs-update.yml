name: Ktor docs update

on:
  schedule:
    - cron: '0 0 * * 0'  # 每周日0:00 UTC运行（由于转换不稳定，目前采用手动触发）
  workflow_dispatch:  # 允许手动触发

permissions:
  contents: write

jobs:
  ktor-docs-update:
    runs-on: ubuntu-latest
    steps:
      - name: 检出主仓库
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref || github.ref_name }}
          fetch-depth: 0  # 获取完整历史以进行差异比较

      - name: 检出Ktor仓库
        uses: actions/checkout@v4
        with:
          repository: ktorio/ktor-documentation
          path: ktor-repo

      - name: 设置Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: 安装依赖
        run: npm install @google/genai

      # 检查

      - name: 检查Ktor上次运行时间戳
        id: last-run-ktor
        run: |
          if [ -f ".github/last_check_ktor.txt" ]; then
            echo "first_run=false" >> $GITHUB_OUTPUT
            echo "last_commit=$(cat .github/last_check_ktor.txt)" >> $GITHUB_OUTPUT
          else
            echo "first_run=true" >> $GITHUB_OUTPUT
          fi

      # 获取提交

      - name: 获取Ktor当前提交
        id: current-commit-ktor
        run: |
          cd ktor-repo
          echo "current_commit=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      # 获取Markdown文件

      - name: 获取Ktor已更改的Markdown文件
        id: changed-files-ktor
        if: steps.last-run-ktor.outputs.first_run == 'false' || steps.last-run-ktor.outputs.last_commit != steps.current-commit-ktor.outputs.current_commit
        uses: tj-actions/changed-files@v46.0.3
        with:
          path: ktor-repo
          base_sha: ${{ steps.last-run-ktor.outputs.last_commit }}
          files: |
            topics/**/*.md

      # 首次运行获取全部Markdown文件

      - name: 获取Ktor所有Markdown文件（首次运行）
        id: all-files-ktor
        if: steps.last-run-ktor.outputs.first_run == 'true'
        run: |
          cd ktor-repo
          ALL_FILES=$(find topics -name "*.md" | tr '\n' ' ' | sed 's/ $//')
          echo "all_changed_files=$ALL_FILES" >>  $GITHUB_OUTPUT

      # 准备

      - name: 准备翻译文件
        id: prepare-translation
        run: |
          # 处理Ktor仓库文件
          if [ "${{ steps.last-run-ktor.outputs.first_run }}" == "true" ]; then
            # 首次运行 - 使用所有文件
            echo "KTOR_CHANGED_FILES=${{ steps.all-files-ktor.outputs.all_changed_files }}" >> $GITHUB_ENV
            echo "ktor_any_changed=true" >> $GITHUB_OUTPUT
          else
            # 后续运行 - 使用已更改文件
            echo "KTOR_CHANGED_FILES=${{ steps.changed-files-ktor.outputs.all_changed_files }}" >> $GITHUB_ENV
          
            if [ -n "${{ steps.changed-files-ktor.outputs.all_changed_files }}" ]; then
              echo "ktor_any_changed=true" >> $GITHUB_OUTPUT
            else
              echo "ktor_any_changed=false" >> $GITHUB_OUTPUT
            fi
          fi
          
          # 保存当前提交SHA用于未来更新
          echo "ktor_last_commit_sha=${{ steps.current-commit-ktor.outputs.current_commit }}" >> $GITHUB_OUTPUT

      # 翻译

      - name: 翻译Ktor文档
        if: steps.prepare-translation.outputs.ktor_any_changed == 'true'
        env:
          DOC_TYPE: ktor
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
          CHANGED_FILES: ${{ env.KTOR_CHANGED_FILES }}
          REPO_PATH: ktor-repo
        run: node .github/workflows/translate.mjs

      - name: 创建必要的目录
        if: steps.prepare-translation.outputs.ktor_any_changed == 'true'
        run: |
          # 为所有语言创建目录（如果不存在）
          mkdir -p docs/ktor
          mkdir -p docs/zh-Hant/ktor
          mkdir -p docs/ko/ktor
          mkdir -p docs/ja/ktor
          mkdir -p docs/public/ktor

      # 重组织

      - name: 重组织简体中文文件
        if: steps.prepare-translation.outputs.ktor_any_changed == 'true'
        run: |
          # 将topics下的所有Markdown文件移动到docs目录，扁平化目录结构
          echo "移动简体中文Markdown文件..."
          if [ -d "docs/topics" ]; then
            find docs/topics -name "*.md" | while read file; do
              # 提取文件名（不含路径）
              filename=$(basename "$file")
              # 移动文件到目标位置，如果存在则覆盖
              echo "移动: $file -> docs/ktor/$filename"
              mv -f "$file" "docs/ktor/$filename"
            done
            # 删除空的topics目录
            rm -rf docs/ktor/topics
          else
            echo "目录docs/ktor/topics不存在，跳过。"
          fi

      - name: 重组织繁体中文文件
        if: steps.prepare-translation.outputs.ktor_any_changed == 'true'
        run: |
          # 将zh-Hant/topics下的所有Markdown文件移动到docs目录，扁平化目录结构
          echo "移动繁体中文Markdown文件..."
          if [ -d "docs/zh-Hant/topics" ]; then
            find docs/zh-Hant/topics -name "*.md" | while read file; do
              # 提取文件名（不含路径）
              filename=$(basename "$file")
              # 移动文件到目标位置，如果存在则覆盖
              echo "移动: $file -> docs/zh-Hant/ktor/$filename"
              mv -f "$file" "docs/zh-Hant/ktor/$filename"
            done
            # 删除空的topics目录
            rm -rf docs/zh-Hant/ktor/topics
          else
            echo "目录docs/zh-Hant/ktor/topics不存在，跳过。"
          fi

      - name: 重组织韩文文件
        if: steps.prepare-translation.outputs.ktor_any_changed == 'true'
        run: |
          # 将ko/topics下的所有Markdown文件移动到docs目录，扁平化目录结构
          echo "移动韩文Markdown文件..."
          if [ -d "docs/ko/topics" ]; then
            find docs/ko/topics -name "*.md" | while read file; do
              # 提取文件名（不含路径）
              filename=$(basename "$file")
              # 移动文件到目标位置，如果存在则覆盖
              echo "移动: $file -> docs/ko/ktor/$filename"
              mv -f "$file" "docs/ko/ktor/$filename"
            done
            # 删除空的topics目录
            rm -rf docs/ko/ktor/topics
          else
            echo "目录docs/ko/ktor/topics不存在，跳过。"
          fi

      - name: 重组织日文文件
        if: steps.prepare-translation.outputs.ktor_any_changed == 'true'
        run: |
          # 将ja/topics下的所有Markdown文件移动到docs目录，扁平化目录结构
          echo "移动日文Markdown文件..."
          if [ -d "docs/ja/topics" ]; then
            find docs/ja/topics -name "*.md" | while read file; do
              # 提取文件名（不含路径）
              filename=$(basename "$file")
              # 移动文件到目标位置，如果存在则覆盖
              echo "移动: $file -> docs/ja/ktor/$filename"
              mv -f "$file" "docs/ja/ktor/$filename"
            done
            # 删除空的topics目录
            rm -rf docs/ja/ktor/topics
          else
            echo "目录docs/ja/ktor/topics不存在，跳过。"
          fi

      - name: 复制图片文件
        if: steps.prepare-translation.outputs.ktor_any_changed == 'true'
        run: |
          # 创建目标目录
          mkdir -p docs/public/ktor

          # 复制Ktor仓库图片
          if [ "${{ steps.prepare-translation.outputs.ktor_any_changed }}" == "true" ]; then
            echo "复制Ktor图片文件..."
            if [ -d "ktor-repo/images" ]; then
              # 查找所有图片文件并复制到目标目录，扁平化目录结构
              find ktor-repo/images -type f | while read img_file; do
                # 提取文件名（不含路径）
                img_filename=$(basename "$img_file")
                # 复制文件到目标位置，如果存在则覆盖
                echo "复制: $img_file -> docs/public/ktor/$img_filename"
                cp -f "$img_file" "docs/public/ktor/$img_filename"
              done
              echo "已将Ktor图片文件复制到docs/public/ktor/"
            else
              echo "警告：ktor-repo/topics/images目录不存在"
            fi
          fi

          echo "文件重组织完成"

      - name: 更新上次检查时间戳
        if: success() && (steps.prepare-translation.outputs.ktor_any_changed == 'true')
        run: |
          # 仅在之前的步骤全部成功时更新上次检查的提交

          # 如果需要，更新Ktor时间戳
          if [ "${{ steps.prepare-translation.outputs.ktor_any_changed }}" == "true" ]; then
            echo "${{ steps.current-commit-ktor.outputs.current_commit }}" > .github/last_check_ktor.txt
            echo "已更新Ktor检查记录时间戳"
          fi

      - name: 提交并推送更改
        if: steps.prepare-translation.outputs.ktor_any_changed == 'true'
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          # 排除不需要提交的文件和目录
          git add . ':!package.json' ':!package-lock.json' ':!ktor-repo' ':!ktor-repo/**'
          git commit -m '添加Ktor翻译文件并更新检查记录'
          git push origin HEAD:${{ github.head_ref || github.ref_name }}

      - name: 创建摘要
        if: always()
        run: |
          echo "## 文档更新检测" >> $GITHUB_STEP_SUMMARY
          
          # 检查提交是否更改
          echo "### 提交更改检测" >> $GITHUB_STEP_SUMMARY
          echo "- Ktor仓库: ${{ steps.prepare-translation.outputs.ktor_any_changed }}" >> $GITHUB_STEP_SUMMARY
          
          # Ktor仓库摘要
          echo "### Ktor仓库" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.last-run-ktor.outputs.first_run }}" == "true" ]; then
            echo "首次运行 - 处理所有文档文件" >> $GITHUB_STEP_SUMMARY
            FILES="${{ steps.all-files-ktor.outputs.all_changed_files }}"
            COUNT=$(echo "$FILES" | wc -w)
            echo "总共处理了 $COUNT 个文件" >> $GITHUB_STEP_SUMMARY
          else
            if [ -z "${{ steps.changed-files-ktor.outputs.all_changed_files }}" ]; then
              echo "未检测到文档更改" >> $GITHUB_STEP_SUMMARY
            else
              CHANGED_FILES="${{ steps.changed-files-ktor.outputs.all_changed_files }}"
              COUNT=$(echo "$CHANGED_FILES" | wc -w)
              echo "检测到 $COUNT 个文件更改:" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              echo "$CHANGED_FILES" | tr ' ' '\n' >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
            fi
          fi
